
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8cc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  0800cab0  0800cab0  0001cab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d874  0800d874  00020a10  2**0
                  CONTENTS
  4 .ARM          00000000  0800d874  0800d874  00020a10  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d874  0800d874  00020a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d874  0800d874  0001d874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d878  0800d878  0001d878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a10  20000000  0800d87c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000a10  0800e28c  00020a10  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef0  0800e28c  00020ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a39  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d66  00000000  00000000  00020a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002498  00000000  00000000  000337e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  00035c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dde  00000000  00000000  00036e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002495  00000000  00000000  00037bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f3d  00000000  00000000  0003a073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fbf5  00000000  00000000  00051fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e90  00000000  00000000  000f1ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f6a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a10 	.word	0x20000a10
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ca98 	.word	0x0800ca98

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a14 	.word	0x20000a14
 8000220:	0800ca98 	.word	0x0800ca98

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af02      	add	r7, sp, #8
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f023 030f 	bic.w	r3, r3, #15
 8000244:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	011b      	lsls	r3, r3, #4
 800024a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800024c:	7b7b      	ldrb	r3, [r7, #13]
 800024e:	f043 030c 	orr.w	r3, r3, #12
 8000252:	b2db      	uxtb	r3, r3
 8000254:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000256:	7b7b      	ldrb	r3, [r7, #13]
 8000258:	f043 0308 	orr.w	r3, r3, #8
 800025c:	b2db      	uxtb	r3, r3
 800025e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000260:	7b3b      	ldrb	r3, [r7, #12]
 8000262:	f043 030c 	orr.w	r3, r3, #12
 8000266:	b2db      	uxtb	r3, r3
 8000268:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800026a:	7b3b      	ldrb	r3, [r7, #12]
 800026c:	f043 0308 	orr.w	r3, r3, #8
 8000270:	b2db      	uxtb	r3, r3
 8000272:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000274:	bf00      	nop
 8000276:	4825      	ldr	r0, [pc, #148]	; (800030c <lcd_send_cmd+0xd8>)
 8000278:	f00a f8fd 	bl	800a476 <HAL_I2C_GetError>
 800027c:	4603      	mov	r3, r0
 800027e:	2b04      	cmp	r3, #4
 8000280:	d0f9      	beq.n	8000276 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000282:	bf00      	nop
 8000284:	4821      	ldr	r0, [pc, #132]	; (800030c <lcd_send_cmd+0xd8>)
 8000286:	f00a f8e9 	bl	800a45c <HAL_I2C_GetState>
 800028a:	4603      	mov	r3, r0
 800028c:	2b20      	cmp	r3, #32
 800028e:	d1f9      	bne.n	8000284 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000290:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <lcd_send_cmd+0xdc>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d116      	bne.n	80002c6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000298:	2300      	movs	r3, #0
 800029a:	73fb      	strb	r3, [r7, #15]
 800029c:	e00f      	b.n	80002be <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	3310      	adds	r3, #16
 80002a2:	443b      	add	r3, r7
 80002a4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	f022 0208 	bic.w	r2, r2, #8
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	3310      	adds	r3, #16
 80002b2:	443b      	add	r3, r7
 80002b4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002b8:	7bfb      	ldrb	r3, [r7, #15]
 80002ba:	3301      	adds	r3, #1
 80002bc:	73fb      	strb	r3, [r7, #15]
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	d9ec      	bls.n	800029e <lcd_send_cmd+0x6a>
 80002c4:	e015      	b.n	80002f2 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80002c6:	2300      	movs	r3, #0
 80002c8:	73bb      	strb	r3, [r7, #14]
 80002ca:	e00f      	b.n	80002ec <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80002cc:	7bbb      	ldrb	r3, [r7, #14]
 80002ce:	3310      	adds	r3, #16
 80002d0:	443b      	add	r3, r7
 80002d2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002d6:	7bbb      	ldrb	r3, [r7, #14]
 80002d8:	f042 0208 	orr.w	r2, r2, #8
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	3310      	adds	r3, #16
 80002e0:	443b      	add	r3, r7
 80002e2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002e6:	7bbb      	ldrb	r3, [r7, #14]
 80002e8:	3301      	adds	r3, #1
 80002ea:	73bb      	strb	r3, [r7, #14]
 80002ec:	7bbb      	ldrb	r3, [r7, #14]
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	d9ec      	bls.n	80002cc <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002f2:	f107 0208 	add.w	r2, r7, #8
 80002f6:	2364      	movs	r3, #100	; 0x64
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2304      	movs	r3, #4
 80002fc:	214e      	movs	r1, #78	; 0x4e
 80002fe:	4803      	ldr	r0, [pc, #12]	; (800030c <lcd_send_cmd+0xd8>)
 8000300:	f009 fc4c 	bl	8009b9c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000a58 	.word	0x20000a58
 8000310:	20000a2c 	.word	0x20000a2c

08000314 <lcd_send_data>:

void lcd_send_data (char data) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af02      	add	r7, sp, #8
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	f023 030f 	bic.w	r3, r3, #15
 8000324:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	011b      	lsls	r3, r3, #4
 800032a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800032c:	7b7b      	ldrb	r3, [r7, #13]
 800032e:	f043 030d 	orr.w	r3, r3, #13
 8000332:	b2db      	uxtb	r3, r3
 8000334:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000336:	7b7b      	ldrb	r3, [r7, #13]
 8000338:	f043 0309 	orr.w	r3, r3, #9
 800033c:	b2db      	uxtb	r3, r3
 800033e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000340:	7b3b      	ldrb	r3, [r7, #12]
 8000342:	f043 030d 	orr.w	r3, r3, #13
 8000346:	b2db      	uxtb	r3, r3
 8000348:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800034a:	7b3b      	ldrb	r3, [r7, #12]
 800034c:	f043 0309 	orr.w	r3, r3, #9
 8000350:	b2db      	uxtb	r3, r3
 8000352:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000354:	bf00      	nop
 8000356:	4825      	ldr	r0, [pc, #148]	; (80003ec <lcd_send_data+0xd8>)
 8000358:	f00a f88d 	bl	800a476 <HAL_I2C_GetError>
 800035c:	4603      	mov	r3, r0
 800035e:	2b04      	cmp	r3, #4
 8000360:	d0f9      	beq.n	8000356 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000362:	bf00      	nop
 8000364:	4821      	ldr	r0, [pc, #132]	; (80003ec <lcd_send_data+0xd8>)
 8000366:	f00a f879 	bl	800a45c <HAL_I2C_GetState>
 800036a:	4603      	mov	r3, r0
 800036c:	2b20      	cmp	r3, #32
 800036e:	d1f9      	bne.n	8000364 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <lcd_send_data+0xdc>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d116      	bne.n	80003a6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]
 800037c:	e00f      	b.n	800039e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	3310      	adds	r3, #16
 8000382:	443b      	add	r3, r7
 8000384:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	f022 0208 	bic.w	r2, r2, #8
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	3310      	adds	r3, #16
 8000392:	443b      	add	r3, r7
 8000394:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	3301      	adds	r3, #1
 800039c:	73fb      	strb	r3, [r7, #15]
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d9ec      	bls.n	800037e <lcd_send_data+0x6a>
 80003a4:	e015      	b.n	80003d2 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003a6:	2300      	movs	r3, #0
 80003a8:	73bb      	strb	r3, [r7, #14]
 80003aa:	e00f      	b.n	80003cc <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80003ac:	7bbb      	ldrb	r3, [r7, #14]
 80003ae:	3310      	adds	r3, #16
 80003b0:	443b      	add	r3, r7
 80003b2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003b6:	7bbb      	ldrb	r3, [r7, #14]
 80003b8:	f042 0208 	orr.w	r2, r2, #8
 80003bc:	b2d2      	uxtb	r2, r2
 80003be:	3310      	adds	r3, #16
 80003c0:	443b      	add	r3, r7
 80003c2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003c6:	7bbb      	ldrb	r3, [r7, #14]
 80003c8:	3301      	adds	r3, #1
 80003ca:	73bb      	strb	r3, [r7, #14]
 80003cc:	7bbb      	ldrb	r3, [r7, #14]
 80003ce:	2b03      	cmp	r3, #3
 80003d0:	d9ec      	bls.n	80003ac <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003d2:	f107 0208 	add.w	r2, r7, #8
 80003d6:	2364      	movs	r3, #100	; 0x64
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	2304      	movs	r3, #4
 80003dc:	214e      	movs	r1, #78	; 0x4e
 80003de:	4803      	ldr	r0, [pc, #12]	; (80003ec <lcd_send_data+0xd8>)
 80003e0:	f009 fbdc 	bl	8009b9c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000a58 	.word	0x20000a58
 80003f0:	20000a2c 	.word	0x20000a2c

080003f4 <lcd_send_string>:

void lcd_send_string (char *str) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	while (*str) {
 80003fc:	e006      	b.n	800040c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	607a      	str	r2, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff84 	bl	8000314 <lcd_send_data>
	while (*str) {
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1f4      	bne.n	80003fe <lcd_send_string+0xa>
	}
}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af02      	add	r7, sp, #8
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	f023 030f 	bic.w	r3, r3, #15
 8000430:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8000438:	7b7b      	ldrb	r3, [r7, #13]
 800043a:	f043 030d 	orr.w	r3, r3, #13
 800043e:	b2db      	uxtb	r3, r3
 8000440:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000442:	7b7b      	ldrb	r3, [r7, #13]
 8000444:	f043 0309 	orr.w	r3, r3, #9
 8000448:	b2db      	uxtb	r3, r3
 800044a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800044c:	7b3b      	ldrb	r3, [r7, #12]
 800044e:	f043 030d 	orr.w	r3, r3, #13
 8000452:	b2db      	uxtb	r3, r3
 8000454:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8000456:	7b3b      	ldrb	r3, [r7, #12]
 8000458:	f043 0309 	orr.w	r3, r3, #9
 800045c:	b2db      	uxtb	r3, r3
 800045e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000460:	bf00      	nop
 8000462:	4825      	ldr	r0, [pc, #148]	; (80004f8 <lcd_send_char+0xd8>)
 8000464:	f00a f807 	bl	800a476 <HAL_I2C_GetError>
 8000468:	4603      	mov	r3, r0
 800046a:	2b04      	cmp	r3, #4
 800046c:	d0f9      	beq.n	8000462 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800046e:	bf00      	nop
 8000470:	4821      	ldr	r0, [pc, #132]	; (80004f8 <lcd_send_char+0xd8>)
 8000472:	f009 fff3 	bl	800a45c <HAL_I2C_GetState>
 8000476:	4603      	mov	r3, r0
 8000478:	2b20      	cmp	r3, #32
 800047a:	d1f9      	bne.n	8000470 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 800047c:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <lcd_send_char+0xdc>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d116      	bne.n	80004b2 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000484:	2300      	movs	r3, #0
 8000486:	73fb      	strb	r3, [r7, #15]
 8000488:	e00f      	b.n	80004aa <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800048a:	7bfb      	ldrb	r3, [r7, #15]
 800048c:	3310      	adds	r3, #16
 800048e:	443b      	add	r3, r7
 8000490:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	f022 0208 	bic.w	r2, r2, #8
 800049a:	b2d2      	uxtb	r2, r2
 800049c:	3310      	adds	r3, #16
 800049e:	443b      	add	r3, r7
 80004a0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	3301      	adds	r3, #1
 80004a8:	73fb      	strb	r3, [r7, #15]
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d9ec      	bls.n	800048a <lcd_send_char+0x6a>
 80004b0:	e015      	b.n	80004de <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80004b2:	2300      	movs	r3, #0
 80004b4:	73bb      	strb	r3, [r7, #14]
 80004b6:	e00f      	b.n	80004d8 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80004b8:	7bbb      	ldrb	r3, [r7, #14]
 80004ba:	3310      	adds	r3, #16
 80004bc:	443b      	add	r3, r7
 80004be:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004c2:	7bbb      	ldrb	r3, [r7, #14]
 80004c4:	f042 0208 	orr.w	r2, r2, #8
 80004c8:	b2d2      	uxtb	r2, r2
 80004ca:	3310      	adds	r3, #16
 80004cc:	443b      	add	r3, r7
 80004ce:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80004d2:	7bbb      	ldrb	r3, [r7, #14]
 80004d4:	3301      	adds	r3, #1
 80004d6:	73bb      	strb	r3, [r7, #14]
 80004d8:	7bbb      	ldrb	r3, [r7, #14]
 80004da:	2b03      	cmp	r3, #3
 80004dc:	d9ec      	bls.n	80004b8 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80004de:	f107 0208 	add.w	r2, r7, #8
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2304      	movs	r3, #4
 80004e8:	214e      	movs	r1, #78	; 0x4e
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <lcd_send_char+0xd8>)
 80004ec:	f009 fb56 	bl	8009b9c <HAL_I2C_Master_Transmit>
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000a58 	.word	0x20000a58
 80004fc:	20000a2c 	.word	0x20000a2c

08000500 <lcd_init>:

void lcd_init (void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000504:	2002      	movs	r0, #2
 8000506:	f7ff fe95 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800050a:	2028      	movs	r0, #40	; 0x28
 800050c:	f7ff fe92 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000510:	200c      	movs	r0, #12
 8000512:	f7ff fe8f 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000516:	2080      	movs	r0, #128	; 0x80
 8000518:	f7ff fe8c 	bl	8000234 <lcd_send_cmd>
	lcd_backlight(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f000 f86d 	bl	80005fc <lcd_backlight>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}

08000526 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	460a      	mov	r2, r1
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	4613      	mov	r3, r2
 8000534:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d106      	bne.n	800054a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800053c:	79bb      	ldrb	r3, [r7, #6]
 800053e:	337f      	adds	r3, #127	; 0x7f
 8000540:	b2db      	uxtb	r3, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fe76 	bl	8000234 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8000548:	e008      	b.n	800055c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d105      	bne.n	800055c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	3b41      	subs	r3, #65	; 0x41
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fe6c 	bl	8000234 <lcd_send_cmd>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	603a      	str	r2, [r7, #0]
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	460b      	mov	r3, r1
 8000572:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000574:	79ba      	ldrb	r2, [r7, #6]
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4611      	mov	r1, r2
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ffd3 	bl	8000526 <lcd_gotoxy>
	lcd_send_string(str);
 8000580:	6838      	ldr	r0, [r7, #0]
 8000582:	f7ff ff37 	bl	80003f4 <lcd_send_string>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	4603      	mov	r3, r0
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	460b      	mov	r3, r1
 800059a:	71bb      	strb	r3, [r7, #6]
 800059c:	4613      	mov	r3, r2
 800059e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80005a0:	79ba      	ldrb	r2, [r7, #6]
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ffbd 	bl	8000526 <lcd_gotoxy>
    lcd_send_char(ch);
 80005ac:	797b      	ldrb	r3, [r7, #5]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff36 	bl	8000420 <lcd_send_char>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <lcd_clear>:

void lcd_clear(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff fe37 	bl	8000234 <lcd_send_cmd>
    HAL_Delay(2);
 80005c6:	2002      	movs	r0, #2
 80005c8:	f008 fb5c 	bl	8008c84 <HAL_Delay>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	460a      	mov	r2, r1
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	4613      	mov	r3, r2
 80005de:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80005e0:	79ba      	ldrb	r2, [r7, #6]
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	4611      	mov	r1, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff9d 	bl	8000526 <lcd_gotoxy>

    lcd_send_char(' ');
 80005ec:	2020      	movs	r0, #32
 80005ee:	f7ff ff17 	bl	8000420 <lcd_send_char>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <lcd_backlight+0x20>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff fe11 	bl	8000234 <lcd_send_cmd>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000a2c 	.word	0x20000a2c

08000620 <lcd_cursor>:

void lcd_cursor(int state) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d106      	bne.n	800063c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 800062e:	200e      	movs	r0, #14
 8000630:	f7ff fe00 	bl	8000234 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000634:	200f      	movs	r0, #15
 8000636:	f7ff fdfd 	bl	8000234 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800063a:	e002      	b.n	8000642 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 800063c:	200c      	movs	r0, #12
 800063e:	f7ff fdf9 	bl	8000234 <lcd_send_cmd>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000650:	f3bf 8f4f 	dsb	sy
}
 8000654:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <__NVIC_SystemReset+0x24>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800065e:	4904      	ldr	r1, [pc, #16]	; (8000670 <__NVIC_SystemReset+0x24>)
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_SystemReset+0x28>)
 8000662:	4313      	orrs	r3, r2
 8000664:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000666:	f3bf 8f4f 	dsb	sy
}
 800066a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <__NVIC_SystemReset+0x20>
 8000670:	e000ed00 	.word	0xe000ed00
 8000674:	05fa0004 	.word	0x05fa0004

08000678 <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff fdcf 	bl	8000224 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	3301      	adds	r3, #1
 800068a:	4618      	mov	r0, r3
 800068c:	f00c f8c2 	bl	800c814 <malloc>
 8000690:	4603      	mov	r3, r0
 8000692:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d003      	beq.n	80006a2 <copyText+0x2a>
        strcpy(result, text);
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	f00c f9f3 	bl	800ca88 <strcpy>
    }
    return result;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80006b6:	20c8      	movs	r0, #200	; 0xc8
 80006b8:	f008 fae4 	bl	8008c84 <HAL_Delay>
	lcd_clear();
 80006bc:	f7ff ff7e 	bl	80005bc <lcd_clear>
	if(type == 1 && page == 0) {
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d143      	bne.n	800074e <printTemplate+0xa2>
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d140      	bne.n	800074e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 80006cc:	4a9d      	ldr	r2, [pc, #628]	; (8000944 <printTemplate+0x298>)
 80006ce:	2101      	movs	r1, #1
 80006d0:	2001      	movs	r0, #1
 80006d2:	f7ff ff47 	bl	8000564 <lcd_print>
		lcd_print(2, 3, "0");
 80006d6:	4a9c      	ldr	r2, [pc, #624]	; (8000948 <printTemplate+0x29c>)
 80006d8:	2103      	movs	r1, #3
 80006da:	2002      	movs	r0, #2
 80006dc:	f7ff ff42 	bl	8000564 <lcd_print>
		lcd_print(2, 4, "1");
 80006e0:	4a9a      	ldr	r2, [pc, #616]	; (800094c <printTemplate+0x2a0>)
 80006e2:	2104      	movs	r1, #4
 80006e4:	2002      	movs	r0, #2
 80006e6:	f7ff ff3d 	bl	8000564 <lcd_print>
		lcd_print(2, 5, "2");
 80006ea:	4a99      	ldr	r2, [pc, #612]	; (8000950 <printTemplate+0x2a4>)
 80006ec:	2105      	movs	r1, #5
 80006ee:	2002      	movs	r0, #2
 80006f0:	f7ff ff38 	bl	8000564 <lcd_print>
		lcd_print(2, 6, "3");
 80006f4:	4a97      	ldr	r2, [pc, #604]	; (8000954 <printTemplate+0x2a8>)
 80006f6:	2106      	movs	r1, #6
 80006f8:	2002      	movs	r0, #2
 80006fa:	f7ff ff33 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "4");
 80006fe:	4a96      	ldr	r2, [pc, #600]	; (8000958 <printTemplate+0x2ac>)
 8000700:	2107      	movs	r1, #7
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff ff2e 	bl	8000564 <lcd_print>
		lcd_print(2, 10, "5");
 8000708:	4a94      	ldr	r2, [pc, #592]	; (800095c <printTemplate+0x2b0>)
 800070a:	210a      	movs	r1, #10
 800070c:	2002      	movs	r0, #2
 800070e:	f7ff ff29 	bl	8000564 <lcd_print>
		lcd_print(2, 11, "6");
 8000712:	4a93      	ldr	r2, [pc, #588]	; (8000960 <printTemplate+0x2b4>)
 8000714:	210b      	movs	r1, #11
 8000716:	2002      	movs	r0, #2
 8000718:	f7ff ff24 	bl	8000564 <lcd_print>
		lcd_print(2, 12, "7");
 800071c:	4a91      	ldr	r2, [pc, #580]	; (8000964 <printTemplate+0x2b8>)
 800071e:	210c      	movs	r1, #12
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff ff1f 	bl	8000564 <lcd_print>
		lcd_print(2, 13, "8");
 8000726:	4a90      	ldr	r2, [pc, #576]	; (8000968 <printTemplate+0x2bc>)
 8000728:	210d      	movs	r1, #13
 800072a:	2002      	movs	r0, #2
 800072c:	f7ff ff1a 	bl	8000564 <lcd_print>
		lcd_print(2, 14, "9");
 8000730:	4a8e      	ldr	r2, [pc, #568]	; (800096c <printTemplate+0x2c0>)
 8000732:	210e      	movs	r1, #14
 8000734:	2002      	movs	r0, #2
 8000736:	f7ff ff15 	bl	8000564 <lcd_print>
		lcd_print(1, 5, machineID);
 800073a:	4a8d      	ldr	r2, [pc, #564]	; (8000970 <printTemplate+0x2c4>)
 800073c:	2105      	movs	r1, #5
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff ff10 	bl	8000564 <lcd_print>
		lcd_gotoxy(2, 3);
 8000744:	2103      	movs	r1, #3
 8000746:	2002      	movs	r0, #2
 8000748:	f7ff feed 	bl	8000526 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 800074c:	e0f5      	b.n	800093a <printTemplate+0x28e>
	} else if(type == 2) {
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b02      	cmp	r3, #2
 8000752:	d178      	bne.n	8000846 <printTemplate+0x19a>
		if(page == 1) {
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d114      	bne.n	8000784 <printTemplate+0xd8>
			lcd_clear();
 800075a:	f7ff ff2f 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 800075e:	2064      	movs	r0, #100	; 0x64
 8000760:	f008 fa90 	bl	8008c84 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000764:	4a83      	ldr	r2, [pc, #524]	; (8000974 <printTemplate+0x2c8>)
 8000766:	2101      	movs	r1, #1
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff fefb 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800076e:	4a82      	ldr	r2, [pc, #520]	; (8000978 <printTemplate+0x2cc>)
 8000770:	2107      	movs	r1, #7
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff fef6 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000778:	4a80      	ldr	r2, [pc, #512]	; (800097c <printTemplate+0x2d0>)
 800077a:	2101      	movs	r1, #1
 800077c:	2002      	movs	r0, #2
 800077e:	f7ff fef1 	bl	8000564 <lcd_print>
}
 8000782:	e0da      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 2) {
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d114      	bne.n	80007b4 <printTemplate+0x108>
			lcd_clear();
 800078a:	f7ff ff17 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f008 fa78 	bl	8008c84 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000794:	4a77      	ldr	r2, [pc, #476]	; (8000974 <printTemplate+0x2c8>)
 8000796:	2101      	movs	r1, #1
 8000798:	2001      	movs	r0, #1
 800079a:	f7ff fee3 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800079e:	4a76      	ldr	r2, [pc, #472]	; (8000978 <printTemplate+0x2cc>)
 80007a0:	2107      	movs	r1, #7
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff fede 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80007a8:	4a75      	ldr	r2, [pc, #468]	; (8000980 <printTemplate+0x2d4>)
 80007aa:	2101      	movs	r1, #1
 80007ac:	2002      	movs	r0, #2
 80007ae:	f7ff fed9 	bl	8000564 <lcd_print>
}
 80007b2:	e0c2      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 3) {
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	d114      	bne.n	80007e4 <printTemplate+0x138>
			lcd_clear();
 80007ba:	f7ff feff 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80007be:	2064      	movs	r0, #100	; 0x64
 80007c0:	f008 fa60 	bl	8008c84 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80007c4:	4a6b      	ldr	r2, [pc, #428]	; (8000974 <printTemplate+0x2c8>)
 80007c6:	2101      	movs	r1, #1
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff fecb 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80007ce:	4a6a      	ldr	r2, [pc, #424]	; (8000978 <printTemplate+0x2cc>)
 80007d0:	2107      	movs	r1, #7
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff fec6 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80007d8:	4a6a      	ldr	r2, [pc, #424]	; (8000984 <printTemplate+0x2d8>)
 80007da:	2101      	movs	r1, #1
 80007dc:	2002      	movs	r0, #2
 80007de:	f7ff fec1 	bl	8000564 <lcd_print>
}
 80007e2:	e0aa      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 4) {
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d114      	bne.n	8000814 <printTemplate+0x168>
			lcd_clear();
 80007ea:	f7ff fee7 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80007ee:	2064      	movs	r0, #100	; 0x64
 80007f0:	f008 fa48 	bl	8008c84 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80007f4:	4a5f      	ldr	r2, [pc, #380]	; (8000974 <printTemplate+0x2c8>)
 80007f6:	2101      	movs	r1, #1
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff feb3 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80007fe:	4a5e      	ldr	r2, [pc, #376]	; (8000978 <printTemplate+0x2cc>)
 8000800:	2107      	movs	r1, #7
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff feae 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000808:	4a5f      	ldr	r2, [pc, #380]	; (8000988 <printTemplate+0x2dc>)
 800080a:	2101      	movs	r1, #1
 800080c:	2002      	movs	r0, #2
 800080e:	f7ff fea9 	bl	8000564 <lcd_print>
}
 8000812:	e092      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 5) {
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	2b05      	cmp	r3, #5
 8000818:	f040 808f 	bne.w	800093a <printTemplate+0x28e>
			lcd_clear();
 800081c:	f7ff fece 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000820:	2064      	movs	r0, #100	; 0x64
 8000822:	f008 fa2f 	bl	8008c84 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000826:	4a53      	ldr	r2, [pc, #332]	; (8000974 <printTemplate+0x2c8>)
 8000828:	2101      	movs	r1, #1
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff fe9a 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000830:	4a51      	ldr	r2, [pc, #324]	; (8000978 <printTemplate+0x2cc>)
 8000832:	2107      	movs	r1, #7
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff fe95 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800083a:	4a54      	ldr	r2, [pc, #336]	; (800098c <printTemplate+0x2e0>)
 800083c:	2101      	movs	r1, #1
 800083e:	2002      	movs	r0, #2
 8000840:	f7ff fe90 	bl	8000564 <lcd_print>
}
 8000844:	e079      	b.n	800093a <printTemplate+0x28e>
	} else if(type == 3) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b03      	cmp	r3, #3
 800084a:	d176      	bne.n	800093a <printTemplate+0x28e>
		if(page == 1) {
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d114      	bne.n	800087c <printTemplate+0x1d0>
			lcd_clear();
 8000852:	f7ff feb3 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000856:	2064      	movs	r0, #100	; 0x64
 8000858:	f008 fa14 	bl	8008c84 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800085c:	4a4c      	ldr	r2, [pc, #304]	; (8000990 <printTemplate+0x2e4>)
 800085e:	2101      	movs	r1, #1
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff fe7f 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000866:	4a4b      	ldr	r2, [pc, #300]	; (8000994 <printTemplate+0x2e8>)
 8000868:	2107      	movs	r1, #7
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff fe7a 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000870:	4a42      	ldr	r2, [pc, #264]	; (800097c <printTemplate+0x2d0>)
 8000872:	2101      	movs	r1, #1
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff fe75 	bl	8000564 <lcd_print>
}
 800087a:	e05e      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 2) {
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d114      	bne.n	80008ac <printTemplate+0x200>
			lcd_clear();
 8000882:	f7ff fe9b 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000886:	2064      	movs	r0, #100	; 0x64
 8000888:	f008 f9fc 	bl	8008c84 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800088c:	4a40      	ldr	r2, [pc, #256]	; (8000990 <printTemplate+0x2e4>)
 800088e:	2101      	movs	r1, #1
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff fe67 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000896:	4a3f      	ldr	r2, [pc, #252]	; (8000994 <printTemplate+0x2e8>)
 8000898:	2107      	movs	r1, #7
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff fe62 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80008a0:	4a37      	ldr	r2, [pc, #220]	; (8000980 <printTemplate+0x2d4>)
 80008a2:	2101      	movs	r1, #1
 80008a4:	2002      	movs	r0, #2
 80008a6:	f7ff fe5d 	bl	8000564 <lcd_print>
}
 80008aa:	e046      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 3) {
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d114      	bne.n	80008dc <printTemplate+0x230>
			lcd_clear();
 80008b2:	f7ff fe83 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80008b6:	2064      	movs	r0, #100	; 0x64
 80008b8:	f008 f9e4 	bl	8008c84 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80008bc:	4a34      	ldr	r2, [pc, #208]	; (8000990 <printTemplate+0x2e4>)
 80008be:	2101      	movs	r1, #1
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff fe4f 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80008c6:	4a33      	ldr	r2, [pc, #204]	; (8000994 <printTemplate+0x2e8>)
 80008c8:	2107      	movs	r1, #7
 80008ca:	2001      	movs	r0, #1
 80008cc:	f7ff fe4a 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80008d0:	4a2c      	ldr	r2, [pc, #176]	; (8000984 <printTemplate+0x2d8>)
 80008d2:	2101      	movs	r1, #1
 80008d4:	2002      	movs	r0, #2
 80008d6:	f7ff fe45 	bl	8000564 <lcd_print>
}
 80008da:	e02e      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 4) {
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d114      	bne.n	800090c <printTemplate+0x260>
			lcd_clear();
 80008e2:	f7ff fe6b 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80008e6:	2064      	movs	r0, #100	; 0x64
 80008e8:	f008 f9cc 	bl	8008c84 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80008ec:	4a28      	ldr	r2, [pc, #160]	; (8000990 <printTemplate+0x2e4>)
 80008ee:	2101      	movs	r1, #1
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff fe37 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80008f6:	4a27      	ldr	r2, [pc, #156]	; (8000994 <printTemplate+0x2e8>)
 80008f8:	2107      	movs	r1, #7
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff fe32 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000900:	4a21      	ldr	r2, [pc, #132]	; (8000988 <printTemplate+0x2dc>)
 8000902:	2101      	movs	r1, #1
 8000904:	2002      	movs	r0, #2
 8000906:	f7ff fe2d 	bl	8000564 <lcd_print>
}
 800090a:	e016      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 5) {
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	2b05      	cmp	r3, #5
 8000910:	d113      	bne.n	800093a <printTemplate+0x28e>
			lcd_clear();
 8000912:	f7ff fe53 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000916:	2064      	movs	r0, #100	; 0x64
 8000918:	f008 f9b4 	bl	8008c84 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800091c:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <printTemplate+0x2e4>)
 800091e:	2101      	movs	r1, #1
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff fe1f 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000926:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <printTemplate+0x2e8>)
 8000928:	2107      	movs	r1, #7
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff fe1a 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000930:	4a16      	ldr	r2, [pc, #88]	; (800098c <printTemplate+0x2e0>)
 8000932:	2101      	movs	r1, #1
 8000934:	2002      	movs	r0, #2
 8000936:	f7ff fe15 	bl	8000564 <lcd_print>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	0800cab0 	.word	0x0800cab0
 8000948:	0800cab8 	.word	0x0800cab8
 800094c:	0800cabc 	.word	0x0800cabc
 8000950:	0800cac0 	.word	0x0800cac0
 8000954:	0800cac4 	.word	0x0800cac4
 8000958:	0800cac8 	.word	0x0800cac8
 800095c:	0800cacc 	.word	0x0800cacc
 8000960:	0800cad0 	.word	0x0800cad0
 8000964:	0800cad4 	.word	0x0800cad4
 8000968:	0800cad8 	.word	0x0800cad8
 800096c:	0800cadc 	.word	0x0800cadc
 8000970:	20000bd4 	.word	0x20000bd4
 8000974:	0800cae0 	.word	0x0800cae0
 8000978:	20000be0 	.word	0x20000be0
 800097c:	0800cae8 	.word	0x0800cae8
 8000980:	0800cafc 	.word	0x0800cafc
 8000984:	0800cb10 	.word	0x0800cb10
 8000988:	0800cb24 	.word	0x0800cb24
 800098c:	0800cb38 	.word	0x0800cb38
 8000990:	0800cb4c 	.word	0x0800cb4c
 8000994:	20000bf4 	.word	0x20000bf4

08000998 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <getCharFromCursorPosition+0x1c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000960 	.word	0x20000960

080009b8 <takeMachineID>:

void takeMachineID(int state) {
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b08b      	sub	sp, #44	; 0x2c
 80009bc:	af04      	add	r7, sp, #16
 80009be:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff fe2d 	bl	8000620 <lcd_cursor>

    int cursorPosition = 3;
 80009c6:	2303      	movs	r3, #3
 80009c8:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 80009ce:	2305      	movs	r3, #5
 80009d0:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d104      	bne.n	80009e2 <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 80009d8:	220c      	movs	r2, #12
 80009da:	2100      	movs	r1, #0
 80009dc:	4899      	ldr	r0, [pc, #612]	; (8000c44 <takeMachineID+0x28c>)
 80009de:	f00c f80f 	bl	800ca00 <memset>
    }
    HAL_Delay(100);
 80009e2:	2064      	movs	r0, #100	; 0x64
 80009e4:	f008 f94e 	bl	8008c84 <HAL_Delay>

    printTemplate(1, 0);
 80009e8:	2100      	movs	r1, #0
 80009ea:	2001      	movs	r0, #1
 80009ec:	f7ff fe5e 	bl	80006ac <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80009f0:	2108      	movs	r1, #8
 80009f2:	4895      	ldr	r0, [pc, #596]	; (8000c48 <takeMachineID+0x290>)
 80009f4:	f008 ff16 	bl	8009824 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d138      	bne.n	8000a70 <takeMachineID+0xb8>
        	lcd_cursor(0);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fe0e 	bl	8000620 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8000a04:	4b8f      	ldr	r3, [pc, #572]	; (8000c44 <takeMachineID+0x28c>)
 8000a06:	7adb      	ldrb	r3, [r3, #11]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d110      	bne.n	8000a2e <takeMachineID+0x76>
        		lcd_clear();
 8000a0c:	f7ff fdd6 	bl	80005bc <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8000a10:	4a8e      	ldr	r2, [pc, #568]	; (8000c4c <takeMachineID+0x294>)
 8000a12:	2101      	movs	r1, #1
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff fda5 	bl	8000564 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8000a1a:	4a8d      	ldr	r2, [pc, #564]	; (8000c50 <takeMachineID+0x298>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	2002      	movs	r0, #2
 8000a20:	f7ff fda0 	bl	8000564 <lcd_print>
        		HAL_Delay(1200);
 8000a24:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000a28:	f008 f92c 	bl	8008c84 <HAL_Delay>
        		goto mainSection;
 8000a2c:	e7c8      	b.n	80009c0 <takeMachineID+0x8>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8000a2e:	4b89      	ldr	r3, [pc, #548]	; (8000c54 <takeMachineID+0x29c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b88      	ldr	r3, [pc, #544]	; (8000c58 <takeMachineID+0x2a0>)
 8000a36:	4413      	add	r3, r2
 8000a38:	4a82      	ldr	r2, [pc, #520]	; (8000c44 <takeMachineID+0x28c>)
 8000a3a:	461c      	mov	r4, r3
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a40:	6020      	str	r0, [r4, #0]
 8000a42:	6061      	str	r1, [r4, #4]
 8000a44:	60a2      	str	r2, [r4, #8]
        	HAL_Delay(200);
 8000a46:	20c8      	movs	r0, #200	; 0xc8
 8000a48:	f008 f91c 	bl	8008c84 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000a4c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a50:	9302      	str	r3, [sp, #8]
 8000a52:	236e      	movs	r3, #110	; 0x6e
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	4b80      	ldr	r3, [pc, #512]	; (8000c58 <takeMachineID+0x2a0>)
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	236e      	movs	r3, #110	; 0x6e
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	21a0      	movs	r1, #160	; 0xa0
 8000a60:	487e      	ldr	r0, [pc, #504]	; (8000c5c <takeMachineID+0x2a4>)
 8000a62:	f009 f999 	bl	8009d98 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8000a66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a6a:	f008 f90b 	bl	8008c84 <HAL_Delay>

            break;
 8000a6e:	e0e5      	b.n	8000c3c <takeMachineID+0x284>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000a70:	2101      	movs	r1, #1
 8000a72:	4875      	ldr	r0, [pc, #468]	; (8000c48 <takeMachineID+0x290>)
 8000a74:	f008 fed6 	bl	8009824 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d112      	bne.n	8000aa4 <takeMachineID+0xec>
        	if(cursorPosition == 7) {
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	2b07      	cmp	r3, #7
 8000a82:	d102      	bne.n	8000a8a <takeMachineID+0xd2>
        		cursorPosition = 10;
 8000a84:	230a      	movs	r3, #10
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	e008      	b.n	8000a9c <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	2b0e      	cmp	r3, #14
 8000a8e:	d102      	bne.n	8000a96 <takeMachineID+0xde>
                cursorPosition = 3;
 8000a90:	2303      	movs	r3, #3
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	e002      	b.n	8000a9c <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000a9c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000aa0:	f008 f8f0 	bl	8008c84 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	486e      	ldr	r0, [pc, #440]	; (8000c60 <takeMachineID+0x2a8>)
 8000aa8:	f008 febc 	bl	8009824 <HAL_GPIO_ReadPin>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d112      	bne.n	8000ad8 <takeMachineID+0x120>
            if (cursorPosition == 3) {
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d102      	bne.n	8000abe <takeMachineID+0x106>
                cursorPosition = 14;
 8000ab8:	230e      	movs	r3, #14
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	e008      	b.n	8000ad0 <takeMachineID+0x118>
            } else if(cursorPosition == 10) {
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b0a      	cmp	r3, #10
 8000ac2:	d102      	bne.n	8000aca <takeMachineID+0x112>
            	cursorPosition = 7;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	e002      	b.n	8000ad0 <takeMachineID+0x118>
            } else {
            	cursorPosition--;
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000ad0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000ad4:	f008 f8d6 	bl	8008c84 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000ad8:	2102      	movs	r1, #2
 8000ada:	485b      	ldr	r0, [pc, #364]	; (8000c48 <takeMachineID+0x290>)
 8000adc:	f008 fea2 	bl	8009824 <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d16c      	bne.n	8000bc0 <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d105      	bne.n	8000af8 <takeMachineID+0x140>
        		machineID[machineIDLoc] = '0';
 8000aec:	4a55      	ldr	r2, [pc, #340]	; (8000c44 <takeMachineID+0x28c>)
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4413      	add	r3, r2
 8000af2:	2230      	movs	r2, #48	; 0x30
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e04f      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 4) {
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d105      	bne.n	8000b0a <takeMachineID+0x152>
        		machineID[machineIDLoc] = '1';
 8000afe:	4a51      	ldr	r2, [pc, #324]	; (8000c44 <takeMachineID+0x28c>)
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	4413      	add	r3, r2
 8000b04:	2231      	movs	r2, #49	; 0x31
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e046      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 5) {
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	2b05      	cmp	r3, #5
 8000b0e:	d105      	bne.n	8000b1c <takeMachineID+0x164>
        		machineID[machineIDLoc] = '2';
 8000b10:	4a4c      	ldr	r2, [pc, #304]	; (8000c44 <takeMachineID+0x28c>)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	4413      	add	r3, r2
 8000b16:	2232      	movs	r2, #50	; 0x32
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	e03d      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 6) {
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d105      	bne.n	8000b2e <takeMachineID+0x176>
        		machineID[machineIDLoc] = '3';
 8000b22:	4a48      	ldr	r2, [pc, #288]	; (8000c44 <takeMachineID+0x28c>)
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	4413      	add	r3, r2
 8000b28:	2233      	movs	r2, #51	; 0x33
 8000b2a:	701a      	strb	r2, [r3, #0]
 8000b2c:	e034      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 7) {
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	2b07      	cmp	r3, #7
 8000b32:	d105      	bne.n	8000b40 <takeMachineID+0x188>
        		machineID[machineIDLoc] = '4';
 8000b34:	4a43      	ldr	r2, [pc, #268]	; (8000c44 <takeMachineID+0x28c>)
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4413      	add	r3, r2
 8000b3a:	2234      	movs	r2, #52	; 0x34
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e02b      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 10) {
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	2b0a      	cmp	r3, #10
 8000b44:	d105      	bne.n	8000b52 <takeMachineID+0x19a>
        		machineID[machineIDLoc] = '5';
 8000b46:	4a3f      	ldr	r2, [pc, #252]	; (8000c44 <takeMachineID+0x28c>)
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	2235      	movs	r2, #53	; 0x35
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e022      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 11) {
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	2b0b      	cmp	r3, #11
 8000b56:	d105      	bne.n	8000b64 <takeMachineID+0x1ac>
        		machineID[machineIDLoc] = '6';
 8000b58:	4a3a      	ldr	r2, [pc, #232]	; (8000c44 <takeMachineID+0x28c>)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	2236      	movs	r2, #54	; 0x36
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e019      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 12) {
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	2b0c      	cmp	r3, #12
 8000b68:	d105      	bne.n	8000b76 <takeMachineID+0x1be>
        		machineID[machineIDLoc] = '7';
 8000b6a:	4a36      	ldr	r2, [pc, #216]	; (8000c44 <takeMachineID+0x28c>)
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4413      	add	r3, r2
 8000b70:	2237      	movs	r2, #55	; 0x37
 8000b72:	701a      	strb	r2, [r3, #0]
 8000b74:	e010      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 13) {
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	2b0d      	cmp	r3, #13
 8000b7a:	d105      	bne.n	8000b88 <takeMachineID+0x1d0>
        		machineID[machineIDLoc] = '8';
 8000b7c:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <takeMachineID+0x28c>)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4413      	add	r3, r2
 8000b82:	2238      	movs	r2, #56	; 0x38
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e007      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 14) {
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	2b0e      	cmp	r3, #14
 8000b8c:	d104      	bne.n	8000b98 <takeMachineID+0x1e0>
        		machineID[machineIDLoc] = '9';
 8000b8e:	4a2d      	ldr	r2, [pc, #180]	; (8000c44 <takeMachineID+0x28c>)
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4413      	add	r3, r2
 8000b94:	2239      	movs	r2, #57	; 0x39
 8000b96:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	b2d9      	uxtb	r1, r3
 8000b9c:	4a29      	ldr	r2, [pc, #164]	; (8000c44 <takeMachineID+0x28c>)
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff fcf1 	bl	800058e <lcd_print_char>

        	writeLoc++;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000bb8:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000bbc:	f008 f862 	bl	8008c84 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	4821      	ldr	r0, [pc, #132]	; (8000c48 <takeMachineID+0x290>)
 8000bc4:	f008 fe2e 	bl	8009824 <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d12f      	bne.n	8000c2e <takeMachineID+0x276>
            if(strlen(machineID) >= 1) {
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <takeMachineID+0x28c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d027      	beq.n	8000c26 <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8000bd6:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <takeMachineID+0x28c>)
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4413      	add	r3, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	3304      	adds	r3, #4
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff fcf0 	bl	80005d0 <lcd_delete_char>
                HAL_Delay(50);
 8000bf0:	2032      	movs	r0, #50	; 0x32
 8000bf2:	f008 f847 	bl	8008c84 <HAL_Delay>

                if(writeLoc > 5) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b05      	cmp	r3, #5
 8000bfa:	dd03      	ble.n	8000c04 <takeMachineID+0x24c>
                	writeLoc--;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	e004      	b.n	8000c0e <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	dc01      	bgt.n	8000c0e <takeMachineID+0x256>
                	writeLoc = 5;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dd03      	ble.n	8000c1c <takeMachineID+0x264>
                	machineIDLoc--;
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	e004      	b.n	8000c26 <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	da01      	bge.n	8000c26 <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000c26:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000c2a:	f008 f82b 	bl	8008c84 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	4619      	mov	r1, r3
 8000c34:	2002      	movs	r0, #2
 8000c36:	f7ff fc76 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000c3a:	e6d9      	b.n	80009f0 <takeMachineID+0x38>
    }
}
 8000c3c:	bf00      	nop
 8000c3e:	371c      	adds	r7, #28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	20000bd4 	.word	0x20000bd4
 8000c48:	40010800 	.word	0x40010800
 8000c4c:	0800cb54 	.word	0x0800cb54
 8000c50:	0800cb68 	.word	0x0800cb68
 8000c54:	200009b1 	.word	0x200009b1
 8000c58:	20000b3c 	.word	0x20000b3c
 8000c5c:	20000a58 	.word	0x20000a58
 8000c60:	40011000 	.word	0x40011000

08000c64 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af04      	add	r7, sp, #16
 8000c6a:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff fcd7 	bl	8000620 <lcd_cursor>

    if(state == 0) {
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d104      	bne.n	8000c82 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000c78:	2214      	movs	r2, #20
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4888      	ldr	r0, [pc, #544]	; (8000ea0 <takeWifiSSID+0x23c>)
 8000c7e:	f00b febf 	bl	800ca00 <memset>
    }

    int realCharPos = 1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000c86:	4b87      	ldr	r3, [pc, #540]	; (8000ea4 <takeWifiSSID+0x240>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]
    page = 1;
 8000c8c:	4b86      	ldr	r3, [pc, #536]	; (8000ea8 <takeWifiSSID+0x244>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000c96:	2307      	movs	r3, #7
 8000c98:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f7ff fd05 	bl	80006ac <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	4881      	ldr	r0, [pc, #516]	; (8000eac <takeWifiSSID+0x248>)
 8000ca6:	f008 fdbd 	bl	8009824 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d12b      	bne.n	8000d08 <takeWifiSSID+0xa4>
            lcd_cursor(0);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff fcb5 	bl	8000620 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8000cb6:	487a      	ldr	r0, [pc, #488]	; (8000ea0 <takeWifiSSID+0x23c>)
 8000cb8:	f7ff fab4 	bl	8000224 <strlen>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b14      	cmp	r3, #20
 8000cc0:	d910      	bls.n	8000ce4 <takeWifiSSID+0x80>
                lcd_clear();
 8000cc2:	f7ff fc7b 	bl	80005bc <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8000cc6:	4a7a      	ldr	r2, [pc, #488]	; (8000eb0 <takeWifiSSID+0x24c>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f7ff fc4a 	bl	8000564 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8000cd0:	4a78      	ldr	r2, [pc, #480]	; (8000eb4 <takeWifiSSID+0x250>)
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f7ff fc45 	bl	8000564 <lcd_print>
                HAL_Delay(1200);
 8000cda:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000cde:	f007 ffd1 	bl	8008c84 <HAL_Delay>
                goto mainSSIDSection;
 8000ce2:	e7c3      	b.n	8000c6c <takeWifiSSID+0x8>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000ce4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ce8:	9302      	str	r3, [sp, #8]
 8000cea:	236e      	movs	r3, #110	; 0x6e
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	4b72      	ldr	r3, [pc, #456]	; (8000eb8 <takeWifiSSID+0x254>)
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	236e      	movs	r3, #110	; 0x6e
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	21a0      	movs	r1, #160	; 0xa0
 8000cf8:	4870      	ldr	r0, [pc, #448]	; (8000ebc <takeWifiSSID+0x258>)
 8000cfa:	f009 f84d 	bl	8009d98 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8000cfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d02:	f007 ffbf 	bl	8008c84 <HAL_Delay>

            break;
 8000d06:	e149      	b.n	8000f9c <takeWifiSSID+0x338>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4868      	ldr	r0, [pc, #416]	; (8000eac <takeWifiSSID+0x248>)
 8000d0c:	f008 fd8a 	bl	8009824 <HAL_GPIO_ReadPin>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d166      	bne.n	8000de4 <takeWifiSSID+0x180>
        	realCharPos++;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	2b50      	cmp	r3, #80	; 0x50
 8000d20:	dd01      	ble.n	8000d26 <takeWifiSSID+0xc2>
        		realCharPos = 1;
 8000d22:	2301      	movs	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8000d26:	4b5f      	ldr	r3, [pc, #380]	; (8000ea4 <takeWifiSSID+0x240>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b10      	cmp	r3, #16
 8000d2c:	d152      	bne.n	8000dd4 <takeWifiSSID+0x170>
            	if(page == 1) {
 8000d2e:	4b5e      	ldr	r3, [pc, #376]	; (8000ea8 <takeWifiSSID+0x244>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d10c      	bne.n	8000d50 <takeWifiSSID+0xec>
            		cursorPosition = 1;
 8000d36:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <takeWifiSSID+0x240>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]
            		page++;
 8000d3c:	4b5a      	ldr	r3, [pc, #360]	; (8000ea8 <takeWifiSSID+0x244>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	4a59      	ldr	r2, [pc, #356]	; (8000ea8 <takeWifiSSID+0x244>)
 8000d44:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000d46:	2102      	movs	r1, #2
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f7ff fcaf 	bl	80006ac <printTemplate>
 8000d4e:	e046      	b.n	8000dde <takeWifiSSID+0x17a>
            	} else if(page == 2) {
 8000d50:	4b55      	ldr	r3, [pc, #340]	; (8000ea8 <takeWifiSSID+0x244>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d10c      	bne.n	8000d72 <takeWifiSSID+0x10e>
            		cursorPosition = 1;
 8000d58:	4b52      	ldr	r3, [pc, #328]	; (8000ea4 <takeWifiSSID+0x240>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
            		page++;
 8000d5e:	4b52      	ldr	r3, [pc, #328]	; (8000ea8 <takeWifiSSID+0x244>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	3301      	adds	r3, #1
 8000d64:	4a50      	ldr	r2, [pc, #320]	; (8000ea8 <takeWifiSSID+0x244>)
 8000d66:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000d68:	2103      	movs	r1, #3
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f7ff fc9e 	bl	80006ac <printTemplate>
 8000d70:	e035      	b.n	8000dde <takeWifiSSID+0x17a>
            	} else if(page == 3) {
 8000d72:	4b4d      	ldr	r3, [pc, #308]	; (8000ea8 <takeWifiSSID+0x244>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d10c      	bne.n	8000d94 <takeWifiSSID+0x130>
            		cursorPosition = 1;
 8000d7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ea4 <takeWifiSSID+0x240>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]
            		page++;
 8000d80:	4b49      	ldr	r3, [pc, #292]	; (8000ea8 <takeWifiSSID+0x244>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	4a48      	ldr	r2, [pc, #288]	; (8000ea8 <takeWifiSSID+0x244>)
 8000d88:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000d8a:	2104      	movs	r1, #4
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f7ff fc8d 	bl	80006ac <printTemplate>
 8000d92:	e024      	b.n	8000dde <takeWifiSSID+0x17a>
            	} else if(page == 4) {
 8000d94:	4b44      	ldr	r3, [pc, #272]	; (8000ea8 <takeWifiSSID+0x244>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d10c      	bne.n	8000db6 <takeWifiSSID+0x152>
            		cursorPosition = 1;
 8000d9c:	4b41      	ldr	r3, [pc, #260]	; (8000ea4 <takeWifiSSID+0x240>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	601a      	str	r2, [r3, #0]
            		page++;
 8000da2:	4b41      	ldr	r3, [pc, #260]	; (8000ea8 <takeWifiSSID+0x244>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a3f      	ldr	r2, [pc, #252]	; (8000ea8 <takeWifiSSID+0x244>)
 8000daa:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000dac:	2105      	movs	r1, #5
 8000dae:	2002      	movs	r0, #2
 8000db0:	f7ff fc7c 	bl	80006ac <printTemplate>
 8000db4:	e013      	b.n	8000dde <takeWifiSSID+0x17a>
            	} else if(page == 5) {
 8000db6:	4b3c      	ldr	r3, [pc, #240]	; (8000ea8 <takeWifiSSID+0x244>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b05      	cmp	r3, #5
 8000dbc:	d10f      	bne.n	8000dde <takeWifiSSID+0x17a>
            		cursorPosition = 1;
 8000dbe:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <takeWifiSSID+0x240>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000dc4:	4b38      	ldr	r3, [pc, #224]	; (8000ea8 <takeWifiSSID+0x244>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000dca:	2101      	movs	r1, #1
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f7ff fc6d 	bl	80006ac <printTemplate>
 8000dd2:	e004      	b.n	8000dde <takeWifiSSID+0x17a>
            	}
            } else {
            	cursorPosition++;
 8000dd4:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <takeWifiSSID+0x240>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	4a32      	ldr	r2, [pc, #200]	; (8000ea4 <takeWifiSSID+0x240>)
 8000ddc:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000dde:	20fa      	movs	r0, #250	; 0xfa
 8000de0:	f007 ff50 	bl	8008c84 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000de4:	2108      	movs	r1, #8
 8000de6:	4836      	ldr	r0, [pc, #216]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000de8:	f008 fd1c 	bl	8009824 <HAL_GPIO_ReadPin>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d170      	bne.n	8000ed4 <takeWifiSSID+0x270>
        	realCharPos--;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	dc01      	bgt.n	8000e02 <takeWifiSSID+0x19e>
        		realCharPos = 80;
 8000dfe:	2350      	movs	r3, #80	; 0x50
 8000e00:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <takeWifiSSID+0x240>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d15c      	bne.n	8000ec4 <takeWifiSSID+0x260>
            	if(page == 1) {
 8000e0a:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <takeWifiSSID+0x244>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d10a      	bne.n	8000e28 <takeWifiSSID+0x1c4>
            		cursorPosition = 16;
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <takeWifiSSID+0x240>)
 8000e14:	2210      	movs	r2, #16
 8000e16:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <takeWifiSSID+0x244>)
 8000e1a:	2205      	movs	r2, #5
 8000e1c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000e1e:	2105      	movs	r1, #5
 8000e20:	2002      	movs	r0, #2
 8000e22:	f7ff fc43 	bl	80006ac <printTemplate>
 8000e26:	e052      	b.n	8000ece <takeWifiSSID+0x26a>
            	} else if(page == 2) {
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <takeWifiSSID+0x244>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d10a      	bne.n	8000e46 <takeWifiSSID+0x1e2>
            		cursorPosition = 16;
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <takeWifiSSID+0x240>)
 8000e32:	2210      	movs	r2, #16
 8000e34:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <takeWifiSSID+0x244>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f7ff fc34 	bl	80006ac <printTemplate>
 8000e44:	e043      	b.n	8000ece <takeWifiSSID+0x26a>
            	} else if(page == 3) {
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <takeWifiSSID+0x244>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d10a      	bne.n	8000e64 <takeWifiSSID+0x200>
            		cursorPosition = 16;
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <takeWifiSSID+0x240>)
 8000e50:	2210      	movs	r2, #16
 8000e52:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <takeWifiSSID+0x244>)
 8000e56:	2202      	movs	r2, #2
 8000e58:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f7ff fc25 	bl	80006ac <printTemplate>
 8000e62:	e034      	b.n	8000ece <takeWifiSSID+0x26a>
            	} else if(page == 4) {
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <takeWifiSSID+0x244>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d10a      	bne.n	8000e82 <takeWifiSSID+0x21e>
            		cursorPosition = 16;
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <takeWifiSSID+0x240>)
 8000e6e:	2210      	movs	r2, #16
 8000e70:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <takeWifiSSID+0x244>)
 8000e74:	2203      	movs	r2, #3
 8000e76:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000e78:	2103      	movs	r1, #3
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f7ff fc16 	bl	80006ac <printTemplate>
 8000e80:	e025      	b.n	8000ece <takeWifiSSID+0x26a>
            	} else if(page == 5) {
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <takeWifiSSID+0x244>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b05      	cmp	r3, #5
 8000e88:	d121      	bne.n	8000ece <takeWifiSSID+0x26a>
            		cursorPosition = 16;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <takeWifiSSID+0x240>)
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <takeWifiSSID+0x244>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000e96:	2104      	movs	r1, #4
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f7ff fc07 	bl	80006ac <printTemplate>
 8000e9e:	e016      	b.n	8000ece <takeWifiSSID+0x26a>
 8000ea0:	20000be0 	.word	0x20000be0
 8000ea4:	20000944 	.word	0x20000944
 8000ea8:	20000948 	.word	0x20000948
 8000eac:	40010800 	.word	0x40010800
 8000eb0:	0800cb7c 	.word	0x0800cb7c
 8000eb4:	0800cb90 	.word	0x0800cb90
 8000eb8:	20000b3c 	.word	0x20000b3c
 8000ebc:	20000a58 	.word	0x20000a58
 8000ec0:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8000ec4:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <takeWifiSSID+0x340>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	4a36      	ldr	r2, [pc, #216]	; (8000fa4 <takeWifiSSID+0x340>)
 8000ecc:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000ece:	20fa      	movs	r0, #250	; 0xfa
 8000ed0:	f007 fed8 	bl	8008c84 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	4834      	ldr	r0, [pc, #208]	; (8000fa8 <takeWifiSSID+0x344>)
 8000ed8:	f008 fca4 	bl	8009824 <HAL_GPIO_ReadPin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d11e      	bne.n	8000f20 <takeWifiSSID+0x2bc>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fd56 	bl	8000998 <getCharFromCursorPosition>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4a2e      	ldr	r2, [pc, #184]	; (8000fac <takeWifiSSID+0x348>)
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	460a      	mov	r2, r1
 8000ef8:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	b2d9      	uxtb	r1, r3
 8000efe:	4a2b      	ldr	r2, [pc, #172]	; (8000fac <takeWifiSSID+0x348>)
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fb40 	bl	800058e <lcd_print_char>

            writeLoc++;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	3301      	adds	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	3301      	adds	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8000f1a:	20fa      	movs	r0, #250	; 0xfa
 8000f1c:	f007 feb2 	bl	8008c84 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000f20:	2104      	movs	r1, #4
 8000f22:	4821      	ldr	r0, [pc, #132]	; (8000fa8 <takeWifiSSID+0x344>)
 8000f24:	f008 fc7e 	bl	8009824 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d12e      	bne.n	8000f8c <takeWifiSSID+0x328>
        	if(strlen(wifiSSID) >= 1) {
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <takeWifiSSID+0x348>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d027      	beq.n	8000f86 <takeWifiSSID+0x322>
        		wifiSSID[wifiNameLoc] = '\0';
 8000f36:	4a1d      	ldr	r2, [pc, #116]	; (8000fac <takeWifiSSID+0x348>)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	3306      	adds	r3, #6
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4619      	mov	r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f7ff fb40 	bl	80005d0 <lcd_delete_char>
        		HAL_Delay(50);
 8000f50:	2032      	movs	r0, #50	; 0x32
 8000f52:	f007 fe97 	bl	8008c84 <HAL_Delay>
        		if(writeLoc > 7) {
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2b07      	cmp	r3, #7
 8000f5a:	dd03      	ble.n	8000f64 <takeWifiSSID+0x300>
        			writeLoc--;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	e004      	b.n	8000f6e <takeWifiSSID+0x30a>
        		} else if(writeLoc < 7) {
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	dc01      	bgt.n	8000f6e <takeWifiSSID+0x30a>
        			writeLoc = 7;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd03      	ble.n	8000f7c <takeWifiSSID+0x318>
        			wifiNameLoc--;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	e004      	b.n	8000f86 <takeWifiSSID+0x322>
        		} else if(wifiNameLoc < 0) {
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da01      	bge.n	8000f86 <takeWifiSSID+0x322>
        			wifiNameLoc = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 8000f86:	20fa      	movs	r0, #250	; 0xfa
 8000f88:	f007 fe7c 	bl	8008c84 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <takeWifiSSID+0x340>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4619      	mov	r1, r3
 8000f94:	2002      	movs	r0, #2
 8000f96:	f7ff fac6 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000f9a:	e682      	b.n	8000ca2 <takeWifiSSID+0x3e>
    }
}
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000944 	.word	0x20000944
 8000fa8:	40010800 	.word	0x40010800
 8000fac:	20000be0 	.word	0x20000be0

08000fb0 <takeWifiPass>:

void takeWifiPass(int state) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff fb31 	bl	8000620 <lcd_cursor>

    if(state == 0) {
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d104      	bne.n	8000fce <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8000fc4:	2214      	movs	r2, #20
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4888      	ldr	r0, [pc, #544]	; (80011ec <takeWifiPass+0x23c>)
 8000fca:	f00b fd19 	bl	800ca00 <memset>
    }

    int realCharPos = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000fd2:	4b87      	ldr	r3, [pc, #540]	; (80011f0 <takeWifiPass+0x240>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
    page = 1;
 8000fd8:	4b86      	ldr	r3, [pc, #536]	; (80011f4 <takeWifiPass+0x244>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f7ff fb5f 	bl	80006ac <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000fee:	2108      	movs	r1, #8
 8000ff0:	4881      	ldr	r0, [pc, #516]	; (80011f8 <takeWifiPass+0x248>)
 8000ff2:	f008 fc17 	bl	8009824 <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d12b      	bne.n	8001054 <takeWifiPass+0xa4>
            lcd_cursor(0);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff fb0f 	bl	8000620 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8001002:	487a      	ldr	r0, [pc, #488]	; (80011ec <takeWifiPass+0x23c>)
 8001004:	f7ff f90e 	bl	8000224 <strlen>
 8001008:	4603      	mov	r3, r0
 800100a:	2b14      	cmp	r3, #20
 800100c:	d910      	bls.n	8001030 <takeWifiPass+0x80>
                lcd_clear();
 800100e:	f7ff fad5 	bl	80005bc <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8001012:	4a7a      	ldr	r2, [pc, #488]	; (80011fc <takeWifiPass+0x24c>)
 8001014:	2101      	movs	r1, #1
 8001016:	2001      	movs	r0, #1
 8001018:	f7ff faa4 	bl	8000564 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 800101c:	4a78      	ldr	r2, [pc, #480]	; (8001200 <takeWifiPass+0x250>)
 800101e:	2101      	movs	r1, #1
 8001020:	2002      	movs	r0, #2
 8001022:	f7ff fa9f 	bl	8000564 <lcd_print>
                HAL_Delay(1200);
 8001026:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800102a:	f007 fe2b 	bl	8008c84 <HAL_Delay>
                goto mainPASSSection;
 800102e:	e7c3      	b.n	8000fb8 <takeWifiPass+0x8>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8001030:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	236e      	movs	r3, #110	; 0x6e
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	4b72      	ldr	r3, [pc, #456]	; (8001204 <takeWifiPass+0x254>)
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	236e      	movs	r3, #110	; 0x6e
 8001040:	2200      	movs	r2, #0
 8001042:	21a0      	movs	r1, #160	; 0xa0
 8001044:	4870      	ldr	r0, [pc, #448]	; (8001208 <takeWifiPass+0x258>)
 8001046:	f008 fea7 	bl	8009d98 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 800104a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800104e:	f007 fe19 	bl	8008c84 <HAL_Delay>

            break;
 8001052:	e149      	b.n	80012e8 <takeWifiPass+0x338>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001054:	2101      	movs	r1, #1
 8001056:	4868      	ldr	r0, [pc, #416]	; (80011f8 <takeWifiPass+0x248>)
 8001058:	f008 fbe4 	bl	8009824 <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	d166      	bne.n	8001130 <takeWifiPass+0x180>
        	realCharPos++;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b50      	cmp	r3, #80	; 0x50
 800106c:	dd01      	ble.n	8001072 <takeWifiPass+0xc2>
        	    realCharPos = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8001072:	4b5f      	ldr	r3, [pc, #380]	; (80011f0 <takeWifiPass+0x240>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b10      	cmp	r3, #16
 8001078:	d152      	bne.n	8001120 <takeWifiPass+0x170>
            	if(page == 1) {
 800107a:	4b5e      	ldr	r3, [pc, #376]	; (80011f4 <takeWifiPass+0x244>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d10c      	bne.n	800109c <takeWifiPass+0xec>
            		cursorPosition = 1;
 8001082:	4b5b      	ldr	r3, [pc, #364]	; (80011f0 <takeWifiPass+0x240>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]
            		page++;
 8001088:	4b5a      	ldr	r3, [pc, #360]	; (80011f4 <takeWifiPass+0x244>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	4a59      	ldr	r2, [pc, #356]	; (80011f4 <takeWifiPass+0x244>)
 8001090:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8001092:	2102      	movs	r1, #2
 8001094:	2003      	movs	r0, #3
 8001096:	f7ff fb09 	bl	80006ac <printTemplate>
 800109a:	e046      	b.n	800112a <takeWifiPass+0x17a>
            	} else if(page == 2) {
 800109c:	4b55      	ldr	r3, [pc, #340]	; (80011f4 <takeWifiPass+0x244>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d10c      	bne.n	80010be <takeWifiPass+0x10e>
            		cursorPosition = 1;
 80010a4:	4b52      	ldr	r3, [pc, #328]	; (80011f0 <takeWifiPass+0x240>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
            		page++;
 80010aa:	4b52      	ldr	r3, [pc, #328]	; (80011f4 <takeWifiPass+0x244>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	4a50      	ldr	r2, [pc, #320]	; (80011f4 <takeWifiPass+0x244>)
 80010b2:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80010b4:	2103      	movs	r1, #3
 80010b6:	2003      	movs	r0, #3
 80010b8:	f7ff faf8 	bl	80006ac <printTemplate>
 80010bc:	e035      	b.n	800112a <takeWifiPass+0x17a>
            	} else if(page == 3) {
 80010be:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <takeWifiPass+0x244>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d10c      	bne.n	80010e0 <takeWifiPass+0x130>
            		cursorPosition = 1;
 80010c6:	4b4a      	ldr	r3, [pc, #296]	; (80011f0 <takeWifiPass+0x240>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
            		page++;
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <takeWifiPass+0x244>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	4a48      	ldr	r2, [pc, #288]	; (80011f4 <takeWifiPass+0x244>)
 80010d4:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80010d6:	2104      	movs	r1, #4
 80010d8:	2003      	movs	r0, #3
 80010da:	f7ff fae7 	bl	80006ac <printTemplate>
 80010de:	e024      	b.n	800112a <takeWifiPass+0x17a>
            	} else if(page == 4) {
 80010e0:	4b44      	ldr	r3, [pc, #272]	; (80011f4 <takeWifiPass+0x244>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d10c      	bne.n	8001102 <takeWifiPass+0x152>
            		cursorPosition = 1;
 80010e8:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <takeWifiPass+0x240>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
            		page++;
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <takeWifiPass+0x244>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	4a3f      	ldr	r2, [pc, #252]	; (80011f4 <takeWifiPass+0x244>)
 80010f6:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80010f8:	2105      	movs	r1, #5
 80010fa:	2003      	movs	r0, #3
 80010fc:	f7ff fad6 	bl	80006ac <printTemplate>
 8001100:	e013      	b.n	800112a <takeWifiPass+0x17a>
            	} else if(page == 5) {
 8001102:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <takeWifiPass+0x244>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b05      	cmp	r3, #5
 8001108:	d10f      	bne.n	800112a <takeWifiPass+0x17a>
            		cursorPosition = 1;
 800110a:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <takeWifiPass+0x240>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001110:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <takeWifiPass+0x244>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001116:	2101      	movs	r1, #1
 8001118:	2003      	movs	r0, #3
 800111a:	f7ff fac7 	bl	80006ac <printTemplate>
 800111e:	e004      	b.n	800112a <takeWifiPass+0x17a>
            	}
            } else {
            	cursorPosition++;
 8001120:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <takeWifiPass+0x240>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	4a32      	ldr	r2, [pc, #200]	; (80011f0 <takeWifiPass+0x240>)
 8001128:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800112a:	20fa      	movs	r0, #250	; 0xfa
 800112c:	f007 fdaa 	bl	8008c84 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001130:	2108      	movs	r1, #8
 8001132:	4836      	ldr	r0, [pc, #216]	; (800120c <takeWifiPass+0x25c>)
 8001134:	f008 fb76 	bl	8009824 <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	2b01      	cmp	r3, #1
 800113c:	d170      	bne.n	8001220 <takeWifiPass+0x270>
        	realCharPos--;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3b01      	subs	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2b00      	cmp	r3, #0
 8001148:	dc01      	bgt.n	800114e <takeWifiPass+0x19e>
        	    realCharPos = 80;
 800114a:	2350      	movs	r3, #80	; 0x50
 800114c:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 800114e:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <takeWifiPass+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d15c      	bne.n	8001210 <takeWifiPass+0x260>
            	if(page == 1) {
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <takeWifiPass+0x244>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d10a      	bne.n	8001174 <takeWifiPass+0x1c4>
            		cursorPosition = 16;
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <takeWifiPass+0x240>)
 8001160:	2210      	movs	r2, #16
 8001162:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <takeWifiPass+0x244>)
 8001166:	2205      	movs	r2, #5
 8001168:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 800116a:	2105      	movs	r1, #5
 800116c:	2003      	movs	r0, #3
 800116e:	f7ff fa9d 	bl	80006ac <printTemplate>
 8001172:	e052      	b.n	800121a <takeWifiPass+0x26a>
            	} else if(page == 2) {
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <takeWifiPass+0x244>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d10a      	bne.n	8001192 <takeWifiPass+0x1e2>
            		cursorPosition = 16;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <takeWifiPass+0x240>)
 800117e:	2210      	movs	r2, #16
 8001180:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <takeWifiPass+0x244>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001188:	2101      	movs	r1, #1
 800118a:	2003      	movs	r0, #3
 800118c:	f7ff fa8e 	bl	80006ac <printTemplate>
 8001190:	e043      	b.n	800121a <takeWifiPass+0x26a>
            	} else if(page == 3) {
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <takeWifiPass+0x244>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d10a      	bne.n	80011b0 <takeWifiPass+0x200>
            		cursorPosition = 16;
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <takeWifiPass+0x240>)
 800119c:	2210      	movs	r2, #16
 800119e:	601a      	str	r2, [r3, #0]
            		page = 2;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <takeWifiPass+0x244>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80011a6:	2102      	movs	r1, #2
 80011a8:	2003      	movs	r0, #3
 80011aa:	f7ff fa7f 	bl	80006ac <printTemplate>
 80011ae:	e034      	b.n	800121a <takeWifiPass+0x26a>
            	} else if(page == 4) {
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <takeWifiPass+0x244>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d10a      	bne.n	80011ce <takeWifiPass+0x21e>
            		cursorPosition = 16;
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <takeWifiPass+0x240>)
 80011ba:	2210      	movs	r2, #16
 80011bc:	601a      	str	r2, [r3, #0]
            		page = 3;
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <takeWifiPass+0x244>)
 80011c0:	2203      	movs	r2, #3
 80011c2:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80011c4:	2103      	movs	r1, #3
 80011c6:	2003      	movs	r0, #3
 80011c8:	f7ff fa70 	bl	80006ac <printTemplate>
 80011cc:	e025      	b.n	800121a <takeWifiPass+0x26a>
            	} else if(page == 5) {
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <takeWifiPass+0x244>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d121      	bne.n	800121a <takeWifiPass+0x26a>
            		cursorPosition = 16;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <takeWifiPass+0x240>)
 80011d8:	2210      	movs	r2, #16
 80011da:	601a      	str	r2, [r3, #0]
            		page = 4;
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <takeWifiPass+0x244>)
 80011de:	2204      	movs	r2, #4
 80011e0:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80011e2:	2104      	movs	r1, #4
 80011e4:	2003      	movs	r0, #3
 80011e6:	f7ff fa61 	bl	80006ac <printTemplate>
 80011ea:	e016      	b.n	800121a <takeWifiPass+0x26a>
 80011ec:	20000bf4 	.word	0x20000bf4
 80011f0:	20000944 	.word	0x20000944
 80011f4:	20000948 	.word	0x20000948
 80011f8:	40010800 	.word	0x40010800
 80011fc:	0800cb7c 	.word	0x0800cb7c
 8001200:	0800cba4 	.word	0x0800cba4
 8001204:	20000b3c 	.word	0x20000b3c
 8001208:	20000a58 	.word	0x20000a58
 800120c:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8001210:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <takeWifiPass+0x340>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	4a36      	ldr	r2, [pc, #216]	; (80012f0 <takeWifiPass+0x340>)
 8001218:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800121a:	20fa      	movs	r0, #250	; 0xfa
 800121c:	f007 fd32 	bl	8008c84 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001220:	2102      	movs	r1, #2
 8001222:	4834      	ldr	r0, [pc, #208]	; (80012f4 <takeWifiPass+0x344>)
 8001224:	f008 fafe 	bl	8009824 <HAL_GPIO_ReadPin>
 8001228:	4603      	mov	r3, r0
 800122a:	2b01      	cmp	r3, #1
 800122c:	d11e      	bne.n	800126c <takeWifiPass+0x2bc>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3b01      	subs	r3, #1
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fbb0 	bl	8000998 <getCharFromCursorPosition>
 8001238:	4603      	mov	r3, r0
 800123a:	4619      	mov	r1, r3
 800123c:	4a2e      	ldr	r2, [pc, #184]	; (80012f8 <takeWifiPass+0x348>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4413      	add	r3, r2
 8001242:	460a      	mov	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	b2d9      	uxtb	r1, r3
 800124a:	4a2b      	ldr	r2, [pc, #172]	; (80012f8 <takeWifiPass+0x348>)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff f99a 	bl	800058e <lcd_print_char>

            writeLoc++;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3301      	adds	r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	3301      	adds	r3, #1
 8001264:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8001266:	20fa      	movs	r0, #250	; 0xfa
 8001268:	f007 fd0c 	bl	8008c84 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800126c:	2104      	movs	r1, #4
 800126e:	4821      	ldr	r0, [pc, #132]	; (80012f4 <takeWifiPass+0x344>)
 8001270:	f008 fad8 	bl	8009824 <HAL_GPIO_ReadPin>
 8001274:	4603      	mov	r3, r0
 8001276:	2b01      	cmp	r3, #1
 8001278:	d12e      	bne.n	80012d8 <takeWifiPass+0x328>
            if(strlen(wifiPass) >= 1) {
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <takeWifiPass+0x348>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d027      	beq.n	80012d2 <takeWifiPass+0x322>
            	wifiPass[wifiPassLoc] = '\0';
 8001282:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <takeWifiPass+0x348>)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4413      	add	r3, r2
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	3306      	adds	r3, #6
 8001292:	b2db      	uxtb	r3, r3
 8001294:	4619      	mov	r1, r3
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff f99a 	bl	80005d0 <lcd_delete_char>
            	HAL_Delay(50);
 800129c:	2032      	movs	r0, #50	; 0x32
 800129e:	f007 fcf1 	bl	8008c84 <HAL_Delay>

            	if(writeLoc > 7) {
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2b07      	cmp	r3, #7
 80012a6:	dd03      	ble.n	80012b0 <takeWifiPass+0x300>
            		writeLoc--;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e004      	b.n	80012ba <takeWifiPass+0x30a>
            	} else if(writeLoc < 7) {
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	dc01      	bgt.n	80012ba <takeWifiPass+0x30a>
            		writeLoc = 7;
 80012b6:	2307      	movs	r3, #7
 80012b8:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	dd03      	ble.n	80012c8 <takeWifiPass+0x318>
            		wifiPassLoc--;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	e004      	b.n	80012d2 <takeWifiPass+0x322>
            	} else if(wifiPassLoc < 0) {
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	da01      	bge.n	80012d2 <takeWifiPass+0x322>
            		wifiPassLoc = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 80012d2:	20fa      	movs	r0, #250	; 0xfa
 80012d4:	f007 fcd6 	bl	8008c84 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <takeWifiPass+0x340>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4619      	mov	r1, r3
 80012e0:	2002      	movs	r0, #2
 80012e2:	f7ff f920 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80012e6:	e682      	b.n	8000fee <takeWifiPass+0x3e>
    }
}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000944 	.word	0x20000944
 80012f4:	40010800 	.word	0x40010800
 80012f8:	20000bf4 	.word	0x20000bf4

080012fc <checkSlideVal>:

int checkSlideVal(int state) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d111      	bne.n	800132e <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800130a:	2101      	movs	r1, #1
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <checkSlideVal+0x60>)
 800130e:	f008 fa89 	bl	8009824 <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <checkSlideVal+0x20>
			return 34;
 8001318:	2322      	movs	r3, #34	; 0x22
 800131a:	e01b      	b.n	8001354 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800131c:	2108      	movs	r1, #8
 800131e:	4810      	ldr	r0, [pc, #64]	; (8001360 <checkSlideVal+0x64>)
 8001320:	f008 fa80 	bl	8009824 <HAL_GPIO_ReadPin>
 8001324:	4603      	mov	r3, r0
 8001326:	2b01      	cmp	r3, #1
 8001328:	d113      	bne.n	8001352 <checkSlideVal+0x56>
			return 32;
 800132a:	2320      	movs	r3, #32
 800132c:	e012      	b.n	8001354 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800132e:	2101      	movs	r1, #1
 8001330:	480a      	ldr	r0, [pc, #40]	; (800135c <checkSlideVal+0x60>)
 8001332:	f008 fa77 	bl	8009824 <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <checkSlideVal+0x44>
			return 35;
 800133c:	2323      	movs	r3, #35	; 0x23
 800133e:	e009      	b.n	8001354 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001340:	2108      	movs	r1, #8
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <checkSlideVal+0x64>)
 8001344:	f008 fa6e 	bl	8009824 <HAL_GPIO_ReadPin>
 8001348:	4603      	mov	r3, r0
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <checkSlideVal+0x56>
			return 33;
 800134e:	2321      	movs	r3, #33	; 0x21
 8001350:	e000      	b.n	8001354 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010800 	.word	0x40010800
 8001360:	40011000 	.word	0x40011000

08001364 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7fe ff56 	bl	8000224 <strlen>
 8001378:	4603      	mov	r3, r0
 800137a:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 800137c:	2301      	movs	r3, #1
 800137e:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001380:	e08a      	b.n	8001498 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001382:	6838      	ldr	r0, [r7, #0]
 8001384:	f7ff ffba 	bl	80012fc <checkSlideVal>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	dd07      	ble.n	800139e <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800138e:	6838      	ldr	r0, [r7, #0]
 8001390:	f7ff ffb4 	bl	80012fc <checkSlideVal>
 8001394:	4603      	mov	r3, r0
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b44      	ldr	r3, [pc, #272]	; (80014ac <slideText+0x148>)
 800139a:	701a      	strb	r2, [r3, #0]
			break;
 800139c:	e081      	b.n	80014a2 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
 80013a2:	e075      	b.n	8001490 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80013a4:	6838      	ldr	r0, [r7, #0]
 80013a6:	f7ff ffa9 	bl	80012fc <checkSlideVal>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dd09      	ble.n	80013c4 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 80013b0:	6838      	ldr	r0, [r7, #0]
 80013b2:	f7ff ffa3 	bl	80012fc <checkSlideVal>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <slideText+0x148>)
 80013bc:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80013c2:	e069      	b.n	8001498 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	4413      	add	r3, r2
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	e029      	b.n	8001422 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80013ce:	6838      	ldr	r0, [r7, #0]
 80013d0:	f7ff ff94 	bl	80012fc <checkSlideVal>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	dd0b      	ble.n	80013f2 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f7ff ff8e 	bl	80012fc <checkSlideVal>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b31      	ldr	r3, [pc, #196]	; (80014ac <slideText+0x148>)
 80013e6:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
 80013ea:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80013f0:	e01d      	b.n	800142e <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	b2d8      	uxtb	r0, r3
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	b2d9      	uxtb	r1, r3
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	461a      	mov	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4413      	add	r3, r2
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	f7ff f8bc 	bl	800058e <lcd_print_char>
				HAL_Delay(30);
 8001416:	201e      	movs	r0, #30
 8001418:	f007 fc34 	bl	8008c84 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	3301      	adds	r3, #1
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	7dfa      	ldrb	r2, [r7, #23]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4413      	add	r3, r2
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	429a      	cmp	r2, r3
 800142c:	dbcf      	blt.n	80013ce <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800142e:	7dfb      	ldrb	r3, [r7, #23]
 8001430:	3b01      	subs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	e023      	b.n	800147e <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 8001436:	6838      	ldr	r0, [r7, #0]
 8001438:	f7ff ff60 	bl	80012fc <checkSlideVal>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	dd0b      	ble.n	800145a <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001442:	6838      	ldr	r0, [r7, #0]
 8001444:	f7ff ff5a 	bl	80012fc <checkSlideVal>
 8001448:	4603      	mov	r3, r0
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <slideText+0x148>)
 800144e:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001458:	e017      	b.n	800148a <slideText+0x126>
				}
			     if(j >= startPos) {
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	429a      	cmp	r2, r3
 8001460:	db0a      	blt.n	8001478 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	b2d1      	uxtb	r1, r2
 800146a:	2220      	movs	r2, #32
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f88e 	bl	800058e <lcd_print_char>
			    	 HAL_Delay(30);
 8001472:	201e      	movs	r0, #30
 8001474:	f007 fc06 	bl	8008c84 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	3b01      	subs	r3, #1
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	7dfa      	ldrb	r2, [r7, #23]
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	429a      	cmp	r2, r3
 8001488:	dad5      	bge.n	8001436 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	3301      	adds	r3, #1
 800148e:	623b      	str	r3, [r7, #32]
 8001490:	7dfb      	ldrb	r3, [r7, #23]
 8001492:	6a3a      	ldr	r2, [r7, #32]
 8001494:	429a      	cmp	r2, r3
 8001496:	db85      	blt.n	80013a4 <slideText+0x40>
	while(mainLoopVal == 1) {
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	2b01      	cmp	r3, #1
 800149c:	f43f af71 	beq.w	8001382 <slideText+0x1e>
			     }
			}
		}
	}
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000c0c 	.word	0x20000c0c

080014b0 <menu>:

void menu() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80014b4:	2101      	movs	r1, #1
 80014b6:	488f      	ldr	r0, [pc, #572]	; (80016f4 <menu+0x244>)
 80014b8:	f008 f9b4 	bl	8009824 <HAL_GPIO_ReadPin>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b01      	cmp	r3, #1
 80014c0:	f040 808e 	bne.w	80015e0 <menu+0x130>
 80014c4:	4b8c      	ldr	r3, [pc, #560]	; (80016f8 <menu+0x248>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	f083 0301 	eor.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8086 	beq.w	80015e0 <menu+0x130>
		menuSayac = menuSayac+1;
 80014d4:	4b89      	ldr	r3, [pc, #548]	; (80016fc <menu+0x24c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b87      	ldr	r3, [pc, #540]	; (80016fc <menu+0x24c>)
 80014de:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80014e0:	4b86      	ldr	r3, [pc, #536]	; (80016fc <menu+0x24c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b24      	cmp	r3, #36	; 0x24
 80014e6:	d102      	bne.n	80014ee <menu+0x3e>
			menuSayac = 1;
 80014e8:	4b84      	ldr	r3, [pc, #528]	; (80016fc <menu+0x24c>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80014ee:	4b83      	ldr	r3, [pc, #524]	; (80016fc <menu+0x24c>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b12      	cmp	r3, #18
 80014f4:	d106      	bne.n	8001504 <menu+0x54>
 80014f6:	4b82      	ldr	r3, [pc, #520]	; (8001700 <menu+0x250>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <menu+0x54>
			menuSayac = 21;
 80014fe:	4b7f      	ldr	r3, [pc, #508]	; (80016fc <menu+0x24c>)
 8001500:	2215      	movs	r2, #21
 8001502:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001504:	4b7d      	ldr	r3, [pc, #500]	; (80016fc <menu+0x24c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b08      	cmp	r3, #8
 800150a:	d106      	bne.n	800151a <menu+0x6a>
 800150c:	4b7d      	ldr	r3, [pc, #500]	; (8001704 <menu+0x254>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <menu+0x6a>
			menuSayac = 16;
 8001514:	4b79      	ldr	r3, [pc, #484]	; (80016fc <menu+0x24c>)
 8001516:	2210      	movs	r2, #16
 8001518:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800151a:	4b78      	ldr	r3, [pc, #480]	; (80016fc <menu+0x24c>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b0d      	cmp	r3, #13
 8001520:	d106      	bne.n	8001530 <menu+0x80>
 8001522:	4b78      	ldr	r3, [pc, #480]	; (8001704 <menu+0x254>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d102      	bne.n	8001530 <menu+0x80>
			menuSayac = 16;
 800152a:	4b74      	ldr	r3, [pc, #464]	; (80016fc <menu+0x24c>)
 800152c:	2210      	movs	r2, #16
 800152e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001530:	4b72      	ldr	r3, [pc, #456]	; (80016fc <menu+0x24c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b09      	cmp	r3, #9
 8001536:	d106      	bne.n	8001546 <menu+0x96>
 8001538:	4b72      	ldr	r3, [pc, #456]	; (8001704 <menu+0x254>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d102      	bne.n	8001546 <menu+0x96>
			menuSayac = 13;
 8001540:	4b6e      	ldr	r3, [pc, #440]	; (80016fc <menu+0x24c>)
 8001542:	220d      	movs	r2, #13
 8001544:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001546:	4b6d      	ldr	r3, [pc, #436]	; (80016fc <menu+0x24c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b0a      	cmp	r3, #10
 800154c:	d10a      	bne.n	8001564 <menu+0xb4>
 800154e:	4b6e      	ldr	r3, [pc, #440]	; (8001708 <menu+0x258>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d003      	beq.n	800155e <menu+0xae>
 8001556:	4b6c      	ldr	r3, [pc, #432]	; (8001708 <menu+0x258>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d102      	bne.n	8001564 <menu+0xb4>
			menuSayac = 11;
 800155e:	4b67      	ldr	r3, [pc, #412]	; (80016fc <menu+0x24c>)
 8001560:	220b      	movs	r2, #11
 8001562:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001564:	4b65      	ldr	r3, [pc, #404]	; (80016fc <menu+0x24c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b0c      	cmp	r3, #12
 800156a:	d10e      	bne.n	800158a <menu+0xda>
 800156c:	4b67      	ldr	r3, [pc, #412]	; (800170c <menu+0x25c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d003      	beq.n	800157c <menu+0xcc>
 8001574:	4b65      	ldr	r3, [pc, #404]	; (800170c <menu+0x25c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d106      	bne.n	800158a <menu+0xda>
 800157c:	4b61      	ldr	r3, [pc, #388]	; (8001704 <menu+0x254>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d102      	bne.n	800158a <menu+0xda>
			menuSayac = 16;
 8001584:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <menu+0x24c>)
 8001586:	2210      	movs	r2, #16
 8001588:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800158a:	4b5c      	ldr	r3, [pc, #368]	; (80016fc <menu+0x24c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b0c      	cmp	r3, #12
 8001590:	d10e      	bne.n	80015b0 <menu+0x100>
 8001592:	4b5e      	ldr	r3, [pc, #376]	; (800170c <menu+0x25c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d003      	beq.n	80015a2 <menu+0xf2>
 800159a:	4b5c      	ldr	r3, [pc, #368]	; (800170c <menu+0x25c>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d106      	bne.n	80015b0 <menu+0x100>
 80015a2:	4b58      	ldr	r3, [pc, #352]	; (8001704 <menu+0x254>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d102      	bne.n	80015b0 <menu+0x100>
			menuSayac = 13;
 80015aa:	4b54      	ldr	r3, [pc, #336]	; (80016fc <menu+0x24c>)
 80015ac:	220d      	movs	r2, #13
 80015ae:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80015b0:	4b52      	ldr	r3, [pc, #328]	; (80016fc <menu+0x24c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d106      	bne.n	80015c6 <menu+0x116>
 80015b8:	4b55      	ldr	r3, [pc, #340]	; (8001710 <menu+0x260>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d102      	bne.n	80015c6 <menu+0x116>
			menuSayac = 16;
 80015c0:	4b4e      	ldr	r3, [pc, #312]	; (80016fc <menu+0x24c>)
 80015c2:	2210      	movs	r2, #16
 80015c4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80015c6:	4b4d      	ldr	r3, [pc, #308]	; (80016fc <menu+0x24c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b18      	cmp	r3, #24
 80015cc:	d106      	bne.n	80015dc <menu+0x12c>
 80015ce:	4b4c      	ldr	r3, [pc, #304]	; (8001700 <menu+0x250>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <menu+0x12c>
			menuSayac = 26;
 80015d6:	4b49      	ldr	r3, [pc, #292]	; (80016fc <menu+0x24c>)
 80015d8:	221a      	movs	r2, #26
 80015da:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80015dc:	f004 fcaa 	bl	8005f34 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015e0:	2108      	movs	r1, #8
 80015e2:	484c      	ldr	r0, [pc, #304]	; (8001714 <menu+0x264>)
 80015e4:	f008 f91e 	bl	8009824 <HAL_GPIO_ReadPin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d175      	bne.n	80016da <menu+0x22a>
 80015ee:	4b42      	ldr	r3, [pc, #264]	; (80016f8 <menu+0x248>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	f083 0301 	eor.w	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d06e      	beq.n	80016da <menu+0x22a>
		if (menuSayac <= 1) {
 80015fc:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <menu+0x24c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d802      	bhi.n	800160a <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001604:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <menu+0x24c>)
 8001606:	2224      	movs	r2, #36	; 0x24
 8001608:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800160a:	4b3c      	ldr	r3, [pc, #240]	; (80016fc <menu+0x24c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	3b01      	subs	r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b3a      	ldr	r3, [pc, #232]	; (80016fc <menu+0x24c>)
 8001614:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001616:	4b39      	ldr	r3, [pc, #228]	; (80016fc <menu+0x24c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b14      	cmp	r3, #20
 800161c:	d106      	bne.n	800162c <menu+0x17c>
 800161e:	4b38      	ldr	r3, [pc, #224]	; (8001700 <menu+0x250>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d102      	bne.n	800162c <menu+0x17c>
			menuSayac = 17;
 8001626:	4b35      	ldr	r3, [pc, #212]	; (80016fc <menu+0x24c>)
 8001628:	2211      	movs	r2, #17
 800162a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800162c:	4b33      	ldr	r3, [pc, #204]	; (80016fc <menu+0x24c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d106      	bne.n	8001642 <menu+0x192>
 8001634:	4b33      	ldr	r3, [pc, #204]	; (8001704 <menu+0x254>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <menu+0x192>
			menuSayac = 7;
 800163c:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <menu+0x24c>)
 800163e:	2207      	movs	r2, #7
 8001640:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001642:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <menu+0x24c>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b0f      	cmp	r3, #15
 8001648:	d106      	bne.n	8001658 <menu+0x1a8>
 800164a:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <menu+0x254>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d102      	bne.n	8001658 <menu+0x1a8>
			menuSayac = 12;
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <menu+0x24c>)
 8001654:	220c      	movs	r2, #12
 8001656:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <menu+0x24c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b0c      	cmp	r3, #12
 800165e:	d106      	bne.n	800166e <menu+0x1be>
 8001660:	4b28      	ldr	r3, [pc, #160]	; (8001704 <menu+0x254>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d102      	bne.n	800166e <menu+0x1be>
			menuSayac = 8;
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <menu+0x24c>)
 800166a:	2208      	movs	r2, #8
 800166c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <menu+0x24c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b0a      	cmp	r3, #10
 8001674:	d10a      	bne.n	800168c <menu+0x1dc>
 8001676:	4b24      	ldr	r3, [pc, #144]	; (8001708 <menu+0x258>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d003      	beq.n	8001686 <menu+0x1d6>
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <menu+0x258>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d102      	bne.n	800168c <menu+0x1dc>
			menuSayac = 9;
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <menu+0x24c>)
 8001688:	2209      	movs	r2, #9
 800168a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <menu+0x24c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d10a      	bne.n	80016aa <menu+0x1fa>
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <menu+0x25c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d003      	beq.n	80016a4 <menu+0x1f4>
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <menu+0x25c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d102      	bne.n	80016aa <menu+0x1fa>
			menuSayac = 11;
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <menu+0x24c>)
 80016a6:	220b      	movs	r2, #11
 80016a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <menu+0x24c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	d106      	bne.n	80016c0 <menu+0x210>
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <menu+0x260>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d102      	bne.n	80016c0 <menu+0x210>
			menuSayac = 14;
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <menu+0x24c>)
 80016bc:	220e      	movs	r2, #14
 80016be:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <menu+0x24c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b19      	cmp	r3, #25
 80016c6:	d106      	bne.n	80016d6 <menu+0x226>
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <menu+0x250>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <menu+0x226>
			menuSayac = 23;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <menu+0x24c>)
 80016d2:	2217      	movs	r2, #23
 80016d4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016d6:	f004 fc2d 	bl	8005f34 <bekle>
	}

	if (menuSayac == 0) {
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <menu+0x24c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d134      	bne.n	800174c <menu+0x29c>
		if(dilSecim == 0) {
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <menu+0x268>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d122      	bne.n	8001730 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80016ea:	4a0c      	ldr	r2, [pc, #48]	; (800171c <menu+0x26c>)
 80016ec:	2101      	movs	r1, #1
 80016ee:	2001      	movs	r0, #1
 80016f0:	e016      	b.n	8001720 <menu+0x270>
 80016f2:	bf00      	nop
 80016f4:	40010800 	.word	0x40010800
 80016f8:	20000c3b 	.word	0x20000c3b
 80016fc:	20000c0c 	.word	0x20000c0c
 8001700:	20000c1b 	.word	0x20000c1b
 8001704:	20000c14 	.word	0x20000c14
 8001708:	20000c15 	.word	0x20000c15
 800170c:	20000c16 	.word	0x20000c16
 8001710:	20000c17 	.word	0x20000c17
 8001714:	40011000 	.word	0x40011000
 8001718:	20000c2d 	.word	0x20000c2d
 800171c:	0800cbb8 	.word	0x0800cbb8
 8001720:	f7fe ff20 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001724:	4a94      	ldr	r2, [pc, #592]	; (8001978 <menu+0x4c8>)
 8001726:	2101      	movs	r1, #1
 8001728:	2002      	movs	r0, #2
 800172a:	f7fe ff1b 	bl	8000564 <lcd_print>
 800172e:	e00d      	b.n	800174c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001730:	4b92      	ldr	r3, [pc, #584]	; (800197c <menu+0x4cc>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d109      	bne.n	800174c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001738:	4a91      	ldr	r2, [pc, #580]	; (8001980 <menu+0x4d0>)
 800173a:	2101      	movs	r1, #1
 800173c:	2001      	movs	r0, #1
 800173e:	f7fe ff11 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001742:	4a90      	ldr	r2, [pc, #576]	; (8001984 <menu+0x4d4>)
 8001744:	2101      	movs	r1, #1
 8001746:	2002      	movs	r0, #2
 8001748:	f7fe ff0c 	bl	8000564 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800174c:	4b8e      	ldr	r3, [pc, #568]	; (8001988 <menu+0x4d8>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	f040 82b5 	bne.w	8001cc0 <menu+0x810>
		if(dilSecim == 0) {
 8001756:	4b89      	ldr	r3, [pc, #548]	; (800197c <menu+0x4cc>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d105      	bne.n	800176a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800175e:	4a8b      	ldr	r2, [pc, #556]	; (800198c <menu+0x4dc>)
 8001760:	2101      	movs	r1, #1
 8001762:	2001      	movs	r0, #1
 8001764:	f7fe fefe 	bl	8000564 <lcd_print>
 8001768:	e008      	b.n	800177c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800176a:	4b84      	ldr	r3, [pc, #528]	; (800197c <menu+0x4cc>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d104      	bne.n	800177c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001772:	4a87      	ldr	r2, [pc, #540]	; (8001990 <menu+0x4e0>)
 8001774:	2101      	movs	r1, #1
 8001776:	2001      	movs	r0, #1
 8001778:	f7fe fef4 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800177c:	4b85      	ldr	r3, [pc, #532]	; (8001994 <menu+0x4e4>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d123      	bne.n	80017cc <menu+0x31c>
			if(dilSecim == 0) {
 8001784:	4b7d      	ldr	r3, [pc, #500]	; (800197c <menu+0x4cc>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d105      	bne.n	8001798 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800178c:	4a82      	ldr	r2, [pc, #520]	; (8001998 <menu+0x4e8>)
 800178e:	2101      	movs	r1, #1
 8001790:	2002      	movs	r0, #2
 8001792:	f7fe fee7 	bl	8000564 <lcd_print>
 8001796:	e008      	b.n	80017aa <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001798:	4b78      	ldr	r3, [pc, #480]	; (800197c <menu+0x4cc>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d104      	bne.n	80017aa <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80017a0:	4a7e      	ldr	r2, [pc, #504]	; (800199c <menu+0x4ec>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	2002      	movs	r0, #2
 80017a6:	f7fe fedd 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80017aa:	4a7d      	ldr	r2, [pc, #500]	; (80019a0 <menu+0x4f0>)
 80017ac:	210f      	movs	r1, #15
 80017ae:	2002      	movs	r0, #2
 80017b0:	f7fe fed8 	bl	8000564 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80017b4:	4b7b      	ldr	r3, [pc, #492]	; (80019a4 <menu+0x4f4>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	220a      	movs	r2, #10
 80017ba:	497b      	ldr	r1, [pc, #492]	; (80019a8 <menu+0x4f8>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f00b f827 	bl	800c810 <itoa>
			lcd_print(2, 14, snum);
 80017c2:	4a79      	ldr	r2, [pc, #484]	; (80019a8 <menu+0x4f8>)
 80017c4:	210e      	movs	r1, #14
 80017c6:	2002      	movs	r0, #2
 80017c8:	f7fe fecc 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80017cc:	4b71      	ldr	r3, [pc, #452]	; (8001994 <menu+0x4e4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d123      	bne.n	800181c <menu+0x36c>
			if(dilSecim == 0) {
 80017d4:	4b69      	ldr	r3, [pc, #420]	; (800197c <menu+0x4cc>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80017dc:	4a73      	ldr	r2, [pc, #460]	; (80019ac <menu+0x4fc>)
 80017de:	2101      	movs	r1, #1
 80017e0:	2002      	movs	r0, #2
 80017e2:	f7fe febf 	bl	8000564 <lcd_print>
 80017e6:	e008      	b.n	80017fa <menu+0x34a>
			} else if(dilSecim == 1) {
 80017e8:	4b64      	ldr	r3, [pc, #400]	; (800197c <menu+0x4cc>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d104      	bne.n	80017fa <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80017f0:	4a6f      	ldr	r2, [pc, #444]	; (80019b0 <menu+0x500>)
 80017f2:	2101      	movs	r1, #1
 80017f4:	2002      	movs	r0, #2
 80017f6:	f7fe feb5 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017fa:	4a6e      	ldr	r2, [pc, #440]	; (80019b4 <menu+0x504>)
 80017fc:	210f      	movs	r1, #15
 80017fe:	2002      	movs	r0, #2
 8001800:	f7fe feb0 	bl	8000564 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001804:	4b6c      	ldr	r3, [pc, #432]	; (80019b8 <menu+0x508>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	220a      	movs	r2, #10
 800180a:	4967      	ldr	r1, [pc, #412]	; (80019a8 <menu+0x4f8>)
 800180c:	4618      	mov	r0, r3
 800180e:	f00a ffff 	bl	800c810 <itoa>
			lcd_print(2, 14, snum);
 8001812:	4a65      	ldr	r2, [pc, #404]	; (80019a8 <menu+0x4f8>)
 8001814:	210e      	movs	r1, #14
 8001816:	2002      	movs	r0, #2
 8001818:	f7fe fea4 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800181c:	4b5d      	ldr	r3, [pc, #372]	; (8001994 <menu+0x4e4>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d123      	bne.n	800186c <menu+0x3bc>
			if(dilSecim == 0) {
 8001824:	4b55      	ldr	r3, [pc, #340]	; (800197c <menu+0x4cc>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800182c:	4a63      	ldr	r2, [pc, #396]	; (80019bc <menu+0x50c>)
 800182e:	2101      	movs	r1, #1
 8001830:	2002      	movs	r0, #2
 8001832:	f7fe fe97 	bl	8000564 <lcd_print>
 8001836:	e008      	b.n	800184a <menu+0x39a>
			} else if(dilSecim == 1) {
 8001838:	4b50      	ldr	r3, [pc, #320]	; (800197c <menu+0x4cc>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d104      	bne.n	800184a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001840:	4a5f      	ldr	r2, [pc, #380]	; (80019c0 <menu+0x510>)
 8001842:	2101      	movs	r1, #1
 8001844:	2002      	movs	r0, #2
 8001846:	f7fe fe8d 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800184a:	4a5a      	ldr	r2, [pc, #360]	; (80019b4 <menu+0x504>)
 800184c:	210f      	movs	r1, #15
 800184e:	2002      	movs	r0, #2
 8001850:	f7fe fe88 	bl	8000564 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001854:	4b5b      	ldr	r3, [pc, #364]	; (80019c4 <menu+0x514>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	220a      	movs	r2, #10
 800185a:	4953      	ldr	r1, [pc, #332]	; (80019a8 <menu+0x4f8>)
 800185c:	4618      	mov	r0, r3
 800185e:	f00a ffd7 	bl	800c810 <itoa>
			lcd_print(2, 14, snum);
 8001862:	4a51      	ldr	r2, [pc, #324]	; (80019a8 <menu+0x4f8>)
 8001864:	210e      	movs	r1, #14
 8001866:	2002      	movs	r0, #2
 8001868:	f7fe fe7c 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800186c:	4b49      	ldr	r3, [pc, #292]	; (8001994 <menu+0x4e4>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d123      	bne.n	80018bc <menu+0x40c>
			if(dilSecim == 0) {
 8001874:	4b41      	ldr	r3, [pc, #260]	; (800197c <menu+0x4cc>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d105      	bne.n	8001888 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800187c:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <menu+0x518>)
 800187e:	2101      	movs	r1, #1
 8001880:	2002      	movs	r0, #2
 8001882:	f7fe fe6f 	bl	8000564 <lcd_print>
 8001886:	e008      	b.n	800189a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001888:	4b3c      	ldr	r3, [pc, #240]	; (800197c <menu+0x4cc>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d104      	bne.n	800189a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001890:	4a4e      	ldr	r2, [pc, #312]	; (80019cc <menu+0x51c>)
 8001892:	2101      	movs	r1, #1
 8001894:	2002      	movs	r0, #2
 8001896:	f7fe fe65 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800189a:	4a46      	ldr	r2, [pc, #280]	; (80019b4 <menu+0x504>)
 800189c:	210f      	movs	r1, #15
 800189e:	2002      	movs	r0, #2
 80018a0:	f7fe fe60 	bl	8000564 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80018a4:	4b4a      	ldr	r3, [pc, #296]	; (80019d0 <menu+0x520>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	220a      	movs	r2, #10
 80018aa:	493f      	ldr	r1, [pc, #252]	; (80019a8 <menu+0x4f8>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00a ffaf 	bl	800c810 <itoa>
			lcd_print(2, 14, snum);
 80018b2:	4a3d      	ldr	r2, [pc, #244]	; (80019a8 <menu+0x4f8>)
 80018b4:	210e      	movs	r1, #14
 80018b6:	2002      	movs	r0, #2
 80018b8:	f7fe fe54 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <menu+0x4e4>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d123      	bne.n	800190c <menu+0x45c>
			if(dilSecim == 0) {
 80018c4:	4b2d      	ldr	r3, [pc, #180]	; (800197c <menu+0x4cc>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d105      	bne.n	80018d8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80018cc:	4a41      	ldr	r2, [pc, #260]	; (80019d4 <menu+0x524>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	2002      	movs	r0, #2
 80018d2:	f7fe fe47 	bl	8000564 <lcd_print>
 80018d6:	e008      	b.n	80018ea <menu+0x43a>
			} else if(dilSecim == 1) {
 80018d8:	4b28      	ldr	r3, [pc, #160]	; (800197c <menu+0x4cc>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d104      	bne.n	80018ea <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80018e0:	4a3d      	ldr	r2, [pc, #244]	; (80019d8 <menu+0x528>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	2002      	movs	r0, #2
 80018e6:	f7fe fe3d 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018ea:	4a32      	ldr	r2, [pc, #200]	; (80019b4 <menu+0x504>)
 80018ec:	210f      	movs	r1, #15
 80018ee:	2002      	movs	r0, #2
 80018f0:	f7fe fe38 	bl	8000564 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80018f4:	4b39      	ldr	r3, [pc, #228]	; (80019dc <menu+0x52c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	220a      	movs	r2, #10
 80018fa:	492b      	ldr	r1, [pc, #172]	; (80019a8 <menu+0x4f8>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f00a ff87 	bl	800c810 <itoa>
			lcd_print(2, 14, snum);
 8001902:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <menu+0x4f8>)
 8001904:	210e      	movs	r1, #14
 8001906:	2002      	movs	r0, #2
 8001908:	f7fe fe2c 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <menu+0x4e4>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d123      	bne.n	800195c <menu+0x4ac>
			if(dilSecim == 0) {
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <menu+0x4cc>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d105      	bne.n	8001928 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 800191c:	4a30      	ldr	r2, [pc, #192]	; (80019e0 <menu+0x530>)
 800191e:	2101      	movs	r1, #1
 8001920:	2002      	movs	r0, #2
 8001922:	f7fe fe1f 	bl	8000564 <lcd_print>
 8001926:	e008      	b.n	800193a <menu+0x48a>
			} else if(dilSecim == 1) {
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <menu+0x4cc>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d104      	bne.n	800193a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001930:	4a2c      	ldr	r2, [pc, #176]	; (80019e4 <menu+0x534>)
 8001932:	2101      	movs	r1, #1
 8001934:	2002      	movs	r0, #2
 8001936:	f7fe fe15 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800193a:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <menu+0x504>)
 800193c:	210f      	movs	r1, #15
 800193e:	2002      	movs	r0, #2
 8001940:	f7fe fe10 	bl	8000564 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001944:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <menu+0x538>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	220a      	movs	r2, #10
 800194a:	4917      	ldr	r1, [pc, #92]	; (80019a8 <menu+0x4f8>)
 800194c:	4618      	mov	r0, r3
 800194e:	f00a ff5f 	bl	800c810 <itoa>
			lcd_print(2, 14, snum);
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <menu+0x4f8>)
 8001954:	210e      	movs	r1, #14
 8001956:	2002      	movs	r0, #2
 8001958:	f7fe fe04 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800195c:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <menu+0x4e4>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b06      	cmp	r3, #6
 8001962:	d15f      	bne.n	8001a24 <menu+0x574>
			if(dilSecim == 0) {
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <menu+0x4cc>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d141      	bne.n	80019f0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 800196c:	4a1f      	ldr	r2, [pc, #124]	; (80019ec <menu+0x53c>)
 800196e:	2101      	movs	r1, #1
 8001970:	2002      	movs	r0, #2
 8001972:	f7fe fdf7 	bl	8000564 <lcd_print>
 8001976:	e044      	b.n	8001a02 <menu+0x552>
 8001978:	0800cbcc 	.word	0x0800cbcc
 800197c:	20000c2d 	.word	0x20000c2d
 8001980:	0800cbe0 	.word	0x0800cbe0
 8001984:	0800cbf4 	.word	0x0800cbf4
 8001988:	20000c0c 	.word	0x20000c0c
 800198c:	0800cc08 	.word	0x0800cc08
 8001990:	0800cc1c 	.word	0x0800cc1c
 8001994:	20000c0e 	.word	0x20000c0e
 8001998:	0800cc30 	.word	0x0800cc30
 800199c:	0800cc40 	.word	0x0800cc40
 80019a0:	0800cc50 	.word	0x0800cc50
 80019a4:	20000c2e 	.word	0x20000c2e
 80019a8:	20000bac 	.word	0x20000bac
 80019ac:	0800cc54 	.word	0x0800cc54
 80019b0:	0800cc64 	.word	0x0800cc64
 80019b4:	0800cc74 	.word	0x0800cc74
 80019b8:	20000c2f 	.word	0x20000c2f
 80019bc:	0800cc78 	.word	0x0800cc78
 80019c0:	0800cc88 	.word	0x0800cc88
 80019c4:	20000c30 	.word	0x20000c30
 80019c8:	0800cc98 	.word	0x0800cc98
 80019cc:	0800cca8 	.word	0x0800cca8
 80019d0:	20000c31 	.word	0x20000c31
 80019d4:	0800ccb8 	.word	0x0800ccb8
 80019d8:	0800ccc8 	.word	0x0800ccc8
 80019dc:	20000c32 	.word	0x20000c32
 80019e0:	0800ccd8 	.word	0x0800ccd8
 80019e4:	0800cce8 	.word	0x0800cce8
 80019e8:	20000c33 	.word	0x20000c33
 80019ec:	0800ccf8 	.word	0x0800ccf8
			} else if(dilSecim == 1) {
 80019f0:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <menu+0x680>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d104      	bne.n	8001a02 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80019f8:	4a4e      	ldr	r2, [pc, #312]	; (8001b34 <menu+0x684>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	2002      	movs	r0, #2
 80019fe:	f7fe fdb1 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a02:	4a4d      	ldr	r2, [pc, #308]	; (8001b38 <menu+0x688>)
 8001a04:	210f      	movs	r1, #15
 8001a06:	2002      	movs	r0, #2
 8001a08:	f7fe fdac 	bl	8000564 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001a0c:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <menu+0x68c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	220a      	movs	r2, #10
 8001a12:	494b      	ldr	r1, [pc, #300]	; (8001b40 <menu+0x690>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00a fefb 	bl	800c810 <itoa>
			lcd_print(2, 14, snum);
 8001a1a:	4a49      	ldr	r2, [pc, #292]	; (8001b40 <menu+0x690>)
 8001a1c:	210e      	movs	r1, #14
 8001a1e:	2002      	movs	r0, #2
 8001a20:	f7fe fda0 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001a24:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <menu+0x694>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b07      	cmp	r3, #7
 8001a2a:	d123      	bne.n	8001a74 <menu+0x5c4>
			if(dilSecim == 0) {
 8001a2c:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <menu+0x680>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001a34:	4a44      	ldr	r2, [pc, #272]	; (8001b48 <menu+0x698>)
 8001a36:	2101      	movs	r1, #1
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f7fe fd93 	bl	8000564 <lcd_print>
 8001a3e:	e008      	b.n	8001a52 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001a40:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <menu+0x680>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d104      	bne.n	8001a52 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001a48:	4a40      	ldr	r2, [pc, #256]	; (8001b4c <menu+0x69c>)
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f7fe fd89 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a52:	4a39      	ldr	r2, [pc, #228]	; (8001b38 <menu+0x688>)
 8001a54:	210f      	movs	r1, #15
 8001a56:	2002      	movs	r0, #2
 8001a58:	f7fe fd84 	bl	8000564 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001a5c:	4b3c      	ldr	r3, [pc, #240]	; (8001b50 <menu+0x6a0>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	220a      	movs	r2, #10
 8001a62:	4937      	ldr	r1, [pc, #220]	; (8001b40 <menu+0x690>)
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00a fed3 	bl	800c810 <itoa>
			lcd_print(2, 14, snum);
 8001a6a:	4a35      	ldr	r2, [pc, #212]	; (8001b40 <menu+0x690>)
 8001a6c:	210e      	movs	r1, #14
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f7fe fd78 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001a74:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <menu+0x694>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d123      	bne.n	8001ac4 <menu+0x614>
			if(dilSecim == 0) {
 8001a7c:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <menu+0x680>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d105      	bne.n	8001a90 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001a84:	4a33      	ldr	r2, [pc, #204]	; (8001b54 <menu+0x6a4>)
 8001a86:	2101      	movs	r1, #1
 8001a88:	2002      	movs	r0, #2
 8001a8a:	f7fe fd6b 	bl	8000564 <lcd_print>
 8001a8e:	e008      	b.n	8001aa2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <menu+0x680>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d104      	bne.n	8001aa2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001a98:	4a2f      	ldr	r2, [pc, #188]	; (8001b58 <menu+0x6a8>)
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f7fe fd61 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001aa2:	4a25      	ldr	r2, [pc, #148]	; (8001b38 <menu+0x688>)
 8001aa4:	210f      	movs	r1, #15
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f7fe fd5c 	bl	8000564 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <menu+0x6ac>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	220a      	movs	r2, #10
 8001ab2:	4923      	ldr	r1, [pc, #140]	; (8001b40 <menu+0x690>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f00a feab 	bl	800c810 <itoa>
			lcd_print(2, 14, snum);
 8001aba:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <menu+0x690>)
 8001abc:	210e      	movs	r1, #14
 8001abe:	2002      	movs	r0, #2
 8001ac0:	f7fe fd50 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <menu+0x694>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	d123      	bne.n	8001b14 <menu+0x664>
			if(dilSecim == 0) {
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <menu+0x680>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001ad4:	4a22      	ldr	r2, [pc, #136]	; (8001b60 <menu+0x6b0>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f7fe fd43 	bl	8000564 <lcd_print>
 8001ade:	e008      	b.n	8001af2 <menu+0x642>
			} else if(dilSecim == 1) {
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <menu+0x680>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d104      	bne.n	8001af2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001ae8:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <menu+0x6b4>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	2002      	movs	r0, #2
 8001aee:	f7fe fd39 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001af2:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <menu+0x6b8>)
 8001af4:	2110      	movs	r1, #16
 8001af6:	2002      	movs	r0, #2
 8001af8:	f7fe fd34 	bl	8000564 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <menu+0x6bc>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	220a      	movs	r2, #10
 8001b02:	490f      	ldr	r1, [pc, #60]	; (8001b40 <menu+0x690>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f00a fe83 	bl	800c810 <itoa>
			lcd_print(2, 15, snum);
 8001b0a:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <menu+0x690>)
 8001b0c:	210f      	movs	r1, #15
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f7fe fd28 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <menu+0x694>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b0a      	cmp	r3, #10
 8001b1a:	d134      	bne.n	8001b86 <menu+0x6d6>
			if(dilSecim == 0) {
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <menu+0x680>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d127      	bne.n	8001b74 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001b24:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <menu+0x6c0>)
 8001b26:	2101      	movs	r1, #1
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f7fe fd1b 	bl	8000564 <lcd_print>
 8001b2e:	e02a      	b.n	8001b86 <menu+0x6d6>
 8001b30:	20000c2d 	.word	0x20000c2d
 8001b34:	0800cd08 	.word	0x0800cd08
 8001b38:	0800cc74 	.word	0x0800cc74
 8001b3c:	20000c34 	.word	0x20000c34
 8001b40:	20000bac 	.word	0x20000bac
 8001b44:	20000c0e 	.word	0x20000c0e
 8001b48:	0800cd18 	.word	0x0800cd18
 8001b4c:	0800cd28 	.word	0x0800cd28
 8001b50:	20000c35 	.word	0x20000c35
 8001b54:	0800cd38 	.word	0x0800cd38
 8001b58:	0800cd48 	.word	0x0800cd48
 8001b5c:	20000c36 	.word	0x20000c36
 8001b60:	0800cd58 	.word	0x0800cd58
 8001b64:	0800cd68 	.word	0x0800cd68
 8001b68:	0800cd78 	.word	0x0800cd78
 8001b6c:	20000c37 	.word	0x20000c37
 8001b70:	0800cd7c 	.word	0x0800cd7c
			} else if(dilSecim == 1) {
 8001b74:	4b82      	ldr	r3, [pc, #520]	; (8001d80 <menu+0x8d0>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d104      	bne.n	8001b86 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001b7c:	4a81      	ldr	r2, [pc, #516]	; (8001d84 <menu+0x8d4>)
 8001b7e:	2101      	movs	r1, #1
 8001b80:	2002      	movs	r0, #2
 8001b82:	f7fe fcef 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b86:	2102      	movs	r1, #2
 8001b88:	487f      	ldr	r0, [pc, #508]	; (8001d88 <menu+0x8d8>)
 8001b8a:	f007 fe4b 	bl	8009824 <HAL_GPIO_ReadPin>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d119      	bne.n	8001bc8 <menu+0x718>
 8001b94:	4b7d      	ldr	r3, [pc, #500]	; (8001d8c <menu+0x8dc>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	f083 0301 	eor.w	r3, r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d012      	beq.n	8001bc8 <menu+0x718>
 8001ba2:	4b7b      	ldr	r3, [pc, #492]	; (8001d90 <menu+0x8e0>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10e      	bne.n	8001bc8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001baa:	4b7a      	ldr	r3, [pc, #488]	; (8001d94 <menu+0x8e4>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b78      	ldr	r3, [pc, #480]	; (8001d94 <menu+0x8e4>)
 8001bb4:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001bb6:	4b77      	ldr	r3, [pc, #476]	; (8001d94 <menu+0x8e4>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b0a      	cmp	r3, #10
 8001bbc:	d902      	bls.n	8001bc4 <menu+0x714>
				hataGostermeSirasi = 0;
 8001bbe:	4b75      	ldr	r3, [pc, #468]	; (8001d94 <menu+0x8e4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bc4:	f004 f9b6 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bc8:	2104      	movs	r1, #4
 8001bca:	486f      	ldr	r0, [pc, #444]	; (8001d88 <menu+0x8d8>)
 8001bcc:	f007 fe2a 	bl	8009824 <HAL_GPIO_ReadPin>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d119      	bne.n	8001c0a <menu+0x75a>
 8001bd6:	4b6d      	ldr	r3, [pc, #436]	; (8001d8c <menu+0x8dc>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	f083 0301 	eor.w	r3, r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d012      	beq.n	8001c0a <menu+0x75a>
 8001be4:	4b6a      	ldr	r3, [pc, #424]	; (8001d90 <menu+0x8e0>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10e      	bne.n	8001c0a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001bec:	4b69      	ldr	r3, [pc, #420]	; (8001d94 <menu+0x8e4>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <menu+0x8e4>)
 8001bf6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001bf8:	4b66      	ldr	r3, [pc, #408]	; (8001d94 <menu+0x8e4>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b0b      	cmp	r3, #11
 8001bfe:	d902      	bls.n	8001c06 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001c00:	4b64      	ldr	r3, [pc, #400]	; (8001d94 <menu+0x8e4>)
 8001c02:	220a      	movs	r2, #10
 8001c04:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001c06:	f004 f995 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001c0a:	2108      	movs	r1, #8
 8001c0c:	485e      	ldr	r0, [pc, #376]	; (8001d88 <menu+0x8d8>)
 8001c0e:	f007 fe09 	bl	8009824 <HAL_GPIO_ReadPin>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d153      	bne.n	8001cc0 <menu+0x810>
 8001c18:	4b5c      	ldr	r3, [pc, #368]	; (8001d8c <menu+0x8dc>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d04c      	beq.n	8001cc0 <menu+0x810>
 8001c26:	4b5b      	ldr	r3, [pc, #364]	; (8001d94 <menu+0x8e4>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b0a      	cmp	r3, #10
 8001c2c:	d148      	bne.n	8001cc0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001c2e:	4b5a      	ldr	r3, [pc, #360]	; (8001d98 <menu+0x8e8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <menu+0x8ec>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001c3c:	4b58      	ldr	r3, [pc, #352]	; (8001da0 <menu+0x8f0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <menu+0x8ec>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001c4a:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <menu+0x8f4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
 8001c50:	4b52      	ldr	r3, [pc, #328]	; (8001d9c <menu+0x8ec>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001c58:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <menu+0x8f8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <menu+0x8ec>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001c66:	4b51      	ldr	r3, [pc, #324]	; (8001dac <menu+0x8fc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <menu+0x8ec>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001c74:	4b4e      	ldr	r3, [pc, #312]	; (8001db0 <menu+0x900>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	4b48      	ldr	r3, [pc, #288]	; (8001d9c <menu+0x8ec>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001c82:	4b4c      	ldr	r3, [pc, #304]	; (8001db4 <menu+0x904>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <menu+0x8ec>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001c90:	4b49      	ldr	r3, [pc, #292]	; (8001db8 <menu+0x908>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <menu+0x8ec>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001c9e:	4b47      	ldr	r3, [pc, #284]	; (8001dbc <menu+0x90c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <menu+0x8ec>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001cac:	4b44      	ldr	r3, [pc, #272]	; (8001dc0 <menu+0x910>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <menu+0x8ec>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001cba:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <menu+0x914>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001cc0:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <menu+0x918>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	f040 80fc 	bne.w	8001ec2 <menu+0xa12>
		if(dilSecim == 0) {
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <menu+0x8d0>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001cd2:	4a3e      	ldr	r2, [pc, #248]	; (8001dcc <menu+0x91c>)
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	f7fe fc44 	bl	8000564 <lcd_print>
 8001cdc:	e008      	b.n	8001cf0 <menu+0x840>
		} else if(dilSecim == 1) {
 8001cde:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <menu+0x8d0>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d104      	bne.n	8001cf0 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001ce6:	4a3a      	ldr	r2, [pc, #232]	; (8001dd0 <menu+0x920>)
 8001ce8:	2101      	movs	r1, #1
 8001cea:	2001      	movs	r0, #1
 8001cec:	f7fe fc3a 	bl	8000564 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001cf0:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <menu+0x8e0>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d003      	beq.n	8001d00 <menu+0x850>
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <menu+0x8e0>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d112      	bne.n	8001d26 <menu+0x876>
			if(dilSecim == 0) {
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <menu+0x8d0>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d105      	bne.n	8001d14 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001d08:	4a32      	ldr	r2, [pc, #200]	; (8001dd4 <menu+0x924>)
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	f7fe fc29 	bl	8000564 <lcd_print>
 8001d12:	e008      	b.n	8001d26 <menu+0x876>
			} else if(dilSecim == 1) {
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <menu+0x8d0>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d104      	bne.n	8001d26 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001d1c:	4a2e      	ldr	r2, [pc, #184]	; (8001dd8 <menu+0x928>)
 8001d1e:	2101      	movs	r1, #1
 8001d20:	2002      	movs	r0, #2
 8001d22:	f7fe fc1f 	bl	8000564 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001d26:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <menu+0x92c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d116      	bne.n	8001d5c <menu+0x8ac>
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <menu+0x8e0>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d112      	bne.n	8001d5c <menu+0x8ac>
			if(dilSecim == 0) {
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <menu+0x8d0>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d105      	bne.n	8001d4a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001d3e:	4a28      	ldr	r2, [pc, #160]	; (8001de0 <menu+0x930>)
 8001d40:	2101      	movs	r1, #1
 8001d42:	2002      	movs	r0, #2
 8001d44:	f7fe fc0e 	bl	8000564 <lcd_print>
 8001d48:	e008      	b.n	8001d5c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <menu+0x8d0>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d104      	bne.n	8001d5c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001d52:	4a24      	ldr	r2, [pc, #144]	; (8001de4 <menu+0x934>)
 8001d54:	2101      	movs	r1, #1
 8001d56:	2002      	movs	r0, #2
 8001d58:	f7fe fc04 	bl	8000564 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <menu+0x92c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d14c      	bne.n	8001dfe <menu+0x94e>
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <menu+0x8e0>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d148      	bne.n	8001dfe <menu+0x94e>
			if(dilSecim == 0) {
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <menu+0x8d0>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d13b      	bne.n	8001dec <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001d74:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <menu+0x938>)
 8001d76:	2101      	movs	r1, #1
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7fe fbf3 	bl	8000564 <lcd_print>
 8001d7e:	e03e      	b.n	8001dfe <menu+0x94e>
 8001d80:	20000c2d 	.word	0x20000c2d
 8001d84:	0800cd90 	.word	0x0800cd90
 8001d88:	40010800 	.word	0x40010800
 8001d8c:	20000c3b 	.word	0x20000c3b
 8001d90:	20000c1b 	.word	0x20000c1b
 8001d94:	20000c0e 	.word	0x20000c0e
 8001d98:	20000c2e 	.word	0x20000c2e
 8001d9c:	20000b3c 	.word	0x20000b3c
 8001da0:	20000c2f 	.word	0x20000c2f
 8001da4:	20000c30 	.word	0x20000c30
 8001da8:	20000c31 	.word	0x20000c31
 8001dac:	20000c32 	.word	0x20000c32
 8001db0:	20000c33 	.word	0x20000c33
 8001db4:	20000c34 	.word	0x20000c34
 8001db8:	20000c35 	.word	0x20000c35
 8001dbc:	20000c36 	.word	0x20000c36
 8001dc0:	20000c37 	.word	0x20000c37
 8001dc4:	20000c38 	.word	0x20000c38
 8001dc8:	20000c0c 	.word	0x20000c0c
 8001dcc:	0800cda4 	.word	0x0800cda4
 8001dd0:	0800cdb8 	.word	0x0800cdb8
 8001dd4:	0800cdcc 	.word	0x0800cdcc
 8001dd8:	0800cde0 	.word	0x0800cde0
 8001ddc:	20000c0d 	.word	0x20000c0d
 8001de0:	0800cdf4 	.word	0x0800cdf4
 8001de4:	0800ce04 	.word	0x0800ce04
 8001de8:	0800ce14 	.word	0x0800ce14
			} else if(dilSecim == 1) {
 8001dec:	4b98      	ldr	r3, [pc, #608]	; (8002050 <menu+0xba0>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d104      	bne.n	8001dfe <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001df4:	4a97      	ldr	r2, [pc, #604]	; (8002054 <menu+0xba4>)
 8001df6:	2101      	movs	r1, #1
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f7fe fbb3 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001dfe:	2102      	movs	r1, #2
 8001e00:	4895      	ldr	r0, [pc, #596]	; (8002058 <menu+0xba8>)
 8001e02:	f007 fd0f 	bl	8009824 <HAL_GPIO_ReadPin>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d119      	bne.n	8001e40 <menu+0x990>
 8001e0c:	4b93      	ldr	r3, [pc, #588]	; (800205c <menu+0xbac>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	f083 0301 	eor.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d012      	beq.n	8001e40 <menu+0x990>
 8001e1a:	4b91      	ldr	r3, [pc, #580]	; (8002060 <menu+0xbb0>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10e      	bne.n	8001e40 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001e22:	4b90      	ldr	r3, [pc, #576]	; (8002064 <menu+0xbb4>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4b8e      	ldr	r3, [pc, #568]	; (8002064 <menu+0xbb4>)
 8001e2c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001e2e:	4b8d      	ldr	r3, [pc, #564]	; (8002064 <menu+0xbb4>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d902      	bls.n	8001e3c <menu+0x98c>
				calismaSekli = 0;
 8001e36:	4b8b      	ldr	r3, [pc, #556]	; (8002064 <menu+0xbb4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e3c:	f004 f87a 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e40:	2104      	movs	r1, #4
 8001e42:	4885      	ldr	r0, [pc, #532]	; (8002058 <menu+0xba8>)
 8001e44:	f007 fcee 	bl	8009824 <HAL_GPIO_ReadPin>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d119      	bne.n	8001e82 <menu+0x9d2>
 8001e4e:	4b83      	ldr	r3, [pc, #524]	; (800205c <menu+0xbac>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	f083 0301 	eor.w	r3, r3, #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d012      	beq.n	8001e82 <menu+0x9d2>
 8001e5c:	4b80      	ldr	r3, [pc, #512]	; (8002060 <menu+0xbb0>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10e      	bne.n	8001e82 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001e64:	4b7f      	ldr	r3, [pc, #508]	; (8002064 <menu+0xbb4>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	4b7d      	ldr	r3, [pc, #500]	; (8002064 <menu+0xbb4>)
 8001e6e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001e70:	4b7c      	ldr	r3, [pc, #496]	; (8002064 <menu+0xbb4>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <menu+0x9ce>
	    		calismaSekli = 1;
 8001e78:	4b7a      	ldr	r3, [pc, #488]	; (8002064 <menu+0xbb4>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e7e:	f004 f859 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e82:	2108      	movs	r1, #8
 8001e84:	4874      	ldr	r0, [pc, #464]	; (8002058 <menu+0xba8>)
 8001e86:	f007 fccd 	bl	8009824 <HAL_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d118      	bne.n	8001ec2 <menu+0xa12>
 8001e90:	4b72      	ldr	r3, [pc, #456]	; (800205c <menu+0xbac>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	f083 0301 	eor.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d011      	beq.n	8001ec2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001e9e:	4b71      	ldr	r3, [pc, #452]	; (8002064 <menu+0xbb4>)
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	4b71      	ldr	r3, [pc, #452]	; (8002068 <menu+0xbb8>)
 8001ea4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001ea6:	4b6f      	ldr	r3, [pc, #444]	; (8002064 <menu+0xbb4>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d106      	bne.n	8001ebc <menu+0xa0c>
				altLimit = 1;
 8001eae:	4b6f      	ldr	r3, [pc, #444]	; (800206c <menu+0xbbc>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001eb4:	4b6d      	ldr	r3, [pc, #436]	; (800206c <menu+0xbbc>)
 8001eb6:	781a      	ldrb	r2, [r3, #0]
 8001eb8:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <menu+0xbb8>)
 8001eba:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ebc:	4b6c      	ldr	r3, [pc, #432]	; (8002070 <menu+0xbc0>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001ec2:	4b6c      	ldr	r3, [pc, #432]	; (8002074 <menu+0xbc4>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	f040 8083 	bne.w	8001fd2 <menu+0xb22>
		if(dilSecim == 0) {
 8001ecc:	4b60      	ldr	r3, [pc, #384]	; (8002050 <menu+0xba0>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d105      	bne.n	8001ee0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001ed4:	4a68      	ldr	r2, [pc, #416]	; (8002078 <menu+0xbc8>)
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f7fe fb43 	bl	8000564 <lcd_print>
 8001ede:	e008      	b.n	8001ef2 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001ee0:	4b5b      	ldr	r3, [pc, #364]	; (8002050 <menu+0xba0>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d104      	bne.n	8001ef2 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001ee8:	4a64      	ldr	r2, [pc, #400]	; (800207c <menu+0xbcc>)
 8001eea:	2101      	movs	r1, #1
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7fe fb39 	bl	8000564 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001ef2:	4b63      	ldr	r3, [pc, #396]	; (8002080 <menu+0xbd0>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d113      	bne.n	8001f22 <menu+0xa72>
			if(dilSecim == 0) {
 8001efa:	4b55      	ldr	r3, [pc, #340]	; (8002050 <menu+0xba0>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d105      	bne.n	8001f0e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001f02:	4a60      	ldr	r2, [pc, #384]	; (8002084 <menu+0xbd4>)
 8001f04:	2101      	movs	r1, #1
 8001f06:	2002      	movs	r0, #2
 8001f08:	f7fe fb2c 	bl	8000564 <lcd_print>
 8001f0c:	e012      	b.n	8001f34 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001f0e:	4b50      	ldr	r3, [pc, #320]	; (8002050 <menu+0xba0>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d10e      	bne.n	8001f34 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001f16:	4a5c      	ldr	r2, [pc, #368]	; (8002088 <menu+0xbd8>)
 8001f18:	2101      	movs	r1, #1
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	f7fe fb22 	bl	8000564 <lcd_print>
 8001f20:	e008      	b.n	8001f34 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001f22:	4b57      	ldr	r3, [pc, #348]	; (8002080 <menu+0xbd0>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d104      	bne.n	8001f34 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001f2a:	4a58      	ldr	r2, [pc, #352]	; (800208c <menu+0xbdc>)
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f7fe fb18 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f34:	2102      	movs	r1, #2
 8001f36:	4848      	ldr	r0, [pc, #288]	; (8002058 <menu+0xba8>)
 8001f38:	f007 fc74 	bl	8009824 <HAL_GPIO_ReadPin>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d115      	bne.n	8001f6e <menu+0xabe>
 8001f42:	4b46      	ldr	r3, [pc, #280]	; (800205c <menu+0xbac>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	f083 0301 	eor.w	r3, r3, #1
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00e      	beq.n	8001f6e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001f50:	4b4b      	ldr	r3, [pc, #300]	; (8002080 <menu+0xbd0>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	3301      	adds	r3, #1
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b49      	ldr	r3, [pc, #292]	; (8002080 <menu+0xbd0>)
 8001f5a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001f5c:	4b48      	ldr	r3, [pc, #288]	; (8002080 <menu+0xbd0>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d902      	bls.n	8001f6a <menu+0xaba>
				emniyetCercevesi = 0;
 8001f64:	4b46      	ldr	r3, [pc, #280]	; (8002080 <menu+0xbd0>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f6a:	f003 ffe3 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f6e:	2104      	movs	r1, #4
 8001f70:	4839      	ldr	r0, [pc, #228]	; (8002058 <menu+0xba8>)
 8001f72:	f007 fc57 	bl	8009824 <HAL_GPIO_ReadPin>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d115      	bne.n	8001fa8 <menu+0xaf8>
 8001f7c:	4b37      	ldr	r3, [pc, #220]	; (800205c <menu+0xbac>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	f083 0301 	eor.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00e      	beq.n	8001fa8 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <menu+0xbd0>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <menu+0xbd0>)
 8001f94:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001f96:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <menu+0xbd0>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001f9e:	4b38      	ldr	r3, [pc, #224]	; (8002080 <menu+0xbd0>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fa4:	f003 ffc6 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001fa8:	2108      	movs	r1, #8
 8001faa:	482b      	ldr	r0, [pc, #172]	; (8002058 <menu+0xba8>)
 8001fac:	f007 fc3a 	bl	8009824 <HAL_GPIO_ReadPin>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d10d      	bne.n	8001fd2 <menu+0xb22>
 8001fb6:	4b29      	ldr	r3, [pc, #164]	; (800205c <menu+0xbac>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	f083 0301 	eor.w	r3, r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001fc4:	4b2e      	ldr	r3, [pc, #184]	; (8002080 <menu+0xbd0>)
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <menu+0xbb8>)
 8001fca:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001fcc:	4b28      	ldr	r3, [pc, #160]	; (8002070 <menu+0xbc0>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001fd2:	4b28      	ldr	r3, [pc, #160]	; (8002074 <menu+0xbc4>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	f040 80ba 	bne.w	8002150 <menu+0xca0>
		if(dilSecim == 0) {
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <menu+0xba0>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001fe4:	4a2a      	ldr	r2, [pc, #168]	; (8002090 <menu+0xbe0>)
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7fe fabb 	bl	8000564 <lcd_print>
 8001fee:	e008      	b.n	8002002 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <menu+0xba0>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d104      	bne.n	8002002 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001ff8:	4a26      	ldr	r2, [pc, #152]	; (8002094 <menu+0xbe4>)
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7fe fab1 	bl	8000564 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8002002:	4b25      	ldr	r3, [pc, #148]	; (8002098 <menu+0xbe8>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d113      	bne.n	8002032 <menu+0xb82>
			if(dilSecim == 0) {
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <menu+0xba0>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8002012:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <menu+0xbd4>)
 8002014:	2101      	movs	r1, #1
 8002016:	2002      	movs	r0, #2
 8002018:	f7fe faa4 	bl	8000564 <lcd_print>
 800201c:	e049      	b.n	80020b2 <menu+0xc02>
			} else if(dilSecim == 1) {
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <menu+0xba0>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d145      	bne.n	80020b2 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8002026:	4a18      	ldr	r2, [pc, #96]	; (8002088 <menu+0xbd8>)
 8002028:	2101      	movs	r1, #1
 800202a:	2002      	movs	r0, #2
 800202c:	f7fe fa9a 	bl	8000564 <lcd_print>
 8002030:	e03f      	b.n	80020b2 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8002032:	4b19      	ldr	r3, [pc, #100]	; (8002098 <menu+0xbe8>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d13b      	bne.n	80020b2 <menu+0xc02>
			if(dilSecim == 0) {
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <menu+0xba0>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d12e      	bne.n	80020a0 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8002042:	4a16      	ldr	r2, [pc, #88]	; (800209c <menu+0xbec>)
 8002044:	2101      	movs	r1, #1
 8002046:	2002      	movs	r0, #2
 8002048:	f7fe fa8c 	bl	8000564 <lcd_print>
 800204c:	e031      	b.n	80020b2 <menu+0xc02>
 800204e:	bf00      	nop
 8002050:	20000c2d 	.word	0x20000c2d
 8002054:	0800ce24 	.word	0x0800ce24
 8002058:	40010800 	.word	0x40010800
 800205c:	20000c3b 	.word	0x20000c3b
 8002060:	20000c1b 	.word	0x20000c1b
 8002064:	20000c0d 	.word	0x20000c0d
 8002068:	20000b3c 	.word	0x20000b3c
 800206c:	20000c12 	.word	0x20000c12
 8002070:	20000c38 	.word	0x20000c38
 8002074:	20000c0c 	.word	0x20000c0c
 8002078:	0800ce34 	.word	0x0800ce34
 800207c:	0800ce48 	.word	0x0800ce48
 8002080:	20000c10 	.word	0x20000c10
 8002084:	0800ce5c 	.word	0x0800ce5c
 8002088:	0800ce70 	.word	0x0800ce70
 800208c:	0800ce84 	.word	0x0800ce84
 8002090:	0800ce94 	.word	0x0800ce94
 8002094:	0800cea8 	.word	0x0800cea8
 8002098:	20000c11 	.word	0x20000c11
 800209c:	0800cebc 	.word	0x0800cebc
			} else if(dilSecim == 1) {
 80020a0:	4b92      	ldr	r3, [pc, #584]	; (80022ec <menu+0xe3c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d104      	bne.n	80020b2 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80020a8:	4a91      	ldr	r2, [pc, #580]	; (80022f0 <menu+0xe40>)
 80020aa:	2101      	movs	r1, #1
 80020ac:	2002      	movs	r0, #2
 80020ae:	f7fe fa59 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020b2:	2102      	movs	r1, #2
 80020b4:	488f      	ldr	r0, [pc, #572]	; (80022f4 <menu+0xe44>)
 80020b6:	f007 fbb5 	bl	8009824 <HAL_GPIO_ReadPin>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d115      	bne.n	80020ec <menu+0xc3c>
 80020c0:	4b8d      	ldr	r3, [pc, #564]	; (80022f8 <menu+0xe48>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	f083 0301 	eor.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00e      	beq.n	80020ec <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80020ce:	4b8b      	ldr	r3, [pc, #556]	; (80022fc <menu+0xe4c>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4b89      	ldr	r3, [pc, #548]	; (80022fc <menu+0xe4c>)
 80020d8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80020da:	4b88      	ldr	r3, [pc, #544]	; (80022fc <menu+0xe4c>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d902      	bls.n	80020e8 <menu+0xc38>
				yavaslamaLimit = 0;
 80020e2:	4b86      	ldr	r3, [pc, #536]	; (80022fc <menu+0xe4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020e8:	f003 ff24 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020ec:	2104      	movs	r1, #4
 80020ee:	4881      	ldr	r0, [pc, #516]	; (80022f4 <menu+0xe44>)
 80020f0:	f007 fb98 	bl	8009824 <HAL_GPIO_ReadPin>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d115      	bne.n	8002126 <menu+0xc76>
 80020fa:	4b7f      	ldr	r3, [pc, #508]	; (80022f8 <menu+0xe48>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	f083 0301 	eor.w	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00e      	beq.n	8002126 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002108:	4b7c      	ldr	r3, [pc, #496]	; (80022fc <menu+0xe4c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	3b01      	subs	r3, #1
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4b7a      	ldr	r3, [pc, #488]	; (80022fc <menu+0xe4c>)
 8002112:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002114:	4b79      	ldr	r3, [pc, #484]	; (80022fc <menu+0xe4c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <menu+0xc72>
		   		yavaslamaLimit = 1;
 800211c:	4b77      	ldr	r3, [pc, #476]	; (80022fc <menu+0xe4c>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002122:	f003 ff07 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002126:	2108      	movs	r1, #8
 8002128:	4872      	ldr	r0, [pc, #456]	; (80022f4 <menu+0xe44>)
 800212a:	f007 fb7b 	bl	8009824 <HAL_GPIO_ReadPin>
 800212e:	4603      	mov	r3, r0
 8002130:	2b01      	cmp	r3, #1
 8002132:	d10d      	bne.n	8002150 <menu+0xca0>
 8002134:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <menu+0xe48>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	f083 0301 	eor.w	r3, r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d006      	beq.n	8002150 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8002142:	4b6e      	ldr	r3, [pc, #440]	; (80022fc <menu+0xe4c>)
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	4b6e      	ldr	r3, [pc, #440]	; (8002300 <menu+0xe50>)
 8002148:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800214a:	4b6e      	ldr	r3, [pc, #440]	; (8002304 <menu+0xe54>)
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002150:	4b6d      	ldr	r3, [pc, #436]	; (8002308 <menu+0xe58>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b05      	cmp	r3, #5
 8002156:	f040 80b9 	bne.w	80022cc <menu+0xe1c>
		if(dilSecim == 0) {
 800215a:	4b64      	ldr	r3, [pc, #400]	; (80022ec <menu+0xe3c>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d105      	bne.n	800216e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002162:	4a6a      	ldr	r2, [pc, #424]	; (800230c <menu+0xe5c>)
 8002164:	2101      	movs	r1, #1
 8002166:	2001      	movs	r0, #1
 8002168:	f7fe f9fc 	bl	8000564 <lcd_print>
 800216c:	e008      	b.n	8002180 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800216e:	4b5f      	ldr	r3, [pc, #380]	; (80022ec <menu+0xe3c>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d104      	bne.n	8002180 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002176:	4a66      	ldr	r2, [pc, #408]	; (8002310 <menu+0xe60>)
 8002178:	2101      	movs	r1, #1
 800217a:	2001      	movs	r0, #1
 800217c:	f7fe f9f2 	bl	8000564 <lcd_print>
		}

		if(altLimit == 0) {
 8002180:	4b64      	ldr	r3, [pc, #400]	; (8002314 <menu+0xe64>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d113      	bne.n	80021b0 <menu+0xd00>
			if(dilSecim == 0) {
 8002188:	4b58      	ldr	r3, [pc, #352]	; (80022ec <menu+0xe3c>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d105      	bne.n	800219c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002190:	4a61      	ldr	r2, [pc, #388]	; (8002318 <menu+0xe68>)
 8002192:	2101      	movs	r1, #1
 8002194:	2002      	movs	r0, #2
 8002196:	f7fe f9e5 	bl	8000564 <lcd_print>
 800219a:	e020      	b.n	80021de <menu+0xd2e>
			} else if(dilSecim == 1) {
 800219c:	4b53      	ldr	r3, [pc, #332]	; (80022ec <menu+0xe3c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d11c      	bne.n	80021de <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80021a4:	4a5d      	ldr	r2, [pc, #372]	; (800231c <menu+0xe6c>)
 80021a6:	2101      	movs	r1, #1
 80021a8:	2002      	movs	r0, #2
 80021aa:	f7fe f9db 	bl	8000564 <lcd_print>
 80021ae:	e016      	b.n	80021de <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80021b0:	4b58      	ldr	r3, [pc, #352]	; (8002314 <menu+0xe64>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d112      	bne.n	80021de <menu+0xd2e>
			if(dilSecim == 0){
 80021b8:	4b4c      	ldr	r3, [pc, #304]	; (80022ec <menu+0xe3c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d105      	bne.n	80021cc <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80021c0:	4a57      	ldr	r2, [pc, #348]	; (8002320 <menu+0xe70>)
 80021c2:	2101      	movs	r1, #1
 80021c4:	2002      	movs	r0, #2
 80021c6:	f7fe f9cd 	bl	8000564 <lcd_print>
 80021ca:	e008      	b.n	80021de <menu+0xd2e>
			} else if(dilSecim == 1){
 80021cc:	4b47      	ldr	r3, [pc, #284]	; (80022ec <menu+0xe3c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d104      	bne.n	80021de <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80021d4:	4a46      	ldr	r2, [pc, #280]	; (80022f0 <menu+0xe40>)
 80021d6:	2101      	movs	r1, #1
 80021d8:	2002      	movs	r0, #2
 80021da:	f7fe f9c3 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80021de:	2102      	movs	r1, #2
 80021e0:	4844      	ldr	r0, [pc, #272]	; (80022f4 <menu+0xe44>)
 80021e2:	f007 fb1f 	bl	8009824 <HAL_GPIO_ReadPin>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d119      	bne.n	8002220 <menu+0xd70>
 80021ec:	4b42      	ldr	r3, [pc, #264]	; (80022f8 <menu+0xe48>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	f083 0301 	eor.w	r3, r3, #1
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d012      	beq.n	8002220 <menu+0xd70>
 80021fa:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <menu+0xe74>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10e      	bne.n	8002220 <menu+0xd70>
			altLimit = altLimit + 1;
 8002202:	4b44      	ldr	r3, [pc, #272]	; (8002314 <menu+0xe64>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4b42      	ldr	r3, [pc, #264]	; (8002314 <menu+0xe64>)
 800220c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800220e:	4b41      	ldr	r3, [pc, #260]	; (8002314 <menu+0xe64>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d902      	bls.n	800221c <menu+0xd6c>
				altLimit = 0;
 8002216:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <menu+0xe64>)
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800221c:	f003 fe8a 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002220:	2104      	movs	r1, #4
 8002222:	4834      	ldr	r0, [pc, #208]	; (80022f4 <menu+0xe44>)
 8002224:	f007 fafe 	bl	8009824 <HAL_GPIO_ReadPin>
 8002228:	4603      	mov	r3, r0
 800222a:	2b01      	cmp	r3, #1
 800222c:	d119      	bne.n	8002262 <menu+0xdb2>
 800222e:	4b32      	ldr	r3, [pc, #200]	; (80022f8 <menu+0xe48>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	f083 0301 	eor.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d012      	beq.n	8002262 <menu+0xdb2>
 800223c:	4b39      	ldr	r3, [pc, #228]	; (8002324 <menu+0xe74>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10e      	bne.n	8002262 <menu+0xdb2>
			altLimit = altLimit - 1;
 8002244:	4b33      	ldr	r3, [pc, #204]	; (8002314 <menu+0xe64>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3b01      	subs	r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b31      	ldr	r3, [pc, #196]	; (8002314 <menu+0xe64>)
 800224e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002250:	4b30      	ldr	r3, [pc, #192]	; (8002314 <menu+0xe64>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <menu+0xdae>
		   		altLimit = 1;
 8002258:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <menu+0xe64>)
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800225e:	f003 fe69 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002262:	2108      	movs	r1, #8
 8002264:	4823      	ldr	r0, [pc, #140]	; (80022f4 <menu+0xe44>)
 8002266:	f007 fadd 	bl	8009824 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b01      	cmp	r3, #1
 800226e:	d12d      	bne.n	80022cc <menu+0xe1c>
 8002270:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <menu+0xe48>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	f083 0301 	eor.w	r3, r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d026      	beq.n	80022cc <menu+0xe1c>
			eepromData[5] = altLimit;
 800227e:	4b25      	ldr	r3, [pc, #148]	; (8002314 <menu+0xe64>)
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <menu+0xe50>)
 8002284:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <menu+0xe64>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d110      	bne.n	80022b0 <menu+0xe00>
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <menu+0xe78>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <menu+0xdee>
 8002296:	4b24      	ldr	r3, [pc, #144]	; (8002328 <menu+0xe78>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d108      	bne.n	80022b0 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800229e:	4b22      	ldr	r3, [pc, #136]	; (8002328 <menu+0xe78>)
 80022a0:	2203      	movs	r2, #3
 80022a2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <menu+0xe78>)
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <menu+0xe50>)
 80022aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80022ae:	e00a      	b.n	80022c6 <menu+0xe16>
			} else if(altLimit == 0) {
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <menu+0xe64>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <menu+0xe16>
				platformSilindirTipi = 0;
 80022b8:	4b1c      	ldr	r3, [pc, #112]	; (800232c <menu+0xe7c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80022be:	4b1b      	ldr	r3, [pc, #108]	; (800232c <menu+0xe7c>)
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <menu+0xe50>)
 80022c4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <menu+0xe54>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <menu+0xe58>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b06      	cmp	r3, #6
 80022d2:	f040 80b6 	bne.w	8002442 <menu+0xf92>
		if(dilSecim == 0) {
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <menu+0xe3c>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d12a      	bne.n	8002334 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80022de:	4a14      	ldr	r2, [pc, #80]	; (8002330 <menu+0xe80>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	2001      	movs	r0, #1
 80022e4:	f7fe f93e 	bl	8000564 <lcd_print>
 80022e8:	e02d      	b.n	8002346 <menu+0xe96>
 80022ea:	bf00      	nop
 80022ec:	20000c2d 	.word	0x20000c2d
 80022f0:	0800ced0 	.word	0x0800ced0
 80022f4:	40010800 	.word	0x40010800
 80022f8:	20000c3b 	.word	0x20000c3b
 80022fc:	20000c11 	.word	0x20000c11
 8002300:	20000b3c 	.word	0x20000b3c
 8002304:	20000c38 	.word	0x20000c38
 8002308:	20000c0c 	.word	0x20000c0c
 800230c:	0800cee4 	.word	0x0800cee4
 8002310:	0800cef8 	.word	0x0800cef8
 8002314:	20000c12 	.word	0x20000c12
 8002318:	0800ce5c 	.word	0x0800ce5c
 800231c:	0800ce70 	.word	0x0800ce70
 8002320:	0800cebc 	.word	0x0800cebc
 8002324:	20000c0d 	.word	0x20000c0d
 8002328:	20000c19 	.word	0x20000c19
 800232c:	20000c1f 	.word	0x20000c1f
 8002330:	0800cf0c 	.word	0x0800cf0c
		} else if(dilSecim == 1){
 8002334:	4b7a      	ldr	r3, [pc, #488]	; (8002520 <menu+0x1070>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d104      	bne.n	8002346 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800233c:	4a79      	ldr	r2, [pc, #484]	; (8002524 <menu+0x1074>)
 800233e:	2101      	movs	r1, #1
 8002340:	2001      	movs	r0, #1
 8002342:	f7fe f90f 	bl	8000564 <lcd_print>
		}
		if(basincSalteri == 0){
 8002346:	4b78      	ldr	r3, [pc, #480]	; (8002528 <menu+0x1078>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d113      	bne.n	8002376 <menu+0xec6>
			if(dilSecim == 0) {
 800234e:	4b74      	ldr	r3, [pc, #464]	; (8002520 <menu+0x1070>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d105      	bne.n	8002362 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002356:	4a75      	ldr	r2, [pc, #468]	; (800252c <menu+0x107c>)
 8002358:	2101      	movs	r1, #1
 800235a:	2002      	movs	r0, #2
 800235c:	f7fe f902 	bl	8000564 <lcd_print>
 8002360:	e020      	b.n	80023a4 <menu+0xef4>
			} else if(dilSecim == 1){
 8002362:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <menu+0x1070>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d11c      	bne.n	80023a4 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800236a:	4a71      	ldr	r2, [pc, #452]	; (8002530 <menu+0x1080>)
 800236c:	2101      	movs	r1, #1
 800236e:	2002      	movs	r0, #2
 8002370:	f7fe f8f8 	bl	8000564 <lcd_print>
 8002374:	e016      	b.n	80023a4 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002376:	4b6c      	ldr	r3, [pc, #432]	; (8002528 <menu+0x1078>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d112      	bne.n	80023a4 <menu+0xef4>
			if(dilSecim == 0) {
 800237e:	4b68      	ldr	r3, [pc, #416]	; (8002520 <menu+0x1070>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002386:	4a6b      	ldr	r2, [pc, #428]	; (8002534 <menu+0x1084>)
 8002388:	2101      	movs	r1, #1
 800238a:	2002      	movs	r0, #2
 800238c:	f7fe f8ea 	bl	8000564 <lcd_print>
 8002390:	e008      	b.n	80023a4 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002392:	4b63      	ldr	r3, [pc, #396]	; (8002520 <menu+0x1070>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d104      	bne.n	80023a4 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800239a:	4a67      	ldr	r2, [pc, #412]	; (8002538 <menu+0x1088>)
 800239c:	2101      	movs	r1, #1
 800239e:	2002      	movs	r0, #2
 80023a0:	f7fe f8e0 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023a4:	2102      	movs	r1, #2
 80023a6:	4865      	ldr	r0, [pc, #404]	; (800253c <menu+0x108c>)
 80023a8:	f007 fa3c 	bl	8009824 <HAL_GPIO_ReadPin>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d115      	bne.n	80023de <menu+0xf2e>
 80023b2:	4b63      	ldr	r3, [pc, #396]	; (8002540 <menu+0x1090>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f083 0301 	eor.w	r3, r3, #1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00e      	beq.n	80023de <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80023c0:	4b59      	ldr	r3, [pc, #356]	; (8002528 <menu+0x1078>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b57      	ldr	r3, [pc, #348]	; (8002528 <menu+0x1078>)
 80023ca:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80023cc:	4b56      	ldr	r3, [pc, #344]	; (8002528 <menu+0x1078>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d902      	bls.n	80023da <menu+0xf2a>
				basincSalteri = 0;
 80023d4:	4b54      	ldr	r3, [pc, #336]	; (8002528 <menu+0x1078>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023da:	f003 fdab 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023de:	2104      	movs	r1, #4
 80023e0:	4856      	ldr	r0, [pc, #344]	; (800253c <menu+0x108c>)
 80023e2:	f007 fa1f 	bl	8009824 <HAL_GPIO_ReadPin>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d115      	bne.n	8002418 <menu+0xf68>
 80023ec:	4b54      	ldr	r3, [pc, #336]	; (8002540 <menu+0x1090>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00e      	beq.n	8002418 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80023fa:	4b4b      	ldr	r3, [pc, #300]	; (8002528 <menu+0x1078>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	3b01      	subs	r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b49      	ldr	r3, [pc, #292]	; (8002528 <menu+0x1078>)
 8002404:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002406:	4b48      	ldr	r3, [pc, #288]	; (8002528 <menu+0x1078>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <menu+0xf64>
		   		basincSalteri = 1;
 800240e:	4b46      	ldr	r3, [pc, #280]	; (8002528 <menu+0x1078>)
 8002410:	2201      	movs	r2, #1
 8002412:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002414:	f003 fd8e 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002418:	2108      	movs	r1, #8
 800241a:	4848      	ldr	r0, [pc, #288]	; (800253c <menu+0x108c>)
 800241c:	f007 fa02 	bl	8009824 <HAL_GPIO_ReadPin>
 8002420:	4603      	mov	r3, r0
 8002422:	2b01      	cmp	r3, #1
 8002424:	d10d      	bne.n	8002442 <menu+0xf92>
 8002426:	4b46      	ldr	r3, [pc, #280]	; (8002540 <menu+0x1090>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	f083 0301 	eor.w	r3, r3, #1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d006      	beq.n	8002442 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002434:	4b3c      	ldr	r3, [pc, #240]	; (8002528 <menu+0x1078>)
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	4b42      	ldr	r3, [pc, #264]	; (8002544 <menu+0x1094>)
 800243a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800243c:	4b42      	ldr	r3, [pc, #264]	; (8002548 <menu+0x1098>)
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002442:	4b42      	ldr	r3, [pc, #264]	; (800254c <menu+0x109c>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b07      	cmp	r3, #7
 8002448:	f040 80f5 	bne.w	8002636 <menu+0x1186>
		if(dilSecim == 0) {
 800244c:	4b34      	ldr	r3, [pc, #208]	; (8002520 <menu+0x1070>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002454:	4a3e      	ldr	r2, [pc, #248]	; (8002550 <menu+0x10a0>)
 8002456:	2101      	movs	r1, #1
 8002458:	2001      	movs	r0, #1
 800245a:	f7fe f883 	bl	8000564 <lcd_print>
 800245e:	e008      	b.n	8002472 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002460:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <menu+0x1070>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d104      	bne.n	8002472 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002468:	4a3a      	ldr	r2, [pc, #232]	; (8002554 <menu+0x10a4>)
 800246a:	2101      	movs	r1, #1
 800246c:	2001      	movs	r0, #1
 800246e:	f7fe f879 	bl	8000564 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <menu+0x10a8>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d113      	bne.n	80024a2 <menu+0xff2>
			if(dilSecim == 0) {
 800247a:	4b29      	ldr	r3, [pc, #164]	; (8002520 <menu+0x1070>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002482:	4a2a      	ldr	r2, [pc, #168]	; (800252c <menu+0x107c>)
 8002484:	2101      	movs	r1, #1
 8002486:	2002      	movs	r0, #2
 8002488:	f7fe f86c 	bl	8000564 <lcd_print>
 800248c:	e079      	b.n	8002582 <menu+0x10d2>
			} else if(dilSecim == 1){
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <menu+0x1070>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d175      	bne.n	8002582 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002496:	4a26      	ldr	r2, [pc, #152]	; (8002530 <menu+0x1080>)
 8002498:	2101      	movs	r1, #1
 800249a:	2002      	movs	r0, #2
 800249c:	f7fe f862 	bl	8000564 <lcd_print>
 80024a0:	e06f      	b.n	8002582 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80024a2:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <menu+0x10a8>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d113      	bne.n	80024d2 <menu+0x1022>
			if(dilSecim == 0) {
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <menu+0x1070>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d105      	bne.n	80024be <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80024b2:	4a2a      	ldr	r2, [pc, #168]	; (800255c <menu+0x10ac>)
 80024b4:	2101      	movs	r1, #1
 80024b6:	2002      	movs	r0, #2
 80024b8:	f7fe f854 	bl	8000564 <lcd_print>
 80024bc:	e061      	b.n	8002582 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80024be:	4b18      	ldr	r3, [pc, #96]	; (8002520 <menu+0x1070>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d15d      	bne.n	8002582 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80024c6:	4a26      	ldr	r2, [pc, #152]	; (8002560 <menu+0x10b0>)
 80024c8:	2101      	movs	r1, #1
 80024ca:	2002      	movs	r0, #2
 80024cc:	f7fe f84a 	bl	8000564 <lcd_print>
 80024d0:	e057      	b.n	8002582 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80024d2:	4b21      	ldr	r3, [pc, #132]	; (8002558 <menu+0x10a8>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d113      	bne.n	8002502 <menu+0x1052>
			if(dilSecim == 0) {
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <menu+0x1070>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80024e2:	4a20      	ldr	r2, [pc, #128]	; (8002564 <menu+0x10b4>)
 80024e4:	2101      	movs	r1, #1
 80024e6:	2002      	movs	r0, #2
 80024e8:	f7fe f83c 	bl	8000564 <lcd_print>
 80024ec:	e049      	b.n	8002582 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <menu+0x1070>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d145      	bne.n	8002582 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <menu+0x10b8>)
 80024f8:	2101      	movs	r1, #1
 80024fa:	2002      	movs	r0, #2
 80024fc:	f7fe f832 	bl	8000564 <lcd_print>
 8002500:	e03f      	b.n	8002582 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <menu+0x10a8>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d13b      	bne.n	8002582 <menu+0x10d2>
			if(dilSecim == 0) {
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <menu+0x1070>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d12e      	bne.n	8002570 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002512:	4a16      	ldr	r2, [pc, #88]	; (800256c <menu+0x10bc>)
 8002514:	2101      	movs	r1, #1
 8002516:	2002      	movs	r0, #2
 8002518:	f7fe f824 	bl	8000564 <lcd_print>
 800251c:	e031      	b.n	8002582 <menu+0x10d2>
 800251e:	bf00      	nop
 8002520:	20000c2d 	.word	0x20000c2d
 8002524:	0800cf1c 	.word	0x0800cf1c
 8002528:	20000c13 	.word	0x20000c13
 800252c:	0800ce5c 	.word	0x0800ce5c
 8002530:	0800ce70 	.word	0x0800ce70
 8002534:	0800cebc 	.word	0x0800cebc
 8002538:	0800ced0 	.word	0x0800ced0
 800253c:	40010800 	.word	0x40010800
 8002540:	20000c3b 	.word	0x20000c3b
 8002544:	20000b3c 	.word	0x20000b3c
 8002548:	20000c38 	.word	0x20000c38
 800254c:	20000c0c 	.word	0x20000c0c
 8002550:	0800cf2c 	.word	0x0800cf2c
 8002554:	0800cf40 	.word	0x0800cf40
 8002558:	20000c14 	.word	0x20000c14
 800255c:	0800cf54 	.word	0x0800cf54
 8002560:	0800cf68 	.word	0x0800cf68
 8002564:	0800cf7c 	.word	0x0800cf7c
 8002568:	0800cf90 	.word	0x0800cf90
 800256c:	0800cfa4 	.word	0x0800cfa4
			} else if(dilSecim == 1){
 8002570:	4b99      	ldr	r3, [pc, #612]	; (80027d8 <menu+0x1328>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d104      	bne.n	8002582 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002578:	4a98      	ldr	r2, [pc, #608]	; (80027dc <menu+0x132c>)
 800257a:	2101      	movs	r1, #1
 800257c:	2002      	movs	r0, #2
 800257e:	f7fd fff1 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002582:	2102      	movs	r1, #2
 8002584:	4896      	ldr	r0, [pc, #600]	; (80027e0 <menu+0x1330>)
 8002586:	f007 f94d 	bl	8009824 <HAL_GPIO_ReadPin>
 800258a:	4603      	mov	r3, r0
 800258c:	2b01      	cmp	r3, #1
 800258e:	d115      	bne.n	80025bc <menu+0x110c>
 8002590:	4b94      	ldr	r3, [pc, #592]	; (80027e4 <menu+0x1334>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	f083 0301 	eor.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00e      	beq.n	80025bc <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800259e:	4b92      	ldr	r3, [pc, #584]	; (80027e8 <menu+0x1338>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b90      	ldr	r3, [pc, #576]	; (80027e8 <menu+0x1338>)
 80025a8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80025aa:	4b8f      	ldr	r3, [pc, #572]	; (80027e8 <menu+0x1338>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d902      	bls.n	80025b8 <menu+0x1108>
				kapiSecimleri = 0;
 80025b2:	4b8d      	ldr	r3, [pc, #564]	; (80027e8 <menu+0x1338>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025b8:	f003 fcbc 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025bc:	2104      	movs	r1, #4
 80025be:	4888      	ldr	r0, [pc, #544]	; (80027e0 <menu+0x1330>)
 80025c0:	f007 f930 	bl	8009824 <HAL_GPIO_ReadPin>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d115      	bne.n	80025f6 <menu+0x1146>
 80025ca:	4b86      	ldr	r3, [pc, #536]	; (80027e4 <menu+0x1334>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	f083 0301 	eor.w	r3, r3, #1
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00e      	beq.n	80025f6 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80025d8:	4b83      	ldr	r3, [pc, #524]	; (80027e8 <menu+0x1338>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	3b01      	subs	r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b81      	ldr	r3, [pc, #516]	; (80027e8 <menu+0x1338>)
 80025e2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80025e4:	4b80      	ldr	r3, [pc, #512]	; (80027e8 <menu+0x1338>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d902      	bls.n	80025f2 <menu+0x1142>
		   		kapiSecimleri = 3;
 80025ec:	4b7e      	ldr	r3, [pc, #504]	; (80027e8 <menu+0x1338>)
 80025ee:	2203      	movs	r2, #3
 80025f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025f2:	f003 fc9f 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025f6:	2108      	movs	r1, #8
 80025f8:	4879      	ldr	r0, [pc, #484]	; (80027e0 <menu+0x1330>)
 80025fa:	f007 f913 	bl	8009824 <HAL_GPIO_ReadPin>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b01      	cmp	r3, #1
 8002602:	d118      	bne.n	8002636 <menu+0x1186>
 8002604:	4b77      	ldr	r3, [pc, #476]	; (80027e4 <menu+0x1334>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	f083 0301 	eor.w	r3, r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d011      	beq.n	8002636 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002612:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <menu+0x1338>)
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	4b75      	ldr	r3, [pc, #468]	; (80027ec <menu+0x133c>)
 8002618:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800261a:	4b73      	ldr	r3, [pc, #460]	; (80027e8 <menu+0x1338>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <menu+0x1180>
				altLimit = 1;
 8002622:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <menu+0x1340>)
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002628:	4b71      	ldr	r3, [pc, #452]	; (80027f0 <menu+0x1340>)
 800262a:	781a      	ldrb	r2, [r3, #0]
 800262c:	4b6f      	ldr	r3, [pc, #444]	; (80027ec <menu+0x133c>)
 800262e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002630:	4b70      	ldr	r3, [pc, #448]	; (80027f4 <menu+0x1344>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002636:	4b70      	ldr	r3, [pc, #448]	; (80027f8 <menu+0x1348>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b08      	cmp	r3, #8
 800263c:	f040 8092 	bne.w	8002764 <menu+0x12b4>
		if(dilSecim == 0) {
 8002640:	4b65      	ldr	r3, [pc, #404]	; (80027d8 <menu+0x1328>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002648:	4a6c      	ldr	r2, [pc, #432]	; (80027fc <menu+0x134c>)
 800264a:	2101      	movs	r1, #1
 800264c:	2001      	movs	r0, #1
 800264e:	f7fd ff89 	bl	8000564 <lcd_print>
 8002652:	e008      	b.n	8002666 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002654:	4b60      	ldr	r3, [pc, #384]	; (80027d8 <menu+0x1328>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d104      	bne.n	8002666 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800265c:	4a68      	ldr	r2, [pc, #416]	; (8002800 <menu+0x1350>)
 800265e:	2101      	movs	r1, #1
 8002660:	2001      	movs	r0, #1
 8002662:	f7fd ff7f 	bl	8000564 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <menu+0x1354>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d113      	bne.n	8002696 <menu+0x11e6>
			if(dilSecim == 0) {
 800266e:	4b5a      	ldr	r3, [pc, #360]	; (80027d8 <menu+0x1328>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002676:	4a64      	ldr	r2, [pc, #400]	; (8002808 <menu+0x1358>)
 8002678:	2101      	movs	r1, #1
 800267a:	2002      	movs	r0, #2
 800267c:	f7fd ff72 	bl	8000564 <lcd_print>
 8002680:	e020      	b.n	80026c4 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002682:	4b55      	ldr	r3, [pc, #340]	; (80027d8 <menu+0x1328>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d11c      	bne.n	80026c4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800268a:	4a60      	ldr	r2, [pc, #384]	; (800280c <menu+0x135c>)
 800268c:	2101      	movs	r1, #1
 800268e:	2002      	movs	r0, #2
 8002690:	f7fd ff68 	bl	8000564 <lcd_print>
 8002694:	e016      	b.n	80026c4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002696:	4b5b      	ldr	r3, [pc, #364]	; (8002804 <menu+0x1354>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d112      	bne.n	80026c4 <menu+0x1214>
			if(dilSecim == 0){
 800269e:	4b4e      	ldr	r3, [pc, #312]	; (80027d8 <menu+0x1328>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80026a6:	4a5a      	ldr	r2, [pc, #360]	; (8002810 <menu+0x1360>)
 80026a8:	2101      	movs	r1, #1
 80026aa:	2002      	movs	r0, #2
 80026ac:	f7fd ff5a 	bl	8000564 <lcd_print>
 80026b0:	e008      	b.n	80026c4 <menu+0x1214>
			} else if(dilSecim == 1){
 80026b2:	4b49      	ldr	r3, [pc, #292]	; (80027d8 <menu+0x1328>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d104      	bne.n	80026c4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80026ba:	4a56      	ldr	r2, [pc, #344]	; (8002814 <menu+0x1364>)
 80026bc:	2101      	movs	r1, #1
 80026be:	2002      	movs	r0, #2
 80026c0:	f7fd ff50 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026c4:	2102      	movs	r1, #2
 80026c6:	4846      	ldr	r0, [pc, #280]	; (80027e0 <menu+0x1330>)
 80026c8:	f007 f8ac 	bl	8009824 <HAL_GPIO_ReadPin>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d115      	bne.n	80026fe <menu+0x124e>
 80026d2:	4b44      	ldr	r3, [pc, #272]	; (80027e4 <menu+0x1334>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00e      	beq.n	80026fe <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80026e0:	4b48      	ldr	r3, [pc, #288]	; (8002804 <menu+0x1354>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b46      	ldr	r3, [pc, #280]	; (8002804 <menu+0x1354>)
 80026ea:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80026ec:	4b45      	ldr	r3, [pc, #276]	; (8002804 <menu+0x1354>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d902      	bls.n	80026fa <menu+0x124a>
				kapiAcTipi = 0;
 80026f4:	4b43      	ldr	r3, [pc, #268]	; (8002804 <menu+0x1354>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026fa:	f003 fc1b 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026fe:	2104      	movs	r1, #4
 8002700:	4837      	ldr	r0, [pc, #220]	; (80027e0 <menu+0x1330>)
 8002702:	f007 f88f 	bl	8009824 <HAL_GPIO_ReadPin>
 8002706:	4603      	mov	r3, r0
 8002708:	2b01      	cmp	r3, #1
 800270a:	d115      	bne.n	8002738 <menu+0x1288>
 800270c:	4b35      	ldr	r3, [pc, #212]	; (80027e4 <menu+0x1334>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	f083 0301 	eor.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00e      	beq.n	8002738 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800271a:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <menu+0x1354>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	3b01      	subs	r3, #1
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4b38      	ldr	r3, [pc, #224]	; (8002804 <menu+0x1354>)
 8002724:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002726:	4b37      	ldr	r3, [pc, #220]	; (8002804 <menu+0x1354>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <menu+0x1284>
		   		kapiAcTipi = 1;
 800272e:	4b35      	ldr	r3, [pc, #212]	; (8002804 <menu+0x1354>)
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002734:	f003 fbfe 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002738:	2108      	movs	r1, #8
 800273a:	4829      	ldr	r0, [pc, #164]	; (80027e0 <menu+0x1330>)
 800273c:	f007 f872 	bl	8009824 <HAL_GPIO_ReadPin>
 8002740:	4603      	mov	r3, r0
 8002742:	2b01      	cmp	r3, #1
 8002744:	d10e      	bne.n	8002764 <menu+0x12b4>
 8002746:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <menu+0x1334>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	f083 0301 	eor.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <menu+0x1354>)
 8002756:	781a      	ldrb	r2, [r3, #0]
 8002758:	4b24      	ldr	r3, [pc, #144]	; (80027ec <menu+0x133c>)
 800275a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800275e:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <menu+0x1344>)
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <menu+0x1348>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b09      	cmp	r3, #9
 800276a:	f040 80b9 	bne.w	80028e0 <menu+0x1430>
		if(dilSecim == 0){
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <menu+0x1328>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d105      	bne.n	8002782 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002776:	4a28      	ldr	r2, [pc, #160]	; (8002818 <menu+0x1368>)
 8002778:	2101      	movs	r1, #1
 800277a:	2001      	movs	r0, #1
 800277c:	f7fd fef2 	bl	8000564 <lcd_print>
 8002780:	e008      	b.n	8002794 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <menu+0x1328>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d104      	bne.n	8002794 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800278a:	4a24      	ldr	r2, [pc, #144]	; (800281c <menu+0x136c>)
 800278c:	2101      	movs	r1, #1
 800278e:	2001      	movs	r0, #1
 8002790:	f7fd fee8 	bl	8000564 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002794:	4b22      	ldr	r3, [pc, #136]	; (8002820 <menu+0x1370>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d105      	bne.n	80027a8 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800279c:	4a21      	ldr	r2, [pc, #132]	; (8002824 <menu+0x1374>)
 800279e:	2101      	movs	r1, #1
 80027a0:	2002      	movs	r0, #2
 80027a2:	f7fd fedf 	bl	8000564 <lcd_print>
 80027a6:	e04c      	b.n	8002842 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80027a8:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <menu+0x1370>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d13f      	bne.n	8002830 <menu+0x1380>
			if(dilSecim == 0){
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <menu+0x1328>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80027b8:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <menu+0x1378>)
 80027ba:	2101      	movs	r1, #1
 80027bc:	2002      	movs	r0, #2
 80027be:	f7fd fed1 	bl	8000564 <lcd_print>
 80027c2:	e03e      	b.n	8002842 <menu+0x1392>
			} else if(dilSecim == 1) {
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <menu+0x1328>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d13a      	bne.n	8002842 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80027cc:	4a17      	ldr	r2, [pc, #92]	; (800282c <menu+0x137c>)
 80027ce:	2101      	movs	r1, #1
 80027d0:	2002      	movs	r0, #2
 80027d2:	f7fd fec7 	bl	8000564 <lcd_print>
 80027d6:	e034      	b.n	8002842 <menu+0x1392>
 80027d8:	20000c2d 	.word	0x20000c2d
 80027dc:	0800cfb8 	.word	0x0800cfb8
 80027e0:	40010800 	.word	0x40010800
 80027e4:	20000c3b 	.word	0x20000c3b
 80027e8:	20000c14 	.word	0x20000c14
 80027ec:	20000b3c 	.word	0x20000b3c
 80027f0:	20000c12 	.word	0x20000c12
 80027f4:	20000c38 	.word	0x20000c38
 80027f8:	20000c0c 	.word	0x20000c0c
 80027fc:	0800cfcc 	.word	0x0800cfcc
 8002800:	0800cfe0 	.word	0x0800cfe0
 8002804:	20000c18 	.word	0x20000c18
 8002808:	0800cff4 	.word	0x0800cff4
 800280c:	0800d004 	.word	0x0800d004
 8002810:	0800d014 	.word	0x0800d014
 8002814:	0800d028 	.word	0x0800d028
 8002818:	0800d03c 	.word	0x0800d03c
 800281c:	0800d050 	.word	0x0800d050
 8002820:	20000c15 	.word	0x20000c15
 8002824:	0800d064 	.word	0x0800d064
 8002828:	0800d078 	.word	0x0800d078
 800282c:	0800d088 	.word	0x0800d088
			}
		} else if(kapi1Tip == 2) {
 8002830:	4b8a      	ldr	r3, [pc, #552]	; (8002a5c <menu+0x15ac>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d104      	bne.n	8002842 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002838:	4a89      	ldr	r2, [pc, #548]	; (8002a60 <menu+0x15b0>)
 800283a:	2101      	movs	r1, #1
 800283c:	2002      	movs	r0, #2
 800283e:	f7fd fe91 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002842:	2102      	movs	r1, #2
 8002844:	4887      	ldr	r0, [pc, #540]	; (8002a64 <menu+0x15b4>)
 8002846:	f006 ffed 	bl	8009824 <HAL_GPIO_ReadPin>
 800284a:	4603      	mov	r3, r0
 800284c:	2b01      	cmp	r3, #1
 800284e:	d115      	bne.n	800287c <menu+0x13cc>
 8002850:	4b85      	ldr	r3, [pc, #532]	; (8002a68 <menu+0x15b8>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	f083 0301 	eor.w	r3, r3, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00e      	beq.n	800287c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800285e:	4b7f      	ldr	r3, [pc, #508]	; (8002a5c <menu+0x15ac>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	3301      	adds	r3, #1
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4b7d      	ldr	r3, [pc, #500]	; (8002a5c <menu+0x15ac>)
 8002868:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800286a:	4b7c      	ldr	r3, [pc, #496]	; (8002a5c <menu+0x15ac>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d902      	bls.n	8002878 <menu+0x13c8>
				kapi1Tip = 0;
 8002872:	4b7a      	ldr	r3, [pc, #488]	; (8002a5c <menu+0x15ac>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002878:	f003 fb5c 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800287c:	2104      	movs	r1, #4
 800287e:	4879      	ldr	r0, [pc, #484]	; (8002a64 <menu+0x15b4>)
 8002880:	f006 ffd0 	bl	8009824 <HAL_GPIO_ReadPin>
 8002884:	4603      	mov	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d115      	bne.n	80028b6 <menu+0x1406>
 800288a:	4b77      	ldr	r3, [pc, #476]	; (8002a68 <menu+0x15b8>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	f083 0301 	eor.w	r3, r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00e      	beq.n	80028b6 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002898:	4b70      	ldr	r3, [pc, #448]	; (8002a5c <menu+0x15ac>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	3b01      	subs	r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	4b6e      	ldr	r3, [pc, #440]	; (8002a5c <menu+0x15ac>)
 80028a2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80028a4:	4b6d      	ldr	r3, [pc, #436]	; (8002a5c <menu+0x15ac>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d902      	bls.n	80028b2 <menu+0x1402>
		   		kapi1Tip = 2;
 80028ac:	4b6b      	ldr	r3, [pc, #428]	; (8002a5c <menu+0x15ac>)
 80028ae:	2202      	movs	r2, #2
 80028b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028b2:	f003 fb3f 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028b6:	2108      	movs	r1, #8
 80028b8:	486a      	ldr	r0, [pc, #424]	; (8002a64 <menu+0x15b4>)
 80028ba:	f006 ffb3 	bl	8009824 <HAL_GPIO_ReadPin>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d10d      	bne.n	80028e0 <menu+0x1430>
 80028c4:	4b68      	ldr	r3, [pc, #416]	; (8002a68 <menu+0x15b8>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	f083 0301 	eor.w	r3, r3, #1
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80028d2:	4b62      	ldr	r3, [pc, #392]	; (8002a5c <menu+0x15ac>)
 80028d4:	781a      	ldrb	r2, [r3, #0]
 80028d6:	4b65      	ldr	r3, [pc, #404]	; (8002a6c <menu+0x15bc>)
 80028d8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80028da:	4b65      	ldr	r3, [pc, #404]	; (8002a70 <menu+0x15c0>)
 80028dc:	2201      	movs	r2, #1
 80028de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80028e0:	4b64      	ldr	r3, [pc, #400]	; (8002a74 <menu+0x15c4>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b0a      	cmp	r3, #10
 80028e6:	d17f      	bne.n	80029e8 <menu+0x1538>
		if(dilSecim == 0) {
 80028e8:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <menu+0x15c8>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80028f0:	4a62      	ldr	r2, [pc, #392]	; (8002a7c <menu+0x15cc>)
 80028f2:	2101      	movs	r1, #1
 80028f4:	2001      	movs	r0, #1
 80028f6:	f7fd fe35 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80028fa:	4a61      	ldr	r2, [pc, #388]	; (8002a80 <menu+0x15d0>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	2002      	movs	r0, #2
 8002900:	f7fd fe30 	bl	8000564 <lcd_print>
 8002904:	e00d      	b.n	8002922 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002906:	4b5c      	ldr	r3, [pc, #368]	; (8002a78 <menu+0x15c8>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d109      	bne.n	8002922 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800290e:	4a5d      	ldr	r2, [pc, #372]	; (8002a84 <menu+0x15d4>)
 8002910:	2101      	movs	r1, #1
 8002912:	2001      	movs	r0, #1
 8002914:	f7fd fe26 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002918:	4a5b      	ldr	r2, [pc, #364]	; (8002a88 <menu+0x15d8>)
 800291a:	2101      	movs	r1, #1
 800291c:	2002      	movs	r0, #2
 800291e:	f7fd fe21 	bl	8000564 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002922:	4b5a      	ldr	r3, [pc, #360]	; (8002a8c <menu+0x15dc>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	220a      	movs	r2, #10
 8002928:	4959      	ldr	r1, [pc, #356]	; (8002a90 <menu+0x15e0>)
 800292a:	4618      	mov	r0, r3
 800292c:	f009 ff70 	bl	800c810 <itoa>
		lcd_print(2,16,snum);
 8002930:	4a57      	ldr	r2, [pc, #348]	; (8002a90 <menu+0x15e0>)
 8002932:	2110      	movs	r1, #16
 8002934:	2002      	movs	r0, #2
 8002936:	f7fd fe15 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800293a:	2102      	movs	r1, #2
 800293c:	4849      	ldr	r0, [pc, #292]	; (8002a64 <menu+0x15b4>)
 800293e:	f006 ff71 	bl	8009824 <HAL_GPIO_ReadPin>
 8002942:	4603      	mov	r3, r0
 8002944:	2b01      	cmp	r3, #1
 8002946:	d119      	bne.n	800297c <menu+0x14cc>
 8002948:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <menu+0x15b8>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f083 0301 	eor.w	r3, r3, #1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d012      	beq.n	800297c <menu+0x14cc>
 8002956:	4b41      	ldr	r3, [pc, #260]	; (8002a5c <menu+0x15ac>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10e      	bne.n	800297c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800295e:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <menu+0x15dc>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	3301      	adds	r3, #1
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <menu+0x15dc>)
 8002968:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800296a:	4b48      	ldr	r3, [pc, #288]	; (8002a8c <menu+0x15dc>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b05      	cmp	r3, #5
 8002970:	d902      	bls.n	8002978 <menu+0x14c8>
				kapi1AcSure = 0;
 8002972:	4b46      	ldr	r3, [pc, #280]	; (8002a8c <menu+0x15dc>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002978:	f003 fadc 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800297c:	2104      	movs	r1, #4
 800297e:	4839      	ldr	r0, [pc, #228]	; (8002a64 <menu+0x15b4>)
 8002980:	f006 ff50 	bl	8009824 <HAL_GPIO_ReadPin>
 8002984:	4603      	mov	r3, r0
 8002986:	2b01      	cmp	r3, #1
 8002988:	d119      	bne.n	80029be <menu+0x150e>
 800298a:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <menu+0x15b8>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	f083 0301 	eor.w	r3, r3, #1
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d012      	beq.n	80029be <menu+0x150e>
 8002998:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <menu+0x15ac>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10e      	bne.n	80029be <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80029a0:	4b3a      	ldr	r3, [pc, #232]	; (8002a8c <menu+0x15dc>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	4b38      	ldr	r3, [pc, #224]	; (8002a8c <menu+0x15dc>)
 80029aa:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80029ac:	4b37      	ldr	r3, [pc, #220]	; (8002a8c <menu+0x15dc>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b06      	cmp	r3, #6
 80029b2:	d902      	bls.n	80029ba <menu+0x150a>
		   		kapi1AcSure = 5;
 80029b4:	4b35      	ldr	r3, [pc, #212]	; (8002a8c <menu+0x15dc>)
 80029b6:	2205      	movs	r2, #5
 80029b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029ba:	f003 fabb 	bl	8005f34 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029be:	2108      	movs	r1, #8
 80029c0:	4828      	ldr	r0, [pc, #160]	; (8002a64 <menu+0x15b4>)
 80029c2:	f006 ff2f 	bl	8009824 <HAL_GPIO_ReadPin>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d10d      	bne.n	80029e8 <menu+0x1538>
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <menu+0x15b8>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	f083 0301 	eor.w	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d006      	beq.n	80029e8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80029da:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <menu+0x15dc>)
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <menu+0x15bc>)
 80029e0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <menu+0x15c0>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80029e8:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <menu+0x15c4>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b0b      	cmp	r3, #11
 80029ee:	f040 80b5 	bne.w	8002b5c <menu+0x16ac>
		if(dilSecim == 0) {
 80029f2:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <menu+0x15c8>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80029fa:	4a26      	ldr	r2, [pc, #152]	; (8002a94 <menu+0x15e4>)
 80029fc:	2101      	movs	r1, #1
 80029fe:	2001      	movs	r0, #1
 8002a00:	f7fd fdb0 	bl	8000564 <lcd_print>
 8002a04:	e008      	b.n	8002a18 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <menu+0x15c8>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d104      	bne.n	8002a18 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002a0e:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <menu+0x15e8>)
 8002a10:	2101      	movs	r1, #1
 8002a12:	2001      	movs	r0, #1
 8002a14:	f7fd fda6 	bl	8000564 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002a18:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <menu+0x15ec>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <menu+0x15f0>)
 8002a22:	2101      	movs	r1, #1
 8002a24:	2002      	movs	r0, #2
 8002a26:	f7fd fd9d 	bl	8000564 <lcd_print>
 8002a2a:	e048      	b.n	8002abe <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <menu+0x15ec>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d13b      	bne.n	8002aac <menu+0x15fc>
			if(dilSecim == 0) {
 8002a34:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <menu+0x15c8>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002a3c:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <menu+0x15f4>)
 8002a3e:	2101      	movs	r1, #1
 8002a40:	2002      	movs	r0, #2
 8002a42:	f7fd fd8f 	bl	8000564 <lcd_print>
 8002a46:	e03a      	b.n	8002abe <menu+0x160e>
			} else if(dilSecim == 1) {
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <menu+0x15c8>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d136      	bne.n	8002abe <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002a50:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <menu+0x15f8>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	2002      	movs	r0, #2
 8002a56:	f7fd fd85 	bl	8000564 <lcd_print>
 8002a5a:	e030      	b.n	8002abe <menu+0x160e>
 8002a5c:	20000c15 	.word	0x20000c15
 8002a60:	0800d09c 	.word	0x0800d09c
 8002a64:	40010800 	.word	0x40010800
 8002a68:	20000c3b 	.word	0x20000c3b
 8002a6c:	20000b3c 	.word	0x20000b3c
 8002a70:	20000c38 	.word	0x20000c38
 8002a74:	20000c0c 	.word	0x20000c0c
 8002a78:	20000c2d 	.word	0x20000c2d
 8002a7c:	0800d0ac 	.word	0x0800d0ac
 8002a80:	0800d0c0 	.word	0x0800d0c0
 8002a84:	0800d0d0 	.word	0x0800d0d0
 8002a88:	0800d0e4 	.word	0x0800d0e4
 8002a8c:	20000c25 	.word	0x20000c25
 8002a90:	20000bac 	.word	0x20000bac
 8002a94:	0800d0f4 	.word	0x0800d0f4
 8002a98:	0800d108 	.word	0x0800d108
 8002a9c:	20000c16 	.word	0x20000c16
 8002aa0:	0800d064 	.word	0x0800d064
 8002aa4:	0800d078 	.word	0x0800d078
 8002aa8:	0800d088 	.word	0x0800d088
			}
		} else if(kapi2Tip == 2) {
 8002aac:	4b8a      	ldr	r3, [pc, #552]	; (8002cd8 <menu+0x1828>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d104      	bne.n	8002abe <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002ab4:	4a89      	ldr	r2, [pc, #548]	; (8002cdc <menu+0x182c>)
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	2002      	movs	r0, #2
 8002aba:	f7fd fd53 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4887      	ldr	r0, [pc, #540]	; (8002ce0 <menu+0x1830>)
 8002ac2:	f006 feaf 	bl	8009824 <HAL_GPIO_ReadPin>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d115      	bne.n	8002af8 <menu+0x1648>
 8002acc:	4b85      	ldr	r3, [pc, #532]	; (8002ce4 <menu+0x1834>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	f083 0301 	eor.w	r3, r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00e      	beq.n	8002af8 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002ada:	4b7f      	ldr	r3, [pc, #508]	; (8002cd8 <menu+0x1828>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4b7d      	ldr	r3, [pc, #500]	; (8002cd8 <menu+0x1828>)
 8002ae4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002ae6:	4b7c      	ldr	r3, [pc, #496]	; (8002cd8 <menu+0x1828>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d902      	bls.n	8002af4 <menu+0x1644>
				kapi2Tip = 0;
 8002aee:	4b7a      	ldr	r3, [pc, #488]	; (8002cd8 <menu+0x1828>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002af4:	f003 fa1e 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002af8:	2104      	movs	r1, #4
 8002afa:	4879      	ldr	r0, [pc, #484]	; (8002ce0 <menu+0x1830>)
 8002afc:	f006 fe92 	bl	8009824 <HAL_GPIO_ReadPin>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d115      	bne.n	8002b32 <menu+0x1682>
 8002b06:	4b77      	ldr	r3, [pc, #476]	; (8002ce4 <menu+0x1834>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	f083 0301 	eor.w	r3, r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00e      	beq.n	8002b32 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002b14:	4b70      	ldr	r3, [pc, #448]	; (8002cd8 <menu+0x1828>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b6e      	ldr	r3, [pc, #440]	; (8002cd8 <menu+0x1828>)
 8002b1e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002b20:	4b6d      	ldr	r3, [pc, #436]	; (8002cd8 <menu+0x1828>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d902      	bls.n	8002b2e <menu+0x167e>
		   		kapi2Tip = 2;
 8002b28:	4b6b      	ldr	r3, [pc, #428]	; (8002cd8 <menu+0x1828>)
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b2e:	f003 fa01 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b32:	2108      	movs	r1, #8
 8002b34:	486a      	ldr	r0, [pc, #424]	; (8002ce0 <menu+0x1830>)
 8002b36:	f006 fe75 	bl	8009824 <HAL_GPIO_ReadPin>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d10d      	bne.n	8002b5c <menu+0x16ac>
 8002b40:	4b68      	ldr	r3, [pc, #416]	; (8002ce4 <menu+0x1834>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	f083 0301 	eor.w	r3, r3, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d006      	beq.n	8002b5c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002b4e:	4b62      	ldr	r3, [pc, #392]	; (8002cd8 <menu+0x1828>)
 8002b50:	781a      	ldrb	r2, [r3, #0]
 8002b52:	4b65      	ldr	r3, [pc, #404]	; (8002ce8 <menu+0x1838>)
 8002b54:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002b56:	4b65      	ldr	r3, [pc, #404]	; (8002cec <menu+0x183c>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002b5c:	4b64      	ldr	r3, [pc, #400]	; (8002cf0 <menu+0x1840>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b0c      	cmp	r3, #12
 8002b62:	d17f      	bne.n	8002c64 <menu+0x17b4>
		if(dilSecim == 0) {
 8002b64:	4b63      	ldr	r3, [pc, #396]	; (8002cf4 <menu+0x1844>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002b6c:	4a62      	ldr	r2, [pc, #392]	; (8002cf8 <menu+0x1848>)
 8002b6e:	2101      	movs	r1, #1
 8002b70:	2001      	movs	r0, #1
 8002b72:	f7fd fcf7 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002b76:	4a61      	ldr	r2, [pc, #388]	; (8002cfc <menu+0x184c>)
 8002b78:	2101      	movs	r1, #1
 8002b7a:	2002      	movs	r0, #2
 8002b7c:	f7fd fcf2 	bl	8000564 <lcd_print>
 8002b80:	e00d      	b.n	8002b9e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002b82:	4b5c      	ldr	r3, [pc, #368]	; (8002cf4 <menu+0x1844>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d109      	bne.n	8002b9e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002b8a:	4a5d      	ldr	r2, [pc, #372]	; (8002d00 <menu+0x1850>)
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f7fd fce8 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002b94:	4a5b      	ldr	r2, [pc, #364]	; (8002d04 <menu+0x1854>)
 8002b96:	2101      	movs	r1, #1
 8002b98:	2002      	movs	r0, #2
 8002b9a:	f7fd fce3 	bl	8000564 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002b9e:	4b5a      	ldr	r3, [pc, #360]	; (8002d08 <menu+0x1858>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	220a      	movs	r2, #10
 8002ba4:	4959      	ldr	r1, [pc, #356]	; (8002d0c <menu+0x185c>)
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f009 fe32 	bl	800c810 <itoa>
		lcd_print(2,16,snum);
 8002bac:	4a57      	ldr	r2, [pc, #348]	; (8002d0c <menu+0x185c>)
 8002bae:	2110      	movs	r1, #16
 8002bb0:	2002      	movs	r0, #2
 8002bb2:	f7fd fcd7 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	4849      	ldr	r0, [pc, #292]	; (8002ce0 <menu+0x1830>)
 8002bba:	f006 fe33 	bl	8009824 <HAL_GPIO_ReadPin>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d119      	bne.n	8002bf8 <menu+0x1748>
 8002bc4:	4b47      	ldr	r3, [pc, #284]	; (8002ce4 <menu+0x1834>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	f083 0301 	eor.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d012      	beq.n	8002bf8 <menu+0x1748>
 8002bd2:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <menu+0x1828>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10e      	bne.n	8002bf8 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002bda:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <menu+0x1858>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b49      	ldr	r3, [pc, #292]	; (8002d08 <menu+0x1858>)
 8002be4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002be6:	4b48      	ldr	r3, [pc, #288]	; (8002d08 <menu+0x1858>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b05      	cmp	r3, #5
 8002bec:	d902      	bls.n	8002bf4 <menu+0x1744>
				kapi2AcSure = 0;
 8002bee:	4b46      	ldr	r3, [pc, #280]	; (8002d08 <menu+0x1858>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bf4:	f003 f99e 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	4839      	ldr	r0, [pc, #228]	; (8002ce0 <menu+0x1830>)
 8002bfc:	f006 fe12 	bl	8009824 <HAL_GPIO_ReadPin>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d119      	bne.n	8002c3a <menu+0x178a>
 8002c06:	4b37      	ldr	r3, [pc, #220]	; (8002ce4 <menu+0x1834>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	f083 0301 	eor.w	r3, r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d012      	beq.n	8002c3a <menu+0x178a>
 8002c14:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <menu+0x1828>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10e      	bne.n	8002c3a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002c1c:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <menu+0x1858>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	4b38      	ldr	r3, [pc, #224]	; (8002d08 <menu+0x1858>)
 8002c26:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002c28:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <menu+0x1858>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b06      	cmp	r3, #6
 8002c2e:	d902      	bls.n	8002c36 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002c30:	4b35      	ldr	r3, [pc, #212]	; (8002d08 <menu+0x1858>)
 8002c32:	2205      	movs	r2, #5
 8002c34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c36:	f003 f97d 	bl	8005f34 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c3a:	2108      	movs	r1, #8
 8002c3c:	4828      	ldr	r0, [pc, #160]	; (8002ce0 <menu+0x1830>)
 8002c3e:	f006 fdf1 	bl	8009824 <HAL_GPIO_ReadPin>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d10d      	bne.n	8002c64 <menu+0x17b4>
 8002c48:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <menu+0x1834>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	f083 0301 	eor.w	r3, r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <menu+0x1858>)
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <menu+0x1838>)
 8002c5c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <menu+0x183c>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002c64:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <menu+0x1840>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b0d      	cmp	r3, #13
 8002c6a:	f040 80b5 	bne.w	8002dd8 <menu+0x1928>
		if(dilSecim == 0) {
 8002c6e:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <menu+0x1844>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d105      	bne.n	8002c82 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002c76:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <menu+0x1860>)
 8002c78:	2101      	movs	r1, #1
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f7fd fc72 	bl	8000564 <lcd_print>
 8002c80:	e008      	b.n	8002c94 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002c82:	4b1c      	ldr	r3, [pc, #112]	; (8002cf4 <menu+0x1844>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d104      	bne.n	8002c94 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002c8a:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <menu+0x1864>)
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f7fd fc68 	bl	8000564 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002c94:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <menu+0x1868>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002c9c:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <menu+0x186c>)
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	2002      	movs	r0, #2
 8002ca2:	f7fd fc5f 	bl	8000564 <lcd_print>
 8002ca6:	e048      	b.n	8002d3a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <menu+0x1868>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d13b      	bne.n	8002d28 <menu+0x1878>
			if(dilSecim == 0) {
 8002cb0:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <menu+0x1844>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002cb8:	4a19      	ldr	r2, [pc, #100]	; (8002d20 <menu+0x1870>)
 8002cba:	2101      	movs	r1, #1
 8002cbc:	2002      	movs	r0, #2
 8002cbe:	f7fd fc51 	bl	8000564 <lcd_print>
 8002cc2:	e03a      	b.n	8002d3a <menu+0x188a>
			} else if(dilSecim == 1) {
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <menu+0x1844>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d136      	bne.n	8002d3a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002ccc:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <menu+0x1874>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	2002      	movs	r0, #2
 8002cd2:	f7fd fc47 	bl	8000564 <lcd_print>
 8002cd6:	e030      	b.n	8002d3a <menu+0x188a>
 8002cd8:	20000c16 	.word	0x20000c16
 8002cdc:	0800d09c 	.word	0x0800d09c
 8002ce0:	40010800 	.word	0x40010800
 8002ce4:	20000c3b 	.word	0x20000c3b
 8002ce8:	20000b3c 	.word	0x20000b3c
 8002cec:	20000c38 	.word	0x20000c38
 8002cf0:	20000c0c 	.word	0x20000c0c
 8002cf4:	20000c2d 	.word	0x20000c2d
 8002cf8:	0800d11c 	.word	0x0800d11c
 8002cfc:	0800d0c0 	.word	0x0800d0c0
 8002d00:	0800d130 	.word	0x0800d130
 8002d04:	0800d0e4 	.word	0x0800d0e4
 8002d08:	20000c26 	.word	0x20000c26
 8002d0c:	20000bac 	.word	0x20000bac
 8002d10:	0800d144 	.word	0x0800d144
 8002d14:	0800d158 	.word	0x0800d158
 8002d18:	20000c17 	.word	0x20000c17
 8002d1c:	0800d064 	.word	0x0800d064
 8002d20:	0800d078 	.word	0x0800d078
 8002d24:	0800d088 	.word	0x0800d088
			}
		} else if(kapitablaTip == 2) {
 8002d28:	4b5b      	ldr	r3, [pc, #364]	; (8002e98 <menu+0x19e8>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d104      	bne.n	8002d3a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002d30:	4a5a      	ldr	r2, [pc, #360]	; (8002e9c <menu+0x19ec>)
 8002d32:	2101      	movs	r1, #1
 8002d34:	2002      	movs	r0, #2
 8002d36:	f7fd fc15 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4858      	ldr	r0, [pc, #352]	; (8002ea0 <menu+0x19f0>)
 8002d3e:	f006 fd71 	bl	8009824 <HAL_GPIO_ReadPin>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d115      	bne.n	8002d74 <menu+0x18c4>
 8002d48:	4b56      	ldr	r3, [pc, #344]	; (8002ea4 <menu+0x19f4>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	f083 0301 	eor.w	r3, r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00e      	beq.n	8002d74 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002d56:	4b50      	ldr	r3, [pc, #320]	; (8002e98 <menu+0x19e8>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b4e      	ldr	r3, [pc, #312]	; (8002e98 <menu+0x19e8>)
 8002d60:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002d62:	4b4d      	ldr	r3, [pc, #308]	; (8002e98 <menu+0x19e8>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d902      	bls.n	8002d70 <menu+0x18c0>
				kapitablaTip = 0;
 8002d6a:	4b4b      	ldr	r3, [pc, #300]	; (8002e98 <menu+0x19e8>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d70:	f003 f8e0 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d74:	2104      	movs	r1, #4
 8002d76:	484a      	ldr	r0, [pc, #296]	; (8002ea0 <menu+0x19f0>)
 8002d78:	f006 fd54 	bl	8009824 <HAL_GPIO_ReadPin>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d115      	bne.n	8002dae <menu+0x18fe>
 8002d82:	4b48      	ldr	r3, [pc, #288]	; (8002ea4 <menu+0x19f4>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	f083 0301 	eor.w	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00e      	beq.n	8002dae <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002d90:	4b41      	ldr	r3, [pc, #260]	; (8002e98 <menu+0x19e8>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <menu+0x19e8>)
 8002d9a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002d9c:	4b3e      	ldr	r3, [pc, #248]	; (8002e98 <menu+0x19e8>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d902      	bls.n	8002daa <menu+0x18fa>
		   		kapitablaTip = 2;
 8002da4:	4b3c      	ldr	r3, [pc, #240]	; (8002e98 <menu+0x19e8>)
 8002da6:	2202      	movs	r2, #2
 8002da8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002daa:	f003 f8c3 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dae:	2108      	movs	r1, #8
 8002db0:	483b      	ldr	r0, [pc, #236]	; (8002ea0 <menu+0x19f0>)
 8002db2:	f006 fd37 	bl	8009824 <HAL_GPIO_ReadPin>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d10d      	bne.n	8002dd8 <menu+0x1928>
 8002dbc:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <menu+0x19f4>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	f083 0301 	eor.w	r3, r3, #1
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d006      	beq.n	8002dd8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002dca:	4b33      	ldr	r3, [pc, #204]	; (8002e98 <menu+0x19e8>)
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <menu+0x19f8>)
 8002dd0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002dd2:	4b36      	ldr	r3, [pc, #216]	; (8002eac <menu+0x19fc>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002dd8:	4b35      	ldr	r3, [pc, #212]	; (8002eb0 <menu+0x1a00>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b0e      	cmp	r3, #14
 8002dde:	f040 80f2 	bne.w	8002fc6 <menu+0x1b16>
		if(dilSecim == 0) {
 8002de2:	4b34      	ldr	r3, [pc, #208]	; (8002eb4 <menu+0x1a04>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d105      	bne.n	8002df6 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002dea:	4a33      	ldr	r2, [pc, #204]	; (8002eb8 <menu+0x1a08>)
 8002dec:	2101      	movs	r1, #1
 8002dee:	2001      	movs	r0, #1
 8002df0:	f7fd fbb8 	bl	8000564 <lcd_print>
 8002df4:	e008      	b.n	8002e08 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002df6:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <menu+0x1a04>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d104      	bne.n	8002e08 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002dfe:	4a2f      	ldr	r2, [pc, #188]	; (8002ebc <menu+0x1a0c>)
 8002e00:	2101      	movs	r1, #1
 8002e02:	2001      	movs	r0, #1
 8002e04:	f7fd fbae 	bl	8000564 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002e08:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <menu+0x1a10>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d113      	bne.n	8002e38 <menu+0x1988>
			if(dilSecim == 0){
 8002e10:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <menu+0x1a04>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002e18:	4a2a      	ldr	r2, [pc, #168]	; (8002ec4 <menu+0x1a14>)
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	2002      	movs	r0, #2
 8002e1e:	f7fd fba1 	bl	8000564 <lcd_print>
 8002e22:	e071      	b.n	8002f08 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <menu+0x1a04>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d16d      	bne.n	8002f08 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002e2c:	4a26      	ldr	r2, [pc, #152]	; (8002ec8 <menu+0x1a18>)
 8002e2e:	2101      	movs	r1, #1
 8002e30:	2002      	movs	r0, #2
 8002e32:	f7fd fb97 	bl	8000564 <lcd_print>
 8002e36:	e067      	b.n	8002f08 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002e38:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <menu+0x1a10>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d112      	bne.n	8002e66 <menu+0x19b6>
			if(dilSecim == 0){
 8002e40:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <menu+0x1a04>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d104      	bne.n	8002e52 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002e48:	4a20      	ldr	r2, [pc, #128]	; (8002ecc <menu+0x1a1c>)
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	2002      	movs	r0, #2
 8002e4e:	f7fd fb89 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1){
 8002e52:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <menu+0x1a04>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d156      	bne.n	8002f08 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002e5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <menu+0x1a20>)
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	2002      	movs	r0, #2
 8002e60:	f7fd fb80 	bl	8000564 <lcd_print>
 8002e64:	e050      	b.n	8002f08 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <menu+0x1a10>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d136      	bne.n	8002edc <menu+0x1a2c>
			if(dilSecim == 0){
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <menu+0x1a04>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002e76:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <menu+0x1a24>)
 8002e78:	2101      	movs	r1, #1
 8002e7a:	2002      	movs	r0, #2
 8002e7c:	f7fd fb72 	bl	8000564 <lcd_print>
 8002e80:	e042      	b.n	8002f08 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <menu+0x1a04>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d13e      	bne.n	8002f08 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002e8a:	4a13      	ldr	r2, [pc, #76]	; (8002ed8 <menu+0x1a28>)
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	2002      	movs	r0, #2
 8002e90:	f7fd fb68 	bl	8000564 <lcd_print>
 8002e94:	e038      	b.n	8002f08 <menu+0x1a58>
 8002e96:	bf00      	nop
 8002e98:	20000c17 	.word	0x20000c17
 8002e9c:	0800d09c 	.word	0x0800d09c
 8002ea0:	40010800 	.word	0x40010800
 8002ea4:	20000c3b 	.word	0x20000c3b
 8002ea8:	20000b3c 	.word	0x20000b3c
 8002eac:	20000c38 	.word	0x20000c38
 8002eb0:	20000c0c 	.word	0x20000c0c
 8002eb4:	20000c2d 	.word	0x20000c2d
 8002eb8:	0800d16c 	.word	0x0800d16c
 8002ebc:	0800d180 	.word	0x0800d180
 8002ec0:	20000c19 	.word	0x20000c19
 8002ec4:	0800d194 	.word	0x0800d194
 8002ec8:	0800d1a4 	.word	0x0800d1a4
 8002ecc:	0800d1b4 	.word	0x0800d1b4
 8002ed0:	0800d1c4 	.word	0x0800d1c4
 8002ed4:	0800d1d4 	.word	0x0800d1d4
 8002ed8:	0800d1e8 	.word	0x0800d1e8
			}
		} else if(kapiTablaAcKonum == 3) {
 8002edc:	4b9b      	ldr	r3, [pc, #620]	; (800314c <menu+0x1c9c>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d111      	bne.n	8002f08 <menu+0x1a58>
			if(dilSecim == 0) {
 8002ee4:	4b9a      	ldr	r3, [pc, #616]	; (8003150 <menu+0x1ca0>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d104      	bne.n	8002ef6 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002eec:	4a99      	ldr	r2, [pc, #612]	; (8003154 <menu+0x1ca4>)
 8002eee:	2101      	movs	r1, #1
 8002ef0:	2002      	movs	r0, #2
 8002ef2:	f7fd fb37 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 8002ef6:	4b96      	ldr	r3, [pc, #600]	; (8003150 <menu+0x1ca0>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d104      	bne.n	8002f08 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002efe:	4a96      	ldr	r2, [pc, #600]	; (8003158 <menu+0x1ca8>)
 8002f00:	2101      	movs	r1, #1
 8002f02:	2002      	movs	r0, #2
 8002f04:	f7fd fb2e 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f08:	2102      	movs	r1, #2
 8002f0a:	4894      	ldr	r0, [pc, #592]	; (800315c <menu+0x1cac>)
 8002f0c:	f006 fc8a 	bl	8009824 <HAL_GPIO_ReadPin>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d115      	bne.n	8002f42 <menu+0x1a92>
 8002f16:	4b92      	ldr	r3, [pc, #584]	; (8003160 <menu+0x1cb0>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	f083 0301 	eor.w	r3, r3, #1
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00e      	beq.n	8002f42 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002f24:	4b89      	ldr	r3, [pc, #548]	; (800314c <menu+0x1c9c>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	4b87      	ldr	r3, [pc, #540]	; (800314c <menu+0x1c9c>)
 8002f2e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002f30:	4b86      	ldr	r3, [pc, #536]	; (800314c <menu+0x1c9c>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d902      	bls.n	8002f3e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002f38:	4b84      	ldr	r3, [pc, #528]	; (800314c <menu+0x1c9c>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f3e:	f002 fff9 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f42:	2104      	movs	r1, #4
 8002f44:	4885      	ldr	r0, [pc, #532]	; (800315c <menu+0x1cac>)
 8002f46:	f006 fc6d 	bl	8009824 <HAL_GPIO_ReadPin>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d115      	bne.n	8002f7c <menu+0x1acc>
 8002f50:	4b83      	ldr	r3, [pc, #524]	; (8003160 <menu+0x1cb0>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	f083 0301 	eor.w	r3, r3, #1
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00e      	beq.n	8002f7c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002f5e:	4b7b      	ldr	r3, [pc, #492]	; (800314c <menu+0x1c9c>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	4b79      	ldr	r3, [pc, #484]	; (800314c <menu+0x1c9c>)
 8002f68:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002f6a:	4b78      	ldr	r3, [pc, #480]	; (800314c <menu+0x1c9c>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d902      	bls.n	8002f78 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002f72:	4b76      	ldr	r3, [pc, #472]	; (800314c <menu+0x1c9c>)
 8002f74:	2202      	movs	r2, #2
 8002f76:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f78:	f002 ffdc 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f7c:	2108      	movs	r1, #8
 8002f7e:	4877      	ldr	r0, [pc, #476]	; (800315c <menu+0x1cac>)
 8002f80:	f006 fc50 	bl	8009824 <HAL_GPIO_ReadPin>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d11d      	bne.n	8002fc6 <menu+0x1b16>
 8002f8a:	4b75      	ldr	r3, [pc, #468]	; (8003160 <menu+0x1cb0>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	f083 0301 	eor.w	r3, r3, #1
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d016      	beq.n	8002fc6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002f98:	4b6c      	ldr	r3, [pc, #432]	; (800314c <menu+0x1c9c>)
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	4b71      	ldr	r3, [pc, #452]	; (8003164 <menu+0x1cb4>)
 8002f9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002fa2:	4b6a      	ldr	r3, [pc, #424]	; (800314c <menu+0x1c9c>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <menu+0x1b02>
 8002faa:	4b68      	ldr	r3, [pc, #416]	; (800314c <menu+0x1c9c>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d106      	bne.n	8002fc0 <menu+0x1b10>
				altLimit = 1;
 8002fb2:	4b6d      	ldr	r3, [pc, #436]	; (8003168 <menu+0x1cb8>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002fb8:	4b6b      	ldr	r3, [pc, #428]	; (8003168 <menu+0x1cb8>)
 8002fba:	781a      	ldrb	r2, [r3, #0]
 8002fbc:	4b69      	ldr	r3, [pc, #420]	; (8003164 <menu+0x1cb4>)
 8002fbe:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002fc0:	4b6a      	ldr	r3, [pc, #424]	; (800316c <menu+0x1cbc>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002fc6:	4b6a      	ldr	r3, [pc, #424]	; (8003170 <menu+0x1cc0>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b0f      	cmp	r3, #15
 8002fcc:	d17f      	bne.n	80030ce <menu+0x1c1e>
		if(dilSecim == 0) {
 8002fce:	4b60      	ldr	r3, [pc, #384]	; (8003150 <menu+0x1ca0>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002fd6:	4a67      	ldr	r2, [pc, #412]	; (8003174 <menu+0x1cc4>)
 8002fd8:	2101      	movs	r1, #1
 8002fda:	2001      	movs	r0, #1
 8002fdc:	f7fd fac2 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002fe0:	4a65      	ldr	r2, [pc, #404]	; (8003178 <menu+0x1cc8>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	2002      	movs	r0, #2
 8002fe6:	f7fd fabd 	bl	8000564 <lcd_print>
 8002fea:	e00d      	b.n	8003008 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002fec:	4b58      	ldr	r3, [pc, #352]	; (8003150 <menu+0x1ca0>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d109      	bne.n	8003008 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002ff4:	4a61      	ldr	r2, [pc, #388]	; (800317c <menu+0x1ccc>)
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	f7fd fab3 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002ffe:	4a60      	ldr	r2, [pc, #384]	; (8003180 <menu+0x1cd0>)
 8003000:	2101      	movs	r1, #1
 8003002:	2002      	movs	r0, #2
 8003004:	f7fd faae 	bl	8000564 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003008:	4b5e      	ldr	r3, [pc, #376]	; (8003184 <menu+0x1cd4>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	220a      	movs	r2, #10
 800300e:	495e      	ldr	r1, [pc, #376]	; (8003188 <menu+0x1cd8>)
 8003010:	4618      	mov	r0, r3
 8003012:	f009 fbfd 	bl	800c810 <itoa>
		lcd_print(2,16,snum);
 8003016:	4a5c      	ldr	r2, [pc, #368]	; (8003188 <menu+0x1cd8>)
 8003018:	2110      	movs	r1, #16
 800301a:	2002      	movs	r0, #2
 800301c:	f7fd faa2 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003020:	2102      	movs	r1, #2
 8003022:	484e      	ldr	r0, [pc, #312]	; (800315c <menu+0x1cac>)
 8003024:	f006 fbfe 	bl	8009824 <HAL_GPIO_ReadPin>
 8003028:	4603      	mov	r3, r0
 800302a:	2b01      	cmp	r3, #1
 800302c:	d119      	bne.n	8003062 <menu+0x1bb2>
 800302e:	4b4c      	ldr	r3, [pc, #304]	; (8003160 <menu+0x1cb0>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	f083 0301 	eor.w	r3, r3, #1
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d012      	beq.n	8003062 <menu+0x1bb2>
 800303c:	4b53      	ldr	r3, [pc, #332]	; (800318c <menu+0x1cdc>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10e      	bne.n	8003062 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8003044:	4b4f      	ldr	r3, [pc, #316]	; (8003184 <menu+0x1cd4>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	3301      	adds	r3, #1
 800304a:	b2da      	uxtb	r2, r3
 800304c:	4b4d      	ldr	r3, [pc, #308]	; (8003184 <menu+0x1cd4>)
 800304e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003050:	4b4c      	ldr	r3, [pc, #304]	; (8003184 <menu+0x1cd4>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b05      	cmp	r3, #5
 8003056:	d902      	bls.n	800305e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8003058:	4b4a      	ldr	r3, [pc, #296]	; (8003184 <menu+0x1cd4>)
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800305e:	f002 ff69 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003062:	2104      	movs	r1, #4
 8003064:	483d      	ldr	r0, [pc, #244]	; (800315c <menu+0x1cac>)
 8003066:	f006 fbdd 	bl	8009824 <HAL_GPIO_ReadPin>
 800306a:	4603      	mov	r3, r0
 800306c:	2b01      	cmp	r3, #1
 800306e:	d119      	bne.n	80030a4 <menu+0x1bf4>
 8003070:	4b3b      	ldr	r3, [pc, #236]	; (8003160 <menu+0x1cb0>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	f083 0301 	eor.w	r3, r3, #1
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d012      	beq.n	80030a4 <menu+0x1bf4>
 800307e:	4b43      	ldr	r3, [pc, #268]	; (800318c <menu+0x1cdc>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10e      	bne.n	80030a4 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8003086:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <menu+0x1cd4>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	3b01      	subs	r3, #1
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4b3d      	ldr	r3, [pc, #244]	; (8003184 <menu+0x1cd4>)
 8003090:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003092:	4b3c      	ldr	r3, [pc, #240]	; (8003184 <menu+0x1cd4>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b06      	cmp	r3, #6
 8003098:	d902      	bls.n	80030a0 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800309a:	4b3a      	ldr	r3, [pc, #232]	; (8003184 <menu+0x1cd4>)
 800309c:	2205      	movs	r2, #5
 800309e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80030a0:	f002 ff48 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030a4:	2108      	movs	r1, #8
 80030a6:	482d      	ldr	r0, [pc, #180]	; (800315c <menu+0x1cac>)
 80030a8:	f006 fbbc 	bl	8009824 <HAL_GPIO_ReadPin>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d10d      	bne.n	80030ce <menu+0x1c1e>
 80030b2:	4b2b      	ldr	r3, [pc, #172]	; (8003160 <menu+0x1cb0>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	f083 0301 	eor.w	r3, r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d006      	beq.n	80030ce <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80030c0:	4b30      	ldr	r3, [pc, #192]	; (8003184 <menu+0x1cd4>)
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	4b27      	ldr	r3, [pc, #156]	; (8003164 <menu+0x1cb4>)
 80030c6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80030c8:	4b28      	ldr	r3, [pc, #160]	; (800316c <menu+0x1cbc>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80030ce:	4b28      	ldr	r3, [pc, #160]	; (8003170 <menu+0x1cc0>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	f040 80bc 	bne.w	8003250 <menu+0x1da0>
		if(dilSecim == 0) {
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <menu+0x1ca0>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80030e0:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <menu+0x1ce0>)
 80030e2:	2101      	movs	r1, #1
 80030e4:	2001      	movs	r0, #1
 80030e6:	f7fd fa3d 	bl	8000564 <lcd_print>
 80030ea:	e008      	b.n	80030fe <menu+0x1c4e>
		} else if(dilSecim == 1) {
 80030ec:	4b18      	ldr	r3, [pc, #96]	; (8003150 <menu+0x1ca0>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d104      	bne.n	80030fe <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80030f4:	4a27      	ldr	r2, [pc, #156]	; (8003194 <menu+0x1ce4>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	2001      	movs	r0, #1
 80030fa:	f7fd fa33 	bl	8000564 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80030fe:	4b26      	ldr	r3, [pc, #152]	; (8003198 <menu+0x1ce8>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d113      	bne.n	800312e <menu+0x1c7e>
			if(dilSecim == 0) {
 8003106:	4b12      	ldr	r3, [pc, #72]	; (8003150 <menu+0x1ca0>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d105      	bne.n	800311a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 800310e:	4a11      	ldr	r2, [pc, #68]	; (8003154 <menu+0x1ca4>)
 8003110:	2101      	movs	r1, #1
 8003112:	2002      	movs	r0, #2
 8003114:	f7fd fa26 	bl	8000564 <lcd_print>
 8003118:	e04b      	b.n	80031b2 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <menu+0x1ca0>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d147      	bne.n	80031b2 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8003122:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <menu+0x1ca8>)
 8003124:	2101      	movs	r1, #1
 8003126:	2002      	movs	r0, #2
 8003128:	f7fd fa1c 	bl	8000564 <lcd_print>
 800312c:	e041      	b.n	80031b2 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800312e:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <menu+0x1ce8>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d13d      	bne.n	80031b2 <menu+0x1d02>
			if(dilSecim == 0) {
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <menu+0x1ca0>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d130      	bne.n	80031a0 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800313e:	4a17      	ldr	r2, [pc, #92]	; (800319c <menu+0x1cec>)
 8003140:	2101      	movs	r1, #1
 8003142:	2002      	movs	r0, #2
 8003144:	f7fd fa0e 	bl	8000564 <lcd_print>
 8003148:	e033      	b.n	80031b2 <menu+0x1d02>
 800314a:	bf00      	nop
 800314c:	20000c19 	.word	0x20000c19
 8003150:	20000c2d 	.word	0x20000c2d
 8003154:	0800ce5c 	.word	0x0800ce5c
 8003158:	0800ce70 	.word	0x0800ce70
 800315c:	40010800 	.word	0x40010800
 8003160:	20000c3b 	.word	0x20000c3b
 8003164:	20000b3c 	.word	0x20000b3c
 8003168:	20000c12 	.word	0x20000c12
 800316c:	20000c38 	.word	0x20000c38
 8003170:	20000c0c 	.word	0x20000c0c
 8003174:	0800d1fc 	.word	0x0800d1fc
 8003178:	0800d0c0 	.word	0x0800d0c0
 800317c:	0800d210 	.word	0x0800d210
 8003180:	0800d0e4 	.word	0x0800d0e4
 8003184:	20000c27 	.word	0x20000c27
 8003188:	20000bac 	.word	0x20000bac
 800318c:	20000c17 	.word	0x20000c17
 8003190:	0800d224 	.word	0x0800d224
 8003194:	0800d238 	.word	0x0800d238
 8003198:	20000c1a 	.word	0x20000c1a
 800319c:	0800cebc 	.word	0x0800cebc
			} else if(dilSecim == 1) {
 80031a0:	4b99      	ldr	r3, [pc, #612]	; (8003408 <menu+0x1f58>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d104      	bne.n	80031b2 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80031a8:	4a98      	ldr	r2, [pc, #608]	; (800340c <menu+0x1f5c>)
 80031aa:	2101      	movs	r1, #1
 80031ac:	2002      	movs	r0, #2
 80031ae:	f7fd f9d9 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b2:	2102      	movs	r1, #2
 80031b4:	4896      	ldr	r0, [pc, #600]	; (8003410 <menu+0x1f60>)
 80031b6:	f006 fb35 	bl	8009824 <HAL_GPIO_ReadPin>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d115      	bne.n	80031ec <menu+0x1d3c>
 80031c0:	4b94      	ldr	r3, [pc, #592]	; (8003414 <menu+0x1f64>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	f083 0301 	eor.w	r3, r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00e      	beq.n	80031ec <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80031ce:	4b92      	ldr	r3, [pc, #584]	; (8003418 <menu+0x1f68>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4b90      	ldr	r3, [pc, #576]	; (8003418 <menu+0x1f68>)
 80031d8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80031da:	4b8f      	ldr	r3, [pc, #572]	; (8003418 <menu+0x1f68>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d902      	bls.n	80031e8 <menu+0x1d38>
				yukariYavasLimit = 0;
 80031e2:	4b8d      	ldr	r3, [pc, #564]	; (8003418 <menu+0x1f68>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031e8:	f002 fea4 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ec:	2104      	movs	r1, #4
 80031ee:	4888      	ldr	r0, [pc, #544]	; (8003410 <menu+0x1f60>)
 80031f0:	f006 fb18 	bl	8009824 <HAL_GPIO_ReadPin>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d115      	bne.n	8003226 <menu+0x1d76>
 80031fa:	4b86      	ldr	r3, [pc, #536]	; (8003414 <menu+0x1f64>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	f083 0301 	eor.w	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00e      	beq.n	8003226 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003208:	4b83      	ldr	r3, [pc, #524]	; (8003418 <menu+0x1f68>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	3b01      	subs	r3, #1
 800320e:	b2da      	uxtb	r2, r3
 8003210:	4b81      	ldr	r3, [pc, #516]	; (8003418 <menu+0x1f68>)
 8003212:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003214:	4b80      	ldr	r3, [pc, #512]	; (8003418 <menu+0x1f68>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800321c:	4b7e      	ldr	r3, [pc, #504]	; (8003418 <menu+0x1f68>)
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003222:	f002 fe87 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003226:	2108      	movs	r1, #8
 8003228:	4879      	ldr	r0, [pc, #484]	; (8003410 <menu+0x1f60>)
 800322a:	f006 fafb 	bl	8009824 <HAL_GPIO_ReadPin>
 800322e:	4603      	mov	r3, r0
 8003230:	2b01      	cmp	r3, #1
 8003232:	d10d      	bne.n	8003250 <menu+0x1da0>
 8003234:	4b77      	ldr	r3, [pc, #476]	; (8003414 <menu+0x1f64>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	f083 0301 	eor.w	r3, r3, #1
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d006      	beq.n	8003250 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8003242:	4b75      	ldr	r3, [pc, #468]	; (8003418 <menu+0x1f68>)
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	4b75      	ldr	r3, [pc, #468]	; (800341c <menu+0x1f6c>)
 8003248:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800324a:	4b75      	ldr	r3, [pc, #468]	; (8003420 <menu+0x1f70>)
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003250:	4b74      	ldr	r3, [pc, #464]	; (8003424 <menu+0x1f74>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b11      	cmp	r3, #17
 8003256:	f040 80c3 	bne.w	80033e0 <menu+0x1f30>
		if(dilSecim == 0) {
 800325a:	4b6b      	ldr	r3, [pc, #428]	; (8003408 <menu+0x1f58>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003262:	4a71      	ldr	r2, [pc, #452]	; (8003428 <menu+0x1f78>)
 8003264:	2101      	movs	r1, #1
 8003266:	2001      	movs	r0, #1
 8003268:	f7fd f97c 	bl	8000564 <lcd_print>
 800326c:	e008      	b.n	8003280 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800326e:	4b66      	ldr	r3, [pc, #408]	; (8003408 <menu+0x1f58>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d104      	bne.n	8003280 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003276:	4a6d      	ldr	r2, [pc, #436]	; (800342c <menu+0x1f7c>)
 8003278:	2101      	movs	r1, #1
 800327a:	2001      	movs	r0, #1
 800327c:	f7fd f972 	bl	8000564 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003280:	4b6b      	ldr	r3, [pc, #428]	; (8003430 <menu+0x1f80>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d113      	bne.n	80032b0 <menu+0x1e00>
			if(dilSecim == 0){
 8003288:	4b5f      	ldr	r3, [pc, #380]	; (8003408 <menu+0x1f58>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003290:	4a68      	ldr	r2, [pc, #416]	; (8003434 <menu+0x1f84>)
 8003292:	2101      	movs	r1, #1
 8003294:	2002      	movs	r0, #2
 8003296:	f7fd f965 	bl	8000564 <lcd_print>
 800329a:	e038      	b.n	800330e <menu+0x1e5e>
			} else if(dilSecim == 1){
 800329c:	4b5a      	ldr	r3, [pc, #360]	; (8003408 <menu+0x1f58>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d134      	bne.n	800330e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80032a4:	4a64      	ldr	r2, [pc, #400]	; (8003438 <menu+0x1f88>)
 80032a6:	2101      	movs	r1, #1
 80032a8:	2002      	movs	r0, #2
 80032aa:	f7fd f95b 	bl	8000564 <lcd_print>
 80032ae:	e02e      	b.n	800330e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032b0:	4b5f      	ldr	r3, [pc, #380]	; (8003430 <menu+0x1f80>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d113      	bne.n	80032e0 <menu+0x1e30>
			if(dilSecim == 0){
 80032b8:	4b53      	ldr	r3, [pc, #332]	; (8003408 <menu+0x1f58>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80032c0:	4a5e      	ldr	r2, [pc, #376]	; (800343c <menu+0x1f8c>)
 80032c2:	2101      	movs	r1, #1
 80032c4:	2002      	movs	r0, #2
 80032c6:	f7fd f94d 	bl	8000564 <lcd_print>
 80032ca:	e020      	b.n	800330e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80032cc:	4b4e      	ldr	r3, [pc, #312]	; (8003408 <menu+0x1f58>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d11c      	bne.n	800330e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80032d4:	4a5a      	ldr	r2, [pc, #360]	; (8003440 <menu+0x1f90>)
 80032d6:	2101      	movs	r1, #1
 80032d8:	2002      	movs	r0, #2
 80032da:	f7fd f943 	bl	8000564 <lcd_print>
 80032de:	e016      	b.n	800330e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80032e0:	4b53      	ldr	r3, [pc, #332]	; (8003430 <menu+0x1f80>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d112      	bne.n	800330e <menu+0x1e5e>
			if(dilSecim == 0) {
 80032e8:	4b47      	ldr	r3, [pc, #284]	; (8003408 <menu+0x1f58>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80032f0:	4a54      	ldr	r2, [pc, #336]	; (8003444 <menu+0x1f94>)
 80032f2:	2101      	movs	r1, #1
 80032f4:	2002      	movs	r0, #2
 80032f6:	f7fd f935 	bl	8000564 <lcd_print>
 80032fa:	e008      	b.n	800330e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80032fc:	4b42      	ldr	r3, [pc, #264]	; (8003408 <menu+0x1f58>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d104      	bne.n	800330e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003304:	4a50      	ldr	r2, [pc, #320]	; (8003448 <menu+0x1f98>)
 8003306:	2101      	movs	r1, #1
 8003308:	2002      	movs	r0, #2
 800330a:	f7fd f92b 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800330e:	2102      	movs	r1, #2
 8003310:	483f      	ldr	r0, [pc, #252]	; (8003410 <menu+0x1f60>)
 8003312:	f006 fa87 	bl	8009824 <HAL_GPIO_ReadPin>
 8003316:	4603      	mov	r3, r0
 8003318:	2b01      	cmp	r3, #1
 800331a:	d115      	bne.n	8003348 <menu+0x1e98>
 800331c:	4b3d      	ldr	r3, [pc, #244]	; (8003414 <menu+0x1f64>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	f083 0301 	eor.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00e      	beq.n	8003348 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800332a:	4b41      	ldr	r3, [pc, #260]	; (8003430 <menu+0x1f80>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	3301      	adds	r3, #1
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4b3f      	ldr	r3, [pc, #252]	; (8003430 <menu+0x1f80>)
 8003334:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003336:	4b3e      	ldr	r3, [pc, #248]	; (8003430 <menu+0x1f80>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d902      	bls.n	8003344 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800333e:	4b3c      	ldr	r3, [pc, #240]	; (8003430 <menu+0x1f80>)
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003344:	f002 fdf6 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003348:	2104      	movs	r1, #4
 800334a:	4831      	ldr	r0, [pc, #196]	; (8003410 <menu+0x1f60>)
 800334c:	f006 fa6a 	bl	8009824 <HAL_GPIO_ReadPin>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	d115      	bne.n	8003382 <menu+0x1ed2>
 8003356:	4b2f      	ldr	r3, [pc, #188]	; (8003414 <menu+0x1f64>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	f083 0301 	eor.w	r3, r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00e      	beq.n	8003382 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003364:	4b32      	ldr	r3, [pc, #200]	; (8003430 <menu+0x1f80>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	3b01      	subs	r3, #1
 800336a:	b2da      	uxtb	r2, r3
 800336c:	4b30      	ldr	r3, [pc, #192]	; (8003430 <menu+0x1f80>)
 800336e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003370:	4b2f      	ldr	r3, [pc, #188]	; (8003430 <menu+0x1f80>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d902      	bls.n	800337e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003378:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <menu+0x1f80>)
 800337a:	2202      	movs	r2, #2
 800337c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800337e:	f002 fdd9 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003382:	2108      	movs	r1, #8
 8003384:	4822      	ldr	r0, [pc, #136]	; (8003410 <menu+0x1f60>)
 8003386:	f006 fa4d 	bl	8009824 <HAL_GPIO_ReadPin>
 800338a:	4603      	mov	r3, r0
 800338c:	2b01      	cmp	r3, #1
 800338e:	d127      	bne.n	80033e0 <menu+0x1f30>
 8003390:	4b20      	ldr	r3, [pc, #128]	; (8003414 <menu+0x1f64>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	f083 0301 	eor.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d020      	beq.n	80033e0 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800339e:	4b24      	ldr	r3, [pc, #144]	; (8003430 <menu+0x1f80>)
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	4b1e      	ldr	r3, [pc, #120]	; (800341c <menu+0x1f6c>)
 80033a4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80033a6:	4b22      	ldr	r3, [pc, #136]	; (8003430 <menu+0x1f80>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d003      	beq.n	80033b6 <menu+0x1f06>
 80033ae:	4b20      	ldr	r3, [pc, #128]	; (8003430 <menu+0x1f80>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d106      	bne.n	80033c4 <menu+0x1f14>
				calismaSekli = 0;
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <menu+0x1f9c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80033bc:	4b23      	ldr	r3, [pc, #140]	; (800344c <menu+0x1f9c>)
 80033be:	781a      	ldrb	r2, [r3, #0]
 80033c0:	4b16      	ldr	r3, [pc, #88]	; (800341c <menu+0x1f6c>)
 80033c2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <menu+0x1f80>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d106      	bne.n	80033da <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80033cc:	4b20      	ldr	r3, [pc, #128]	; (8003450 <menu+0x1fa0>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80033d2:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <menu+0x1fa0>)
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	4b11      	ldr	r3, [pc, #68]	; (800341c <menu+0x1f6c>)
 80033d8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <menu+0x1f70>)
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80033e0:	4b10      	ldr	r3, [pc, #64]	; (8003424 <menu+0x1f74>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	f040 80d5 	bne.w	8003594 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <menu+0x1f80>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d13c      	bne.n	800346c <menu+0x1fbc>
			if(dilSecim == 0) {
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <menu+0x1f58>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d12e      	bne.n	8003458 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80033fa:	4a16      	ldr	r2, [pc, #88]	; (8003454 <menu+0x1fa4>)
 80033fc:	2101      	movs	r1, #1
 80033fe:	2001      	movs	r0, #1
 8003400:	f7fd f8b0 	bl	8000564 <lcd_print>
 8003404:	e048      	b.n	8003498 <menu+0x1fe8>
 8003406:	bf00      	nop
 8003408:	20000c2d 	.word	0x20000c2d
 800340c:	0800ced0 	.word	0x0800ced0
 8003410:	40010800 	.word	0x40010800
 8003414:	20000c3b 	.word	0x20000c3b
 8003418:	20000c1a 	.word	0x20000c1a
 800341c:	20000b3c 	.word	0x20000b3c
 8003420:	20000c38 	.word	0x20000c38
 8003424:	20000c0c 	.word	0x20000c0c
 8003428:	0800d24c 	.word	0x0800d24c
 800342c:	0800d260 	.word	0x0800d260
 8003430:	20000c1b 	.word	0x20000c1b
 8003434:	0800d274 	.word	0x0800d274
 8003438:	0800d284 	.word	0x0800d284
 800343c:	0800d294 	.word	0x0800d294
 8003440:	0800d2a4 	.word	0x0800d2a4
 8003444:	0800ce5c 	.word	0x0800ce5c
 8003448:	0800ce70 	.word	0x0800ce70
 800344c:	20000c0d 	.word	0x20000c0d
 8003450:	20000c1e 	.word	0x20000c1e
 8003454:	0800d2b4 	.word	0x0800d2b4
			} else if(dilSecim == 1) {
 8003458:	4b7b      	ldr	r3, [pc, #492]	; (8003648 <menu+0x2198>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d11b      	bne.n	8003498 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003460:	4a7a      	ldr	r2, [pc, #488]	; (800364c <menu+0x219c>)
 8003462:	2101      	movs	r1, #1
 8003464:	2001      	movs	r0, #1
 8003466:	f7fd f87d 	bl	8000564 <lcd_print>
 800346a:	e015      	b.n	8003498 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800346c:	4b78      	ldr	r3, [pc, #480]	; (8003650 <menu+0x21a0>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d111      	bne.n	8003498 <menu+0x1fe8>
			if(dilSecim == 0){
 8003474:	4b74      	ldr	r3, [pc, #464]	; (8003648 <menu+0x2198>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d104      	bne.n	8003486 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800347c:	4a75      	ldr	r2, [pc, #468]	; (8003654 <menu+0x21a4>)
 800347e:	2101      	movs	r1, #1
 8003480:	2001      	movs	r0, #1
 8003482:	f7fd f86f 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1){
 8003486:	4b70      	ldr	r3, [pc, #448]	; (8003648 <menu+0x2198>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d104      	bne.n	8003498 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800348e:	4a72      	ldr	r2, [pc, #456]	; (8003658 <menu+0x21a8>)
 8003490:	2101      	movs	r1, #1
 8003492:	2001      	movs	r0, #1
 8003494:	f7fd f866 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003498:	4b70      	ldr	r3, [pc, #448]	; (800365c <menu+0x21ac>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d113      	bne.n	80034c8 <menu+0x2018>
			if(dilSecim == 0) {
 80034a0:	4b69      	ldr	r3, [pc, #420]	; (8003648 <menu+0x2198>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80034a8:	4a6d      	ldr	r2, [pc, #436]	; (8003660 <menu+0x21b0>)
 80034aa:	2101      	movs	r1, #1
 80034ac:	2002      	movs	r0, #2
 80034ae:	f7fd f859 	bl	8000564 <lcd_print>
 80034b2:	e020      	b.n	80034f6 <menu+0x2046>
			} else if(dilSecim == 1){
 80034b4:	4b64      	ldr	r3, [pc, #400]	; (8003648 <menu+0x2198>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d11c      	bne.n	80034f6 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80034bc:	4a69      	ldr	r2, [pc, #420]	; (8003664 <menu+0x21b4>)
 80034be:	2101      	movs	r1, #1
 80034c0:	2002      	movs	r0, #2
 80034c2:	f7fd f84f 	bl	8000564 <lcd_print>
 80034c6:	e016      	b.n	80034f6 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80034c8:	4b64      	ldr	r3, [pc, #400]	; (800365c <menu+0x21ac>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d112      	bne.n	80034f6 <menu+0x2046>
			if(dilSecim == 0){
 80034d0:	4b5d      	ldr	r3, [pc, #372]	; (8003648 <menu+0x2198>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d105      	bne.n	80034e4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80034d8:	4a63      	ldr	r2, [pc, #396]	; (8003668 <menu+0x21b8>)
 80034da:	2101      	movs	r1, #1
 80034dc:	2002      	movs	r0, #2
 80034de:	f7fd f841 	bl	8000564 <lcd_print>
 80034e2:	e008      	b.n	80034f6 <menu+0x2046>
			} else if(dilSecim == 1){
 80034e4:	4b58      	ldr	r3, [pc, #352]	; (8003648 <menu+0x2198>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d104      	bne.n	80034f6 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80034ec:	4a5f      	ldr	r2, [pc, #380]	; (800366c <menu+0x21bc>)
 80034ee:	2101      	movs	r1, #1
 80034f0:	2002      	movs	r0, #2
 80034f2:	f7fd f837 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034f6:	2102      	movs	r1, #2
 80034f8:	485d      	ldr	r0, [pc, #372]	; (8003670 <menu+0x21c0>)
 80034fa:	f006 f993 	bl	8009824 <HAL_GPIO_ReadPin>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b01      	cmp	r3, #1
 8003502:	d115      	bne.n	8003530 <menu+0x2080>
 8003504:	4b5b      	ldr	r3, [pc, #364]	; (8003674 <menu+0x21c4>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f083 0301 	eor.w	r3, r3, #1
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00e      	beq.n	8003530 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003512:	4b52      	ldr	r3, [pc, #328]	; (800365c <menu+0x21ac>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4b50      	ldr	r3, [pc, #320]	; (800365c <menu+0x21ac>)
 800351c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800351e:	4b4f      	ldr	r3, [pc, #316]	; (800365c <menu+0x21ac>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d902      	bls.n	800352c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003526:	4b4d      	ldr	r3, [pc, #308]	; (800365c <menu+0x21ac>)
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800352c:	f002 fd02 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003530:	2104      	movs	r1, #4
 8003532:	484f      	ldr	r0, [pc, #316]	; (8003670 <menu+0x21c0>)
 8003534:	f006 f976 	bl	8009824 <HAL_GPIO_ReadPin>
 8003538:	4603      	mov	r3, r0
 800353a:	2b01      	cmp	r3, #1
 800353c:	d115      	bne.n	800356a <menu+0x20ba>
 800353e:	4b4d      	ldr	r3, [pc, #308]	; (8003674 <menu+0x21c4>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	f083 0301 	eor.w	r3, r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00e      	beq.n	800356a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800354c:	4b43      	ldr	r3, [pc, #268]	; (800365c <menu+0x21ac>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	3b01      	subs	r3, #1
 8003552:	b2da      	uxtb	r2, r3
 8003554:	4b41      	ldr	r3, [pc, #260]	; (800365c <menu+0x21ac>)
 8003556:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003558:	4b40      	ldr	r3, [pc, #256]	; (800365c <menu+0x21ac>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003560:	4b3e      	ldr	r3, [pc, #248]	; (800365c <menu+0x21ac>)
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003566:	f002 fce5 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800356a:	2108      	movs	r1, #8
 800356c:	4840      	ldr	r0, [pc, #256]	; (8003670 <menu+0x21c0>)
 800356e:	f006 f959 	bl	8009824 <HAL_GPIO_ReadPin>
 8003572:	4603      	mov	r3, r0
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10d      	bne.n	8003594 <menu+0x20e4>
 8003578:	4b3e      	ldr	r3, [pc, #248]	; (8003674 <menu+0x21c4>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	f083 0301 	eor.w	r3, r3, #1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d006      	beq.n	8003594 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003586:	4b35      	ldr	r3, [pc, #212]	; (800365c <menu+0x21ac>)
 8003588:	781a      	ldrb	r2, [r3, #0]
 800358a:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <menu+0x21c8>)
 800358c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800358e:	4b3b      	ldr	r3, [pc, #236]	; (800367c <menu+0x21cc>)
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003594:	4b3a      	ldr	r3, [pc, #232]	; (8003680 <menu+0x21d0>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b13      	cmp	r3, #19
 800359a:	f040 80d5 	bne.w	8003748 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800359e:	4b2c      	ldr	r3, [pc, #176]	; (8003650 <menu+0x21a0>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d113      	bne.n	80035ce <menu+0x211e>
			if(dilSecim == 0) {
 80035a6:	4b28      	ldr	r3, [pc, #160]	; (8003648 <menu+0x2198>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d105      	bne.n	80035ba <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80035ae:	4a35      	ldr	r2, [pc, #212]	; (8003684 <menu+0x21d4>)
 80035b0:	2101      	movs	r1, #1
 80035b2:	2001      	movs	r0, #1
 80035b4:	f7fc ffd6 	bl	8000564 <lcd_print>
 80035b8:	e01f      	b.n	80035fa <menu+0x214a>
			} else if(dilSecim == 1) {
 80035ba:	4b23      	ldr	r3, [pc, #140]	; (8003648 <menu+0x2198>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d11b      	bne.n	80035fa <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80035c2:	4a31      	ldr	r2, [pc, #196]	; (8003688 <menu+0x21d8>)
 80035c4:	2101      	movs	r1, #1
 80035c6:	2001      	movs	r0, #1
 80035c8:	f7fc ffcc 	bl	8000564 <lcd_print>
 80035cc:	e015      	b.n	80035fa <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80035ce:	4b20      	ldr	r3, [pc, #128]	; (8003650 <menu+0x21a0>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d111      	bne.n	80035fa <menu+0x214a>
			if(dilSecim == 0) {
 80035d6:	4b1c      	ldr	r3, [pc, #112]	; (8003648 <menu+0x2198>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d104      	bne.n	80035e8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80035de:	4a2b      	ldr	r2, [pc, #172]	; (800368c <menu+0x21dc>)
 80035e0:	2101      	movs	r1, #1
 80035e2:	2001      	movs	r0, #1
 80035e4:	f7fc ffbe 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 80035e8:	4b17      	ldr	r3, [pc, #92]	; (8003648 <menu+0x2198>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d104      	bne.n	80035fa <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80035f0:	4a27      	ldr	r2, [pc, #156]	; (8003690 <menu+0x21e0>)
 80035f2:	2101      	movs	r1, #1
 80035f4:	2001      	movs	r0, #1
 80035f6:	f7fc ffb5 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80035fa:	4b26      	ldr	r3, [pc, #152]	; (8003694 <menu+0x21e4>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d113      	bne.n	800362a <menu+0x217a>
			if(dilSecim == 0) {
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <menu+0x2198>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d105      	bne.n	8003616 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800360a:	4a15      	ldr	r2, [pc, #84]	; (8003660 <menu+0x21b0>)
 800360c:	2101      	movs	r1, #1
 800360e:	2002      	movs	r0, #2
 8003610:	f7fc ffa8 	bl	8000564 <lcd_print>
 8003614:	e049      	b.n	80036aa <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <menu+0x2198>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d145      	bne.n	80036aa <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800361e:	4a11      	ldr	r2, [pc, #68]	; (8003664 <menu+0x21b4>)
 8003620:	2101      	movs	r1, #1
 8003622:	2002      	movs	r0, #2
 8003624:	f7fc ff9e 	bl	8000564 <lcd_print>
 8003628:	e03f      	b.n	80036aa <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800362a:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <menu+0x21e4>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d13b      	bne.n	80036aa <menu+0x21fa>
			if(dilSecim == 0) {
 8003632:	4b05      	ldr	r3, [pc, #20]	; (8003648 <menu+0x2198>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d12e      	bne.n	8003698 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800363a:	4a0b      	ldr	r2, [pc, #44]	; (8003668 <menu+0x21b8>)
 800363c:	2101      	movs	r1, #1
 800363e:	2002      	movs	r0, #2
 8003640:	f7fc ff90 	bl	8000564 <lcd_print>
 8003644:	e031      	b.n	80036aa <menu+0x21fa>
 8003646:	bf00      	nop
 8003648:	20000c2d 	.word	0x20000c2d
 800364c:	0800d2c8 	.word	0x0800d2c8
 8003650:	20000c1b 	.word	0x20000c1b
 8003654:	0800d2d8 	.word	0x0800d2d8
 8003658:	0800d2ec 	.word	0x0800d2ec
 800365c:	20000c1c 	.word	0x20000c1c
 8003660:	0800ce5c 	.word	0x0800ce5c
 8003664:	0800ce70 	.word	0x0800ce70
 8003668:	0800cebc 	.word	0x0800cebc
 800366c:	0800ced0 	.word	0x0800ced0
 8003670:	40010800 	.word	0x40010800
 8003674:	20000c3b 	.word	0x20000c3b
 8003678:	20000b3c 	.word	0x20000b3c
 800367c:	20000c38 	.word	0x20000c38
 8003680:	20000c0c 	.word	0x20000c0c
 8003684:	0800d300 	.word	0x0800d300
 8003688:	0800d314 	.word	0x0800d314
 800368c:	0800d328 	.word	0x0800d328
 8003690:	0800d33c 	.word	0x0800d33c
 8003694:	20000c1d 	.word	0x20000c1d
			} else if(dilSecim == 1) {
 8003698:	4b90      	ldr	r3, [pc, #576]	; (80038dc <menu+0x242c>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d104      	bne.n	80036aa <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80036a0:	4a8f      	ldr	r2, [pc, #572]	; (80038e0 <menu+0x2430>)
 80036a2:	2101      	movs	r1, #1
 80036a4:	2002      	movs	r0, #2
 80036a6:	f7fc ff5d 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036aa:	2102      	movs	r1, #2
 80036ac:	488d      	ldr	r0, [pc, #564]	; (80038e4 <menu+0x2434>)
 80036ae:	f006 f8b9 	bl	8009824 <HAL_GPIO_ReadPin>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d115      	bne.n	80036e4 <menu+0x2234>
 80036b8:	4b8b      	ldr	r3, [pc, #556]	; (80038e8 <menu+0x2438>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	f083 0301 	eor.w	r3, r3, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00e      	beq.n	80036e4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80036c6:	4b89      	ldr	r3, [pc, #548]	; (80038ec <menu+0x243c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	4b87      	ldr	r3, [pc, #540]	; (80038ec <menu+0x243c>)
 80036d0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80036d2:	4b86      	ldr	r3, [pc, #536]	; (80038ec <menu+0x243c>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d902      	bls.n	80036e0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80036da:	4b84      	ldr	r3, [pc, #528]	; (80038ec <menu+0x243c>)
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036e0:	f002 fc28 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036e4:	2104      	movs	r1, #4
 80036e6:	487f      	ldr	r0, [pc, #508]	; (80038e4 <menu+0x2434>)
 80036e8:	f006 f89c 	bl	8009824 <HAL_GPIO_ReadPin>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d115      	bne.n	800371e <menu+0x226e>
 80036f2:	4b7d      	ldr	r3, [pc, #500]	; (80038e8 <menu+0x2438>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	f083 0301 	eor.w	r3, r3, #1
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003700:	4b7a      	ldr	r3, [pc, #488]	; (80038ec <menu+0x243c>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	3b01      	subs	r3, #1
 8003706:	b2da      	uxtb	r2, r3
 8003708:	4b78      	ldr	r3, [pc, #480]	; (80038ec <menu+0x243c>)
 800370a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800370c:	4b77      	ldr	r3, [pc, #476]	; (80038ec <menu+0x243c>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003714:	4b75      	ldr	r3, [pc, #468]	; (80038ec <menu+0x243c>)
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800371a:	f002 fc0b 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800371e:	2108      	movs	r1, #8
 8003720:	4870      	ldr	r0, [pc, #448]	; (80038e4 <menu+0x2434>)
 8003722:	f006 f87f 	bl	8009824 <HAL_GPIO_ReadPin>
 8003726:	4603      	mov	r3, r0
 8003728:	2b01      	cmp	r3, #1
 800372a:	d10d      	bne.n	8003748 <menu+0x2298>
 800372c:	4b6e      	ldr	r3, [pc, #440]	; (80038e8 <menu+0x2438>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	f083 0301 	eor.w	r3, r3, #1
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d006      	beq.n	8003748 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800373a:	4b6c      	ldr	r3, [pc, #432]	; (80038ec <menu+0x243c>)
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	4b6c      	ldr	r3, [pc, #432]	; (80038f0 <menu+0x2440>)
 8003740:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003742:	4b6c      	ldr	r3, [pc, #432]	; (80038f4 <menu+0x2444>)
 8003744:	2201      	movs	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003748:	4b6b      	ldr	r3, [pc, #428]	; (80038f8 <menu+0x2448>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b14      	cmp	r3, #20
 800374e:	f040 80b5 	bne.w	80038bc <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003752:	4b6a      	ldr	r3, [pc, #424]	; (80038fc <menu+0x244c>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d113      	bne.n	8003782 <menu+0x22d2>
			if(dilSecim == 0) {
 800375a:	4b60      	ldr	r3, [pc, #384]	; (80038dc <menu+0x242c>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d105      	bne.n	800376e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003762:	4a67      	ldr	r2, [pc, #412]	; (8003900 <menu+0x2450>)
 8003764:	2101      	movs	r1, #1
 8003766:	2001      	movs	r0, #1
 8003768:	f7fc fefc 	bl	8000564 <lcd_print>
 800376c:	e020      	b.n	80037b0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800376e:	4b5b      	ldr	r3, [pc, #364]	; (80038dc <menu+0x242c>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d11c      	bne.n	80037b0 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003776:	4a63      	ldr	r2, [pc, #396]	; (8003904 <menu+0x2454>)
 8003778:	2101      	movs	r1, #1
 800377a:	2001      	movs	r0, #1
 800377c:	f7fc fef2 	bl	8000564 <lcd_print>
 8003780:	e016      	b.n	80037b0 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003782:	4b5e      	ldr	r3, [pc, #376]	; (80038fc <menu+0x244c>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d112      	bne.n	80037b0 <menu+0x2300>
			if(dilSecim == 0) {
 800378a:	4b54      	ldr	r3, [pc, #336]	; (80038dc <menu+0x242c>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003792:	4a5d      	ldr	r2, [pc, #372]	; (8003908 <menu+0x2458>)
 8003794:	2101      	movs	r1, #1
 8003796:	2001      	movs	r0, #1
 8003798:	f7fc fee4 	bl	8000564 <lcd_print>
 800379c:	e008      	b.n	80037b0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800379e:	4b4f      	ldr	r3, [pc, #316]	; (80038dc <menu+0x242c>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d104      	bne.n	80037b0 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80037a6:	4a59      	ldr	r2, [pc, #356]	; (800390c <menu+0x245c>)
 80037a8:	2101      	movs	r1, #1
 80037aa:	2001      	movs	r0, #1
 80037ac:	f7fc feda 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80037b0:	4b57      	ldr	r3, [pc, #348]	; (8003910 <menu+0x2460>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d113      	bne.n	80037e0 <menu+0x2330>
			if(dilSecim == 0) {
 80037b8:	4b48      	ldr	r3, [pc, #288]	; (80038dc <menu+0x242c>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80037c0:	4a54      	ldr	r2, [pc, #336]	; (8003914 <menu+0x2464>)
 80037c2:	2101      	movs	r1, #1
 80037c4:	2002      	movs	r0, #2
 80037c6:	f7fc fecd 	bl	8000564 <lcd_print>
 80037ca:	e020      	b.n	800380e <menu+0x235e>
			} else if(dilSecim == 1) {
 80037cc:	4b43      	ldr	r3, [pc, #268]	; (80038dc <menu+0x242c>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d11c      	bne.n	800380e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80037d4:	4a50      	ldr	r2, [pc, #320]	; (8003918 <menu+0x2468>)
 80037d6:	2101      	movs	r1, #1
 80037d8:	2002      	movs	r0, #2
 80037da:	f7fc fec3 	bl	8000564 <lcd_print>
 80037de:	e016      	b.n	800380e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80037e0:	4b4b      	ldr	r3, [pc, #300]	; (8003910 <menu+0x2460>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d112      	bne.n	800380e <menu+0x235e>
			if(dilSecim == 0) {
 80037e8:	4b3c      	ldr	r3, [pc, #240]	; (80038dc <menu+0x242c>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80037f0:	4a4a      	ldr	r2, [pc, #296]	; (800391c <menu+0x246c>)
 80037f2:	2101      	movs	r1, #1
 80037f4:	2002      	movs	r0, #2
 80037f6:	f7fc feb5 	bl	8000564 <lcd_print>
 80037fa:	e008      	b.n	800380e <menu+0x235e>
			} else if(dilSecim == 1) {
 80037fc:	4b37      	ldr	r3, [pc, #220]	; (80038dc <menu+0x242c>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d104      	bne.n	800380e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003804:	4a46      	ldr	r2, [pc, #280]	; (8003920 <menu+0x2470>)
 8003806:	2101      	movs	r1, #1
 8003808:	2002      	movs	r0, #2
 800380a:	f7fc feab 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800380e:	2102      	movs	r1, #2
 8003810:	4834      	ldr	r0, [pc, #208]	; (80038e4 <menu+0x2434>)
 8003812:	f006 f807 	bl	8009824 <HAL_GPIO_ReadPin>
 8003816:	4603      	mov	r3, r0
 8003818:	2b01      	cmp	r3, #1
 800381a:	d119      	bne.n	8003850 <menu+0x23a0>
 800381c:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <menu+0x2438>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	f083 0301 	eor.w	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d012      	beq.n	8003850 <menu+0x23a0>
 800382a:	4b34      	ldr	r3, [pc, #208]	; (80038fc <menu+0x244c>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d10e      	bne.n	8003850 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003832:	4b37      	ldr	r3, [pc, #220]	; (8003910 <menu+0x2460>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	3301      	adds	r3, #1
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4b35      	ldr	r3, [pc, #212]	; (8003910 <menu+0x2460>)
 800383c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800383e:	4b34      	ldr	r3, [pc, #208]	; (8003910 <menu+0x2460>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d902      	bls.n	800384c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003846:	4b32      	ldr	r3, [pc, #200]	; (8003910 <menu+0x2460>)
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800384c:	f002 fb72 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003850:	2104      	movs	r1, #4
 8003852:	4824      	ldr	r0, [pc, #144]	; (80038e4 <menu+0x2434>)
 8003854:	f005 ffe6 	bl	8009824 <HAL_GPIO_ReadPin>
 8003858:	4603      	mov	r3, r0
 800385a:	2b01      	cmp	r3, #1
 800385c:	d119      	bne.n	8003892 <menu+0x23e2>
 800385e:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <menu+0x2438>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	f083 0301 	eor.w	r3, r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d012      	beq.n	8003892 <menu+0x23e2>
 800386c:	4b23      	ldr	r3, [pc, #140]	; (80038fc <menu+0x244c>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d10e      	bne.n	8003892 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003874:	4b26      	ldr	r3, [pc, #152]	; (8003910 <menu+0x2460>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	3b01      	subs	r3, #1
 800387a:	b2da      	uxtb	r2, r3
 800387c:	4b24      	ldr	r3, [pc, #144]	; (8003910 <menu+0x2460>)
 800387e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003880:	4b23      	ldr	r3, [pc, #140]	; (8003910 <menu+0x2460>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <menu+0x2460>)
 800388a:	2201      	movs	r2, #1
 800388c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800388e:	f002 fb51 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003892:	2108      	movs	r1, #8
 8003894:	4813      	ldr	r0, [pc, #76]	; (80038e4 <menu+0x2434>)
 8003896:	f005 ffc5 	bl	8009824 <HAL_GPIO_ReadPin>
 800389a:	4603      	mov	r3, r0
 800389c:	2b01      	cmp	r3, #1
 800389e:	d10d      	bne.n	80038bc <menu+0x240c>
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <menu+0x2438>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	f083 0301 	eor.w	r3, r3, #1
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80038ae:	4b18      	ldr	r3, [pc, #96]	; (8003910 <menu+0x2460>)
 80038b0:	781a      	ldrb	r2, [r3, #0]
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <menu+0x2440>)
 80038b4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80038b6:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <menu+0x2444>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80038bc:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <menu+0x2448>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b15      	cmp	r3, #21
 80038c2:	f040 80c2 	bne.w	8003a4a <menu+0x259a>
		if(dilSecim == 0) {
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <menu+0x242c>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d12c      	bne.n	8003928 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80038ce:	4a15      	ldr	r2, [pc, #84]	; (8003924 <menu+0x2474>)
 80038d0:	2101      	movs	r1, #1
 80038d2:	2001      	movs	r0, #1
 80038d4:	f7fc fe46 	bl	8000564 <lcd_print>
 80038d8:	e02f      	b.n	800393a <menu+0x248a>
 80038da:	bf00      	nop
 80038dc:	20000c2d 	.word	0x20000c2d
 80038e0:	0800ced0 	.word	0x0800ced0
 80038e4:	40010800 	.word	0x40010800
 80038e8:	20000c3b 	.word	0x20000c3b
 80038ec:	20000c1d 	.word	0x20000c1d
 80038f0:	20000b3c 	.word	0x20000b3c
 80038f4:	20000c38 	.word	0x20000c38
 80038f8:	20000c0c 	.word	0x20000c0c
 80038fc:	20000c1b 	.word	0x20000c1b
 8003900:	0800d350 	.word	0x0800d350
 8003904:	0800d364 	.word	0x0800d364
 8003908:	0800d378 	.word	0x0800d378
 800390c:	0800d38c 	.word	0x0800d38c
 8003910:	20000c1e 	.word	0x20000c1e
 8003914:	0800d3a0 	.word	0x0800d3a0
 8003918:	0800d3b4 	.word	0x0800d3b4
 800391c:	0800d3c4 	.word	0x0800d3c4
 8003920:	0800d3d8 	.word	0x0800d3d8
 8003924:	0800d3e8 	.word	0x0800d3e8
		} else if(dilSecim == 1) {
 8003928:	4b9c      	ldr	r3, [pc, #624]	; (8003b9c <menu+0x26ec>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d104      	bne.n	800393a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003930:	4a9b      	ldr	r2, [pc, #620]	; (8003ba0 <menu+0x26f0>)
 8003932:	2101      	movs	r1, #1
 8003934:	2001      	movs	r0, #1
 8003936:	f7fc fe15 	bl	8000564 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800393a:	4b9a      	ldr	r3, [pc, #616]	; (8003ba4 <menu+0x26f4>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d112      	bne.n	8003968 <menu+0x24b8>
			if(dilSecim == 0) {
 8003942:	4b96      	ldr	r3, [pc, #600]	; (8003b9c <menu+0x26ec>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d104      	bne.n	8003954 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800394a:	4a97      	ldr	r2, [pc, #604]	; (8003ba8 <menu+0x26f8>)
 800394c:	2101      	movs	r1, #1
 800394e:	2002      	movs	r0, #2
 8003950:	f7fc fe08 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 8003954:	4b91      	ldr	r3, [pc, #580]	; (8003b9c <menu+0x26ec>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d11c      	bne.n	8003996 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 800395c:	4a93      	ldr	r2, [pc, #588]	; (8003bac <menu+0x26fc>)
 800395e:	2101      	movs	r1, #1
 8003960:	2002      	movs	r0, #2
 8003962:	f7fc fdff 	bl	8000564 <lcd_print>
 8003966:	e016      	b.n	8003996 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003968:	4b8e      	ldr	r3, [pc, #568]	; (8003ba4 <menu+0x26f4>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d112      	bne.n	8003996 <menu+0x24e6>
			if(dilSecim == 0) {
 8003970:	4b8a      	ldr	r3, [pc, #552]	; (8003b9c <menu+0x26ec>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003978:	4a8d      	ldr	r2, [pc, #564]	; (8003bb0 <menu+0x2700>)
 800397a:	2101      	movs	r1, #1
 800397c:	2002      	movs	r0, #2
 800397e:	f7fc fdf1 	bl	8000564 <lcd_print>
 8003982:	e008      	b.n	8003996 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003984:	4b85      	ldr	r3, [pc, #532]	; (8003b9c <menu+0x26ec>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d104      	bne.n	8003996 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 800398c:	4a89      	ldr	r2, [pc, #548]	; (8003bb4 <menu+0x2704>)
 800398e:	2101      	movs	r1, #1
 8003990:	2002      	movs	r0, #2
 8003992:	f7fc fde7 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003996:	2102      	movs	r1, #2
 8003998:	4887      	ldr	r0, [pc, #540]	; (8003bb8 <menu+0x2708>)
 800399a:	f005 ff43 	bl	8009824 <HAL_GPIO_ReadPin>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d115      	bne.n	80039d0 <menu+0x2520>
 80039a4:	4b85      	ldr	r3, [pc, #532]	; (8003bbc <menu+0x270c>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	f083 0301 	eor.w	r3, r3, #1
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00e      	beq.n	80039d0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80039b2:	4b7c      	ldr	r3, [pc, #496]	; (8003ba4 <menu+0x26f4>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	3301      	adds	r3, #1
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	4b7a      	ldr	r3, [pc, #488]	; (8003ba4 <menu+0x26f4>)
 80039bc:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80039be:	4b79      	ldr	r3, [pc, #484]	; (8003ba4 <menu+0x26f4>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d902      	bls.n	80039cc <menu+0x251c>
				platformSilindirTipi = 0;
 80039c6:	4b77      	ldr	r3, [pc, #476]	; (8003ba4 <menu+0x26f4>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039cc:	f002 fab2 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039d0:	2104      	movs	r1, #4
 80039d2:	4879      	ldr	r0, [pc, #484]	; (8003bb8 <menu+0x2708>)
 80039d4:	f005 ff26 	bl	8009824 <HAL_GPIO_ReadPin>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d115      	bne.n	8003a0a <menu+0x255a>
 80039de:	4b77      	ldr	r3, [pc, #476]	; (8003bbc <menu+0x270c>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	f083 0301 	eor.w	r3, r3, #1
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00e      	beq.n	8003a0a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80039ec:	4b6d      	ldr	r3, [pc, #436]	; (8003ba4 <menu+0x26f4>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	4b6b      	ldr	r3, [pc, #428]	; (8003ba4 <menu+0x26f4>)
 80039f6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80039f8:	4b6a      	ldr	r3, [pc, #424]	; (8003ba4 <menu+0x26f4>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003a00:	4b68      	ldr	r3, [pc, #416]	; (8003ba4 <menu+0x26f4>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a06:	f002 fa95 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a0a:	2108      	movs	r1, #8
 8003a0c:	486a      	ldr	r0, [pc, #424]	; (8003bb8 <menu+0x2708>)
 8003a0e:	f005 ff09 	bl	8009824 <HAL_GPIO_ReadPin>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d118      	bne.n	8003a4a <menu+0x259a>
 8003a18:	4b68      	ldr	r3, [pc, #416]	; (8003bbc <menu+0x270c>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	f083 0301 	eor.w	r3, r3, #1
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d011      	beq.n	8003a4a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003a26:	4b5f      	ldr	r3, [pc, #380]	; (8003ba4 <menu+0x26f4>)
 8003a28:	781a      	ldrb	r2, [r3, #0]
 8003a2a:	4b65      	ldr	r3, [pc, #404]	; (8003bc0 <menu+0x2710>)
 8003a2c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003a2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ba4 <menu+0x26f4>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d106      	bne.n	8003a44 <menu+0x2594>
				altLimit = 1;
 8003a36:	4b63      	ldr	r3, [pc, #396]	; (8003bc4 <menu+0x2714>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003a3c:	4b61      	ldr	r3, [pc, #388]	; (8003bc4 <menu+0x2714>)
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	4b5f      	ldr	r3, [pc, #380]	; (8003bc0 <menu+0x2710>)
 8003a42:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003a44:	4b60      	ldr	r3, [pc, #384]	; (8003bc8 <menu+0x2718>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003a4a:	4b60      	ldr	r3, [pc, #384]	; (8003bcc <menu+0x271c>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b16      	cmp	r3, #22
 8003a50:	f040 8081 	bne.w	8003b56 <menu+0x26a6>
		if(dilSecim == 0) {
 8003a54:	4b51      	ldr	r3, [pc, #324]	; (8003b9c <menu+0x26ec>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d105      	bne.n	8003a68 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003a5c:	4a5c      	ldr	r2, [pc, #368]	; (8003bd0 <menu+0x2720>)
 8003a5e:	2101      	movs	r1, #1
 8003a60:	2001      	movs	r0, #1
 8003a62:	f7fc fd7f 	bl	8000564 <lcd_print>
 8003a66:	e008      	b.n	8003a7a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003a68:	4b4c      	ldr	r3, [pc, #304]	; (8003b9c <menu+0x26ec>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d104      	bne.n	8003a7a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003a70:	4a58      	ldr	r2, [pc, #352]	; (8003bd4 <menu+0x2724>)
 8003a72:	2101      	movs	r1, #1
 8003a74:	2001      	movs	r0, #1
 8003a76:	f7fc fd75 	bl	8000564 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a7a:	4b48      	ldr	r3, [pc, #288]	; (8003b9c <menu+0x26ec>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a82:	4a55      	ldr	r2, [pc, #340]	; (8003bd8 <menu+0x2728>)
 8003a84:	2101      	movs	r1, #1
 8003a86:	2002      	movs	r0, #2
 8003a88:	f7fc fd6c 	bl	8000564 <lcd_print>
 8003a8c:	e008      	b.n	8003aa0 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003a8e:	4b43      	ldr	r3, [pc, #268]	; (8003b9c <menu+0x26ec>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d104      	bne.n	8003aa0 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003a96:	4a51      	ldr	r2, [pc, #324]	; (8003bdc <menu+0x272c>)
 8003a98:	2101      	movs	r1, #1
 8003a9a:	2002      	movs	r0, #2
 8003a9c:	f7fc fd62 	bl	8000564 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003aa0:	4b4f      	ldr	r3, [pc, #316]	; (8003be0 <menu+0x2730>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	220a      	movs	r2, #10
 8003aa6:	494f      	ldr	r1, [pc, #316]	; (8003be4 <menu+0x2734>)
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f008 feb1 	bl	800c810 <itoa>
		lcd_print(2,16,snum);
 8003aae:	4a4d      	ldr	r2, [pc, #308]	; (8003be4 <menu+0x2734>)
 8003ab0:	2110      	movs	r1, #16
 8003ab2:	2002      	movs	r0, #2
 8003ab4:	f7fc fd56 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ab8:	2102      	movs	r1, #2
 8003aba:	483f      	ldr	r0, [pc, #252]	; (8003bb8 <menu+0x2708>)
 8003abc:	f005 feb2 	bl	8009824 <HAL_GPIO_ReadPin>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d115      	bne.n	8003af2 <menu+0x2642>
 8003ac6:	4b3d      	ldr	r3, [pc, #244]	; (8003bbc <menu+0x270c>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	f083 0301 	eor.w	r3, r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00e      	beq.n	8003af2 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003ad4:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <menu+0x2730>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	4b40      	ldr	r3, [pc, #256]	; (8003be0 <menu+0x2730>)
 8003ade:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003ae0:	4b3f      	ldr	r3, [pc, #252]	; (8003be0 <menu+0x2730>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b05      	cmp	r3, #5
 8003ae6:	d902      	bls.n	8003aee <menu+0x263e>
				yukariValfTmr = 0;
 8003ae8:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <menu+0x2730>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003aee:	f002 fa21 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003af2:	2104      	movs	r1, #4
 8003af4:	4830      	ldr	r0, [pc, #192]	; (8003bb8 <menu+0x2708>)
 8003af6:	f005 fe95 	bl	8009824 <HAL_GPIO_ReadPin>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d115      	bne.n	8003b2c <menu+0x267c>
 8003b00:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <menu+0x270c>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	f083 0301 	eor.w	r3, r3, #1
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00e      	beq.n	8003b2c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003b0e:	4b34      	ldr	r3, [pc, #208]	; (8003be0 <menu+0x2730>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <menu+0x2730>)
 8003b18:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003b1a:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <menu+0x2730>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b06      	cmp	r3, #6
 8003b20:	d902      	bls.n	8003b28 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003b22:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <menu+0x2730>)
 8003b24:	2205      	movs	r2, #5
 8003b26:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b28:	f002 fa04 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b2c:	2108      	movs	r1, #8
 8003b2e:	4822      	ldr	r0, [pc, #136]	; (8003bb8 <menu+0x2708>)
 8003b30:	f005 fe78 	bl	8009824 <HAL_GPIO_ReadPin>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d10d      	bne.n	8003b56 <menu+0x26a6>
 8003b3a:	4b20      	ldr	r3, [pc, #128]	; (8003bbc <menu+0x270c>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	f083 0301 	eor.w	r3, r3, #1
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d006      	beq.n	8003b56 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003b48:	4b25      	ldr	r3, [pc, #148]	; (8003be0 <menu+0x2730>)
 8003b4a:	781a      	ldrb	r2, [r3, #0]
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <menu+0x2710>)
 8003b4e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <menu+0x2718>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003b56:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <menu+0x271c>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b17      	cmp	r3, #23
 8003b5c:	f040 80ac 	bne.w	8003cb8 <menu+0x2808>
		if(dilSecim == 0) {
 8003b60:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <menu+0x26ec>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d105      	bne.n	8003b74 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003b68:	4a1f      	ldr	r2, [pc, #124]	; (8003be8 <menu+0x2738>)
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f7fc fcf9 	bl	8000564 <lcd_print>
 8003b72:	e008      	b.n	8003b86 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <menu+0x26ec>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d104      	bne.n	8003b86 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003b7c:	4a1b      	ldr	r2, [pc, #108]	; (8003bec <menu+0x273c>)
 8003b7e:	2101      	movs	r1, #1
 8003b80:	2001      	movs	r0, #1
 8003b82:	f7fc fcef 	bl	8000564 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <menu+0x26ec>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d130      	bne.n	8003bf0 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b8e:	4a12      	ldr	r2, [pc, #72]	; (8003bd8 <menu+0x2728>)
 8003b90:	2101      	movs	r1, #1
 8003b92:	2002      	movs	r0, #2
 8003b94:	f7fc fce6 	bl	8000564 <lcd_print>
 8003b98:	e033      	b.n	8003c02 <menu+0x2752>
 8003b9a:	bf00      	nop
 8003b9c:	20000c2d 	.word	0x20000c2d
 8003ba0:	0800d3fc 	.word	0x0800d3fc
 8003ba4:	20000c1f 	.word	0x20000c1f
 8003ba8:	0800d3a0 	.word	0x0800d3a0
 8003bac:	0800d3b4 	.word	0x0800d3b4
 8003bb0:	0800d3c4 	.word	0x0800d3c4
 8003bb4:	0800d3d8 	.word	0x0800d3d8
 8003bb8:	40010800 	.word	0x40010800
 8003bbc:	20000c3b 	.word	0x20000c3b
 8003bc0:	20000b3c 	.word	0x20000b3c
 8003bc4:	20000c12 	.word	0x20000c12
 8003bc8:	20000c38 	.word	0x20000c38
 8003bcc:	20000c0c 	.word	0x20000c0c
 8003bd0:	0800d40c 	.word	0x0800d40c
 8003bd4:	0800d420 	.word	0x0800d420
 8003bd8:	0800d0c0 	.word	0x0800d0c0
 8003bdc:	0800d434 	.word	0x0800d434
 8003be0:	20000c20 	.word	0x20000c20
 8003be4:	20000bac 	.word	0x20000bac
 8003be8:	0800d444 	.word	0x0800d444
 8003bec:	0800d458 	.word	0x0800d458
			} else if(dilSecim == 1) {
 8003bf0:	4b98      	ldr	r3, [pc, #608]	; (8003e54 <menu+0x29a4>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d104      	bne.n	8003c02 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003bf8:	4a97      	ldr	r2, [pc, #604]	; (8003e58 <menu+0x29a8>)
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	2002      	movs	r0, #2
 8003bfe:	f7fc fcb1 	bl	8000564 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003c02:	4b96      	ldr	r3, [pc, #600]	; (8003e5c <menu+0x29ac>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	220a      	movs	r2, #10
 8003c08:	4995      	ldr	r1, [pc, #596]	; (8003e60 <menu+0x29b0>)
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f008 fe00 	bl	800c810 <itoa>
		lcd_print(2,16,snum);
 8003c10:	4a93      	ldr	r2, [pc, #588]	; (8003e60 <menu+0x29b0>)
 8003c12:	2110      	movs	r1, #16
 8003c14:	2002      	movs	r0, #2
 8003c16:	f7fc fca5 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	4891      	ldr	r0, [pc, #580]	; (8003e64 <menu+0x29b4>)
 8003c1e:	f005 fe01 	bl	8009824 <HAL_GPIO_ReadPin>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d115      	bne.n	8003c54 <menu+0x27a4>
 8003c28:	4b8f      	ldr	r3, [pc, #572]	; (8003e68 <menu+0x29b8>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	f083 0301 	eor.w	r3, r3, #1
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00e      	beq.n	8003c54 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003c36:	4b89      	ldr	r3, [pc, #548]	; (8003e5c <menu+0x29ac>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4b87      	ldr	r3, [pc, #540]	; (8003e5c <menu+0x29ac>)
 8003c40:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003c42:	4b86      	ldr	r3, [pc, #536]	; (8003e5c <menu+0x29ac>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b05      	cmp	r3, #5
 8003c48:	d902      	bls.n	8003c50 <menu+0x27a0>
				asagiValfTmr = 0;
 8003c4a:	4b84      	ldr	r3, [pc, #528]	; (8003e5c <menu+0x29ac>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c50:	f002 f970 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c54:	2104      	movs	r1, #4
 8003c56:	4883      	ldr	r0, [pc, #524]	; (8003e64 <menu+0x29b4>)
 8003c58:	f005 fde4 	bl	8009824 <HAL_GPIO_ReadPin>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d115      	bne.n	8003c8e <menu+0x27de>
 8003c62:	4b81      	ldr	r3, [pc, #516]	; (8003e68 <menu+0x29b8>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	f083 0301 	eor.w	r3, r3, #1
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00e      	beq.n	8003c8e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003c70:	4b7a      	ldr	r3, [pc, #488]	; (8003e5c <menu+0x29ac>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	4b78      	ldr	r3, [pc, #480]	; (8003e5c <menu+0x29ac>)
 8003c7a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003c7c:	4b77      	ldr	r3, [pc, #476]	; (8003e5c <menu+0x29ac>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b06      	cmp	r3, #6
 8003c82:	d902      	bls.n	8003c8a <menu+0x27da>
		   		asagiValfTmr = 5;
 8003c84:	4b75      	ldr	r3, [pc, #468]	; (8003e5c <menu+0x29ac>)
 8003c86:	2205      	movs	r2, #5
 8003c88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c8a:	f002 f953 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c8e:	2108      	movs	r1, #8
 8003c90:	4874      	ldr	r0, [pc, #464]	; (8003e64 <menu+0x29b4>)
 8003c92:	f005 fdc7 	bl	8009824 <HAL_GPIO_ReadPin>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d10d      	bne.n	8003cb8 <menu+0x2808>
 8003c9c:	4b72      	ldr	r3, [pc, #456]	; (8003e68 <menu+0x29b8>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	f083 0301 	eor.w	r3, r3, #1
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d006      	beq.n	8003cb8 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003caa:	4b6c      	ldr	r3, [pc, #432]	; (8003e5c <menu+0x29ac>)
 8003cac:	781a      	ldrb	r2, [r3, #0]
 8003cae:	4b6f      	ldr	r3, [pc, #444]	; (8003e6c <menu+0x29bc>)
 8003cb0:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003cb2:	4b6f      	ldr	r3, [pc, #444]	; (8003e70 <menu+0x29c0>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003cb8:	4b6e      	ldr	r3, [pc, #440]	; (8003e74 <menu+0x29c4>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b18      	cmp	r3, #24
 8003cbe:	f040 809d 	bne.w	8003dfc <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003cc2:	4b6d      	ldr	r3, [pc, #436]	; (8003e78 <menu+0x29c8>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d113      	bne.n	8003cf2 <menu+0x2842>
			if(dilSecim == 0) {
 8003cca:	4b62      	ldr	r3, [pc, #392]	; (8003e54 <menu+0x29a4>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d105      	bne.n	8003cde <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003cd2:	4a6a      	ldr	r2, [pc, #424]	; (8003e7c <menu+0x29cc>)
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f7fc fc44 	bl	8000564 <lcd_print>
 8003cdc:	e020      	b.n	8003d20 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003cde:	4b5d      	ldr	r3, [pc, #372]	; (8003e54 <menu+0x29a4>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d11c      	bne.n	8003d20 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003ce6:	4a66      	ldr	r2, [pc, #408]	; (8003e80 <menu+0x29d0>)
 8003ce8:	2101      	movs	r1, #1
 8003cea:	2001      	movs	r0, #1
 8003cec:	f7fc fc3a 	bl	8000564 <lcd_print>
 8003cf0:	e016      	b.n	8003d20 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003cf2:	4b61      	ldr	r3, [pc, #388]	; (8003e78 <menu+0x29c8>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d112      	bne.n	8003d20 <menu+0x2870>
			if(dilSecim == 0) {
 8003cfa:	4b56      	ldr	r3, [pc, #344]	; (8003e54 <menu+0x29a4>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d105      	bne.n	8003d0e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003d02:	4a60      	ldr	r2, [pc, #384]	; (8003e84 <menu+0x29d4>)
 8003d04:	2101      	movs	r1, #1
 8003d06:	2001      	movs	r0, #1
 8003d08:	f7fc fc2c 	bl	8000564 <lcd_print>
 8003d0c:	e008      	b.n	8003d20 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003d0e:	4b51      	ldr	r3, [pc, #324]	; (8003e54 <menu+0x29a4>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d104      	bne.n	8003d20 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003d16:	4a5c      	ldr	r2, [pc, #368]	; (8003e88 <menu+0x29d8>)
 8003d18:	2101      	movs	r1, #1
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f7fc fc22 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003d20:	4b4c      	ldr	r3, [pc, #304]	; (8003e54 <menu+0x29a4>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d105      	bne.n	8003d34 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d28:	4a58      	ldr	r2, [pc, #352]	; (8003e8c <menu+0x29dc>)
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	2002      	movs	r0, #2
 8003d2e:	f7fc fc19 	bl	8000564 <lcd_print>
 8003d32:	e008      	b.n	8003d46 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003d34:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <menu+0x29a4>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d104      	bne.n	8003d46 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003d3c:	4a46      	ldr	r2, [pc, #280]	; (8003e58 <menu+0x29a8>)
 8003d3e:	2101      	movs	r1, #1
 8003d40:	2002      	movs	r0, #2
 8003d42:	f7fc fc0f 	bl	8000564 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003d46:	4b52      	ldr	r3, [pc, #328]	; (8003e90 <menu+0x29e0>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	220a      	movs	r2, #10
 8003d4c:	4944      	ldr	r1, [pc, #272]	; (8003e60 <menu+0x29b0>)
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f008 fd5e 	bl	800c810 <itoa>
		lcd_print(2, 16, snum);
 8003d54:	4a42      	ldr	r2, [pc, #264]	; (8003e60 <menu+0x29b0>)
 8003d56:	2110      	movs	r1, #16
 8003d58:	2002      	movs	r0, #2
 8003d5a:	f7fc fc03 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d5e:	2102      	movs	r1, #2
 8003d60:	4840      	ldr	r0, [pc, #256]	; (8003e64 <menu+0x29b4>)
 8003d62:	f005 fd5f 	bl	8009824 <HAL_GPIO_ReadPin>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d115      	bne.n	8003d98 <menu+0x28e8>
 8003d6c:	4b3e      	ldr	r3, [pc, #248]	; (8003e68 <menu+0x29b8>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	f083 0301 	eor.w	r3, r3, #1
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00e      	beq.n	8003d98 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003d7a:	4b45      	ldr	r3, [pc, #276]	; (8003e90 <menu+0x29e0>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	4b43      	ldr	r3, [pc, #268]	; (8003e90 <menu+0x29e0>)
 8003d84:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003d86:	4b42      	ldr	r3, [pc, #264]	; (8003e90 <menu+0x29e0>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b05      	cmp	r3, #5
 8003d8c:	d902      	bls.n	8003d94 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003d8e:	4b40      	ldr	r3, [pc, #256]	; (8003e90 <menu+0x29e0>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d94:	f002 f8ce 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d98:	2104      	movs	r1, #4
 8003d9a:	4832      	ldr	r0, [pc, #200]	; (8003e64 <menu+0x29b4>)
 8003d9c:	f005 fd42 	bl	8009824 <HAL_GPIO_ReadPin>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d115      	bne.n	8003dd2 <menu+0x2922>
 8003da6:	4b30      	ldr	r3, [pc, #192]	; (8003e68 <menu+0x29b8>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	f083 0301 	eor.w	r3, r3, #1
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00e      	beq.n	8003dd2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003db4:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <menu+0x29e0>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	4b34      	ldr	r3, [pc, #208]	; (8003e90 <menu+0x29e0>)
 8003dbe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003dc0:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <menu+0x29e0>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b06      	cmp	r3, #6
 8003dc6:	d902      	bls.n	8003dce <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003dc8:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <menu+0x29e0>)
 8003dca:	2205      	movs	r2, #5
 8003dcc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003dce:	f002 f8b1 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dd2:	2108      	movs	r1, #8
 8003dd4:	4823      	ldr	r0, [pc, #140]	; (8003e64 <menu+0x29b4>)
 8003dd6:	f005 fd25 	bl	8009824 <HAL_GPIO_ReadPin>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d10d      	bne.n	8003dfc <menu+0x294c>
 8003de0:	4b21      	ldr	r3, [pc, #132]	; (8003e68 <menu+0x29b8>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	f083 0301 	eor.w	r3, r3, #1
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d006      	beq.n	8003dfc <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003dee:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <menu+0x29e0>)
 8003df0:	781a      	ldrb	r2, [r3, #0]
 8003df2:	4b1e      	ldr	r3, [pc, #120]	; (8003e6c <menu+0x29bc>)
 8003df4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003df6:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <menu+0x29c0>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003dfc:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <menu+0x29c4>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b19      	cmp	r3, #25
 8003e02:	f040 80c4 	bne.w	8003f8e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003e06:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <menu+0x29c8>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d113      	bne.n	8003e36 <menu+0x2986>
			if(dilSecim == 0) {
 8003e0e:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <menu+0x29a4>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d105      	bne.n	8003e22 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003e16:	4a1f      	ldr	r2, [pc, #124]	; (8003e94 <menu+0x29e4>)
 8003e18:	2101      	movs	r1, #1
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	f7fc fba2 	bl	8000564 <lcd_print>
 8003e20:	e047      	b.n	8003eb2 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003e22:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <menu+0x29a4>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d143      	bne.n	8003eb2 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003e2a:	4a1b      	ldr	r2, [pc, #108]	; (8003e98 <menu+0x29e8>)
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	2001      	movs	r0, #1
 8003e30:	f7fc fb98 	bl	8000564 <lcd_print>
 8003e34:	e03d      	b.n	8003eb2 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003e36:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <menu+0x29c8>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d139      	bne.n	8003eb2 <menu+0x2a02>
			if(dilSecim == 0) {
 8003e3e:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <menu+0x29a4>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d12c      	bne.n	8003ea0 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003e46:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <menu+0x29ec>)
 8003e48:	2101      	movs	r1, #1
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	f7fc fb8a 	bl	8000564 <lcd_print>
 8003e50:	e02f      	b.n	8003eb2 <menu+0x2a02>
 8003e52:	bf00      	nop
 8003e54:	20000c2d 	.word	0x20000c2d
 8003e58:	0800d434 	.word	0x0800d434
 8003e5c:	20000c21 	.word	0x20000c21
 8003e60:	20000bac 	.word	0x20000bac
 8003e64:	40010800 	.word	0x40010800
 8003e68:	20000c3b 	.word	0x20000c3b
 8003e6c:	20000b3c 	.word	0x20000b3c
 8003e70:	20000c38 	.word	0x20000c38
 8003e74:	20000c0c 	.word	0x20000c0c
 8003e78:	20000c1b 	.word	0x20000c1b
 8003e7c:	0800d46c 	.word	0x0800d46c
 8003e80:	0800d480 	.word	0x0800d480
 8003e84:	0800d494 	.word	0x0800d494
 8003e88:	0800d4a8 	.word	0x0800d4a8
 8003e8c:	0800d0c0 	.word	0x0800d0c0
 8003e90:	20000c22 	.word	0x20000c22
 8003e94:	0800d4bc 	.word	0x0800d4bc
 8003e98:	0800d4d0 	.word	0x0800d4d0
 8003e9c:	0800d4e4 	.word	0x0800d4e4
			} else if(dilSecim == 1) {
 8003ea0:	4b73      	ldr	r3, [pc, #460]	; (8004070 <menu+0x2bc0>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d104      	bne.n	8003eb2 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003ea8:	4a72      	ldr	r2, [pc, #456]	; (8004074 <menu+0x2bc4>)
 8003eaa:	2101      	movs	r1, #1
 8003eac:	2001      	movs	r0, #1
 8003eae:	f7fc fb59 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003eb2:	4b6f      	ldr	r3, [pc, #444]	; (8004070 <menu+0x2bc0>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d105      	bne.n	8003ec6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003eba:	4a6f      	ldr	r2, [pc, #444]	; (8004078 <menu+0x2bc8>)
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	2002      	movs	r0, #2
 8003ec0:	f7fc fb50 	bl	8000564 <lcd_print>
 8003ec4:	e008      	b.n	8003ed8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003ec6:	4b6a      	ldr	r3, [pc, #424]	; (8004070 <menu+0x2bc0>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d104      	bne.n	8003ed8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003ece:	4a6b      	ldr	r2, [pc, #428]	; (800407c <menu+0x2bcc>)
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	2002      	movs	r0, #2
 8003ed4:	f7fc fb46 	bl	8000564 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003ed8:	4b69      	ldr	r3, [pc, #420]	; (8004080 <menu+0x2bd0>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	220a      	movs	r2, #10
 8003ede:	4969      	ldr	r1, [pc, #420]	; (8004084 <menu+0x2bd4>)
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f008 fc95 	bl	800c810 <itoa>
		lcd_print(2,16,snum);
 8003ee6:	4a67      	ldr	r2, [pc, #412]	; (8004084 <menu+0x2bd4>)
 8003ee8:	2110      	movs	r1, #16
 8003eea:	2002      	movs	r0, #2
 8003eec:	f7fc fb3a 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	4865      	ldr	r0, [pc, #404]	; (8004088 <menu+0x2bd8>)
 8003ef4:	f005 fc96 	bl	8009824 <HAL_GPIO_ReadPin>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d115      	bne.n	8003f2a <menu+0x2a7a>
 8003efe:	4b63      	ldr	r3, [pc, #396]	; (800408c <menu+0x2bdc>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	f083 0301 	eor.w	r3, r3, #1
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00e      	beq.n	8003f2a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003f0c:	4b5c      	ldr	r3, [pc, #368]	; (8004080 <menu+0x2bd0>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	3301      	adds	r3, #1
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	4b5a      	ldr	r3, [pc, #360]	; (8004080 <menu+0x2bd0>)
 8003f16:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003f18:	4b59      	ldr	r3, [pc, #356]	; (8004080 <menu+0x2bd0>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b05      	cmp	r3, #5
 8003f1e:	d902      	bls.n	8003f26 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003f20:	4b57      	ldr	r3, [pc, #348]	; (8004080 <menu+0x2bd0>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f26:	f002 f805 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f2a:	2104      	movs	r1, #4
 8003f2c:	4856      	ldr	r0, [pc, #344]	; (8004088 <menu+0x2bd8>)
 8003f2e:	f005 fc79 	bl	8009824 <HAL_GPIO_ReadPin>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d115      	bne.n	8003f64 <menu+0x2ab4>
 8003f38:	4b54      	ldr	r3, [pc, #336]	; (800408c <menu+0x2bdc>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	f083 0301 	eor.w	r3, r3, #1
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00e      	beq.n	8003f64 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003f46:	4b4e      	ldr	r3, [pc, #312]	; (8004080 <menu+0x2bd0>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4b4c      	ldr	r3, [pc, #304]	; (8004080 <menu+0x2bd0>)
 8003f50:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003f52:	4b4b      	ldr	r3, [pc, #300]	; (8004080 <menu+0x2bd0>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b06      	cmp	r3, #6
 8003f58:	d902      	bls.n	8003f60 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003f5a:	4b49      	ldr	r3, [pc, #292]	; (8004080 <menu+0x2bd0>)
 8003f5c:	2205      	movs	r2, #5
 8003f5e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f60:	f001 ffe8 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f64:	2108      	movs	r1, #8
 8003f66:	4848      	ldr	r0, [pc, #288]	; (8004088 <menu+0x2bd8>)
 8003f68:	f005 fc5c 	bl	8009824 <HAL_GPIO_ReadPin>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d10d      	bne.n	8003f8e <menu+0x2ade>
 8003f72:	4b46      	ldr	r3, [pc, #280]	; (800408c <menu+0x2bdc>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	f083 0301 	eor.w	r3, r3, #1
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d006      	beq.n	8003f8e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003f80:	4b3f      	ldr	r3, [pc, #252]	; (8004080 <menu+0x2bd0>)
 8003f82:	781a      	ldrb	r2, [r3, #0]
 8003f84:	4b42      	ldr	r3, [pc, #264]	; (8004090 <menu+0x2be0>)
 8003f86:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003f88:	4b42      	ldr	r3, [pc, #264]	; (8004094 <menu+0x2be4>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003f8e:	4b42      	ldr	r3, [pc, #264]	; (8004098 <menu+0x2be8>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b1a      	cmp	r3, #26
 8003f94:	f040 80ec 	bne.w	8004170 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003f98:	4b35      	ldr	r3, [pc, #212]	; (8004070 <menu+0x2bc0>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d105      	bne.n	8003fac <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003fa0:	4a3e      	ldr	r2, [pc, #248]	; (800409c <menu+0x2bec>)
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	f7fc fadd 	bl	8000564 <lcd_print>
 8003faa:	e008      	b.n	8003fbe <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003fac:	4b30      	ldr	r3, [pc, #192]	; (8004070 <menu+0x2bc0>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d104      	bne.n	8003fbe <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003fb4:	4a3a      	ldr	r2, [pc, #232]	; (80040a0 <menu+0x2bf0>)
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	2001      	movs	r0, #1
 8003fba:	f7fc fad3 	bl	8000564 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003fbe:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <menu+0x2bf4>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b63      	cmp	r3, #99	; 0x63
 8003fc4:	d91e      	bls.n	8004004 <menu+0x2b54>
			if(dilSecim == 0) {
 8003fc6:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <menu+0x2bc0>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d104      	bne.n	8003fd8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fce:	4a2a      	ldr	r2, [pc, #168]	; (8004078 <menu+0x2bc8>)
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	2002      	movs	r0, #2
 8003fd4:	f7fc fac6 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 8003fd8:	4b25      	ldr	r3, [pc, #148]	; (8004070 <menu+0x2bc0>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d104      	bne.n	8003fea <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003fe0:	4a26      	ldr	r2, [pc, #152]	; (800407c <menu+0x2bcc>)
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	2002      	movs	r0, #2
 8003fe6:	f7fc fabd 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003fea:	4b2e      	ldr	r3, [pc, #184]	; (80040a4 <menu+0x2bf4>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	220a      	movs	r2, #10
 8003ff0:	4924      	ldr	r1, [pc, #144]	; (8004084 <menu+0x2bd4>)
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f008 fc0c 	bl	800c810 <itoa>
			lcd_print(2,14,snum);
 8003ff8:	4a22      	ldr	r2, [pc, #136]	; (8004084 <menu+0x2bd4>)
 8003ffa:	210e      	movs	r1, #14
 8003ffc:	2002      	movs	r0, #2
 8003ffe:	f7fc fab1 	bl	8000564 <lcd_print>
 8004002:	e066      	b.n	80040d2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8004004:	4b27      	ldr	r3, [pc, #156]	; (80040a4 <menu+0x2bf4>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b09      	cmp	r3, #9
 800400a:	d923      	bls.n	8004054 <menu+0x2ba4>
 800400c:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <menu+0x2bf4>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b63      	cmp	r3, #99	; 0x63
 8004012:	d81f      	bhi.n	8004054 <menu+0x2ba4>
			if(dilSecim == 0) {
 8004014:	4b16      	ldr	r3, [pc, #88]	; (8004070 <menu+0x2bc0>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d105      	bne.n	8004028 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 800401c:	4a16      	ldr	r2, [pc, #88]	; (8004078 <menu+0x2bc8>)
 800401e:	2101      	movs	r1, #1
 8004020:	2002      	movs	r0, #2
 8004022:	f7fc fa9f 	bl	8000564 <lcd_print>
 8004026:	e008      	b.n	800403a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <menu+0x2bc0>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d104      	bne.n	800403a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8004030:	4a12      	ldr	r2, [pc, #72]	; (800407c <menu+0x2bcc>)
 8004032:	2101      	movs	r1, #1
 8004034:	2002      	movs	r0, #2
 8004036:	f7fc fa95 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800403a:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <menu+0x2bf4>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	220a      	movs	r2, #10
 8004040:	4910      	ldr	r1, [pc, #64]	; (8004084 <menu+0x2bd4>)
 8004042:	4618      	mov	r0, r3
 8004044:	f008 fbe4 	bl	800c810 <itoa>
			lcd_print(2, 15, snum);
 8004048:	4a0e      	ldr	r2, [pc, #56]	; (8004084 <menu+0x2bd4>)
 800404a:	210f      	movs	r1, #15
 800404c:	2002      	movs	r0, #2
 800404e:	f7fc fa89 	bl	8000564 <lcd_print>
 8004052:	e03e      	b.n	80040d2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <menu+0x2bf4>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b09      	cmp	r3, #9
 800405a:	d83a      	bhi.n	80040d2 <menu+0x2c22>
			if(dilSecim == 0) {
 800405c:	4b04      	ldr	r3, [pc, #16]	; (8004070 <menu+0x2bc0>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d121      	bne.n	80040a8 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8004064:	4a04      	ldr	r2, [pc, #16]	; (8004078 <menu+0x2bc8>)
 8004066:	2101      	movs	r1, #1
 8004068:	2002      	movs	r0, #2
 800406a:	f7fc fa7b 	bl	8000564 <lcd_print>
 800406e:	e024      	b.n	80040ba <menu+0x2c0a>
 8004070:	20000c2d 	.word	0x20000c2d
 8004074:	0800d4f8 	.word	0x0800d4f8
 8004078:	0800d0c0 	.word	0x0800d0c0
 800407c:	0800d434 	.word	0x0800d434
 8004080:	20000c23 	.word	0x20000c23
 8004084:	20000bac 	.word	0x20000bac
 8004088:	40010800 	.word	0x40010800
 800408c:	20000c3b 	.word	0x20000c3b
 8004090:	20000b3c 	.word	0x20000b3c
 8004094:	20000c38 	.word	0x20000c38
 8004098:	20000c0c 	.word	0x20000c0c
 800409c:	0800d50c 	.word	0x0800d50c
 80040a0:	0800d520 	.word	0x0800d520
 80040a4:	20000c24 	.word	0x20000c24
			} else if(dilSecim == 1) {
 80040a8:	4b8f      	ldr	r3, [pc, #572]	; (80042e8 <menu+0x2e38>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d104      	bne.n	80040ba <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80040b0:	4a8e      	ldr	r2, [pc, #568]	; (80042ec <menu+0x2e3c>)
 80040b2:	2101      	movs	r1, #1
 80040b4:	2002      	movs	r0, #2
 80040b6:	f7fc fa55 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80040ba:	4b8d      	ldr	r3, [pc, #564]	; (80042f0 <menu+0x2e40>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	220a      	movs	r2, #10
 80040c0:	498c      	ldr	r1, [pc, #560]	; (80042f4 <menu+0x2e44>)
 80040c2:	4618      	mov	r0, r3
 80040c4:	f008 fba4 	bl	800c810 <itoa>
			lcd_print(2, 16, snum);
 80040c8:	4a8a      	ldr	r2, [pc, #552]	; (80042f4 <menu+0x2e44>)
 80040ca:	2110      	movs	r1, #16
 80040cc:	2002      	movs	r0, #2
 80040ce:	f7fc fa49 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040d2:	2102      	movs	r1, #2
 80040d4:	4888      	ldr	r0, [pc, #544]	; (80042f8 <menu+0x2e48>)
 80040d6:	f005 fba5 	bl	8009824 <HAL_GPIO_ReadPin>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d115      	bne.n	800410c <menu+0x2c5c>
 80040e0:	4b86      	ldr	r3, [pc, #536]	; (80042fc <menu+0x2e4c>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	f083 0301 	eor.w	r3, r3, #1
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00e      	beq.n	800410c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 80040ee:	4b80      	ldr	r3, [pc, #512]	; (80042f0 <menu+0x2e40>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	3301      	adds	r3, #1
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	4b7e      	ldr	r3, [pc, #504]	; (80042f0 <menu+0x2e40>)
 80040f8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80040fa:	4b7d      	ldr	r3, [pc, #500]	; (80042f0 <menu+0x2e40>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2bb4      	cmp	r3, #180	; 0xb4
 8004100:	d902      	bls.n	8004108 <menu+0x2c58>
				makineCalismaTmr = 0;
 8004102:	4b7b      	ldr	r3, [pc, #492]	; (80042f0 <menu+0x2e40>)
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004108:	f001 ff14 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800410c:	2104      	movs	r1, #4
 800410e:	487a      	ldr	r0, [pc, #488]	; (80042f8 <menu+0x2e48>)
 8004110:	f005 fb88 	bl	8009824 <HAL_GPIO_ReadPin>
 8004114:	4603      	mov	r3, r0
 8004116:	2b01      	cmp	r3, #1
 8004118:	d115      	bne.n	8004146 <menu+0x2c96>
 800411a:	4b78      	ldr	r3, [pc, #480]	; (80042fc <menu+0x2e4c>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	f083 0301 	eor.w	r3, r3, #1
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00e      	beq.n	8004146 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004128:	4b71      	ldr	r3, [pc, #452]	; (80042f0 <menu+0x2e40>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	3b01      	subs	r3, #1
 800412e:	b2da      	uxtb	r2, r3
 8004130:	4b6f      	ldr	r3, [pc, #444]	; (80042f0 <menu+0x2e40>)
 8004132:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004134:	4b6e      	ldr	r3, [pc, #440]	; (80042f0 <menu+0x2e40>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2bb5      	cmp	r3, #181	; 0xb5
 800413a:	d902      	bls.n	8004142 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800413c:	4b6c      	ldr	r3, [pc, #432]	; (80042f0 <menu+0x2e40>)
 800413e:	22b4      	movs	r2, #180	; 0xb4
 8004140:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004142:	f001 fef7 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004146:	2108      	movs	r1, #8
 8004148:	486b      	ldr	r0, [pc, #428]	; (80042f8 <menu+0x2e48>)
 800414a:	f005 fb6b 	bl	8009824 <HAL_GPIO_ReadPin>
 800414e:	4603      	mov	r3, r0
 8004150:	2b01      	cmp	r3, #1
 8004152:	d10d      	bne.n	8004170 <menu+0x2cc0>
 8004154:	4b69      	ldr	r3, [pc, #420]	; (80042fc <menu+0x2e4c>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	f083 0301 	eor.w	r3, r3, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d006      	beq.n	8004170 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004162:	4b63      	ldr	r3, [pc, #396]	; (80042f0 <menu+0x2e40>)
 8004164:	781a      	ldrb	r2, [r3, #0]
 8004166:	4b66      	ldr	r3, [pc, #408]	; (8004300 <menu+0x2e50>)
 8004168:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800416a:	4b66      	ldr	r3, [pc, #408]	; (8004304 <menu+0x2e54>)
 800416c:	2201      	movs	r2, #1
 800416e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004170:	4b65      	ldr	r3, [pc, #404]	; (8004308 <menu+0x2e58>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b1b      	cmp	r3, #27
 8004176:	f040 8083 	bne.w	8004280 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800417a:	4a64      	ldr	r2, [pc, #400]	; (800430c <menu+0x2e5c>)
 800417c:	2101      	movs	r1, #1
 800417e:	2001      	movs	r0, #1
 8004180:	f7fc f9f0 	bl	8000564 <lcd_print>

		if(buzzer == 0) {
 8004184:	4b62      	ldr	r3, [pc, #392]	; (8004310 <menu+0x2e60>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d113      	bne.n	80041b4 <menu+0x2d04>
			if(dilSecim == 0) {
 800418c:	4b56      	ldr	r3, [pc, #344]	; (80042e8 <menu+0x2e38>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d105      	bne.n	80041a0 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004194:	4a5f      	ldr	r2, [pc, #380]	; (8004314 <menu+0x2e64>)
 8004196:	2101      	movs	r1, #1
 8004198:	2002      	movs	r0, #2
 800419a:	f7fc f9e3 	bl	8000564 <lcd_print>
 800419e:	e020      	b.n	80041e2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80041a0:	4b51      	ldr	r3, [pc, #324]	; (80042e8 <menu+0x2e38>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d11c      	bne.n	80041e2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80041a8:	4a5b      	ldr	r2, [pc, #364]	; (8004318 <menu+0x2e68>)
 80041aa:	2101      	movs	r1, #1
 80041ac:	2002      	movs	r0, #2
 80041ae:	f7fc f9d9 	bl	8000564 <lcd_print>
 80041b2:	e016      	b.n	80041e2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80041b4:	4b56      	ldr	r3, [pc, #344]	; (8004310 <menu+0x2e60>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d112      	bne.n	80041e2 <menu+0x2d32>
			if(dilSecim == 0) {
 80041bc:	4b4a      	ldr	r3, [pc, #296]	; (80042e8 <menu+0x2e38>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80041c4:	4a55      	ldr	r2, [pc, #340]	; (800431c <menu+0x2e6c>)
 80041c6:	2101      	movs	r1, #1
 80041c8:	2002      	movs	r0, #2
 80041ca:	f7fc f9cb 	bl	8000564 <lcd_print>
 80041ce:	e008      	b.n	80041e2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80041d0:	4b45      	ldr	r3, [pc, #276]	; (80042e8 <menu+0x2e38>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d104      	bne.n	80041e2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80041d8:	4a51      	ldr	r2, [pc, #324]	; (8004320 <menu+0x2e70>)
 80041da:	2101      	movs	r1, #1
 80041dc:	2002      	movs	r0, #2
 80041de:	f7fc f9c1 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041e2:	2102      	movs	r1, #2
 80041e4:	4844      	ldr	r0, [pc, #272]	; (80042f8 <menu+0x2e48>)
 80041e6:	f005 fb1d 	bl	8009824 <HAL_GPIO_ReadPin>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d115      	bne.n	800421c <menu+0x2d6c>
 80041f0:	4b42      	ldr	r3, [pc, #264]	; (80042fc <menu+0x2e4c>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	f083 0301 	eor.w	r3, r3, #1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00e      	beq.n	800421c <menu+0x2d6c>
			buzzer = buzzer + 1;
 80041fe:	4b44      	ldr	r3, [pc, #272]	; (8004310 <menu+0x2e60>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	3301      	adds	r3, #1
 8004204:	b2da      	uxtb	r2, r3
 8004206:	4b42      	ldr	r3, [pc, #264]	; (8004310 <menu+0x2e60>)
 8004208:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800420a:	4b41      	ldr	r3, [pc, #260]	; (8004310 <menu+0x2e60>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d902      	bls.n	8004218 <menu+0x2d68>
				buzzer = 0;
 8004212:	4b3f      	ldr	r3, [pc, #252]	; (8004310 <menu+0x2e60>)
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004218:	f001 fe8c 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800421c:	2104      	movs	r1, #4
 800421e:	4836      	ldr	r0, [pc, #216]	; (80042f8 <menu+0x2e48>)
 8004220:	f005 fb00 	bl	8009824 <HAL_GPIO_ReadPin>
 8004224:	4603      	mov	r3, r0
 8004226:	2b01      	cmp	r3, #1
 8004228:	d115      	bne.n	8004256 <menu+0x2da6>
 800422a:	4b34      	ldr	r3, [pc, #208]	; (80042fc <menu+0x2e4c>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	f083 0301 	eor.w	r3, r3, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00e      	beq.n	8004256 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004238:	4b35      	ldr	r3, [pc, #212]	; (8004310 <menu+0x2e60>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	3b01      	subs	r3, #1
 800423e:	b2da      	uxtb	r2, r3
 8004240:	4b33      	ldr	r3, [pc, #204]	; (8004310 <menu+0x2e60>)
 8004242:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004244:	4b32      	ldr	r3, [pc, #200]	; (8004310 <menu+0x2e60>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <menu+0x2da2>
		   		buzzer = 1;
 800424c:	4b30      	ldr	r3, [pc, #192]	; (8004310 <menu+0x2e60>)
 800424e:	2201      	movs	r2, #1
 8004250:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004252:	f001 fe6f 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004256:	2108      	movs	r1, #8
 8004258:	4827      	ldr	r0, [pc, #156]	; (80042f8 <menu+0x2e48>)
 800425a:	f005 fae3 	bl	8009824 <HAL_GPIO_ReadPin>
 800425e:	4603      	mov	r3, r0
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10d      	bne.n	8004280 <menu+0x2dd0>
 8004264:	4b25      	ldr	r3, [pc, #148]	; (80042fc <menu+0x2e4c>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	f083 0301 	eor.w	r3, r3, #1
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d006      	beq.n	8004280 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004272:	4b27      	ldr	r3, [pc, #156]	; (8004310 <menu+0x2e60>)
 8004274:	781a      	ldrb	r2, [r3, #0]
 8004276:	4b22      	ldr	r3, [pc, #136]	; (8004300 <menu+0x2e50>)
 8004278:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800427a:	4b22      	ldr	r3, [pc, #136]	; (8004304 <menu+0x2e54>)
 800427c:	2201      	movs	r2, #1
 800427e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004280:	4b21      	ldr	r3, [pc, #132]	; (8004308 <menu+0x2e58>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b1c      	cmp	r3, #28
 8004286:	f040 80ab 	bne.w	80043e0 <menu+0x2f30>
		calismaSayModu = 0;
 800428a:	4b26      	ldr	r3, [pc, #152]	; (8004324 <menu+0x2e74>)
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004290:	4a25      	ldr	r2, [pc, #148]	; (8004328 <menu+0x2e78>)
 8004292:	2101      	movs	r1, #1
 8004294:	2001      	movs	r0, #1
 8004296:	f7fc f965 	bl	8000564 <lcd_print>

		if(demoMode == 0) {
 800429a:	4b24      	ldr	r3, [pc, #144]	; (800432c <menu+0x2e7c>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d113      	bne.n	80042ca <menu+0x2e1a>
			if(dilSecim == 0) {
 80042a2:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <menu+0x2e38>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d105      	bne.n	80042b6 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80042aa:	4a1a      	ldr	r2, [pc, #104]	; (8004314 <menu+0x2e64>)
 80042ac:	2101      	movs	r1, #1
 80042ae:	2002      	movs	r0, #2
 80042b0:	f7fc f958 	bl	8000564 <lcd_print>
 80042b4:	e045      	b.n	8004342 <menu+0x2e92>
			} else if(dilSecim == 1) {
 80042b6:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <menu+0x2e38>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d141      	bne.n	8004342 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80042be:	4a16      	ldr	r2, [pc, #88]	; (8004318 <menu+0x2e68>)
 80042c0:	2101      	movs	r1, #1
 80042c2:	2002      	movs	r0, #2
 80042c4:	f7fc f94e 	bl	8000564 <lcd_print>
 80042c8:	e03b      	b.n	8004342 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80042ca:	4b18      	ldr	r3, [pc, #96]	; (800432c <menu+0x2e7c>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d137      	bne.n	8004342 <menu+0x2e92>
			if(dilSecim == 0){
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <menu+0x2e38>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d12a      	bne.n	8004330 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80042da:	4a10      	ldr	r2, [pc, #64]	; (800431c <menu+0x2e6c>)
 80042dc:	2101      	movs	r1, #1
 80042de:	2002      	movs	r0, #2
 80042e0:	f7fc f940 	bl	8000564 <lcd_print>
 80042e4:	e02d      	b.n	8004342 <menu+0x2e92>
 80042e6:	bf00      	nop
 80042e8:	20000c2d 	.word	0x20000c2d
 80042ec:	0800d434 	.word	0x0800d434
 80042f0:	20000c24 	.word	0x20000c24
 80042f4:	20000bac 	.word	0x20000bac
 80042f8:	40010800 	.word	0x40010800
 80042fc:	20000c3b 	.word	0x20000c3b
 8004300:	20000b3c 	.word	0x20000b3c
 8004304:	20000c38 	.word	0x20000c38
 8004308:	20000c0c 	.word	0x20000c0c
 800430c:	0800d534 	.word	0x0800d534
 8004310:	20000c28 	.word	0x20000c28
 8004314:	0800ce5c 	.word	0x0800ce5c
 8004318:	0800ce70 	.word	0x0800ce70
 800431c:	0800cebc 	.word	0x0800cebc
 8004320:	0800ced0 	.word	0x0800ced0
 8004324:	20000c2c 	.word	0x20000c2c
 8004328:	0800d548 	.word	0x0800d548
 800432c:	20000c2a 	.word	0x20000c2a
			} else if(dilSecim == 1) {
 8004330:	4b71      	ldr	r3, [pc, #452]	; (80044f8 <menu+0x3048>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d104      	bne.n	8004342 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004338:	4a70      	ldr	r2, [pc, #448]	; (80044fc <menu+0x304c>)
 800433a:	2101      	movs	r1, #1
 800433c:	2002      	movs	r0, #2
 800433e:	f7fc f911 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004342:	2102      	movs	r1, #2
 8004344:	486e      	ldr	r0, [pc, #440]	; (8004500 <menu+0x3050>)
 8004346:	f005 fa6d 	bl	8009824 <HAL_GPIO_ReadPin>
 800434a:	4603      	mov	r3, r0
 800434c:	2b01      	cmp	r3, #1
 800434e:	d115      	bne.n	800437c <menu+0x2ecc>
 8004350:	4b6c      	ldr	r3, [pc, #432]	; (8004504 <menu+0x3054>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	f083 0301 	eor.w	r3, r3, #1
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00e      	beq.n	800437c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800435e:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <menu+0x3058>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	3301      	adds	r3, #1
 8004364:	b2da      	uxtb	r2, r3
 8004366:	4b68      	ldr	r3, [pc, #416]	; (8004508 <menu+0x3058>)
 8004368:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800436a:	4b67      	ldr	r3, [pc, #412]	; (8004508 <menu+0x3058>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d902      	bls.n	8004378 <menu+0x2ec8>
				demoMode = 0;
 8004372:	4b65      	ldr	r3, [pc, #404]	; (8004508 <menu+0x3058>)
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004378:	f001 fddc 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800437c:	2104      	movs	r1, #4
 800437e:	4860      	ldr	r0, [pc, #384]	; (8004500 <menu+0x3050>)
 8004380:	f005 fa50 	bl	8009824 <HAL_GPIO_ReadPin>
 8004384:	4603      	mov	r3, r0
 8004386:	2b01      	cmp	r3, #1
 8004388:	d115      	bne.n	80043b6 <menu+0x2f06>
 800438a:	4b5e      	ldr	r3, [pc, #376]	; (8004504 <menu+0x3054>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	f083 0301 	eor.w	r3, r3, #1
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00e      	beq.n	80043b6 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004398:	4b5b      	ldr	r3, [pc, #364]	; (8004508 <menu+0x3058>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	3b01      	subs	r3, #1
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	4b59      	ldr	r3, [pc, #356]	; (8004508 <menu+0x3058>)
 80043a2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80043a4:	4b58      	ldr	r3, [pc, #352]	; (8004508 <menu+0x3058>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <menu+0x2f02>
		   		demoMode = 1;
 80043ac:	4b56      	ldr	r3, [pc, #344]	; (8004508 <menu+0x3058>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80043b2:	f001 fdbf 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043b6:	2108      	movs	r1, #8
 80043b8:	4851      	ldr	r0, [pc, #324]	; (8004500 <menu+0x3050>)
 80043ba:	f005 fa33 	bl	8009824 <HAL_GPIO_ReadPin>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d10d      	bne.n	80043e0 <menu+0x2f30>
 80043c4:	4b4f      	ldr	r3, [pc, #316]	; (8004504 <menu+0x3054>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	f083 0301 	eor.w	r3, r3, #1
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d006      	beq.n	80043e0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80043d2:	4b4d      	ldr	r3, [pc, #308]	; (8004508 <menu+0x3058>)
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	4b4d      	ldr	r3, [pc, #308]	; (800450c <menu+0x305c>)
 80043d8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80043da:	4b4d      	ldr	r3, [pc, #308]	; (8004510 <menu+0x3060>)
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80043e0:	4b4c      	ldr	r3, [pc, #304]	; (8004514 <menu+0x3064>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b1d      	cmp	r3, #29
 80043e6:	f040 8132 	bne.w	800464e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80043ea:	4b4b      	ldr	r3, [pc, #300]	; (8004518 <menu+0x3068>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d113      	bne.n	800441a <menu+0x2f6a>
 80043f2:	4b4a      	ldr	r3, [pc, #296]	; (800451c <menu+0x306c>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <menu+0x2f6a>
 80043fa:	4b49      	ldr	r3, [pc, #292]	; (8004520 <menu+0x3070>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10b      	bne.n	800441a <menu+0x2f6a>
 8004402:	4b48      	ldr	r3, [pc, #288]	; (8004524 <menu+0x3074>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <menu+0x2f6a>
 800440a:	4b47      	ldr	r3, [pc, #284]	; (8004528 <menu+0x3078>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d103      	bne.n	800441a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004412:	4b46      	ldr	r3, [pc, #280]	; (800452c <menu+0x307c>)
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]
 8004418:	e002      	b.n	8004420 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800441a:	4b44      	ldr	r3, [pc, #272]	; (800452c <menu+0x307c>)
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004420:	4b43      	ldr	r3, [pc, #268]	; (8004530 <menu+0x3080>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d154      	bne.n	80044d2 <menu+0x3022>
			if(dilSecim == 0) {
 8004428:	4b33      	ldr	r3, [pc, #204]	; (80044f8 <menu+0x3048>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d105      	bne.n	800443c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004430:	4a40      	ldr	r2, [pc, #256]	; (8004534 <menu+0x3084>)
 8004432:	2101      	movs	r1, #1
 8004434:	2001      	movs	r0, #1
 8004436:	f7fc f895 	bl	8000564 <lcd_print>
 800443a:	e008      	b.n	800444e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800443c:	4b2e      	ldr	r3, [pc, #184]	; (80044f8 <menu+0x3048>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d104      	bne.n	800444e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004444:	4a3c      	ldr	r2, [pc, #240]	; (8004538 <menu+0x3088>)
 8004446:	2101      	movs	r1, #1
 8004448:	2001      	movs	r0, #1
 800444a:	f7fc f88b 	bl	8000564 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800444e:	4b36      	ldr	r3, [pc, #216]	; (8004528 <menu+0x3078>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	220a      	movs	r2, #10
 8004454:	4939      	ldr	r1, [pc, #228]	; (800453c <menu+0x308c>)
 8004456:	4618      	mov	r0, r3
 8004458:	f008 f9da 	bl	800c810 <itoa>
			lcd_print(2, 12, snum);
 800445c:	4a37      	ldr	r2, [pc, #220]	; (800453c <menu+0x308c>)
 800445e:	210c      	movs	r1, #12
 8004460:	2002      	movs	r0, #2
 8004462:	f7fc f87f 	bl	8000564 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004466:	4b2f      	ldr	r3, [pc, #188]	; (8004524 <menu+0x3074>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	220a      	movs	r2, #10
 800446c:	4933      	ldr	r1, [pc, #204]	; (800453c <menu+0x308c>)
 800446e:	4618      	mov	r0, r3
 8004470:	f008 f9ce 	bl	800c810 <itoa>
			lcd_print(2, 13, snum);
 8004474:	4a31      	ldr	r2, [pc, #196]	; (800453c <menu+0x308c>)
 8004476:	210d      	movs	r1, #13
 8004478:	2002      	movs	r0, #2
 800447a:	f7fc f873 	bl	8000564 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800447e:	4b28      	ldr	r3, [pc, #160]	; (8004520 <menu+0x3070>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	220a      	movs	r2, #10
 8004484:	492d      	ldr	r1, [pc, #180]	; (800453c <menu+0x308c>)
 8004486:	4618      	mov	r0, r3
 8004488:	f008 f9c2 	bl	800c810 <itoa>
			lcd_print(2, 14, snum);
 800448c:	4a2b      	ldr	r2, [pc, #172]	; (800453c <menu+0x308c>)
 800448e:	210e      	movs	r1, #14
 8004490:	2002      	movs	r0, #2
 8004492:	f7fc f867 	bl	8000564 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004496:	4b21      	ldr	r3, [pc, #132]	; (800451c <menu+0x306c>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	220a      	movs	r2, #10
 800449c:	4927      	ldr	r1, [pc, #156]	; (800453c <menu+0x308c>)
 800449e:	4618      	mov	r0, r3
 80044a0:	f008 f9b6 	bl	800c810 <itoa>
			lcd_print(2, 15, snum);
 80044a4:	4a25      	ldr	r2, [pc, #148]	; (800453c <menu+0x308c>)
 80044a6:	210f      	movs	r1, #15
 80044a8:	2002      	movs	r0, #2
 80044aa:	f7fc f85b 	bl	8000564 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80044ae:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <menu+0x3068>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	220a      	movs	r2, #10
 80044b4:	4921      	ldr	r1, [pc, #132]	; (800453c <menu+0x308c>)
 80044b6:	4618      	mov	r0, r3
 80044b8:	f008 f9aa 	bl	800c810 <itoa>
			lcd_print(2, 16, snum);
 80044bc:	4a1f      	ldr	r2, [pc, #124]	; (800453c <menu+0x308c>)
 80044be:	2110      	movs	r1, #16
 80044c0:	2002      	movs	r0, #2
 80044c2:	f7fc f84f 	bl	8000564 <lcd_print>

			lcd_print(2, 1, "           ");
 80044c6:	4a1e      	ldr	r2, [pc, #120]	; (8004540 <menu+0x3090>)
 80044c8:	2101      	movs	r1, #1
 80044ca:	2002      	movs	r0, #2
 80044cc:	f7fc f84a 	bl	8000564 <lcd_print>
 80044d0:	e048      	b.n	8004564 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80044d2:	4b17      	ldr	r3, [pc, #92]	; (8004530 <menu+0x3080>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d144      	bne.n	8004564 <menu+0x30b4>
			if(dilSecim == 0) {
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <menu+0x3048>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d132      	bne.n	8004548 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80044e2:	4a14      	ldr	r2, [pc, #80]	; (8004534 <menu+0x3084>)
 80044e4:	2101      	movs	r1, #1
 80044e6:	2001      	movs	r0, #1
 80044e8:	f7fc f83c 	bl	8000564 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80044ec:	4a15      	ldr	r2, [pc, #84]	; (8004544 <menu+0x3094>)
 80044ee:	2101      	movs	r1, #1
 80044f0:	2002      	movs	r0, #2
 80044f2:	f7fc f837 	bl	8000564 <lcd_print>
 80044f6:	e035      	b.n	8004564 <menu+0x30b4>
 80044f8:	20000c2d 	.word	0x20000c2d
 80044fc:	0800ced0 	.word	0x0800ced0
 8004500:	40010800 	.word	0x40010800
 8004504:	20000c3b 	.word	0x20000c3b
 8004508:	20000c2a 	.word	0x20000c2a
 800450c:	20000b3c 	.word	0x20000b3c
 8004510:	20000c38 	.word	0x20000c38
 8004514:	20000c0c 	.word	0x20000c0c
 8004518:	20000c09 	.word	0x20000c09
 800451c:	20000c0a 	.word	0x20000c0a
 8004520:	200009b2 	.word	0x200009b2
 8004524:	200009b3 	.word	0x200009b3
 8004528:	20000c0b 	.word	0x20000c0b
 800452c:	20000c4d 	.word	0x20000c4d
 8004530:	20000c2c 	.word	0x20000c2c
 8004534:	0800d558 	.word	0x0800d558
 8004538:	0800d56c 	.word	0x0800d56c
 800453c:	20000bac 	.word	0x20000bac
 8004540:	0800d580 	.word	0x0800d580
 8004544:	0800d58c 	.word	0x0800d58c
			} else if(dilSecim == 1) {
 8004548:	4b94      	ldr	r3, [pc, #592]	; (800479c <menu+0x32ec>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d109      	bne.n	8004564 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004550:	4a93      	ldr	r2, [pc, #588]	; (80047a0 <menu+0x32f0>)
 8004552:	2101      	movs	r1, #1
 8004554:	2001      	movs	r0, #1
 8004556:	f7fc f805 	bl	8000564 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800455a:	4a92      	ldr	r2, [pc, #584]	; (80047a4 <menu+0x32f4>)
 800455c:	2101      	movs	r1, #1
 800455e:	2002      	movs	r0, #2
 8004560:	f7fc f800 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004564:	2102      	movs	r1, #2
 8004566:	4890      	ldr	r0, [pc, #576]	; (80047a8 <menu+0x32f8>)
 8004568:	f005 f95c 	bl	8009824 <HAL_GPIO_ReadPin>
 800456c:	4603      	mov	r3, r0
 800456e:	2b01      	cmp	r3, #1
 8004570:	d119      	bne.n	80045a6 <menu+0x30f6>
 8004572:	4b8e      	ldr	r3, [pc, #568]	; (80047ac <menu+0x32fc>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	f083 0301 	eor.w	r3, r3, #1
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d012      	beq.n	80045a6 <menu+0x30f6>
 8004580:	4b8b      	ldr	r3, [pc, #556]	; (80047b0 <menu+0x3300>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00e      	beq.n	80045a6 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004588:	4b8a      	ldr	r3, [pc, #552]	; (80047b4 <menu+0x3304>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	3301      	adds	r3, #1
 800458e:	b2da      	uxtb	r2, r3
 8004590:	4b88      	ldr	r3, [pc, #544]	; (80047b4 <menu+0x3304>)
 8004592:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004594:	4b87      	ldr	r3, [pc, #540]	; (80047b4 <menu+0x3304>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d902      	bls.n	80045a2 <menu+0x30f2>
				calismaSayModu = 0;
 800459c:	4b85      	ldr	r3, [pc, #532]	; (80047b4 <menu+0x3304>)
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80045a2:	f001 fcc7 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80045a6:	2104      	movs	r1, #4
 80045a8:	487f      	ldr	r0, [pc, #508]	; (80047a8 <menu+0x32f8>)
 80045aa:	f005 f93b 	bl	8009824 <HAL_GPIO_ReadPin>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d119      	bne.n	80045e8 <menu+0x3138>
 80045b4:	4b7d      	ldr	r3, [pc, #500]	; (80047ac <menu+0x32fc>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	f083 0301 	eor.w	r3, r3, #1
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d012      	beq.n	80045e8 <menu+0x3138>
 80045c2:	4b7b      	ldr	r3, [pc, #492]	; (80047b0 <menu+0x3300>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00e      	beq.n	80045e8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80045ca:	4b7a      	ldr	r3, [pc, #488]	; (80047b4 <menu+0x3304>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	4b78      	ldr	r3, [pc, #480]	; (80047b4 <menu+0x3304>)
 80045d4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80045d6:	4b77      	ldr	r3, [pc, #476]	; (80047b4 <menu+0x3304>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <menu+0x3134>
		   		calismaSayModu = 1;
 80045de:	4b75      	ldr	r3, [pc, #468]	; (80047b4 <menu+0x3304>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80045e4:	f001 fca6 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045e8:	2108      	movs	r1, #8
 80045ea:	486f      	ldr	r0, [pc, #444]	; (80047a8 <menu+0x32f8>)
 80045ec:	f005 f91a 	bl	8009824 <HAL_GPIO_ReadPin>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d12b      	bne.n	800464e <menu+0x319e>
 80045f6:	4b6d      	ldr	r3, [pc, #436]	; (80047ac <menu+0x32fc>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	f083 0301 	eor.w	r3, r3, #1
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d024      	beq.n	800464e <menu+0x319e>
			eepromData[32] = 0;
 8004604:	4b6c      	ldr	r3, [pc, #432]	; (80047b8 <menu+0x3308>)
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800460c:	4b6a      	ldr	r3, [pc, #424]	; (80047b8 <menu+0x3308>)
 800460e:	2200      	movs	r2, #0
 8004610:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004612:	4b69      	ldr	r3, [pc, #420]	; (80047b8 <menu+0x3308>)
 8004614:	2200      	movs	r2, #0
 8004616:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004618:	4b67      	ldr	r3, [pc, #412]	; (80047b8 <menu+0x3308>)
 800461a:	2200      	movs	r2, #0
 800461c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800461e:	4b66      	ldr	r3, [pc, #408]	; (80047b8 <menu+0x3308>)
 8004620:	2200      	movs	r2, #0
 8004622:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004624:	4b65      	ldr	r3, [pc, #404]	; (80047bc <menu+0x330c>)
 8004626:	2200      	movs	r2, #0
 8004628:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800462a:	4b65      	ldr	r3, [pc, #404]	; (80047c0 <menu+0x3310>)
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004630:	4b64      	ldr	r3, [pc, #400]	; (80047c4 <menu+0x3314>)
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004636:	4b64      	ldr	r3, [pc, #400]	; (80047c8 <menu+0x3318>)
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800463c:	4b63      	ldr	r3, [pc, #396]	; (80047cc <menu+0x331c>)
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004642:	4b5c      	ldr	r3, [pc, #368]	; (80047b4 <menu+0x3304>)
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004648:	4b61      	ldr	r3, [pc, #388]	; (80047d0 <menu+0x3320>)
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800464e:	4b61      	ldr	r3, [pc, #388]	; (80047d4 <menu+0x3324>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b1e      	cmp	r3, #30
 8004654:	d16f      	bne.n	8004736 <menu+0x3286>
		calismaSayModu = 0;
 8004656:	4b57      	ldr	r3, [pc, #348]	; (80047b4 <menu+0x3304>)
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800465c:	4b4f      	ldr	r3, [pc, #316]	; (800479c <menu+0x32ec>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004664:	4a5c      	ldr	r2, [pc, #368]	; (80047d8 <menu+0x3328>)
 8004666:	2101      	movs	r1, #1
 8004668:	2001      	movs	r0, #1
 800466a:	f7fb ff7b 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800466e:	4a5b      	ldr	r2, [pc, #364]	; (80047dc <menu+0x332c>)
 8004670:	2101      	movs	r1, #1
 8004672:	2002      	movs	r0, #2
 8004674:	f7fb ff76 	bl	8000564 <lcd_print>
 8004678:	e00d      	b.n	8004696 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800467a:	4b48      	ldr	r3, [pc, #288]	; (800479c <menu+0x32ec>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d109      	bne.n	8004696 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004682:	4a57      	ldr	r2, [pc, #348]	; (80047e0 <menu+0x3330>)
 8004684:	2101      	movs	r1, #1
 8004686:	2001      	movs	r0, #1
 8004688:	f7fb ff6c 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800468c:	4a55      	ldr	r2, [pc, #340]	; (80047e4 <menu+0x3334>)
 800468e:	2101      	movs	r1, #1
 8004690:	2002      	movs	r0, #2
 8004692:	f7fb ff67 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004696:	2102      	movs	r1, #2
 8004698:	4843      	ldr	r0, [pc, #268]	; (80047a8 <menu+0x32f8>)
 800469a:	f005 f8c3 	bl	8009824 <HAL_GPIO_ReadPin>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d115      	bne.n	80046d0 <menu+0x3220>
 80046a4:	4b41      	ldr	r3, [pc, #260]	; (80047ac <menu+0x32fc>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	f083 0301 	eor.w	r3, r3, #1
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00e      	beq.n	80046d0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80046b2:	4b3a      	ldr	r3, [pc, #232]	; (800479c <menu+0x32ec>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	3301      	adds	r3, #1
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	4b38      	ldr	r3, [pc, #224]	; (800479c <menu+0x32ec>)
 80046bc:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80046be:	4b37      	ldr	r3, [pc, #220]	; (800479c <menu+0x32ec>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d902      	bls.n	80046cc <menu+0x321c>
				dilSecim = 0;
 80046c6:	4b35      	ldr	r3, [pc, #212]	; (800479c <menu+0x32ec>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80046cc:	f001 fc32 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046d0:	2104      	movs	r1, #4
 80046d2:	4835      	ldr	r0, [pc, #212]	; (80047a8 <menu+0x32f8>)
 80046d4:	f005 f8a6 	bl	8009824 <HAL_GPIO_ReadPin>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d115      	bne.n	800470a <menu+0x325a>
 80046de:	4b33      	ldr	r3, [pc, #204]	; (80047ac <menu+0x32fc>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	f083 0301 	eor.w	r3, r3, #1
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00e      	beq.n	800470a <menu+0x325a>
			dilSecim = dilSecim - 1;
 80046ec:	4b2b      	ldr	r3, [pc, #172]	; (800479c <menu+0x32ec>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	4b29      	ldr	r3, [pc, #164]	; (800479c <menu+0x32ec>)
 80046f6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80046f8:	4b28      	ldr	r3, [pc, #160]	; (800479c <menu+0x32ec>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <menu+0x3256>
		   		dilSecim = 1;
 8004700:	4b26      	ldr	r3, [pc, #152]	; (800479c <menu+0x32ec>)
 8004702:	2201      	movs	r2, #1
 8004704:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004706:	f001 fc15 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800470a:	2108      	movs	r1, #8
 800470c:	4826      	ldr	r0, [pc, #152]	; (80047a8 <menu+0x32f8>)
 800470e:	f005 f889 	bl	8009824 <HAL_GPIO_ReadPin>
 8004712:	4603      	mov	r3, r0
 8004714:	2b01      	cmp	r3, #1
 8004716:	d10e      	bne.n	8004736 <menu+0x3286>
 8004718:	4b24      	ldr	r3, [pc, #144]	; (80047ac <menu+0x32fc>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	f083 0301 	eor.w	r3, r3, #1
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <menu+0x32ec>)
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	4b23      	ldr	r3, [pc, #140]	; (80047b8 <menu+0x3308>)
 800472c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004730:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <menu+0x3320>)
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004736:	4b27      	ldr	r3, [pc, #156]	; (80047d4 <menu+0x3324>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b1f      	cmp	r3, #31
 800473c:	f040 80b7 	bne.w	80048ae <menu+0x33fe>
		calismaSayModu = 0;
 8004740:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <menu+0x3304>)
 8004742:	2200      	movs	r2, #0
 8004744:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004746:	4a28      	ldr	r2, [pc, #160]	; (80047e8 <menu+0x3338>)
 8004748:	2101      	movs	r1, #1
 800474a:	2001      	movs	r0, #1
 800474c:	f7fb ff0a 	bl	8000564 <lcd_print>

		if(iotMode == 0) {
 8004750:	4b26      	ldr	r3, [pc, #152]	; (80047ec <menu+0x333c>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d113      	bne.n	8004780 <menu+0x32d0>
			if(dilSecim == 0) {
 8004758:	4b10      	ldr	r3, [pc, #64]	; (800479c <menu+0x32ec>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d105      	bne.n	800476c <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004760:	4a23      	ldr	r2, [pc, #140]	; (80047f0 <menu+0x3340>)
 8004762:	2101      	movs	r1, #1
 8004764:	2002      	movs	r0, #2
 8004766:	f7fb fefd 	bl	8000564 <lcd_print>
 800476a:	e050      	b.n	800480e <menu+0x335e>
			} else if(dilSecim == 1) {
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <menu+0x32ec>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d14c      	bne.n	800480e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004774:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <menu+0x3344>)
 8004776:	2101      	movs	r1, #1
 8004778:	2002      	movs	r0, #2
 800477a:	f7fb fef3 	bl	8000564 <lcd_print>
 800477e:	e046      	b.n	800480e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <menu+0x333c>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d142      	bne.n	800480e <menu+0x335e>
			if(dilSecim == 0){
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <menu+0x32ec>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d135      	bne.n	80047fc <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004790:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <menu+0x3348>)
 8004792:	2101      	movs	r1, #1
 8004794:	2002      	movs	r0, #2
 8004796:	f7fb fee5 	bl	8000564 <lcd_print>
 800479a:	e038      	b.n	800480e <menu+0x335e>
 800479c:	20000c2d 	.word	0x20000c2d
 80047a0:	0800d56c 	.word	0x0800d56c
 80047a4:	0800d5a0 	.word	0x0800d5a0
 80047a8:	40010800 	.word	0x40010800
 80047ac:	20000c3b 	.word	0x20000c3b
 80047b0:	20000c4d 	.word	0x20000c4d
 80047b4:	20000c2c 	.word	0x20000c2c
 80047b8:	20000b3c 	.word	0x20000b3c
 80047bc:	20000c0b 	.word	0x20000c0b
 80047c0:	200009b3 	.word	0x200009b3
 80047c4:	200009b2 	.word	0x200009b2
 80047c8:	20000c0a 	.word	0x20000c0a
 80047cc:	20000c09 	.word	0x20000c09
 80047d0:	20000c38 	.word	0x20000c38
 80047d4:	20000c0c 	.word	0x20000c0c
 80047d8:	0800d5b4 	.word	0x0800d5b4
 80047dc:	0800d5c8 	.word	0x0800d5c8
 80047e0:	0800d5dc 	.word	0x0800d5dc
 80047e4:	0800d5f0 	.word	0x0800d5f0
 80047e8:	0800d604 	.word	0x0800d604
 80047ec:	20000c2b 	.word	0x20000c2b
 80047f0:	0800ce5c 	.word	0x0800ce5c
 80047f4:	0800ce70 	.word	0x0800ce70
 80047f8:	0800cebc 	.word	0x0800cebc
			} else if(dilSecim == 1) {
 80047fc:	4bac      	ldr	r3, [pc, #688]	; (8004ab0 <menu+0x3600>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d104      	bne.n	800480e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004804:	4aab      	ldr	r2, [pc, #684]	; (8004ab4 <menu+0x3604>)
 8004806:	2101      	movs	r1, #1
 8004808:	2002      	movs	r0, #2
 800480a:	f7fb feab 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800480e:	2102      	movs	r1, #2
 8004810:	48a9      	ldr	r0, [pc, #676]	; (8004ab8 <menu+0x3608>)
 8004812:	f005 f807 	bl	8009824 <HAL_GPIO_ReadPin>
 8004816:	4603      	mov	r3, r0
 8004818:	2b01      	cmp	r3, #1
 800481a:	d115      	bne.n	8004848 <menu+0x3398>
 800481c:	4ba7      	ldr	r3, [pc, #668]	; (8004abc <menu+0x360c>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	f083 0301 	eor.w	r3, r3, #1
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00e      	beq.n	8004848 <menu+0x3398>
			iotMode = iotMode + 1;
 800482a:	4ba5      	ldr	r3, [pc, #660]	; (8004ac0 <menu+0x3610>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	3301      	adds	r3, #1
 8004830:	b2da      	uxtb	r2, r3
 8004832:	4ba3      	ldr	r3, [pc, #652]	; (8004ac0 <menu+0x3610>)
 8004834:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004836:	4ba2      	ldr	r3, [pc, #648]	; (8004ac0 <menu+0x3610>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d902      	bls.n	8004844 <menu+0x3394>
				iotMode = 0;
 800483e:	4ba0      	ldr	r3, [pc, #640]	; (8004ac0 <menu+0x3610>)
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004844:	f001 fb76 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004848:	2104      	movs	r1, #4
 800484a:	489b      	ldr	r0, [pc, #620]	; (8004ab8 <menu+0x3608>)
 800484c:	f004 ffea 	bl	8009824 <HAL_GPIO_ReadPin>
 8004850:	4603      	mov	r3, r0
 8004852:	2b01      	cmp	r3, #1
 8004854:	d115      	bne.n	8004882 <menu+0x33d2>
 8004856:	4b99      	ldr	r3, [pc, #612]	; (8004abc <menu+0x360c>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	f083 0301 	eor.w	r3, r3, #1
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00e      	beq.n	8004882 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004864:	4b96      	ldr	r3, [pc, #600]	; (8004ac0 <menu+0x3610>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	3b01      	subs	r3, #1
 800486a:	b2da      	uxtb	r2, r3
 800486c:	4b94      	ldr	r3, [pc, #592]	; (8004ac0 <menu+0x3610>)
 800486e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004870:	4b93      	ldr	r3, [pc, #588]	; (8004ac0 <menu+0x3610>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <menu+0x33ce>
		   		iotMode = 1;
 8004878:	4b91      	ldr	r3, [pc, #580]	; (8004ac0 <menu+0x3610>)
 800487a:	2201      	movs	r2, #1
 800487c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800487e:	f001 fb59 	bl	8005f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004882:	2108      	movs	r1, #8
 8004884:	488c      	ldr	r0, [pc, #560]	; (8004ab8 <menu+0x3608>)
 8004886:	f004 ffcd 	bl	8009824 <HAL_GPIO_ReadPin>
 800488a:	4603      	mov	r3, r0
 800488c:	2b01      	cmp	r3, #1
 800488e:	d10e      	bne.n	80048ae <menu+0x33fe>
 8004890:	4b8a      	ldr	r3, [pc, #552]	; (8004abc <menu+0x360c>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	f083 0301 	eor.w	r3, r3, #1
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <menu+0x33fe>
			eepromData[48] = iotMode;
 800489e:	4b88      	ldr	r3, [pc, #544]	; (8004ac0 <menu+0x3610>)
 80048a0:	781a      	ldrb	r2, [r3, #0]
 80048a2:	4b88      	ldr	r3, [pc, #544]	; (8004ac4 <menu+0x3614>)
 80048a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80048a8:	4b87      	ldr	r3, [pc, #540]	; (8004ac8 <menu+0x3618>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80048ae:	4b87      	ldr	r3, [pc, #540]	; (8004acc <menu+0x361c>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d138      	bne.n	8004928 <menu+0x3478>
		calismaSayModu = 0;
 80048b6:	4b86      	ldr	r3, [pc, #536]	; (8004ad0 <menu+0x3620>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 80048bc:	4a85      	ldr	r2, [pc, #532]	; (8004ad4 <menu+0x3624>)
 80048be:	2101      	movs	r1, #1
 80048c0:	2001      	movs	r0, #1
 80048c2:	f7fb fe4f 	bl	8000564 <lcd_print>

		lcd_print(2, 1, machineID);
 80048c6:	4a84      	ldr	r2, [pc, #528]	; (8004ad8 <menu+0x3628>)
 80048c8:	2101      	movs	r1, #1
 80048ca:	2002      	movs	r0, #2
 80048cc:	f7fb fe4a 	bl	8000564 <lcd_print>
		lcd_print(2, 13, "    ");
 80048d0:	4a82      	ldr	r2, [pc, #520]	; (8004adc <menu+0x362c>)
 80048d2:	210d      	movs	r1, #13
 80048d4:	2002      	movs	r0, #2
 80048d6:	f7fb fe45 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048da:	2102      	movs	r1, #2
 80048dc:	4876      	ldr	r0, [pc, #472]	; (8004ab8 <menu+0x3608>)
 80048de:	f004 ffa1 	bl	8009824 <HAL_GPIO_ReadPin>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d11f      	bne.n	8004928 <menu+0x3478>
 80048e8:	2104      	movs	r1, #4
 80048ea:	4873      	ldr	r0, [pc, #460]	; (8004ab8 <menu+0x3608>)
 80048ec:	f004 ff9a 	bl	8009824 <HAL_GPIO_ReadPin>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d118      	bne.n	8004928 <menu+0x3478>
 80048f6:	4b71      	ldr	r3, [pc, #452]	; (8004abc <menu+0x360c>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	f083 0301 	eor.w	r3, r3, #1
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d011      	beq.n	8004928 <menu+0x3478>
			takeMachineID(0);
 8004904:	2000      	movs	r0, #0
 8004906:	f7fc f857 	bl	80009b8 <takeMachineID>

			HAL_Delay(50);
 800490a:	2032      	movs	r0, #50	; 0x32
 800490c:	f004 f9ba 	bl	8008c84 <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004910:	4a71      	ldr	r2, [pc, #452]	; (8004ad8 <menu+0x3628>)
 8004912:	2101      	movs	r1, #1
 8004914:	2002      	movs	r0, #2
 8004916:	f7fb fe25 	bl	8000564 <lcd_print>
			lcd_print(2, 13, "    ");
 800491a:	4a70      	ldr	r2, [pc, #448]	; (8004adc <menu+0x362c>)
 800491c:	210d      	movs	r1, #13
 800491e:	2002      	movs	r0, #2
 8004920:	f7fb fe20 	bl	8000564 <lcd_print>

			bekle();
 8004924:	f001 fb06 	bl	8005f34 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004928:	4b68      	ldr	r3, [pc, #416]	; (8004acc <menu+0x361c>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b21      	cmp	r3, #33	; 0x21
 800492e:	d153      	bne.n	80049d8 <menu+0x3528>
		calismaSayModu = 0;
 8004930:	4b67      	ldr	r3, [pc, #412]	; (8004ad0 <menu+0x3620>)
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004936:	4a6a      	ldr	r2, [pc, #424]	; (8004ae0 <menu+0x3630>)
 8004938:	2101      	movs	r1, #1
 800493a:	2001      	movs	r0, #1
 800493c:	f7fb fe12 	bl	8000564 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004940:	4868      	ldr	r0, [pc, #416]	; (8004ae4 <menu+0x3634>)
 8004942:	f7fb fc6f 	bl	8000224 <strlen>
 8004946:	4603      	mov	r3, r0
 8004948:	2b10      	cmp	r3, #16
 800494a:	d811      	bhi.n	8004970 <menu+0x34c0>
			lcd_print(2, 1, wifiSSID);
 800494c:	4a65      	ldr	r2, [pc, #404]	; (8004ae4 <menu+0x3634>)
 800494e:	2101      	movs	r1, #1
 8004950:	2002      	movs	r0, #2
 8004952:	f7fb fe07 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004956:	4863      	ldr	r0, [pc, #396]	; (8004ae4 <menu+0x3634>)
 8004958:	f7fb fc64 	bl	8000224 <strlen>
 800495c:	4603      	mov	r3, r0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	3301      	adds	r3, #1
 8004962:	b2db      	uxtb	r3, r3
 8004964:	4a60      	ldr	r2, [pc, #384]	; (8004ae8 <menu+0x3638>)
 8004966:	4619      	mov	r1, r3
 8004968:	2002      	movs	r0, #2
 800496a:	f7fb fdfb 	bl	8000564 <lcd_print>
 800496e:	e005      	b.n	800497c <menu+0x34cc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004970:	2300      	movs	r3, #0
 8004972:	2202      	movs	r2, #2
 8004974:	2101      	movs	r1, #1
 8004976:	485b      	ldr	r0, [pc, #364]	; (8004ae4 <menu+0x3634>)
 8004978:	f7fc fcf4 	bl	8001364 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800497c:	2102      	movs	r1, #2
 800497e:	484e      	ldr	r0, [pc, #312]	; (8004ab8 <menu+0x3608>)
 8004980:	f004 ff50 	bl	8009824 <HAL_GPIO_ReadPin>
 8004984:	4603      	mov	r3, r0
 8004986:	2b01      	cmp	r3, #1
 8004988:	d126      	bne.n	80049d8 <menu+0x3528>
 800498a:	2104      	movs	r1, #4
 800498c:	484a      	ldr	r0, [pc, #296]	; (8004ab8 <menu+0x3608>)
 800498e:	f004 ff49 	bl	8009824 <HAL_GPIO_ReadPin>
 8004992:	4603      	mov	r3, r0
 8004994:	2b01      	cmp	r3, #1
 8004996:	d11f      	bne.n	80049d8 <menu+0x3528>
 8004998:	4b48      	ldr	r3, [pc, #288]	; (8004abc <menu+0x360c>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	f083 0301 	eor.w	r3, r3, #1
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d018      	beq.n	80049d8 <menu+0x3528>
			takeWifiSSID(0);
 80049a6:	2000      	movs	r0, #0
 80049a8:	f7fc f95c 	bl	8000c64 <takeWifiSSID>

			HAL_Delay(100);
 80049ac:	2064      	movs	r0, #100	; 0x64
 80049ae:	f004 f969 	bl	8008c84 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 80049b2:	4a4c      	ldr	r2, [pc, #304]	; (8004ae4 <menu+0x3634>)
 80049b4:	2101      	movs	r1, #1
 80049b6:	2002      	movs	r0, #2
 80049b8:	f7fb fdd4 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80049bc:	4849      	ldr	r0, [pc, #292]	; (8004ae4 <menu+0x3634>)
 80049be:	f7fb fc31 	bl	8000224 <strlen>
 80049c2:	4603      	mov	r3, r0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	3301      	adds	r3, #1
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	4a47      	ldr	r2, [pc, #284]	; (8004ae8 <menu+0x3638>)
 80049cc:	4619      	mov	r1, r3
 80049ce:	2002      	movs	r0, #2
 80049d0:	f7fb fdc8 	bl	8000564 <lcd_print>

			bekle();
 80049d4:	f001 faae 	bl	8005f34 <bekle>
		}
	}

	if (menuSayac == 34) {
 80049d8:	4b3c      	ldr	r3, [pc, #240]	; (8004acc <menu+0x361c>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b22      	cmp	r3, #34	; 0x22
 80049de:	d153      	bne.n	8004a88 <menu+0x35d8>
		calismaSayModu = 0;
 80049e0:	4b3b      	ldr	r3, [pc, #236]	; (8004ad0 <menu+0x3620>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80049e6:	4a41      	ldr	r2, [pc, #260]	; (8004aec <menu+0x363c>)
 80049e8:	2101      	movs	r1, #1
 80049ea:	2001      	movs	r0, #1
 80049ec:	f7fb fdba 	bl	8000564 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 80049f0:	483f      	ldr	r0, [pc, #252]	; (8004af0 <menu+0x3640>)
 80049f2:	f7fb fc17 	bl	8000224 <strlen>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b10      	cmp	r3, #16
 80049fa:	d811      	bhi.n	8004a20 <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 80049fc:	4a3c      	ldr	r2, [pc, #240]	; (8004af0 <menu+0x3640>)
 80049fe:	2101      	movs	r1, #1
 8004a00:	2002      	movs	r0, #2
 8004a02:	f7fb fdaf 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004a06:	483a      	ldr	r0, [pc, #232]	; (8004af0 <menu+0x3640>)
 8004a08:	f7fb fc0c 	bl	8000224 <strlen>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	3301      	adds	r3, #1
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	4a34      	ldr	r2, [pc, #208]	; (8004ae8 <menu+0x3638>)
 8004a16:	4619      	mov	r1, r3
 8004a18:	2002      	movs	r0, #2
 8004a1a:	f7fb fda3 	bl	8000564 <lcd_print>
 8004a1e:	e005      	b.n	8004a2c <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004a20:	2301      	movs	r3, #1
 8004a22:	2202      	movs	r2, #2
 8004a24:	2101      	movs	r1, #1
 8004a26:	4832      	ldr	r0, [pc, #200]	; (8004af0 <menu+0x3640>)
 8004a28:	f7fc fc9c 	bl	8001364 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a2c:	2102      	movs	r1, #2
 8004a2e:	4822      	ldr	r0, [pc, #136]	; (8004ab8 <menu+0x3608>)
 8004a30:	f004 fef8 	bl	8009824 <HAL_GPIO_ReadPin>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d126      	bne.n	8004a88 <menu+0x35d8>
 8004a3a:	2104      	movs	r1, #4
 8004a3c:	481e      	ldr	r0, [pc, #120]	; (8004ab8 <menu+0x3608>)
 8004a3e:	f004 fef1 	bl	8009824 <HAL_GPIO_ReadPin>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d11f      	bne.n	8004a88 <menu+0x35d8>
 8004a48:	4b1c      	ldr	r3, [pc, #112]	; (8004abc <menu+0x360c>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	f083 0301 	eor.w	r3, r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d018      	beq.n	8004a88 <menu+0x35d8>
			takeWifiPass(0);
 8004a56:	2000      	movs	r0, #0
 8004a58:	f7fc faaa 	bl	8000fb0 <takeWifiPass>

			HAL_Delay(50);
 8004a5c:	2032      	movs	r0, #50	; 0x32
 8004a5e:	f004 f911 	bl	8008c84 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004a62:	4a23      	ldr	r2, [pc, #140]	; (8004af0 <menu+0x3640>)
 8004a64:	2101      	movs	r1, #1
 8004a66:	2002      	movs	r0, #2
 8004a68:	f7fb fd7c 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004a6c:	4820      	ldr	r0, [pc, #128]	; (8004af0 <menu+0x3640>)
 8004a6e:	f7fb fbd9 	bl	8000224 <strlen>
 8004a72:	4603      	mov	r3, r0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	3301      	adds	r3, #1
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ae8 <menu+0x3638>)
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	2002      	movs	r0, #2
 8004a80:	f7fb fd70 	bl	8000564 <lcd_print>

			bekle();
 8004a84:	f001 fa56 	bl	8005f34 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004a88:	4b10      	ldr	r3, [pc, #64]	; (8004acc <menu+0x361c>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b23      	cmp	r3, #35	; 0x23
 8004a8e:	d155      	bne.n	8004b3c <menu+0x368c>
		if(dilSecim == 0) {
 8004a90:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <menu+0x3600>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d131      	bne.n	8004afc <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004a98:	4a16      	ldr	r2, [pc, #88]	; (8004af4 <menu+0x3644>)
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	f7fb fd61 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004aa2:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <menu+0x3648>)
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	2002      	movs	r0, #2
 8004aa8:	f7fb fd5c 	bl	8000564 <lcd_print>
 8004aac:	e034      	b.n	8004b18 <menu+0x3668>
 8004aae:	bf00      	nop
 8004ab0:	20000c2d 	.word	0x20000c2d
 8004ab4:	0800ced0 	.word	0x0800ced0
 8004ab8:	40010800 	.word	0x40010800
 8004abc:	20000c3b 	.word	0x20000c3b
 8004ac0:	20000c2b 	.word	0x20000c2b
 8004ac4:	20000b3c 	.word	0x20000b3c
 8004ac8:	20000c38 	.word	0x20000c38
 8004acc:	20000c0c 	.word	0x20000c0c
 8004ad0:	20000c2c 	.word	0x20000c2c
 8004ad4:	0800d618 	.word	0x0800d618
 8004ad8:	20000bd4 	.word	0x20000bd4
 8004adc:	0800d62c 	.word	0x0800d62c
 8004ae0:	0800d634 	.word	0x0800d634
 8004ae4:	20000be0 	.word	0x20000be0
 8004ae8:	2000094c 	.word	0x2000094c
 8004aec:	0800d648 	.word	0x0800d648
 8004af0:	20000bf4 	.word	0x20000bf4
 8004af4:	0800d65c 	.word	0x0800d65c
 8004af8:	0800d670 	.word	0x0800d670
		} else if(dilSecim == 1) {
 8004afc:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <menu+0x3690>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d109      	bne.n	8004b18 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004b04:	4a0f      	ldr	r2, [pc, #60]	; (8004b44 <menu+0x3694>)
 8004b06:	2101      	movs	r1, #1
 8004b08:	2001      	movs	r0, #1
 8004b0a:	f7fb fd2b 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004b0e:	4a0e      	ldr	r2, [pc, #56]	; (8004b48 <menu+0x3698>)
 8004b10:	2101      	movs	r1, #1
 8004b12:	2002      	movs	r0, #2
 8004b14:	f7fb fd26 	bl	8000564 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004b18:	2108      	movs	r1, #8
 8004b1a:	480c      	ldr	r0, [pc, #48]	; (8004b4c <menu+0x369c>)
 8004b1c:	f004 fe82 	bl	8009824 <HAL_GPIO_ReadPin>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d10a      	bne.n	8004b3c <menu+0x368c>
			menuGiris = 0;
 8004b26:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <menu+0x36a0>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004b2c:	f7fb fd46 	bl	80005bc <lcd_clear>
			HAL_Delay(500);
 8004b30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b34:	f004 f8a6 	bl	8008c84 <HAL_Delay>
			NVIC_SystemReset();
 8004b38:	f7fb fd88 	bl	800064c <__NVIC_SystemReset>
		}
	}
}
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000c2d 	.word	0x20000c2d
 8004b44:	0800d684 	.word	0x0800d684
 8004b48:	0800d698 	.word	0x0800d698
 8004b4c:	40010800 	.word	0x40010800
 8004b50:	20000c29 	.word	0x20000c29

08004b54 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004b5e:	48a9      	ldr	r0, [pc, #676]	; (8004e04 <loadMenuTexts+0x2b0>)
 8004b60:	f7fb fd8a 	bl	8000678 <copyText>
 8004b64:	4603      	mov	r3, r0
 8004b66:	4aa8      	ldr	r2, [pc, #672]	; (8004e08 <loadMenuTexts+0x2b4>)
 8004b68:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004b6a:	48a8      	ldr	r0, [pc, #672]	; (8004e0c <loadMenuTexts+0x2b8>)
 8004b6c:	f7fb fd84 	bl	8000678 <copyText>
 8004b70:	4603      	mov	r3, r0
 8004b72:	4aa7      	ldr	r2, [pc, #668]	; (8004e10 <loadMenuTexts+0x2bc>)
 8004b74:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004b76:	48a7      	ldr	r0, [pc, #668]	; (8004e14 <loadMenuTexts+0x2c0>)
 8004b78:	f7fb fd7e 	bl	8000678 <copyText>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	4aa6      	ldr	r2, [pc, #664]	; (8004e18 <loadMenuTexts+0x2c4>)
 8004b80:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004b82:	48a6      	ldr	r0, [pc, #664]	; (8004e1c <loadMenuTexts+0x2c8>)
 8004b84:	f7fb fd78 	bl	8000678 <copyText>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4aa5      	ldr	r2, [pc, #660]	; (8004e20 <loadMenuTexts+0x2cc>)
 8004b8c:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004b8e:	48a5      	ldr	r0, [pc, #660]	; (8004e24 <loadMenuTexts+0x2d0>)
 8004b90:	f7fb fd72 	bl	8000678 <copyText>
 8004b94:	4603      	mov	r3, r0
 8004b96:	4aa4      	ldr	r2, [pc, #656]	; (8004e28 <loadMenuTexts+0x2d4>)
 8004b98:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004b9a:	48a4      	ldr	r0, [pc, #656]	; (8004e2c <loadMenuTexts+0x2d8>)
 8004b9c:	f7fb fd6c 	bl	8000678 <copyText>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4aa3      	ldr	r2, [pc, #652]	; (8004e30 <loadMenuTexts+0x2dc>)
 8004ba4:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004ba6:	48a3      	ldr	r0, [pc, #652]	; (8004e34 <loadMenuTexts+0x2e0>)
 8004ba8:	f7fb fd66 	bl	8000678 <copyText>
 8004bac:	4603      	mov	r3, r0
 8004bae:	4aa2      	ldr	r2, [pc, #648]	; (8004e38 <loadMenuTexts+0x2e4>)
 8004bb0:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f040 82d1 	bne.w	800515c <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004bba:	48a0      	ldr	r0, [pc, #640]	; (8004e3c <loadMenuTexts+0x2e8>)
 8004bbc:	f7fb fd5c 	bl	8000678 <copyText>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	4a9f      	ldr	r2, [pc, #636]	; (8004e40 <loadMenuTexts+0x2ec>)
 8004bc4:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004bc6:	489f      	ldr	r0, [pc, #636]	; (8004e44 <loadMenuTexts+0x2f0>)
 8004bc8:	f7fb fd56 	bl	8000678 <copyText>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	4a9e      	ldr	r2, [pc, #632]	; (8004e48 <loadMenuTexts+0x2f4>)
 8004bd0:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004bd2:	489e      	ldr	r0, [pc, #632]	; (8004e4c <loadMenuTexts+0x2f8>)
 8004bd4:	f7fb fd50 	bl	8000678 <copyText>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	4a9d      	ldr	r2, [pc, #628]	; (8004e50 <loadMenuTexts+0x2fc>)
 8004bdc:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004bde:	489d      	ldr	r0, [pc, #628]	; (8004e54 <loadMenuTexts+0x300>)
 8004be0:	f7fb fd4a 	bl	8000678 <copyText>
 8004be4:	4603      	mov	r3, r0
 8004be6:	4a9c      	ldr	r2, [pc, #624]	; (8004e58 <loadMenuTexts+0x304>)
 8004be8:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004bea:	489c      	ldr	r0, [pc, #624]	; (8004e5c <loadMenuTexts+0x308>)
 8004bec:	f7fb fd44 	bl	8000678 <copyText>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	4a9b      	ldr	r2, [pc, #620]	; (8004e60 <loadMenuTexts+0x30c>)
 8004bf4:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004bf6:	489b      	ldr	r0, [pc, #620]	; (8004e64 <loadMenuTexts+0x310>)
 8004bf8:	f7fb fd3e 	bl	8000678 <copyText>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	4a9a      	ldr	r2, [pc, #616]	; (8004e68 <loadMenuTexts+0x314>)
 8004c00:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004c02:	489a      	ldr	r0, [pc, #616]	; (8004e6c <loadMenuTexts+0x318>)
 8004c04:	f7fb fd38 	bl	8000678 <copyText>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4a99      	ldr	r2, [pc, #612]	; (8004e70 <loadMenuTexts+0x31c>)
 8004c0c:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004c0e:	4899      	ldr	r0, [pc, #612]	; (8004e74 <loadMenuTexts+0x320>)
 8004c10:	f7fb fd32 	bl	8000678 <copyText>
 8004c14:	4603      	mov	r3, r0
 8004c16:	4a98      	ldr	r2, [pc, #608]	; (8004e78 <loadMenuTexts+0x324>)
 8004c18:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004c1a:	4898      	ldr	r0, [pc, #608]	; (8004e7c <loadMenuTexts+0x328>)
 8004c1c:	f7fb fd2c 	bl	8000678 <copyText>
 8004c20:	4603      	mov	r3, r0
 8004c22:	4a97      	ldr	r2, [pc, #604]	; (8004e80 <loadMenuTexts+0x32c>)
 8004c24:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004c26:	4897      	ldr	r0, [pc, #604]	; (8004e84 <loadMenuTexts+0x330>)
 8004c28:	f7fb fd26 	bl	8000678 <copyText>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4a96      	ldr	r2, [pc, #600]	; (8004e88 <loadMenuTexts+0x334>)
 8004c30:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004c32:	4896      	ldr	r0, [pc, #600]	; (8004e8c <loadMenuTexts+0x338>)
 8004c34:	f7fb fd20 	bl	8000678 <copyText>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	4a95      	ldr	r2, [pc, #596]	; (8004e90 <loadMenuTexts+0x33c>)
 8004c3c:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004c3e:	4895      	ldr	r0, [pc, #596]	; (8004e94 <loadMenuTexts+0x340>)
 8004c40:	f7fb fd1a 	bl	8000678 <copyText>
 8004c44:	4603      	mov	r3, r0
 8004c46:	4a94      	ldr	r2, [pc, #592]	; (8004e98 <loadMenuTexts+0x344>)
 8004c48:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004c4a:	4894      	ldr	r0, [pc, #592]	; (8004e9c <loadMenuTexts+0x348>)
 8004c4c:	f7fb fd14 	bl	8000678 <copyText>
 8004c50:	4603      	mov	r3, r0
 8004c52:	4a93      	ldr	r2, [pc, #588]	; (8004ea0 <loadMenuTexts+0x34c>)
 8004c54:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004c56:	4893      	ldr	r0, [pc, #588]	; (8004ea4 <loadMenuTexts+0x350>)
 8004c58:	f7fb fd0e 	bl	8000678 <copyText>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4a92      	ldr	r2, [pc, #584]	; (8004ea8 <loadMenuTexts+0x354>)
 8004c60:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004c62:	4892      	ldr	r0, [pc, #584]	; (8004eac <loadMenuTexts+0x358>)
 8004c64:	f7fb fd08 	bl	8000678 <copyText>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4a91      	ldr	r2, [pc, #580]	; (8004eb0 <loadMenuTexts+0x35c>)
 8004c6c:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004c6e:	4891      	ldr	r0, [pc, #580]	; (8004eb4 <loadMenuTexts+0x360>)
 8004c70:	f7fb fd02 	bl	8000678 <copyText>
 8004c74:	4603      	mov	r3, r0
 8004c76:	4a90      	ldr	r2, [pc, #576]	; (8004eb8 <loadMenuTexts+0x364>)
 8004c78:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004c7a:	4890      	ldr	r0, [pc, #576]	; (8004ebc <loadMenuTexts+0x368>)
 8004c7c:	f7fb fcfc 	bl	8000678 <copyText>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4a8f      	ldr	r2, [pc, #572]	; (8004ec0 <loadMenuTexts+0x36c>)
 8004c84:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004c86:	488f      	ldr	r0, [pc, #572]	; (8004ec4 <loadMenuTexts+0x370>)
 8004c88:	f7fb fcf6 	bl	8000678 <copyText>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	4a8e      	ldr	r2, [pc, #568]	; (8004ec8 <loadMenuTexts+0x374>)
 8004c90:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004c92:	488e      	ldr	r0, [pc, #568]	; (8004ecc <loadMenuTexts+0x378>)
 8004c94:	f7fb fcf0 	bl	8000678 <copyText>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	4a8d      	ldr	r2, [pc, #564]	; (8004ed0 <loadMenuTexts+0x37c>)
 8004c9c:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004c9e:	488d      	ldr	r0, [pc, #564]	; (8004ed4 <loadMenuTexts+0x380>)
 8004ca0:	f7fb fcea 	bl	8000678 <copyText>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4a8c      	ldr	r2, [pc, #560]	; (8004ed8 <loadMenuTexts+0x384>)
 8004ca8:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004caa:	488c      	ldr	r0, [pc, #560]	; (8004edc <loadMenuTexts+0x388>)
 8004cac:	f7fb fce4 	bl	8000678 <copyText>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4a8b      	ldr	r2, [pc, #556]	; (8004ee0 <loadMenuTexts+0x38c>)
 8004cb4:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004cb6:	488b      	ldr	r0, [pc, #556]	; (8004ee4 <loadMenuTexts+0x390>)
 8004cb8:	f7fb fcde 	bl	8000678 <copyText>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4a8a      	ldr	r2, [pc, #552]	; (8004ee8 <loadMenuTexts+0x394>)
 8004cc0:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004cc2:	488a      	ldr	r0, [pc, #552]	; (8004eec <loadMenuTexts+0x398>)
 8004cc4:	f7fb fcd8 	bl	8000678 <copyText>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4a89      	ldr	r2, [pc, #548]	; (8004ef0 <loadMenuTexts+0x39c>)
 8004ccc:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004cce:	4889      	ldr	r0, [pc, #548]	; (8004ef4 <loadMenuTexts+0x3a0>)
 8004cd0:	f7fb fcd2 	bl	8000678 <copyText>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4a88      	ldr	r2, [pc, #544]	; (8004ef8 <loadMenuTexts+0x3a4>)
 8004cd8:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004cda:	4888      	ldr	r0, [pc, #544]	; (8004efc <loadMenuTexts+0x3a8>)
 8004cdc:	f7fb fccc 	bl	8000678 <copyText>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4a87      	ldr	r2, [pc, #540]	; (8004f00 <loadMenuTexts+0x3ac>)
 8004ce4:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004ce6:	4887      	ldr	r0, [pc, #540]	; (8004f04 <loadMenuTexts+0x3b0>)
 8004ce8:	f7fb fcc6 	bl	8000678 <copyText>
 8004cec:	4603      	mov	r3, r0
 8004cee:	4a86      	ldr	r2, [pc, #536]	; (8004f08 <loadMenuTexts+0x3b4>)
 8004cf0:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004cf2:	4886      	ldr	r0, [pc, #536]	; (8004f0c <loadMenuTexts+0x3b8>)
 8004cf4:	f7fb fcc0 	bl	8000678 <copyText>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4a85      	ldr	r2, [pc, #532]	; (8004f10 <loadMenuTexts+0x3bc>)
 8004cfc:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004cfe:	4885      	ldr	r0, [pc, #532]	; (8004f14 <loadMenuTexts+0x3c0>)
 8004d00:	f7fb fcba 	bl	8000678 <copyText>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4a84      	ldr	r2, [pc, #528]	; (8004f18 <loadMenuTexts+0x3c4>)
 8004d08:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004d0a:	4884      	ldr	r0, [pc, #528]	; (8004f1c <loadMenuTexts+0x3c8>)
 8004d0c:	f7fb fcb4 	bl	8000678 <copyText>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4a83      	ldr	r2, [pc, #524]	; (8004f20 <loadMenuTexts+0x3cc>)
 8004d14:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004d16:	4883      	ldr	r0, [pc, #524]	; (8004f24 <loadMenuTexts+0x3d0>)
 8004d18:	f7fb fcae 	bl	8000678 <copyText>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4a82      	ldr	r2, [pc, #520]	; (8004f28 <loadMenuTexts+0x3d4>)
 8004d20:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004d22:	4882      	ldr	r0, [pc, #520]	; (8004f2c <loadMenuTexts+0x3d8>)
 8004d24:	f7fb fca8 	bl	8000678 <copyText>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4a81      	ldr	r2, [pc, #516]	; (8004f30 <loadMenuTexts+0x3dc>)
 8004d2c:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004d2e:	4881      	ldr	r0, [pc, #516]	; (8004f34 <loadMenuTexts+0x3e0>)
 8004d30:	f7fb fca2 	bl	8000678 <copyText>
 8004d34:	4603      	mov	r3, r0
 8004d36:	4a80      	ldr	r2, [pc, #512]	; (8004f38 <loadMenuTexts+0x3e4>)
 8004d38:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004d3a:	4880      	ldr	r0, [pc, #512]	; (8004f3c <loadMenuTexts+0x3e8>)
 8004d3c:	f7fb fc9c 	bl	8000678 <copyText>
 8004d40:	4603      	mov	r3, r0
 8004d42:	4a7f      	ldr	r2, [pc, #508]	; (8004f40 <loadMenuTexts+0x3ec>)
 8004d44:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004d46:	487f      	ldr	r0, [pc, #508]	; (8004f44 <loadMenuTexts+0x3f0>)
 8004d48:	f7fb fc96 	bl	8000678 <copyText>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4a7e      	ldr	r2, [pc, #504]	; (8004f48 <loadMenuTexts+0x3f4>)
 8004d50:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004d52:	487e      	ldr	r0, [pc, #504]	; (8004f4c <loadMenuTexts+0x3f8>)
 8004d54:	f7fb fc90 	bl	8000678 <copyText>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4a7d      	ldr	r2, [pc, #500]	; (8004f50 <loadMenuTexts+0x3fc>)
 8004d5c:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004d5e:	487d      	ldr	r0, [pc, #500]	; (8004f54 <loadMenuTexts+0x400>)
 8004d60:	f7fb fc8a 	bl	8000678 <copyText>
 8004d64:	4603      	mov	r3, r0
 8004d66:	4a7c      	ldr	r2, [pc, #496]	; (8004f58 <loadMenuTexts+0x404>)
 8004d68:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004d6a:	487c      	ldr	r0, [pc, #496]	; (8004f5c <loadMenuTexts+0x408>)
 8004d6c:	f7fb fc84 	bl	8000678 <copyText>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4a7b      	ldr	r2, [pc, #492]	; (8004f60 <loadMenuTexts+0x40c>)
 8004d74:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004d76:	487b      	ldr	r0, [pc, #492]	; (8004f64 <loadMenuTexts+0x410>)
 8004d78:	f7fb fc7e 	bl	8000678 <copyText>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4a7a      	ldr	r2, [pc, #488]	; (8004f68 <loadMenuTexts+0x414>)
 8004d80:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004d82:	487a      	ldr	r0, [pc, #488]	; (8004f6c <loadMenuTexts+0x418>)
 8004d84:	f7fb fc78 	bl	8000678 <copyText>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4a79      	ldr	r2, [pc, #484]	; (8004f70 <loadMenuTexts+0x41c>)
 8004d8c:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004d8e:	4879      	ldr	r0, [pc, #484]	; (8004f74 <loadMenuTexts+0x420>)
 8004d90:	f7fb fc72 	bl	8000678 <copyText>
 8004d94:	4603      	mov	r3, r0
 8004d96:	4a78      	ldr	r2, [pc, #480]	; (8004f78 <loadMenuTexts+0x424>)
 8004d98:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004d9a:	4878      	ldr	r0, [pc, #480]	; (8004f7c <loadMenuTexts+0x428>)
 8004d9c:	f7fb fc6c 	bl	8000678 <copyText>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4a77      	ldr	r2, [pc, #476]	; (8004f80 <loadMenuTexts+0x42c>)
 8004da4:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004da6:	4877      	ldr	r0, [pc, #476]	; (8004f84 <loadMenuTexts+0x430>)
 8004da8:	f7fb fc66 	bl	8000678 <copyText>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4a76      	ldr	r2, [pc, #472]	; (8004f88 <loadMenuTexts+0x434>)
 8004db0:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004db2:	4876      	ldr	r0, [pc, #472]	; (8004f8c <loadMenuTexts+0x438>)
 8004db4:	f7fb fc60 	bl	8000678 <copyText>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4a75      	ldr	r2, [pc, #468]	; (8004f90 <loadMenuTexts+0x43c>)
 8004dbc:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004dbe:	4875      	ldr	r0, [pc, #468]	; (8004f94 <loadMenuTexts+0x440>)
 8004dc0:	f7fb fc5a 	bl	8000678 <copyText>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4a74      	ldr	r2, [pc, #464]	; (8004f98 <loadMenuTexts+0x444>)
 8004dc8:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004dca:	4874      	ldr	r0, [pc, #464]	; (8004f9c <loadMenuTexts+0x448>)
 8004dcc:	f7fb fc54 	bl	8000678 <copyText>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4a73      	ldr	r2, [pc, #460]	; (8004fa0 <loadMenuTexts+0x44c>)
 8004dd4:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004dd6:	4873      	ldr	r0, [pc, #460]	; (8004fa4 <loadMenuTexts+0x450>)
 8004dd8:	f7fb fc4e 	bl	8000678 <copyText>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4a72      	ldr	r2, [pc, #456]	; (8004fa8 <loadMenuTexts+0x454>)
 8004de0:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004de2:	4872      	ldr	r0, [pc, #456]	; (8004fac <loadMenuTexts+0x458>)
 8004de4:	f7fb fc48 	bl	8000678 <copyText>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4a71      	ldr	r2, [pc, #452]	; (8004fb0 <loadMenuTexts+0x45c>)
 8004dec:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004dee:	4871      	ldr	r0, [pc, #452]	; (8004fb4 <loadMenuTexts+0x460>)
 8004df0:	f7fb fc42 	bl	8000678 <copyText>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4a70      	ldr	r2, [pc, #448]	; (8004fb8 <loadMenuTexts+0x464>)
 8004df8:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004dfa:	4870      	ldr	r0, [pc, #448]	; (8004fbc <loadMenuTexts+0x468>)
 8004dfc:	f7fb fc3c 	bl	8000678 <copyText>
 8004e00:	4603      	mov	r3, r0
 8004e02:	e0dd      	b.n	8004fc0 <loadMenuTexts+0x46c>
 8004e04:	20000000 	.word	0x20000000
 8004e08:	20000c70 	.word	0x20000c70
 8004e0c:	20000010 	.word	0x20000010
 8004e10:	20000c74 	.word	0x20000c74
 8004e14:	20000020 	.word	0x20000020
 8004e18:	20000ccc 	.word	0x20000ccc
 8004e1c:	20000030 	.word	0x20000030
 8004e20:	20000cfc 	.word	0x20000cfc
 8004e24:	20000040 	.word	0x20000040
 8004e28:	20000d04 	.word	0x20000d04
 8004e2c:	20000050 	.word	0x20000050
 8004e30:	20000d7c 	.word	0x20000d7c
 8004e34:	20000060 	.word	0x20000060
 8004e38:	20000d80 	.word	0x20000d80
 8004e3c:	20000070 	.word	0x20000070
 8004e40:	20000c78 	.word	0x20000c78
 8004e44:	20000080 	.word	0x20000080
 8004e48:	20000c7c 	.word	0x20000c7c
 8004e4c:	20000090 	.word	0x20000090
 8004e50:	20000c80 	.word	0x20000c80
 8004e54:	200000a0 	.word	0x200000a0
 8004e58:	20000c84 	.word	0x20000c84
 8004e5c:	200000b0 	.word	0x200000b0
 8004e60:	20000c88 	.word	0x20000c88
 8004e64:	200000c0 	.word	0x200000c0
 8004e68:	20000c8c 	.word	0x20000c8c
 8004e6c:	200000d0 	.word	0x200000d0
 8004e70:	20000c90 	.word	0x20000c90
 8004e74:	200000e0 	.word	0x200000e0
 8004e78:	20000c94 	.word	0x20000c94
 8004e7c:	200000f0 	.word	0x200000f0
 8004e80:	20000c98 	.word	0x20000c98
 8004e84:	20000100 	.word	0x20000100
 8004e88:	20000c9c 	.word	0x20000c9c
 8004e8c:	20000110 	.word	0x20000110
 8004e90:	20000ca0 	.word	0x20000ca0
 8004e94:	20000120 	.word	0x20000120
 8004e98:	20000ca4 	.word	0x20000ca4
 8004e9c:	20000130 	.word	0x20000130
 8004ea0:	20000ca8 	.word	0x20000ca8
 8004ea4:	20000140 	.word	0x20000140
 8004ea8:	20000cac 	.word	0x20000cac
 8004eac:	20000150 	.word	0x20000150
 8004eb0:	20000cb0 	.word	0x20000cb0
 8004eb4:	20000160 	.word	0x20000160
 8004eb8:	20000cb4 	.word	0x20000cb4
 8004ebc:	20000170 	.word	0x20000170
 8004ec0:	20000cb8 	.word	0x20000cb8
 8004ec4:	20000180 	.word	0x20000180
 8004ec8:	20000cbc 	.word	0x20000cbc
 8004ecc:	20000190 	.word	0x20000190
 8004ed0:	20000cc0 	.word	0x20000cc0
 8004ed4:	200001a0 	.word	0x200001a0
 8004ed8:	20000cc4 	.word	0x20000cc4
 8004edc:	200001b0 	.word	0x200001b0
 8004ee0:	20000cc8 	.word	0x20000cc8
 8004ee4:	200001c0 	.word	0x200001c0
 8004ee8:	20000cd0 	.word	0x20000cd0
 8004eec:	200001d0 	.word	0x200001d0
 8004ef0:	20000cd4 	.word	0x20000cd4
 8004ef4:	200001e0 	.word	0x200001e0
 8004ef8:	20000cd8 	.word	0x20000cd8
 8004efc:	200001f0 	.word	0x200001f0
 8004f00:	20000cdc 	.word	0x20000cdc
 8004f04:	20000200 	.word	0x20000200
 8004f08:	20000ce0 	.word	0x20000ce0
 8004f0c:	20000210 	.word	0x20000210
 8004f10:	20000ce4 	.word	0x20000ce4
 8004f14:	20000220 	.word	0x20000220
 8004f18:	20000ce8 	.word	0x20000ce8
 8004f1c:	20000230 	.word	0x20000230
 8004f20:	20000cec 	.word	0x20000cec
 8004f24:	20000240 	.word	0x20000240
 8004f28:	20000cf0 	.word	0x20000cf0
 8004f2c:	20000250 	.word	0x20000250
 8004f30:	20000cf4 	.word	0x20000cf4
 8004f34:	20000260 	.word	0x20000260
 8004f38:	20000cf8 	.word	0x20000cf8
 8004f3c:	20000270 	.word	0x20000270
 8004f40:	20000d00 	.word	0x20000d00
 8004f44:	20000280 	.word	0x20000280
 8004f48:	20000d08 	.word	0x20000d08
 8004f4c:	20000290 	.word	0x20000290
 8004f50:	20000d0c 	.word	0x20000d0c
 8004f54:	200002a0 	.word	0x200002a0
 8004f58:	20000d10 	.word	0x20000d10
 8004f5c:	200002b0 	.word	0x200002b0
 8004f60:	20000d14 	.word	0x20000d14
 8004f64:	200002c0 	.word	0x200002c0
 8004f68:	20000d18 	.word	0x20000d18
 8004f6c:	200002d0 	.word	0x200002d0
 8004f70:	20000d1c 	.word	0x20000d1c
 8004f74:	200002e0 	.word	0x200002e0
 8004f78:	20000d20 	.word	0x20000d20
 8004f7c:	200002f0 	.word	0x200002f0
 8004f80:	20000d24 	.word	0x20000d24
 8004f84:	20000300 	.word	0x20000300
 8004f88:	20000d28 	.word	0x20000d28
 8004f8c:	20000310 	.word	0x20000310
 8004f90:	20000d2c 	.word	0x20000d2c
 8004f94:	20000320 	.word	0x20000320
 8004f98:	20000d30 	.word	0x20000d30
 8004f9c:	20000330 	.word	0x20000330
 8004fa0:	20000d34 	.word	0x20000d34
 8004fa4:	20000340 	.word	0x20000340
 8004fa8:	20000d38 	.word	0x20000d38
 8004fac:	20000350 	.word	0x20000350
 8004fb0:	20000d3c 	.word	0x20000d3c
 8004fb4:	20000360 	.word	0x20000360
 8004fb8:	20000d40 	.word	0x20000d40
 8004fbc:	20000370 	.word	0x20000370
 8004fc0:	4a3d      	ldr	r2, [pc, #244]	; (80050b8 <loadMenuTexts+0x564>)
 8004fc2:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8004fc4:	483d      	ldr	r0, [pc, #244]	; (80050bc <loadMenuTexts+0x568>)
 8004fc6:	f7fb fb57 	bl	8000678 <copyText>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4a3c      	ldr	r2, [pc, #240]	; (80050c0 <loadMenuTexts+0x56c>)
 8004fce:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8004fd0:	483c      	ldr	r0, [pc, #240]	; (80050c4 <loadMenuTexts+0x570>)
 8004fd2:	f7fb fb51 	bl	8000678 <copyText>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4a3b      	ldr	r2, [pc, #236]	; (80050c8 <loadMenuTexts+0x574>)
 8004fda:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8004fdc:	483b      	ldr	r0, [pc, #236]	; (80050cc <loadMenuTexts+0x578>)
 8004fde:	f7fb fb4b 	bl	8000678 <copyText>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	4a3a      	ldr	r2, [pc, #232]	; (80050d0 <loadMenuTexts+0x57c>)
 8004fe6:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8004fe8:	483a      	ldr	r0, [pc, #232]	; (80050d4 <loadMenuTexts+0x580>)
 8004fea:	f7fb fb45 	bl	8000678 <copyText>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4a39      	ldr	r2, [pc, #228]	; (80050d8 <loadMenuTexts+0x584>)
 8004ff2:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8004ff4:	4839      	ldr	r0, [pc, #228]	; (80050dc <loadMenuTexts+0x588>)
 8004ff6:	f7fb fb3f 	bl	8000678 <copyText>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4a38      	ldr	r2, [pc, #224]	; (80050e0 <loadMenuTexts+0x58c>)
 8004ffe:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8005000:	4838      	ldr	r0, [pc, #224]	; (80050e4 <loadMenuTexts+0x590>)
 8005002:	f7fb fb39 	bl	8000678 <copyText>
 8005006:	4603      	mov	r3, r0
 8005008:	4a37      	ldr	r2, [pc, #220]	; (80050e8 <loadMenuTexts+0x594>)
 800500a:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 800500c:	4837      	ldr	r0, [pc, #220]	; (80050ec <loadMenuTexts+0x598>)
 800500e:	f7fb fb33 	bl	8000678 <copyText>
 8005012:	4603      	mov	r3, r0
 8005014:	4a36      	ldr	r2, [pc, #216]	; (80050f0 <loadMenuTexts+0x59c>)
 8005016:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8005018:	4836      	ldr	r0, [pc, #216]	; (80050f4 <loadMenuTexts+0x5a0>)
 800501a:	f7fb fb2d 	bl	8000678 <copyText>
 800501e:	4603      	mov	r3, r0
 8005020:	4a35      	ldr	r2, [pc, #212]	; (80050f8 <loadMenuTexts+0x5a4>)
 8005022:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8005024:	4835      	ldr	r0, [pc, #212]	; (80050fc <loadMenuTexts+0x5a8>)
 8005026:	f7fb fb27 	bl	8000678 <copyText>
 800502a:	4603      	mov	r3, r0
 800502c:	4a34      	ldr	r2, [pc, #208]	; (8005100 <loadMenuTexts+0x5ac>)
 800502e:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8005030:	4834      	ldr	r0, [pc, #208]	; (8005104 <loadMenuTexts+0x5b0>)
 8005032:	f7fb fb21 	bl	8000678 <copyText>
 8005036:	4603      	mov	r3, r0
 8005038:	4a33      	ldr	r2, [pc, #204]	; (8005108 <loadMenuTexts+0x5b4>)
 800503a:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 800503c:	4833      	ldr	r0, [pc, #204]	; (800510c <loadMenuTexts+0x5b8>)
 800503e:	f7fb fb1b 	bl	8000678 <copyText>
 8005042:	4603      	mov	r3, r0
 8005044:	4a32      	ldr	r2, [pc, #200]	; (8005110 <loadMenuTexts+0x5bc>)
 8005046:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8005048:	4832      	ldr	r0, [pc, #200]	; (8005114 <loadMenuTexts+0x5c0>)
 800504a:	f7fb fb15 	bl	8000678 <copyText>
 800504e:	4603      	mov	r3, r0
 8005050:	4a31      	ldr	r2, [pc, #196]	; (8005118 <loadMenuTexts+0x5c4>)
 8005052:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8005054:	4831      	ldr	r0, [pc, #196]	; (800511c <loadMenuTexts+0x5c8>)
 8005056:	f7fb fb0f 	bl	8000678 <copyText>
 800505a:	4603      	mov	r3, r0
 800505c:	4a30      	ldr	r2, [pc, #192]	; (8005120 <loadMenuTexts+0x5cc>)
 800505e:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8005060:	4830      	ldr	r0, [pc, #192]	; (8005124 <loadMenuTexts+0x5d0>)
 8005062:	f7fb fb09 	bl	8000678 <copyText>
 8005066:	4603      	mov	r3, r0
 8005068:	4a2f      	ldr	r2, [pc, #188]	; (8005128 <loadMenuTexts+0x5d4>)
 800506a:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 800506c:	482f      	ldr	r0, [pc, #188]	; (800512c <loadMenuTexts+0x5d8>)
 800506e:	f7fb fb03 	bl	8000678 <copyText>
 8005072:	4603      	mov	r3, r0
 8005074:	4a2e      	ldr	r2, [pc, #184]	; (8005130 <loadMenuTexts+0x5dc>)
 8005076:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8005078:	482e      	ldr	r0, [pc, #184]	; (8005134 <loadMenuTexts+0x5e0>)
 800507a:	f7fb fafd 	bl	8000678 <copyText>
 800507e:	4603      	mov	r3, r0
 8005080:	4a2d      	ldr	r2, [pc, #180]	; (8005138 <loadMenuTexts+0x5e4>)
 8005082:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8005084:	482d      	ldr	r0, [pc, #180]	; (800513c <loadMenuTexts+0x5e8>)
 8005086:	f7fb faf7 	bl	8000678 <copyText>
 800508a:	4603      	mov	r3, r0
 800508c:	4a2c      	ldr	r2, [pc, #176]	; (8005140 <loadMenuTexts+0x5ec>)
 800508e:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8005090:	482c      	ldr	r0, [pc, #176]	; (8005144 <loadMenuTexts+0x5f0>)
 8005092:	f7fb faf1 	bl	8000678 <copyText>
 8005096:	4603      	mov	r3, r0
 8005098:	4a2b      	ldr	r2, [pc, #172]	; (8005148 <loadMenuTexts+0x5f4>)
 800509a:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 800509c:	482b      	ldr	r0, [pc, #172]	; (800514c <loadMenuTexts+0x5f8>)
 800509e:	f7fb faeb 	bl	8000678 <copyText>
 80050a2:	4603      	mov	r3, r0
 80050a4:	4a2a      	ldr	r2, [pc, #168]	; (8005150 <loadMenuTexts+0x5fc>)
 80050a6:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 80050a8:	482a      	ldr	r0, [pc, #168]	; (8005154 <loadMenuTexts+0x600>)
 80050aa:	f7fb fae5 	bl	8000678 <copyText>
 80050ae:	4603      	mov	r3, r0
 80050b0:	4a29      	ldr	r2, [pc, #164]	; (8005158 <loadMenuTexts+0x604>)
 80050b2:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 80050b4:	e2d3      	b.n	800565e <loadMenuTexts+0xb0a>
 80050b6:	bf00      	nop
 80050b8:	20000d44 	.word	0x20000d44
 80050bc:	20000380 	.word	0x20000380
 80050c0:	20000d48 	.word	0x20000d48
 80050c4:	20000390 	.word	0x20000390
 80050c8:	20000d4c 	.word	0x20000d4c
 80050cc:	200003a0 	.word	0x200003a0
 80050d0:	20000d50 	.word	0x20000d50
 80050d4:	200003b0 	.word	0x200003b0
 80050d8:	20000d54 	.word	0x20000d54
 80050dc:	200003c0 	.word	0x200003c0
 80050e0:	20000d58 	.word	0x20000d58
 80050e4:	200003d0 	.word	0x200003d0
 80050e8:	20000d5c 	.word	0x20000d5c
 80050ec:	200003e0 	.word	0x200003e0
 80050f0:	20000d60 	.word	0x20000d60
 80050f4:	200003f0 	.word	0x200003f0
 80050f8:	20000d64 	.word	0x20000d64
 80050fc:	20000400 	.word	0x20000400
 8005100:	20000d68 	.word	0x20000d68
 8005104:	20000410 	.word	0x20000410
 8005108:	20000d6c 	.word	0x20000d6c
 800510c:	20000420 	.word	0x20000420
 8005110:	20000d70 	.word	0x20000d70
 8005114:	20000430 	.word	0x20000430
 8005118:	20000d74 	.word	0x20000d74
 800511c:	20000440 	.word	0x20000440
 8005120:	20000d78 	.word	0x20000d78
 8005124:	20000450 	.word	0x20000450
 8005128:	20000d84 	.word	0x20000d84
 800512c:	20000460 	.word	0x20000460
 8005130:	20000d88 	.word	0x20000d88
 8005134:	20000470 	.word	0x20000470
 8005138:	20000d8c 	.word	0x20000d8c
 800513c:	20000480 	.word	0x20000480
 8005140:	20000d90 	.word	0x20000d90
 8005144:	20000490 	.word	0x20000490
 8005148:	20000d94 	.word	0x20000d94
 800514c:	200004a0 	.word	0x200004a0
 8005150:	20000d98 	.word	0x20000d98
 8005154:	200004b0 	.word	0x200004b0
 8005158:	20000d9c 	.word	0x20000d9c
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 800515c:	48a9      	ldr	r0, [pc, #676]	; (8005404 <loadMenuTexts+0x8b0>)
 800515e:	f7fb fa8b 	bl	8000678 <copyText>
 8005162:	4603      	mov	r3, r0
 8005164:	4aa8      	ldr	r2, [pc, #672]	; (8005408 <loadMenuTexts+0x8b4>)
 8005166:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8005168:	48a8      	ldr	r0, [pc, #672]	; (800540c <loadMenuTexts+0x8b8>)
 800516a:	f7fb fa85 	bl	8000678 <copyText>
 800516e:	4603      	mov	r3, r0
 8005170:	4aa7      	ldr	r2, [pc, #668]	; (8005410 <loadMenuTexts+0x8bc>)
 8005172:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8005174:	48a7      	ldr	r0, [pc, #668]	; (8005414 <loadMenuTexts+0x8c0>)
 8005176:	f7fb fa7f 	bl	8000678 <copyText>
 800517a:	4603      	mov	r3, r0
 800517c:	4aa6      	ldr	r2, [pc, #664]	; (8005418 <loadMenuTexts+0x8c4>)
 800517e:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8005180:	48a6      	ldr	r0, [pc, #664]	; (800541c <loadMenuTexts+0x8c8>)
 8005182:	f7fb fa79 	bl	8000678 <copyText>
 8005186:	4603      	mov	r3, r0
 8005188:	4aa5      	ldr	r2, [pc, #660]	; (8005420 <loadMenuTexts+0x8cc>)
 800518a:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 800518c:	48a5      	ldr	r0, [pc, #660]	; (8005424 <loadMenuTexts+0x8d0>)
 800518e:	f7fb fa73 	bl	8000678 <copyText>
 8005192:	4603      	mov	r3, r0
 8005194:	4aa4      	ldr	r2, [pc, #656]	; (8005428 <loadMenuTexts+0x8d4>)
 8005196:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8005198:	48a4      	ldr	r0, [pc, #656]	; (800542c <loadMenuTexts+0x8d8>)
 800519a:	f7fb fa6d 	bl	8000678 <copyText>
 800519e:	4603      	mov	r3, r0
 80051a0:	4aa3      	ldr	r2, [pc, #652]	; (8005430 <loadMenuTexts+0x8dc>)
 80051a2:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 80051a4:	48a3      	ldr	r0, [pc, #652]	; (8005434 <loadMenuTexts+0x8e0>)
 80051a6:	f7fb fa67 	bl	8000678 <copyText>
 80051aa:	4603      	mov	r3, r0
 80051ac:	4aa2      	ldr	r2, [pc, #648]	; (8005438 <loadMenuTexts+0x8e4>)
 80051ae:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 80051b0:	48a2      	ldr	r0, [pc, #648]	; (800543c <loadMenuTexts+0x8e8>)
 80051b2:	f7fb fa61 	bl	8000678 <copyText>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4aa1      	ldr	r2, [pc, #644]	; (8005440 <loadMenuTexts+0x8ec>)
 80051ba:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 80051bc:	48a1      	ldr	r0, [pc, #644]	; (8005444 <loadMenuTexts+0x8f0>)
 80051be:	f7fb fa5b 	bl	8000678 <copyText>
 80051c2:	4603      	mov	r3, r0
 80051c4:	4aa0      	ldr	r2, [pc, #640]	; (8005448 <loadMenuTexts+0x8f4>)
 80051c6:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 80051c8:	48a0      	ldr	r0, [pc, #640]	; (800544c <loadMenuTexts+0x8f8>)
 80051ca:	f7fb fa55 	bl	8000678 <copyText>
 80051ce:	4603      	mov	r3, r0
 80051d0:	4a9f      	ldr	r2, [pc, #636]	; (8005450 <loadMenuTexts+0x8fc>)
 80051d2:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 80051d4:	489f      	ldr	r0, [pc, #636]	; (8005454 <loadMenuTexts+0x900>)
 80051d6:	f7fb fa4f 	bl	8000678 <copyText>
 80051da:	4603      	mov	r3, r0
 80051dc:	4a9e      	ldr	r2, [pc, #632]	; (8005458 <loadMenuTexts+0x904>)
 80051de:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 80051e0:	489e      	ldr	r0, [pc, #632]	; (800545c <loadMenuTexts+0x908>)
 80051e2:	f7fb fa49 	bl	8000678 <copyText>
 80051e6:	4603      	mov	r3, r0
 80051e8:	4a9d      	ldr	r2, [pc, #628]	; (8005460 <loadMenuTexts+0x90c>)
 80051ea:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 80051ec:	489d      	ldr	r0, [pc, #628]	; (8005464 <loadMenuTexts+0x910>)
 80051ee:	f7fb fa43 	bl	8000678 <copyText>
 80051f2:	4603      	mov	r3, r0
 80051f4:	4a9c      	ldr	r2, [pc, #624]	; (8005468 <loadMenuTexts+0x914>)
 80051f6:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 80051f8:	489c      	ldr	r0, [pc, #624]	; (800546c <loadMenuTexts+0x918>)
 80051fa:	f7fb fa3d 	bl	8000678 <copyText>
 80051fe:	4603      	mov	r3, r0
 8005200:	4a9b      	ldr	r2, [pc, #620]	; (8005470 <loadMenuTexts+0x91c>)
 8005202:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8005204:	489b      	ldr	r0, [pc, #620]	; (8005474 <loadMenuTexts+0x920>)
 8005206:	f7fb fa37 	bl	8000678 <copyText>
 800520a:	4603      	mov	r3, r0
 800520c:	4a9a      	ldr	r2, [pc, #616]	; (8005478 <loadMenuTexts+0x924>)
 800520e:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8005210:	489a      	ldr	r0, [pc, #616]	; (800547c <loadMenuTexts+0x928>)
 8005212:	f7fb fa31 	bl	8000678 <copyText>
 8005216:	4603      	mov	r3, r0
 8005218:	4a99      	ldr	r2, [pc, #612]	; (8005480 <loadMenuTexts+0x92c>)
 800521a:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 800521c:	4899      	ldr	r0, [pc, #612]	; (8005484 <loadMenuTexts+0x930>)
 800521e:	f7fb fa2b 	bl	8000678 <copyText>
 8005222:	4603      	mov	r3, r0
 8005224:	4a98      	ldr	r2, [pc, #608]	; (8005488 <loadMenuTexts+0x934>)
 8005226:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8005228:	4898      	ldr	r0, [pc, #608]	; (800548c <loadMenuTexts+0x938>)
 800522a:	f7fb fa25 	bl	8000678 <copyText>
 800522e:	4603      	mov	r3, r0
 8005230:	4a97      	ldr	r2, [pc, #604]	; (8005490 <loadMenuTexts+0x93c>)
 8005232:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8005234:	4897      	ldr	r0, [pc, #604]	; (8005494 <loadMenuTexts+0x940>)
 8005236:	f7fb fa1f 	bl	8000678 <copyText>
 800523a:	4603      	mov	r3, r0
 800523c:	4a96      	ldr	r2, [pc, #600]	; (8005498 <loadMenuTexts+0x944>)
 800523e:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8005240:	4896      	ldr	r0, [pc, #600]	; (800549c <loadMenuTexts+0x948>)
 8005242:	f7fb fa19 	bl	8000678 <copyText>
 8005246:	4603      	mov	r3, r0
 8005248:	4a95      	ldr	r2, [pc, #596]	; (80054a0 <loadMenuTexts+0x94c>)
 800524a:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 800524c:	4895      	ldr	r0, [pc, #596]	; (80054a4 <loadMenuTexts+0x950>)
 800524e:	f7fb fa13 	bl	8000678 <copyText>
 8005252:	4603      	mov	r3, r0
 8005254:	4a94      	ldr	r2, [pc, #592]	; (80054a8 <loadMenuTexts+0x954>)
 8005256:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8005258:	4894      	ldr	r0, [pc, #592]	; (80054ac <loadMenuTexts+0x958>)
 800525a:	f7fb fa0d 	bl	8000678 <copyText>
 800525e:	4603      	mov	r3, r0
 8005260:	4a93      	ldr	r2, [pc, #588]	; (80054b0 <loadMenuTexts+0x95c>)
 8005262:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8005264:	4893      	ldr	r0, [pc, #588]	; (80054b4 <loadMenuTexts+0x960>)
 8005266:	f7fb fa07 	bl	8000678 <copyText>
 800526a:	4603      	mov	r3, r0
 800526c:	4a92      	ldr	r2, [pc, #584]	; (80054b8 <loadMenuTexts+0x964>)
 800526e:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8005270:	4892      	ldr	r0, [pc, #584]	; (80054bc <loadMenuTexts+0x968>)
 8005272:	f7fb fa01 	bl	8000678 <copyText>
 8005276:	4603      	mov	r3, r0
 8005278:	4a91      	ldr	r2, [pc, #580]	; (80054c0 <loadMenuTexts+0x96c>)
 800527a:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 800527c:	4891      	ldr	r0, [pc, #580]	; (80054c4 <loadMenuTexts+0x970>)
 800527e:	f7fb f9fb 	bl	8000678 <copyText>
 8005282:	4603      	mov	r3, r0
 8005284:	4a90      	ldr	r2, [pc, #576]	; (80054c8 <loadMenuTexts+0x974>)
 8005286:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8005288:	4890      	ldr	r0, [pc, #576]	; (80054cc <loadMenuTexts+0x978>)
 800528a:	f7fb f9f5 	bl	8000678 <copyText>
 800528e:	4603      	mov	r3, r0
 8005290:	4a8f      	ldr	r2, [pc, #572]	; (80054d0 <loadMenuTexts+0x97c>)
 8005292:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8005294:	488f      	ldr	r0, [pc, #572]	; (80054d4 <loadMenuTexts+0x980>)
 8005296:	f7fb f9ef 	bl	8000678 <copyText>
 800529a:	4603      	mov	r3, r0
 800529c:	4a8e      	ldr	r2, [pc, #568]	; (80054d8 <loadMenuTexts+0x984>)
 800529e:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 80052a0:	488e      	ldr	r0, [pc, #568]	; (80054dc <loadMenuTexts+0x988>)
 80052a2:	f7fb f9e9 	bl	8000678 <copyText>
 80052a6:	4603      	mov	r3, r0
 80052a8:	4a8d      	ldr	r2, [pc, #564]	; (80054e0 <loadMenuTexts+0x98c>)
 80052aa:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 80052ac:	488d      	ldr	r0, [pc, #564]	; (80054e4 <loadMenuTexts+0x990>)
 80052ae:	f7fb f9e3 	bl	8000678 <copyText>
 80052b2:	4603      	mov	r3, r0
 80052b4:	4a8c      	ldr	r2, [pc, #560]	; (80054e8 <loadMenuTexts+0x994>)
 80052b6:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 80052b8:	488c      	ldr	r0, [pc, #560]	; (80054ec <loadMenuTexts+0x998>)
 80052ba:	f7fb f9dd 	bl	8000678 <copyText>
 80052be:	4603      	mov	r3, r0
 80052c0:	4a8b      	ldr	r2, [pc, #556]	; (80054f0 <loadMenuTexts+0x99c>)
 80052c2:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 80052c4:	488b      	ldr	r0, [pc, #556]	; (80054f4 <loadMenuTexts+0x9a0>)
 80052c6:	f7fb f9d7 	bl	8000678 <copyText>
 80052ca:	4603      	mov	r3, r0
 80052cc:	4a8a      	ldr	r2, [pc, #552]	; (80054f8 <loadMenuTexts+0x9a4>)
 80052ce:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 80052d0:	488a      	ldr	r0, [pc, #552]	; (80054fc <loadMenuTexts+0x9a8>)
 80052d2:	f7fb f9d1 	bl	8000678 <copyText>
 80052d6:	4603      	mov	r3, r0
 80052d8:	4a89      	ldr	r2, [pc, #548]	; (8005500 <loadMenuTexts+0x9ac>)
 80052da:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 80052dc:	4889      	ldr	r0, [pc, #548]	; (8005504 <loadMenuTexts+0x9b0>)
 80052de:	f7fb f9cb 	bl	8000678 <copyText>
 80052e2:	4603      	mov	r3, r0
 80052e4:	4a88      	ldr	r2, [pc, #544]	; (8005508 <loadMenuTexts+0x9b4>)
 80052e6:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 80052e8:	4888      	ldr	r0, [pc, #544]	; (800550c <loadMenuTexts+0x9b8>)
 80052ea:	f7fb f9c5 	bl	8000678 <copyText>
 80052ee:	4603      	mov	r3, r0
 80052f0:	4a87      	ldr	r2, [pc, #540]	; (8005510 <loadMenuTexts+0x9bc>)
 80052f2:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 80052f4:	4887      	ldr	r0, [pc, #540]	; (8005514 <loadMenuTexts+0x9c0>)
 80052f6:	f7fb f9bf 	bl	8000678 <copyText>
 80052fa:	4603      	mov	r3, r0
 80052fc:	4a86      	ldr	r2, [pc, #536]	; (8005518 <loadMenuTexts+0x9c4>)
 80052fe:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005300:	4886      	ldr	r0, [pc, #536]	; (800551c <loadMenuTexts+0x9c8>)
 8005302:	f7fb f9b9 	bl	8000678 <copyText>
 8005306:	4603      	mov	r3, r0
 8005308:	4a85      	ldr	r2, [pc, #532]	; (8005520 <loadMenuTexts+0x9cc>)
 800530a:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 800530c:	4885      	ldr	r0, [pc, #532]	; (8005524 <loadMenuTexts+0x9d0>)
 800530e:	f7fb f9b3 	bl	8000678 <copyText>
 8005312:	4603      	mov	r3, r0
 8005314:	4a84      	ldr	r2, [pc, #528]	; (8005528 <loadMenuTexts+0x9d4>)
 8005316:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8005318:	4884      	ldr	r0, [pc, #528]	; (800552c <loadMenuTexts+0x9d8>)
 800531a:	f7fb f9ad 	bl	8000678 <copyText>
 800531e:	4603      	mov	r3, r0
 8005320:	4a83      	ldr	r2, [pc, #524]	; (8005530 <loadMenuTexts+0x9dc>)
 8005322:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8005324:	4883      	ldr	r0, [pc, #524]	; (8005534 <loadMenuTexts+0x9e0>)
 8005326:	f7fb f9a7 	bl	8000678 <copyText>
 800532a:	4603      	mov	r3, r0
 800532c:	4a82      	ldr	r2, [pc, #520]	; (8005538 <loadMenuTexts+0x9e4>)
 800532e:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8005330:	4882      	ldr	r0, [pc, #520]	; (800553c <loadMenuTexts+0x9e8>)
 8005332:	f7fb f9a1 	bl	8000678 <copyText>
 8005336:	4603      	mov	r3, r0
 8005338:	4a81      	ldr	r2, [pc, #516]	; (8005540 <loadMenuTexts+0x9ec>)
 800533a:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 800533c:	4881      	ldr	r0, [pc, #516]	; (8005544 <loadMenuTexts+0x9f0>)
 800533e:	f7fb f99b 	bl	8000678 <copyText>
 8005342:	4603      	mov	r3, r0
 8005344:	4a80      	ldr	r2, [pc, #512]	; (8005548 <loadMenuTexts+0x9f4>)
 8005346:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8005348:	4880      	ldr	r0, [pc, #512]	; (800554c <loadMenuTexts+0x9f8>)
 800534a:	f7fb f995 	bl	8000678 <copyText>
 800534e:	4603      	mov	r3, r0
 8005350:	4a7f      	ldr	r2, [pc, #508]	; (8005550 <loadMenuTexts+0x9fc>)
 8005352:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8005354:	487f      	ldr	r0, [pc, #508]	; (8005554 <loadMenuTexts+0xa00>)
 8005356:	f7fb f98f 	bl	8000678 <copyText>
 800535a:	4603      	mov	r3, r0
 800535c:	4a7e      	ldr	r2, [pc, #504]	; (8005558 <loadMenuTexts+0xa04>)
 800535e:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8005360:	487e      	ldr	r0, [pc, #504]	; (800555c <loadMenuTexts+0xa08>)
 8005362:	f7fb f989 	bl	8000678 <copyText>
 8005366:	4603      	mov	r3, r0
 8005368:	4a7d      	ldr	r2, [pc, #500]	; (8005560 <loadMenuTexts+0xa0c>)
 800536a:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 800536c:	487d      	ldr	r0, [pc, #500]	; (8005564 <loadMenuTexts+0xa10>)
 800536e:	f7fb f983 	bl	8000678 <copyText>
 8005372:	4603      	mov	r3, r0
 8005374:	4a7c      	ldr	r2, [pc, #496]	; (8005568 <loadMenuTexts+0xa14>)
 8005376:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8005378:	487c      	ldr	r0, [pc, #496]	; (800556c <loadMenuTexts+0xa18>)
 800537a:	f7fb f97d 	bl	8000678 <copyText>
 800537e:	4603      	mov	r3, r0
 8005380:	4a7b      	ldr	r2, [pc, #492]	; (8005570 <loadMenuTexts+0xa1c>)
 8005382:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8005384:	487b      	ldr	r0, [pc, #492]	; (8005574 <loadMenuTexts+0xa20>)
 8005386:	f7fb f977 	bl	8000678 <copyText>
 800538a:	4603      	mov	r3, r0
 800538c:	4a7a      	ldr	r2, [pc, #488]	; (8005578 <loadMenuTexts+0xa24>)
 800538e:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8005390:	487a      	ldr	r0, [pc, #488]	; (800557c <loadMenuTexts+0xa28>)
 8005392:	f7fb f971 	bl	8000678 <copyText>
 8005396:	4603      	mov	r3, r0
 8005398:	4a79      	ldr	r2, [pc, #484]	; (8005580 <loadMenuTexts+0xa2c>)
 800539a:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 800539c:	4879      	ldr	r0, [pc, #484]	; (8005584 <loadMenuTexts+0xa30>)
 800539e:	f7fb f96b 	bl	8000678 <copyText>
 80053a2:	4603      	mov	r3, r0
 80053a4:	4a78      	ldr	r2, [pc, #480]	; (8005588 <loadMenuTexts+0xa34>)
 80053a6:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 80053a8:	4878      	ldr	r0, [pc, #480]	; (800558c <loadMenuTexts+0xa38>)
 80053aa:	f7fb f965 	bl	8000678 <copyText>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4a77      	ldr	r2, [pc, #476]	; (8005590 <loadMenuTexts+0xa3c>)
 80053b2:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 80053b4:	4877      	ldr	r0, [pc, #476]	; (8005594 <loadMenuTexts+0xa40>)
 80053b6:	f7fb f95f 	bl	8000678 <copyText>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4a76      	ldr	r2, [pc, #472]	; (8005598 <loadMenuTexts+0xa44>)
 80053be:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 80053c0:	4876      	ldr	r0, [pc, #472]	; (800559c <loadMenuTexts+0xa48>)
 80053c2:	f7fb f959 	bl	8000678 <copyText>
 80053c6:	4603      	mov	r3, r0
 80053c8:	4a75      	ldr	r2, [pc, #468]	; (80055a0 <loadMenuTexts+0xa4c>)
 80053ca:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 80053cc:	4875      	ldr	r0, [pc, #468]	; (80055a4 <loadMenuTexts+0xa50>)
 80053ce:	f7fb f953 	bl	8000678 <copyText>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4a74      	ldr	r2, [pc, #464]	; (80055a8 <loadMenuTexts+0xa54>)
 80053d6:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 80053d8:	4874      	ldr	r0, [pc, #464]	; (80055ac <loadMenuTexts+0xa58>)
 80053da:	f7fb f94d 	bl	8000678 <copyText>
 80053de:	4603      	mov	r3, r0
 80053e0:	4a73      	ldr	r2, [pc, #460]	; (80055b0 <loadMenuTexts+0xa5c>)
 80053e2:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 80053e4:	4873      	ldr	r0, [pc, #460]	; (80055b4 <loadMenuTexts+0xa60>)
 80053e6:	f7fb f947 	bl	8000678 <copyText>
 80053ea:	4603      	mov	r3, r0
 80053ec:	4a72      	ldr	r2, [pc, #456]	; (80055b8 <loadMenuTexts+0xa64>)
 80053ee:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 80053f0:	4872      	ldr	r0, [pc, #456]	; (80055bc <loadMenuTexts+0xa68>)
 80053f2:	f7fb f941 	bl	8000678 <copyText>
 80053f6:	4603      	mov	r3, r0
 80053f8:	4a71      	ldr	r2, [pc, #452]	; (80055c0 <loadMenuTexts+0xa6c>)
 80053fa:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 80053fc:	4871      	ldr	r0, [pc, #452]	; (80055c4 <loadMenuTexts+0xa70>)
 80053fe:	f7fb f93b 	bl	8000678 <copyText>
 8005402:	e0e1      	b.n	80055c8 <loadMenuTexts+0xa74>
 8005404:	200004c0 	.word	0x200004c0
 8005408:	20000c78 	.word	0x20000c78
 800540c:	200004d0 	.word	0x200004d0
 8005410:	20000c7c 	.word	0x20000c7c
 8005414:	200004e0 	.word	0x200004e0
 8005418:	20000c80 	.word	0x20000c80
 800541c:	200004f0 	.word	0x200004f0
 8005420:	20000c84 	.word	0x20000c84
 8005424:	20000500 	.word	0x20000500
 8005428:	20000c88 	.word	0x20000c88
 800542c:	20000510 	.word	0x20000510
 8005430:	20000c8c 	.word	0x20000c8c
 8005434:	20000520 	.word	0x20000520
 8005438:	20000c90 	.word	0x20000c90
 800543c:	20000530 	.word	0x20000530
 8005440:	20000c94 	.word	0x20000c94
 8005444:	20000540 	.word	0x20000540
 8005448:	20000c98 	.word	0x20000c98
 800544c:	20000550 	.word	0x20000550
 8005450:	20000c9c 	.word	0x20000c9c
 8005454:	20000560 	.word	0x20000560
 8005458:	20000ca0 	.word	0x20000ca0
 800545c:	20000570 	.word	0x20000570
 8005460:	20000ca4 	.word	0x20000ca4
 8005464:	20000580 	.word	0x20000580
 8005468:	20000ca8 	.word	0x20000ca8
 800546c:	20000590 	.word	0x20000590
 8005470:	20000cac 	.word	0x20000cac
 8005474:	200005a0 	.word	0x200005a0
 8005478:	20000cb0 	.word	0x20000cb0
 800547c:	200005b0 	.word	0x200005b0
 8005480:	20000cb4 	.word	0x20000cb4
 8005484:	200005c0 	.word	0x200005c0
 8005488:	20000cb8 	.word	0x20000cb8
 800548c:	200005d0 	.word	0x200005d0
 8005490:	20000cbc 	.word	0x20000cbc
 8005494:	200005e0 	.word	0x200005e0
 8005498:	20000cc0 	.word	0x20000cc0
 800549c:	200005f0 	.word	0x200005f0
 80054a0:	20000cc4 	.word	0x20000cc4
 80054a4:	20000600 	.word	0x20000600
 80054a8:	20000cc8 	.word	0x20000cc8
 80054ac:	20000610 	.word	0x20000610
 80054b0:	20000cd0 	.word	0x20000cd0
 80054b4:	20000620 	.word	0x20000620
 80054b8:	20000cd4 	.word	0x20000cd4
 80054bc:	20000630 	.word	0x20000630
 80054c0:	20000cd8 	.word	0x20000cd8
 80054c4:	20000640 	.word	0x20000640
 80054c8:	20000cdc 	.word	0x20000cdc
 80054cc:	20000650 	.word	0x20000650
 80054d0:	20000ce0 	.word	0x20000ce0
 80054d4:	20000660 	.word	0x20000660
 80054d8:	20000ce4 	.word	0x20000ce4
 80054dc:	20000670 	.word	0x20000670
 80054e0:	20000ce8 	.word	0x20000ce8
 80054e4:	20000680 	.word	0x20000680
 80054e8:	20000cec 	.word	0x20000cec
 80054ec:	20000690 	.word	0x20000690
 80054f0:	20000cf0 	.word	0x20000cf0
 80054f4:	200006a0 	.word	0x200006a0
 80054f8:	20000cf4 	.word	0x20000cf4
 80054fc:	200006b0 	.word	0x200006b0
 8005500:	20000cf8 	.word	0x20000cf8
 8005504:	200006c0 	.word	0x200006c0
 8005508:	20000d00 	.word	0x20000d00
 800550c:	200006d0 	.word	0x200006d0
 8005510:	20000d08 	.word	0x20000d08
 8005514:	200006e0 	.word	0x200006e0
 8005518:	20000d0c 	.word	0x20000d0c
 800551c:	200006f0 	.word	0x200006f0
 8005520:	20000d10 	.word	0x20000d10
 8005524:	20000700 	.word	0x20000700
 8005528:	20000d14 	.word	0x20000d14
 800552c:	20000710 	.word	0x20000710
 8005530:	20000d18 	.word	0x20000d18
 8005534:	20000720 	.word	0x20000720
 8005538:	20000d1c 	.word	0x20000d1c
 800553c:	20000730 	.word	0x20000730
 8005540:	20000d20 	.word	0x20000d20
 8005544:	20000740 	.word	0x20000740
 8005548:	20000d24 	.word	0x20000d24
 800554c:	20000750 	.word	0x20000750
 8005550:	20000d28 	.word	0x20000d28
 8005554:	20000760 	.word	0x20000760
 8005558:	20000d2c 	.word	0x20000d2c
 800555c:	20000770 	.word	0x20000770
 8005560:	20000d30 	.word	0x20000d30
 8005564:	20000780 	.word	0x20000780
 8005568:	20000d34 	.word	0x20000d34
 800556c:	20000790 	.word	0x20000790
 8005570:	20000d38 	.word	0x20000d38
 8005574:	200007a0 	.word	0x200007a0
 8005578:	20000d3c 	.word	0x20000d3c
 800557c:	200007b0 	.word	0x200007b0
 8005580:	20000d40 	.word	0x20000d40
 8005584:	200007c0 	.word	0x200007c0
 8005588:	20000d44 	.word	0x20000d44
 800558c:	200007d0 	.word	0x200007d0
 8005590:	20000d48 	.word	0x20000d48
 8005594:	200007e0 	.word	0x200007e0
 8005598:	20000d4c 	.word	0x20000d4c
 800559c:	200007f0 	.word	0x200007f0
 80055a0:	20000d50 	.word	0x20000d50
 80055a4:	20000800 	.word	0x20000800
 80055a8:	20000d54 	.word	0x20000d54
 80055ac:	20000810 	.word	0x20000810
 80055b0:	20000d58 	.word	0x20000d58
 80055b4:	20000820 	.word	0x20000820
 80055b8:	20000d5c 	.word	0x20000d5c
 80055bc:	20000830 	.word	0x20000830
 80055c0:	20000d60 	.word	0x20000d60
 80055c4:	20000840 	.word	0x20000840
 80055c8:	4603      	mov	r3, r0
 80055ca:	4a27      	ldr	r2, [pc, #156]	; (8005668 <loadMenuTexts+0xb14>)
 80055cc:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 80055ce:	4827      	ldr	r0, [pc, #156]	; (800566c <loadMenuTexts+0xb18>)
 80055d0:	f7fb f852 	bl	8000678 <copyText>
 80055d4:	4603      	mov	r3, r0
 80055d6:	4a26      	ldr	r2, [pc, #152]	; (8005670 <loadMenuTexts+0xb1c>)
 80055d8:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 80055da:	4826      	ldr	r0, [pc, #152]	; (8005674 <loadMenuTexts+0xb20>)
 80055dc:	f7fb f84c 	bl	8000678 <copyText>
 80055e0:	4603      	mov	r3, r0
 80055e2:	4a25      	ldr	r2, [pc, #148]	; (8005678 <loadMenuTexts+0xb24>)
 80055e4:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 80055e6:	4825      	ldr	r0, [pc, #148]	; (800567c <loadMenuTexts+0xb28>)
 80055e8:	f7fb f846 	bl	8000678 <copyText>
 80055ec:	4603      	mov	r3, r0
 80055ee:	4a24      	ldr	r2, [pc, #144]	; (8005680 <loadMenuTexts+0xb2c>)
 80055f0:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 80055f2:	4824      	ldr	r0, [pc, #144]	; (8005684 <loadMenuTexts+0xb30>)
 80055f4:	f7fb f840 	bl	8000678 <copyText>
 80055f8:	4603      	mov	r3, r0
 80055fa:	4a23      	ldr	r2, [pc, #140]	; (8005688 <loadMenuTexts+0xb34>)
 80055fc:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 80055fe:	4823      	ldr	r0, [pc, #140]	; (800568c <loadMenuTexts+0xb38>)
 8005600:	f7fb f83a 	bl	8000678 <copyText>
 8005604:	4603      	mov	r3, r0
 8005606:	4a22      	ldr	r2, [pc, #136]	; (8005690 <loadMenuTexts+0xb3c>)
 8005608:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 800560a:	4822      	ldr	r0, [pc, #136]	; (8005694 <loadMenuTexts+0xb40>)
 800560c:	f7fb f834 	bl	8000678 <copyText>
 8005610:	4603      	mov	r3, r0
 8005612:	4a21      	ldr	r2, [pc, #132]	; (8005698 <loadMenuTexts+0xb44>)
 8005614:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 8005616:	4821      	ldr	r0, [pc, #132]	; (800569c <loadMenuTexts+0xb48>)
 8005618:	f7fb f82e 	bl	8000678 <copyText>
 800561c:	4603      	mov	r3, r0
 800561e:	4a20      	ldr	r2, [pc, #128]	; (80056a0 <loadMenuTexts+0xb4c>)
 8005620:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8005622:	4820      	ldr	r0, [pc, #128]	; (80056a4 <loadMenuTexts+0xb50>)
 8005624:	f7fb f828 	bl	8000678 <copyText>
 8005628:	4603      	mov	r3, r0
 800562a:	4a1f      	ldr	r2, [pc, #124]	; (80056a8 <loadMenuTexts+0xb54>)
 800562c:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 800562e:	481f      	ldr	r0, [pc, #124]	; (80056ac <loadMenuTexts+0xb58>)
 8005630:	f7fb f822 	bl	8000678 <copyText>
 8005634:	4603      	mov	r3, r0
 8005636:	4a1e      	ldr	r2, [pc, #120]	; (80056b0 <loadMenuTexts+0xb5c>)
 8005638:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 800563a:	481e      	ldr	r0, [pc, #120]	; (80056b4 <loadMenuTexts+0xb60>)
 800563c:	f7fb f81c 	bl	8000678 <copyText>
 8005640:	4603      	mov	r3, r0
 8005642:	4a1d      	ldr	r2, [pc, #116]	; (80056b8 <loadMenuTexts+0xb64>)
 8005644:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 8005646:	481d      	ldr	r0, [pc, #116]	; (80056bc <loadMenuTexts+0xb68>)
 8005648:	f7fb f816 	bl	8000678 <copyText>
 800564c:	4603      	mov	r3, r0
 800564e:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <loadMenuTexts+0xb6c>)
 8005650:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8005652:	481c      	ldr	r0, [pc, #112]	; (80056c4 <loadMenuTexts+0xb70>)
 8005654:	f7fb f810 	bl	8000678 <copyText>
 8005658:	4603      	mov	r3, r0
 800565a:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <loadMenuTexts+0xb74>)
 800565c:	6013      	str	r3, [r2, #0]
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000d64 	.word	0x20000d64
 800566c:	20000850 	.word	0x20000850
 8005670:	20000d68 	.word	0x20000d68
 8005674:	20000860 	.word	0x20000860
 8005678:	20000d6c 	.word	0x20000d6c
 800567c:	20000870 	.word	0x20000870
 8005680:	20000d70 	.word	0x20000d70
 8005684:	20000880 	.word	0x20000880
 8005688:	20000d74 	.word	0x20000d74
 800568c:	20000890 	.word	0x20000890
 8005690:	20000d78 	.word	0x20000d78
 8005694:	200008a0 	.word	0x200008a0
 8005698:	20000d84 	.word	0x20000d84
 800569c:	200008b0 	.word	0x200008b0
 80056a0:	20000d88 	.word	0x20000d88
 80056a4:	200008c0 	.word	0x200008c0
 80056a8:	20000d8c 	.word	0x20000d8c
 80056ac:	200008d0 	.word	0x200008d0
 80056b0:	20000d90 	.word	0x20000d90
 80056b4:	200008e0 	.word	0x200008e0
 80056b8:	20000d94 	.word	0x20000d94
 80056bc:	200008f0 	.word	0x200008f0
 80056c0:	20000d98 	.word	0x20000d98
 80056c4:	20000900 	.word	0x20000900
 80056c8:	20000d9c 	.word	0x20000d9c

080056cc <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d105      	bne.n	80056e8 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80056dc:	4a22      	ldr	r2, [pc, #136]	; (8005768 <lcdUpdate+0x9c>)
 80056de:	2101      	movs	r1, #1
 80056e0:	2002      	movs	r0, #2
 80056e2:	f7fa ff3f 	bl	8000564 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 80056e6:	e03b      	b.n	8005760 <lcdUpdate+0x94>
	} else if(y==2) {
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d105      	bne.n	80056fa <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80056ee:	4a1e      	ldr	r2, [pc, #120]	; (8005768 <lcdUpdate+0x9c>)
 80056f0:	2102      	movs	r1, #2
 80056f2:	2002      	movs	r0, #2
 80056f4:	f7fa ff36 	bl	8000564 <lcd_print>
}
 80056f8:	e032      	b.n	8005760 <lcdUpdate+0x94>
	} else if(y==3) {
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d105      	bne.n	800570c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005700:	4a19      	ldr	r2, [pc, #100]	; (8005768 <lcdUpdate+0x9c>)
 8005702:	2103      	movs	r1, #3
 8005704:	2002      	movs	r0, #2
 8005706:	f7fa ff2d 	bl	8000564 <lcd_print>
}
 800570a:	e029      	b.n	8005760 <lcdUpdate+0x94>
	} else if(y==4) {
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	2b04      	cmp	r3, #4
 8005710:	d105      	bne.n	800571e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8005712:	4a15      	ldr	r2, [pc, #84]	; (8005768 <lcdUpdate+0x9c>)
 8005714:	2104      	movs	r1, #4
 8005716:	2002      	movs	r0, #2
 8005718:	f7fa ff24 	bl	8000564 <lcd_print>
}
 800571c:	e020      	b.n	8005760 <lcdUpdate+0x94>
	} else if(y==5) {
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	2b05      	cmp	r3, #5
 8005722:	d105      	bne.n	8005730 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005724:	4a10      	ldr	r2, [pc, #64]	; (8005768 <lcdUpdate+0x9c>)
 8005726:	2105      	movs	r1, #5
 8005728:	2002      	movs	r0, #2
 800572a:	f7fa ff1b 	bl	8000564 <lcd_print>
}
 800572e:	e017      	b.n	8005760 <lcdUpdate+0x94>
	} else if(y==6) {
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	2b06      	cmp	r3, #6
 8005734:	d105      	bne.n	8005742 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8005736:	4a0c      	ldr	r2, [pc, #48]	; (8005768 <lcdUpdate+0x9c>)
 8005738:	2106      	movs	r1, #6
 800573a:	2002      	movs	r0, #2
 800573c:	f7fa ff12 	bl	8000564 <lcd_print>
}
 8005740:	e00e      	b.n	8005760 <lcdUpdate+0x94>
	} else if (y==7) {
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	2b07      	cmp	r3, #7
 8005746:	d10b      	bne.n	8005760 <lcdUpdate+0x94>
		lcd_clear();
 8005748:	f7fa ff38 	bl	80005bc <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 800574c:	4a07      	ldr	r2, [pc, #28]	; (800576c <lcdUpdate+0xa0>)
 800574e:	2101      	movs	r1, #1
 8005750:	2001      	movs	r0, #1
 8005752:	f7fa ff07 	bl	8000564 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8005756:	4a06      	ldr	r2, [pc, #24]	; (8005770 <lcdUpdate+0xa4>)
 8005758:	2101      	movs	r1, #1
 800575a:	2002      	movs	r0, #2
 800575c:	f7fa ff02 	bl	8000564 <lcd_print>
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	0800cd78 	.word	0x0800cd78
 800576c:	0800d6ac 	.word	0x0800d6ac
 8005770:	0800d6c0 	.word	0x0800d6c0

08005774 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d11d      	bne.n	80057c0 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8005784:	4b62      	ldr	r3, [pc, #392]	; (8005910 <hataKoduLcdGoster+0x19c>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d105      	bne.n	8005798 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 800578c:	4a61      	ldr	r2, [pc, #388]	; (8005914 <hataKoduLcdGoster+0x1a0>)
 800578e:	2101      	movs	r1, #1
 8005790:	2001      	movs	r0, #1
 8005792:	f7fa fee7 	bl	8000564 <lcd_print>
 8005796:	e008      	b.n	80057aa <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8005798:	4b5d      	ldr	r3, [pc, #372]	; (8005910 <hataKoduLcdGoster+0x19c>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d104      	bne.n	80057aa <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 80057a0:	4a5d      	ldr	r2, [pc, #372]	; (8005918 <hataKoduLcdGoster+0x1a4>)
 80057a2:	2101      	movs	r1, #1
 80057a4:	2001      	movs	r0, #1
 80057a6:	f7fa fedd 	bl	8000564 <lcd_print>
		}
		lcd_print(2, 1, "1");
 80057aa:	4a5c      	ldr	r2, [pc, #368]	; (800591c <hataKoduLcdGoster+0x1a8>)
 80057ac:	2101      	movs	r1, #1
 80057ae:	2002      	movs	r0, #2
 80057b0:	f7fa fed8 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 80057b4:	4a5a      	ldr	r2, [pc, #360]	; (8005920 <hataKoduLcdGoster+0x1ac>)
 80057b6:	2107      	movs	r1, #7
 80057b8:	2002      	movs	r0, #2
 80057ba:	f7fa fed3 	bl	8000564 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80057be:	e0a3      	b.n	8005908 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 80057c0:	79fb      	ldrb	r3, [r7, #7]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d11d      	bne.n	8005802 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 80057c6:	4b52      	ldr	r3, [pc, #328]	; (8005910 <hataKoduLcdGoster+0x19c>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d105      	bne.n	80057da <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 80057ce:	4a51      	ldr	r2, [pc, #324]	; (8005914 <hataKoduLcdGoster+0x1a0>)
 80057d0:	2101      	movs	r1, #1
 80057d2:	2001      	movs	r0, #1
 80057d4:	f7fa fec6 	bl	8000564 <lcd_print>
 80057d8:	e008      	b.n	80057ec <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 80057da:	4b4d      	ldr	r3, [pc, #308]	; (8005910 <hataKoduLcdGoster+0x19c>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d104      	bne.n	80057ec <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 80057e2:	4a4d      	ldr	r2, [pc, #308]	; (8005918 <hataKoduLcdGoster+0x1a4>)
 80057e4:	2101      	movs	r1, #1
 80057e6:	2001      	movs	r0, #1
 80057e8:	f7fa febc 	bl	8000564 <lcd_print>
		lcd_print(2, 2, "2");
 80057ec:	4a4d      	ldr	r2, [pc, #308]	; (8005924 <hataKoduLcdGoster+0x1b0>)
 80057ee:	2102      	movs	r1, #2
 80057f0:	2002      	movs	r0, #2
 80057f2:	f7fa feb7 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 80057f6:	4a4a      	ldr	r2, [pc, #296]	; (8005920 <hataKoduLcdGoster+0x1ac>)
 80057f8:	2107      	movs	r1, #7
 80057fa:	2002      	movs	r0, #2
 80057fc:	f7fa feb2 	bl	8000564 <lcd_print>
}
 8005800:	e082      	b.n	8005908 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	2b03      	cmp	r3, #3
 8005806:	d11d      	bne.n	8005844 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005808:	4b41      	ldr	r3, [pc, #260]	; (8005910 <hataKoduLcdGoster+0x19c>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005810:	4a40      	ldr	r2, [pc, #256]	; (8005914 <hataKoduLcdGoster+0x1a0>)
 8005812:	2101      	movs	r1, #1
 8005814:	2001      	movs	r0, #1
 8005816:	f7fa fea5 	bl	8000564 <lcd_print>
 800581a:	e008      	b.n	800582e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 800581c:	4b3c      	ldr	r3, [pc, #240]	; (8005910 <hataKoduLcdGoster+0x19c>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d104      	bne.n	800582e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005824:	4a3c      	ldr	r2, [pc, #240]	; (8005918 <hataKoduLcdGoster+0x1a4>)
 8005826:	2101      	movs	r1, #1
 8005828:	2001      	movs	r0, #1
 800582a:	f7fa fe9b 	bl	8000564 <lcd_print>
		lcd_print(2, 3, "3");
 800582e:	4a3e      	ldr	r2, [pc, #248]	; (8005928 <hataKoduLcdGoster+0x1b4>)
 8005830:	2103      	movs	r1, #3
 8005832:	2002      	movs	r0, #2
 8005834:	f7fa fe96 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8005838:	4a39      	ldr	r2, [pc, #228]	; (8005920 <hataKoduLcdGoster+0x1ac>)
 800583a:	2107      	movs	r1, #7
 800583c:	2002      	movs	r0, #2
 800583e:	f7fa fe91 	bl	8000564 <lcd_print>
}
 8005842:	e061      	b.n	8005908 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	2b04      	cmp	r3, #4
 8005848:	d11d      	bne.n	8005886 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 800584a:	4b31      	ldr	r3, [pc, #196]	; (8005910 <hataKoduLcdGoster+0x19c>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d105      	bne.n	800585e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8005852:	4a30      	ldr	r2, [pc, #192]	; (8005914 <hataKoduLcdGoster+0x1a0>)
 8005854:	2101      	movs	r1, #1
 8005856:	2001      	movs	r0, #1
 8005858:	f7fa fe84 	bl	8000564 <lcd_print>
 800585c:	e008      	b.n	8005870 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 800585e:	4b2c      	ldr	r3, [pc, #176]	; (8005910 <hataKoduLcdGoster+0x19c>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d104      	bne.n	8005870 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005866:	4a2c      	ldr	r2, [pc, #176]	; (8005918 <hataKoduLcdGoster+0x1a4>)
 8005868:	2101      	movs	r1, #1
 800586a:	2001      	movs	r0, #1
 800586c:	f7fa fe7a 	bl	8000564 <lcd_print>
		lcd_print(2, 4, "4");
 8005870:	4a2e      	ldr	r2, [pc, #184]	; (800592c <hataKoduLcdGoster+0x1b8>)
 8005872:	2104      	movs	r1, #4
 8005874:	2002      	movs	r0, #2
 8005876:	f7fa fe75 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 800587a:	4a29      	ldr	r2, [pc, #164]	; (8005920 <hataKoduLcdGoster+0x1ac>)
 800587c:	2107      	movs	r1, #7
 800587e:	2002      	movs	r0, #2
 8005880:	f7fa fe70 	bl	8000564 <lcd_print>
}
 8005884:	e040      	b.n	8005908 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	2b05      	cmp	r3, #5
 800588a:	d11d      	bne.n	80058c8 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 800588c:	4b20      	ldr	r3, [pc, #128]	; (8005910 <hataKoduLcdGoster+0x19c>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8005894:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <hataKoduLcdGoster+0x1a0>)
 8005896:	2101      	movs	r1, #1
 8005898:	2001      	movs	r0, #1
 800589a:	f7fa fe63 	bl	8000564 <lcd_print>
 800589e:	e008      	b.n	80058b2 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80058a0:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <hataKoduLcdGoster+0x19c>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d104      	bne.n	80058b2 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058a8:	4a1b      	ldr	r2, [pc, #108]	; (8005918 <hataKoduLcdGoster+0x1a4>)
 80058aa:	2101      	movs	r1, #1
 80058ac:	2001      	movs	r0, #1
 80058ae:	f7fa fe59 	bl	8000564 <lcd_print>
		lcd_print(2, 5, "5");
 80058b2:	4a1f      	ldr	r2, [pc, #124]	; (8005930 <hataKoduLcdGoster+0x1bc>)
 80058b4:	2105      	movs	r1, #5
 80058b6:	2002      	movs	r0, #2
 80058b8:	f7fa fe54 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 80058bc:	4a18      	ldr	r2, [pc, #96]	; (8005920 <hataKoduLcdGoster+0x1ac>)
 80058be:	2107      	movs	r1, #7
 80058c0:	2002      	movs	r0, #2
 80058c2:	f7fa fe4f 	bl	8000564 <lcd_print>
}
 80058c6:	e01f      	b.n	8005908 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 80058c8:	79fb      	ldrb	r3, [r7, #7]
 80058ca:	2b06      	cmp	r3, #6
 80058cc:	d11c      	bne.n	8005908 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 80058ce:	4b10      	ldr	r3, [pc, #64]	; (8005910 <hataKoduLcdGoster+0x19c>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d105      	bne.n	80058e2 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 80058d6:	4a0f      	ldr	r2, [pc, #60]	; (8005914 <hataKoduLcdGoster+0x1a0>)
 80058d8:	2101      	movs	r1, #1
 80058da:	2001      	movs	r0, #1
 80058dc:	f7fa fe42 	bl	8000564 <lcd_print>
 80058e0:	e008      	b.n	80058f4 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 80058e2:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <hataKoduLcdGoster+0x19c>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d104      	bne.n	80058f4 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058ea:	4a0b      	ldr	r2, [pc, #44]	; (8005918 <hataKoduLcdGoster+0x1a4>)
 80058ec:	2101      	movs	r1, #1
 80058ee:	2001      	movs	r0, #1
 80058f0:	f7fa fe38 	bl	8000564 <lcd_print>
		lcd_print(2, 6, "6");
 80058f4:	4a0f      	ldr	r2, [pc, #60]	; (8005934 <hataKoduLcdGoster+0x1c0>)
 80058f6:	2106      	movs	r1, #6
 80058f8:	2002      	movs	r0, #2
 80058fa:	f7fa fe33 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 80058fe:	4a08      	ldr	r2, [pc, #32]	; (8005920 <hataKoduLcdGoster+0x1ac>)
 8005900:	2107      	movs	r1, #7
 8005902:	2002      	movs	r0, #2
 8005904:	f7fa fe2e 	bl	8000564 <lcd_print>
}
 8005908:	bf00      	nop
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20000c2d 	.word	0x20000c2d
 8005914:	0800d6d4 	.word	0x0800d6d4
 8005918:	0800d6e8 	.word	0x0800d6e8
 800591c:	0800cabc 	.word	0x0800cabc
 8005920:	0800d6fc 	.word	0x0800d6fc
 8005924:	0800cac0 	.word	0x0800cac0
 8005928:	0800cac4 	.word	0x0800cac4
 800592c:	0800cac8 	.word	0x0800cac8
 8005930:	0800cacc 	.word	0x0800cacc
 8005934:	0800cad0 	.word	0x0800cad0

08005938 <eepromKontrol>:
	HAL_Delay(500);
	lcd_clear();
	HAL_Delay(500);
}

void eepromKontrol(int type) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af04      	add	r7, sp, #16
 800593e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8005940:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005944:	9302      	str	r3, [sp, #8]
 8005946:	236e      	movs	r3, #110	; 0x6e
 8005948:	9301      	str	r3, [sp, #4]
 800594a:	4b9c      	ldr	r3, [pc, #624]	; (8005bbc <eepromKontrol+0x284>)
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	236e      	movs	r3, #110	; 0x6e
 8005950:	2200      	movs	r2, #0
 8005952:	21a0      	movs	r1, #160	; 0xa0
 8005954:	489a      	ldr	r0, [pc, #616]	; (8005bc0 <eepromKontrol+0x288>)
 8005956:	f004 fb19 	bl	8009f8c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 800595a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800595e:	f003 f991 	bl	8008c84 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005962:	4b96      	ldr	r3, [pc, #600]	; (8005bbc <eepromKontrol+0x284>)
 8005964:	78da      	ldrb	r2, [r3, #3]
 8005966:	4b97      	ldr	r3, [pc, #604]	; (8005bc4 <eepromKontrol+0x28c>)
 8005968:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800596a:	4b94      	ldr	r3, [pc, #592]	; (8005bbc <eepromKontrol+0x284>)
 800596c:	785a      	ldrb	r2, [r3, #1]
 800596e:	4b96      	ldr	r3, [pc, #600]	; (8005bc8 <eepromKontrol+0x290>)
 8005970:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005972:	4b92      	ldr	r3, [pc, #584]	; (8005bbc <eepromKontrol+0x284>)
 8005974:	789a      	ldrb	r2, [r3, #2]
 8005976:	4b95      	ldr	r3, [pc, #596]	; (8005bcc <eepromKontrol+0x294>)
 8005978:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800597a:	4b90      	ldr	r3, [pc, #576]	; (8005bbc <eepromKontrol+0x284>)
 800597c:	791a      	ldrb	r2, [r3, #4]
 800597e:	4b94      	ldr	r3, [pc, #592]	; (8005bd0 <eepromKontrol+0x298>)
 8005980:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005982:	4b8e      	ldr	r3, [pc, #568]	; (8005bbc <eepromKontrol+0x284>)
 8005984:	795a      	ldrb	r2, [r3, #5]
 8005986:	4b93      	ldr	r3, [pc, #588]	; (8005bd4 <eepromKontrol+0x29c>)
 8005988:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800598a:	4b8c      	ldr	r3, [pc, #560]	; (8005bbc <eepromKontrol+0x284>)
 800598c:	799a      	ldrb	r2, [r3, #6]
 800598e:	4b92      	ldr	r3, [pc, #584]	; (8005bd8 <eepromKontrol+0x2a0>)
 8005990:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005992:	4b8a      	ldr	r3, [pc, #552]	; (8005bbc <eepromKontrol+0x284>)
 8005994:	79da      	ldrb	r2, [r3, #7]
 8005996:	4b91      	ldr	r3, [pc, #580]	; (8005bdc <eepromKontrol+0x2a4>)
 8005998:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800599a:	4b88      	ldr	r3, [pc, #544]	; (8005bbc <eepromKontrol+0x284>)
 800599c:	7a1a      	ldrb	r2, [r3, #8]
 800599e:	4b90      	ldr	r3, [pc, #576]	; (8005be0 <eepromKontrol+0x2a8>)
 80059a0:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80059a2:	4b86      	ldr	r3, [pc, #536]	; (8005bbc <eepromKontrol+0x284>)
 80059a4:	7a5a      	ldrb	r2, [r3, #9]
 80059a6:	4b8f      	ldr	r3, [pc, #572]	; (8005be4 <eepromKontrol+0x2ac>)
 80059a8:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80059aa:	4b84      	ldr	r3, [pc, #528]	; (8005bbc <eepromKontrol+0x284>)
 80059ac:	7a9a      	ldrb	r2, [r3, #10]
 80059ae:	4b8e      	ldr	r3, [pc, #568]	; (8005be8 <eepromKontrol+0x2b0>)
 80059b0:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80059b2:	4b82      	ldr	r3, [pc, #520]	; (8005bbc <eepromKontrol+0x284>)
 80059b4:	7ada      	ldrb	r2, [r3, #11]
 80059b6:	4b8d      	ldr	r3, [pc, #564]	; (8005bec <eepromKontrol+0x2b4>)
 80059b8:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80059ba:	4b80      	ldr	r3, [pc, #512]	; (8005bbc <eepromKontrol+0x284>)
 80059bc:	7b1a      	ldrb	r2, [r3, #12]
 80059be:	4b8c      	ldr	r3, [pc, #560]	; (8005bf0 <eepromKontrol+0x2b8>)
 80059c0:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80059c2:	4b7e      	ldr	r3, [pc, #504]	; (8005bbc <eepromKontrol+0x284>)
 80059c4:	7b5a      	ldrb	r2, [r3, #13]
 80059c6:	4b8b      	ldr	r3, [pc, #556]	; (8005bf4 <eepromKontrol+0x2bc>)
 80059c8:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80059ca:	4b7c      	ldr	r3, [pc, #496]	; (8005bbc <eepromKontrol+0x284>)
 80059cc:	7b9a      	ldrb	r2, [r3, #14]
 80059ce:	4b8a      	ldr	r3, [pc, #552]	; (8005bf8 <eepromKontrol+0x2c0>)
 80059d0:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80059d2:	4b7a      	ldr	r3, [pc, #488]	; (8005bbc <eepromKontrol+0x284>)
 80059d4:	7bda      	ldrb	r2, [r3, #15]
 80059d6:	4b89      	ldr	r3, [pc, #548]	; (8005bfc <eepromKontrol+0x2c4>)
 80059d8:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80059da:	4b78      	ldr	r3, [pc, #480]	; (8005bbc <eepromKontrol+0x284>)
 80059dc:	7c1a      	ldrb	r2, [r3, #16]
 80059de:	4b88      	ldr	r3, [pc, #544]	; (8005c00 <eepromKontrol+0x2c8>)
 80059e0:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80059e2:	4b76      	ldr	r3, [pc, #472]	; (8005bbc <eepromKontrol+0x284>)
 80059e4:	7c5a      	ldrb	r2, [r3, #17]
 80059e6:	4b87      	ldr	r3, [pc, #540]	; (8005c04 <eepromKontrol+0x2cc>)
 80059e8:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80059ea:	4b74      	ldr	r3, [pc, #464]	; (8005bbc <eepromKontrol+0x284>)
 80059ec:	7c9a      	ldrb	r2, [r3, #18]
 80059ee:	4b86      	ldr	r3, [pc, #536]	; (8005c08 <eepromKontrol+0x2d0>)
 80059f0:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80059f2:	4b72      	ldr	r3, [pc, #456]	; (8005bbc <eepromKontrol+0x284>)
 80059f4:	7cda      	ldrb	r2, [r3, #19]
 80059f6:	4b85      	ldr	r3, [pc, #532]	; (8005c0c <eepromKontrol+0x2d4>)
 80059f8:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80059fa:	4b70      	ldr	r3, [pc, #448]	; (8005bbc <eepromKontrol+0x284>)
 80059fc:	7d1a      	ldrb	r2, [r3, #20]
 80059fe:	4b84      	ldr	r3, [pc, #528]	; (8005c10 <eepromKontrol+0x2d8>)
 8005a00:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005a02:	4b6e      	ldr	r3, [pc, #440]	; (8005bbc <eepromKontrol+0x284>)
 8005a04:	7d5a      	ldrb	r2, [r3, #21]
 8005a06:	4b83      	ldr	r3, [pc, #524]	; (8005c14 <eepromKontrol+0x2dc>)
 8005a08:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005a0a:	4b6c      	ldr	r3, [pc, #432]	; (8005bbc <eepromKontrol+0x284>)
 8005a0c:	7d9a      	ldrb	r2, [r3, #22]
 8005a0e:	4b82      	ldr	r3, [pc, #520]	; (8005c18 <eepromKontrol+0x2e0>)
 8005a10:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005a12:	4b6a      	ldr	r3, [pc, #424]	; (8005bbc <eepromKontrol+0x284>)
 8005a14:	7dda      	ldrb	r2, [r3, #23]
 8005a16:	4b81      	ldr	r3, [pc, #516]	; (8005c1c <eepromKontrol+0x2e4>)
 8005a18:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005a1a:	4b68      	ldr	r3, [pc, #416]	; (8005bbc <eepromKontrol+0x284>)
 8005a1c:	7e1a      	ldrb	r2, [r3, #24]
 8005a1e:	4b80      	ldr	r3, [pc, #512]	; (8005c20 <eepromKontrol+0x2e8>)
 8005a20:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005a22:	4b66      	ldr	r3, [pc, #408]	; (8005bbc <eepromKontrol+0x284>)
 8005a24:	7e5a      	ldrb	r2, [r3, #25]
 8005a26:	4b7f      	ldr	r3, [pc, #508]	; (8005c24 <eepromKontrol+0x2ec>)
 8005a28:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005a2a:	4b64      	ldr	r3, [pc, #400]	; (8005bbc <eepromKontrol+0x284>)
 8005a2c:	7e9a      	ldrb	r2, [r3, #26]
 8005a2e:	4b7e      	ldr	r3, [pc, #504]	; (8005c28 <eepromKontrol+0x2f0>)
 8005a30:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005a32:	4b62      	ldr	r3, [pc, #392]	; (8005bbc <eepromKontrol+0x284>)
 8005a34:	7eda      	ldrb	r2, [r3, #27]
 8005a36:	4b7d      	ldr	r3, [pc, #500]	; (8005c2c <eepromKontrol+0x2f4>)
 8005a38:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005a3a:	4b60      	ldr	r3, [pc, #384]	; (8005bbc <eepromKontrol+0x284>)
 8005a3c:	7f1a      	ldrb	r2, [r3, #28]
 8005a3e:	4b7c      	ldr	r3, [pc, #496]	; (8005c30 <eepromKontrol+0x2f8>)
 8005a40:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005a42:	4b5e      	ldr	r3, [pc, #376]	; (8005bbc <eepromKontrol+0x284>)
 8005a44:	7f5a      	ldrb	r2, [r3, #29]
 8005a46:	4b7b      	ldr	r3, [pc, #492]	; (8005c34 <eepromKontrol+0x2fc>)
 8005a48:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005a4a:	4b5c      	ldr	r3, [pc, #368]	; (8005bbc <eepromKontrol+0x284>)
 8005a4c:	7f9a      	ldrb	r2, [r3, #30]
 8005a4e:	4b7a      	ldr	r3, [pc, #488]	; (8005c38 <eepromKontrol+0x300>)
 8005a50:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005a52:	4b5a      	ldr	r3, [pc, #360]	; (8005bbc <eepromKontrol+0x284>)
 8005a54:	7fda      	ldrb	r2, [r3, #31]
 8005a56:	4b79      	ldr	r3, [pc, #484]	; (8005c3c <eepromKontrol+0x304>)
 8005a58:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005a5a:	4b58      	ldr	r3, [pc, #352]	; (8005bbc <eepromKontrol+0x284>)
 8005a5c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005a60:	4b77      	ldr	r3, [pc, #476]	; (8005c40 <eepromKontrol+0x308>)
 8005a62:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005a64:	4b55      	ldr	r3, [pc, #340]	; (8005bbc <eepromKontrol+0x284>)
 8005a66:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005a6a:	4b76      	ldr	r3, [pc, #472]	; (8005c44 <eepromKontrol+0x30c>)
 8005a6c:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8005a6e:	4b53      	ldr	r3, [pc, #332]	; (8005bbc <eepromKontrol+0x284>)
 8005a70:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005a74:	4b74      	ldr	r3, [pc, #464]	; (8005c48 <eepromKontrol+0x310>)
 8005a76:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005a78:	4b50      	ldr	r3, [pc, #320]	; (8005bbc <eepromKontrol+0x284>)
 8005a7a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005a7e:	4b73      	ldr	r3, [pc, #460]	; (8005c4c <eepromKontrol+0x314>)
 8005a80:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005a82:	4b4e      	ldr	r3, [pc, #312]	; (8005bbc <eepromKontrol+0x284>)
 8005a84:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005a88:	4b71      	ldr	r3, [pc, #452]	; (8005c50 <eepromKontrol+0x318>)
 8005a8a:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005a8c:	4b4b      	ldr	r3, [pc, #300]	; (8005bbc <eepromKontrol+0x284>)
 8005a8e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005a92:	4b70      	ldr	r3, [pc, #448]	; (8005c54 <eepromKontrol+0x31c>)
 8005a94:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005a96:	4b49      	ldr	r3, [pc, #292]	; (8005bbc <eepromKontrol+0x284>)
 8005a98:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005a9c:	4b6e      	ldr	r3, [pc, #440]	; (8005c58 <eepromKontrol+0x320>)
 8005a9e:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005aa0:	4b46      	ldr	r3, [pc, #280]	; (8005bbc <eepromKontrol+0x284>)
 8005aa2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005aa6:	4b6d      	ldr	r3, [pc, #436]	; (8005c5c <eepromKontrol+0x324>)
 8005aa8:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005aaa:	4b44      	ldr	r3, [pc, #272]	; (8005bbc <eepromKontrol+0x284>)
 8005aac:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005ab0:	4b6b      	ldr	r3, [pc, #428]	; (8005c60 <eepromKontrol+0x328>)
 8005ab2:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005ab4:	4b41      	ldr	r3, [pc, #260]	; (8005bbc <eepromKontrol+0x284>)
 8005ab6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005aba:	4b6a      	ldr	r3, [pc, #424]	; (8005c64 <eepromKontrol+0x32c>)
 8005abc:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005abe:	4b3f      	ldr	r3, [pc, #252]	; (8005bbc <eepromKontrol+0x284>)
 8005ac0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005ac4:	4b68      	ldr	r3, [pc, #416]	; (8005c68 <eepromKontrol+0x330>)
 8005ac6:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005ac8:	4b3c      	ldr	r3, [pc, #240]	; (8005bbc <eepromKontrol+0x284>)
 8005aca:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005ace:	4b67      	ldr	r3, [pc, #412]	; (8005c6c <eepromKontrol+0x334>)
 8005ad0:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005ad2:	4b3a      	ldr	r3, [pc, #232]	; (8005bbc <eepromKontrol+0x284>)
 8005ad4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005ad8:	4b65      	ldr	r3, [pc, #404]	; (8005c70 <eepromKontrol+0x338>)
 8005ada:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005adc:	4b37      	ldr	r3, [pc, #220]	; (8005bbc <eepromKontrol+0x284>)
 8005ade:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005ae2:	4b64      	ldr	r3, [pc, #400]	; (8005c74 <eepromKontrol+0x33c>)
 8005ae4:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005ae6:	4b35      	ldr	r3, [pc, #212]	; (8005bbc <eepromKontrol+0x284>)
 8005ae8:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005aec:	4b62      	ldr	r3, [pc, #392]	; (8005c78 <eepromKontrol+0x340>)
 8005aee:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005af0:	4b32      	ldr	r3, [pc, #200]	; (8005bbc <eepromKontrol+0x284>)
 8005af2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005af6:	4b61      	ldr	r3, [pc, #388]	; (8005c7c <eepromKontrol+0x344>)
 8005af8:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005afa:	4b52      	ldr	r3, [pc, #328]	; (8005c44 <eepromKontrol+0x30c>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff f828 	bl	8004b54 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005b04:	4b4e      	ldr	r3, [pc, #312]	; (8005c40 <eepromKontrol+0x308>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b09      	cmp	r3, #9
 8005b0a:	d902      	bls.n	8005b12 <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005b0c:	4b4c      	ldr	r3, [pc, #304]	; (8005c40 <eepromKontrol+0x308>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005b12:	4b4a      	ldr	r3, [pc, #296]	; (8005c3c <eepromKontrol+0x304>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b09      	cmp	r3, #9
 8005b18:	d902      	bls.n	8005b20 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005b1a:	4b48      	ldr	r3, [pc, #288]	; (8005c3c <eepromKontrol+0x304>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005b20:	4b45      	ldr	r3, [pc, #276]	; (8005c38 <eepromKontrol+0x300>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b09      	cmp	r3, #9
 8005b26:	d902      	bls.n	8005b2e <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005b28:	4b43      	ldr	r3, [pc, #268]	; (8005c38 <eepromKontrol+0x300>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005b2e:	4b41      	ldr	r3, [pc, #260]	; (8005c34 <eepromKontrol+0x2fc>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b09      	cmp	r3, #9
 8005b34:	d902      	bls.n	8005b3c <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005b36:	4b3f      	ldr	r3, [pc, #252]	; (8005c34 <eepromKontrol+0x2fc>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005b3c:	4b3c      	ldr	r3, [pc, #240]	; (8005c30 <eepromKontrol+0x2f8>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b09      	cmp	r3, #9
 8005b42:	d902      	bls.n	8005b4a <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005b44:	4b3a      	ldr	r3, [pc, #232]	; (8005c30 <eepromKontrol+0x2f8>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005b4a:	4b1f      	ldr	r3, [pc, #124]	; (8005bc8 <eepromKontrol+0x290>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d902      	bls.n	8005b58 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005b52:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <eepromKontrol+0x290>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005b58:	4b1c      	ldr	r3, [pc, #112]	; (8005bcc <eepromKontrol+0x294>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d902      	bls.n	8005b66 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005b60:	4b1a      	ldr	r3, [pc, #104]	; (8005bcc <eepromKontrol+0x294>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005b66:	4b1a      	ldr	r3, [pc, #104]	; (8005bd0 <eepromKontrol+0x298>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d902      	bls.n	8005b74 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005b6e:	4b18      	ldr	r3, [pc, #96]	; (8005bd0 <eepromKontrol+0x298>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005b74:	4b17      	ldr	r3, [pc, #92]	; (8005bd4 <eepromKontrol+0x29c>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d902      	bls.n	8005b82 <eepromKontrol+0x24a>
	    altLimit=1;
 8005b7c:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <eepromKontrol+0x29c>)
 8005b7e:	2201      	movs	r2, #1
 8005b80:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005b82:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <eepromKontrol+0x2a0>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d902      	bls.n	8005b90 <eepromKontrol+0x258>
	    basincSalteri=1;
 8005b8a:	4b13      	ldr	r3, [pc, #76]	; (8005bd8 <eepromKontrol+0x2a0>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005b90:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <eepromKontrol+0x2a4>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d902      	bls.n	8005b9e <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005b98:	4b10      	ldr	r3, [pc, #64]	; (8005bdc <eepromKontrol+0x2a4>)
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005b9e:	4b2d      	ldr	r3, [pc, #180]	; (8005c54 <eepromKontrol+0x31c>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d902      	bls.n	8005bac <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005ba6:	4b2b      	ldr	r3, [pc, #172]	; (8005c54 <eepromKontrol+0x31c>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005bac:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <eepromKontrol+0x2a8>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d965      	bls.n	8005c80 <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <eepromKontrol+0x2a8>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	e061      	b.n	8005c80 <eepromKontrol+0x348>
 8005bbc:	20000b3c 	.word	0x20000b3c
 8005bc0:	20000a58 	.word	0x20000a58
 8005bc4:	20000baa 	.word	0x20000baa
 8005bc8:	20000c0d 	.word	0x20000c0d
 8005bcc:	20000c10 	.word	0x20000c10
 8005bd0:	20000c11 	.word	0x20000c11
 8005bd4:	20000c12 	.word	0x20000c12
 8005bd8:	20000c13 	.word	0x20000c13
 8005bdc:	20000c14 	.word	0x20000c14
 8005be0:	20000c15 	.word	0x20000c15
 8005be4:	20000c25 	.word	0x20000c25
 8005be8:	20000c16 	.word	0x20000c16
 8005bec:	20000c26 	.word	0x20000c26
 8005bf0:	20000c17 	.word	0x20000c17
 8005bf4:	20000c27 	.word	0x20000c27
 8005bf8:	20000c1a 	.word	0x20000c1a
 8005bfc:	20000c1b 	.word	0x20000c1b
 8005c00:	20000c1c 	.word	0x20000c1c
 8005c04:	20000c1d 	.word	0x20000c1d
 8005c08:	20000c1e 	.word	0x20000c1e
 8005c0c:	20000c1f 	.word	0x20000c1f
 8005c10:	20000c20 	.word	0x20000c20
 8005c14:	20000c21 	.word	0x20000c21
 8005c18:	20000c22 	.word	0x20000c22
 8005c1c:	20000c23 	.word	0x20000c23
 8005c20:	20000c24 	.word	0x20000c24
 8005c24:	20000c28 	.word	0x20000c28
 8005c28:	20000c2a 	.word	0x20000c2a
 8005c2c:	20000c08 	.word	0x20000c08
 8005c30:	20000c09 	.word	0x20000c09
 8005c34:	20000c0a 	.word	0x20000c0a
 8005c38:	200009b2 	.word	0x200009b2
 8005c3c:	200009b3 	.word	0x200009b3
 8005c40:	20000c0b 	.word	0x20000c0b
 8005c44:	20000c2d 	.word	0x20000c2d
 8005c48:	20000c2b 	.word	0x20000c2b
 8005c4c:	20000c19 	.word	0x20000c19
 8005c50:	20000c2c 	.word	0x20000c2c
 8005c54:	20000c18 	.word	0x20000c18
 8005c58:	20000c2e 	.word	0x20000c2e
 8005c5c:	20000c2f 	.word	0x20000c2f
 8005c60:	20000c30 	.word	0x20000c30
 8005c64:	20000c31 	.word	0x20000c31
 8005c68:	20000c32 	.word	0x20000c32
 8005c6c:	20000c33 	.word	0x20000c33
 8005c70:	20000c34 	.word	0x20000c34
 8005c74:	20000c35 	.word	0x20000c35
 8005c78:	20000c36 	.word	0x20000c36
 8005c7c:	20000c37 	.word	0x20000c37
	}

	if(kapi1AcSure>5) {
 8005c80:	4b55      	ldr	r3, [pc, #340]	; (8005dd8 <eepromKontrol+0x4a0>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b05      	cmp	r3, #5
 8005c86:	d902      	bls.n	8005c8e <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005c88:	4b53      	ldr	r3, [pc, #332]	; (8005dd8 <eepromKontrol+0x4a0>)
 8005c8a:	2205      	movs	r2, #5
 8005c8c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005c8e:	4b53      	ldr	r3, [pc, #332]	; (8005ddc <eepromKontrol+0x4a4>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d902      	bls.n	8005c9c <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005c96:	4b51      	ldr	r3, [pc, #324]	; (8005ddc <eepromKontrol+0x4a4>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005c9c:	4b50      	ldr	r3, [pc, #320]	; (8005de0 <eepromKontrol+0x4a8>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b05      	cmp	r3, #5
 8005ca2:	d902      	bls.n	8005caa <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005ca4:	4b4e      	ldr	r3, [pc, #312]	; (8005de0 <eepromKontrol+0x4a8>)
 8005ca6:	2205      	movs	r2, #5
 8005ca8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005caa:	4b4e      	ldr	r3, [pc, #312]	; (8005de4 <eepromKontrol+0x4ac>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d902      	bls.n	8005cb8 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005cb2:	4b4c      	ldr	r3, [pc, #304]	; (8005de4 <eepromKontrol+0x4ac>)
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005cb8:	4b4b      	ldr	r3, [pc, #300]	; (8005de8 <eepromKontrol+0x4b0>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d902      	bls.n	8005cc6 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005cc0:	4b49      	ldr	r3, [pc, #292]	; (8005de8 <eepromKontrol+0x4b0>)
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005cc6:	4b49      	ldr	r3, [pc, #292]	; (8005dec <eepromKontrol+0x4b4>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b05      	cmp	r3, #5
 8005ccc:	d902      	bls.n	8005cd4 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005cce:	4b47      	ldr	r3, [pc, #284]	; (8005dec <eepromKontrol+0x4b4>)
 8005cd0:	2205      	movs	r2, #5
 8005cd2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005cd4:	4b46      	ldr	r3, [pc, #280]	; (8005df0 <eepromKontrol+0x4b8>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d902      	bls.n	8005ce2 <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005cdc:	4b44      	ldr	r3, [pc, #272]	; (8005df0 <eepromKontrol+0x4b8>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005ce2:	4b44      	ldr	r3, [pc, #272]	; (8005df4 <eepromKontrol+0x4bc>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d902      	bls.n	8005cf0 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005cea:	4b42      	ldr	r3, [pc, #264]	; (8005df4 <eepromKontrol+0x4bc>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005cf0:	4b41      	ldr	r3, [pc, #260]	; (8005df8 <eepromKontrol+0x4c0>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d902      	bls.n	8005cfe <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005cf8:	4b3f      	ldr	r3, [pc, #252]	; (8005df8 <eepromKontrol+0x4c0>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005cfe:	4b3f      	ldr	r3, [pc, #252]	; (8005dfc <eepromKontrol+0x4c4>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d902      	bls.n	8005d0c <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005d06:	4b3d      	ldr	r3, [pc, #244]	; (8005dfc <eepromKontrol+0x4c4>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005d0c:	4b3c      	ldr	r3, [pc, #240]	; (8005e00 <eepromKontrol+0x4c8>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d902      	bls.n	8005d1a <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005d14:	4b3a      	ldr	r3, [pc, #232]	; (8005e00 <eepromKontrol+0x4c8>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005d1a:	4b3a      	ldr	r3, [pc, #232]	; (8005e04 <eepromKontrol+0x4cc>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d902      	bls.n	8005d28 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005d22:	4b38      	ldr	r3, [pc, #224]	; (8005e04 <eepromKontrol+0x4cc>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005d28:	4b37      	ldr	r3, [pc, #220]	; (8005e08 <eepromKontrol+0x4d0>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b05      	cmp	r3, #5
 8005d2e:	d902      	bls.n	8005d36 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005d30:	4b35      	ldr	r3, [pc, #212]	; (8005e08 <eepromKontrol+0x4d0>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005d36:	4b35      	ldr	r3, [pc, #212]	; (8005e0c <eepromKontrol+0x4d4>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	d902      	bls.n	8005d44 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005d3e:	4b33      	ldr	r3, [pc, #204]	; (8005e0c <eepromKontrol+0x4d4>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005d44:	4b32      	ldr	r3, [pc, #200]	; (8005e10 <eepromKontrol+0x4d8>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b05      	cmp	r3, #5
 8005d4a:	d902      	bls.n	8005d52 <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005d4c:	4b30      	ldr	r3, [pc, #192]	; (8005e10 <eepromKontrol+0x4d8>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005d52:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <eepromKontrol+0x4dc>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	d902      	bls.n	8005d60 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005d5a:	4b2e      	ldr	r3, [pc, #184]	; (8005e14 <eepromKontrol+0x4dc>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005d60:	4b2d      	ldr	r3, [pc, #180]	; (8005e18 <eepromKontrol+0x4e0>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2bb4      	cmp	r3, #180	; 0xb4
 8005d66:	d902      	bls.n	8005d6e <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005d68:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <eepromKontrol+0x4e0>)
 8005d6a:	223c      	movs	r2, #60	; 0x3c
 8005d6c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005d6e:	4b2b      	ldr	r3, [pc, #172]	; (8005e1c <eepromKontrol+0x4e4>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d902      	bls.n	8005d7c <eepromKontrol+0x444>
	    buzzer=0;
 8005d76:	4b29      	ldr	r3, [pc, #164]	; (8005e1c <eepromKontrol+0x4e4>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005d7c:	4b28      	ldr	r3, [pc, #160]	; (8005e20 <eepromKontrol+0x4e8>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d902      	bls.n	8005d8a <eepromKontrol+0x452>
	    demoMode=0;
 8005d84:	4b26      	ldr	r3, [pc, #152]	; (8005e20 <eepromKontrol+0x4e8>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005d8a:	4b26      	ldr	r3, [pc, #152]	; (8005e24 <eepromKontrol+0x4ec>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d902      	bls.n	8005d98 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005d92:	4b24      	ldr	r3, [pc, #144]	; (8005e24 <eepromKontrol+0x4ec>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005d98:	4b23      	ldr	r3, [pc, #140]	; (8005e28 <eepromKontrol+0x4f0>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d902      	bls.n	8005da6 <eepromKontrol+0x46e>
	    dilSecim=0;
 8005da0:	4b21      	ldr	r3, [pc, #132]	; (8005e28 <eepromKontrol+0x4f0>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005da6:	4b21      	ldr	r3, [pc, #132]	; (8005e2c <eepromKontrol+0x4f4>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d902      	bls.n	8005db4 <eepromKontrol+0x47c>
		iotMode=0;
 8005dae:	4b1f      	ldr	r3, [pc, #124]	; (8005e2c <eepromKontrol+0x4f4>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 8005db4:	4b1e      	ldr	r3, [pc, #120]	; (8005e30 <eepromKontrol+0x4f8>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	461a      	mov	r2, r3
 8005dba:	4b1e      	ldr	r3, [pc, #120]	; (8005e34 <eepromKontrol+0x4fc>)
 8005dbc:	441a      	add	r2, r3
 8005dbe:	4b1e      	ldr	r3, [pc, #120]	; (8005e38 <eepromKontrol+0x500>)
 8005dc0:	6810      	ldr	r0, [r2, #0]
 8005dc2:	6851      	ldr	r1, [r2, #4]
 8005dc4:	6892      	ldr	r2, [r2, #8]
 8005dc6:	c307      	stmia	r3!, {r0, r1, r2}
	HAL_Delay(100);
 8005dc8:	2064      	movs	r0, #100	; 0x64
 8005dca:	f002 ff5b 	bl	8008c84 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
		//convertAndSendData();
	}
}
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000c25 	.word	0x20000c25
 8005ddc:	20000c16 	.word	0x20000c16
 8005de0:	20000c26 	.word	0x20000c26
 8005de4:	20000c17 	.word	0x20000c17
 8005de8:	20000c19 	.word	0x20000c19
 8005dec:	20000c27 	.word	0x20000c27
 8005df0:	20000c1a 	.word	0x20000c1a
 8005df4:	20000c1b 	.word	0x20000c1b
 8005df8:	20000c1c 	.word	0x20000c1c
 8005dfc:	20000c1d 	.word	0x20000c1d
 8005e00:	20000c1e 	.word	0x20000c1e
 8005e04:	20000c1f 	.word	0x20000c1f
 8005e08:	20000c20 	.word	0x20000c20
 8005e0c:	20000c21 	.word	0x20000c21
 8005e10:	20000c22 	.word	0x20000c22
 8005e14:	20000c23 	.word	0x20000c23
 8005e18:	20000c24 	.word	0x20000c24
 8005e1c:	20000c28 	.word	0x20000c28
 8005e20:	20000c2a 	.word	0x20000c2a
 8005e24:	20000c2c 	.word	0x20000c2c
 8005e28:	20000c2d 	.word	0x20000c2d
 8005e2c:	20000c2b 	.word	0x20000c2b
 8005e30:	200009b1 	.word	0x200009b1
 8005e34:	20000b3c 	.word	0x20000b3c
 8005e38:	20000bd4 	.word	0x20000bd4

08005e3c <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8005e3c:	b590      	push	{r4, r7, lr}
 8005e3e:	b089      	sub	sp, #36	; 0x24
 8005e40:	af04      	add	r7, sp, #16
 8005e42:	4603      	mov	r3, r0
 8005e44:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005e46:	4b26      	ldr	r3, [pc, #152]	; (8005ee0 <hata2EEPROM+0xa4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	1e5a      	subs	r2, r3, #1
 8005e4c:	4b25      	ldr	r3, [pc, #148]	; (8005ee4 <hata2EEPROM+0xa8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4413      	add	r3, r2
 8005e52:	4a25      	ldr	r2, [pc, #148]	; (8005ee8 <hata2EEPROM+0xac>)
 8005e54:	5cd3      	ldrb	r3, [r2, r3]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8005e5a:	f000 f849 	bl	8005ef0 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8005e5e:	e000      	b.n	8005e62 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005e60:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	e012      	b.n	8005e8e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005e68:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <hata2EEPROM+0xa8>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	4a1d      	ldr	r2, [pc, #116]	; (8005ee8 <hata2EEPROM+0xac>)
 8005e72:	5cd3      	ldrb	r3, [r2, r3]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d107      	bne.n	8005e88 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005e78:	4b1a      	ldr	r3, [pc, #104]	; (8005ee4 <hata2EEPROM+0xa8>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	4919      	ldr	r1, [pc, #100]	; (8005ee8 <hata2EEPROM+0xac>)
 8005e82:	79fa      	ldrb	r2, [r7, #7]
 8005e84:	54ca      	strb	r2, [r1, r3]
					break;
 8005e86:	e007      	b.n	8005e98 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	4b14      	ldr	r3, [pc, #80]	; (8005ee0 <hata2EEPROM+0xa4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	dbe7      	blt.n	8005e68 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8005e98:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <hata2EEPROM+0xa8>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	b299      	uxth	r1, r3
 8005e9e:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <hata2EEPROM+0xa4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	b298      	uxth	r0, r3
 8005ea4:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <hata2EEPROM+0xa8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a0f      	ldr	r2, [pc, #60]	; (8005ee8 <hata2EEPROM+0xac>)
 8005eaa:	4413      	add	r3, r2
 8005eac:	4a0c      	ldr	r2, [pc, #48]	; (8005ee0 <hata2EEPROM+0xa4>)
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	b292      	uxth	r2, r2
 8005eb2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8005eb6:	9402      	str	r4, [sp, #8]
 8005eb8:	9201      	str	r2, [sp, #4]
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	460a      	mov	r2, r1
 8005ec0:	21a0      	movs	r1, #160	; 0xa0
 8005ec2:	480a      	ldr	r0, [pc, #40]	; (8005eec <hata2EEPROM+0xb0>)
 8005ec4:	f003 ff68 	bl	8009d98 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8005ec8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ecc:	f002 feda 	bl	8008c84 <HAL_Delay>
	eepromKontrol(1);
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	f7ff fd31 	bl	8005938 <eepromKontrol>
}
 8005ed6:	bf00      	nop
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd90      	pop	{r4, r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000938 	.word	0x20000938
 8005ee4:	2000093c 	.word	0x2000093c
 8005ee8:	20000b3c 	.word	0x20000b3c
 8005eec:	20000a58 	.word	0x20000a58

08005ef0 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	607b      	str	r3, [r7, #4]
 8005efa:	e009      	b.n	8005f10 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8005efc:	4a0a      	ldr	r2, [pc, #40]	; (8005f28 <eepromDataFillWithEmpty+0x38>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f04:	4a09      	ldr	r2, [pc, #36]	; (8005f2c <eepromDataFillWithEmpty+0x3c>)
 8005f06:	2100      	movs	r1, #0
 8005f08:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	607b      	str	r3, [r7, #4]
 8005f10:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <eepromDataFillWithEmpty+0x40>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	dbf0      	blt.n	8005efc <eepromDataFillWithEmpty+0xc>
	}
}
 8005f1a:	bf00      	nop
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	20000910 	.word	0x20000910
 8005f2c:	20000b3c 	.word	0x20000b3c
 8005f30:	20000938 	.word	0x20000938

08005f34 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
	timer1=millis;
 8005f38:	4b47      	ldr	r3, [pc, #284]	; (8006058 <bekle+0x124>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a47      	ldr	r2, [pc, #284]	; (800605c <bekle+0x128>)
 8005f3e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005f40:	e002      	b.n	8005f48 <bekle+0x14>
    	butonKontrol = 1;
 8005f42:	4b47      	ldr	r3, [pc, #284]	; (8006060 <bekle+0x12c>)
 8005f44:	2201      	movs	r2, #1
 8005f46:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005f48:	2101      	movs	r1, #1
 8005f4a:	4846      	ldr	r0, [pc, #280]	; (8006064 <bekle+0x130>)
 8005f4c:	f003 fc6a 	bl	8009824 <HAL_GPIO_ReadPin>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d109      	bne.n	8005f6a <bekle+0x36>
 8005f56:	4b40      	ldr	r3, [pc, #256]	; (8006058 <bekle+0x124>)
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	4b40      	ldr	r3, [pc, #256]	; (800605c <bekle+0x128>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d0ef      	beq.n	8005f42 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005f62:	e002      	b.n	8005f6a <bekle+0x36>
    	butonKontrol = 1;
 8005f64:	4b3e      	ldr	r3, [pc, #248]	; (8006060 <bekle+0x12c>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005f6a:	2108      	movs	r1, #8
 8005f6c:	483e      	ldr	r0, [pc, #248]	; (8006068 <bekle+0x134>)
 8005f6e:	f003 fc59 	bl	8009824 <HAL_GPIO_ReadPin>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d109      	bne.n	8005f8c <bekle+0x58>
 8005f78:	4b37      	ldr	r3, [pc, #220]	; (8006058 <bekle+0x124>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4b37      	ldr	r3, [pc, #220]	; (800605c <bekle+0x128>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d0ef      	beq.n	8005f64 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005f84:	e002      	b.n	8005f8c <bekle+0x58>
    	butonKontrol = 1;
 8005f86:	4b36      	ldr	r3, [pc, #216]	; (8006060 <bekle+0x12c>)
 8005f88:	2201      	movs	r2, #1
 8005f8a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005f8c:	2102      	movs	r1, #2
 8005f8e:	4835      	ldr	r0, [pc, #212]	; (8006064 <bekle+0x130>)
 8005f90:	f003 fc48 	bl	8009824 <HAL_GPIO_ReadPin>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d109      	bne.n	8005fae <bekle+0x7a>
 8005f9a:	4b2f      	ldr	r3, [pc, #188]	; (8006058 <bekle+0x124>)
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4b2f      	ldr	r3, [pc, #188]	; (800605c <bekle+0x128>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d0ef      	beq.n	8005f86 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fa6:	e002      	b.n	8005fae <bekle+0x7a>
    	butonKontrol = 1;
 8005fa8:	4b2d      	ldr	r3, [pc, #180]	; (8006060 <bekle+0x12c>)
 8005faa:	2201      	movs	r2, #1
 8005fac:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fae:	2104      	movs	r1, #4
 8005fb0:	482c      	ldr	r0, [pc, #176]	; (8006064 <bekle+0x130>)
 8005fb2:	f003 fc37 	bl	8009824 <HAL_GPIO_ReadPin>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d109      	bne.n	8005fd0 <bekle+0x9c>
 8005fbc:	4b26      	ldr	r3, [pc, #152]	; (8006058 <bekle+0x124>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4b26      	ldr	r3, [pc, #152]	; (800605c <bekle+0x128>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d0ef      	beq.n	8005fa8 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fc8:	e002      	b.n	8005fd0 <bekle+0x9c>
    	butonKontrol = 1;
 8005fca:	4b25      	ldr	r3, [pc, #148]	; (8006060 <bekle+0x12c>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fd0:	2108      	movs	r1, #8
 8005fd2:	4824      	ldr	r0, [pc, #144]	; (8006064 <bekle+0x130>)
 8005fd4:	f003 fc26 	bl	8009824 <HAL_GPIO_ReadPin>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d109      	bne.n	8005ff2 <bekle+0xbe>
 8005fde:	4b1e      	ldr	r3, [pc, #120]	; (8006058 <bekle+0x124>)
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b1e      	ldr	r3, [pc, #120]	; (800605c <bekle+0x128>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d0ef      	beq.n	8005fca <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005fea:	e002      	b.n	8005ff2 <bekle+0xbe>
    	butonKontrol = 1;
 8005fec:	4b1c      	ldr	r3, [pc, #112]	; (8006060 <bekle+0x12c>)
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005ff2:	2180      	movs	r1, #128	; 0x80
 8005ff4:	481c      	ldr	r0, [pc, #112]	; (8006068 <bekle+0x134>)
 8005ff6:	f003 fc15 	bl	8009824 <HAL_GPIO_ReadPin>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d109      	bne.n	8006014 <bekle+0xe0>
 8006000:	4b15      	ldr	r3, [pc, #84]	; (8006058 <bekle+0x124>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	4b15      	ldr	r3, [pc, #84]	; (800605c <bekle+0x128>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d0ef      	beq.n	8005fec <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800600c:	e002      	b.n	8006014 <bekle+0xe0>
    	butonKontrol = 1;
 800600e:	4b14      	ldr	r3, [pc, #80]	; (8006060 <bekle+0x12c>)
 8006010:	2201      	movs	r2, #1
 8006012:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006018:	4813      	ldr	r0, [pc, #76]	; (8006068 <bekle+0x134>)
 800601a:	f003 fc03 	bl	8009824 <HAL_GPIO_ReadPin>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d109      	bne.n	8006038 <bekle+0x104>
 8006024:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <bekle+0x124>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4b0c      	ldr	r3, [pc, #48]	; (800605c <bekle+0x128>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	429a      	cmp	r2, r3
 800602e:	d0ee      	beq.n	800600e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006030:	e002      	b.n	8006038 <bekle+0x104>
    	butonKontrol = 1;
 8006032:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <bekle+0x12c>)
 8006034:	2201      	movs	r2, #1
 8006036:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800603c:	480a      	ldr	r0, [pc, #40]	; (8006068 <bekle+0x134>)
 800603e:	f003 fbf1 	bl	8009824 <HAL_GPIO_ReadPin>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d105      	bne.n	8006054 <bekle+0x120>
 8006048:	4b03      	ldr	r3, [pc, #12]	; (8006058 <bekle+0x124>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	4b03      	ldr	r3, [pc, #12]	; (800605c <bekle+0x128>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d0ee      	beq.n	8006032 <bekle+0xfe>
    }

}
 8006054:	bf00      	nop
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20000bb4 	.word	0x20000bb4
 800605c:	20000bbc 	.word	0x20000bbc
 8006060:	20000c3b 	.word	0x20000c3b
 8006064:	40010800 	.word	0x40010800
 8006068:	40011000 	.word	0x40011000

0800606c <i2cTest>:

void i2cTest() {
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8006072:	463b      	mov	r3, r7
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	605a      	str	r2, [r3, #4]
 800607a:	609a      	str	r2, [r3, #8]
 800607c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 800607e:	4b50      	ldr	r3, [pc, #320]	; (80061c0 <i2cTest+0x154>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	4b4e      	ldr	r3, [pc, #312]	; (80061c0 <i2cTest+0x154>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0201 	bic.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 800608e:	484c      	ldr	r0, [pc, #304]	; (80061c0 <i2cTest+0x154>)
 8006090:	f003 fd54 	bl	8009b3c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006094:	23c0      	movs	r3, #192	; 0xc0
 8006096:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8006098:	2311      	movs	r3, #17
 800609a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800609c:	2301      	movs	r3, #1
 800609e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80060a0:	2303      	movs	r3, #3
 80060a2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80060a4:	463b      	mov	r3, r7
 80060a6:	4619      	mov	r1, r3
 80060a8:	4846      	ldr	r0, [pc, #280]	; (80061c4 <i2cTest+0x158>)
 80060aa:	f003 f95b 	bl	8009364 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80060ae:	2201      	movs	r2, #1
 80060b0:	2140      	movs	r1, #64	; 0x40
 80060b2:	4844      	ldr	r0, [pc, #272]	; (80061c4 <i2cTest+0x158>)
 80060b4:	f003 fbcd 	bl	8009852 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80060b8:	2201      	movs	r2, #1
 80060ba:	2180      	movs	r1, #128	; 0x80
 80060bc:	4841      	ldr	r0, [pc, #260]	; (80061c4 <i2cTest+0x158>)
 80060be:	f003 fbc8 	bl	8009852 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80060c2:	200a      	movs	r0, #10
 80060c4:	f002 fdde 	bl	8008c84 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80060c8:	bf00      	nop
 80060ca:	2140      	movs	r1, #64	; 0x40
 80060cc:	483d      	ldr	r0, [pc, #244]	; (80061c4 <i2cTest+0x158>)
 80060ce:	f003 fba9 	bl	8009824 <HAL_GPIO_ReadPin>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d006      	beq.n	80060e6 <i2cTest+0x7a>
 80060d8:	2180      	movs	r1, #128	; 0x80
 80060da:	483a      	ldr	r0, [pc, #232]	; (80061c4 <i2cTest+0x158>)
 80060dc:	f003 fba2 	bl	8009824 <HAL_GPIO_ReadPin>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d1f1      	bne.n	80060ca <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80060e6:	2200      	movs	r2, #0
 80060e8:	2180      	movs	r1, #128	; 0x80
 80060ea:	4836      	ldr	r0, [pc, #216]	; (80061c4 <i2cTest+0x158>)
 80060ec:	f003 fbb1 	bl	8009852 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 80060f0:	200a      	movs	r0, #10
 80060f2:	f002 fdc7 	bl	8008c84 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 80060f6:	bf00      	nop
 80060f8:	2180      	movs	r1, #128	; 0x80
 80060fa:	4832      	ldr	r0, [pc, #200]	; (80061c4 <i2cTest+0x158>)
 80060fc:	f003 fb92 	bl	8009824 <HAL_GPIO_ReadPin>
 8006100:	4603      	mov	r3, r0
 8006102:	2b01      	cmp	r3, #1
 8006104:	d0f8      	beq.n	80060f8 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8006106:	2200      	movs	r2, #0
 8006108:	2140      	movs	r1, #64	; 0x40
 800610a:	482e      	ldr	r0, [pc, #184]	; (80061c4 <i2cTest+0x158>)
 800610c:	f003 fba1 	bl	8009852 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006110:	200a      	movs	r0, #10
 8006112:	f002 fdb7 	bl	8008c84 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8006116:	bf00      	nop
 8006118:	2140      	movs	r1, #64	; 0x40
 800611a:	482a      	ldr	r0, [pc, #168]	; (80061c4 <i2cTest+0x158>)
 800611c:	f003 fb82 	bl	8009824 <HAL_GPIO_ReadPin>
 8006120:	4603      	mov	r3, r0
 8006122:	2b01      	cmp	r3, #1
 8006124:	d0f8      	beq.n	8006118 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8006126:	2201      	movs	r2, #1
 8006128:	2140      	movs	r1, #64	; 0x40
 800612a:	4826      	ldr	r0, [pc, #152]	; (80061c4 <i2cTest+0x158>)
 800612c:	f003 fb91 	bl	8009852 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006130:	200a      	movs	r0, #10
 8006132:	f002 fda7 	bl	8008c84 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8006136:	bf00      	nop
 8006138:	2140      	movs	r1, #64	; 0x40
 800613a:	4822      	ldr	r0, [pc, #136]	; (80061c4 <i2cTest+0x158>)
 800613c:	f003 fb72 	bl	8009824 <HAL_GPIO_ReadPin>
 8006140:	4603      	mov	r3, r0
 8006142:	2b01      	cmp	r3, #1
 8006144:	d1f8      	bne.n	8006138 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006146:	2201      	movs	r2, #1
 8006148:	2180      	movs	r1, #128	; 0x80
 800614a:	481e      	ldr	r0, [pc, #120]	; (80061c4 <i2cTest+0x158>)
 800614c:	f003 fb81 	bl	8009852 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006150:	200a      	movs	r0, #10
 8006152:	f002 fd97 	bl	8008c84 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006156:	bf00      	nop
 8006158:	2180      	movs	r1, #128	; 0x80
 800615a:	481a      	ldr	r0, [pc, #104]	; (80061c4 <i2cTest+0x158>)
 800615c:	f003 fb62 	bl	8009824 <HAL_GPIO_ReadPin>
 8006160:	4603      	mov	r3, r0
 8006162:	2b01      	cmp	r3, #1
 8006164:	d1f8      	bne.n	8006158 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006166:	23c0      	movs	r3, #192	; 0xc0
 8006168:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800616a:	2312      	movs	r3, #18
 800616c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800616e:	2301      	movs	r3, #1
 8006170:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006172:	2303      	movs	r3, #3
 8006174:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8006176:	463b      	mov	r3, r7
 8006178:	4619      	mov	r1, r3
 800617a:	4812      	ldr	r0, [pc, #72]	; (80061c4 <i2cTest+0x158>)
 800617c:	f003 f8f2 	bl	8009364 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8006180:	4b0f      	ldr	r3, [pc, #60]	; (80061c0 <i2cTest+0x154>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <i2cTest+0x154>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800618e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8006190:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <i2cTest+0x154>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <i2cTest+0x154>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800619e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <i2cTest+0x154>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <i2cTest+0x154>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80061b0:	4803      	ldr	r0, [pc, #12]	; (80061c0 <i2cTest+0x154>)
 80061b2:	f003 fb7f 	bl	80098b4 <HAL_I2C_Init>
}
 80061b6:	bf00      	nop
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000a58 	.word	0x20000a58
 80061c4:	40010c00 	.word	0x40010c00

080061c8 <checkLCDBacklight>:

void checkLCDBacklight() {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 80061cc:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <checkLCDBacklight+0x34>)
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <checkLCDBacklight+0x38>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	1ad2      	subs	r2, r2, r3
 80061d6:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <checkLCDBacklight+0x3c>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	4619      	mov	r1, r3
 80061dc:	460b      	mov	r3, r1
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	440b      	add	r3, r1
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d303      	bcc.n	80061f0 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 80061e8:	2000      	movs	r0, #0
 80061ea:	f7fa fa07 	bl	80005fc <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80061ee:	e002      	b.n	80061f6 <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 80061f0:	2001      	movs	r0, #1
 80061f2:	f7fa fa03 	bl	80005fc <lcd_backlight>
}
 80061f6:	bf00      	nop
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000bb4 	.word	0x20000bb4
 8006200:	20000bd0 	.word	0x20000bd0
 8006204:	20000940 	.word	0x20000940

08006208 <checkBasincSalteri>:

void checkBasincSalteri() {
 8006208:	b580      	push	{r7, lr}
 800620a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 800620c:	4b13      	ldr	r3, [pc, #76]	; (800625c <checkBasincSalteri+0x54>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <checkBasincSalteri+0x12>
		basincVar=1;
 8006214:	4b12      	ldr	r3, [pc, #72]	; (8006260 <checkBasincSalteri+0x58>)
 8006216:	2201      	movs	r2, #1
 8006218:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 800621a:	4b10      	ldr	r3, [pc, #64]	; (800625c <checkBasincSalteri+0x54>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d119      	bne.n	8006256 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8006222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006226:	480f      	ldr	r0, [pc, #60]	; (8006264 <checkBasincSalteri+0x5c>)
 8006228:	f003 fafc 	bl	8009824 <HAL_GPIO_ReadPin>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8006232:	4b0d      	ldr	r3, [pc, #52]	; (8006268 <checkBasincSalteri+0x60>)
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	4b0d      	ldr	r3, [pc, #52]	; (800626c <checkBasincSalteri+0x64>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d90a      	bls.n	8006256 <checkBasincSalteri+0x4e>
				basincVar=1;
 8006240:	4b07      	ldr	r3, [pc, #28]	; (8006260 <checkBasincSalteri+0x58>)
 8006242:	2201      	movs	r2, #1
 8006244:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8006246:	e006      	b.n	8006256 <checkBasincSalteri+0x4e>
			timer5=millis;
 8006248:	4b07      	ldr	r3, [pc, #28]	; (8006268 <checkBasincSalteri+0x60>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a07      	ldr	r2, [pc, #28]	; (800626c <checkBasincSalteri+0x64>)
 800624e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8006250:	4b03      	ldr	r3, [pc, #12]	; (8006260 <checkBasincSalteri+0x58>)
 8006252:	2200      	movs	r2, #0
 8006254:	701a      	strb	r2, [r3, #0]
}
 8006256:	bf00      	nop
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000c13 	.word	0x20000c13
 8006260:	20000c0f 	.word	0x20000c0f
 8006264:	40011000 	.word	0x40011000
 8006268:	20000bb4 	.word	0x20000bb4
 800626c:	20000bcc 	.word	0x20000bcc

08006270 <checkBasGonder>:

void checkBasGonder() {
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006274:	4b1b      	ldr	r3, [pc, #108]	; (80062e4 <checkBasGonder+0x74>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d10b      	bne.n	8006294 <checkBasGonder+0x24>
 800627c:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <checkBasGonder+0x78>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d007      	beq.n	8006294 <checkBasGonder+0x24>
 8006284:	4b19      	ldr	r3, [pc, #100]	; (80062ec <checkBasGonder+0x7c>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d103      	bne.n	8006294 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 800628c:	4b18      	ldr	r3, [pc, #96]	; (80062f0 <checkBasGonder+0x80>)
 800628e:	2201      	movs	r2, #1
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	e009      	b.n	80062a8 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8006294:	4b14      	ldr	r3, [pc, #80]	; (80062e8 <checkBasGonder+0x78>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	f083 0301 	eor.w	r3, r3, #1
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 80062a2:	4b13      	ldr	r3, [pc, #76]	; (80062f0 <checkBasGonder+0x80>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80062a8:	4b0e      	ldr	r3, [pc, #56]	; (80062e4 <checkBasGonder+0x74>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10b      	bne.n	80062c8 <checkBasGonder+0x58>
 80062b0:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <checkBasGonder+0x84>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d007      	beq.n	80062c8 <checkBasGonder+0x58>
 80062b8:	4b0c      	ldr	r3, [pc, #48]	; (80062ec <checkBasGonder+0x7c>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d103      	bne.n	80062c8 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 80062c0:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <checkBasGonder+0x88>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 80062c6:	e009      	b.n	80062dc <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 80062c8:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <checkBasGonder+0x84>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	f083 0301 	eor.w	r3, r3, #1
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80062d6:	4b08      	ldr	r3, [pc, #32]	; (80062f8 <checkBasGonder+0x88>)
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
}
 80062dc:	bf00      	nop
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr
 80062e4:	20000c0d 	.word	0x20000c0d
 80062e8:	20000c41 	.word	0x20000c41
 80062ec:	20000c1b 	.word	0x20000c1b
 80062f0:	20000c48 	.word	0x20000c48
 80062f4:	20000c44 	.word	0x20000c44
 80062f8:	20000c49 	.word	0x20000c49

080062fc <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8006300:	4b24      	ldr	r3, [pc, #144]	; (8006394 <checkKapiSecimleri+0x98>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d102      	bne.n	800630e <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8006308:	4b23      	ldr	r3, [pc, #140]	; (8006398 <checkKapiSecimleri+0x9c>)
 800630a:	2201      	movs	r2, #1
 800630c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 800630e:	4b21      	ldr	r3, [pc, #132]	; (8006394 <checkKapiSecimleri+0x98>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d10e      	bne.n	8006334 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800631a:	4820      	ldr	r0, [pc, #128]	; (800639c <checkKapiSecimleri+0xa0>)
 800631c:	f003 fa82 	bl	8009824 <HAL_GPIO_ReadPin>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d103      	bne.n	800632e <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8006326:	4b1c      	ldr	r3, [pc, #112]	; (8006398 <checkKapiSecimleri+0x9c>)
 8006328:	2201      	movs	r2, #1
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	e002      	b.n	8006334 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 800632e:	4b1a      	ldr	r3, [pc, #104]	; (8006398 <checkKapiSecimleri+0x9c>)
 8006330:	2200      	movs	r2, #0
 8006332:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8006334:	4b17      	ldr	r3, [pc, #92]	; (8006394 <checkKapiSecimleri+0x98>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b02      	cmp	r3, #2
 800633a:	d10e      	bne.n	800635a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 800633c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006340:	4816      	ldr	r0, [pc, #88]	; (800639c <checkKapiSecimleri+0xa0>)
 8006342:	f003 fa6f 	bl	8009824 <HAL_GPIO_ReadPin>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d103      	bne.n	8006354 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 800634c:	4b12      	ldr	r3, [pc, #72]	; (8006398 <checkKapiSecimleri+0x9c>)
 800634e:	2201      	movs	r2, #1
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	e002      	b.n	800635a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8006354:	4b10      	ldr	r3, [pc, #64]	; (8006398 <checkKapiSecimleri+0x9c>)
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800635a:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <checkKapiSecimleri+0x98>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b03      	cmp	r3, #3
 8006360:	d116      	bne.n	8006390 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8006362:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006366:	480d      	ldr	r0, [pc, #52]	; (800639c <checkKapiSecimleri+0xa0>)
 8006368:	f003 fa5c 	bl	8009824 <HAL_GPIO_ReadPin>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10b      	bne.n	800638a <checkKapiSecimleri+0x8e>
 8006372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006376:	4809      	ldr	r0, [pc, #36]	; (800639c <checkKapiSecimleri+0xa0>)
 8006378:	f003 fa54 	bl	8009824 <HAL_GPIO_ReadPin>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d103      	bne.n	800638a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8006382:	4b05      	ldr	r3, [pc, #20]	; (8006398 <checkKapiSecimleri+0x9c>)
 8006384:	2201      	movs	r2, #1
 8006386:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8006388:	e002      	b.n	8006390 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800638a:	4b03      	ldr	r3, [pc, #12]	; (8006398 <checkKapiSecimleri+0x9c>)
 800638c:	2200      	movs	r2, #0
 800638e:	701a      	strb	r2, [r3, #0]
}
 8006390:	bf00      	nop
 8006392:	bd80      	pop	{r7, pc}
 8006394:	20000c14 	.word	0x20000c14
 8006398:	20000c5f 	.word	0x20000c5f
 800639c:	40010800 	.word	0x40010800

080063a0 <checkAktifCalisma>:

void checkAktifCalisma() {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80063a4:	4b62      	ldr	r3, [pc, #392]	; (8006530 <checkAktifCalisma+0x190>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f041 8332 	bne.w	8007a12 <checkAktifCalisma+0x1672>
 80063ae:	4b61      	ldr	r3, [pc, #388]	; (8006534 <checkAktifCalisma+0x194>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f041 832d 	bne.w	8007a12 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 80063b8:	4b5f      	ldr	r3, [pc, #380]	; (8006538 <checkAktifCalisma+0x198>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d11a      	bne.n	80063f6 <checkAktifCalisma+0x56>
 80063c0:	4b5e      	ldr	r3, [pc, #376]	; (800653c <checkAktifCalisma+0x19c>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d116      	bne.n	80063f6 <checkAktifCalisma+0x56>
 80063c8:	4b5d      	ldr	r3, [pc, #372]	; (8006540 <checkAktifCalisma+0x1a0>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <checkAktifCalisma+0x46>
 80063d0:	4b5c      	ldr	r3, [pc, #368]	; (8006544 <checkAktifCalisma+0x1a4>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	f083 0301 	eor.w	r3, r3, #1
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <checkAktifCalisma+0x46>
 80063de:	4b5a      	ldr	r3, [pc, #360]	; (8006548 <checkAktifCalisma+0x1a8>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d007      	beq.n	80063f6 <checkAktifCalisma+0x56>
 80063e6:	4b59      	ldr	r3, [pc, #356]	; (800654c <checkAktifCalisma+0x1ac>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d018      	beq.n	8006420 <checkAktifCalisma+0x80>
 80063ee:	4b58      	ldr	r3, [pc, #352]	; (8006550 <checkAktifCalisma+0x1b0>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d114      	bne.n	8006420 <checkAktifCalisma+0x80>
 80063f6:	4b57      	ldr	r3, [pc, #348]	; (8006554 <checkAktifCalisma+0x1b4>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d010      	beq.n	8006420 <checkAktifCalisma+0x80>
 80063fe:	4b56      	ldr	r3, [pc, #344]	; (8006558 <checkAktifCalisma+0x1b8>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00c      	beq.n	8006420 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006406:	2201      	movs	r2, #1
 8006408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800640c:	4853      	ldr	r0, [pc, #332]	; (800655c <checkAktifCalisma+0x1bc>)
 800640e:	f003 fa20 	bl	8009852 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8006412:	4b53      	ldr	r3, [pc, #332]	; (8006560 <checkAktifCalisma+0x1c0>)
 8006414:	2201      	movs	r2, #1
 8006416:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8006418:	4b52      	ldr	r3, [pc, #328]	; (8006564 <checkAktifCalisma+0x1c4>)
 800641a:	2201      	movs	r2, #1
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	e008      	b.n	8006432 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006420:	2200      	movs	r2, #0
 8006422:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006426:	484d      	ldr	r0, [pc, #308]	; (800655c <checkAktifCalisma+0x1bc>)
 8006428:	f003 fa13 	bl	8009852 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 800642c:	4b4c      	ldr	r3, [pc, #304]	; (8006560 <checkAktifCalisma+0x1c0>)
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8006432:	4b40      	ldr	r3, [pc, #256]	; (8006534 <checkAktifCalisma+0x194>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d160      	bne.n	80064fc <checkAktifCalisma+0x15c>
 800643a:	4b46      	ldr	r3, [pc, #280]	; (8006554 <checkAktifCalisma+0x1b4>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d05c      	beq.n	80064fc <checkAktifCalisma+0x15c>
 8006442:	4b45      	ldr	r3, [pc, #276]	; (8006558 <checkAktifCalisma+0x1b8>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d058      	beq.n	80064fc <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800644a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800644e:	4843      	ldr	r0, [pc, #268]	; (800655c <checkAktifCalisma+0x1bc>)
 8006450:	f003 f9e8 	bl	8009824 <HAL_GPIO_ReadPin>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <checkAktifCalisma+0xc2>
 800645a:	4b43      	ldr	r3, [pc, #268]	; (8006568 <checkAktifCalisma+0x1c8>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d04c      	beq.n	80064fc <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006462:	2102      	movs	r1, #2
 8006464:	4841      	ldr	r0, [pc, #260]	; (800656c <checkAktifCalisma+0x1cc>)
 8006466:	f003 f9dd 	bl	8009824 <HAL_GPIO_ReadPin>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d145      	bne.n	80064fc <checkAktifCalisma+0x15c>
				&& (basincVar)
 8006470:	4b3f      	ldr	r3, [pc, #252]	; (8006570 <checkAktifCalisma+0x1d0>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d041      	beq.n	80064fc <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8006478:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800647c:	4837      	ldr	r0, [pc, #220]	; (800655c <checkAktifCalisma+0x1bc>)
 800647e:	f003 f9d1 	bl	8009824 <HAL_GPIO_ReadPin>
 8006482:	4603      	mov	r3, r0
 8006484:	2b01      	cmp	r3, #1
 8006486:	d10e      	bne.n	80064a6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800648c:	4833      	ldr	r0, [pc, #204]	; (800655c <checkAktifCalisma+0x1bc>)
 800648e:	f003 f9c9 	bl	8009824 <HAL_GPIO_ReadPin>
 8006492:	4603      	mov	r3, r0
 8006494:	2b01      	cmp	r3, #1
 8006496:	d106      	bne.n	80064a6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8006498:	2140      	movs	r1, #64	; 0x40
 800649a:	4834      	ldr	r0, [pc, #208]	; (800656c <checkAktifCalisma+0x1cc>)
 800649c:	f003 f9c2 	bl	8009824 <HAL_GPIO_ReadPin>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d003      	beq.n	80064ae <checkAktifCalisma+0x10e>
 80064a6:	4b24      	ldr	r3, [pc, #144]	; (8006538 <checkAktifCalisma+0x198>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d026      	beq.n	80064fc <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 80064ae:	4b24      	ldr	r3, [pc, #144]	; (8006540 <checkAktifCalisma+0x1a0>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	f083 0301 	eor.w	r3, r3, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01f      	beq.n	80064fc <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 80064bc:	4b1f      	ldr	r3, [pc, #124]	; (800653c <checkAktifCalisma+0x19c>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	f083 0301 	eor.w	r3, r3, #1
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d018      	beq.n	80064fc <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 80064ca:	4b20      	ldr	r3, [pc, #128]	; (800654c <checkAktifCalisma+0x1ac>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	f083 0301 	eor.w	r3, r3, #1
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d011      	beq.n	80064fc <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 80064d8:	4b26      	ldr	r3, [pc, #152]	; (8006574 <checkAktifCalisma+0x1d4>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	f083 0301 	eor.w	r3, r3, #1
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 80064e6:	4b24      	ldr	r3, [pc, #144]	; (8006578 <checkAktifCalisma+0x1d8>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	f083 0301 	eor.w	r3, r3, #1
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 80064f4:	4b10      	ldr	r3, [pc, #64]	; (8006538 <checkAktifCalisma+0x198>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	e002      	b.n	8006502 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80064fc:	4b0e      	ldr	r3, [pc, #56]	; (8006538 <checkAktifCalisma+0x198>)
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8006502:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <checkAktifCalisma+0x198>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d03a      	beq.n	8006580 <checkAktifCalisma+0x1e0>
 800650a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800650e:	4817      	ldr	r0, [pc, #92]	; (800656c <checkAktifCalisma+0x1cc>)
 8006510:	f003 f988 	bl	8009824 <HAL_GPIO_ReadPin>
 8006514:	4603      	mov	r3, r0
 8006516:	2b01      	cmp	r3, #1
 8006518:	d132      	bne.n	8006580 <checkAktifCalisma+0x1e0>
 800651a:	4b18      	ldr	r3, [pc, #96]	; (800657c <checkAktifCalisma+0x1dc>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d02e      	beq.n	8006580 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006522:	2201      	movs	r2, #1
 8006524:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006528:	480c      	ldr	r0, [pc, #48]	; (800655c <checkAktifCalisma+0x1bc>)
 800652a:	f003 f992 	bl	8009852 <HAL_GPIO_WritePin>
 800652e:	e02d      	b.n	800658c <checkAktifCalisma+0x1ec>
 8006530:	20000c2a 	.word	0x20000c2a
 8006534:	20000c29 	.word	0x20000c29
 8006538:	20000c41 	.word	0x20000c41
 800653c:	20000c42 	.word	0x20000c42
 8006540:	20000c44 	.word	0x20000c44
 8006544:	20000c3c 	.word	0x20000c3c
 8006548:	20000c1f 	.word	0x20000c1f
 800654c:	20000c43 	.word	0x20000c43
 8006550:	20000c1e 	.word	0x20000c1e
 8006554:	20000c5e 	.word	0x20000c5e
 8006558:	20000c5f 	.word	0x20000c5f
 800655c:	40010c00 	.word	0x40010c00
 8006560:	20000c60 	.word	0x20000c60
 8006564:	20000c4b 	.word	0x20000c4b
 8006568:	20000c48 	.word	0x20000c48
 800656c:	40011000 	.word	0x40011000
 8006570:	20000c0f 	.word	0x20000c0f
 8006574:	20000c46 	.word	0x20000c46
 8006578:	20000c47 	.word	0x20000c47
 800657c:	20000c1a 	.word	0x20000c1a
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006580:	2200      	movs	r2, #0
 8006582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006586:	4860      	ldr	r0, [pc, #384]	; (8006708 <checkAktifCalisma+0x368>)
 8006588:	f003 f963 	bl	8009852 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800658c:	4b5f      	ldr	r3, [pc, #380]	; (800670c <checkAktifCalisma+0x36c>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d013      	beq.n	80065bc <checkAktifCalisma+0x21c>
 8006594:	4b5e      	ldr	r3, [pc, #376]	; (8006710 <checkAktifCalisma+0x370>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d007      	beq.n	80065ac <checkAktifCalisma+0x20c>
 800659c:	4b5c      	ldr	r3, [pc, #368]	; (8006710 <checkAktifCalisma+0x370>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d003      	beq.n	80065ac <checkAktifCalisma+0x20c>
 80065a4:	4b5b      	ldr	r3, [pc, #364]	; (8006714 <checkAktifCalisma+0x374>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d107      	bne.n	80065bc <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80065ac:	2201      	movs	r2, #1
 80065ae:	2104      	movs	r1, #4
 80065b0:	4855      	ldr	r0, [pc, #340]	; (8006708 <checkAktifCalisma+0x368>)
 80065b2:	f003 f94e 	bl	8009852 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 80065b6:	4b58      	ldr	r3, [pc, #352]	; (8006718 <checkAktifCalisma+0x378>)
 80065b8:	2201      	movs	r2, #1
 80065ba:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80065bc:	4b56      	ldr	r3, [pc, #344]	; (8006718 <checkAktifCalisma+0x378>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d02f      	beq.n	8006624 <checkAktifCalisma+0x284>
 80065c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065c8:	484f      	ldr	r0, [pc, #316]	; (8006708 <checkAktifCalisma+0x368>)
 80065ca:	f003 f92b 	bl	8009824 <HAL_GPIO_ReadPin>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d106      	bne.n	80065e2 <checkAktifCalisma+0x242>
 80065d4:	4b51      	ldr	r3, [pc, #324]	; (800671c <checkAktifCalisma+0x37c>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f083 0301 	eor.w	r3, r3, #1
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <checkAktifCalisma+0x250>
 80065e2:	2102      	movs	r1, #2
 80065e4:	484e      	ldr	r0, [pc, #312]	; (8006720 <checkAktifCalisma+0x380>)
 80065e6:	f003 f91d 	bl	8009824 <HAL_GPIO_ReadPin>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d119      	bne.n	8006624 <checkAktifCalisma+0x284>
 80065f0:	4b4c      	ldr	r3, [pc, #304]	; (8006724 <checkAktifCalisma+0x384>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d015      	beq.n	8006624 <checkAktifCalisma+0x284>
 80065f8:	4b4b      	ldr	r3, [pc, #300]	; (8006728 <checkAktifCalisma+0x388>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d011      	beq.n	8006624 <checkAktifCalisma+0x284>
 8006600:	4b4a      	ldr	r3, [pc, #296]	; (800672c <checkAktifCalisma+0x38c>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00d      	beq.n	8006624 <checkAktifCalisma+0x284>
 8006608:	4b49      	ldr	r3, [pc, #292]	; (8006730 <checkAktifCalisma+0x390>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	f083 0301 	eor.w	r3, r3, #1
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d006      	beq.n	8006624 <checkAktifCalisma+0x284>
			timer2=millis;
 8006616:	4b47      	ldr	r3, [pc, #284]	; (8006734 <checkAktifCalisma+0x394>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a47      	ldr	r2, [pc, #284]	; (8006738 <checkAktifCalisma+0x398>)
 800661c:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 800661e:	4b44      	ldr	r3, [pc, #272]	; (8006730 <checkAktifCalisma+0x390>)
 8006620:	2201      	movs	r2, #1
 8006622:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8006624:	4b43      	ldr	r3, [pc, #268]	; (8006734 <checkAktifCalisma+0x394>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	4b43      	ldr	r3, [pc, #268]	; (8006738 <checkAktifCalisma+0x398>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	4a43      	ldr	r2, [pc, #268]	; (800673c <checkAktifCalisma+0x39c>)
 8006630:	7812      	ldrb	r2, [r2, #0]
 8006632:	4293      	cmp	r3, r2
 8006634:	d303      	bcc.n	800663e <checkAktifCalisma+0x29e>
 8006636:	4b3e      	ldr	r3, [pc, #248]	; (8006730 <checkAktifCalisma+0x390>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d111      	bne.n	8006662 <checkAktifCalisma+0x2c2>
 800663e:	4b39      	ldr	r3, [pc, #228]	; (8006724 <checkAktifCalisma+0x384>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	f083 0301 	eor.w	r3, r3, #1
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <checkAktifCalisma+0x2c2>
 800664c:	4b36      	ldr	r3, [pc, #216]	; (8006728 <checkAktifCalisma+0x388>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	f083 0301 	eor.w	r3, r3, #1
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d103      	bne.n	8006662 <checkAktifCalisma+0x2c2>
 800665a:	4b34      	ldr	r3, [pc, #208]	; (800672c <checkAktifCalisma+0x38c>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006662:	2200      	movs	r2, #0
 8006664:	2104      	movs	r1, #4
 8006666:	4828      	ldr	r0, [pc, #160]	; (8006708 <checkAktifCalisma+0x368>)
 8006668:	f003 f8f3 	bl	8009852 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 800666c:	4b2a      	ldr	r3, [pc, #168]	; (8006718 <checkAktifCalisma+0x378>)
 800666e:	2200      	movs	r2, #0
 8006670:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8006672:	4b2f      	ldr	r3, [pc, #188]	; (8006730 <checkAktifCalisma+0x390>)
 8006674:	2200      	movs	r2, #0
 8006676:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8006678:	4b31      	ldr	r3, [pc, #196]	; (8006740 <checkAktifCalisma+0x3a0>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8006680:	4b30      	ldr	r3, [pc, #192]	; (8006744 <checkAktifCalisma+0x3a4>)
 8006682:	2201      	movs	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8006686:	4b2e      	ldr	r3, [pc, #184]	; (8006740 <checkAktifCalisma+0x3a0>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d116      	bne.n	80066bc <checkAktifCalisma+0x31c>
 800668e:	4b2e      	ldr	r3, [pc, #184]	; (8006748 <checkAktifCalisma+0x3a8>)
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d112      	bne.n	80066bc <checkAktifCalisma+0x31c>
 8006696:	2101      	movs	r1, #1
 8006698:	4821      	ldr	r0, [pc, #132]	; (8006720 <checkAktifCalisma+0x380>)
 800669a:	f003 f8c3 	bl	8009824 <HAL_GPIO_ReadPin>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10b      	bne.n	80066bc <checkAktifCalisma+0x31c>
 80066a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066a8:	4817      	ldr	r0, [pc, #92]	; (8006708 <checkAktifCalisma+0x368>)
 80066aa:	f003 f8bb 	bl	8009824 <HAL_GPIO_ReadPin>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d103      	bne.n	80066bc <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80066b4:	4b23      	ldr	r3, [pc, #140]	; (8006744 <checkAktifCalisma+0x3a4>)
 80066b6:	2201      	movs	r2, #1
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	e011      	b.n	80066e0 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80066bc:	4b20      	ldr	r3, [pc, #128]	; (8006740 <checkAktifCalisma+0x3a0>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d10d      	bne.n	80066e0 <checkAktifCalisma+0x340>
 80066c4:	2101      	movs	r1, #1
 80066c6:	4816      	ldr	r0, [pc, #88]	; (8006720 <checkAktifCalisma+0x380>)
 80066c8:	f003 f8ac 	bl	8009824 <HAL_GPIO_ReadPin>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d106      	bne.n	80066e0 <checkAktifCalisma+0x340>
 80066d2:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <checkAktifCalisma+0x3a8>)
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d102      	bne.n	80066e0 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80066da:	4b1a      	ldr	r3, [pc, #104]	; (8006744 <checkAktifCalisma+0x3a4>)
 80066dc:	2200      	movs	r2, #0
 80066de:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80066e0:	4b17      	ldr	r3, [pc, #92]	; (8006740 <checkAktifCalisma+0x3a0>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d134      	bne.n	8006752 <checkAktifCalisma+0x3b2>
 80066e8:	4b17      	ldr	r3, [pc, #92]	; (8006748 <checkAktifCalisma+0x3a8>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d130      	bne.n	8006752 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80066f0:	2101      	movs	r1, #1
 80066f2:	480b      	ldr	r0, [pc, #44]	; (8006720 <checkAktifCalisma+0x380>)
 80066f4:	f003 f896 	bl	8009824 <HAL_GPIO_ReadPin>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d126      	bne.n	800674c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80066fe:	4b11      	ldr	r3, [pc, #68]	; (8006744 <checkAktifCalisma+0x3a4>)
 8006700:	2201      	movs	r2, #1
 8006702:	701a      	strb	r2, [r3, #0]
 8006704:	e025      	b.n	8006752 <checkAktifCalisma+0x3b2>
 8006706:	bf00      	nop
 8006708:	40010c00 	.word	0x40010c00
 800670c:	20000c41 	.word	0x20000c41
 8006710:	20000c1b 	.word	0x20000c1b
 8006714:	20000c1f 	.word	0x20000c1f
 8006718:	20000c45 	.word	0x20000c45
 800671c:	20000c48 	.word	0x20000c48
 8006720:	40011000 	.word	0x40011000
 8006724:	20000c5e 	.word	0x20000c5e
 8006728:	20000c5f 	.word	0x20000c5f
 800672c:	20000c0f 	.word	0x20000c0f
 8006730:	20000c3d 	.word	0x20000c3d
 8006734:	20000bb4 	.word	0x20000bb4
 8006738:	20000bc0 	.word	0x20000bc0
 800673c:	20000c20 	.word	0x20000c20
 8006740:	20000c10 	.word	0x20000c10
 8006744:	20000c63 	.word	0x20000c63
 8006748:	20000c0d 	.word	0x20000c0d
			} else {
				cerceveVar=0;
 800674c:	4b7f      	ldr	r3, [pc, #508]	; (800694c <checkAktifCalisma+0x5ac>)
 800674e:	2200      	movs	r2, #0
 8006750:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8006752:	4b7f      	ldr	r3, [pc, #508]	; (8006950 <checkAktifCalisma+0x5b0>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d17c      	bne.n	8006854 <checkAktifCalisma+0x4b4>
 800675a:	4b7e      	ldr	r3, [pc, #504]	; (8006954 <checkAktifCalisma+0x5b4>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d078      	beq.n	8006854 <checkAktifCalisma+0x4b4>
 8006762:	4b7d      	ldr	r3, [pc, #500]	; (8006958 <checkAktifCalisma+0x5b8>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d074      	beq.n	8006854 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800676a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800676e:	487b      	ldr	r0, [pc, #492]	; (800695c <checkAktifCalisma+0x5bc>)
 8006770:	f003 f858 	bl	8009824 <HAL_GPIO_ReadPin>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <checkAktifCalisma+0x3e2>
 800677a:	4b79      	ldr	r3, [pc, #484]	; (8006960 <checkAktifCalisma+0x5c0>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d068      	beq.n	8006854 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8006782:	4b72      	ldr	r3, [pc, #456]	; (800694c <checkAktifCalisma+0x5ac>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d064      	beq.n	8006854 <checkAktifCalisma+0x4b4>
 800678a:	4b76      	ldr	r3, [pc, #472]	; (8006964 <checkAktifCalisma+0x5c4>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	f083 0301 	eor.w	r3, r3, #1
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d05d      	beq.n	8006854 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006798:	2104      	movs	r1, #4
 800679a:	4873      	ldr	r0, [pc, #460]	; (8006968 <checkAktifCalisma+0x5c8>)
 800679c:	f003 f842 	bl	8009824 <HAL_GPIO_ReadPin>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <checkAktifCalisma+0x40e>
 80067a6:	4b71      	ldr	r3, [pc, #452]	; (800696c <checkAktifCalisma+0x5cc>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d152      	bne.n	8006854 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80067ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067b2:	486a      	ldr	r0, [pc, #424]	; (800695c <checkAktifCalisma+0x5bc>)
 80067b4:	f003 f836 	bl	8009824 <HAL_GPIO_ReadPin>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d10e      	bne.n	80067dc <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80067be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067c2:	4866      	ldr	r0, [pc, #408]	; (800695c <checkAktifCalisma+0x5bc>)
 80067c4:	f003 f82e 	bl	8009824 <HAL_GPIO_ReadPin>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d106      	bne.n	80067dc <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80067ce:	2140      	movs	r1, #64	; 0x40
 80067d0:	4865      	ldr	r0, [pc, #404]	; (8006968 <checkAktifCalisma+0x5c8>)
 80067d2:	f003 f827 	bl	8009824 <HAL_GPIO_ReadPin>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d003      	beq.n	80067e4 <checkAktifCalisma+0x444>
 80067dc:	4b64      	ldr	r3, [pc, #400]	; (8006970 <checkAktifCalisma+0x5d0>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d037      	beq.n	8006854 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80067e4:	4b63      	ldr	r3, [pc, #396]	; (8006974 <checkAktifCalisma+0x5d4>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	f083 0301 	eor.w	r3, r3, #1
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d030      	beq.n	8006854 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80067f2:	4b61      	ldr	r3, [pc, #388]	; (8006978 <checkAktifCalisma+0x5d8>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	f083 0301 	eor.w	r3, r3, #1
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d029      	beq.n	8006854 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8006800:	4b5e      	ldr	r3, [pc, #376]	; (800697c <checkAktifCalisma+0x5dc>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	f083 0301 	eor.w	r3, r3, #1
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d022      	beq.n	8006854 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800680e:	4b5c      	ldr	r3, [pc, #368]	; (8006980 <checkAktifCalisma+0x5e0>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	f083 0301 	eor.w	r3, r3, #1
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01b      	beq.n	8006854 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 800681c:	4b59      	ldr	r3, [pc, #356]	; (8006984 <checkAktifCalisma+0x5e4>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	f083 0301 	eor.w	r3, r3, #1
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d014      	beq.n	8006854 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800682a:	4b57      	ldr	r3, [pc, #348]	; (8006988 <checkAktifCalisma+0x5e8>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	f083 0301 	eor.w	r3, r3, #1
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00d      	beq.n	8006854 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006838:	2201      	movs	r2, #1
 800683a:	2102      	movs	r1, #2
 800683c:	4847      	ldr	r0, [pc, #284]	; (800695c <checkAktifCalisma+0x5bc>)
 800683e:	f003 f808 	bl	8009852 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8006842:	4b4b      	ldr	r3, [pc, #300]	; (8006970 <checkAktifCalisma+0x5d0>)
 8006844:	2201      	movs	r2, #1
 8006846:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8006848:	4b50      	ldr	r3, [pc, #320]	; (800698c <checkAktifCalisma+0x5ec>)
 800684a:	2201      	movs	r2, #1
 800684c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800684e:	4b50      	ldr	r3, [pc, #320]	; (8006990 <checkAktifCalisma+0x5f0>)
 8006850:	2201      	movs	r2, #1
 8006852:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8006854:	4b46      	ldr	r3, [pc, #280]	; (8006970 <checkAktifCalisma+0x5d0>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d033      	beq.n	80068c4 <checkAktifCalisma+0x524>
 800685c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006860:	483e      	ldr	r0, [pc, #248]	; (800695c <checkAktifCalisma+0x5bc>)
 8006862:	f002 ffdf 	bl	8009824 <HAL_GPIO_ReadPin>
 8006866:	4603      	mov	r3, r0
 8006868:	2b01      	cmp	r3, #1
 800686a:	d106      	bne.n	800687a <checkAktifCalisma+0x4da>
 800686c:	4b3c      	ldr	r3, [pc, #240]	; (8006960 <checkAktifCalisma+0x5c0>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	f083 0301 	eor.w	r3, r3, #1
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <checkAktifCalisma+0x4f0>
 800687a:	2104      	movs	r1, #4
 800687c:	483a      	ldr	r0, [pc, #232]	; (8006968 <checkAktifCalisma+0x5c8>)
 800687e:	f002 ffd1 	bl	8009824 <HAL_GPIO_ReadPin>
 8006882:	4603      	mov	r3, r0
 8006884:	2b01      	cmp	r3, #1
 8006886:	d11d      	bne.n	80068c4 <checkAktifCalisma+0x524>
 8006888:	4b38      	ldr	r3, [pc, #224]	; (800696c <checkAktifCalisma+0x5cc>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d019      	beq.n	80068c4 <checkAktifCalisma+0x524>
 8006890:	4b30      	ldr	r3, [pc, #192]	; (8006954 <checkAktifCalisma+0x5b4>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d015      	beq.n	80068c4 <checkAktifCalisma+0x524>
 8006898:	4b2f      	ldr	r3, [pc, #188]	; (8006958 <checkAktifCalisma+0x5b8>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d011      	beq.n	80068c4 <checkAktifCalisma+0x524>
 80068a0:	4b2a      	ldr	r3, [pc, #168]	; (800694c <checkAktifCalisma+0x5ac>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00d      	beq.n	80068c4 <checkAktifCalisma+0x524>
 80068a8:	4b3a      	ldr	r3, [pc, #232]	; (8006994 <checkAktifCalisma+0x5f4>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	f083 0301 	eor.w	r3, r3, #1
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d006      	beq.n	80068c4 <checkAktifCalisma+0x524>
			timer2=millis;
 80068b6:	4b38      	ldr	r3, [pc, #224]	; (8006998 <checkAktifCalisma+0x5f8>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a38      	ldr	r2, [pc, #224]	; (800699c <checkAktifCalisma+0x5fc>)
 80068bc:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80068be:	4b35      	ldr	r3, [pc, #212]	; (8006994 <checkAktifCalisma+0x5f4>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80068c4:	4b34      	ldr	r3, [pc, #208]	; (8006998 <checkAktifCalisma+0x5f8>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	4b34      	ldr	r3, [pc, #208]	; (800699c <checkAktifCalisma+0x5fc>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	4a34      	ldr	r2, [pc, #208]	; (80069a0 <checkAktifCalisma+0x600>)
 80068d0:	7812      	ldrb	r2, [r2, #0]
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d303      	bcc.n	80068de <checkAktifCalisma+0x53e>
 80068d6:	4b2f      	ldr	r3, [pc, #188]	; (8006994 <checkAktifCalisma+0x5f4>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d114      	bne.n	8006908 <checkAktifCalisma+0x568>
 80068de:	4b1d      	ldr	r3, [pc, #116]	; (8006954 <checkAktifCalisma+0x5b4>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	f083 0301 	eor.w	r3, r3, #1
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10d      	bne.n	8006908 <checkAktifCalisma+0x568>
 80068ec:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <checkAktifCalisma+0x5b8>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f083 0301 	eor.w	r3, r3, #1
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <checkAktifCalisma+0x568>
 80068fa:	4b14      	ldr	r3, [pc, #80]	; (800694c <checkAktifCalisma+0x5ac>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	f083 0301 	eor.w	r3, r3, #1
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006908:	2200      	movs	r2, #0
 800690a:	2102      	movs	r1, #2
 800690c:	4813      	ldr	r0, [pc, #76]	; (800695c <checkAktifCalisma+0x5bc>)
 800690e:	f002 ffa0 	bl	8009852 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8006912:	4b17      	ldr	r3, [pc, #92]	; (8006970 <checkAktifCalisma+0x5d0>)
 8006914:	2200      	movs	r2, #0
 8006916:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006918:	4b1e      	ldr	r3, [pc, #120]	; (8006994 <checkAktifCalisma+0x5f4>)
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800691e:	4b14      	ldr	r3, [pc, #80]	; (8006970 <checkAktifCalisma+0x5d0>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d040      	beq.n	80069a8 <checkAktifCalisma+0x608>
 8006926:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800692a:	480f      	ldr	r0, [pc, #60]	; (8006968 <checkAktifCalisma+0x5c8>)
 800692c:	f002 ff7a 	bl	8009824 <HAL_GPIO_ReadPin>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d138      	bne.n	80069a8 <checkAktifCalisma+0x608>
 8006936:	4b1b      	ldr	r3, [pc, #108]	; (80069a4 <checkAktifCalisma+0x604>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d034      	beq.n	80069a8 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800693e:	2201      	movs	r2, #1
 8006940:	2101      	movs	r1, #1
 8006942:	4806      	ldr	r0, [pc, #24]	; (800695c <checkAktifCalisma+0x5bc>)
 8006944:	f002 ff85 	bl	8009852 <HAL_GPIO_WritePin>
 8006948:	e033      	b.n	80069b2 <checkAktifCalisma+0x612>
 800694a:	bf00      	nop
 800694c:	20000c63 	.word	0x20000c63
 8006950:	20000c29 	.word	0x20000c29
 8006954:	20000c5e 	.word	0x20000c5e
 8006958:	20000c5f 	.word	0x20000c5f
 800695c:	40010c00 	.word	0x40010c00
 8006960:	20000c49 	.word	0x20000c49
 8006964:	20000c5d 	.word	0x20000c5d
 8006968:	40011000 	.word	0x40011000
 800696c:	20000c12 	.word	0x20000c12
 8006970:	20000c44 	.word	0x20000c44
 8006974:	20000c41 	.word	0x20000c41
 8006978:	20000c45 	.word	0x20000c45
 800697c:	20000c42 	.word	0x20000c42
 8006980:	20000c43 	.word	0x20000c43
 8006984:	20000c46 	.word	0x20000c46
 8006988:	20000c47 	.word	0x20000c47
 800698c:	20000c4c 	.word	0x20000c4c
 8006990:	20000c6d 	.word	0x20000c6d
 8006994:	20000c3c 	.word	0x20000c3c
 8006998:	20000bb4 	.word	0x20000bb4
 800699c:	20000bc0 	.word	0x20000bc0
 80069a0:	20000c21 	.word	0x20000c21
 80069a4:	20000c11 	.word	0x20000c11
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80069a8:	2200      	movs	r2, #0
 80069aa:	2101      	movs	r1, #1
 80069ac:	4836      	ldr	r0, [pc, #216]	; (8006a88 <checkAktifCalisma+0x6e8>)
 80069ae:	f002 ff50 	bl	8009852 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80069b2:	4b36      	ldr	r3, [pc, #216]	; (8006a8c <checkAktifCalisma+0x6ec>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f040 8080 	bne.w	8006abc <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80069bc:	4b34      	ldr	r3, [pc, #208]	; (8006a90 <checkAktifCalisma+0x6f0>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d003      	beq.n	80069cc <checkAktifCalisma+0x62c>
 80069c4:	4b32      	ldr	r3, [pc, #200]	; (8006a90 <checkAktifCalisma+0x6f0>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d177      	bne.n	8006abc <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80069cc:	4b31      	ldr	r3, [pc, #196]	; (8006a94 <checkAktifCalisma+0x6f4>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d073      	beq.n	8006abc <checkAktifCalisma+0x71c>
 80069d4:	4b30      	ldr	r3, [pc, #192]	; (8006a98 <checkAktifCalisma+0x6f8>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d06f      	beq.n	8006abc <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80069dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069e0:	4829      	ldr	r0, [pc, #164]	; (8006a88 <checkAktifCalisma+0x6e8>)
 80069e2:	f002 ff1f 	bl	8009824 <HAL_GPIO_ReadPin>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d167      	bne.n	8006abc <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80069ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80069f0:	482a      	ldr	r0, [pc, #168]	; (8006a9c <checkAktifCalisma+0x6fc>)
 80069f2:	f002 ff17 	bl	8009824 <HAL_GPIO_ReadPin>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <checkAktifCalisma+0x664>
 80069fc:	4b28      	ldr	r3, [pc, #160]	; (8006aa0 <checkAktifCalisma+0x700>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d15b      	bne.n	8006abc <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006a04:	2140      	movs	r1, #64	; 0x40
 8006a06:	4825      	ldr	r0, [pc, #148]	; (8006a9c <checkAktifCalisma+0x6fc>)
 8006a08:	f002 ff0c 	bl	8009824 <HAL_GPIO_ReadPin>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d10f      	bne.n	8006a32 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a16:	481c      	ldr	r0, [pc, #112]	; (8006a88 <checkAktifCalisma+0x6e8>)
 8006a18:	f002 ff04 	bl	8009824 <HAL_GPIO_ReadPin>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d107      	bne.n	8006a32 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a26:	4818      	ldr	r0, [pc, #96]	; (8006a88 <checkAktifCalisma+0x6e8>)
 8006a28:	f002 fefc 	bl	8009824 <HAL_GPIO_ReadPin>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d003      	beq.n	8006a3a <checkAktifCalisma+0x69a>
 8006a32:	4b1c      	ldr	r3, [pc, #112]	; (8006aa4 <checkAktifCalisma+0x704>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d040      	beq.n	8006abc <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006a3a:	4b1b      	ldr	r3, [pc, #108]	; (8006aa8 <checkAktifCalisma+0x708>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	f083 0301 	eor.w	r3, r3, #1
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d039      	beq.n	8006abc <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006a48:	4b18      	ldr	r3, [pc, #96]	; (8006aac <checkAktifCalisma+0x70c>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	f083 0301 	eor.w	r3, r3, #1
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d032      	beq.n	8006abc <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006a56:	4b16      	ldr	r3, [pc, #88]	; (8006ab0 <checkAktifCalisma+0x710>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	f083 0301 	eor.w	r3, r3, #1
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d02b      	beq.n	8006abc <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006a64:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <checkAktifCalisma+0x714>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	f083 0301 	eor.w	r3, r3, #1
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d024      	beq.n	8006abc <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006a72:	4b11      	ldr	r3, [pc, #68]	; (8006ab8 <checkAktifCalisma+0x718>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	f083 0301 	eor.w	r3, r3, #1
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d01d      	beq.n	8006abc <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006a80:	4b08      	ldr	r3, [pc, #32]	; (8006aa4 <checkAktifCalisma+0x704>)
 8006a82:	2201      	movs	r2, #1
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	e01c      	b.n	8006ac2 <checkAktifCalisma+0x722>
 8006a88:	40010c00 	.word	0x40010c00
 8006a8c:	20000c29 	.word	0x20000c29
 8006a90:	20000c1b 	.word	0x20000c1b
 8006a94:	20000c5e 	.word	0x20000c5e
 8006a98:	20000c5f 	.word	0x20000c5f
 8006a9c:	40011000 	.word	0x40011000
 8006aa0:	20000c1c 	.word	0x20000c1c
 8006aa4:	20000c42 	.word	0x20000c42
 8006aa8:	20000c41 	.word	0x20000c41
 8006aac:	20000c45 	.word	0x20000c45
 8006ab0:	20000c44 	.word	0x20000c44
 8006ab4:	20000c43 	.word	0x20000c43
 8006ab8:	20000c47 	.word	0x20000c47
		} else {
			devmotoryukaricalisiyor=0;
 8006abc:	4b64      	ldr	r3, [pc, #400]	; (8006c50 <checkAktifCalisma+0x8b0>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006ac2:	4b63      	ldr	r3, [pc, #396]	; (8006c50 <checkAktifCalisma+0x8b0>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d007      	beq.n	8006ada <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006aca:	2201      	movs	r2, #1
 8006acc:	2120      	movs	r1, #32
 8006ace:	4861      	ldr	r0, [pc, #388]	; (8006c54 <checkAktifCalisma+0x8b4>)
 8006ad0:	f002 febf 	bl	8009852 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006ad4:	4b60      	ldr	r3, [pc, #384]	; (8006c58 <checkAktifCalisma+0x8b8>)
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006ada:	4b5f      	ldr	r3, [pc, #380]	; (8006c58 <checkAktifCalisma+0x8b8>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d025      	beq.n	8006b2e <checkAktifCalisma+0x78e>
 8006ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ae6:	485d      	ldr	r0, [pc, #372]	; (8006c5c <checkAktifCalisma+0x8bc>)
 8006ae8:	f002 fe9c 	bl	8009824 <HAL_GPIO_ReadPin>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d007      	beq.n	8006b02 <checkAktifCalisma+0x762>
 8006af2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006af6:	4857      	ldr	r0, [pc, #348]	; (8006c54 <checkAktifCalisma+0x8b4>)
 8006af8:	f002 fe94 	bl	8009824 <HAL_GPIO_ReadPin>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d115      	bne.n	8006b2e <checkAktifCalisma+0x78e>
 8006b02:	4b57      	ldr	r3, [pc, #348]	; (8006c60 <checkAktifCalisma+0x8c0>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d011      	beq.n	8006b2e <checkAktifCalisma+0x78e>
 8006b0a:	4b56      	ldr	r3, [pc, #344]	; (8006c64 <checkAktifCalisma+0x8c4>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00d      	beq.n	8006b2e <checkAktifCalisma+0x78e>
 8006b12:	4b55      	ldr	r3, [pc, #340]	; (8006c68 <checkAktifCalisma+0x8c8>)
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	f083 0301 	eor.w	r3, r3, #1
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d006      	beq.n	8006b2e <checkAktifCalisma+0x78e>
			timer2=millis;
 8006b20:	4b52      	ldr	r3, [pc, #328]	; (8006c6c <checkAktifCalisma+0x8cc>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a52      	ldr	r2, [pc, #328]	; (8006c70 <checkAktifCalisma+0x8d0>)
 8006b26:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006b28:	4b4f      	ldr	r3, [pc, #316]	; (8006c68 <checkAktifCalisma+0x8c8>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006b2e:	4b4f      	ldr	r3, [pc, #316]	; (8006c6c <checkAktifCalisma+0x8cc>)
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	4b4f      	ldr	r3, [pc, #316]	; (8006c70 <checkAktifCalisma+0x8d0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	4a4e      	ldr	r2, [pc, #312]	; (8006c74 <checkAktifCalisma+0x8d4>)
 8006b3a:	7812      	ldrb	r2, [r2, #0]
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d303      	bcc.n	8006b48 <checkAktifCalisma+0x7a8>
 8006b40:	4b49      	ldr	r3, [pc, #292]	; (8006c68 <checkAktifCalisma+0x8c8>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10d      	bne.n	8006b64 <checkAktifCalisma+0x7c4>
 8006b48:	4b45      	ldr	r3, [pc, #276]	; (8006c60 <checkAktifCalisma+0x8c0>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	f083 0301 	eor.w	r3, r3, #1
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <checkAktifCalisma+0x7c4>
 8006b56:	4b43      	ldr	r3, [pc, #268]	; (8006c64 <checkAktifCalisma+0x8c4>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	f083 0301 	eor.w	r3, r3, #1
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00a      	beq.n	8006b7a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006b64:	2200      	movs	r2, #0
 8006b66:	2120      	movs	r1, #32
 8006b68:	483a      	ldr	r0, [pc, #232]	; (8006c54 <checkAktifCalisma+0x8b4>)
 8006b6a:	f002 fe72 	bl	8009852 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006b6e:	4b3a      	ldr	r3, [pc, #232]	; (8006c58 <checkAktifCalisma+0x8b8>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006b74:	4b3c      	ldr	r3, [pc, #240]	; (8006c68 <checkAktifCalisma+0x8c8>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006b7a:	4b3f      	ldr	r3, [pc, #252]	; (8006c78 <checkAktifCalisma+0x8d8>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f040 8088 	bne.w	8006c94 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006b84:	4b3d      	ldr	r3, [pc, #244]	; (8006c7c <checkAktifCalisma+0x8dc>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d003      	beq.n	8006b94 <checkAktifCalisma+0x7f4>
 8006b8c:	4b3b      	ldr	r3, [pc, #236]	; (8006c7c <checkAktifCalisma+0x8dc>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d17f      	bne.n	8006c94 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006b94:	4b32      	ldr	r3, [pc, #200]	; (8006c60 <checkAktifCalisma+0x8c0>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d07b      	beq.n	8006c94 <checkAktifCalisma+0x8f4>
 8006b9c:	4b31      	ldr	r3, [pc, #196]	; (8006c64 <checkAktifCalisma+0x8c4>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d077      	beq.n	8006c94 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006ba4:	2140      	movs	r1, #64	; 0x40
 8006ba6:	482b      	ldr	r0, [pc, #172]	; (8006c54 <checkAktifCalisma+0x8b4>)
 8006ba8:	f002 fe3c 	bl	8009824 <HAL_GPIO_ReadPin>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d170      	bne.n	8006c94 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006bb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006bb6:	4827      	ldr	r0, [pc, #156]	; (8006c54 <checkAktifCalisma+0x8b4>)
 8006bb8:	f002 fe34 	bl	8009824 <HAL_GPIO_ReadPin>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <checkAktifCalisma+0x82a>
 8006bc2:	4b2f      	ldr	r3, [pc, #188]	; (8006c80 <checkAktifCalisma+0x8e0>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d164      	bne.n	8006c94 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bce:	4823      	ldr	r0, [pc, #140]	; (8006c5c <checkAktifCalisma+0x8bc>)
 8006bd0:	f002 fe28 	bl	8009824 <HAL_GPIO_ReadPin>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d10f      	bne.n	8006bfa <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bde:	481f      	ldr	r0, [pc, #124]	; (8006c5c <checkAktifCalisma+0x8bc>)
 8006be0:	f002 fe20 	bl	8009824 <HAL_GPIO_ReadPin>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d107      	bne.n	8006bfa <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006bea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bee:	481b      	ldr	r0, [pc, #108]	; (8006c5c <checkAktifCalisma+0x8bc>)
 8006bf0:	f002 fe18 	bl	8009824 <HAL_GPIO_ReadPin>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d003      	beq.n	8006c02 <checkAktifCalisma+0x862>
 8006bfa:	4b22      	ldr	r3, [pc, #136]	; (8006c84 <checkAktifCalisma+0x8e4>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d048      	beq.n	8006c94 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006c02:	4b21      	ldr	r3, [pc, #132]	; (8006c88 <checkAktifCalisma+0x8e8>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	f083 0301 	eor.w	r3, r3, #1
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d041      	beq.n	8006c94 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006c10:	4b1e      	ldr	r3, [pc, #120]	; (8006c8c <checkAktifCalisma+0x8ec>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	f083 0301 	eor.w	r3, r3, #1
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d03a      	beq.n	8006c94 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006c1e:	4b1c      	ldr	r3, [pc, #112]	; (8006c90 <checkAktifCalisma+0x8f0>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	f083 0301 	eor.w	r3, r3, #1
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d033      	beq.n	8006c94 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <checkAktifCalisma+0x8b8>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	f083 0301 	eor.w	r3, r3, #1
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d02c      	beq.n	8006c94 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006c3a:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <checkAktifCalisma+0x8b0>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	f083 0301 	eor.w	r3, r3, #1
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d025      	beq.n	8006c94 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006c48:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <checkAktifCalisma+0x8e4>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e024      	b.n	8006c9a <checkAktifCalisma+0x8fa>
 8006c50:	20000c42 	.word	0x20000c42
 8006c54:	40011000 	.word	0x40011000
 8006c58:	20000c46 	.word	0x20000c46
 8006c5c:	40010c00 	.word	0x40010c00
 8006c60:	20000c5e 	.word	0x20000c5e
 8006c64:	20000c5f 	.word	0x20000c5f
 8006c68:	20000c3e 	.word	0x20000c3e
 8006c6c:	20000bb4 	.word	0x20000bb4
 8006c70:	20000bc0 	.word	0x20000bc0
 8006c74:	20000c22 	.word	0x20000c22
 8006c78:	20000c29 	.word	0x20000c29
 8006c7c:	20000c1b 	.word	0x20000c1b
 8006c80:	20000c1d 	.word	0x20000c1d
 8006c84:	20000c43 	.word	0x20000c43
 8006c88:	20000c41 	.word	0x20000c41
 8006c8c:	20000c45 	.word	0x20000c45
 8006c90:	20000c44 	.word	0x20000c44
		} else {
			devmotorasagicalisiyor=0;
 8006c94:	4b96      	ldr	r3, [pc, #600]	; (8006ef0 <checkAktifCalisma+0xb50>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006c9a:	4b95      	ldr	r3, [pc, #596]	; (8006ef0 <checkAktifCalisma+0xb50>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d007      	beq.n	8006cb2 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	2110      	movs	r1, #16
 8006ca6:	4893      	ldr	r0, [pc, #588]	; (8006ef4 <checkAktifCalisma+0xb54>)
 8006ca8:	f002 fdd3 	bl	8009852 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006cac:	4b92      	ldr	r3, [pc, #584]	; (8006ef8 <checkAktifCalisma+0xb58>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006cb2:	4b91      	ldr	r3, [pc, #580]	; (8006ef8 <checkAktifCalisma+0xb58>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d024      	beq.n	8006d04 <checkAktifCalisma+0x964>
 8006cba:	2140      	movs	r1, #64	; 0x40
 8006cbc:	488d      	ldr	r0, [pc, #564]	; (8006ef4 <checkAktifCalisma+0xb54>)
 8006cbe:	f002 fdb1 	bl	8009824 <HAL_GPIO_ReadPin>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d007      	beq.n	8006cd8 <checkAktifCalisma+0x938>
 8006cc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ccc:	4889      	ldr	r0, [pc, #548]	; (8006ef4 <checkAktifCalisma+0xb54>)
 8006cce:	f002 fda9 	bl	8009824 <HAL_GPIO_ReadPin>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d115      	bne.n	8006d04 <checkAktifCalisma+0x964>
 8006cd8:	4b88      	ldr	r3, [pc, #544]	; (8006efc <checkAktifCalisma+0xb5c>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d011      	beq.n	8006d04 <checkAktifCalisma+0x964>
 8006ce0:	4b87      	ldr	r3, [pc, #540]	; (8006f00 <checkAktifCalisma+0xb60>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00d      	beq.n	8006d04 <checkAktifCalisma+0x964>
 8006ce8:	4b86      	ldr	r3, [pc, #536]	; (8006f04 <checkAktifCalisma+0xb64>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	f083 0301 	eor.w	r3, r3, #1
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d006      	beq.n	8006d04 <checkAktifCalisma+0x964>
			timer2=millis;
 8006cf6:	4b84      	ldr	r3, [pc, #528]	; (8006f08 <checkAktifCalisma+0xb68>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a84      	ldr	r2, [pc, #528]	; (8006f0c <checkAktifCalisma+0xb6c>)
 8006cfc:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006cfe:	4b81      	ldr	r3, [pc, #516]	; (8006f04 <checkAktifCalisma+0xb64>)
 8006d00:	2201      	movs	r2, #1
 8006d02:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006d04:	4b80      	ldr	r3, [pc, #512]	; (8006f08 <checkAktifCalisma+0xb68>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	4b80      	ldr	r3, [pc, #512]	; (8006f0c <checkAktifCalisma+0xb6c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	4a80      	ldr	r2, [pc, #512]	; (8006f10 <checkAktifCalisma+0xb70>)
 8006d10:	7812      	ldrb	r2, [r2, #0]
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d303      	bcc.n	8006d1e <checkAktifCalisma+0x97e>
 8006d16:	4b7b      	ldr	r3, [pc, #492]	; (8006f04 <checkAktifCalisma+0xb64>)
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10d      	bne.n	8006d3a <checkAktifCalisma+0x99a>
 8006d1e:	4b77      	ldr	r3, [pc, #476]	; (8006efc <checkAktifCalisma+0xb5c>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	f083 0301 	eor.w	r3, r3, #1
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d106      	bne.n	8006d3a <checkAktifCalisma+0x99a>
 8006d2c:	4b74      	ldr	r3, [pc, #464]	; (8006f00 <checkAktifCalisma+0xb60>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	f083 0301 	eor.w	r3, r3, #1
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2110      	movs	r1, #16
 8006d3e:	486d      	ldr	r0, [pc, #436]	; (8006ef4 <checkAktifCalisma+0xb54>)
 8006d40:	f002 fd87 	bl	8009852 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006d44:	4b6c      	ldr	r3, [pc, #432]	; (8006ef8 <checkAktifCalisma+0xb58>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006d4a:	4b6e      	ldr	r3, [pc, #440]	; (8006f04 <checkAktifCalisma+0xb64>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006d50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d54:	486f      	ldr	r0, [pc, #444]	; (8006f14 <checkAktifCalisma+0xb74>)
 8006d56:	f002 fd65 	bl	8009824 <HAL_GPIO_ReadPin>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d120      	bne.n	8006da2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006d60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d64:	486b      	ldr	r0, [pc, #428]	; (8006f14 <checkAktifCalisma+0xb74>)
 8006d66:	f002 fd5d 	bl	8009824 <HAL_GPIO_ReadPin>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d118      	bne.n	8006da2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006d70:	2104      	movs	r1, #4
 8006d72:	4868      	ldr	r0, [pc, #416]	; (8006f14 <checkAktifCalisma+0xb74>)
 8006d74:	f002 fd56 	bl	8009824 <HAL_GPIO_ReadPin>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d111      	bne.n	8006da2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006d7e:	2102      	movs	r1, #2
 8006d80:	4864      	ldr	r0, [pc, #400]	; (8006f14 <checkAktifCalisma+0xb74>)
 8006d82:	f002 fd4f 	bl	8009824 <HAL_GPIO_ReadPin>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	4861      	ldr	r0, [pc, #388]	; (8006f14 <checkAktifCalisma+0xb74>)
 8006d90:	f002 fd48 	bl	8009824 <HAL_GPIO_ReadPin>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d103      	bne.n	8006da2 <checkAktifCalisma+0xa02>
			makineStop=1;
 8006d9a:	4b5f      	ldr	r3, [pc, #380]	; (8006f18 <checkAktifCalisma+0xb78>)
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	701a      	strb	r2, [r3, #0]
 8006da0:	e002      	b.n	8006da8 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006da2:	4b5d      	ldr	r3, [pc, #372]	; (8006f18 <checkAktifCalisma+0xb78>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006da8:	4b5c      	ldr	r3, [pc, #368]	; (8006f1c <checkAktifCalisma+0xb7c>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d144      	bne.n	8006e3a <checkAktifCalisma+0xa9a>
 8006db0:	4b5b      	ldr	r3, [pc, #364]	; (8006f20 <checkAktifCalisma+0xb80>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d003      	beq.n	8006dc0 <checkAktifCalisma+0xa20>
 8006db8:	4b59      	ldr	r3, [pc, #356]	; (8006f20 <checkAktifCalisma+0xb80>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d13c      	bne.n	8006e3a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006dc0:	2180      	movs	r1, #128	; 0x80
 8006dc2:	484c      	ldr	r0, [pc, #304]	; (8006ef4 <checkAktifCalisma+0xb54>)
 8006dc4:	f002 fd2e 	bl	8009824 <HAL_GPIO_ReadPin>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d103      	bne.n	8006dd6 <checkAktifCalisma+0xa36>
 8006dce:	4b55      	ldr	r3, [pc, #340]	; (8006f24 <checkAktifCalisma+0xb84>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00b      	beq.n	8006dee <checkAktifCalisma+0xa4e>
 8006dd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006dda:	484e      	ldr	r0, [pc, #312]	; (8006f14 <checkAktifCalisma+0xb74>)
 8006ddc:	f002 fd22 	bl	8009824 <HAL_GPIO_ReadPin>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d129      	bne.n	8006e3a <checkAktifCalisma+0xa9a>
 8006de6:	4b4f      	ldr	r3, [pc, #316]	; (8006f24 <checkAktifCalisma+0xb84>)
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d125      	bne.n	8006e3a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006dee:	2104      	movs	r1, #4
 8006df0:	4840      	ldr	r0, [pc, #256]	; (8006ef4 <checkAktifCalisma+0xb54>)
 8006df2:	f002 fd17 	bl	8009824 <HAL_GPIO_ReadPin>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d003      	beq.n	8006e04 <checkAktifCalisma+0xa64>
 8006dfc:	4b4a      	ldr	r3, [pc, #296]	; (8006f28 <checkAktifCalisma+0xb88>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d11a      	bne.n	8006e3a <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006e04:	2102      	movs	r1, #2
 8006e06:	483b      	ldr	r0, [pc, #236]	; (8006ef4 <checkAktifCalisma+0xb54>)
 8006e08:	f002 fd0c 	bl	8009824 <HAL_GPIO_ReadPin>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d113      	bne.n	8006e3a <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006e12:	4b46      	ldr	r3, [pc, #280]	; (8006f2c <checkAktifCalisma+0xb8c>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	f083 0301 	eor.w	r3, r3, #1
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00c      	beq.n	8006e3a <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006e20:	4b3d      	ldr	r3, [pc, #244]	; (8006f18 <checkAktifCalisma+0xb78>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d008      	beq.n	8006e3a <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006e28:	4b41      	ldr	r3, [pc, #260]	; (8006f30 <checkAktifCalisma+0xb90>)
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006e2e:	4b36      	ldr	r3, [pc, #216]	; (8006f08 <checkAktifCalisma+0xb68>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a40      	ldr	r2, [pc, #256]	; (8006f34 <checkAktifCalisma+0xb94>)
 8006e34:	6013      	str	r3, [r2, #0]
			bekle();
 8006e36:	f7ff f87d 	bl	8005f34 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006e3a:	4b33      	ldr	r3, [pc, #204]	; (8006f08 <checkAktifCalisma+0xb68>)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	4b3d      	ldr	r3, [pc, #244]	; (8006f34 <checkAktifCalisma+0xb94>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	4a3c      	ldr	r2, [pc, #240]	; (8006f38 <checkAktifCalisma+0xb98>)
 8006e46:	7812      	ldrb	r2, [r2, #0]
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d211      	bcs.n	8006e70 <checkAktifCalisma+0xad0>
 8006e4c:	2104      	movs	r1, #4
 8006e4e:	4829      	ldr	r0, [pc, #164]	; (8006ef4 <checkAktifCalisma+0xb54>)
 8006e50:	f002 fce8 	bl	8009824 <HAL_GPIO_ReadPin>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <checkAktifCalisma+0xad0>
 8006e5a:	4b33      	ldr	r3, [pc, #204]	; (8006f28 <checkAktifCalisma+0xb88>)
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d006      	beq.n	8006e70 <checkAktifCalisma+0xad0>
 8006e62:	4b2d      	ldr	r3, [pc, #180]	; (8006f18 <checkAktifCalisma+0xb78>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	f083 0301 	eor.w	r3, r3, #1
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006e70:	4b2f      	ldr	r3, [pc, #188]	; (8006f30 <checkAktifCalisma+0xb90>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006e76:	4b29      	ldr	r3, [pc, #164]	; (8006f1c <checkAktifCalisma+0xb7c>)
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d160      	bne.n	8006f40 <checkAktifCalisma+0xba0>
 8006e7e:	4b28      	ldr	r3, [pc, #160]	; (8006f20 <checkAktifCalisma+0xb80>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d003      	beq.n	8006e8e <checkAktifCalisma+0xaee>
 8006e86:	4b26      	ldr	r3, [pc, #152]	; (8006f20 <checkAktifCalisma+0xb80>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d158      	bne.n	8006f40 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006e8e:	2104      	movs	r1, #4
 8006e90:	4818      	ldr	r0, [pc, #96]	; (8006ef4 <checkAktifCalisma+0xb54>)
 8006e92:	f002 fcc7 	bl	8009824 <HAL_GPIO_ReadPin>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d003      	beq.n	8006ea4 <checkAktifCalisma+0xb04>
 8006e9c:	4b22      	ldr	r3, [pc, #136]	; (8006f28 <checkAktifCalisma+0xb88>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d14d      	bne.n	8006f40 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006ea4:	2102      	movs	r1, #2
 8006ea6:	4813      	ldr	r0, [pc, #76]	; (8006ef4 <checkAktifCalisma+0xb54>)
 8006ea8:	f002 fcbc 	bl	8009824 <HAL_GPIO_ReadPin>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d146      	bne.n	8006f40 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006eb2:	2180      	movs	r1, #128	; 0x80
 8006eb4:	480f      	ldr	r0, [pc, #60]	; (8006ef4 <checkAktifCalisma+0xb54>)
 8006eb6:	f002 fcb5 	bl	8009824 <HAL_GPIO_ReadPin>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d103      	bne.n	8006ec8 <checkAktifCalisma+0xb28>
 8006ec0:	4b18      	ldr	r3, [pc, #96]	; (8006f24 <checkAktifCalisma+0xb84>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <checkAktifCalisma+0xb40>
 8006ec8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ecc:	4811      	ldr	r0, [pc, #68]	; (8006f14 <checkAktifCalisma+0xb74>)
 8006ece:	f002 fca9 	bl	8009824 <HAL_GPIO_ReadPin>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d133      	bne.n	8006f40 <checkAktifCalisma+0xba0>
 8006ed8:	4b12      	ldr	r3, [pc, #72]	; (8006f24 <checkAktifCalisma+0xb84>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d12f      	bne.n	8006f40 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8006ee0:	4b0d      	ldr	r3, [pc, #52]	; (8006f18 <checkAktifCalisma+0xb78>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d02b      	beq.n	8006f40 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8006ee8:	4b14      	ldr	r3, [pc, #80]	; (8006f3c <checkAktifCalisma+0xb9c>)
 8006eea:	2201      	movs	r2, #1
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	e02a      	b.n	8006f46 <checkAktifCalisma+0xba6>
 8006ef0:	20000c43 	.word	0x20000c43
 8006ef4:	40011000 	.word	0x40011000
 8006ef8:	20000c47 	.word	0x20000c47
 8006efc:	20000c5e 	.word	0x20000c5e
 8006f00:	20000c5f 	.word	0x20000c5f
 8006f04:	20000c3f 	.word	0x20000c3f
 8006f08:	20000bb4 	.word	0x20000bb4
 8006f0c:	20000bc0 	.word	0x20000bc0
 8006f10:	20000c22 	.word	0x20000c22
 8006f14:	40010c00 	.word	0x40010c00
 8006f18:	20000c4e 	.word	0x20000c4e
 8006f1c:	20000c15 	.word	0x20000c15
 8006f20:	20000c14 	.word	0x20000c14
 8006f24:	20000c18 	.word	0x20000c18
 8006f28:	20000c12 	.word	0x20000c12
 8006f2c:	20000c3b 	.word	0x20000c3b
 8006f30:	20000c4f 	.word	0x20000c4f
 8006f34:	20000bb8 	.word	0x20000bb8
 8006f38:	20000c25 	.word	0x20000c25
 8006f3c:	20000c50 	.word	0x20000c50
		} else {
			kapi1butonkontrol=0;
 8006f40:	4b8b      	ldr	r3, [pc, #556]	; (8007170 <checkAktifCalisma+0xdd0>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006f46:	4b8b      	ldr	r3, [pc, #556]	; (8007174 <checkAktifCalisma+0xdd4>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d121      	bne.n	8006f92 <checkAktifCalisma+0xbf2>
 8006f4e:	4b8a      	ldr	r3, [pc, #552]	; (8007178 <checkAktifCalisma+0xdd8>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d003      	beq.n	8006f5e <checkAktifCalisma+0xbbe>
 8006f56:	4b88      	ldr	r3, [pc, #544]	; (8007178 <checkAktifCalisma+0xdd8>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d119      	bne.n	8006f92 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006f5e:	2104      	movs	r1, #4
 8006f60:	4886      	ldr	r0, [pc, #536]	; (800717c <checkAktifCalisma+0xddc>)
 8006f62:	f002 fc5f 	bl	8009824 <HAL_GPIO_ReadPin>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d003      	beq.n	8006f74 <checkAktifCalisma+0xbd4>
 8006f6c:	4b84      	ldr	r3, [pc, #528]	; (8007180 <checkAktifCalisma+0xde0>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10e      	bne.n	8006f92 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006f74:	2102      	movs	r1, #2
 8006f76:	4881      	ldr	r0, [pc, #516]	; (800717c <checkAktifCalisma+0xddc>)
 8006f78:	f002 fc54 	bl	8009824 <HAL_GPIO_ReadPin>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d107      	bne.n	8006f92 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8006f82:	4b80      	ldr	r3, [pc, #512]	; (8007184 <checkAktifCalisma+0xde4>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8006f8a:	4b7f      	ldr	r3, [pc, #508]	; (8007188 <checkAktifCalisma+0xde8>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	e002      	b.n	8006f98 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8006f92:	4b7d      	ldr	r3, [pc, #500]	; (8007188 <checkAktifCalisma+0xde8>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006f98:	4b75      	ldr	r3, [pc, #468]	; (8007170 <checkAktifCalisma+0xdd0>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d107      	bne.n	8006fb0 <checkAktifCalisma+0xc10>
 8006fa0:	4b79      	ldr	r3, [pc, #484]	; (8007188 <checkAktifCalisma+0xde8>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d103      	bne.n	8006fb0 <checkAktifCalisma+0xc10>
 8006fa8:	4b78      	ldr	r3, [pc, #480]	; (800718c <checkAktifCalisma+0xdec>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	2180      	movs	r1, #128	; 0x80
 8006fb4:	4876      	ldr	r0, [pc, #472]	; (8007190 <checkAktifCalisma+0xdf0>)
 8006fb6:	f002 fc4c 	bl	8009852 <HAL_GPIO_WritePin>
 8006fba:	e004      	b.n	8006fc6 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2180      	movs	r1, #128	; 0x80
 8006fc0:	4873      	ldr	r0, [pc, #460]	; (8007190 <checkAktifCalisma+0xdf0>)
 8006fc2:	f002 fc46 	bl	8009852 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006fc6:	4b73      	ldr	r3, [pc, #460]	; (8007194 <checkAktifCalisma+0xdf4>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d141      	bne.n	8007052 <checkAktifCalisma+0xcb2>
 8006fce:	4b6a      	ldr	r3, [pc, #424]	; (8007178 <checkAktifCalisma+0xdd8>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d003      	beq.n	8006fde <checkAktifCalisma+0xc3e>
 8006fd6:	4b68      	ldr	r3, [pc, #416]	; (8007178 <checkAktifCalisma+0xdd8>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d139      	bne.n	8007052 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006fe2:	4866      	ldr	r0, [pc, #408]	; (800717c <checkAktifCalisma+0xddc>)
 8006fe4:	f002 fc1e 	bl	8009824 <HAL_GPIO_ReadPin>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d103      	bne.n	8006ff6 <checkAktifCalisma+0xc56>
 8006fee:	4b6a      	ldr	r3, [pc, #424]	; (8007198 <checkAktifCalisma+0xdf8>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00b      	beq.n	800700e <checkAktifCalisma+0xc6e>
 8006ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ffa:	4868      	ldr	r0, [pc, #416]	; (800719c <checkAktifCalisma+0xdfc>)
 8006ffc:	f002 fc12 	bl	8009824 <HAL_GPIO_ReadPin>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d125      	bne.n	8007052 <checkAktifCalisma+0xcb2>
 8007006:	4b64      	ldr	r3, [pc, #400]	; (8007198 <checkAktifCalisma+0xdf8>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d121      	bne.n	8007052 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800700e:	2102      	movs	r1, #2
 8007010:	485a      	ldr	r0, [pc, #360]	; (800717c <checkAktifCalisma+0xddc>)
 8007012:	f002 fc07 	bl	8009824 <HAL_GPIO_ReadPin>
 8007016:	4603      	mov	r3, r0
 8007018:	2b01      	cmp	r3, #1
 800701a:	d11a      	bne.n	8007052 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800701c:	2104      	movs	r1, #4
 800701e:	4857      	ldr	r0, [pc, #348]	; (800717c <checkAktifCalisma+0xddc>)
 8007020:	f002 fc00 	bl	8009824 <HAL_GPIO_ReadPin>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d113      	bne.n	8007052 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 800702a:	4b56      	ldr	r3, [pc, #344]	; (8007184 <checkAktifCalisma+0xde4>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00f      	beq.n	8007052 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8007032:	4b5b      	ldr	r3, [pc, #364]	; (80071a0 <checkAktifCalisma+0xe00>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	f083 0301 	eor.w	r3, r3, #1
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	d008      	beq.n	8007052 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8007040:	4b58      	ldr	r3, [pc, #352]	; (80071a4 <checkAktifCalisma+0xe04>)
 8007042:	2201      	movs	r2, #1
 8007044:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007046:	4b58      	ldr	r3, [pc, #352]	; (80071a8 <checkAktifCalisma+0xe08>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a58      	ldr	r2, [pc, #352]	; (80071ac <checkAktifCalisma+0xe0c>)
 800704c:	6013      	str	r3, [r2, #0]
			bekle();
 800704e:	f7fe ff71 	bl	8005f34 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8007052:	4b55      	ldr	r3, [pc, #340]	; (80071a8 <checkAktifCalisma+0xe08>)
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	4b55      	ldr	r3, [pc, #340]	; (80071ac <checkAktifCalisma+0xe0c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	4a54      	ldr	r2, [pc, #336]	; (80071b0 <checkAktifCalisma+0xe10>)
 800705e:	7812      	ldrb	r2, [r2, #0]
 8007060:	4293      	cmp	r3, r2
 8007062:	d20d      	bcs.n	8007080 <checkAktifCalisma+0xce0>
 8007064:	2102      	movs	r1, #2
 8007066:	4845      	ldr	r0, [pc, #276]	; (800717c <checkAktifCalisma+0xddc>)
 8007068:	f002 fbdc 	bl	8009824 <HAL_GPIO_ReadPin>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d006      	beq.n	8007080 <checkAktifCalisma+0xce0>
 8007072:	4b44      	ldr	r3, [pc, #272]	; (8007184 <checkAktifCalisma+0xde4>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	f083 0301 	eor.w	r3, r3, #1
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8007080:	4b48      	ldr	r3, [pc, #288]	; (80071a4 <checkAktifCalisma+0xe04>)
 8007082:	2200      	movs	r2, #0
 8007084:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007086:	4b43      	ldr	r3, [pc, #268]	; (8007194 <checkAktifCalisma+0xdf4>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d135      	bne.n	80070fa <checkAktifCalisma+0xd5a>
 800708e:	4b3a      	ldr	r3, [pc, #232]	; (8007178 <checkAktifCalisma+0xdd8>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d003      	beq.n	800709e <checkAktifCalisma+0xcfe>
 8007096:	4b38      	ldr	r3, [pc, #224]	; (8007178 <checkAktifCalisma+0xdd8>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b03      	cmp	r3, #3
 800709c:	d12d      	bne.n	80070fa <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800709e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070a2:	4836      	ldr	r0, [pc, #216]	; (800717c <checkAktifCalisma+0xddc>)
 80070a4:	f002 fbbe 	bl	8009824 <HAL_GPIO_ReadPin>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d103      	bne.n	80070b6 <checkAktifCalisma+0xd16>
 80070ae:	4b3a      	ldr	r3, [pc, #232]	; (8007198 <checkAktifCalisma+0xdf8>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00b      	beq.n	80070ce <checkAktifCalisma+0xd2e>
 80070b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070ba:	4838      	ldr	r0, [pc, #224]	; (800719c <checkAktifCalisma+0xdfc>)
 80070bc:	f002 fbb2 	bl	8009824 <HAL_GPIO_ReadPin>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d119      	bne.n	80070fa <checkAktifCalisma+0xd5a>
 80070c6:	4b34      	ldr	r3, [pc, #208]	; (8007198 <checkAktifCalisma+0xdf8>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d115      	bne.n	80070fa <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80070ce:	2102      	movs	r1, #2
 80070d0:	482a      	ldr	r0, [pc, #168]	; (800717c <checkAktifCalisma+0xddc>)
 80070d2:	f002 fba7 	bl	8009824 <HAL_GPIO_ReadPin>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d10e      	bne.n	80070fa <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80070dc:	2104      	movs	r1, #4
 80070de:	4827      	ldr	r0, [pc, #156]	; (800717c <checkAktifCalisma+0xddc>)
 80070e0:	f002 fba0 	bl	8009824 <HAL_GPIO_ReadPin>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d107      	bne.n	80070fa <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 80070ea:	4b26      	ldr	r3, [pc, #152]	; (8007184 <checkAktifCalisma+0xde4>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 80070f2:	4b30      	ldr	r3, [pc, #192]	; (80071b4 <checkAktifCalisma+0xe14>)
 80070f4:	2201      	movs	r2, #1
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	e002      	b.n	8007100 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80070fa:	4b2e      	ldr	r3, [pc, #184]	; (80071b4 <checkAktifCalisma+0xe14>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007100:	4b24      	ldr	r3, [pc, #144]	; (8007194 <checkAktifCalisma+0xdf4>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d11d      	bne.n	8007144 <checkAktifCalisma+0xda4>
 8007108:	4b1b      	ldr	r3, [pc, #108]	; (8007178 <checkAktifCalisma+0xdd8>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d003      	beq.n	8007118 <checkAktifCalisma+0xd78>
 8007110:	4b19      	ldr	r3, [pc, #100]	; (8007178 <checkAktifCalisma+0xdd8>)
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2b03      	cmp	r3, #3
 8007116:	d115      	bne.n	8007144 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007118:	2102      	movs	r1, #2
 800711a:	4818      	ldr	r0, [pc, #96]	; (800717c <checkAktifCalisma+0xddc>)
 800711c:	f002 fb82 	bl	8009824 <HAL_GPIO_ReadPin>
 8007120:	4603      	mov	r3, r0
 8007122:	2b01      	cmp	r3, #1
 8007124:	d10e      	bne.n	8007144 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007126:	2104      	movs	r1, #4
 8007128:	4814      	ldr	r0, [pc, #80]	; (800717c <checkAktifCalisma+0xddc>)
 800712a:	f002 fb7b 	bl	8009824 <HAL_GPIO_ReadPin>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d107      	bne.n	8007144 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8007134:	4b13      	ldr	r3, [pc, #76]	; (8007184 <checkAktifCalisma+0xde4>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 800713c:	4b1e      	ldr	r3, [pc, #120]	; (80071b8 <checkAktifCalisma+0xe18>)
 800713e:	2201      	movs	r2, #1
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	e002      	b.n	800714a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8007144:	4b1c      	ldr	r3, [pc, #112]	; (80071b8 <checkAktifCalisma+0xe18>)
 8007146:	2200      	movs	r2, #0
 8007148:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800714a:	4b1a      	ldr	r3, [pc, #104]	; (80071b4 <checkAktifCalisma+0xe14>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d107      	bne.n	8007162 <checkAktifCalisma+0xdc2>
 8007152:	4b19      	ldr	r3, [pc, #100]	; (80071b8 <checkAktifCalisma+0xe18>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d103      	bne.n	8007162 <checkAktifCalisma+0xdc2>
 800715a:	4b12      	ldr	r3, [pc, #72]	; (80071a4 <checkAktifCalisma+0xe04>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d02c      	beq.n	80071bc <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007162:	2201      	movs	r2, #1
 8007164:	2140      	movs	r1, #64	; 0x40
 8007166:	480a      	ldr	r0, [pc, #40]	; (8007190 <checkAktifCalisma+0xdf0>)
 8007168:	f002 fb73 	bl	8009852 <HAL_GPIO_WritePin>
 800716c:	e02b      	b.n	80071c6 <checkAktifCalisma+0xe26>
 800716e:	bf00      	nop
 8007170:	20000c50 	.word	0x20000c50
 8007174:	20000c15 	.word	0x20000c15
 8007178:	20000c14 	.word	0x20000c14
 800717c:	40011000 	.word	0x40011000
 8007180:	20000c12 	.word	0x20000c12
 8007184:	20000c4e 	.word	0x20000c4e
 8007188:	20000c51 	.word	0x20000c51
 800718c:	20000c4f 	.word	0x20000c4f
 8007190:	40010800 	.word	0x40010800
 8007194:	20000c16 	.word	0x20000c16
 8007198:	20000c18 	.word	0x20000c18
 800719c:	40010c00 	.word	0x40010c00
 80071a0:	20000c3b 	.word	0x20000c3b
 80071a4:	20000c52 	.word	0x20000c52
 80071a8:	20000bb4 	.word	0x20000bb4
 80071ac:	20000bb8 	.word	0x20000bb8
 80071b0:	20000c26 	.word	0x20000c26
 80071b4:	20000c53 	.word	0x20000c53
 80071b8:	20000c54 	.word	0x20000c54
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80071bc:	2200      	movs	r2, #0
 80071be:	2140      	movs	r1, #64	; 0x40
 80071c0:	488d      	ldr	r0, [pc, #564]	; (80073f8 <checkAktifCalisma+0x1058>)
 80071c2:	f002 fb46 	bl	8009852 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 80071c6:	4b8d      	ldr	r3, [pc, #564]	; (80073fc <checkAktifCalisma+0x105c>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <checkAktifCalisma+0xe36>
 80071ce:	4b8b      	ldr	r3, [pc, #556]	; (80073fc <checkAktifCalisma+0x105c>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d115      	bne.n	8007202 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80071d6:	2104      	movs	r1, #4
 80071d8:	4889      	ldr	r0, [pc, #548]	; (8007400 <checkAktifCalisma+0x1060>)
 80071da:	f002 fb23 	bl	8009824 <HAL_GPIO_ReadPin>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d003      	beq.n	80071ec <checkAktifCalisma+0xe4c>
 80071e4:	4b87      	ldr	r3, [pc, #540]	; (8007404 <checkAktifCalisma+0x1064>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80071ec:	2102      	movs	r1, #2
 80071ee:	4884      	ldr	r0, [pc, #528]	; (8007400 <checkAktifCalisma+0x1060>)
 80071f0:	f002 fb18 	bl	8009824 <HAL_GPIO_ReadPin>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d103      	bne.n	8007202 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 80071fa:	4b83      	ldr	r3, [pc, #524]	; (8007408 <checkAktifCalisma+0x1068>)
 80071fc:	2201      	movs	r2, #1
 80071fe:	701a      	strb	r2, [r3, #0]
 8007200:	e002      	b.n	8007208 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8007202:	4b81      	ldr	r3, [pc, #516]	; (8007408 <checkAktifCalisma+0x1068>)
 8007204:	2200      	movs	r2, #0
 8007206:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8007208:	4b7c      	ldr	r3, [pc, #496]	; (80073fc <checkAktifCalisma+0x105c>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d003      	beq.n	8007218 <checkAktifCalisma+0xe78>
 8007210:	4b7a      	ldr	r3, [pc, #488]	; (80073fc <checkAktifCalisma+0x105c>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b02      	cmp	r3, #2
 8007216:	d111      	bne.n	800723c <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007218:	2102      	movs	r1, #2
 800721a:	4879      	ldr	r0, [pc, #484]	; (8007400 <checkAktifCalisma+0x1060>)
 800721c:	f002 fb02 	bl	8009824 <HAL_GPIO_ReadPin>
 8007220:	4603      	mov	r3, r0
 8007222:	2b01      	cmp	r3, #1
 8007224:	d10a      	bne.n	800723c <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8007226:	2104      	movs	r1, #4
 8007228:	4875      	ldr	r0, [pc, #468]	; (8007400 <checkAktifCalisma+0x1060>)
 800722a:	f002 fafb 	bl	8009824 <HAL_GPIO_ReadPin>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d103      	bne.n	800723c <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8007234:	4b75      	ldr	r3, [pc, #468]	; (800740c <checkAktifCalisma+0x106c>)
 8007236:	2201      	movs	r2, #1
 8007238:	701a      	strb	r2, [r3, #0]
 800723a:	e002      	b.n	8007242 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 800723c:	4b73      	ldr	r3, [pc, #460]	; (800740c <checkAktifCalisma+0x106c>)
 800723e:	2200      	movs	r2, #0
 8007240:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8007242:	4b71      	ldr	r3, [pc, #452]	; (8007408 <checkAktifCalisma+0x1068>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00f      	beq.n	800726a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 800724a:	4b71      	ldr	r3, [pc, #452]	; (8007410 <checkAktifCalisma+0x1070>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d10b      	bne.n	800726a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8007252:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007256:	486f      	ldr	r0, [pc, #444]	; (8007414 <checkAktifCalisma+0x1074>)
 8007258:	f002 fae4 	bl	8009824 <HAL_GPIO_ReadPin>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d103      	bne.n	800726a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8007262:	4b6d      	ldr	r3, [pc, #436]	; (8007418 <checkAktifCalisma+0x1078>)
 8007264:	2201      	movs	r2, #1
 8007266:	701a      	strb	r2, [r3, #0]
 8007268:	e002      	b.n	8007270 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 800726a:	4b6b      	ldr	r3, [pc, #428]	; (8007418 <checkAktifCalisma+0x1078>)
 800726c:	2200      	movs	r2, #0
 800726e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8007270:	4b66      	ldr	r3, [pc, #408]	; (800740c <checkAktifCalisma+0x106c>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00f      	beq.n	8007298 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8007278:	4b65      	ldr	r3, [pc, #404]	; (8007410 <checkAktifCalisma+0x1070>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d10b      	bne.n	8007298 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8007280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007284:	4863      	ldr	r0, [pc, #396]	; (8007414 <checkAktifCalisma+0x1074>)
 8007286:	f002 facd 	bl	8009824 <HAL_GPIO_ReadPin>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d103      	bne.n	8007298 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8007290:	4b62      	ldr	r3, [pc, #392]	; (800741c <checkAktifCalisma+0x107c>)
 8007292:	2201      	movs	r2, #1
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e002      	b.n	800729e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8007298:	4b60      	ldr	r3, [pc, #384]	; (800741c <checkAktifCalisma+0x107c>)
 800729a:	2200      	movs	r2, #0
 800729c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800729e:	4b60      	ldr	r3, [pc, #384]	; (8007420 <checkAktifCalisma+0x1080>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d137      	bne.n	8007316 <checkAktifCalisma+0xf76>
 80072a6:	4b5f      	ldr	r3, [pc, #380]	; (8007424 <checkAktifCalisma+0x1084>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d003      	beq.n	80072b6 <checkAktifCalisma+0xf16>
 80072ae:	4b5d      	ldr	r3, [pc, #372]	; (8007424 <checkAktifCalisma+0x1084>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d12f      	bne.n	8007316 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80072b6:	4b54      	ldr	r3, [pc, #336]	; (8007408 <checkAktifCalisma+0x1068>)
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d103      	bne.n	80072c6 <checkAktifCalisma+0xf26>
 80072be:	4b53      	ldr	r3, [pc, #332]	; (800740c <checkAktifCalisma+0x106c>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d027      	beq.n	8007316 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80072c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072ca:	484d      	ldr	r0, [pc, #308]	; (8007400 <checkAktifCalisma+0x1060>)
 80072cc:	f002 faaa 	bl	8009824 <HAL_GPIO_ReadPin>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d103      	bne.n	80072de <checkAktifCalisma+0xf3e>
 80072d6:	4b4e      	ldr	r3, [pc, #312]	; (8007410 <checkAktifCalisma+0x1070>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d007      	beq.n	80072ee <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80072de:	4b4e      	ldr	r3, [pc, #312]	; (8007418 <checkAktifCalisma+0x1078>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d103      	bne.n	80072ee <checkAktifCalisma+0xf4e>
 80072e6:	4b4d      	ldr	r3, [pc, #308]	; (800741c <checkAktifCalisma+0x107c>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d013      	beq.n	8007316 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 80072ee:	4b4e      	ldr	r3, [pc, #312]	; (8007428 <checkAktifCalisma+0x1088>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00f      	beq.n	8007316 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 80072f6:	4b4d      	ldr	r3, [pc, #308]	; (800742c <checkAktifCalisma+0x108c>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	f083 0301 	eor.w	r3, r3, #1
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d008      	beq.n	8007316 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8007304:	4b4a      	ldr	r3, [pc, #296]	; (8007430 <checkAktifCalisma+0x1090>)
 8007306:	2201      	movs	r2, #1
 8007308:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800730a:	4b4a      	ldr	r3, [pc, #296]	; (8007434 <checkAktifCalisma+0x1094>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a4a      	ldr	r2, [pc, #296]	; (8007438 <checkAktifCalisma+0x1098>)
 8007310:	6013      	str	r3, [r2, #0]
			bekle();
 8007312:	f7fe fe0f 	bl	8005f34 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8007316:	4b47      	ldr	r3, [pc, #284]	; (8007434 <checkAktifCalisma+0x1094>)
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	4b47      	ldr	r3, [pc, #284]	; (8007438 <checkAktifCalisma+0x1098>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	4a46      	ldr	r2, [pc, #280]	; (800743c <checkAktifCalisma+0x109c>)
 8007322:	7812      	ldrb	r2, [r2, #0]
 8007324:	4293      	cmp	r3, r2
 8007326:	d214      	bcs.n	8007352 <checkAktifCalisma+0xfb2>
 8007328:	4b37      	ldr	r3, [pc, #220]	; (8007408 <checkAktifCalisma+0x1068>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	f083 0301 	eor.w	r3, r3, #1
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d006      	beq.n	8007344 <checkAktifCalisma+0xfa4>
 8007336:	4b35      	ldr	r3, [pc, #212]	; (800740c <checkAktifCalisma+0x106c>)
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	f083 0301 	eor.w	r3, r3, #1
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b00      	cmp	r3, #0
 8007342:	d106      	bne.n	8007352 <checkAktifCalisma+0xfb2>
 8007344:	4b38      	ldr	r3, [pc, #224]	; (8007428 <checkAktifCalisma+0x1088>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	f083 0301 	eor.w	r3, r3, #1
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8007352:	4b37      	ldr	r3, [pc, #220]	; (8007430 <checkAktifCalisma+0x1090>)
 8007354:	2200      	movs	r2, #0
 8007356:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007358:	4b31      	ldr	r3, [pc, #196]	; (8007420 <checkAktifCalisma+0x1080>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d12b      	bne.n	80073b8 <checkAktifCalisma+0x1018>
 8007360:	4b30      	ldr	r3, [pc, #192]	; (8007424 <checkAktifCalisma+0x1084>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b02      	cmp	r3, #2
 8007366:	d003      	beq.n	8007370 <checkAktifCalisma+0xfd0>
 8007368:	4b2e      	ldr	r3, [pc, #184]	; (8007424 <checkAktifCalisma+0x1084>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2b03      	cmp	r3, #3
 800736e:	d123      	bne.n	80073b8 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007370:	4b25      	ldr	r3, [pc, #148]	; (8007408 <checkAktifCalisma+0x1068>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d103      	bne.n	8007380 <checkAktifCalisma+0xfe0>
 8007378:	4b24      	ldr	r3, [pc, #144]	; (800740c <checkAktifCalisma+0x106c>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01b      	beq.n	80073b8 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007380:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007384:	481e      	ldr	r0, [pc, #120]	; (8007400 <checkAktifCalisma+0x1060>)
 8007386:	f002 fa4d 	bl	8009824 <HAL_GPIO_ReadPin>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d103      	bne.n	8007398 <checkAktifCalisma+0xff8>
 8007390:	4b1f      	ldr	r3, [pc, #124]	; (8007410 <checkAktifCalisma+0x1070>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d007      	beq.n	80073a8 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007398:	4b1f      	ldr	r3, [pc, #124]	; (8007418 <checkAktifCalisma+0x1078>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d103      	bne.n	80073a8 <checkAktifCalisma+0x1008>
 80073a0:	4b1e      	ldr	r3, [pc, #120]	; (800741c <checkAktifCalisma+0x107c>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d007      	beq.n	80073b8 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 80073a8:	4b1f      	ldr	r3, [pc, #124]	; (8007428 <checkAktifCalisma+0x1088>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 80073b0:	4b23      	ldr	r3, [pc, #140]	; (8007440 <checkAktifCalisma+0x10a0>)
 80073b2:	2201      	movs	r2, #1
 80073b4:	701a      	strb	r2, [r3, #0]
 80073b6:	e002      	b.n	80073be <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 80073b8:	4b21      	ldr	r3, [pc, #132]	; (8007440 <checkAktifCalisma+0x10a0>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80073be:	4b18      	ldr	r3, [pc, #96]	; (8007420 <checkAktifCalisma+0x1080>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d140      	bne.n	8007448 <checkAktifCalisma+0x10a8>
 80073c6:	4b17      	ldr	r3, [pc, #92]	; (8007424 <checkAktifCalisma+0x1084>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d003      	beq.n	80073d6 <checkAktifCalisma+0x1036>
 80073ce:	4b15      	ldr	r3, [pc, #84]	; (8007424 <checkAktifCalisma+0x1084>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d138      	bne.n	8007448 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80073d6:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <checkAktifCalisma+0x1068>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d103      	bne.n	80073e6 <checkAktifCalisma+0x1046>
 80073de:	4b0b      	ldr	r3, [pc, #44]	; (800740c <checkAktifCalisma+0x106c>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d030      	beq.n	8007448 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 80073e6:	4b10      	ldr	r3, [pc, #64]	; (8007428 <checkAktifCalisma+0x1088>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d02c      	beq.n	8007448 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 80073ee:	4b15      	ldr	r3, [pc, #84]	; (8007444 <checkAktifCalisma+0x10a4>)
 80073f0:	2201      	movs	r2, #1
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	e02b      	b.n	800744e <checkAktifCalisma+0x10ae>
 80073f6:	bf00      	nop
 80073f8:	40010800 	.word	0x40010800
 80073fc:	20000c19 	.word	0x20000c19
 8007400:	40011000 	.word	0x40011000
 8007404:	20000c12 	.word	0x20000c12
 8007408:	20000c58 	.word	0x20000c58
 800740c:	20000c59 	.word	0x20000c59
 8007410:	20000c18 	.word	0x20000c18
 8007414:	40010c00 	.word	0x40010c00
 8007418:	20000c68 	.word	0x20000c68
 800741c:	20000c69 	.word	0x20000c69
 8007420:	20000c17 	.word	0x20000c17
 8007424:	20000c14 	.word	0x20000c14
 8007428:	20000c4e 	.word	0x20000c4e
 800742c:	20000c3b 	.word	0x20000c3b
 8007430:	20000c55 	.word	0x20000c55
 8007434:	20000bb4 	.word	0x20000bb4
 8007438:	20000bb8 	.word	0x20000bb8
 800743c:	20000c27 	.word	0x20000c27
 8007440:	20000c56 	.word	0x20000c56
 8007444:	20000c57 	.word	0x20000c57
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8007448:	4b89      	ldr	r3, [pc, #548]	; (8007670 <checkAktifCalisma+0x12d0>)
 800744a:	2200      	movs	r2, #0
 800744c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800744e:	4b89      	ldr	r3, [pc, #548]	; (8007674 <checkAktifCalisma+0x12d4>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d107      	bne.n	8007466 <checkAktifCalisma+0x10c6>
 8007456:	4b88      	ldr	r3, [pc, #544]	; (8007678 <checkAktifCalisma+0x12d8>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d103      	bne.n	8007466 <checkAktifCalisma+0x10c6>
 800745e:	4b84      	ldr	r3, [pc, #528]	; (8007670 <checkAktifCalisma+0x12d0>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d005      	beq.n	8007472 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007466:	2201      	movs	r2, #1
 8007468:	2120      	movs	r1, #32
 800746a:	4884      	ldr	r0, [pc, #528]	; (800767c <checkAktifCalisma+0x12dc>)
 800746c:	f002 f9f1 	bl	8009852 <HAL_GPIO_WritePin>
 8007470:	e004      	b.n	800747c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007472:	2200      	movs	r2, #0
 8007474:	2120      	movs	r1, #32
 8007476:	4881      	ldr	r0, [pc, #516]	; (800767c <checkAktifCalisma+0x12dc>)
 8007478:	f002 f9eb 	bl	8009852 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800747c:	4b80      	ldr	r3, [pc, #512]	; (8007680 <checkAktifCalisma+0x12e0>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00e      	beq.n	80074a2 <checkAktifCalisma+0x1102>
 8007484:	2102      	movs	r1, #2
 8007486:	487f      	ldr	r0, [pc, #508]	; (8007684 <checkAktifCalisma+0x12e4>)
 8007488:	f002 f9cc 	bl	8009824 <HAL_GPIO_ReadPin>
 800748c:	4603      	mov	r3, r0
 800748e:	2b01      	cmp	r3, #1
 8007490:	d107      	bne.n	80074a2 <checkAktifCalisma+0x1102>
 8007492:	4b7d      	ldr	r3, [pc, #500]	; (8007688 <checkAktifCalisma+0x12e8>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d103      	bne.n	80074a2 <checkAktifCalisma+0x1102>
 800749a:	4b7c      	ldr	r3, [pc, #496]	; (800768c <checkAktifCalisma+0x12ec>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d112      	bne.n	80074c8 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80074a2:	4b7b      	ldr	r3, [pc, #492]	; (8007690 <checkAktifCalisma+0x12f0>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d066      	beq.n	8007578 <checkAktifCalisma+0x11d8>
 80074aa:	2104      	movs	r1, #4
 80074ac:	4875      	ldr	r0, [pc, #468]	; (8007684 <checkAktifCalisma+0x12e4>)
 80074ae:	f002 f9b9 	bl	8009824 <HAL_GPIO_ReadPin>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d15f      	bne.n	8007578 <checkAktifCalisma+0x11d8>
 80074b8:	4b73      	ldr	r3, [pc, #460]	; (8007688 <checkAktifCalisma+0x12e8>)
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d05b      	beq.n	8007578 <checkAktifCalisma+0x11d8>
 80074c0:	4b72      	ldr	r3, [pc, #456]	; (800768c <checkAktifCalisma+0x12ec>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d057      	beq.n	8007578 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 80074c8:	4b72      	ldr	r3, [pc, #456]	; (8007694 <checkAktifCalisma+0x12f4>)
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	3301      	adds	r3, #1
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	4b70      	ldr	r3, [pc, #448]	; (8007694 <checkAktifCalisma+0x12f4>)
 80074d2:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 80074d4:	4b6f      	ldr	r3, [pc, #444]	; (8007694 <checkAktifCalisma+0x12f4>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b09      	cmp	r3, #9
 80074da:	d908      	bls.n	80074ee <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 80074dc:	4b6d      	ldr	r3, [pc, #436]	; (8007694 <checkAktifCalisma+0x12f4>)
 80074de:	2200      	movs	r2, #0
 80074e0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 80074e2:	4b6d      	ldr	r3, [pc, #436]	; (8007698 <checkAktifCalisma+0x12f8>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	3301      	adds	r3, #1
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	4b6b      	ldr	r3, [pc, #428]	; (8007698 <checkAktifCalisma+0x12f8>)
 80074ec:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 80074ee:	4b6a      	ldr	r3, [pc, #424]	; (8007698 <checkAktifCalisma+0x12f8>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2b09      	cmp	r3, #9
 80074f4:	d908      	bls.n	8007508 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 80074f6:	4b68      	ldr	r3, [pc, #416]	; (8007698 <checkAktifCalisma+0x12f8>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80074fc:	4b67      	ldr	r3, [pc, #412]	; (800769c <checkAktifCalisma+0x12fc>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	3301      	adds	r3, #1
 8007502:	b2da      	uxtb	r2, r3
 8007504:	4b65      	ldr	r3, [pc, #404]	; (800769c <checkAktifCalisma+0x12fc>)
 8007506:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8007508:	4b64      	ldr	r3, [pc, #400]	; (800769c <checkAktifCalisma+0x12fc>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b09      	cmp	r3, #9
 800750e:	d908      	bls.n	8007522 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8007510:	4b62      	ldr	r3, [pc, #392]	; (800769c <checkAktifCalisma+0x12fc>)
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8007516:	4b62      	ldr	r3, [pc, #392]	; (80076a0 <checkAktifCalisma+0x1300>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	3301      	adds	r3, #1
 800751c:	b2da      	uxtb	r2, r3
 800751e:	4b60      	ldr	r3, [pc, #384]	; (80076a0 <checkAktifCalisma+0x1300>)
 8007520:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8007522:	4b5f      	ldr	r3, [pc, #380]	; (80076a0 <checkAktifCalisma+0x1300>)
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	2b09      	cmp	r3, #9
 8007528:	d908      	bls.n	800753c <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800752a:	4b5d      	ldr	r3, [pc, #372]	; (80076a0 <checkAktifCalisma+0x1300>)
 800752c:	2200      	movs	r2, #0
 800752e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8007530:	4b5c      	ldr	r3, [pc, #368]	; (80076a4 <checkAktifCalisma+0x1304>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	3301      	adds	r3, #1
 8007536:	b2da      	uxtb	r2, r3
 8007538:	4b5a      	ldr	r3, [pc, #360]	; (80076a4 <checkAktifCalisma+0x1304>)
 800753a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800753c:	4b59      	ldr	r3, [pc, #356]	; (80076a4 <checkAktifCalisma+0x1304>)
 800753e:	781a      	ldrb	r2, [r3, #0]
 8007540:	4b59      	ldr	r3, [pc, #356]	; (80076a8 <checkAktifCalisma+0x1308>)
 8007542:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007546:	4b56      	ldr	r3, [pc, #344]	; (80076a0 <checkAktifCalisma+0x1300>)
 8007548:	781a      	ldrb	r2, [r3, #0]
 800754a:	4b57      	ldr	r3, [pc, #348]	; (80076a8 <checkAktifCalisma+0x1308>)
 800754c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800754e:	4b53      	ldr	r3, [pc, #332]	; (800769c <checkAktifCalisma+0x12fc>)
 8007550:	781a      	ldrb	r2, [r3, #0]
 8007552:	4b55      	ldr	r3, [pc, #340]	; (80076a8 <checkAktifCalisma+0x1308>)
 8007554:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007556:	4b50      	ldr	r3, [pc, #320]	; (8007698 <checkAktifCalisma+0x12f8>)
 8007558:	781a      	ldrb	r2, [r3, #0]
 800755a:	4b53      	ldr	r3, [pc, #332]	; (80076a8 <checkAktifCalisma+0x1308>)
 800755c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800755e:	4b4d      	ldr	r3, [pc, #308]	; (8007694 <checkAktifCalisma+0x12f4>)
 8007560:	781a      	ldrb	r2, [r3, #0]
 8007562:	4b51      	ldr	r3, [pc, #324]	; (80076a8 <checkAktifCalisma+0x1308>)
 8007564:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8007566:	4b51      	ldr	r3, [pc, #324]	; (80076ac <checkAktifCalisma+0x130c>)
 8007568:	2201      	movs	r2, #1
 800756a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 800756c:	4b44      	ldr	r3, [pc, #272]	; (8007680 <checkAktifCalisma+0x12e0>)
 800756e:	2200      	movs	r2, #0
 8007570:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8007572:	4b47      	ldr	r3, [pc, #284]	; (8007690 <checkAktifCalisma+0x12f0>)
 8007574:	2200      	movs	r2, #0
 8007576:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8007578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800757c:	484c      	ldr	r0, [pc, #304]	; (80076b0 <checkAktifCalisma+0x1310>)
 800757e:	f002 f951 	bl	8009824 <HAL_GPIO_ReadPin>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d016      	beq.n	80075b6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8007588:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800758c:	4848      	ldr	r0, [pc, #288]	; (80076b0 <checkAktifCalisma+0x1310>)
 800758e:	f002 f949 	bl	8009824 <HAL_GPIO_ReadPin>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00e      	beq.n	80075b6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8007598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800759c:	4844      	ldr	r0, [pc, #272]	; (80076b0 <checkAktifCalisma+0x1310>)
 800759e:	f002 f941 	bl	8009824 <HAL_GPIO_ReadPin>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d006      	beq.n	80075b6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80075a8:	2140      	movs	r1, #64	; 0x40
 80075aa:	4836      	ldr	r0, [pc, #216]	; (8007684 <checkAktifCalisma+0x12e4>)
 80075ac:	f002 f93a 	bl	8009824 <HAL_GPIO_ReadPin>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d103      	bne.n	80075be <checkAktifCalisma+0x121e>
			startBasili=1;
 80075b6:	4b3f      	ldr	r3, [pc, #252]	; (80076b4 <checkAktifCalisma+0x1314>)
 80075b8:	2201      	movs	r2, #1
 80075ba:	701a      	strb	r2, [r3, #0]
 80075bc:	e002      	b.n	80075c4 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 80075be:	4b3d      	ldr	r3, [pc, #244]	; (80076b4 <checkAktifCalisma+0x1314>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80075c4:	4b3b      	ldr	r3, [pc, #236]	; (80076b4 <checkAktifCalisma+0x1314>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d014      	beq.n	80075f6 <checkAktifCalisma+0x1256>
 80075cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80075d0:	4837      	ldr	r0, [pc, #220]	; (80076b0 <checkAktifCalisma+0x1310>)
 80075d2:	f002 f927 	bl	8009824 <HAL_GPIO_ReadPin>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d10c      	bne.n	80075f6 <checkAktifCalisma+0x1256>
			hataVar=1;
 80075dc:	4b36      	ldr	r3, [pc, #216]	; (80076b8 <checkAktifCalisma+0x1318>)
 80075de:	2201      	movs	r2, #1
 80075e0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 80075e2:	2001      	movs	r0, #1
 80075e4:	f7fe f8c6 	bl	8005774 <hataKoduLcdGoster>
			hata2EEPROM(1);
 80075e8:	2001      	movs	r0, #1
 80075ea:	f7fe fc27 	bl	8005e3c <hata2EEPROM>
			acilstophatasi=1;
 80075ee:	4b33      	ldr	r3, [pc, #204]	; (80076bc <checkAktifCalisma+0x131c>)
 80075f0:	2201      	movs	r2, #1
 80075f2:	701a      	strb	r2, [r3, #0]
 80075f4:	e018      	b.n	8007628 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80075f6:	4b31      	ldr	r3, [pc, #196]	; (80076bc <checkAktifCalisma+0x131c>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d014      	beq.n	8007628 <checkAktifCalisma+0x1288>
 80075fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007602:	482b      	ldr	r0, [pc, #172]	; (80076b0 <checkAktifCalisma+0x1310>)
 8007604:	f002 f90e 	bl	8009824 <HAL_GPIO_ReadPin>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10c      	bne.n	8007628 <checkAktifCalisma+0x1288>
 800760e:	4b29      	ldr	r3, [pc, #164]	; (80076b4 <checkAktifCalisma+0x1314>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	f083 0301 	eor.w	r3, r3, #1
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 800761c:	4b27      	ldr	r3, [pc, #156]	; (80076bc <checkAktifCalisma+0x131c>)
 800761e:	2200      	movs	r2, #0
 8007620:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8007622:	2001      	movs	r0, #1
 8007624:	f7fe f852 	bl	80056cc <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8007628:	4b25      	ldr	r3, [pc, #148]	; (80076c0 <checkAktifCalisma+0x1320>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f083 0301 	eor.w	r3, r3, #1
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d04c      	beq.n	80076d0 <checkAktifCalisma+0x1330>
 8007636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800763a:	481d      	ldr	r0, [pc, #116]	; (80076b0 <checkAktifCalisma+0x1310>)
 800763c:	f002 f8f2 	bl	8009824 <HAL_GPIO_ReadPin>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <checkAktifCalisma+0x12ae>
 8007646:	4b1f      	ldr	r3, [pc, #124]	; (80076c4 <checkAktifCalisma+0x1324>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d040      	beq.n	80076d0 <checkAktifCalisma+0x1330>
 800764e:	4b1e      	ldr	r3, [pc, #120]	; (80076c8 <checkAktifCalisma+0x1328>)
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d13c      	bne.n	80076d0 <checkAktifCalisma+0x1330>
			hataVar=1;
 8007656:	4b18      	ldr	r3, [pc, #96]	; (80076b8 <checkAktifCalisma+0x1318>)
 8007658:	2201      	movs	r2, #1
 800765a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 800765c:	2002      	movs	r0, #2
 800765e:	f7fe f889 	bl	8005774 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8007662:	2002      	movs	r0, #2
 8007664:	f7fe fbea 	bl	8005e3c <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8007668:	4b18      	ldr	r3, [pc, #96]	; (80076cc <checkAktifCalisma+0x132c>)
 800766a:	2201      	movs	r2, #1
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e047      	b.n	8007700 <checkAktifCalisma+0x1360>
 8007670:	20000c57 	.word	0x20000c57
 8007674:	20000c56 	.word	0x20000c56
 8007678:	20000c55 	.word	0x20000c55
 800767c:	40010800 	.word	0x40010800
 8007680:	20000c4b 	.word	0x20000c4b
 8007684:	40011000 	.word	0x40011000
 8007688:	20000c12 	.word	0x20000c12
 800768c:	20000c4e 	.word	0x20000c4e
 8007690:	20000c4c 	.word	0x20000c4c
 8007694:	20000c09 	.word	0x20000c09
 8007698:	20000c0a 	.word	0x20000c0a
 800769c:	200009b2 	.word	0x200009b2
 80076a0:	200009b3 	.word	0x200009b3
 80076a4:	20000c0b 	.word	0x20000c0b
 80076a8:	20000b3c 	.word	0x20000b3c
 80076ac:	20000c38 	.word	0x20000c38
 80076b0:	40010c00 	.word	0x40010c00
 80076b4:	20000c5a 	.word	0x20000c5a
 80076b8:	20000c61 	.word	0x20000c61
 80076bc:	20000c5c 	.word	0x20000c5c
 80076c0:	20000c63 	.word	0x20000c63
 80076c4:	20000c6d 	.word	0x20000c6d
 80076c8:	20000c10 	.word	0x20000c10
 80076cc:	20000c5d 	.word	0x20000c5d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80076d0:	4b97      	ldr	r3, [pc, #604]	; (8007930 <checkAktifCalisma+0x1590>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d013      	beq.n	8007700 <checkAktifCalisma+0x1360>
 80076d8:	4b96      	ldr	r3, [pc, #600]	; (8007934 <checkAktifCalisma+0x1594>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00f      	beq.n	8007700 <checkAktifCalisma+0x1360>
 80076e0:	4b95      	ldr	r3, [pc, #596]	; (8007938 <checkAktifCalisma+0x1598>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	f083 0301 	eor.w	r3, r3, #1
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d008      	beq.n	8007700 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 80076ee:	4b90      	ldr	r3, [pc, #576]	; (8007930 <checkAktifCalisma+0x1590>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80076f4:	4b91      	ldr	r3, [pc, #580]	; (800793c <checkAktifCalisma+0x159c>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80076fa:	2002      	movs	r0, #2
 80076fc:	f7fd ffe6 	bl	80056cc <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8007700:	4b8f      	ldr	r3, [pc, #572]	; (8007940 <checkAktifCalisma+0x15a0>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d11c      	bne.n	8007742 <checkAktifCalisma+0x13a2>
 8007708:	4b8e      	ldr	r3, [pc, #568]	; (8007944 <checkAktifCalisma+0x15a4>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d118      	bne.n	8007742 <checkAktifCalisma+0x13a2>
 8007710:	4b8d      	ldr	r3, [pc, #564]	; (8007948 <checkAktifCalisma+0x15a8>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d014      	beq.n	8007742 <checkAktifCalisma+0x13a2>
 8007718:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800771c:	488b      	ldr	r0, [pc, #556]	; (800794c <checkAktifCalisma+0x15ac>)
 800771e:	f002 f881 	bl	8009824 <HAL_GPIO_ReadPin>
 8007722:	4603      	mov	r3, r0
 8007724:	2b01      	cmp	r3, #1
 8007726:	d10c      	bne.n	8007742 <checkAktifCalisma+0x13a2>
			hataVar=1;
 8007728:	4b89      	ldr	r3, [pc, #548]	; (8007950 <checkAktifCalisma+0x15b0>)
 800772a:	2201      	movs	r2, #1
 800772c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800772e:	2003      	movs	r0, #3
 8007730:	f7fe f820 	bl	8005774 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8007734:	2003      	movs	r0, #3
 8007736:	f7fe fb81 	bl	8005e3c <hata2EEPROM>
			basinchatasi=1;
 800773a:	4b86      	ldr	r3, [pc, #536]	; (8007954 <checkAktifCalisma+0x15b4>)
 800773c:	2201      	movs	r2, #1
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	e015      	b.n	800776e <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8007742:	4b84      	ldr	r3, [pc, #528]	; (8007954 <checkAktifCalisma+0x15b4>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d011      	beq.n	800776e <checkAktifCalisma+0x13ce>
 800774a:	4b7d      	ldr	r3, [pc, #500]	; (8007940 <checkAktifCalisma+0x15a0>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d10d      	bne.n	800776e <checkAktifCalisma+0x13ce>
 8007752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007756:	4880      	ldr	r0, [pc, #512]	; (8007958 <checkAktifCalisma+0x15b8>)
 8007758:	f002 f864 	bl	8009824 <HAL_GPIO_ReadPin>
 800775c:	4603      	mov	r3, r0
 800775e:	2b01      	cmp	r3, #1
 8007760:	d105      	bne.n	800776e <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8007762:	4b7c      	ldr	r3, [pc, #496]	; (8007954 <checkAktifCalisma+0x15b4>)
 8007764:	2200      	movs	r2, #0
 8007766:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8007768:	2003      	movs	r0, #3
 800776a:	f7fd ffaf 	bl	80056cc <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800776e:	4b7b      	ldr	r3, [pc, #492]	; (800795c <checkAktifCalisma+0x15bc>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d103      	bne.n	800777e <checkAktifCalisma+0x13de>
 8007776:	4b7a      	ldr	r3, [pc, #488]	; (8007960 <checkAktifCalisma+0x15c0>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d01c      	beq.n	80077b8 <checkAktifCalisma+0x1418>
 800777e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007782:	4878      	ldr	r0, [pc, #480]	; (8007964 <checkAktifCalisma+0x15c4>)
 8007784:	f002 f84e 	bl	8009824 <HAL_GPIO_ReadPin>
 8007788:	4603      	mov	r3, r0
 800778a:	2b01      	cmp	r3, #1
 800778c:	d114      	bne.n	80077b8 <checkAktifCalisma+0x1418>
 800778e:	4b76      	ldr	r3, [pc, #472]	; (8007968 <checkAktifCalisma+0x15c8>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d003      	beq.n	800779e <checkAktifCalisma+0x13fe>
 8007796:	4b74      	ldr	r3, [pc, #464]	; (8007968 <checkAktifCalisma+0x15c8>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b03      	cmp	r3, #3
 800779c:	d10c      	bne.n	80077b8 <checkAktifCalisma+0x1418>
			hataVar=1;
 800779e:	4b6c      	ldr	r3, [pc, #432]	; (8007950 <checkAktifCalisma+0x15b0>)
 80077a0:	2201      	movs	r2, #1
 80077a2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80077a4:	2004      	movs	r0, #4
 80077a6:	f7fd ffe5 	bl	8005774 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80077aa:	2004      	movs	r0, #4
 80077ac:	f7fe fb46 	bl	8005e3c <hata2EEPROM>
			katkapisivicihatasi=1;
 80077b0:	4b6e      	ldr	r3, [pc, #440]	; (800796c <checkAktifCalisma+0x15cc>)
 80077b2:	2201      	movs	r2, #1
 80077b4:	701a      	strb	r2, [r3, #0]
 80077b6:	e01f      	b.n	80077f8 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80077b8:	4b6c      	ldr	r3, [pc, #432]	; (800796c <checkAktifCalisma+0x15cc>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d01b      	beq.n	80077f8 <checkAktifCalisma+0x1458>
 80077c0:	4b6b      	ldr	r3, [pc, #428]	; (8007970 <checkAktifCalisma+0x15d0>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d017      	beq.n	80077f8 <checkAktifCalisma+0x1458>
 80077c8:	4b64      	ldr	r3, [pc, #400]	; (800795c <checkAktifCalisma+0x15bc>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	f083 0301 	eor.w	r3, r3, #1
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d010      	beq.n	80077f8 <checkAktifCalisma+0x1458>
 80077d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077da:	4862      	ldr	r0, [pc, #392]	; (8007964 <checkAktifCalisma+0x15c4>)
 80077dc:	f002 f822 	bl	8009824 <HAL_GPIO_ReadPin>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d108      	bne.n	80077f8 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 80077e6:	4b61      	ldr	r3, [pc, #388]	; (800796c <checkAktifCalisma+0x15cc>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80077ec:	4b5c      	ldr	r3, [pc, #368]	; (8007960 <checkAktifCalisma+0x15c0>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80077f2:	2004      	movs	r0, #4
 80077f4:	f7fd ff6a 	bl	80056cc <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80077f8:	4b58      	ldr	r3, [pc, #352]	; (800795c <checkAktifCalisma+0x15bc>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d103      	bne.n	8007808 <checkAktifCalisma+0x1468>
 8007800:	4b5c      	ldr	r3, [pc, #368]	; (8007974 <checkAktifCalisma+0x15d4>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01c      	beq.n	8007842 <checkAktifCalisma+0x14a2>
 8007808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800780c:	4855      	ldr	r0, [pc, #340]	; (8007964 <checkAktifCalisma+0x15c4>)
 800780e:	f002 f809 	bl	8009824 <HAL_GPIO_ReadPin>
 8007812:	4603      	mov	r3, r0
 8007814:	2b01      	cmp	r3, #1
 8007816:	d114      	bne.n	8007842 <checkAktifCalisma+0x14a2>
 8007818:	4b53      	ldr	r3, [pc, #332]	; (8007968 <checkAktifCalisma+0x15c8>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d003      	beq.n	8007828 <checkAktifCalisma+0x1488>
 8007820:	4b51      	ldr	r3, [pc, #324]	; (8007968 <checkAktifCalisma+0x15c8>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b03      	cmp	r3, #3
 8007826:	d10c      	bne.n	8007842 <checkAktifCalisma+0x14a2>
			hataVar=1;
 8007828:	4b49      	ldr	r3, [pc, #292]	; (8007950 <checkAktifCalisma+0x15b0>)
 800782a:	2201      	movs	r2, #1
 800782c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800782e:	2005      	movs	r0, #5
 8007830:	f7fd ffa0 	bl	8005774 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8007834:	2005      	movs	r0, #5
 8007836:	f7fe fb01 	bl	8005e3c <hata2EEPROM>
			tablakapisivicihatasi=1;
 800783a:	4b4f      	ldr	r3, [pc, #316]	; (8007978 <checkAktifCalisma+0x15d8>)
 800783c:	2201      	movs	r2, #1
 800783e:	701a      	strb	r2, [r3, #0]
 8007840:	e023      	b.n	800788a <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8007842:	4b4d      	ldr	r3, [pc, #308]	; (8007978 <checkAktifCalisma+0x15d8>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d01f      	beq.n	800788a <checkAktifCalisma+0x14ea>
 800784a:	4b49      	ldr	r3, [pc, #292]	; (8007970 <checkAktifCalisma+0x15d0>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d01b      	beq.n	800788a <checkAktifCalisma+0x14ea>
 8007852:	4b42      	ldr	r3, [pc, #264]	; (800795c <checkAktifCalisma+0x15bc>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	f083 0301 	eor.w	r3, r3, #1
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d014      	beq.n	800788a <checkAktifCalisma+0x14ea>
 8007860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007864:	483f      	ldr	r0, [pc, #252]	; (8007964 <checkAktifCalisma+0x15c4>)
 8007866:	f001 ffdd 	bl	8009824 <HAL_GPIO_ReadPin>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10c      	bne.n	800788a <checkAktifCalisma+0x14ea>
 8007870:	4b3f      	ldr	r3, [pc, #252]	; (8007970 <checkAktifCalisma+0x15d0>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d008      	beq.n	800788a <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8007878:	4b3f      	ldr	r3, [pc, #252]	; (8007978 <checkAktifCalisma+0x15d8>)
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800787e:	4b3d      	ldr	r3, [pc, #244]	; (8007974 <checkAktifCalisma+0x15d4>)
 8007880:	2200      	movs	r2, #0
 8007882:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007884:	2005      	movs	r0, #5
 8007886:	f7fd ff21 	bl	80056cc <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800788a:	4b2f      	ldr	r3, [pc, #188]	; (8007948 <checkAktifCalisma+0x15a8>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d107      	bne.n	80078a2 <checkAktifCalisma+0x1502>
 8007892:	4b29      	ldr	r3, [pc, #164]	; (8007938 <checkAktifCalisma+0x1598>)
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d103      	bne.n	80078a2 <checkAktifCalisma+0x1502>
 800789a:	4b38      	ldr	r3, [pc, #224]	; (800797c <checkAktifCalisma+0x15dc>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d014      	beq.n	80078cc <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 80078a2:	4b37      	ldr	r3, [pc, #220]	; (8007980 <checkAktifCalisma+0x15e0>)
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	4b37      	ldr	r3, [pc, #220]	; (8007984 <checkAktifCalisma+0x15e4>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	4a36      	ldr	r2, [pc, #216]	; (8007988 <checkAktifCalisma+0x15e8>)
 80078ae:	7812      	ldrb	r2, [r2, #0]
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d30b      	bcc.n	80078cc <checkAktifCalisma+0x152c>
			  	hataVar=1;
 80078b4:	4b26      	ldr	r3, [pc, #152]	; (8007950 <checkAktifCalisma+0x15b0>)
 80078b6:	2201      	movs	r2, #1
 80078b8:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80078ba:	2006      	movs	r0, #6
 80078bc:	f7fd ff5a 	bl	8005774 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80078c0:	2006      	movs	r0, #6
 80078c2:	f7fe fabb 	bl	8005e3c <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 80078c6:	4b31      	ldr	r3, [pc, #196]	; (800798c <checkAktifCalisma+0x15ec>)
 80078c8:	2201      	movs	r2, #1
 80078ca:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80078cc:	4b2f      	ldr	r3, [pc, #188]	; (800798c <checkAktifCalisma+0x15ec>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d013      	beq.n	80078fc <checkAktifCalisma+0x155c>
 80078d4:	2108      	movs	r1, #8
 80078d6:	4823      	ldr	r0, [pc, #140]	; (8007964 <checkAktifCalisma+0x15c4>)
 80078d8:	f001 ffa4 	bl	8009824 <HAL_GPIO_ReadPin>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00c      	beq.n	80078fc <checkAktifCalisma+0x155c>
 80078e2:	4b1e      	ldr	r3, [pc, #120]	; (800795c <checkAktifCalisma+0x15bc>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	f083 0301 	eor.w	r3, r3, #1
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 80078f0:	4b26      	ldr	r3, [pc, #152]	; (800798c <checkAktifCalisma+0x15ec>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80078f6:	2006      	movs	r0, #6
 80078f8:	f7fd fee8 	bl	80056cc <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80078fc:	4b24      	ldr	r3, [pc, #144]	; (8007990 <checkAktifCalisma+0x15f0>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10b      	bne.n	800791c <checkAktifCalisma+0x157c>
 8007904:	4b0c      	ldr	r3, [pc, #48]	; (8007938 <checkAktifCalisma+0x1598>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d107      	bne.n	800791c <checkAktifCalisma+0x157c>
 800790c:	4b21      	ldr	r3, [pc, #132]	; (8007994 <checkAktifCalisma+0x15f4>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d103      	bne.n	800791c <checkAktifCalisma+0x157c>
 8007914:	4b19      	ldr	r3, [pc, #100]	; (800797c <checkAktifCalisma+0x15dc>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d03f      	beq.n	800799c <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 800791c:	4b1e      	ldr	r3, [pc, #120]	; (8007998 <checkAktifCalisma+0x15f8>)
 800791e:	2200      	movs	r2, #0
 8007920:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8007922:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <checkAktifCalisma+0x15c0>)
 8007924:	2201      	movs	r2, #1
 8007926:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007928:	4b12      	ldr	r3, [pc, #72]	; (8007974 <checkAktifCalisma+0x15d4>)
 800792a:	2201      	movs	r2, #1
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	e03c      	b.n	80079aa <checkAktifCalisma+0x160a>
 8007930:	20000c5d 	.word	0x20000c5d
 8007934:	20000c63 	.word	0x20000c63
 8007938:	20000c44 	.word	0x20000c44
 800793c:	20000c6d 	.word	0x20000c6d
 8007940:	20000c0f 	.word	0x20000c0f
 8007944:	20000c13 	.word	0x20000c13
 8007948:	20000c60 	.word	0x20000c60
 800794c:	40011000 	.word	0x40011000
 8007950:	20000c61 	.word	0x20000c61
 8007954:	20000c6a 	.word	0x20000c6a
 8007958:	40010c00 	.word	0x40010c00
 800795c:	20000c5a 	.word	0x20000c5a
 8007960:	20000c6e 	.word	0x20000c6e
 8007964:	40010800 	.word	0x40010800
 8007968:	20000c14 	.word	0x20000c14
 800796c:	20000c6b 	.word	0x20000c6b
 8007970:	20000c4e 	.word	0x20000c4e
 8007974:	20000c6f 	.word	0x20000c6f
 8007978:	20000c6c 	.word	0x20000c6c
 800797c:	20000c43 	.word	0x20000c43
 8007980:	20000bb4 	.word	0x20000bb4
 8007984:	20000bc8 	.word	0x20000bc8
 8007988:	20000c24 	.word	0x20000c24
 800798c:	20000c5b 	.word	0x20000c5b
 8007990:	20000c41 	.word	0x20000c41
 8007994:	20000c42 	.word	0x20000c42
 8007998:	20000c62 	.word	0x20000c62
		} else {
			makineCalisiyor=1;
 800799c:	4b1e      	ldr	r3, [pc, #120]	; (8007a18 <checkAktifCalisma+0x1678>)
 800799e:	2201      	movs	r2, #1
 80079a0:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80079a2:	4b1e      	ldr	r3, [pc, #120]	; (8007a1c <checkAktifCalisma+0x167c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a1e      	ldr	r2, [pc, #120]	; (8007a20 <checkAktifCalisma+0x1680>)
 80079a8:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80079aa:	4b1e      	ldr	r3, [pc, #120]	; (8007a24 <checkAktifCalisma+0x1684>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d02f      	beq.n	8007a12 <checkAktifCalisma+0x1672>
 80079b2:	4b1d      	ldr	r3, [pc, #116]	; (8007a28 <checkAktifCalisma+0x1688>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	f083 0301 	eor.w	r3, r3, #1
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d028      	beq.n	8007a12 <checkAktifCalisma+0x1672>
 80079c0:	4b1a      	ldr	r3, [pc, #104]	; (8007a2c <checkAktifCalisma+0x168c>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	f083 0301 	eor.w	r3, r3, #1
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d021      	beq.n	8007a12 <checkAktifCalisma+0x1672>
 80079ce:	4b18      	ldr	r3, [pc, #96]	; (8007a30 <checkAktifCalisma+0x1690>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	f083 0301 	eor.w	r3, r3, #1
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01a      	beq.n	8007a12 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80079dc:	4b15      	ldr	r3, [pc, #84]	; (8007a34 <checkAktifCalisma+0x1694>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	f083 0301 	eor.w	r3, r3, #1
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d013      	beq.n	8007a12 <checkAktifCalisma+0x1672>
 80079ea:	4b13      	ldr	r3, [pc, #76]	; (8007a38 <checkAktifCalisma+0x1698>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	f083 0301 	eor.w	r3, r3, #1
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00c      	beq.n	8007a12 <checkAktifCalisma+0x1672>
 80079f8:	4b10      	ldr	r3, [pc, #64]	; (8007a3c <checkAktifCalisma+0x169c>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	f083 0301 	eor.w	r3, r3, #1
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d005      	beq.n	8007a12 <checkAktifCalisma+0x1672>
			hataVar=0;
 8007a06:	4b07      	ldr	r3, [pc, #28]	; (8007a24 <checkAktifCalisma+0x1684>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007a0c:	2007      	movs	r0, #7
 8007a0e:	f7fd fe5d 	bl	80056cc <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007a12:	bf00      	nop
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000c62 	.word	0x20000c62
 8007a1c:	20000bb4 	.word	0x20000bb4
 8007a20:	20000bc8 	.word	0x20000bc8
 8007a24:	20000c61 	.word	0x20000c61
 8007a28:	20000c5c 	.word	0x20000c5c
 8007a2c:	20000c5d 	.word	0x20000c5d
 8007a30:	20000c6a 	.word	0x20000c6a
 8007a34:	20000c6b 	.word	0x20000c6b
 8007a38:	20000c6c 	.word	0x20000c6c
 8007a3c:	20000c5b 	.word	0x20000c5b

08007a40 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007a44:	4b8b      	ldr	r3, [pc, #556]	; (8007c74 <checkDemoModCalisma+0x234>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	f040 8229 	bne.w	8007ea0 <checkDemoModCalisma+0x460>
 8007a4e:	4b8a      	ldr	r3, [pc, #552]	; (8007c78 <checkDemoModCalisma+0x238>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 8224 	beq.w	8007ea0 <checkDemoModCalisma+0x460>
 8007a58:	4b88      	ldr	r3, [pc, #544]	; (8007c7c <checkDemoModCalisma+0x23c>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f040 821f 	bne.w	8007ea0 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007a62:	2102      	movs	r1, #2
 8007a64:	4886      	ldr	r0, [pc, #536]	; (8007c80 <checkDemoModCalisma+0x240>)
 8007a66:	f001 fedd 	bl	8009824 <HAL_GPIO_ReadPin>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d11d      	bne.n	8007aac <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007a70:	4b84      	ldr	r3, [pc, #528]	; (8007c84 <checkDemoModCalisma+0x244>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	f083 0301 	eor.w	r3, r3, #1
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d016      	beq.n	8007aac <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007a7e:	4b82      	ldr	r3, [pc, #520]	; (8007c88 <checkDemoModCalisma+0x248>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	f083 0301 	eor.w	r3, r3, #1
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00f      	beq.n	8007aac <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007a8c:	4b7f      	ldr	r3, [pc, #508]	; (8007c8c <checkDemoModCalisma+0x24c>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	f083 0301 	eor.w	r3, r3, #1
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d008      	beq.n	8007aac <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	2104      	movs	r1, #4
 8007a9e:	487c      	ldr	r0, [pc, #496]	; (8007c90 <checkDemoModCalisma+0x250>)
 8007aa0:	f001 fed7 	bl	8009852 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007aa4:	4b7b      	ldr	r3, [pc, #492]	; (8007c94 <checkDemoModCalisma+0x254>)
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	701a      	strb	r2, [r3, #0]
 8007aaa:	e00e      	b.n	8007aca <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007aac:	2102      	movs	r1, #2
 8007aae:	4874      	ldr	r0, [pc, #464]	; (8007c80 <checkDemoModCalisma+0x240>)
 8007ab0:	f001 feb8 	bl	8009824 <HAL_GPIO_ReadPin>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d107      	bne.n	8007aca <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007aba:	2200      	movs	r2, #0
 8007abc:	2104      	movs	r1, #4
 8007abe:	4874      	ldr	r0, [pc, #464]	; (8007c90 <checkDemoModCalisma+0x250>)
 8007ac0:	f001 fec7 	bl	8009852 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007ac4:	4b73      	ldr	r3, [pc, #460]	; (8007c94 <checkDemoModCalisma+0x254>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007aca:	4b72      	ldr	r3, [pc, #456]	; (8007c94 <checkDemoModCalisma+0x254>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10b      	bne.n	8007aea <checkDemoModCalisma+0xaa>
 8007ad2:	4b6d      	ldr	r3, [pc, #436]	; (8007c88 <checkDemoModCalisma+0x248>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d107      	bne.n	8007aea <checkDemoModCalisma+0xaa>
 8007ada:	4b6c      	ldr	r3, [pc, #432]	; (8007c8c <checkDemoModCalisma+0x24c>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d103      	bne.n	8007aea <checkDemoModCalisma+0xaa>
 8007ae2:	4b68      	ldr	r3, [pc, #416]	; (8007c84 <checkDemoModCalisma+0x244>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00c      	beq.n	8007b04 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007aea:	2201      	movs	r2, #1
 8007aec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007af0:	4867      	ldr	r0, [pc, #412]	; (8007c90 <checkDemoModCalisma+0x250>)
 8007af2:	f001 feae 	bl	8009852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007af6:	2201      	movs	r2, #1
 8007af8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007afc:	4864      	ldr	r0, [pc, #400]	; (8007c90 <checkDemoModCalisma+0x250>)
 8007afe:	f001 fea8 	bl	8009852 <HAL_GPIO_WritePin>
 8007b02:	e00b      	b.n	8007b1c <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007b04:	2200      	movs	r2, #0
 8007b06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b0a:	4861      	ldr	r0, [pc, #388]	; (8007c90 <checkDemoModCalisma+0x250>)
 8007b0c:	f001 fea1 	bl	8009852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007b10:	2200      	movs	r2, #0
 8007b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b16:	485e      	ldr	r0, [pc, #376]	; (8007c90 <checkDemoModCalisma+0x250>)
 8007b18:	f001 fe9b 	bl	8009852 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007b1c:	2102      	movs	r1, #2
 8007b1e:	4858      	ldr	r0, [pc, #352]	; (8007c80 <checkDemoModCalisma+0x240>)
 8007b20:	f001 fe80 	bl	8009824 <HAL_GPIO_ReadPin>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d10d      	bne.n	8007b46 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b2e:	4854      	ldr	r0, [pc, #336]	; (8007c80 <checkDemoModCalisma+0x240>)
 8007b30:	f001 fe78 	bl	8009824 <HAL_GPIO_ReadPin>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d105      	bne.n	8007b46 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007b3a:	4b56      	ldr	r3, [pc, #344]	; (8007c94 <checkDemoModCalisma+0x254>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	f083 0301 	eor.w	r3, r3, #1
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007b46:	2102      	movs	r1, #2
 8007b48:	484d      	ldr	r0, [pc, #308]	; (8007c80 <checkDemoModCalisma+0x240>)
 8007b4a:	f001 fe6b 	bl	8009824 <HAL_GPIO_ReadPin>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d125      	bne.n	8007ba0 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b58:	4849      	ldr	r0, [pc, #292]	; (8007c80 <checkDemoModCalisma+0x240>)
 8007b5a:	f001 fe63 	bl	8009824 <HAL_GPIO_ReadPin>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d11d      	bne.n	8007ba0 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007b64:	4b4b      	ldr	r3, [pc, #300]	; (8007c94 <checkDemoModCalisma+0x254>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	f083 0301 	eor.w	r3, r3, #1
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d016      	beq.n	8007ba0 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007b72:	4b44      	ldr	r3, [pc, #272]	; (8007c84 <checkDemoModCalisma+0x244>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	f083 0301 	eor.w	r3, r3, #1
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00f      	beq.n	8007ba0 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007b80:	4b42      	ldr	r3, [pc, #264]	; (8007c8c <checkDemoModCalisma+0x24c>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	f083 0301 	eor.w	r3, r3, #1
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d008      	beq.n	8007ba0 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007b8e:	2201      	movs	r2, #1
 8007b90:	2120      	movs	r1, #32
 8007b92:	483b      	ldr	r0, [pc, #236]	; (8007c80 <checkDemoModCalisma+0x240>)
 8007b94:	f001 fe5d 	bl	8009852 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007b98:	4b3b      	ldr	r3, [pc, #236]	; (8007c88 <checkDemoModCalisma+0x248>)
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	701a      	strb	r2, [r3, #0]
 8007b9e:	e007      	b.n	8007bb0 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2120      	movs	r1, #32
 8007ba4:	4836      	ldr	r0, [pc, #216]	; (8007c80 <checkDemoModCalisma+0x240>)
 8007ba6:	f001 fe54 	bl	8009852 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007baa:	4b37      	ldr	r3, [pc, #220]	; (8007c88 <checkDemoModCalisma+0x248>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007bb0:	2102      	movs	r1, #2
 8007bb2:	4833      	ldr	r0, [pc, #204]	; (8007c80 <checkDemoModCalisma+0x240>)
 8007bb4:	f001 fe36 	bl	8009824 <HAL_GPIO_ReadPin>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d125      	bne.n	8007c0a <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007bbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bc2:	482f      	ldr	r0, [pc, #188]	; (8007c80 <checkDemoModCalisma+0x240>)
 8007bc4:	f001 fe2e 	bl	8009824 <HAL_GPIO_ReadPin>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d11d      	bne.n	8007c0a <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007bce:	4b31      	ldr	r3, [pc, #196]	; (8007c94 <checkDemoModCalisma+0x254>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	f083 0301 	eor.w	r3, r3, #1
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d016      	beq.n	8007c0a <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007bdc:	4b2a      	ldr	r3, [pc, #168]	; (8007c88 <checkDemoModCalisma+0x248>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	f083 0301 	eor.w	r3, r3, #1
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00f      	beq.n	8007c0a <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007bea:	4b26      	ldr	r3, [pc, #152]	; (8007c84 <checkDemoModCalisma+0x244>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	f083 0301 	eor.w	r3, r3, #1
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d008      	beq.n	8007c0a <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	2110      	movs	r1, #16
 8007bfc:	4820      	ldr	r0, [pc, #128]	; (8007c80 <checkDemoModCalisma+0x240>)
 8007bfe:	f001 fe28 	bl	8009852 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007c02:	4b22      	ldr	r3, [pc, #136]	; (8007c8c <checkDemoModCalisma+0x24c>)
 8007c04:	2201      	movs	r2, #1
 8007c06:	701a      	strb	r2, [r3, #0]
 8007c08:	e007      	b.n	8007c1a <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2110      	movs	r1, #16
 8007c0e:	481c      	ldr	r0, [pc, #112]	; (8007c80 <checkDemoModCalisma+0x240>)
 8007c10:	f001 fe1f 	bl	8009852 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007c14:	4b1d      	ldr	r3, [pc, #116]	; (8007c8c <checkDemoModCalisma+0x24c>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007c1a:	2104      	movs	r1, #4
 8007c1c:	4818      	ldr	r0, [pc, #96]	; (8007c80 <checkDemoModCalisma+0x240>)
 8007c1e:	f001 fe01 	bl	8009824 <HAL_GPIO_ReadPin>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d139      	bne.n	8007c9c <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007c28:	4b1a      	ldr	r3, [pc, #104]	; (8007c94 <checkDemoModCalisma+0x254>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	f083 0301 	eor.w	r3, r3, #1
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d032      	beq.n	8007c9c <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007c36:	4b15      	ldr	r3, [pc, #84]	; (8007c8c <checkDemoModCalisma+0x24c>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	f083 0301 	eor.w	r3, r3, #1
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d02b      	beq.n	8007c9c <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007c44:	4b10      	ldr	r3, [pc, #64]	; (8007c88 <checkDemoModCalisma+0x248>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	f083 0301 	eor.w	r3, r3, #1
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d024      	beq.n	8007c9c <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007c52:	2201      	movs	r2, #1
 8007c54:	2102      	movs	r1, #2
 8007c56:	480e      	ldr	r0, [pc, #56]	; (8007c90 <checkDemoModCalisma+0x250>)
 8007c58:	f001 fdfb 	bl	8009852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	2101      	movs	r1, #1
 8007c60:	480b      	ldr	r0, [pc, #44]	; (8007c90 <checkDemoModCalisma+0x250>)
 8007c62:	f001 fdf6 	bl	8009852 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007c66:	4b07      	ldr	r3, [pc, #28]	; (8007c84 <checkDemoModCalisma+0x244>)
 8007c68:	2201      	movs	r2, #1
 8007c6a:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	; (8007c98 <checkDemoModCalisma+0x258>)
 8007c6e:	2201      	movs	r2, #1
 8007c70:	701a      	strb	r2, [r3, #0]
 8007c72:	e027      	b.n	8007cc4 <checkDemoModCalisma+0x284>
 8007c74:	20000c2a 	.word	0x20000c2a
 8007c78:	20000c5e 	.word	0x20000c5e
 8007c7c:	20000c29 	.word	0x20000c29
 8007c80:	40011000 	.word	0x40011000
 8007c84:	20000c65 	.word	0x20000c65
 8007c88:	20000c66 	.word	0x20000c66
 8007c8c:	20000c67 	.word	0x20000c67
 8007c90:	40010c00 	.word	0x40010c00
 8007c94:	20000c64 	.word	0x20000c64
 8007c98:	20000c4a 	.word	0x20000c4a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007c9c:	2104      	movs	r1, #4
 8007c9e:	48a0      	ldr	r0, [pc, #640]	; (8007f20 <checkDemoModCalisma+0x4e0>)
 8007ca0:	f001 fdc0 	bl	8009824 <HAL_GPIO_ReadPin>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d10c      	bne.n	8007cc4 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007caa:	2200      	movs	r2, #0
 8007cac:	2102      	movs	r1, #2
 8007cae:	489d      	ldr	r0, [pc, #628]	; (8007f24 <checkDemoModCalisma+0x4e4>)
 8007cb0:	f001 fdcf 	bl	8009852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	489a      	ldr	r0, [pc, #616]	; (8007f24 <checkDemoModCalisma+0x4e4>)
 8007cba:	f001 fdca 	bl	8009852 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007cbe:	4b9a      	ldr	r3, [pc, #616]	; (8007f28 <checkDemoModCalisma+0x4e8>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007cc4:	2104      	movs	r1, #4
 8007cc6:	4896      	ldr	r0, [pc, #600]	; (8007f20 <checkDemoModCalisma+0x4e0>)
 8007cc8:	f001 fdac 	bl	8009824 <HAL_GPIO_ReadPin>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d10d      	bne.n	8007cee <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	2180      	movs	r1, #128	; 0x80
 8007cd6:	4895      	ldr	r0, [pc, #596]	; (8007f2c <checkDemoModCalisma+0x4ec>)
 8007cd8:	f001 fdbb 	bl	8009852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007cdc:	2201      	movs	r2, #1
 8007cde:	2120      	movs	r1, #32
 8007ce0:	4892      	ldr	r0, [pc, #584]	; (8007f2c <checkDemoModCalisma+0x4ec>)
 8007ce2:	f001 fdb6 	bl	8009852 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007ce6:	4b92      	ldr	r3, [pc, #584]	; (8007f30 <checkDemoModCalisma+0x4f0>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a92      	ldr	r2, [pc, #584]	; (8007f34 <checkDemoModCalisma+0x4f4>)
 8007cec:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007cee:	4b90      	ldr	r3, [pc, #576]	; (8007f30 <checkDemoModCalisma+0x4f0>)
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	4b90      	ldr	r3, [pc, #576]	; (8007f34 <checkDemoModCalisma+0x4f4>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d909      	bls.n	8007d10 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2180      	movs	r1, #128	; 0x80
 8007d00:	488a      	ldr	r0, [pc, #552]	; (8007f2c <checkDemoModCalisma+0x4ec>)
 8007d02:	f001 fda6 	bl	8009852 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007d06:	2200      	movs	r2, #0
 8007d08:	2120      	movs	r1, #32
 8007d0a:	4888      	ldr	r0, [pc, #544]	; (8007f2c <checkDemoModCalisma+0x4ec>)
 8007d0c:	f001 fda1 	bl	8009852 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007d10:	2102      	movs	r1, #2
 8007d12:	4883      	ldr	r0, [pc, #524]	; (8007f20 <checkDemoModCalisma+0x4e0>)
 8007d14:	f001 fd86 	bl	8009824 <HAL_GPIO_ReadPin>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d108      	bne.n	8007d30 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007d1e:	2201      	movs	r2, #1
 8007d20:	2140      	movs	r1, #64	; 0x40
 8007d22:	4882      	ldr	r0, [pc, #520]	; (8007f2c <checkDemoModCalisma+0x4ec>)
 8007d24:	f001 fd95 	bl	8009852 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007d28:	4b81      	ldr	r3, [pc, #516]	; (8007f30 <checkDemoModCalisma+0x4f0>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a81      	ldr	r2, [pc, #516]	; (8007f34 <checkDemoModCalisma+0x4f4>)
 8007d2e:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007d30:	4b7f      	ldr	r3, [pc, #508]	; (8007f30 <checkDemoModCalisma+0x4f0>)
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	4b7f      	ldr	r3, [pc, #508]	; (8007f34 <checkDemoModCalisma+0x4f4>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	d904      	bls.n	8007d48 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2140      	movs	r1, #64	; 0x40
 8007d42:	487a      	ldr	r0, [pc, #488]	; (8007f2c <checkDemoModCalisma+0x4ec>)
 8007d44:	f001 fd85 	bl	8009852 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007d48:	4b7b      	ldr	r3, [pc, #492]	; (8007f38 <checkDemoModCalisma+0x4f8>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d058      	beq.n	8007e02 <checkDemoModCalisma+0x3c2>
 8007d50:	4b7a      	ldr	r3, [pc, #488]	; (8007f3c <checkDemoModCalisma+0x4fc>)
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d054      	beq.n	8007e02 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007d58:	4b79      	ldr	r3, [pc, #484]	; (8007f40 <checkDemoModCalisma+0x500>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	4b77      	ldr	r3, [pc, #476]	; (8007f40 <checkDemoModCalisma+0x500>)
 8007d62:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007d64:	4b76      	ldr	r3, [pc, #472]	; (8007f40 <checkDemoModCalisma+0x500>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	2b09      	cmp	r3, #9
 8007d6a:	d908      	bls.n	8007d7e <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007d6c:	4b74      	ldr	r3, [pc, #464]	; (8007f40 <checkDemoModCalisma+0x500>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007d72:	4b74      	ldr	r3, [pc, #464]	; (8007f44 <checkDemoModCalisma+0x504>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	3301      	adds	r3, #1
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	4b72      	ldr	r3, [pc, #456]	; (8007f44 <checkDemoModCalisma+0x504>)
 8007d7c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007d7e:	4b71      	ldr	r3, [pc, #452]	; (8007f44 <checkDemoModCalisma+0x504>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b09      	cmp	r3, #9
 8007d84:	d908      	bls.n	8007d98 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007d86:	4b6f      	ldr	r3, [pc, #444]	; (8007f44 <checkDemoModCalisma+0x504>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007d8c:	4b6e      	ldr	r3, [pc, #440]	; (8007f48 <checkDemoModCalisma+0x508>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	3301      	adds	r3, #1
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	4b6c      	ldr	r3, [pc, #432]	; (8007f48 <checkDemoModCalisma+0x508>)
 8007d96:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007d98:	4b6b      	ldr	r3, [pc, #428]	; (8007f48 <checkDemoModCalisma+0x508>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2b09      	cmp	r3, #9
 8007d9e:	d908      	bls.n	8007db2 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007da0:	4b69      	ldr	r3, [pc, #420]	; (8007f48 <checkDemoModCalisma+0x508>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007da6:	4b69      	ldr	r3, [pc, #420]	; (8007f4c <checkDemoModCalisma+0x50c>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	3301      	adds	r3, #1
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	4b67      	ldr	r3, [pc, #412]	; (8007f4c <checkDemoModCalisma+0x50c>)
 8007db0:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007db2:	4b66      	ldr	r3, [pc, #408]	; (8007f4c <checkDemoModCalisma+0x50c>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	2b09      	cmp	r3, #9
 8007db8:	d908      	bls.n	8007dcc <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007dba:	4b64      	ldr	r3, [pc, #400]	; (8007f4c <checkDemoModCalisma+0x50c>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007dc0:	4b63      	ldr	r3, [pc, #396]	; (8007f50 <checkDemoModCalisma+0x510>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	4b61      	ldr	r3, [pc, #388]	; (8007f50 <checkDemoModCalisma+0x510>)
 8007dca:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007dcc:	4b60      	ldr	r3, [pc, #384]	; (8007f50 <checkDemoModCalisma+0x510>)
 8007dce:	781a      	ldrb	r2, [r3, #0]
 8007dd0:	4b60      	ldr	r3, [pc, #384]	; (8007f54 <checkDemoModCalisma+0x514>)
 8007dd2:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007dd6:	4b5d      	ldr	r3, [pc, #372]	; (8007f4c <checkDemoModCalisma+0x50c>)
 8007dd8:	781a      	ldrb	r2, [r3, #0]
 8007dda:	4b5e      	ldr	r3, [pc, #376]	; (8007f54 <checkDemoModCalisma+0x514>)
 8007ddc:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007dde:	4b5a      	ldr	r3, [pc, #360]	; (8007f48 <checkDemoModCalisma+0x508>)
 8007de0:	781a      	ldrb	r2, [r3, #0]
 8007de2:	4b5c      	ldr	r3, [pc, #368]	; (8007f54 <checkDemoModCalisma+0x514>)
 8007de4:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007de6:	4b57      	ldr	r3, [pc, #348]	; (8007f44 <checkDemoModCalisma+0x504>)
 8007de8:	781a      	ldrb	r2, [r3, #0]
 8007dea:	4b5a      	ldr	r3, [pc, #360]	; (8007f54 <checkDemoModCalisma+0x514>)
 8007dec:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007dee:	4b54      	ldr	r3, [pc, #336]	; (8007f40 <checkDemoModCalisma+0x500>)
 8007df0:	781a      	ldrb	r2, [r3, #0]
 8007df2:	4b58      	ldr	r3, [pc, #352]	; (8007f54 <checkDemoModCalisma+0x514>)
 8007df4:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8007df6:	4b58      	ldr	r3, [pc, #352]	; (8007f58 <checkDemoModCalisma+0x518>)
 8007df8:	2201      	movs	r2, #1
 8007dfa:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007dfc:	4b4f      	ldr	r3, [pc, #316]	; (8007f3c <checkDemoModCalisma+0x4fc>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8007e02:	4b56      	ldr	r3, [pc, #344]	; (8007f5c <checkDemoModCalisma+0x51c>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f040 8087 	bne.w	8007f1a <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007e0c:	4a54      	ldr	r2, [pc, #336]	; (8007f60 <checkDemoModCalisma+0x520>)
 8007e0e:	2101      	movs	r1, #1
 8007e10:	2002      	movs	r0, #2
 8007e12:	f7f8 fba7 	bl	8000564 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8007e16:	4a53      	ldr	r2, [pc, #332]	; (8007f64 <checkDemoModCalisma+0x524>)
 8007e18:	2101      	movs	r1, #1
 8007e1a:	2001      	movs	r0, #1
 8007e1c:	f7f8 fba2 	bl	8000564 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007e20:	4b4b      	ldr	r3, [pc, #300]	; (8007f50 <checkDemoModCalisma+0x510>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	220a      	movs	r2, #10
 8007e26:	4950      	ldr	r1, [pc, #320]	; (8007f68 <checkDemoModCalisma+0x528>)
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f004 fcf1 	bl	800c810 <itoa>
			lcd_print(2,12,snum);
 8007e2e:	4a4e      	ldr	r2, [pc, #312]	; (8007f68 <checkDemoModCalisma+0x528>)
 8007e30:	210c      	movs	r1, #12
 8007e32:	2002      	movs	r0, #2
 8007e34:	f7f8 fb96 	bl	8000564 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007e38:	4b44      	ldr	r3, [pc, #272]	; (8007f4c <checkDemoModCalisma+0x50c>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	220a      	movs	r2, #10
 8007e3e:	494a      	ldr	r1, [pc, #296]	; (8007f68 <checkDemoModCalisma+0x528>)
 8007e40:	4618      	mov	r0, r3
 8007e42:	f004 fce5 	bl	800c810 <itoa>
			lcd_print(2,13,snum);
 8007e46:	4a48      	ldr	r2, [pc, #288]	; (8007f68 <checkDemoModCalisma+0x528>)
 8007e48:	210d      	movs	r1, #13
 8007e4a:	2002      	movs	r0, #2
 8007e4c:	f7f8 fb8a 	bl	8000564 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007e50:	4b3d      	ldr	r3, [pc, #244]	; (8007f48 <checkDemoModCalisma+0x508>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	220a      	movs	r2, #10
 8007e56:	4944      	ldr	r1, [pc, #272]	; (8007f68 <checkDemoModCalisma+0x528>)
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f004 fcd9 	bl	800c810 <itoa>
			lcd_print(2,14,snum);
 8007e5e:	4a42      	ldr	r2, [pc, #264]	; (8007f68 <checkDemoModCalisma+0x528>)
 8007e60:	210e      	movs	r1, #14
 8007e62:	2002      	movs	r0, #2
 8007e64:	f7f8 fb7e 	bl	8000564 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007e68:	4b36      	ldr	r3, [pc, #216]	; (8007f44 <checkDemoModCalisma+0x504>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	220a      	movs	r2, #10
 8007e6e:	493e      	ldr	r1, [pc, #248]	; (8007f68 <checkDemoModCalisma+0x528>)
 8007e70:	4618      	mov	r0, r3
 8007e72:	f004 fccd 	bl	800c810 <itoa>
			lcd_print(2,15,snum);
 8007e76:	4a3c      	ldr	r2, [pc, #240]	; (8007f68 <checkDemoModCalisma+0x528>)
 8007e78:	210f      	movs	r1, #15
 8007e7a:	2002      	movs	r0, #2
 8007e7c:	f7f8 fb72 	bl	8000564 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007e80:	4b2f      	ldr	r3, [pc, #188]	; (8007f40 <checkDemoModCalisma+0x500>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	220a      	movs	r2, #10
 8007e86:	4938      	ldr	r1, [pc, #224]	; (8007f68 <checkDemoModCalisma+0x528>)
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f004 fcc1 	bl	800c810 <itoa>
			lcd_print(2,16,snum);
 8007e8e:	4a36      	ldr	r2, [pc, #216]	; (8007f68 <checkDemoModCalisma+0x528>)
 8007e90:	2110      	movs	r1, #16
 8007e92:	2002      	movs	r0, #2
 8007e94:	f7f8 fb66 	bl	8000564 <lcd_print>
			mesajYazildi=1;
 8007e98:	4b34      	ldr	r3, [pc, #208]	; (8007f6c <checkDemoModCalisma+0x52c>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8007e9e:	e03c      	b.n	8007f1a <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007ea0:	4b33      	ldr	r3, [pc, #204]	; (8007f70 <checkDemoModCalisma+0x530>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d003      	beq.n	8007eb0 <checkDemoModCalisma+0x470>
 8007ea8:	4b2c      	ldr	r3, [pc, #176]	; (8007f5c <checkDemoModCalisma+0x51c>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d134      	bne.n	8007f1a <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007eb6:	481b      	ldr	r0, [pc, #108]	; (8007f24 <checkDemoModCalisma+0x4e4>)
 8007eb8:	f001 fccb 	bl	8009852 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ec2:	4818      	ldr	r0, [pc, #96]	; (8007f24 <checkDemoModCalisma+0x4e4>)
 8007ec4:	f001 fcc5 	bl	8009852 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2104      	movs	r1, #4
 8007ecc:	4815      	ldr	r0, [pc, #84]	; (8007f24 <checkDemoModCalisma+0x4e4>)
 8007ece:	f001 fcc0 	bl	8009852 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2102      	movs	r1, #2
 8007ed6:	4813      	ldr	r0, [pc, #76]	; (8007f24 <checkDemoModCalisma+0x4e4>)
 8007ed8:	f001 fcbb 	bl	8009852 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007edc:	2200      	movs	r2, #0
 8007ede:	2101      	movs	r1, #1
 8007ee0:	4810      	ldr	r0, [pc, #64]	; (8007f24 <checkDemoModCalisma+0x4e4>)
 8007ee2:	f001 fcb6 	bl	8009852 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2120      	movs	r1, #32
 8007eea:	480d      	ldr	r0, [pc, #52]	; (8007f20 <checkDemoModCalisma+0x4e0>)
 8007eec:	f001 fcb1 	bl	8009852 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2110      	movs	r1, #16
 8007ef4:	480a      	ldr	r0, [pc, #40]	; (8007f20 <checkDemoModCalisma+0x4e0>)
 8007ef6:	f001 fcac 	bl	8009852 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007efa:	2200      	movs	r2, #0
 8007efc:	2180      	movs	r1, #128	; 0x80
 8007efe:	480b      	ldr	r0, [pc, #44]	; (8007f2c <checkDemoModCalisma+0x4ec>)
 8007f00:	f001 fca7 	bl	8009852 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f04:	2200      	movs	r2, #0
 8007f06:	2140      	movs	r1, #64	; 0x40
 8007f08:	4808      	ldr	r0, [pc, #32]	; (8007f2c <checkDemoModCalisma+0x4ec>)
 8007f0a:	f001 fca2 	bl	8009852 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2120      	movs	r1, #32
 8007f12:	4806      	ldr	r0, [pc, #24]	; (8007f2c <checkDemoModCalisma+0x4ec>)
 8007f14:	f001 fc9d 	bl	8009852 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8007f18:	e7ff      	b.n	8007f1a <checkDemoModCalisma+0x4da>
 8007f1a:	bf00      	nop
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	40011000 	.word	0x40011000
 8007f24:	40010c00 	.word	0x40010c00
 8007f28:	20000c65 	.word	0x20000c65
 8007f2c:	40010800 	.word	0x40010800
 8007f30:	20000bb4 	.word	0x20000bb4
 8007f34:	20000bc4 	.word	0x20000bc4
 8007f38:	20000c64 	.word	0x20000c64
 8007f3c:	20000c4a 	.word	0x20000c4a
 8007f40:	20000c09 	.word	0x20000c09
 8007f44:	20000c0a 	.word	0x20000c0a
 8007f48:	200009b2 	.word	0x200009b2
 8007f4c:	200009b3 	.word	0x200009b3
 8007f50:	20000c0b 	.word	0x20000c0b
 8007f54:	20000b3c 	.word	0x20000b3c
 8007f58:	20000c38 	.word	0x20000c38
 8007f5c:	20000c29 	.word	0x20000c29
 8007f60:	0800d724 	.word	0x0800d724
 8007f64:	0800d730 	.word	0x0800d730
 8007f68:	20000bac 	.word	0x20000bac
 8007f6c:	20000c40 	.word	0x20000c40
 8007f70:	20000c2a 	.word	0x20000c2a

08007f74 <mainLoop>:
	char* result = malloc(strlen(combinedString) + 1);
	strcpy(result, combinedString);
	return result;
}

void mainLoop() {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8007f7a:	f7fe f925 	bl	80061c8 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8007f7e:	2101      	movs	r1, #1
 8007f80:	48ad      	ldr	r0, [pc, #692]	; (8008238 <mainLoop+0x2c4>)
 8007f82:	f001 fc4f 	bl	8009824 <HAL_GPIO_ReadPin>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d136      	bne.n	8007ffa <mainLoop+0x86>
 8007f8c:	2108      	movs	r1, #8
 8007f8e:	48ab      	ldr	r0, [pc, #684]	; (800823c <mainLoop+0x2c8>)
 8007f90:	f001 fc48 	bl	8009824 <HAL_GPIO_ReadPin>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d12f      	bne.n	8007ffa <mainLoop+0x86>
 8007f9a:	2102      	movs	r1, #2
 8007f9c:	48a6      	ldr	r0, [pc, #664]	; (8008238 <mainLoop+0x2c4>)
 8007f9e:	f001 fc41 	bl	8009824 <HAL_GPIO_ReadPin>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d128      	bne.n	8007ffa <mainLoop+0x86>
 8007fa8:	2104      	movs	r1, #4
 8007faa:	48a3      	ldr	r0, [pc, #652]	; (8008238 <mainLoop+0x2c4>)
 8007fac:	f001 fc3a 	bl	8009824 <HAL_GPIO_ReadPin>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d121      	bne.n	8007ffa <mainLoop+0x86>
 8007fb6:	2108      	movs	r1, #8
 8007fb8:	489f      	ldr	r0, [pc, #636]	; (8008238 <mainLoop+0x2c4>)
 8007fba:	f001 fc33 	bl	8009824 <HAL_GPIO_ReadPin>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d11a      	bne.n	8007ffa <mainLoop+0x86>
 8007fc4:	2180      	movs	r1, #128	; 0x80
 8007fc6:	489d      	ldr	r0, [pc, #628]	; (800823c <mainLoop+0x2c8>)
 8007fc8:	f001 fc2c 	bl	8009824 <HAL_GPIO_ReadPin>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d113      	bne.n	8007ffa <mainLoop+0x86>
 8007fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007fd6:	4899      	ldr	r0, [pc, #612]	; (800823c <mainLoop+0x2c8>)
 8007fd8:	f001 fc24 	bl	8009824 <HAL_GPIO_ReadPin>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d10b      	bne.n	8007ffa <mainLoop+0x86>
 8007fe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007fe6:	4895      	ldr	r0, [pc, #596]	; (800823c <mainLoop+0x2c8>)
 8007fe8:	f001 fc1c 	bl	8009824 <HAL_GPIO_ReadPin>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d103      	bne.n	8007ffa <mainLoop+0x86>
			butonKontrol=0;
 8007ff2:	4b93      	ldr	r3, [pc, #588]	; (8008240 <mainLoop+0x2cc>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	701a      	strb	r2, [r3, #0]
 8007ff8:	e003      	b.n	8008002 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8007ffa:	4b92      	ldr	r3, [pc, #584]	; (8008244 <mainLoop+0x2d0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a92      	ldr	r2, [pc, #584]	; (8008248 <mainLoop+0x2d4>)
 8008000:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8008002:	4b92      	ldr	r3, [pc, #584]	; (800824c <mainLoop+0x2d8>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d03a      	beq.n	8008080 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800800a:	bf00      	nop
 800800c:	4890      	ldr	r0, [pc, #576]	; (8008250 <mainLoop+0x2dc>)
 800800e:	f002 fa32 	bl	800a476 <HAL_I2C_GetError>
 8008012:	4603      	mov	r3, r0
 8008014:	2b04      	cmp	r3, #4
 8008016:	d0f9      	beq.n	800800c <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008018:	bf00      	nop
 800801a:	488d      	ldr	r0, [pc, #564]	; (8008250 <mainLoop+0x2dc>)
 800801c:	f002 fa1e 	bl	800a45c <HAL_I2C_GetState>
 8008020:	4603      	mov	r3, r0
 8008022:	2b20      	cmp	r3, #32
 8008024:	d1f9      	bne.n	800801a <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8008026:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800802a:	9302      	str	r3, [sp, #8]
 800802c:	236e      	movs	r3, #110	; 0x6e
 800802e:	9301      	str	r3, [sp, #4]
 8008030:	4b88      	ldr	r3, [pc, #544]	; (8008254 <mainLoop+0x2e0>)
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	236e      	movs	r3, #110	; 0x6e
 8008036:	2200      	movs	r2, #0
 8008038:	21a0      	movs	r1, #160	; 0xa0
 800803a:	4885      	ldr	r0, [pc, #532]	; (8008250 <mainLoop+0x2dc>)
 800803c:	f001 feac 	bl	8009d98 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8008040:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008044:	f000 fe1e 	bl	8008c84 <HAL_Delay>

		  hafizaYaz=0;
 8008048:	4b80      	ldr	r3, [pc, #512]	; (800824c <mainLoop+0x2d8>)
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 800804e:	4b82      	ldr	r3, [pc, #520]	; (8008258 <mainLoop+0x2e4>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d105      	bne.n	8008062 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8008056:	4a81      	ldr	r2, [pc, #516]	; (800825c <mainLoop+0x2e8>)
 8008058:	2101      	movs	r1, #1
 800805a:	2002      	movs	r0, #2
 800805c:	f7f8 fa82 	bl	8000564 <lcd_print>
 8008060:	e008      	b.n	8008074 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8008062:	4b7d      	ldr	r3, [pc, #500]	; (8008258 <mainLoop+0x2e4>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d104      	bne.n	8008074 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 800806a:	4a7d      	ldr	r2, [pc, #500]	; (8008260 <mainLoop+0x2ec>)
 800806c:	2101      	movs	r1, #1
 800806e:	2002      	movs	r0, #2
 8008070:	f7f8 fa78 	bl	8000564 <lcd_print>
		  }

		  HAL_Delay(1000);
 8008074:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008078:	f000 fe04 	bl	8008c84 <HAL_Delay>
		  lcd_clear();
 800807c:	f7f8 fa9e 	bl	80005bc <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8008080:	4b78      	ldr	r3, [pc, #480]	; (8008264 <mainLoop+0x2f0>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	f083 0301 	eor.w	r3, r3, #1
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d06e      	beq.n	800816c <mainLoop+0x1f8>
 800808e:	4870      	ldr	r0, [pc, #448]	; (8008250 <mainLoop+0x2dc>)
 8008090:	f002 f9e4 	bl	800a45c <HAL_I2C_GetState>
 8008094:	4603      	mov	r3, r0
 8008096:	2b20      	cmp	r3, #32
 8008098:	d168      	bne.n	800816c <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 800809a:	4b73      	ldr	r3, [pc, #460]	; (8008268 <mainLoop+0x2f4>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	f083 0301 	eor.w	r3, r3, #1
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d044      	beq.n	8008132 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 80080a8:	4a70      	ldr	r2, [pc, #448]	; (800826c <mainLoop+0x2f8>)
 80080aa:	2101      	movs	r1, #1
 80080ac:	2001      	movs	r0, #1
 80080ae:	f7f8 fa59 	bl	8000564 <lcd_print>
			  if(dilSecim==0) {
 80080b2:	4b69      	ldr	r3, [pc, #420]	; (8008258 <mainLoop+0x2e4>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d105      	bne.n	80080c6 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 80080ba:	4a6d      	ldr	r2, [pc, #436]	; (8008270 <mainLoop+0x2fc>)
 80080bc:	2101      	movs	r1, #1
 80080be:	2002      	movs	r0, #2
 80080c0:	f7f8 fa50 	bl	8000564 <lcd_print>
 80080c4:	e008      	b.n	80080d8 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 80080c6:	4b64      	ldr	r3, [pc, #400]	; (8008258 <mainLoop+0x2e4>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d104      	bne.n	80080d8 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 80080ce:	4a69      	ldr	r2, [pc, #420]	; (8008274 <mainLoop+0x300>)
 80080d0:	2101      	movs	r1, #1
 80080d2:	2002      	movs	r0, #2
 80080d4:	f7f8 fa46 	bl	8000564 <lcd_print>
			  }
			  HAL_Delay(1000);
 80080d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080dc:	f000 fdd2 	bl	8008c84 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80080e0:	bf00      	nop
 80080e2:	485b      	ldr	r0, [pc, #364]	; (8008250 <mainLoop+0x2dc>)
 80080e4:	f002 f9c7 	bl	800a476 <HAL_I2C_GetError>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b04      	cmp	r3, #4
 80080ec:	d0f9      	beq.n	80080e2 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80080ee:	e003      	b.n	80080f8 <mainLoop+0x184>
				  HAL_Delay(1000);
 80080f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080f4:	f000 fdc6 	bl	8008c84 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80080f8:	4855      	ldr	r0, [pc, #340]	; (8008250 <mainLoop+0x2dc>)
 80080fa:	f002 f9af 	bl	800a45c <HAL_I2C_GetState>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b20      	cmp	r3, #32
 8008102:	d1f5      	bne.n	80080f0 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8008104:	4b54      	ldr	r3, [pc, #336]	; (8008258 <mainLoop+0x2e4>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d105      	bne.n	8008118 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 800810c:	4a5a      	ldr	r2, [pc, #360]	; (8008278 <mainLoop+0x304>)
 800810e:	2101      	movs	r1, #1
 8008110:	2002      	movs	r0, #2
 8008112:	f7f8 fa27 	bl	8000564 <lcd_print>
 8008116:	e008      	b.n	800812a <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8008118:	4b4f      	ldr	r3, [pc, #316]	; (8008258 <mainLoop+0x2e4>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d104      	bne.n	800812a <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8008120:	4a56      	ldr	r2, [pc, #344]	; (800827c <mainLoop+0x308>)
 8008122:	2101      	movs	r1, #1
 8008124:	2002      	movs	r0, #2
 8008126:	f7f8 fa1d 	bl	8000564 <lcd_print>
			  }

			  ilkOkuma=1;
 800812a:	4b4f      	ldr	r3, [pc, #316]	; (8008268 <mainLoop+0x2f4>)
 800812c:	2201      	movs	r2, #1
 800812e:	701a      	strb	r2, [r3, #0]
 8008130:	e014      	b.n	800815c <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8008132:	4b49      	ldr	r3, [pc, #292]	; (8008258 <mainLoop+0x2e4>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d105      	bne.n	8008146 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 800813a:	4a51      	ldr	r2, [pc, #324]	; (8008280 <mainLoop+0x30c>)
 800813c:	2101      	movs	r1, #1
 800813e:	2002      	movs	r0, #2
 8008140:	f7f8 fa10 	bl	8000564 <lcd_print>
 8008144:	e008      	b.n	8008158 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8008146:	4b44      	ldr	r3, [pc, #272]	; (8008258 <mainLoop+0x2e4>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d104      	bne.n	8008158 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 800814e:	4a4d      	ldr	r2, [pc, #308]	; (8008284 <mainLoop+0x310>)
 8008150:	2101      	movs	r1, #1
 8008152:	2002      	movs	r0, #2
 8008154:	f7f8 fa06 	bl	8000564 <lcd_print>
			  }
			  lcd_clear();
 8008158:	f7f8 fa30 	bl	80005bc <lcd_clear>
		  }

		  lcd_clear();
 800815c:	f7f8 fa2e 	bl	80005bc <lcd_clear>

		  eepromKontrol(1);
 8008160:	2001      	movs	r0, #1
 8008162:	f7fd fbe9 	bl	8005938 <eepromKontrol>
		  hafizaOku=1;
 8008166:	4b3f      	ldr	r3, [pc, #252]	; (8008264 <mainLoop+0x2f0>)
 8008168:	2201      	movs	r2, #1
 800816a:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 800816c:	4b46      	ldr	r3, [pc, #280]	; (8008288 <mainLoop+0x314>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d11c      	bne.n	80081ae <mainLoop+0x23a>
 8008174:	4b45      	ldr	r3, [pc, #276]	; (800828c <mainLoop+0x318>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	f083 0301 	eor.w	r3, r3, #1
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d015      	beq.n	80081ae <mainLoop+0x23a>
 8008182:	4b43      	ldr	r3, [pc, #268]	; (8008290 <mainLoop+0x31c>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d111      	bne.n	80081ae <mainLoop+0x23a>
			lcd_clear();
 800818a:	f7f8 fa17 	bl	80005bc <lcd_clear>
			HAL_Delay(10);
 800818e:	200a      	movs	r0, #10
 8008190:	f000 fd78 	bl	8008c84 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8008194:	4a3f      	ldr	r2, [pc, #252]	; (8008294 <mainLoop+0x320>)
 8008196:	2101      	movs	r1, #1
 8008198:	2001      	movs	r0, #1
 800819a:	f7f8 f9e3 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 800819e:	4a3e      	ldr	r2, [pc, #248]	; (8008298 <mainLoop+0x324>)
 80081a0:	2101      	movs	r1, #1
 80081a2:	2002      	movs	r0, #2
 80081a4:	f7f8 f9de 	bl	8000564 <lcd_print>
			mesajYazildi=1;
 80081a8:	4b38      	ldr	r3, [pc, #224]	; (800828c <mainLoop+0x318>)
 80081aa:	2201      	movs	r2, #1
 80081ac:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 80081ae:	4b36      	ldr	r3, [pc, #216]	; (8008288 <mainLoop+0x314>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d112      	bne.n	80081dc <mainLoop+0x268>
 80081b6:	2102      	movs	r1, #2
 80081b8:	481f      	ldr	r0, [pc, #124]	; (8008238 <mainLoop+0x2c4>)
 80081ba:	f001 fb33 	bl	8009824 <HAL_GPIO_ReadPin>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d10b      	bne.n	80081dc <mainLoop+0x268>
 80081c4:	2104      	movs	r1, #4
 80081c6:	481c      	ldr	r0, [pc, #112]	; (8008238 <mainLoop+0x2c4>)
 80081c8:	f001 fb2c 	bl	8009824 <HAL_GPIO_ReadPin>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d104      	bne.n	80081dc <mainLoop+0x268>
			menuGiris=1;
 80081d2:	4b2d      	ldr	r3, [pc, #180]	; (8008288 <mainLoop+0x314>)
 80081d4:	2201      	movs	r2, #1
 80081d6:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80081d8:	f7f8 f9f0 	bl	80005bc <lcd_clear>
		}

		if(menuGiris==1) {
 80081dc:	4b2a      	ldr	r3, [pc, #168]	; (8008288 <mainLoop+0x314>)
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d102      	bne.n	80081ea <mainLoop+0x276>
			menu(&hi2c1);
 80081e4:	481a      	ldr	r0, [pc, #104]	; (8008250 <mainLoop+0x2dc>)
 80081e6:	f7f9 f963 	bl	80014b0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80081ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80081ee:	4813      	ldr	r0, [pc, #76]	; (800823c <mainLoop+0x2c8>)
 80081f0:	f001 fb47 	bl	8009882 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80081f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80081f8:	4828      	ldr	r0, [pc, #160]	; (800829c <mainLoop+0x328>)
 80081fa:	f001 fb13 	bl	8009824 <HAL_GPIO_ReadPin>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <mainLoop+0x2a6>
 8008204:	4b26      	ldr	r3, [pc, #152]	; (80082a0 <mainLoop+0x32c>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	f083 0301 	eor.w	r3, r3, #1
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <mainLoop+0x2a6>
			stopVar=1;
 8008212:	4b24      	ldr	r3, [pc, #144]	; (80082a4 <mainLoop+0x330>)
 8008214:	2201      	movs	r2, #1
 8008216:	701a      	strb	r2, [r3, #0]
 8008218:	e002      	b.n	8008220 <mainLoop+0x2ac>
		} else {
			stopVar=0;
 800821a:	4b22      	ldr	r3, [pc, #136]	; (80082a4 <mainLoop+0x330>)
 800821c:	2200      	movs	r2, #0
 800821e:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8008220:	f7fd fff2 	bl	8006208 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8008224:	f7fe f824 	bl	8006270 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8008228:	f7fe f868 	bl	80062fc <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 800822c:	f7fe f8b8 	bl	80063a0 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8008230:	f7ff fc06 	bl	8007a40 <checkDemoModCalisma>
		checkLCDBacklight();
 8008234:	e6a1      	b.n	8007f7a <mainLoop+0x6>
 8008236:	bf00      	nop
 8008238:	40010800 	.word	0x40010800
 800823c:	40011000 	.word	0x40011000
 8008240:	20000c3b 	.word	0x20000c3b
 8008244:	20000bb4 	.word	0x20000bb4
 8008248:	20000bd0 	.word	0x20000bd0
 800824c:	20000c38 	.word	0x20000c38
 8008250:	20000a58 	.word	0x20000a58
 8008254:	20000b3c 	.word	0x20000b3c
 8008258:	20000c2d 	.word	0x20000c2d
 800825c:	0800d748 	.word	0x0800d748
 8008260:	0800d75c 	.word	0x0800d75c
 8008264:	20000c39 	.word	0x20000c39
 8008268:	20000c3a 	.word	0x20000c3a
 800826c:	0800d770 	.word	0x0800d770
 8008270:	0800d784 	.word	0x0800d784
 8008274:	0800d798 	.word	0x0800d798
 8008278:	0800d7ac 	.word	0x0800d7ac
 800827c:	0800d7c0 	.word	0x0800d7c0
 8008280:	0800d7d4 	.word	0x0800d7d4
 8008284:	0800d7e8 	.word	0x0800d7e8
 8008288:	20000c29 	.word	0x20000c29
 800828c:	20000c40 	.word	0x20000c40
 8008290:	20000c2a 	.word	0x20000c2a
 8008294:	0800d6ac 	.word	0x0800d6ac
 8008298:	0800d6c0 	.word	0x0800d6c0
 800829c:	40010c00 	.word	0x40010c00
 80082a0:	20000c61 	.word	0x20000c61
 80082a4:	20000c5e 	.word	0x20000c5e

080082a8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80082b0:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3301      	adds	r3, #1
 80082b6:	4a03      	ldr	r2, [pc, #12]	; (80082c4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80082b8:	6013      	str	r3, [r2, #0]
}
 80082ba:	bf00      	nop
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	bc80      	pop	{r7}
 80082c2:	4770      	bx	lr
 80082c4:	20000bb4 	.word	0x20000bb4

080082c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80082cc:	f000 fc78 	bl	8008bc0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80082d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80082d4:	f000 fcd6 	bl	8008c84 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80082d8:	f000 f8a8 	bl	800842c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80082dc:	f000 f9ca 	bl	8008674 <MX_GPIO_Init>
  MX_CAN_Init();
 80082e0:	f000 f8ea 	bl	80084b8 <MX_CAN_Init>
  MX_I2C1_Init();
 80082e4:	f000 f91c 	bl	8008520 <MX_I2C1_Init>
  MX_TIM1_Init();
 80082e8:	f000 f948 	bl	800857c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80082ec:	f000 f998 	bl	8008620 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80082f0:	2201      	movs	r2, #1
 80082f2:	2140      	movs	r1, #64	; 0x40
 80082f4:	4843      	ldr	r0, [pc, #268]	; (8008404 <main+0x13c>)
 80082f6:	f001 faac 	bl	8009852 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80082fa:	2201      	movs	r2, #1
 80082fc:	2180      	movs	r1, #128	; 0x80
 80082fe:	4841      	ldr	r0, [pc, #260]	; (8008404 <main+0x13c>)
 8008300:	f001 faa7 	bl	8009852 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008304:	200a      	movs	r0, #10
 8008306:	f000 fcbd 	bl	8008c84 <HAL_Delay>
  lcd_init();
 800830a:	f7f8 f8f9 	bl	8000500 <lcd_init>
  HAL_Delay(10);
 800830e:	200a      	movs	r0, #10
 8008310:	f000 fcb8 	bl	8008c84 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008314:	483c      	ldr	r0, [pc, #240]	; (8008408 <main+0x140>)
 8008316:	f003 f94f 	bl	800b5b8 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800831a:	bf00      	nop
 800831c:	483b      	ldr	r0, [pc, #236]	; (800840c <main+0x144>)
 800831e:	f002 f8aa 	bl	800a476 <HAL_I2C_GetError>
 8008322:	4603      	mov	r3, r0
 8008324:	2b04      	cmp	r3, #4
 8008326:	d0f9      	beq.n	800831c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008328:	bf00      	nop
 800832a:	4838      	ldr	r0, [pc, #224]	; (800840c <main+0x144>)
 800832c:	f002 f896 	bl	800a45c <HAL_I2C_GetState>
 8008330:	4603      	mov	r3, r0
 8008332:	2b20      	cmp	r3, #32
 8008334:	d1f9      	bne.n	800832a <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008336:	2200      	movs	r2, #0
 8008338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800833c:	4831      	ldr	r0, [pc, #196]	; (8008404 <main+0x13c>)
 800833e:	f001 fa88 	bl	8009852 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008342:	2200      	movs	r2, #0
 8008344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008348:	482e      	ldr	r0, [pc, #184]	; (8008404 <main+0x13c>)
 800834a:	f001 fa82 	bl	8009852 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800834e:	2200      	movs	r2, #0
 8008350:	2104      	movs	r1, #4
 8008352:	482c      	ldr	r0, [pc, #176]	; (8008404 <main+0x13c>)
 8008354:	f001 fa7d 	bl	8009852 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008358:	2200      	movs	r2, #0
 800835a:	2102      	movs	r1, #2
 800835c:	4829      	ldr	r0, [pc, #164]	; (8008404 <main+0x13c>)
 800835e:	f001 fa78 	bl	8009852 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008362:	2200      	movs	r2, #0
 8008364:	2101      	movs	r1, #1
 8008366:	4827      	ldr	r0, [pc, #156]	; (8008404 <main+0x13c>)
 8008368:	f001 fa73 	bl	8009852 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800836c:	2200      	movs	r2, #0
 800836e:	2120      	movs	r1, #32
 8008370:	4827      	ldr	r0, [pc, #156]	; (8008410 <main+0x148>)
 8008372:	f001 fa6e 	bl	8009852 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008376:	2200      	movs	r2, #0
 8008378:	2110      	movs	r1, #16
 800837a:	4825      	ldr	r0, [pc, #148]	; (8008410 <main+0x148>)
 800837c:	f001 fa69 	bl	8009852 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008380:	2200      	movs	r2, #0
 8008382:	2180      	movs	r1, #128	; 0x80
 8008384:	4823      	ldr	r0, [pc, #140]	; (8008414 <main+0x14c>)
 8008386:	f001 fa64 	bl	8009852 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800838a:	2200      	movs	r2, #0
 800838c:	2140      	movs	r1, #64	; 0x40
 800838e:	4821      	ldr	r0, [pc, #132]	; (8008414 <main+0x14c>)
 8008390:	f001 fa5f 	bl	8009852 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008394:	2200      	movs	r2, #0
 8008396:	2120      	movs	r1, #32
 8008398:	481e      	ldr	r0, [pc, #120]	; (8008414 <main+0x14c>)
 800839a:	f001 fa5a 	bl	8009852 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800839e:	2200      	movs	r2, #0
 80083a0:	2110      	movs	r1, #16
 80083a2:	481c      	ldr	r0, [pc, #112]	; (8008414 <main+0x14c>)
 80083a4:	f001 fa55 	bl	8009852 <HAL_GPIO_WritePin>

  i2cTest();
 80083a8:	f7fd fe60 	bl	800606c <i2cTest>
  HAL_Delay(100);
 80083ac:	2064      	movs	r0, #100	; 0x64
 80083ae:	f000 fc69 	bl	8008c84 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80083b2:	4a19      	ldr	r2, [pc, #100]	; (8008418 <main+0x150>)
 80083b4:	2101      	movs	r1, #1
 80083b6:	2001      	movs	r0, #1
 80083b8:	f7f8 f8d4 	bl	8000564 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80083bc:	4a17      	ldr	r2, [pc, #92]	; (800841c <main+0x154>)
 80083be:	2101      	movs	r1, #1
 80083c0:	2002      	movs	r0, #2
 80083c2:	f7f8 f8cf 	bl	8000564 <lcd_print>
  HAL_Delay(1000);
 80083c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083ca:	f000 fc5b 	bl	8008c84 <HAL_Delay>
  lcd_clear();
 80083ce:	f7f8 f8f5 	bl	80005bc <lcd_clear>

  eepromKontrol(0);
 80083d2:	2000      	movs	r0, #0
 80083d4:	f7fd fab0 	bl	8005938 <eepromKontrol>
  HAL_Delay(200);
 80083d8:	20c8      	movs	r0, #200	; 0xc8
 80083da:	f000 fc53 	bl	8008c84 <HAL_Delay>

  lcd_clear();
 80083de:	f7f8 f8ed 	bl	80005bc <lcd_clear>
  HAL_Delay(200);
 80083e2:	20c8      	movs	r0, #200	; 0xc8
 80083e4:	f000 fc4e 	bl	8008c84 <HAL_Delay>

  backLightTimer = millis;
 80083e8:	4b0d      	ldr	r3, [pc, #52]	; (8008420 <main+0x158>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a0d      	ldr	r2, [pc, #52]	; (8008424 <main+0x15c>)
 80083ee:	6013      	str	r3, [r2, #0]

  //ESP8266_Init(&huart1, "H.İ.D.", "asdasd0099123");

  if(machineID[11] == '\0') {
 80083f0:	4b0d      	ldr	r3, [pc, #52]	; (8008428 <main+0x160>)
 80083f2:	7adb      	ldrb	r3, [r3, #11]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d102      	bne.n	80083fe <main+0x136>
	  takeMachineID(0);
 80083f8:	2000      	movs	r0, #0
 80083fa:	f7f8 fadd 	bl	80009b8 <takeMachineID>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80083fe:	f7ff fdb9 	bl	8007f74 <mainLoop>
 8008402:	e7fc      	b.n	80083fe <main+0x136>
 8008404:	40010c00 	.word	0x40010c00
 8008408:	20000aac 	.word	0x20000aac
 800840c:	20000a58 	.word	0x20000a58
 8008410:	40011000 	.word	0x40011000
 8008414:	40010800 	.word	0x40010800
 8008418:	0800d7fc 	.word	0x0800d7fc
 800841c:	0800d810 	.word	0x0800d810
 8008420:	20000bb4 	.word	0x20000bb4
 8008424:	20000bd0 	.word	0x20000bd0
 8008428:	20000bd4 	.word	0x20000bd4

0800842c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b090      	sub	sp, #64	; 0x40
 8008430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008432:	f107 0318 	add.w	r3, r7, #24
 8008436:	2228      	movs	r2, #40	; 0x28
 8008438:	2100      	movs	r1, #0
 800843a:	4618      	mov	r0, r3
 800843c:	f004 fae0 	bl	800ca00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008440:	1d3b      	adds	r3, r7, #4
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	605a      	str	r2, [r3, #4]
 8008448:	609a      	str	r2, [r3, #8]
 800844a:	60da      	str	r2, [r3, #12]
 800844c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800844e:	2301      	movs	r3, #1
 8008450:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008456:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008458:	2300      	movs	r3, #0
 800845a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800845c:	2301      	movs	r3, #1
 800845e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008460:	2302      	movs	r3, #2
 8008462:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008468:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800846a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800846e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008470:	f107 0318 	add.w	r3, r7, #24
 8008474:	4618      	mov	r0, r3
 8008476:	f002 fc3f 	bl	800acf8 <HAL_RCC_OscConfig>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008480:	f000 f9a2 	bl	80087c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008484:	230f      	movs	r3, #15
 8008486:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008488:	2302      	movs	r3, #2
 800848a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008496:	2300      	movs	r3, #0
 8008498:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800849a:	1d3b      	adds	r3, r7, #4
 800849c:	2102      	movs	r1, #2
 800849e:	4618      	mov	r0, r3
 80084a0:	f002 feac 	bl	800b1fc <HAL_RCC_ClockConfig>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80084aa:	f000 f98d 	bl	80087c8 <Error_Handler>
  }
}
 80084ae:	bf00      	nop
 80084b0:	3740      	adds	r7, #64	; 0x40
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
	...

080084b8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80084bc:	4b16      	ldr	r3, [pc, #88]	; (8008518 <MX_CAN_Init+0x60>)
 80084be:	4a17      	ldr	r2, [pc, #92]	; (800851c <MX_CAN_Init+0x64>)
 80084c0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80084c2:	4b15      	ldr	r3, [pc, #84]	; (8008518 <MX_CAN_Init+0x60>)
 80084c4:	2210      	movs	r2, #16
 80084c6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80084c8:	4b13      	ldr	r3, [pc, #76]	; (8008518 <MX_CAN_Init+0x60>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80084ce:	4b12      	ldr	r3, [pc, #72]	; (8008518 <MX_CAN_Init+0x60>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80084d4:	4b10      	ldr	r3, [pc, #64]	; (8008518 <MX_CAN_Init+0x60>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80084da:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <MX_CAN_Init+0x60>)
 80084dc:	2200      	movs	r2, #0
 80084de:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80084e0:	4b0d      	ldr	r3, [pc, #52]	; (8008518 <MX_CAN_Init+0x60>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <MX_CAN_Init+0x60>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80084ec:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <MX_CAN_Init+0x60>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80084f2:	4b09      	ldr	r3, [pc, #36]	; (8008518 <MX_CAN_Init+0x60>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80084f8:	4b07      	ldr	r3, [pc, #28]	; (8008518 <MX_CAN_Init+0x60>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80084fe:	4b06      	ldr	r3, [pc, #24]	; (8008518 <MX_CAN_Init+0x60>)
 8008500:	2200      	movs	r2, #0
 8008502:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008504:	4804      	ldr	r0, [pc, #16]	; (8008518 <MX_CAN_Init+0x60>)
 8008506:	f000 fbe1 	bl	8008ccc <HAL_CAN_Init>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008510:	f000 f95a 	bl	80087c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008514:	bf00      	nop
 8008516:	bd80      	pop	{r7, pc}
 8008518:	20000a30 	.word	0x20000a30
 800851c:	40006400 	.word	0x40006400

08008520 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008524:	4b12      	ldr	r3, [pc, #72]	; (8008570 <MX_I2C1_Init+0x50>)
 8008526:	4a13      	ldr	r2, [pc, #76]	; (8008574 <MX_I2C1_Init+0x54>)
 8008528:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800852a:	4b11      	ldr	r3, [pc, #68]	; (8008570 <MX_I2C1_Init+0x50>)
 800852c:	4a12      	ldr	r2, [pc, #72]	; (8008578 <MX_I2C1_Init+0x58>)
 800852e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008530:	4b0f      	ldr	r3, [pc, #60]	; (8008570 <MX_I2C1_Init+0x50>)
 8008532:	2200      	movs	r2, #0
 8008534:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008536:	4b0e      	ldr	r3, [pc, #56]	; (8008570 <MX_I2C1_Init+0x50>)
 8008538:	2200      	movs	r2, #0
 800853a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800853c:	4b0c      	ldr	r3, [pc, #48]	; (8008570 <MX_I2C1_Init+0x50>)
 800853e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008542:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008544:	4b0a      	ldr	r3, [pc, #40]	; (8008570 <MX_I2C1_Init+0x50>)
 8008546:	2200      	movs	r2, #0
 8008548:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800854a:	4b09      	ldr	r3, [pc, #36]	; (8008570 <MX_I2C1_Init+0x50>)
 800854c:	2200      	movs	r2, #0
 800854e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008550:	4b07      	ldr	r3, [pc, #28]	; (8008570 <MX_I2C1_Init+0x50>)
 8008552:	2200      	movs	r2, #0
 8008554:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008556:	4b06      	ldr	r3, [pc, #24]	; (8008570 <MX_I2C1_Init+0x50>)
 8008558:	2200      	movs	r2, #0
 800855a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800855c:	4804      	ldr	r0, [pc, #16]	; (8008570 <MX_I2C1_Init+0x50>)
 800855e:	f001 f9a9 	bl	80098b4 <HAL_I2C_Init>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008568:	f000 f92e 	bl	80087c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800856c:	bf00      	nop
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20000a58 	.word	0x20000a58
 8008574:	40005400 	.word	0x40005400
 8008578:	00061a80 	.word	0x00061a80

0800857c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008582:	f107 0308 	add.w	r3, r7, #8
 8008586:	2200      	movs	r2, #0
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	605a      	str	r2, [r3, #4]
 800858c:	609a      	str	r2, [r3, #8]
 800858e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008590:	463b      	mov	r3, r7
 8008592:	2200      	movs	r2, #0
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008598:	4b1f      	ldr	r3, [pc, #124]	; (8008618 <MX_TIM1_Init+0x9c>)
 800859a:	4a20      	ldr	r2, [pc, #128]	; (800861c <MX_TIM1_Init+0xa0>)
 800859c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800859e:	4b1e      	ldr	r3, [pc, #120]	; (8008618 <MX_TIM1_Init+0x9c>)
 80085a0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80085a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085a6:	4b1c      	ldr	r3, [pc, #112]	; (8008618 <MX_TIM1_Init+0x9c>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80085ac:	4b1a      	ldr	r3, [pc, #104]	; (8008618 <MX_TIM1_Init+0x9c>)
 80085ae:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80085b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085b4:	4b18      	ldr	r3, [pc, #96]	; (8008618 <MX_TIM1_Init+0x9c>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80085ba:	4b17      	ldr	r3, [pc, #92]	; (8008618 <MX_TIM1_Init+0x9c>)
 80085bc:	2200      	movs	r2, #0
 80085be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085c0:	4b15      	ldr	r3, [pc, #84]	; (8008618 <MX_TIM1_Init+0x9c>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80085c6:	4814      	ldr	r0, [pc, #80]	; (8008618 <MX_TIM1_Init+0x9c>)
 80085c8:	f002 ffa6 	bl	800b518 <HAL_TIM_Base_Init>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80085d2:	f000 f8f9 	bl	80087c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80085dc:	f107 0308 	add.w	r3, r7, #8
 80085e0:	4619      	mov	r1, r3
 80085e2:	480d      	ldr	r0, [pc, #52]	; (8008618 <MX_TIM1_Init+0x9c>)
 80085e4:	f003 f950 	bl	800b888 <HAL_TIM_ConfigClockSource>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80085ee:	f000 f8eb 	bl	80087c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80085f2:	2300      	movs	r3, #0
 80085f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085f6:	2300      	movs	r3, #0
 80085f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80085fa:	463b      	mov	r3, r7
 80085fc:	4619      	mov	r1, r3
 80085fe:	4806      	ldr	r0, [pc, #24]	; (8008618 <MX_TIM1_Init+0x9c>)
 8008600:	f003 fb3e 	bl	800bc80 <HAL_TIMEx_MasterConfigSynchronization>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800860a:	f000 f8dd 	bl	80087c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800860e:	bf00      	nop
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000aac 	.word	0x20000aac
 800861c:	40012c00 	.word	0x40012c00

08008620 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008624:	4b11      	ldr	r3, [pc, #68]	; (800866c <MX_USART1_UART_Init+0x4c>)
 8008626:	4a12      	ldr	r2, [pc, #72]	; (8008670 <MX_USART1_UART_Init+0x50>)
 8008628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800862a:	4b10      	ldr	r3, [pc, #64]	; (800866c <MX_USART1_UART_Init+0x4c>)
 800862c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008632:	4b0e      	ldr	r3, [pc, #56]	; (800866c <MX_USART1_UART_Init+0x4c>)
 8008634:	2200      	movs	r2, #0
 8008636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008638:	4b0c      	ldr	r3, [pc, #48]	; (800866c <MX_USART1_UART_Init+0x4c>)
 800863a:	2200      	movs	r2, #0
 800863c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800863e:	4b0b      	ldr	r3, [pc, #44]	; (800866c <MX_USART1_UART_Init+0x4c>)
 8008640:	2200      	movs	r2, #0
 8008642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008644:	4b09      	ldr	r3, [pc, #36]	; (800866c <MX_USART1_UART_Init+0x4c>)
 8008646:	220c      	movs	r2, #12
 8008648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800864a:	4b08      	ldr	r3, [pc, #32]	; (800866c <MX_USART1_UART_Init+0x4c>)
 800864c:	2200      	movs	r2, #0
 800864e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008650:	4b06      	ldr	r3, [pc, #24]	; (800866c <MX_USART1_UART_Init+0x4c>)
 8008652:	2200      	movs	r2, #0
 8008654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008656:	4805      	ldr	r0, [pc, #20]	; (800866c <MX_USART1_UART_Init+0x4c>)
 8008658:	f003 fb90 	bl	800bd7c <HAL_UART_Init>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008662:	f000 f8b1 	bl	80087c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008666:	bf00      	nop
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000af4 	.word	0x20000af4
 8008670:	40013800 	.word	0x40013800

08008674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b088      	sub	sp, #32
 8008678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800867a:	f107 0310 	add.w	r3, r7, #16
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	605a      	str	r2, [r3, #4]
 8008684:	609a      	str	r2, [r3, #8]
 8008686:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008688:	4b4b      	ldr	r3, [pc, #300]	; (80087b8 <MX_GPIO_Init+0x144>)
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	4a4a      	ldr	r2, [pc, #296]	; (80087b8 <MX_GPIO_Init+0x144>)
 800868e:	f043 0310 	orr.w	r3, r3, #16
 8008692:	6193      	str	r3, [r2, #24]
 8008694:	4b48      	ldr	r3, [pc, #288]	; (80087b8 <MX_GPIO_Init+0x144>)
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	f003 0310 	and.w	r3, r3, #16
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80086a0:	4b45      	ldr	r3, [pc, #276]	; (80087b8 <MX_GPIO_Init+0x144>)
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	4a44      	ldr	r2, [pc, #272]	; (80087b8 <MX_GPIO_Init+0x144>)
 80086a6:	f043 0320 	orr.w	r3, r3, #32
 80086aa:	6193      	str	r3, [r2, #24]
 80086ac:	4b42      	ldr	r3, [pc, #264]	; (80087b8 <MX_GPIO_Init+0x144>)
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	f003 0320 	and.w	r3, r3, #32
 80086b4:	60bb      	str	r3, [r7, #8]
 80086b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80086b8:	4b3f      	ldr	r3, [pc, #252]	; (80087b8 <MX_GPIO_Init+0x144>)
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	4a3e      	ldr	r2, [pc, #248]	; (80087b8 <MX_GPIO_Init+0x144>)
 80086be:	f043 0304 	orr.w	r3, r3, #4
 80086c2:	6193      	str	r3, [r2, #24]
 80086c4:	4b3c      	ldr	r3, [pc, #240]	; (80087b8 <MX_GPIO_Init+0x144>)
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	f003 0304 	and.w	r3, r3, #4
 80086cc:	607b      	str	r3, [r7, #4]
 80086ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80086d0:	4b39      	ldr	r3, [pc, #228]	; (80087b8 <MX_GPIO_Init+0x144>)
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	4a38      	ldr	r2, [pc, #224]	; (80087b8 <MX_GPIO_Init+0x144>)
 80086d6:	f043 0308 	orr.w	r3, r3, #8
 80086da:	6193      	str	r3, [r2, #24]
 80086dc:	4b36      	ldr	r3, [pc, #216]	; (80087b8 <MX_GPIO_Init+0x144>)
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	f003 0308 	and.w	r3, r3, #8
 80086e4:	603b      	str	r3, [r7, #0]
 80086e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80086e8:	2200      	movs	r2, #0
 80086ea:	21f0      	movs	r1, #240	; 0xf0
 80086ec:	4833      	ldr	r0, [pc, #204]	; (80087bc <MX_GPIO_Init+0x148>)
 80086ee:	f001 f8b0 	bl	8009852 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80086f2:	2200      	movs	r2, #0
 80086f4:	f241 0130 	movw	r1, #4144	; 0x1030
 80086f8:	4831      	ldr	r0, [pc, #196]	; (80087c0 <MX_GPIO_Init+0x14c>)
 80086fa:	f001 f8aa 	bl	8009852 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80086fe:	2200      	movs	r2, #0
 8008700:	f640 4107 	movw	r1, #3079	; 0xc07
 8008704:	482f      	ldr	r0, [pc, #188]	; (80087c4 <MX_GPIO_Init+0x150>)
 8008706:	f001 f8a4 	bl	8009852 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800870a:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800870e:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008710:	2300      	movs	r3, #0
 8008712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008714:	2300      	movs	r3, #0
 8008716:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008718:	f107 0310 	add.w	r3, r7, #16
 800871c:	4619      	mov	r1, r3
 800871e:	4828      	ldr	r0, [pc, #160]	; (80087c0 <MX_GPIO_Init+0x14c>)
 8008720:	f000 fe20 	bl	8009364 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008724:	f248 130f 	movw	r3, #33039	; 0x810f
 8008728:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800872a:	2300      	movs	r3, #0
 800872c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800872e:	2300      	movs	r3, #0
 8008730:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008732:	f107 0310 	add.w	r3, r7, #16
 8008736:	4619      	mov	r1, r3
 8008738:	4820      	ldr	r0, [pc, #128]	; (80087bc <MX_GPIO_Init+0x148>)
 800873a:	f000 fe13 	bl	8009364 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800873e:	23f0      	movs	r3, #240	; 0xf0
 8008740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008742:	2301      	movs	r3, #1
 8008744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008746:	2300      	movs	r3, #0
 8008748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800874a:	2302      	movs	r3, #2
 800874c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800874e:	f107 0310 	add.w	r3, r7, #16
 8008752:	4619      	mov	r1, r3
 8008754:	4819      	ldr	r0, [pc, #100]	; (80087bc <MX_GPIO_Init+0x148>)
 8008756:	f000 fe05 	bl	8009364 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800875a:	f241 0330 	movw	r3, #4144	; 0x1030
 800875e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008760:	2301      	movs	r3, #1
 8008762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008764:	2300      	movs	r3, #0
 8008766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008768:	2302      	movs	r3, #2
 800876a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800876c:	f107 0310 	add.w	r3, r7, #16
 8008770:	4619      	mov	r1, r3
 8008772:	4813      	ldr	r0, [pc, #76]	; (80087c0 <MX_GPIO_Init+0x14c>)
 8008774:	f000 fdf6 	bl	8009364 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008778:	f640 4307 	movw	r3, #3079	; 0xc07
 800877c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800877e:	2301      	movs	r3, #1
 8008780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008782:	2300      	movs	r3, #0
 8008784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008786:	2302      	movs	r3, #2
 8008788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800878a:	f107 0310 	add.w	r3, r7, #16
 800878e:	4619      	mov	r1, r3
 8008790:	480c      	ldr	r0, [pc, #48]	; (80087c4 <MX_GPIO_Init+0x150>)
 8008792:	f000 fde7 	bl	8009364 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008796:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800879a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800879c:	2300      	movs	r3, #0
 800879e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087a4:	f107 0310 	add.w	r3, r7, #16
 80087a8:	4619      	mov	r1, r3
 80087aa:	4806      	ldr	r0, [pc, #24]	; (80087c4 <MX_GPIO_Init+0x150>)
 80087ac:	f000 fdda 	bl	8009364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80087b0:	bf00      	nop
 80087b2:	3720      	adds	r7, #32
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	40021000 	.word	0x40021000
 80087bc:	40010800 	.word	0x40010800
 80087c0:	40011000 	.word	0x40011000
 80087c4:	40010c00 	.word	0x40010c00

080087c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80087c8:	b480      	push	{r7}
 80087ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80087cc:	bf00      	nop
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr

080087d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80087da:	4b15      	ldr	r3, [pc, #84]	; (8008830 <HAL_MspInit+0x5c>)
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	4a14      	ldr	r2, [pc, #80]	; (8008830 <HAL_MspInit+0x5c>)
 80087e0:	f043 0301 	orr.w	r3, r3, #1
 80087e4:	6193      	str	r3, [r2, #24]
 80087e6:	4b12      	ldr	r3, [pc, #72]	; (8008830 <HAL_MspInit+0x5c>)
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	60bb      	str	r3, [r7, #8]
 80087f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80087f2:	4b0f      	ldr	r3, [pc, #60]	; (8008830 <HAL_MspInit+0x5c>)
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	4a0e      	ldr	r2, [pc, #56]	; (8008830 <HAL_MspInit+0x5c>)
 80087f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087fc:	61d3      	str	r3, [r2, #28]
 80087fe:	4b0c      	ldr	r3, [pc, #48]	; (8008830 <HAL_MspInit+0x5c>)
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008806:	607b      	str	r3, [r7, #4]
 8008808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800880a:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <HAL_MspInit+0x60>)
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800881e:	60fb      	str	r3, [r7, #12]
 8008820:	4a04      	ldr	r2, [pc, #16]	; (8008834 <HAL_MspInit+0x60>)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008826:	bf00      	nop
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	bc80      	pop	{r7}
 800882e:	4770      	bx	lr
 8008830:	40021000 	.word	0x40021000
 8008834:	40010000 	.word	0x40010000

08008838 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b088      	sub	sp, #32
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008840:	f107 0310 	add.w	r3, r7, #16
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	605a      	str	r2, [r3, #4]
 800884a:	609a      	str	r2, [r3, #8]
 800884c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a1c      	ldr	r2, [pc, #112]	; (80088c4 <HAL_CAN_MspInit+0x8c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d131      	bne.n	80088bc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008858:	4b1b      	ldr	r3, [pc, #108]	; (80088c8 <HAL_CAN_MspInit+0x90>)
 800885a:	69db      	ldr	r3, [r3, #28]
 800885c:	4a1a      	ldr	r2, [pc, #104]	; (80088c8 <HAL_CAN_MspInit+0x90>)
 800885e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008862:	61d3      	str	r3, [r2, #28]
 8008864:	4b18      	ldr	r3, [pc, #96]	; (80088c8 <HAL_CAN_MspInit+0x90>)
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008870:	4b15      	ldr	r3, [pc, #84]	; (80088c8 <HAL_CAN_MspInit+0x90>)
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	4a14      	ldr	r2, [pc, #80]	; (80088c8 <HAL_CAN_MspInit+0x90>)
 8008876:	f043 0304 	orr.w	r3, r3, #4
 800887a:	6193      	str	r3, [r2, #24]
 800887c:	4b12      	ldr	r3, [pc, #72]	; (80088c8 <HAL_CAN_MspInit+0x90>)
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	f003 0304 	and.w	r3, r3, #4
 8008884:	60bb      	str	r3, [r7, #8]
 8008886:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800888c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800888e:	2300      	movs	r3, #0
 8008890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008892:	2300      	movs	r3, #0
 8008894:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008896:	f107 0310 	add.w	r3, r7, #16
 800889a:	4619      	mov	r1, r3
 800889c:	480b      	ldr	r0, [pc, #44]	; (80088cc <HAL_CAN_MspInit+0x94>)
 800889e:	f000 fd61 	bl	8009364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80088a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a8:	2302      	movs	r3, #2
 80088aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80088ac:	2303      	movs	r3, #3
 80088ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088b0:	f107 0310 	add.w	r3, r7, #16
 80088b4:	4619      	mov	r1, r3
 80088b6:	4805      	ldr	r0, [pc, #20]	; (80088cc <HAL_CAN_MspInit+0x94>)
 80088b8:	f000 fd54 	bl	8009364 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80088bc:	bf00      	nop
 80088be:	3720      	adds	r7, #32
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	40006400 	.word	0x40006400
 80088c8:	40021000 	.word	0x40021000
 80088cc:	40010800 	.word	0x40010800

080088d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088d8:	f107 0310 	add.w	r3, r7, #16
 80088dc:	2200      	movs	r2, #0
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	605a      	str	r2, [r3, #4]
 80088e2:	609a      	str	r2, [r3, #8]
 80088e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a15      	ldr	r2, [pc, #84]	; (8008940 <HAL_I2C_MspInit+0x70>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d123      	bne.n	8008938 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80088f0:	4b14      	ldr	r3, [pc, #80]	; (8008944 <HAL_I2C_MspInit+0x74>)
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	4a13      	ldr	r2, [pc, #76]	; (8008944 <HAL_I2C_MspInit+0x74>)
 80088f6:	f043 0308 	orr.w	r3, r3, #8
 80088fa:	6193      	str	r3, [r2, #24]
 80088fc:	4b11      	ldr	r3, [pc, #68]	; (8008944 <HAL_I2C_MspInit+0x74>)
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	f003 0308 	and.w	r3, r3, #8
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008908:	23c0      	movs	r3, #192	; 0xc0
 800890a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800890c:	2312      	movs	r3, #18
 800890e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008910:	2303      	movs	r3, #3
 8008912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008914:	f107 0310 	add.w	r3, r7, #16
 8008918:	4619      	mov	r1, r3
 800891a:	480b      	ldr	r0, [pc, #44]	; (8008948 <HAL_I2C_MspInit+0x78>)
 800891c:	f000 fd22 	bl	8009364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008920:	4b08      	ldr	r3, [pc, #32]	; (8008944 <HAL_I2C_MspInit+0x74>)
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	4a07      	ldr	r2, [pc, #28]	; (8008944 <HAL_I2C_MspInit+0x74>)
 8008926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800892a:	61d3      	str	r3, [r2, #28]
 800892c:	4b05      	ldr	r3, [pc, #20]	; (8008944 <HAL_I2C_MspInit+0x74>)
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008934:	60bb      	str	r3, [r7, #8]
 8008936:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008938:	bf00      	nop
 800893a:	3720      	adds	r7, #32
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	40005400 	.word	0x40005400
 8008944:	40021000 	.word	0x40021000
 8008948:	40010c00 	.word	0x40010c00

0800894c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a0a      	ldr	r2, [pc, #40]	; (8008984 <HAL_I2C_MspDeInit+0x38>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d10d      	bne.n	800897a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800895e:	4b0a      	ldr	r3, [pc, #40]	; (8008988 <HAL_I2C_MspDeInit+0x3c>)
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	4a09      	ldr	r2, [pc, #36]	; (8008988 <HAL_I2C_MspDeInit+0x3c>)
 8008964:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008968:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800896a:	2140      	movs	r1, #64	; 0x40
 800896c:	4807      	ldr	r0, [pc, #28]	; (800898c <HAL_I2C_MspDeInit+0x40>)
 800896e:	f000 fe8d 	bl	800968c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008972:	2180      	movs	r1, #128	; 0x80
 8008974:	4805      	ldr	r0, [pc, #20]	; (800898c <HAL_I2C_MspDeInit+0x40>)
 8008976:	f000 fe89 	bl	800968c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	40005400 	.word	0x40005400
 8008988:	40021000 	.word	0x40021000
 800898c:	40010c00 	.word	0x40010c00

08008990 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a0d      	ldr	r2, [pc, #52]	; (80089d4 <HAL_TIM_Base_MspInit+0x44>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d113      	bne.n	80089ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80089a2:	4b0d      	ldr	r3, [pc, #52]	; (80089d8 <HAL_TIM_Base_MspInit+0x48>)
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	4a0c      	ldr	r2, [pc, #48]	; (80089d8 <HAL_TIM_Base_MspInit+0x48>)
 80089a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80089ac:	6193      	str	r3, [r2, #24]
 80089ae:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <HAL_TIM_Base_MspInit+0x48>)
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80089ba:	2200      	movs	r2, #0
 80089bc:	2100      	movs	r1, #0
 80089be:	2019      	movs	r0, #25
 80089c0:	f000 fb57 	bl	8009072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80089c4:	2019      	movs	r0, #25
 80089c6:	f000 fb70 	bl	80090aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80089ca:	bf00      	nop
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	40012c00 	.word	0x40012c00
 80089d8:	40021000 	.word	0x40021000

080089dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089e4:	f107 0310 	add.w	r3, r7, #16
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	605a      	str	r2, [r3, #4]
 80089ee:	609a      	str	r2, [r3, #8]
 80089f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a20      	ldr	r2, [pc, #128]	; (8008a78 <HAL_UART_MspInit+0x9c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d139      	bne.n	8008a70 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80089fc:	4b1f      	ldr	r3, [pc, #124]	; (8008a7c <HAL_UART_MspInit+0xa0>)
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	4a1e      	ldr	r2, [pc, #120]	; (8008a7c <HAL_UART_MspInit+0xa0>)
 8008a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a06:	6193      	str	r3, [r2, #24]
 8008a08:	4b1c      	ldr	r3, [pc, #112]	; (8008a7c <HAL_UART_MspInit+0xa0>)
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a10:	60fb      	str	r3, [r7, #12]
 8008a12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a14:	4b19      	ldr	r3, [pc, #100]	; (8008a7c <HAL_UART_MspInit+0xa0>)
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	4a18      	ldr	r2, [pc, #96]	; (8008a7c <HAL_UART_MspInit+0xa0>)
 8008a1a:	f043 0304 	orr.w	r3, r3, #4
 8008a1e:	6193      	str	r3, [r2, #24]
 8008a20:	4b16      	ldr	r3, [pc, #88]	; (8008a7c <HAL_UART_MspInit+0xa0>)
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	f003 0304 	and.w	r3, r3, #4
 8008a28:	60bb      	str	r3, [r7, #8]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a32:	2302      	movs	r3, #2
 8008a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008a36:	2303      	movs	r3, #3
 8008a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a3a:	f107 0310 	add.w	r3, r7, #16
 8008a3e:	4619      	mov	r1, r3
 8008a40:	480f      	ldr	r0, [pc, #60]	; (8008a80 <HAL_UART_MspInit+0xa4>)
 8008a42:	f000 fc8f 	bl	8009364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a50:	2300      	movs	r3, #0
 8008a52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a54:	f107 0310 	add.w	r3, r7, #16
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4809      	ldr	r0, [pc, #36]	; (8008a80 <HAL_UART_MspInit+0xa4>)
 8008a5c:	f000 fc82 	bl	8009364 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008a60:	2200      	movs	r2, #0
 8008a62:	2100      	movs	r1, #0
 8008a64:	2025      	movs	r0, #37	; 0x25
 8008a66:	f000 fb04 	bl	8009072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008a6a:	2025      	movs	r0, #37	; 0x25
 8008a6c:	f000 fb1d 	bl	80090aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008a70:	bf00      	nop
 8008a72:	3720      	adds	r7, #32
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	40013800 	.word	0x40013800
 8008a7c:	40021000 	.word	0x40021000
 8008a80:	40010800 	.word	0x40010800

08008a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008a88:	e7fe      	b.n	8008a88 <NMI_Handler+0x4>

08008a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008a8e:	e7fe      	b.n	8008a8e <HardFault_Handler+0x4>

08008a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a94:	e7fe      	b.n	8008a94 <MemManage_Handler+0x4>

08008a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a96:	b480      	push	{r7}
 8008a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a9a:	e7fe      	b.n	8008a9a <BusFault_Handler+0x4>

08008a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008aa0:	e7fe      	b.n	8008aa0 <UsageFault_Handler+0x4>

08008aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008aa6:	bf00      	nop
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bc80      	pop	{r7}
 8008aac:	4770      	bx	lr

08008aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ab2:	bf00      	nop
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bc80      	pop	{r7}
 8008ab8:	4770      	bx	lr

08008aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008aba:	b480      	push	{r7}
 8008abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008abe:	bf00      	nop
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bc80      	pop	{r7}
 8008ac4:	4770      	bx	lr

08008ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008aca:	f000 f8bf 	bl	8008c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ace:	bf00      	nop
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008ad8:	4802      	ldr	r0, [pc, #8]	; (8008ae4 <TIM1_UP_IRQHandler+0x10>)
 8008ada:	f002 fdcd 	bl	800b678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008ade:	bf00      	nop
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20000aac 	.word	0x20000aac

08008ae8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008aec:	4802      	ldr	r0, [pc, #8]	; (8008af8 <USART1_IRQHandler+0x10>)
 8008aee:	f003 f995 	bl	800be1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008af2:	bf00      	nop
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000af4 	.word	0x20000af4

08008afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008b04:	4a14      	ldr	r2, [pc, #80]	; (8008b58 <_sbrk+0x5c>)
 8008b06:	4b15      	ldr	r3, [pc, #84]	; (8008b5c <_sbrk+0x60>)
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008b10:	4b13      	ldr	r3, [pc, #76]	; (8008b60 <_sbrk+0x64>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d102      	bne.n	8008b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008b18:	4b11      	ldr	r3, [pc, #68]	; (8008b60 <_sbrk+0x64>)
 8008b1a:	4a12      	ldr	r2, [pc, #72]	; (8008b64 <_sbrk+0x68>)
 8008b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008b1e:	4b10      	ldr	r3, [pc, #64]	; (8008b60 <_sbrk+0x64>)
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4413      	add	r3, r2
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d207      	bcs.n	8008b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008b2c:	f003 ff80 	bl	800ca30 <__errno>
 8008b30:	4603      	mov	r3, r0
 8008b32:	220c      	movs	r2, #12
 8008b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008b36:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3a:	e009      	b.n	8008b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008b3c:	4b08      	ldr	r3, [pc, #32]	; (8008b60 <_sbrk+0x64>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008b42:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <_sbrk+0x64>)
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4413      	add	r3, r2
 8008b4a:	4a05      	ldr	r2, [pc, #20]	; (8008b60 <_sbrk+0x64>)
 8008b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3718      	adds	r7, #24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	2000c000 	.word	0x2000c000
 8008b5c:	00000400 	.word	0x00000400
 8008b60:	20000da0 	.word	0x20000da0
 8008b64:	20000ef0 	.word	0x20000ef0

08008b68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008b6c:	bf00      	nop
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bc80      	pop	{r7}
 8008b72:	4770      	bx	lr

08008b74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008b74:	480c      	ldr	r0, [pc, #48]	; (8008ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008b76:	490d      	ldr	r1, [pc, #52]	; (8008bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008b78:	4a0d      	ldr	r2, [pc, #52]	; (8008bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008b7c:	e002      	b.n	8008b84 <LoopCopyDataInit>

08008b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b82:	3304      	adds	r3, #4

08008b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b88:	d3f9      	bcc.n	8008b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b8a:	4a0a      	ldr	r2, [pc, #40]	; (8008bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008b8c:	4c0a      	ldr	r4, [pc, #40]	; (8008bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b90:	e001      	b.n	8008b96 <LoopFillZerobss>

08008b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b94:	3204      	adds	r2, #4

08008b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b98:	d3fb      	bcc.n	8008b92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008b9a:	f7ff ffe5 	bl	8008b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008b9e:	f003 ff4d 	bl	800ca3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008ba2:	f7ff fb91 	bl	80082c8 <main>
  bx lr
 8008ba6:	4770      	bx	lr
  ldr r0, =_sdata
 8008ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008bac:	20000a10 	.word	0x20000a10
  ldr r2, =_sidata
 8008bb0:	0800d87c 	.word	0x0800d87c
  ldr r2, =_sbss
 8008bb4:	20000a10 	.word	0x20000a10
  ldr r4, =_ebss
 8008bb8:	20000ef0 	.word	0x20000ef0

08008bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008bbc:	e7fe      	b.n	8008bbc <ADC1_2_IRQHandler>
	...

08008bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008bc4:	4b08      	ldr	r3, [pc, #32]	; (8008be8 <HAL_Init+0x28>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a07      	ldr	r2, [pc, #28]	; (8008be8 <HAL_Init+0x28>)
 8008bca:	f043 0310 	orr.w	r3, r3, #16
 8008bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008bd0:	2003      	movs	r0, #3
 8008bd2:	f000 fa43 	bl	800905c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008bd6:	200f      	movs	r0, #15
 8008bd8:	f000 f808 	bl	8008bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008bdc:	f7ff fdfa 	bl	80087d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	40022000 	.word	0x40022000

08008bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008bf4:	4b12      	ldr	r3, [pc, #72]	; (8008c40 <HAL_InitTick+0x54>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	4b12      	ldr	r3, [pc, #72]	; (8008c44 <HAL_InitTick+0x58>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fa5b 	bl	80090c6 <HAL_SYSTICK_Config>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e00e      	b.n	8008c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b0f      	cmp	r3, #15
 8008c1e:	d80a      	bhi.n	8008c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008c20:	2200      	movs	r2, #0
 8008c22:	6879      	ldr	r1, [r7, #4]
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	f000 fa23 	bl	8009072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008c2c:	4a06      	ldr	r2, [pc, #24]	; (8008c48 <HAL_InitTick+0x5c>)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	e000      	b.n	8008c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	200009b4 	.word	0x200009b4
 8008c44:	200009bc 	.word	0x200009bc
 8008c48:	200009b8 	.word	0x200009b8

08008c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008c50:	4b05      	ldr	r3, [pc, #20]	; (8008c68 <HAL_IncTick+0x1c>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	461a      	mov	r2, r3
 8008c56:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <HAL_IncTick+0x20>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	4a03      	ldr	r2, [pc, #12]	; (8008c6c <HAL_IncTick+0x20>)
 8008c5e:	6013      	str	r3, [r2, #0]
}
 8008c60:	bf00      	nop
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bc80      	pop	{r7}
 8008c66:	4770      	bx	lr
 8008c68:	200009bc 	.word	0x200009bc
 8008c6c:	20000da4 	.word	0x20000da4

08008c70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c70:	b480      	push	{r7}
 8008c72:	af00      	add	r7, sp, #0
  return uwTick;
 8008c74:	4b02      	ldr	r3, [pc, #8]	; (8008c80 <HAL_GetTick+0x10>)
 8008c76:	681b      	ldr	r3, [r3, #0]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bc80      	pop	{r7}
 8008c7e:	4770      	bx	lr
 8008c80:	20000da4 	.word	0x20000da4

08008c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c8c:	f7ff fff0 	bl	8008c70 <HAL_GetTick>
 8008c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9c:	d005      	beq.n	8008caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <HAL_Delay+0x44>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008caa:	bf00      	nop
 8008cac:	f7ff ffe0 	bl	8008c70 <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d8f7      	bhi.n	8008cac <HAL_Delay+0x28>
  {
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	200009bc 	.word	0x200009bc

08008ccc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e0ed      	b.n	8008eba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff fda4 	bl	8008838 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f042 0201 	orr.w	r2, r2, #1
 8008cfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d00:	f7ff ffb6 	bl	8008c70 <HAL_GetTick>
 8008d04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008d06:	e012      	b.n	8008d2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008d08:	f7ff ffb2 	bl	8008c70 <HAL_GetTick>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	2b0a      	cmp	r3, #10
 8008d14:	d90b      	bls.n	8008d2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2205      	movs	r2, #5
 8008d26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e0c5      	b.n	8008eba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0e5      	beq.n	8008d08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f022 0202 	bic.w	r2, r2, #2
 8008d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d4c:	f7ff ff90 	bl	8008c70 <HAL_GetTick>
 8008d50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008d52:	e012      	b.n	8008d7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008d54:	f7ff ff8c 	bl	8008c70 <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	2b0a      	cmp	r3, #10
 8008d60:	d90b      	bls.n	8008d7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2205      	movs	r2, #5
 8008d72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e09f      	b.n	8008eba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	f003 0302 	and.w	r3, r3, #2
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e5      	bne.n	8008d54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	7e1b      	ldrb	r3, [r3, #24]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d108      	bne.n	8008da2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	e007      	b.n	8008db2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008db0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	7e5b      	ldrb	r3, [r3, #25]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d108      	bne.n	8008dcc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	e007      	b.n	8008ddc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	7e9b      	ldrb	r3, [r3, #26]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d108      	bne.n	8008df6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f042 0220 	orr.w	r2, r2, #32
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	e007      	b.n	8008e06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f022 0220 	bic.w	r2, r2, #32
 8008e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	7edb      	ldrb	r3, [r3, #27]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d108      	bne.n	8008e20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f022 0210 	bic.w	r2, r2, #16
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	e007      	b.n	8008e30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0210 	orr.w	r2, r2, #16
 8008e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	7f1b      	ldrb	r3, [r3, #28]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d108      	bne.n	8008e4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 0208 	orr.w	r2, r2, #8
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	e007      	b.n	8008e5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 0208 	bic.w	r2, r2, #8
 8008e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	7f5b      	ldrb	r3, [r3, #29]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d108      	bne.n	8008e74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f042 0204 	orr.w	r2, r2, #4
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	e007      	b.n	8008e84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 0204 	bic.w	r2, r2, #4
 8008e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	689a      	ldr	r2, [r3, #8]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	431a      	orrs	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	431a      	orrs	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	ea42 0103 	orr.w	r1, r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	1e5a      	subs	r2, r3, #1
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <__NVIC_SetPriorityGrouping>:
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f003 0307 	and.w	r3, r3, #7
 8008ed2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ed4:	4b0c      	ldr	r3, [pc, #48]	; (8008f08 <__NVIC_SetPriorityGrouping+0x44>)
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ef6:	4a04      	ldr	r2, [pc, #16]	; (8008f08 <__NVIC_SetPriorityGrouping+0x44>)
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	60d3      	str	r3, [r2, #12]
}
 8008efc:	bf00      	nop
 8008efe:	3714      	adds	r7, #20
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bc80      	pop	{r7}
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	e000ed00 	.word	0xe000ed00

08008f0c <__NVIC_GetPriorityGrouping>:
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f10:	4b04      	ldr	r3, [pc, #16]	; (8008f24 <__NVIC_GetPriorityGrouping+0x18>)
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	0a1b      	lsrs	r3, r3, #8
 8008f16:	f003 0307 	and.w	r3, r3, #7
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bc80      	pop	{r7}
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	e000ed00 	.word	0xe000ed00

08008f28 <__NVIC_EnableIRQ>:
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	db0b      	blt.n	8008f52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	f003 021f 	and.w	r2, r3, #31
 8008f40:	4906      	ldr	r1, [pc, #24]	; (8008f5c <__NVIC_EnableIRQ+0x34>)
 8008f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f46:	095b      	lsrs	r3, r3, #5
 8008f48:	2001      	movs	r0, #1
 8008f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8008f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008f52:	bf00      	nop
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bc80      	pop	{r7}
 8008f5a:	4770      	bx	lr
 8008f5c:	e000e100 	.word	0xe000e100

08008f60 <__NVIC_SetPriority>:
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	4603      	mov	r3, r0
 8008f68:	6039      	str	r1, [r7, #0]
 8008f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	db0a      	blt.n	8008f8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	490c      	ldr	r1, [pc, #48]	; (8008fac <__NVIC_SetPriority+0x4c>)
 8008f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f7e:	0112      	lsls	r2, r2, #4
 8008f80:	b2d2      	uxtb	r2, r2
 8008f82:	440b      	add	r3, r1
 8008f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008f88:	e00a      	b.n	8008fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	4908      	ldr	r1, [pc, #32]	; (8008fb0 <__NVIC_SetPriority+0x50>)
 8008f90:	79fb      	ldrb	r3, [r7, #7]
 8008f92:	f003 030f 	and.w	r3, r3, #15
 8008f96:	3b04      	subs	r3, #4
 8008f98:	0112      	lsls	r2, r2, #4
 8008f9a:	b2d2      	uxtb	r2, r2
 8008f9c:	440b      	add	r3, r1
 8008f9e:	761a      	strb	r2, [r3, #24]
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bc80      	pop	{r7}
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	e000e100 	.word	0xe000e100
 8008fb0:	e000ed00 	.word	0xe000ed00

08008fb4 <NVIC_EncodePriority>:
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b089      	sub	sp, #36	; 0x24
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f003 0307 	and.w	r3, r3, #7
 8008fc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	f1c3 0307 	rsb	r3, r3, #7
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	bf28      	it	cs
 8008fd2:	2304      	movcs	r3, #4
 8008fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	3304      	adds	r3, #4
 8008fda:	2b06      	cmp	r3, #6
 8008fdc:	d902      	bls.n	8008fe4 <NVIC_EncodePriority+0x30>
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	3b03      	subs	r3, #3
 8008fe2:	e000      	b.n	8008fe6 <NVIC_EncodePriority+0x32>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff2:	43da      	mvns	r2, r3
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	401a      	ands	r2, r3
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	fa01 f303 	lsl.w	r3, r1, r3
 8009006:	43d9      	mvns	r1, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800900c:	4313      	orrs	r3, r2
}
 800900e:	4618      	mov	r0, r3
 8009010:	3724      	adds	r7, #36	; 0x24
 8009012:	46bd      	mov	sp, r7
 8009014:	bc80      	pop	{r7}
 8009016:	4770      	bx	lr

08009018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3b01      	subs	r3, #1
 8009024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009028:	d301      	bcc.n	800902e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800902a:	2301      	movs	r3, #1
 800902c:	e00f      	b.n	800904e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800902e:	4a0a      	ldr	r2, [pc, #40]	; (8009058 <SysTick_Config+0x40>)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3b01      	subs	r3, #1
 8009034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009036:	210f      	movs	r1, #15
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
 800903c:	f7ff ff90 	bl	8008f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009040:	4b05      	ldr	r3, [pc, #20]	; (8009058 <SysTick_Config+0x40>)
 8009042:	2200      	movs	r2, #0
 8009044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009046:	4b04      	ldr	r3, [pc, #16]	; (8009058 <SysTick_Config+0x40>)
 8009048:	2207      	movs	r2, #7
 800904a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	e000e010 	.word	0xe000e010

0800905c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7ff ff2d 	bl	8008ec4 <__NVIC_SetPriorityGrouping>
}
 800906a:	bf00      	nop
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009072:	b580      	push	{r7, lr}
 8009074:	b086      	sub	sp, #24
 8009076:	af00      	add	r7, sp, #0
 8009078:	4603      	mov	r3, r0
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	607a      	str	r2, [r7, #4]
 800907e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009084:	f7ff ff42 	bl	8008f0c <__NVIC_GetPriorityGrouping>
 8009088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	68b9      	ldr	r1, [r7, #8]
 800908e:	6978      	ldr	r0, [r7, #20]
 8009090:	f7ff ff90 	bl	8008fb4 <NVIC_EncodePriority>
 8009094:	4602      	mov	r2, r0
 8009096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800909a:	4611      	mov	r1, r2
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff ff5f 	bl	8008f60 <__NVIC_SetPriority>
}
 80090a2:	bf00      	nop
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	4603      	mov	r3, r0
 80090b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80090b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7ff ff35 	bl	8008f28 <__NVIC_EnableIRQ>
}
 80090be:	bf00      	nop
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f7ff ffa2 	bl	8009018 <SysTick_Config>
 80090d4:	4603      	mov	r3, r0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80090de:	b480      	push	{r7}
 80090e0:	b085      	sub	sp, #20
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d008      	beq.n	8009108 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2204      	movs	r2, #4
 80090fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e020      	b.n	800914a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f022 020e 	bic.w	r2, r2, #14
 8009116:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0201 	bic.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009130:	2101      	movs	r1, #1
 8009132:	fa01 f202 	lsl.w	r2, r1, r2
 8009136:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	bc80      	pop	{r7}
 8009152:	4770      	bx	lr

08009154 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b02      	cmp	r3, #2
 800916a:	d005      	beq.n	8009178 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2204      	movs	r2, #4
 8009170:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	73fb      	strb	r3, [r7, #15]
 8009176:	e0d6      	b.n	8009326 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f022 020e 	bic.w	r2, r2, #14
 8009186:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f022 0201 	bic.w	r2, r2, #1
 8009196:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	461a      	mov	r2, r3
 800919e:	4b64      	ldr	r3, [pc, #400]	; (8009330 <HAL_DMA_Abort_IT+0x1dc>)
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d958      	bls.n	8009256 <HAL_DMA_Abort_IT+0x102>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a62      	ldr	r2, [pc, #392]	; (8009334 <HAL_DMA_Abort_IT+0x1e0>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d04f      	beq.n	800924e <HAL_DMA_Abort_IT+0xfa>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a61      	ldr	r2, [pc, #388]	; (8009338 <HAL_DMA_Abort_IT+0x1e4>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d048      	beq.n	800924a <HAL_DMA_Abort_IT+0xf6>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a5f      	ldr	r2, [pc, #380]	; (800933c <HAL_DMA_Abort_IT+0x1e8>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d040      	beq.n	8009244 <HAL_DMA_Abort_IT+0xf0>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a5e      	ldr	r2, [pc, #376]	; (8009340 <HAL_DMA_Abort_IT+0x1ec>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d038      	beq.n	800923e <HAL_DMA_Abort_IT+0xea>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a5c      	ldr	r2, [pc, #368]	; (8009344 <HAL_DMA_Abort_IT+0x1f0>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d030      	beq.n	8009238 <HAL_DMA_Abort_IT+0xe4>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a5b      	ldr	r2, [pc, #364]	; (8009348 <HAL_DMA_Abort_IT+0x1f4>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d028      	beq.n	8009232 <HAL_DMA_Abort_IT+0xde>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a52      	ldr	r2, [pc, #328]	; (8009330 <HAL_DMA_Abort_IT+0x1dc>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d020      	beq.n	800922c <HAL_DMA_Abort_IT+0xd8>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a57      	ldr	r2, [pc, #348]	; (800934c <HAL_DMA_Abort_IT+0x1f8>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d019      	beq.n	8009228 <HAL_DMA_Abort_IT+0xd4>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a55      	ldr	r2, [pc, #340]	; (8009350 <HAL_DMA_Abort_IT+0x1fc>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d012      	beq.n	8009224 <HAL_DMA_Abort_IT+0xd0>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a54      	ldr	r2, [pc, #336]	; (8009354 <HAL_DMA_Abort_IT+0x200>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00a      	beq.n	800921e <HAL_DMA_Abort_IT+0xca>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a52      	ldr	r2, [pc, #328]	; (8009358 <HAL_DMA_Abort_IT+0x204>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d102      	bne.n	8009218 <HAL_DMA_Abort_IT+0xc4>
 8009212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009216:	e01b      	b.n	8009250 <HAL_DMA_Abort_IT+0xfc>
 8009218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800921c:	e018      	b.n	8009250 <HAL_DMA_Abort_IT+0xfc>
 800921e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009222:	e015      	b.n	8009250 <HAL_DMA_Abort_IT+0xfc>
 8009224:	2310      	movs	r3, #16
 8009226:	e013      	b.n	8009250 <HAL_DMA_Abort_IT+0xfc>
 8009228:	2301      	movs	r3, #1
 800922a:	e011      	b.n	8009250 <HAL_DMA_Abort_IT+0xfc>
 800922c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009230:	e00e      	b.n	8009250 <HAL_DMA_Abort_IT+0xfc>
 8009232:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009236:	e00b      	b.n	8009250 <HAL_DMA_Abort_IT+0xfc>
 8009238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800923c:	e008      	b.n	8009250 <HAL_DMA_Abort_IT+0xfc>
 800923e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009242:	e005      	b.n	8009250 <HAL_DMA_Abort_IT+0xfc>
 8009244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009248:	e002      	b.n	8009250 <HAL_DMA_Abort_IT+0xfc>
 800924a:	2310      	movs	r3, #16
 800924c:	e000      	b.n	8009250 <HAL_DMA_Abort_IT+0xfc>
 800924e:	2301      	movs	r3, #1
 8009250:	4a42      	ldr	r2, [pc, #264]	; (800935c <HAL_DMA_Abort_IT+0x208>)
 8009252:	6053      	str	r3, [r2, #4]
 8009254:	e057      	b.n	8009306 <HAL_DMA_Abort_IT+0x1b2>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a36      	ldr	r2, [pc, #216]	; (8009334 <HAL_DMA_Abort_IT+0x1e0>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d04f      	beq.n	8009300 <HAL_DMA_Abort_IT+0x1ac>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a34      	ldr	r2, [pc, #208]	; (8009338 <HAL_DMA_Abort_IT+0x1e4>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d048      	beq.n	80092fc <HAL_DMA_Abort_IT+0x1a8>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a33      	ldr	r2, [pc, #204]	; (800933c <HAL_DMA_Abort_IT+0x1e8>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d040      	beq.n	80092f6 <HAL_DMA_Abort_IT+0x1a2>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a31      	ldr	r2, [pc, #196]	; (8009340 <HAL_DMA_Abort_IT+0x1ec>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d038      	beq.n	80092f0 <HAL_DMA_Abort_IT+0x19c>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a30      	ldr	r2, [pc, #192]	; (8009344 <HAL_DMA_Abort_IT+0x1f0>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d030      	beq.n	80092ea <HAL_DMA_Abort_IT+0x196>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a2e      	ldr	r2, [pc, #184]	; (8009348 <HAL_DMA_Abort_IT+0x1f4>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d028      	beq.n	80092e4 <HAL_DMA_Abort_IT+0x190>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a26      	ldr	r2, [pc, #152]	; (8009330 <HAL_DMA_Abort_IT+0x1dc>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d020      	beq.n	80092de <HAL_DMA_Abort_IT+0x18a>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a2a      	ldr	r2, [pc, #168]	; (800934c <HAL_DMA_Abort_IT+0x1f8>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d019      	beq.n	80092da <HAL_DMA_Abort_IT+0x186>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a29      	ldr	r2, [pc, #164]	; (8009350 <HAL_DMA_Abort_IT+0x1fc>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d012      	beq.n	80092d6 <HAL_DMA_Abort_IT+0x182>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a27      	ldr	r2, [pc, #156]	; (8009354 <HAL_DMA_Abort_IT+0x200>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d00a      	beq.n	80092d0 <HAL_DMA_Abort_IT+0x17c>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a26      	ldr	r2, [pc, #152]	; (8009358 <HAL_DMA_Abort_IT+0x204>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d102      	bne.n	80092ca <HAL_DMA_Abort_IT+0x176>
 80092c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092c8:	e01b      	b.n	8009302 <HAL_DMA_Abort_IT+0x1ae>
 80092ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80092ce:	e018      	b.n	8009302 <HAL_DMA_Abort_IT+0x1ae>
 80092d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092d4:	e015      	b.n	8009302 <HAL_DMA_Abort_IT+0x1ae>
 80092d6:	2310      	movs	r3, #16
 80092d8:	e013      	b.n	8009302 <HAL_DMA_Abort_IT+0x1ae>
 80092da:	2301      	movs	r3, #1
 80092dc:	e011      	b.n	8009302 <HAL_DMA_Abort_IT+0x1ae>
 80092de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092e2:	e00e      	b.n	8009302 <HAL_DMA_Abort_IT+0x1ae>
 80092e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80092e8:	e00b      	b.n	8009302 <HAL_DMA_Abort_IT+0x1ae>
 80092ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80092ee:	e008      	b.n	8009302 <HAL_DMA_Abort_IT+0x1ae>
 80092f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092f4:	e005      	b.n	8009302 <HAL_DMA_Abort_IT+0x1ae>
 80092f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092fa:	e002      	b.n	8009302 <HAL_DMA_Abort_IT+0x1ae>
 80092fc:	2310      	movs	r3, #16
 80092fe:	e000      	b.n	8009302 <HAL_DMA_Abort_IT+0x1ae>
 8009300:	2301      	movs	r3, #1
 8009302:	4a17      	ldr	r2, [pc, #92]	; (8009360 <HAL_DMA_Abort_IT+0x20c>)
 8009304:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	4798      	blx	r3
    } 
  }
  return status;
 8009326:	7bfb      	ldrb	r3, [r7, #15]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	40020080 	.word	0x40020080
 8009334:	40020008 	.word	0x40020008
 8009338:	4002001c 	.word	0x4002001c
 800933c:	40020030 	.word	0x40020030
 8009340:	40020044 	.word	0x40020044
 8009344:	40020058 	.word	0x40020058
 8009348:	4002006c 	.word	0x4002006c
 800934c:	40020408 	.word	0x40020408
 8009350:	4002041c 	.word	0x4002041c
 8009354:	40020430 	.word	0x40020430
 8009358:	40020444 	.word	0x40020444
 800935c:	40020400 	.word	0x40020400
 8009360:	40020000 	.word	0x40020000

08009364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009364:	b480      	push	{r7}
 8009366:	b08b      	sub	sp, #44	; 0x2c
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800936e:	2300      	movs	r3, #0
 8009370:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009372:	2300      	movs	r3, #0
 8009374:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009376:	e179      	b.n	800966c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009378:	2201      	movs	r2, #1
 800937a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937c:	fa02 f303 	lsl.w	r3, r2, r3
 8009380:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	69fa      	ldr	r2, [r7, #28]
 8009388:	4013      	ands	r3, r2
 800938a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800938c:	69ba      	ldr	r2, [r7, #24]
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	429a      	cmp	r2, r3
 8009392:	f040 8168 	bne.w	8009666 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	4a96      	ldr	r2, [pc, #600]	; (80095f4 <HAL_GPIO_Init+0x290>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d05e      	beq.n	800945e <HAL_GPIO_Init+0xfa>
 80093a0:	4a94      	ldr	r2, [pc, #592]	; (80095f4 <HAL_GPIO_Init+0x290>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d875      	bhi.n	8009492 <HAL_GPIO_Init+0x12e>
 80093a6:	4a94      	ldr	r2, [pc, #592]	; (80095f8 <HAL_GPIO_Init+0x294>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d058      	beq.n	800945e <HAL_GPIO_Init+0xfa>
 80093ac:	4a92      	ldr	r2, [pc, #584]	; (80095f8 <HAL_GPIO_Init+0x294>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d86f      	bhi.n	8009492 <HAL_GPIO_Init+0x12e>
 80093b2:	4a92      	ldr	r2, [pc, #584]	; (80095fc <HAL_GPIO_Init+0x298>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d052      	beq.n	800945e <HAL_GPIO_Init+0xfa>
 80093b8:	4a90      	ldr	r2, [pc, #576]	; (80095fc <HAL_GPIO_Init+0x298>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d869      	bhi.n	8009492 <HAL_GPIO_Init+0x12e>
 80093be:	4a90      	ldr	r2, [pc, #576]	; (8009600 <HAL_GPIO_Init+0x29c>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d04c      	beq.n	800945e <HAL_GPIO_Init+0xfa>
 80093c4:	4a8e      	ldr	r2, [pc, #568]	; (8009600 <HAL_GPIO_Init+0x29c>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d863      	bhi.n	8009492 <HAL_GPIO_Init+0x12e>
 80093ca:	4a8e      	ldr	r2, [pc, #568]	; (8009604 <HAL_GPIO_Init+0x2a0>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d046      	beq.n	800945e <HAL_GPIO_Init+0xfa>
 80093d0:	4a8c      	ldr	r2, [pc, #560]	; (8009604 <HAL_GPIO_Init+0x2a0>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d85d      	bhi.n	8009492 <HAL_GPIO_Init+0x12e>
 80093d6:	2b12      	cmp	r3, #18
 80093d8:	d82a      	bhi.n	8009430 <HAL_GPIO_Init+0xcc>
 80093da:	2b12      	cmp	r3, #18
 80093dc:	d859      	bhi.n	8009492 <HAL_GPIO_Init+0x12e>
 80093de:	a201      	add	r2, pc, #4	; (adr r2, 80093e4 <HAL_GPIO_Init+0x80>)
 80093e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e4:	0800945f 	.word	0x0800945f
 80093e8:	08009439 	.word	0x08009439
 80093ec:	0800944b 	.word	0x0800944b
 80093f0:	0800948d 	.word	0x0800948d
 80093f4:	08009493 	.word	0x08009493
 80093f8:	08009493 	.word	0x08009493
 80093fc:	08009493 	.word	0x08009493
 8009400:	08009493 	.word	0x08009493
 8009404:	08009493 	.word	0x08009493
 8009408:	08009493 	.word	0x08009493
 800940c:	08009493 	.word	0x08009493
 8009410:	08009493 	.word	0x08009493
 8009414:	08009493 	.word	0x08009493
 8009418:	08009493 	.word	0x08009493
 800941c:	08009493 	.word	0x08009493
 8009420:	08009493 	.word	0x08009493
 8009424:	08009493 	.word	0x08009493
 8009428:	08009441 	.word	0x08009441
 800942c:	08009455 	.word	0x08009455
 8009430:	4a75      	ldr	r2, [pc, #468]	; (8009608 <HAL_GPIO_Init+0x2a4>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d013      	beq.n	800945e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009436:	e02c      	b.n	8009492 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	623b      	str	r3, [r7, #32]
          break;
 800943e:	e029      	b.n	8009494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	3304      	adds	r3, #4
 8009446:	623b      	str	r3, [r7, #32]
          break;
 8009448:	e024      	b.n	8009494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	3308      	adds	r3, #8
 8009450:	623b      	str	r3, [r7, #32]
          break;
 8009452:	e01f      	b.n	8009494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	330c      	adds	r3, #12
 800945a:	623b      	str	r3, [r7, #32]
          break;
 800945c:	e01a      	b.n	8009494 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d102      	bne.n	800946c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009466:	2304      	movs	r3, #4
 8009468:	623b      	str	r3, [r7, #32]
          break;
 800946a:	e013      	b.n	8009494 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d105      	bne.n	8009480 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009474:	2308      	movs	r3, #8
 8009476:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	69fa      	ldr	r2, [r7, #28]
 800947c:	611a      	str	r2, [r3, #16]
          break;
 800947e:	e009      	b.n	8009494 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009480:	2308      	movs	r3, #8
 8009482:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	69fa      	ldr	r2, [r7, #28]
 8009488:	615a      	str	r2, [r3, #20]
          break;
 800948a:	e003      	b.n	8009494 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800948c:	2300      	movs	r3, #0
 800948e:	623b      	str	r3, [r7, #32]
          break;
 8009490:	e000      	b.n	8009494 <HAL_GPIO_Init+0x130>
          break;
 8009492:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	2bff      	cmp	r3, #255	; 0xff
 8009498:	d801      	bhi.n	800949e <HAL_GPIO_Init+0x13a>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	e001      	b.n	80094a2 <HAL_GPIO_Init+0x13e>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	3304      	adds	r3, #4
 80094a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	2bff      	cmp	r3, #255	; 0xff
 80094a8:	d802      	bhi.n	80094b0 <HAL_GPIO_Init+0x14c>
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	e002      	b.n	80094b6 <HAL_GPIO_Init+0x152>
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	3b08      	subs	r3, #8
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	210f      	movs	r1, #15
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	fa01 f303 	lsl.w	r3, r1, r3
 80094c4:	43db      	mvns	r3, r3
 80094c6:	401a      	ands	r2, r3
 80094c8:	6a39      	ldr	r1, [r7, #32]
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	fa01 f303 	lsl.w	r3, r1, r3
 80094d0:	431a      	orrs	r2, r3
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f000 80c1 	beq.w	8009666 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80094e4:	4b49      	ldr	r3, [pc, #292]	; (800960c <HAL_GPIO_Init+0x2a8>)
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	4a48      	ldr	r2, [pc, #288]	; (800960c <HAL_GPIO_Init+0x2a8>)
 80094ea:	f043 0301 	orr.w	r3, r3, #1
 80094ee:	6193      	str	r3, [r2, #24]
 80094f0:	4b46      	ldr	r3, [pc, #280]	; (800960c <HAL_GPIO_Init+0x2a8>)
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	60bb      	str	r3, [r7, #8]
 80094fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80094fc:	4a44      	ldr	r2, [pc, #272]	; (8009610 <HAL_GPIO_Init+0x2ac>)
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	089b      	lsrs	r3, r3, #2
 8009502:	3302      	adds	r3, #2
 8009504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009508:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800950a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950c:	f003 0303 	and.w	r3, r3, #3
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	220f      	movs	r2, #15
 8009514:	fa02 f303 	lsl.w	r3, r2, r3
 8009518:	43db      	mvns	r3, r3
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	4013      	ands	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a3c      	ldr	r2, [pc, #240]	; (8009614 <HAL_GPIO_Init+0x2b0>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d01f      	beq.n	8009568 <HAL_GPIO_Init+0x204>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a3b      	ldr	r2, [pc, #236]	; (8009618 <HAL_GPIO_Init+0x2b4>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d019      	beq.n	8009564 <HAL_GPIO_Init+0x200>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a3a      	ldr	r2, [pc, #232]	; (800961c <HAL_GPIO_Init+0x2b8>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d013      	beq.n	8009560 <HAL_GPIO_Init+0x1fc>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a39      	ldr	r2, [pc, #228]	; (8009620 <HAL_GPIO_Init+0x2bc>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d00d      	beq.n	800955c <HAL_GPIO_Init+0x1f8>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a38      	ldr	r2, [pc, #224]	; (8009624 <HAL_GPIO_Init+0x2c0>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d007      	beq.n	8009558 <HAL_GPIO_Init+0x1f4>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a37      	ldr	r2, [pc, #220]	; (8009628 <HAL_GPIO_Init+0x2c4>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d101      	bne.n	8009554 <HAL_GPIO_Init+0x1f0>
 8009550:	2305      	movs	r3, #5
 8009552:	e00a      	b.n	800956a <HAL_GPIO_Init+0x206>
 8009554:	2306      	movs	r3, #6
 8009556:	e008      	b.n	800956a <HAL_GPIO_Init+0x206>
 8009558:	2304      	movs	r3, #4
 800955a:	e006      	b.n	800956a <HAL_GPIO_Init+0x206>
 800955c:	2303      	movs	r3, #3
 800955e:	e004      	b.n	800956a <HAL_GPIO_Init+0x206>
 8009560:	2302      	movs	r3, #2
 8009562:	e002      	b.n	800956a <HAL_GPIO_Init+0x206>
 8009564:	2301      	movs	r3, #1
 8009566:	e000      	b.n	800956a <HAL_GPIO_Init+0x206>
 8009568:	2300      	movs	r3, #0
 800956a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800956c:	f002 0203 	and.w	r2, r2, #3
 8009570:	0092      	lsls	r2, r2, #2
 8009572:	4093      	lsls	r3, r2
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	4313      	orrs	r3, r2
 8009578:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800957a:	4925      	ldr	r1, [pc, #148]	; (8009610 <HAL_GPIO_Init+0x2ac>)
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	089b      	lsrs	r3, r3, #2
 8009580:	3302      	adds	r3, #2
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d006      	beq.n	80095a2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009594:	4b25      	ldr	r3, [pc, #148]	; (800962c <HAL_GPIO_Init+0x2c8>)
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	4924      	ldr	r1, [pc, #144]	; (800962c <HAL_GPIO_Init+0x2c8>)
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	4313      	orrs	r3, r2
 800959e:	608b      	str	r3, [r1, #8]
 80095a0:	e006      	b.n	80095b0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80095a2:	4b22      	ldr	r3, [pc, #136]	; (800962c <HAL_GPIO_Init+0x2c8>)
 80095a4:	689a      	ldr	r2, [r3, #8]
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	43db      	mvns	r3, r3
 80095aa:	4920      	ldr	r1, [pc, #128]	; (800962c <HAL_GPIO_Init+0x2c8>)
 80095ac:	4013      	ands	r3, r2
 80095ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d006      	beq.n	80095ca <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80095bc:	4b1b      	ldr	r3, [pc, #108]	; (800962c <HAL_GPIO_Init+0x2c8>)
 80095be:	68da      	ldr	r2, [r3, #12]
 80095c0:	491a      	ldr	r1, [pc, #104]	; (800962c <HAL_GPIO_Init+0x2c8>)
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	60cb      	str	r3, [r1, #12]
 80095c8:	e006      	b.n	80095d8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80095ca:	4b18      	ldr	r3, [pc, #96]	; (800962c <HAL_GPIO_Init+0x2c8>)
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	43db      	mvns	r3, r3
 80095d2:	4916      	ldr	r1, [pc, #88]	; (800962c <HAL_GPIO_Init+0x2c8>)
 80095d4:	4013      	ands	r3, r2
 80095d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d025      	beq.n	8009630 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80095e4:	4b11      	ldr	r3, [pc, #68]	; (800962c <HAL_GPIO_Init+0x2c8>)
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	4910      	ldr	r1, [pc, #64]	; (800962c <HAL_GPIO_Init+0x2c8>)
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	604b      	str	r3, [r1, #4]
 80095f0:	e025      	b.n	800963e <HAL_GPIO_Init+0x2da>
 80095f2:	bf00      	nop
 80095f4:	10320000 	.word	0x10320000
 80095f8:	10310000 	.word	0x10310000
 80095fc:	10220000 	.word	0x10220000
 8009600:	10210000 	.word	0x10210000
 8009604:	10120000 	.word	0x10120000
 8009608:	10110000 	.word	0x10110000
 800960c:	40021000 	.word	0x40021000
 8009610:	40010000 	.word	0x40010000
 8009614:	40010800 	.word	0x40010800
 8009618:	40010c00 	.word	0x40010c00
 800961c:	40011000 	.word	0x40011000
 8009620:	40011400 	.word	0x40011400
 8009624:	40011800 	.word	0x40011800
 8009628:	40011c00 	.word	0x40011c00
 800962c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009630:	4b15      	ldr	r3, [pc, #84]	; (8009688 <HAL_GPIO_Init+0x324>)
 8009632:	685a      	ldr	r2, [r3, #4]
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	43db      	mvns	r3, r3
 8009638:	4913      	ldr	r1, [pc, #76]	; (8009688 <HAL_GPIO_Init+0x324>)
 800963a:	4013      	ands	r3, r2
 800963c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009646:	2b00      	cmp	r3, #0
 8009648:	d006      	beq.n	8009658 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800964a:	4b0f      	ldr	r3, [pc, #60]	; (8009688 <HAL_GPIO_Init+0x324>)
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	490e      	ldr	r1, [pc, #56]	; (8009688 <HAL_GPIO_Init+0x324>)
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	4313      	orrs	r3, r2
 8009654:	600b      	str	r3, [r1, #0]
 8009656:	e006      	b.n	8009666 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009658:	4b0b      	ldr	r3, [pc, #44]	; (8009688 <HAL_GPIO_Init+0x324>)
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	43db      	mvns	r3, r3
 8009660:	4909      	ldr	r1, [pc, #36]	; (8009688 <HAL_GPIO_Init+0x324>)
 8009662:	4013      	ands	r3, r2
 8009664:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009668:	3301      	adds	r3, #1
 800966a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	fa22 f303 	lsr.w	r3, r2, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	f47f ae7e 	bne.w	8009378 <HAL_GPIO_Init+0x14>
  }
}
 800967c:	bf00      	nop
 800967e:	bf00      	nop
 8009680:	372c      	adds	r7, #44	; 0x2c
 8009682:	46bd      	mov	sp, r7
 8009684:	bc80      	pop	{r7}
 8009686:	4770      	bx	lr
 8009688:	40010400 	.word	0x40010400

0800968c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800968c:	b480      	push	{r7}
 800968e:	b089      	sub	sp, #36	; 0x24
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009696:	2300      	movs	r3, #0
 8009698:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800969a:	e0a6      	b.n	80097ea <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800969c:	2201      	movs	r2, #1
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	fa02 f303 	lsl.w	r3, r2, r3
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	4013      	ands	r3, r2
 80096a8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8099 	beq.w	80097e4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80096b2:	4a54      	ldr	r2, [pc, #336]	; (8009804 <HAL_GPIO_DeInit+0x178>)
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	089b      	lsrs	r3, r3, #2
 80096b8:	3302      	adds	r3, #2
 80096ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096be:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	f003 0303 	and.w	r3, r3, #3
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	220f      	movs	r2, #15
 80096ca:	fa02 f303 	lsl.w	r3, r2, r3
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	4013      	ands	r3, r2
 80096d2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a4c      	ldr	r2, [pc, #304]	; (8009808 <HAL_GPIO_DeInit+0x17c>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d01f      	beq.n	800971c <HAL_GPIO_DeInit+0x90>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a4b      	ldr	r2, [pc, #300]	; (800980c <HAL_GPIO_DeInit+0x180>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d019      	beq.n	8009718 <HAL_GPIO_DeInit+0x8c>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a4a      	ldr	r2, [pc, #296]	; (8009810 <HAL_GPIO_DeInit+0x184>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d013      	beq.n	8009714 <HAL_GPIO_DeInit+0x88>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a49      	ldr	r2, [pc, #292]	; (8009814 <HAL_GPIO_DeInit+0x188>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d00d      	beq.n	8009710 <HAL_GPIO_DeInit+0x84>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a48      	ldr	r2, [pc, #288]	; (8009818 <HAL_GPIO_DeInit+0x18c>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d007      	beq.n	800970c <HAL_GPIO_DeInit+0x80>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a47      	ldr	r2, [pc, #284]	; (800981c <HAL_GPIO_DeInit+0x190>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d101      	bne.n	8009708 <HAL_GPIO_DeInit+0x7c>
 8009704:	2305      	movs	r3, #5
 8009706:	e00a      	b.n	800971e <HAL_GPIO_DeInit+0x92>
 8009708:	2306      	movs	r3, #6
 800970a:	e008      	b.n	800971e <HAL_GPIO_DeInit+0x92>
 800970c:	2304      	movs	r3, #4
 800970e:	e006      	b.n	800971e <HAL_GPIO_DeInit+0x92>
 8009710:	2303      	movs	r3, #3
 8009712:	e004      	b.n	800971e <HAL_GPIO_DeInit+0x92>
 8009714:	2302      	movs	r3, #2
 8009716:	e002      	b.n	800971e <HAL_GPIO_DeInit+0x92>
 8009718:	2301      	movs	r3, #1
 800971a:	e000      	b.n	800971e <HAL_GPIO_DeInit+0x92>
 800971c:	2300      	movs	r3, #0
 800971e:	69fa      	ldr	r2, [r7, #28]
 8009720:	f002 0203 	and.w	r2, r2, #3
 8009724:	0092      	lsls	r2, r2, #2
 8009726:	4093      	lsls	r3, r2
 8009728:	697a      	ldr	r2, [r7, #20]
 800972a:	429a      	cmp	r2, r3
 800972c:	d132      	bne.n	8009794 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800972e:	4b3c      	ldr	r3, [pc, #240]	; (8009820 <HAL_GPIO_DeInit+0x194>)
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	43db      	mvns	r3, r3
 8009736:	493a      	ldr	r1, [pc, #232]	; (8009820 <HAL_GPIO_DeInit+0x194>)
 8009738:	4013      	ands	r3, r2
 800973a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800973c:	4b38      	ldr	r3, [pc, #224]	; (8009820 <HAL_GPIO_DeInit+0x194>)
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	43db      	mvns	r3, r3
 8009744:	4936      	ldr	r1, [pc, #216]	; (8009820 <HAL_GPIO_DeInit+0x194>)
 8009746:	4013      	ands	r3, r2
 8009748:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800974a:	4b35      	ldr	r3, [pc, #212]	; (8009820 <HAL_GPIO_DeInit+0x194>)
 800974c:	68da      	ldr	r2, [r3, #12]
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	43db      	mvns	r3, r3
 8009752:	4933      	ldr	r1, [pc, #204]	; (8009820 <HAL_GPIO_DeInit+0x194>)
 8009754:	4013      	ands	r3, r2
 8009756:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009758:	4b31      	ldr	r3, [pc, #196]	; (8009820 <HAL_GPIO_DeInit+0x194>)
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	43db      	mvns	r3, r3
 8009760:	492f      	ldr	r1, [pc, #188]	; (8009820 <HAL_GPIO_DeInit+0x194>)
 8009762:	4013      	ands	r3, r2
 8009764:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	f003 0303 	and.w	r3, r3, #3
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	220f      	movs	r2, #15
 8009770:	fa02 f303 	lsl.w	r3, r2, r3
 8009774:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009776:	4a23      	ldr	r2, [pc, #140]	; (8009804 <HAL_GPIO_DeInit+0x178>)
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	089b      	lsrs	r3, r3, #2
 800977c:	3302      	adds	r3, #2
 800977e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	43da      	mvns	r2, r3
 8009786:	481f      	ldr	r0, [pc, #124]	; (8009804 <HAL_GPIO_DeInit+0x178>)
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	089b      	lsrs	r3, r3, #2
 800978c:	400a      	ands	r2, r1
 800978e:	3302      	adds	r3, #2
 8009790:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	2bff      	cmp	r3, #255	; 0xff
 8009798:	d801      	bhi.n	800979e <HAL_GPIO_DeInit+0x112>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	e001      	b.n	80097a2 <HAL_GPIO_DeInit+0x116>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3304      	adds	r3, #4
 80097a2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	2bff      	cmp	r3, #255	; 0xff
 80097a8:	d802      	bhi.n	80097b0 <HAL_GPIO_DeInit+0x124>
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	e002      	b.n	80097b6 <HAL_GPIO_DeInit+0x12a>
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	3b08      	subs	r3, #8
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	210f      	movs	r1, #15
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	fa01 f303 	lsl.w	r3, r1, r3
 80097c4:	43db      	mvns	r3, r3
 80097c6:	401a      	ands	r2, r3
 80097c8:	2104      	movs	r1, #4
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	fa01 f303 	lsl.w	r3, r1, r3
 80097d0:	431a      	orrs	r2, r3
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68da      	ldr	r2, [r3, #12]
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	43db      	mvns	r3, r3
 80097de:	401a      	ands	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	3301      	adds	r3, #1
 80097e8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	fa22 f303 	lsr.w	r3, r2, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f47f af52 	bne.w	800969c <HAL_GPIO_DeInit+0x10>
  }
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	3724      	adds	r7, #36	; 0x24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bc80      	pop	{r7}
 8009802:	4770      	bx	lr
 8009804:	40010000 	.word	0x40010000
 8009808:	40010800 	.word	0x40010800
 800980c:	40010c00 	.word	0x40010c00
 8009810:	40011000 	.word	0x40011000
 8009814:	40011400 	.word	0x40011400
 8009818:	40011800 	.word	0x40011800
 800981c:	40011c00 	.word	0x40011c00
 8009820:	40010400 	.word	0x40010400

08009824 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	689a      	ldr	r2, [r3, #8]
 8009834:	887b      	ldrh	r3, [r7, #2]
 8009836:	4013      	ands	r3, r2
 8009838:	2b00      	cmp	r3, #0
 800983a:	d002      	beq.n	8009842 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800983c:	2301      	movs	r3, #1
 800983e:	73fb      	strb	r3, [r7, #15]
 8009840:	e001      	b.n	8009846 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009842:	2300      	movs	r3, #0
 8009844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009846:	7bfb      	ldrb	r3, [r7, #15]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	bc80      	pop	{r7}
 8009850:	4770      	bx	lr

08009852 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009852:	b480      	push	{r7}
 8009854:	b083      	sub	sp, #12
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	460b      	mov	r3, r1
 800985c:	807b      	strh	r3, [r7, #2]
 800985e:	4613      	mov	r3, r2
 8009860:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009862:	787b      	ldrb	r3, [r7, #1]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d003      	beq.n	8009870 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009868:	887a      	ldrh	r2, [r7, #2]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800986e:	e003      	b.n	8009878 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009870:	887b      	ldrh	r3, [r7, #2]
 8009872:	041a      	lsls	r2, r3, #16
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	611a      	str	r2, [r3, #16]
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	bc80      	pop	{r7}
 8009880:	4770      	bx	lr

08009882 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009882:	b480      	push	{r7}
 8009884:	b085      	sub	sp, #20
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	460b      	mov	r3, r1
 800988c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009894:	887a      	ldrh	r2, [r7, #2]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	4013      	ands	r3, r2
 800989a:	041a      	lsls	r2, r3, #16
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	43d9      	mvns	r1, r3
 80098a0:	887b      	ldrh	r3, [r7, #2]
 80098a2:	400b      	ands	r3, r1
 80098a4:	431a      	orrs	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	611a      	str	r2, [r3, #16]
}
 80098aa:	bf00      	nop
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bc80      	pop	{r7}
 80098b2:	4770      	bx	lr

080098b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d101      	bne.n	80098c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e12b      	b.n	8009b1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d106      	bne.n	80098e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7fe fff8 	bl	80088d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2224      	movs	r2, #36	; 0x24
 80098e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f022 0201 	bic.w	r2, r2, #1
 80098f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009906:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009916:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009918:	f001 fdb8 	bl	800b48c <HAL_RCC_GetPCLK1Freq>
 800991c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	4a81      	ldr	r2, [pc, #516]	; (8009b28 <HAL_I2C_Init+0x274>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d807      	bhi.n	8009938 <HAL_I2C_Init+0x84>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	4a80      	ldr	r2, [pc, #512]	; (8009b2c <HAL_I2C_Init+0x278>)
 800992c:	4293      	cmp	r3, r2
 800992e:	bf94      	ite	ls
 8009930:	2301      	movls	r3, #1
 8009932:	2300      	movhi	r3, #0
 8009934:	b2db      	uxtb	r3, r3
 8009936:	e006      	b.n	8009946 <HAL_I2C_Init+0x92>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	4a7d      	ldr	r2, [pc, #500]	; (8009b30 <HAL_I2C_Init+0x27c>)
 800993c:	4293      	cmp	r3, r2
 800993e:	bf94      	ite	ls
 8009940:	2301      	movls	r3, #1
 8009942:	2300      	movhi	r3, #0
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e0e7      	b.n	8009b1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	4a78      	ldr	r2, [pc, #480]	; (8009b34 <HAL_I2C_Init+0x280>)
 8009952:	fba2 2303 	umull	r2, r3, r2, r3
 8009956:	0c9b      	lsrs	r3, r3, #18
 8009958:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	430a      	orrs	r2, r1
 800996c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6a1b      	ldr	r3, [r3, #32]
 8009974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	4a6a      	ldr	r2, [pc, #424]	; (8009b28 <HAL_I2C_Init+0x274>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d802      	bhi.n	8009988 <HAL_I2C_Init+0xd4>
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	3301      	adds	r3, #1
 8009986:	e009      	b.n	800999c <HAL_I2C_Init+0xe8>
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800998e:	fb02 f303 	mul.w	r3, r2, r3
 8009992:	4a69      	ldr	r2, [pc, #420]	; (8009b38 <HAL_I2C_Init+0x284>)
 8009994:	fba2 2303 	umull	r2, r3, r2, r3
 8009998:	099b      	lsrs	r3, r3, #6
 800999a:	3301      	adds	r3, #1
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	6812      	ldr	r2, [r2, #0]
 80099a0:	430b      	orrs	r3, r1
 80099a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80099ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	495c      	ldr	r1, [pc, #368]	; (8009b28 <HAL_I2C_Init+0x274>)
 80099b8:	428b      	cmp	r3, r1
 80099ba:	d819      	bhi.n	80099f0 <HAL_I2C_Init+0x13c>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	1e59      	subs	r1, r3, #1
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80099ca:	1c59      	adds	r1, r3, #1
 80099cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80099d0:	400b      	ands	r3, r1
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00a      	beq.n	80099ec <HAL_I2C_Init+0x138>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	1e59      	subs	r1, r3, #1
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80099e4:	3301      	adds	r3, #1
 80099e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099ea:	e051      	b.n	8009a90 <HAL_I2C_Init+0x1dc>
 80099ec:	2304      	movs	r3, #4
 80099ee:	e04f      	b.n	8009a90 <HAL_I2C_Init+0x1dc>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d111      	bne.n	8009a1c <HAL_I2C_Init+0x168>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	1e58      	subs	r0, r3, #1
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6859      	ldr	r1, [r3, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	440b      	add	r3, r1
 8009a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	bf0c      	ite	eq
 8009a14:	2301      	moveq	r3, #1
 8009a16:	2300      	movne	r3, #0
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	e012      	b.n	8009a42 <HAL_I2C_Init+0x18e>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	1e58      	subs	r0, r3, #1
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6859      	ldr	r1, [r3, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	440b      	add	r3, r1
 8009a2a:	0099      	lsls	r1, r3, #2
 8009a2c:	440b      	add	r3, r1
 8009a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a32:	3301      	adds	r3, #1
 8009a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	bf0c      	ite	eq
 8009a3c:	2301      	moveq	r3, #1
 8009a3e:	2300      	movne	r3, #0
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <HAL_I2C_Init+0x196>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e022      	b.n	8009a90 <HAL_I2C_Init+0x1dc>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10e      	bne.n	8009a70 <HAL_I2C_Init+0x1bc>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	1e58      	subs	r0, r3, #1
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6859      	ldr	r1, [r3, #4]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	005b      	lsls	r3, r3, #1
 8009a5e:	440b      	add	r3, r1
 8009a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a64:	3301      	adds	r3, #1
 8009a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a6e:	e00f      	b.n	8009a90 <HAL_I2C_Init+0x1dc>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	1e58      	subs	r0, r3, #1
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6859      	ldr	r1, [r3, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	440b      	add	r3, r1
 8009a7e:	0099      	lsls	r1, r3, #2
 8009a80:	440b      	add	r3, r1
 8009a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a86:	3301      	adds	r3, #1
 8009a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a90:	6879      	ldr	r1, [r7, #4]
 8009a92:	6809      	ldr	r1, [r1, #0]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	69da      	ldr	r2, [r3, #28]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	431a      	orrs	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009abe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	6911      	ldr	r1, [r2, #16]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	68d2      	ldr	r2, [r2, #12]
 8009aca:	4311      	orrs	r1, r2
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	6812      	ldr	r2, [r2, #0]
 8009ad0:	430b      	orrs	r3, r1
 8009ad2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	695a      	ldr	r2, [r3, #20]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	430a      	orrs	r2, r1
 8009aee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f042 0201 	orr.w	r2, r2, #1
 8009afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	000186a0 	.word	0x000186a0
 8009b2c:	001e847f 	.word	0x001e847f
 8009b30:	003d08ff 	.word	0x003d08ff
 8009b34:	431bde83 	.word	0x431bde83
 8009b38:	10624dd3 	.word	0x10624dd3

08009b3c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e021      	b.n	8009b92 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2224      	movs	r2, #36	; 0x24
 8009b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 0201 	bic.w	r2, r2, #1
 8009b64:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7fe fef0 	bl	800894c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
	...

08009b9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b088      	sub	sp, #32
 8009ba0:	af02      	add	r7, sp, #8
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	607a      	str	r2, [r7, #4]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	460b      	mov	r3, r1
 8009baa:	817b      	strh	r3, [r7, #10]
 8009bac:	4613      	mov	r3, r2
 8009bae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009bb0:	f7ff f85e 	bl	8008c70 <HAL_GetTick>
 8009bb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	2b20      	cmp	r3, #32
 8009bc0:	f040 80e0 	bne.w	8009d84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	2319      	movs	r3, #25
 8009bca:	2201      	movs	r2, #1
 8009bcc:	4970      	ldr	r1, [pc, #448]	; (8009d90 <HAL_I2C_Master_Transmit+0x1f4>)
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f000 fe5c 	bl	800a88c <I2C_WaitOnFlagUntilTimeout>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d001      	beq.n	8009bde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009bda:	2302      	movs	r3, #2
 8009bdc:	e0d3      	b.n	8009d86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d101      	bne.n	8009bec <HAL_I2C_Master_Transmit+0x50>
 8009be8:	2302      	movs	r3, #2
 8009bea:	e0cc      	b.n	8009d86 <HAL_I2C_Master_Transmit+0x1ea>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d007      	beq.n	8009c12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f042 0201 	orr.w	r2, r2, #1
 8009c10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2221      	movs	r2, #33	; 0x21
 8009c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2210      	movs	r2, #16
 8009c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	893a      	ldrh	r2, [r7, #8]
 8009c42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	4a50      	ldr	r2, [pc, #320]	; (8009d94 <HAL_I2C_Master_Transmit+0x1f8>)
 8009c52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009c54:	8979      	ldrh	r1, [r7, #10]
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	6a3a      	ldr	r2, [r7, #32]
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 fc16 	bl	800a48c <I2C_MasterRequestWrite>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e08d      	b.n	8009d86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	613b      	str	r3, [r7, #16]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	695b      	ldr	r3, [r3, #20]
 8009c74:	613b      	str	r3, [r7, #16]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	613b      	str	r3, [r7, #16]
 8009c7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009c80:	e066      	b.n	8009d50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	6a39      	ldr	r1, [r7, #32]
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 ff1a 	bl	800aac0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00d      	beq.n	8009cae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c96:	2b04      	cmp	r3, #4
 8009c98:	d107      	bne.n	8009caa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ca8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e06b      	b.n	8009d86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	781a      	ldrb	r2, [r3, #0]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbe:	1c5a      	adds	r2, r3, #1
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	695b      	ldr	r3, [r3, #20]
 8009ce4:	f003 0304 	and.w	r3, r3, #4
 8009ce8:	2b04      	cmp	r3, #4
 8009cea:	d11b      	bne.n	8009d24 <HAL_I2C_Master_Transmit+0x188>
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d017      	beq.n	8009d24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	781a      	ldrb	r2, [r3, #0]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d04:	1c5a      	adds	r2, r3, #1
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	3b01      	subs	r3, #1
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	6a39      	ldr	r1, [r7, #32]
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 ff11 	bl	800ab50 <I2C_WaitOnBTFFlagUntilTimeout>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00d      	beq.n	8009d50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d38:	2b04      	cmp	r3, #4
 8009d3a:	d107      	bne.n	8009d4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e01a      	b.n	8009d86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d194      	bne.n	8009c82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2220      	movs	r2, #32
 8009d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	e000      	b.n	8009d86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009d84:	2302      	movs	r3, #2
  }
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	00100002 	.word	0x00100002
 8009d94:	ffff0000 	.word	0xffff0000

08009d98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b088      	sub	sp, #32
 8009d9c:	af02      	add	r7, sp, #8
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	4608      	mov	r0, r1
 8009da2:	4611      	mov	r1, r2
 8009da4:	461a      	mov	r2, r3
 8009da6:	4603      	mov	r3, r0
 8009da8:	817b      	strh	r3, [r7, #10]
 8009daa:	460b      	mov	r3, r1
 8009dac:	813b      	strh	r3, [r7, #8]
 8009dae:	4613      	mov	r3, r2
 8009db0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009db2:	f7fe ff5d 	bl	8008c70 <HAL_GetTick>
 8009db6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b20      	cmp	r3, #32
 8009dc2:	f040 80d9 	bne.w	8009f78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	2319      	movs	r3, #25
 8009dcc:	2201      	movs	r2, #1
 8009dce:	496d      	ldr	r1, [pc, #436]	; (8009f84 <HAL_I2C_Mem_Write+0x1ec>)
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 fd5b 	bl	800a88c <I2C_WaitOnFlagUntilTimeout>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009ddc:	2302      	movs	r3, #2
 8009dde:	e0cc      	b.n	8009f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d101      	bne.n	8009dee <HAL_I2C_Mem_Write+0x56>
 8009dea:	2302      	movs	r3, #2
 8009dec:	e0c5      	b.n	8009f7a <HAL_I2C_Mem_Write+0x1e2>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d007      	beq.n	8009e14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f042 0201 	orr.w	r2, r2, #1
 8009e12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2221      	movs	r2, #33	; 0x21
 8009e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2240      	movs	r2, #64	; 0x40
 8009e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6a3a      	ldr	r2, [r7, #32]
 8009e3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	4a4d      	ldr	r2, [pc, #308]	; (8009f88 <HAL_I2C_Mem_Write+0x1f0>)
 8009e54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e56:	88f8      	ldrh	r0, [r7, #6]
 8009e58:	893a      	ldrh	r2, [r7, #8]
 8009e5a:	8979      	ldrh	r1, [r7, #10]
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	4603      	mov	r3, r0
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f000 fb92 	bl	800a590 <I2C_RequestMemoryWrite>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d052      	beq.n	8009f18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e081      	b.n	8009f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f000 fe20 	bl	800aac0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00d      	beq.n	8009ea2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8a:	2b04      	cmp	r3, #4
 8009e8c:	d107      	bne.n	8009e9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e06b      	b.n	8009f7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	781a      	ldrb	r2, [r3, #0]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb2:	1c5a      	adds	r2, r3, #1
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	f003 0304 	and.w	r3, r3, #4
 8009edc:	2b04      	cmp	r3, #4
 8009ede:	d11b      	bne.n	8009f18 <HAL_I2C_Mem_Write+0x180>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d017      	beq.n	8009f18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	781a      	ldrb	r2, [r3, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	1c5a      	adds	r2, r3, #1
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f02:	3b01      	subs	r3, #1
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	3b01      	subs	r3, #1
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1aa      	bne.n	8009e76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 fe13 	bl	800ab50 <I2C_WaitOnBTFFlagUntilTimeout>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00d      	beq.n	8009f4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	d107      	bne.n	8009f48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e016      	b.n	8009f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2220      	movs	r2, #32
 8009f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	e000      	b.n	8009f7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009f78:	2302      	movs	r3, #2
  }
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3718      	adds	r7, #24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	00100002 	.word	0x00100002
 8009f88:	ffff0000 	.word	0xffff0000

08009f8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08c      	sub	sp, #48	; 0x30
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	4608      	mov	r0, r1
 8009f96:	4611      	mov	r1, r2
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	817b      	strh	r3, [r7, #10]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	813b      	strh	r3, [r7, #8]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009faa:	f7fe fe61 	bl	8008c70 <HAL_GetTick>
 8009fae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b20      	cmp	r3, #32
 8009fba:	f040 8244 	bne.w	800a446 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	2319      	movs	r3, #25
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	4982      	ldr	r1, [pc, #520]	; (800a1d0 <HAL_I2C_Mem_Read+0x244>)
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f000 fc5f 	bl	800a88c <I2C_WaitOnFlagUntilTimeout>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e237      	b.n	800a448 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d101      	bne.n	8009fe6 <HAL_I2C_Mem_Read+0x5a>
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	e230      	b.n	800a448 <HAL_I2C_Mem_Read+0x4bc>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d007      	beq.n	800a00c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f042 0201 	orr.w	r2, r2, #1
 800a00a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a01a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2222      	movs	r2, #34	; 0x22
 800a020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2240      	movs	r2, #64	; 0x40
 800a028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2200      	movs	r2, #0
 800a030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a036:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a03c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a042:	b29a      	uxth	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	4a62      	ldr	r2, [pc, #392]	; (800a1d4 <HAL_I2C_Mem_Read+0x248>)
 800a04c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a04e:	88f8      	ldrh	r0, [r7, #6]
 800a050:	893a      	ldrh	r2, [r7, #8]
 800a052:	8979      	ldrh	r1, [r7, #10]
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	9301      	str	r3, [sp, #4]
 800a058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	4603      	mov	r3, r0
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 fb2c 	bl	800a6bc <I2C_RequestMemoryRead>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d001      	beq.n	800a06e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e1ec      	b.n	800a448 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a072:	2b00      	cmp	r3, #0
 800a074:	d113      	bne.n	800a09e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a076:	2300      	movs	r3, #0
 800a078:	61fb      	str	r3, [r7, #28]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	61fb      	str	r3, [r7, #28]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	61fb      	str	r3, [r7, #28]
 800a08a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a09a:	601a      	str	r2, [r3, #0]
 800a09c:	e1c0      	b.n	800a420 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d11e      	bne.n	800a0e4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0b6:	b672      	cpsid	i
}
 800a0b8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	61bb      	str	r3, [r7, #24]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	695b      	ldr	r3, [r3, #20]
 800a0c4:	61bb      	str	r3, [r7, #24]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	699b      	ldr	r3, [r3, #24]
 800a0cc:	61bb      	str	r3, [r7, #24]
 800a0ce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a0e0:	b662      	cpsie	i
}
 800a0e2:	e035      	b.n	800a150 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d11e      	bne.n	800a12a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0fc:	b672      	cpsid	i
}
 800a0fe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a100:	2300      	movs	r3, #0
 800a102:	617b      	str	r3, [r7, #20]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	699b      	ldr	r3, [r3, #24]
 800a112:	617b      	str	r3, [r7, #20]
 800a114:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a124:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a126:	b662      	cpsie	i
}
 800a128:	e012      	b.n	800a150 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a138:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a13a:	2300      	movs	r3, #0
 800a13c:	613b      	str	r3, [r7, #16]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	695b      	ldr	r3, [r3, #20]
 800a144:	613b      	str	r3, [r7, #16]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	613b      	str	r3, [r7, #16]
 800a14e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a150:	e166      	b.n	800a420 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a156:	2b03      	cmp	r3, #3
 800a158:	f200 811f 	bhi.w	800a39a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a160:	2b01      	cmp	r3, #1
 800a162:	d123      	bne.n	800a1ac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a166:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 fd39 	bl	800abe0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d001      	beq.n	800a178 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e167      	b.n	800a448 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	691a      	ldr	r2, [r3, #16]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a182:	b2d2      	uxtb	r2, r2
 800a184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18a:	1c5a      	adds	r2, r3, #1
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a194:	3b01      	subs	r3, #1
 800a196:	b29a      	uxth	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a1aa:	e139      	b.n	800a420 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d152      	bne.n	800a25a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	4906      	ldr	r1, [pc, #24]	; (800a1d8 <HAL_I2C_Mem_Read+0x24c>)
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f000 fb64 	bl	800a88c <I2C_WaitOnFlagUntilTimeout>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d008      	beq.n	800a1dc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e13c      	b.n	800a448 <HAL_I2C_Mem_Read+0x4bc>
 800a1ce:	bf00      	nop
 800a1d0:	00100002 	.word	0x00100002
 800a1d4:	ffff0000 	.word	0xffff0000
 800a1d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a1dc:	b672      	cpsid	i
}
 800a1de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	691a      	ldr	r2, [r3, #16]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	b2d2      	uxtb	r2, r2
 800a1fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a202:	1c5a      	adds	r2, r3, #1
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a20c:	3b01      	subs	r3, #1
 800a20e:	b29a      	uxth	r2, r3
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a218:	b29b      	uxth	r3, r3
 800a21a:	3b01      	subs	r3, #1
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a222:	b662      	cpsie	i
}
 800a224:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	691a      	ldr	r2, [r3, #16]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a230:	b2d2      	uxtb	r2, r2
 800a232:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a238:	1c5a      	adds	r2, r3, #1
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a242:	3b01      	subs	r3, #1
 800a244:	b29a      	uxth	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a24e:	b29b      	uxth	r3, r3
 800a250:	3b01      	subs	r3, #1
 800a252:	b29a      	uxth	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a258:	e0e2      	b.n	800a420 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a260:	2200      	movs	r2, #0
 800a262:	497b      	ldr	r1, [pc, #492]	; (800a450 <HAL_I2C_Mem_Read+0x4c4>)
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 fb11 	bl	800a88c <I2C_WaitOnFlagUntilTimeout>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	e0e9      	b.n	800a448 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a282:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a284:	b672      	cpsid	i
}
 800a286:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	691a      	ldr	r2, [r3, #16]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a292:	b2d2      	uxtb	r2, r2
 800a294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29a:	1c5a      	adds	r2, r3, #1
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a2ba:	4b66      	ldr	r3, [pc, #408]	; (800a454 <HAL_I2C_Mem_Read+0x4c8>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	08db      	lsrs	r3, r3, #3
 800a2c0:	4a65      	ldr	r2, [pc, #404]	; (800a458 <HAL_I2C_Mem_Read+0x4cc>)
 800a2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c6:	0a1a      	lsrs	r2, r3, #8
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	00da      	lsls	r2, r3, #3
 800a2d0:	1ad3      	subs	r3, r2, r3
 800a2d2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a2d4:	6a3b      	ldr	r3, [r7, #32]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d118      	bne.n	800a312 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fa:	f043 0220 	orr.w	r2, r3, #32
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a302:	b662      	cpsie	i
}
 800a304:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	e09a      	b.n	800a448 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	2b04      	cmp	r3, #4
 800a31e:	d1d9      	bne.n	800a2d4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a32e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	691a      	ldr	r2, [r3, #16]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33a:	b2d2      	uxtb	r2, r2
 800a33c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a342:	1c5a      	adds	r2, r3, #1
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a34c:	3b01      	subs	r3, #1
 800a34e:	b29a      	uxth	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a358:	b29b      	uxth	r3, r3
 800a35a:	3b01      	subs	r3, #1
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a362:	b662      	cpsie	i
}
 800a364:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	691a      	ldr	r2, [r3, #16]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a370:	b2d2      	uxtb	r2, r2
 800a372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a378:	1c5a      	adds	r2, r3, #1
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a382:	3b01      	subs	r3, #1
 800a384:	b29a      	uxth	r2, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a38e:	b29b      	uxth	r3, r3
 800a390:	3b01      	subs	r3, #1
 800a392:	b29a      	uxth	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a398:	e042      	b.n	800a420 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a39a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f000 fc1e 	bl	800abe0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e04c      	b.n	800a448 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	691a      	ldr	r2, [r3, #16]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b8:	b2d2      	uxtb	r2, r2
 800a3ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c0:	1c5a      	adds	r2, r3, #1
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	f003 0304 	and.w	r3, r3, #4
 800a3ea:	2b04      	cmp	r3, #4
 800a3ec:	d118      	bne.n	800a420 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	691a      	ldr	r2, [r3, #16]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f8:	b2d2      	uxtb	r2, r2
 800a3fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a40a:	3b01      	subs	r3, #1
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a416:	b29b      	uxth	r3, r3
 800a418:	3b01      	subs	r3, #1
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a424:	2b00      	cmp	r3, #0
 800a426:	f47f ae94 	bne.w	800a152 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2220      	movs	r2, #32
 800a42e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	e000      	b.n	800a448 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a446:	2302      	movs	r3, #2
  }
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3728      	adds	r7, #40	; 0x28
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	00010004 	.word	0x00010004
 800a454:	200009b4 	.word	0x200009b4
 800a458:	14f8b589 	.word	0x14f8b589

0800a45c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a46a:	b2db      	uxtb	r3, r3
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	bc80      	pop	{r7}
 800a474:	4770      	bx	lr

0800a476 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a476:	b480      	push	{r7}
 800a478:	b083      	sub	sp, #12
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a482:	4618      	mov	r0, r3
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	bc80      	pop	{r7}
 800a48a:	4770      	bx	lr

0800a48c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b088      	sub	sp, #32
 800a490:	af02      	add	r7, sp, #8
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	607a      	str	r2, [r7, #4]
 800a496:	603b      	str	r3, [r7, #0]
 800a498:	460b      	mov	r3, r1
 800a49a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	2b08      	cmp	r3, #8
 800a4a6:	d006      	beq.n	800a4b6 <I2C_MasterRequestWrite+0x2a>
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d003      	beq.n	800a4b6 <I2C_MasterRequestWrite+0x2a>
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a4b4:	d108      	bne.n	800a4c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	e00b      	b.n	800a4e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4cc:	2b12      	cmp	r3, #18
 800a4ce:	d107      	bne.n	800a4e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f000 f9cd 	bl	800a88c <I2C_WaitOnFlagUntilTimeout>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00d      	beq.n	800a514 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a506:	d103      	bne.n	800a510 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a50e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a510:	2303      	movs	r3, #3
 800a512:	e035      	b.n	800a580 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a51c:	d108      	bne.n	800a530 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a51e:	897b      	ldrh	r3, [r7, #10]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	461a      	mov	r2, r3
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a52c:	611a      	str	r2, [r3, #16]
 800a52e:	e01b      	b.n	800a568 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a530:	897b      	ldrh	r3, [r7, #10]
 800a532:	11db      	asrs	r3, r3, #7
 800a534:	b2db      	uxtb	r3, r3
 800a536:	f003 0306 	and.w	r3, r3, #6
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	f063 030f 	orn	r3, r3, #15
 800a540:	b2da      	uxtb	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	490e      	ldr	r1, [pc, #56]	; (800a588 <I2C_MasterRequestWrite+0xfc>)
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f000 fa16 	bl	800a980 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e010      	b.n	800a580 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a55e:	897b      	ldrh	r3, [r7, #10]
 800a560:	b2da      	uxtb	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	4907      	ldr	r1, [pc, #28]	; (800a58c <I2C_MasterRequestWrite+0x100>)
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 fa06 	bl	800a980 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e000      	b.n	800a580 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3718      	adds	r7, #24
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	00010008 	.word	0x00010008
 800a58c:	00010002 	.word	0x00010002

0800a590 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af02      	add	r7, sp, #8
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	4608      	mov	r0, r1
 800a59a:	4611      	mov	r1, r2
 800a59c:	461a      	mov	r2, r3
 800a59e:	4603      	mov	r3, r0
 800a5a0:	817b      	strh	r3, [r7, #10]
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	813b      	strh	r3, [r7, #8]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a5b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	6a3b      	ldr	r3, [r7, #32]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f000 f960 	bl	800a88c <I2C_WaitOnFlagUntilTimeout>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00d      	beq.n	800a5ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5e0:	d103      	bne.n	800a5ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	e05f      	b.n	800a6ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a5ee:	897b      	ldrh	r3, [r7, #10]
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a5fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	6a3a      	ldr	r2, [r7, #32]
 800a602:	492d      	ldr	r1, [pc, #180]	; (800a6b8 <I2C_RequestMemoryWrite+0x128>)
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 f9bb 	bl	800a980 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d001      	beq.n	800a614 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e04c      	b.n	800a6ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a614:	2300      	movs	r3, #0
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	617b      	str	r3, [r7, #20]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	699b      	ldr	r3, [r3, #24]
 800a626:	617b      	str	r3, [r7, #20]
 800a628:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a62c:	6a39      	ldr	r1, [r7, #32]
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f000 fa46 	bl	800aac0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00d      	beq.n	800a656 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63e:	2b04      	cmp	r3, #4
 800a640:	d107      	bne.n	800a652 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a650:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	e02b      	b.n	800a6ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a656:	88fb      	ldrh	r3, [r7, #6]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d105      	bne.n	800a668 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a65c:	893b      	ldrh	r3, [r7, #8]
 800a65e:	b2da      	uxtb	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	611a      	str	r2, [r3, #16]
 800a666:	e021      	b.n	800a6ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a668:	893b      	ldrh	r3, [r7, #8]
 800a66a:	0a1b      	lsrs	r3, r3, #8
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a678:	6a39      	ldr	r1, [r7, #32]
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f000 fa20 	bl	800aac0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00d      	beq.n	800a6a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68a:	2b04      	cmp	r3, #4
 800a68c:	d107      	bne.n	800a69e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a69c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e005      	b.n	800a6ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a6a2:	893b      	ldrh	r3, [r7, #8]
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	00010002 	.word	0x00010002

0800a6bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b088      	sub	sp, #32
 800a6c0:	af02      	add	r7, sp, #8
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	4608      	mov	r0, r1
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	817b      	strh	r3, [r7, #10]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	813b      	strh	r3, [r7, #8]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a6e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 f8c2 	bl	800a88c <I2C_WaitOnFlagUntilTimeout>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00d      	beq.n	800a72a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a71c:	d103      	bne.n	800a726 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a724:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e0aa      	b.n	800a880 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a72a:	897b      	ldrh	r3, [r7, #10]
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	461a      	mov	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a738:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	6a3a      	ldr	r2, [r7, #32]
 800a73e:	4952      	ldr	r1, [pc, #328]	; (800a888 <I2C_RequestMemoryRead+0x1cc>)
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 f91d 	bl	800a980 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d001      	beq.n	800a750 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	e097      	b.n	800a880 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a750:	2300      	movs	r3, #0
 800a752:	617b      	str	r3, [r7, #20]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	617b      	str	r3, [r7, #20]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	617b      	str	r3, [r7, #20]
 800a764:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a768:	6a39      	ldr	r1, [r7, #32]
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f000 f9a8 	bl	800aac0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00d      	beq.n	800a792 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77a:	2b04      	cmp	r3, #4
 800a77c:	d107      	bne.n	800a78e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a78c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	e076      	b.n	800a880 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a792:	88fb      	ldrh	r3, [r7, #6]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d105      	bne.n	800a7a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a798:	893b      	ldrh	r3, [r7, #8]
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	611a      	str	r2, [r3, #16]
 800a7a2:	e021      	b.n	800a7e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a7a4:	893b      	ldrh	r3, [r7, #8]
 800a7a6:	0a1b      	lsrs	r3, r3, #8
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b4:	6a39      	ldr	r1, [r7, #32]
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f000 f982 	bl	800aac0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00d      	beq.n	800a7de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c6:	2b04      	cmp	r3, #4
 800a7c8:	d107      	bne.n	800a7da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e050      	b.n	800a880 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a7de:	893b      	ldrh	r3, [r7, #8]
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ea:	6a39      	ldr	r1, [r7, #32]
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f000 f967 	bl	800aac0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00d      	beq.n	800a814 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7fc:	2b04      	cmp	r3, #4
 800a7fe:	d107      	bne.n	800a810 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a80e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e035      	b.n	800a880 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a822:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	6a3b      	ldr	r3, [r7, #32]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f000 f82b 	bl	800a88c <I2C_WaitOnFlagUntilTimeout>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00d      	beq.n	800a858 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a84a:	d103      	bne.n	800a854 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a852:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a854:	2303      	movs	r3, #3
 800a856:	e013      	b.n	800a880 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a858:	897b      	ldrh	r3, [r7, #10]
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	f043 0301 	orr.w	r3, r3, #1
 800a860:	b2da      	uxtb	r2, r3
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86a:	6a3a      	ldr	r2, [r7, #32]
 800a86c:	4906      	ldr	r1, [pc, #24]	; (800a888 <I2C_RequestMemoryRead+0x1cc>)
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 f886 	bl	800a980 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e000      	b.n	800a880 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3718      	adds	r7, #24
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	00010002 	.word	0x00010002

0800a88c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	603b      	str	r3, [r7, #0]
 800a898:	4613      	mov	r3, r2
 800a89a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a89c:	e048      	b.n	800a930 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a4:	d044      	beq.n	800a930 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8a6:	f7fe f9e3 	bl	8008c70 <HAL_GetTick>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d302      	bcc.n	800a8bc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d139      	bne.n	800a930 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	0c1b      	lsrs	r3, r3, #16
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d10d      	bne.n	800a8e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	43da      	mvns	r2, r3
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	4013      	ands	r3, r2
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	bf0c      	ite	eq
 800a8d8:	2301      	moveq	r3, #1
 800a8da:	2300      	movne	r3, #0
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	461a      	mov	r2, r3
 800a8e0:	e00c      	b.n	800a8fc <I2C_WaitOnFlagUntilTimeout+0x70>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	43da      	mvns	r2, r3
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bf0c      	ite	eq
 800a8f4:	2301      	moveq	r3, #1
 800a8f6:	2300      	movne	r3, #0
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	79fb      	ldrb	r3, [r7, #7]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d116      	bne.n	800a930 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2220      	movs	r2, #32
 800a90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91c:	f043 0220 	orr.w	r2, r3, #32
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e023      	b.n	800a978 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	0c1b      	lsrs	r3, r3, #16
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b01      	cmp	r3, #1
 800a938:	d10d      	bne.n	800a956 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	43da      	mvns	r2, r3
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	4013      	ands	r3, r2
 800a946:	b29b      	uxth	r3, r3
 800a948:	2b00      	cmp	r3, #0
 800a94a:	bf0c      	ite	eq
 800a94c:	2301      	moveq	r3, #1
 800a94e:	2300      	movne	r3, #0
 800a950:	b2db      	uxtb	r3, r3
 800a952:	461a      	mov	r2, r3
 800a954:	e00c      	b.n	800a970 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	699b      	ldr	r3, [r3, #24]
 800a95c:	43da      	mvns	r2, r3
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	4013      	ands	r3, r2
 800a962:	b29b      	uxth	r3, r3
 800a964:	2b00      	cmp	r3, #0
 800a966:	bf0c      	ite	eq
 800a968:	2301      	moveq	r3, #1
 800a96a:	2300      	movne	r3, #0
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	461a      	mov	r2, r3
 800a970:	79fb      	ldrb	r3, [r7, #7]
 800a972:	429a      	cmp	r2, r3
 800a974:	d093      	beq.n	800a89e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
 800a98c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a98e:	e071      	b.n	800aa74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	695b      	ldr	r3, [r3, #20]
 800a996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a99a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a99e:	d123      	bne.n	800a9e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a9b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d4:	f043 0204 	orr.w	r2, r3, #4
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e067      	b.n	800aab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ee:	d041      	beq.n	800aa74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9f0:	f7fe f93e 	bl	8008c70 <HAL_GetTick>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	1ad3      	subs	r3, r2, r3
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d302      	bcc.n	800aa06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d136      	bne.n	800aa74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	0c1b      	lsrs	r3, r3, #16
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d10c      	bne.n	800aa2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	695b      	ldr	r3, [r3, #20]
 800aa16:	43da      	mvns	r2, r3
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	bf14      	ite	ne
 800aa22:	2301      	movne	r3, #1
 800aa24:	2300      	moveq	r3, #0
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	e00b      	b.n	800aa42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	43da      	mvns	r2, r3
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	4013      	ands	r3, r2
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	bf14      	ite	ne
 800aa3c:	2301      	movne	r3, #1
 800aa3e:	2300      	moveq	r3, #0
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d016      	beq.n	800aa74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2220      	movs	r2, #32
 800aa50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa60:	f043 0220 	orr.w	r2, r3, #32
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	e021      	b.n	800aab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	0c1b      	lsrs	r3, r3, #16
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d10c      	bne.n	800aa98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	695b      	ldr	r3, [r3, #20]
 800aa84:	43da      	mvns	r2, r3
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	4013      	ands	r3, r2
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bf14      	ite	ne
 800aa90:	2301      	movne	r3, #1
 800aa92:	2300      	moveq	r3, #0
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	e00b      	b.n	800aab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	43da      	mvns	r2, r3
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	bf14      	ite	ne
 800aaaa:	2301      	movne	r3, #1
 800aaac:	2300      	moveq	r3, #0
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f47f af6d 	bne.w	800a990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aacc:	e034      	b.n	800ab38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f000 f8e3 	bl	800ac9a <I2C_IsAcknowledgeFailed>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d001      	beq.n	800aade <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e034      	b.n	800ab48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae4:	d028      	beq.n	800ab38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aae6:	f7fe f8c3 	bl	8008c70 <HAL_GetTick>
 800aaea:	4602      	mov	r2, r0
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d302      	bcc.n	800aafc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d11d      	bne.n	800ab38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab06:	2b80      	cmp	r3, #128	; 0x80
 800ab08:	d016      	beq.n	800ab38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2220      	movs	r2, #32
 800ab14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab24:	f043 0220 	orr.w	r2, r3, #32
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	e007      	b.n	800ab48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab42:	2b80      	cmp	r3, #128	; 0x80
 800ab44:	d1c3      	bne.n	800aace <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab5c:	e034      	b.n	800abc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 f89b 	bl	800ac9a <I2C_IsAcknowledgeFailed>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e034      	b.n	800abd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab74:	d028      	beq.n	800abc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab76:	f7fe f87b 	bl	8008c70 <HAL_GetTick>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d302      	bcc.n	800ab8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d11d      	bne.n	800abc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	f003 0304 	and.w	r3, r3, #4
 800ab96:	2b04      	cmp	r3, #4
 800ab98:	d016      	beq.n	800abc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2220      	movs	r2, #32
 800aba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2200      	movs	r2, #0
 800abac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb4:	f043 0220 	orr.w	r2, r3, #32
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e007      	b.n	800abd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	f003 0304 	and.w	r3, r3, #4
 800abd2:	2b04      	cmp	r3, #4
 800abd4:	d1c3      	bne.n	800ab5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800abec:	e049      	b.n	800ac82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	695b      	ldr	r3, [r3, #20]
 800abf4:	f003 0310 	and.w	r3, r3, #16
 800abf8:	2b10      	cmp	r3, #16
 800abfa:	d119      	bne.n	800ac30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f06f 0210 	mvn.w	r2, #16
 800ac04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2220      	movs	r2, #32
 800ac10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e030      	b.n	800ac92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac30:	f7fe f81e 	bl	8008c70 <HAL_GetTick>
 800ac34:	4602      	mov	r2, r0
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d302      	bcc.n	800ac46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d11d      	bne.n	800ac82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	695b      	ldr	r3, [r3, #20]
 800ac4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac50:	2b40      	cmp	r3, #64	; 0x40
 800ac52:	d016      	beq.n	800ac82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2220      	movs	r2, #32
 800ac5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6e:	f043 0220 	orr.w	r2, r3, #32
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e007      	b.n	800ac92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	695b      	ldr	r3, [r3, #20]
 800ac88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac8c:	2b40      	cmp	r3, #64	; 0x40
 800ac8e:	d1ae      	bne.n	800abee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	695b      	ldr	r3, [r3, #20]
 800aca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acb0:	d11b      	bne.n	800acea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800acba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2220      	movs	r2, #32
 800acc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd6:	f043 0204 	orr.w	r2, r3, #4
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e000      	b.n	800acec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bc80      	pop	{r7}
 800acf4:	4770      	bx	lr
	...

0800acf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d101      	bne.n	800ad0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	e272      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 0301 	and.w	r3, r3, #1
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f000 8087 	beq.w	800ae26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ad18:	4b92      	ldr	r3, [pc, #584]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	f003 030c 	and.w	r3, r3, #12
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	d00c      	beq.n	800ad3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ad24:	4b8f      	ldr	r3, [pc, #572]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	f003 030c 	and.w	r3, r3, #12
 800ad2c:	2b08      	cmp	r3, #8
 800ad2e:	d112      	bne.n	800ad56 <HAL_RCC_OscConfig+0x5e>
 800ad30:	4b8c      	ldr	r3, [pc, #560]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad3c:	d10b      	bne.n	800ad56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad3e:	4b89      	ldr	r3, [pc, #548]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d06c      	beq.n	800ae24 <HAL_RCC_OscConfig+0x12c>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d168      	bne.n	800ae24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e24c      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad5e:	d106      	bne.n	800ad6e <HAL_RCC_OscConfig+0x76>
 800ad60:	4b80      	ldr	r3, [pc, #512]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a7f      	ldr	r2, [pc, #508]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ad66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad6a:	6013      	str	r3, [r2, #0]
 800ad6c:	e02e      	b.n	800adcc <HAL_RCC_OscConfig+0xd4>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d10c      	bne.n	800ad90 <HAL_RCC_OscConfig+0x98>
 800ad76:	4b7b      	ldr	r3, [pc, #492]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a7a      	ldr	r2, [pc, #488]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ad7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad80:	6013      	str	r3, [r2, #0]
 800ad82:	4b78      	ldr	r3, [pc, #480]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a77      	ldr	r2, [pc, #476]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ad88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad8c:	6013      	str	r3, [r2, #0]
 800ad8e:	e01d      	b.n	800adcc <HAL_RCC_OscConfig+0xd4>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad98:	d10c      	bne.n	800adb4 <HAL_RCC_OscConfig+0xbc>
 800ad9a:	4b72      	ldr	r3, [pc, #456]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a71      	ldr	r2, [pc, #452]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ada0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ada4:	6013      	str	r3, [r2, #0]
 800ada6:	4b6f      	ldr	r3, [pc, #444]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a6e      	ldr	r2, [pc, #440]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800adac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adb0:	6013      	str	r3, [r2, #0]
 800adb2:	e00b      	b.n	800adcc <HAL_RCC_OscConfig+0xd4>
 800adb4:	4b6b      	ldr	r3, [pc, #428]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a6a      	ldr	r2, [pc, #424]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800adba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800adbe:	6013      	str	r3, [r2, #0]
 800adc0:	4b68      	ldr	r3, [pc, #416]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a67      	ldr	r2, [pc, #412]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800adc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800adca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d013      	beq.n	800adfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800add4:	f7fd ff4c 	bl	8008c70 <HAL_GetTick>
 800add8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adda:	e008      	b.n	800adee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800addc:	f7fd ff48 	bl	8008c70 <HAL_GetTick>
 800ade0:	4602      	mov	r2, r0
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	2b64      	cmp	r3, #100	; 0x64
 800ade8:	d901      	bls.n	800adee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800adea:	2303      	movs	r3, #3
 800adec:	e200      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adee:	4b5d      	ldr	r3, [pc, #372]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0f0      	beq.n	800addc <HAL_RCC_OscConfig+0xe4>
 800adfa:	e014      	b.n	800ae26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800adfc:	f7fd ff38 	bl	8008c70 <HAL_GetTick>
 800ae00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae02:	e008      	b.n	800ae16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae04:	f7fd ff34 	bl	8008c70 <HAL_GetTick>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	1ad3      	subs	r3, r2, r3
 800ae0e:	2b64      	cmp	r3, #100	; 0x64
 800ae10:	d901      	bls.n	800ae16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ae12:	2303      	movs	r3, #3
 800ae14:	e1ec      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae16:	4b53      	ldr	r3, [pc, #332]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1f0      	bne.n	800ae04 <HAL_RCC_OscConfig+0x10c>
 800ae22:	e000      	b.n	800ae26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 0302 	and.w	r3, r3, #2
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d063      	beq.n	800aefa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ae32:	4b4c      	ldr	r3, [pc, #304]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	f003 030c 	and.w	r3, r3, #12
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00b      	beq.n	800ae56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ae3e:	4b49      	ldr	r3, [pc, #292]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	f003 030c 	and.w	r3, r3, #12
 800ae46:	2b08      	cmp	r3, #8
 800ae48:	d11c      	bne.n	800ae84 <HAL_RCC_OscConfig+0x18c>
 800ae4a:	4b46      	ldr	r3, [pc, #280]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d116      	bne.n	800ae84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae56:	4b43      	ldr	r3, [pc, #268]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 0302 	and.w	r3, r3, #2
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d005      	beq.n	800ae6e <HAL_RCC_OscConfig+0x176>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d001      	beq.n	800ae6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e1c0      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae6e:	4b3d      	ldr	r3, [pc, #244]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	00db      	lsls	r3, r3, #3
 800ae7c:	4939      	ldr	r1, [pc, #228]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae82:	e03a      	b.n	800aefa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	691b      	ldr	r3, [r3, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d020      	beq.n	800aece <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ae8c:	4b36      	ldr	r3, [pc, #216]	; (800af68 <HAL_RCC_OscConfig+0x270>)
 800ae8e:	2201      	movs	r2, #1
 800ae90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae92:	f7fd feed 	bl	8008c70 <HAL_GetTick>
 800ae96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae98:	e008      	b.n	800aeac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae9a:	f7fd fee9 	bl	8008c70 <HAL_GetTick>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	d901      	bls.n	800aeac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	e1a1      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aeac:	4b2d      	ldr	r3, [pc, #180]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f003 0302 	and.w	r3, r3, #2
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d0f0      	beq.n	800ae9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aeb8:	4b2a      	ldr	r3, [pc, #168]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	695b      	ldr	r3, [r3, #20]
 800aec4:	00db      	lsls	r3, r3, #3
 800aec6:	4927      	ldr	r1, [pc, #156]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800aec8:	4313      	orrs	r3, r2
 800aeca:	600b      	str	r3, [r1, #0]
 800aecc:	e015      	b.n	800aefa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aece:	4b26      	ldr	r3, [pc, #152]	; (800af68 <HAL_RCC_OscConfig+0x270>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aed4:	f7fd fecc 	bl	8008c70 <HAL_GetTick>
 800aed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aeda:	e008      	b.n	800aeee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aedc:	f7fd fec8 	bl	8008c70 <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d901      	bls.n	800aeee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e180      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aeee:	4b1d      	ldr	r3, [pc, #116]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f003 0302 	and.w	r3, r3, #2
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1f0      	bne.n	800aedc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f003 0308 	and.w	r3, r3, #8
 800af02:	2b00      	cmp	r3, #0
 800af04:	d03a      	beq.n	800af7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	699b      	ldr	r3, [r3, #24]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d019      	beq.n	800af42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af0e:	4b17      	ldr	r3, [pc, #92]	; (800af6c <HAL_RCC_OscConfig+0x274>)
 800af10:	2201      	movs	r2, #1
 800af12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af14:	f7fd feac 	bl	8008c70 <HAL_GetTick>
 800af18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af1a:	e008      	b.n	800af2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af1c:	f7fd fea8 	bl	8008c70 <HAL_GetTick>
 800af20:	4602      	mov	r2, r0
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	1ad3      	subs	r3, r2, r3
 800af26:	2b02      	cmp	r3, #2
 800af28:	d901      	bls.n	800af2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e160      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af2e:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <HAL_RCC_OscConfig+0x26c>)
 800af30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0f0      	beq.n	800af1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800af3a:	2001      	movs	r0, #1
 800af3c:	f000 face 	bl	800b4dc <RCC_Delay>
 800af40:	e01c      	b.n	800af7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af42:	4b0a      	ldr	r3, [pc, #40]	; (800af6c <HAL_RCC_OscConfig+0x274>)
 800af44:	2200      	movs	r2, #0
 800af46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af48:	f7fd fe92 	bl	8008c70 <HAL_GetTick>
 800af4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af4e:	e00f      	b.n	800af70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af50:	f7fd fe8e 	bl	8008c70 <HAL_GetTick>
 800af54:	4602      	mov	r2, r0
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	1ad3      	subs	r3, r2, r3
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	d908      	bls.n	800af70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800af5e:	2303      	movs	r3, #3
 800af60:	e146      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
 800af62:	bf00      	nop
 800af64:	40021000 	.word	0x40021000
 800af68:	42420000 	.word	0x42420000
 800af6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af70:	4b92      	ldr	r3, [pc, #584]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	f003 0302 	and.w	r3, r3, #2
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1e9      	bne.n	800af50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f003 0304 	and.w	r3, r3, #4
 800af84:	2b00      	cmp	r3, #0
 800af86:	f000 80a6 	beq.w	800b0d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af8a:	2300      	movs	r3, #0
 800af8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af8e:	4b8b      	ldr	r3, [pc, #556]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800af90:	69db      	ldr	r3, [r3, #28]
 800af92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10d      	bne.n	800afb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af9a:	4b88      	ldr	r3, [pc, #544]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800af9c:	69db      	ldr	r3, [r3, #28]
 800af9e:	4a87      	ldr	r2, [pc, #540]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800afa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afa4:	61d3      	str	r3, [r2, #28]
 800afa6:	4b85      	ldr	r3, [pc, #532]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800afa8:	69db      	ldr	r3, [r3, #28]
 800afaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afae:	60bb      	str	r3, [r7, #8]
 800afb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800afb2:	2301      	movs	r3, #1
 800afb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800afb6:	4b82      	ldr	r3, [pc, #520]	; (800b1c0 <HAL_RCC_OscConfig+0x4c8>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d118      	bne.n	800aff4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800afc2:	4b7f      	ldr	r3, [pc, #508]	; (800b1c0 <HAL_RCC_OscConfig+0x4c8>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a7e      	ldr	r2, [pc, #504]	; (800b1c0 <HAL_RCC_OscConfig+0x4c8>)
 800afc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800afce:	f7fd fe4f 	bl	8008c70 <HAL_GetTick>
 800afd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800afd4:	e008      	b.n	800afe8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afd6:	f7fd fe4b 	bl	8008c70 <HAL_GetTick>
 800afda:	4602      	mov	r2, r0
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	2b64      	cmp	r3, #100	; 0x64
 800afe2:	d901      	bls.n	800afe8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800afe4:	2303      	movs	r3, #3
 800afe6:	e103      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800afe8:	4b75      	ldr	r3, [pc, #468]	; (800b1c0 <HAL_RCC_OscConfig+0x4c8>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d0f0      	beq.n	800afd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d106      	bne.n	800b00a <HAL_RCC_OscConfig+0x312>
 800affc:	4b6f      	ldr	r3, [pc, #444]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	4a6e      	ldr	r2, [pc, #440]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b002:	f043 0301 	orr.w	r3, r3, #1
 800b006:	6213      	str	r3, [r2, #32]
 800b008:	e02d      	b.n	800b066 <HAL_RCC_OscConfig+0x36e>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10c      	bne.n	800b02c <HAL_RCC_OscConfig+0x334>
 800b012:	4b6a      	ldr	r3, [pc, #424]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	4a69      	ldr	r2, [pc, #420]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b018:	f023 0301 	bic.w	r3, r3, #1
 800b01c:	6213      	str	r3, [r2, #32]
 800b01e:	4b67      	ldr	r3, [pc, #412]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	4a66      	ldr	r2, [pc, #408]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b024:	f023 0304 	bic.w	r3, r3, #4
 800b028:	6213      	str	r3, [r2, #32]
 800b02a:	e01c      	b.n	800b066 <HAL_RCC_OscConfig+0x36e>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	2b05      	cmp	r3, #5
 800b032:	d10c      	bne.n	800b04e <HAL_RCC_OscConfig+0x356>
 800b034:	4b61      	ldr	r3, [pc, #388]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b036:	6a1b      	ldr	r3, [r3, #32]
 800b038:	4a60      	ldr	r2, [pc, #384]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b03a:	f043 0304 	orr.w	r3, r3, #4
 800b03e:	6213      	str	r3, [r2, #32]
 800b040:	4b5e      	ldr	r3, [pc, #376]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b042:	6a1b      	ldr	r3, [r3, #32]
 800b044:	4a5d      	ldr	r2, [pc, #372]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b046:	f043 0301 	orr.w	r3, r3, #1
 800b04a:	6213      	str	r3, [r2, #32]
 800b04c:	e00b      	b.n	800b066 <HAL_RCC_OscConfig+0x36e>
 800b04e:	4b5b      	ldr	r3, [pc, #364]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	4a5a      	ldr	r2, [pc, #360]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b054:	f023 0301 	bic.w	r3, r3, #1
 800b058:	6213      	str	r3, [r2, #32]
 800b05a:	4b58      	ldr	r3, [pc, #352]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	4a57      	ldr	r2, [pc, #348]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b060:	f023 0304 	bic.w	r3, r3, #4
 800b064:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d015      	beq.n	800b09a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b06e:	f7fd fdff 	bl	8008c70 <HAL_GetTick>
 800b072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b074:	e00a      	b.n	800b08c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b076:	f7fd fdfb 	bl	8008c70 <HAL_GetTick>
 800b07a:	4602      	mov	r2, r0
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	1ad3      	subs	r3, r2, r3
 800b080:	f241 3288 	movw	r2, #5000	; 0x1388
 800b084:	4293      	cmp	r3, r2
 800b086:	d901      	bls.n	800b08c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b088:	2303      	movs	r3, #3
 800b08a:	e0b1      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b08c:	4b4b      	ldr	r3, [pc, #300]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b08e:	6a1b      	ldr	r3, [r3, #32]
 800b090:	f003 0302 	and.w	r3, r3, #2
 800b094:	2b00      	cmp	r3, #0
 800b096:	d0ee      	beq.n	800b076 <HAL_RCC_OscConfig+0x37e>
 800b098:	e014      	b.n	800b0c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b09a:	f7fd fde9 	bl	8008c70 <HAL_GetTick>
 800b09e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b0a0:	e00a      	b.n	800b0b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0a2:	f7fd fde5 	bl	8008c70 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d901      	bls.n	800b0b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	e09b      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b0b8:	4b40      	ldr	r3, [pc, #256]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b0ba:	6a1b      	ldr	r3, [r3, #32]
 800b0bc:	f003 0302 	and.w	r3, r3, #2
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1ee      	bne.n	800b0a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b0c4:	7dfb      	ldrb	r3, [r7, #23]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d105      	bne.n	800b0d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b0ca:	4b3c      	ldr	r3, [pc, #240]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b0cc:	69db      	ldr	r3, [r3, #28]
 800b0ce:	4a3b      	ldr	r2, [pc, #236]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b0d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	69db      	ldr	r3, [r3, #28]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f000 8087 	beq.w	800b1ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b0e0:	4b36      	ldr	r3, [pc, #216]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	f003 030c 	and.w	r3, r3, #12
 800b0e8:	2b08      	cmp	r3, #8
 800b0ea:	d061      	beq.n	800b1b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	69db      	ldr	r3, [r3, #28]
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	d146      	bne.n	800b182 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0f4:	4b33      	ldr	r3, [pc, #204]	; (800b1c4 <HAL_RCC_OscConfig+0x4cc>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0fa:	f7fd fdb9 	bl	8008c70 <HAL_GetTick>
 800b0fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b100:	e008      	b.n	800b114 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b102:	f7fd fdb5 	bl	8008c70 <HAL_GetTick>
 800b106:	4602      	mov	r2, r0
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d901      	bls.n	800b114 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b110:	2303      	movs	r3, #3
 800b112:	e06d      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b114:	4b29      	ldr	r3, [pc, #164]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d1f0      	bne.n	800b102 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a1b      	ldr	r3, [r3, #32]
 800b124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b128:	d108      	bne.n	800b13c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b12a:	4b24      	ldr	r3, [pc, #144]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	4921      	ldr	r1, [pc, #132]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b138:	4313      	orrs	r3, r2
 800b13a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b13c:	4b1f      	ldr	r3, [pc, #124]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a19      	ldr	r1, [r3, #32]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	430b      	orrs	r3, r1
 800b14e:	491b      	ldr	r1, [pc, #108]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b150:	4313      	orrs	r3, r2
 800b152:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b154:	4b1b      	ldr	r3, [pc, #108]	; (800b1c4 <HAL_RCC_OscConfig+0x4cc>)
 800b156:	2201      	movs	r2, #1
 800b158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b15a:	f7fd fd89 	bl	8008c70 <HAL_GetTick>
 800b15e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b160:	e008      	b.n	800b174 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b162:	f7fd fd85 	bl	8008c70 <HAL_GetTick>
 800b166:	4602      	mov	r2, r0
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d901      	bls.n	800b174 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b170:	2303      	movs	r3, #3
 800b172:	e03d      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b174:	4b11      	ldr	r3, [pc, #68]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d0f0      	beq.n	800b162 <HAL_RCC_OscConfig+0x46a>
 800b180:	e035      	b.n	800b1ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b182:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <HAL_RCC_OscConfig+0x4cc>)
 800b184:	2200      	movs	r2, #0
 800b186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b188:	f7fd fd72 	bl	8008c70 <HAL_GetTick>
 800b18c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b18e:	e008      	b.n	800b1a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b190:	f7fd fd6e 	bl	8008c70 <HAL_GetTick>
 800b194:	4602      	mov	r2, r0
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d901      	bls.n	800b1a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e026      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b1a2:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <HAL_RCC_OscConfig+0x4c4>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1f0      	bne.n	800b190 <HAL_RCC_OscConfig+0x498>
 800b1ae:	e01e      	b.n	800b1ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	69db      	ldr	r3, [r3, #28]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d107      	bne.n	800b1c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e019      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
 800b1bc:	40021000 	.word	0x40021000
 800b1c0:	40007000 	.word	0x40007000
 800b1c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b1c8:	4b0b      	ldr	r3, [pc, #44]	; (800b1f8 <HAL_RCC_OscConfig+0x500>)
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a1b      	ldr	r3, [r3, #32]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d106      	bne.n	800b1ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d001      	beq.n	800b1ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e000      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3718      	adds	r7, #24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	40021000 	.word	0x40021000

0800b1fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	e0d0      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b210:	4b6a      	ldr	r3, [pc, #424]	; (800b3bc <HAL_RCC_ClockConfig+0x1c0>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 0307 	and.w	r3, r3, #7
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d910      	bls.n	800b240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b21e:	4b67      	ldr	r3, [pc, #412]	; (800b3bc <HAL_RCC_ClockConfig+0x1c0>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f023 0207 	bic.w	r2, r3, #7
 800b226:	4965      	ldr	r1, [pc, #404]	; (800b3bc <HAL_RCC_ClockConfig+0x1c0>)
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b22e:	4b63      	ldr	r3, [pc, #396]	; (800b3bc <HAL_RCC_ClockConfig+0x1c0>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f003 0307 	and.w	r3, r3, #7
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d001      	beq.n	800b240 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	e0b8      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 0302 	and.w	r3, r3, #2
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d020      	beq.n	800b28e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 0304 	and.w	r3, r3, #4
 800b254:	2b00      	cmp	r3, #0
 800b256:	d005      	beq.n	800b264 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b258:	4b59      	ldr	r3, [pc, #356]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	4a58      	ldr	r2, [pc, #352]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b25e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b262:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f003 0308 	and.w	r3, r3, #8
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d005      	beq.n	800b27c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b270:	4b53      	ldr	r3, [pc, #332]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	4a52      	ldr	r2, [pc, #328]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b276:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b27a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b27c:	4b50      	ldr	r3, [pc, #320]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	494d      	ldr	r1, [pc, #308]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b28a:	4313      	orrs	r3, r2
 800b28c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	2b00      	cmp	r3, #0
 800b298:	d040      	beq.n	800b31c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d107      	bne.n	800b2b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2a2:	4b47      	ldr	r3, [pc, #284]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d115      	bne.n	800b2da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e07f      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	d107      	bne.n	800b2ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2ba:	4b41      	ldr	r3, [pc, #260]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d109      	bne.n	800b2da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e073      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2ca:	4b3d      	ldr	r3, [pc, #244]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 0302 	and.w	r3, r3, #2
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e06b      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b2da:	4b39      	ldr	r3, [pc, #228]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	f023 0203 	bic.w	r2, r3, #3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	4936      	ldr	r1, [pc, #216]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b2ec:	f7fd fcc0 	bl	8008c70 <HAL_GetTick>
 800b2f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2f2:	e00a      	b.n	800b30a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2f4:	f7fd fcbc 	bl	8008c70 <HAL_GetTick>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	1ad3      	subs	r3, r2, r3
 800b2fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800b302:	4293      	cmp	r3, r2
 800b304:	d901      	bls.n	800b30a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b306:	2303      	movs	r3, #3
 800b308:	e053      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b30a:	4b2d      	ldr	r3, [pc, #180]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	f003 020c 	and.w	r2, r3, #12
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	429a      	cmp	r2, r3
 800b31a:	d1eb      	bne.n	800b2f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b31c:	4b27      	ldr	r3, [pc, #156]	; (800b3bc <HAL_RCC_ClockConfig+0x1c0>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 0307 	and.w	r3, r3, #7
 800b324:	683a      	ldr	r2, [r7, #0]
 800b326:	429a      	cmp	r2, r3
 800b328:	d210      	bcs.n	800b34c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b32a:	4b24      	ldr	r3, [pc, #144]	; (800b3bc <HAL_RCC_ClockConfig+0x1c0>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f023 0207 	bic.w	r2, r3, #7
 800b332:	4922      	ldr	r1, [pc, #136]	; (800b3bc <HAL_RCC_ClockConfig+0x1c0>)
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	4313      	orrs	r3, r2
 800b338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b33a:	4b20      	ldr	r3, [pc, #128]	; (800b3bc <HAL_RCC_ClockConfig+0x1c0>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f003 0307 	and.w	r3, r3, #7
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	429a      	cmp	r2, r3
 800b346:	d001      	beq.n	800b34c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	e032      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f003 0304 	and.w	r3, r3, #4
 800b354:	2b00      	cmp	r3, #0
 800b356:	d008      	beq.n	800b36a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b358:	4b19      	ldr	r3, [pc, #100]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	4916      	ldr	r1, [pc, #88]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b366:	4313      	orrs	r3, r2
 800b368:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 0308 	and.w	r3, r3, #8
 800b372:	2b00      	cmp	r3, #0
 800b374:	d009      	beq.n	800b38a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b376:	4b12      	ldr	r3, [pc, #72]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	00db      	lsls	r3, r3, #3
 800b384:	490e      	ldr	r1, [pc, #56]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b386:	4313      	orrs	r3, r2
 800b388:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b38a:	f000 f821 	bl	800b3d0 <HAL_RCC_GetSysClockFreq>
 800b38e:	4602      	mov	r2, r0
 800b390:	4b0b      	ldr	r3, [pc, #44]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	091b      	lsrs	r3, r3, #4
 800b396:	f003 030f 	and.w	r3, r3, #15
 800b39a:	490a      	ldr	r1, [pc, #40]	; (800b3c4 <HAL_RCC_ClockConfig+0x1c8>)
 800b39c:	5ccb      	ldrb	r3, [r1, r3]
 800b39e:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a2:	4a09      	ldr	r2, [pc, #36]	; (800b3c8 <HAL_RCC_ClockConfig+0x1cc>)
 800b3a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b3a6:	4b09      	ldr	r3, [pc, #36]	; (800b3cc <HAL_RCC_ClockConfig+0x1d0>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fd fc1e 	bl	8008bec <HAL_InitTick>

  return HAL_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	40022000 	.word	0x40022000
 800b3c0:	40021000 	.word	0x40021000
 800b3c4:	0800d824 	.word	0x0800d824
 800b3c8:	200009b4 	.word	0x200009b4
 800b3cc:	200009b8 	.word	0x200009b8

0800b3d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b087      	sub	sp, #28
 800b3d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	60fb      	str	r3, [r7, #12]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60bb      	str	r3, [r7, #8]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	617b      	str	r3, [r7, #20]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b3ea:	4b1e      	ldr	r3, [pc, #120]	; (800b464 <HAL_RCC_GetSysClockFreq+0x94>)
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f003 030c 	and.w	r3, r3, #12
 800b3f6:	2b04      	cmp	r3, #4
 800b3f8:	d002      	beq.n	800b400 <HAL_RCC_GetSysClockFreq+0x30>
 800b3fa:	2b08      	cmp	r3, #8
 800b3fc:	d003      	beq.n	800b406 <HAL_RCC_GetSysClockFreq+0x36>
 800b3fe:	e027      	b.n	800b450 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b400:	4b19      	ldr	r3, [pc, #100]	; (800b468 <HAL_RCC_GetSysClockFreq+0x98>)
 800b402:	613b      	str	r3, [r7, #16]
      break;
 800b404:	e027      	b.n	800b456 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	0c9b      	lsrs	r3, r3, #18
 800b40a:	f003 030f 	and.w	r3, r3, #15
 800b40e:	4a17      	ldr	r2, [pc, #92]	; (800b46c <HAL_RCC_GetSysClockFreq+0x9c>)
 800b410:	5cd3      	ldrb	r3, [r2, r3]
 800b412:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d010      	beq.n	800b440 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b41e:	4b11      	ldr	r3, [pc, #68]	; (800b464 <HAL_RCC_GetSysClockFreq+0x94>)
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	0c5b      	lsrs	r3, r3, #17
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	4a11      	ldr	r2, [pc, #68]	; (800b470 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b42a:	5cd3      	ldrb	r3, [r2, r3]
 800b42c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a0d      	ldr	r2, [pc, #52]	; (800b468 <HAL_RCC_GetSysClockFreq+0x98>)
 800b432:	fb03 f202 	mul.w	r2, r3, r2
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	fbb2 f3f3 	udiv	r3, r2, r3
 800b43c:	617b      	str	r3, [r7, #20]
 800b43e:	e004      	b.n	800b44a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a0c      	ldr	r2, [pc, #48]	; (800b474 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b444:	fb02 f303 	mul.w	r3, r2, r3
 800b448:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	613b      	str	r3, [r7, #16]
      break;
 800b44e:	e002      	b.n	800b456 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b450:	4b05      	ldr	r3, [pc, #20]	; (800b468 <HAL_RCC_GetSysClockFreq+0x98>)
 800b452:	613b      	str	r3, [r7, #16]
      break;
 800b454:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b456:	693b      	ldr	r3, [r7, #16]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	371c      	adds	r7, #28
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bc80      	pop	{r7}
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	40021000 	.word	0x40021000
 800b468:	007a1200 	.word	0x007a1200
 800b46c:	0800d83c 	.word	0x0800d83c
 800b470:	0800d84c 	.word	0x0800d84c
 800b474:	003d0900 	.word	0x003d0900

0800b478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b478:	b480      	push	{r7}
 800b47a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b47c:	4b02      	ldr	r3, [pc, #8]	; (800b488 <HAL_RCC_GetHCLKFreq+0x10>)
 800b47e:	681b      	ldr	r3, [r3, #0]
}
 800b480:	4618      	mov	r0, r3
 800b482:	46bd      	mov	sp, r7
 800b484:	bc80      	pop	{r7}
 800b486:	4770      	bx	lr
 800b488:	200009b4 	.word	0x200009b4

0800b48c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b490:	f7ff fff2 	bl	800b478 <HAL_RCC_GetHCLKFreq>
 800b494:	4602      	mov	r2, r0
 800b496:	4b05      	ldr	r3, [pc, #20]	; (800b4ac <HAL_RCC_GetPCLK1Freq+0x20>)
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	0a1b      	lsrs	r3, r3, #8
 800b49c:	f003 0307 	and.w	r3, r3, #7
 800b4a0:	4903      	ldr	r1, [pc, #12]	; (800b4b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b4a2:	5ccb      	ldrb	r3, [r1, r3]
 800b4a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	40021000 	.word	0x40021000
 800b4b0:	0800d834 	.word	0x0800d834

0800b4b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b4b8:	f7ff ffde 	bl	800b478 <HAL_RCC_GetHCLKFreq>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	0adb      	lsrs	r3, r3, #11
 800b4c4:	f003 0307 	and.w	r3, r3, #7
 800b4c8:	4903      	ldr	r1, [pc, #12]	; (800b4d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b4ca:	5ccb      	ldrb	r3, [r1, r3]
 800b4cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	40021000 	.word	0x40021000
 800b4d8:	0800d834 	.word	0x0800d834

0800b4dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b4e4:	4b0a      	ldr	r3, [pc, #40]	; (800b510 <RCC_Delay+0x34>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a0a      	ldr	r2, [pc, #40]	; (800b514 <RCC_Delay+0x38>)
 800b4ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ee:	0a5b      	lsrs	r3, r3, #9
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	fb02 f303 	mul.w	r3, r2, r3
 800b4f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b4f8:	bf00      	nop
  }
  while (Delay --);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	1e5a      	subs	r2, r3, #1
 800b4fe:	60fa      	str	r2, [r7, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1f9      	bne.n	800b4f8 <RCC_Delay+0x1c>
}
 800b504:	bf00      	nop
 800b506:	bf00      	nop
 800b508:	3714      	adds	r7, #20
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bc80      	pop	{r7}
 800b50e:	4770      	bx	lr
 800b510:	200009b4 	.word	0x200009b4
 800b514:	10624dd3 	.word	0x10624dd3

0800b518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d101      	bne.n	800b52a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	e041      	b.n	800b5ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d106      	bne.n	800b544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7fd fa26 	bl	8008990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2202      	movs	r2, #2
 800b548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3304      	adds	r3, #4
 800b554:	4619      	mov	r1, r3
 800b556:	4610      	mov	r0, r2
 800b558:	f000 fa82 	bl	800ba60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2201      	movs	r2, #1
 800b588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2201      	movs	r2, #1
 800b598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
	...

0800b5b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d001      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e044      	b.n	800b65a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68da      	ldr	r2, [r3, #12]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f042 0201 	orr.w	r2, r2, #1
 800b5e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a1d      	ldr	r2, [pc, #116]	; (800b664 <HAL_TIM_Base_Start_IT+0xac>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d018      	beq.n	800b624 <HAL_TIM_Base_Start_IT+0x6c>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a1c      	ldr	r2, [pc, #112]	; (800b668 <HAL_TIM_Base_Start_IT+0xb0>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d013      	beq.n	800b624 <HAL_TIM_Base_Start_IT+0x6c>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b604:	d00e      	beq.n	800b624 <HAL_TIM_Base_Start_IT+0x6c>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a18      	ldr	r2, [pc, #96]	; (800b66c <HAL_TIM_Base_Start_IT+0xb4>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d009      	beq.n	800b624 <HAL_TIM_Base_Start_IT+0x6c>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a16      	ldr	r2, [pc, #88]	; (800b670 <HAL_TIM_Base_Start_IT+0xb8>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d004      	beq.n	800b624 <HAL_TIM_Base_Start_IT+0x6c>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a15      	ldr	r2, [pc, #84]	; (800b674 <HAL_TIM_Base_Start_IT+0xbc>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d111      	bne.n	800b648 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	f003 0307 	and.w	r3, r3, #7
 800b62e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b06      	cmp	r3, #6
 800b634:	d010      	beq.n	800b658 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f042 0201 	orr.w	r2, r2, #1
 800b644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b646:	e007      	b.n	800b658 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f042 0201 	orr.w	r2, r2, #1
 800b656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	bc80      	pop	{r7}
 800b662:	4770      	bx	lr
 800b664:	40012c00 	.word	0x40012c00
 800b668:	40013400 	.word	0x40013400
 800b66c:	40000400 	.word	0x40000400
 800b670:	40000800 	.word	0x40000800
 800b674:	40000c00 	.word	0x40000c00

0800b678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	f003 0302 	and.w	r3, r3, #2
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	d122      	bne.n	800b6d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	f003 0302 	and.w	r3, r3, #2
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d11b      	bne.n	800b6d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f06f 0202 	mvn.w	r2, #2
 800b6a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	f003 0303 	and.w	r3, r3, #3
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d003      	beq.n	800b6c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f9b4 	bl	800ba28 <HAL_TIM_IC_CaptureCallback>
 800b6c0:	e005      	b.n	800b6ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 f9a7 	bl	800ba16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f9b6 	bl	800ba3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	f003 0304 	and.w	r3, r3, #4
 800b6de:	2b04      	cmp	r3, #4
 800b6e0:	d122      	bne.n	800b728 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	f003 0304 	and.w	r3, r3, #4
 800b6ec:	2b04      	cmp	r3, #4
 800b6ee:	d11b      	bne.n	800b728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f06f 0204 	mvn.w	r2, #4
 800b6f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2202      	movs	r2, #2
 800b6fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	699b      	ldr	r3, [r3, #24]
 800b706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d003      	beq.n	800b716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f98a 	bl	800ba28 <HAL_TIM_IC_CaptureCallback>
 800b714:	e005      	b.n	800b722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f97d 	bl	800ba16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f98c 	bl	800ba3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	f003 0308 	and.w	r3, r3, #8
 800b732:	2b08      	cmp	r3, #8
 800b734:	d122      	bne.n	800b77c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	f003 0308 	and.w	r3, r3, #8
 800b740:	2b08      	cmp	r3, #8
 800b742:	d11b      	bne.n	800b77c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f06f 0208 	mvn.w	r2, #8
 800b74c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2204      	movs	r2, #4
 800b752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	69db      	ldr	r3, [r3, #28]
 800b75a:	f003 0303 	and.w	r3, r3, #3
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d003      	beq.n	800b76a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f960 	bl	800ba28 <HAL_TIM_IC_CaptureCallback>
 800b768:	e005      	b.n	800b776 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 f953 	bl	800ba16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 f962 	bl	800ba3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	f003 0310 	and.w	r3, r3, #16
 800b786:	2b10      	cmp	r3, #16
 800b788:	d122      	bne.n	800b7d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	f003 0310 	and.w	r3, r3, #16
 800b794:	2b10      	cmp	r3, #16
 800b796:	d11b      	bne.n	800b7d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f06f 0210 	mvn.w	r2, #16
 800b7a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2208      	movs	r2, #8
 800b7a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	69db      	ldr	r3, [r3, #28]
 800b7ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d003      	beq.n	800b7be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f936 	bl	800ba28 <HAL_TIM_IC_CaptureCallback>
 800b7bc:	e005      	b.n	800b7ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f929 	bl	800ba16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f938 	bl	800ba3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d10e      	bne.n	800b7fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	f003 0301 	and.w	r3, r3, #1
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d107      	bne.n	800b7fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f06f 0201 	mvn.w	r2, #1
 800b7f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7fc fd56 	bl	80082a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	691b      	ldr	r3, [r3, #16]
 800b802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b806:	2b80      	cmp	r3, #128	; 0x80
 800b808:	d10e      	bne.n	800b828 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b814:	2b80      	cmp	r3, #128	; 0x80
 800b816:	d107      	bne.n	800b828 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 faa1 	bl	800bd6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b832:	2b40      	cmp	r3, #64	; 0x40
 800b834:	d10e      	bne.n	800b854 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b840:	2b40      	cmp	r3, #64	; 0x40
 800b842:	d107      	bne.n	800b854 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b84c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 f8fc 	bl	800ba4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	f003 0320 	and.w	r3, r3, #32
 800b85e:	2b20      	cmp	r3, #32
 800b860:	d10e      	bne.n	800b880 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	f003 0320 	and.w	r3, r3, #32
 800b86c:	2b20      	cmp	r3, #32
 800b86e:	d107      	bne.n	800b880 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f06f 0220 	mvn.w	r2, #32
 800b878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fa6c 	bl	800bd58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b880:	bf00      	nop
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b892:	2300      	movs	r3, #0
 800b894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d101      	bne.n	800b8a4 <HAL_TIM_ConfigClockSource+0x1c>
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	e0b4      	b.n	800ba0e <HAL_TIM_ConfigClockSource+0x186>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2202      	movs	r2, #2
 800b8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b8c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8dc:	d03e      	beq.n	800b95c <HAL_TIM_ConfigClockSource+0xd4>
 800b8de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8e2:	f200 8087 	bhi.w	800b9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b8e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8ea:	f000 8086 	beq.w	800b9fa <HAL_TIM_ConfigClockSource+0x172>
 800b8ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8f2:	d87f      	bhi.n	800b9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b8f4:	2b70      	cmp	r3, #112	; 0x70
 800b8f6:	d01a      	beq.n	800b92e <HAL_TIM_ConfigClockSource+0xa6>
 800b8f8:	2b70      	cmp	r3, #112	; 0x70
 800b8fa:	d87b      	bhi.n	800b9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b8fc:	2b60      	cmp	r3, #96	; 0x60
 800b8fe:	d050      	beq.n	800b9a2 <HAL_TIM_ConfigClockSource+0x11a>
 800b900:	2b60      	cmp	r3, #96	; 0x60
 800b902:	d877      	bhi.n	800b9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b904:	2b50      	cmp	r3, #80	; 0x50
 800b906:	d03c      	beq.n	800b982 <HAL_TIM_ConfigClockSource+0xfa>
 800b908:	2b50      	cmp	r3, #80	; 0x50
 800b90a:	d873      	bhi.n	800b9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b90c:	2b40      	cmp	r3, #64	; 0x40
 800b90e:	d058      	beq.n	800b9c2 <HAL_TIM_ConfigClockSource+0x13a>
 800b910:	2b40      	cmp	r3, #64	; 0x40
 800b912:	d86f      	bhi.n	800b9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b914:	2b30      	cmp	r3, #48	; 0x30
 800b916:	d064      	beq.n	800b9e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b918:	2b30      	cmp	r3, #48	; 0x30
 800b91a:	d86b      	bhi.n	800b9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b91c:	2b20      	cmp	r3, #32
 800b91e:	d060      	beq.n	800b9e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b920:	2b20      	cmp	r3, #32
 800b922:	d867      	bhi.n	800b9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b924:	2b00      	cmp	r3, #0
 800b926:	d05c      	beq.n	800b9e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b928:	2b10      	cmp	r3, #16
 800b92a:	d05a      	beq.n	800b9e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b92c:	e062      	b.n	800b9f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b93e:	f000 f980 	bl	800bc42 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68ba      	ldr	r2, [r7, #8]
 800b958:	609a      	str	r2, [r3, #8]
      break;
 800b95a:	e04f      	b.n	800b9fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b96c:	f000 f969 	bl	800bc42 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	689a      	ldr	r2, [r3, #8]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b97e:	609a      	str	r2, [r3, #8]
      break;
 800b980:	e03c      	b.n	800b9fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b98e:	461a      	mov	r2, r3
 800b990:	f000 f8e0 	bl	800bb54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2150      	movs	r1, #80	; 0x50
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 f937 	bl	800bc0e <TIM_ITRx_SetConfig>
      break;
 800b9a0:	e02c      	b.n	800b9fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	f000 f8fe 	bl	800bbb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2160      	movs	r1, #96	; 0x60
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f000 f927 	bl	800bc0e <TIM_ITRx_SetConfig>
      break;
 800b9c0:	e01c      	b.n	800b9fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	f000 f8c0 	bl	800bb54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2140      	movs	r1, #64	; 0x40
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f000 f917 	bl	800bc0e <TIM_ITRx_SetConfig>
      break;
 800b9e0:	e00c      	b.n	800b9fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	f000 f90e 	bl	800bc0e <TIM_ITRx_SetConfig>
      break;
 800b9f2:	e003      	b.n	800b9fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b9f8:	e000      	b.n	800b9fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b9fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}

0800ba16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba16:	b480      	push	{r7}
 800ba18:	b083      	sub	sp, #12
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba1e:	bf00      	nop
 800ba20:	370c      	adds	r7, #12
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bc80      	pop	{r7}
 800ba26:	4770      	bx	lr

0800ba28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba30:	bf00      	nop
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bc80      	pop	{r7}
 800ba38:	4770      	bx	lr

0800ba3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b083      	sub	sp, #12
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba42:	bf00      	nop
 800ba44:	370c      	adds	r7, #12
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bc80      	pop	{r7}
 800ba4a:	4770      	bx	lr

0800ba4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba54:	bf00      	nop
 800ba56:	370c      	adds	r7, #12
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bc80      	pop	{r7}
 800ba5c:	4770      	bx	lr
	...

0800ba60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a33      	ldr	r2, [pc, #204]	; (800bb40 <TIM_Base_SetConfig+0xe0>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d013      	beq.n	800baa0 <TIM_Base_SetConfig+0x40>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a32      	ldr	r2, [pc, #200]	; (800bb44 <TIM_Base_SetConfig+0xe4>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d00f      	beq.n	800baa0 <TIM_Base_SetConfig+0x40>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba86:	d00b      	beq.n	800baa0 <TIM_Base_SetConfig+0x40>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a2f      	ldr	r2, [pc, #188]	; (800bb48 <TIM_Base_SetConfig+0xe8>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d007      	beq.n	800baa0 <TIM_Base_SetConfig+0x40>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a2e      	ldr	r2, [pc, #184]	; (800bb4c <TIM_Base_SetConfig+0xec>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d003      	beq.n	800baa0 <TIM_Base_SetConfig+0x40>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a2d      	ldr	r2, [pc, #180]	; (800bb50 <TIM_Base_SetConfig+0xf0>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d108      	bne.n	800bab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	4313      	orrs	r3, r2
 800bab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a22      	ldr	r2, [pc, #136]	; (800bb40 <TIM_Base_SetConfig+0xe0>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d013      	beq.n	800bae2 <TIM_Base_SetConfig+0x82>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a21      	ldr	r2, [pc, #132]	; (800bb44 <TIM_Base_SetConfig+0xe4>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d00f      	beq.n	800bae2 <TIM_Base_SetConfig+0x82>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bac8:	d00b      	beq.n	800bae2 <TIM_Base_SetConfig+0x82>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a1e      	ldr	r2, [pc, #120]	; (800bb48 <TIM_Base_SetConfig+0xe8>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d007      	beq.n	800bae2 <TIM_Base_SetConfig+0x82>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a1d      	ldr	r2, [pc, #116]	; (800bb4c <TIM_Base_SetConfig+0xec>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d003      	beq.n	800bae2 <TIM_Base_SetConfig+0x82>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a1c      	ldr	r2, [pc, #112]	; (800bb50 <TIM_Base_SetConfig+0xf0>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d108      	bne.n	800baf4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	695b      	ldr	r3, [r3, #20]
 800bafe:	4313      	orrs	r3, r2
 800bb00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	689a      	ldr	r2, [r3, #8]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a09      	ldr	r2, [pc, #36]	; (800bb40 <TIM_Base_SetConfig+0xe0>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d003      	beq.n	800bb28 <TIM_Base_SetConfig+0xc8>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a08      	ldr	r2, [pc, #32]	; (800bb44 <TIM_Base_SetConfig+0xe4>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d103      	bne.n	800bb30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	691a      	ldr	r2, [r3, #16]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	615a      	str	r2, [r3, #20]
}
 800bb36:	bf00      	nop
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bc80      	pop	{r7}
 800bb3e:	4770      	bx	lr
 800bb40:	40012c00 	.word	0x40012c00
 800bb44:	40013400 	.word	0x40013400
 800bb48:	40000400 	.word	0x40000400
 800bb4c:	40000800 	.word	0x40000800
 800bb50:	40000c00 	.word	0x40000c00

0800bb54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b087      	sub	sp, #28
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6a1b      	ldr	r3, [r3, #32]
 800bb64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	f023 0201 	bic.w	r2, r3, #1
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	699b      	ldr	r3, [r3, #24]
 800bb76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	011b      	lsls	r3, r3, #4
 800bb84:	693a      	ldr	r2, [r7, #16]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	f023 030a 	bic.w	r3, r3, #10
 800bb90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	621a      	str	r2, [r3, #32]
}
 800bba6:	bf00      	nop
 800bba8:	371c      	adds	r7, #28
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bc80      	pop	{r7}
 800bbae:	4770      	bx	lr

0800bbb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b087      	sub	sp, #28
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6a1b      	ldr	r3, [r3, #32]
 800bbc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
 800bbc6:	f023 0210 	bic.w	r2, r3, #16
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	699b      	ldr	r3, [r3, #24]
 800bbd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	031b      	lsls	r3, r3, #12
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bbec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	011b      	lsls	r3, r3, #4
 800bbf2:	697a      	ldr	r2, [r7, #20]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	693a      	ldr	r2, [r7, #16]
 800bbfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	697a      	ldr	r2, [r7, #20]
 800bc02:	621a      	str	r2, [r3, #32]
}
 800bc04:	bf00      	nop
 800bc06:	371c      	adds	r7, #28
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bc80      	pop	{r7}
 800bc0c:	4770      	bx	lr

0800bc0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc0e:	b480      	push	{r7}
 800bc10:	b085      	sub	sp, #20
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	f043 0307 	orr.w	r3, r3, #7
 800bc30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	609a      	str	r2, [r3, #8]
}
 800bc38:	bf00      	nop
 800bc3a:	3714      	adds	r7, #20
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bc80      	pop	{r7}
 800bc40:	4770      	bx	lr

0800bc42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc42:	b480      	push	{r7}
 800bc44:	b087      	sub	sp, #28
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	60f8      	str	r0, [r7, #12]
 800bc4a:	60b9      	str	r1, [r7, #8]
 800bc4c:	607a      	str	r2, [r7, #4]
 800bc4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	021a      	lsls	r2, r3, #8
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	431a      	orrs	r2, r3
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	697a      	ldr	r2, [r7, #20]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	697a      	ldr	r2, [r7, #20]
 800bc74:	609a      	str	r2, [r3, #8]
}
 800bc76:	bf00      	nop
 800bc78:	371c      	adds	r7, #28
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bc80      	pop	{r7}
 800bc7e:	4770      	bx	lr

0800bc80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d101      	bne.n	800bc98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc94:	2302      	movs	r3, #2
 800bc96:	e050      	b.n	800bd3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2202      	movs	r2, #2
 800bca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a1b      	ldr	r2, [pc, #108]	; (800bd44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d018      	beq.n	800bd0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a19      	ldr	r2, [pc, #100]	; (800bd48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d013      	beq.n	800bd0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcee:	d00e      	beq.n	800bd0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a15      	ldr	r2, [pc, #84]	; (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d009      	beq.n	800bd0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a14      	ldr	r2, [pc, #80]	; (800bd50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d004      	beq.n	800bd0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a12      	ldr	r2, [pc, #72]	; (800bd54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d10c      	bne.n	800bd28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	68ba      	ldr	r2, [r7, #8]
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3714      	adds	r7, #20
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bc80      	pop	{r7}
 800bd42:	4770      	bx	lr
 800bd44:	40012c00 	.word	0x40012c00
 800bd48:	40013400 	.word	0x40013400
 800bd4c:	40000400 	.word	0x40000400
 800bd50:	40000800 	.word	0x40000800
 800bd54:	40000c00 	.word	0x40000c00

0800bd58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bc80      	pop	{r7}
 800bd68:	4770      	bx	lr

0800bd6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd6a:	b480      	push	{r7}
 800bd6c:	b083      	sub	sp, #12
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd72:	bf00      	nop
 800bd74:	370c      	adds	r7, #12
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bc80      	pop	{r7}
 800bd7a:	4770      	bx	lr

0800bd7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d101      	bne.n	800bd8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e042      	b.n	800be14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d106      	bne.n	800bda8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7fc fe1a 	bl	80089dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2224      	movs	r2, #36	; 0x24
 800bdac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68da      	ldr	r2, [r3, #12]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bdbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 fc7f 	bl	800c6c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	691a      	ldr	r2, [r3, #16]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bdd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	695a      	ldr	r2, [r3, #20]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bde4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68da      	ldr	r2, [r3, #12]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bdf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2220      	movs	r2, #32
 800be00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2220      	movs	r2, #32
 800be08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b0ba      	sub	sp, #232	; 0xe8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	695b      	ldr	r3, [r3, #20]
 800be3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800be42:	2300      	movs	r3, #0
 800be44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800be48:	2300      	movs	r3, #0
 800be4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800be4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be52:	f003 030f 	and.w	r3, r3, #15
 800be56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800be5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d10f      	bne.n	800be82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be66:	f003 0320 	and.w	r3, r3, #32
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d009      	beq.n	800be82 <HAL_UART_IRQHandler+0x66>
 800be6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be72:	f003 0320 	and.w	r3, r3, #32
 800be76:	2b00      	cmp	r3, #0
 800be78:	d003      	beq.n	800be82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fb63 	bl	800c546 <UART_Receive_IT>
      return;
 800be80:	e25b      	b.n	800c33a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800be82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be86:	2b00      	cmp	r3, #0
 800be88:	f000 80de 	beq.w	800c048 <HAL_UART_IRQHandler+0x22c>
 800be8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be90:	f003 0301 	and.w	r3, r3, #1
 800be94:	2b00      	cmp	r3, #0
 800be96:	d106      	bne.n	800bea6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800be98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f000 80d1 	beq.w	800c048 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00b      	beq.n	800beca <HAL_UART_IRQHandler+0xae>
 800beb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800beb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d005      	beq.n	800beca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bec2:	f043 0201 	orr.w	r2, r3, #1
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800beca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bece:	f003 0304 	and.w	r3, r3, #4
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00b      	beq.n	800beee <HAL_UART_IRQHandler+0xd2>
 800bed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800beda:	f003 0301 	and.w	r3, r3, #1
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d005      	beq.n	800beee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bee6:	f043 0202 	orr.w	r2, r3, #2
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800beee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bef2:	f003 0302 	and.w	r3, r3, #2
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00b      	beq.n	800bf12 <HAL_UART_IRQHandler+0xf6>
 800befa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d005      	beq.n	800bf12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf0a:	f043 0204 	orr.w	r2, r3, #4
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bf12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf16:	f003 0308 	and.w	r3, r3, #8
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d011      	beq.n	800bf42 <HAL_UART_IRQHandler+0x126>
 800bf1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf22:	f003 0320 	and.w	r3, r3, #32
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d105      	bne.n	800bf36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bf2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf2e:	f003 0301 	and.w	r3, r3, #1
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d005      	beq.n	800bf42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf3a:	f043 0208 	orr.w	r2, r3, #8
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f000 81f2 	beq.w	800c330 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf50:	f003 0320 	and.w	r3, r3, #32
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d008      	beq.n	800bf6a <HAL_UART_IRQHandler+0x14e>
 800bf58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf5c:	f003 0320 	and.w	r3, r3, #32
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 faee 	bl	800c546 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	695b      	ldr	r3, [r3, #20]
 800bf70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	bf14      	ite	ne
 800bf78:	2301      	movne	r3, #1
 800bf7a:	2300      	moveq	r3, #0
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf86:	f003 0308 	and.w	r3, r3, #8
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d103      	bne.n	800bf96 <HAL_UART_IRQHandler+0x17a>
 800bf8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d04f      	beq.n	800c036 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 f9f8 	bl	800c38c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	695b      	ldr	r3, [r3, #20]
 800bfa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d041      	beq.n	800c02e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3314      	adds	r3, #20
 800bfb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bfb8:	e853 3f00 	ldrex	r3, [r3]
 800bfbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bfc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	3314      	adds	r3, #20
 800bfd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bfd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bfda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bfe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bfe6:	e841 2300 	strex	r3, r2, [r1]
 800bfea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bfee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1d9      	bne.n	800bfaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d013      	beq.n	800c026 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c002:	4a7e      	ldr	r2, [pc, #504]	; (800c1fc <HAL_UART_IRQHandler+0x3e0>)
 800c004:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fd f8a2 	bl	8009154 <HAL_DMA_Abort_IT>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d016      	beq.n	800c044 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c020:	4610      	mov	r0, r2
 800c022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c024:	e00e      	b.n	800c044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f99c 	bl	800c364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c02c:	e00a      	b.n	800c044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f998 	bl	800c364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c034:	e006      	b.n	800c044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f994 	bl	800c364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c042:	e175      	b.n	800c330 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c044:	bf00      	nop
    return;
 800c046:	e173      	b.n	800c330 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	f040 814f 	bne.w	800c2f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c056:	f003 0310 	and.w	r3, r3, #16
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f000 8148 	beq.w	800c2f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c064:	f003 0310 	and.w	r3, r3, #16
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 8141 	beq.w	800c2f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c06e:	2300      	movs	r3, #0
 800c070:	60bb      	str	r3, [r7, #8]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	60bb      	str	r3, [r7, #8]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	60bb      	str	r3, [r7, #8]
 800c082:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	695b      	ldr	r3, [r3, #20]
 800c08a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f000 80b6 	beq.w	800c200 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c0a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f000 8145 	beq.w	800c334 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c0ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	f080 813e 	bcs.w	800c334 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0c4:	699b      	ldr	r3, [r3, #24]
 800c0c6:	2b20      	cmp	r3, #32
 800c0c8:	f000 8088 	beq.w	800c1dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	330c      	adds	r3, #12
 800c0d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0da:	e853 3f00 	ldrex	r3, [r3]
 800c0de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c0e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c0e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	330c      	adds	r3, #12
 800c0f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c0f8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c0fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c100:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c104:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c108:	e841 2300 	strex	r3, r2, [r1]
 800c10c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c110:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1d9      	bne.n	800c0cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	3314      	adds	r3, #20
 800c11e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c122:	e853 3f00 	ldrex	r3, [r3]
 800c126:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c128:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c12a:	f023 0301 	bic.w	r3, r3, #1
 800c12e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	3314      	adds	r3, #20
 800c138:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c13c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c140:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c142:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c144:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c148:	e841 2300 	strex	r3, r2, [r1]
 800c14c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c14e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c150:	2b00      	cmp	r3, #0
 800c152:	d1e1      	bne.n	800c118 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	3314      	adds	r3, #20
 800c15a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c15e:	e853 3f00 	ldrex	r3, [r3]
 800c162:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c16a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	3314      	adds	r3, #20
 800c174:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c178:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c17a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c17e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c180:	e841 2300 	strex	r3, r2, [r1]
 800c184:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c186:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d1e3      	bne.n	800c154 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2220      	movs	r2, #32
 800c190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	330c      	adds	r3, #12
 800c1a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1a4:	e853 3f00 	ldrex	r3, [r3]
 800c1a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c1aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1ac:	f023 0310 	bic.w	r3, r3, #16
 800c1b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	330c      	adds	r3, #12
 800c1ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c1be:	65ba      	str	r2, [r7, #88]	; 0x58
 800c1c0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1c6:	e841 2300 	strex	r3, r2, [r1]
 800c1ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1e3      	bne.n	800c19a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fc ff81 	bl	80090de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2202      	movs	r2, #2
 800c1e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	1ad3      	subs	r3, r2, r3
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 f8bf 	bl	800c376 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c1f8:	e09c      	b.n	800c334 <HAL_UART_IRQHandler+0x518>
 800c1fa:	bf00      	nop
 800c1fc:	0800c451 	.word	0x0800c451
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c208:	b29b      	uxth	r3, r3
 800c20a:	1ad3      	subs	r3, r2, r3
 800c20c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c214:	b29b      	uxth	r3, r3
 800c216:	2b00      	cmp	r3, #0
 800c218:	f000 808e 	beq.w	800c338 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c21c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c220:	2b00      	cmp	r3, #0
 800c222:	f000 8089 	beq.w	800c338 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	330c      	adds	r3, #12
 800c22c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c230:	e853 3f00 	ldrex	r3, [r3]
 800c234:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c23c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	330c      	adds	r3, #12
 800c246:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c24a:	647a      	str	r2, [r7, #68]	; 0x44
 800c24c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c252:	e841 2300 	strex	r3, r2, [r1]
 800c256:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1e3      	bne.n	800c226 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	3314      	adds	r3, #20
 800c264:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c268:	e853 3f00 	ldrex	r3, [r3]
 800c26c:	623b      	str	r3, [r7, #32]
   return(result);
 800c26e:	6a3b      	ldr	r3, [r7, #32]
 800c270:	f023 0301 	bic.w	r3, r3, #1
 800c274:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	3314      	adds	r3, #20
 800c27e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c282:	633a      	str	r2, [r7, #48]	; 0x30
 800c284:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c28a:	e841 2300 	strex	r3, r2, [r1]
 800c28e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1e3      	bne.n	800c25e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2220      	movs	r2, #32
 800c29a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	330c      	adds	r3, #12
 800c2aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	e853 3f00 	ldrex	r3, [r3]
 800c2b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f023 0310 	bic.w	r3, r3, #16
 800c2ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	330c      	adds	r3, #12
 800c2c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c2c8:	61fa      	str	r2, [r7, #28]
 800c2ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2cc:	69b9      	ldr	r1, [r7, #24]
 800c2ce:	69fa      	ldr	r2, [r7, #28]
 800c2d0:	e841 2300 	strex	r3, r2, [r1]
 800c2d4:	617b      	str	r3, [r7, #20]
   return(result);
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1e3      	bne.n	800c2a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2202      	movs	r2, #2
 800c2e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c2e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 f844 	bl	800c376 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c2ee:	e023      	b.n	800c338 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d009      	beq.n	800c310 <HAL_UART_IRQHandler+0x4f4>
 800c2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c304:	2b00      	cmp	r3, #0
 800c306:	d003      	beq.n	800c310 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 f8b5 	bl	800c478 <UART_Transmit_IT>
    return;
 800c30e:	e014      	b.n	800c33a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00e      	beq.n	800c33a <HAL_UART_IRQHandler+0x51e>
 800c31c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c324:	2b00      	cmp	r3, #0
 800c326:	d008      	beq.n	800c33a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 f8f4 	bl	800c516 <UART_EndTransmit_IT>
    return;
 800c32e:	e004      	b.n	800c33a <HAL_UART_IRQHandler+0x51e>
    return;
 800c330:	bf00      	nop
 800c332:	e002      	b.n	800c33a <HAL_UART_IRQHandler+0x51e>
      return;
 800c334:	bf00      	nop
 800c336:	e000      	b.n	800c33a <HAL_UART_IRQHandler+0x51e>
      return;
 800c338:	bf00      	nop
  }
}
 800c33a:	37e8      	adds	r7, #232	; 0xe8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c348:	bf00      	nop
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bc80      	pop	{r7}
 800c350:	4770      	bx	lr

0800c352 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c352:	b480      	push	{r7}
 800c354:	b083      	sub	sp, #12
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c35a:	bf00      	nop
 800c35c:	370c      	adds	r7, #12
 800c35e:	46bd      	mov	sp, r7
 800c360:	bc80      	pop	{r7}
 800c362:	4770      	bx	lr

0800c364 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c36c:	bf00      	nop
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	bc80      	pop	{r7}
 800c374:	4770      	bx	lr

0800c376 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c376:	b480      	push	{r7}
 800c378:	b083      	sub	sp, #12
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
 800c37e:	460b      	mov	r3, r1
 800c380:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c382:	bf00      	nop
 800c384:	370c      	adds	r7, #12
 800c386:	46bd      	mov	sp, r7
 800c388:	bc80      	pop	{r7}
 800c38a:	4770      	bx	lr

0800c38c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b095      	sub	sp, #84	; 0x54
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	330c      	adds	r3, #12
 800c39a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c39e:	e853 3f00 	ldrex	r3, [r3]
 800c3a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	330c      	adds	r3, #12
 800c3b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c3b4:	643a      	str	r2, [r7, #64]	; 0x40
 800c3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3bc:	e841 2300 	strex	r3, r2, [r1]
 800c3c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d1e5      	bne.n	800c394 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	3314      	adds	r3, #20
 800c3ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d0:	6a3b      	ldr	r3, [r7, #32]
 800c3d2:	e853 3f00 	ldrex	r3, [r3]
 800c3d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	f023 0301 	bic.w	r3, r3, #1
 800c3de:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3314      	adds	r3, #20
 800c3e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c3ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3f0:	e841 2300 	strex	r3, r2, [r1]
 800c3f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1e5      	bne.n	800c3c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c400:	2b01      	cmp	r3, #1
 800c402:	d119      	bne.n	800c438 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	330c      	adds	r3, #12
 800c40a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	e853 3f00 	ldrex	r3, [r3]
 800c412:	60bb      	str	r3, [r7, #8]
   return(result);
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	f023 0310 	bic.w	r3, r3, #16
 800c41a:	647b      	str	r3, [r7, #68]	; 0x44
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	330c      	adds	r3, #12
 800c422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c424:	61ba      	str	r2, [r7, #24]
 800c426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c428:	6979      	ldr	r1, [r7, #20]
 800c42a:	69ba      	ldr	r2, [r7, #24]
 800c42c:	e841 2300 	strex	r3, r2, [r1]
 800c430:	613b      	str	r3, [r7, #16]
   return(result);
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1e5      	bne.n	800c404 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2220      	movs	r2, #32
 800c43c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c446:	bf00      	nop
 800c448:	3754      	adds	r7, #84	; 0x54
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bc80      	pop	{r7}
 800c44e:	4770      	bx	lr

0800c450 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c45c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2200      	movs	r2, #0
 800c462:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2200      	movs	r2, #0
 800c468:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	f7ff ff7a 	bl	800c364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c470:	bf00      	nop
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c486:	b2db      	uxtb	r3, r3
 800c488:	2b21      	cmp	r3, #33	; 0x21
 800c48a:	d13e      	bne.n	800c50a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c494:	d114      	bne.n	800c4c0 <UART_Transmit_IT+0x48>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	691b      	ldr	r3, [r3, #16]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d110      	bne.n	800c4c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a1b      	ldr	r3, [r3, #32]
 800c4a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	881b      	ldrh	r3, [r3, #0]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c4b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6a1b      	ldr	r3, [r3, #32]
 800c4b8:	1c9a      	adds	r2, r3, #2
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	621a      	str	r2, [r3, #32]
 800c4be:	e008      	b.n	800c4d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6a1b      	ldr	r3, [r3, #32]
 800c4c4:	1c59      	adds	r1, r3, #1
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	6211      	str	r1, [r2, #32]
 800c4ca:	781a      	ldrb	r2, [r3, #0]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	3b01      	subs	r3, #1
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	4619      	mov	r1, r3
 800c4e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d10f      	bne.n	800c506 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68da      	ldr	r2, [r3, #12]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c4f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68da      	ldr	r2, [r3, #12]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c504:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c506:	2300      	movs	r3, #0
 800c508:	e000      	b.n	800c50c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c50a:	2302      	movs	r3, #2
  }
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3714      	adds	r7, #20
 800c510:	46bd      	mov	sp, r7
 800c512:	bc80      	pop	{r7}
 800c514:	4770      	bx	lr

0800c516 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b082      	sub	sp, #8
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	68da      	ldr	r2, [r3, #12]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c52c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2220      	movs	r2, #32
 800c532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7ff ff02 	bl	800c340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b08c      	sub	sp, #48	; 0x30
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c554:	b2db      	uxtb	r3, r3
 800c556:	2b22      	cmp	r3, #34	; 0x22
 800c558:	f040 80ae 	bne.w	800c6b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c564:	d117      	bne.n	800c596 <UART_Receive_IT+0x50>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	691b      	ldr	r3, [r3, #16]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d113      	bne.n	800c596 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c56e:	2300      	movs	r3, #0
 800c570:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c576:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	b29b      	uxth	r3, r3
 800c580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c584:	b29a      	uxth	r2, r3
 800c586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c588:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58e:	1c9a      	adds	r2, r3, #2
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	629a      	str	r2, [r3, #40]	; 0x28
 800c594:	e026      	b.n	800c5e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c59a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c59c:	2300      	movs	r3, #0
 800c59e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5a8:	d007      	beq.n	800c5ba <UART_Receive_IT+0x74>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	689b      	ldr	r3, [r3, #8]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d10a      	bne.n	800c5c8 <UART_Receive_IT+0x82>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	691b      	ldr	r3, [r3, #16]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d106      	bne.n	800c5c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	b2da      	uxtb	r2, r3
 800c5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c4:	701a      	strb	r2, [r3, #0]
 800c5c6:	e008      	b.n	800c5da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5d4:	b2da      	uxtb	r2, r3
 800c5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5de:	1c5a      	adds	r2, r3, #1
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d15d      	bne.n	800c6b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	68da      	ldr	r2, [r3, #12]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f022 0220 	bic.w	r2, r2, #32
 800c606:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	68da      	ldr	r2, [r3, #12]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c616:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	695a      	ldr	r2, [r3, #20]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f022 0201 	bic.w	r2, r2, #1
 800c626:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2220      	movs	r2, #32
 800c62c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d135      	bne.n	800c6aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	330c      	adds	r3, #12
 800c64a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	e853 3f00 	ldrex	r3, [r3]
 800c652:	613b      	str	r3, [r7, #16]
   return(result);
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	f023 0310 	bic.w	r3, r3, #16
 800c65a:	627b      	str	r3, [r7, #36]	; 0x24
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	330c      	adds	r3, #12
 800c662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c664:	623a      	str	r2, [r7, #32]
 800c666:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c668:	69f9      	ldr	r1, [r7, #28]
 800c66a:	6a3a      	ldr	r2, [r7, #32]
 800c66c:	e841 2300 	strex	r3, r2, [r1]
 800c670:	61bb      	str	r3, [r7, #24]
   return(result);
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1e5      	bne.n	800c644 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f003 0310 	and.w	r3, r3, #16
 800c682:	2b10      	cmp	r3, #16
 800c684:	d10a      	bne.n	800c69c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c686:	2300      	movs	r3, #0
 800c688:	60fb      	str	r3, [r7, #12]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	60fb      	str	r3, [r7, #12]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	60fb      	str	r3, [r7, #12]
 800c69a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7ff fe67 	bl	800c376 <HAL_UARTEx_RxEventCallback>
 800c6a8:	e002      	b.n	800c6b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7ff fe51 	bl	800c352 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	e002      	b.n	800c6ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	e000      	b.n	800c6ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c6b8:	2302      	movs	r3, #2
  }
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3730      	adds	r7, #48	; 0x30
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
	...

0800c6c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	691b      	ldr	r3, [r3, #16]
 800c6d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	68da      	ldr	r2, [r3, #12]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	430a      	orrs	r2, r1
 800c6e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	689a      	ldr	r2, [r3, #8]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	691b      	ldr	r3, [r3, #16]
 800c6ea:	431a      	orrs	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	695b      	ldr	r3, [r3, #20]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c6fe:	f023 030c 	bic.w	r3, r3, #12
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	6812      	ldr	r2, [r2, #0]
 800c706:	68b9      	ldr	r1, [r7, #8]
 800c708:	430b      	orrs	r3, r1
 800c70a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	695b      	ldr	r3, [r3, #20]
 800c712:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	699a      	ldr	r2, [r3, #24]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	430a      	orrs	r2, r1
 800c720:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a2c      	ldr	r2, [pc, #176]	; (800c7d8 <UART_SetConfig+0x114>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d103      	bne.n	800c734 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c72c:	f7fe fec2 	bl	800b4b4 <HAL_RCC_GetPCLK2Freq>
 800c730:	60f8      	str	r0, [r7, #12]
 800c732:	e002      	b.n	800c73a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c734:	f7fe feaa 	bl	800b48c <HAL_RCC_GetPCLK1Freq>
 800c738:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	4613      	mov	r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4413      	add	r3, r2
 800c742:	009a      	lsls	r2, r3, #2
 800c744:	441a      	add	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c750:	4a22      	ldr	r2, [pc, #136]	; (800c7dc <UART_SetConfig+0x118>)
 800c752:	fba2 2303 	umull	r2, r3, r2, r3
 800c756:	095b      	lsrs	r3, r3, #5
 800c758:	0119      	lsls	r1, r3, #4
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	4613      	mov	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	009a      	lsls	r2, r3, #2
 800c764:	441a      	add	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c770:	4b1a      	ldr	r3, [pc, #104]	; (800c7dc <UART_SetConfig+0x118>)
 800c772:	fba3 0302 	umull	r0, r3, r3, r2
 800c776:	095b      	lsrs	r3, r3, #5
 800c778:	2064      	movs	r0, #100	; 0x64
 800c77a:	fb00 f303 	mul.w	r3, r0, r3
 800c77e:	1ad3      	subs	r3, r2, r3
 800c780:	011b      	lsls	r3, r3, #4
 800c782:	3332      	adds	r3, #50	; 0x32
 800c784:	4a15      	ldr	r2, [pc, #84]	; (800c7dc <UART_SetConfig+0x118>)
 800c786:	fba2 2303 	umull	r2, r3, r2, r3
 800c78a:	095b      	lsrs	r3, r3, #5
 800c78c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c790:	4419      	add	r1, r3
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	4613      	mov	r3, r2
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	4413      	add	r3, r2
 800c79a:	009a      	lsls	r2, r3, #2
 800c79c:	441a      	add	r2, r3
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c7a8:	4b0c      	ldr	r3, [pc, #48]	; (800c7dc <UART_SetConfig+0x118>)
 800c7aa:	fba3 0302 	umull	r0, r3, r3, r2
 800c7ae:	095b      	lsrs	r3, r3, #5
 800c7b0:	2064      	movs	r0, #100	; 0x64
 800c7b2:	fb00 f303 	mul.w	r3, r0, r3
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	011b      	lsls	r3, r3, #4
 800c7ba:	3332      	adds	r3, #50	; 0x32
 800c7bc:	4a07      	ldr	r2, [pc, #28]	; (800c7dc <UART_SetConfig+0x118>)
 800c7be:	fba2 2303 	umull	r2, r3, r2, r3
 800c7c2:	095b      	lsrs	r3, r3, #5
 800c7c4:	f003 020f 	and.w	r2, r3, #15
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	440a      	add	r2, r1
 800c7ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c7d0:	bf00      	nop
 800c7d2:	3710      	adds	r7, #16
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	40013800 	.word	0x40013800
 800c7dc:	51eb851f 	.word	0x51eb851f

0800c7e0 <__itoa>:
 800c7e0:	1e93      	subs	r3, r2, #2
 800c7e2:	2b22      	cmp	r3, #34	; 0x22
 800c7e4:	b510      	push	{r4, lr}
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	d904      	bls.n	800c7f4 <__itoa+0x14>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	461c      	mov	r4, r3
 800c7ee:	700b      	strb	r3, [r1, #0]
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	bd10      	pop	{r4, pc}
 800c7f4:	2a0a      	cmp	r2, #10
 800c7f6:	d109      	bne.n	800c80c <__itoa+0x2c>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	da07      	bge.n	800c80c <__itoa+0x2c>
 800c7fc:	232d      	movs	r3, #45	; 0x2d
 800c7fe:	700b      	strb	r3, [r1, #0]
 800c800:	2101      	movs	r1, #1
 800c802:	4240      	negs	r0, r0
 800c804:	4421      	add	r1, r4
 800c806:	f000 f8b9 	bl	800c97c <__utoa>
 800c80a:	e7f1      	b.n	800c7f0 <__itoa+0x10>
 800c80c:	2100      	movs	r1, #0
 800c80e:	e7f9      	b.n	800c804 <__itoa+0x24>

0800c810 <itoa>:
 800c810:	f7ff bfe6 	b.w	800c7e0 <__itoa>

0800c814 <malloc>:
 800c814:	4b02      	ldr	r3, [pc, #8]	; (800c820 <malloc+0xc>)
 800c816:	4601      	mov	r1, r0
 800c818:	6818      	ldr	r0, [r3, #0]
 800c81a:	f000 b823 	b.w	800c864 <_malloc_r>
 800c81e:	bf00      	nop
 800c820:	20000a0c 	.word	0x20000a0c

0800c824 <sbrk_aligned>:
 800c824:	b570      	push	{r4, r5, r6, lr}
 800c826:	4e0e      	ldr	r6, [pc, #56]	; (800c860 <sbrk_aligned+0x3c>)
 800c828:	460c      	mov	r4, r1
 800c82a:	6831      	ldr	r1, [r6, #0]
 800c82c:	4605      	mov	r5, r0
 800c82e:	b911      	cbnz	r1, 800c836 <sbrk_aligned+0x12>
 800c830:	f000 f8ee 	bl	800ca10 <_sbrk_r>
 800c834:	6030      	str	r0, [r6, #0]
 800c836:	4621      	mov	r1, r4
 800c838:	4628      	mov	r0, r5
 800c83a:	f000 f8e9 	bl	800ca10 <_sbrk_r>
 800c83e:	1c43      	adds	r3, r0, #1
 800c840:	d00a      	beq.n	800c858 <sbrk_aligned+0x34>
 800c842:	1cc4      	adds	r4, r0, #3
 800c844:	f024 0403 	bic.w	r4, r4, #3
 800c848:	42a0      	cmp	r0, r4
 800c84a:	d007      	beq.n	800c85c <sbrk_aligned+0x38>
 800c84c:	1a21      	subs	r1, r4, r0
 800c84e:	4628      	mov	r0, r5
 800c850:	f000 f8de 	bl	800ca10 <_sbrk_r>
 800c854:	3001      	adds	r0, #1
 800c856:	d101      	bne.n	800c85c <sbrk_aligned+0x38>
 800c858:	f04f 34ff 	mov.w	r4, #4294967295
 800c85c:	4620      	mov	r0, r4
 800c85e:	bd70      	pop	{r4, r5, r6, pc}
 800c860:	20000dac 	.word	0x20000dac

0800c864 <_malloc_r>:
 800c864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c868:	1ccd      	adds	r5, r1, #3
 800c86a:	f025 0503 	bic.w	r5, r5, #3
 800c86e:	3508      	adds	r5, #8
 800c870:	2d0c      	cmp	r5, #12
 800c872:	bf38      	it	cc
 800c874:	250c      	movcc	r5, #12
 800c876:	2d00      	cmp	r5, #0
 800c878:	4607      	mov	r7, r0
 800c87a:	db01      	blt.n	800c880 <_malloc_r+0x1c>
 800c87c:	42a9      	cmp	r1, r5
 800c87e:	d905      	bls.n	800c88c <_malloc_r+0x28>
 800c880:	230c      	movs	r3, #12
 800c882:	2600      	movs	r6, #0
 800c884:	603b      	str	r3, [r7, #0]
 800c886:	4630      	mov	r0, r6
 800c888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c88c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c960 <_malloc_r+0xfc>
 800c890:	f000 f868 	bl	800c964 <__malloc_lock>
 800c894:	f8d8 3000 	ldr.w	r3, [r8]
 800c898:	461c      	mov	r4, r3
 800c89a:	bb5c      	cbnz	r4, 800c8f4 <_malloc_r+0x90>
 800c89c:	4629      	mov	r1, r5
 800c89e:	4638      	mov	r0, r7
 800c8a0:	f7ff ffc0 	bl	800c824 <sbrk_aligned>
 800c8a4:	1c43      	adds	r3, r0, #1
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	d155      	bne.n	800c956 <_malloc_r+0xf2>
 800c8aa:	f8d8 4000 	ldr.w	r4, [r8]
 800c8ae:	4626      	mov	r6, r4
 800c8b0:	2e00      	cmp	r6, #0
 800c8b2:	d145      	bne.n	800c940 <_malloc_r+0xdc>
 800c8b4:	2c00      	cmp	r4, #0
 800c8b6:	d048      	beq.n	800c94a <_malloc_r+0xe6>
 800c8b8:	6823      	ldr	r3, [r4, #0]
 800c8ba:	4631      	mov	r1, r6
 800c8bc:	4638      	mov	r0, r7
 800c8be:	eb04 0903 	add.w	r9, r4, r3
 800c8c2:	f000 f8a5 	bl	800ca10 <_sbrk_r>
 800c8c6:	4581      	cmp	r9, r0
 800c8c8:	d13f      	bne.n	800c94a <_malloc_r+0xe6>
 800c8ca:	6821      	ldr	r1, [r4, #0]
 800c8cc:	4638      	mov	r0, r7
 800c8ce:	1a6d      	subs	r5, r5, r1
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	f7ff ffa7 	bl	800c824 <sbrk_aligned>
 800c8d6:	3001      	adds	r0, #1
 800c8d8:	d037      	beq.n	800c94a <_malloc_r+0xe6>
 800c8da:	6823      	ldr	r3, [r4, #0]
 800c8dc:	442b      	add	r3, r5
 800c8de:	6023      	str	r3, [r4, #0]
 800c8e0:	f8d8 3000 	ldr.w	r3, [r8]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d038      	beq.n	800c95a <_malloc_r+0xf6>
 800c8e8:	685a      	ldr	r2, [r3, #4]
 800c8ea:	42a2      	cmp	r2, r4
 800c8ec:	d12b      	bne.n	800c946 <_malloc_r+0xe2>
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	605a      	str	r2, [r3, #4]
 800c8f2:	e00f      	b.n	800c914 <_malloc_r+0xb0>
 800c8f4:	6822      	ldr	r2, [r4, #0]
 800c8f6:	1b52      	subs	r2, r2, r5
 800c8f8:	d41f      	bmi.n	800c93a <_malloc_r+0xd6>
 800c8fa:	2a0b      	cmp	r2, #11
 800c8fc:	d917      	bls.n	800c92e <_malloc_r+0xca>
 800c8fe:	1961      	adds	r1, r4, r5
 800c900:	42a3      	cmp	r3, r4
 800c902:	6025      	str	r5, [r4, #0]
 800c904:	bf18      	it	ne
 800c906:	6059      	strne	r1, [r3, #4]
 800c908:	6863      	ldr	r3, [r4, #4]
 800c90a:	bf08      	it	eq
 800c90c:	f8c8 1000 	streq.w	r1, [r8]
 800c910:	5162      	str	r2, [r4, r5]
 800c912:	604b      	str	r3, [r1, #4]
 800c914:	4638      	mov	r0, r7
 800c916:	f104 060b 	add.w	r6, r4, #11
 800c91a:	f000 f829 	bl	800c970 <__malloc_unlock>
 800c91e:	f026 0607 	bic.w	r6, r6, #7
 800c922:	1d23      	adds	r3, r4, #4
 800c924:	1af2      	subs	r2, r6, r3
 800c926:	d0ae      	beq.n	800c886 <_malloc_r+0x22>
 800c928:	1b9b      	subs	r3, r3, r6
 800c92a:	50a3      	str	r3, [r4, r2]
 800c92c:	e7ab      	b.n	800c886 <_malloc_r+0x22>
 800c92e:	42a3      	cmp	r3, r4
 800c930:	6862      	ldr	r2, [r4, #4]
 800c932:	d1dd      	bne.n	800c8f0 <_malloc_r+0x8c>
 800c934:	f8c8 2000 	str.w	r2, [r8]
 800c938:	e7ec      	b.n	800c914 <_malloc_r+0xb0>
 800c93a:	4623      	mov	r3, r4
 800c93c:	6864      	ldr	r4, [r4, #4]
 800c93e:	e7ac      	b.n	800c89a <_malloc_r+0x36>
 800c940:	4634      	mov	r4, r6
 800c942:	6876      	ldr	r6, [r6, #4]
 800c944:	e7b4      	b.n	800c8b0 <_malloc_r+0x4c>
 800c946:	4613      	mov	r3, r2
 800c948:	e7cc      	b.n	800c8e4 <_malloc_r+0x80>
 800c94a:	230c      	movs	r3, #12
 800c94c:	4638      	mov	r0, r7
 800c94e:	603b      	str	r3, [r7, #0]
 800c950:	f000 f80e 	bl	800c970 <__malloc_unlock>
 800c954:	e797      	b.n	800c886 <_malloc_r+0x22>
 800c956:	6025      	str	r5, [r4, #0]
 800c958:	e7dc      	b.n	800c914 <_malloc_r+0xb0>
 800c95a:	605b      	str	r3, [r3, #4]
 800c95c:	deff      	udf	#255	; 0xff
 800c95e:	bf00      	nop
 800c960:	20000da8 	.word	0x20000da8

0800c964 <__malloc_lock>:
 800c964:	4801      	ldr	r0, [pc, #4]	; (800c96c <__malloc_lock+0x8>)
 800c966:	f000 b88d 	b.w	800ca84 <__retarget_lock_acquire_recursive>
 800c96a:	bf00      	nop
 800c96c:	20000eec 	.word	0x20000eec

0800c970 <__malloc_unlock>:
 800c970:	4801      	ldr	r0, [pc, #4]	; (800c978 <__malloc_unlock+0x8>)
 800c972:	f000 b888 	b.w	800ca86 <__retarget_lock_release_recursive>
 800c976:	bf00      	nop
 800c978:	20000eec 	.word	0x20000eec

0800c97c <__utoa>:
 800c97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c97e:	b08b      	sub	sp, #44	; 0x2c
 800c980:	4605      	mov	r5, r0
 800c982:	460b      	mov	r3, r1
 800c984:	466e      	mov	r6, sp
 800c986:	4c1d      	ldr	r4, [pc, #116]	; (800c9fc <__utoa+0x80>)
 800c988:	f104 0c20 	add.w	ip, r4, #32
 800c98c:	4637      	mov	r7, r6
 800c98e:	6820      	ldr	r0, [r4, #0]
 800c990:	6861      	ldr	r1, [r4, #4]
 800c992:	3408      	adds	r4, #8
 800c994:	c703      	stmia	r7!, {r0, r1}
 800c996:	4564      	cmp	r4, ip
 800c998:	463e      	mov	r6, r7
 800c99a:	d1f7      	bne.n	800c98c <__utoa+0x10>
 800c99c:	7921      	ldrb	r1, [r4, #4]
 800c99e:	6820      	ldr	r0, [r4, #0]
 800c9a0:	7139      	strb	r1, [r7, #4]
 800c9a2:	1e91      	subs	r1, r2, #2
 800c9a4:	2922      	cmp	r1, #34	; 0x22
 800c9a6:	6038      	str	r0, [r7, #0]
 800c9a8:	f04f 0100 	mov.w	r1, #0
 800c9ac:	d904      	bls.n	800c9b8 <__utoa+0x3c>
 800c9ae:	7019      	strb	r1, [r3, #0]
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	b00b      	add	sp, #44	; 0x2c
 800c9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9b8:	1e58      	subs	r0, r3, #1
 800c9ba:	4684      	mov	ip, r0
 800c9bc:	fbb5 f7f2 	udiv	r7, r5, r2
 800c9c0:	fb02 5617 	mls	r6, r2, r7, r5
 800c9c4:	3628      	adds	r6, #40	; 0x28
 800c9c6:	446e      	add	r6, sp
 800c9c8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c9d2:	462e      	mov	r6, r5
 800c9d4:	42b2      	cmp	r2, r6
 800c9d6:	463d      	mov	r5, r7
 800c9d8:	f101 0101 	add.w	r1, r1, #1
 800c9dc:	d9ee      	bls.n	800c9bc <__utoa+0x40>
 800c9de:	2200      	movs	r2, #0
 800c9e0:	545a      	strb	r2, [r3, r1]
 800c9e2:	1919      	adds	r1, r3, r4
 800c9e4:	1aa5      	subs	r5, r4, r2
 800c9e6:	42aa      	cmp	r2, r5
 800c9e8:	dae3      	bge.n	800c9b2 <__utoa+0x36>
 800c9ea:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c9ee:	780e      	ldrb	r6, [r1, #0]
 800c9f0:	3201      	adds	r2, #1
 800c9f2:	7006      	strb	r6, [r0, #0]
 800c9f4:	f801 5901 	strb.w	r5, [r1], #-1
 800c9f8:	e7f4      	b.n	800c9e4 <__utoa+0x68>
 800c9fa:	bf00      	nop
 800c9fc:	0800d84e 	.word	0x0800d84e

0800ca00 <memset>:
 800ca00:	4603      	mov	r3, r0
 800ca02:	4402      	add	r2, r0
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d100      	bne.n	800ca0a <memset+0xa>
 800ca08:	4770      	bx	lr
 800ca0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ca0e:	e7f9      	b.n	800ca04 <memset+0x4>

0800ca10 <_sbrk_r>:
 800ca10:	b538      	push	{r3, r4, r5, lr}
 800ca12:	2300      	movs	r3, #0
 800ca14:	4d05      	ldr	r5, [pc, #20]	; (800ca2c <_sbrk_r+0x1c>)
 800ca16:	4604      	mov	r4, r0
 800ca18:	4608      	mov	r0, r1
 800ca1a:	602b      	str	r3, [r5, #0]
 800ca1c:	f7fc f86e 	bl	8008afc <_sbrk>
 800ca20:	1c43      	adds	r3, r0, #1
 800ca22:	d102      	bne.n	800ca2a <_sbrk_r+0x1a>
 800ca24:	682b      	ldr	r3, [r5, #0]
 800ca26:	b103      	cbz	r3, 800ca2a <_sbrk_r+0x1a>
 800ca28:	6023      	str	r3, [r4, #0]
 800ca2a:	bd38      	pop	{r3, r4, r5, pc}
 800ca2c:	20000ee8 	.word	0x20000ee8

0800ca30 <__errno>:
 800ca30:	4b01      	ldr	r3, [pc, #4]	; (800ca38 <__errno+0x8>)
 800ca32:	6818      	ldr	r0, [r3, #0]
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop
 800ca38:	20000a0c 	.word	0x20000a0c

0800ca3c <__libc_init_array>:
 800ca3c:	b570      	push	{r4, r5, r6, lr}
 800ca3e:	2600      	movs	r6, #0
 800ca40:	4d0c      	ldr	r5, [pc, #48]	; (800ca74 <__libc_init_array+0x38>)
 800ca42:	4c0d      	ldr	r4, [pc, #52]	; (800ca78 <__libc_init_array+0x3c>)
 800ca44:	1b64      	subs	r4, r4, r5
 800ca46:	10a4      	asrs	r4, r4, #2
 800ca48:	42a6      	cmp	r6, r4
 800ca4a:	d109      	bne.n	800ca60 <__libc_init_array+0x24>
 800ca4c:	f000 f824 	bl	800ca98 <_init>
 800ca50:	2600      	movs	r6, #0
 800ca52:	4d0a      	ldr	r5, [pc, #40]	; (800ca7c <__libc_init_array+0x40>)
 800ca54:	4c0a      	ldr	r4, [pc, #40]	; (800ca80 <__libc_init_array+0x44>)
 800ca56:	1b64      	subs	r4, r4, r5
 800ca58:	10a4      	asrs	r4, r4, #2
 800ca5a:	42a6      	cmp	r6, r4
 800ca5c:	d105      	bne.n	800ca6a <__libc_init_array+0x2e>
 800ca5e:	bd70      	pop	{r4, r5, r6, pc}
 800ca60:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca64:	4798      	blx	r3
 800ca66:	3601      	adds	r6, #1
 800ca68:	e7ee      	b.n	800ca48 <__libc_init_array+0xc>
 800ca6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca6e:	4798      	blx	r3
 800ca70:	3601      	adds	r6, #1
 800ca72:	e7f2      	b.n	800ca5a <__libc_init_array+0x1e>
 800ca74:	0800d874 	.word	0x0800d874
 800ca78:	0800d874 	.word	0x0800d874
 800ca7c:	0800d874 	.word	0x0800d874
 800ca80:	0800d878 	.word	0x0800d878

0800ca84 <__retarget_lock_acquire_recursive>:
 800ca84:	4770      	bx	lr

0800ca86 <__retarget_lock_release_recursive>:
 800ca86:	4770      	bx	lr

0800ca88 <strcpy>:
 800ca88:	4603      	mov	r3, r0
 800ca8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca8e:	f803 2b01 	strb.w	r2, [r3], #1
 800ca92:	2a00      	cmp	r2, #0
 800ca94:	d1f9      	bne.n	800ca8a <strcpy+0x2>
 800ca96:	4770      	bx	lr

0800ca98 <_init>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	bf00      	nop
 800ca9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca9e:	bc08      	pop	{r3}
 800caa0:	469e      	mov	lr, r3
 800caa2:	4770      	bx	lr

0800caa4 <_fini>:
 800caa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa6:	bf00      	nop
 800caa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caaa:	bc08      	pop	{r3}
 800caac:	469e      	mov	lr, r3
 800caae:	4770      	bx	lr
