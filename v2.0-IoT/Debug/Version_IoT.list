
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccac  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000103c  0800ce90  0800ce90  0001ce90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800decc  0800decc  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  0800decc  0800decc  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800decc  0800decc  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800decc  0800decc  0001decc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ded0  0800ded0  0001ded0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800ded4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  2000010c  0800dfe0  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800dfe0  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY
 13 .debug_info   000178e2  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035a5  00000000  00000000  00037a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  0003b000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5c  00000000  00000000  0003c288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c620  00000000  00000000  0003d0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c061  00000000  00000000  00059704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee51  00000000  00000000  00075765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005210  00000000  00000000  001145b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001197c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000010c 	.word	0x2000010c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ce78 	.word	0x0800ce78

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000110 	.word	0x20000110
 8000220:	0800ce78 	.word	0x0800ce78

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol(int type) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af04      	add	r7, sp, #16
 800023a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000240:	9302      	str	r3, [sp, #8]
 8000242:	236e      	movs	r3, #110	; 0x6e
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	236e      	movs	r3, #110	; 0x6e
 800024c:	2200      	movs	r2, #0
 800024e:	21a0      	movs	r1, #160	; 0xa0
 8000250:	489a      	ldr	r0, [pc, #616]	; (80004bc <eepromKontrol+0x288>)
 8000252:	f009 fc83 	bl	8009b5c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000256:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800025a:	f008 fafb 	bl	8008854 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025e:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 8000260:	78da      	ldrb	r2, [r3, #3]
 8000262:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000264:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000266:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000268:	785a      	ldrb	r2, [r3, #1]
 800026a:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026c:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026e:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 8000270:	789a      	ldrb	r2, [r3, #2]
 8000272:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000274:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000276:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000278:	791a      	ldrb	r2, [r3, #4]
 800027a:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027c:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027e:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 8000280:	795a      	ldrb	r2, [r3, #5]
 8000282:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000284:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000286:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000288:	799a      	ldrb	r2, [r3, #6]
 800028a:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028c:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028e:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 8000290:	79da      	ldrb	r2, [r3, #7]
 8000292:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000294:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000296:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000298:	7a1a      	ldrb	r2, [r3, #8]
 800029a:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029c:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029e:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 80002a0:	7a5a      	ldrb	r2, [r3, #9]
 80002a2:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a4:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a6:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a8:	7a9a      	ldrb	r2, [r3, #10]
 80002aa:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002ac:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ae:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002b0:	7ada      	ldrb	r2, [r3, #11]
 80002b2:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b4:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b6:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b8:	7b1a      	ldrb	r2, [r3, #12]
 80002ba:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002bc:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002be:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002c0:	7b5a      	ldrb	r2, [r3, #13]
 80002c2:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c4:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c6:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c8:	7b9a      	ldrb	r2, [r3, #14]
 80002ca:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002cc:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002ce:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002d0:	7bda      	ldrb	r2, [r3, #15]
 80002d2:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d4:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d6:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d8:	7c1a      	ldrb	r2, [r3, #16]
 80002da:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002dc:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002de:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002e0:	7c5a      	ldrb	r2, [r3, #17]
 80002e2:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e4:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e6:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e8:	7c9a      	ldrb	r2, [r3, #18]
 80002ea:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ec:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ee:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002f0:	7cda      	ldrb	r2, [r3, #19]
 80002f2:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f4:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f6:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f8:	7d1a      	ldrb	r2, [r3, #20]
 80002fa:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fc:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fe:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 8000300:	7d5a      	ldrb	r2, [r3, #21]
 8000302:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000304:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000306:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000308:	7d9a      	ldrb	r2, [r3, #22]
 800030a:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030c:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030e:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 8000310:	7dda      	ldrb	r2, [r3, #23]
 8000312:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000314:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000316:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000318:	7e1a      	ldrb	r2, [r3, #24]
 800031a:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031c:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031e:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 8000320:	7e5a      	ldrb	r2, [r3, #25]
 8000322:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000324:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000326:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000328:	7e9a      	ldrb	r2, [r3, #26]
 800032a:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032c:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032e:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 8000330:	7eda      	ldrb	r2, [r3, #27]
 8000332:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000334:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000336:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000338:	7f1a      	ldrb	r2, [r3, #28]
 800033a:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033c:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033e:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 8000340:	7f5a      	ldrb	r2, [r3, #29]
 8000342:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000344:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000346:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000348:	7f9a      	ldrb	r2, [r3, #30]
 800034a:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034c:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034e:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 8000350:	7fda      	ldrb	r2, [r3, #31]
 8000352:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000354:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000356:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000358:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035c:	4b77      	ldr	r3, [pc, #476]	; (800053c <eepromKontrol+0x308>)
 800035e:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000360:	4b55      	ldr	r3, [pc, #340]	; (80004b8 <eepromKontrol+0x284>)
 8000362:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000366:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000368:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800036a:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8000370:	4b74      	ldr	r3, [pc, #464]	; (8000544 <eepromKontrol+0x310>)
 8000372:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000374:	4b50      	ldr	r3, [pc, #320]	; (80004b8 <eepromKontrol+0x284>)
 8000376:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800037a:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037c:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037e:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 8000380:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000384:	4b71      	ldr	r3, [pc, #452]	; (800054c <eepromKontrol+0x318>)
 8000386:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000388:	4b4b      	ldr	r3, [pc, #300]	; (80004b8 <eepromKontrol+0x284>)
 800038a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038e:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 8000390:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000392:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000394:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000398:	4b6e      	ldr	r3, [pc, #440]	; (8000554 <eepromKontrol+0x320>)
 800039a:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039c:	4b46      	ldr	r3, [pc, #280]	; (80004b8 <eepromKontrol+0x284>)
 800039e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a2:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a4:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a6:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003ac:	4b6b      	ldr	r3, [pc, #428]	; (800055c <eepromKontrol+0x328>)
 80003ae:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003b0:	4b41      	ldr	r3, [pc, #260]	; (80004b8 <eepromKontrol+0x284>)
 80003b2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b6:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b8:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003ba:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003bc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003c0:	4b68      	ldr	r3, [pc, #416]	; (8000564 <eepromKontrol+0x330>)
 80003c2:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c4:	4b3c      	ldr	r3, [pc, #240]	; (80004b8 <eepromKontrol+0x284>)
 80003c6:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003ca:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003cc:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003ce:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003d0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d4:	4b65      	ldr	r3, [pc, #404]	; (800056c <eepromKontrol+0x338>)
 80003d6:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d8:	4b37      	ldr	r3, [pc, #220]	; (80004b8 <eepromKontrol+0x284>)
 80003da:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003de:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003e0:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e2:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e8:	4b62      	ldr	r3, [pc, #392]	; (8000574 <eepromKontrol+0x340>)
 80003ea:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ec:	4b32      	ldr	r3, [pc, #200]	; (80004b8 <eepromKontrol+0x284>)
 80003ee:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f2:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f4:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f6:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f8:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fc:	4b5f      	ldr	r3, [pc, #380]	; (800057c <eepromKontrol+0x348>)
 80003fe:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 8000400:	4b4e      	ldr	r3, [pc, #312]	; (800053c <eepromKontrol+0x308>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b09      	cmp	r3, #9
 8000406:	d902      	bls.n	800040e <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8000408:	4b4c      	ldr	r3, [pc, #304]	; (800053c <eepromKontrol+0x308>)
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040e:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b09      	cmp	r3, #9
 8000414:	d902      	bls.n	800041c <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8000416:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000418:	2200      	movs	r2, #0
 800041a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041c:	4b45      	ldr	r3, [pc, #276]	; (8000534 <eepromKontrol+0x300>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b09      	cmp	r3, #9
 8000422:	d902      	bls.n	800042a <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8000424:	4b43      	ldr	r3, [pc, #268]	; (8000534 <eepromKontrol+0x300>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 800042a:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b09      	cmp	r3, #9
 8000430:	d902      	bls.n	8000438 <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8000432:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000438:	4b3c      	ldr	r3, [pc, #240]	; (800052c <eepromKontrol+0x2f8>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b09      	cmp	r3, #9
 800043e:	d902      	bls.n	8000446 <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8000440:	4b3a      	ldr	r3, [pc, #232]	; (800052c <eepromKontrol+0x2f8>)
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000446:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d902      	bls.n	8000454 <eepromKontrol+0x220>
	    calismaSekli=0;
 800044e:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000454:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <eepromKontrol+0x294>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b01      	cmp	r3, #1
 800045a:	d902      	bls.n	8000462 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 800045c:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <eepromKontrol+0x294>)
 800045e:	2201      	movs	r2, #1
 8000460:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d902      	bls.n	8000470 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 800046a:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046c:	2200      	movs	r2, #0
 800046e:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8000470:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <eepromKontrol+0x29c>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d902      	bls.n	800047e <eepromKontrol+0x24a>
	    altLimit=1;
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <eepromKontrol+0x29c>)
 800047a:	2201      	movs	r2, #1
 800047c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d902      	bls.n	800048c <eepromKontrol+0x258>
	    basincSalteri=1;
 8000486:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000488:	2201      	movs	r2, #1
 800048a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <eepromKontrol+0x2a4>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b03      	cmp	r3, #3
 8000492:	d902      	bls.n	800049a <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <eepromKontrol+0x2a4>)
 8000496:	2203      	movs	r2, #3
 8000498:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 800049a:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d902      	bls.n	80004a8 <eepromKontrol+0x274>
	    kapiAcTipi=0;
 80004a2:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <eepromKontrol+0x2a8>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b02      	cmp	r3, #2
 80004ae:	d967      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <eepromKontrol+0x2a8>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	701a      	strb	r2, [r3, #0]
 80004b6:	e063      	b.n	8000580 <eepromKontrol+0x34c>
 80004b8:	20000128 	.word	0x20000128
 80004bc:	200003ac 	.word	0x200003ac
 80004c0:	200001fd 	.word	0x200001fd
 80004c4:	20000225 	.word	0x20000225
 80004c8:	20000228 	.word	0x20000228
 80004cc:	20000229 	.word	0x20000229
 80004d0:	2000022a 	.word	0x2000022a
 80004d4:	2000022b 	.word	0x2000022b
 80004d8:	2000022c 	.word	0x2000022c
 80004dc:	2000022d 	.word	0x2000022d
 80004e0:	2000023d 	.word	0x2000023d
 80004e4:	2000022e 	.word	0x2000022e
 80004e8:	2000023e 	.word	0x2000023e
 80004ec:	2000022f 	.word	0x2000022f
 80004f0:	2000023f 	.word	0x2000023f
 80004f4:	20000232 	.word	0x20000232
 80004f8:	20000233 	.word	0x20000233
 80004fc:	20000234 	.word	0x20000234
 8000500:	20000235 	.word	0x20000235
 8000504:	20000236 	.word	0x20000236
 8000508:	20000237 	.word	0x20000237
 800050c:	20000238 	.word	0x20000238
 8000510:	20000239 	.word	0x20000239
 8000514:	2000023a 	.word	0x2000023a
 8000518:	2000023b 	.word	0x2000023b
 800051c:	2000023c 	.word	0x2000023c
 8000520:	20000240 	.word	0x20000240
 8000524:	20000242 	.word	0x20000242
 8000528:	20000220 	.word	0x20000220
 800052c:	20000221 	.word	0x20000221
 8000530:	20000222 	.word	0x20000222
 8000534:	20000008 	.word	0x20000008
 8000538:	20000009 	.word	0x20000009
 800053c:	20000223 	.word	0x20000223
 8000540:	20000245 	.word	0x20000245
 8000544:	20000243 	.word	0x20000243
 8000548:	20000231 	.word	0x20000231
 800054c:	20000244 	.word	0x20000244
 8000550:	20000230 	.word	0x20000230
 8000554:	20000246 	.word	0x20000246
 8000558:	20000247 	.word	0x20000247
 800055c:	20000248 	.word	0x20000248
 8000560:	20000249 	.word	0x20000249
 8000564:	2000024a 	.word	0x2000024a
 8000568:	2000024b 	.word	0x2000024b
 800056c:	2000024c 	.word	0x2000024c
 8000570:	2000024d 	.word	0x2000024d
 8000574:	2000024e 	.word	0x2000024e
 8000578:	2000024f 	.word	0x2000024f
 800057c:	200001fc 	.word	0x200001fc
	}

	if(kapi1AcSure>5) {
 8000580:	4b5d      	ldr	r3, [pc, #372]	; (80006f8 <eepromKontrol+0x4c4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b5b      	ldr	r3, [pc, #364]	; (80006f8 <eepromKontrol+0x4c4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b5b      	ldr	r3, [pc, #364]	; (80006fc <eepromKontrol+0x4c8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b59      	ldr	r3, [pc, #356]	; (80006fc <eepromKontrol+0x4c8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b58      	ldr	r3, [pc, #352]	; (8000700 <eepromKontrol+0x4cc>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b56      	ldr	r3, [pc, #344]	; (8000700 <eepromKontrol+0x4cc>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b56      	ldr	r3, [pc, #344]	; (8000704 <eepromKontrol+0x4d0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b54      	ldr	r3, [pc, #336]	; (8000704 <eepromKontrol+0x4d0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b53      	ldr	r3, [pc, #332]	; (8000708 <eepromKontrol+0x4d4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b51      	ldr	r3, [pc, #324]	; (8000708 <eepromKontrol+0x4d4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b51      	ldr	r3, [pc, #324]	; (800070c <eepromKontrol+0x4d8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4f      	ldr	r3, [pc, #316]	; (800070c <eepromKontrol+0x4d8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b4e      	ldr	r3, [pc, #312]	; (8000710 <eepromKontrol+0x4dc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b4c      	ldr	r3, [pc, #304]	; (8000710 <eepromKontrol+0x4dc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b4c      	ldr	r3, [pc, #304]	; (8000714 <eepromKontrol+0x4e0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b4a      	ldr	r3, [pc, #296]	; (8000714 <eepromKontrol+0x4e0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b49      	ldr	r3, [pc, #292]	; (8000718 <eepromKontrol+0x4e4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b47      	ldr	r3, [pc, #284]	; (8000718 <eepromKontrol+0x4e4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b47      	ldr	r3, [pc, #284]	; (800071c <eepromKontrol+0x4e8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b45      	ldr	r3, [pc, #276]	; (800071c <eepromKontrol+0x4e8>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b44      	ldr	r3, [pc, #272]	; (8000720 <eepromKontrol+0x4ec>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b42      	ldr	r3, [pc, #264]	; (8000720 <eepromKontrol+0x4ec>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b42      	ldr	r3, [pc, #264]	; (8000724 <eepromKontrol+0x4f0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b40      	ldr	r3, [pc, #256]	; (8000724 <eepromKontrol+0x4f0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3f      	ldr	r3, [pc, #252]	; (8000728 <eepromKontrol+0x4f4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b3d      	ldr	r3, [pc, #244]	; (8000728 <eepromKontrol+0x4f4>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b3d      	ldr	r3, [pc, #244]	; (800072c <eepromKontrol+0x4f8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b3b      	ldr	r3, [pc, #236]	; (800072c <eepromKontrol+0x4f8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b3a      	ldr	r3, [pc, #232]	; (8000730 <eepromKontrol+0x4fc>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b38      	ldr	r3, [pc, #224]	; (8000730 <eepromKontrol+0x4fc>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b38      	ldr	r3, [pc, #224]	; (8000734 <eepromKontrol+0x500>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b36      	ldr	r3, [pc, #216]	; (8000734 <eepromKontrol+0x500>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b35      	ldr	r3, [pc, #212]	; (8000738 <eepromKontrol+0x504>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b33      	ldr	r3, [pc, #204]	; (8000738 <eepromKontrol+0x504>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b33      	ldr	r3, [pc, #204]	; (800073c <eepromKontrol+0x508>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b31      	ldr	r3, [pc, #196]	; (800073c <eepromKontrol+0x508>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b30      	ldr	r3, [pc, #192]	; (8000740 <eepromKontrol+0x50c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <eepromKontrol+0x50c>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <eepromKontrol+0x510>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <eepromKontrol+0x510>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <eepromKontrol+0x514>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <eepromKontrol+0x514>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <eepromKontrol+0x518>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b27      	ldr	r3, [pc, #156]	; (800074c <eepromKontrol+0x518>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], machineIDCharacterLimit);
 80006b4:	4b26      	ldr	r3, [pc, #152]	; (8000750 <eepromKontrol+0x51c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a26      	ldr	r2, [pc, #152]	; (8000754 <eepromKontrol+0x520>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <eepromKontrol+0x524>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	HAL_Delay(500);
 80006ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ce:	f008 f8c1 	bl	8008854 <HAL_Delay>
	readFromEEPROM(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 f852 	bl	800077c <readFromEEPROM>
	HAL_Delay(1000);
 80006d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006dc:	f008 f8ba 	bl	8008854 <HAL_Delay>
	readFromEEPROM(2);
 80006e0:	2002      	movs	r0, #2
 80006e2:	f000 f84b 	bl	800077c <readFromEEPROM>
	HAL_Delay(1000);
 80006e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ea:	f008 f8b3 	bl	8008854 <HAL_Delay>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000023d 	.word	0x2000023d
 80006fc:	2000022e 	.word	0x2000022e
 8000700:	2000023e 	.word	0x2000023e
 8000704:	2000022f 	.word	0x2000022f
 8000708:	20000231 	.word	0x20000231
 800070c:	2000023f 	.word	0x2000023f
 8000710:	20000232 	.word	0x20000232
 8000714:	20000233 	.word	0x20000233
 8000718:	20000234 	.word	0x20000234
 800071c:	20000235 	.word	0x20000235
 8000720:	20000236 	.word	0x20000236
 8000724:	20000237 	.word	0x20000237
 8000728:	20000238 	.word	0x20000238
 800072c:	20000239 	.word	0x20000239
 8000730:	2000023a 	.word	0x2000023a
 8000734:	2000023b 	.word	0x2000023b
 8000738:	2000023c 	.word	0x2000023c
 800073c:	20000240 	.word	0x20000240
 8000740:	20000242 	.word	0x20000242
 8000744:	20000244 	.word	0x20000244
 8000748:	20000245 	.word	0x20000245
 800074c:	20000243 	.word	0x20000243
 8000750:	2000000c 	.word	0x2000000c
 8000754:	20000128 	.word	0x20000128
 8000758:	200001a0 	.word	0x200001a0

0800075c <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <getCharFromCursorPosition+0x1c>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	781b      	ldrb	r3, [r3, #0]
}
 800076c:	4618      	mov	r0, r3
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	2000002c 	.word	0x2000002c

0800077c <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d121      	bne.n	80007ce <readFromEEPROM+0x52>
		//Wifi SSID okuma
		uint8_t tempSSIDStartPos = ssidStartPos;
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <readFromEEPROM+0x9c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	e017      	b.n	80007c6 <readFromEEPROM+0x4a>
			if(eepromData[tempSSIDStartPos] != '\0') {
 8000796:	7dfb      	ldrb	r3, [r7, #23]
 8000798:	4a20      	ldr	r2, [pc, #128]	; (800081c <readFromEEPROM+0xa0>)
 800079a:	5cd3      	ldrb	r3, [r2, r3]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00f      	beq.n	80007c0 <readFromEEPROM+0x44>
				wifiSSID[i] = getCharFromCursorPosition(eepromData[tempSSIDStartPos]);
 80007a0:	7dfb      	ldrb	r3, [r7, #23]
 80007a2:	4a1e      	ldr	r2, [pc, #120]	; (800081c <readFromEEPROM+0xa0>)
 80007a4:	5cd3      	ldrb	r3, [r2, r3]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ffd8 	bl	800075c <getCharFromCursorPosition>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4619      	mov	r1, r3
 80007b0:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <readFromEEPROM+0xa4>)
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	4413      	add	r3, r2
 80007b6:	460a      	mov	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]

				tempSSIDStartPos++;
 80007ba:	7dfb      	ldrb	r3, [r7, #23]
 80007bc:	3301      	adds	r3, #1
 80007be:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	3301      	adds	r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	2b13      	cmp	r3, #19
 80007ca:	dde4      	ble.n	8000796 <readFromEEPROM+0x1a>
				wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
				tempPassStartPos++;
			}
		}
	}
}
 80007cc:	e020      	b.n	8000810 <readFromEEPROM+0x94>
		uint8_t tempPassStartPos = passStartPos;
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <readFromEEPROM+0xa8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	e017      	b.n	800080a <readFromEEPROM+0x8e>
			if(eepromData[tempPassStartPos] != '\0') {
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	4a0f      	ldr	r2, [pc, #60]	; (800081c <readFromEEPROM+0xa0>)
 80007de:	5cd3      	ldrb	r3, [r2, r3]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d00f      	beq.n	8000804 <readFromEEPROM+0x88>
				wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	4a0d      	ldr	r2, [pc, #52]	; (800081c <readFromEEPROM+0xa0>)
 80007e8:	5cd3      	ldrb	r3, [r2, r3]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ffb6 	bl	800075c <getCharFromCursorPosition>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4619      	mov	r1, r3
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <readFromEEPROM+0xac>)
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	4413      	add	r3, r2
 80007fa:	460a      	mov	r2, r1
 80007fc:	701a      	strb	r2, [r3, #0]
				tempPassStartPos++;
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	3301      	adds	r3, #1
 8000802:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	3301      	adds	r3, #1
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	2b13      	cmp	r3, #19
 800080e:	dde4      	ble.n	80007da <readFromEEPROM+0x5e>
}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000010 	.word	0x20000010
 800081c:	20000128 	.word	0x20000128
 8000820:	200001ac 	.word	0x200001ac
 8000824:	20000014 	.word	0x20000014
 8000828:	200001c0 	.word	0x200001c0

0800082c <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b09f      	sub	sp, #124	; 0x7c
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000838:	4948      	ldr	r1, [pc, #288]	; (800095c <ESP8266_Init+0x130>)
 800083a:	4849      	ldr	r0, [pc, #292]	; (8000960 <ESP8266_Init+0x134>)
 800083c:	f00b febc 	bl	800c5b8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000840:	4847      	ldr	r0, [pc, #284]	; (8000960 <ESP8266_Init+0x134>)
 8000842:	f7ff fcef 	bl	8000224 <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	b29b      	uxth	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	4944      	ldr	r1, [pc, #272]	; (8000960 <ESP8266_Init+0x134>)
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f00b f8cc 	bl	800b9ec <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000854:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000858:	f007 fffc 	bl	8008854 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 800085c:	4941      	ldr	r1, [pc, #260]	; (8000964 <ESP8266_Init+0x138>)
 800085e:	4840      	ldr	r0, [pc, #256]	; (8000960 <ESP8266_Init+0x134>)
 8000860:	f00b feaa 	bl	800c5b8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000864:	483e      	ldr	r0, [pc, #248]	; (8000960 <ESP8266_Init+0x134>)
 8000866:	f7ff fcdd 	bl	8000224 <strlen>
 800086a:	4603      	mov	r3, r0
 800086c:	b29b      	uxth	r3, r3
 800086e:	461a      	mov	r2, r3
 8000870:	493b      	ldr	r1, [pc, #236]	; (8000960 <ESP8266_Init+0x134>)
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f00b f8ba 	bl	800b9ec <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000878:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087c:	f007 ffea 	bl	8008854 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000880:	4939      	ldr	r1, [pc, #228]	; (8000968 <ESP8266_Init+0x13c>)
 8000882:	4837      	ldr	r0, [pc, #220]	; (8000960 <ESP8266_Init+0x134>)
 8000884:	f00b fe98 	bl	800c5b8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000888:	4835      	ldr	r0, [pc, #212]	; (8000960 <ESP8266_Init+0x134>)
 800088a:	f7ff fccb 	bl	8000224 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b29b      	uxth	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	4932      	ldr	r1, [pc, #200]	; (8000960 <ESP8266_Init+0x134>)
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f00b f8a8 	bl	800b9ec <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800089c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008a0:	f007 ffd8 	bl	8008854 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80008a4:	4931      	ldr	r1, [pc, #196]	; (800096c <ESP8266_Init+0x140>)
 80008a6:	482e      	ldr	r0, [pc, #184]	; (8000960 <ESP8266_Init+0x134>)
 80008a8:	f00b fe86 	bl	800c5b8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008ac:	482c      	ldr	r0, [pc, #176]	; (8000960 <ESP8266_Init+0x134>)
 80008ae:	f7ff fcb9 	bl	8000224 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	4929      	ldr	r1, [pc, #164]	; (8000960 <ESP8266_Init+0x134>)
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f00b f896 	bl	800b9ec <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008c4:	f007 ffc6 	bl	8008854 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4a28      	ldr	r2, [pc, #160]	; (8000970 <ESP8266_Init+0x144>)
 80008ce:	461c      	mov	r4, r3
 80008d0:	4613      	mov	r3, r2
 80008d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d4:	c407      	stmia	r4!, {r0, r1, r2}
 80008d6:	8023      	strh	r3, [r4, #0]
 80008d8:	3402      	adds	r4, #2
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	68b9      	ldr	r1, [r7, #8]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f00b fec9 	bl	800c67c <strcat>
	strcat(str, "\",\"");
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fc98 	bl	8000224 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4413      	add	r3, r2
 80008fe:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <ESP8266_Init+0x148>)
 8000900:	6810      	ldr	r0, [r2, #0]
 8000902:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	6879      	ldr	r1, [r7, #4]
 800090a:	4618      	mov	r0, r3
 800090c:	f00b feb6 	bl	800c67c <strcat>
	strcat(str, "\"\r\n");
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fc85 	bl	8000224 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4413      	add	r3, r2
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <ESP8266_Init+0x14c>)
 8000926:	6810      	ldr	r0, [r2, #0]
 8000928:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	461a      	mov	r2, r3
 8000930:	4912      	ldr	r1, [pc, #72]	; (800097c <ESP8266_Init+0x150>)
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <ESP8266_Init+0x134>)
 8000934:	f00b fe40 	bl	800c5b8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000938:	4809      	ldr	r0, [pc, #36]	; (8000960 <ESP8266_Init+0x134>)
 800093a:	f7ff fc73 	bl	8000224 <strlen>
 800093e:	4603      	mov	r3, r0
 8000940:	b29b      	uxth	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <ESP8266_Init+0x134>)
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f00b f850 	bl	800b9ec <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800094c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000950:	f007 ff80 	bl	8008854 <HAL_Delay>
}
 8000954:	bf00      	nop
 8000956:	377c      	adds	r7, #124	; 0x7c
 8000958:	46bd      	mov	sp, r7
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	0800ce90 	.word	0x0800ce90
 8000960:	20000288 	.word	0x20000288
 8000964:	0800cea0 	.word	0x0800cea0
 8000968:	0800ceac 	.word	0x0800ceac
 800096c:	0800ceb4 	.word	0x0800ceb4
 8000970:	0800cec4 	.word	0x0800cec4
 8000974:	0800ced4 	.word	0x0800ced4
 8000978:	0800ced8 	.word	0x0800ced8
 800097c:	0800cedc 	.word	0x0800cedc

08000980 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b0c6      	sub	sp, #280	; 0x118
 8000984:	af02      	add	r7, sp, #8
 8000986:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800098a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800098e:	6018      	str	r0, [r3, #0]
 8000990:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000998:	6019      	str	r1, [r3, #0]
 800099a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800099e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009a2:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009a4:	4a31      	ldr	r2, [pc, #196]	; (8000a6c <sendMachineData+0xec>)
 80009a6:	4932      	ldr	r1, [pc, #200]	; (8000a70 <sendMachineData+0xf0>)
 80009a8:	4832      	ldr	r0, [pc, #200]	; (8000a74 <sendMachineData+0xf4>)
 80009aa:	f00b fe05 	bl	800c5b8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009ae:	4831      	ldr	r0, [pc, #196]	; (8000a74 <sendMachineData+0xf4>)
 80009b0:	f7ff fc38 	bl	8000224 <strlen>
 80009b4:	4603      	mov	r3, r0
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009c0:	492c      	ldr	r1, [pc, #176]	; (8000a74 <sendMachineData+0xf4>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	f00b f812 	bl	800b9ec <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80009c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009cc:	f007 ff42 	bl	8008854 <HAL_Delay>

	sprintf(local_txA,
 80009d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009d8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009dc:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80009e0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80009e4:	4924      	ldr	r1, [pc, #144]	; (8000a78 <sendMachineData+0xf8>)
 80009e6:	9100      	str	r1, [sp, #0]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6812      	ldr	r2, [r2, #0]
 80009ec:	4923      	ldr	r1, [pc, #140]	; (8000a7c <sendMachineData+0xfc>)
 80009ee:	f00b fde3 	bl	800c5b8 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80009f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fc14 	bl	8000224 <strlen>
 80009fc:	4603      	mov	r3, r0
 80009fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000a0a:	491d      	ldr	r1, [pc, #116]	; (8000a80 <sendMachineData+0x100>)
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f00b fdd3 	bl	800c5b8 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fc04 	bl	8000224 <strlen>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	f107 0110 	add.w	r1, r7, #16
 8000a24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a2c:	6818      	ldr	r0, [r3, #0]
 8000a2e:	f00a ffdd 	bl	800b9ec <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a36:	f007 ff0d 	bl	8008854 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fbf0 	bl	8000224 <strlen>
 8000a44:	4603      	mov	r3, r0
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a54:	6818      	ldr	r0, [r3, #0]
 8000a56:	f00a ffc9 	bl	800b9ec <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a5e:	f007 fef9 	bl	8008854 <HAL_Delay>
}
 8000a62:	bf00      	nop
 8000a64:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	0800cee0 	.word	0x0800cee0
 8000a70:	0800cef0 	.word	0x0800cef0
 8000a74:	20000288 	.word	0x20000288
 8000a78:	0800cf6c 	.word	0x0800cf6c
 8000a7c:	0800cf10 	.word	0x0800cf10
 8000a80:	0800cf80 	.word	0x0800cf80

08000a84 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af04      	add	r7, sp, #16
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <hata2EEPROM+0xa4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	1e5a      	subs	r2, r3, #1
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <hata2EEPROM+0xa8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a25      	ldr	r2, [pc, #148]	; (8000b30 <hata2EEPROM+0xac>)
 8000a9c:	5cd3      	ldrb	r3, [r2, r3]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d002      	beq.n	8000aa8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000aa2:	f000 f92b 	bl	8000cfc <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000aa6:	e000      	b.n	8000aaa <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000aa8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	e012      	b.n	8000ad6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <hata2EEPROM+0xa8>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <hata2EEPROM+0xac>)
 8000aba:	5cd3      	ldrb	r3, [r2, r3]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d107      	bne.n	8000ad0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <hata2EEPROM+0xa8>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4919      	ldr	r1, [pc, #100]	; (8000b30 <hata2EEPROM+0xac>)
 8000aca:	79fa      	ldrb	r2, [r7, #7]
 8000acc:	54ca      	strb	r2, [r1, r3]
					break;
 8000ace:	e007      	b.n	8000ae0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <hata2EEPROM+0xa4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	dbe7      	blt.n	8000ab0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <hata2EEPROM+0xa8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	b299      	uxth	r1, r3
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <hata2EEPROM+0xa4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	b298      	uxth	r0, r3
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <hata2EEPROM+0xa8>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <hata2EEPROM+0xac>)
 8000af2:	4413      	add	r3, r2
 8000af4:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <hata2EEPROM+0xa4>)
 8000af6:	6812      	ldr	r2, [r2, #0]
 8000af8:	b292      	uxth	r2, r2
 8000afa:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000afe:	9402      	str	r4, [sp, #8]
 8000b00:	9201      	str	r2, [sp, #4]
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	4603      	mov	r3, r0
 8000b06:	460a      	mov	r2, r1
 8000b08:	21a0      	movs	r1, #160	; 0xa0
 8000b0a:	480a      	ldr	r0, [pc, #40]	; (8000b34 <hata2EEPROM+0xb0>)
 8000b0c:	f008 ff2c 	bl	8009968 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000b10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b14:	f007 fe9e 	bl	8008854 <HAL_Delay>
	eepromKontrol(1);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f7ff fb8b 	bl	8000234 <eepromKontrol>
}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd90      	pop	{r4, r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000a8 	.word	0x200000a8
 8000b2c:	200000ac 	.word	0x200000ac
 8000b30:	20000128 	.word	0x20000128
 8000b34:	200003ac 	.word	0x200003ac

08000b38 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d11d      	bne.n	8000b84 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b48:	4b62      	ldr	r3, [pc, #392]	; (8000cd4 <hataKoduLcdGoster+0x19c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d105      	bne.n	8000b5c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b50:	4a61      	ldr	r2, [pc, #388]	; (8000cd8 <hataKoduLcdGoster+0x1a0>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	2001      	movs	r0, #1
 8000b56:	f007 f921 	bl	8007d9c <lcd_print>
 8000b5a:	e008      	b.n	8000b6e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000b5c:	4b5d      	ldr	r3, [pc, #372]	; (8000cd4 <hataKoduLcdGoster+0x19c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d104      	bne.n	8000b6e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000b64:	4a5d      	ldr	r2, [pc, #372]	; (8000cdc <hataKoduLcdGoster+0x1a4>)
 8000b66:	2101      	movs	r1, #1
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f007 f917 	bl	8007d9c <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000b6e:	4a5c      	ldr	r2, [pc, #368]	; (8000ce0 <hataKoduLcdGoster+0x1a8>)
 8000b70:	2101      	movs	r1, #1
 8000b72:	2002      	movs	r0, #2
 8000b74:	f007 f912 	bl	8007d9c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b78:	4a5a      	ldr	r2, [pc, #360]	; (8000ce4 <hataKoduLcdGoster+0x1ac>)
 8000b7a:	2107      	movs	r1, #7
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f007 f90d 	bl	8007d9c <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000b82:	e0a3      	b.n	8000ccc <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d11d      	bne.n	8000bc6 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000b8a:	4b52      	ldr	r3, [pc, #328]	; (8000cd4 <hataKoduLcdGoster+0x19c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d105      	bne.n	8000b9e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000b92:	4a51      	ldr	r2, [pc, #324]	; (8000cd8 <hataKoduLcdGoster+0x1a0>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	2001      	movs	r0, #1
 8000b98:	f007 f900 	bl	8007d9c <lcd_print>
 8000b9c:	e008      	b.n	8000bb0 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <hataKoduLcdGoster+0x19c>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d104      	bne.n	8000bb0 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000ba6:	4a4d      	ldr	r2, [pc, #308]	; (8000cdc <hataKoduLcdGoster+0x1a4>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	2001      	movs	r0, #1
 8000bac:	f007 f8f6 	bl	8007d9c <lcd_print>
		lcd_print(2, 2, "2");
 8000bb0:	4a4d      	ldr	r2, [pc, #308]	; (8000ce8 <hataKoduLcdGoster+0x1b0>)
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f007 f8f1 	bl	8007d9c <lcd_print>
		lcd_print(2, 7, "          ");
 8000bba:	4a4a      	ldr	r2, [pc, #296]	; (8000ce4 <hataKoduLcdGoster+0x1ac>)
 8000bbc:	2107      	movs	r1, #7
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f007 f8ec 	bl	8007d9c <lcd_print>
}
 8000bc4:	e082      	b.n	8000ccc <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d11d      	bne.n	8000c08 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000bcc:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <hataKoduLcdGoster+0x19c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d105      	bne.n	8000be0 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000bd4:	4a40      	ldr	r2, [pc, #256]	; (8000cd8 <hataKoduLcdGoster+0x1a0>)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f007 f8df 	bl	8007d9c <lcd_print>
 8000bde:	e008      	b.n	8000bf2 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000be0:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <hataKoduLcdGoster+0x19c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d104      	bne.n	8000bf2 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000be8:	4a3c      	ldr	r2, [pc, #240]	; (8000cdc <hataKoduLcdGoster+0x1a4>)
 8000bea:	2101      	movs	r1, #1
 8000bec:	2001      	movs	r0, #1
 8000bee:	f007 f8d5 	bl	8007d9c <lcd_print>
		lcd_print(2, 3, "3");
 8000bf2:	4a3e      	ldr	r2, [pc, #248]	; (8000cec <hataKoduLcdGoster+0x1b4>)
 8000bf4:	2103      	movs	r1, #3
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f007 f8d0 	bl	8007d9c <lcd_print>
		lcd_print(2, 7, "          ");
 8000bfc:	4a39      	ldr	r2, [pc, #228]	; (8000ce4 <hataKoduLcdGoster+0x1ac>)
 8000bfe:	2107      	movs	r1, #7
 8000c00:	2002      	movs	r0, #2
 8000c02:	f007 f8cb 	bl	8007d9c <lcd_print>
}
 8000c06:	e061      	b.n	8000ccc <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	d11d      	bne.n	8000c4a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <hataKoduLcdGoster+0x19c>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d105      	bne.n	8000c22 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000c16:	4a30      	ldr	r2, [pc, #192]	; (8000cd8 <hataKoduLcdGoster+0x1a0>)
 8000c18:	2101      	movs	r1, #1
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f007 f8be 	bl	8007d9c <lcd_print>
 8000c20:	e008      	b.n	8000c34 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <hataKoduLcdGoster+0x19c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d104      	bne.n	8000c34 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c2a:	4a2c      	ldr	r2, [pc, #176]	; (8000cdc <hataKoduLcdGoster+0x1a4>)
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f007 f8b4 	bl	8007d9c <lcd_print>
		lcd_print(2, 4, "4");
 8000c34:	4a2e      	ldr	r2, [pc, #184]	; (8000cf0 <hataKoduLcdGoster+0x1b8>)
 8000c36:	2104      	movs	r1, #4
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f007 f8af 	bl	8007d9c <lcd_print>
		lcd_print(2, 7, "          ");
 8000c3e:	4a29      	ldr	r2, [pc, #164]	; (8000ce4 <hataKoduLcdGoster+0x1ac>)
 8000c40:	2107      	movs	r1, #7
 8000c42:	2002      	movs	r0, #2
 8000c44:	f007 f8aa 	bl	8007d9c <lcd_print>
}
 8000c48:	e040      	b.n	8000ccc <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b05      	cmp	r3, #5
 8000c4e:	d11d      	bne.n	8000c8c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c50:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <hataKoduLcdGoster+0x19c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d105      	bne.n	8000c64 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000c58:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <hataKoduLcdGoster+0x1a0>)
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f007 f89d 	bl	8007d9c <lcd_print>
 8000c62:	e008      	b.n	8000c76 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <hataKoduLcdGoster+0x19c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d104      	bne.n	8000c76 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <hataKoduLcdGoster+0x1a4>)
 8000c6e:	2101      	movs	r1, #1
 8000c70:	2001      	movs	r0, #1
 8000c72:	f007 f893 	bl	8007d9c <lcd_print>
		lcd_print(2, 5, "5");
 8000c76:	4a1f      	ldr	r2, [pc, #124]	; (8000cf4 <hataKoduLcdGoster+0x1bc>)
 8000c78:	2105      	movs	r1, #5
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	f007 f88e 	bl	8007d9c <lcd_print>
		lcd_print(2, 7, "          ");
 8000c80:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <hataKoduLcdGoster+0x1ac>)
 8000c82:	2107      	movs	r1, #7
 8000c84:	2002      	movs	r0, #2
 8000c86:	f007 f889 	bl	8007d9c <lcd_print>
}
 8000c8a:	e01f      	b.n	8000ccc <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d11c      	bne.n	8000ccc <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <hataKoduLcdGoster+0x19c>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d105      	bne.n	8000ca6 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <hataKoduLcdGoster+0x1a0>)
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f007 f87c 	bl	8007d9c <lcd_print>
 8000ca4:	e008      	b.n	8000cb8 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <hataKoduLcdGoster+0x19c>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d104      	bne.n	8000cb8 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <hataKoduLcdGoster+0x1a4>)
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f007 f872 	bl	8007d9c <lcd_print>
		lcd_print(2, 6, "6");
 8000cb8:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <hataKoduLcdGoster+0x1c0>)
 8000cba:	2106      	movs	r1, #6
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f007 f86d 	bl	8007d9c <lcd_print>
		lcd_print(2, 7, "          ");
 8000cc2:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <hataKoduLcdGoster+0x1ac>)
 8000cc4:	2107      	movs	r1, #7
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f007 f868 	bl	8007d9c <lcd_print>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000245 	.word	0x20000245
 8000cd8:	0800d00c 	.word	0x0800d00c
 8000cdc:	0800d01c 	.word	0x0800d01c
 8000ce0:	0800d02c 	.word	0x0800d02c
 8000ce4:	0800d030 	.word	0x0800d030
 8000ce8:	0800d03c 	.word	0x0800d03c
 8000cec:	0800d040 	.word	0x0800d040
 8000cf0:	0800d044 	.word	0x0800d044
 8000cf4:	0800d048 	.word	0x0800d048
 8000cf8:	0800d04c 	.word	0x0800d04c

08000cfc <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	e009      	b.n	8000d1c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <eepromDataFillWithEmpty+0x38>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d10:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <eepromDataFillWithEmpty+0x3c>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <eepromDataFillWithEmpty+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	dbf0      	blt.n	8000d08 <eepromDataFillWithEmpty+0xc>
	}
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000080 	.word	0x20000080
 8000d38:	20000128 	.word	0x20000128
 8000d3c:	200000a8 	.word	0x200000a8

08000d40 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d46:	463b      	mov	r3, r7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d52:	4b50      	ldr	r3, [pc, #320]	; (8000e94 <i2cTest+0x154>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b4e      	ldr	r3, [pc, #312]	; (8000e94 <i2cTest+0x154>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 0201 	bic.w	r2, r2, #1
 8000d60:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000d62:	484c      	ldr	r0, [pc, #304]	; (8000e94 <i2cTest+0x154>)
 8000d64:	f008 fcd2 	bl	800970c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d68:	23c0      	movs	r3, #192	; 0xc0
 8000d6a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000d6c:	2311      	movs	r3, #17
 8000d6e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4846      	ldr	r0, [pc, #280]	; (8000e98 <i2cTest+0x158>)
 8000d7e:	f008 f8d9 	bl	8008f34 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2140      	movs	r1, #64	; 0x40
 8000d86:	4844      	ldr	r0, [pc, #272]	; (8000e98 <i2cTest+0x158>)
 8000d88:	f008 fb4b 	bl	8009422 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	4841      	ldr	r0, [pc, #260]	; (8000e98 <i2cTest+0x158>)
 8000d92:	f008 fb46 	bl	8009422 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000d96:	200a      	movs	r0, #10
 8000d98:	f007 fd5c 	bl	8008854 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d9c:	bf00      	nop
 8000d9e:	2140      	movs	r1, #64	; 0x40
 8000da0:	483d      	ldr	r0, [pc, #244]	; (8000e98 <i2cTest+0x158>)
 8000da2:	f008 fb27 	bl	80093f4 <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d006      	beq.n	8000dba <i2cTest+0x7a>
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	483a      	ldr	r0, [pc, #232]	; (8000e98 <i2cTest+0x158>)
 8000db0:	f008 fb20 	bl	80093f4 <HAL_GPIO_ReadPin>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d1f1      	bne.n	8000d9e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	4836      	ldr	r0, [pc, #216]	; (8000e98 <i2cTest+0x158>)
 8000dc0:	f008 fb2f 	bl	8009422 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000dc4:	200a      	movs	r0, #10
 8000dc6:	f007 fd45 	bl	8008854 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000dca:	bf00      	nop
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	4832      	ldr	r0, [pc, #200]	; (8000e98 <i2cTest+0x158>)
 8000dd0:	f008 fb10 	bl	80093f4 <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d0f8      	beq.n	8000dcc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2140      	movs	r1, #64	; 0x40
 8000dde:	482e      	ldr	r0, [pc, #184]	; (8000e98 <i2cTest+0x158>)
 8000de0:	f008 fb1f 	bl	8009422 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000de4:	200a      	movs	r0, #10
 8000de6:	f007 fd35 	bl	8008854 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000dea:	bf00      	nop
 8000dec:	2140      	movs	r1, #64	; 0x40
 8000dee:	482a      	ldr	r0, [pc, #168]	; (8000e98 <i2cTest+0x158>)
 8000df0:	f008 fb00 	bl	80093f4 <HAL_GPIO_ReadPin>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d0f8      	beq.n	8000dec <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2140      	movs	r1, #64	; 0x40
 8000dfe:	4826      	ldr	r0, [pc, #152]	; (8000e98 <i2cTest+0x158>)
 8000e00:	f008 fb0f 	bl	8009422 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e04:	200a      	movs	r0, #10
 8000e06:	f007 fd25 	bl	8008854 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000e0a:	bf00      	nop
 8000e0c:	2140      	movs	r1, #64	; 0x40
 8000e0e:	4822      	ldr	r0, [pc, #136]	; (8000e98 <i2cTest+0x158>)
 8000e10:	f008 faf0 	bl	80093f4 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d1f8      	bne.n	8000e0c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	481e      	ldr	r0, [pc, #120]	; (8000e98 <i2cTest+0x158>)
 8000e20:	f008 faff 	bl	8009422 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e24:	200a      	movs	r0, #10
 8000e26:	f007 fd15 	bl	8008854 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e2a:	bf00      	nop
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	481a      	ldr	r0, [pc, #104]	; (8000e98 <i2cTest+0x158>)
 8000e30:	f008 fae0 	bl	80093f4 <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d1f8      	bne.n	8000e2c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e3a:	23c0      	movs	r3, #192	; 0xc0
 8000e3c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e3e:	2312      	movs	r3, #18
 8000e40:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <i2cTest+0x158>)
 8000e50:	f008 f870 	bl	8008f34 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <i2cTest+0x154>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <i2cTest+0x154>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e62:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <i2cTest+0x154>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <i2cTest+0x154>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e72:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <i2cTest+0x154>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <i2cTest+0x154>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0201 	orr.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000e84:	4803      	ldr	r0, [pc, #12]	; (8000e94 <i2cTest+0x154>)
 8000e86:	f008 fafd 	bl	8009484 <HAL_I2C_Init>
}
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200003ac 	.word	0x200003ac
 8000e98:	40010c00 	.word	0x40010c00

08000e9c <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000ea6:	20c8      	movs	r0, #200	; 0xc8
 8000ea8:	f007 fcd4 	bl	8008854 <HAL_Delay>
	lcd_clear();
 8000eac:	f006 ffa2 	bl	8007df4 <lcd_clear>
	if(type == 1 && page == 0) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d143      	bne.n	8000f3e <printTemplate+0xa2>
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d140      	bne.n	8000f3e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000ebc:	4a9d      	ldr	r2, [pc, #628]	; (8001134 <printTemplate+0x298>)
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f006 ff6b 	bl	8007d9c <lcd_print>
		lcd_print(2, 3, "0");
 8000ec6:	4a9c      	ldr	r2, [pc, #624]	; (8001138 <printTemplate+0x29c>)
 8000ec8:	2103      	movs	r1, #3
 8000eca:	2002      	movs	r0, #2
 8000ecc:	f006 ff66 	bl	8007d9c <lcd_print>
		lcd_print(2, 4, "1");
 8000ed0:	4a9a      	ldr	r2, [pc, #616]	; (800113c <printTemplate+0x2a0>)
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f006 ff61 	bl	8007d9c <lcd_print>
		lcd_print(2, 5, "2");
 8000eda:	4a99      	ldr	r2, [pc, #612]	; (8001140 <printTemplate+0x2a4>)
 8000edc:	2105      	movs	r1, #5
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f006 ff5c 	bl	8007d9c <lcd_print>
		lcd_print(2, 6, "3");
 8000ee4:	4a97      	ldr	r2, [pc, #604]	; (8001144 <printTemplate+0x2a8>)
 8000ee6:	2106      	movs	r1, #6
 8000ee8:	2002      	movs	r0, #2
 8000eea:	f006 ff57 	bl	8007d9c <lcd_print>
		lcd_print(2, 7, "4");
 8000eee:	4a96      	ldr	r2, [pc, #600]	; (8001148 <printTemplate+0x2ac>)
 8000ef0:	2107      	movs	r1, #7
 8000ef2:	2002      	movs	r0, #2
 8000ef4:	f006 ff52 	bl	8007d9c <lcd_print>
		lcd_print(2, 10, "5");
 8000ef8:	4a94      	ldr	r2, [pc, #592]	; (800114c <printTemplate+0x2b0>)
 8000efa:	210a      	movs	r1, #10
 8000efc:	2002      	movs	r0, #2
 8000efe:	f006 ff4d 	bl	8007d9c <lcd_print>
		lcd_print(2, 11, "6");
 8000f02:	4a93      	ldr	r2, [pc, #588]	; (8001150 <printTemplate+0x2b4>)
 8000f04:	210b      	movs	r1, #11
 8000f06:	2002      	movs	r0, #2
 8000f08:	f006 ff48 	bl	8007d9c <lcd_print>
		lcd_print(2, 12, "7");
 8000f0c:	4a91      	ldr	r2, [pc, #580]	; (8001154 <printTemplate+0x2b8>)
 8000f0e:	210c      	movs	r1, #12
 8000f10:	2002      	movs	r0, #2
 8000f12:	f006 ff43 	bl	8007d9c <lcd_print>
		lcd_print(2, 13, "8");
 8000f16:	4a90      	ldr	r2, [pc, #576]	; (8001158 <printTemplate+0x2bc>)
 8000f18:	210d      	movs	r1, #13
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f006 ff3e 	bl	8007d9c <lcd_print>
		lcd_print(2, 14, "9");
 8000f20:	4a8e      	ldr	r2, [pc, #568]	; (800115c <printTemplate+0x2c0>)
 8000f22:	210e      	movs	r1, #14
 8000f24:	2002      	movs	r0, #2
 8000f26:	f006 ff39 	bl	8007d9c <lcd_print>
		lcd_print(1, 5, machineID);
 8000f2a:	4a8d      	ldr	r2, [pc, #564]	; (8001160 <printTemplate+0x2c4>)
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f006 ff34 	bl	8007d9c <lcd_print>
		lcd_gotoxy(2, 3);
 8000f34:	2103      	movs	r1, #3
 8000f36:	2002      	movs	r0, #2
 8000f38:	f006 ff11 	bl	8007d5e <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f3c:	e0f5      	b.n	800112a <printTemplate+0x28e>
	} else if(type == 2) {
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d178      	bne.n	8001036 <printTemplate+0x19a>
		if(page == 1) {
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d114      	bne.n	8000f74 <printTemplate+0xd8>
			lcd_clear();
 8000f4a:	f006 ff53 	bl	8007df4 <lcd_clear>
			HAL_Delay(100);
 8000f4e:	2064      	movs	r0, #100	; 0x64
 8000f50:	f007 fc80 	bl	8008854 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f54:	4a83      	ldr	r2, [pc, #524]	; (8001164 <printTemplate+0x2c8>)
 8000f56:	2101      	movs	r1, #1
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f006 ff1f 	bl	8007d9c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f5e:	4a82      	ldr	r2, [pc, #520]	; (8001168 <printTemplate+0x2cc>)
 8000f60:	2107      	movs	r1, #7
 8000f62:	2001      	movs	r0, #1
 8000f64:	f006 ff1a 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f68:	4a80      	ldr	r2, [pc, #512]	; (800116c <printTemplate+0x2d0>)
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f006 ff15 	bl	8007d9c <lcd_print>
}
 8000f72:	e0da      	b.n	800112a <printTemplate+0x28e>
		} else if(page == 2) {
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d114      	bne.n	8000fa4 <printTemplate+0x108>
			lcd_clear();
 8000f7a:	f006 ff3b 	bl	8007df4 <lcd_clear>
			HAL_Delay(100);
 8000f7e:	2064      	movs	r0, #100	; 0x64
 8000f80:	f007 fc68 	bl	8008854 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f84:	4a77      	ldr	r2, [pc, #476]	; (8001164 <printTemplate+0x2c8>)
 8000f86:	2101      	movs	r1, #1
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f006 ff07 	bl	8007d9c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f8e:	4a76      	ldr	r2, [pc, #472]	; (8001168 <printTemplate+0x2cc>)
 8000f90:	2107      	movs	r1, #7
 8000f92:	2001      	movs	r0, #1
 8000f94:	f006 ff02 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f98:	4a75      	ldr	r2, [pc, #468]	; (8001170 <printTemplate+0x2d4>)
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f006 fefd 	bl	8007d9c <lcd_print>
}
 8000fa2:	e0c2      	b.n	800112a <printTemplate+0x28e>
		} else if(page == 3) {
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d114      	bne.n	8000fd4 <printTemplate+0x138>
			lcd_clear();
 8000faa:	f006 ff23 	bl	8007df4 <lcd_clear>
			HAL_Delay(100);
 8000fae:	2064      	movs	r0, #100	; 0x64
 8000fb0:	f007 fc50 	bl	8008854 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fb4:	4a6b      	ldr	r2, [pc, #428]	; (8001164 <printTemplate+0x2c8>)
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f006 feef 	bl	8007d9c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fbe:	4a6a      	ldr	r2, [pc, #424]	; (8001168 <printTemplate+0x2cc>)
 8000fc0:	2107      	movs	r1, #7
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f006 feea 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000fc8:	4a6a      	ldr	r2, [pc, #424]	; (8001174 <printTemplate+0x2d8>)
 8000fca:	2101      	movs	r1, #1
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f006 fee5 	bl	8007d9c <lcd_print>
}
 8000fd2:	e0aa      	b.n	800112a <printTemplate+0x28e>
		} else if(page == 4) {
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d114      	bne.n	8001004 <printTemplate+0x168>
			lcd_clear();
 8000fda:	f006 ff0b 	bl	8007df4 <lcd_clear>
			HAL_Delay(100);
 8000fde:	2064      	movs	r0, #100	; 0x64
 8000fe0:	f007 fc38 	bl	8008854 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fe4:	4a5f      	ldr	r2, [pc, #380]	; (8001164 <printTemplate+0x2c8>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f006 fed7 	bl	8007d9c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fee:	4a5e      	ldr	r2, [pc, #376]	; (8001168 <printTemplate+0x2cc>)
 8000ff0:	2107      	movs	r1, #7
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f006 fed2 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000ff8:	4a5f      	ldr	r2, [pc, #380]	; (8001178 <printTemplate+0x2dc>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f006 fecd 	bl	8007d9c <lcd_print>
}
 8001002:	e092      	b.n	800112a <printTemplate+0x28e>
		} else if(page == 5) {
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b05      	cmp	r3, #5
 8001008:	f040 808f 	bne.w	800112a <printTemplate+0x28e>
			lcd_clear();
 800100c:	f006 fef2 	bl	8007df4 <lcd_clear>
			HAL_Delay(100);
 8001010:	2064      	movs	r0, #100	; 0x64
 8001012:	f007 fc1f 	bl	8008854 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001016:	4a53      	ldr	r2, [pc, #332]	; (8001164 <printTemplate+0x2c8>)
 8001018:	2101      	movs	r1, #1
 800101a:	2001      	movs	r0, #1
 800101c:	f006 febe 	bl	8007d9c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001020:	4a51      	ldr	r2, [pc, #324]	; (8001168 <printTemplate+0x2cc>)
 8001022:	2107      	movs	r1, #7
 8001024:	2001      	movs	r0, #1
 8001026:	f006 feb9 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800102a:	4a54      	ldr	r2, [pc, #336]	; (800117c <printTemplate+0x2e0>)
 800102c:	2101      	movs	r1, #1
 800102e:	2002      	movs	r0, #2
 8001030:	f006 feb4 	bl	8007d9c <lcd_print>
}
 8001034:	e079      	b.n	800112a <printTemplate+0x28e>
	} else if(type == 3) {
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d176      	bne.n	800112a <printTemplate+0x28e>
		if(page == 1) {
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d114      	bne.n	800106c <printTemplate+0x1d0>
			lcd_clear();
 8001042:	f006 fed7 	bl	8007df4 <lcd_clear>
			HAL_Delay(100);
 8001046:	2064      	movs	r0, #100	; 0x64
 8001048:	f007 fc04 	bl	8008854 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800104c:	4a4c      	ldr	r2, [pc, #304]	; (8001180 <printTemplate+0x2e4>)
 800104e:	2101      	movs	r1, #1
 8001050:	2001      	movs	r0, #1
 8001052:	f006 fea3 	bl	8007d9c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001056:	4a4b      	ldr	r2, [pc, #300]	; (8001184 <printTemplate+0x2e8>)
 8001058:	2107      	movs	r1, #7
 800105a:	2001      	movs	r0, #1
 800105c:	f006 fe9e 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001060:	4a42      	ldr	r2, [pc, #264]	; (800116c <printTemplate+0x2d0>)
 8001062:	2101      	movs	r1, #1
 8001064:	2002      	movs	r0, #2
 8001066:	f006 fe99 	bl	8007d9c <lcd_print>
}
 800106a:	e05e      	b.n	800112a <printTemplate+0x28e>
		} else if(page == 2) {
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d114      	bne.n	800109c <printTemplate+0x200>
			lcd_clear();
 8001072:	f006 febf 	bl	8007df4 <lcd_clear>
			HAL_Delay(100);
 8001076:	2064      	movs	r0, #100	; 0x64
 8001078:	f007 fbec 	bl	8008854 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800107c:	4a40      	ldr	r2, [pc, #256]	; (8001180 <printTemplate+0x2e4>)
 800107e:	2101      	movs	r1, #1
 8001080:	2001      	movs	r0, #1
 8001082:	f006 fe8b 	bl	8007d9c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001086:	4a3f      	ldr	r2, [pc, #252]	; (8001184 <printTemplate+0x2e8>)
 8001088:	2107      	movs	r1, #7
 800108a:	2001      	movs	r0, #1
 800108c:	f006 fe86 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001090:	4a37      	ldr	r2, [pc, #220]	; (8001170 <printTemplate+0x2d4>)
 8001092:	2101      	movs	r1, #1
 8001094:	2002      	movs	r0, #2
 8001096:	f006 fe81 	bl	8007d9c <lcd_print>
}
 800109a:	e046      	b.n	800112a <printTemplate+0x28e>
		} else if(page == 3) {
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d114      	bne.n	80010cc <printTemplate+0x230>
			lcd_clear();
 80010a2:	f006 fea7 	bl	8007df4 <lcd_clear>
			HAL_Delay(100);
 80010a6:	2064      	movs	r0, #100	; 0x64
 80010a8:	f007 fbd4 	bl	8008854 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010ac:	4a34      	ldr	r2, [pc, #208]	; (8001180 <printTemplate+0x2e4>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	2001      	movs	r0, #1
 80010b2:	f006 fe73 	bl	8007d9c <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010b6:	4a33      	ldr	r2, [pc, #204]	; (8001184 <printTemplate+0x2e8>)
 80010b8:	2107      	movs	r1, #7
 80010ba:	2001      	movs	r0, #1
 80010bc:	f006 fe6e 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80010c0:	4a2c      	ldr	r2, [pc, #176]	; (8001174 <printTemplate+0x2d8>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	2002      	movs	r0, #2
 80010c6:	f006 fe69 	bl	8007d9c <lcd_print>
}
 80010ca:	e02e      	b.n	800112a <printTemplate+0x28e>
		} else if(page == 4) {
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	d114      	bne.n	80010fc <printTemplate+0x260>
			lcd_clear();
 80010d2:	f006 fe8f 	bl	8007df4 <lcd_clear>
			HAL_Delay(100);
 80010d6:	2064      	movs	r0, #100	; 0x64
 80010d8:	f007 fbbc 	bl	8008854 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010dc:	4a28      	ldr	r2, [pc, #160]	; (8001180 <printTemplate+0x2e4>)
 80010de:	2101      	movs	r1, #1
 80010e0:	2001      	movs	r0, #1
 80010e2:	f006 fe5b 	bl	8007d9c <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010e6:	4a27      	ldr	r2, [pc, #156]	; (8001184 <printTemplate+0x2e8>)
 80010e8:	2107      	movs	r1, #7
 80010ea:	2001      	movs	r0, #1
 80010ec:	f006 fe56 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80010f0:	4a21      	ldr	r2, [pc, #132]	; (8001178 <printTemplate+0x2dc>)
 80010f2:	2101      	movs	r1, #1
 80010f4:	2002      	movs	r0, #2
 80010f6:	f006 fe51 	bl	8007d9c <lcd_print>
}
 80010fa:	e016      	b.n	800112a <printTemplate+0x28e>
		} else if(page == 5) {
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2b05      	cmp	r3, #5
 8001100:	d113      	bne.n	800112a <printTemplate+0x28e>
			lcd_clear();
 8001102:	f006 fe77 	bl	8007df4 <lcd_clear>
			HAL_Delay(100);
 8001106:	2064      	movs	r0, #100	; 0x64
 8001108:	f007 fba4 	bl	8008854 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800110c:	4a1c      	ldr	r2, [pc, #112]	; (8001180 <printTemplate+0x2e4>)
 800110e:	2101      	movs	r1, #1
 8001110:	2001      	movs	r0, #1
 8001112:	f006 fe43 	bl	8007d9c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001116:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <printTemplate+0x2e8>)
 8001118:	2107      	movs	r1, #7
 800111a:	2001      	movs	r0, #1
 800111c:	f006 fe3e 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001120:	4a16      	ldr	r2, [pc, #88]	; (800117c <printTemplate+0x2e0>)
 8001122:	2101      	movs	r1, #1
 8001124:	2002      	movs	r0, #2
 8001126:	f006 fe39 	bl	8007d9c <lcd_print>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	0800d050 	.word	0x0800d050
 8001138:	0800d058 	.word	0x0800d058
 800113c:	0800d05c 	.word	0x0800d05c
 8001140:	0800d060 	.word	0x0800d060
 8001144:	0800d064 	.word	0x0800d064
 8001148:	0800d068 	.word	0x0800d068
 800114c:	0800d06c 	.word	0x0800d06c
 8001150:	0800d070 	.word	0x0800d070
 8001154:	0800d074 	.word	0x0800d074
 8001158:	0800d078 	.word	0x0800d078
 800115c:	0800d07c 	.word	0x0800d07c
 8001160:	200001a0 	.word	0x200001a0
 8001164:	0800d080 	.word	0x0800d080
 8001168:	200001ac 	.word	0x200001ac
 800116c:	0800d088 	.word	0x0800d088
 8001170:	0800d09c 	.word	0x0800d09c
 8001174:	0800d0b0 	.word	0x0800d0b0
 8001178:	0800d0c4 	.word	0x0800d0c4
 800117c:	0800d0d8 	.word	0x0800d0d8
 8001180:	0800d0ec 	.word	0x0800d0ec
 8001184:	200001c0 	.word	0x200001c0

08001188 <checkSlideVal>:

int checkSlideVal(int state) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d111      	bne.n	80011ba <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001196:	2101      	movs	r1, #1
 8001198:	4813      	ldr	r0, [pc, #76]	; (80011e8 <checkSlideVal+0x60>)
 800119a:	f008 f92b 	bl	80093f4 <HAL_GPIO_ReadPin>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d101      	bne.n	80011a8 <checkSlideVal+0x20>
			return 34;
 80011a4:	2322      	movs	r3, #34	; 0x22
 80011a6:	e01b      	b.n	80011e0 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80011a8:	2108      	movs	r1, #8
 80011aa:	4810      	ldr	r0, [pc, #64]	; (80011ec <checkSlideVal+0x64>)
 80011ac:	f008 f922 	bl	80093f4 <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d113      	bne.n	80011de <checkSlideVal+0x56>
			return 32;
 80011b6:	2320      	movs	r3, #32
 80011b8:	e012      	b.n	80011e0 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80011ba:	2101      	movs	r1, #1
 80011bc:	480a      	ldr	r0, [pc, #40]	; (80011e8 <checkSlideVal+0x60>)
 80011be:	f008 f919 	bl	80093f4 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d101      	bne.n	80011cc <checkSlideVal+0x44>
			return 35;
 80011c8:	2323      	movs	r3, #35	; 0x23
 80011ca:	e009      	b.n	80011e0 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80011cc:	2108      	movs	r1, #8
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <checkSlideVal+0x64>)
 80011d0:	f008 f910 	bl	80093f4 <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d101      	bne.n	80011de <checkSlideVal+0x56>
			return 33;
 80011da:	2321      	movs	r3, #33	; 0x21
 80011dc:	e000      	b.n	80011e0 <checkSlideVal+0x58>
		}
	}
	return 0;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40010800 	.word	0x40010800
 80011ec:	40011000 	.word	0x40011000

080011f0 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff f810 	bl	8000224 <strlen>
 8001204:	4603      	mov	r3, r0
 8001206:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001208:	2301      	movs	r3, #1
 800120a:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 800120c:	e08a      	b.n	8001324 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f7ff ffba 	bl	8001188 <checkSlideVal>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	dd07      	ble.n	800122a <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f7ff ffb4 	bl	8001188 <checkSlideVal>
 8001220:	4603      	mov	r3, r0
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b44      	ldr	r3, [pc, #272]	; (8001338 <slideText+0x148>)
 8001226:	701a      	strb	r2, [r3, #0]
			break;
 8001228:	e081      	b.n	800132e <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
 800122e:	e075      	b.n	800131c <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001230:	6838      	ldr	r0, [r7, #0]
 8001232:	f7ff ffa9 	bl	8001188 <checkSlideVal>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	dd09      	ble.n	8001250 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 800123c:	6838      	ldr	r0, [r7, #0]
 800123e:	f7ff ffa3 	bl	8001188 <checkSlideVal>
 8001242:	4603      	mov	r3, r0
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <slideText+0x148>)
 8001248:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800124e:	e069      	b.n	8001324 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	4413      	add	r3, r2
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	e029      	b.n	80012ae <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 800125a:	6838      	ldr	r0, [r7, #0]
 800125c:	f7ff ff94 	bl	8001188 <checkSlideVal>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	dd0b      	ble.n	800127e <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8001266:	6838      	ldr	r0, [r7, #0]
 8001268:	f7ff ff8e 	bl	8001188 <checkSlideVal>
 800126c:	4603      	mov	r3, r0
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b31      	ldr	r3, [pc, #196]	; (8001338 <slideText+0x148>)
 8001272:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800127c:	e01d      	b.n	80012ba <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	b2d8      	uxtb	r0, r3
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	b2d9      	uxtb	r1, r3
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	461a      	mov	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	f006 fd92 	bl	8007dc6 <lcd_print_char>
				HAL_Delay(30);
 80012a2:	201e      	movs	r0, #30
 80012a4:	f007 fad6 	bl	8008854 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	3301      	adds	r3, #1
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	7dfa      	ldrb	r2, [r7, #23]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4413      	add	r3, r2
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbcf      	blt.n	800125a <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	3b01      	subs	r3, #1
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	e023      	b.n	800130a <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80012c2:	6838      	ldr	r0, [r7, #0]
 80012c4:	f7ff ff60 	bl	8001188 <checkSlideVal>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	dd0b      	ble.n	80012e6 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f7ff ff5a 	bl	8001188 <checkSlideVal>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <slideText+0x148>)
 80012da:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80012e4:	e017      	b.n	8001316 <slideText+0x126>
				}
			     if(j >= startPos) {
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	db0a      	blt.n	8001304 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	b2d1      	uxtb	r1, r2
 80012f6:	2220      	movs	r2, #32
 80012f8:	4618      	mov	r0, r3
 80012fa:	f006 fd64 	bl	8007dc6 <lcd_print_char>
			    	 HAL_Delay(30);
 80012fe:	201e      	movs	r0, #30
 8001300:	f007 faa8 	bl	8008854 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	3b01      	subs	r3, #1
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	7dfa      	ldrb	r2, [r7, #23]
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	429a      	cmp	r2, r3
 8001314:	dad5      	bge.n	80012c2 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	3301      	adds	r3, #1
 800131a:	623b      	str	r3, [r7, #32]
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	6a3a      	ldr	r2, [r7, #32]
 8001320:	429a      	cmp	r2, r3
 8001322:	db85      	blt.n	8001230 <slideText+0x40>
	while(mainLoopVal == 1) {
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	2b01      	cmp	r3, #1
 8001328:	f43f af71 	beq.w	800120e <slideText+0x1e>
			     }
			}
		}
	}
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	; 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000224 	.word	0x20000224

0800133c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001340:	f3bf 8f4f 	dsb	sy
}
 8001344:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <__NVIC_SystemReset+0x24>)
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800134e:	4904      	ldr	r1, [pc, #16]	; (8001360 <__NVIC_SystemReset+0x24>)
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_SystemReset+0x28>)
 8001352:	4313      	orrs	r3, r2
 8001354:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001356:	f3bf 8f4f 	dsb	sy
}
 800135a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <__NVIC_SystemReset+0x20>
 8001360:	e000ed00 	.word	0xe000ed00
 8001364:	05fa0004 	.word	0x05fa0004

08001368 <menu>:

#include "Menu.h"
#include "main.h"
#include "GlobalVariables.h"

void menu() {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800136c:	2101      	movs	r1, #1
 800136e:	488f      	ldr	r0, [pc, #572]	; (80015ac <menu+0x244>)
 8001370:	f008 f840 	bl	80093f4 <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	2b01      	cmp	r3, #1
 8001378:	f040 808e 	bne.w	8001498 <menu+0x130>
 800137c:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <menu+0x248>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f083 0301 	eor.w	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8086 	beq.w	8001498 <menu+0x130>
		menuSayac = menuSayac+1;
 800138c:	4b89      	ldr	r3, [pc, #548]	; (80015b4 <menu+0x24c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b87      	ldr	r3, [pc, #540]	; (80015b4 <menu+0x24c>)
 8001396:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001398:	4b86      	ldr	r3, [pc, #536]	; (80015b4 <menu+0x24c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b24      	cmp	r3, #36	; 0x24
 800139e:	d102      	bne.n	80013a6 <menu+0x3e>
			menuSayac = 1;
 80013a0:	4b84      	ldr	r3, [pc, #528]	; (80015b4 <menu+0x24c>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80013a6:	4b83      	ldr	r3, [pc, #524]	; (80015b4 <menu+0x24c>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b12      	cmp	r3, #18
 80013ac:	d106      	bne.n	80013bc <menu+0x54>
 80013ae:	4b82      	ldr	r3, [pc, #520]	; (80015b8 <menu+0x250>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <menu+0x54>
			menuSayac = 21;
 80013b6:	4b7f      	ldr	r3, [pc, #508]	; (80015b4 <menu+0x24c>)
 80013b8:	2215      	movs	r2, #21
 80013ba:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80013bc:	4b7d      	ldr	r3, [pc, #500]	; (80015b4 <menu+0x24c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d106      	bne.n	80013d2 <menu+0x6a>
 80013c4:	4b7d      	ldr	r3, [pc, #500]	; (80015bc <menu+0x254>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <menu+0x6a>
			menuSayac = 16;
 80013cc:	4b79      	ldr	r3, [pc, #484]	; (80015b4 <menu+0x24c>)
 80013ce:	2210      	movs	r2, #16
 80013d0:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80013d2:	4b78      	ldr	r3, [pc, #480]	; (80015b4 <menu+0x24c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b0d      	cmp	r3, #13
 80013d8:	d106      	bne.n	80013e8 <menu+0x80>
 80013da:	4b78      	ldr	r3, [pc, #480]	; (80015bc <menu+0x254>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d102      	bne.n	80013e8 <menu+0x80>
			menuSayac = 16;
 80013e2:	4b74      	ldr	r3, [pc, #464]	; (80015b4 <menu+0x24c>)
 80013e4:	2210      	movs	r2, #16
 80013e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80013e8:	4b72      	ldr	r3, [pc, #456]	; (80015b4 <menu+0x24c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b09      	cmp	r3, #9
 80013ee:	d106      	bne.n	80013fe <menu+0x96>
 80013f0:	4b72      	ldr	r3, [pc, #456]	; (80015bc <menu+0x254>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d102      	bne.n	80013fe <menu+0x96>
			menuSayac = 13;
 80013f8:	4b6e      	ldr	r3, [pc, #440]	; (80015b4 <menu+0x24c>)
 80013fa:	220d      	movs	r2, #13
 80013fc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80013fe:	4b6d      	ldr	r3, [pc, #436]	; (80015b4 <menu+0x24c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b0a      	cmp	r3, #10
 8001404:	d10a      	bne.n	800141c <menu+0xb4>
 8001406:	4b6e      	ldr	r3, [pc, #440]	; (80015c0 <menu+0x258>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d003      	beq.n	8001416 <menu+0xae>
 800140e:	4b6c      	ldr	r3, [pc, #432]	; (80015c0 <menu+0x258>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d102      	bne.n	800141c <menu+0xb4>
			menuSayac = 11;
 8001416:	4b67      	ldr	r3, [pc, #412]	; (80015b4 <menu+0x24c>)
 8001418:	220b      	movs	r2, #11
 800141a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800141c:	4b65      	ldr	r3, [pc, #404]	; (80015b4 <menu+0x24c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b0c      	cmp	r3, #12
 8001422:	d10e      	bne.n	8001442 <menu+0xda>
 8001424:	4b67      	ldr	r3, [pc, #412]	; (80015c4 <menu+0x25c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d003      	beq.n	8001434 <menu+0xcc>
 800142c:	4b65      	ldr	r3, [pc, #404]	; (80015c4 <menu+0x25c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d106      	bne.n	8001442 <menu+0xda>
 8001434:	4b61      	ldr	r3, [pc, #388]	; (80015bc <menu+0x254>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d102      	bne.n	8001442 <menu+0xda>
			menuSayac = 16;
 800143c:	4b5d      	ldr	r3, [pc, #372]	; (80015b4 <menu+0x24c>)
 800143e:	2210      	movs	r2, #16
 8001440:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001442:	4b5c      	ldr	r3, [pc, #368]	; (80015b4 <menu+0x24c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b0c      	cmp	r3, #12
 8001448:	d10e      	bne.n	8001468 <menu+0x100>
 800144a:	4b5e      	ldr	r3, [pc, #376]	; (80015c4 <menu+0x25c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d003      	beq.n	800145a <menu+0xf2>
 8001452:	4b5c      	ldr	r3, [pc, #368]	; (80015c4 <menu+0x25c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d106      	bne.n	8001468 <menu+0x100>
 800145a:	4b58      	ldr	r3, [pc, #352]	; (80015bc <menu+0x254>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d102      	bne.n	8001468 <menu+0x100>
			menuSayac = 13;
 8001462:	4b54      	ldr	r3, [pc, #336]	; (80015b4 <menu+0x24c>)
 8001464:	220d      	movs	r2, #13
 8001466:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001468:	4b52      	ldr	r3, [pc, #328]	; (80015b4 <menu+0x24c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d106      	bne.n	800147e <menu+0x116>
 8001470:	4b55      	ldr	r3, [pc, #340]	; (80015c8 <menu+0x260>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d102      	bne.n	800147e <menu+0x116>
			menuSayac = 16;
 8001478:	4b4e      	ldr	r3, [pc, #312]	; (80015b4 <menu+0x24c>)
 800147a:	2210      	movs	r2, #16
 800147c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800147e:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <menu+0x24c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b18      	cmp	r3, #24
 8001484:	d106      	bne.n	8001494 <menu+0x12c>
 8001486:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <menu+0x250>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <menu+0x12c>
			menuSayac = 26;
 800148e:	4b49      	ldr	r3, [pc, #292]	; (80015b4 <menu+0x24c>)
 8001490:	221a      	movs	r2, #26
 8001492:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001494:	f003 fb12 	bl	8004abc <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001498:	2108      	movs	r1, #8
 800149a:	484c      	ldr	r0, [pc, #304]	; (80015cc <menu+0x264>)
 800149c:	f007 ffaa 	bl	80093f4 <HAL_GPIO_ReadPin>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d175      	bne.n	8001592 <menu+0x22a>
 80014a6:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <menu+0x248>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	f083 0301 	eor.w	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d06e      	beq.n	8001592 <menu+0x22a>
		if (menuSayac <= 1) {
 80014b4:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <menu+0x24c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d802      	bhi.n	80014c2 <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80014bc:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <menu+0x24c>)
 80014be:	2224      	movs	r2, #36	; 0x24
 80014c0:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80014c2:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <menu+0x24c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <menu+0x24c>)
 80014cc:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80014ce:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <menu+0x24c>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b14      	cmp	r3, #20
 80014d4:	d106      	bne.n	80014e4 <menu+0x17c>
 80014d6:	4b38      	ldr	r3, [pc, #224]	; (80015b8 <menu+0x250>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <menu+0x17c>
			menuSayac = 17;
 80014de:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <menu+0x24c>)
 80014e0:	2211      	movs	r2, #17
 80014e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80014e4:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <menu+0x24c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d106      	bne.n	80014fa <menu+0x192>
 80014ec:	4b33      	ldr	r3, [pc, #204]	; (80015bc <menu+0x254>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <menu+0x192>
			menuSayac = 7;
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <menu+0x24c>)
 80014f6:	2207      	movs	r2, #7
 80014f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <menu+0x24c>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b0f      	cmp	r3, #15
 8001500:	d106      	bne.n	8001510 <menu+0x1a8>
 8001502:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <menu+0x254>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d102      	bne.n	8001510 <menu+0x1a8>
			menuSayac = 12;
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <menu+0x24c>)
 800150c:	220c      	movs	r2, #12
 800150e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <menu+0x24c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b0c      	cmp	r3, #12
 8001516:	d106      	bne.n	8001526 <menu+0x1be>
 8001518:	4b28      	ldr	r3, [pc, #160]	; (80015bc <menu+0x254>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d102      	bne.n	8001526 <menu+0x1be>
			menuSayac = 8;
 8001520:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <menu+0x24c>)
 8001522:	2208      	movs	r2, #8
 8001524:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <menu+0x24c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b0a      	cmp	r3, #10
 800152c:	d10a      	bne.n	8001544 <menu+0x1dc>
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <menu+0x258>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d003      	beq.n	800153e <menu+0x1d6>
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <menu+0x258>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d102      	bne.n	8001544 <menu+0x1dc>
			menuSayac = 9;
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <menu+0x24c>)
 8001540:	2209      	movs	r2, #9
 8001542:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <menu+0x24c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b0c      	cmp	r3, #12
 800154a:	d10a      	bne.n	8001562 <menu+0x1fa>
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <menu+0x25c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d003      	beq.n	800155c <menu+0x1f4>
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <menu+0x25c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d102      	bne.n	8001562 <menu+0x1fa>
			menuSayac = 11;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <menu+0x24c>)
 800155e:	220b      	movs	r2, #11
 8001560:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <menu+0x24c>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b0f      	cmp	r3, #15
 8001568:	d106      	bne.n	8001578 <menu+0x210>
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <menu+0x260>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d102      	bne.n	8001578 <menu+0x210>
			menuSayac = 14;
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <menu+0x24c>)
 8001574:	220e      	movs	r2, #14
 8001576:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <menu+0x24c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b19      	cmp	r3, #25
 800157e:	d106      	bne.n	800158e <menu+0x226>
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <menu+0x250>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <menu+0x226>
			menuSayac = 23;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <menu+0x24c>)
 800158a:	2217      	movs	r2, #23
 800158c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800158e:	f003 fa95 	bl	8004abc <bekle>
	}

	if (menuSayac == 0) {
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <menu+0x24c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d134      	bne.n	8001604 <menu+0x29c>
		if(dilSecim == 0) {
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <menu+0x268>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d122      	bne.n	80015e8 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80015a2:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <menu+0x26c>)
 80015a4:	2101      	movs	r1, #1
 80015a6:	2001      	movs	r0, #1
 80015a8:	e016      	b.n	80015d8 <menu+0x270>
 80015aa:	bf00      	nop
 80015ac:	40010800 	.word	0x40010800
 80015b0:	20000253 	.word	0x20000253
 80015b4:	20000224 	.word	0x20000224
 80015b8:	20000233 	.word	0x20000233
 80015bc:	2000022c 	.word	0x2000022c
 80015c0:	2000022d 	.word	0x2000022d
 80015c4:	2000022e 	.word	0x2000022e
 80015c8:	2000022f 	.word	0x2000022f
 80015cc:	40011000 	.word	0x40011000
 80015d0:	20000245 	.word	0x20000245
 80015d4:	0800d0f4 	.word	0x0800d0f4
 80015d8:	f006 fbe0 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80015dc:	4a94      	ldr	r2, [pc, #592]	; (8001830 <menu+0x4c8>)
 80015de:	2101      	movs	r1, #1
 80015e0:	2002      	movs	r0, #2
 80015e2:	f006 fbdb 	bl	8007d9c <lcd_print>
 80015e6:	e00d      	b.n	8001604 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80015e8:	4b92      	ldr	r3, [pc, #584]	; (8001834 <menu+0x4cc>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d109      	bne.n	8001604 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80015f0:	4a91      	ldr	r2, [pc, #580]	; (8001838 <menu+0x4d0>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	2001      	movs	r0, #1
 80015f6:	f006 fbd1 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80015fa:	4a90      	ldr	r2, [pc, #576]	; (800183c <menu+0x4d4>)
 80015fc:	2101      	movs	r1, #1
 80015fe:	2002      	movs	r0, #2
 8001600:	f006 fbcc 	bl	8007d9c <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001604:	4b8e      	ldr	r3, [pc, #568]	; (8001840 <menu+0x4d8>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	f040 82b5 	bne.w	8001b78 <menu+0x810>
		if(dilSecim == 0) {
 800160e:	4b89      	ldr	r3, [pc, #548]	; (8001834 <menu+0x4cc>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d105      	bne.n	8001622 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001616:	4a8b      	ldr	r2, [pc, #556]	; (8001844 <menu+0x4dc>)
 8001618:	2101      	movs	r1, #1
 800161a:	2001      	movs	r0, #1
 800161c:	f006 fbbe 	bl	8007d9c <lcd_print>
 8001620:	e008      	b.n	8001634 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001622:	4b84      	ldr	r3, [pc, #528]	; (8001834 <menu+0x4cc>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d104      	bne.n	8001634 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800162a:	4a87      	ldr	r2, [pc, #540]	; (8001848 <menu+0x4e0>)
 800162c:	2101      	movs	r1, #1
 800162e:	2001      	movs	r0, #1
 8001630:	f006 fbb4 	bl	8007d9c <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001634:	4b85      	ldr	r3, [pc, #532]	; (800184c <menu+0x4e4>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d123      	bne.n	8001684 <menu+0x31c>
			if(dilSecim == 0) {
 800163c:	4b7d      	ldr	r3, [pc, #500]	; (8001834 <menu+0x4cc>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001644:	4a82      	ldr	r2, [pc, #520]	; (8001850 <menu+0x4e8>)
 8001646:	2101      	movs	r1, #1
 8001648:	2002      	movs	r0, #2
 800164a:	f006 fba7 	bl	8007d9c <lcd_print>
 800164e:	e008      	b.n	8001662 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001650:	4b78      	ldr	r3, [pc, #480]	; (8001834 <menu+0x4cc>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d104      	bne.n	8001662 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001658:	4a7e      	ldr	r2, [pc, #504]	; (8001854 <menu+0x4ec>)
 800165a:	2101      	movs	r1, #1
 800165c:	2002      	movs	r0, #2
 800165e:	f006 fb9d 	bl	8007d9c <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001662:	4a7d      	ldr	r2, [pc, #500]	; (8001858 <menu+0x4f0>)
 8001664:	210f      	movs	r1, #15
 8001666:	2002      	movs	r0, #2
 8001668:	f006 fb98 	bl	8007d9c <lcd_print>
			itoa(hataKayit1, snum, 10);
 800166c:	4b7b      	ldr	r3, [pc, #492]	; (800185c <menu+0x4f4>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	220a      	movs	r2, #10
 8001672:	497b      	ldr	r1, [pc, #492]	; (8001860 <menu+0x4f8>)
 8001674:	4618      	mov	r0, r3
 8001676:	f00a fee9 	bl	800c44c <itoa>
			lcd_print(2, 14, snum);
 800167a:	4a79      	ldr	r2, [pc, #484]	; (8001860 <menu+0x4f8>)
 800167c:	210e      	movs	r1, #14
 800167e:	2002      	movs	r0, #2
 8001680:	f006 fb8c 	bl	8007d9c <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001684:	4b71      	ldr	r3, [pc, #452]	; (800184c <menu+0x4e4>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d123      	bne.n	80016d4 <menu+0x36c>
			if(dilSecim == 0) {
 800168c:	4b69      	ldr	r3, [pc, #420]	; (8001834 <menu+0x4cc>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d105      	bne.n	80016a0 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001694:	4a73      	ldr	r2, [pc, #460]	; (8001864 <menu+0x4fc>)
 8001696:	2101      	movs	r1, #1
 8001698:	2002      	movs	r0, #2
 800169a:	f006 fb7f 	bl	8007d9c <lcd_print>
 800169e:	e008      	b.n	80016b2 <menu+0x34a>
			} else if(dilSecim == 1) {
 80016a0:	4b64      	ldr	r3, [pc, #400]	; (8001834 <menu+0x4cc>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d104      	bne.n	80016b2 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80016a8:	4a6f      	ldr	r2, [pc, #444]	; (8001868 <menu+0x500>)
 80016aa:	2101      	movs	r1, #1
 80016ac:	2002      	movs	r0, #2
 80016ae:	f006 fb75 	bl	8007d9c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016b2:	4a6e      	ldr	r2, [pc, #440]	; (800186c <menu+0x504>)
 80016b4:	210f      	movs	r1, #15
 80016b6:	2002      	movs	r0, #2
 80016b8:	f006 fb70 	bl	8007d9c <lcd_print>
			itoa(hataKayit2, snum, 10);
 80016bc:	4b6c      	ldr	r3, [pc, #432]	; (8001870 <menu+0x508>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	220a      	movs	r2, #10
 80016c2:	4967      	ldr	r1, [pc, #412]	; (8001860 <menu+0x4f8>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f00a fec1 	bl	800c44c <itoa>
			lcd_print(2, 14, snum);
 80016ca:	4a65      	ldr	r2, [pc, #404]	; (8001860 <menu+0x4f8>)
 80016cc:	210e      	movs	r1, #14
 80016ce:	2002      	movs	r0, #2
 80016d0:	f006 fb64 	bl	8007d9c <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80016d4:	4b5d      	ldr	r3, [pc, #372]	; (800184c <menu+0x4e4>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d123      	bne.n	8001724 <menu+0x3bc>
			if(dilSecim == 0) {
 80016dc:	4b55      	ldr	r3, [pc, #340]	; (8001834 <menu+0x4cc>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80016e4:	4a63      	ldr	r2, [pc, #396]	; (8001874 <menu+0x50c>)
 80016e6:	2101      	movs	r1, #1
 80016e8:	2002      	movs	r0, #2
 80016ea:	f006 fb57 	bl	8007d9c <lcd_print>
 80016ee:	e008      	b.n	8001702 <menu+0x39a>
			} else if(dilSecim == 1) {
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <menu+0x4cc>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d104      	bne.n	8001702 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80016f8:	4a5f      	ldr	r2, [pc, #380]	; (8001878 <menu+0x510>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	2002      	movs	r0, #2
 80016fe:	f006 fb4d 	bl	8007d9c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001702:	4a5a      	ldr	r2, [pc, #360]	; (800186c <menu+0x504>)
 8001704:	210f      	movs	r1, #15
 8001706:	2002      	movs	r0, #2
 8001708:	f006 fb48 	bl	8007d9c <lcd_print>
			itoa(hataKayit3, snum, 10);
 800170c:	4b5b      	ldr	r3, [pc, #364]	; (800187c <menu+0x514>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	220a      	movs	r2, #10
 8001712:	4953      	ldr	r1, [pc, #332]	; (8001860 <menu+0x4f8>)
 8001714:	4618      	mov	r0, r3
 8001716:	f00a fe99 	bl	800c44c <itoa>
			lcd_print(2, 14, snum);
 800171a:	4a51      	ldr	r2, [pc, #324]	; (8001860 <menu+0x4f8>)
 800171c:	210e      	movs	r1, #14
 800171e:	2002      	movs	r0, #2
 8001720:	f006 fb3c 	bl	8007d9c <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001724:	4b49      	ldr	r3, [pc, #292]	; (800184c <menu+0x4e4>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d123      	bne.n	8001774 <menu+0x40c>
			if(dilSecim == 0) {
 800172c:	4b41      	ldr	r3, [pc, #260]	; (8001834 <menu+0x4cc>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d105      	bne.n	8001740 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001734:	4a52      	ldr	r2, [pc, #328]	; (8001880 <menu+0x518>)
 8001736:	2101      	movs	r1, #1
 8001738:	2002      	movs	r0, #2
 800173a:	f006 fb2f 	bl	8007d9c <lcd_print>
 800173e:	e008      	b.n	8001752 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001740:	4b3c      	ldr	r3, [pc, #240]	; (8001834 <menu+0x4cc>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d104      	bne.n	8001752 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001748:	4a4e      	ldr	r2, [pc, #312]	; (8001884 <menu+0x51c>)
 800174a:	2101      	movs	r1, #1
 800174c:	2002      	movs	r0, #2
 800174e:	f006 fb25 	bl	8007d9c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001752:	4a46      	ldr	r2, [pc, #280]	; (800186c <menu+0x504>)
 8001754:	210f      	movs	r1, #15
 8001756:	2002      	movs	r0, #2
 8001758:	f006 fb20 	bl	8007d9c <lcd_print>
			itoa(hataKayit4, snum, 10);
 800175c:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <menu+0x520>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	220a      	movs	r2, #10
 8001762:	493f      	ldr	r1, [pc, #252]	; (8001860 <menu+0x4f8>)
 8001764:	4618      	mov	r0, r3
 8001766:	f00a fe71 	bl	800c44c <itoa>
			lcd_print(2, 14, snum);
 800176a:	4a3d      	ldr	r2, [pc, #244]	; (8001860 <menu+0x4f8>)
 800176c:	210e      	movs	r1, #14
 800176e:	2002      	movs	r0, #2
 8001770:	f006 fb14 	bl	8007d9c <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001774:	4b35      	ldr	r3, [pc, #212]	; (800184c <menu+0x4e4>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b04      	cmp	r3, #4
 800177a:	d123      	bne.n	80017c4 <menu+0x45c>
			if(dilSecim == 0) {
 800177c:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <menu+0x4cc>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d105      	bne.n	8001790 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001784:	4a41      	ldr	r2, [pc, #260]	; (800188c <menu+0x524>)
 8001786:	2101      	movs	r1, #1
 8001788:	2002      	movs	r0, #2
 800178a:	f006 fb07 	bl	8007d9c <lcd_print>
 800178e:	e008      	b.n	80017a2 <menu+0x43a>
			} else if(dilSecim == 1) {
 8001790:	4b28      	ldr	r3, [pc, #160]	; (8001834 <menu+0x4cc>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d104      	bne.n	80017a2 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001798:	4a3d      	ldr	r2, [pc, #244]	; (8001890 <menu+0x528>)
 800179a:	2101      	movs	r1, #1
 800179c:	2002      	movs	r0, #2
 800179e:	f006 fafd 	bl	8007d9c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017a2:	4a32      	ldr	r2, [pc, #200]	; (800186c <menu+0x504>)
 80017a4:	210f      	movs	r1, #15
 80017a6:	2002      	movs	r0, #2
 80017a8:	f006 faf8 	bl	8007d9c <lcd_print>
			itoa(hataKayit5, snum, 10);
 80017ac:	4b39      	ldr	r3, [pc, #228]	; (8001894 <menu+0x52c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	220a      	movs	r2, #10
 80017b2:	492b      	ldr	r1, [pc, #172]	; (8001860 <menu+0x4f8>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00a fe49 	bl	800c44c <itoa>
			lcd_print(2, 14, snum);
 80017ba:	4a29      	ldr	r2, [pc, #164]	; (8001860 <menu+0x4f8>)
 80017bc:	210e      	movs	r1, #14
 80017be:	2002      	movs	r0, #2
 80017c0:	f006 faec 	bl	8007d9c <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <menu+0x4e4>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d123      	bne.n	8001814 <menu+0x4ac>
			if(dilSecim == 0) {
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <menu+0x4cc>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80017d4:	4a30      	ldr	r2, [pc, #192]	; (8001898 <menu+0x530>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	2002      	movs	r0, #2
 80017da:	f006 fadf 	bl	8007d9c <lcd_print>
 80017de:	e008      	b.n	80017f2 <menu+0x48a>
			} else if(dilSecim == 1) {
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <menu+0x4cc>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d104      	bne.n	80017f2 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 80017e8:	4a2c      	ldr	r2, [pc, #176]	; (800189c <menu+0x534>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	2002      	movs	r0, #2
 80017ee:	f006 fad5 	bl	8007d9c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017f2:	4a1e      	ldr	r2, [pc, #120]	; (800186c <menu+0x504>)
 80017f4:	210f      	movs	r1, #15
 80017f6:	2002      	movs	r0, #2
 80017f8:	f006 fad0 	bl	8007d9c <lcd_print>
			itoa(hataKayit6, snum, 10);
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <menu+0x538>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	220a      	movs	r2, #10
 8001802:	4917      	ldr	r1, [pc, #92]	; (8001860 <menu+0x4f8>)
 8001804:	4618      	mov	r0, r3
 8001806:	f00a fe21 	bl	800c44c <itoa>
			lcd_print(2, 14, snum);
 800180a:	4a15      	ldr	r2, [pc, #84]	; (8001860 <menu+0x4f8>)
 800180c:	210e      	movs	r1, #14
 800180e:	2002      	movs	r0, #2
 8001810:	f006 fac4 	bl	8007d9c <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <menu+0x4e4>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b06      	cmp	r3, #6
 800181a:	d15f      	bne.n	80018dc <menu+0x574>
			if(dilSecim == 0) {
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <menu+0x4cc>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d141      	bne.n	80018a8 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001824:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <menu+0x53c>)
 8001826:	2101      	movs	r1, #1
 8001828:	2002      	movs	r0, #2
 800182a:	f006 fab7 	bl	8007d9c <lcd_print>
 800182e:	e044      	b.n	80018ba <menu+0x552>
 8001830:	0800d108 	.word	0x0800d108
 8001834:	20000245 	.word	0x20000245
 8001838:	0800d11c 	.word	0x0800d11c
 800183c:	0800d130 	.word	0x0800d130
 8001840:	20000224 	.word	0x20000224
 8001844:	0800d144 	.word	0x0800d144
 8001848:	0800d158 	.word	0x0800d158
 800184c:	20000226 	.word	0x20000226
 8001850:	0800d16c 	.word	0x0800d16c
 8001854:	0800d17c 	.word	0x0800d17c
 8001858:	0800d18c 	.word	0x0800d18c
 800185c:	20000246 	.word	0x20000246
 8001860:	20000198 	.word	0x20000198
 8001864:	0800d190 	.word	0x0800d190
 8001868:	0800d1a0 	.word	0x0800d1a0
 800186c:	0800d1b0 	.word	0x0800d1b0
 8001870:	20000247 	.word	0x20000247
 8001874:	0800d1b4 	.word	0x0800d1b4
 8001878:	0800d1c4 	.word	0x0800d1c4
 800187c:	20000248 	.word	0x20000248
 8001880:	0800d1d4 	.word	0x0800d1d4
 8001884:	0800d1e4 	.word	0x0800d1e4
 8001888:	20000249 	.word	0x20000249
 800188c:	0800d1f4 	.word	0x0800d1f4
 8001890:	0800d204 	.word	0x0800d204
 8001894:	2000024a 	.word	0x2000024a
 8001898:	0800d214 	.word	0x0800d214
 800189c:	0800d224 	.word	0x0800d224
 80018a0:	2000024b 	.word	0x2000024b
 80018a4:	0800d234 	.word	0x0800d234
			} else if(dilSecim == 1) {
 80018a8:	4b4f      	ldr	r3, [pc, #316]	; (80019e8 <menu+0x680>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d104      	bne.n	80018ba <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80018b0:	4a4e      	ldr	r2, [pc, #312]	; (80019ec <menu+0x684>)
 80018b2:	2101      	movs	r1, #1
 80018b4:	2002      	movs	r0, #2
 80018b6:	f006 fa71 	bl	8007d9c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018ba:	4a4d      	ldr	r2, [pc, #308]	; (80019f0 <menu+0x688>)
 80018bc:	210f      	movs	r1, #15
 80018be:	2002      	movs	r0, #2
 80018c0:	f006 fa6c 	bl	8007d9c <lcd_print>
			itoa(hataKayit7, snum, 10);
 80018c4:	4b4b      	ldr	r3, [pc, #300]	; (80019f4 <menu+0x68c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	220a      	movs	r2, #10
 80018ca:	494b      	ldr	r1, [pc, #300]	; (80019f8 <menu+0x690>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f00a fdbd 	bl	800c44c <itoa>
			lcd_print(2, 14, snum);
 80018d2:	4a49      	ldr	r2, [pc, #292]	; (80019f8 <menu+0x690>)
 80018d4:	210e      	movs	r1, #14
 80018d6:	2002      	movs	r0, #2
 80018d8:	f006 fa60 	bl	8007d9c <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80018dc:	4b47      	ldr	r3, [pc, #284]	; (80019fc <menu+0x694>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b07      	cmp	r3, #7
 80018e2:	d123      	bne.n	800192c <menu+0x5c4>
			if(dilSecim == 0) {
 80018e4:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <menu+0x680>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d105      	bne.n	80018f8 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80018ec:	4a44      	ldr	r2, [pc, #272]	; (8001a00 <menu+0x698>)
 80018ee:	2101      	movs	r1, #1
 80018f0:	2002      	movs	r0, #2
 80018f2:	f006 fa53 	bl	8007d9c <lcd_print>
 80018f6:	e008      	b.n	800190a <menu+0x5a2>
			} else if(dilSecim == 1) {
 80018f8:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <menu+0x680>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d104      	bne.n	800190a <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001900:	4a40      	ldr	r2, [pc, #256]	; (8001a04 <menu+0x69c>)
 8001902:	2101      	movs	r1, #1
 8001904:	2002      	movs	r0, #2
 8001906:	f006 fa49 	bl	8007d9c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800190a:	4a39      	ldr	r2, [pc, #228]	; (80019f0 <menu+0x688>)
 800190c:	210f      	movs	r1, #15
 800190e:	2002      	movs	r0, #2
 8001910:	f006 fa44 	bl	8007d9c <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001914:	4b3c      	ldr	r3, [pc, #240]	; (8001a08 <menu+0x6a0>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	220a      	movs	r2, #10
 800191a:	4937      	ldr	r1, [pc, #220]	; (80019f8 <menu+0x690>)
 800191c:	4618      	mov	r0, r3
 800191e:	f00a fd95 	bl	800c44c <itoa>
			lcd_print(2, 14, snum);
 8001922:	4a35      	ldr	r2, [pc, #212]	; (80019f8 <menu+0x690>)
 8001924:	210e      	movs	r1, #14
 8001926:	2002      	movs	r0, #2
 8001928:	f006 fa38 	bl	8007d9c <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 800192c:	4b33      	ldr	r3, [pc, #204]	; (80019fc <menu+0x694>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b08      	cmp	r3, #8
 8001932:	d123      	bne.n	800197c <menu+0x614>
			if(dilSecim == 0) {
 8001934:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <menu+0x680>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d105      	bne.n	8001948 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 800193c:	4a33      	ldr	r2, [pc, #204]	; (8001a0c <menu+0x6a4>)
 800193e:	2101      	movs	r1, #1
 8001940:	2002      	movs	r0, #2
 8001942:	f006 fa2b 	bl	8007d9c <lcd_print>
 8001946:	e008      	b.n	800195a <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <menu+0x680>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d104      	bne.n	800195a <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001950:	4a2f      	ldr	r2, [pc, #188]	; (8001a10 <menu+0x6a8>)
 8001952:	2101      	movs	r1, #1
 8001954:	2002      	movs	r0, #2
 8001956:	f006 fa21 	bl	8007d9c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800195a:	4a25      	ldr	r2, [pc, #148]	; (80019f0 <menu+0x688>)
 800195c:	210f      	movs	r1, #15
 800195e:	2002      	movs	r0, #2
 8001960:	f006 fa1c 	bl	8007d9c <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001964:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <menu+0x6ac>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	220a      	movs	r2, #10
 800196a:	4923      	ldr	r1, [pc, #140]	; (80019f8 <menu+0x690>)
 800196c:	4618      	mov	r0, r3
 800196e:	f00a fd6d 	bl	800c44c <itoa>
			lcd_print(2, 14, snum);
 8001972:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <menu+0x690>)
 8001974:	210e      	movs	r1, #14
 8001976:	2002      	movs	r0, #2
 8001978:	f006 fa10 	bl	8007d9c <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <menu+0x694>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b09      	cmp	r3, #9
 8001982:	d123      	bne.n	80019cc <menu+0x664>
			if(dilSecim == 0) {
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <menu+0x680>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 800198c:	4a22      	ldr	r2, [pc, #136]	; (8001a18 <menu+0x6b0>)
 800198e:	2101      	movs	r1, #1
 8001990:	2002      	movs	r0, #2
 8001992:	f006 fa03 	bl	8007d9c <lcd_print>
 8001996:	e008      	b.n	80019aa <menu+0x642>
			} else if(dilSecim == 1) {
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <menu+0x680>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d104      	bne.n	80019aa <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <menu+0x6b4>)
 80019a2:	2101      	movs	r1, #1
 80019a4:	2002      	movs	r0, #2
 80019a6:	f006 f9f9 	bl	8007d9c <lcd_print>
			}
			lcd_print(2, 16, " ");
 80019aa:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <menu+0x6b8>)
 80019ac:	2110      	movs	r1, #16
 80019ae:	2002      	movs	r0, #2
 80019b0:	f006 f9f4 	bl	8007d9c <lcd_print>
			itoa(hataKayit10, snum, 10);
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <menu+0x6bc>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	220a      	movs	r2, #10
 80019ba:	490f      	ldr	r1, [pc, #60]	; (80019f8 <menu+0x690>)
 80019bc:	4618      	mov	r0, r3
 80019be:	f00a fd45 	bl	800c44c <itoa>
			lcd_print(2, 15, snum);
 80019c2:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <menu+0x690>)
 80019c4:	210f      	movs	r1, #15
 80019c6:	2002      	movs	r0, #2
 80019c8:	f006 f9e8 	bl	8007d9c <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <menu+0x694>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b0a      	cmp	r3, #10
 80019d2:	d134      	bne.n	8001a3e <menu+0x6d6>
			if(dilSecim == 0) {
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <menu+0x680>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d127      	bne.n	8001a2c <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 80019dc:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <menu+0x6c0>)
 80019de:	2101      	movs	r1, #1
 80019e0:	2002      	movs	r0, #2
 80019e2:	f006 f9db 	bl	8007d9c <lcd_print>
 80019e6:	e02a      	b.n	8001a3e <menu+0x6d6>
 80019e8:	20000245 	.word	0x20000245
 80019ec:	0800d244 	.word	0x0800d244
 80019f0:	0800d1b0 	.word	0x0800d1b0
 80019f4:	2000024c 	.word	0x2000024c
 80019f8:	20000198 	.word	0x20000198
 80019fc:	20000226 	.word	0x20000226
 8001a00:	0800d254 	.word	0x0800d254
 8001a04:	0800d264 	.word	0x0800d264
 8001a08:	2000024d 	.word	0x2000024d
 8001a0c:	0800d274 	.word	0x0800d274
 8001a10:	0800d284 	.word	0x0800d284
 8001a14:	2000024e 	.word	0x2000024e
 8001a18:	0800d294 	.word	0x0800d294
 8001a1c:	0800d2a4 	.word	0x0800d2a4
 8001a20:	0800d2b4 	.word	0x0800d2b4
 8001a24:	2000024f 	.word	0x2000024f
 8001a28:	0800d2b8 	.word	0x0800d2b8
			} else if(dilSecim == 1) {
 8001a2c:	4b82      	ldr	r3, [pc, #520]	; (8001c38 <menu+0x8d0>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d104      	bne.n	8001a3e <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001a34:	4a81      	ldr	r2, [pc, #516]	; (8001c3c <menu+0x8d4>)
 8001a36:	2101      	movs	r1, #1
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f006 f9af 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a3e:	2102      	movs	r1, #2
 8001a40:	487f      	ldr	r0, [pc, #508]	; (8001c40 <menu+0x8d8>)
 8001a42:	f007 fcd7 	bl	80093f4 <HAL_GPIO_ReadPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d119      	bne.n	8001a80 <menu+0x718>
 8001a4c:	4b7d      	ldr	r3, [pc, #500]	; (8001c44 <menu+0x8dc>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	f083 0301 	eor.w	r3, r3, #1
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d012      	beq.n	8001a80 <menu+0x718>
 8001a5a:	4b7b      	ldr	r3, [pc, #492]	; (8001c48 <menu+0x8e0>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10e      	bne.n	8001a80 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001a62:	4b7a      	ldr	r3, [pc, #488]	; (8001c4c <menu+0x8e4>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	3301      	adds	r3, #1
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b78      	ldr	r3, [pc, #480]	; (8001c4c <menu+0x8e4>)
 8001a6c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001a6e:	4b77      	ldr	r3, [pc, #476]	; (8001c4c <menu+0x8e4>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b0a      	cmp	r3, #10
 8001a74:	d902      	bls.n	8001a7c <menu+0x714>
				hataGostermeSirasi = 0;
 8001a76:	4b75      	ldr	r3, [pc, #468]	; (8001c4c <menu+0x8e4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a7c:	f003 f81e 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a80:	2104      	movs	r1, #4
 8001a82:	486f      	ldr	r0, [pc, #444]	; (8001c40 <menu+0x8d8>)
 8001a84:	f007 fcb6 	bl	80093f4 <HAL_GPIO_ReadPin>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d119      	bne.n	8001ac2 <menu+0x75a>
 8001a8e:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <menu+0x8dc>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	f083 0301 	eor.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d012      	beq.n	8001ac2 <menu+0x75a>
 8001a9c:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <menu+0x8e0>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10e      	bne.n	8001ac2 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001aa4:	4b69      	ldr	r3, [pc, #420]	; (8001c4c <menu+0x8e4>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b67      	ldr	r3, [pc, #412]	; (8001c4c <menu+0x8e4>)
 8001aae:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001ab0:	4b66      	ldr	r3, [pc, #408]	; (8001c4c <menu+0x8e4>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b0b      	cmp	r3, #11
 8001ab6:	d902      	bls.n	8001abe <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001ab8:	4b64      	ldr	r3, [pc, #400]	; (8001c4c <menu+0x8e4>)
 8001aba:	220a      	movs	r2, #10
 8001abc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001abe:	f002 fffd 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001ac2:	2108      	movs	r1, #8
 8001ac4:	485e      	ldr	r0, [pc, #376]	; (8001c40 <menu+0x8d8>)
 8001ac6:	f007 fc95 	bl	80093f4 <HAL_GPIO_ReadPin>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d153      	bne.n	8001b78 <menu+0x810>
 8001ad0:	4b5c      	ldr	r3, [pc, #368]	; (8001c44 <menu+0x8dc>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	f083 0301 	eor.w	r3, r3, #1
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d04c      	beq.n	8001b78 <menu+0x810>
 8001ade:	4b5b      	ldr	r3, [pc, #364]	; (8001c4c <menu+0x8e4>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b0a      	cmp	r3, #10
 8001ae4:	d148      	bne.n	8001b78 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001ae6:	4b5a      	ldr	r3, [pc, #360]	; (8001c50 <menu+0x8e8>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <menu+0x8ec>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001af4:	4b58      	ldr	r3, [pc, #352]	; (8001c58 <menu+0x8f0>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <menu+0x8ec>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001b02:	4b56      	ldr	r3, [pc, #344]	; (8001c5c <menu+0x8f4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	4b52      	ldr	r3, [pc, #328]	; (8001c54 <menu+0x8ec>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001b10:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <menu+0x8f8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	4b4f      	ldr	r3, [pc, #316]	; (8001c54 <menu+0x8ec>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001b1e:	4b51      	ldr	r3, [pc, #324]	; (8001c64 <menu+0x8fc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <menu+0x8ec>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001b2c:	4b4e      	ldr	r3, [pc, #312]	; (8001c68 <menu+0x900>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <menu+0x8ec>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001b3a:	4b4c      	ldr	r3, [pc, #304]	; (8001c6c <menu+0x904>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <menu+0x8ec>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001b48:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <menu+0x908>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <menu+0x8ec>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001b56:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <menu+0x90c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <menu+0x8ec>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001b64:	4b44      	ldr	r3, [pc, #272]	; (8001c78 <menu+0x910>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <menu+0x8ec>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001b72:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <menu+0x914>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001b78:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <menu+0x918>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	f040 80fc 	bne.w	8001d7a <menu+0xa12>
		if(dilSecim == 0) {
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <menu+0x8d0>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001b8a:	4a3e      	ldr	r2, [pc, #248]	; (8001c84 <menu+0x91c>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f006 f904 	bl	8007d9c <lcd_print>
 8001b94:	e008      	b.n	8001ba8 <menu+0x840>
		} else if(dilSecim == 1) {
 8001b96:	4b28      	ldr	r3, [pc, #160]	; (8001c38 <menu+0x8d0>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d104      	bne.n	8001ba8 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001b9e:	4a3a      	ldr	r2, [pc, #232]	; (8001c88 <menu+0x920>)
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f006 f8fa 	bl	8007d9c <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <menu+0x8e0>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d003      	beq.n	8001bb8 <menu+0x850>
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <menu+0x8e0>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d112      	bne.n	8001bde <menu+0x876>
			if(dilSecim == 0) {
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <menu+0x8d0>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d105      	bne.n	8001bcc <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001bc0:	4a32      	ldr	r2, [pc, #200]	; (8001c8c <menu+0x924>)
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f006 f8e9 	bl	8007d9c <lcd_print>
 8001bca:	e008      	b.n	8001bde <menu+0x876>
			} else if(dilSecim == 1) {
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <menu+0x8d0>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d104      	bne.n	8001bde <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001bd4:	4a2e      	ldr	r2, [pc, #184]	; (8001c90 <menu+0x928>)
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f006 f8df 	bl	8007d9c <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001bde:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <menu+0x92c>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d116      	bne.n	8001c14 <menu+0x8ac>
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <menu+0x8e0>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d112      	bne.n	8001c14 <menu+0x8ac>
			if(dilSecim == 0) {
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <menu+0x8d0>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d105      	bne.n	8001c02 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001bf6:	4a28      	ldr	r2, [pc, #160]	; (8001c98 <menu+0x930>)
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	f006 f8ce 	bl	8007d9c <lcd_print>
 8001c00:	e008      	b.n	8001c14 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <menu+0x8d0>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d104      	bne.n	8001c14 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001c0a:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <menu+0x934>)
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f006 f8c4 	bl	8007d9c <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <menu+0x92c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d14c      	bne.n	8001cb6 <menu+0x94e>
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <menu+0x8e0>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d148      	bne.n	8001cb6 <menu+0x94e>
			if(dilSecim == 0) {
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <menu+0x8d0>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d13b      	bne.n	8001ca4 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <menu+0x938>)
 8001c2e:	2101      	movs	r1, #1
 8001c30:	2002      	movs	r0, #2
 8001c32:	f006 f8b3 	bl	8007d9c <lcd_print>
 8001c36:	e03e      	b.n	8001cb6 <menu+0x94e>
 8001c38:	20000245 	.word	0x20000245
 8001c3c:	0800d2cc 	.word	0x0800d2cc
 8001c40:	40010800 	.word	0x40010800
 8001c44:	20000253 	.word	0x20000253
 8001c48:	20000233 	.word	0x20000233
 8001c4c:	20000226 	.word	0x20000226
 8001c50:	20000246 	.word	0x20000246
 8001c54:	20000128 	.word	0x20000128
 8001c58:	20000247 	.word	0x20000247
 8001c5c:	20000248 	.word	0x20000248
 8001c60:	20000249 	.word	0x20000249
 8001c64:	2000024a 	.word	0x2000024a
 8001c68:	2000024b 	.word	0x2000024b
 8001c6c:	2000024c 	.word	0x2000024c
 8001c70:	2000024d 	.word	0x2000024d
 8001c74:	2000024e 	.word	0x2000024e
 8001c78:	2000024f 	.word	0x2000024f
 8001c7c:	20000250 	.word	0x20000250
 8001c80:	20000224 	.word	0x20000224
 8001c84:	0800d2e0 	.word	0x0800d2e0
 8001c88:	0800d2f4 	.word	0x0800d2f4
 8001c8c:	0800d308 	.word	0x0800d308
 8001c90:	0800d31c 	.word	0x0800d31c
 8001c94:	20000225 	.word	0x20000225
 8001c98:	0800d330 	.word	0x0800d330
 8001c9c:	0800d340 	.word	0x0800d340
 8001ca0:	0800d350 	.word	0x0800d350
			} else if(dilSecim == 1) {
 8001ca4:	4b98      	ldr	r3, [pc, #608]	; (8001f08 <menu+0xba0>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d104      	bne.n	8001cb6 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001cac:	4a97      	ldr	r2, [pc, #604]	; (8001f0c <menu+0xba4>)
 8001cae:	2101      	movs	r1, #1
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	f006 f873 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	4895      	ldr	r0, [pc, #596]	; (8001f10 <menu+0xba8>)
 8001cba:	f007 fb9b 	bl	80093f4 <HAL_GPIO_ReadPin>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d119      	bne.n	8001cf8 <menu+0x990>
 8001cc4:	4b93      	ldr	r3, [pc, #588]	; (8001f14 <menu+0xbac>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	f083 0301 	eor.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d012      	beq.n	8001cf8 <menu+0x990>
 8001cd2:	4b91      	ldr	r3, [pc, #580]	; (8001f18 <menu+0xbb0>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10e      	bne.n	8001cf8 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001cda:	4b90      	ldr	r3, [pc, #576]	; (8001f1c <menu+0xbb4>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b8e      	ldr	r3, [pc, #568]	; (8001f1c <menu+0xbb4>)
 8001ce4:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001ce6:	4b8d      	ldr	r3, [pc, #564]	; (8001f1c <menu+0xbb4>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d902      	bls.n	8001cf4 <menu+0x98c>
				calismaSekli = 0;
 8001cee:	4b8b      	ldr	r3, [pc, #556]	; (8001f1c <menu+0xbb4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cf4:	f002 fee2 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cf8:	2104      	movs	r1, #4
 8001cfa:	4885      	ldr	r0, [pc, #532]	; (8001f10 <menu+0xba8>)
 8001cfc:	f007 fb7a 	bl	80093f4 <HAL_GPIO_ReadPin>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d119      	bne.n	8001d3a <menu+0x9d2>
 8001d06:	4b83      	ldr	r3, [pc, #524]	; (8001f14 <menu+0xbac>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	f083 0301 	eor.w	r3, r3, #1
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d012      	beq.n	8001d3a <menu+0x9d2>
 8001d14:	4b80      	ldr	r3, [pc, #512]	; (8001f18 <menu+0xbb0>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10e      	bne.n	8001d3a <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001d1c:	4b7f      	ldr	r3, [pc, #508]	; (8001f1c <menu+0xbb4>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	4b7d      	ldr	r3, [pc, #500]	; (8001f1c <menu+0xbb4>)
 8001d26:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001d28:	4b7c      	ldr	r3, [pc, #496]	; (8001f1c <menu+0xbb4>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <menu+0x9ce>
	    		calismaSekli = 1;
 8001d30:	4b7a      	ldr	r3, [pc, #488]	; (8001f1c <menu+0xbb4>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d36:	f002 fec1 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d3a:	2108      	movs	r1, #8
 8001d3c:	4874      	ldr	r0, [pc, #464]	; (8001f10 <menu+0xba8>)
 8001d3e:	f007 fb59 	bl	80093f4 <HAL_GPIO_ReadPin>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d118      	bne.n	8001d7a <menu+0xa12>
 8001d48:	4b72      	ldr	r3, [pc, #456]	; (8001f14 <menu+0xbac>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	f083 0301 	eor.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d011      	beq.n	8001d7a <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001d56:	4b71      	ldr	r3, [pc, #452]	; (8001f1c <menu+0xbb4>)
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	4b71      	ldr	r3, [pc, #452]	; (8001f20 <menu+0xbb8>)
 8001d5c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001d5e:	4b6f      	ldr	r3, [pc, #444]	; (8001f1c <menu+0xbb4>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d106      	bne.n	8001d74 <menu+0xa0c>
				altLimit = 1;
 8001d66:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <menu+0xbbc>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001d6c:	4b6d      	ldr	r3, [pc, #436]	; (8001f24 <menu+0xbbc>)
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	4b6b      	ldr	r3, [pc, #428]	; (8001f20 <menu+0xbb8>)
 8001d72:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001d74:	4b6c      	ldr	r3, [pc, #432]	; (8001f28 <menu+0xbc0>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001d7a:	4b6c      	ldr	r3, [pc, #432]	; (8001f2c <menu+0xbc4>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	f040 8083 	bne.w	8001e8a <menu+0xb22>
		if(dilSecim == 0) {
 8001d84:	4b60      	ldr	r3, [pc, #384]	; (8001f08 <menu+0xba0>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d105      	bne.n	8001d98 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001d8c:	4a68      	ldr	r2, [pc, #416]	; (8001f30 <menu+0xbc8>)
 8001d8e:	2101      	movs	r1, #1
 8001d90:	2001      	movs	r0, #1
 8001d92:	f006 f803 	bl	8007d9c <lcd_print>
 8001d96:	e008      	b.n	8001daa <menu+0xa42>
		} else if(dilSecim == 1) {
 8001d98:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <menu+0xba0>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d104      	bne.n	8001daa <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001da0:	4a64      	ldr	r2, [pc, #400]	; (8001f34 <menu+0xbcc>)
 8001da2:	2101      	movs	r1, #1
 8001da4:	2001      	movs	r0, #1
 8001da6:	f005 fff9 	bl	8007d9c <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001daa:	4b63      	ldr	r3, [pc, #396]	; (8001f38 <menu+0xbd0>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d113      	bne.n	8001dda <menu+0xa72>
			if(dilSecim == 0) {
 8001db2:	4b55      	ldr	r3, [pc, #340]	; (8001f08 <menu+0xba0>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d105      	bne.n	8001dc6 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001dba:	4a60      	ldr	r2, [pc, #384]	; (8001f3c <menu+0xbd4>)
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	2002      	movs	r0, #2
 8001dc0:	f005 ffec 	bl	8007d9c <lcd_print>
 8001dc4:	e012      	b.n	8001dec <menu+0xa84>
			} else if(dilSecim == 1) {
 8001dc6:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <menu+0xba0>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10e      	bne.n	8001dec <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001dce:	4a5c      	ldr	r2, [pc, #368]	; (8001f40 <menu+0xbd8>)
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	f005 ffe2 	bl	8007d9c <lcd_print>
 8001dd8:	e008      	b.n	8001dec <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001dda:	4b57      	ldr	r3, [pc, #348]	; (8001f38 <menu+0xbd0>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d104      	bne.n	8001dec <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001de2:	4a58      	ldr	r2, [pc, #352]	; (8001f44 <menu+0xbdc>)
 8001de4:	2101      	movs	r1, #1
 8001de6:	2002      	movs	r0, #2
 8001de8:	f005 ffd8 	bl	8007d9c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dec:	2102      	movs	r1, #2
 8001dee:	4848      	ldr	r0, [pc, #288]	; (8001f10 <menu+0xba8>)
 8001df0:	f007 fb00 	bl	80093f4 <HAL_GPIO_ReadPin>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d115      	bne.n	8001e26 <menu+0xabe>
 8001dfa:	4b46      	ldr	r3, [pc, #280]	; (8001f14 <menu+0xbac>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	f083 0301 	eor.w	r3, r3, #1
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00e      	beq.n	8001e26 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001e08:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <menu+0xbd0>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <menu+0xbd0>)
 8001e12:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001e14:	4b48      	ldr	r3, [pc, #288]	; (8001f38 <menu+0xbd0>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d902      	bls.n	8001e22 <menu+0xaba>
				emniyetCercevesi = 0;
 8001e1c:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <menu+0xbd0>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e22:	f002 fe4b 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e26:	2104      	movs	r1, #4
 8001e28:	4839      	ldr	r0, [pc, #228]	; (8001f10 <menu+0xba8>)
 8001e2a:	f007 fae3 	bl	80093f4 <HAL_GPIO_ReadPin>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d115      	bne.n	8001e60 <menu+0xaf8>
 8001e34:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <menu+0xbac>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	f083 0301 	eor.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00e      	beq.n	8001e60 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <menu+0xbd0>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	; (8001f38 <menu+0xbd0>)
 8001e4c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <menu+0xbd0>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001e56:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <menu+0xbd0>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e5c:	f002 fe2e 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001e60:	2108      	movs	r1, #8
 8001e62:	482b      	ldr	r0, [pc, #172]	; (8001f10 <menu+0xba8>)
 8001e64:	f007 fac6 	bl	80093f4 <HAL_GPIO_ReadPin>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d10d      	bne.n	8001e8a <menu+0xb22>
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <menu+0xbac>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	f083 0301 	eor.w	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d006      	beq.n	8001e8a <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <menu+0xbd0>)
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <menu+0xbb8>)
 8001e82:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001e84:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <menu+0xbc0>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001e8a:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <menu+0xbc4>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	f040 80ba 	bne.w	8002008 <menu+0xca0>
		if(dilSecim == 0) {
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <menu+0xba0>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d105      	bne.n	8001ea8 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001e9c:	4a2a      	ldr	r2, [pc, #168]	; (8001f48 <menu+0xbe0>)
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f005 ff7b 	bl	8007d9c <lcd_print>
 8001ea6:	e008      	b.n	8001eba <menu+0xb52>
		} else if(dilSecim == 1) {
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <menu+0xba0>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d104      	bne.n	8001eba <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001eb0:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <menu+0xbe4>)
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f005 ff71 	bl	8007d9c <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <menu+0xbe8>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d113      	bne.n	8001eea <menu+0xb82>
			if(dilSecim == 0) {
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <menu+0xba0>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d105      	bne.n	8001ed6 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001eca:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <menu+0xbd4>)
 8001ecc:	2101      	movs	r1, #1
 8001ece:	2002      	movs	r0, #2
 8001ed0:	f005 ff64 	bl	8007d9c <lcd_print>
 8001ed4:	e049      	b.n	8001f6a <menu+0xc02>
			} else if(dilSecim == 1) {
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <menu+0xba0>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d145      	bne.n	8001f6a <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001ede:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <menu+0xbd8>)
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f005 ff5a 	bl	8007d9c <lcd_print>
 8001ee8:	e03f      	b.n	8001f6a <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001eea:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <menu+0xbe8>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d13b      	bne.n	8001f6a <menu+0xc02>
			if(dilSecim == 0) {
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <menu+0xba0>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d12e      	bne.n	8001f58 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001efa:	4a16      	ldr	r2, [pc, #88]	; (8001f54 <menu+0xbec>)
 8001efc:	2101      	movs	r1, #1
 8001efe:	2002      	movs	r0, #2
 8001f00:	f005 ff4c 	bl	8007d9c <lcd_print>
 8001f04:	e031      	b.n	8001f6a <menu+0xc02>
 8001f06:	bf00      	nop
 8001f08:	20000245 	.word	0x20000245
 8001f0c:	0800d360 	.word	0x0800d360
 8001f10:	40010800 	.word	0x40010800
 8001f14:	20000253 	.word	0x20000253
 8001f18:	20000233 	.word	0x20000233
 8001f1c:	20000225 	.word	0x20000225
 8001f20:	20000128 	.word	0x20000128
 8001f24:	2000022a 	.word	0x2000022a
 8001f28:	20000250 	.word	0x20000250
 8001f2c:	20000224 	.word	0x20000224
 8001f30:	0800d370 	.word	0x0800d370
 8001f34:	0800d384 	.word	0x0800d384
 8001f38:	20000228 	.word	0x20000228
 8001f3c:	0800d398 	.word	0x0800d398
 8001f40:	0800d3ac 	.word	0x0800d3ac
 8001f44:	0800d3c0 	.word	0x0800d3c0
 8001f48:	0800d3d0 	.word	0x0800d3d0
 8001f4c:	0800d3e4 	.word	0x0800d3e4
 8001f50:	20000229 	.word	0x20000229
 8001f54:	0800d3f8 	.word	0x0800d3f8
			} else if(dilSecim == 1) {
 8001f58:	4b92      	ldr	r3, [pc, #584]	; (80021a4 <menu+0xe3c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d104      	bne.n	8001f6a <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001f60:	4a91      	ldr	r2, [pc, #580]	; (80021a8 <menu+0xe40>)
 8001f62:	2101      	movs	r1, #1
 8001f64:	2002      	movs	r0, #2
 8001f66:	f005 ff19 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f6a:	2102      	movs	r1, #2
 8001f6c:	488f      	ldr	r0, [pc, #572]	; (80021ac <menu+0xe44>)
 8001f6e:	f007 fa41 	bl	80093f4 <HAL_GPIO_ReadPin>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d115      	bne.n	8001fa4 <menu+0xc3c>
 8001f78:	4b8d      	ldr	r3, [pc, #564]	; (80021b0 <menu+0xe48>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f083 0301 	eor.w	r3, r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00e      	beq.n	8001fa4 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001f86:	4b8b      	ldr	r3, [pc, #556]	; (80021b4 <menu+0xe4c>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b89      	ldr	r3, [pc, #548]	; (80021b4 <menu+0xe4c>)
 8001f90:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001f92:	4b88      	ldr	r3, [pc, #544]	; (80021b4 <menu+0xe4c>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d902      	bls.n	8001fa0 <menu+0xc38>
				yavaslamaLimit = 0;
 8001f9a:	4b86      	ldr	r3, [pc, #536]	; (80021b4 <menu+0xe4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fa0:	f002 fd8c 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fa4:	2104      	movs	r1, #4
 8001fa6:	4881      	ldr	r0, [pc, #516]	; (80021ac <menu+0xe44>)
 8001fa8:	f007 fa24 	bl	80093f4 <HAL_GPIO_ReadPin>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d115      	bne.n	8001fde <menu+0xc76>
 8001fb2:	4b7f      	ldr	r3, [pc, #508]	; (80021b0 <menu+0xe48>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	f083 0301 	eor.w	r3, r3, #1
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00e      	beq.n	8001fde <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001fc0:	4b7c      	ldr	r3, [pc, #496]	; (80021b4 <menu+0xe4c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	4b7a      	ldr	r3, [pc, #488]	; (80021b4 <menu+0xe4c>)
 8001fca:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001fcc:	4b79      	ldr	r3, [pc, #484]	; (80021b4 <menu+0xe4c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001fd4:	4b77      	ldr	r3, [pc, #476]	; (80021b4 <menu+0xe4c>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fda:	f002 fd6f 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fde:	2108      	movs	r1, #8
 8001fe0:	4872      	ldr	r0, [pc, #456]	; (80021ac <menu+0xe44>)
 8001fe2:	f007 fa07 	bl	80093f4 <HAL_GPIO_ReadPin>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d10d      	bne.n	8002008 <menu+0xca0>
 8001fec:	4b70      	ldr	r3, [pc, #448]	; (80021b0 <menu+0xe48>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	f083 0301 	eor.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001ffa:	4b6e      	ldr	r3, [pc, #440]	; (80021b4 <menu+0xe4c>)
 8001ffc:	781a      	ldrb	r2, [r3, #0]
 8001ffe:	4b6e      	ldr	r3, [pc, #440]	; (80021b8 <menu+0xe50>)
 8002000:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002002:	4b6e      	ldr	r3, [pc, #440]	; (80021bc <menu+0xe54>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002008:	4b6d      	ldr	r3, [pc, #436]	; (80021c0 <menu+0xe58>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b05      	cmp	r3, #5
 800200e:	f040 80b9 	bne.w	8002184 <menu+0xe1c>
		if(dilSecim == 0) {
 8002012:	4b64      	ldr	r3, [pc, #400]	; (80021a4 <menu+0xe3c>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 800201a:	4a6a      	ldr	r2, [pc, #424]	; (80021c4 <menu+0xe5c>)
 800201c:	2101      	movs	r1, #1
 800201e:	2001      	movs	r0, #1
 8002020:	f005 febc 	bl	8007d9c <lcd_print>
 8002024:	e008      	b.n	8002038 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8002026:	4b5f      	ldr	r3, [pc, #380]	; (80021a4 <menu+0xe3c>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d104      	bne.n	8002038 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800202e:	4a66      	ldr	r2, [pc, #408]	; (80021c8 <menu+0xe60>)
 8002030:	2101      	movs	r1, #1
 8002032:	2001      	movs	r0, #1
 8002034:	f005 feb2 	bl	8007d9c <lcd_print>
		}

		if(altLimit == 0) {
 8002038:	4b64      	ldr	r3, [pc, #400]	; (80021cc <menu+0xe64>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d113      	bne.n	8002068 <menu+0xd00>
			if(dilSecim == 0) {
 8002040:	4b58      	ldr	r3, [pc, #352]	; (80021a4 <menu+0xe3c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002048:	4a61      	ldr	r2, [pc, #388]	; (80021d0 <menu+0xe68>)
 800204a:	2101      	movs	r1, #1
 800204c:	2002      	movs	r0, #2
 800204e:	f005 fea5 	bl	8007d9c <lcd_print>
 8002052:	e020      	b.n	8002096 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8002054:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <menu+0xe3c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d11c      	bne.n	8002096 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 800205c:	4a5d      	ldr	r2, [pc, #372]	; (80021d4 <menu+0xe6c>)
 800205e:	2101      	movs	r1, #1
 8002060:	2002      	movs	r0, #2
 8002062:	f005 fe9b 	bl	8007d9c <lcd_print>
 8002066:	e016      	b.n	8002096 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8002068:	4b58      	ldr	r3, [pc, #352]	; (80021cc <menu+0xe64>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d112      	bne.n	8002096 <menu+0xd2e>
			if(dilSecim == 0){
 8002070:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <menu+0xe3c>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002078:	4a57      	ldr	r2, [pc, #348]	; (80021d8 <menu+0xe70>)
 800207a:	2101      	movs	r1, #1
 800207c:	2002      	movs	r0, #2
 800207e:	f005 fe8d 	bl	8007d9c <lcd_print>
 8002082:	e008      	b.n	8002096 <menu+0xd2e>
			} else if(dilSecim == 1){
 8002084:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <menu+0xe3c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d104      	bne.n	8002096 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 800208c:	4a46      	ldr	r2, [pc, #280]	; (80021a8 <menu+0xe40>)
 800208e:	2101      	movs	r1, #1
 8002090:	2002      	movs	r0, #2
 8002092:	f005 fe83 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002096:	2102      	movs	r1, #2
 8002098:	4844      	ldr	r0, [pc, #272]	; (80021ac <menu+0xe44>)
 800209a:	f007 f9ab 	bl	80093f4 <HAL_GPIO_ReadPin>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d119      	bne.n	80020d8 <menu+0xd70>
 80020a4:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <menu+0xe48>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	f083 0301 	eor.w	r3, r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d012      	beq.n	80020d8 <menu+0xd70>
 80020b2:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <menu+0xe74>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10e      	bne.n	80020d8 <menu+0xd70>
			altLimit = altLimit + 1;
 80020ba:	4b44      	ldr	r3, [pc, #272]	; (80021cc <menu+0xe64>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	3301      	adds	r3, #1
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b42      	ldr	r3, [pc, #264]	; (80021cc <menu+0xe64>)
 80020c4:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80020c6:	4b41      	ldr	r3, [pc, #260]	; (80021cc <menu+0xe64>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d902      	bls.n	80020d4 <menu+0xd6c>
				altLimit = 0;
 80020ce:	4b3f      	ldr	r3, [pc, #252]	; (80021cc <menu+0xe64>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020d4:	f002 fcf2 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80020d8:	2104      	movs	r1, #4
 80020da:	4834      	ldr	r0, [pc, #208]	; (80021ac <menu+0xe44>)
 80020dc:	f007 f98a 	bl	80093f4 <HAL_GPIO_ReadPin>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d119      	bne.n	800211a <menu+0xdb2>
 80020e6:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <menu+0xe48>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	f083 0301 	eor.w	r3, r3, #1
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d012      	beq.n	800211a <menu+0xdb2>
 80020f4:	4b39      	ldr	r3, [pc, #228]	; (80021dc <menu+0xe74>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10e      	bne.n	800211a <menu+0xdb2>
			altLimit = altLimit - 1;
 80020fc:	4b33      	ldr	r3, [pc, #204]	; (80021cc <menu+0xe64>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	3b01      	subs	r3, #1
 8002102:	b2da      	uxtb	r2, r3
 8002104:	4b31      	ldr	r3, [pc, #196]	; (80021cc <menu+0xe64>)
 8002106:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002108:	4b30      	ldr	r3, [pc, #192]	; (80021cc <menu+0xe64>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <menu+0xdae>
		   		altLimit = 1;
 8002110:	4b2e      	ldr	r3, [pc, #184]	; (80021cc <menu+0xe64>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002116:	f002 fcd1 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800211a:	2108      	movs	r1, #8
 800211c:	4823      	ldr	r0, [pc, #140]	; (80021ac <menu+0xe44>)
 800211e:	f007 f969 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002122:	4603      	mov	r3, r0
 8002124:	2b01      	cmp	r3, #1
 8002126:	d12d      	bne.n	8002184 <menu+0xe1c>
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <menu+0xe48>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f083 0301 	eor.w	r3, r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d026      	beq.n	8002184 <menu+0xe1c>
			eepromData[5] = altLimit;
 8002136:	4b25      	ldr	r3, [pc, #148]	; (80021cc <menu+0xe64>)
 8002138:	781a      	ldrb	r2, [r3, #0]
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <menu+0xe50>)
 800213c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800213e:	4b23      	ldr	r3, [pc, #140]	; (80021cc <menu+0xe64>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d110      	bne.n	8002168 <menu+0xe00>
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <menu+0xe78>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <menu+0xdee>
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <menu+0xe78>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d108      	bne.n	8002168 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8002156:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <menu+0xe78>)
 8002158:	2203      	movs	r2, #3
 800215a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800215c:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <menu+0xe78>)
 800215e:	781a      	ldrb	r2, [r3, #0]
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <menu+0xe50>)
 8002162:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002166:	e00a      	b.n	800217e <menu+0xe16>
			} else if(altLimit == 0) {
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <menu+0xe64>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d106      	bne.n	800217e <menu+0xe16>
				platformSilindirTipi = 0;
 8002170:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <menu+0xe7c>)
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <menu+0xe7c>)
 8002178:	781a      	ldrb	r2, [r3, #0]
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <menu+0xe50>)
 800217c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <menu+0xe54>)
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <menu+0xe58>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b06      	cmp	r3, #6
 800218a:	f040 80b6 	bne.w	80022fa <menu+0xf92>
		if(dilSecim == 0) {
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <menu+0xe3c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d12a      	bne.n	80021ec <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <menu+0xe80>)
 8002198:	2101      	movs	r1, #1
 800219a:	2001      	movs	r0, #1
 800219c:	f005 fdfe 	bl	8007d9c <lcd_print>
 80021a0:	e02d      	b.n	80021fe <menu+0xe96>
 80021a2:	bf00      	nop
 80021a4:	20000245 	.word	0x20000245
 80021a8:	0800d40c 	.word	0x0800d40c
 80021ac:	40010800 	.word	0x40010800
 80021b0:	20000253 	.word	0x20000253
 80021b4:	20000229 	.word	0x20000229
 80021b8:	20000128 	.word	0x20000128
 80021bc:	20000250 	.word	0x20000250
 80021c0:	20000224 	.word	0x20000224
 80021c4:	0800d420 	.word	0x0800d420
 80021c8:	0800d434 	.word	0x0800d434
 80021cc:	2000022a 	.word	0x2000022a
 80021d0:	0800d398 	.word	0x0800d398
 80021d4:	0800d3ac 	.word	0x0800d3ac
 80021d8:	0800d3f8 	.word	0x0800d3f8
 80021dc:	20000225 	.word	0x20000225
 80021e0:	20000231 	.word	0x20000231
 80021e4:	20000237 	.word	0x20000237
 80021e8:	0800d448 	.word	0x0800d448
		} else if(dilSecim == 1){
 80021ec:	4b7a      	ldr	r3, [pc, #488]	; (80023d8 <menu+0x1070>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d104      	bne.n	80021fe <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80021f4:	4a79      	ldr	r2, [pc, #484]	; (80023dc <menu+0x1074>)
 80021f6:	2101      	movs	r1, #1
 80021f8:	2001      	movs	r0, #1
 80021fa:	f005 fdcf 	bl	8007d9c <lcd_print>
		}
		if(basincSalteri == 0){
 80021fe:	4b78      	ldr	r3, [pc, #480]	; (80023e0 <menu+0x1078>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d113      	bne.n	800222e <menu+0xec6>
			if(dilSecim == 0) {
 8002206:	4b74      	ldr	r3, [pc, #464]	; (80023d8 <menu+0x1070>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d105      	bne.n	800221a <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 800220e:	4a75      	ldr	r2, [pc, #468]	; (80023e4 <menu+0x107c>)
 8002210:	2101      	movs	r1, #1
 8002212:	2002      	movs	r0, #2
 8002214:	f005 fdc2 	bl	8007d9c <lcd_print>
 8002218:	e020      	b.n	800225c <menu+0xef4>
			} else if(dilSecim == 1){
 800221a:	4b6f      	ldr	r3, [pc, #444]	; (80023d8 <menu+0x1070>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d11c      	bne.n	800225c <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8002222:	4a71      	ldr	r2, [pc, #452]	; (80023e8 <menu+0x1080>)
 8002224:	2101      	movs	r1, #1
 8002226:	2002      	movs	r0, #2
 8002228:	f005 fdb8 	bl	8007d9c <lcd_print>
 800222c:	e016      	b.n	800225c <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800222e:	4b6c      	ldr	r3, [pc, #432]	; (80023e0 <menu+0x1078>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d112      	bne.n	800225c <menu+0xef4>
			if(dilSecim == 0) {
 8002236:	4b68      	ldr	r3, [pc, #416]	; (80023d8 <menu+0x1070>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800223e:	4a6b      	ldr	r2, [pc, #428]	; (80023ec <menu+0x1084>)
 8002240:	2101      	movs	r1, #1
 8002242:	2002      	movs	r0, #2
 8002244:	f005 fdaa 	bl	8007d9c <lcd_print>
 8002248:	e008      	b.n	800225c <menu+0xef4>
			} else if(dilSecim == 1) {
 800224a:	4b63      	ldr	r3, [pc, #396]	; (80023d8 <menu+0x1070>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d104      	bne.n	800225c <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8002252:	4a67      	ldr	r2, [pc, #412]	; (80023f0 <menu+0x1088>)
 8002254:	2101      	movs	r1, #1
 8002256:	2002      	movs	r0, #2
 8002258:	f005 fda0 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800225c:	2102      	movs	r1, #2
 800225e:	4865      	ldr	r0, [pc, #404]	; (80023f4 <menu+0x108c>)
 8002260:	f007 f8c8 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002264:	4603      	mov	r3, r0
 8002266:	2b01      	cmp	r3, #1
 8002268:	d115      	bne.n	8002296 <menu+0xf2e>
 800226a:	4b63      	ldr	r3, [pc, #396]	; (80023f8 <menu+0x1090>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	f083 0301 	eor.w	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00e      	beq.n	8002296 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002278:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <menu+0x1078>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b57      	ldr	r3, [pc, #348]	; (80023e0 <menu+0x1078>)
 8002282:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002284:	4b56      	ldr	r3, [pc, #344]	; (80023e0 <menu+0x1078>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d902      	bls.n	8002292 <menu+0xf2a>
				basincSalteri = 0;
 800228c:	4b54      	ldr	r3, [pc, #336]	; (80023e0 <menu+0x1078>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002292:	f002 fc13 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002296:	2104      	movs	r1, #4
 8002298:	4856      	ldr	r0, [pc, #344]	; (80023f4 <menu+0x108c>)
 800229a:	f007 f8ab 	bl	80093f4 <HAL_GPIO_ReadPin>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d115      	bne.n	80022d0 <menu+0xf68>
 80022a4:	4b54      	ldr	r3, [pc, #336]	; (80023f8 <menu+0x1090>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	f083 0301 	eor.w	r3, r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00e      	beq.n	80022d0 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80022b2:	4b4b      	ldr	r3, [pc, #300]	; (80023e0 <menu+0x1078>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4b49      	ldr	r3, [pc, #292]	; (80023e0 <menu+0x1078>)
 80022bc:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80022be:	4b48      	ldr	r3, [pc, #288]	; (80023e0 <menu+0x1078>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <menu+0xf64>
		   		basincSalteri = 1;
 80022c6:	4b46      	ldr	r3, [pc, #280]	; (80023e0 <menu+0x1078>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022cc:	f002 fbf6 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022d0:	2108      	movs	r1, #8
 80022d2:	4848      	ldr	r0, [pc, #288]	; (80023f4 <menu+0x108c>)
 80022d4:	f007 f88e 	bl	80093f4 <HAL_GPIO_ReadPin>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d10d      	bne.n	80022fa <menu+0xf92>
 80022de:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <menu+0x1090>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	f083 0301 	eor.w	r3, r3, #1
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <menu+0xf92>
			eepromData[6] = basincSalteri;
 80022ec:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <menu+0x1078>)
 80022ee:	781a      	ldrb	r2, [r3, #0]
 80022f0:	4b42      	ldr	r3, [pc, #264]	; (80023fc <menu+0x1094>)
 80022f2:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80022f4:	4b42      	ldr	r3, [pc, #264]	; (8002400 <menu+0x1098>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80022fa:	4b42      	ldr	r3, [pc, #264]	; (8002404 <menu+0x109c>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b07      	cmp	r3, #7
 8002300:	f040 80f5 	bne.w	80024ee <menu+0x1186>
		if(dilSecim == 0) {
 8002304:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <menu+0x1070>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800230c:	4a3e      	ldr	r2, [pc, #248]	; (8002408 <menu+0x10a0>)
 800230e:	2101      	movs	r1, #1
 8002310:	2001      	movs	r0, #1
 8002312:	f005 fd43 	bl	8007d9c <lcd_print>
 8002316:	e008      	b.n	800232a <menu+0xfc2>
		} else if(dilSecim == 1){
 8002318:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <menu+0x1070>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d104      	bne.n	800232a <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002320:	4a3a      	ldr	r2, [pc, #232]	; (800240c <menu+0x10a4>)
 8002322:	2101      	movs	r1, #1
 8002324:	2001      	movs	r0, #1
 8002326:	f005 fd39 	bl	8007d9c <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800232a:	4b39      	ldr	r3, [pc, #228]	; (8002410 <menu+0x10a8>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d113      	bne.n	800235a <menu+0xff2>
			if(dilSecim == 0) {
 8002332:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <menu+0x1070>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d105      	bne.n	8002346 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800233a:	4a2a      	ldr	r2, [pc, #168]	; (80023e4 <menu+0x107c>)
 800233c:	2101      	movs	r1, #1
 800233e:	2002      	movs	r0, #2
 8002340:	f005 fd2c 	bl	8007d9c <lcd_print>
 8002344:	e079      	b.n	800243a <menu+0x10d2>
			} else if(dilSecim == 1){
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <menu+0x1070>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d175      	bne.n	800243a <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800234e:	4a26      	ldr	r2, [pc, #152]	; (80023e8 <menu+0x1080>)
 8002350:	2101      	movs	r1, #1
 8002352:	2002      	movs	r0, #2
 8002354:	f005 fd22 	bl	8007d9c <lcd_print>
 8002358:	e06f      	b.n	800243a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <menu+0x10a8>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d113      	bne.n	800238a <menu+0x1022>
			if(dilSecim == 0) {
 8002362:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <menu+0x1070>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800236a:	4a2a      	ldr	r2, [pc, #168]	; (8002414 <menu+0x10ac>)
 800236c:	2101      	movs	r1, #1
 800236e:	2002      	movs	r0, #2
 8002370:	f005 fd14 	bl	8007d9c <lcd_print>
 8002374:	e061      	b.n	800243a <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002376:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <menu+0x1070>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d15d      	bne.n	800243a <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800237e:	4a26      	ldr	r2, [pc, #152]	; (8002418 <menu+0x10b0>)
 8002380:	2101      	movs	r1, #1
 8002382:	2002      	movs	r0, #2
 8002384:	f005 fd0a 	bl	8007d9c <lcd_print>
 8002388:	e057      	b.n	800243a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 800238a:	4b21      	ldr	r3, [pc, #132]	; (8002410 <menu+0x10a8>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d113      	bne.n	80023ba <menu+0x1052>
			if(dilSecim == 0) {
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <menu+0x1070>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d105      	bne.n	80023a6 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 800239a:	4a20      	ldr	r2, [pc, #128]	; (800241c <menu+0x10b4>)
 800239c:	2101      	movs	r1, #1
 800239e:	2002      	movs	r0, #2
 80023a0:	f005 fcfc 	bl	8007d9c <lcd_print>
 80023a4:	e049      	b.n	800243a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <menu+0x1070>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d145      	bne.n	800243a <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80023ae:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <menu+0x10b8>)
 80023b0:	2101      	movs	r1, #1
 80023b2:	2002      	movs	r0, #2
 80023b4:	f005 fcf2 	bl	8007d9c <lcd_print>
 80023b8:	e03f      	b.n	800243a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <menu+0x10a8>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d13b      	bne.n	800243a <menu+0x10d2>
			if(dilSecim == 0) {
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <menu+0x1070>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d12e      	bne.n	8002428 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80023ca:	4a16      	ldr	r2, [pc, #88]	; (8002424 <menu+0x10bc>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	2002      	movs	r0, #2
 80023d0:	f005 fce4 	bl	8007d9c <lcd_print>
 80023d4:	e031      	b.n	800243a <menu+0x10d2>
 80023d6:	bf00      	nop
 80023d8:	20000245 	.word	0x20000245
 80023dc:	0800d458 	.word	0x0800d458
 80023e0:	2000022b 	.word	0x2000022b
 80023e4:	0800d398 	.word	0x0800d398
 80023e8:	0800d3ac 	.word	0x0800d3ac
 80023ec:	0800d3f8 	.word	0x0800d3f8
 80023f0:	0800d40c 	.word	0x0800d40c
 80023f4:	40010800 	.word	0x40010800
 80023f8:	20000253 	.word	0x20000253
 80023fc:	20000128 	.word	0x20000128
 8002400:	20000250 	.word	0x20000250
 8002404:	20000224 	.word	0x20000224
 8002408:	0800d468 	.word	0x0800d468
 800240c:	0800d47c 	.word	0x0800d47c
 8002410:	2000022c 	.word	0x2000022c
 8002414:	0800d490 	.word	0x0800d490
 8002418:	0800d4a4 	.word	0x0800d4a4
 800241c:	0800d4b8 	.word	0x0800d4b8
 8002420:	0800d4cc 	.word	0x0800d4cc
 8002424:	0800d4e0 	.word	0x0800d4e0
			} else if(dilSecim == 1){
 8002428:	4b99      	ldr	r3, [pc, #612]	; (8002690 <menu+0x1328>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d104      	bne.n	800243a <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002430:	4a98      	ldr	r2, [pc, #608]	; (8002694 <menu+0x132c>)
 8002432:	2101      	movs	r1, #1
 8002434:	2002      	movs	r0, #2
 8002436:	f005 fcb1 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800243a:	2102      	movs	r1, #2
 800243c:	4896      	ldr	r0, [pc, #600]	; (8002698 <menu+0x1330>)
 800243e:	f006 ffd9 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002442:	4603      	mov	r3, r0
 8002444:	2b01      	cmp	r3, #1
 8002446:	d115      	bne.n	8002474 <menu+0x110c>
 8002448:	4b94      	ldr	r3, [pc, #592]	; (800269c <menu+0x1334>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	f083 0301 	eor.w	r3, r3, #1
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00e      	beq.n	8002474 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002456:	4b92      	ldr	r3, [pc, #584]	; (80026a0 <menu+0x1338>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4b90      	ldr	r3, [pc, #576]	; (80026a0 <menu+0x1338>)
 8002460:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002462:	4b8f      	ldr	r3, [pc, #572]	; (80026a0 <menu+0x1338>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b03      	cmp	r3, #3
 8002468:	d902      	bls.n	8002470 <menu+0x1108>
				kapiSecimleri = 0;
 800246a:	4b8d      	ldr	r3, [pc, #564]	; (80026a0 <menu+0x1338>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002470:	f002 fb24 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002474:	2104      	movs	r1, #4
 8002476:	4888      	ldr	r0, [pc, #544]	; (8002698 <menu+0x1330>)
 8002478:	f006 ffbc 	bl	80093f4 <HAL_GPIO_ReadPin>
 800247c:	4603      	mov	r3, r0
 800247e:	2b01      	cmp	r3, #1
 8002480:	d115      	bne.n	80024ae <menu+0x1146>
 8002482:	4b86      	ldr	r3, [pc, #536]	; (800269c <menu+0x1334>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	f083 0301 	eor.w	r3, r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00e      	beq.n	80024ae <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002490:	4b83      	ldr	r3, [pc, #524]	; (80026a0 <menu+0x1338>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	3b01      	subs	r3, #1
 8002496:	b2da      	uxtb	r2, r3
 8002498:	4b81      	ldr	r3, [pc, #516]	; (80026a0 <menu+0x1338>)
 800249a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 800249c:	4b80      	ldr	r3, [pc, #512]	; (80026a0 <menu+0x1338>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d902      	bls.n	80024aa <menu+0x1142>
		   		kapiSecimleri = 3;
 80024a4:	4b7e      	ldr	r3, [pc, #504]	; (80026a0 <menu+0x1338>)
 80024a6:	2203      	movs	r2, #3
 80024a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024aa:	f002 fb07 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ae:	2108      	movs	r1, #8
 80024b0:	4879      	ldr	r0, [pc, #484]	; (8002698 <menu+0x1330>)
 80024b2:	f006 ff9f 	bl	80093f4 <HAL_GPIO_ReadPin>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d118      	bne.n	80024ee <menu+0x1186>
 80024bc:	4b77      	ldr	r3, [pc, #476]	; (800269c <menu+0x1334>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f083 0301 	eor.w	r3, r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d011      	beq.n	80024ee <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80024ca:	4b75      	ldr	r3, [pc, #468]	; (80026a0 <menu+0x1338>)
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	4b75      	ldr	r3, [pc, #468]	; (80026a4 <menu+0x133c>)
 80024d0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80024d2:	4b73      	ldr	r3, [pc, #460]	; (80026a0 <menu+0x1338>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <menu+0x1180>
				altLimit = 1;
 80024da:	4b73      	ldr	r3, [pc, #460]	; (80026a8 <menu+0x1340>)
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80024e0:	4b71      	ldr	r3, [pc, #452]	; (80026a8 <menu+0x1340>)
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	4b6f      	ldr	r3, [pc, #444]	; (80026a4 <menu+0x133c>)
 80024e6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80024e8:	4b70      	ldr	r3, [pc, #448]	; (80026ac <menu+0x1344>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80024ee:	4b70      	ldr	r3, [pc, #448]	; (80026b0 <menu+0x1348>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	f040 8092 	bne.w	800261c <menu+0x12b4>
		if(dilSecim == 0) {
 80024f8:	4b65      	ldr	r3, [pc, #404]	; (8002690 <menu+0x1328>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002500:	4a6c      	ldr	r2, [pc, #432]	; (80026b4 <menu+0x134c>)
 8002502:	2101      	movs	r1, #1
 8002504:	2001      	movs	r0, #1
 8002506:	f005 fc49 	bl	8007d9c <lcd_print>
 800250a:	e008      	b.n	800251e <menu+0x11b6>
		} else if(dilSecim == 1) {
 800250c:	4b60      	ldr	r3, [pc, #384]	; (8002690 <menu+0x1328>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d104      	bne.n	800251e <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002514:	4a68      	ldr	r2, [pc, #416]	; (80026b8 <menu+0x1350>)
 8002516:	2101      	movs	r1, #1
 8002518:	2001      	movs	r0, #1
 800251a:	f005 fc3f 	bl	8007d9c <lcd_print>
		}

		if(kapiAcTipi == 0){
 800251e:	4b67      	ldr	r3, [pc, #412]	; (80026bc <menu+0x1354>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d113      	bne.n	800254e <menu+0x11e6>
			if(dilSecim == 0) {
 8002526:	4b5a      	ldr	r3, [pc, #360]	; (8002690 <menu+0x1328>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800252e:	4a64      	ldr	r2, [pc, #400]	; (80026c0 <menu+0x1358>)
 8002530:	2101      	movs	r1, #1
 8002532:	2002      	movs	r0, #2
 8002534:	f005 fc32 	bl	8007d9c <lcd_print>
 8002538:	e020      	b.n	800257c <menu+0x1214>
			} else if(dilSecim == 1) {
 800253a:	4b55      	ldr	r3, [pc, #340]	; (8002690 <menu+0x1328>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d11c      	bne.n	800257c <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002542:	4a60      	ldr	r2, [pc, #384]	; (80026c4 <menu+0x135c>)
 8002544:	2101      	movs	r1, #1
 8002546:	2002      	movs	r0, #2
 8002548:	f005 fc28 	bl	8007d9c <lcd_print>
 800254c:	e016      	b.n	800257c <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800254e:	4b5b      	ldr	r3, [pc, #364]	; (80026bc <menu+0x1354>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d112      	bne.n	800257c <menu+0x1214>
			if(dilSecim == 0){
 8002556:	4b4e      	ldr	r3, [pc, #312]	; (8002690 <menu+0x1328>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d105      	bne.n	800256a <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800255e:	4a5a      	ldr	r2, [pc, #360]	; (80026c8 <menu+0x1360>)
 8002560:	2101      	movs	r1, #1
 8002562:	2002      	movs	r0, #2
 8002564:	f005 fc1a 	bl	8007d9c <lcd_print>
 8002568:	e008      	b.n	800257c <menu+0x1214>
			} else if(dilSecim == 1){
 800256a:	4b49      	ldr	r3, [pc, #292]	; (8002690 <menu+0x1328>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d104      	bne.n	800257c <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8002572:	4a56      	ldr	r2, [pc, #344]	; (80026cc <menu+0x1364>)
 8002574:	2101      	movs	r1, #1
 8002576:	2002      	movs	r0, #2
 8002578:	f005 fc10 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800257c:	2102      	movs	r1, #2
 800257e:	4846      	ldr	r0, [pc, #280]	; (8002698 <menu+0x1330>)
 8002580:	f006 ff38 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002584:	4603      	mov	r3, r0
 8002586:	2b01      	cmp	r3, #1
 8002588:	d115      	bne.n	80025b6 <menu+0x124e>
 800258a:	4b44      	ldr	r3, [pc, #272]	; (800269c <menu+0x1334>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	f083 0301 	eor.w	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00e      	beq.n	80025b6 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002598:	4b48      	ldr	r3, [pc, #288]	; (80026bc <menu+0x1354>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b46      	ldr	r3, [pc, #280]	; (80026bc <menu+0x1354>)
 80025a2:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80025a4:	4b45      	ldr	r3, [pc, #276]	; (80026bc <menu+0x1354>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d902      	bls.n	80025b2 <menu+0x124a>
				kapiAcTipi = 0;
 80025ac:	4b43      	ldr	r3, [pc, #268]	; (80026bc <menu+0x1354>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025b2:	f002 fa83 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025b6:	2104      	movs	r1, #4
 80025b8:	4837      	ldr	r0, [pc, #220]	; (8002698 <menu+0x1330>)
 80025ba:	f006 ff1b 	bl	80093f4 <HAL_GPIO_ReadPin>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d115      	bne.n	80025f0 <menu+0x1288>
 80025c4:	4b35      	ldr	r3, [pc, #212]	; (800269c <menu+0x1334>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	f083 0301 	eor.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00e      	beq.n	80025f0 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80025d2:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <menu+0x1354>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <menu+0x1354>)
 80025dc:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80025de:	4b37      	ldr	r3, [pc, #220]	; (80026bc <menu+0x1354>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <menu+0x1284>
		   		kapiAcTipi = 1;
 80025e6:	4b35      	ldr	r3, [pc, #212]	; (80026bc <menu+0x1354>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025ec:	f002 fa66 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025f0:	2108      	movs	r1, #8
 80025f2:	4829      	ldr	r0, [pc, #164]	; (8002698 <menu+0x1330>)
 80025f4:	f006 fefe 	bl	80093f4 <HAL_GPIO_ReadPin>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d10e      	bne.n	800261c <menu+0x12b4>
 80025fe:	4b27      	ldr	r3, [pc, #156]	; (800269c <menu+0x1334>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	f083 0301 	eor.w	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 800260c:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <menu+0x1354>)
 800260e:	781a      	ldrb	r2, [r3, #0]
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <menu+0x133c>)
 8002612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002616:	4b25      	ldr	r3, [pc, #148]	; (80026ac <menu+0x1344>)
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800261c:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <menu+0x1348>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b09      	cmp	r3, #9
 8002622:	f040 80b9 	bne.w	8002798 <menu+0x1430>
		if(dilSecim == 0){
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <menu+0x1328>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d105      	bne.n	800263a <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800262e:	4a28      	ldr	r2, [pc, #160]	; (80026d0 <menu+0x1368>)
 8002630:	2101      	movs	r1, #1
 8002632:	2001      	movs	r0, #1
 8002634:	f005 fbb2 	bl	8007d9c <lcd_print>
 8002638:	e008      	b.n	800264c <menu+0x12e4>
		} else if(dilSecim == 1) {
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <menu+0x1328>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d104      	bne.n	800264c <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002642:	4a24      	ldr	r2, [pc, #144]	; (80026d4 <menu+0x136c>)
 8002644:	2101      	movs	r1, #1
 8002646:	2001      	movs	r0, #1
 8002648:	f005 fba8 	bl	8007d9c <lcd_print>
		}

		if(kapi1Tip == 0) {
 800264c:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <menu+0x1370>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002654:	4a21      	ldr	r2, [pc, #132]	; (80026dc <menu+0x1374>)
 8002656:	2101      	movs	r1, #1
 8002658:	2002      	movs	r0, #2
 800265a:	f005 fb9f 	bl	8007d9c <lcd_print>
 800265e:	e04c      	b.n	80026fa <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002660:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <menu+0x1370>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d13f      	bne.n	80026e8 <menu+0x1380>
			if(dilSecim == 0){
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <menu+0x1328>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002670:	4a1b      	ldr	r2, [pc, #108]	; (80026e0 <menu+0x1378>)
 8002672:	2101      	movs	r1, #1
 8002674:	2002      	movs	r0, #2
 8002676:	f005 fb91 	bl	8007d9c <lcd_print>
 800267a:	e03e      	b.n	80026fa <menu+0x1392>
			} else if(dilSecim == 1) {
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <menu+0x1328>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d13a      	bne.n	80026fa <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002684:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <menu+0x137c>)
 8002686:	2101      	movs	r1, #1
 8002688:	2002      	movs	r0, #2
 800268a:	f005 fb87 	bl	8007d9c <lcd_print>
 800268e:	e034      	b.n	80026fa <menu+0x1392>
 8002690:	20000245 	.word	0x20000245
 8002694:	0800d4f4 	.word	0x0800d4f4
 8002698:	40010800 	.word	0x40010800
 800269c:	20000253 	.word	0x20000253
 80026a0:	2000022c 	.word	0x2000022c
 80026a4:	20000128 	.word	0x20000128
 80026a8:	2000022a 	.word	0x2000022a
 80026ac:	20000250 	.word	0x20000250
 80026b0:	20000224 	.word	0x20000224
 80026b4:	0800d508 	.word	0x0800d508
 80026b8:	0800d51c 	.word	0x0800d51c
 80026bc:	20000230 	.word	0x20000230
 80026c0:	0800d530 	.word	0x0800d530
 80026c4:	0800d540 	.word	0x0800d540
 80026c8:	0800d550 	.word	0x0800d550
 80026cc:	0800d564 	.word	0x0800d564
 80026d0:	0800d578 	.word	0x0800d578
 80026d4:	0800d58c 	.word	0x0800d58c
 80026d8:	2000022d 	.word	0x2000022d
 80026dc:	0800d5a0 	.word	0x0800d5a0
 80026e0:	0800d5b4 	.word	0x0800d5b4
 80026e4:	0800d5c4 	.word	0x0800d5c4
			}
		} else if(kapi1Tip == 2) {
 80026e8:	4b8a      	ldr	r3, [pc, #552]	; (8002914 <menu+0x15ac>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d104      	bne.n	80026fa <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 80026f0:	4a89      	ldr	r2, [pc, #548]	; (8002918 <menu+0x15b0>)
 80026f2:	2101      	movs	r1, #1
 80026f4:	2002      	movs	r0, #2
 80026f6:	f005 fb51 	bl	8007d9c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026fa:	2102      	movs	r1, #2
 80026fc:	4887      	ldr	r0, [pc, #540]	; (800291c <menu+0x15b4>)
 80026fe:	f006 fe79 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002702:	4603      	mov	r3, r0
 8002704:	2b01      	cmp	r3, #1
 8002706:	d115      	bne.n	8002734 <menu+0x13cc>
 8002708:	4b85      	ldr	r3, [pc, #532]	; (8002920 <menu+0x15b8>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	f083 0301 	eor.w	r3, r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00e      	beq.n	8002734 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002716:	4b7f      	ldr	r3, [pc, #508]	; (8002914 <menu+0x15ac>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b7d      	ldr	r3, [pc, #500]	; (8002914 <menu+0x15ac>)
 8002720:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002722:	4b7c      	ldr	r3, [pc, #496]	; (8002914 <menu+0x15ac>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d902      	bls.n	8002730 <menu+0x13c8>
				kapi1Tip = 0;
 800272a:	4b7a      	ldr	r3, [pc, #488]	; (8002914 <menu+0x15ac>)
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002730:	f002 f9c4 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002734:	2104      	movs	r1, #4
 8002736:	4879      	ldr	r0, [pc, #484]	; (800291c <menu+0x15b4>)
 8002738:	f006 fe5c 	bl	80093f4 <HAL_GPIO_ReadPin>
 800273c:	4603      	mov	r3, r0
 800273e:	2b01      	cmp	r3, #1
 8002740:	d115      	bne.n	800276e <menu+0x1406>
 8002742:	4b77      	ldr	r3, [pc, #476]	; (8002920 <menu+0x15b8>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	f083 0301 	eor.w	r3, r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00e      	beq.n	800276e <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002750:	4b70      	ldr	r3, [pc, #448]	; (8002914 <menu+0x15ac>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	3b01      	subs	r3, #1
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b6e      	ldr	r3, [pc, #440]	; (8002914 <menu+0x15ac>)
 800275a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 800275c:	4b6d      	ldr	r3, [pc, #436]	; (8002914 <menu+0x15ac>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d902      	bls.n	800276a <menu+0x1402>
		   		kapi1Tip = 2;
 8002764:	4b6b      	ldr	r3, [pc, #428]	; (8002914 <menu+0x15ac>)
 8002766:	2202      	movs	r2, #2
 8002768:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800276a:	f002 f9a7 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800276e:	2108      	movs	r1, #8
 8002770:	486a      	ldr	r0, [pc, #424]	; (800291c <menu+0x15b4>)
 8002772:	f006 fe3f 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002776:	4603      	mov	r3, r0
 8002778:	2b01      	cmp	r3, #1
 800277a:	d10d      	bne.n	8002798 <menu+0x1430>
 800277c:	4b68      	ldr	r3, [pc, #416]	; (8002920 <menu+0x15b8>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	f083 0301 	eor.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d006      	beq.n	8002798 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 800278a:	4b62      	ldr	r3, [pc, #392]	; (8002914 <menu+0x15ac>)
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	4b65      	ldr	r3, [pc, #404]	; (8002924 <menu+0x15bc>)
 8002790:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002792:	4b65      	ldr	r3, [pc, #404]	; (8002928 <menu+0x15c0>)
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002798:	4b64      	ldr	r3, [pc, #400]	; (800292c <menu+0x15c4>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b0a      	cmp	r3, #10
 800279e:	d17f      	bne.n	80028a0 <menu+0x1538>
		if(dilSecim == 0) {
 80027a0:	4b63      	ldr	r3, [pc, #396]	; (8002930 <menu+0x15c8>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80027a8:	4a62      	ldr	r2, [pc, #392]	; (8002934 <menu+0x15cc>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	2001      	movs	r0, #1
 80027ae:	f005 faf5 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80027b2:	4a61      	ldr	r2, [pc, #388]	; (8002938 <menu+0x15d0>)
 80027b4:	2101      	movs	r1, #1
 80027b6:	2002      	movs	r0, #2
 80027b8:	f005 faf0 	bl	8007d9c <lcd_print>
 80027bc:	e00d      	b.n	80027da <menu+0x1472>
		} else if(dilSecim == 1) {
 80027be:	4b5c      	ldr	r3, [pc, #368]	; (8002930 <menu+0x15c8>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d109      	bne.n	80027da <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80027c6:	4a5d      	ldr	r2, [pc, #372]	; (800293c <menu+0x15d4>)
 80027c8:	2101      	movs	r1, #1
 80027ca:	2001      	movs	r0, #1
 80027cc:	f005 fae6 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80027d0:	4a5b      	ldr	r2, [pc, #364]	; (8002940 <menu+0x15d8>)
 80027d2:	2101      	movs	r1, #1
 80027d4:	2002      	movs	r0, #2
 80027d6:	f005 fae1 	bl	8007d9c <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80027da:	4b5a      	ldr	r3, [pc, #360]	; (8002944 <menu+0x15dc>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	220a      	movs	r2, #10
 80027e0:	4959      	ldr	r1, [pc, #356]	; (8002948 <menu+0x15e0>)
 80027e2:	4618      	mov	r0, r3
 80027e4:	f009 fe32 	bl	800c44c <itoa>
		lcd_print(2,16,snum);
 80027e8:	4a57      	ldr	r2, [pc, #348]	; (8002948 <menu+0x15e0>)
 80027ea:	2110      	movs	r1, #16
 80027ec:	2002      	movs	r0, #2
 80027ee:	f005 fad5 	bl	8007d9c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80027f2:	2102      	movs	r1, #2
 80027f4:	4849      	ldr	r0, [pc, #292]	; (800291c <menu+0x15b4>)
 80027f6:	f006 fdfd 	bl	80093f4 <HAL_GPIO_ReadPin>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d119      	bne.n	8002834 <menu+0x14cc>
 8002800:	4b47      	ldr	r3, [pc, #284]	; (8002920 <menu+0x15b8>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	f083 0301 	eor.w	r3, r3, #1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d012      	beq.n	8002834 <menu+0x14cc>
 800280e:	4b41      	ldr	r3, [pc, #260]	; (8002914 <menu+0x15ac>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10e      	bne.n	8002834 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002816:	4b4b      	ldr	r3, [pc, #300]	; (8002944 <menu+0x15dc>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	3301      	adds	r3, #1
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b49      	ldr	r3, [pc, #292]	; (8002944 <menu+0x15dc>)
 8002820:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002822:	4b48      	ldr	r3, [pc, #288]	; (8002944 <menu+0x15dc>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b05      	cmp	r3, #5
 8002828:	d902      	bls.n	8002830 <menu+0x14c8>
				kapi1AcSure = 0;
 800282a:	4b46      	ldr	r3, [pc, #280]	; (8002944 <menu+0x15dc>)
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002830:	f002 f944 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002834:	2104      	movs	r1, #4
 8002836:	4839      	ldr	r0, [pc, #228]	; (800291c <menu+0x15b4>)
 8002838:	f006 fddc 	bl	80093f4 <HAL_GPIO_ReadPin>
 800283c:	4603      	mov	r3, r0
 800283e:	2b01      	cmp	r3, #1
 8002840:	d119      	bne.n	8002876 <menu+0x150e>
 8002842:	4b37      	ldr	r3, [pc, #220]	; (8002920 <menu+0x15b8>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	f083 0301 	eor.w	r3, r3, #1
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d012      	beq.n	8002876 <menu+0x150e>
 8002850:	4b30      	ldr	r3, [pc, #192]	; (8002914 <menu+0x15ac>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10e      	bne.n	8002876 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002858:	4b3a      	ldr	r3, [pc, #232]	; (8002944 <menu+0x15dc>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	3b01      	subs	r3, #1
 800285e:	b2da      	uxtb	r2, r3
 8002860:	4b38      	ldr	r3, [pc, #224]	; (8002944 <menu+0x15dc>)
 8002862:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002864:	4b37      	ldr	r3, [pc, #220]	; (8002944 <menu+0x15dc>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b06      	cmp	r3, #6
 800286a:	d902      	bls.n	8002872 <menu+0x150a>
		   		kapi1AcSure = 5;
 800286c:	4b35      	ldr	r3, [pc, #212]	; (8002944 <menu+0x15dc>)
 800286e:	2205      	movs	r2, #5
 8002870:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002872:	f002 f923 	bl	8004abc <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002876:	2108      	movs	r1, #8
 8002878:	4828      	ldr	r0, [pc, #160]	; (800291c <menu+0x15b4>)
 800287a:	f006 fdbb 	bl	80093f4 <HAL_GPIO_ReadPin>
 800287e:	4603      	mov	r3, r0
 8002880:	2b01      	cmp	r3, #1
 8002882:	d10d      	bne.n	80028a0 <menu+0x1538>
 8002884:	4b26      	ldr	r3, [pc, #152]	; (8002920 <menu+0x15b8>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	f083 0301 	eor.w	r3, r3, #1
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002892:	4b2c      	ldr	r3, [pc, #176]	; (8002944 <menu+0x15dc>)
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	4b23      	ldr	r3, [pc, #140]	; (8002924 <menu+0x15bc>)
 8002898:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 800289a:	4b23      	ldr	r3, [pc, #140]	; (8002928 <menu+0x15c0>)
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80028a0:	4b22      	ldr	r3, [pc, #136]	; (800292c <menu+0x15c4>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b0b      	cmp	r3, #11
 80028a6:	f040 80b5 	bne.w	8002a14 <menu+0x16ac>
		if(dilSecim == 0) {
 80028aa:	4b21      	ldr	r3, [pc, #132]	; (8002930 <menu+0x15c8>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80028b2:	4a26      	ldr	r2, [pc, #152]	; (800294c <menu+0x15e4>)
 80028b4:	2101      	movs	r1, #1
 80028b6:	2001      	movs	r0, #1
 80028b8:	f005 fa70 	bl	8007d9c <lcd_print>
 80028bc:	e008      	b.n	80028d0 <menu+0x1568>
		} else if(dilSecim == 1) {
 80028be:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <menu+0x15c8>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d104      	bne.n	80028d0 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80028c6:	4a22      	ldr	r2, [pc, #136]	; (8002950 <menu+0x15e8>)
 80028c8:	2101      	movs	r1, #1
 80028ca:	2001      	movs	r0, #1
 80028cc:	f005 fa66 	bl	8007d9c <lcd_print>
		}

		if(kapi2Tip == 0) {
 80028d0:	4b20      	ldr	r3, [pc, #128]	; (8002954 <menu+0x15ec>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d105      	bne.n	80028e4 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 80028d8:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <menu+0x15f0>)
 80028da:	2101      	movs	r1, #1
 80028dc:	2002      	movs	r0, #2
 80028de:	f005 fa5d 	bl	8007d9c <lcd_print>
 80028e2:	e048      	b.n	8002976 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <menu+0x15ec>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d13b      	bne.n	8002964 <menu+0x15fc>
			if(dilSecim == 0) {
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <menu+0x15c8>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 80028f4:	4a19      	ldr	r2, [pc, #100]	; (800295c <menu+0x15f4>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	2002      	movs	r0, #2
 80028fa:	f005 fa4f 	bl	8007d9c <lcd_print>
 80028fe:	e03a      	b.n	8002976 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <menu+0x15c8>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d136      	bne.n	8002976 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002908:	4a15      	ldr	r2, [pc, #84]	; (8002960 <menu+0x15f8>)
 800290a:	2101      	movs	r1, #1
 800290c:	2002      	movs	r0, #2
 800290e:	f005 fa45 	bl	8007d9c <lcd_print>
 8002912:	e030      	b.n	8002976 <menu+0x160e>
 8002914:	2000022d 	.word	0x2000022d
 8002918:	0800d5d8 	.word	0x0800d5d8
 800291c:	40010800 	.word	0x40010800
 8002920:	20000253 	.word	0x20000253
 8002924:	20000128 	.word	0x20000128
 8002928:	20000250 	.word	0x20000250
 800292c:	20000224 	.word	0x20000224
 8002930:	20000245 	.word	0x20000245
 8002934:	0800d5e8 	.word	0x0800d5e8
 8002938:	0800d5fc 	.word	0x0800d5fc
 800293c:	0800d60c 	.word	0x0800d60c
 8002940:	0800d620 	.word	0x0800d620
 8002944:	2000023d 	.word	0x2000023d
 8002948:	20000198 	.word	0x20000198
 800294c:	0800d630 	.word	0x0800d630
 8002950:	0800d644 	.word	0x0800d644
 8002954:	2000022e 	.word	0x2000022e
 8002958:	0800d5a0 	.word	0x0800d5a0
 800295c:	0800d5b4 	.word	0x0800d5b4
 8002960:	0800d5c4 	.word	0x0800d5c4
			}
		} else if(kapi2Tip == 2) {
 8002964:	4b8a      	ldr	r3, [pc, #552]	; (8002b90 <menu+0x1828>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d104      	bne.n	8002976 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 800296c:	4a89      	ldr	r2, [pc, #548]	; (8002b94 <menu+0x182c>)
 800296e:	2101      	movs	r1, #1
 8002970:	2002      	movs	r0, #2
 8002972:	f005 fa13 	bl	8007d9c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002976:	2102      	movs	r1, #2
 8002978:	4887      	ldr	r0, [pc, #540]	; (8002b98 <menu+0x1830>)
 800297a:	f006 fd3b 	bl	80093f4 <HAL_GPIO_ReadPin>
 800297e:	4603      	mov	r3, r0
 8002980:	2b01      	cmp	r3, #1
 8002982:	d115      	bne.n	80029b0 <menu+0x1648>
 8002984:	4b85      	ldr	r3, [pc, #532]	; (8002b9c <menu+0x1834>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	f083 0301 	eor.w	r3, r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00e      	beq.n	80029b0 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002992:	4b7f      	ldr	r3, [pc, #508]	; (8002b90 <menu+0x1828>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b7d      	ldr	r3, [pc, #500]	; (8002b90 <menu+0x1828>)
 800299c:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 800299e:	4b7c      	ldr	r3, [pc, #496]	; (8002b90 <menu+0x1828>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d902      	bls.n	80029ac <menu+0x1644>
				kapi2Tip = 0;
 80029a6:	4b7a      	ldr	r3, [pc, #488]	; (8002b90 <menu+0x1828>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029ac:	f002 f886 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029b0:	2104      	movs	r1, #4
 80029b2:	4879      	ldr	r0, [pc, #484]	; (8002b98 <menu+0x1830>)
 80029b4:	f006 fd1e 	bl	80093f4 <HAL_GPIO_ReadPin>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d115      	bne.n	80029ea <menu+0x1682>
 80029be:	4b77      	ldr	r3, [pc, #476]	; (8002b9c <menu+0x1834>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	f083 0301 	eor.w	r3, r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00e      	beq.n	80029ea <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 80029cc:	4b70      	ldr	r3, [pc, #448]	; (8002b90 <menu+0x1828>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	4b6e      	ldr	r3, [pc, #440]	; (8002b90 <menu+0x1828>)
 80029d6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80029d8:	4b6d      	ldr	r3, [pc, #436]	; (8002b90 <menu+0x1828>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d902      	bls.n	80029e6 <menu+0x167e>
		   		kapi2Tip = 2;
 80029e0:	4b6b      	ldr	r3, [pc, #428]	; (8002b90 <menu+0x1828>)
 80029e2:	2202      	movs	r2, #2
 80029e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029e6:	f002 f869 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ea:	2108      	movs	r1, #8
 80029ec:	486a      	ldr	r0, [pc, #424]	; (8002b98 <menu+0x1830>)
 80029ee:	f006 fd01 	bl	80093f4 <HAL_GPIO_ReadPin>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d10d      	bne.n	8002a14 <menu+0x16ac>
 80029f8:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <menu+0x1834>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	f083 0301 	eor.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d006      	beq.n	8002a14 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002a06:	4b62      	ldr	r3, [pc, #392]	; (8002b90 <menu+0x1828>)
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <menu+0x1838>)
 8002a0c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002a0e:	4b65      	ldr	r3, [pc, #404]	; (8002ba4 <menu+0x183c>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002a14:	4b64      	ldr	r3, [pc, #400]	; (8002ba8 <menu+0x1840>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b0c      	cmp	r3, #12
 8002a1a:	d17f      	bne.n	8002b1c <menu+0x17b4>
		if(dilSecim == 0) {
 8002a1c:	4b63      	ldr	r3, [pc, #396]	; (8002bac <menu+0x1844>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002a24:	4a62      	ldr	r2, [pc, #392]	; (8002bb0 <menu+0x1848>)
 8002a26:	2101      	movs	r1, #1
 8002a28:	2001      	movs	r0, #1
 8002a2a:	f005 f9b7 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002a2e:	4a61      	ldr	r2, [pc, #388]	; (8002bb4 <menu+0x184c>)
 8002a30:	2101      	movs	r1, #1
 8002a32:	2002      	movs	r0, #2
 8002a34:	f005 f9b2 	bl	8007d9c <lcd_print>
 8002a38:	e00d      	b.n	8002a56 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002a3a:	4b5c      	ldr	r3, [pc, #368]	; (8002bac <menu+0x1844>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d109      	bne.n	8002a56 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002a42:	4a5d      	ldr	r2, [pc, #372]	; (8002bb8 <menu+0x1850>)
 8002a44:	2101      	movs	r1, #1
 8002a46:	2001      	movs	r0, #1
 8002a48:	f005 f9a8 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a4c:	4a5b      	ldr	r2, [pc, #364]	; (8002bbc <menu+0x1854>)
 8002a4e:	2101      	movs	r1, #1
 8002a50:	2002      	movs	r0, #2
 8002a52:	f005 f9a3 	bl	8007d9c <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002a56:	4b5a      	ldr	r3, [pc, #360]	; (8002bc0 <menu+0x1858>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	220a      	movs	r2, #10
 8002a5c:	4959      	ldr	r1, [pc, #356]	; (8002bc4 <menu+0x185c>)
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f009 fcf4 	bl	800c44c <itoa>
		lcd_print(2,16,snum);
 8002a64:	4a57      	ldr	r2, [pc, #348]	; (8002bc4 <menu+0x185c>)
 8002a66:	2110      	movs	r1, #16
 8002a68:	2002      	movs	r0, #2
 8002a6a:	f005 f997 	bl	8007d9c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a6e:	2102      	movs	r1, #2
 8002a70:	4849      	ldr	r0, [pc, #292]	; (8002b98 <menu+0x1830>)
 8002a72:	f006 fcbf 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d119      	bne.n	8002ab0 <menu+0x1748>
 8002a7c:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <menu+0x1834>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	f083 0301 	eor.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d012      	beq.n	8002ab0 <menu+0x1748>
 8002a8a:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <menu+0x1828>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10e      	bne.n	8002ab0 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002a92:	4b4b      	ldr	r3, [pc, #300]	; (8002bc0 <menu+0x1858>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	3301      	adds	r3, #1
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <menu+0x1858>)
 8002a9c:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002a9e:	4b48      	ldr	r3, [pc, #288]	; (8002bc0 <menu+0x1858>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	d902      	bls.n	8002aac <menu+0x1744>
				kapi2AcSure = 0;
 8002aa6:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <menu+0x1858>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002aac:	f002 f806 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002ab0:	2104      	movs	r1, #4
 8002ab2:	4839      	ldr	r0, [pc, #228]	; (8002b98 <menu+0x1830>)
 8002ab4:	f006 fc9e 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d119      	bne.n	8002af2 <menu+0x178a>
 8002abe:	4b37      	ldr	r3, [pc, #220]	; (8002b9c <menu+0x1834>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	f083 0301 	eor.w	r3, r3, #1
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d012      	beq.n	8002af2 <menu+0x178a>
 8002acc:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <menu+0x1828>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10e      	bne.n	8002af2 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002ad4:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <menu+0x1858>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <menu+0x1858>)
 8002ade:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002ae0:	4b37      	ldr	r3, [pc, #220]	; (8002bc0 <menu+0x1858>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b06      	cmp	r3, #6
 8002ae6:	d902      	bls.n	8002aee <menu+0x1786>
		   		kapi2AcSure = 5;
 8002ae8:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <menu+0x1858>)
 8002aea:	2205      	movs	r2, #5
 8002aec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aee:	f001 ffe5 	bl	8004abc <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002af2:	2108      	movs	r1, #8
 8002af4:	4828      	ldr	r0, [pc, #160]	; (8002b98 <menu+0x1830>)
 8002af6:	f006 fc7d 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d10d      	bne.n	8002b1c <menu+0x17b4>
 8002b00:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <menu+0x1834>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	f083 0301 	eor.w	r3, r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <menu+0x1858>)
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <menu+0x1838>)
 8002b14:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002b16:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <menu+0x183c>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002b1c:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <menu+0x1840>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b0d      	cmp	r3, #13
 8002b22:	f040 80b5 	bne.w	8002c90 <menu+0x1928>
		if(dilSecim == 0) {
 8002b26:	4b21      	ldr	r3, [pc, #132]	; (8002bac <menu+0x1844>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d105      	bne.n	8002b3a <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002b2e:	4a26      	ldr	r2, [pc, #152]	; (8002bc8 <menu+0x1860>)
 8002b30:	2101      	movs	r1, #1
 8002b32:	2001      	movs	r0, #1
 8002b34:	f005 f932 	bl	8007d9c <lcd_print>
 8002b38:	e008      	b.n	8002b4c <menu+0x17e4>
		} else if(dilSecim == 1){
 8002b3a:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <menu+0x1844>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d104      	bne.n	8002b4c <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002b42:	4a22      	ldr	r2, [pc, #136]	; (8002bcc <menu+0x1864>)
 8002b44:	2101      	movs	r1, #1
 8002b46:	2001      	movs	r0, #1
 8002b48:	f005 f928 	bl	8007d9c <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002b4c:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <menu+0x1868>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002b54:	4a1f      	ldr	r2, [pc, #124]	; (8002bd4 <menu+0x186c>)
 8002b56:	2101      	movs	r1, #1
 8002b58:	2002      	movs	r0, #2
 8002b5a:	f005 f91f 	bl	8007d9c <lcd_print>
 8002b5e:	e048      	b.n	8002bf2 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <menu+0x1868>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d13b      	bne.n	8002be0 <menu+0x1878>
			if(dilSecim == 0) {
 8002b68:	4b10      	ldr	r3, [pc, #64]	; (8002bac <menu+0x1844>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002b70:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <menu+0x1870>)
 8002b72:	2101      	movs	r1, #1
 8002b74:	2002      	movs	r0, #2
 8002b76:	f005 f911 	bl	8007d9c <lcd_print>
 8002b7a:	e03a      	b.n	8002bf2 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <menu+0x1844>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d136      	bne.n	8002bf2 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002b84:	4a15      	ldr	r2, [pc, #84]	; (8002bdc <menu+0x1874>)
 8002b86:	2101      	movs	r1, #1
 8002b88:	2002      	movs	r0, #2
 8002b8a:	f005 f907 	bl	8007d9c <lcd_print>
 8002b8e:	e030      	b.n	8002bf2 <menu+0x188a>
 8002b90:	2000022e 	.word	0x2000022e
 8002b94:	0800d5d8 	.word	0x0800d5d8
 8002b98:	40010800 	.word	0x40010800
 8002b9c:	20000253 	.word	0x20000253
 8002ba0:	20000128 	.word	0x20000128
 8002ba4:	20000250 	.word	0x20000250
 8002ba8:	20000224 	.word	0x20000224
 8002bac:	20000245 	.word	0x20000245
 8002bb0:	0800d658 	.word	0x0800d658
 8002bb4:	0800d5fc 	.word	0x0800d5fc
 8002bb8:	0800d66c 	.word	0x0800d66c
 8002bbc:	0800d620 	.word	0x0800d620
 8002bc0:	2000023e 	.word	0x2000023e
 8002bc4:	20000198 	.word	0x20000198
 8002bc8:	0800d680 	.word	0x0800d680
 8002bcc:	0800d694 	.word	0x0800d694
 8002bd0:	2000022f 	.word	0x2000022f
 8002bd4:	0800d5a0 	.word	0x0800d5a0
 8002bd8:	0800d5b4 	.word	0x0800d5b4
 8002bdc:	0800d5c4 	.word	0x0800d5c4
			}
		} else if(kapitablaTip == 2) {
 8002be0:	4b5b      	ldr	r3, [pc, #364]	; (8002d50 <menu+0x19e8>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d104      	bne.n	8002bf2 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002be8:	4a5a      	ldr	r2, [pc, #360]	; (8002d54 <menu+0x19ec>)
 8002bea:	2101      	movs	r1, #1
 8002bec:	2002      	movs	r0, #2
 8002bee:	f005 f8d5 	bl	8007d9c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	4858      	ldr	r0, [pc, #352]	; (8002d58 <menu+0x19f0>)
 8002bf6:	f006 fbfd 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d115      	bne.n	8002c2c <menu+0x18c4>
 8002c00:	4b56      	ldr	r3, [pc, #344]	; (8002d5c <menu+0x19f4>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	f083 0301 	eor.w	r3, r3, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00e      	beq.n	8002c2c <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002c0e:	4b50      	ldr	r3, [pc, #320]	; (8002d50 <menu+0x19e8>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	3301      	adds	r3, #1
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	4b4e      	ldr	r3, [pc, #312]	; (8002d50 <menu+0x19e8>)
 8002c18:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002c1a:	4b4d      	ldr	r3, [pc, #308]	; (8002d50 <menu+0x19e8>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d902      	bls.n	8002c28 <menu+0x18c0>
				kapitablaTip = 0;
 8002c22:	4b4b      	ldr	r3, [pc, #300]	; (8002d50 <menu+0x19e8>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c28:	f001 ff48 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c2c:	2104      	movs	r1, #4
 8002c2e:	484a      	ldr	r0, [pc, #296]	; (8002d58 <menu+0x19f0>)
 8002c30:	f006 fbe0 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d115      	bne.n	8002c66 <menu+0x18fe>
 8002c3a:	4b48      	ldr	r3, [pc, #288]	; (8002d5c <menu+0x19f4>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	f083 0301 	eor.w	r3, r3, #1
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00e      	beq.n	8002c66 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002c48:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <menu+0x19e8>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	4b3f      	ldr	r3, [pc, #252]	; (8002d50 <menu+0x19e8>)
 8002c52:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002c54:	4b3e      	ldr	r3, [pc, #248]	; (8002d50 <menu+0x19e8>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d902      	bls.n	8002c62 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002c5c:	4b3c      	ldr	r3, [pc, #240]	; (8002d50 <menu+0x19e8>)
 8002c5e:	2202      	movs	r2, #2
 8002c60:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c62:	f001 ff2b 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c66:	2108      	movs	r1, #8
 8002c68:	483b      	ldr	r0, [pc, #236]	; (8002d58 <menu+0x19f0>)
 8002c6a:	f006 fbc3 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d10d      	bne.n	8002c90 <menu+0x1928>
 8002c74:	4b39      	ldr	r3, [pc, #228]	; (8002d5c <menu+0x19f4>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	f083 0301 	eor.w	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d006      	beq.n	8002c90 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002c82:	4b33      	ldr	r3, [pc, #204]	; (8002d50 <menu+0x19e8>)
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	4b36      	ldr	r3, [pc, #216]	; (8002d60 <menu+0x19f8>)
 8002c88:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002c8a:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <menu+0x19fc>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002c90:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <menu+0x1a00>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b0e      	cmp	r3, #14
 8002c96:	f040 80f2 	bne.w	8002e7e <menu+0x1b16>
		if(dilSecim == 0) {
 8002c9a:	4b34      	ldr	r3, [pc, #208]	; (8002d6c <menu+0x1a04>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002ca2:	4a33      	ldr	r2, [pc, #204]	; (8002d70 <menu+0x1a08>)
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f005 f878 	bl	8007d9c <lcd_print>
 8002cac:	e008      	b.n	8002cc0 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002cae:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <menu+0x1a04>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d104      	bne.n	8002cc0 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002cb6:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <menu+0x1a0c>)
 8002cb8:	2101      	movs	r1, #1
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f005 f86e 	bl	8007d9c <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002cc0:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <menu+0x1a10>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d113      	bne.n	8002cf0 <menu+0x1988>
			if(dilSecim == 0){
 8002cc8:	4b28      	ldr	r3, [pc, #160]	; (8002d6c <menu+0x1a04>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002cd0:	4a2a      	ldr	r2, [pc, #168]	; (8002d7c <menu+0x1a14>)
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	f005 f861 	bl	8007d9c <lcd_print>
 8002cda:	e071      	b.n	8002dc0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002cdc:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <menu+0x1a04>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d16d      	bne.n	8002dc0 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002ce4:	4a26      	ldr	r2, [pc, #152]	; (8002d80 <menu+0x1a18>)
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	2002      	movs	r0, #2
 8002cea:	f005 f857 	bl	8007d9c <lcd_print>
 8002cee:	e067      	b.n	8002dc0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <menu+0x1a10>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d112      	bne.n	8002d1e <menu+0x19b6>
			if(dilSecim == 0){
 8002cf8:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <menu+0x1a04>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d104      	bne.n	8002d0a <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002d00:	4a20      	ldr	r2, [pc, #128]	; (8002d84 <menu+0x1a1c>)
 8002d02:	2101      	movs	r1, #1
 8002d04:	2002      	movs	r0, #2
 8002d06:	f005 f849 	bl	8007d9c <lcd_print>
			}
			if(dilSecim == 1){
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <menu+0x1a04>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d156      	bne.n	8002dc0 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002d12:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <menu+0x1a20>)
 8002d14:	2101      	movs	r1, #1
 8002d16:	2002      	movs	r0, #2
 8002d18:	f005 f840 	bl	8007d9c <lcd_print>
 8002d1c:	e050      	b.n	8002dc0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <menu+0x1a10>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d136      	bne.n	8002d94 <menu+0x1a2c>
			if(dilSecim == 0){
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <menu+0x1a04>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d105      	bne.n	8002d3a <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002d2e:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <menu+0x1a24>)
 8002d30:	2101      	movs	r1, #1
 8002d32:	2002      	movs	r0, #2
 8002d34:	f005 f832 	bl	8007d9c <lcd_print>
 8002d38:	e042      	b.n	8002dc0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <menu+0x1a04>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d13e      	bne.n	8002dc0 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002d42:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <menu+0x1a28>)
 8002d44:	2101      	movs	r1, #1
 8002d46:	2002      	movs	r0, #2
 8002d48:	f005 f828 	bl	8007d9c <lcd_print>
 8002d4c:	e038      	b.n	8002dc0 <menu+0x1a58>
 8002d4e:	bf00      	nop
 8002d50:	2000022f 	.word	0x2000022f
 8002d54:	0800d5d8 	.word	0x0800d5d8
 8002d58:	40010800 	.word	0x40010800
 8002d5c:	20000253 	.word	0x20000253
 8002d60:	20000128 	.word	0x20000128
 8002d64:	20000250 	.word	0x20000250
 8002d68:	20000224 	.word	0x20000224
 8002d6c:	20000245 	.word	0x20000245
 8002d70:	0800d6a8 	.word	0x0800d6a8
 8002d74:	0800d6bc 	.word	0x0800d6bc
 8002d78:	20000231 	.word	0x20000231
 8002d7c:	0800d6d0 	.word	0x0800d6d0
 8002d80:	0800d6e0 	.word	0x0800d6e0
 8002d84:	0800d6f0 	.word	0x0800d6f0
 8002d88:	0800d700 	.word	0x0800d700
 8002d8c:	0800d710 	.word	0x0800d710
 8002d90:	0800d724 	.word	0x0800d724
			}
		} else if(kapiTablaAcKonum == 3) {
 8002d94:	4b9b      	ldr	r3, [pc, #620]	; (8003004 <menu+0x1c9c>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d111      	bne.n	8002dc0 <menu+0x1a58>
			if(dilSecim == 0) {
 8002d9c:	4b9a      	ldr	r3, [pc, #616]	; (8003008 <menu+0x1ca0>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d104      	bne.n	8002dae <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002da4:	4a99      	ldr	r2, [pc, #612]	; (800300c <menu+0x1ca4>)
 8002da6:	2101      	movs	r1, #1
 8002da8:	2002      	movs	r0, #2
 8002daa:	f004 fff7 	bl	8007d9c <lcd_print>
			}
			if(dilSecim == 1) {
 8002dae:	4b96      	ldr	r3, [pc, #600]	; (8003008 <menu+0x1ca0>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d104      	bne.n	8002dc0 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002db6:	4a96      	ldr	r2, [pc, #600]	; (8003010 <menu+0x1ca8>)
 8002db8:	2101      	movs	r1, #1
 8002dba:	2002      	movs	r0, #2
 8002dbc:	f004 ffee 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	4894      	ldr	r0, [pc, #592]	; (8003014 <menu+0x1cac>)
 8002dc4:	f006 fb16 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d115      	bne.n	8002dfa <menu+0x1a92>
 8002dce:	4b92      	ldr	r3, [pc, #584]	; (8003018 <menu+0x1cb0>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	f083 0301 	eor.w	r3, r3, #1
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00e      	beq.n	8002dfa <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002ddc:	4b89      	ldr	r3, [pc, #548]	; (8003004 <menu+0x1c9c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	4b87      	ldr	r3, [pc, #540]	; (8003004 <menu+0x1c9c>)
 8002de6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002de8:	4b86      	ldr	r3, [pc, #536]	; (8003004 <menu+0x1c9c>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d902      	bls.n	8002df6 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002df0:	4b84      	ldr	r3, [pc, #528]	; (8003004 <menu+0x1c9c>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002df6:	f001 fe61 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dfa:	2104      	movs	r1, #4
 8002dfc:	4885      	ldr	r0, [pc, #532]	; (8003014 <menu+0x1cac>)
 8002dfe:	f006 faf9 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d115      	bne.n	8002e34 <menu+0x1acc>
 8002e08:	4b83      	ldr	r3, [pc, #524]	; (8003018 <menu+0x1cb0>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	f083 0301 	eor.w	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00e      	beq.n	8002e34 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002e16:	4b7b      	ldr	r3, [pc, #492]	; (8003004 <menu+0x1c9c>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4b79      	ldr	r3, [pc, #484]	; (8003004 <menu+0x1c9c>)
 8002e20:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002e22:	4b78      	ldr	r3, [pc, #480]	; (8003004 <menu+0x1c9c>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d902      	bls.n	8002e30 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002e2a:	4b76      	ldr	r3, [pc, #472]	; (8003004 <menu+0x1c9c>)
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e30:	f001 fe44 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e34:	2108      	movs	r1, #8
 8002e36:	4877      	ldr	r0, [pc, #476]	; (8003014 <menu+0x1cac>)
 8002e38:	f006 fadc 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d11d      	bne.n	8002e7e <menu+0x1b16>
 8002e42:	4b75      	ldr	r3, [pc, #468]	; (8003018 <menu+0x1cb0>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	f083 0301 	eor.w	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d016      	beq.n	8002e7e <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002e50:	4b6c      	ldr	r3, [pc, #432]	; (8003004 <menu+0x1c9c>)
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	4b71      	ldr	r3, [pc, #452]	; (800301c <menu+0x1cb4>)
 8002e56:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002e5a:	4b6a      	ldr	r3, [pc, #424]	; (8003004 <menu+0x1c9c>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <menu+0x1b02>
 8002e62:	4b68      	ldr	r3, [pc, #416]	; (8003004 <menu+0x1c9c>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d106      	bne.n	8002e78 <menu+0x1b10>
				altLimit = 1;
 8002e6a:	4b6d      	ldr	r3, [pc, #436]	; (8003020 <menu+0x1cb8>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002e70:	4b6b      	ldr	r3, [pc, #428]	; (8003020 <menu+0x1cb8>)
 8002e72:	781a      	ldrb	r2, [r3, #0]
 8002e74:	4b69      	ldr	r3, [pc, #420]	; (800301c <menu+0x1cb4>)
 8002e76:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <menu+0x1cbc>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002e7e:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <menu+0x1cc0>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b0f      	cmp	r3, #15
 8002e84:	d17f      	bne.n	8002f86 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002e86:	4b60      	ldr	r3, [pc, #384]	; (8003008 <menu+0x1ca0>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002e8e:	4a67      	ldr	r2, [pc, #412]	; (800302c <menu+0x1cc4>)
 8002e90:	2101      	movs	r1, #1
 8002e92:	2001      	movs	r0, #1
 8002e94:	f004 ff82 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002e98:	4a65      	ldr	r2, [pc, #404]	; (8003030 <menu+0x1cc8>)
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	f004 ff7d 	bl	8007d9c <lcd_print>
 8002ea2:	e00d      	b.n	8002ec0 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002ea4:	4b58      	ldr	r3, [pc, #352]	; (8003008 <menu+0x1ca0>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d109      	bne.n	8002ec0 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002eac:	4a61      	ldr	r2, [pc, #388]	; (8003034 <menu+0x1ccc>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f004 ff73 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002eb6:	4a60      	ldr	r2, [pc, #384]	; (8003038 <menu+0x1cd0>)
 8002eb8:	2101      	movs	r1, #1
 8002eba:	2002      	movs	r0, #2
 8002ebc:	f004 ff6e 	bl	8007d9c <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002ec0:	4b5e      	ldr	r3, [pc, #376]	; (800303c <menu+0x1cd4>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	220a      	movs	r2, #10
 8002ec6:	495e      	ldr	r1, [pc, #376]	; (8003040 <menu+0x1cd8>)
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f009 fabf 	bl	800c44c <itoa>
		lcd_print(2,16,snum);
 8002ece:	4a5c      	ldr	r2, [pc, #368]	; (8003040 <menu+0x1cd8>)
 8002ed0:	2110      	movs	r1, #16
 8002ed2:	2002      	movs	r0, #2
 8002ed4:	f004 ff62 	bl	8007d9c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002ed8:	2102      	movs	r1, #2
 8002eda:	484e      	ldr	r0, [pc, #312]	; (8003014 <menu+0x1cac>)
 8002edc:	f006 fa8a 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d119      	bne.n	8002f1a <menu+0x1bb2>
 8002ee6:	4b4c      	ldr	r3, [pc, #304]	; (8003018 <menu+0x1cb0>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	f083 0301 	eor.w	r3, r3, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d012      	beq.n	8002f1a <menu+0x1bb2>
 8002ef4:	4b53      	ldr	r3, [pc, #332]	; (8003044 <menu+0x1cdc>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10e      	bne.n	8002f1a <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002efc:	4b4f      	ldr	r3, [pc, #316]	; (800303c <menu+0x1cd4>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	4b4d      	ldr	r3, [pc, #308]	; (800303c <menu+0x1cd4>)
 8002f06:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002f08:	4b4c      	ldr	r3, [pc, #304]	; (800303c <menu+0x1cd4>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d902      	bls.n	8002f16 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002f10:	4b4a      	ldr	r3, [pc, #296]	; (800303c <menu+0x1cd4>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f16:	f001 fdd1 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f1a:	2104      	movs	r1, #4
 8002f1c:	483d      	ldr	r0, [pc, #244]	; (8003014 <menu+0x1cac>)
 8002f1e:	f006 fa69 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d119      	bne.n	8002f5c <menu+0x1bf4>
 8002f28:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <menu+0x1cb0>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	f083 0301 	eor.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d012      	beq.n	8002f5c <menu+0x1bf4>
 8002f36:	4b43      	ldr	r3, [pc, #268]	; (8003044 <menu+0x1cdc>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10e      	bne.n	8002f5c <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002f3e:	4b3f      	ldr	r3, [pc, #252]	; (800303c <menu+0x1cd4>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4b3d      	ldr	r3, [pc, #244]	; (800303c <menu+0x1cd4>)
 8002f48:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002f4a:	4b3c      	ldr	r3, [pc, #240]	; (800303c <menu+0x1cd4>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b06      	cmp	r3, #6
 8002f50:	d902      	bls.n	8002f58 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002f52:	4b3a      	ldr	r3, [pc, #232]	; (800303c <menu+0x1cd4>)
 8002f54:	2205      	movs	r2, #5
 8002f56:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002f58:	f001 fdb0 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f5c:	2108      	movs	r1, #8
 8002f5e:	482d      	ldr	r0, [pc, #180]	; (8003014 <menu+0x1cac>)
 8002f60:	f006 fa48 	bl	80093f4 <HAL_GPIO_ReadPin>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10d      	bne.n	8002f86 <menu+0x1c1e>
 8002f6a:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <menu+0x1cb0>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	f083 0301 	eor.w	r3, r3, #1
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d006      	beq.n	8002f86 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002f78:	4b30      	ldr	r3, [pc, #192]	; (800303c <menu+0x1cd4>)
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	4b27      	ldr	r3, [pc, #156]	; (800301c <menu+0x1cb4>)
 8002f7e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002f80:	4b28      	ldr	r3, [pc, #160]	; (8003024 <menu+0x1cbc>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002f86:	4b28      	ldr	r3, [pc, #160]	; (8003028 <menu+0x1cc0>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	f040 80bc 	bne.w	8003108 <menu+0x1da0>
		if(dilSecim == 0) {
 8002f90:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <menu+0x1ca0>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002f98:	4a2b      	ldr	r2, [pc, #172]	; (8003048 <menu+0x1ce0>)
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	f004 fefd 	bl	8007d9c <lcd_print>
 8002fa2:	e008      	b.n	8002fb6 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002fa4:	4b18      	ldr	r3, [pc, #96]	; (8003008 <menu+0x1ca0>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d104      	bne.n	8002fb6 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002fac:	4a27      	ldr	r2, [pc, #156]	; (800304c <menu+0x1ce4>)
 8002fae:	2101      	movs	r1, #1
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	f004 fef3 	bl	8007d9c <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002fb6:	4b26      	ldr	r3, [pc, #152]	; (8003050 <menu+0x1ce8>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d113      	bne.n	8002fe6 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002fbe:	4b12      	ldr	r3, [pc, #72]	; (8003008 <menu+0x1ca0>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d105      	bne.n	8002fd2 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002fc6:	4a11      	ldr	r2, [pc, #68]	; (800300c <menu+0x1ca4>)
 8002fc8:	2101      	movs	r1, #1
 8002fca:	2002      	movs	r0, #2
 8002fcc:	f004 fee6 	bl	8007d9c <lcd_print>
 8002fd0:	e04b      	b.n	800306a <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <menu+0x1ca0>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d147      	bne.n	800306a <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002fda:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <menu+0x1ca8>)
 8002fdc:	2101      	movs	r1, #1
 8002fde:	2002      	movs	r0, #2
 8002fe0:	f004 fedc 	bl	8007d9c <lcd_print>
 8002fe4:	e041      	b.n	800306a <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <menu+0x1ce8>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d13d      	bne.n	800306a <menu+0x1d02>
			if(dilSecim == 0) {
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <menu+0x1ca0>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d130      	bne.n	8003058 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002ff6:	4a17      	ldr	r2, [pc, #92]	; (8003054 <menu+0x1cec>)
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	2002      	movs	r0, #2
 8002ffc:	f004 fece 	bl	8007d9c <lcd_print>
 8003000:	e033      	b.n	800306a <menu+0x1d02>
 8003002:	bf00      	nop
 8003004:	20000231 	.word	0x20000231
 8003008:	20000245 	.word	0x20000245
 800300c:	0800d398 	.word	0x0800d398
 8003010:	0800d3ac 	.word	0x0800d3ac
 8003014:	40010800 	.word	0x40010800
 8003018:	20000253 	.word	0x20000253
 800301c:	20000128 	.word	0x20000128
 8003020:	2000022a 	.word	0x2000022a
 8003024:	20000250 	.word	0x20000250
 8003028:	20000224 	.word	0x20000224
 800302c:	0800d738 	.word	0x0800d738
 8003030:	0800d5fc 	.word	0x0800d5fc
 8003034:	0800d74c 	.word	0x0800d74c
 8003038:	0800d620 	.word	0x0800d620
 800303c:	2000023f 	.word	0x2000023f
 8003040:	20000198 	.word	0x20000198
 8003044:	2000022f 	.word	0x2000022f
 8003048:	0800d760 	.word	0x0800d760
 800304c:	0800d774 	.word	0x0800d774
 8003050:	20000232 	.word	0x20000232
 8003054:	0800d3f8 	.word	0x0800d3f8
			} else if(dilSecim == 1) {
 8003058:	4b99      	ldr	r3, [pc, #612]	; (80032c0 <menu+0x1f58>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d104      	bne.n	800306a <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8003060:	4a98      	ldr	r2, [pc, #608]	; (80032c4 <menu+0x1f5c>)
 8003062:	2101      	movs	r1, #1
 8003064:	2002      	movs	r0, #2
 8003066:	f004 fe99 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800306a:	2102      	movs	r1, #2
 800306c:	4896      	ldr	r0, [pc, #600]	; (80032c8 <menu+0x1f60>)
 800306e:	f006 f9c1 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003072:	4603      	mov	r3, r0
 8003074:	2b01      	cmp	r3, #1
 8003076:	d115      	bne.n	80030a4 <menu+0x1d3c>
 8003078:	4b94      	ldr	r3, [pc, #592]	; (80032cc <menu+0x1f64>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	f083 0301 	eor.w	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00e      	beq.n	80030a4 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8003086:	4b92      	ldr	r3, [pc, #584]	; (80032d0 <menu+0x1f68>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4b90      	ldr	r3, [pc, #576]	; (80032d0 <menu+0x1f68>)
 8003090:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8003092:	4b8f      	ldr	r3, [pc, #572]	; (80032d0 <menu+0x1f68>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d902      	bls.n	80030a0 <menu+0x1d38>
				yukariYavasLimit = 0;
 800309a:	4b8d      	ldr	r3, [pc, #564]	; (80032d0 <menu+0x1f68>)
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030a0:	f001 fd0c 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030a4:	2104      	movs	r1, #4
 80030a6:	4888      	ldr	r0, [pc, #544]	; (80032c8 <menu+0x1f60>)
 80030a8:	f006 f9a4 	bl	80093f4 <HAL_GPIO_ReadPin>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d115      	bne.n	80030de <menu+0x1d76>
 80030b2:	4b86      	ldr	r3, [pc, #536]	; (80032cc <menu+0x1f64>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	f083 0301 	eor.w	r3, r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00e      	beq.n	80030de <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80030c0:	4b83      	ldr	r3, [pc, #524]	; (80032d0 <menu+0x1f68>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	4b81      	ldr	r3, [pc, #516]	; (80032d0 <menu+0x1f68>)
 80030ca:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80030cc:	4b80      	ldr	r3, [pc, #512]	; (80032d0 <menu+0x1f68>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80030d4:	4b7e      	ldr	r3, [pc, #504]	; (80032d0 <menu+0x1f68>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030da:	f001 fcef 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030de:	2108      	movs	r1, #8
 80030e0:	4879      	ldr	r0, [pc, #484]	; (80032c8 <menu+0x1f60>)
 80030e2:	f006 f987 	bl	80093f4 <HAL_GPIO_ReadPin>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d10d      	bne.n	8003108 <menu+0x1da0>
 80030ec:	4b77      	ldr	r3, [pc, #476]	; (80032cc <menu+0x1f64>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	f083 0301 	eor.w	r3, r3, #1
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80030fa:	4b75      	ldr	r3, [pc, #468]	; (80032d0 <menu+0x1f68>)
 80030fc:	781a      	ldrb	r2, [r3, #0]
 80030fe:	4b75      	ldr	r3, [pc, #468]	; (80032d4 <menu+0x1f6c>)
 8003100:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003102:	4b75      	ldr	r3, [pc, #468]	; (80032d8 <menu+0x1f70>)
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003108:	4b74      	ldr	r3, [pc, #464]	; (80032dc <menu+0x1f74>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b11      	cmp	r3, #17
 800310e:	f040 80c3 	bne.w	8003298 <menu+0x1f30>
		if(dilSecim == 0) {
 8003112:	4b6b      	ldr	r3, [pc, #428]	; (80032c0 <menu+0x1f58>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800311a:	4a71      	ldr	r2, [pc, #452]	; (80032e0 <menu+0x1f78>)
 800311c:	2101      	movs	r1, #1
 800311e:	2001      	movs	r0, #1
 8003120:	f004 fe3c 	bl	8007d9c <lcd_print>
 8003124:	e008      	b.n	8003138 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8003126:	4b66      	ldr	r3, [pc, #408]	; (80032c0 <menu+0x1f58>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d104      	bne.n	8003138 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800312e:	4a6d      	ldr	r2, [pc, #436]	; (80032e4 <menu+0x1f7c>)
 8003130:	2101      	movs	r1, #1
 8003132:	2001      	movs	r0, #1
 8003134:	f004 fe32 	bl	8007d9c <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003138:	4b6b      	ldr	r3, [pc, #428]	; (80032e8 <menu+0x1f80>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d113      	bne.n	8003168 <menu+0x1e00>
			if(dilSecim == 0){
 8003140:	4b5f      	ldr	r3, [pc, #380]	; (80032c0 <menu+0x1f58>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003148:	4a68      	ldr	r2, [pc, #416]	; (80032ec <menu+0x1f84>)
 800314a:	2101      	movs	r1, #1
 800314c:	2002      	movs	r0, #2
 800314e:	f004 fe25 	bl	8007d9c <lcd_print>
 8003152:	e038      	b.n	80031c6 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003154:	4b5a      	ldr	r3, [pc, #360]	; (80032c0 <menu+0x1f58>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d134      	bne.n	80031c6 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 800315c:	4a64      	ldr	r2, [pc, #400]	; (80032f0 <menu+0x1f88>)
 800315e:	2101      	movs	r1, #1
 8003160:	2002      	movs	r0, #2
 8003162:	f004 fe1b 	bl	8007d9c <lcd_print>
 8003166:	e02e      	b.n	80031c6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003168:	4b5f      	ldr	r3, [pc, #380]	; (80032e8 <menu+0x1f80>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d113      	bne.n	8003198 <menu+0x1e30>
			if(dilSecim == 0){
 8003170:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <menu+0x1f58>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003178:	4a5e      	ldr	r2, [pc, #376]	; (80032f4 <menu+0x1f8c>)
 800317a:	2101      	movs	r1, #1
 800317c:	2002      	movs	r0, #2
 800317e:	f004 fe0d 	bl	8007d9c <lcd_print>
 8003182:	e020      	b.n	80031c6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003184:	4b4e      	ldr	r3, [pc, #312]	; (80032c0 <menu+0x1f58>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d11c      	bne.n	80031c6 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 800318c:	4a5a      	ldr	r2, [pc, #360]	; (80032f8 <menu+0x1f90>)
 800318e:	2101      	movs	r1, #1
 8003190:	2002      	movs	r0, #2
 8003192:	f004 fe03 	bl	8007d9c <lcd_print>
 8003196:	e016      	b.n	80031c6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003198:	4b53      	ldr	r3, [pc, #332]	; (80032e8 <menu+0x1f80>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d112      	bne.n	80031c6 <menu+0x1e5e>
			if(dilSecim == 0) {
 80031a0:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <menu+0x1f58>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d105      	bne.n	80031b4 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80031a8:	4a54      	ldr	r2, [pc, #336]	; (80032fc <menu+0x1f94>)
 80031aa:	2101      	movs	r1, #1
 80031ac:	2002      	movs	r0, #2
 80031ae:	f004 fdf5 	bl	8007d9c <lcd_print>
 80031b2:	e008      	b.n	80031c6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80031b4:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <menu+0x1f58>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d104      	bne.n	80031c6 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80031bc:	4a50      	ldr	r2, [pc, #320]	; (8003300 <menu+0x1f98>)
 80031be:	2101      	movs	r1, #1
 80031c0:	2002      	movs	r0, #2
 80031c2:	f004 fdeb 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031c6:	2102      	movs	r1, #2
 80031c8:	483f      	ldr	r0, [pc, #252]	; (80032c8 <menu+0x1f60>)
 80031ca:	f006 f913 	bl	80093f4 <HAL_GPIO_ReadPin>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d115      	bne.n	8003200 <menu+0x1e98>
 80031d4:	4b3d      	ldr	r3, [pc, #244]	; (80032cc <menu+0x1f64>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	f083 0301 	eor.w	r3, r3, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00e      	beq.n	8003200 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80031e2:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <menu+0x1f80>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	3301      	adds	r3, #1
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <menu+0x1f80>)
 80031ec:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80031ee:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <menu+0x1f80>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d902      	bls.n	80031fc <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80031f6:	4b3c      	ldr	r3, [pc, #240]	; (80032e8 <menu+0x1f80>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031fc:	f001 fc5e 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003200:	2104      	movs	r1, #4
 8003202:	4831      	ldr	r0, [pc, #196]	; (80032c8 <menu+0x1f60>)
 8003204:	f006 f8f6 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003208:	4603      	mov	r3, r0
 800320a:	2b01      	cmp	r3, #1
 800320c:	d115      	bne.n	800323a <menu+0x1ed2>
 800320e:	4b2f      	ldr	r3, [pc, #188]	; (80032cc <menu+0x1f64>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	f083 0301 	eor.w	r3, r3, #1
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00e      	beq.n	800323a <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800321c:	4b32      	ldr	r3, [pc, #200]	; (80032e8 <menu+0x1f80>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	3b01      	subs	r3, #1
 8003222:	b2da      	uxtb	r2, r3
 8003224:	4b30      	ldr	r3, [pc, #192]	; (80032e8 <menu+0x1f80>)
 8003226:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003228:	4b2f      	ldr	r3, [pc, #188]	; (80032e8 <menu+0x1f80>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d902      	bls.n	8003236 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003230:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <menu+0x1f80>)
 8003232:	2202      	movs	r2, #2
 8003234:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003236:	f001 fc41 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800323a:	2108      	movs	r1, #8
 800323c:	4822      	ldr	r0, [pc, #136]	; (80032c8 <menu+0x1f60>)
 800323e:	f006 f8d9 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003242:	4603      	mov	r3, r0
 8003244:	2b01      	cmp	r3, #1
 8003246:	d127      	bne.n	8003298 <menu+0x1f30>
 8003248:	4b20      	ldr	r3, [pc, #128]	; (80032cc <menu+0x1f64>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	f083 0301 	eor.w	r3, r3, #1
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d020      	beq.n	8003298 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <menu+0x1f80>)
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	4b1e      	ldr	r3, [pc, #120]	; (80032d4 <menu+0x1f6c>)
 800325c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800325e:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <menu+0x1f80>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d003      	beq.n	800326e <menu+0x1f06>
 8003266:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <menu+0x1f80>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d106      	bne.n	800327c <menu+0x1f14>
				calismaSekli = 0;
 800326e:	4b25      	ldr	r3, [pc, #148]	; (8003304 <menu+0x1f9c>)
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003274:	4b23      	ldr	r3, [pc, #140]	; (8003304 <menu+0x1f9c>)
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <menu+0x1f6c>)
 800327a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 800327c:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <menu+0x1f80>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d106      	bne.n	8003292 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003284:	4b20      	ldr	r3, [pc, #128]	; (8003308 <menu+0x1fa0>)
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800328a:	4b1f      	ldr	r3, [pc, #124]	; (8003308 <menu+0x1fa0>)
 800328c:	781a      	ldrb	r2, [r3, #0]
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <menu+0x1f6c>)
 8003290:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <menu+0x1f70>)
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <menu+0x1f74>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b12      	cmp	r3, #18
 800329e:	f040 80d5 	bne.w	800344c <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <menu+0x1f80>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d13c      	bne.n	8003324 <menu+0x1fbc>
			if(dilSecim == 0) {
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <menu+0x1f58>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d12e      	bne.n	8003310 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80032b2:	4a16      	ldr	r2, [pc, #88]	; (800330c <menu+0x1fa4>)
 80032b4:	2101      	movs	r1, #1
 80032b6:	2001      	movs	r0, #1
 80032b8:	f004 fd70 	bl	8007d9c <lcd_print>
 80032bc:	e048      	b.n	8003350 <menu+0x1fe8>
 80032be:	bf00      	nop
 80032c0:	20000245 	.word	0x20000245
 80032c4:	0800d40c 	.word	0x0800d40c
 80032c8:	40010800 	.word	0x40010800
 80032cc:	20000253 	.word	0x20000253
 80032d0:	20000232 	.word	0x20000232
 80032d4:	20000128 	.word	0x20000128
 80032d8:	20000250 	.word	0x20000250
 80032dc:	20000224 	.word	0x20000224
 80032e0:	0800d788 	.word	0x0800d788
 80032e4:	0800d79c 	.word	0x0800d79c
 80032e8:	20000233 	.word	0x20000233
 80032ec:	0800d7b0 	.word	0x0800d7b0
 80032f0:	0800d7c0 	.word	0x0800d7c0
 80032f4:	0800d7d0 	.word	0x0800d7d0
 80032f8:	0800d7e0 	.word	0x0800d7e0
 80032fc:	0800d398 	.word	0x0800d398
 8003300:	0800d3ac 	.word	0x0800d3ac
 8003304:	20000225 	.word	0x20000225
 8003308:	20000236 	.word	0x20000236
 800330c:	0800d7f0 	.word	0x0800d7f0
			} else if(dilSecim == 1) {
 8003310:	4b7b      	ldr	r3, [pc, #492]	; (8003500 <menu+0x2198>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d11b      	bne.n	8003350 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003318:	4a7a      	ldr	r2, [pc, #488]	; (8003504 <menu+0x219c>)
 800331a:	2101      	movs	r1, #1
 800331c:	2001      	movs	r0, #1
 800331e:	f004 fd3d 	bl	8007d9c <lcd_print>
 8003322:	e015      	b.n	8003350 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003324:	4b78      	ldr	r3, [pc, #480]	; (8003508 <menu+0x21a0>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d111      	bne.n	8003350 <menu+0x1fe8>
			if(dilSecim == 0){
 800332c:	4b74      	ldr	r3, [pc, #464]	; (8003500 <menu+0x2198>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d104      	bne.n	800333e <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003334:	4a75      	ldr	r2, [pc, #468]	; (800350c <menu+0x21a4>)
 8003336:	2101      	movs	r1, #1
 8003338:	2001      	movs	r0, #1
 800333a:	f004 fd2f 	bl	8007d9c <lcd_print>
			}
			if(dilSecim == 1){
 800333e:	4b70      	ldr	r3, [pc, #448]	; (8003500 <menu+0x2198>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d104      	bne.n	8003350 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003346:	4a72      	ldr	r2, [pc, #456]	; (8003510 <menu+0x21a8>)
 8003348:	2101      	movs	r1, #1
 800334a:	2001      	movs	r0, #1
 800334c:	f004 fd26 	bl	8007d9c <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003350:	4b70      	ldr	r3, [pc, #448]	; (8003514 <menu+0x21ac>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d113      	bne.n	8003380 <menu+0x2018>
			if(dilSecim == 0) {
 8003358:	4b69      	ldr	r3, [pc, #420]	; (8003500 <menu+0x2198>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003360:	4a6d      	ldr	r2, [pc, #436]	; (8003518 <menu+0x21b0>)
 8003362:	2101      	movs	r1, #1
 8003364:	2002      	movs	r0, #2
 8003366:	f004 fd19 	bl	8007d9c <lcd_print>
 800336a:	e020      	b.n	80033ae <menu+0x2046>
			} else if(dilSecim == 1){
 800336c:	4b64      	ldr	r3, [pc, #400]	; (8003500 <menu+0x2198>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d11c      	bne.n	80033ae <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003374:	4a69      	ldr	r2, [pc, #420]	; (800351c <menu+0x21b4>)
 8003376:	2101      	movs	r1, #1
 8003378:	2002      	movs	r0, #2
 800337a:	f004 fd0f 	bl	8007d9c <lcd_print>
 800337e:	e016      	b.n	80033ae <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003380:	4b64      	ldr	r3, [pc, #400]	; (8003514 <menu+0x21ac>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d112      	bne.n	80033ae <menu+0x2046>
			if(dilSecim == 0){
 8003388:	4b5d      	ldr	r3, [pc, #372]	; (8003500 <menu+0x2198>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d105      	bne.n	800339c <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003390:	4a63      	ldr	r2, [pc, #396]	; (8003520 <menu+0x21b8>)
 8003392:	2101      	movs	r1, #1
 8003394:	2002      	movs	r0, #2
 8003396:	f004 fd01 	bl	8007d9c <lcd_print>
 800339a:	e008      	b.n	80033ae <menu+0x2046>
			} else if(dilSecim == 1){
 800339c:	4b58      	ldr	r3, [pc, #352]	; (8003500 <menu+0x2198>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d104      	bne.n	80033ae <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80033a4:	4a5f      	ldr	r2, [pc, #380]	; (8003524 <menu+0x21bc>)
 80033a6:	2101      	movs	r1, #1
 80033a8:	2002      	movs	r0, #2
 80033aa:	f004 fcf7 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ae:	2102      	movs	r1, #2
 80033b0:	485d      	ldr	r0, [pc, #372]	; (8003528 <menu+0x21c0>)
 80033b2:	f006 f81f 	bl	80093f4 <HAL_GPIO_ReadPin>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d115      	bne.n	80033e8 <menu+0x2080>
 80033bc:	4b5b      	ldr	r3, [pc, #364]	; (800352c <menu+0x21c4>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	f083 0301 	eor.w	r3, r3, #1
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00e      	beq.n	80033e8 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80033ca:	4b52      	ldr	r3, [pc, #328]	; (8003514 <menu+0x21ac>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4b50      	ldr	r3, [pc, #320]	; (8003514 <menu+0x21ac>)
 80033d4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80033d6:	4b4f      	ldr	r3, [pc, #316]	; (8003514 <menu+0x21ac>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d902      	bls.n	80033e4 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80033de:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <menu+0x21ac>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033e4:	f001 fb6a 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033e8:	2104      	movs	r1, #4
 80033ea:	484f      	ldr	r0, [pc, #316]	; (8003528 <menu+0x21c0>)
 80033ec:	f006 f802 	bl	80093f4 <HAL_GPIO_ReadPin>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d115      	bne.n	8003422 <menu+0x20ba>
 80033f6:	4b4d      	ldr	r3, [pc, #308]	; (800352c <menu+0x21c4>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	f083 0301 	eor.w	r3, r3, #1
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003404:	4b43      	ldr	r3, [pc, #268]	; (8003514 <menu+0x21ac>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	b2da      	uxtb	r2, r3
 800340c:	4b41      	ldr	r3, [pc, #260]	; (8003514 <menu+0x21ac>)
 800340e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003410:	4b40      	ldr	r3, [pc, #256]	; (8003514 <menu+0x21ac>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003418:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <menu+0x21ac>)
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800341e:	f001 fb4d 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003422:	2108      	movs	r1, #8
 8003424:	4840      	ldr	r0, [pc, #256]	; (8003528 <menu+0x21c0>)
 8003426:	f005 ffe5 	bl	80093f4 <HAL_GPIO_ReadPin>
 800342a:	4603      	mov	r3, r0
 800342c:	2b01      	cmp	r3, #1
 800342e:	d10d      	bne.n	800344c <menu+0x20e4>
 8003430:	4b3e      	ldr	r3, [pc, #248]	; (800352c <menu+0x21c4>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	f083 0301 	eor.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800343e:	4b35      	ldr	r3, [pc, #212]	; (8003514 <menu+0x21ac>)
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	4b3b      	ldr	r3, [pc, #236]	; (8003530 <menu+0x21c8>)
 8003444:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003446:	4b3b      	ldr	r3, [pc, #236]	; (8003534 <menu+0x21cc>)
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800344c:	4b3a      	ldr	r3, [pc, #232]	; (8003538 <menu+0x21d0>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b13      	cmp	r3, #19
 8003452:	f040 80d5 	bne.w	8003600 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003456:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <menu+0x21a0>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d113      	bne.n	8003486 <menu+0x211e>
			if(dilSecim == 0) {
 800345e:	4b28      	ldr	r3, [pc, #160]	; (8003500 <menu+0x2198>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d105      	bne.n	8003472 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003466:	4a35      	ldr	r2, [pc, #212]	; (800353c <menu+0x21d4>)
 8003468:	2101      	movs	r1, #1
 800346a:	2001      	movs	r0, #1
 800346c:	f004 fc96 	bl	8007d9c <lcd_print>
 8003470:	e01f      	b.n	80034b2 <menu+0x214a>
			} else if(dilSecim == 1) {
 8003472:	4b23      	ldr	r3, [pc, #140]	; (8003500 <menu+0x2198>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d11b      	bne.n	80034b2 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800347a:	4a31      	ldr	r2, [pc, #196]	; (8003540 <menu+0x21d8>)
 800347c:	2101      	movs	r1, #1
 800347e:	2001      	movs	r0, #1
 8003480:	f004 fc8c 	bl	8007d9c <lcd_print>
 8003484:	e015      	b.n	80034b2 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <menu+0x21a0>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d111      	bne.n	80034b2 <menu+0x214a>
			if(dilSecim == 0) {
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <menu+0x2198>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003496:	4a2b      	ldr	r2, [pc, #172]	; (8003544 <menu+0x21dc>)
 8003498:	2101      	movs	r1, #1
 800349a:	2001      	movs	r0, #1
 800349c:	f004 fc7e 	bl	8007d9c <lcd_print>
			}
			if(dilSecim == 1) {
 80034a0:	4b17      	ldr	r3, [pc, #92]	; (8003500 <menu+0x2198>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d104      	bne.n	80034b2 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80034a8:	4a27      	ldr	r2, [pc, #156]	; (8003548 <menu+0x21e0>)
 80034aa:	2101      	movs	r1, #1
 80034ac:	2001      	movs	r0, #1
 80034ae:	f004 fc75 	bl	8007d9c <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80034b2:	4b26      	ldr	r3, [pc, #152]	; (800354c <menu+0x21e4>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d113      	bne.n	80034e2 <menu+0x217a>
			if(dilSecim == 0) {
 80034ba:	4b11      	ldr	r3, [pc, #68]	; (8003500 <menu+0x2198>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d105      	bne.n	80034ce <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80034c2:	4a15      	ldr	r2, [pc, #84]	; (8003518 <menu+0x21b0>)
 80034c4:	2101      	movs	r1, #1
 80034c6:	2002      	movs	r0, #2
 80034c8:	f004 fc68 	bl	8007d9c <lcd_print>
 80034cc:	e049      	b.n	8003562 <menu+0x21fa>
			} else if(dilSecim == 1) {
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <menu+0x2198>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d145      	bne.n	8003562 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80034d6:	4a11      	ldr	r2, [pc, #68]	; (800351c <menu+0x21b4>)
 80034d8:	2101      	movs	r1, #1
 80034da:	2002      	movs	r0, #2
 80034dc:	f004 fc5e 	bl	8007d9c <lcd_print>
 80034e0:	e03f      	b.n	8003562 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80034e2:	4b1a      	ldr	r3, [pc, #104]	; (800354c <menu+0x21e4>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d13b      	bne.n	8003562 <menu+0x21fa>
			if(dilSecim == 0) {
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <menu+0x2198>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d12e      	bne.n	8003550 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80034f2:	4a0b      	ldr	r2, [pc, #44]	; (8003520 <menu+0x21b8>)
 80034f4:	2101      	movs	r1, #1
 80034f6:	2002      	movs	r0, #2
 80034f8:	f004 fc50 	bl	8007d9c <lcd_print>
 80034fc:	e031      	b.n	8003562 <menu+0x21fa>
 80034fe:	bf00      	nop
 8003500:	20000245 	.word	0x20000245
 8003504:	0800d804 	.word	0x0800d804
 8003508:	20000233 	.word	0x20000233
 800350c:	0800d814 	.word	0x0800d814
 8003510:	0800d828 	.word	0x0800d828
 8003514:	20000234 	.word	0x20000234
 8003518:	0800d398 	.word	0x0800d398
 800351c:	0800d3ac 	.word	0x0800d3ac
 8003520:	0800d3f8 	.word	0x0800d3f8
 8003524:	0800d40c 	.word	0x0800d40c
 8003528:	40010800 	.word	0x40010800
 800352c:	20000253 	.word	0x20000253
 8003530:	20000128 	.word	0x20000128
 8003534:	20000250 	.word	0x20000250
 8003538:	20000224 	.word	0x20000224
 800353c:	0800d83c 	.word	0x0800d83c
 8003540:	0800d850 	.word	0x0800d850
 8003544:	0800d864 	.word	0x0800d864
 8003548:	0800d878 	.word	0x0800d878
 800354c:	20000235 	.word	0x20000235
			} else if(dilSecim == 1) {
 8003550:	4b90      	ldr	r3, [pc, #576]	; (8003794 <menu+0x242c>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d104      	bne.n	8003562 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003558:	4a8f      	ldr	r2, [pc, #572]	; (8003798 <menu+0x2430>)
 800355a:	2101      	movs	r1, #1
 800355c:	2002      	movs	r0, #2
 800355e:	f004 fc1d 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003562:	2102      	movs	r1, #2
 8003564:	488d      	ldr	r0, [pc, #564]	; (800379c <menu+0x2434>)
 8003566:	f005 ff45 	bl	80093f4 <HAL_GPIO_ReadPin>
 800356a:	4603      	mov	r3, r0
 800356c:	2b01      	cmp	r3, #1
 800356e:	d115      	bne.n	800359c <menu+0x2234>
 8003570:	4b8b      	ldr	r3, [pc, #556]	; (80037a0 <menu+0x2438>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	f083 0301 	eor.w	r3, r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00e      	beq.n	800359c <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800357e:	4b89      	ldr	r3, [pc, #548]	; (80037a4 <menu+0x243c>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4b87      	ldr	r3, [pc, #540]	; (80037a4 <menu+0x243c>)
 8003588:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800358a:	4b86      	ldr	r3, [pc, #536]	; (80037a4 <menu+0x243c>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d902      	bls.n	8003598 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8003592:	4b84      	ldr	r3, [pc, #528]	; (80037a4 <menu+0x243c>)
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003598:	f001 fa90 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800359c:	2104      	movs	r1, #4
 800359e:	487f      	ldr	r0, [pc, #508]	; (800379c <menu+0x2434>)
 80035a0:	f005 ff28 	bl	80093f4 <HAL_GPIO_ReadPin>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d115      	bne.n	80035d6 <menu+0x226e>
 80035aa:	4b7d      	ldr	r3, [pc, #500]	; (80037a0 <menu+0x2438>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	f083 0301 	eor.w	r3, r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00e      	beq.n	80035d6 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80035b8:	4b7a      	ldr	r3, [pc, #488]	; (80037a4 <menu+0x243c>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	3b01      	subs	r3, #1
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	4b78      	ldr	r3, [pc, #480]	; (80037a4 <menu+0x243c>)
 80035c2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80035c4:	4b77      	ldr	r3, [pc, #476]	; (80037a4 <menu+0x243c>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80035cc:	4b75      	ldr	r3, [pc, #468]	; (80037a4 <menu+0x243c>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035d2:	f001 fa73 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035d6:	2108      	movs	r1, #8
 80035d8:	4870      	ldr	r0, [pc, #448]	; (800379c <menu+0x2434>)
 80035da:	f005 ff0b 	bl	80093f4 <HAL_GPIO_ReadPin>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d10d      	bne.n	8003600 <menu+0x2298>
 80035e4:	4b6e      	ldr	r3, [pc, #440]	; (80037a0 <menu+0x2438>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	f083 0301 	eor.w	r3, r3, #1
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 80035f2:	4b6c      	ldr	r3, [pc, #432]	; (80037a4 <menu+0x243c>)
 80035f4:	781a      	ldrb	r2, [r3, #0]
 80035f6:	4b6c      	ldr	r3, [pc, #432]	; (80037a8 <menu+0x2440>)
 80035f8:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80035fa:	4b6c      	ldr	r3, [pc, #432]	; (80037ac <menu+0x2444>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003600:	4b6b      	ldr	r3, [pc, #428]	; (80037b0 <menu+0x2448>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b14      	cmp	r3, #20
 8003606:	f040 80b5 	bne.w	8003774 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800360a:	4b6a      	ldr	r3, [pc, #424]	; (80037b4 <menu+0x244c>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d113      	bne.n	800363a <menu+0x22d2>
			if(dilSecim == 0) {
 8003612:	4b60      	ldr	r3, [pc, #384]	; (8003794 <menu+0x242c>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d105      	bne.n	8003626 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800361a:	4a67      	ldr	r2, [pc, #412]	; (80037b8 <menu+0x2450>)
 800361c:	2101      	movs	r1, #1
 800361e:	2001      	movs	r0, #1
 8003620:	f004 fbbc 	bl	8007d9c <lcd_print>
 8003624:	e020      	b.n	8003668 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003626:	4b5b      	ldr	r3, [pc, #364]	; (8003794 <menu+0x242c>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d11c      	bne.n	8003668 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800362e:	4a63      	ldr	r2, [pc, #396]	; (80037bc <menu+0x2454>)
 8003630:	2101      	movs	r1, #1
 8003632:	2001      	movs	r0, #1
 8003634:	f004 fbb2 	bl	8007d9c <lcd_print>
 8003638:	e016      	b.n	8003668 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800363a:	4b5e      	ldr	r3, [pc, #376]	; (80037b4 <menu+0x244c>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d112      	bne.n	8003668 <menu+0x2300>
			if(dilSecim == 0) {
 8003642:	4b54      	ldr	r3, [pc, #336]	; (8003794 <menu+0x242c>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d105      	bne.n	8003656 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800364a:	4a5d      	ldr	r2, [pc, #372]	; (80037c0 <menu+0x2458>)
 800364c:	2101      	movs	r1, #1
 800364e:	2001      	movs	r0, #1
 8003650:	f004 fba4 	bl	8007d9c <lcd_print>
 8003654:	e008      	b.n	8003668 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003656:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <menu+0x242c>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d104      	bne.n	8003668 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800365e:	4a59      	ldr	r2, [pc, #356]	; (80037c4 <menu+0x245c>)
 8003660:	2101      	movs	r1, #1
 8003662:	2001      	movs	r0, #1
 8003664:	f004 fb9a 	bl	8007d9c <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003668:	4b57      	ldr	r3, [pc, #348]	; (80037c8 <menu+0x2460>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d113      	bne.n	8003698 <menu+0x2330>
			if(dilSecim == 0) {
 8003670:	4b48      	ldr	r3, [pc, #288]	; (8003794 <menu+0x242c>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d105      	bne.n	8003684 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003678:	4a54      	ldr	r2, [pc, #336]	; (80037cc <menu+0x2464>)
 800367a:	2101      	movs	r1, #1
 800367c:	2002      	movs	r0, #2
 800367e:	f004 fb8d 	bl	8007d9c <lcd_print>
 8003682:	e020      	b.n	80036c6 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003684:	4b43      	ldr	r3, [pc, #268]	; (8003794 <menu+0x242c>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d11c      	bne.n	80036c6 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 800368c:	4a50      	ldr	r2, [pc, #320]	; (80037d0 <menu+0x2468>)
 800368e:	2101      	movs	r1, #1
 8003690:	2002      	movs	r0, #2
 8003692:	f004 fb83 	bl	8007d9c <lcd_print>
 8003696:	e016      	b.n	80036c6 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003698:	4b4b      	ldr	r3, [pc, #300]	; (80037c8 <menu+0x2460>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d112      	bne.n	80036c6 <menu+0x235e>
			if(dilSecim == 0) {
 80036a0:	4b3c      	ldr	r3, [pc, #240]	; (8003794 <menu+0x242c>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80036a8:	4a4a      	ldr	r2, [pc, #296]	; (80037d4 <menu+0x246c>)
 80036aa:	2101      	movs	r1, #1
 80036ac:	2002      	movs	r0, #2
 80036ae:	f004 fb75 	bl	8007d9c <lcd_print>
 80036b2:	e008      	b.n	80036c6 <menu+0x235e>
			} else if(dilSecim == 1) {
 80036b4:	4b37      	ldr	r3, [pc, #220]	; (8003794 <menu+0x242c>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d104      	bne.n	80036c6 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80036bc:	4a46      	ldr	r2, [pc, #280]	; (80037d8 <menu+0x2470>)
 80036be:	2101      	movs	r1, #1
 80036c0:	2002      	movs	r0, #2
 80036c2:	f004 fb6b 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80036c6:	2102      	movs	r1, #2
 80036c8:	4834      	ldr	r0, [pc, #208]	; (800379c <menu+0x2434>)
 80036ca:	f005 fe93 	bl	80093f4 <HAL_GPIO_ReadPin>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d119      	bne.n	8003708 <menu+0x23a0>
 80036d4:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <menu+0x2438>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	f083 0301 	eor.w	r3, r3, #1
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d012      	beq.n	8003708 <menu+0x23a0>
 80036e2:	4b34      	ldr	r3, [pc, #208]	; (80037b4 <menu+0x244c>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d10e      	bne.n	8003708 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80036ea:	4b37      	ldr	r3, [pc, #220]	; (80037c8 <menu+0x2460>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	3301      	adds	r3, #1
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	4b35      	ldr	r3, [pc, #212]	; (80037c8 <menu+0x2460>)
 80036f4:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80036f6:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <menu+0x2460>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d902      	bls.n	8003704 <menu+0x239c>
				devirmeSilindirTipi = 0;
 80036fe:	4b32      	ldr	r3, [pc, #200]	; (80037c8 <menu+0x2460>)
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003704:	f001 f9da 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003708:	2104      	movs	r1, #4
 800370a:	4824      	ldr	r0, [pc, #144]	; (800379c <menu+0x2434>)
 800370c:	f005 fe72 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003710:	4603      	mov	r3, r0
 8003712:	2b01      	cmp	r3, #1
 8003714:	d119      	bne.n	800374a <menu+0x23e2>
 8003716:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <menu+0x2438>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	f083 0301 	eor.w	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d012      	beq.n	800374a <menu+0x23e2>
 8003724:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <menu+0x244c>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d10e      	bne.n	800374a <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 800372c:	4b26      	ldr	r3, [pc, #152]	; (80037c8 <menu+0x2460>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	3b01      	subs	r3, #1
 8003732:	b2da      	uxtb	r2, r3
 8003734:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <menu+0x2460>)
 8003736:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003738:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <menu+0x2460>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003740:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <menu+0x2460>)
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003746:	f001 f9b9 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800374a:	2108      	movs	r1, #8
 800374c:	4813      	ldr	r0, [pc, #76]	; (800379c <menu+0x2434>)
 800374e:	f005 fe51 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003752:	4603      	mov	r3, r0
 8003754:	2b01      	cmp	r3, #1
 8003756:	d10d      	bne.n	8003774 <menu+0x240c>
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <menu+0x2438>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	f083 0301 	eor.w	r3, r3, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d006      	beq.n	8003774 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003766:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <menu+0x2460>)
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <menu+0x2440>)
 800376c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800376e:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <menu+0x2444>)
 8003770:	2201      	movs	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <menu+0x2448>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b15      	cmp	r3, #21
 800377a:	f040 80c2 	bne.w	8003902 <menu+0x259a>
		if(dilSecim == 0) {
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <menu+0x242c>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d12c      	bne.n	80037e0 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003786:	4a15      	ldr	r2, [pc, #84]	; (80037dc <menu+0x2474>)
 8003788:	2101      	movs	r1, #1
 800378a:	2001      	movs	r0, #1
 800378c:	f004 fb06 	bl	8007d9c <lcd_print>
 8003790:	e02f      	b.n	80037f2 <menu+0x248a>
 8003792:	bf00      	nop
 8003794:	20000245 	.word	0x20000245
 8003798:	0800d40c 	.word	0x0800d40c
 800379c:	40010800 	.word	0x40010800
 80037a0:	20000253 	.word	0x20000253
 80037a4:	20000235 	.word	0x20000235
 80037a8:	20000128 	.word	0x20000128
 80037ac:	20000250 	.word	0x20000250
 80037b0:	20000224 	.word	0x20000224
 80037b4:	20000233 	.word	0x20000233
 80037b8:	0800d88c 	.word	0x0800d88c
 80037bc:	0800d8a0 	.word	0x0800d8a0
 80037c0:	0800d8b4 	.word	0x0800d8b4
 80037c4:	0800d8c8 	.word	0x0800d8c8
 80037c8:	20000236 	.word	0x20000236
 80037cc:	0800d8dc 	.word	0x0800d8dc
 80037d0:	0800d8f0 	.word	0x0800d8f0
 80037d4:	0800d900 	.word	0x0800d900
 80037d8:	0800d914 	.word	0x0800d914
 80037dc:	0800d924 	.word	0x0800d924
		} else if(dilSecim == 1) {
 80037e0:	4b9c      	ldr	r3, [pc, #624]	; (8003a54 <menu+0x26ec>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d104      	bne.n	80037f2 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80037e8:	4a9b      	ldr	r2, [pc, #620]	; (8003a58 <menu+0x26f0>)
 80037ea:	2101      	movs	r1, #1
 80037ec:	2001      	movs	r0, #1
 80037ee:	f004 fad5 	bl	8007d9c <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80037f2:	4b9a      	ldr	r3, [pc, #616]	; (8003a5c <menu+0x26f4>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d112      	bne.n	8003820 <menu+0x24b8>
			if(dilSecim == 0) {
 80037fa:	4b96      	ldr	r3, [pc, #600]	; (8003a54 <menu+0x26ec>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d104      	bne.n	800380c <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003802:	4a97      	ldr	r2, [pc, #604]	; (8003a60 <menu+0x26f8>)
 8003804:	2101      	movs	r1, #1
 8003806:	2002      	movs	r0, #2
 8003808:	f004 fac8 	bl	8007d9c <lcd_print>
			}
			if(dilSecim == 1) {
 800380c:	4b91      	ldr	r3, [pc, #580]	; (8003a54 <menu+0x26ec>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d11c      	bne.n	800384e <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003814:	4a93      	ldr	r2, [pc, #588]	; (8003a64 <menu+0x26fc>)
 8003816:	2101      	movs	r1, #1
 8003818:	2002      	movs	r0, #2
 800381a:	f004 fabf 	bl	8007d9c <lcd_print>
 800381e:	e016      	b.n	800384e <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003820:	4b8e      	ldr	r3, [pc, #568]	; (8003a5c <menu+0x26f4>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d112      	bne.n	800384e <menu+0x24e6>
			if(dilSecim == 0) {
 8003828:	4b8a      	ldr	r3, [pc, #552]	; (8003a54 <menu+0x26ec>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003830:	4a8d      	ldr	r2, [pc, #564]	; (8003a68 <menu+0x2700>)
 8003832:	2101      	movs	r1, #1
 8003834:	2002      	movs	r0, #2
 8003836:	f004 fab1 	bl	8007d9c <lcd_print>
 800383a:	e008      	b.n	800384e <menu+0x24e6>
			} else if(dilSecim == 1) {
 800383c:	4b85      	ldr	r3, [pc, #532]	; (8003a54 <menu+0x26ec>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d104      	bne.n	800384e <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003844:	4a89      	ldr	r2, [pc, #548]	; (8003a6c <menu+0x2704>)
 8003846:	2101      	movs	r1, #1
 8003848:	2002      	movs	r0, #2
 800384a:	f004 faa7 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800384e:	2102      	movs	r1, #2
 8003850:	4887      	ldr	r0, [pc, #540]	; (8003a70 <menu+0x2708>)
 8003852:	f005 fdcf 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003856:	4603      	mov	r3, r0
 8003858:	2b01      	cmp	r3, #1
 800385a:	d115      	bne.n	8003888 <menu+0x2520>
 800385c:	4b85      	ldr	r3, [pc, #532]	; (8003a74 <menu+0x270c>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	f083 0301 	eor.w	r3, r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00e      	beq.n	8003888 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 800386a:	4b7c      	ldr	r3, [pc, #496]	; (8003a5c <menu+0x26f4>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	3301      	adds	r3, #1
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4b7a      	ldr	r3, [pc, #488]	; (8003a5c <menu+0x26f4>)
 8003874:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003876:	4b79      	ldr	r3, [pc, #484]	; (8003a5c <menu+0x26f4>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d902      	bls.n	8003884 <menu+0x251c>
				platformSilindirTipi = 0;
 800387e:	4b77      	ldr	r3, [pc, #476]	; (8003a5c <menu+0x26f4>)
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003884:	f001 f91a 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003888:	2104      	movs	r1, #4
 800388a:	4879      	ldr	r0, [pc, #484]	; (8003a70 <menu+0x2708>)
 800388c:	f005 fdb2 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003890:	4603      	mov	r3, r0
 8003892:	2b01      	cmp	r3, #1
 8003894:	d115      	bne.n	80038c2 <menu+0x255a>
 8003896:	4b77      	ldr	r3, [pc, #476]	; (8003a74 <menu+0x270c>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	f083 0301 	eor.w	r3, r3, #1
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00e      	beq.n	80038c2 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80038a4:	4b6d      	ldr	r3, [pc, #436]	; (8003a5c <menu+0x26f4>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	4b6b      	ldr	r3, [pc, #428]	; (8003a5c <menu+0x26f4>)
 80038ae:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80038b0:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <menu+0x26f4>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <menu+0x2556>
		   		platformSilindirTipi = 1;
 80038b8:	4b68      	ldr	r3, [pc, #416]	; (8003a5c <menu+0x26f4>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038be:	f001 f8fd 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038c2:	2108      	movs	r1, #8
 80038c4:	486a      	ldr	r0, [pc, #424]	; (8003a70 <menu+0x2708>)
 80038c6:	f005 fd95 	bl	80093f4 <HAL_GPIO_ReadPin>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d118      	bne.n	8003902 <menu+0x259a>
 80038d0:	4b68      	ldr	r3, [pc, #416]	; (8003a74 <menu+0x270c>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	f083 0301 	eor.w	r3, r3, #1
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d011      	beq.n	8003902 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 80038de:	4b5f      	ldr	r3, [pc, #380]	; (8003a5c <menu+0x26f4>)
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	4b65      	ldr	r3, [pc, #404]	; (8003a78 <menu+0x2710>)
 80038e4:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80038e6:	4b5d      	ldr	r3, [pc, #372]	; (8003a5c <menu+0x26f4>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d106      	bne.n	80038fc <menu+0x2594>
				altLimit = 1;
 80038ee:	4b63      	ldr	r3, [pc, #396]	; (8003a7c <menu+0x2714>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80038f4:	4b61      	ldr	r3, [pc, #388]	; (8003a7c <menu+0x2714>)
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	4b5f      	ldr	r3, [pc, #380]	; (8003a78 <menu+0x2710>)
 80038fa:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80038fc:	4b60      	ldr	r3, [pc, #384]	; (8003a80 <menu+0x2718>)
 80038fe:	2201      	movs	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003902:	4b60      	ldr	r3, [pc, #384]	; (8003a84 <menu+0x271c>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b16      	cmp	r3, #22
 8003908:	f040 8081 	bne.w	8003a0e <menu+0x26a6>
		if(dilSecim == 0) {
 800390c:	4b51      	ldr	r3, [pc, #324]	; (8003a54 <menu+0x26ec>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d105      	bne.n	8003920 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003914:	4a5c      	ldr	r2, [pc, #368]	; (8003a88 <menu+0x2720>)
 8003916:	2101      	movs	r1, #1
 8003918:	2001      	movs	r0, #1
 800391a:	f004 fa3f 	bl	8007d9c <lcd_print>
 800391e:	e008      	b.n	8003932 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003920:	4b4c      	ldr	r3, [pc, #304]	; (8003a54 <menu+0x26ec>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d104      	bne.n	8003932 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003928:	4a58      	ldr	r2, [pc, #352]	; (8003a8c <menu+0x2724>)
 800392a:	2101      	movs	r1, #1
 800392c:	2001      	movs	r0, #1
 800392e:	f004 fa35 	bl	8007d9c <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003932:	4b48      	ldr	r3, [pc, #288]	; (8003a54 <menu+0x26ec>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 800393a:	4a55      	ldr	r2, [pc, #340]	; (8003a90 <menu+0x2728>)
 800393c:	2101      	movs	r1, #1
 800393e:	2002      	movs	r0, #2
 8003940:	f004 fa2c 	bl	8007d9c <lcd_print>
 8003944:	e008      	b.n	8003958 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003946:	4b43      	ldr	r3, [pc, #268]	; (8003a54 <menu+0x26ec>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d104      	bne.n	8003958 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 800394e:	4a51      	ldr	r2, [pc, #324]	; (8003a94 <menu+0x272c>)
 8003950:	2101      	movs	r1, #1
 8003952:	2002      	movs	r0, #2
 8003954:	f004 fa22 	bl	8007d9c <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003958:	4b4f      	ldr	r3, [pc, #316]	; (8003a98 <menu+0x2730>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	220a      	movs	r2, #10
 800395e:	494f      	ldr	r1, [pc, #316]	; (8003a9c <menu+0x2734>)
 8003960:	4618      	mov	r0, r3
 8003962:	f008 fd73 	bl	800c44c <itoa>
		lcd_print(2,16,snum);
 8003966:	4a4d      	ldr	r2, [pc, #308]	; (8003a9c <menu+0x2734>)
 8003968:	2110      	movs	r1, #16
 800396a:	2002      	movs	r0, #2
 800396c:	f004 fa16 	bl	8007d9c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003970:	2102      	movs	r1, #2
 8003972:	483f      	ldr	r0, [pc, #252]	; (8003a70 <menu+0x2708>)
 8003974:	f005 fd3e 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003978:	4603      	mov	r3, r0
 800397a:	2b01      	cmp	r3, #1
 800397c:	d115      	bne.n	80039aa <menu+0x2642>
 800397e:	4b3d      	ldr	r3, [pc, #244]	; (8003a74 <menu+0x270c>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	f083 0301 	eor.w	r3, r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 800398c:	4b42      	ldr	r3, [pc, #264]	; (8003a98 <menu+0x2730>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	b2da      	uxtb	r2, r3
 8003994:	4b40      	ldr	r3, [pc, #256]	; (8003a98 <menu+0x2730>)
 8003996:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003998:	4b3f      	ldr	r3, [pc, #252]	; (8003a98 <menu+0x2730>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b05      	cmp	r3, #5
 800399e:	d902      	bls.n	80039a6 <menu+0x263e>
				yukariValfTmr = 0;
 80039a0:	4b3d      	ldr	r3, [pc, #244]	; (8003a98 <menu+0x2730>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039a6:	f001 f889 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039aa:	2104      	movs	r1, #4
 80039ac:	4830      	ldr	r0, [pc, #192]	; (8003a70 <menu+0x2708>)
 80039ae:	f005 fd21 	bl	80093f4 <HAL_GPIO_ReadPin>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d115      	bne.n	80039e4 <menu+0x267c>
 80039b8:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <menu+0x270c>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	f083 0301 	eor.w	r3, r3, #1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00e      	beq.n	80039e4 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 80039c6:	4b34      	ldr	r3, [pc, #208]	; (8003a98 <menu+0x2730>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <menu+0x2730>)
 80039d0:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80039d2:	4b31      	ldr	r3, [pc, #196]	; (8003a98 <menu+0x2730>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d902      	bls.n	80039e0 <menu+0x2678>
		   		yukariValfTmr = 5;
 80039da:	4b2f      	ldr	r3, [pc, #188]	; (8003a98 <menu+0x2730>)
 80039dc:	2205      	movs	r2, #5
 80039de:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039e0:	f001 f86c 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039e4:	2108      	movs	r1, #8
 80039e6:	4822      	ldr	r0, [pc, #136]	; (8003a70 <menu+0x2708>)
 80039e8:	f005 fd04 	bl	80093f4 <HAL_GPIO_ReadPin>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d10d      	bne.n	8003a0e <menu+0x26a6>
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <menu+0x270c>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	f083 0301 	eor.w	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d006      	beq.n	8003a0e <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003a00:	4b25      	ldr	r3, [pc, #148]	; (8003a98 <menu+0x2730>)
 8003a02:	781a      	ldrb	r2, [r3, #0]
 8003a04:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <menu+0x2710>)
 8003a06:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003a08:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <menu+0x2718>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <menu+0x271c>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b17      	cmp	r3, #23
 8003a14:	f040 80ac 	bne.w	8003b70 <menu+0x2808>
		if(dilSecim == 0) {
 8003a18:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <menu+0x26ec>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d105      	bne.n	8003a2c <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003a20:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <menu+0x2738>)
 8003a22:	2101      	movs	r1, #1
 8003a24:	2001      	movs	r0, #1
 8003a26:	f004 f9b9 	bl	8007d9c <lcd_print>
 8003a2a:	e008      	b.n	8003a3e <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <menu+0x26ec>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d104      	bne.n	8003a3e <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003a34:	4a1b      	ldr	r2, [pc, #108]	; (8003aa4 <menu+0x273c>)
 8003a36:	2101      	movs	r1, #1
 8003a38:	2001      	movs	r0, #1
 8003a3a:	f004 f9af 	bl	8007d9c <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <menu+0x26ec>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d130      	bne.n	8003aa8 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <menu+0x2728>)
 8003a48:	2101      	movs	r1, #1
 8003a4a:	2002      	movs	r0, #2
 8003a4c:	f004 f9a6 	bl	8007d9c <lcd_print>
 8003a50:	e033      	b.n	8003aba <menu+0x2752>
 8003a52:	bf00      	nop
 8003a54:	20000245 	.word	0x20000245
 8003a58:	0800d938 	.word	0x0800d938
 8003a5c:	20000237 	.word	0x20000237
 8003a60:	0800d8dc 	.word	0x0800d8dc
 8003a64:	0800d8f0 	.word	0x0800d8f0
 8003a68:	0800d900 	.word	0x0800d900
 8003a6c:	0800d914 	.word	0x0800d914
 8003a70:	40010800 	.word	0x40010800
 8003a74:	20000253 	.word	0x20000253
 8003a78:	20000128 	.word	0x20000128
 8003a7c:	2000022a 	.word	0x2000022a
 8003a80:	20000250 	.word	0x20000250
 8003a84:	20000224 	.word	0x20000224
 8003a88:	0800d948 	.word	0x0800d948
 8003a8c:	0800d95c 	.word	0x0800d95c
 8003a90:	0800d5fc 	.word	0x0800d5fc
 8003a94:	0800d970 	.word	0x0800d970
 8003a98:	20000238 	.word	0x20000238
 8003a9c:	20000198 	.word	0x20000198
 8003aa0:	0800d980 	.word	0x0800d980
 8003aa4:	0800d994 	.word	0x0800d994
			} else if(dilSecim == 1) {
 8003aa8:	4b98      	ldr	r3, [pc, #608]	; (8003d0c <menu+0x29a4>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d104      	bne.n	8003aba <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003ab0:	4a97      	ldr	r2, [pc, #604]	; (8003d10 <menu+0x29a8>)
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	2002      	movs	r0, #2
 8003ab6:	f004 f971 	bl	8007d9c <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003aba:	4b96      	ldr	r3, [pc, #600]	; (8003d14 <menu+0x29ac>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	220a      	movs	r2, #10
 8003ac0:	4995      	ldr	r1, [pc, #596]	; (8003d18 <menu+0x29b0>)
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f008 fcc2 	bl	800c44c <itoa>
		lcd_print(2,16,snum);
 8003ac8:	4a93      	ldr	r2, [pc, #588]	; (8003d18 <menu+0x29b0>)
 8003aca:	2110      	movs	r1, #16
 8003acc:	2002      	movs	r0, #2
 8003ace:	f004 f965 	bl	8007d9c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	4891      	ldr	r0, [pc, #580]	; (8003d1c <menu+0x29b4>)
 8003ad6:	f005 fc8d 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d115      	bne.n	8003b0c <menu+0x27a4>
 8003ae0:	4b8f      	ldr	r3, [pc, #572]	; (8003d20 <menu+0x29b8>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	f083 0301 	eor.w	r3, r3, #1
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00e      	beq.n	8003b0c <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003aee:	4b89      	ldr	r3, [pc, #548]	; (8003d14 <menu+0x29ac>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	3301      	adds	r3, #1
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	4b87      	ldr	r3, [pc, #540]	; (8003d14 <menu+0x29ac>)
 8003af8:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003afa:	4b86      	ldr	r3, [pc, #536]	; (8003d14 <menu+0x29ac>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d902      	bls.n	8003b08 <menu+0x27a0>
				asagiValfTmr = 0;
 8003b02:	4b84      	ldr	r3, [pc, #528]	; (8003d14 <menu+0x29ac>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b08:	f000 ffd8 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b0c:	2104      	movs	r1, #4
 8003b0e:	4883      	ldr	r0, [pc, #524]	; (8003d1c <menu+0x29b4>)
 8003b10:	f005 fc70 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d115      	bne.n	8003b46 <menu+0x27de>
 8003b1a:	4b81      	ldr	r3, [pc, #516]	; (8003d20 <menu+0x29b8>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	f083 0301 	eor.w	r3, r3, #1
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00e      	beq.n	8003b46 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003b28:	4b7a      	ldr	r3, [pc, #488]	; (8003d14 <menu+0x29ac>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	4b78      	ldr	r3, [pc, #480]	; (8003d14 <menu+0x29ac>)
 8003b32:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003b34:	4b77      	ldr	r3, [pc, #476]	; (8003d14 <menu+0x29ac>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b06      	cmp	r3, #6
 8003b3a:	d902      	bls.n	8003b42 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003b3c:	4b75      	ldr	r3, [pc, #468]	; (8003d14 <menu+0x29ac>)
 8003b3e:	2205      	movs	r2, #5
 8003b40:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b42:	f000 ffbb 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b46:	2108      	movs	r1, #8
 8003b48:	4874      	ldr	r0, [pc, #464]	; (8003d1c <menu+0x29b4>)
 8003b4a:	f005 fc53 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d10d      	bne.n	8003b70 <menu+0x2808>
 8003b54:	4b72      	ldr	r3, [pc, #456]	; (8003d20 <menu+0x29b8>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	f083 0301 	eor.w	r3, r3, #1
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d006      	beq.n	8003b70 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003b62:	4b6c      	ldr	r3, [pc, #432]	; (8003d14 <menu+0x29ac>)
 8003b64:	781a      	ldrb	r2, [r3, #0]
 8003b66:	4b6f      	ldr	r3, [pc, #444]	; (8003d24 <menu+0x29bc>)
 8003b68:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003b6a:	4b6f      	ldr	r3, [pc, #444]	; (8003d28 <menu+0x29c0>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003b70:	4b6e      	ldr	r3, [pc, #440]	; (8003d2c <menu+0x29c4>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b18      	cmp	r3, #24
 8003b76:	f040 809d 	bne.w	8003cb4 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003b7a:	4b6d      	ldr	r3, [pc, #436]	; (8003d30 <menu+0x29c8>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d113      	bne.n	8003baa <menu+0x2842>
			if(dilSecim == 0) {
 8003b82:	4b62      	ldr	r3, [pc, #392]	; (8003d0c <menu+0x29a4>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d105      	bne.n	8003b96 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003b8a:	4a6a      	ldr	r2, [pc, #424]	; (8003d34 <menu+0x29cc>)
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f004 f904 	bl	8007d9c <lcd_print>
 8003b94:	e020      	b.n	8003bd8 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003b96:	4b5d      	ldr	r3, [pc, #372]	; (8003d0c <menu+0x29a4>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d11c      	bne.n	8003bd8 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003b9e:	4a66      	ldr	r2, [pc, #408]	; (8003d38 <menu+0x29d0>)
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	f004 f8fa 	bl	8007d9c <lcd_print>
 8003ba8:	e016      	b.n	8003bd8 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003baa:	4b61      	ldr	r3, [pc, #388]	; (8003d30 <menu+0x29c8>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d112      	bne.n	8003bd8 <menu+0x2870>
			if(dilSecim == 0) {
 8003bb2:	4b56      	ldr	r3, [pc, #344]	; (8003d0c <menu+0x29a4>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d105      	bne.n	8003bc6 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003bba:	4a60      	ldr	r2, [pc, #384]	; (8003d3c <menu+0x29d4>)
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f004 f8ec 	bl	8007d9c <lcd_print>
 8003bc4:	e008      	b.n	8003bd8 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003bc6:	4b51      	ldr	r3, [pc, #324]	; (8003d0c <menu+0x29a4>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d104      	bne.n	8003bd8 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003bce:	4a5c      	ldr	r2, [pc, #368]	; (8003d40 <menu+0x29d8>)
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	f004 f8e2 	bl	8007d9c <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003bd8:	4b4c      	ldr	r3, [pc, #304]	; (8003d0c <menu+0x29a4>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d105      	bne.n	8003bec <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003be0:	4a58      	ldr	r2, [pc, #352]	; (8003d44 <menu+0x29dc>)
 8003be2:	2101      	movs	r1, #1
 8003be4:	2002      	movs	r0, #2
 8003be6:	f004 f8d9 	bl	8007d9c <lcd_print>
 8003bea:	e008      	b.n	8003bfe <menu+0x2896>
			} else if(dilSecim == 1) {
 8003bec:	4b47      	ldr	r3, [pc, #284]	; (8003d0c <menu+0x29a4>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d104      	bne.n	8003bfe <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003bf4:	4a46      	ldr	r2, [pc, #280]	; (8003d10 <menu+0x29a8>)
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	2002      	movs	r0, #2
 8003bfa:	f004 f8cf 	bl	8007d9c <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003bfe:	4b52      	ldr	r3, [pc, #328]	; (8003d48 <menu+0x29e0>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	220a      	movs	r2, #10
 8003c04:	4944      	ldr	r1, [pc, #272]	; (8003d18 <menu+0x29b0>)
 8003c06:	4618      	mov	r0, r3
 8003c08:	f008 fc20 	bl	800c44c <itoa>
		lcd_print(2, 16, snum);
 8003c0c:	4a42      	ldr	r2, [pc, #264]	; (8003d18 <menu+0x29b0>)
 8003c0e:	2110      	movs	r1, #16
 8003c10:	2002      	movs	r0, #2
 8003c12:	f004 f8c3 	bl	8007d9c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c16:	2102      	movs	r1, #2
 8003c18:	4840      	ldr	r0, [pc, #256]	; (8003d1c <menu+0x29b4>)
 8003c1a:	f005 fbeb 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d115      	bne.n	8003c50 <menu+0x28e8>
 8003c24:	4b3e      	ldr	r3, [pc, #248]	; (8003d20 <menu+0x29b8>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	f083 0301 	eor.w	r3, r3, #1
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00e      	beq.n	8003c50 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003c32:	4b45      	ldr	r3, [pc, #276]	; (8003d48 <menu+0x29e0>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	3301      	adds	r3, #1
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4b43      	ldr	r3, [pc, #268]	; (8003d48 <menu+0x29e0>)
 8003c3c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003c3e:	4b42      	ldr	r3, [pc, #264]	; (8003d48 <menu+0x29e0>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d902      	bls.n	8003c4c <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003c46:	4b40      	ldr	r3, [pc, #256]	; (8003d48 <menu+0x29e0>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c4c:	f000 ff36 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c50:	2104      	movs	r1, #4
 8003c52:	4832      	ldr	r0, [pc, #200]	; (8003d1c <menu+0x29b4>)
 8003c54:	f005 fbce 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d115      	bne.n	8003c8a <menu+0x2922>
 8003c5e:	4b30      	ldr	r3, [pc, #192]	; (8003d20 <menu+0x29b8>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	f083 0301 	eor.w	r3, r3, #1
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003c6c:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <menu+0x29e0>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	4b34      	ldr	r3, [pc, #208]	; (8003d48 <menu+0x29e0>)
 8003c76:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003c78:	4b33      	ldr	r3, [pc, #204]	; (8003d48 <menu+0x29e0>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d902      	bls.n	8003c86 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003c80:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <menu+0x29e0>)
 8003c82:	2205      	movs	r2, #5
 8003c84:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c86:	f000 ff19 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c8a:	2108      	movs	r1, #8
 8003c8c:	4823      	ldr	r0, [pc, #140]	; (8003d1c <menu+0x29b4>)
 8003c8e:	f005 fbb1 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d10d      	bne.n	8003cb4 <menu+0x294c>
 8003c98:	4b21      	ldr	r3, [pc, #132]	; (8003d20 <menu+0x29b8>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	f083 0301 	eor.w	r3, r3, #1
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d006      	beq.n	8003cb4 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003ca6:	4b28      	ldr	r3, [pc, #160]	; (8003d48 <menu+0x29e0>)
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <menu+0x29bc>)
 8003cac:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003cae:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <menu+0x29c0>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <menu+0x29c4>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b19      	cmp	r3, #25
 8003cba:	f040 80c4 	bne.w	8003e46 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003cbe:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <menu+0x29c8>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d113      	bne.n	8003cee <menu+0x2986>
			if(dilSecim == 0) {
 8003cc6:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <menu+0x29a4>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d105      	bne.n	8003cda <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003cce:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <menu+0x29e4>)
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	f004 f862 	bl	8007d9c <lcd_print>
 8003cd8:	e047      	b.n	8003d6a <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <menu+0x29a4>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d143      	bne.n	8003d6a <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003ce2:	4a1b      	ldr	r2, [pc, #108]	; (8003d50 <menu+0x29e8>)
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	f004 f858 	bl	8007d9c <lcd_print>
 8003cec:	e03d      	b.n	8003d6a <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <menu+0x29c8>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d139      	bne.n	8003d6a <menu+0x2a02>
			if(dilSecim == 0) {
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <menu+0x29a4>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d12c      	bne.n	8003d58 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <menu+0x29ec>)
 8003d00:	2101      	movs	r1, #1
 8003d02:	2001      	movs	r0, #1
 8003d04:	f004 f84a 	bl	8007d9c <lcd_print>
 8003d08:	e02f      	b.n	8003d6a <menu+0x2a02>
 8003d0a:	bf00      	nop
 8003d0c:	20000245 	.word	0x20000245
 8003d10:	0800d970 	.word	0x0800d970
 8003d14:	20000239 	.word	0x20000239
 8003d18:	20000198 	.word	0x20000198
 8003d1c:	40010800 	.word	0x40010800
 8003d20:	20000253 	.word	0x20000253
 8003d24:	20000128 	.word	0x20000128
 8003d28:	20000250 	.word	0x20000250
 8003d2c:	20000224 	.word	0x20000224
 8003d30:	20000233 	.word	0x20000233
 8003d34:	0800d9a8 	.word	0x0800d9a8
 8003d38:	0800d9bc 	.word	0x0800d9bc
 8003d3c:	0800d9d0 	.word	0x0800d9d0
 8003d40:	0800d9e4 	.word	0x0800d9e4
 8003d44:	0800d5fc 	.word	0x0800d5fc
 8003d48:	2000023a 	.word	0x2000023a
 8003d4c:	0800d9f8 	.word	0x0800d9f8
 8003d50:	0800da0c 	.word	0x0800da0c
 8003d54:	0800da20 	.word	0x0800da20
			} else if(dilSecim == 1) {
 8003d58:	4b73      	ldr	r3, [pc, #460]	; (8003f28 <menu+0x2bc0>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d104      	bne.n	8003d6a <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003d60:	4a72      	ldr	r2, [pc, #456]	; (8003f2c <menu+0x2bc4>)
 8003d62:	2101      	movs	r1, #1
 8003d64:	2001      	movs	r0, #1
 8003d66:	f004 f819 	bl	8007d9c <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003d6a:	4b6f      	ldr	r3, [pc, #444]	; (8003f28 <menu+0x2bc0>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d105      	bne.n	8003d7e <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d72:	4a6f      	ldr	r2, [pc, #444]	; (8003f30 <menu+0x2bc8>)
 8003d74:	2101      	movs	r1, #1
 8003d76:	2002      	movs	r0, #2
 8003d78:	f004 f810 	bl	8007d9c <lcd_print>
 8003d7c:	e008      	b.n	8003d90 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003d7e:	4b6a      	ldr	r3, [pc, #424]	; (8003f28 <menu+0x2bc0>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d104      	bne.n	8003d90 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003d86:	4a6b      	ldr	r2, [pc, #428]	; (8003f34 <menu+0x2bcc>)
 8003d88:	2101      	movs	r1, #1
 8003d8a:	2002      	movs	r0, #2
 8003d8c:	f004 f806 	bl	8007d9c <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003d90:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <menu+0x2bd0>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	220a      	movs	r2, #10
 8003d96:	4969      	ldr	r1, [pc, #420]	; (8003f3c <menu+0x2bd4>)
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f008 fb57 	bl	800c44c <itoa>
		lcd_print(2,16,snum);
 8003d9e:	4a67      	ldr	r2, [pc, #412]	; (8003f3c <menu+0x2bd4>)
 8003da0:	2110      	movs	r1, #16
 8003da2:	2002      	movs	r0, #2
 8003da4:	f003 fffa 	bl	8007d9c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003da8:	2102      	movs	r1, #2
 8003daa:	4865      	ldr	r0, [pc, #404]	; (8003f40 <menu+0x2bd8>)
 8003dac:	f005 fb22 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d115      	bne.n	8003de2 <menu+0x2a7a>
 8003db6:	4b63      	ldr	r3, [pc, #396]	; (8003f44 <menu+0x2bdc>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	f083 0301 	eor.w	r3, r3, #1
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003dc4:	4b5c      	ldr	r3, [pc, #368]	; (8003f38 <menu+0x2bd0>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	4b5a      	ldr	r3, [pc, #360]	; (8003f38 <menu+0x2bd0>)
 8003dce:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003dd0:	4b59      	ldr	r3, [pc, #356]	; (8003f38 <menu+0x2bd0>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b05      	cmp	r3, #5
 8003dd6:	d902      	bls.n	8003dde <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003dd8:	4b57      	ldr	r3, [pc, #348]	; (8003f38 <menu+0x2bd0>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003dde:	f000 fe6d 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003de2:	2104      	movs	r1, #4
 8003de4:	4856      	ldr	r0, [pc, #344]	; (8003f40 <menu+0x2bd8>)
 8003de6:	f005 fb05 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d115      	bne.n	8003e1c <menu+0x2ab4>
 8003df0:	4b54      	ldr	r3, [pc, #336]	; (8003f44 <menu+0x2bdc>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	f083 0301 	eor.w	r3, r3, #1
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00e      	beq.n	8003e1c <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003dfe:	4b4e      	ldr	r3, [pc, #312]	; (8003f38 <menu+0x2bd0>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	4b4c      	ldr	r3, [pc, #304]	; (8003f38 <menu+0x2bd0>)
 8003e08:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003e0a:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <menu+0x2bd0>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d902      	bls.n	8003e18 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003e12:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <menu+0x2bd0>)
 8003e14:	2205      	movs	r2, #5
 8003e16:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e18:	f000 fe50 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e1c:	2108      	movs	r1, #8
 8003e1e:	4848      	ldr	r0, [pc, #288]	; (8003f40 <menu+0x2bd8>)
 8003e20:	f005 fae8 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d10d      	bne.n	8003e46 <menu+0x2ade>
 8003e2a:	4b46      	ldr	r3, [pc, #280]	; (8003f44 <menu+0x2bdc>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	f083 0301 	eor.w	r3, r3, #1
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d006      	beq.n	8003e46 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003e38:	4b3f      	ldr	r3, [pc, #252]	; (8003f38 <menu+0x2bd0>)
 8003e3a:	781a      	ldrb	r2, [r3, #0]
 8003e3c:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <menu+0x2be0>)
 8003e3e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003e40:	4b42      	ldr	r3, [pc, #264]	; (8003f4c <menu+0x2be4>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003e46:	4b42      	ldr	r3, [pc, #264]	; (8003f50 <menu+0x2be8>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b1a      	cmp	r3, #26
 8003e4c:	f040 80ec 	bne.w	8004028 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003e50:	4b35      	ldr	r3, [pc, #212]	; (8003f28 <menu+0x2bc0>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d105      	bne.n	8003e64 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003e58:	4a3e      	ldr	r2, [pc, #248]	; (8003f54 <menu+0x2bec>)
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f003 ff9d 	bl	8007d9c <lcd_print>
 8003e62:	e008      	b.n	8003e76 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003e64:	4b30      	ldr	r3, [pc, #192]	; (8003f28 <menu+0x2bc0>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d104      	bne.n	8003e76 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003e6c:	4a3a      	ldr	r2, [pc, #232]	; (8003f58 <menu+0x2bf0>)
 8003e6e:	2101      	movs	r1, #1
 8003e70:	2001      	movs	r0, #1
 8003e72:	f003 ff93 	bl	8007d9c <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003e76:	4b39      	ldr	r3, [pc, #228]	; (8003f5c <menu+0x2bf4>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b63      	cmp	r3, #99	; 0x63
 8003e7c:	d91e      	bls.n	8003ebc <menu+0x2b54>
			if(dilSecim == 0) {
 8003e7e:	4b2a      	ldr	r3, [pc, #168]	; (8003f28 <menu+0x2bc0>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e86:	4a2a      	ldr	r2, [pc, #168]	; (8003f30 <menu+0x2bc8>)
 8003e88:	2101      	movs	r1, #1
 8003e8a:	2002      	movs	r0, #2
 8003e8c:	f003 ff86 	bl	8007d9c <lcd_print>
			}
			if(dilSecim == 1) {
 8003e90:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <menu+0x2bc0>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d104      	bne.n	8003ea2 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003e98:	4a26      	ldr	r2, [pc, #152]	; (8003f34 <menu+0x2bcc>)
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	2002      	movs	r0, #2
 8003e9e:	f003 ff7d 	bl	8007d9c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003ea2:	4b2e      	ldr	r3, [pc, #184]	; (8003f5c <menu+0x2bf4>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	220a      	movs	r2, #10
 8003ea8:	4924      	ldr	r1, [pc, #144]	; (8003f3c <menu+0x2bd4>)
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f008 face 	bl	800c44c <itoa>
			lcd_print(2,14,snum);
 8003eb0:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <menu+0x2bd4>)
 8003eb2:	210e      	movs	r1, #14
 8003eb4:	2002      	movs	r0, #2
 8003eb6:	f003 ff71 	bl	8007d9c <lcd_print>
 8003eba:	e066      	b.n	8003f8a <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003ebc:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <menu+0x2bf4>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b09      	cmp	r3, #9
 8003ec2:	d923      	bls.n	8003f0c <menu+0x2ba4>
 8003ec4:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <menu+0x2bf4>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b63      	cmp	r3, #99	; 0x63
 8003eca:	d81f      	bhi.n	8003f0c <menu+0x2ba4>
			if(dilSecim == 0) {
 8003ecc:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <menu+0x2bc0>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ed4:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <menu+0x2bc8>)
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	2002      	movs	r0, #2
 8003eda:	f003 ff5f 	bl	8007d9c <lcd_print>
 8003ede:	e008      	b.n	8003ef2 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003ee0:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <menu+0x2bc0>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d104      	bne.n	8003ef2 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003ee8:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <menu+0x2bcc>)
 8003eea:	2101      	movs	r1, #1
 8003eec:	2002      	movs	r0, #2
 8003eee:	f003 ff55 	bl	8007d9c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003ef2:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <menu+0x2bf4>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	220a      	movs	r2, #10
 8003ef8:	4910      	ldr	r1, [pc, #64]	; (8003f3c <menu+0x2bd4>)
 8003efa:	4618      	mov	r0, r3
 8003efc:	f008 faa6 	bl	800c44c <itoa>
			lcd_print(2, 15, snum);
 8003f00:	4a0e      	ldr	r2, [pc, #56]	; (8003f3c <menu+0x2bd4>)
 8003f02:	210f      	movs	r1, #15
 8003f04:	2002      	movs	r0, #2
 8003f06:	f003 ff49 	bl	8007d9c <lcd_print>
		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003f0a:	e03e      	b.n	8003f8a <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <menu+0x2bf4>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b09      	cmp	r3, #9
 8003f12:	d83a      	bhi.n	8003f8a <menu+0x2c22>
			if(dilSecim == 0) {
 8003f14:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <menu+0x2bc0>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d121      	bne.n	8003f60 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f1c:	4a04      	ldr	r2, [pc, #16]	; (8003f30 <menu+0x2bc8>)
 8003f1e:	2101      	movs	r1, #1
 8003f20:	2002      	movs	r0, #2
 8003f22:	f003 ff3b 	bl	8007d9c <lcd_print>
 8003f26:	e024      	b.n	8003f72 <menu+0x2c0a>
 8003f28:	20000245 	.word	0x20000245
 8003f2c:	0800da34 	.word	0x0800da34
 8003f30:	0800d5fc 	.word	0x0800d5fc
 8003f34:	0800d970 	.word	0x0800d970
 8003f38:	2000023b 	.word	0x2000023b
 8003f3c:	20000198 	.word	0x20000198
 8003f40:	40010800 	.word	0x40010800
 8003f44:	20000253 	.word	0x20000253
 8003f48:	20000128 	.word	0x20000128
 8003f4c:	20000250 	.word	0x20000250
 8003f50:	20000224 	.word	0x20000224
 8003f54:	0800da48 	.word	0x0800da48
 8003f58:	0800da5c 	.word	0x0800da5c
 8003f5c:	2000023c 	.word	0x2000023c
			} else if(dilSecim == 1) {
 8003f60:	4b8f      	ldr	r3, [pc, #572]	; (80041a0 <menu+0x2e38>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d104      	bne.n	8003f72 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003f68:	4a8e      	ldr	r2, [pc, #568]	; (80041a4 <menu+0x2e3c>)
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	2002      	movs	r0, #2
 8003f6e:	f003 ff15 	bl	8007d9c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f72:	4b8d      	ldr	r3, [pc, #564]	; (80041a8 <menu+0x2e40>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	220a      	movs	r2, #10
 8003f78:	498c      	ldr	r1, [pc, #560]	; (80041ac <menu+0x2e44>)
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f008 fa66 	bl	800c44c <itoa>
			lcd_print(2, 16, snum);
 8003f80:	4a8a      	ldr	r2, [pc, #552]	; (80041ac <menu+0x2e44>)
 8003f82:	2110      	movs	r1, #16
 8003f84:	2002      	movs	r0, #2
 8003f86:	f003 ff09 	bl	8007d9c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	4888      	ldr	r0, [pc, #544]	; (80041b0 <menu+0x2e48>)
 8003f8e:	f005 fa31 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d115      	bne.n	8003fc4 <menu+0x2c5c>
 8003f98:	4b86      	ldr	r3, [pc, #536]	; (80041b4 <menu+0x2e4c>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	f083 0301 	eor.w	r3, r3, #1
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00e      	beq.n	8003fc4 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003fa6:	4b80      	ldr	r3, [pc, #512]	; (80041a8 <menu+0x2e40>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	3301      	adds	r3, #1
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	4b7e      	ldr	r3, [pc, #504]	; (80041a8 <menu+0x2e40>)
 8003fb0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003fb2:	4b7d      	ldr	r3, [pc, #500]	; (80041a8 <menu+0x2e40>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2bb4      	cmp	r3, #180	; 0xb4
 8003fb8:	d902      	bls.n	8003fc0 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003fba:	4b7b      	ldr	r3, [pc, #492]	; (80041a8 <menu+0x2e40>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003fc0:	f000 fd7c 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fc4:	2104      	movs	r1, #4
 8003fc6:	487a      	ldr	r0, [pc, #488]	; (80041b0 <menu+0x2e48>)
 8003fc8:	f005 fa14 	bl	80093f4 <HAL_GPIO_ReadPin>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d115      	bne.n	8003ffe <menu+0x2c96>
 8003fd2:	4b78      	ldr	r3, [pc, #480]	; (80041b4 <menu+0x2e4c>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	f083 0301 	eor.w	r3, r3, #1
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00e      	beq.n	8003ffe <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003fe0:	4b71      	ldr	r3, [pc, #452]	; (80041a8 <menu+0x2e40>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	4b6f      	ldr	r3, [pc, #444]	; (80041a8 <menu+0x2e40>)
 8003fea:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003fec:	4b6e      	ldr	r3, [pc, #440]	; (80041a8 <menu+0x2e40>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2bb5      	cmp	r3, #181	; 0xb5
 8003ff2:	d902      	bls.n	8003ffa <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003ff4:	4b6c      	ldr	r3, [pc, #432]	; (80041a8 <menu+0x2e40>)
 8003ff6:	22b4      	movs	r2, #180	; 0xb4
 8003ff8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ffa:	f000 fd5f 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ffe:	2108      	movs	r1, #8
 8004000:	486b      	ldr	r0, [pc, #428]	; (80041b0 <menu+0x2e48>)
 8004002:	f005 f9f7 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004006:	4603      	mov	r3, r0
 8004008:	2b01      	cmp	r3, #1
 800400a:	d10d      	bne.n	8004028 <menu+0x2cc0>
 800400c:	4b69      	ldr	r3, [pc, #420]	; (80041b4 <menu+0x2e4c>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	f083 0301 	eor.w	r3, r3, #1
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 800401a:	4b63      	ldr	r3, [pc, #396]	; (80041a8 <menu+0x2e40>)
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	4b66      	ldr	r3, [pc, #408]	; (80041b8 <menu+0x2e50>)
 8004020:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8004022:	4b66      	ldr	r3, [pc, #408]	; (80041bc <menu+0x2e54>)
 8004024:	2201      	movs	r2, #1
 8004026:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004028:	4b65      	ldr	r3, [pc, #404]	; (80041c0 <menu+0x2e58>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b1b      	cmp	r3, #27
 800402e:	f040 8083 	bne.w	8004138 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8004032:	4a64      	ldr	r2, [pc, #400]	; (80041c4 <menu+0x2e5c>)
 8004034:	2101      	movs	r1, #1
 8004036:	2001      	movs	r0, #1
 8004038:	f003 feb0 	bl	8007d9c <lcd_print>

		if(buzzer == 0) {
 800403c:	4b62      	ldr	r3, [pc, #392]	; (80041c8 <menu+0x2e60>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d113      	bne.n	800406c <menu+0x2d04>
			if(dilSecim == 0) {
 8004044:	4b56      	ldr	r3, [pc, #344]	; (80041a0 <menu+0x2e38>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d105      	bne.n	8004058 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 800404c:	4a5f      	ldr	r2, [pc, #380]	; (80041cc <menu+0x2e64>)
 800404e:	2101      	movs	r1, #1
 8004050:	2002      	movs	r0, #2
 8004052:	f003 fea3 	bl	8007d9c <lcd_print>
 8004056:	e020      	b.n	800409a <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004058:	4b51      	ldr	r3, [pc, #324]	; (80041a0 <menu+0x2e38>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d11c      	bne.n	800409a <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8004060:	4a5b      	ldr	r2, [pc, #364]	; (80041d0 <menu+0x2e68>)
 8004062:	2101      	movs	r1, #1
 8004064:	2002      	movs	r0, #2
 8004066:	f003 fe99 	bl	8007d9c <lcd_print>
 800406a:	e016      	b.n	800409a <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 800406c:	4b56      	ldr	r3, [pc, #344]	; (80041c8 <menu+0x2e60>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d112      	bne.n	800409a <menu+0x2d32>
			if(dilSecim == 0) {
 8004074:	4b4a      	ldr	r3, [pc, #296]	; (80041a0 <menu+0x2e38>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d105      	bne.n	8004088 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 800407c:	4a55      	ldr	r2, [pc, #340]	; (80041d4 <menu+0x2e6c>)
 800407e:	2101      	movs	r1, #1
 8004080:	2002      	movs	r0, #2
 8004082:	f003 fe8b 	bl	8007d9c <lcd_print>
 8004086:	e008      	b.n	800409a <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004088:	4b45      	ldr	r3, [pc, #276]	; (80041a0 <menu+0x2e38>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d104      	bne.n	800409a <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8004090:	4a51      	ldr	r2, [pc, #324]	; (80041d8 <menu+0x2e70>)
 8004092:	2101      	movs	r1, #1
 8004094:	2002      	movs	r0, #2
 8004096:	f003 fe81 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800409a:	2102      	movs	r1, #2
 800409c:	4844      	ldr	r0, [pc, #272]	; (80041b0 <menu+0x2e48>)
 800409e:	f005 f9a9 	bl	80093f4 <HAL_GPIO_ReadPin>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d115      	bne.n	80040d4 <menu+0x2d6c>
 80040a8:	4b42      	ldr	r3, [pc, #264]	; (80041b4 <menu+0x2e4c>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	f083 0301 	eor.w	r3, r3, #1
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00e      	beq.n	80040d4 <menu+0x2d6c>
			buzzer = buzzer + 1;
 80040b6:	4b44      	ldr	r3, [pc, #272]	; (80041c8 <menu+0x2e60>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	3301      	adds	r3, #1
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4b42      	ldr	r3, [pc, #264]	; (80041c8 <menu+0x2e60>)
 80040c0:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80040c2:	4b41      	ldr	r3, [pc, #260]	; (80041c8 <menu+0x2e60>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d902      	bls.n	80040d0 <menu+0x2d68>
				buzzer = 0;
 80040ca:	4b3f      	ldr	r3, [pc, #252]	; (80041c8 <menu+0x2e60>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040d0:	f000 fcf4 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040d4:	2104      	movs	r1, #4
 80040d6:	4836      	ldr	r0, [pc, #216]	; (80041b0 <menu+0x2e48>)
 80040d8:	f005 f98c 	bl	80093f4 <HAL_GPIO_ReadPin>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d115      	bne.n	800410e <menu+0x2da6>
 80040e2:	4b34      	ldr	r3, [pc, #208]	; (80041b4 <menu+0x2e4c>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	f083 0301 	eor.w	r3, r3, #1
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00e      	beq.n	800410e <menu+0x2da6>
			buzzer = buzzer - 1;
 80040f0:	4b35      	ldr	r3, [pc, #212]	; (80041c8 <menu+0x2e60>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	4b33      	ldr	r3, [pc, #204]	; (80041c8 <menu+0x2e60>)
 80040fa:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80040fc:	4b32      	ldr	r3, [pc, #200]	; (80041c8 <menu+0x2e60>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <menu+0x2da2>
		   		buzzer = 1;
 8004104:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <menu+0x2e60>)
 8004106:	2201      	movs	r2, #1
 8004108:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800410a:	f000 fcd7 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800410e:	2108      	movs	r1, #8
 8004110:	4827      	ldr	r0, [pc, #156]	; (80041b0 <menu+0x2e48>)
 8004112:	f005 f96f 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004116:	4603      	mov	r3, r0
 8004118:	2b01      	cmp	r3, #1
 800411a:	d10d      	bne.n	8004138 <menu+0x2dd0>
 800411c:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <menu+0x2e4c>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	f083 0301 	eor.w	r3, r3, #1
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d006      	beq.n	8004138 <menu+0x2dd0>
			eepromData[25] = buzzer;
 800412a:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <menu+0x2e60>)
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	4b22      	ldr	r3, [pc, #136]	; (80041b8 <menu+0x2e50>)
 8004130:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8004132:	4b22      	ldr	r3, [pc, #136]	; (80041bc <menu+0x2e54>)
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004138:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <menu+0x2e58>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b1c      	cmp	r3, #28
 800413e:	f040 80ab 	bne.w	8004298 <menu+0x2f30>
		calismaSayModu = 0;
 8004142:	4b26      	ldr	r3, [pc, #152]	; (80041dc <menu+0x2e74>)
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004148:	4a25      	ldr	r2, [pc, #148]	; (80041e0 <menu+0x2e78>)
 800414a:	2101      	movs	r1, #1
 800414c:	2001      	movs	r0, #1
 800414e:	f003 fe25 	bl	8007d9c <lcd_print>

		if(demoMode == 0) {
 8004152:	4b24      	ldr	r3, [pc, #144]	; (80041e4 <menu+0x2e7c>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d113      	bne.n	8004182 <menu+0x2e1a>
			if(dilSecim == 0) {
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <menu+0x2e38>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d105      	bne.n	800416e <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8004162:	4a1a      	ldr	r2, [pc, #104]	; (80041cc <menu+0x2e64>)
 8004164:	2101      	movs	r1, #1
 8004166:	2002      	movs	r0, #2
 8004168:	f003 fe18 	bl	8007d9c <lcd_print>
 800416c:	e045      	b.n	80041fa <menu+0x2e92>
			} else if(dilSecim == 1) {
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <menu+0x2e38>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d141      	bne.n	80041fa <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8004176:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <menu+0x2e68>)
 8004178:	2101      	movs	r1, #1
 800417a:	2002      	movs	r0, #2
 800417c:	f003 fe0e 	bl	8007d9c <lcd_print>
 8004180:	e03b      	b.n	80041fa <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8004182:	4b18      	ldr	r3, [pc, #96]	; (80041e4 <menu+0x2e7c>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d137      	bne.n	80041fa <menu+0x2e92>
			if(dilSecim == 0){
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <menu+0x2e38>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d12a      	bne.n	80041e8 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8004192:	4a10      	ldr	r2, [pc, #64]	; (80041d4 <menu+0x2e6c>)
 8004194:	2101      	movs	r1, #1
 8004196:	2002      	movs	r0, #2
 8004198:	f003 fe00 	bl	8007d9c <lcd_print>
 800419c:	e02d      	b.n	80041fa <menu+0x2e92>
 800419e:	bf00      	nop
 80041a0:	20000245 	.word	0x20000245
 80041a4:	0800d970 	.word	0x0800d970
 80041a8:	2000023c 	.word	0x2000023c
 80041ac:	20000198 	.word	0x20000198
 80041b0:	40010800 	.word	0x40010800
 80041b4:	20000253 	.word	0x20000253
 80041b8:	20000128 	.word	0x20000128
 80041bc:	20000250 	.word	0x20000250
 80041c0:	20000224 	.word	0x20000224
 80041c4:	0800da70 	.word	0x0800da70
 80041c8:	20000240 	.word	0x20000240
 80041cc:	0800d398 	.word	0x0800d398
 80041d0:	0800d3ac 	.word	0x0800d3ac
 80041d4:	0800d3f8 	.word	0x0800d3f8
 80041d8:	0800d40c 	.word	0x0800d40c
 80041dc:	20000244 	.word	0x20000244
 80041e0:	0800da84 	.word	0x0800da84
 80041e4:	20000242 	.word	0x20000242
			} else if(dilSecim == 1) {
 80041e8:	4b71      	ldr	r3, [pc, #452]	; (80043b0 <menu+0x3048>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d104      	bne.n	80041fa <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80041f0:	4a70      	ldr	r2, [pc, #448]	; (80043b4 <menu+0x304c>)
 80041f2:	2101      	movs	r1, #1
 80041f4:	2002      	movs	r0, #2
 80041f6:	f003 fdd1 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041fa:	2102      	movs	r1, #2
 80041fc:	486e      	ldr	r0, [pc, #440]	; (80043b8 <menu+0x3050>)
 80041fe:	f005 f8f9 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004202:	4603      	mov	r3, r0
 8004204:	2b01      	cmp	r3, #1
 8004206:	d115      	bne.n	8004234 <menu+0x2ecc>
 8004208:	4b6c      	ldr	r3, [pc, #432]	; (80043bc <menu+0x3054>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	f083 0301 	eor.w	r3, r3, #1
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00e      	beq.n	8004234 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004216:	4b6a      	ldr	r3, [pc, #424]	; (80043c0 <menu+0x3058>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	3301      	adds	r3, #1
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4b68      	ldr	r3, [pc, #416]	; (80043c0 <menu+0x3058>)
 8004220:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004222:	4b67      	ldr	r3, [pc, #412]	; (80043c0 <menu+0x3058>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d902      	bls.n	8004230 <menu+0x2ec8>
				demoMode = 0;
 800422a:	4b65      	ldr	r3, [pc, #404]	; (80043c0 <menu+0x3058>)
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004230:	f000 fc44 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004234:	2104      	movs	r1, #4
 8004236:	4860      	ldr	r0, [pc, #384]	; (80043b8 <menu+0x3050>)
 8004238:	f005 f8dc 	bl	80093f4 <HAL_GPIO_ReadPin>
 800423c:	4603      	mov	r3, r0
 800423e:	2b01      	cmp	r3, #1
 8004240:	d115      	bne.n	800426e <menu+0x2f06>
 8004242:	4b5e      	ldr	r3, [pc, #376]	; (80043bc <menu+0x3054>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	f083 0301 	eor.w	r3, r3, #1
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00e      	beq.n	800426e <menu+0x2f06>
			demoMode = demoMode - 1;
 8004250:	4b5b      	ldr	r3, [pc, #364]	; (80043c0 <menu+0x3058>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	3b01      	subs	r3, #1
 8004256:	b2da      	uxtb	r2, r3
 8004258:	4b59      	ldr	r3, [pc, #356]	; (80043c0 <menu+0x3058>)
 800425a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800425c:	4b58      	ldr	r3, [pc, #352]	; (80043c0 <menu+0x3058>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <menu+0x2f02>
		   		demoMode = 1;
 8004264:	4b56      	ldr	r3, [pc, #344]	; (80043c0 <menu+0x3058>)
 8004266:	2201      	movs	r2, #1
 8004268:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800426a:	f000 fc27 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800426e:	2108      	movs	r1, #8
 8004270:	4851      	ldr	r0, [pc, #324]	; (80043b8 <menu+0x3050>)
 8004272:	f005 f8bf 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004276:	4603      	mov	r3, r0
 8004278:	2b01      	cmp	r3, #1
 800427a:	d10d      	bne.n	8004298 <menu+0x2f30>
 800427c:	4b4f      	ldr	r3, [pc, #316]	; (80043bc <menu+0x3054>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	f083 0301 	eor.w	r3, r3, #1
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d006      	beq.n	8004298 <menu+0x2f30>
			eepromData[26] = demoMode;
 800428a:	4b4d      	ldr	r3, [pc, #308]	; (80043c0 <menu+0x3058>)
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	4b4d      	ldr	r3, [pc, #308]	; (80043c4 <menu+0x305c>)
 8004290:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004292:	4b4d      	ldr	r3, [pc, #308]	; (80043c8 <menu+0x3060>)
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004298:	4b4c      	ldr	r3, [pc, #304]	; (80043cc <menu+0x3064>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b1d      	cmp	r3, #29
 800429e:	f040 8132 	bne.w	8004506 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80042a2:	4b4b      	ldr	r3, [pc, #300]	; (80043d0 <menu+0x3068>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d113      	bne.n	80042d2 <menu+0x2f6a>
 80042aa:	4b4a      	ldr	r3, [pc, #296]	; (80043d4 <menu+0x306c>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10f      	bne.n	80042d2 <menu+0x2f6a>
 80042b2:	4b49      	ldr	r3, [pc, #292]	; (80043d8 <menu+0x3070>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <menu+0x2f6a>
 80042ba:	4b48      	ldr	r3, [pc, #288]	; (80043dc <menu+0x3074>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d107      	bne.n	80042d2 <menu+0x2f6a>
 80042c2:	4b47      	ldr	r3, [pc, #284]	; (80043e0 <menu+0x3078>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d103      	bne.n	80042d2 <menu+0x2f6a>
			calismaSayisiYar = 0;
 80042ca:	4b46      	ldr	r3, [pc, #280]	; (80043e4 <menu+0x307c>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	e002      	b.n	80042d8 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80042d2:	4b44      	ldr	r3, [pc, #272]	; (80043e4 <menu+0x307c>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80042d8:	4b43      	ldr	r3, [pc, #268]	; (80043e8 <menu+0x3080>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d154      	bne.n	800438a <menu+0x3022>
			if(dilSecim == 0) {
 80042e0:	4b33      	ldr	r3, [pc, #204]	; (80043b0 <menu+0x3048>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80042e8:	4a40      	ldr	r2, [pc, #256]	; (80043ec <menu+0x3084>)
 80042ea:	2101      	movs	r1, #1
 80042ec:	2001      	movs	r0, #1
 80042ee:	f003 fd55 	bl	8007d9c <lcd_print>
 80042f2:	e008      	b.n	8004306 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80042f4:	4b2e      	ldr	r3, [pc, #184]	; (80043b0 <menu+0x3048>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d104      	bne.n	8004306 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80042fc:	4a3c      	ldr	r2, [pc, #240]	; (80043f0 <menu+0x3088>)
 80042fe:	2101      	movs	r1, #1
 8004300:	2001      	movs	r0, #1
 8004302:	f003 fd4b 	bl	8007d9c <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004306:	4b36      	ldr	r3, [pc, #216]	; (80043e0 <menu+0x3078>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	220a      	movs	r2, #10
 800430c:	4939      	ldr	r1, [pc, #228]	; (80043f4 <menu+0x308c>)
 800430e:	4618      	mov	r0, r3
 8004310:	f008 f89c 	bl	800c44c <itoa>
			lcd_print(2, 12, snum);
 8004314:	4a37      	ldr	r2, [pc, #220]	; (80043f4 <menu+0x308c>)
 8004316:	210c      	movs	r1, #12
 8004318:	2002      	movs	r0, #2
 800431a:	f003 fd3f 	bl	8007d9c <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800431e:	4b2f      	ldr	r3, [pc, #188]	; (80043dc <menu+0x3074>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	220a      	movs	r2, #10
 8004324:	4933      	ldr	r1, [pc, #204]	; (80043f4 <menu+0x308c>)
 8004326:	4618      	mov	r0, r3
 8004328:	f008 f890 	bl	800c44c <itoa>
			lcd_print(2, 13, snum);
 800432c:	4a31      	ldr	r2, [pc, #196]	; (80043f4 <menu+0x308c>)
 800432e:	210d      	movs	r1, #13
 8004330:	2002      	movs	r0, #2
 8004332:	f003 fd33 	bl	8007d9c <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004336:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <menu+0x3070>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	220a      	movs	r2, #10
 800433c:	492d      	ldr	r1, [pc, #180]	; (80043f4 <menu+0x308c>)
 800433e:	4618      	mov	r0, r3
 8004340:	f008 f884 	bl	800c44c <itoa>
			lcd_print(2, 14, snum);
 8004344:	4a2b      	ldr	r2, [pc, #172]	; (80043f4 <menu+0x308c>)
 8004346:	210e      	movs	r1, #14
 8004348:	2002      	movs	r0, #2
 800434a:	f003 fd27 	bl	8007d9c <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800434e:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <menu+0x306c>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	220a      	movs	r2, #10
 8004354:	4927      	ldr	r1, [pc, #156]	; (80043f4 <menu+0x308c>)
 8004356:	4618      	mov	r0, r3
 8004358:	f008 f878 	bl	800c44c <itoa>
			lcd_print(2, 15, snum);
 800435c:	4a25      	ldr	r2, [pc, #148]	; (80043f4 <menu+0x308c>)
 800435e:	210f      	movs	r1, #15
 8004360:	2002      	movs	r0, #2
 8004362:	f003 fd1b 	bl	8007d9c <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004366:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <menu+0x3068>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	220a      	movs	r2, #10
 800436c:	4921      	ldr	r1, [pc, #132]	; (80043f4 <menu+0x308c>)
 800436e:	4618      	mov	r0, r3
 8004370:	f008 f86c 	bl	800c44c <itoa>
			lcd_print(2, 16, snum);
 8004374:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <menu+0x308c>)
 8004376:	2110      	movs	r1, #16
 8004378:	2002      	movs	r0, #2
 800437a:	f003 fd0f 	bl	8007d9c <lcd_print>

			lcd_print(2, 1, "           ");
 800437e:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <menu+0x3090>)
 8004380:	2101      	movs	r1, #1
 8004382:	2002      	movs	r0, #2
 8004384:	f003 fd0a 	bl	8007d9c <lcd_print>
 8004388:	e048      	b.n	800441c <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 800438a:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <menu+0x3080>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d144      	bne.n	800441c <menu+0x30b4>
			if(dilSecim == 0) {
 8004392:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <menu+0x3048>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d132      	bne.n	8004400 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800439a:	4a14      	ldr	r2, [pc, #80]	; (80043ec <menu+0x3084>)
 800439c:	2101      	movs	r1, #1
 800439e:	2001      	movs	r0, #1
 80043a0:	f003 fcfc 	bl	8007d9c <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80043a4:	4a15      	ldr	r2, [pc, #84]	; (80043fc <menu+0x3094>)
 80043a6:	2101      	movs	r1, #1
 80043a8:	2002      	movs	r0, #2
 80043aa:	f003 fcf7 	bl	8007d9c <lcd_print>
 80043ae:	e035      	b.n	800441c <menu+0x30b4>
 80043b0:	20000245 	.word	0x20000245
 80043b4:	0800d40c 	.word	0x0800d40c
 80043b8:	40010800 	.word	0x40010800
 80043bc:	20000253 	.word	0x20000253
 80043c0:	20000242 	.word	0x20000242
 80043c4:	20000128 	.word	0x20000128
 80043c8:	20000250 	.word	0x20000250
 80043cc:	20000224 	.word	0x20000224
 80043d0:	20000221 	.word	0x20000221
 80043d4:	20000222 	.word	0x20000222
 80043d8:	20000008 	.word	0x20000008
 80043dc:	20000009 	.word	0x20000009
 80043e0:	20000223 	.word	0x20000223
 80043e4:	20000265 	.word	0x20000265
 80043e8:	20000244 	.word	0x20000244
 80043ec:	0800da94 	.word	0x0800da94
 80043f0:	0800daa8 	.word	0x0800daa8
 80043f4:	20000198 	.word	0x20000198
 80043f8:	0800dabc 	.word	0x0800dabc
 80043fc:	0800dac8 	.word	0x0800dac8
			} else if(dilSecim == 1) {
 8004400:	4b94      	ldr	r3, [pc, #592]	; (8004654 <menu+0x32ec>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d109      	bne.n	800441c <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004408:	4a93      	ldr	r2, [pc, #588]	; (8004658 <menu+0x32f0>)
 800440a:	2101      	movs	r1, #1
 800440c:	2001      	movs	r0, #1
 800440e:	f003 fcc5 	bl	8007d9c <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004412:	4a92      	ldr	r2, [pc, #584]	; (800465c <menu+0x32f4>)
 8004414:	2101      	movs	r1, #1
 8004416:	2002      	movs	r0, #2
 8004418:	f003 fcc0 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800441c:	2102      	movs	r1, #2
 800441e:	4890      	ldr	r0, [pc, #576]	; (8004660 <menu+0x32f8>)
 8004420:	f004 ffe8 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004424:	4603      	mov	r3, r0
 8004426:	2b01      	cmp	r3, #1
 8004428:	d119      	bne.n	800445e <menu+0x30f6>
 800442a:	4b8e      	ldr	r3, [pc, #568]	; (8004664 <menu+0x32fc>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	f083 0301 	eor.w	r3, r3, #1
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d012      	beq.n	800445e <menu+0x30f6>
 8004438:	4b8b      	ldr	r3, [pc, #556]	; (8004668 <menu+0x3300>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00e      	beq.n	800445e <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004440:	4b8a      	ldr	r3, [pc, #552]	; (800466c <menu+0x3304>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	3301      	adds	r3, #1
 8004446:	b2da      	uxtb	r2, r3
 8004448:	4b88      	ldr	r3, [pc, #544]	; (800466c <menu+0x3304>)
 800444a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800444c:	4b87      	ldr	r3, [pc, #540]	; (800466c <menu+0x3304>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d902      	bls.n	800445a <menu+0x30f2>
				calismaSayModu = 0;
 8004454:	4b85      	ldr	r3, [pc, #532]	; (800466c <menu+0x3304>)
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800445a:	f000 fb2f 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800445e:	2104      	movs	r1, #4
 8004460:	487f      	ldr	r0, [pc, #508]	; (8004660 <menu+0x32f8>)
 8004462:	f004 ffc7 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004466:	4603      	mov	r3, r0
 8004468:	2b01      	cmp	r3, #1
 800446a:	d119      	bne.n	80044a0 <menu+0x3138>
 800446c:	4b7d      	ldr	r3, [pc, #500]	; (8004664 <menu+0x32fc>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	f083 0301 	eor.w	r3, r3, #1
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d012      	beq.n	80044a0 <menu+0x3138>
 800447a:	4b7b      	ldr	r3, [pc, #492]	; (8004668 <menu+0x3300>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00e      	beq.n	80044a0 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 8004482:	4b7a      	ldr	r3, [pc, #488]	; (800466c <menu+0x3304>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	3b01      	subs	r3, #1
 8004488:	b2da      	uxtb	r2, r3
 800448a:	4b78      	ldr	r3, [pc, #480]	; (800466c <menu+0x3304>)
 800448c:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800448e:	4b77      	ldr	r3, [pc, #476]	; (800466c <menu+0x3304>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <menu+0x3134>
		   		calismaSayModu = 1;
 8004496:	4b75      	ldr	r3, [pc, #468]	; (800466c <menu+0x3304>)
 8004498:	2201      	movs	r2, #1
 800449a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800449c:	f000 fb0e 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044a0:	2108      	movs	r1, #8
 80044a2:	486f      	ldr	r0, [pc, #444]	; (8004660 <menu+0x32f8>)
 80044a4:	f004 ffa6 	bl	80093f4 <HAL_GPIO_ReadPin>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d12b      	bne.n	8004506 <menu+0x319e>
 80044ae:	4b6d      	ldr	r3, [pc, #436]	; (8004664 <menu+0x32fc>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	f083 0301 	eor.w	r3, r3, #1
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d024      	beq.n	8004506 <menu+0x319e>
			eepromData[32] = 0;
 80044bc:	4b6c      	ldr	r3, [pc, #432]	; (8004670 <menu+0x3308>)
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80044c4:	4b6a      	ldr	r3, [pc, #424]	; (8004670 <menu+0x3308>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80044ca:	4b69      	ldr	r3, [pc, #420]	; (8004670 <menu+0x3308>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80044d0:	4b67      	ldr	r3, [pc, #412]	; (8004670 <menu+0x3308>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80044d6:	4b66      	ldr	r3, [pc, #408]	; (8004670 <menu+0x3308>)
 80044d8:	2200      	movs	r2, #0
 80044da:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80044dc:	4b65      	ldr	r3, [pc, #404]	; (8004674 <menu+0x330c>)
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80044e2:	4b65      	ldr	r3, [pc, #404]	; (8004678 <menu+0x3310>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80044e8:	4b64      	ldr	r3, [pc, #400]	; (800467c <menu+0x3314>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80044ee:	4b64      	ldr	r3, [pc, #400]	; (8004680 <menu+0x3318>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80044f4:	4b63      	ldr	r3, [pc, #396]	; (8004684 <menu+0x331c>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80044fa:	4b5c      	ldr	r3, [pc, #368]	; (800466c <menu+0x3304>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004500:	4b61      	ldr	r3, [pc, #388]	; (8004688 <menu+0x3320>)
 8004502:	2201      	movs	r2, #1
 8004504:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004506:	4b61      	ldr	r3, [pc, #388]	; (800468c <menu+0x3324>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b1e      	cmp	r3, #30
 800450c:	d16f      	bne.n	80045ee <menu+0x3286>
		calismaSayModu = 0;
 800450e:	4b57      	ldr	r3, [pc, #348]	; (800466c <menu+0x3304>)
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004514:	4b4f      	ldr	r3, [pc, #316]	; (8004654 <menu+0x32ec>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 800451c:	4a5c      	ldr	r2, [pc, #368]	; (8004690 <menu+0x3328>)
 800451e:	2101      	movs	r1, #1
 8004520:	2001      	movs	r0, #1
 8004522:	f003 fc3b 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004526:	4a5b      	ldr	r2, [pc, #364]	; (8004694 <menu+0x332c>)
 8004528:	2101      	movs	r1, #1
 800452a:	2002      	movs	r0, #2
 800452c:	f003 fc36 	bl	8007d9c <lcd_print>
 8004530:	e00d      	b.n	800454e <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004532:	4b48      	ldr	r3, [pc, #288]	; (8004654 <menu+0x32ec>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d109      	bne.n	800454e <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800453a:	4a57      	ldr	r2, [pc, #348]	; (8004698 <menu+0x3330>)
 800453c:	2101      	movs	r1, #1
 800453e:	2001      	movs	r0, #1
 8004540:	f003 fc2c 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004544:	4a55      	ldr	r2, [pc, #340]	; (800469c <menu+0x3334>)
 8004546:	2101      	movs	r1, #1
 8004548:	2002      	movs	r0, #2
 800454a:	f003 fc27 	bl	8007d9c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800454e:	2102      	movs	r1, #2
 8004550:	4843      	ldr	r0, [pc, #268]	; (8004660 <menu+0x32f8>)
 8004552:	f004 ff4f 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004556:	4603      	mov	r3, r0
 8004558:	2b01      	cmp	r3, #1
 800455a:	d115      	bne.n	8004588 <menu+0x3220>
 800455c:	4b41      	ldr	r3, [pc, #260]	; (8004664 <menu+0x32fc>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	f083 0301 	eor.w	r3, r3, #1
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00e      	beq.n	8004588 <menu+0x3220>
			dilSecim = dilSecim + 1;
 800456a:	4b3a      	ldr	r3, [pc, #232]	; (8004654 <menu+0x32ec>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	3301      	adds	r3, #1
 8004570:	b2da      	uxtb	r2, r3
 8004572:	4b38      	ldr	r3, [pc, #224]	; (8004654 <menu+0x32ec>)
 8004574:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004576:	4b37      	ldr	r3, [pc, #220]	; (8004654 <menu+0x32ec>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d902      	bls.n	8004584 <menu+0x321c>
				dilSecim = 0;
 800457e:	4b35      	ldr	r3, [pc, #212]	; (8004654 <menu+0x32ec>)
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004584:	f000 fa9a 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004588:	2104      	movs	r1, #4
 800458a:	4835      	ldr	r0, [pc, #212]	; (8004660 <menu+0x32f8>)
 800458c:	f004 ff32 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d115      	bne.n	80045c2 <menu+0x325a>
 8004596:	4b33      	ldr	r3, [pc, #204]	; (8004664 <menu+0x32fc>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	f083 0301 	eor.w	r3, r3, #1
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00e      	beq.n	80045c2 <menu+0x325a>
			dilSecim = dilSecim - 1;
 80045a4:	4b2b      	ldr	r3, [pc, #172]	; (8004654 <menu+0x32ec>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	4b29      	ldr	r3, [pc, #164]	; (8004654 <menu+0x32ec>)
 80045ae:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80045b0:	4b28      	ldr	r3, [pc, #160]	; (8004654 <menu+0x32ec>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <menu+0x3256>
		   		dilSecim = 1;
 80045b8:	4b26      	ldr	r3, [pc, #152]	; (8004654 <menu+0x32ec>)
 80045ba:	2201      	movs	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80045be:	f000 fa7d 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045c2:	2108      	movs	r1, #8
 80045c4:	4826      	ldr	r0, [pc, #152]	; (8004660 <menu+0x32f8>)
 80045c6:	f004 ff15 	bl	80093f4 <HAL_GPIO_ReadPin>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d10e      	bne.n	80045ee <menu+0x3286>
 80045d0:	4b24      	ldr	r3, [pc, #144]	; (8004664 <menu+0x32fc>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	f083 0301 	eor.w	r3, r3, #1
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <menu+0x3286>
			eepromData[33] = dilSecim;
 80045de:	4b1d      	ldr	r3, [pc, #116]	; (8004654 <menu+0x32ec>)
 80045e0:	781a      	ldrb	r2, [r3, #0]
 80045e2:	4b23      	ldr	r3, [pc, #140]	; (8004670 <menu+0x3308>)
 80045e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80045e8:	4b27      	ldr	r3, [pc, #156]	; (8004688 <menu+0x3320>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80045ee:	4b27      	ldr	r3, [pc, #156]	; (800468c <menu+0x3324>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b1f      	cmp	r3, #31
 80045f4:	f040 80b7 	bne.w	8004766 <menu+0x33fe>
		calismaSayModu = 0;
 80045f8:	4b1c      	ldr	r3, [pc, #112]	; (800466c <menu+0x3304>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80045fe:	4a28      	ldr	r2, [pc, #160]	; (80046a0 <menu+0x3338>)
 8004600:	2101      	movs	r1, #1
 8004602:	2001      	movs	r0, #1
 8004604:	f003 fbca 	bl	8007d9c <lcd_print>

		if(iotMode == 0) {
 8004608:	4b26      	ldr	r3, [pc, #152]	; (80046a4 <menu+0x333c>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d113      	bne.n	8004638 <menu+0x32d0>
			if(dilSecim == 0) {
 8004610:	4b10      	ldr	r3, [pc, #64]	; (8004654 <menu+0x32ec>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d105      	bne.n	8004624 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004618:	4a23      	ldr	r2, [pc, #140]	; (80046a8 <menu+0x3340>)
 800461a:	2101      	movs	r1, #1
 800461c:	2002      	movs	r0, #2
 800461e:	f003 fbbd 	bl	8007d9c <lcd_print>
 8004622:	e050      	b.n	80046c6 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <menu+0x32ec>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d14c      	bne.n	80046c6 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 800462c:	4a1f      	ldr	r2, [pc, #124]	; (80046ac <menu+0x3344>)
 800462e:	2101      	movs	r1, #1
 8004630:	2002      	movs	r0, #2
 8004632:	f003 fbb3 	bl	8007d9c <lcd_print>
 8004636:	e046      	b.n	80046c6 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004638:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <menu+0x333c>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d142      	bne.n	80046c6 <menu+0x335e>
			if(dilSecim == 0) {
 8004640:	4b04      	ldr	r3, [pc, #16]	; (8004654 <menu+0x32ec>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d135      	bne.n	80046b4 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004648:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <menu+0x3348>)
 800464a:	2101      	movs	r1, #1
 800464c:	2002      	movs	r0, #2
 800464e:	f003 fba5 	bl	8007d9c <lcd_print>
 8004652:	e038      	b.n	80046c6 <menu+0x335e>
 8004654:	20000245 	.word	0x20000245
 8004658:	0800daa8 	.word	0x0800daa8
 800465c:	0800dadc 	.word	0x0800dadc
 8004660:	40010800 	.word	0x40010800
 8004664:	20000253 	.word	0x20000253
 8004668:	20000265 	.word	0x20000265
 800466c:	20000244 	.word	0x20000244
 8004670:	20000128 	.word	0x20000128
 8004674:	20000223 	.word	0x20000223
 8004678:	20000009 	.word	0x20000009
 800467c:	20000008 	.word	0x20000008
 8004680:	20000222 	.word	0x20000222
 8004684:	20000221 	.word	0x20000221
 8004688:	20000250 	.word	0x20000250
 800468c:	20000224 	.word	0x20000224
 8004690:	0800daf0 	.word	0x0800daf0
 8004694:	0800db04 	.word	0x0800db04
 8004698:	0800db18 	.word	0x0800db18
 800469c:	0800db2c 	.word	0x0800db2c
 80046a0:	0800db40 	.word	0x0800db40
 80046a4:	20000243 	.word	0x20000243
 80046a8:	0800d398 	.word	0x0800d398
 80046ac:	0800d3ac 	.word	0x0800d3ac
 80046b0:	0800d3f8 	.word	0x0800d3f8
			} else if(dilSecim == 1) {
 80046b4:	4bad      	ldr	r3, [pc, #692]	; (800496c <menu+0x3604>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d104      	bne.n	80046c6 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80046bc:	4aac      	ldr	r2, [pc, #688]	; (8004970 <menu+0x3608>)
 80046be:	2101      	movs	r1, #1
 80046c0:	2002      	movs	r0, #2
 80046c2:	f003 fb6b 	bl	8007d9c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80046c6:	2102      	movs	r1, #2
 80046c8:	48aa      	ldr	r0, [pc, #680]	; (8004974 <menu+0x360c>)
 80046ca:	f004 fe93 	bl	80093f4 <HAL_GPIO_ReadPin>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d115      	bne.n	8004700 <menu+0x3398>
 80046d4:	4ba8      	ldr	r3, [pc, #672]	; (8004978 <menu+0x3610>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	f083 0301 	eor.w	r3, r3, #1
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00e      	beq.n	8004700 <menu+0x3398>
			iotMode = iotMode + 1;
 80046e2:	4ba6      	ldr	r3, [pc, #664]	; (800497c <menu+0x3614>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	3301      	adds	r3, #1
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	4ba4      	ldr	r3, [pc, #656]	; (800497c <menu+0x3614>)
 80046ec:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80046ee:	4ba3      	ldr	r3, [pc, #652]	; (800497c <menu+0x3614>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d902      	bls.n	80046fc <menu+0x3394>
				iotMode = 0;
 80046f6:	4ba1      	ldr	r3, [pc, #644]	; (800497c <menu+0x3614>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80046fc:	f000 f9de 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004700:	2104      	movs	r1, #4
 8004702:	489c      	ldr	r0, [pc, #624]	; (8004974 <menu+0x360c>)
 8004704:	f004 fe76 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004708:	4603      	mov	r3, r0
 800470a:	2b01      	cmp	r3, #1
 800470c:	d115      	bne.n	800473a <menu+0x33d2>
 800470e:	4b9a      	ldr	r3, [pc, #616]	; (8004978 <menu+0x3610>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	f083 0301 	eor.w	r3, r3, #1
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00e      	beq.n	800473a <menu+0x33d2>
			iotMode = iotMode - 1;
 800471c:	4b97      	ldr	r3, [pc, #604]	; (800497c <menu+0x3614>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	3b01      	subs	r3, #1
 8004722:	b2da      	uxtb	r2, r3
 8004724:	4b95      	ldr	r3, [pc, #596]	; (800497c <menu+0x3614>)
 8004726:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004728:	4b94      	ldr	r3, [pc, #592]	; (800497c <menu+0x3614>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <menu+0x33ce>
		   		iotMode = 1;
 8004730:	4b92      	ldr	r3, [pc, #584]	; (800497c <menu+0x3614>)
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004736:	f000 f9c1 	bl	8004abc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800473a:	2108      	movs	r1, #8
 800473c:	488d      	ldr	r0, [pc, #564]	; (8004974 <menu+0x360c>)
 800473e:	f004 fe59 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004742:	4603      	mov	r3, r0
 8004744:	2b01      	cmp	r3, #1
 8004746:	d10e      	bne.n	8004766 <menu+0x33fe>
 8004748:	4b8b      	ldr	r3, [pc, #556]	; (8004978 <menu+0x3610>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	f083 0301 	eor.w	r3, r3, #1
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004756:	4b89      	ldr	r3, [pc, #548]	; (800497c <menu+0x3614>)
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	4b89      	ldr	r3, [pc, #548]	; (8004980 <menu+0x3618>)
 800475c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004760:	4b88      	ldr	r3, [pc, #544]	; (8004984 <menu+0x361c>)
 8004762:	2201      	movs	r2, #1
 8004764:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004766:	4b88      	ldr	r3, [pc, #544]	; (8004988 <menu+0x3620>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b20      	cmp	r3, #32
 800476c:	d142      	bne.n	80047f4 <menu+0x348c>
		calismaSayModu = 0;
 800476e:	4b87      	ldr	r3, [pc, #540]	; (800498c <menu+0x3624>)
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004774:	4b7d      	ldr	r3, [pc, #500]	; (800496c <menu+0x3604>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d105      	bne.n	8004788 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 800477c:	4a84      	ldr	r2, [pc, #528]	; (8004990 <menu+0x3628>)
 800477e:	2101      	movs	r1, #1
 8004780:	2001      	movs	r0, #1
 8004782:	f003 fb0b 	bl	8007d9c <lcd_print>
 8004786:	e004      	b.n	8004792 <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004788:	4a82      	ldr	r2, [pc, #520]	; (8004994 <menu+0x362c>)
 800478a:	2101      	movs	r1, #1
 800478c:	2001      	movs	r0, #1
 800478e:	f003 fb05 	bl	8007d9c <lcd_print>
		}

		lcd_print(2, 1, machineID);
 8004792:	4a81      	ldr	r2, [pc, #516]	; (8004998 <menu+0x3630>)
 8004794:	2101      	movs	r1, #1
 8004796:	2002      	movs	r0, #2
 8004798:	f003 fb00 	bl	8007d9c <lcd_print>
		lcd_print(2, 13, "    ");
 800479c:	4a7f      	ldr	r2, [pc, #508]	; (800499c <menu+0x3634>)
 800479e:	210d      	movs	r1, #13
 80047a0:	2002      	movs	r0, #2
 80047a2:	f003 fafb 	bl	8007d9c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047a6:	2102      	movs	r1, #2
 80047a8:	4872      	ldr	r0, [pc, #456]	; (8004974 <menu+0x360c>)
 80047aa:	f004 fe23 	bl	80093f4 <HAL_GPIO_ReadPin>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d11f      	bne.n	80047f4 <menu+0x348c>
 80047b4:	2104      	movs	r1, #4
 80047b6:	486f      	ldr	r0, [pc, #444]	; (8004974 <menu+0x360c>)
 80047b8:	f004 fe1c 	bl	80093f4 <HAL_GPIO_ReadPin>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d118      	bne.n	80047f4 <menu+0x348c>
 80047c2:	4b6d      	ldr	r3, [pc, #436]	; (8004978 <menu+0x3610>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	f083 0301 	eor.w	r3, r3, #1
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d011      	beq.n	80047f4 <menu+0x348c>
			takeMachineID(0);
 80047d0:	2000      	movs	r0, #0
 80047d2:	f002 fa7f 	bl	8006cd4 <takeMachineID>

			HAL_Delay(50);
 80047d6:	2032      	movs	r0, #50	; 0x32
 80047d8:	f004 f83c 	bl	8008854 <HAL_Delay>

			lcd_print(2, 1, machineID);
 80047dc:	4a6e      	ldr	r2, [pc, #440]	; (8004998 <menu+0x3630>)
 80047de:	2101      	movs	r1, #1
 80047e0:	2002      	movs	r0, #2
 80047e2:	f003 fadb 	bl	8007d9c <lcd_print>
			lcd_print(2, 13, "    ");
 80047e6:	4a6d      	ldr	r2, [pc, #436]	; (800499c <menu+0x3634>)
 80047e8:	210d      	movs	r1, #13
 80047ea:	2002      	movs	r0, #2
 80047ec:	f003 fad6 	bl	8007d9c <lcd_print>

			bekle();
 80047f0:	f000 f964 	bl	8004abc <bekle>
		}
	}

	if (menuSayac == 33) {
 80047f4:	4b64      	ldr	r3, [pc, #400]	; (8004988 <menu+0x3620>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b21      	cmp	r3, #33	; 0x21
 80047fa:	d14f      	bne.n	800489c <menu+0x3534>
		calismaSayModu = 0;
 80047fc:	4b63      	ldr	r3, [pc, #396]	; (800498c <menu+0x3624>)
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004802:	4a67      	ldr	r2, [pc, #412]	; (80049a0 <menu+0x3638>)
 8004804:	2101      	movs	r1, #1
 8004806:	2001      	movs	r0, #1
 8004808:	f003 fac8 	bl	8007d9c <lcd_print>
		if(strlen(wifiSSID) <=16) {
 800480c:	4865      	ldr	r0, [pc, #404]	; (80049a4 <menu+0x363c>)
 800480e:	f7fb fd09 	bl	8000224 <strlen>
 8004812:	4603      	mov	r3, r0
 8004814:	2b10      	cmp	r3, #16
 8004816:	d80f      	bhi.n	8004838 <menu+0x34d0>
			lcd_print(2, 1, wifiSSID);
 8004818:	4a62      	ldr	r2, [pc, #392]	; (80049a4 <menu+0x363c>)
 800481a:	2101      	movs	r1, #1
 800481c:	2002      	movs	r0, #2
 800481e:	f003 fabd 	bl	8007d9c <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004822:	4860      	ldr	r0, [pc, #384]	; (80049a4 <menu+0x363c>)
 8004824:	f7fb fcfe 	bl	8000224 <strlen>
 8004828:	4603      	mov	r3, r0
 800482a:	3301      	adds	r3, #1
 800482c:	4a5e      	ldr	r2, [pc, #376]	; (80049a8 <menu+0x3640>)
 800482e:	4619      	mov	r1, r3
 8004830:	2002      	movs	r0, #2
 8004832:	f003 fab3 	bl	8007d9c <lcd_print>
 8004836:	e005      	b.n	8004844 <menu+0x34dc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004838:	2300      	movs	r3, #0
 800483a:	2202      	movs	r2, #2
 800483c:	2101      	movs	r1, #1
 800483e:	4859      	ldr	r0, [pc, #356]	; (80049a4 <menu+0x363c>)
 8004840:	f7fc fcd6 	bl	80011f0 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004844:	2102      	movs	r1, #2
 8004846:	484b      	ldr	r0, [pc, #300]	; (8004974 <menu+0x360c>)
 8004848:	f004 fdd4 	bl	80093f4 <HAL_GPIO_ReadPin>
 800484c:	4603      	mov	r3, r0
 800484e:	2b01      	cmp	r3, #1
 8004850:	d124      	bne.n	800489c <menu+0x3534>
 8004852:	2104      	movs	r1, #4
 8004854:	4847      	ldr	r0, [pc, #284]	; (8004974 <menu+0x360c>)
 8004856:	f004 fdcd 	bl	80093f4 <HAL_GPIO_ReadPin>
 800485a:	4603      	mov	r3, r0
 800485c:	2b01      	cmp	r3, #1
 800485e:	d11d      	bne.n	800489c <menu+0x3534>
 8004860:	4b45      	ldr	r3, [pc, #276]	; (8004978 <menu+0x3610>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	f083 0301 	eor.w	r3, r3, #1
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d016      	beq.n	800489c <menu+0x3534>
			takeWifiSSID(0);
 800486e:	2000      	movs	r0, #0
 8004870:	f002 fb9a 	bl	8006fa8 <takeWifiSSID>

			HAL_Delay(100);
 8004874:	2064      	movs	r0, #100	; 0x64
 8004876:	f003 ffed 	bl	8008854 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 800487a:	4a4a      	ldr	r2, [pc, #296]	; (80049a4 <menu+0x363c>)
 800487c:	2101      	movs	r1, #1
 800487e:	2002      	movs	r0, #2
 8004880:	f003 fa8c 	bl	8007d9c <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004884:	4847      	ldr	r0, [pc, #284]	; (80049a4 <menu+0x363c>)
 8004886:	f7fb fccd 	bl	8000224 <strlen>
 800488a:	4603      	mov	r3, r0
 800488c:	3301      	adds	r3, #1
 800488e:	4a46      	ldr	r2, [pc, #280]	; (80049a8 <menu+0x3640>)
 8004890:	4619      	mov	r1, r3
 8004892:	2002      	movs	r0, #2
 8004894:	f003 fa82 	bl	8007d9c <lcd_print>

			bekle();
 8004898:	f000 f910 	bl	8004abc <bekle>
		}
	}

	if (menuSayac == 34) {
 800489c:	4b3a      	ldr	r3, [pc, #232]	; (8004988 <menu+0x3620>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b22      	cmp	r3, #34	; 0x22
 80048a2:	d14f      	bne.n	8004944 <menu+0x35dc>
		calismaSayModu = 0;
 80048a4:	4b39      	ldr	r3, [pc, #228]	; (800498c <menu+0x3624>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80048aa:	4a40      	ldr	r2, [pc, #256]	; (80049ac <menu+0x3644>)
 80048ac:	2101      	movs	r1, #1
 80048ae:	2001      	movs	r0, #1
 80048b0:	f003 fa74 	bl	8007d9c <lcd_print>
		if(strlen(wifiPass) <= 16) {
 80048b4:	483e      	ldr	r0, [pc, #248]	; (80049b0 <menu+0x3648>)
 80048b6:	f7fb fcb5 	bl	8000224 <strlen>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b10      	cmp	r3, #16
 80048be:	d80f      	bhi.n	80048e0 <menu+0x3578>
			lcd_print(2, 1, wifiPass);
 80048c0:	4a3b      	ldr	r2, [pc, #236]	; (80049b0 <menu+0x3648>)
 80048c2:	2101      	movs	r1, #1
 80048c4:	2002      	movs	r0, #2
 80048c6:	f003 fa69 	bl	8007d9c <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80048ca:	4839      	ldr	r0, [pc, #228]	; (80049b0 <menu+0x3648>)
 80048cc:	f7fb fcaa 	bl	8000224 <strlen>
 80048d0:	4603      	mov	r3, r0
 80048d2:	3301      	adds	r3, #1
 80048d4:	4a34      	ldr	r2, [pc, #208]	; (80049a8 <menu+0x3640>)
 80048d6:	4619      	mov	r1, r3
 80048d8:	2002      	movs	r0, #2
 80048da:	f003 fa5f 	bl	8007d9c <lcd_print>
 80048de:	e005      	b.n	80048ec <menu+0x3584>
		} else {
			slideText(wifiPass, 1, 2, 1);
 80048e0:	2301      	movs	r3, #1
 80048e2:	2202      	movs	r2, #2
 80048e4:	2101      	movs	r1, #1
 80048e6:	4832      	ldr	r0, [pc, #200]	; (80049b0 <menu+0x3648>)
 80048e8:	f7fc fc82 	bl	80011f0 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048ec:	2102      	movs	r1, #2
 80048ee:	4821      	ldr	r0, [pc, #132]	; (8004974 <menu+0x360c>)
 80048f0:	f004 fd80 	bl	80093f4 <HAL_GPIO_ReadPin>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d124      	bne.n	8004944 <menu+0x35dc>
 80048fa:	2104      	movs	r1, #4
 80048fc:	481d      	ldr	r0, [pc, #116]	; (8004974 <menu+0x360c>)
 80048fe:	f004 fd79 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004902:	4603      	mov	r3, r0
 8004904:	2b01      	cmp	r3, #1
 8004906:	d11d      	bne.n	8004944 <menu+0x35dc>
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <menu+0x3610>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	f083 0301 	eor.w	r3, r3, #1
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d016      	beq.n	8004944 <menu+0x35dc>
			takeWifiPass(0);
 8004916:	2000      	movs	r0, #0
 8004918:	f002 fd28 	bl	800736c <takeWifiPass>

			HAL_Delay(50);
 800491c:	2032      	movs	r0, #50	; 0x32
 800491e:	f003 ff99 	bl	8008854 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004922:	4a23      	ldr	r2, [pc, #140]	; (80049b0 <menu+0x3648>)
 8004924:	2101      	movs	r1, #1
 8004926:	2002      	movs	r0, #2
 8004928:	f003 fa38 	bl	8007d9c <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 800492c:	4820      	ldr	r0, [pc, #128]	; (80049b0 <menu+0x3648>)
 800492e:	f7fb fc79 	bl	8000224 <strlen>
 8004932:	4603      	mov	r3, r0
 8004934:	3301      	adds	r3, #1
 8004936:	4a1c      	ldr	r2, [pc, #112]	; (80049a8 <menu+0x3640>)
 8004938:	4619      	mov	r1, r3
 800493a:	2002      	movs	r0, #2
 800493c:	f003 fa2e 	bl	8007d9c <lcd_print>

			bekle();
 8004940:	f000 f8bc 	bl	8004abc <bekle>
		}
	}

	if (menuSayac == 35) {
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <menu+0x3620>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b23      	cmp	r3, #35	; 0x23
 800494a:	d157      	bne.n	80049fc <menu+0x3694>
		if(dilSecim == 0) {
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <menu+0x3604>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d133      	bne.n	80049bc <menu+0x3654>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004954:	4a17      	ldr	r2, [pc, #92]	; (80049b4 <menu+0x364c>)
 8004956:	2101      	movs	r1, #1
 8004958:	2001      	movs	r0, #1
 800495a:	f003 fa1f 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 800495e:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <menu+0x3650>)
 8004960:	2101      	movs	r1, #1
 8004962:	2002      	movs	r0, #2
 8004964:	f003 fa1a 	bl	8007d9c <lcd_print>
 8004968:	e036      	b.n	80049d8 <menu+0x3670>
 800496a:	bf00      	nop
 800496c:	20000245 	.word	0x20000245
 8004970:	0800d40c 	.word	0x0800d40c
 8004974:	40010800 	.word	0x40010800
 8004978:	20000253 	.word	0x20000253
 800497c:	20000243 	.word	0x20000243
 8004980:	20000128 	.word	0x20000128
 8004984:	20000250 	.word	0x20000250
 8004988:	20000224 	.word	0x20000224
 800498c:	20000244 	.word	0x20000244
 8004990:	0800db54 	.word	0x0800db54
 8004994:	0800db68 	.word	0x0800db68
 8004998:	200001a0 	.word	0x200001a0
 800499c:	0800db7c 	.word	0x0800db7c
 80049a0:	0800db84 	.word	0x0800db84
 80049a4:	200001ac 	.word	0x200001ac
 80049a8:	20000018 	.word	0x20000018
 80049ac:	0800db98 	.word	0x0800db98
 80049b0:	200001c0 	.word	0x200001c0
 80049b4:	0800dbac 	.word	0x0800dbac
 80049b8:	0800dbc0 	.word	0x0800dbc0
		} else if(dilSecim == 1) {
 80049bc:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <menu+0x3698>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d109      	bne.n	80049d8 <menu+0x3670>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80049c4:	4a0f      	ldr	r2, [pc, #60]	; (8004a04 <menu+0x369c>)
 80049c6:	2101      	movs	r1, #1
 80049c8:	2001      	movs	r0, #1
 80049ca:	f003 f9e7 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80049ce:	4a0e      	ldr	r2, [pc, #56]	; (8004a08 <menu+0x36a0>)
 80049d0:	2101      	movs	r1, #1
 80049d2:	2002      	movs	r0, #2
 80049d4:	f003 f9e2 	bl	8007d9c <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80049d8:	2108      	movs	r1, #8
 80049da:	480c      	ldr	r0, [pc, #48]	; (8004a0c <menu+0x36a4>)
 80049dc:	f004 fd0a 	bl	80093f4 <HAL_GPIO_ReadPin>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d10a      	bne.n	80049fc <menu+0x3694>
			menuGiris = 0;
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <menu+0x36a8>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 80049ec:	f003 fa02 	bl	8007df4 <lcd_clear>
			HAL_Delay(500);
 80049f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049f4:	f003 ff2e 	bl	8008854 <HAL_Delay>
			NVIC_SystemReset();
 80049f8:	f7fc fca0 	bl	800133c <__NVIC_SystemReset>
		}
	}
}
 80049fc:	bf00      	nop
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000245 	.word	0x20000245
 8004a04:	0800dbd4 	.word	0x0800dbd4
 8004a08:	0800dbe8 	.word	0x0800dbe8
 8004a0c:	40010800 	.word	0x40010800
 8004a10:	20000241 	.word	0x20000241

08004a14 <lcdUpdate>:
#include "main.h"
#include "Process.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"

void lcdUpdate(uint8_t y) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d105      	bne.n	8004a30 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004a24:	4a22      	ldr	r2, [pc, #136]	; (8004ab0 <lcdUpdate+0x9c>)
 8004a26:	2101      	movs	r1, #1
 8004a28:	2002      	movs	r0, #2
 8004a2a:	f003 f9b7 	bl	8007d9c <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004a2e:	e03b      	b.n	8004aa8 <lcdUpdate+0x94>
	} else if(y==2) {
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d105      	bne.n	8004a42 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004a36:	4a1e      	ldr	r2, [pc, #120]	; (8004ab0 <lcdUpdate+0x9c>)
 8004a38:	2102      	movs	r1, #2
 8004a3a:	2002      	movs	r0, #2
 8004a3c:	f003 f9ae 	bl	8007d9c <lcd_print>
}
 8004a40:	e032      	b.n	8004aa8 <lcdUpdate+0x94>
	} else if(y==3) {
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d105      	bne.n	8004a54 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004a48:	4a19      	ldr	r2, [pc, #100]	; (8004ab0 <lcdUpdate+0x9c>)
 8004a4a:	2103      	movs	r1, #3
 8004a4c:	2002      	movs	r0, #2
 8004a4e:	f003 f9a5 	bl	8007d9c <lcd_print>
}
 8004a52:	e029      	b.n	8004aa8 <lcdUpdate+0x94>
	} else if(y==4) {
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d105      	bne.n	8004a66 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004a5a:	4a15      	ldr	r2, [pc, #84]	; (8004ab0 <lcdUpdate+0x9c>)
 8004a5c:	2104      	movs	r1, #4
 8004a5e:	2002      	movs	r0, #2
 8004a60:	f003 f99c 	bl	8007d9c <lcd_print>
}
 8004a64:	e020      	b.n	8004aa8 <lcdUpdate+0x94>
	} else if(y==5) {
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	2b05      	cmp	r3, #5
 8004a6a:	d105      	bne.n	8004a78 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004a6c:	4a10      	ldr	r2, [pc, #64]	; (8004ab0 <lcdUpdate+0x9c>)
 8004a6e:	2105      	movs	r1, #5
 8004a70:	2002      	movs	r0, #2
 8004a72:	f003 f993 	bl	8007d9c <lcd_print>
}
 8004a76:	e017      	b.n	8004aa8 <lcdUpdate+0x94>
	} else if(y==6) {
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d105      	bne.n	8004a8a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004a7e:	4a0c      	ldr	r2, [pc, #48]	; (8004ab0 <lcdUpdate+0x9c>)
 8004a80:	2106      	movs	r1, #6
 8004a82:	2002      	movs	r0, #2
 8004a84:	f003 f98a 	bl	8007d9c <lcd_print>
}
 8004a88:	e00e      	b.n	8004aa8 <lcdUpdate+0x94>
	} else if (y==7) {
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	2b07      	cmp	r3, #7
 8004a8e:	d10b      	bne.n	8004aa8 <lcdUpdate+0x94>
		lcd_clear();
 8004a90:	f003 f9b0 	bl	8007df4 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004a94:	4a07      	ldr	r2, [pc, #28]	; (8004ab4 <lcdUpdate+0xa0>)
 8004a96:	2104      	movs	r1, #4
 8004a98:	2001      	movs	r0, #1
 8004a9a:	f003 f97f 	bl	8007d9c <lcd_print>
		lcd_print(2, 6, "RUN");
 8004a9e:	4a06      	ldr	r2, [pc, #24]	; (8004ab8 <lcdUpdate+0xa4>)
 8004aa0:	2106      	movs	r1, #6
 8004aa2:	2002      	movs	r0, #2
 8004aa4:	f003 f97a 	bl	8007d9c <lcd_print>
}
 8004aa8:	bf00      	nop
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	0800dbfc 	.word	0x0800dbfc
 8004ab4:	0800dc00 	.word	0x0800dc00
 8004ab8:	0800dc08 	.word	0x0800dc08

08004abc <bekle>:

void bekle() {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
	timer1=millis;
 8004ac0:	4b47      	ldr	r3, [pc, #284]	; (8004be0 <bekle+0x124>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a47      	ldr	r2, [pc, #284]	; (8004be4 <bekle+0x128>)
 8004ac6:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ac8:	e002      	b.n	8004ad0 <bekle+0x14>
    	butonKontrol = 1;
 8004aca:	4b47      	ldr	r3, [pc, #284]	; (8004be8 <bekle+0x12c>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	4846      	ldr	r0, [pc, #280]	; (8004bec <bekle+0x130>)
 8004ad4:	f004 fc8e 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d109      	bne.n	8004af2 <bekle+0x36>
 8004ade:	4b40      	ldr	r3, [pc, #256]	; (8004be0 <bekle+0x124>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4b40      	ldr	r3, [pc, #256]	; (8004be4 <bekle+0x128>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d0ef      	beq.n	8004aca <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004aea:	e002      	b.n	8004af2 <bekle+0x36>
    	butonKontrol = 1;
 8004aec:	4b3e      	ldr	r3, [pc, #248]	; (8004be8 <bekle+0x12c>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004af2:	2108      	movs	r1, #8
 8004af4:	483e      	ldr	r0, [pc, #248]	; (8004bf0 <bekle+0x134>)
 8004af6:	f004 fc7d 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d109      	bne.n	8004b14 <bekle+0x58>
 8004b00:	4b37      	ldr	r3, [pc, #220]	; (8004be0 <bekle+0x124>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4b37      	ldr	r3, [pc, #220]	; (8004be4 <bekle+0x128>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d0ef      	beq.n	8004aec <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b0c:	e002      	b.n	8004b14 <bekle+0x58>
    	butonKontrol = 1;
 8004b0e:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <bekle+0x12c>)
 8004b10:	2201      	movs	r2, #1
 8004b12:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b14:	2102      	movs	r1, #2
 8004b16:	4835      	ldr	r0, [pc, #212]	; (8004bec <bekle+0x130>)
 8004b18:	f004 fc6c 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d109      	bne.n	8004b36 <bekle+0x7a>
 8004b22:	4b2f      	ldr	r3, [pc, #188]	; (8004be0 <bekle+0x124>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b2f      	ldr	r3, [pc, #188]	; (8004be4 <bekle+0x128>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d0ef      	beq.n	8004b0e <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b2e:	e002      	b.n	8004b36 <bekle+0x7a>
    	butonKontrol = 1;
 8004b30:	4b2d      	ldr	r3, [pc, #180]	; (8004be8 <bekle+0x12c>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b36:	2104      	movs	r1, #4
 8004b38:	482c      	ldr	r0, [pc, #176]	; (8004bec <bekle+0x130>)
 8004b3a:	f004 fc5b 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d109      	bne.n	8004b58 <bekle+0x9c>
 8004b44:	4b26      	ldr	r3, [pc, #152]	; (8004be0 <bekle+0x124>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b26      	ldr	r3, [pc, #152]	; (8004be4 <bekle+0x128>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d0ef      	beq.n	8004b30 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b50:	e002      	b.n	8004b58 <bekle+0x9c>
    	butonKontrol = 1;
 8004b52:	4b25      	ldr	r3, [pc, #148]	; (8004be8 <bekle+0x12c>)
 8004b54:	2201      	movs	r2, #1
 8004b56:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b58:	2108      	movs	r1, #8
 8004b5a:	4824      	ldr	r0, [pc, #144]	; (8004bec <bekle+0x130>)
 8004b5c:	f004 fc4a 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d109      	bne.n	8004b7a <bekle+0xbe>
 8004b66:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <bekle+0x124>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b1e      	ldr	r3, [pc, #120]	; (8004be4 <bekle+0x128>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d0ef      	beq.n	8004b52 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b72:	e002      	b.n	8004b7a <bekle+0xbe>
    	butonKontrol = 1;
 8004b74:	4b1c      	ldr	r3, [pc, #112]	; (8004be8 <bekle+0x12c>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b7a:	2180      	movs	r1, #128	; 0x80
 8004b7c:	481c      	ldr	r0, [pc, #112]	; (8004bf0 <bekle+0x134>)
 8004b7e:	f004 fc39 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d109      	bne.n	8004b9c <bekle+0xe0>
 8004b88:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <bekle+0x124>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b15      	ldr	r3, [pc, #84]	; (8004be4 <bekle+0x128>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d0ef      	beq.n	8004b74 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b94:	e002      	b.n	8004b9c <bekle+0xe0>
    	butonKontrol = 1;
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <bekle+0x12c>)
 8004b98:	2201      	movs	r2, #1
 8004b9a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ba0:	4813      	ldr	r0, [pc, #76]	; (8004bf0 <bekle+0x134>)
 8004ba2:	f004 fc27 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <bekle+0x104>
 8004bac:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <bekle+0x124>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <bekle+0x128>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d0ee      	beq.n	8004b96 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bb8:	e002      	b.n	8004bc0 <bekle+0x104>
    	butonKontrol = 1;
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <bekle+0x12c>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bc4:	480a      	ldr	r0, [pc, #40]	; (8004bf0 <bekle+0x134>)
 8004bc6:	f004 fc15 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d105      	bne.n	8004bdc <bekle+0x120>
 8004bd0:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <bekle+0x124>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4b03      	ldr	r3, [pc, #12]	; (8004be4 <bekle+0x128>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d0ee      	beq.n	8004bba <bekle+0xfe>
    }

}
 8004bdc:	bf00      	nop
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000200 	.word	0x20000200
 8004be4:	20000208 	.word	0x20000208
 8004be8:	20000253 	.word	0x20000253
 8004bec:	40010800 	.word	0x40010800
 8004bf0:	40011000 	.word	0x40011000

08004bf4 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004bf8:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <checkLCDBacklight+0x24>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <checkLCDBacklight+0x28>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b3b      	cmp	r3, #59	; 0x3b
 8004c04:	d903      	bls.n	8004c0e <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004c06:	2000      	movs	r0, #0
 8004c08:	f003 f914 	bl	8007e34 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004c0c:	e002      	b.n	8004c14 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004c0e:	2001      	movs	r0, #1
 8004c10:	f003 f910 	bl	8007e34 <lcd_backlight>
}
 8004c14:	bf00      	nop
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000200 	.word	0x20000200
 8004c1c:	2000021c 	.word	0x2000021c

08004c20 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004c24:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <checkBasincSalteri+0x54>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d102      	bne.n	8004c32 <checkBasincSalteri+0x12>
		basincVar=1;
 8004c2c:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <checkBasincSalteri+0x58>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004c32:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <checkBasincSalteri+0x54>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d119      	bne.n	8004c6e <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c3e:	480f      	ldr	r0, [pc, #60]	; (8004c7c <checkBasincSalteri+0x5c>)
 8004c40:	f004 fbd8 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10a      	bne.n	8004c60 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <checkBasincSalteri+0x60>)
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <checkBasincSalteri+0x64>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d90a      	bls.n	8004c6e <checkBasincSalteri+0x4e>
				basincVar=1;
 8004c58:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <checkBasincSalteri+0x58>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004c5e:	e006      	b.n	8004c6e <checkBasincSalteri+0x4e>
			timer5=millis;
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <checkBasincSalteri+0x60>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a07      	ldr	r2, [pc, #28]	; (8004c84 <checkBasincSalteri+0x64>)
 8004c66:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <checkBasincSalteri+0x58>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	701a      	strb	r2, [r3, #0]
}
 8004c6e:	bf00      	nop
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	2000022b 	.word	0x2000022b
 8004c78:	20000227 	.word	0x20000227
 8004c7c:	40011000 	.word	0x40011000
 8004c80:	20000200 	.word	0x20000200
 8004c84:	20000218 	.word	0x20000218

08004c88 <checkBasGonder>:

void checkBasGonder() {
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004c8c:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <checkBasGonder+0x74>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d10b      	bne.n	8004cac <checkBasGonder+0x24>
 8004c94:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <checkBasGonder+0x78>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <checkBasGonder+0x24>
 8004c9c:	4b19      	ldr	r3, [pc, #100]	; (8004d04 <checkBasGonder+0x7c>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004ca4:	4b18      	ldr	r3, [pc, #96]	; (8004d08 <checkBasGonder+0x80>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e009      	b.n	8004cc0 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004cac:	4b14      	ldr	r3, [pc, #80]	; (8004d00 <checkBasGonder+0x78>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	f083 0301 	eor.w	r3, r3, #1
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004cba:	4b13      	ldr	r3, [pc, #76]	; (8004d08 <checkBasGonder+0x80>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004cc0:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <checkBasGonder+0x74>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d10b      	bne.n	8004ce0 <checkBasGonder+0x58>
 8004cc8:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <checkBasGonder+0x84>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <checkBasGonder+0x58>
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <checkBasGonder+0x7c>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d103      	bne.n	8004ce0 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <checkBasGonder+0x88>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004cde:	e009      	b.n	8004cf4 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <checkBasGonder+0x84>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	f083 0301 	eor.w	r3, r3, #1
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004cee:	4b08      	ldr	r3, [pc, #32]	; (8004d10 <checkBasGonder+0x88>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr
 8004cfc:	20000225 	.word	0x20000225
 8004d00:	20000259 	.word	0x20000259
 8004d04:	20000233 	.word	0x20000233
 8004d08:	20000260 	.word	0x20000260
 8004d0c:	2000025c 	.word	0x2000025c
 8004d10:	20000261 	.word	0x20000261

08004d14 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004d18:	4b24      	ldr	r3, [pc, #144]	; (8004dac <checkKapiSecimleri+0x98>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d102      	bne.n	8004d26 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004d20:	4b23      	ldr	r3, [pc, #140]	; (8004db0 <checkKapiSecimleri+0x9c>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004d26:	4b21      	ldr	r3, [pc, #132]	; (8004dac <checkKapiSecimleri+0x98>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d10e      	bne.n	8004d4c <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d32:	4820      	ldr	r0, [pc, #128]	; (8004db4 <checkKapiSecimleri+0xa0>)
 8004d34:	f004 fb5e 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d103      	bne.n	8004d46 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004d3e:	4b1c      	ldr	r3, [pc, #112]	; (8004db0 <checkKapiSecimleri+0x9c>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	e002      	b.n	8004d4c <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004d46:	4b1a      	ldr	r3, [pc, #104]	; (8004db0 <checkKapiSecimleri+0x9c>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004d4c:	4b17      	ldr	r3, [pc, #92]	; (8004dac <checkKapiSecimleri+0x98>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d10e      	bne.n	8004d72 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d58:	4816      	ldr	r0, [pc, #88]	; (8004db4 <checkKapiSecimleri+0xa0>)
 8004d5a:	f004 fb4b 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004d64:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <checkKapiSecimleri+0x9c>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e002      	b.n	8004d72 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004d6c:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <checkKapiSecimleri+0x9c>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004d72:	4b0e      	ldr	r3, [pc, #56]	; (8004dac <checkKapiSecimleri+0x98>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d116      	bne.n	8004da8 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d7e:	480d      	ldr	r0, [pc, #52]	; (8004db4 <checkKapiSecimleri+0xa0>)
 8004d80:	f004 fb38 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <checkKapiSecimleri+0x8e>
 8004d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d8e:	4809      	ldr	r0, [pc, #36]	; (8004db4 <checkKapiSecimleri+0xa0>)
 8004d90:	f004 fb30 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <checkKapiSecimleri+0x9c>)
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004da0:	e002      	b.n	8004da8 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004da2:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <checkKapiSecimleri+0x9c>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
}
 8004da8:	bf00      	nop
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	2000022c 	.word	0x2000022c
 8004db0:	20000277 	.word	0x20000277
 8004db4:	40010800 	.word	0x40010800

08004db8 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004dbc:	4b62      	ldr	r3, [pc, #392]	; (8004f48 <checkAktifCalisma+0x190>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f041 833e 	bne.w	8006442 <checkAktifCalisma+0x168a>
 8004dc6:	4b61      	ldr	r3, [pc, #388]	; (8004f4c <checkAktifCalisma+0x194>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f041 8339 	bne.w	8006442 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004dd0:	4b5f      	ldr	r3, [pc, #380]	; (8004f50 <checkAktifCalisma+0x198>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d11a      	bne.n	8004e0e <checkAktifCalisma+0x56>
 8004dd8:	4b5e      	ldr	r3, [pc, #376]	; (8004f54 <checkAktifCalisma+0x19c>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d116      	bne.n	8004e0e <checkAktifCalisma+0x56>
 8004de0:	4b5d      	ldr	r3, [pc, #372]	; (8004f58 <checkAktifCalisma+0x1a0>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <checkAktifCalisma+0x46>
 8004de8:	4b5c      	ldr	r3, [pc, #368]	; (8004f5c <checkAktifCalisma+0x1a4>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	f083 0301 	eor.w	r3, r3, #1
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <checkAktifCalisma+0x46>
 8004df6:	4b5a      	ldr	r3, [pc, #360]	; (8004f60 <checkAktifCalisma+0x1a8>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d007      	beq.n	8004e0e <checkAktifCalisma+0x56>
 8004dfe:	4b59      	ldr	r3, [pc, #356]	; (8004f64 <checkAktifCalisma+0x1ac>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d018      	beq.n	8004e38 <checkAktifCalisma+0x80>
 8004e06:	4b58      	ldr	r3, [pc, #352]	; (8004f68 <checkAktifCalisma+0x1b0>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d114      	bne.n	8004e38 <checkAktifCalisma+0x80>
 8004e0e:	4b57      	ldr	r3, [pc, #348]	; (8004f6c <checkAktifCalisma+0x1b4>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d010      	beq.n	8004e38 <checkAktifCalisma+0x80>
 8004e16:	4b56      	ldr	r3, [pc, #344]	; (8004f70 <checkAktifCalisma+0x1b8>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00c      	beq.n	8004e38 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e24:	4853      	ldr	r0, [pc, #332]	; (8004f74 <checkAktifCalisma+0x1bc>)
 8004e26:	f004 fafc 	bl	8009422 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004e2a:	4b53      	ldr	r3, [pc, #332]	; (8004f78 <checkAktifCalisma+0x1c0>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004e30:	4b52      	ldr	r3, [pc, #328]	; (8004f7c <checkAktifCalisma+0x1c4>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	e008      	b.n	8004e4a <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e3e:	484d      	ldr	r0, [pc, #308]	; (8004f74 <checkAktifCalisma+0x1bc>)
 8004e40:	f004 faef 	bl	8009422 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004e44:	4b4c      	ldr	r3, [pc, #304]	; (8004f78 <checkAktifCalisma+0x1c0>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004e4a:	4b40      	ldr	r3, [pc, #256]	; (8004f4c <checkAktifCalisma+0x194>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d160      	bne.n	8004f14 <checkAktifCalisma+0x15c>
 8004e52:	4b46      	ldr	r3, [pc, #280]	; (8004f6c <checkAktifCalisma+0x1b4>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d05c      	beq.n	8004f14 <checkAktifCalisma+0x15c>
 8004e5a:	4b45      	ldr	r3, [pc, #276]	; (8004f70 <checkAktifCalisma+0x1b8>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d058      	beq.n	8004f14 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004e62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e66:	4843      	ldr	r0, [pc, #268]	; (8004f74 <checkAktifCalisma+0x1bc>)
 8004e68:	f004 fac4 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <checkAktifCalisma+0xc2>
 8004e72:	4b43      	ldr	r3, [pc, #268]	; (8004f80 <checkAktifCalisma+0x1c8>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d04c      	beq.n	8004f14 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e7a:	2102      	movs	r1, #2
 8004e7c:	4841      	ldr	r0, [pc, #260]	; (8004f84 <checkAktifCalisma+0x1cc>)
 8004e7e:	f004 fab9 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d145      	bne.n	8004f14 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004e88:	4b3f      	ldr	r3, [pc, #252]	; (8004f88 <checkAktifCalisma+0x1d0>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d041      	beq.n	8004f14 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004e90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e94:	4837      	ldr	r0, [pc, #220]	; (8004f74 <checkAktifCalisma+0x1bc>)
 8004e96:	f004 faad 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d10e      	bne.n	8004ebe <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004ea0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ea4:	4833      	ldr	r0, [pc, #204]	; (8004f74 <checkAktifCalisma+0x1bc>)
 8004ea6:	f004 faa5 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d106      	bne.n	8004ebe <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004eb0:	2140      	movs	r1, #64	; 0x40
 8004eb2:	4834      	ldr	r0, [pc, #208]	; (8004f84 <checkAktifCalisma+0x1cc>)
 8004eb4:	f004 fa9e 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d003      	beq.n	8004ec6 <checkAktifCalisma+0x10e>
 8004ebe:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <checkAktifCalisma+0x198>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d026      	beq.n	8004f14 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004ec6:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <checkAktifCalisma+0x1a0>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	f083 0301 	eor.w	r3, r3, #1
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01f      	beq.n	8004f14 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004ed4:	4b1f      	ldr	r3, [pc, #124]	; (8004f54 <checkAktifCalisma+0x19c>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	f083 0301 	eor.w	r3, r3, #1
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d018      	beq.n	8004f14 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004ee2:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <checkAktifCalisma+0x1ac>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	f083 0301 	eor.w	r3, r3, #1
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d011      	beq.n	8004f14 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004ef0:	4b26      	ldr	r3, [pc, #152]	; (8004f8c <checkAktifCalisma+0x1d4>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	f083 0301 	eor.w	r3, r3, #1
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004efe:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <checkAktifCalisma+0x1d8>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	f083 0301 	eor.w	r3, r3, #1
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004f0c:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <checkAktifCalisma+0x198>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	e002      	b.n	8004f1a <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004f14:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <checkAktifCalisma+0x198>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004f1a:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <checkAktifCalisma+0x198>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d03a      	beq.n	8004f98 <checkAktifCalisma+0x1e0>
 8004f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f26:	4817      	ldr	r0, [pc, #92]	; (8004f84 <checkAktifCalisma+0x1cc>)
 8004f28:	f004 fa64 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d132      	bne.n	8004f98 <checkAktifCalisma+0x1e0>
 8004f32:	4b18      	ldr	r3, [pc, #96]	; (8004f94 <checkAktifCalisma+0x1dc>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d02e      	beq.n	8004f98 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f40:	480c      	ldr	r0, [pc, #48]	; (8004f74 <checkAktifCalisma+0x1bc>)
 8004f42:	f004 fa6e 	bl	8009422 <HAL_GPIO_WritePin>
 8004f46:	e02d      	b.n	8004fa4 <checkAktifCalisma+0x1ec>
 8004f48:	20000242 	.word	0x20000242
 8004f4c:	20000241 	.word	0x20000241
 8004f50:	20000259 	.word	0x20000259
 8004f54:	2000025a 	.word	0x2000025a
 8004f58:	2000025c 	.word	0x2000025c
 8004f5c:	20000254 	.word	0x20000254
 8004f60:	20000237 	.word	0x20000237
 8004f64:	2000025b 	.word	0x2000025b
 8004f68:	20000236 	.word	0x20000236
 8004f6c:	20000276 	.word	0x20000276
 8004f70:	20000277 	.word	0x20000277
 8004f74:	40010c00 	.word	0x40010c00
 8004f78:	20000278 	.word	0x20000278
 8004f7c:	20000263 	.word	0x20000263
 8004f80:	20000260 	.word	0x20000260
 8004f84:	40011000 	.word	0x40011000
 8004f88:	20000227 	.word	0x20000227
 8004f8c:	2000025e 	.word	0x2000025e
 8004f90:	2000025f 	.word	0x2000025f
 8004f94:	20000232 	.word	0x20000232
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f9e:	4860      	ldr	r0, [pc, #384]	; (8005120 <checkAktifCalisma+0x368>)
 8004fa0:	f004 fa3f 	bl	8009422 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004fa4:	4b5f      	ldr	r3, [pc, #380]	; (8005124 <checkAktifCalisma+0x36c>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d013      	beq.n	8004fd4 <checkAktifCalisma+0x21c>
 8004fac:	4b5e      	ldr	r3, [pc, #376]	; (8005128 <checkAktifCalisma+0x370>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d007      	beq.n	8004fc4 <checkAktifCalisma+0x20c>
 8004fb4:	4b5c      	ldr	r3, [pc, #368]	; (8005128 <checkAktifCalisma+0x370>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d003      	beq.n	8004fc4 <checkAktifCalisma+0x20c>
 8004fbc:	4b5b      	ldr	r3, [pc, #364]	; (800512c <checkAktifCalisma+0x374>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d107      	bne.n	8004fd4 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	2104      	movs	r1, #4
 8004fc8:	4855      	ldr	r0, [pc, #340]	; (8005120 <checkAktifCalisma+0x368>)
 8004fca:	f004 fa2a 	bl	8009422 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004fce:	4b58      	ldr	r3, [pc, #352]	; (8005130 <checkAktifCalisma+0x378>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004fd4:	4b56      	ldr	r3, [pc, #344]	; (8005130 <checkAktifCalisma+0x378>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d02f      	beq.n	800503c <checkAktifCalisma+0x284>
 8004fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fe0:	484f      	ldr	r0, [pc, #316]	; (8005120 <checkAktifCalisma+0x368>)
 8004fe2:	f004 fa07 	bl	80093f4 <HAL_GPIO_ReadPin>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d106      	bne.n	8004ffa <checkAktifCalisma+0x242>
 8004fec:	4b51      	ldr	r3, [pc, #324]	; (8005134 <checkAktifCalisma+0x37c>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	f083 0301 	eor.w	r3, r3, #1
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <checkAktifCalisma+0x250>
 8004ffa:	2102      	movs	r1, #2
 8004ffc:	484e      	ldr	r0, [pc, #312]	; (8005138 <checkAktifCalisma+0x380>)
 8004ffe:	f004 f9f9 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005002:	4603      	mov	r3, r0
 8005004:	2b01      	cmp	r3, #1
 8005006:	d119      	bne.n	800503c <checkAktifCalisma+0x284>
 8005008:	4b4c      	ldr	r3, [pc, #304]	; (800513c <checkAktifCalisma+0x384>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d015      	beq.n	800503c <checkAktifCalisma+0x284>
 8005010:	4b4b      	ldr	r3, [pc, #300]	; (8005140 <checkAktifCalisma+0x388>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d011      	beq.n	800503c <checkAktifCalisma+0x284>
 8005018:	4b4a      	ldr	r3, [pc, #296]	; (8005144 <checkAktifCalisma+0x38c>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00d      	beq.n	800503c <checkAktifCalisma+0x284>
 8005020:	4b49      	ldr	r3, [pc, #292]	; (8005148 <checkAktifCalisma+0x390>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	f083 0301 	eor.w	r3, r3, #1
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d006      	beq.n	800503c <checkAktifCalisma+0x284>
			timer2=millis;
 800502e:	4b47      	ldr	r3, [pc, #284]	; (800514c <checkAktifCalisma+0x394>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a47      	ldr	r2, [pc, #284]	; (8005150 <checkAktifCalisma+0x398>)
 8005034:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005036:	4b44      	ldr	r3, [pc, #272]	; (8005148 <checkAktifCalisma+0x390>)
 8005038:	2201      	movs	r2, #1
 800503a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 800503c:	4b43      	ldr	r3, [pc, #268]	; (800514c <checkAktifCalisma+0x394>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4b43      	ldr	r3, [pc, #268]	; (8005150 <checkAktifCalisma+0x398>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	4a43      	ldr	r2, [pc, #268]	; (8005154 <checkAktifCalisma+0x39c>)
 8005048:	7812      	ldrb	r2, [r2, #0]
 800504a:	4293      	cmp	r3, r2
 800504c:	d303      	bcc.n	8005056 <checkAktifCalisma+0x29e>
 800504e:	4b3e      	ldr	r3, [pc, #248]	; (8005148 <checkAktifCalisma+0x390>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d111      	bne.n	800507a <checkAktifCalisma+0x2c2>
 8005056:	4b39      	ldr	r3, [pc, #228]	; (800513c <checkAktifCalisma+0x384>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	f083 0301 	eor.w	r3, r3, #1
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <checkAktifCalisma+0x2c2>
 8005064:	4b36      	ldr	r3, [pc, #216]	; (8005140 <checkAktifCalisma+0x388>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	f083 0301 	eor.w	r3, r3, #1
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d103      	bne.n	800507a <checkAktifCalisma+0x2c2>
 8005072:	4b34      	ldr	r3, [pc, #208]	; (8005144 <checkAktifCalisma+0x38c>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10a      	bne.n	8005090 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800507a:	2200      	movs	r2, #0
 800507c:	2104      	movs	r1, #4
 800507e:	4828      	ldr	r0, [pc, #160]	; (8005120 <checkAktifCalisma+0x368>)
 8005080:	f004 f9cf 	bl	8009422 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005084:	4b2a      	ldr	r3, [pc, #168]	; (8005130 <checkAktifCalisma+0x378>)
 8005086:	2200      	movs	r2, #0
 8005088:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 800508a:	4b2f      	ldr	r3, [pc, #188]	; (8005148 <checkAktifCalisma+0x390>)
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005090:	4b31      	ldr	r3, [pc, #196]	; (8005158 <checkAktifCalisma+0x3a0>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d102      	bne.n	800509e <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005098:	4b30      	ldr	r3, [pc, #192]	; (800515c <checkAktifCalisma+0x3a4>)
 800509a:	2201      	movs	r2, #1
 800509c:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800509e:	4b2e      	ldr	r3, [pc, #184]	; (8005158 <checkAktifCalisma+0x3a0>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d116      	bne.n	80050d4 <checkAktifCalisma+0x31c>
 80050a6:	4b2e      	ldr	r3, [pc, #184]	; (8005160 <checkAktifCalisma+0x3a8>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d112      	bne.n	80050d4 <checkAktifCalisma+0x31c>
 80050ae:	2101      	movs	r1, #1
 80050b0:	4821      	ldr	r0, [pc, #132]	; (8005138 <checkAktifCalisma+0x380>)
 80050b2:	f004 f99f 	bl	80093f4 <HAL_GPIO_ReadPin>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <checkAktifCalisma+0x31c>
 80050bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050c0:	4817      	ldr	r0, [pc, #92]	; (8005120 <checkAktifCalisma+0x368>)
 80050c2:	f004 f997 	bl	80093f4 <HAL_GPIO_ReadPin>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d103      	bne.n	80050d4 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80050cc:	4b23      	ldr	r3, [pc, #140]	; (800515c <checkAktifCalisma+0x3a4>)
 80050ce:	2201      	movs	r2, #1
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	e011      	b.n	80050f8 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80050d4:	4b20      	ldr	r3, [pc, #128]	; (8005158 <checkAktifCalisma+0x3a0>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d10d      	bne.n	80050f8 <checkAktifCalisma+0x340>
 80050dc:	2101      	movs	r1, #1
 80050de:	4816      	ldr	r0, [pc, #88]	; (8005138 <checkAktifCalisma+0x380>)
 80050e0:	f004 f988 	bl	80093f4 <HAL_GPIO_ReadPin>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d106      	bne.n	80050f8 <checkAktifCalisma+0x340>
 80050ea:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <checkAktifCalisma+0x3a8>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d102      	bne.n	80050f8 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80050f2:	4b1a      	ldr	r3, [pc, #104]	; (800515c <checkAktifCalisma+0x3a4>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80050f8:	4b17      	ldr	r3, [pc, #92]	; (8005158 <checkAktifCalisma+0x3a0>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d134      	bne.n	800516a <checkAktifCalisma+0x3b2>
 8005100:	4b17      	ldr	r3, [pc, #92]	; (8005160 <checkAktifCalisma+0x3a8>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d130      	bne.n	800516a <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005108:	2101      	movs	r1, #1
 800510a:	480b      	ldr	r0, [pc, #44]	; (8005138 <checkAktifCalisma+0x380>)
 800510c:	f004 f972 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d126      	bne.n	8005164 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005116:	4b11      	ldr	r3, [pc, #68]	; (800515c <checkAktifCalisma+0x3a4>)
 8005118:	2201      	movs	r2, #1
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	e025      	b.n	800516a <checkAktifCalisma+0x3b2>
 800511e:	bf00      	nop
 8005120:	40010c00 	.word	0x40010c00
 8005124:	20000259 	.word	0x20000259
 8005128:	20000233 	.word	0x20000233
 800512c:	20000237 	.word	0x20000237
 8005130:	2000025d 	.word	0x2000025d
 8005134:	20000260 	.word	0x20000260
 8005138:	40011000 	.word	0x40011000
 800513c:	20000276 	.word	0x20000276
 8005140:	20000277 	.word	0x20000277
 8005144:	20000227 	.word	0x20000227
 8005148:	20000255 	.word	0x20000255
 800514c:	20000200 	.word	0x20000200
 8005150:	2000020c 	.word	0x2000020c
 8005154:	20000238 	.word	0x20000238
 8005158:	20000228 	.word	0x20000228
 800515c:	2000027b 	.word	0x2000027b
 8005160:	20000225 	.word	0x20000225
			} else {
				cerceveVar=0;
 8005164:	4b7f      	ldr	r3, [pc, #508]	; (8005364 <checkAktifCalisma+0x5ac>)
 8005166:	2200      	movs	r2, #0
 8005168:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800516a:	4b7f      	ldr	r3, [pc, #508]	; (8005368 <checkAktifCalisma+0x5b0>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d17c      	bne.n	800526c <checkAktifCalisma+0x4b4>
 8005172:	4b7e      	ldr	r3, [pc, #504]	; (800536c <checkAktifCalisma+0x5b4>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d078      	beq.n	800526c <checkAktifCalisma+0x4b4>
 800517a:	4b7d      	ldr	r3, [pc, #500]	; (8005370 <checkAktifCalisma+0x5b8>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d074      	beq.n	800526c <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005182:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005186:	487b      	ldr	r0, [pc, #492]	; (8005374 <checkAktifCalisma+0x5bc>)
 8005188:	f004 f934 	bl	80093f4 <HAL_GPIO_ReadPin>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <checkAktifCalisma+0x3e2>
 8005192:	4b79      	ldr	r3, [pc, #484]	; (8005378 <checkAktifCalisma+0x5c0>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d068      	beq.n	800526c <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800519a:	4b72      	ldr	r3, [pc, #456]	; (8005364 <checkAktifCalisma+0x5ac>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d064      	beq.n	800526c <checkAktifCalisma+0x4b4>
 80051a2:	4b76      	ldr	r3, [pc, #472]	; (800537c <checkAktifCalisma+0x5c4>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	f083 0301 	eor.w	r3, r3, #1
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d05d      	beq.n	800526c <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80051b0:	2104      	movs	r1, #4
 80051b2:	4873      	ldr	r0, [pc, #460]	; (8005380 <checkAktifCalisma+0x5c8>)
 80051b4:	f004 f91e 	bl	80093f4 <HAL_GPIO_ReadPin>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <checkAktifCalisma+0x40e>
 80051be:	4b71      	ldr	r3, [pc, #452]	; (8005384 <checkAktifCalisma+0x5cc>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d152      	bne.n	800526c <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80051c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051ca:	486a      	ldr	r0, [pc, #424]	; (8005374 <checkAktifCalisma+0x5bc>)
 80051cc:	f004 f912 	bl	80093f4 <HAL_GPIO_ReadPin>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d10e      	bne.n	80051f4 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80051d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051da:	4866      	ldr	r0, [pc, #408]	; (8005374 <checkAktifCalisma+0x5bc>)
 80051dc:	f004 f90a 	bl	80093f4 <HAL_GPIO_ReadPin>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d106      	bne.n	80051f4 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80051e6:	2140      	movs	r1, #64	; 0x40
 80051e8:	4865      	ldr	r0, [pc, #404]	; (8005380 <checkAktifCalisma+0x5c8>)
 80051ea:	f004 f903 	bl	80093f4 <HAL_GPIO_ReadPin>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d003      	beq.n	80051fc <checkAktifCalisma+0x444>
 80051f4:	4b64      	ldr	r3, [pc, #400]	; (8005388 <checkAktifCalisma+0x5d0>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d037      	beq.n	800526c <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80051fc:	4b63      	ldr	r3, [pc, #396]	; (800538c <checkAktifCalisma+0x5d4>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	f083 0301 	eor.w	r3, r3, #1
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d030      	beq.n	800526c <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800520a:	4b61      	ldr	r3, [pc, #388]	; (8005390 <checkAktifCalisma+0x5d8>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	f083 0301 	eor.w	r3, r3, #1
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d029      	beq.n	800526c <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005218:	4b5e      	ldr	r3, [pc, #376]	; (8005394 <checkAktifCalisma+0x5dc>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	f083 0301 	eor.w	r3, r3, #1
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d022      	beq.n	800526c <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005226:	4b5c      	ldr	r3, [pc, #368]	; (8005398 <checkAktifCalisma+0x5e0>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	f083 0301 	eor.w	r3, r3, #1
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01b      	beq.n	800526c <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005234:	4b59      	ldr	r3, [pc, #356]	; (800539c <checkAktifCalisma+0x5e4>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	f083 0301 	eor.w	r3, r3, #1
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d014      	beq.n	800526c <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005242:	4b57      	ldr	r3, [pc, #348]	; (80053a0 <checkAktifCalisma+0x5e8>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	f083 0301 	eor.w	r3, r3, #1
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00d      	beq.n	800526c <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005250:	2201      	movs	r2, #1
 8005252:	2102      	movs	r1, #2
 8005254:	4847      	ldr	r0, [pc, #284]	; (8005374 <checkAktifCalisma+0x5bc>)
 8005256:	f004 f8e4 	bl	8009422 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 800525a:	4b4b      	ldr	r3, [pc, #300]	; (8005388 <checkAktifCalisma+0x5d0>)
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005260:	4b50      	ldr	r3, [pc, #320]	; (80053a4 <checkAktifCalisma+0x5ec>)
 8005262:	2201      	movs	r2, #1
 8005264:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8005266:	4b50      	ldr	r3, [pc, #320]	; (80053a8 <checkAktifCalisma+0x5f0>)
 8005268:	2201      	movs	r2, #1
 800526a:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 800526c:	4b46      	ldr	r3, [pc, #280]	; (8005388 <checkAktifCalisma+0x5d0>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d033      	beq.n	80052dc <checkAktifCalisma+0x524>
 8005274:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005278:	483e      	ldr	r0, [pc, #248]	; (8005374 <checkAktifCalisma+0x5bc>)
 800527a:	f004 f8bb 	bl	80093f4 <HAL_GPIO_ReadPin>
 800527e:	4603      	mov	r3, r0
 8005280:	2b01      	cmp	r3, #1
 8005282:	d106      	bne.n	8005292 <checkAktifCalisma+0x4da>
 8005284:	4b3c      	ldr	r3, [pc, #240]	; (8005378 <checkAktifCalisma+0x5c0>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	f083 0301 	eor.w	r3, r3, #1
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <checkAktifCalisma+0x4f0>
 8005292:	2104      	movs	r1, #4
 8005294:	483a      	ldr	r0, [pc, #232]	; (8005380 <checkAktifCalisma+0x5c8>)
 8005296:	f004 f8ad 	bl	80093f4 <HAL_GPIO_ReadPin>
 800529a:	4603      	mov	r3, r0
 800529c:	2b01      	cmp	r3, #1
 800529e:	d11d      	bne.n	80052dc <checkAktifCalisma+0x524>
 80052a0:	4b38      	ldr	r3, [pc, #224]	; (8005384 <checkAktifCalisma+0x5cc>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d019      	beq.n	80052dc <checkAktifCalisma+0x524>
 80052a8:	4b30      	ldr	r3, [pc, #192]	; (800536c <checkAktifCalisma+0x5b4>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d015      	beq.n	80052dc <checkAktifCalisma+0x524>
 80052b0:	4b2f      	ldr	r3, [pc, #188]	; (8005370 <checkAktifCalisma+0x5b8>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d011      	beq.n	80052dc <checkAktifCalisma+0x524>
 80052b8:	4b2a      	ldr	r3, [pc, #168]	; (8005364 <checkAktifCalisma+0x5ac>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00d      	beq.n	80052dc <checkAktifCalisma+0x524>
 80052c0:	4b3a      	ldr	r3, [pc, #232]	; (80053ac <checkAktifCalisma+0x5f4>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	f083 0301 	eor.w	r3, r3, #1
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d006      	beq.n	80052dc <checkAktifCalisma+0x524>
			timer2=millis;
 80052ce:	4b38      	ldr	r3, [pc, #224]	; (80053b0 <checkAktifCalisma+0x5f8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a38      	ldr	r2, [pc, #224]	; (80053b4 <checkAktifCalisma+0x5fc>)
 80052d4:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80052d6:	4b35      	ldr	r3, [pc, #212]	; (80053ac <checkAktifCalisma+0x5f4>)
 80052d8:	2201      	movs	r2, #1
 80052da:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80052dc:	4b34      	ldr	r3, [pc, #208]	; (80053b0 <checkAktifCalisma+0x5f8>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4b34      	ldr	r3, [pc, #208]	; (80053b4 <checkAktifCalisma+0x5fc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	4a34      	ldr	r2, [pc, #208]	; (80053b8 <checkAktifCalisma+0x600>)
 80052e8:	7812      	ldrb	r2, [r2, #0]
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d303      	bcc.n	80052f6 <checkAktifCalisma+0x53e>
 80052ee:	4b2f      	ldr	r3, [pc, #188]	; (80053ac <checkAktifCalisma+0x5f4>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d114      	bne.n	8005320 <checkAktifCalisma+0x568>
 80052f6:	4b1d      	ldr	r3, [pc, #116]	; (800536c <checkAktifCalisma+0x5b4>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	f083 0301 	eor.w	r3, r3, #1
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10d      	bne.n	8005320 <checkAktifCalisma+0x568>
 8005304:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <checkAktifCalisma+0x5b8>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	f083 0301 	eor.w	r3, r3, #1
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <checkAktifCalisma+0x568>
 8005312:	4b14      	ldr	r3, [pc, #80]	; (8005364 <checkAktifCalisma+0x5ac>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	f083 0301 	eor.w	r3, r3, #1
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005320:	2200      	movs	r2, #0
 8005322:	2102      	movs	r1, #2
 8005324:	4813      	ldr	r0, [pc, #76]	; (8005374 <checkAktifCalisma+0x5bc>)
 8005326:	f004 f87c 	bl	8009422 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800532a:	4b17      	ldr	r3, [pc, #92]	; (8005388 <checkAktifCalisma+0x5d0>)
 800532c:	2200      	movs	r2, #0
 800532e:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005330:	4b1e      	ldr	r3, [pc, #120]	; (80053ac <checkAktifCalisma+0x5f4>)
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <checkAktifCalisma+0x5d0>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d040      	beq.n	80053c0 <checkAktifCalisma+0x608>
 800533e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005342:	480f      	ldr	r0, [pc, #60]	; (8005380 <checkAktifCalisma+0x5c8>)
 8005344:	f004 f856 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d138      	bne.n	80053c0 <checkAktifCalisma+0x608>
 800534e:	4b1b      	ldr	r3, [pc, #108]	; (80053bc <checkAktifCalisma+0x604>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d034      	beq.n	80053c0 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005356:	2201      	movs	r2, #1
 8005358:	2101      	movs	r1, #1
 800535a:	4806      	ldr	r0, [pc, #24]	; (8005374 <checkAktifCalisma+0x5bc>)
 800535c:	f004 f861 	bl	8009422 <HAL_GPIO_WritePin>
 8005360:	e033      	b.n	80053ca <checkAktifCalisma+0x612>
 8005362:	bf00      	nop
 8005364:	2000027b 	.word	0x2000027b
 8005368:	20000241 	.word	0x20000241
 800536c:	20000276 	.word	0x20000276
 8005370:	20000277 	.word	0x20000277
 8005374:	40010c00 	.word	0x40010c00
 8005378:	20000261 	.word	0x20000261
 800537c:	20000275 	.word	0x20000275
 8005380:	40011000 	.word	0x40011000
 8005384:	2000022a 	.word	0x2000022a
 8005388:	2000025c 	.word	0x2000025c
 800538c:	20000259 	.word	0x20000259
 8005390:	2000025d 	.word	0x2000025d
 8005394:	2000025a 	.word	0x2000025a
 8005398:	2000025b 	.word	0x2000025b
 800539c:	2000025e 	.word	0x2000025e
 80053a0:	2000025f 	.word	0x2000025f
 80053a4:	20000264 	.word	0x20000264
 80053a8:	20000285 	.word	0x20000285
 80053ac:	20000254 	.word	0x20000254
 80053b0:	20000200 	.word	0x20000200
 80053b4:	2000020c 	.word	0x2000020c
 80053b8:	20000239 	.word	0x20000239
 80053bc:	20000229 	.word	0x20000229
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80053c0:	2200      	movs	r2, #0
 80053c2:	2101      	movs	r1, #1
 80053c4:	4836      	ldr	r0, [pc, #216]	; (80054a0 <checkAktifCalisma+0x6e8>)
 80053c6:	f004 f82c 	bl	8009422 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80053ca:	4b36      	ldr	r3, [pc, #216]	; (80054a4 <checkAktifCalisma+0x6ec>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f040 8080 	bne.w	80054d4 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80053d4:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <checkAktifCalisma+0x6f0>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d003      	beq.n	80053e4 <checkAktifCalisma+0x62c>
 80053dc:	4b32      	ldr	r3, [pc, #200]	; (80054a8 <checkAktifCalisma+0x6f0>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d177      	bne.n	80054d4 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80053e4:	4b31      	ldr	r3, [pc, #196]	; (80054ac <checkAktifCalisma+0x6f4>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d073      	beq.n	80054d4 <checkAktifCalisma+0x71c>
 80053ec:	4b30      	ldr	r3, [pc, #192]	; (80054b0 <checkAktifCalisma+0x6f8>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d06f      	beq.n	80054d4 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80053f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053f8:	4829      	ldr	r0, [pc, #164]	; (80054a0 <checkAktifCalisma+0x6e8>)
 80053fa:	f003 fffb 	bl	80093f4 <HAL_GPIO_ReadPin>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d167      	bne.n	80054d4 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005404:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005408:	482a      	ldr	r0, [pc, #168]	; (80054b4 <checkAktifCalisma+0x6fc>)
 800540a:	f003 fff3 	bl	80093f4 <HAL_GPIO_ReadPin>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <checkAktifCalisma+0x664>
 8005414:	4b28      	ldr	r3, [pc, #160]	; (80054b8 <checkAktifCalisma+0x700>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d15b      	bne.n	80054d4 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800541c:	2140      	movs	r1, #64	; 0x40
 800541e:	4825      	ldr	r0, [pc, #148]	; (80054b4 <checkAktifCalisma+0x6fc>)
 8005420:	f003 ffe8 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005424:	4603      	mov	r3, r0
 8005426:	2b01      	cmp	r3, #1
 8005428:	d10f      	bne.n	800544a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800542a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800542e:	481c      	ldr	r0, [pc, #112]	; (80054a0 <checkAktifCalisma+0x6e8>)
 8005430:	f003 ffe0 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005434:	4603      	mov	r3, r0
 8005436:	2b01      	cmp	r3, #1
 8005438:	d107      	bne.n	800544a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800543a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800543e:	4818      	ldr	r0, [pc, #96]	; (80054a0 <checkAktifCalisma+0x6e8>)
 8005440:	f003 ffd8 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005444:	4603      	mov	r3, r0
 8005446:	2b01      	cmp	r3, #1
 8005448:	d003      	beq.n	8005452 <checkAktifCalisma+0x69a>
 800544a:	4b1c      	ldr	r3, [pc, #112]	; (80054bc <checkAktifCalisma+0x704>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d040      	beq.n	80054d4 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005452:	4b1b      	ldr	r3, [pc, #108]	; (80054c0 <checkAktifCalisma+0x708>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	f083 0301 	eor.w	r3, r3, #1
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d039      	beq.n	80054d4 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005460:	4b18      	ldr	r3, [pc, #96]	; (80054c4 <checkAktifCalisma+0x70c>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	f083 0301 	eor.w	r3, r3, #1
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d032      	beq.n	80054d4 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 800546e:	4b16      	ldr	r3, [pc, #88]	; (80054c8 <checkAktifCalisma+0x710>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	f083 0301 	eor.w	r3, r3, #1
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d02b      	beq.n	80054d4 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 800547c:	4b13      	ldr	r3, [pc, #76]	; (80054cc <checkAktifCalisma+0x714>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	f083 0301 	eor.w	r3, r3, #1
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d024      	beq.n	80054d4 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800548a:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <checkAktifCalisma+0x718>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	f083 0301 	eor.w	r3, r3, #1
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01d      	beq.n	80054d4 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005498:	4b08      	ldr	r3, [pc, #32]	; (80054bc <checkAktifCalisma+0x704>)
 800549a:	2201      	movs	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	e01c      	b.n	80054da <checkAktifCalisma+0x722>
 80054a0:	40010c00 	.word	0x40010c00
 80054a4:	20000241 	.word	0x20000241
 80054a8:	20000233 	.word	0x20000233
 80054ac:	20000276 	.word	0x20000276
 80054b0:	20000277 	.word	0x20000277
 80054b4:	40011000 	.word	0x40011000
 80054b8:	20000234 	.word	0x20000234
 80054bc:	2000025a 	.word	0x2000025a
 80054c0:	20000259 	.word	0x20000259
 80054c4:	2000025d 	.word	0x2000025d
 80054c8:	2000025c 	.word	0x2000025c
 80054cc:	2000025b 	.word	0x2000025b
 80054d0:	2000025f 	.word	0x2000025f
		} else {
			devmotoryukaricalisiyor=0;
 80054d4:	4b64      	ldr	r3, [pc, #400]	; (8005668 <checkAktifCalisma+0x8b0>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80054da:	4b63      	ldr	r3, [pc, #396]	; (8005668 <checkAktifCalisma+0x8b0>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d007      	beq.n	80054f2 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80054e2:	2201      	movs	r2, #1
 80054e4:	2120      	movs	r1, #32
 80054e6:	4861      	ldr	r0, [pc, #388]	; (800566c <checkAktifCalisma+0x8b4>)
 80054e8:	f003 ff9b 	bl	8009422 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80054ec:	4b60      	ldr	r3, [pc, #384]	; (8005670 <checkAktifCalisma+0x8b8>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80054f2:	4b5f      	ldr	r3, [pc, #380]	; (8005670 <checkAktifCalisma+0x8b8>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d025      	beq.n	8005546 <checkAktifCalisma+0x78e>
 80054fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054fe:	485d      	ldr	r0, [pc, #372]	; (8005674 <checkAktifCalisma+0x8bc>)
 8005500:	f003 ff78 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005504:	4603      	mov	r3, r0
 8005506:	2b01      	cmp	r3, #1
 8005508:	d007      	beq.n	800551a <checkAktifCalisma+0x762>
 800550a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800550e:	4857      	ldr	r0, [pc, #348]	; (800566c <checkAktifCalisma+0x8b4>)
 8005510:	f003 ff70 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005514:	4603      	mov	r3, r0
 8005516:	2b01      	cmp	r3, #1
 8005518:	d115      	bne.n	8005546 <checkAktifCalisma+0x78e>
 800551a:	4b57      	ldr	r3, [pc, #348]	; (8005678 <checkAktifCalisma+0x8c0>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d011      	beq.n	8005546 <checkAktifCalisma+0x78e>
 8005522:	4b56      	ldr	r3, [pc, #344]	; (800567c <checkAktifCalisma+0x8c4>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00d      	beq.n	8005546 <checkAktifCalisma+0x78e>
 800552a:	4b55      	ldr	r3, [pc, #340]	; (8005680 <checkAktifCalisma+0x8c8>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	f083 0301 	eor.w	r3, r3, #1
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	d006      	beq.n	8005546 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005538:	4b52      	ldr	r3, [pc, #328]	; (8005684 <checkAktifCalisma+0x8cc>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a52      	ldr	r2, [pc, #328]	; (8005688 <checkAktifCalisma+0x8d0>)
 800553e:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005540:	4b4f      	ldr	r3, [pc, #316]	; (8005680 <checkAktifCalisma+0x8c8>)
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005546:	4b4f      	ldr	r3, [pc, #316]	; (8005684 <checkAktifCalisma+0x8cc>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4b4f      	ldr	r3, [pc, #316]	; (8005688 <checkAktifCalisma+0x8d0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	4a4e      	ldr	r2, [pc, #312]	; (800568c <checkAktifCalisma+0x8d4>)
 8005552:	7812      	ldrb	r2, [r2, #0]
 8005554:	4293      	cmp	r3, r2
 8005556:	d303      	bcc.n	8005560 <checkAktifCalisma+0x7a8>
 8005558:	4b49      	ldr	r3, [pc, #292]	; (8005680 <checkAktifCalisma+0x8c8>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10d      	bne.n	800557c <checkAktifCalisma+0x7c4>
 8005560:	4b45      	ldr	r3, [pc, #276]	; (8005678 <checkAktifCalisma+0x8c0>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f083 0301 	eor.w	r3, r3, #1
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <checkAktifCalisma+0x7c4>
 800556e:	4b43      	ldr	r3, [pc, #268]	; (800567c <checkAktifCalisma+0x8c4>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	f083 0301 	eor.w	r3, r3, #1
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800557c:	2200      	movs	r2, #0
 800557e:	2120      	movs	r1, #32
 8005580:	483a      	ldr	r0, [pc, #232]	; (800566c <checkAktifCalisma+0x8b4>)
 8005582:	f003 ff4e 	bl	8009422 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8005586:	4b3a      	ldr	r3, [pc, #232]	; (8005670 <checkAktifCalisma+0x8b8>)
 8005588:	2200      	movs	r2, #0
 800558a:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 800558c:	4b3c      	ldr	r3, [pc, #240]	; (8005680 <checkAktifCalisma+0x8c8>)
 800558e:	2200      	movs	r2, #0
 8005590:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005592:	4b3f      	ldr	r3, [pc, #252]	; (8005690 <checkAktifCalisma+0x8d8>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f040 8088 	bne.w	80056ac <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800559c:	4b3d      	ldr	r3, [pc, #244]	; (8005694 <checkAktifCalisma+0x8dc>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d003      	beq.n	80055ac <checkAktifCalisma+0x7f4>
 80055a4:	4b3b      	ldr	r3, [pc, #236]	; (8005694 <checkAktifCalisma+0x8dc>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d17f      	bne.n	80056ac <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80055ac:	4b32      	ldr	r3, [pc, #200]	; (8005678 <checkAktifCalisma+0x8c0>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d07b      	beq.n	80056ac <checkAktifCalisma+0x8f4>
 80055b4:	4b31      	ldr	r3, [pc, #196]	; (800567c <checkAktifCalisma+0x8c4>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d077      	beq.n	80056ac <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80055bc:	2140      	movs	r1, #64	; 0x40
 80055be:	482b      	ldr	r0, [pc, #172]	; (800566c <checkAktifCalisma+0x8b4>)
 80055c0:	f003 ff18 	bl	80093f4 <HAL_GPIO_ReadPin>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d170      	bne.n	80056ac <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80055ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055ce:	4827      	ldr	r0, [pc, #156]	; (800566c <checkAktifCalisma+0x8b4>)
 80055d0:	f003 ff10 	bl	80093f4 <HAL_GPIO_ReadPin>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <checkAktifCalisma+0x82a>
 80055da:	4b2f      	ldr	r3, [pc, #188]	; (8005698 <checkAktifCalisma+0x8e0>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d164      	bne.n	80056ac <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80055e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055e6:	4823      	ldr	r0, [pc, #140]	; (8005674 <checkAktifCalisma+0x8bc>)
 80055e8:	f003 ff04 	bl	80093f4 <HAL_GPIO_ReadPin>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d10f      	bne.n	8005612 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80055f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055f6:	481f      	ldr	r0, [pc, #124]	; (8005674 <checkAktifCalisma+0x8bc>)
 80055f8:	f003 fefc 	bl	80093f4 <HAL_GPIO_ReadPin>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d107      	bne.n	8005612 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005602:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005606:	481b      	ldr	r0, [pc, #108]	; (8005674 <checkAktifCalisma+0x8bc>)
 8005608:	f003 fef4 	bl	80093f4 <HAL_GPIO_ReadPin>
 800560c:	4603      	mov	r3, r0
 800560e:	2b01      	cmp	r3, #1
 8005610:	d003      	beq.n	800561a <checkAktifCalisma+0x862>
 8005612:	4b22      	ldr	r3, [pc, #136]	; (800569c <checkAktifCalisma+0x8e4>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d048      	beq.n	80056ac <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800561a:	4b21      	ldr	r3, [pc, #132]	; (80056a0 <checkAktifCalisma+0x8e8>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	f083 0301 	eor.w	r3, r3, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d041      	beq.n	80056ac <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005628:	4b1e      	ldr	r3, [pc, #120]	; (80056a4 <checkAktifCalisma+0x8ec>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f083 0301 	eor.w	r3, r3, #1
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d03a      	beq.n	80056ac <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005636:	4b1c      	ldr	r3, [pc, #112]	; (80056a8 <checkAktifCalisma+0x8f0>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	f083 0301 	eor.w	r3, r3, #1
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d033      	beq.n	80056ac <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005644:	4b0a      	ldr	r3, [pc, #40]	; (8005670 <checkAktifCalisma+0x8b8>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f083 0301 	eor.w	r3, r3, #1
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d02c      	beq.n	80056ac <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <checkAktifCalisma+0x8b0>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	f083 0301 	eor.w	r3, r3, #1
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d025      	beq.n	80056ac <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005660:	4b0e      	ldr	r3, [pc, #56]	; (800569c <checkAktifCalisma+0x8e4>)
 8005662:	2201      	movs	r2, #1
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	e024      	b.n	80056b2 <checkAktifCalisma+0x8fa>
 8005668:	2000025a 	.word	0x2000025a
 800566c:	40011000 	.word	0x40011000
 8005670:	2000025e 	.word	0x2000025e
 8005674:	40010c00 	.word	0x40010c00
 8005678:	20000276 	.word	0x20000276
 800567c:	20000277 	.word	0x20000277
 8005680:	20000256 	.word	0x20000256
 8005684:	20000200 	.word	0x20000200
 8005688:	2000020c 	.word	0x2000020c
 800568c:	2000023a 	.word	0x2000023a
 8005690:	20000241 	.word	0x20000241
 8005694:	20000233 	.word	0x20000233
 8005698:	20000235 	.word	0x20000235
 800569c:	2000025b 	.word	0x2000025b
 80056a0:	20000259 	.word	0x20000259
 80056a4:	2000025d 	.word	0x2000025d
 80056a8:	2000025c 	.word	0x2000025c
		} else {
			devmotorasagicalisiyor=0;
 80056ac:	4b96      	ldr	r3, [pc, #600]	; (8005908 <checkAktifCalisma+0xb50>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80056b2:	4b95      	ldr	r3, [pc, #596]	; (8005908 <checkAktifCalisma+0xb50>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d007      	beq.n	80056ca <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80056ba:	2201      	movs	r2, #1
 80056bc:	2110      	movs	r1, #16
 80056be:	4893      	ldr	r0, [pc, #588]	; (800590c <checkAktifCalisma+0xb54>)
 80056c0:	f003 feaf 	bl	8009422 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80056c4:	4b92      	ldr	r3, [pc, #584]	; (8005910 <checkAktifCalisma+0xb58>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80056ca:	4b91      	ldr	r3, [pc, #580]	; (8005910 <checkAktifCalisma+0xb58>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d024      	beq.n	800571c <checkAktifCalisma+0x964>
 80056d2:	2140      	movs	r1, #64	; 0x40
 80056d4:	488d      	ldr	r0, [pc, #564]	; (800590c <checkAktifCalisma+0xb54>)
 80056d6:	f003 fe8d 	bl	80093f4 <HAL_GPIO_ReadPin>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d007      	beq.n	80056f0 <checkAktifCalisma+0x938>
 80056e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056e4:	4889      	ldr	r0, [pc, #548]	; (800590c <checkAktifCalisma+0xb54>)
 80056e6:	f003 fe85 	bl	80093f4 <HAL_GPIO_ReadPin>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d115      	bne.n	800571c <checkAktifCalisma+0x964>
 80056f0:	4b88      	ldr	r3, [pc, #544]	; (8005914 <checkAktifCalisma+0xb5c>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d011      	beq.n	800571c <checkAktifCalisma+0x964>
 80056f8:	4b87      	ldr	r3, [pc, #540]	; (8005918 <checkAktifCalisma+0xb60>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00d      	beq.n	800571c <checkAktifCalisma+0x964>
 8005700:	4b86      	ldr	r3, [pc, #536]	; (800591c <checkAktifCalisma+0xb64>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	f083 0301 	eor.w	r3, r3, #1
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d006      	beq.n	800571c <checkAktifCalisma+0x964>
			timer2=millis;
 800570e:	4b84      	ldr	r3, [pc, #528]	; (8005920 <checkAktifCalisma+0xb68>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a84      	ldr	r2, [pc, #528]	; (8005924 <checkAktifCalisma+0xb6c>)
 8005714:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005716:	4b81      	ldr	r3, [pc, #516]	; (800591c <checkAktifCalisma+0xb64>)
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800571c:	4b80      	ldr	r3, [pc, #512]	; (8005920 <checkAktifCalisma+0xb68>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4b80      	ldr	r3, [pc, #512]	; (8005924 <checkAktifCalisma+0xb6c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	4a80      	ldr	r2, [pc, #512]	; (8005928 <checkAktifCalisma+0xb70>)
 8005728:	7812      	ldrb	r2, [r2, #0]
 800572a:	4293      	cmp	r3, r2
 800572c:	d303      	bcc.n	8005736 <checkAktifCalisma+0x97e>
 800572e:	4b7b      	ldr	r3, [pc, #492]	; (800591c <checkAktifCalisma+0xb64>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10d      	bne.n	8005752 <checkAktifCalisma+0x99a>
 8005736:	4b77      	ldr	r3, [pc, #476]	; (8005914 <checkAktifCalisma+0xb5c>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	f083 0301 	eor.w	r3, r3, #1
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <checkAktifCalisma+0x99a>
 8005744:	4b74      	ldr	r3, [pc, #464]	; (8005918 <checkAktifCalisma+0xb60>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f083 0301 	eor.w	r3, r3, #1
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005752:	2200      	movs	r2, #0
 8005754:	2110      	movs	r1, #16
 8005756:	486d      	ldr	r0, [pc, #436]	; (800590c <checkAktifCalisma+0xb54>)
 8005758:	f003 fe63 	bl	8009422 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 800575c:	4b6c      	ldr	r3, [pc, #432]	; (8005910 <checkAktifCalisma+0xb58>)
 800575e:	2200      	movs	r2, #0
 8005760:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8005762:	4b6e      	ldr	r3, [pc, #440]	; (800591c <checkAktifCalisma+0xb64>)
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005768:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800576c:	486f      	ldr	r0, [pc, #444]	; (800592c <checkAktifCalisma+0xb74>)
 800576e:	f003 fe41 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d120      	bne.n	80057ba <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800577c:	486b      	ldr	r0, [pc, #428]	; (800592c <checkAktifCalisma+0xb74>)
 800577e:	f003 fe39 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d118      	bne.n	80057ba <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005788:	2104      	movs	r1, #4
 800578a:	4868      	ldr	r0, [pc, #416]	; (800592c <checkAktifCalisma+0xb74>)
 800578c:	f003 fe32 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d111      	bne.n	80057ba <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005796:	2102      	movs	r1, #2
 8005798:	4864      	ldr	r0, [pc, #400]	; (800592c <checkAktifCalisma+0xb74>)
 800579a:	f003 fe2b 	bl	80093f4 <HAL_GPIO_ReadPin>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80057a4:	2101      	movs	r1, #1
 80057a6:	4861      	ldr	r0, [pc, #388]	; (800592c <checkAktifCalisma+0xb74>)
 80057a8:	f003 fe24 	bl	80093f4 <HAL_GPIO_ReadPin>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d103      	bne.n	80057ba <checkAktifCalisma+0xa02>
			makineStop=1;
 80057b2:	4b5f      	ldr	r3, [pc, #380]	; (8005930 <checkAktifCalisma+0xb78>)
 80057b4:	2201      	movs	r2, #1
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	e002      	b.n	80057c0 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80057ba:	4b5d      	ldr	r3, [pc, #372]	; (8005930 <checkAktifCalisma+0xb78>)
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057c0:	4b5c      	ldr	r3, [pc, #368]	; (8005934 <checkAktifCalisma+0xb7c>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d144      	bne.n	8005852 <checkAktifCalisma+0xa9a>
 80057c8:	4b5b      	ldr	r3, [pc, #364]	; (8005938 <checkAktifCalisma+0xb80>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d003      	beq.n	80057d8 <checkAktifCalisma+0xa20>
 80057d0:	4b59      	ldr	r3, [pc, #356]	; (8005938 <checkAktifCalisma+0xb80>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d13c      	bne.n	8005852 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80057d8:	2180      	movs	r1, #128	; 0x80
 80057da:	484c      	ldr	r0, [pc, #304]	; (800590c <checkAktifCalisma+0xb54>)
 80057dc:	f003 fe0a 	bl	80093f4 <HAL_GPIO_ReadPin>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <checkAktifCalisma+0xa36>
 80057e6:	4b55      	ldr	r3, [pc, #340]	; (800593c <checkAktifCalisma+0xb84>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00b      	beq.n	8005806 <checkAktifCalisma+0xa4e>
 80057ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057f2:	484e      	ldr	r0, [pc, #312]	; (800592c <checkAktifCalisma+0xb74>)
 80057f4:	f003 fdfe 	bl	80093f4 <HAL_GPIO_ReadPin>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d129      	bne.n	8005852 <checkAktifCalisma+0xa9a>
 80057fe:	4b4f      	ldr	r3, [pc, #316]	; (800593c <checkAktifCalisma+0xb84>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d125      	bne.n	8005852 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005806:	2104      	movs	r1, #4
 8005808:	4840      	ldr	r0, [pc, #256]	; (800590c <checkAktifCalisma+0xb54>)
 800580a:	f003 fdf3 	bl	80093f4 <HAL_GPIO_ReadPin>
 800580e:	4603      	mov	r3, r0
 8005810:	2b01      	cmp	r3, #1
 8005812:	d003      	beq.n	800581c <checkAktifCalisma+0xa64>
 8005814:	4b4a      	ldr	r3, [pc, #296]	; (8005940 <checkAktifCalisma+0xb88>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d11a      	bne.n	8005852 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800581c:	2102      	movs	r1, #2
 800581e:	483b      	ldr	r0, [pc, #236]	; (800590c <checkAktifCalisma+0xb54>)
 8005820:	f003 fde8 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d113      	bne.n	8005852 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800582a:	4b46      	ldr	r3, [pc, #280]	; (8005944 <checkAktifCalisma+0xb8c>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	f083 0301 	eor.w	r3, r3, #1
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00c      	beq.n	8005852 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005838:	4b3d      	ldr	r3, [pc, #244]	; (8005930 <checkAktifCalisma+0xb78>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d008      	beq.n	8005852 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005840:	4b41      	ldr	r3, [pc, #260]	; (8005948 <checkAktifCalisma+0xb90>)
 8005842:	2201      	movs	r2, #1
 8005844:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005846:	4b36      	ldr	r3, [pc, #216]	; (8005920 <checkAktifCalisma+0xb68>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a40      	ldr	r2, [pc, #256]	; (800594c <checkAktifCalisma+0xb94>)
 800584c:	6013      	str	r3, [r2, #0]
			bekle();
 800584e:	f7ff f935 	bl	8004abc <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005852:	4b33      	ldr	r3, [pc, #204]	; (8005920 <checkAktifCalisma+0xb68>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b3d      	ldr	r3, [pc, #244]	; (800594c <checkAktifCalisma+0xb94>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	4a3c      	ldr	r2, [pc, #240]	; (8005950 <checkAktifCalisma+0xb98>)
 800585e:	7812      	ldrb	r2, [r2, #0]
 8005860:	4293      	cmp	r3, r2
 8005862:	d211      	bcs.n	8005888 <checkAktifCalisma+0xad0>
 8005864:	2104      	movs	r1, #4
 8005866:	4829      	ldr	r0, [pc, #164]	; (800590c <checkAktifCalisma+0xb54>)
 8005868:	f003 fdc4 	bl	80093f4 <HAL_GPIO_ReadPin>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <checkAktifCalisma+0xad0>
 8005872:	4b33      	ldr	r3, [pc, #204]	; (8005940 <checkAktifCalisma+0xb88>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d006      	beq.n	8005888 <checkAktifCalisma+0xad0>
 800587a:	4b2d      	ldr	r3, [pc, #180]	; (8005930 <checkAktifCalisma+0xb78>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	f083 0301 	eor.w	r3, r3, #1
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005888:	4b2f      	ldr	r3, [pc, #188]	; (8005948 <checkAktifCalisma+0xb90>)
 800588a:	2200      	movs	r2, #0
 800588c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800588e:	4b29      	ldr	r3, [pc, #164]	; (8005934 <checkAktifCalisma+0xb7c>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d160      	bne.n	8005958 <checkAktifCalisma+0xba0>
 8005896:	4b28      	ldr	r3, [pc, #160]	; (8005938 <checkAktifCalisma+0xb80>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d003      	beq.n	80058a6 <checkAktifCalisma+0xaee>
 800589e:	4b26      	ldr	r3, [pc, #152]	; (8005938 <checkAktifCalisma+0xb80>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d158      	bne.n	8005958 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80058a6:	2104      	movs	r1, #4
 80058a8:	4818      	ldr	r0, [pc, #96]	; (800590c <checkAktifCalisma+0xb54>)
 80058aa:	f003 fda3 	bl	80093f4 <HAL_GPIO_ReadPin>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d003      	beq.n	80058bc <checkAktifCalisma+0xb04>
 80058b4:	4b22      	ldr	r3, [pc, #136]	; (8005940 <checkAktifCalisma+0xb88>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d14d      	bne.n	8005958 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058bc:	2102      	movs	r1, #2
 80058be:	4813      	ldr	r0, [pc, #76]	; (800590c <checkAktifCalisma+0xb54>)
 80058c0:	f003 fd98 	bl	80093f4 <HAL_GPIO_ReadPin>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d146      	bne.n	8005958 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80058ca:	2180      	movs	r1, #128	; 0x80
 80058cc:	480f      	ldr	r0, [pc, #60]	; (800590c <checkAktifCalisma+0xb54>)
 80058ce:	f003 fd91 	bl	80093f4 <HAL_GPIO_ReadPin>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d103      	bne.n	80058e0 <checkAktifCalisma+0xb28>
 80058d8:	4b18      	ldr	r3, [pc, #96]	; (800593c <checkAktifCalisma+0xb84>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00b      	beq.n	80058f8 <checkAktifCalisma+0xb40>
 80058e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058e4:	4811      	ldr	r0, [pc, #68]	; (800592c <checkAktifCalisma+0xb74>)
 80058e6:	f003 fd85 	bl	80093f4 <HAL_GPIO_ReadPin>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d133      	bne.n	8005958 <checkAktifCalisma+0xba0>
 80058f0:	4b12      	ldr	r3, [pc, #72]	; (800593c <checkAktifCalisma+0xb84>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d12f      	bne.n	8005958 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 80058f8:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <checkAktifCalisma+0xb78>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d02b      	beq.n	8005958 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005900:	4b14      	ldr	r3, [pc, #80]	; (8005954 <checkAktifCalisma+0xb9c>)
 8005902:	2201      	movs	r2, #1
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	e02a      	b.n	800595e <checkAktifCalisma+0xba6>
 8005908:	2000025b 	.word	0x2000025b
 800590c:	40011000 	.word	0x40011000
 8005910:	2000025f 	.word	0x2000025f
 8005914:	20000276 	.word	0x20000276
 8005918:	20000277 	.word	0x20000277
 800591c:	20000257 	.word	0x20000257
 8005920:	20000200 	.word	0x20000200
 8005924:	2000020c 	.word	0x2000020c
 8005928:	2000023a 	.word	0x2000023a
 800592c:	40010c00 	.word	0x40010c00
 8005930:	20000266 	.word	0x20000266
 8005934:	2000022d 	.word	0x2000022d
 8005938:	2000022c 	.word	0x2000022c
 800593c:	20000230 	.word	0x20000230
 8005940:	2000022a 	.word	0x2000022a
 8005944:	20000253 	.word	0x20000253
 8005948:	20000267 	.word	0x20000267
 800594c:	20000204 	.word	0x20000204
 8005950:	2000023d 	.word	0x2000023d
 8005954:	20000268 	.word	0x20000268
		} else {
			kapi1butonkontrol=0;
 8005958:	4b8b      	ldr	r3, [pc, #556]	; (8005b88 <checkAktifCalisma+0xdd0>)
 800595a:	2200      	movs	r2, #0
 800595c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800595e:	4b8b      	ldr	r3, [pc, #556]	; (8005b8c <checkAktifCalisma+0xdd4>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d121      	bne.n	80059aa <checkAktifCalisma+0xbf2>
 8005966:	4b8a      	ldr	r3, [pc, #552]	; (8005b90 <checkAktifCalisma+0xdd8>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d003      	beq.n	8005976 <checkAktifCalisma+0xbbe>
 800596e:	4b88      	ldr	r3, [pc, #544]	; (8005b90 <checkAktifCalisma+0xdd8>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b03      	cmp	r3, #3
 8005974:	d119      	bne.n	80059aa <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005976:	2104      	movs	r1, #4
 8005978:	4886      	ldr	r0, [pc, #536]	; (8005b94 <checkAktifCalisma+0xddc>)
 800597a:	f003 fd3b 	bl	80093f4 <HAL_GPIO_ReadPin>
 800597e:	4603      	mov	r3, r0
 8005980:	2b01      	cmp	r3, #1
 8005982:	d003      	beq.n	800598c <checkAktifCalisma+0xbd4>
 8005984:	4b84      	ldr	r3, [pc, #528]	; (8005b98 <checkAktifCalisma+0xde0>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10e      	bne.n	80059aa <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800598c:	2102      	movs	r1, #2
 800598e:	4881      	ldr	r0, [pc, #516]	; (8005b94 <checkAktifCalisma+0xddc>)
 8005990:	f003 fd30 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d107      	bne.n	80059aa <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 800599a:	4b80      	ldr	r3, [pc, #512]	; (8005b9c <checkAktifCalisma+0xde4>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80059a2:	4b7f      	ldr	r3, [pc, #508]	; (8005ba0 <checkAktifCalisma+0xde8>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	e002      	b.n	80059b0 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80059aa:	4b7d      	ldr	r3, [pc, #500]	; (8005ba0 <checkAktifCalisma+0xde8>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80059b0:	4b75      	ldr	r3, [pc, #468]	; (8005b88 <checkAktifCalisma+0xdd0>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d107      	bne.n	80059c8 <checkAktifCalisma+0xc10>
 80059b8:	4b79      	ldr	r3, [pc, #484]	; (8005ba0 <checkAktifCalisma+0xde8>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d103      	bne.n	80059c8 <checkAktifCalisma+0xc10>
 80059c0:	4b78      	ldr	r3, [pc, #480]	; (8005ba4 <checkAktifCalisma+0xdec>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80059c8:	2201      	movs	r2, #1
 80059ca:	2180      	movs	r1, #128	; 0x80
 80059cc:	4876      	ldr	r0, [pc, #472]	; (8005ba8 <checkAktifCalisma+0xdf0>)
 80059ce:	f003 fd28 	bl	8009422 <HAL_GPIO_WritePin>
 80059d2:	e004      	b.n	80059de <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80059d4:	2200      	movs	r2, #0
 80059d6:	2180      	movs	r1, #128	; 0x80
 80059d8:	4873      	ldr	r0, [pc, #460]	; (8005ba8 <checkAktifCalisma+0xdf0>)
 80059da:	f003 fd22 	bl	8009422 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059de:	4b73      	ldr	r3, [pc, #460]	; (8005bac <checkAktifCalisma+0xdf4>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d141      	bne.n	8005a6a <checkAktifCalisma+0xcb2>
 80059e6:	4b6a      	ldr	r3, [pc, #424]	; (8005b90 <checkAktifCalisma+0xdd8>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d003      	beq.n	80059f6 <checkAktifCalisma+0xc3e>
 80059ee:	4b68      	ldr	r3, [pc, #416]	; (8005b90 <checkAktifCalisma+0xdd8>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d139      	bne.n	8005a6a <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80059f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059fa:	4866      	ldr	r0, [pc, #408]	; (8005b94 <checkAktifCalisma+0xddc>)
 80059fc:	f003 fcfa 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <checkAktifCalisma+0xc56>
 8005a06:	4b6a      	ldr	r3, [pc, #424]	; (8005bb0 <checkAktifCalisma+0xdf8>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <checkAktifCalisma+0xc6e>
 8005a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a12:	4868      	ldr	r0, [pc, #416]	; (8005bb4 <checkAktifCalisma+0xdfc>)
 8005a14:	f003 fcee 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d125      	bne.n	8005a6a <checkAktifCalisma+0xcb2>
 8005a1e:	4b64      	ldr	r3, [pc, #400]	; (8005bb0 <checkAktifCalisma+0xdf8>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d121      	bne.n	8005a6a <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a26:	2102      	movs	r1, #2
 8005a28:	485a      	ldr	r0, [pc, #360]	; (8005b94 <checkAktifCalisma+0xddc>)
 8005a2a:	f003 fce3 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d11a      	bne.n	8005a6a <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a34:	2104      	movs	r1, #4
 8005a36:	4857      	ldr	r0, [pc, #348]	; (8005b94 <checkAktifCalisma+0xddc>)
 8005a38:	f003 fcdc 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d113      	bne.n	8005a6a <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005a42:	4b56      	ldr	r3, [pc, #344]	; (8005b9c <checkAktifCalisma+0xde4>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00f      	beq.n	8005a6a <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005a4a:	4b5b      	ldr	r3, [pc, #364]	; (8005bb8 <checkAktifCalisma+0xe00>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	f083 0301 	eor.w	r3, r3, #1
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005a58:	4b58      	ldr	r3, [pc, #352]	; (8005bbc <checkAktifCalisma+0xe04>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005a5e:	4b58      	ldr	r3, [pc, #352]	; (8005bc0 <checkAktifCalisma+0xe08>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a58      	ldr	r2, [pc, #352]	; (8005bc4 <checkAktifCalisma+0xe0c>)
 8005a64:	6013      	str	r3, [r2, #0]
			bekle();
 8005a66:	f7ff f829 	bl	8004abc <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005a6a:	4b55      	ldr	r3, [pc, #340]	; (8005bc0 <checkAktifCalisma+0xe08>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4b55      	ldr	r3, [pc, #340]	; (8005bc4 <checkAktifCalisma+0xe0c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	4a54      	ldr	r2, [pc, #336]	; (8005bc8 <checkAktifCalisma+0xe10>)
 8005a76:	7812      	ldrb	r2, [r2, #0]
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d20d      	bcs.n	8005a98 <checkAktifCalisma+0xce0>
 8005a7c:	2102      	movs	r1, #2
 8005a7e:	4845      	ldr	r0, [pc, #276]	; (8005b94 <checkAktifCalisma+0xddc>)
 8005a80:	f003 fcb8 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d006      	beq.n	8005a98 <checkAktifCalisma+0xce0>
 8005a8a:	4b44      	ldr	r3, [pc, #272]	; (8005b9c <checkAktifCalisma+0xde4>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	f083 0301 	eor.w	r3, r3, #1
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005a98:	4b48      	ldr	r3, [pc, #288]	; (8005bbc <checkAktifCalisma+0xe04>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a9e:	4b43      	ldr	r3, [pc, #268]	; (8005bac <checkAktifCalisma+0xdf4>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d135      	bne.n	8005b12 <checkAktifCalisma+0xd5a>
 8005aa6:	4b3a      	ldr	r3, [pc, #232]	; (8005b90 <checkAktifCalisma+0xdd8>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d003      	beq.n	8005ab6 <checkAktifCalisma+0xcfe>
 8005aae:	4b38      	ldr	r3, [pc, #224]	; (8005b90 <checkAktifCalisma+0xdd8>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d12d      	bne.n	8005b12 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005aba:	4836      	ldr	r0, [pc, #216]	; (8005b94 <checkAktifCalisma+0xddc>)
 8005abc:	f003 fc9a 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d103      	bne.n	8005ace <checkAktifCalisma+0xd16>
 8005ac6:	4b3a      	ldr	r3, [pc, #232]	; (8005bb0 <checkAktifCalisma+0xdf8>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00b      	beq.n	8005ae6 <checkAktifCalisma+0xd2e>
 8005ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ad2:	4838      	ldr	r0, [pc, #224]	; (8005bb4 <checkAktifCalisma+0xdfc>)
 8005ad4:	f003 fc8e 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d119      	bne.n	8005b12 <checkAktifCalisma+0xd5a>
 8005ade:	4b34      	ldr	r3, [pc, #208]	; (8005bb0 <checkAktifCalisma+0xdf8>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d115      	bne.n	8005b12 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ae6:	2102      	movs	r1, #2
 8005ae8:	482a      	ldr	r0, [pc, #168]	; (8005b94 <checkAktifCalisma+0xddc>)
 8005aea:	f003 fc83 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d10e      	bne.n	8005b12 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005af4:	2104      	movs	r1, #4
 8005af6:	4827      	ldr	r0, [pc, #156]	; (8005b94 <checkAktifCalisma+0xddc>)
 8005af8:	f003 fc7c 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d107      	bne.n	8005b12 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005b02:	4b26      	ldr	r3, [pc, #152]	; (8005b9c <checkAktifCalisma+0xde4>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005b0a:	4b30      	ldr	r3, [pc, #192]	; (8005bcc <checkAktifCalisma+0xe14>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	e002      	b.n	8005b18 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005b12:	4b2e      	ldr	r3, [pc, #184]	; (8005bcc <checkAktifCalisma+0xe14>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b18:	4b24      	ldr	r3, [pc, #144]	; (8005bac <checkAktifCalisma+0xdf4>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d11d      	bne.n	8005b5c <checkAktifCalisma+0xda4>
 8005b20:	4b1b      	ldr	r3, [pc, #108]	; (8005b90 <checkAktifCalisma+0xdd8>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d003      	beq.n	8005b30 <checkAktifCalisma+0xd78>
 8005b28:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <checkAktifCalisma+0xdd8>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d115      	bne.n	8005b5c <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b30:	2102      	movs	r1, #2
 8005b32:	4818      	ldr	r0, [pc, #96]	; (8005b94 <checkAktifCalisma+0xddc>)
 8005b34:	f003 fc5e 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d10e      	bne.n	8005b5c <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b3e:	2104      	movs	r1, #4
 8005b40:	4814      	ldr	r0, [pc, #80]	; (8005b94 <checkAktifCalisma+0xddc>)
 8005b42:	f003 fc57 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d107      	bne.n	8005b5c <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005b4c:	4b13      	ldr	r3, [pc, #76]	; (8005b9c <checkAktifCalisma+0xde4>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005b54:	4b1e      	ldr	r3, [pc, #120]	; (8005bd0 <checkAktifCalisma+0xe18>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	e002      	b.n	8005b62 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005b5c:	4b1c      	ldr	r3, [pc, #112]	; (8005bd0 <checkAktifCalisma+0xe18>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005b62:	4b1a      	ldr	r3, [pc, #104]	; (8005bcc <checkAktifCalisma+0xe14>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d107      	bne.n	8005b7a <checkAktifCalisma+0xdc2>
 8005b6a:	4b19      	ldr	r3, [pc, #100]	; (8005bd0 <checkAktifCalisma+0xe18>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d103      	bne.n	8005b7a <checkAktifCalisma+0xdc2>
 8005b72:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <checkAktifCalisma+0xe04>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d02c      	beq.n	8005bd4 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	2140      	movs	r1, #64	; 0x40
 8005b7e:	480a      	ldr	r0, [pc, #40]	; (8005ba8 <checkAktifCalisma+0xdf0>)
 8005b80:	f003 fc4f 	bl	8009422 <HAL_GPIO_WritePin>
 8005b84:	e02b      	b.n	8005bde <checkAktifCalisma+0xe26>
 8005b86:	bf00      	nop
 8005b88:	20000268 	.word	0x20000268
 8005b8c:	2000022d 	.word	0x2000022d
 8005b90:	2000022c 	.word	0x2000022c
 8005b94:	40011000 	.word	0x40011000
 8005b98:	2000022a 	.word	0x2000022a
 8005b9c:	20000266 	.word	0x20000266
 8005ba0:	20000269 	.word	0x20000269
 8005ba4:	20000267 	.word	0x20000267
 8005ba8:	40010800 	.word	0x40010800
 8005bac:	2000022e 	.word	0x2000022e
 8005bb0:	20000230 	.word	0x20000230
 8005bb4:	40010c00 	.word	0x40010c00
 8005bb8:	20000253 	.word	0x20000253
 8005bbc:	2000026a 	.word	0x2000026a
 8005bc0:	20000200 	.word	0x20000200
 8005bc4:	20000204 	.word	0x20000204
 8005bc8:	2000023e 	.word	0x2000023e
 8005bcc:	2000026b 	.word	0x2000026b
 8005bd0:	2000026c 	.word	0x2000026c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2140      	movs	r1, #64	; 0x40
 8005bd8:	488d      	ldr	r0, [pc, #564]	; (8005e10 <checkAktifCalisma+0x1058>)
 8005bda:	f003 fc22 	bl	8009422 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005bde:	4b8d      	ldr	r3, [pc, #564]	; (8005e14 <checkAktifCalisma+0x105c>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <checkAktifCalisma+0xe36>
 8005be6:	4b8b      	ldr	r3, [pc, #556]	; (8005e14 <checkAktifCalisma+0x105c>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d115      	bne.n	8005c1a <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005bee:	2104      	movs	r1, #4
 8005bf0:	4889      	ldr	r0, [pc, #548]	; (8005e18 <checkAktifCalisma+0x1060>)
 8005bf2:	f003 fbff 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d003      	beq.n	8005c04 <checkAktifCalisma+0xe4c>
 8005bfc:	4b87      	ldr	r3, [pc, #540]	; (8005e1c <checkAktifCalisma+0x1064>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005c04:	2102      	movs	r1, #2
 8005c06:	4884      	ldr	r0, [pc, #528]	; (8005e18 <checkAktifCalisma+0x1060>)
 8005c08:	f003 fbf4 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d103      	bne.n	8005c1a <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005c12:	4b83      	ldr	r3, [pc, #524]	; (8005e20 <checkAktifCalisma+0x1068>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	e002      	b.n	8005c20 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005c1a:	4b81      	ldr	r3, [pc, #516]	; (8005e20 <checkAktifCalisma+0x1068>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005c20:	4b7c      	ldr	r3, [pc, #496]	; (8005e14 <checkAktifCalisma+0x105c>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d003      	beq.n	8005c30 <checkAktifCalisma+0xe78>
 8005c28:	4b7a      	ldr	r3, [pc, #488]	; (8005e14 <checkAktifCalisma+0x105c>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d111      	bne.n	8005c54 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c30:	2102      	movs	r1, #2
 8005c32:	4879      	ldr	r0, [pc, #484]	; (8005e18 <checkAktifCalisma+0x1060>)
 8005c34:	f003 fbde 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d10a      	bne.n	8005c54 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005c3e:	2104      	movs	r1, #4
 8005c40:	4875      	ldr	r0, [pc, #468]	; (8005e18 <checkAktifCalisma+0x1060>)
 8005c42:	f003 fbd7 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d103      	bne.n	8005c54 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005c4c:	4b75      	ldr	r3, [pc, #468]	; (8005e24 <checkAktifCalisma+0x106c>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	e002      	b.n	8005c5a <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005c54:	4b73      	ldr	r3, [pc, #460]	; (8005e24 <checkAktifCalisma+0x106c>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005c5a:	4b71      	ldr	r3, [pc, #452]	; (8005e20 <checkAktifCalisma+0x1068>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00f      	beq.n	8005c82 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005c62:	4b71      	ldr	r3, [pc, #452]	; (8005e28 <checkAktifCalisma+0x1070>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d10b      	bne.n	8005c82 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005c6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c6e:	486f      	ldr	r0, [pc, #444]	; (8005e2c <checkAktifCalisma+0x1074>)
 8005c70:	f003 fbc0 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005c7a:	4b6d      	ldr	r3, [pc, #436]	; (8005e30 <checkAktifCalisma+0x1078>)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	701a      	strb	r2, [r3, #0]
 8005c80:	e002      	b.n	8005c88 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005c82:	4b6b      	ldr	r3, [pc, #428]	; (8005e30 <checkAktifCalisma+0x1078>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005c88:	4b66      	ldr	r3, [pc, #408]	; (8005e24 <checkAktifCalisma+0x106c>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00f      	beq.n	8005cb0 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005c90:	4b65      	ldr	r3, [pc, #404]	; (8005e28 <checkAktifCalisma+0x1070>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d10b      	bne.n	8005cb0 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005c98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c9c:	4863      	ldr	r0, [pc, #396]	; (8005e2c <checkAktifCalisma+0x1074>)
 8005c9e:	f003 fba9 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d103      	bne.n	8005cb0 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005ca8:	4b62      	ldr	r3, [pc, #392]	; (8005e34 <checkAktifCalisma+0x107c>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	e002      	b.n	8005cb6 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005cb0:	4b60      	ldr	r3, [pc, #384]	; (8005e34 <checkAktifCalisma+0x107c>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005cb6:	4b60      	ldr	r3, [pc, #384]	; (8005e38 <checkAktifCalisma+0x1080>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d137      	bne.n	8005d2e <checkAktifCalisma+0xf76>
 8005cbe:	4b5f      	ldr	r3, [pc, #380]	; (8005e3c <checkAktifCalisma+0x1084>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d003      	beq.n	8005cce <checkAktifCalisma+0xf16>
 8005cc6:	4b5d      	ldr	r3, [pc, #372]	; (8005e3c <checkAktifCalisma+0x1084>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d12f      	bne.n	8005d2e <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005cce:	4b54      	ldr	r3, [pc, #336]	; (8005e20 <checkAktifCalisma+0x1068>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <checkAktifCalisma+0xf26>
 8005cd6:	4b53      	ldr	r3, [pc, #332]	; (8005e24 <checkAktifCalisma+0x106c>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d027      	beq.n	8005d2e <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005cde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ce2:	484d      	ldr	r0, [pc, #308]	; (8005e18 <checkAktifCalisma+0x1060>)
 8005ce4:	f003 fb86 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d103      	bne.n	8005cf6 <checkAktifCalisma+0xf3e>
 8005cee:	4b4e      	ldr	r3, [pc, #312]	; (8005e28 <checkAktifCalisma+0x1070>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d007      	beq.n	8005d06 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005cf6:	4b4e      	ldr	r3, [pc, #312]	; (8005e30 <checkAktifCalisma+0x1078>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d103      	bne.n	8005d06 <checkAktifCalisma+0xf4e>
 8005cfe:	4b4d      	ldr	r3, [pc, #308]	; (8005e34 <checkAktifCalisma+0x107c>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d013      	beq.n	8005d2e <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005d06:	4b4e      	ldr	r3, [pc, #312]	; (8005e40 <checkAktifCalisma+0x1088>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00f      	beq.n	8005d2e <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005d0e:	4b4d      	ldr	r3, [pc, #308]	; (8005e44 <checkAktifCalisma+0x108c>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	f083 0301 	eor.w	r3, r3, #1
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005d1c:	4b4a      	ldr	r3, [pc, #296]	; (8005e48 <checkAktifCalisma+0x1090>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005d22:	4b4a      	ldr	r3, [pc, #296]	; (8005e4c <checkAktifCalisma+0x1094>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a4a      	ldr	r2, [pc, #296]	; (8005e50 <checkAktifCalisma+0x1098>)
 8005d28:	6013      	str	r3, [r2, #0]
			bekle();
 8005d2a:	f7fe fec7 	bl	8004abc <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005d2e:	4b47      	ldr	r3, [pc, #284]	; (8005e4c <checkAktifCalisma+0x1094>)
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b47      	ldr	r3, [pc, #284]	; (8005e50 <checkAktifCalisma+0x1098>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	4a46      	ldr	r2, [pc, #280]	; (8005e54 <checkAktifCalisma+0x109c>)
 8005d3a:	7812      	ldrb	r2, [r2, #0]
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d214      	bcs.n	8005d6a <checkAktifCalisma+0xfb2>
 8005d40:	4b37      	ldr	r3, [pc, #220]	; (8005e20 <checkAktifCalisma+0x1068>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	f083 0301 	eor.w	r3, r3, #1
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d006      	beq.n	8005d5c <checkAktifCalisma+0xfa4>
 8005d4e:	4b35      	ldr	r3, [pc, #212]	; (8005e24 <checkAktifCalisma+0x106c>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	f083 0301 	eor.w	r3, r3, #1
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d106      	bne.n	8005d6a <checkAktifCalisma+0xfb2>
 8005d5c:	4b38      	ldr	r3, [pc, #224]	; (8005e40 <checkAktifCalisma+0x1088>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	f083 0301 	eor.w	r3, r3, #1
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005d6a:	4b37      	ldr	r3, [pc, #220]	; (8005e48 <checkAktifCalisma+0x1090>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d70:	4b31      	ldr	r3, [pc, #196]	; (8005e38 <checkAktifCalisma+0x1080>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d12b      	bne.n	8005dd0 <checkAktifCalisma+0x1018>
 8005d78:	4b30      	ldr	r3, [pc, #192]	; (8005e3c <checkAktifCalisma+0x1084>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d003      	beq.n	8005d88 <checkAktifCalisma+0xfd0>
 8005d80:	4b2e      	ldr	r3, [pc, #184]	; (8005e3c <checkAktifCalisma+0x1084>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d123      	bne.n	8005dd0 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d88:	4b25      	ldr	r3, [pc, #148]	; (8005e20 <checkAktifCalisma+0x1068>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d103      	bne.n	8005d98 <checkAktifCalisma+0xfe0>
 8005d90:	4b24      	ldr	r3, [pc, #144]	; (8005e24 <checkAktifCalisma+0x106c>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01b      	beq.n	8005dd0 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d9c:	481e      	ldr	r0, [pc, #120]	; (8005e18 <checkAktifCalisma+0x1060>)
 8005d9e:	f003 fb29 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d103      	bne.n	8005db0 <checkAktifCalisma+0xff8>
 8005da8:	4b1f      	ldr	r3, [pc, #124]	; (8005e28 <checkAktifCalisma+0x1070>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d007      	beq.n	8005dc0 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005db0:	4b1f      	ldr	r3, [pc, #124]	; (8005e30 <checkAktifCalisma+0x1078>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d103      	bne.n	8005dc0 <checkAktifCalisma+0x1008>
 8005db8:	4b1e      	ldr	r3, [pc, #120]	; (8005e34 <checkAktifCalisma+0x107c>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d007      	beq.n	8005dd0 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005dc0:	4b1f      	ldr	r3, [pc, #124]	; (8005e40 <checkAktifCalisma+0x1088>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005dc8:	4b23      	ldr	r3, [pc, #140]	; (8005e58 <checkAktifCalisma+0x10a0>)
 8005dca:	2201      	movs	r2, #1
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	e002      	b.n	8005dd6 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005dd0:	4b21      	ldr	r3, [pc, #132]	; (8005e58 <checkAktifCalisma+0x10a0>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005dd6:	4b18      	ldr	r3, [pc, #96]	; (8005e38 <checkAktifCalisma+0x1080>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d140      	bne.n	8005e60 <checkAktifCalisma+0x10a8>
 8005dde:	4b17      	ldr	r3, [pc, #92]	; (8005e3c <checkAktifCalisma+0x1084>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d003      	beq.n	8005dee <checkAktifCalisma+0x1036>
 8005de6:	4b15      	ldr	r3, [pc, #84]	; (8005e3c <checkAktifCalisma+0x1084>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d138      	bne.n	8005e60 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005dee:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <checkAktifCalisma+0x1068>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d103      	bne.n	8005dfe <checkAktifCalisma+0x1046>
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <checkAktifCalisma+0x106c>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d030      	beq.n	8005e60 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005dfe:	4b10      	ldr	r3, [pc, #64]	; (8005e40 <checkAktifCalisma+0x1088>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d02c      	beq.n	8005e60 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005e06:	4b15      	ldr	r3, [pc, #84]	; (8005e5c <checkAktifCalisma+0x10a4>)
 8005e08:	2201      	movs	r2, #1
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	e02b      	b.n	8005e66 <checkAktifCalisma+0x10ae>
 8005e0e:	bf00      	nop
 8005e10:	40010800 	.word	0x40010800
 8005e14:	20000231 	.word	0x20000231
 8005e18:	40011000 	.word	0x40011000
 8005e1c:	2000022a 	.word	0x2000022a
 8005e20:	20000270 	.word	0x20000270
 8005e24:	20000271 	.word	0x20000271
 8005e28:	20000230 	.word	0x20000230
 8005e2c:	40010c00 	.word	0x40010c00
 8005e30:	20000280 	.word	0x20000280
 8005e34:	20000281 	.word	0x20000281
 8005e38:	2000022f 	.word	0x2000022f
 8005e3c:	2000022c 	.word	0x2000022c
 8005e40:	20000266 	.word	0x20000266
 8005e44:	20000253 	.word	0x20000253
 8005e48:	2000026d 	.word	0x2000026d
 8005e4c:	20000200 	.word	0x20000200
 8005e50:	20000204 	.word	0x20000204
 8005e54:	2000023f 	.word	0x2000023f
 8005e58:	2000026e 	.word	0x2000026e
 8005e5c:	2000026f 	.word	0x2000026f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005e60:	4b8b      	ldr	r3, [pc, #556]	; (8006090 <checkAktifCalisma+0x12d8>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005e66:	4b8b      	ldr	r3, [pc, #556]	; (8006094 <checkAktifCalisma+0x12dc>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d107      	bne.n	8005e7e <checkAktifCalisma+0x10c6>
 8005e6e:	4b8a      	ldr	r3, [pc, #552]	; (8006098 <checkAktifCalisma+0x12e0>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d103      	bne.n	8005e7e <checkAktifCalisma+0x10c6>
 8005e76:	4b86      	ldr	r3, [pc, #536]	; (8006090 <checkAktifCalisma+0x12d8>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d005      	beq.n	8005e8a <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005e7e:	2201      	movs	r2, #1
 8005e80:	2120      	movs	r1, #32
 8005e82:	4886      	ldr	r0, [pc, #536]	; (800609c <checkAktifCalisma+0x12e4>)
 8005e84:	f003 facd 	bl	8009422 <HAL_GPIO_WritePin>
 8005e88:	e004      	b.n	8005e94 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2120      	movs	r1, #32
 8005e8e:	4883      	ldr	r0, [pc, #524]	; (800609c <checkAktifCalisma+0x12e4>)
 8005e90:	f003 fac7 	bl	8009422 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005e94:	4b82      	ldr	r3, [pc, #520]	; (80060a0 <checkAktifCalisma+0x12e8>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00e      	beq.n	8005eba <checkAktifCalisma+0x1102>
 8005e9c:	2102      	movs	r1, #2
 8005e9e:	4881      	ldr	r0, [pc, #516]	; (80060a4 <checkAktifCalisma+0x12ec>)
 8005ea0:	f003 faa8 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d107      	bne.n	8005eba <checkAktifCalisma+0x1102>
 8005eaa:	4b7f      	ldr	r3, [pc, #508]	; (80060a8 <checkAktifCalisma+0x12f0>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <checkAktifCalisma+0x1102>
 8005eb2:	4b7e      	ldr	r3, [pc, #504]	; (80060ac <checkAktifCalisma+0x12f4>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d112      	bne.n	8005ee0 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005eba:	4b7d      	ldr	r3, [pc, #500]	; (80060b0 <checkAktifCalisma+0x12f8>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d066      	beq.n	8005f90 <checkAktifCalisma+0x11d8>
 8005ec2:	2104      	movs	r1, #4
 8005ec4:	4877      	ldr	r0, [pc, #476]	; (80060a4 <checkAktifCalisma+0x12ec>)
 8005ec6:	f003 fa95 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d15f      	bne.n	8005f90 <checkAktifCalisma+0x11d8>
 8005ed0:	4b75      	ldr	r3, [pc, #468]	; (80060a8 <checkAktifCalisma+0x12f0>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d05b      	beq.n	8005f90 <checkAktifCalisma+0x11d8>
 8005ed8:	4b74      	ldr	r3, [pc, #464]	; (80060ac <checkAktifCalisma+0x12f4>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d057      	beq.n	8005f90 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005ee0:	4b74      	ldr	r3, [pc, #464]	; (80060b4 <checkAktifCalisma+0x12fc>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	4b72      	ldr	r3, [pc, #456]	; (80060b4 <checkAktifCalisma+0x12fc>)
 8005eea:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005eec:	4b71      	ldr	r3, [pc, #452]	; (80060b4 <checkAktifCalisma+0x12fc>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b09      	cmp	r3, #9
 8005ef2:	d908      	bls.n	8005f06 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005ef4:	4b6f      	ldr	r3, [pc, #444]	; (80060b4 <checkAktifCalisma+0x12fc>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005efa:	4b6f      	ldr	r3, [pc, #444]	; (80060b8 <checkAktifCalisma+0x1300>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	3301      	adds	r3, #1
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	4b6d      	ldr	r3, [pc, #436]	; (80060b8 <checkAktifCalisma+0x1300>)
 8005f04:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005f06:	4b6c      	ldr	r3, [pc, #432]	; (80060b8 <checkAktifCalisma+0x1300>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b09      	cmp	r3, #9
 8005f0c:	d908      	bls.n	8005f20 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005f0e:	4b6a      	ldr	r3, [pc, #424]	; (80060b8 <checkAktifCalisma+0x1300>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005f14:	4b69      	ldr	r3, [pc, #420]	; (80060bc <checkAktifCalisma+0x1304>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	4b67      	ldr	r3, [pc, #412]	; (80060bc <checkAktifCalisma+0x1304>)
 8005f1e:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005f20:	4b66      	ldr	r3, [pc, #408]	; (80060bc <checkAktifCalisma+0x1304>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b09      	cmp	r3, #9
 8005f26:	d908      	bls.n	8005f3a <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005f28:	4b64      	ldr	r3, [pc, #400]	; (80060bc <checkAktifCalisma+0x1304>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005f2e:	4b64      	ldr	r3, [pc, #400]	; (80060c0 <checkAktifCalisma+0x1308>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	3301      	adds	r3, #1
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	4b62      	ldr	r3, [pc, #392]	; (80060c0 <checkAktifCalisma+0x1308>)
 8005f38:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005f3a:	4b61      	ldr	r3, [pc, #388]	; (80060c0 <checkAktifCalisma+0x1308>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b09      	cmp	r3, #9
 8005f40:	d908      	bls.n	8005f54 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005f42:	4b5f      	ldr	r3, [pc, #380]	; (80060c0 <checkAktifCalisma+0x1308>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005f48:	4b5e      	ldr	r3, [pc, #376]	; (80060c4 <checkAktifCalisma+0x130c>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	4b5c      	ldr	r3, [pc, #368]	; (80060c4 <checkAktifCalisma+0x130c>)
 8005f52:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005f54:	4b5b      	ldr	r3, [pc, #364]	; (80060c4 <checkAktifCalisma+0x130c>)
 8005f56:	781a      	ldrb	r2, [r3, #0]
 8005f58:	4b5b      	ldr	r3, [pc, #364]	; (80060c8 <checkAktifCalisma+0x1310>)
 8005f5a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005f5e:	4b58      	ldr	r3, [pc, #352]	; (80060c0 <checkAktifCalisma+0x1308>)
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	4b59      	ldr	r3, [pc, #356]	; (80060c8 <checkAktifCalisma+0x1310>)
 8005f64:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005f66:	4b55      	ldr	r3, [pc, #340]	; (80060bc <checkAktifCalisma+0x1304>)
 8005f68:	781a      	ldrb	r2, [r3, #0]
 8005f6a:	4b57      	ldr	r3, [pc, #348]	; (80060c8 <checkAktifCalisma+0x1310>)
 8005f6c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005f6e:	4b52      	ldr	r3, [pc, #328]	; (80060b8 <checkAktifCalisma+0x1300>)
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	4b55      	ldr	r3, [pc, #340]	; (80060c8 <checkAktifCalisma+0x1310>)
 8005f74:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005f76:	4b4f      	ldr	r3, [pc, #316]	; (80060b4 <checkAktifCalisma+0x12fc>)
 8005f78:	781a      	ldrb	r2, [r3, #0]
 8005f7a:	4b53      	ldr	r3, [pc, #332]	; (80060c8 <checkAktifCalisma+0x1310>)
 8005f7c:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005f7e:	4b53      	ldr	r3, [pc, #332]	; (80060cc <checkAktifCalisma+0x1314>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005f84:	4b46      	ldr	r3, [pc, #280]	; (80060a0 <checkAktifCalisma+0x12e8>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005f8a:	4b49      	ldr	r3, [pc, #292]	; (80060b0 <checkAktifCalisma+0x12f8>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f94:	484e      	ldr	r0, [pc, #312]	; (80060d0 <checkAktifCalisma+0x1318>)
 8005f96:	f003 fa2d 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d016      	beq.n	8005fce <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005fa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fa4:	484a      	ldr	r0, [pc, #296]	; (80060d0 <checkAktifCalisma+0x1318>)
 8005fa6:	f003 fa25 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00e      	beq.n	8005fce <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fb4:	4846      	ldr	r0, [pc, #280]	; (80060d0 <checkAktifCalisma+0x1318>)
 8005fb6:	f003 fa1d 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d006      	beq.n	8005fce <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005fc0:	2140      	movs	r1, #64	; 0x40
 8005fc2:	4838      	ldr	r0, [pc, #224]	; (80060a4 <checkAktifCalisma+0x12ec>)
 8005fc4:	f003 fa16 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <checkAktifCalisma+0x121e>
			startBasili=1;
 8005fce:	4b41      	ldr	r3, [pc, #260]	; (80060d4 <checkAktifCalisma+0x131c>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	701a      	strb	r2, [r3, #0]
 8005fd4:	e002      	b.n	8005fdc <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005fd6:	4b3f      	ldr	r3, [pc, #252]	; (80060d4 <checkAktifCalisma+0x131c>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005fdc:	4b3d      	ldr	r3, [pc, #244]	; (80060d4 <checkAktifCalisma+0x131c>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d016      	beq.n	8006012 <checkAktifCalisma+0x125a>
 8005fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fe8:	4839      	ldr	r0, [pc, #228]	; (80060d0 <checkAktifCalisma+0x1318>)
 8005fea:	f003 fa03 	bl	80093f4 <HAL_GPIO_ReadPin>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d10e      	bne.n	8006012 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005ff4:	4b38      	ldr	r3, [pc, #224]	; (80060d8 <checkAktifCalisma+0x1320>)
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	f7fa fd9c 	bl	8000b38 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006000:	2001      	movs	r0, #1
 8006002:	f7fa fd3f 	bl	8000a84 <hata2EEPROM>
			convertAndSendData();
 8006006:	f001 fcb5 	bl	8007974 <convertAndSendData>
			acilstophatasi=1;
 800600a:	4b34      	ldr	r3, [pc, #208]	; (80060dc <checkAktifCalisma+0x1324>)
 800600c:	2201      	movs	r2, #1
 800600e:	701a      	strb	r2, [r3, #0]
		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006010:	e018      	b.n	8006044 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006012:	4b32      	ldr	r3, [pc, #200]	; (80060dc <checkAktifCalisma+0x1324>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d014      	beq.n	8006044 <checkAktifCalisma+0x128c>
 800601a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800601e:	482c      	ldr	r0, [pc, #176]	; (80060d0 <checkAktifCalisma+0x1318>)
 8006020:	f003 f9e8 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10c      	bne.n	8006044 <checkAktifCalisma+0x128c>
 800602a:	4b2a      	ldr	r3, [pc, #168]	; (80060d4 <checkAktifCalisma+0x131c>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	f083 0301 	eor.w	r3, r3, #1
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006038:	4b28      	ldr	r3, [pc, #160]	; (80060dc <checkAktifCalisma+0x1324>)
 800603a:	2200      	movs	r2, #0
 800603c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 800603e:	2001      	movs	r0, #1
 8006040:	f7fe fce8 	bl	8004a14 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006044:	4b26      	ldr	r3, [pc, #152]	; (80060e0 <checkAktifCalisma+0x1328>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	f083 0301 	eor.w	r3, r3, #1
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d04e      	beq.n	80060f0 <checkAktifCalisma+0x1338>
 8006052:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006056:	481e      	ldr	r0, [pc, #120]	; (80060d0 <checkAktifCalisma+0x1318>)
 8006058:	f003 f9cc 	bl	80093f4 <HAL_GPIO_ReadPin>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <checkAktifCalisma+0x12b2>
 8006062:	4b20      	ldr	r3, [pc, #128]	; (80060e4 <checkAktifCalisma+0x132c>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d042      	beq.n	80060f0 <checkAktifCalisma+0x1338>
 800606a:	4b1f      	ldr	r3, [pc, #124]	; (80060e8 <checkAktifCalisma+0x1330>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d13e      	bne.n	80060f0 <checkAktifCalisma+0x1338>
			hataVar=1;
 8006072:	4b19      	ldr	r3, [pc, #100]	; (80060d8 <checkAktifCalisma+0x1320>)
 8006074:	2201      	movs	r2, #1
 8006076:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006078:	2002      	movs	r0, #2
 800607a:	f7fa fd5d 	bl	8000b38 <hataKoduLcdGoster>
			hata2EEPROM(2);
 800607e:	2002      	movs	r0, #2
 8006080:	f7fa fd00 	bl	8000a84 <hata2EEPROM>
			convertAndSendData();
 8006084:	f001 fc76 	bl	8007974 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006088:	4b18      	ldr	r3, [pc, #96]	; (80060ec <checkAktifCalisma+0x1334>)
 800608a:	2201      	movs	r2, #1
 800608c:	701a      	strb	r2, [r3, #0]
		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 800608e:	e047      	b.n	8006120 <checkAktifCalisma+0x1368>
 8006090:	2000026f 	.word	0x2000026f
 8006094:	2000026e 	.word	0x2000026e
 8006098:	2000026d 	.word	0x2000026d
 800609c:	40010800 	.word	0x40010800
 80060a0:	20000263 	.word	0x20000263
 80060a4:	40011000 	.word	0x40011000
 80060a8:	2000022a 	.word	0x2000022a
 80060ac:	20000266 	.word	0x20000266
 80060b0:	20000264 	.word	0x20000264
 80060b4:	20000221 	.word	0x20000221
 80060b8:	20000222 	.word	0x20000222
 80060bc:	20000008 	.word	0x20000008
 80060c0:	20000009 	.word	0x20000009
 80060c4:	20000223 	.word	0x20000223
 80060c8:	20000128 	.word	0x20000128
 80060cc:	20000250 	.word	0x20000250
 80060d0:	40010c00 	.word	0x40010c00
 80060d4:	20000272 	.word	0x20000272
 80060d8:	20000279 	.word	0x20000279
 80060dc:	20000274 	.word	0x20000274
 80060e0:	2000027b 	.word	0x2000027b
 80060e4:	20000285 	.word	0x20000285
 80060e8:	20000228 	.word	0x20000228
 80060ec:	20000275 	.word	0x20000275
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80060f0:	4b9b      	ldr	r3, [pc, #620]	; (8006360 <checkAktifCalisma+0x15a8>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d013      	beq.n	8006120 <checkAktifCalisma+0x1368>
 80060f8:	4b9a      	ldr	r3, [pc, #616]	; (8006364 <checkAktifCalisma+0x15ac>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00f      	beq.n	8006120 <checkAktifCalisma+0x1368>
 8006100:	4b99      	ldr	r3, [pc, #612]	; (8006368 <checkAktifCalisma+0x15b0>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	f083 0301 	eor.w	r3, r3, #1
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d008      	beq.n	8006120 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 800610e:	4b94      	ldr	r3, [pc, #592]	; (8006360 <checkAktifCalisma+0x15a8>)
 8006110:	2200      	movs	r2, #0
 8006112:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006114:	4b95      	ldr	r3, [pc, #596]	; (800636c <checkAktifCalisma+0x15b4>)
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800611a:	2002      	movs	r0, #2
 800611c:	f7fe fc7a 	bl	8004a14 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006120:	4b93      	ldr	r3, [pc, #588]	; (8006370 <checkAktifCalisma+0x15b8>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d11e      	bne.n	8006166 <checkAktifCalisma+0x13ae>
 8006128:	4b92      	ldr	r3, [pc, #584]	; (8006374 <checkAktifCalisma+0x15bc>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d11a      	bne.n	8006166 <checkAktifCalisma+0x13ae>
 8006130:	4b91      	ldr	r3, [pc, #580]	; (8006378 <checkAktifCalisma+0x15c0>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d016      	beq.n	8006166 <checkAktifCalisma+0x13ae>
 8006138:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800613c:	488f      	ldr	r0, [pc, #572]	; (800637c <checkAktifCalisma+0x15c4>)
 800613e:	f003 f959 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006142:	4603      	mov	r3, r0
 8006144:	2b01      	cmp	r3, #1
 8006146:	d10e      	bne.n	8006166 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006148:	4b8d      	ldr	r3, [pc, #564]	; (8006380 <checkAktifCalisma+0x15c8>)
 800614a:	2201      	movs	r2, #1
 800614c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800614e:	2003      	movs	r0, #3
 8006150:	f7fa fcf2 	bl	8000b38 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006154:	2003      	movs	r0, #3
 8006156:	f7fa fc95 	bl	8000a84 <hata2EEPROM>
			convertAndSendData();
 800615a:	f001 fc0b 	bl	8007974 <convertAndSendData>
			basinchatasi=1;
 800615e:	4b89      	ldr	r3, [pc, #548]	; (8006384 <checkAktifCalisma+0x15cc>)
 8006160:	2201      	movs	r2, #1
 8006162:	701a      	strb	r2, [r3, #0]
		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006164:	e015      	b.n	8006192 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006166:	4b87      	ldr	r3, [pc, #540]	; (8006384 <checkAktifCalisma+0x15cc>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d011      	beq.n	8006192 <checkAktifCalisma+0x13da>
 800616e:	4b80      	ldr	r3, [pc, #512]	; (8006370 <checkAktifCalisma+0x15b8>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d10d      	bne.n	8006192 <checkAktifCalisma+0x13da>
 8006176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800617a:	4883      	ldr	r0, [pc, #524]	; (8006388 <checkAktifCalisma+0x15d0>)
 800617c:	f003 f93a 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006180:	4603      	mov	r3, r0
 8006182:	2b01      	cmp	r3, #1
 8006184:	d105      	bne.n	8006192 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8006186:	4b7f      	ldr	r3, [pc, #508]	; (8006384 <checkAktifCalisma+0x15cc>)
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 800618c:	2003      	movs	r0, #3
 800618e:	f7fe fc41 	bl	8004a14 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006192:	4b7e      	ldr	r3, [pc, #504]	; (800638c <checkAktifCalisma+0x15d4>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d103      	bne.n	80061a2 <checkAktifCalisma+0x13ea>
 800619a:	4b7d      	ldr	r3, [pc, #500]	; (8006390 <checkAktifCalisma+0x15d8>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01e      	beq.n	80061e0 <checkAktifCalisma+0x1428>
 80061a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061a6:	487b      	ldr	r0, [pc, #492]	; (8006394 <checkAktifCalisma+0x15dc>)
 80061a8:	f003 f924 	bl	80093f4 <HAL_GPIO_ReadPin>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d116      	bne.n	80061e0 <checkAktifCalisma+0x1428>
 80061b2:	4b79      	ldr	r3, [pc, #484]	; (8006398 <checkAktifCalisma+0x15e0>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d003      	beq.n	80061c2 <checkAktifCalisma+0x140a>
 80061ba:	4b77      	ldr	r3, [pc, #476]	; (8006398 <checkAktifCalisma+0x15e0>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d10e      	bne.n	80061e0 <checkAktifCalisma+0x1428>
			hataVar=1;
 80061c2:	4b6f      	ldr	r3, [pc, #444]	; (8006380 <checkAktifCalisma+0x15c8>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80061c8:	2004      	movs	r0, #4
 80061ca:	f7fa fcb5 	bl	8000b38 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80061ce:	2004      	movs	r0, #4
 80061d0:	f7fa fc58 	bl	8000a84 <hata2EEPROM>
			convertAndSendData();
 80061d4:	f001 fbce 	bl	8007974 <convertAndSendData>
			katkapisivicihatasi=1;
 80061d8:	4b70      	ldr	r3, [pc, #448]	; (800639c <checkAktifCalisma+0x15e4>)
 80061da:	2201      	movs	r2, #1
 80061dc:	701a      	strb	r2, [r3, #0]
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80061de:	e01f      	b.n	8006220 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80061e0:	4b6e      	ldr	r3, [pc, #440]	; (800639c <checkAktifCalisma+0x15e4>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01b      	beq.n	8006220 <checkAktifCalisma+0x1468>
 80061e8:	4b6d      	ldr	r3, [pc, #436]	; (80063a0 <checkAktifCalisma+0x15e8>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d017      	beq.n	8006220 <checkAktifCalisma+0x1468>
 80061f0:	4b66      	ldr	r3, [pc, #408]	; (800638c <checkAktifCalisma+0x15d4>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	f083 0301 	eor.w	r3, r3, #1
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d010      	beq.n	8006220 <checkAktifCalisma+0x1468>
 80061fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006202:	4864      	ldr	r0, [pc, #400]	; (8006394 <checkAktifCalisma+0x15dc>)
 8006204:	f003 f8f6 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d108      	bne.n	8006220 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800620e:	4b63      	ldr	r3, [pc, #396]	; (800639c <checkAktifCalisma+0x15e4>)
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006214:	4b5e      	ldr	r3, [pc, #376]	; (8006390 <checkAktifCalisma+0x15d8>)
 8006216:	2200      	movs	r2, #0
 8006218:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800621a:	2004      	movs	r0, #4
 800621c:	f7fe fbfa 	bl	8004a14 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006220:	4b5a      	ldr	r3, [pc, #360]	; (800638c <checkAktifCalisma+0x15d4>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d103      	bne.n	8006230 <checkAktifCalisma+0x1478>
 8006228:	4b5e      	ldr	r3, [pc, #376]	; (80063a4 <checkAktifCalisma+0x15ec>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01e      	beq.n	800626e <checkAktifCalisma+0x14b6>
 8006230:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006234:	4857      	ldr	r0, [pc, #348]	; (8006394 <checkAktifCalisma+0x15dc>)
 8006236:	f003 f8dd 	bl	80093f4 <HAL_GPIO_ReadPin>
 800623a:	4603      	mov	r3, r0
 800623c:	2b01      	cmp	r3, #1
 800623e:	d116      	bne.n	800626e <checkAktifCalisma+0x14b6>
 8006240:	4b55      	ldr	r3, [pc, #340]	; (8006398 <checkAktifCalisma+0x15e0>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d003      	beq.n	8006250 <checkAktifCalisma+0x1498>
 8006248:	4b53      	ldr	r3, [pc, #332]	; (8006398 <checkAktifCalisma+0x15e0>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b03      	cmp	r3, #3
 800624e:	d10e      	bne.n	800626e <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006250:	4b4b      	ldr	r3, [pc, #300]	; (8006380 <checkAktifCalisma+0x15c8>)
 8006252:	2201      	movs	r2, #1
 8006254:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006256:	2005      	movs	r0, #5
 8006258:	f7fa fc6e 	bl	8000b38 <hataKoduLcdGoster>
			hata2EEPROM(5);
 800625c:	2005      	movs	r0, #5
 800625e:	f7fa fc11 	bl	8000a84 <hata2EEPROM>
			convertAndSendData();
 8006262:	f001 fb87 	bl	8007974 <convertAndSendData>
			tablakapisivicihatasi=1;
 8006266:	4b50      	ldr	r3, [pc, #320]	; (80063a8 <checkAktifCalisma+0x15f0>)
 8006268:	2201      	movs	r2, #1
 800626a:	701a      	strb	r2, [r3, #0]
		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800626c:	e023      	b.n	80062b6 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 800626e:	4b4e      	ldr	r3, [pc, #312]	; (80063a8 <checkAktifCalisma+0x15f0>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d01f      	beq.n	80062b6 <checkAktifCalisma+0x14fe>
 8006276:	4b4a      	ldr	r3, [pc, #296]	; (80063a0 <checkAktifCalisma+0x15e8>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d01b      	beq.n	80062b6 <checkAktifCalisma+0x14fe>
 800627e:	4b43      	ldr	r3, [pc, #268]	; (800638c <checkAktifCalisma+0x15d4>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	f083 0301 	eor.w	r3, r3, #1
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d014      	beq.n	80062b6 <checkAktifCalisma+0x14fe>
 800628c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006290:	4840      	ldr	r0, [pc, #256]	; (8006394 <checkAktifCalisma+0x15dc>)
 8006292:	f003 f8af 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10c      	bne.n	80062b6 <checkAktifCalisma+0x14fe>
 800629c:	4b40      	ldr	r3, [pc, #256]	; (80063a0 <checkAktifCalisma+0x15e8>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d008      	beq.n	80062b6 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80062a4:	4b40      	ldr	r3, [pc, #256]	; (80063a8 <checkAktifCalisma+0x15f0>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80062aa:	4b3e      	ldr	r3, [pc, #248]	; (80063a4 <checkAktifCalisma+0x15ec>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80062b0:	2005      	movs	r0, #5
 80062b2:	f7fe fbaf 	bl	8004a14 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80062b6:	4b30      	ldr	r3, [pc, #192]	; (8006378 <checkAktifCalisma+0x15c0>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d107      	bne.n	80062ce <checkAktifCalisma+0x1516>
 80062be:	4b2a      	ldr	r3, [pc, #168]	; (8006368 <checkAktifCalisma+0x15b0>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d103      	bne.n	80062ce <checkAktifCalisma+0x1516>
 80062c6:	4b39      	ldr	r3, [pc, #228]	; (80063ac <checkAktifCalisma+0x15f4>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d016      	beq.n	80062fc <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80062ce:	4b38      	ldr	r3, [pc, #224]	; (80063b0 <checkAktifCalisma+0x15f8>)
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b38      	ldr	r3, [pc, #224]	; (80063b4 <checkAktifCalisma+0x15fc>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	4a37      	ldr	r2, [pc, #220]	; (80063b8 <checkAktifCalisma+0x1600>)
 80062da:	7812      	ldrb	r2, [r2, #0]
 80062dc:	4293      	cmp	r3, r2
 80062de:	d30d      	bcc.n	80062fc <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80062e0:	4b27      	ldr	r3, [pc, #156]	; (8006380 <checkAktifCalisma+0x15c8>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80062e6:	2006      	movs	r0, #6
 80062e8:	f7fa fc26 	bl	8000b38 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80062ec:	2006      	movs	r0, #6
 80062ee:	f7fa fbc9 	bl	8000a84 <hata2EEPROM>
			  	convertAndSendData();
 80062f2:	f001 fb3f 	bl	8007974 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 80062f6:	4b31      	ldr	r3, [pc, #196]	; (80063bc <checkAktifCalisma+0x1604>)
 80062f8:	2201      	movs	r2, #1
 80062fa:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80062fc:	4b2f      	ldr	r3, [pc, #188]	; (80063bc <checkAktifCalisma+0x1604>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d013      	beq.n	800632c <checkAktifCalisma+0x1574>
 8006304:	2108      	movs	r1, #8
 8006306:	4823      	ldr	r0, [pc, #140]	; (8006394 <checkAktifCalisma+0x15dc>)
 8006308:	f003 f874 	bl	80093f4 <HAL_GPIO_ReadPin>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00c      	beq.n	800632c <checkAktifCalisma+0x1574>
 8006312:	4b1e      	ldr	r3, [pc, #120]	; (800638c <checkAktifCalisma+0x15d4>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	f083 0301 	eor.w	r3, r3, #1
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006320:	4b26      	ldr	r3, [pc, #152]	; (80063bc <checkAktifCalisma+0x1604>)
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006326:	2006      	movs	r0, #6
 8006328:	f7fe fb74 	bl	8004a14 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800632c:	4b24      	ldr	r3, [pc, #144]	; (80063c0 <checkAktifCalisma+0x1608>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10b      	bne.n	800634c <checkAktifCalisma+0x1594>
 8006334:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <checkAktifCalisma+0x15b0>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d107      	bne.n	800634c <checkAktifCalisma+0x1594>
 800633c:	4b21      	ldr	r3, [pc, #132]	; (80063c4 <checkAktifCalisma+0x160c>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d103      	bne.n	800634c <checkAktifCalisma+0x1594>
 8006344:	4b19      	ldr	r3, [pc, #100]	; (80063ac <checkAktifCalisma+0x15f4>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d03f      	beq.n	80063cc <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 800634c:	4b1e      	ldr	r3, [pc, #120]	; (80063c8 <checkAktifCalisma+0x1610>)
 800634e:	2200      	movs	r2, #0
 8006350:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006352:	4b0f      	ldr	r3, [pc, #60]	; (8006390 <checkAktifCalisma+0x15d8>)
 8006354:	2201      	movs	r2, #1
 8006356:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006358:	4b12      	ldr	r3, [pc, #72]	; (80063a4 <checkAktifCalisma+0x15ec>)
 800635a:	2201      	movs	r2, #1
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	e03c      	b.n	80063da <checkAktifCalisma+0x1622>
 8006360:	20000275 	.word	0x20000275
 8006364:	2000027b 	.word	0x2000027b
 8006368:	2000025c 	.word	0x2000025c
 800636c:	20000285 	.word	0x20000285
 8006370:	20000227 	.word	0x20000227
 8006374:	2000022b 	.word	0x2000022b
 8006378:	20000278 	.word	0x20000278
 800637c:	40011000 	.word	0x40011000
 8006380:	20000279 	.word	0x20000279
 8006384:	20000282 	.word	0x20000282
 8006388:	40010c00 	.word	0x40010c00
 800638c:	20000272 	.word	0x20000272
 8006390:	20000286 	.word	0x20000286
 8006394:	40010800 	.word	0x40010800
 8006398:	2000022c 	.word	0x2000022c
 800639c:	20000283 	.word	0x20000283
 80063a0:	20000266 	.word	0x20000266
 80063a4:	20000287 	.word	0x20000287
 80063a8:	20000284 	.word	0x20000284
 80063ac:	2000025b 	.word	0x2000025b
 80063b0:	20000200 	.word	0x20000200
 80063b4:	20000214 	.word	0x20000214
 80063b8:	2000023c 	.word	0x2000023c
 80063bc:	20000273 	.word	0x20000273
 80063c0:	20000259 	.word	0x20000259
 80063c4:	2000025a 	.word	0x2000025a
 80063c8:	2000027a 	.word	0x2000027a
		} else {
			makineCalisiyor=1;
 80063cc:	4b1e      	ldr	r3, [pc, #120]	; (8006448 <checkAktifCalisma+0x1690>)
 80063ce:	2201      	movs	r2, #1
 80063d0:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80063d2:	4b1e      	ldr	r3, [pc, #120]	; (800644c <checkAktifCalisma+0x1694>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1e      	ldr	r2, [pc, #120]	; (8006450 <checkAktifCalisma+0x1698>)
 80063d8:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80063da:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <checkAktifCalisma+0x169c>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d02f      	beq.n	8006442 <checkAktifCalisma+0x168a>
 80063e2:	4b1d      	ldr	r3, [pc, #116]	; (8006458 <checkAktifCalisma+0x16a0>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	f083 0301 	eor.w	r3, r3, #1
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d028      	beq.n	8006442 <checkAktifCalisma+0x168a>
 80063f0:	4b1a      	ldr	r3, [pc, #104]	; (800645c <checkAktifCalisma+0x16a4>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	f083 0301 	eor.w	r3, r3, #1
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d021      	beq.n	8006442 <checkAktifCalisma+0x168a>
 80063fe:	4b18      	ldr	r3, [pc, #96]	; (8006460 <checkAktifCalisma+0x16a8>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	f083 0301 	eor.w	r3, r3, #1
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01a      	beq.n	8006442 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800640c:	4b15      	ldr	r3, [pc, #84]	; (8006464 <checkAktifCalisma+0x16ac>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	f083 0301 	eor.w	r3, r3, #1
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d013      	beq.n	8006442 <checkAktifCalisma+0x168a>
 800641a:	4b13      	ldr	r3, [pc, #76]	; (8006468 <checkAktifCalisma+0x16b0>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	f083 0301 	eor.w	r3, r3, #1
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00c      	beq.n	8006442 <checkAktifCalisma+0x168a>
 8006428:	4b10      	ldr	r3, [pc, #64]	; (800646c <checkAktifCalisma+0x16b4>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	f083 0301 	eor.w	r3, r3, #1
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d005      	beq.n	8006442 <checkAktifCalisma+0x168a>
			hataVar=0;
 8006436:	4b07      	ldr	r3, [pc, #28]	; (8006454 <checkAktifCalisma+0x169c>)
 8006438:	2200      	movs	r2, #0
 800643a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 800643c:	2007      	movs	r0, #7
 800643e:	f7fe fae9 	bl	8004a14 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006442:	bf00      	nop
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	2000027a 	.word	0x2000027a
 800644c:	20000200 	.word	0x20000200
 8006450:	20000214 	.word	0x20000214
 8006454:	20000279 	.word	0x20000279
 8006458:	20000274 	.word	0x20000274
 800645c:	20000275 	.word	0x20000275
 8006460:	20000282 	.word	0x20000282
 8006464:	20000283 	.word	0x20000283
 8006468:	20000284 	.word	0x20000284
 800646c:	20000273 	.word	0x20000273

08006470 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006474:	4b8b      	ldr	r3, [pc, #556]	; (80066a4 <checkDemoModCalisma+0x234>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b01      	cmp	r3, #1
 800647a:	f040 8229 	bne.w	80068d0 <checkDemoModCalisma+0x460>
 800647e:	4b8a      	ldr	r3, [pc, #552]	; (80066a8 <checkDemoModCalisma+0x238>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 8224 	beq.w	80068d0 <checkDemoModCalisma+0x460>
 8006488:	4b88      	ldr	r3, [pc, #544]	; (80066ac <checkDemoModCalisma+0x23c>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f040 821f 	bne.w	80068d0 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006492:	2102      	movs	r1, #2
 8006494:	4886      	ldr	r0, [pc, #536]	; (80066b0 <checkDemoModCalisma+0x240>)
 8006496:	f002 ffad 	bl	80093f4 <HAL_GPIO_ReadPin>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d11d      	bne.n	80064dc <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80064a0:	4b84      	ldr	r3, [pc, #528]	; (80066b4 <checkDemoModCalisma+0x244>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	f083 0301 	eor.w	r3, r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d016      	beq.n	80064dc <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80064ae:	4b82      	ldr	r3, [pc, #520]	; (80066b8 <checkDemoModCalisma+0x248>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	f083 0301 	eor.w	r3, r3, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00f      	beq.n	80064dc <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80064bc:	4b7f      	ldr	r3, [pc, #508]	; (80066bc <checkDemoModCalisma+0x24c>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	f083 0301 	eor.w	r3, r3, #1
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d008      	beq.n	80064dc <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80064ca:	2201      	movs	r2, #1
 80064cc:	2104      	movs	r1, #4
 80064ce:	487c      	ldr	r0, [pc, #496]	; (80066c0 <checkDemoModCalisma+0x250>)
 80064d0:	f002 ffa7 	bl	8009422 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80064d4:	4b7b      	ldr	r3, [pc, #492]	; (80066c4 <checkDemoModCalisma+0x254>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	e00e      	b.n	80064fa <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80064dc:	2102      	movs	r1, #2
 80064de:	4874      	ldr	r0, [pc, #464]	; (80066b0 <checkDemoModCalisma+0x240>)
 80064e0:	f002 ff88 	bl	80093f4 <HAL_GPIO_ReadPin>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d107      	bne.n	80064fa <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80064ea:	2200      	movs	r2, #0
 80064ec:	2104      	movs	r1, #4
 80064ee:	4874      	ldr	r0, [pc, #464]	; (80066c0 <checkDemoModCalisma+0x250>)
 80064f0:	f002 ff97 	bl	8009422 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80064f4:	4b73      	ldr	r3, [pc, #460]	; (80066c4 <checkDemoModCalisma+0x254>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80064fa:	4b72      	ldr	r3, [pc, #456]	; (80066c4 <checkDemoModCalisma+0x254>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10b      	bne.n	800651a <checkDemoModCalisma+0xaa>
 8006502:	4b6d      	ldr	r3, [pc, #436]	; (80066b8 <checkDemoModCalisma+0x248>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d107      	bne.n	800651a <checkDemoModCalisma+0xaa>
 800650a:	4b6c      	ldr	r3, [pc, #432]	; (80066bc <checkDemoModCalisma+0x24c>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d103      	bne.n	800651a <checkDemoModCalisma+0xaa>
 8006512:	4b68      	ldr	r3, [pc, #416]	; (80066b4 <checkDemoModCalisma+0x244>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00c      	beq.n	8006534 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800651a:	2201      	movs	r2, #1
 800651c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006520:	4867      	ldr	r0, [pc, #412]	; (80066c0 <checkDemoModCalisma+0x250>)
 8006522:	f002 ff7e 	bl	8009422 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006526:	2201      	movs	r2, #1
 8006528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800652c:	4864      	ldr	r0, [pc, #400]	; (80066c0 <checkDemoModCalisma+0x250>)
 800652e:	f002 ff78 	bl	8009422 <HAL_GPIO_WritePin>
 8006532:	e00b      	b.n	800654c <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006534:	2200      	movs	r2, #0
 8006536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800653a:	4861      	ldr	r0, [pc, #388]	; (80066c0 <checkDemoModCalisma+0x250>)
 800653c:	f002 ff71 	bl	8009422 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006540:	2200      	movs	r2, #0
 8006542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006546:	485e      	ldr	r0, [pc, #376]	; (80066c0 <checkDemoModCalisma+0x250>)
 8006548:	f002 ff6b 	bl	8009422 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800654c:	2102      	movs	r1, #2
 800654e:	4858      	ldr	r0, [pc, #352]	; (80066b0 <checkDemoModCalisma+0x240>)
 8006550:	f002 ff50 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006554:	4603      	mov	r3, r0
 8006556:	2b01      	cmp	r3, #1
 8006558:	d10d      	bne.n	8006576 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800655a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800655e:	4854      	ldr	r0, [pc, #336]	; (80066b0 <checkDemoModCalisma+0x240>)
 8006560:	f002 ff48 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d105      	bne.n	8006576 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 800656a:	4b56      	ldr	r3, [pc, #344]	; (80066c4 <checkDemoModCalisma+0x254>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	f083 0301 	eor.w	r3, r3, #1
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006576:	2102      	movs	r1, #2
 8006578:	484d      	ldr	r0, [pc, #308]	; (80066b0 <checkDemoModCalisma+0x240>)
 800657a:	f002 ff3b 	bl	80093f4 <HAL_GPIO_ReadPin>
 800657e:	4603      	mov	r3, r0
 8006580:	2b01      	cmp	r3, #1
 8006582:	d125      	bne.n	80065d0 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006588:	4849      	ldr	r0, [pc, #292]	; (80066b0 <checkDemoModCalisma+0x240>)
 800658a:	f002 ff33 	bl	80093f4 <HAL_GPIO_ReadPin>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d11d      	bne.n	80065d0 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006594:	4b4b      	ldr	r3, [pc, #300]	; (80066c4 <checkDemoModCalisma+0x254>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	f083 0301 	eor.w	r3, r3, #1
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d016      	beq.n	80065d0 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80065a2:	4b44      	ldr	r3, [pc, #272]	; (80066b4 <checkDemoModCalisma+0x244>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	f083 0301 	eor.w	r3, r3, #1
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00f      	beq.n	80065d0 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80065b0:	4b42      	ldr	r3, [pc, #264]	; (80066bc <checkDemoModCalisma+0x24c>)
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	f083 0301 	eor.w	r3, r3, #1
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80065be:	2201      	movs	r2, #1
 80065c0:	2120      	movs	r1, #32
 80065c2:	483b      	ldr	r0, [pc, #236]	; (80066b0 <checkDemoModCalisma+0x240>)
 80065c4:	f002 ff2d 	bl	8009422 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80065c8:	4b3b      	ldr	r3, [pc, #236]	; (80066b8 <checkDemoModCalisma+0x248>)
 80065ca:	2201      	movs	r2, #1
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	e007      	b.n	80065e0 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80065d0:	2200      	movs	r2, #0
 80065d2:	2120      	movs	r1, #32
 80065d4:	4836      	ldr	r0, [pc, #216]	; (80066b0 <checkDemoModCalisma+0x240>)
 80065d6:	f002 ff24 	bl	8009422 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80065da:	4b37      	ldr	r3, [pc, #220]	; (80066b8 <checkDemoModCalisma+0x248>)
 80065dc:	2200      	movs	r2, #0
 80065de:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065e0:	2102      	movs	r1, #2
 80065e2:	4833      	ldr	r0, [pc, #204]	; (80066b0 <checkDemoModCalisma+0x240>)
 80065e4:	f002 ff06 	bl	80093f4 <HAL_GPIO_ReadPin>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d125      	bne.n	800663a <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80065ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065f2:	482f      	ldr	r0, [pc, #188]	; (80066b0 <checkDemoModCalisma+0x240>)
 80065f4:	f002 fefe 	bl	80093f4 <HAL_GPIO_ReadPin>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d11d      	bne.n	800663a <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80065fe:	4b31      	ldr	r3, [pc, #196]	; (80066c4 <checkDemoModCalisma+0x254>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	f083 0301 	eor.w	r3, r3, #1
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d016      	beq.n	800663a <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 800660c:	4b2a      	ldr	r3, [pc, #168]	; (80066b8 <checkDemoModCalisma+0x248>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	f083 0301 	eor.w	r3, r3, #1
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00f      	beq.n	800663a <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800661a:	4b26      	ldr	r3, [pc, #152]	; (80066b4 <checkDemoModCalisma+0x244>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	f083 0301 	eor.w	r3, r3, #1
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006628:	2201      	movs	r2, #1
 800662a:	2110      	movs	r1, #16
 800662c:	4820      	ldr	r0, [pc, #128]	; (80066b0 <checkDemoModCalisma+0x240>)
 800662e:	f002 fef8 	bl	8009422 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006632:	4b22      	ldr	r3, [pc, #136]	; (80066bc <checkDemoModCalisma+0x24c>)
 8006634:	2201      	movs	r2, #1
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	e007      	b.n	800664a <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800663a:	2200      	movs	r2, #0
 800663c:	2110      	movs	r1, #16
 800663e:	481c      	ldr	r0, [pc, #112]	; (80066b0 <checkDemoModCalisma+0x240>)
 8006640:	f002 feef 	bl	8009422 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006644:	4b1d      	ldr	r3, [pc, #116]	; (80066bc <checkDemoModCalisma+0x24c>)
 8006646:	2200      	movs	r2, #0
 8006648:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800664a:	2104      	movs	r1, #4
 800664c:	4818      	ldr	r0, [pc, #96]	; (80066b0 <checkDemoModCalisma+0x240>)
 800664e:	f002 fed1 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d139      	bne.n	80066cc <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006658:	4b1a      	ldr	r3, [pc, #104]	; (80066c4 <checkDemoModCalisma+0x254>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f083 0301 	eor.w	r3, r3, #1
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d032      	beq.n	80066cc <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8006666:	4b15      	ldr	r3, [pc, #84]	; (80066bc <checkDemoModCalisma+0x24c>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	f083 0301 	eor.w	r3, r3, #1
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d02b      	beq.n	80066cc <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006674:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <checkDemoModCalisma+0x248>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	f083 0301 	eor.w	r3, r3, #1
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d024      	beq.n	80066cc <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006682:	2201      	movs	r2, #1
 8006684:	2102      	movs	r1, #2
 8006686:	480e      	ldr	r0, [pc, #56]	; (80066c0 <checkDemoModCalisma+0x250>)
 8006688:	f002 fecb 	bl	8009422 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800668c:	2201      	movs	r2, #1
 800668e:	2101      	movs	r1, #1
 8006690:	480b      	ldr	r0, [pc, #44]	; (80066c0 <checkDemoModCalisma+0x250>)
 8006692:	f002 fec6 	bl	8009422 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8006696:	4b07      	ldr	r3, [pc, #28]	; (80066b4 <checkDemoModCalisma+0x244>)
 8006698:	2201      	movs	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 800669c:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <checkDemoModCalisma+0x258>)
 800669e:	2201      	movs	r2, #1
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	e027      	b.n	80066f4 <checkDemoModCalisma+0x284>
 80066a4:	20000242 	.word	0x20000242
 80066a8:	20000276 	.word	0x20000276
 80066ac:	20000241 	.word	0x20000241
 80066b0:	40011000 	.word	0x40011000
 80066b4:	2000027d 	.word	0x2000027d
 80066b8:	2000027e 	.word	0x2000027e
 80066bc:	2000027f 	.word	0x2000027f
 80066c0:	40010c00 	.word	0x40010c00
 80066c4:	2000027c 	.word	0x2000027c
 80066c8:	20000262 	.word	0x20000262
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80066cc:	2104      	movs	r1, #4
 80066ce:	48a0      	ldr	r0, [pc, #640]	; (8006950 <checkDemoModCalisma+0x4e0>)
 80066d0:	f002 fe90 	bl	80093f4 <HAL_GPIO_ReadPin>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d10c      	bne.n	80066f4 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80066da:	2200      	movs	r2, #0
 80066dc:	2102      	movs	r1, #2
 80066de:	489d      	ldr	r0, [pc, #628]	; (8006954 <checkDemoModCalisma+0x4e4>)
 80066e0:	f002 fe9f 	bl	8009422 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80066e4:	2200      	movs	r2, #0
 80066e6:	2101      	movs	r1, #1
 80066e8:	489a      	ldr	r0, [pc, #616]	; (8006954 <checkDemoModCalisma+0x4e4>)
 80066ea:	f002 fe9a 	bl	8009422 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80066ee:	4b9a      	ldr	r3, [pc, #616]	; (8006958 <checkDemoModCalisma+0x4e8>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80066f4:	2104      	movs	r1, #4
 80066f6:	4896      	ldr	r0, [pc, #600]	; (8006950 <checkDemoModCalisma+0x4e0>)
 80066f8:	f002 fe7c 	bl	80093f4 <HAL_GPIO_ReadPin>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d10d      	bne.n	800671e <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006702:	2201      	movs	r2, #1
 8006704:	2180      	movs	r1, #128	; 0x80
 8006706:	4895      	ldr	r0, [pc, #596]	; (800695c <checkDemoModCalisma+0x4ec>)
 8006708:	f002 fe8b 	bl	8009422 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800670c:	2201      	movs	r2, #1
 800670e:	2120      	movs	r1, #32
 8006710:	4892      	ldr	r0, [pc, #584]	; (800695c <checkDemoModCalisma+0x4ec>)
 8006712:	f002 fe86 	bl	8009422 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006716:	4b92      	ldr	r3, [pc, #584]	; (8006960 <checkDemoModCalisma+0x4f0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a92      	ldr	r2, [pc, #584]	; (8006964 <checkDemoModCalisma+0x4f4>)
 800671c:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800671e:	4b90      	ldr	r3, [pc, #576]	; (8006960 <checkDemoModCalisma+0x4f0>)
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	4b90      	ldr	r3, [pc, #576]	; (8006964 <checkDemoModCalisma+0x4f4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b04      	cmp	r3, #4
 800672a:	d909      	bls.n	8006740 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800672c:	2200      	movs	r2, #0
 800672e:	2180      	movs	r1, #128	; 0x80
 8006730:	488a      	ldr	r0, [pc, #552]	; (800695c <checkDemoModCalisma+0x4ec>)
 8006732:	f002 fe76 	bl	8009422 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006736:	2200      	movs	r2, #0
 8006738:	2120      	movs	r1, #32
 800673a:	4888      	ldr	r0, [pc, #544]	; (800695c <checkDemoModCalisma+0x4ec>)
 800673c:	f002 fe71 	bl	8009422 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006740:	2102      	movs	r1, #2
 8006742:	4883      	ldr	r0, [pc, #524]	; (8006950 <checkDemoModCalisma+0x4e0>)
 8006744:	f002 fe56 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006748:	4603      	mov	r3, r0
 800674a:	2b01      	cmp	r3, #1
 800674c:	d108      	bne.n	8006760 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800674e:	2201      	movs	r2, #1
 8006750:	2140      	movs	r1, #64	; 0x40
 8006752:	4882      	ldr	r0, [pc, #520]	; (800695c <checkDemoModCalisma+0x4ec>)
 8006754:	f002 fe65 	bl	8009422 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006758:	4b81      	ldr	r3, [pc, #516]	; (8006960 <checkDemoModCalisma+0x4f0>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a81      	ldr	r2, [pc, #516]	; (8006964 <checkDemoModCalisma+0x4f4>)
 800675e:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006760:	4b7f      	ldr	r3, [pc, #508]	; (8006960 <checkDemoModCalisma+0x4f0>)
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	4b7f      	ldr	r3, [pc, #508]	; (8006964 <checkDemoModCalisma+0x4f4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b04      	cmp	r3, #4
 800676c:	d904      	bls.n	8006778 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800676e:	2200      	movs	r2, #0
 8006770:	2140      	movs	r1, #64	; 0x40
 8006772:	487a      	ldr	r0, [pc, #488]	; (800695c <checkDemoModCalisma+0x4ec>)
 8006774:	f002 fe55 	bl	8009422 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006778:	4b7b      	ldr	r3, [pc, #492]	; (8006968 <checkDemoModCalisma+0x4f8>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d058      	beq.n	8006832 <checkDemoModCalisma+0x3c2>
 8006780:	4b7a      	ldr	r3, [pc, #488]	; (800696c <checkDemoModCalisma+0x4fc>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d054      	beq.n	8006832 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006788:	4b79      	ldr	r3, [pc, #484]	; (8006970 <checkDemoModCalisma+0x500>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	3301      	adds	r3, #1
 800678e:	b2da      	uxtb	r2, r3
 8006790:	4b77      	ldr	r3, [pc, #476]	; (8006970 <checkDemoModCalisma+0x500>)
 8006792:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006794:	4b76      	ldr	r3, [pc, #472]	; (8006970 <checkDemoModCalisma+0x500>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b09      	cmp	r3, #9
 800679a:	d908      	bls.n	80067ae <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 800679c:	4b74      	ldr	r3, [pc, #464]	; (8006970 <checkDemoModCalisma+0x500>)
 800679e:	2200      	movs	r2, #0
 80067a0:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80067a2:	4b74      	ldr	r3, [pc, #464]	; (8006974 <checkDemoModCalisma+0x504>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	4b72      	ldr	r3, [pc, #456]	; (8006974 <checkDemoModCalisma+0x504>)
 80067ac:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80067ae:	4b71      	ldr	r3, [pc, #452]	; (8006974 <checkDemoModCalisma+0x504>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b09      	cmp	r3, #9
 80067b4:	d908      	bls.n	80067c8 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80067b6:	4b6f      	ldr	r3, [pc, #444]	; (8006974 <checkDemoModCalisma+0x504>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80067bc:	4b6e      	ldr	r3, [pc, #440]	; (8006978 <checkDemoModCalisma+0x508>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	3301      	adds	r3, #1
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	4b6c      	ldr	r3, [pc, #432]	; (8006978 <checkDemoModCalisma+0x508>)
 80067c6:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80067c8:	4b6b      	ldr	r3, [pc, #428]	; (8006978 <checkDemoModCalisma+0x508>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b09      	cmp	r3, #9
 80067ce:	d908      	bls.n	80067e2 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80067d0:	4b69      	ldr	r3, [pc, #420]	; (8006978 <checkDemoModCalisma+0x508>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80067d6:	4b69      	ldr	r3, [pc, #420]	; (800697c <checkDemoModCalisma+0x50c>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	3301      	adds	r3, #1
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	4b67      	ldr	r3, [pc, #412]	; (800697c <checkDemoModCalisma+0x50c>)
 80067e0:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80067e2:	4b66      	ldr	r3, [pc, #408]	; (800697c <checkDemoModCalisma+0x50c>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b09      	cmp	r3, #9
 80067e8:	d908      	bls.n	80067fc <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80067ea:	4b64      	ldr	r3, [pc, #400]	; (800697c <checkDemoModCalisma+0x50c>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80067f0:	4b63      	ldr	r3, [pc, #396]	; (8006980 <checkDemoModCalisma+0x510>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	3301      	adds	r3, #1
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	4b61      	ldr	r3, [pc, #388]	; (8006980 <checkDemoModCalisma+0x510>)
 80067fa:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80067fc:	4b60      	ldr	r3, [pc, #384]	; (8006980 <checkDemoModCalisma+0x510>)
 80067fe:	781a      	ldrb	r2, [r3, #0]
 8006800:	4b60      	ldr	r3, [pc, #384]	; (8006984 <checkDemoModCalisma+0x514>)
 8006802:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006806:	4b5d      	ldr	r3, [pc, #372]	; (800697c <checkDemoModCalisma+0x50c>)
 8006808:	781a      	ldrb	r2, [r3, #0]
 800680a:	4b5e      	ldr	r3, [pc, #376]	; (8006984 <checkDemoModCalisma+0x514>)
 800680c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800680e:	4b5a      	ldr	r3, [pc, #360]	; (8006978 <checkDemoModCalisma+0x508>)
 8006810:	781a      	ldrb	r2, [r3, #0]
 8006812:	4b5c      	ldr	r3, [pc, #368]	; (8006984 <checkDemoModCalisma+0x514>)
 8006814:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006816:	4b57      	ldr	r3, [pc, #348]	; (8006974 <checkDemoModCalisma+0x504>)
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	4b5a      	ldr	r3, [pc, #360]	; (8006984 <checkDemoModCalisma+0x514>)
 800681c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800681e:	4b54      	ldr	r3, [pc, #336]	; (8006970 <checkDemoModCalisma+0x500>)
 8006820:	781a      	ldrb	r2, [r3, #0]
 8006822:	4b58      	ldr	r3, [pc, #352]	; (8006984 <checkDemoModCalisma+0x514>)
 8006824:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006826:	4b58      	ldr	r3, [pc, #352]	; (8006988 <checkDemoModCalisma+0x518>)
 8006828:	2201      	movs	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 800682c:	4b4f      	ldr	r3, [pc, #316]	; (800696c <checkDemoModCalisma+0x4fc>)
 800682e:	2200      	movs	r2, #0
 8006830:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006832:	4b56      	ldr	r3, [pc, #344]	; (800698c <checkDemoModCalisma+0x51c>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f040 8087 	bne.w	800694a <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 800683c:	4a54      	ldr	r2, [pc, #336]	; (8006990 <checkDemoModCalisma+0x520>)
 800683e:	2101      	movs	r1, #1
 8006840:	2002      	movs	r0, #2
 8006842:	f001 faab 	bl	8007d9c <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006846:	4a53      	ldr	r2, [pc, #332]	; (8006994 <checkDemoModCalisma+0x524>)
 8006848:	2101      	movs	r1, #1
 800684a:	2001      	movs	r0, #1
 800684c:	f001 faa6 	bl	8007d9c <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006850:	4b4b      	ldr	r3, [pc, #300]	; (8006980 <checkDemoModCalisma+0x510>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	220a      	movs	r2, #10
 8006856:	4950      	ldr	r1, [pc, #320]	; (8006998 <checkDemoModCalisma+0x528>)
 8006858:	4618      	mov	r0, r3
 800685a:	f005 fdf7 	bl	800c44c <itoa>
			lcd_print(2,12,snum);
 800685e:	4a4e      	ldr	r2, [pc, #312]	; (8006998 <checkDemoModCalisma+0x528>)
 8006860:	210c      	movs	r1, #12
 8006862:	2002      	movs	r0, #2
 8006864:	f001 fa9a 	bl	8007d9c <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006868:	4b44      	ldr	r3, [pc, #272]	; (800697c <checkDemoModCalisma+0x50c>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	220a      	movs	r2, #10
 800686e:	494a      	ldr	r1, [pc, #296]	; (8006998 <checkDemoModCalisma+0x528>)
 8006870:	4618      	mov	r0, r3
 8006872:	f005 fdeb 	bl	800c44c <itoa>
			lcd_print(2,13,snum);
 8006876:	4a48      	ldr	r2, [pc, #288]	; (8006998 <checkDemoModCalisma+0x528>)
 8006878:	210d      	movs	r1, #13
 800687a:	2002      	movs	r0, #2
 800687c:	f001 fa8e 	bl	8007d9c <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006880:	4b3d      	ldr	r3, [pc, #244]	; (8006978 <checkDemoModCalisma+0x508>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	220a      	movs	r2, #10
 8006886:	4944      	ldr	r1, [pc, #272]	; (8006998 <checkDemoModCalisma+0x528>)
 8006888:	4618      	mov	r0, r3
 800688a:	f005 fddf 	bl	800c44c <itoa>
			lcd_print(2,14,snum);
 800688e:	4a42      	ldr	r2, [pc, #264]	; (8006998 <checkDemoModCalisma+0x528>)
 8006890:	210e      	movs	r1, #14
 8006892:	2002      	movs	r0, #2
 8006894:	f001 fa82 	bl	8007d9c <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006898:	4b36      	ldr	r3, [pc, #216]	; (8006974 <checkDemoModCalisma+0x504>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	220a      	movs	r2, #10
 800689e:	493e      	ldr	r1, [pc, #248]	; (8006998 <checkDemoModCalisma+0x528>)
 80068a0:	4618      	mov	r0, r3
 80068a2:	f005 fdd3 	bl	800c44c <itoa>
			lcd_print(2,15,snum);
 80068a6:	4a3c      	ldr	r2, [pc, #240]	; (8006998 <checkDemoModCalisma+0x528>)
 80068a8:	210f      	movs	r1, #15
 80068aa:	2002      	movs	r0, #2
 80068ac:	f001 fa76 	bl	8007d9c <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80068b0:	4b2f      	ldr	r3, [pc, #188]	; (8006970 <checkDemoModCalisma+0x500>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	220a      	movs	r2, #10
 80068b6:	4938      	ldr	r1, [pc, #224]	; (8006998 <checkDemoModCalisma+0x528>)
 80068b8:	4618      	mov	r0, r3
 80068ba:	f005 fdc7 	bl	800c44c <itoa>
			lcd_print(2,16,snum);
 80068be:	4a36      	ldr	r2, [pc, #216]	; (8006998 <checkDemoModCalisma+0x528>)
 80068c0:	2110      	movs	r1, #16
 80068c2:	2002      	movs	r0, #2
 80068c4:	f001 fa6a 	bl	8007d9c <lcd_print>
			mesajYazildi=1;
 80068c8:	4b34      	ldr	r3, [pc, #208]	; (800699c <checkDemoModCalisma+0x52c>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80068ce:	e03c      	b.n	800694a <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80068d0:	4b33      	ldr	r3, [pc, #204]	; (80069a0 <checkDemoModCalisma+0x530>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d003      	beq.n	80068e0 <checkDemoModCalisma+0x470>
 80068d8:	4b2c      	ldr	r3, [pc, #176]	; (800698c <checkDemoModCalisma+0x51c>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d134      	bne.n	800694a <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80068e0:	2200      	movs	r2, #0
 80068e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068e6:	481b      	ldr	r0, [pc, #108]	; (8006954 <checkDemoModCalisma+0x4e4>)
 80068e8:	f002 fd9b 	bl	8009422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80068ec:	2200      	movs	r2, #0
 80068ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80068f2:	4818      	ldr	r0, [pc, #96]	; (8006954 <checkDemoModCalisma+0x4e4>)
 80068f4:	f002 fd95 	bl	8009422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80068f8:	2200      	movs	r2, #0
 80068fa:	2104      	movs	r1, #4
 80068fc:	4815      	ldr	r0, [pc, #84]	; (8006954 <checkDemoModCalisma+0x4e4>)
 80068fe:	f002 fd90 	bl	8009422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006902:	2200      	movs	r2, #0
 8006904:	2102      	movs	r1, #2
 8006906:	4813      	ldr	r0, [pc, #76]	; (8006954 <checkDemoModCalisma+0x4e4>)
 8006908:	f002 fd8b 	bl	8009422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800690c:	2200      	movs	r2, #0
 800690e:	2101      	movs	r1, #1
 8006910:	4810      	ldr	r0, [pc, #64]	; (8006954 <checkDemoModCalisma+0x4e4>)
 8006912:	f002 fd86 	bl	8009422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006916:	2200      	movs	r2, #0
 8006918:	2120      	movs	r1, #32
 800691a:	480d      	ldr	r0, [pc, #52]	; (8006950 <checkDemoModCalisma+0x4e0>)
 800691c:	f002 fd81 	bl	8009422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006920:	2200      	movs	r2, #0
 8006922:	2110      	movs	r1, #16
 8006924:	480a      	ldr	r0, [pc, #40]	; (8006950 <checkDemoModCalisma+0x4e0>)
 8006926:	f002 fd7c 	bl	8009422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800692a:	2200      	movs	r2, #0
 800692c:	2180      	movs	r1, #128	; 0x80
 800692e:	480b      	ldr	r0, [pc, #44]	; (800695c <checkDemoModCalisma+0x4ec>)
 8006930:	f002 fd77 	bl	8009422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006934:	2200      	movs	r2, #0
 8006936:	2140      	movs	r1, #64	; 0x40
 8006938:	4808      	ldr	r0, [pc, #32]	; (800695c <checkDemoModCalisma+0x4ec>)
 800693a:	f002 fd72 	bl	8009422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800693e:	2200      	movs	r2, #0
 8006940:	2120      	movs	r1, #32
 8006942:	4806      	ldr	r0, [pc, #24]	; (800695c <checkDemoModCalisma+0x4ec>)
 8006944:	f002 fd6d 	bl	8009422 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006948:	e7ff      	b.n	800694a <checkDemoModCalisma+0x4da>
 800694a:	bf00      	nop
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40011000 	.word	0x40011000
 8006954:	40010c00 	.word	0x40010c00
 8006958:	2000027d 	.word	0x2000027d
 800695c:	40010800 	.word	0x40010800
 8006960:	20000200 	.word	0x20000200
 8006964:	20000210 	.word	0x20000210
 8006968:	2000027c 	.word	0x2000027c
 800696c:	20000262 	.word	0x20000262
 8006970:	20000221 	.word	0x20000221
 8006974:	20000222 	.word	0x20000222
 8006978:	20000008 	.word	0x20000008
 800697c:	20000009 	.word	0x20000009
 8006980:	20000223 	.word	0x20000223
 8006984:	20000128 	.word	0x20000128
 8006988:	20000250 	.word	0x20000250
 800698c:	20000241 	.word	0x20000241
 8006990:	0800dc0c 	.word	0x0800dc0c
 8006994:	0800dc18 	.word	0x0800dc18
 8006998:	20000198 	.word	0x20000198
 800699c:	20000258 	.word	0x20000258
 80069a0:	20000242 	.word	0x20000242

080069a4 <mainLoop>:

void mainLoop() {
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80069aa:	f7fe f923 	bl	8004bf4 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80069ae:	2101      	movs	r1, #1
 80069b0:	48ac      	ldr	r0, [pc, #688]	; (8006c64 <mainLoop+0x2c0>)
 80069b2:	f002 fd1f 	bl	80093f4 <HAL_GPIO_ReadPin>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d136      	bne.n	8006a2a <mainLoop+0x86>
 80069bc:	2108      	movs	r1, #8
 80069be:	48aa      	ldr	r0, [pc, #680]	; (8006c68 <mainLoop+0x2c4>)
 80069c0:	f002 fd18 	bl	80093f4 <HAL_GPIO_ReadPin>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d12f      	bne.n	8006a2a <mainLoop+0x86>
 80069ca:	2102      	movs	r1, #2
 80069cc:	48a5      	ldr	r0, [pc, #660]	; (8006c64 <mainLoop+0x2c0>)
 80069ce:	f002 fd11 	bl	80093f4 <HAL_GPIO_ReadPin>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d128      	bne.n	8006a2a <mainLoop+0x86>
 80069d8:	2104      	movs	r1, #4
 80069da:	48a2      	ldr	r0, [pc, #648]	; (8006c64 <mainLoop+0x2c0>)
 80069dc:	f002 fd0a 	bl	80093f4 <HAL_GPIO_ReadPin>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d121      	bne.n	8006a2a <mainLoop+0x86>
 80069e6:	2108      	movs	r1, #8
 80069e8:	489e      	ldr	r0, [pc, #632]	; (8006c64 <mainLoop+0x2c0>)
 80069ea:	f002 fd03 	bl	80093f4 <HAL_GPIO_ReadPin>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d11a      	bne.n	8006a2a <mainLoop+0x86>
 80069f4:	2180      	movs	r1, #128	; 0x80
 80069f6:	489c      	ldr	r0, [pc, #624]	; (8006c68 <mainLoop+0x2c4>)
 80069f8:	f002 fcfc 	bl	80093f4 <HAL_GPIO_ReadPin>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d113      	bne.n	8006a2a <mainLoop+0x86>
 8006a02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a06:	4898      	ldr	r0, [pc, #608]	; (8006c68 <mainLoop+0x2c4>)
 8006a08:	f002 fcf4 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d10b      	bne.n	8006a2a <mainLoop+0x86>
 8006a12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a16:	4894      	ldr	r0, [pc, #592]	; (8006c68 <mainLoop+0x2c4>)
 8006a18:	f002 fcec 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d103      	bne.n	8006a2a <mainLoop+0x86>
			butonKontrol=0;
 8006a22:	4b92      	ldr	r3, [pc, #584]	; (8006c6c <mainLoop+0x2c8>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	e003      	b.n	8006a32 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006a2a:	4b91      	ldr	r3, [pc, #580]	; (8006c70 <mainLoop+0x2cc>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a91      	ldr	r2, [pc, #580]	; (8006c74 <mainLoop+0x2d0>)
 8006a30:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006a32:	4b91      	ldr	r3, [pc, #580]	; (8006c78 <mainLoop+0x2d4>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d03a      	beq.n	8006ab0 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a3a:	bf00      	nop
 8006a3c:	488f      	ldr	r0, [pc, #572]	; (8006c7c <mainLoop+0x2d8>)
 8006a3e:	f003 fb02 	bl	800a046 <HAL_I2C_GetError>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d0f9      	beq.n	8006a3c <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006a48:	bf00      	nop
 8006a4a:	488c      	ldr	r0, [pc, #560]	; (8006c7c <mainLoop+0x2d8>)
 8006a4c:	f003 faee 	bl	800a02c <HAL_I2C_GetState>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d1f9      	bne.n	8006a4a <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006a56:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a5a:	9302      	str	r3, [sp, #8]
 8006a5c:	236e      	movs	r3, #110	; 0x6e
 8006a5e:	9301      	str	r3, [sp, #4]
 8006a60:	4b87      	ldr	r3, [pc, #540]	; (8006c80 <mainLoop+0x2dc>)
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	236e      	movs	r3, #110	; 0x6e
 8006a66:	2200      	movs	r2, #0
 8006a68:	21a0      	movs	r1, #160	; 0xa0
 8006a6a:	4884      	ldr	r0, [pc, #528]	; (8006c7c <mainLoop+0x2d8>)
 8006a6c:	f002 ff7c 	bl	8009968 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006a70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a74:	f001 feee 	bl	8008854 <HAL_Delay>

		  hafizaYaz=0;
 8006a78:	4b7f      	ldr	r3, [pc, #508]	; (8006c78 <mainLoop+0x2d4>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006a7e:	4b81      	ldr	r3, [pc, #516]	; (8006c84 <mainLoop+0x2e0>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d105      	bne.n	8006a92 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006a86:	4a80      	ldr	r2, [pc, #512]	; (8006c88 <mainLoop+0x2e4>)
 8006a88:	2101      	movs	r1, #1
 8006a8a:	2002      	movs	r0, #2
 8006a8c:	f001 f986 	bl	8007d9c <lcd_print>
 8006a90:	e008      	b.n	8006aa4 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006a92:	4b7c      	ldr	r3, [pc, #496]	; (8006c84 <mainLoop+0x2e0>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d104      	bne.n	8006aa4 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006a9a:	4a7c      	ldr	r2, [pc, #496]	; (8006c8c <mainLoop+0x2e8>)
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	2002      	movs	r0, #2
 8006aa0:	f001 f97c 	bl	8007d9c <lcd_print>
		  }

		  HAL_Delay(1000);
 8006aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006aa8:	f001 fed4 	bl	8008854 <HAL_Delay>
		  lcd_clear();
 8006aac:	f001 f9a2 	bl	8007df4 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006ab0:	4b77      	ldr	r3, [pc, #476]	; (8006c90 <mainLoop+0x2ec>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	f083 0301 	eor.w	r3, r3, #1
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d06e      	beq.n	8006b9c <mainLoop+0x1f8>
 8006abe:	486f      	ldr	r0, [pc, #444]	; (8006c7c <mainLoop+0x2d8>)
 8006ac0:	f003 fab4 	bl	800a02c <HAL_I2C_GetState>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d168      	bne.n	8006b9c <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8006aca:	4b72      	ldr	r3, [pc, #456]	; (8006c94 <mainLoop+0x2f0>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	f083 0301 	eor.w	r3, r3, #1
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d044      	beq.n	8006b62 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006ad8:	4a6f      	ldr	r2, [pc, #444]	; (8006c98 <mainLoop+0x2f4>)
 8006ada:	2101      	movs	r1, #1
 8006adc:	2001      	movs	r0, #1
 8006ade:	f001 f95d 	bl	8007d9c <lcd_print>
			  if(dilSecim==0) {
 8006ae2:	4b68      	ldr	r3, [pc, #416]	; (8006c84 <mainLoop+0x2e0>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d105      	bne.n	8006af6 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006aea:	4a6c      	ldr	r2, [pc, #432]	; (8006c9c <mainLoop+0x2f8>)
 8006aec:	2101      	movs	r1, #1
 8006aee:	2002      	movs	r0, #2
 8006af0:	f001 f954 	bl	8007d9c <lcd_print>
 8006af4:	e008      	b.n	8006b08 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006af6:	4b63      	ldr	r3, [pc, #396]	; (8006c84 <mainLoop+0x2e0>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d104      	bne.n	8006b08 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006afe:	4a68      	ldr	r2, [pc, #416]	; (8006ca0 <mainLoop+0x2fc>)
 8006b00:	2101      	movs	r1, #1
 8006b02:	2002      	movs	r0, #2
 8006b04:	f001 f94a 	bl	8007d9c <lcd_print>
			  }
			  HAL_Delay(1000);
 8006b08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b0c:	f001 fea2 	bl	8008854 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b10:	bf00      	nop
 8006b12:	485a      	ldr	r0, [pc, #360]	; (8006c7c <mainLoop+0x2d8>)
 8006b14:	f003 fa97 	bl	800a046 <HAL_I2C_GetError>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d0f9      	beq.n	8006b12 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b1e:	e003      	b.n	8006b28 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006b20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b24:	f001 fe96 	bl	8008854 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b28:	4854      	ldr	r0, [pc, #336]	; (8006c7c <mainLoop+0x2d8>)
 8006b2a:	f003 fa7f 	bl	800a02c <HAL_I2C_GetState>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d1f5      	bne.n	8006b20 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006b34:	4b53      	ldr	r3, [pc, #332]	; (8006c84 <mainLoop+0x2e0>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d105      	bne.n	8006b48 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006b3c:	4a59      	ldr	r2, [pc, #356]	; (8006ca4 <mainLoop+0x300>)
 8006b3e:	2101      	movs	r1, #1
 8006b40:	2002      	movs	r0, #2
 8006b42:	f001 f92b 	bl	8007d9c <lcd_print>
 8006b46:	e008      	b.n	8006b5a <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006b48:	4b4e      	ldr	r3, [pc, #312]	; (8006c84 <mainLoop+0x2e0>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d104      	bne.n	8006b5a <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006b50:	4a55      	ldr	r2, [pc, #340]	; (8006ca8 <mainLoop+0x304>)
 8006b52:	2101      	movs	r1, #1
 8006b54:	2002      	movs	r0, #2
 8006b56:	f001 f921 	bl	8007d9c <lcd_print>
			  }

			  ilkOkuma=1;
 8006b5a:	4b4e      	ldr	r3, [pc, #312]	; (8006c94 <mainLoop+0x2f0>)
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	701a      	strb	r2, [r3, #0]
 8006b60:	e014      	b.n	8006b8c <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006b62:	4b48      	ldr	r3, [pc, #288]	; (8006c84 <mainLoop+0x2e0>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d105      	bne.n	8006b76 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006b6a:	4a50      	ldr	r2, [pc, #320]	; (8006cac <mainLoop+0x308>)
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	2002      	movs	r0, #2
 8006b70:	f001 f914 	bl	8007d9c <lcd_print>
 8006b74:	e008      	b.n	8006b88 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006b76:	4b43      	ldr	r3, [pc, #268]	; (8006c84 <mainLoop+0x2e0>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d104      	bne.n	8006b88 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006b7e:	4a4c      	ldr	r2, [pc, #304]	; (8006cb0 <mainLoop+0x30c>)
 8006b80:	2101      	movs	r1, #1
 8006b82:	2002      	movs	r0, #2
 8006b84:	f001 f90a 	bl	8007d9c <lcd_print>
			  }
			  lcd_clear();
 8006b88:	f001 f934 	bl	8007df4 <lcd_clear>
		  }

		  lcd_clear();
 8006b8c:	f001 f932 	bl	8007df4 <lcd_clear>

		  eepromKontrol(1);
 8006b90:	2001      	movs	r0, #1
 8006b92:	f7f9 fb4f 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006b96:	4b3e      	ldr	r3, [pc, #248]	; (8006c90 <mainLoop+0x2ec>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006b9c:	4b45      	ldr	r3, [pc, #276]	; (8006cb4 <mainLoop+0x310>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d11c      	bne.n	8006bde <mainLoop+0x23a>
 8006ba4:	4b44      	ldr	r3, [pc, #272]	; (8006cb8 <mainLoop+0x314>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	f083 0301 	eor.w	r3, r3, #1
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d015      	beq.n	8006bde <mainLoop+0x23a>
 8006bb2:	4b42      	ldr	r3, [pc, #264]	; (8006cbc <mainLoop+0x318>)
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d111      	bne.n	8006bde <mainLoop+0x23a>
			lcd_clear();
 8006bba:	f001 f91b 	bl	8007df4 <lcd_clear>
			HAL_Delay(10);
 8006bbe:	200a      	movs	r0, #10
 8006bc0:	f001 fe48 	bl	8008854 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006bc4:	4a3e      	ldr	r2, [pc, #248]	; (8006cc0 <mainLoop+0x31c>)
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	2001      	movs	r0, #1
 8006bca:	f001 f8e7 	bl	8007d9c <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006bce:	4a3d      	ldr	r2, [pc, #244]	; (8006cc4 <mainLoop+0x320>)
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	2002      	movs	r0, #2
 8006bd4:	f001 f8e2 	bl	8007d9c <lcd_print>
			mesajYazildi=1;
 8006bd8:	4b37      	ldr	r3, [pc, #220]	; (8006cb8 <mainLoop+0x314>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006bde:	4b35      	ldr	r3, [pc, #212]	; (8006cb4 <mainLoop+0x310>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d112      	bne.n	8006c0c <mainLoop+0x268>
 8006be6:	2102      	movs	r1, #2
 8006be8:	481e      	ldr	r0, [pc, #120]	; (8006c64 <mainLoop+0x2c0>)
 8006bea:	f002 fc03 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d10b      	bne.n	8006c0c <mainLoop+0x268>
 8006bf4:	2104      	movs	r1, #4
 8006bf6:	481b      	ldr	r0, [pc, #108]	; (8006c64 <mainLoop+0x2c0>)
 8006bf8:	f002 fbfc 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d104      	bne.n	8006c0c <mainLoop+0x268>
			menuGiris=1;
 8006c02:	4b2c      	ldr	r3, [pc, #176]	; (8006cb4 <mainLoop+0x310>)
 8006c04:	2201      	movs	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006c08:	f001 f8f4 	bl	8007df4 <lcd_clear>
		}

		if(menuGiris==1) {
 8006c0c:	4b29      	ldr	r3, [pc, #164]	; (8006cb4 <mainLoop+0x310>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d101      	bne.n	8006c18 <mainLoop+0x274>
			menu();
 8006c14:	f7fa fba8 	bl	8001368 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006c18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c1c:	4812      	ldr	r0, [pc, #72]	; (8006c68 <mainLoop+0x2c4>)
 8006c1e:	f002 fc18 	bl	8009452 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006c22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c26:	4828      	ldr	r0, [pc, #160]	; (8006cc8 <mainLoop+0x324>)
 8006c28:	f002 fbe4 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <mainLoop+0x2a4>
 8006c32:	4b26      	ldr	r3, [pc, #152]	; (8006ccc <mainLoop+0x328>)
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	f083 0301 	eor.w	r3, r3, #1
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <mainLoop+0x2a4>
			stopVar=1;
 8006c40:	4b23      	ldr	r3, [pc, #140]	; (8006cd0 <mainLoop+0x32c>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	e002      	b.n	8006c4e <mainLoop+0x2aa>
		} else {
			stopVar=0;
 8006c48:	4b21      	ldr	r3, [pc, #132]	; (8006cd0 <mainLoop+0x32c>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006c4e:	f7fd ffe7 	bl	8004c20 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006c52:	f7fe f819 	bl	8004c88 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006c56:	f7fe f85d 	bl	8004d14 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006c5a:	f7fe f8ad 	bl	8004db8 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006c5e:	f7ff fc07 	bl	8006470 <checkDemoModCalisma>
		checkLCDBacklight();
 8006c62:	e6a2      	b.n	80069aa <mainLoop+0x6>
 8006c64:	40010800 	.word	0x40010800
 8006c68:	40011000 	.word	0x40011000
 8006c6c:	20000253 	.word	0x20000253
 8006c70:	20000200 	.word	0x20000200
 8006c74:	2000021c 	.word	0x2000021c
 8006c78:	20000250 	.word	0x20000250
 8006c7c:	200003ac 	.word	0x200003ac
 8006c80:	20000128 	.word	0x20000128
 8006c84:	20000245 	.word	0x20000245
 8006c88:	0800dc2c 	.word	0x0800dc2c
 8006c8c:	0800dc40 	.word	0x0800dc40
 8006c90:	20000251 	.word	0x20000251
 8006c94:	20000252 	.word	0x20000252
 8006c98:	0800dc54 	.word	0x0800dc54
 8006c9c:	0800dc68 	.word	0x0800dc68
 8006ca0:	0800dc7c 	.word	0x0800dc7c
 8006ca4:	0800dc90 	.word	0x0800dc90
 8006ca8:	0800dca4 	.word	0x0800dca4
 8006cac:	0800dcb8 	.word	0x0800dcb8
 8006cb0:	0800dccc 	.word	0x0800dccc
 8006cb4:	20000241 	.word	0x20000241
 8006cb8:	20000258 	.word	0x20000258
 8006cbc:	20000242 	.word	0x20000242
 8006cc0:	0800dce0 	.word	0x0800dce0
 8006cc4:	0800dcf4 	.word	0x0800dcf4
 8006cc8:	40010c00 	.word	0x40010c00
 8006ccc:	20000279 	.word	0x20000279
 8006cd0:	20000276 	.word	0x20000276

08006cd4 <takeMachineID>:
#include "main.h"
#include "GlobalVariables.h"
#include "ESP8266.h"
#include "i2c-lcd.h"

void takeMachineID(int state) {
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08a      	sub	sp, #40	; 0x28
 8006cd8:	af04      	add	r7, sp, #16
 8006cda:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8006cdc:	2001      	movs	r0, #1
 8006cde:	f001 f8bb 	bl	8007e58 <lcd_cursor>

    int cursorPosition = 3;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8006cea:	2305      	movs	r3, #5
 8006cec:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d104      	bne.n	8006cfe <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 8006cf4:	220c      	movs	r2, #12
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	48a0      	ldr	r0, [pc, #640]	; (8006f7c <takeMachineID+0x2a8>)
 8006cfa:	f005 fcce 	bl	800c69a <memset>
    }
    HAL_Delay(100);
 8006cfe:	2064      	movs	r0, #100	; 0x64
 8006d00:	f001 fda8 	bl	8008854 <HAL_Delay>

    printTemplate(1, 0);
 8006d04:	2100      	movs	r1, #0
 8006d06:	2001      	movs	r0, #1
 8006d08:	f7fa f8c8 	bl	8000e9c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006d0c:	2108      	movs	r1, #8
 8006d0e:	489c      	ldr	r0, [pc, #624]	; (8006f80 <takeMachineID+0x2ac>)
 8006d10:	f002 fb70 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d146      	bne.n	8006da8 <takeMachineID+0xd4>
        	lcd_cursor(0);
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	f001 f89c 	bl	8007e58 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8006d20:	4b96      	ldr	r3, [pc, #600]	; (8006f7c <takeMachineID+0x2a8>)
 8006d22:	7adb      	ldrb	r3, [r3, #11]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d11f      	bne.n	8006d68 <takeMachineID+0x94>
        		lcd_clear();
 8006d28:	f001 f864 	bl	8007df4 <lcd_clear>
        		if(dilSecim == 0) {
 8006d2c:	4b95      	ldr	r3, [pc, #596]	; (8006f84 <takeMachineID+0x2b0>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <takeMachineID+0x76>
        			lcd_print(1, 1, " ID 12 KARAKTER ");
 8006d34:	4a94      	ldr	r2, [pc, #592]	; (8006f88 <takeMachineID+0x2b4>)
 8006d36:	2101      	movs	r1, #1
 8006d38:	2001      	movs	r0, #1
 8006d3a:	f001 f82f 	bl	8007d9c <lcd_print>
        			lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006d3e:	4a93      	ldr	r2, [pc, #588]	; (8006f8c <takeMachineID+0x2b8>)
 8006d40:	2101      	movs	r1, #1
 8006d42:	2002      	movs	r0, #2
 8006d44:	f001 f82a 	bl	8007d9c <lcd_print>
 8006d48:	e009      	b.n	8006d5e <takeMachineID+0x8a>
        		} else {
        			lcd_print(1, 1, "MACHINE ID MUST");
 8006d4a:	4a91      	ldr	r2, [pc, #580]	; (8006f90 <takeMachineID+0x2bc>)
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	2001      	movs	r0, #1
 8006d50:	f001 f824 	bl	8007d9c <lcd_print>
        			lcd_print(2, 1, "BE 12 CHARACTERS");
 8006d54:	4a8f      	ldr	r2, [pc, #572]	; (8006f94 <takeMachineID+0x2c0>)
 8006d56:	2101      	movs	r1, #1
 8006d58:	2002      	movs	r0, #2
 8006d5a:	f001 f81f 	bl	8007d9c <lcd_print>
        		}
        		HAL_Delay(1200);
 8006d5e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006d62:	f001 fd77 	bl	8008854 <HAL_Delay>
        		goto mainSection;
 8006d66:	e7b9      	b.n	8006cdc <takeMachineID+0x8>
        		} else {
        			setupCompleted = 1;
        		}
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, machineIDCharacterLimit);
 8006d68:	4b8b      	ldr	r3, [pc, #556]	; (8006f98 <takeMachineID+0x2c4>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a8b      	ldr	r2, [pc, #556]	; (8006f9c <takeMachineID+0x2c8>)
 8006d6e:	4413      	add	r3, r2
 8006d70:	4a82      	ldr	r2, [pc, #520]	; (8006f7c <takeMachineID+0x2a8>)
 8006d72:	6810      	ldr	r0, [r2, #0]
 8006d74:	6851      	ldr	r1, [r2, #4]
 8006d76:	6892      	ldr	r2, [r2, #8]
 8006d78:	6018      	str	r0, [r3, #0]
 8006d7a:	6059      	str	r1, [r3, #4]
 8006d7c:	609a      	str	r2, [r3, #8]
        	HAL_Delay(200);
 8006d7e:	20c8      	movs	r0, #200	; 0xc8
 8006d80:	f001 fd68 	bl	8008854 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006d84:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d88:	9302      	str	r3, [sp, #8]
 8006d8a:	236e      	movs	r3, #110	; 0x6e
 8006d8c:	9301      	str	r3, [sp, #4]
 8006d8e:	4b83      	ldr	r3, [pc, #524]	; (8006f9c <takeMachineID+0x2c8>)
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	236e      	movs	r3, #110	; 0x6e
 8006d94:	2200      	movs	r2, #0
 8006d96:	21a0      	movs	r1, #160	; 0xa0
 8006d98:	4881      	ldr	r0, [pc, #516]	; (8006fa0 <takeMachineID+0x2cc>)
 8006d9a:	f002 fde5 	bl	8009968 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8006d9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006da2:	f001 fd57 	bl	8008854 <HAL_Delay>

            break;
 8006da6:	e0e5      	b.n	8006f74 <takeMachineID+0x2a0>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006da8:	2101      	movs	r1, #1
 8006daa:	4875      	ldr	r0, [pc, #468]	; (8006f80 <takeMachineID+0x2ac>)
 8006dac:	f002 fb22 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d112      	bne.n	8006ddc <takeMachineID+0x108>
        	if(cursorPosition == 7) {
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b07      	cmp	r3, #7
 8006dba:	d102      	bne.n	8006dc2 <takeMachineID+0xee>
        		cursorPosition = 10;
 8006dbc:	230a      	movs	r3, #10
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	e008      	b.n	8006dd4 <takeMachineID+0x100>
        	} else if (cursorPosition == 14) {
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b0e      	cmp	r3, #14
 8006dc6:	d102      	bne.n	8006dce <takeMachineID+0xfa>
                cursorPosition = 3;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	e002      	b.n	8006dd4 <takeMachineID+0x100>
            } else {
            	cursorPosition++;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8006dd4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006dd8:	f001 fd3c 	bl	8008854 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006ddc:	2108      	movs	r1, #8
 8006dde:	4871      	ldr	r0, [pc, #452]	; (8006fa4 <takeMachineID+0x2d0>)
 8006de0:	f002 fb08 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d112      	bne.n	8006e10 <takeMachineID+0x13c>
            if (cursorPosition == 3) {
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d102      	bne.n	8006df6 <takeMachineID+0x122>
                cursorPosition = 14;
 8006df0:	230e      	movs	r3, #14
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	e008      	b.n	8006e08 <takeMachineID+0x134>
            } else if(cursorPosition == 10) {
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b0a      	cmp	r3, #10
 8006dfa:	d102      	bne.n	8006e02 <takeMachineID+0x12e>
            	cursorPosition = 7;
 8006dfc:	2307      	movs	r3, #7
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	e002      	b.n	8006e08 <takeMachineID+0x134>
            } else {
            	cursorPosition--;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8006e08:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006e0c:	f001 fd22 	bl	8008854 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006e10:	2102      	movs	r1, #2
 8006e12:	485b      	ldr	r0, [pc, #364]	; (8006f80 <takeMachineID+0x2ac>)
 8006e14:	f002 faee 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d16c      	bne.n	8006ef8 <takeMachineID+0x224>
        	if(cursorPosition == 3) {
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d105      	bne.n	8006e30 <takeMachineID+0x15c>
        		machineID[machineIDLoc] = '0';
 8006e24:	4a55      	ldr	r2, [pc, #340]	; (8006f7c <takeMachineID+0x2a8>)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	4413      	add	r3, r2
 8006e2a:	2230      	movs	r2, #48	; 0x30
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	e04f      	b.n	8006ed0 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 4) {
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d105      	bne.n	8006e42 <takeMachineID+0x16e>
        		machineID[machineIDLoc] = '1';
 8006e36:	4a51      	ldr	r2, [pc, #324]	; (8006f7c <takeMachineID+0x2a8>)
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	2231      	movs	r2, #49	; 0x31
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	e046      	b.n	8006ed0 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 5) {
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b05      	cmp	r3, #5
 8006e46:	d105      	bne.n	8006e54 <takeMachineID+0x180>
        		machineID[machineIDLoc] = '2';
 8006e48:	4a4c      	ldr	r2, [pc, #304]	; (8006f7c <takeMachineID+0x2a8>)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	2232      	movs	r2, #50	; 0x32
 8006e50:	701a      	strb	r2, [r3, #0]
 8006e52:	e03d      	b.n	8006ed0 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 6) {
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2b06      	cmp	r3, #6
 8006e58:	d105      	bne.n	8006e66 <takeMachineID+0x192>
        		machineID[machineIDLoc] = '3';
 8006e5a:	4a48      	ldr	r2, [pc, #288]	; (8006f7c <takeMachineID+0x2a8>)
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	4413      	add	r3, r2
 8006e60:	2233      	movs	r2, #51	; 0x33
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	e034      	b.n	8006ed0 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 7) {
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b07      	cmp	r3, #7
 8006e6a:	d105      	bne.n	8006e78 <takeMachineID+0x1a4>
        		machineID[machineIDLoc] = '4';
 8006e6c:	4a43      	ldr	r2, [pc, #268]	; (8006f7c <takeMachineID+0x2a8>)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	4413      	add	r3, r2
 8006e72:	2234      	movs	r2, #52	; 0x34
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	e02b      	b.n	8006ed0 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 10) {
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2b0a      	cmp	r3, #10
 8006e7c:	d105      	bne.n	8006e8a <takeMachineID+0x1b6>
        		machineID[machineIDLoc] = '5';
 8006e7e:	4a3f      	ldr	r2, [pc, #252]	; (8006f7c <takeMachineID+0x2a8>)
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	4413      	add	r3, r2
 8006e84:	2235      	movs	r2, #53	; 0x35
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	e022      	b.n	8006ed0 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 11) {
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2b0b      	cmp	r3, #11
 8006e8e:	d105      	bne.n	8006e9c <takeMachineID+0x1c8>
        		machineID[machineIDLoc] = '6';
 8006e90:	4a3a      	ldr	r2, [pc, #232]	; (8006f7c <takeMachineID+0x2a8>)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	4413      	add	r3, r2
 8006e96:	2236      	movs	r2, #54	; 0x36
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	e019      	b.n	8006ed0 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 12) {
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	2b0c      	cmp	r3, #12
 8006ea0:	d105      	bne.n	8006eae <takeMachineID+0x1da>
        		machineID[machineIDLoc] = '7';
 8006ea2:	4a36      	ldr	r2, [pc, #216]	; (8006f7c <takeMachineID+0x2a8>)
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	2237      	movs	r2, #55	; 0x37
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	e010      	b.n	8006ed0 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 13) {
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2b0d      	cmp	r3, #13
 8006eb2:	d105      	bne.n	8006ec0 <takeMachineID+0x1ec>
        		machineID[machineIDLoc] = '8';
 8006eb4:	4a31      	ldr	r2, [pc, #196]	; (8006f7c <takeMachineID+0x2a8>)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	4413      	add	r3, r2
 8006eba:	2238      	movs	r2, #56	; 0x38
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	e007      	b.n	8006ed0 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 14) {
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2b0e      	cmp	r3, #14
 8006ec4:	d104      	bne.n	8006ed0 <takeMachineID+0x1fc>
        		machineID[machineIDLoc] = '9';
 8006ec6:	4a2d      	ldr	r2, [pc, #180]	; (8006f7c <takeMachineID+0x2a8>)
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	4413      	add	r3, r2
 8006ecc:	2239      	movs	r2, #57	; 0x39
 8006ece:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	b2d9      	uxtb	r1, r3
 8006ed4:	4a29      	ldr	r2, [pc, #164]	; (8006f7c <takeMachineID+0x2a8>)
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	4413      	add	r3, r2
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	461a      	mov	r2, r3
 8006ede:	2001      	movs	r0, #1
 8006ee0:	f000 ff71 	bl	8007dc6 <lcd_print_char>

        	writeLoc++;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	3301      	adds	r3, #1
 8006eee:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8006ef0:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8006ef4:	f001 fcae 	bl	8008854 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006ef8:	2104      	movs	r1, #4
 8006efa:	4821      	ldr	r0, [pc, #132]	; (8006f80 <takeMachineID+0x2ac>)
 8006efc:	f002 fa7a 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d12f      	bne.n	8006f66 <takeMachineID+0x292>
            if(strlen(machineID) >= 1) {
 8006f06:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <takeMachineID+0x2a8>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d027      	beq.n	8006f5e <takeMachineID+0x28a>

                machineID[machineIDLoc] = '\0';
 8006f0e:	4a1b      	ldr	r2, [pc, #108]	; (8006f7c <takeMachineID+0x2a8>)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	4413      	add	r3, r2
 8006f14:	2200      	movs	r2, #0
 8006f16:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	4619      	mov	r1, r3
 8006f22:	2001      	movs	r0, #1
 8006f24:	f000 ff70 	bl	8007e08 <lcd_delete_char>
                HAL_Delay(50);
 8006f28:	2032      	movs	r0, #50	; 0x32
 8006f2a:	f001 fc93 	bl	8008854 <HAL_Delay>

                if(writeLoc > 5) {
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b05      	cmp	r3, #5
 8006f32:	dd03      	ble.n	8006f3c <takeMachineID+0x268>
                	writeLoc--;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	e004      	b.n	8006f46 <takeMachineID+0x272>
                } else if(writeLoc < 5) {
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	dc01      	bgt.n	8006f46 <takeMachineID+0x272>
                	writeLoc = 5;
 8006f42:	2305      	movs	r3, #5
 8006f44:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dd03      	ble.n	8006f54 <takeMachineID+0x280>
                	machineIDLoc--;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	e004      	b.n	8006f5e <takeMachineID+0x28a>
                } else if(machineIDLoc < 0) {
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	da01      	bge.n	8006f5e <takeMachineID+0x28a>
                	machineIDLoc = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8006f5e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006f62:	f001 fc77 	bl	8008854 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	2002      	movs	r0, #2
 8006f6e:	f000 fef6 	bl	8007d5e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006f72:	e6cb      	b.n	8006d0c <takeMachineID+0x38>
    }
}
 8006f74:	bf00      	nop
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	200001a0 	.word	0x200001a0
 8006f80:	40010800 	.word	0x40010800
 8006f84:	20000245 	.word	0x20000245
 8006f88:	0800dd08 	.word	0x0800dd08
 8006f8c:	0800dd1c 	.word	0x0800dd1c
 8006f90:	0800dd30 	.word	0x0800dd30
 8006f94:	0800dd40 	.word	0x0800dd40
 8006f98:	2000000c 	.word	0x2000000c
 8006f9c:	20000128 	.word	0x20000128
 8006fa0:	200003ac 	.word	0x200003ac
 8006fa4:	40011000 	.word	0x40011000

08006fa8 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8006fa8:	b5b0      	push	{r4, r5, r7, lr}
 8006faa:	b08a      	sub	sp, #40	; 0x28
 8006fac:	af04      	add	r7, sp, #16
 8006fae:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	f000 ff51 	bl	8007e58 <lcd_cursor>

    if(state == 0) {
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d104      	bne.n	8006fc6 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8006fbc:	2214      	movs	r2, #20
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	4899      	ldr	r0, [pc, #612]	; (8007228 <takeWifiSSID+0x280>)
 8006fc2:	f005 fb6a 	bl	800c69a <memset>
    }

    int realCharPos = 1;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8006fca:	4b98      	ldr	r3, [pc, #608]	; (800722c <takeWifiSSID+0x284>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
    page = 1;
 8006fd0:	4b97      	ldr	r3, [pc, #604]	; (8007230 <takeWifiSSID+0x288>)
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8006fda:	2307      	movs	r3, #7
 8006fdc:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8006fde:	2101      	movs	r1, #1
 8006fe0:	2002      	movs	r0, #2
 8006fe2:	f7f9 ff5b 	bl	8000e9c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006fe6:	2108      	movs	r1, #8
 8006fe8:	4892      	ldr	r0, [pc, #584]	; (8007234 <takeWifiSSID+0x28c>)
 8006fea:	f002 fa03 	bl	80093f4 <HAL_GPIO_ReadPin>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d14c      	bne.n	800708e <takeWifiSSID+0xe6>
            lcd_cursor(0);
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	f000 ff2f 	bl	8007e58 <lcd_cursor>

            if(strlen(wifiSSID) > wifiCharacterLimit) {
 8006ffa:	488b      	ldr	r0, [pc, #556]	; (8007228 <takeWifiSSID+0x280>)
 8006ffc:	f7f9 f912 	bl	8000224 <strlen>
 8007000:	4603      	mov	r3, r0
 8007002:	2b14      	cmp	r3, #20
 8007004:	d91f      	bls.n	8007046 <takeWifiSSID+0x9e>
                lcd_clear();
 8007006:	f000 fef5 	bl	8007df4 <lcd_clear>
                if(dilSecim == 0) {
 800700a:	4b8b      	ldr	r3, [pc, #556]	; (8007238 <takeWifiSSID+0x290>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <takeWifiSSID+0x80>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007012:	4a8a      	ldr	r2, [pc, #552]	; (800723c <takeWifiSSID+0x294>)
 8007014:	2101      	movs	r1, #1
 8007016:	2001      	movs	r0, #1
 8007018:	f000 fec0 	bl	8007d9c <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 800701c:	4a88      	ldr	r2, [pc, #544]	; (8007240 <takeWifiSSID+0x298>)
 800701e:	2101      	movs	r1, #1
 8007020:	2002      	movs	r0, #2
 8007022:	f000 febb 	bl	8007d9c <lcd_print>
 8007026:	e009      	b.n	800703c <takeWifiSSID+0x94>
                } else {
                	lcd_print(1, 1, "SSID CANT EXCEED");
 8007028:	4a86      	ldr	r2, [pc, #536]	; (8007244 <takeWifiSSID+0x29c>)
 800702a:	2101      	movs	r1, #1
 800702c:	2001      	movs	r0, #1
 800702e:	f000 feb5 	bl	8007d9c <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 8007032:	4a85      	ldr	r2, [pc, #532]	; (8007248 <takeWifiSSID+0x2a0>)
 8007034:	2101      	movs	r1, #1
 8007036:	2002      	movs	r0, #2
 8007038:	f000 feb0 	bl	8007d9c <lcd_print>
                }
                HAL_Delay(1200);
 800703c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8007040:	f001 fc08 	bl	8008854 <HAL_Delay>
                goto mainSSIDSection;
 8007044:	e7b4      	b.n	8006fb0 <takeWifiSSID+0x8>
            }

            memcpy(&eepromData[ssidStartPos], wifiSSIDLoc, wifiCharacterLimit);
 8007046:	4b81      	ldr	r3, [pc, #516]	; (800724c <takeWifiSSID+0x2a4>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a81      	ldr	r2, [pc, #516]	; (8007250 <takeWifiSSID+0x2a8>)
 800704c:	4413      	add	r3, r2
 800704e:	4a81      	ldr	r2, [pc, #516]	; (8007254 <takeWifiSSID+0x2ac>)
 8007050:	6811      	ldr	r1, [r2, #0]
 8007052:	6855      	ldr	r5, [r2, #4]
 8007054:	6894      	ldr	r4, [r2, #8]
 8007056:	68d0      	ldr	r0, [r2, #12]
 8007058:	6019      	str	r1, [r3, #0]
 800705a:	605d      	str	r5, [r3, #4]
 800705c:	609c      	str	r4, [r3, #8]
 800705e:	60d8      	str	r0, [r3, #12]
 8007060:	6911      	ldr	r1, [r2, #16]
 8007062:	6119      	str	r1, [r3, #16]
            HAL_Delay(250);
 8007064:	20fa      	movs	r0, #250	; 0xfa
 8007066:	f001 fbf5 	bl	8008854 <HAL_Delay>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800706a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800706e:	9302      	str	r3, [sp, #8]
 8007070:	236e      	movs	r3, #110	; 0x6e
 8007072:	9301      	str	r3, [sp, #4]
 8007074:	4b76      	ldr	r3, [pc, #472]	; (8007250 <takeWifiSSID+0x2a8>)
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	236e      	movs	r3, #110	; 0x6e
 800707a:	2200      	movs	r2, #0
 800707c:	21a0      	movs	r1, #160	; 0xa0
 800707e:	4876      	ldr	r0, [pc, #472]	; (8007258 <takeWifiSSID+0x2b0>)
 8007080:	f002 fc72 	bl	8009968 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8007084:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007088:	f001 fbe4 	bl	8008854 <HAL_Delay>

            break;
 800708c:	e162      	b.n	8007354 <takeWifiSSID+0x3ac>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800708e:	2101      	movs	r1, #1
 8007090:	4868      	ldr	r0, [pc, #416]	; (8007234 <takeWifiSSID+0x28c>)
 8007092:	f002 f9af 	bl	80093f4 <HAL_GPIO_ReadPin>
 8007096:	4603      	mov	r3, r0
 8007098:	2b01      	cmp	r3, #1
 800709a:	d166      	bne.n	800716a <takeWifiSSID+0x1c2>
        	realCharPos++;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	3301      	adds	r3, #1
 80070a0:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b50      	cmp	r3, #80	; 0x50
 80070a6:	dd01      	ble.n	80070ac <takeWifiSSID+0x104>
        		realCharPos = 1;
 80070a8:	2301      	movs	r3, #1
 80070aa:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 80070ac:	4b5f      	ldr	r3, [pc, #380]	; (800722c <takeWifiSSID+0x284>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b10      	cmp	r3, #16
 80070b2:	d152      	bne.n	800715a <takeWifiSSID+0x1b2>
            	if(page == 1) {
 80070b4:	4b5e      	ldr	r3, [pc, #376]	; (8007230 <takeWifiSSID+0x288>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d10c      	bne.n	80070d6 <takeWifiSSID+0x12e>
            		cursorPosition = 1;
 80070bc:	4b5b      	ldr	r3, [pc, #364]	; (800722c <takeWifiSSID+0x284>)
 80070be:	2201      	movs	r2, #1
 80070c0:	601a      	str	r2, [r3, #0]
            		page++;
 80070c2:	4b5b      	ldr	r3, [pc, #364]	; (8007230 <takeWifiSSID+0x288>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3301      	adds	r3, #1
 80070c8:	4a59      	ldr	r2, [pc, #356]	; (8007230 <takeWifiSSID+0x288>)
 80070ca:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 80070cc:	2102      	movs	r1, #2
 80070ce:	2002      	movs	r0, #2
 80070d0:	f7f9 fee4 	bl	8000e9c <printTemplate>
 80070d4:	e046      	b.n	8007164 <takeWifiSSID+0x1bc>
            	} else if(page == 2) {
 80070d6:	4b56      	ldr	r3, [pc, #344]	; (8007230 <takeWifiSSID+0x288>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d10c      	bne.n	80070f8 <takeWifiSSID+0x150>
            		cursorPosition = 1;
 80070de:	4b53      	ldr	r3, [pc, #332]	; (800722c <takeWifiSSID+0x284>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	601a      	str	r2, [r3, #0]
            		page++;
 80070e4:	4b52      	ldr	r3, [pc, #328]	; (8007230 <takeWifiSSID+0x288>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3301      	adds	r3, #1
 80070ea:	4a51      	ldr	r2, [pc, #324]	; (8007230 <takeWifiSSID+0x288>)
 80070ec:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 80070ee:	2103      	movs	r1, #3
 80070f0:	2002      	movs	r0, #2
 80070f2:	f7f9 fed3 	bl	8000e9c <printTemplate>
 80070f6:	e035      	b.n	8007164 <takeWifiSSID+0x1bc>
            	} else if(page == 3) {
 80070f8:	4b4d      	ldr	r3, [pc, #308]	; (8007230 <takeWifiSSID+0x288>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d10c      	bne.n	800711a <takeWifiSSID+0x172>
            		cursorPosition = 1;
 8007100:	4b4a      	ldr	r3, [pc, #296]	; (800722c <takeWifiSSID+0x284>)
 8007102:	2201      	movs	r2, #1
 8007104:	601a      	str	r2, [r3, #0]
            		page++;
 8007106:	4b4a      	ldr	r3, [pc, #296]	; (8007230 <takeWifiSSID+0x288>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3301      	adds	r3, #1
 800710c:	4a48      	ldr	r2, [pc, #288]	; (8007230 <takeWifiSSID+0x288>)
 800710e:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8007110:	2104      	movs	r1, #4
 8007112:	2002      	movs	r0, #2
 8007114:	f7f9 fec2 	bl	8000e9c <printTemplate>
 8007118:	e024      	b.n	8007164 <takeWifiSSID+0x1bc>
            	} else if(page == 4) {
 800711a:	4b45      	ldr	r3, [pc, #276]	; (8007230 <takeWifiSSID+0x288>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b04      	cmp	r3, #4
 8007120:	d10c      	bne.n	800713c <takeWifiSSID+0x194>
            		cursorPosition = 1;
 8007122:	4b42      	ldr	r3, [pc, #264]	; (800722c <takeWifiSSID+0x284>)
 8007124:	2201      	movs	r2, #1
 8007126:	601a      	str	r2, [r3, #0]
            		page++;
 8007128:	4b41      	ldr	r3, [pc, #260]	; (8007230 <takeWifiSSID+0x288>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3301      	adds	r3, #1
 800712e:	4a40      	ldr	r2, [pc, #256]	; (8007230 <takeWifiSSID+0x288>)
 8007130:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8007132:	2105      	movs	r1, #5
 8007134:	2002      	movs	r0, #2
 8007136:	f7f9 feb1 	bl	8000e9c <printTemplate>
 800713a:	e013      	b.n	8007164 <takeWifiSSID+0x1bc>
            	} else if(page == 5) {
 800713c:	4b3c      	ldr	r3, [pc, #240]	; (8007230 <takeWifiSSID+0x288>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b05      	cmp	r3, #5
 8007142:	d10f      	bne.n	8007164 <takeWifiSSID+0x1bc>
            		cursorPosition = 1;
 8007144:	4b39      	ldr	r3, [pc, #228]	; (800722c <takeWifiSSID+0x284>)
 8007146:	2201      	movs	r2, #1
 8007148:	601a      	str	r2, [r3, #0]
            		page = 1;
 800714a:	4b39      	ldr	r3, [pc, #228]	; (8007230 <takeWifiSSID+0x288>)
 800714c:	2201      	movs	r2, #1
 800714e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8007150:	2101      	movs	r1, #1
 8007152:	2002      	movs	r0, #2
 8007154:	f7f9 fea2 	bl	8000e9c <printTemplate>
 8007158:	e004      	b.n	8007164 <takeWifiSSID+0x1bc>
            	}
            } else {
            	cursorPosition++;
 800715a:	4b34      	ldr	r3, [pc, #208]	; (800722c <takeWifiSSID+0x284>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3301      	adds	r3, #1
 8007160:	4a32      	ldr	r2, [pc, #200]	; (800722c <takeWifiSSID+0x284>)
 8007162:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007164:	20fa      	movs	r0, #250	; 0xfa
 8007166:	f001 fb75 	bl	8008854 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800716a:	2108      	movs	r1, #8
 800716c:	483b      	ldr	r0, [pc, #236]	; (800725c <takeWifiSSID+0x2b4>)
 800716e:	f002 f941 	bl	80093f4 <HAL_GPIO_ReadPin>
 8007172:	4603      	mov	r3, r0
 8007174:	2b01      	cmp	r3, #1
 8007176:	d17b      	bne.n	8007270 <takeWifiSSID+0x2c8>
        	realCharPos--;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	3b01      	subs	r3, #1
 800717c:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	dc01      	bgt.n	8007188 <takeWifiSSID+0x1e0>
        		realCharPos = 80;
 8007184:	2350      	movs	r3, #80	; 0x50
 8007186:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8007188:	4b28      	ldr	r3, [pc, #160]	; (800722c <takeWifiSSID+0x284>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d167      	bne.n	8007260 <takeWifiSSID+0x2b8>
            	if(page == 1) {
 8007190:	4b27      	ldr	r3, [pc, #156]	; (8007230 <takeWifiSSID+0x288>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d10a      	bne.n	80071ae <takeWifiSSID+0x206>
            		cursorPosition = 16;
 8007198:	4b24      	ldr	r3, [pc, #144]	; (800722c <takeWifiSSID+0x284>)
 800719a:	2210      	movs	r2, #16
 800719c:	601a      	str	r2, [r3, #0]
            		page = 5;
 800719e:	4b24      	ldr	r3, [pc, #144]	; (8007230 <takeWifiSSID+0x288>)
 80071a0:	2205      	movs	r2, #5
 80071a2:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 80071a4:	2105      	movs	r1, #5
 80071a6:	2002      	movs	r0, #2
 80071a8:	f7f9 fe78 	bl	8000e9c <printTemplate>
 80071ac:	e05d      	b.n	800726a <takeWifiSSID+0x2c2>
            	} else if(page == 2) {
 80071ae:	4b20      	ldr	r3, [pc, #128]	; (8007230 <takeWifiSSID+0x288>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d10a      	bne.n	80071cc <takeWifiSSID+0x224>
            		cursorPosition = 16;
 80071b6:	4b1d      	ldr	r3, [pc, #116]	; (800722c <takeWifiSSID+0x284>)
 80071b8:	2210      	movs	r2, #16
 80071ba:	601a      	str	r2, [r3, #0]
            		page = 1;
 80071bc:	4b1c      	ldr	r3, [pc, #112]	; (8007230 <takeWifiSSID+0x288>)
 80071be:	2201      	movs	r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80071c2:	2101      	movs	r1, #1
 80071c4:	2002      	movs	r0, #2
 80071c6:	f7f9 fe69 	bl	8000e9c <printTemplate>
 80071ca:	e04e      	b.n	800726a <takeWifiSSID+0x2c2>
            	} else if(page == 3) {
 80071cc:	4b18      	ldr	r3, [pc, #96]	; (8007230 <takeWifiSSID+0x288>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	d10a      	bne.n	80071ea <takeWifiSSID+0x242>
            		cursorPosition = 16;
 80071d4:	4b15      	ldr	r3, [pc, #84]	; (800722c <takeWifiSSID+0x284>)
 80071d6:	2210      	movs	r2, #16
 80071d8:	601a      	str	r2, [r3, #0]
            		page = 2;
 80071da:	4b15      	ldr	r3, [pc, #84]	; (8007230 <takeWifiSSID+0x288>)
 80071dc:	2202      	movs	r2, #2
 80071de:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 80071e0:	2102      	movs	r1, #2
 80071e2:	2002      	movs	r0, #2
 80071e4:	f7f9 fe5a 	bl	8000e9c <printTemplate>
 80071e8:	e03f      	b.n	800726a <takeWifiSSID+0x2c2>
            	} else if(page == 4) {
 80071ea:	4b11      	ldr	r3, [pc, #68]	; (8007230 <takeWifiSSID+0x288>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d10a      	bne.n	8007208 <takeWifiSSID+0x260>
            		cursorPosition = 16;
 80071f2:	4b0e      	ldr	r3, [pc, #56]	; (800722c <takeWifiSSID+0x284>)
 80071f4:	2210      	movs	r2, #16
 80071f6:	601a      	str	r2, [r3, #0]
            		page = 3;
 80071f8:	4b0d      	ldr	r3, [pc, #52]	; (8007230 <takeWifiSSID+0x288>)
 80071fa:	2203      	movs	r2, #3
 80071fc:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 80071fe:	2103      	movs	r1, #3
 8007200:	2002      	movs	r0, #2
 8007202:	f7f9 fe4b 	bl	8000e9c <printTemplate>
 8007206:	e030      	b.n	800726a <takeWifiSSID+0x2c2>
            	} else if(page == 5) {
 8007208:	4b09      	ldr	r3, [pc, #36]	; (8007230 <takeWifiSSID+0x288>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b05      	cmp	r3, #5
 800720e:	d12c      	bne.n	800726a <takeWifiSSID+0x2c2>
            		cursorPosition = 16;
 8007210:	4b06      	ldr	r3, [pc, #24]	; (800722c <takeWifiSSID+0x284>)
 8007212:	2210      	movs	r2, #16
 8007214:	601a      	str	r2, [r3, #0]
            		page = 4;
 8007216:	4b06      	ldr	r3, [pc, #24]	; (8007230 <takeWifiSSID+0x288>)
 8007218:	2204      	movs	r2, #4
 800721a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 800721c:	2104      	movs	r1, #4
 800721e:	2002      	movs	r0, #2
 8007220:	f7f9 fe3c 	bl	8000e9c <printTemplate>
 8007224:	e021      	b.n	800726a <takeWifiSSID+0x2c2>
 8007226:	bf00      	nop
 8007228:	200001ac 	.word	0x200001ac
 800722c:	20000000 	.word	0x20000000
 8007230:	20000004 	.word	0x20000004
 8007234:	40010800 	.word	0x40010800
 8007238:	20000245 	.word	0x20000245
 800723c:	0800dd54 	.word	0x0800dd54
 8007240:	0800dd68 	.word	0x0800dd68
 8007244:	0800dd7c 	.word	0x0800dd7c
 8007248:	0800dd90 	.word	0x0800dd90
 800724c:	20000010 	.word	0x20000010
 8007250:	20000128 	.word	0x20000128
 8007254:	200001d4 	.word	0x200001d4
 8007258:	200003ac 	.word	0x200003ac
 800725c:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8007260:	4b3e      	ldr	r3, [pc, #248]	; (800735c <takeWifiSSID+0x3b4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3b01      	subs	r3, #1
 8007266:	4a3d      	ldr	r2, [pc, #244]	; (800735c <takeWifiSSID+0x3b4>)
 8007268:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800726a:	20fa      	movs	r0, #250	; 0xfa
 800726c:	f001 faf2 	bl	8008854 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007270:	2102      	movs	r1, #2
 8007272:	483b      	ldr	r0, [pc, #236]	; (8007360 <takeWifiSSID+0x3b8>)
 8007274:	f002 f8be 	bl	80093f4 <HAL_GPIO_ReadPin>
 8007278:	4603      	mov	r3, r0
 800727a:	2b01      	cmp	r3, #1
 800727c:	d127      	bne.n	80072ce <takeWifiSSID+0x326>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	3b01      	subs	r3, #1
 8007282:	4618      	mov	r0, r3
 8007284:	f7f9 fa6a 	bl	800075c <getCharFromCursorPosition>
 8007288:	4603      	mov	r3, r0
 800728a:	b2d9      	uxtb	r1, r3
 800728c:	4a35      	ldr	r2, [pc, #212]	; (8007364 <takeWifiSSID+0x3bc>)
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	4413      	add	r3, r2
 8007292:	460a      	mov	r2, r1
 8007294:	701a      	strb	r2, [r3, #0]
            wifiSSIDLoc[wifiNameLoc] = realCharPos - 1;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b2d9      	uxtb	r1, r3
 800729e:	4a32      	ldr	r2, [pc, #200]	; (8007368 <takeWifiSSID+0x3c0>)
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4413      	add	r3, r2
 80072a4:	460a      	mov	r2, r1
 80072a6:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	b2d9      	uxtb	r1, r3
 80072ac:	4a2d      	ldr	r2, [pc, #180]	; (8007364 <takeWifiSSID+0x3bc>)
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	4413      	add	r3, r2
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	461a      	mov	r2, r3
 80072b6:	2001      	movs	r0, #1
 80072b8:	f000 fd85 	bl	8007dc6 <lcd_print_char>

            writeLoc++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	3301      	adds	r3, #1
 80072c6:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 80072c8:	20fa      	movs	r0, #250	; 0xfa
 80072ca:	f001 fac3 	bl	8008854 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80072ce:	2104      	movs	r1, #4
 80072d0:	4823      	ldr	r0, [pc, #140]	; (8007360 <takeWifiSSID+0x3b8>)
 80072d2:	f002 f88f 	bl	80093f4 <HAL_GPIO_ReadPin>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d133      	bne.n	8007344 <takeWifiSSID+0x39c>
        	if(strlen(wifiSSID) >= 1) {
 80072dc:	4b21      	ldr	r3, [pc, #132]	; (8007364 <takeWifiSSID+0x3bc>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d02c      	beq.n	800733e <takeWifiSSID+0x396>
        		wifiSSID[wifiNameLoc] = '\0';
 80072e4:	4a1f      	ldr	r2, [pc, #124]	; (8007364 <takeWifiSSID+0x3bc>)
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	4413      	add	r3, r2
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
        		wifiSSIDLoc[wifiNameLoc] = '\0';
 80072ee:	4a1e      	ldr	r2, [pc, #120]	; (8007368 <takeWifiSSID+0x3c0>)
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	4413      	add	r3, r2
 80072f4:	2200      	movs	r2, #0
 80072f6:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	3306      	adds	r3, #6
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	4619      	mov	r1, r3
 8007302:	2001      	movs	r0, #1
 8007304:	f000 fd80 	bl	8007e08 <lcd_delete_char>
        		HAL_Delay(50);
 8007308:	2032      	movs	r0, #50	; 0x32
 800730a:	f001 faa3 	bl	8008854 <HAL_Delay>
        		if(writeLoc > 7) {
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2b07      	cmp	r3, #7
 8007312:	dd03      	ble.n	800731c <takeWifiSSID+0x374>
        			writeLoc--;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3b01      	subs	r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	e004      	b.n	8007326 <takeWifiSSID+0x37e>
        		} else if(writeLoc < 7) {
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b06      	cmp	r3, #6
 8007320:	dc01      	bgt.n	8007326 <takeWifiSSID+0x37e>
        			writeLoc = 7;
 8007322:	2307      	movs	r3, #7
 8007324:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	dd03      	ble.n	8007334 <takeWifiSSID+0x38c>
        			wifiNameLoc--;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	3b01      	subs	r3, #1
 8007330:	613b      	str	r3, [r7, #16]
 8007332:	e004      	b.n	800733e <takeWifiSSID+0x396>
        		} else if(wifiNameLoc < 0) {
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	da01      	bge.n	800733e <takeWifiSSID+0x396>
        			wifiNameLoc = 0;
 800733a:	2300      	movs	r3, #0
 800733c:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 800733e:	20fa      	movs	r0, #250	; 0xfa
 8007340:	f001 fa88 	bl	8008854 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007344:	4b05      	ldr	r3, [pc, #20]	; (800735c <takeWifiSSID+0x3b4>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	b2db      	uxtb	r3, r3
 800734a:	4619      	mov	r1, r3
 800734c:	2002      	movs	r0, #2
 800734e:	f000 fd06 	bl	8007d5e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007352:	e648      	b.n	8006fe6 <takeWifiSSID+0x3e>
    }
}
 8007354:	bf00      	nop
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bdb0      	pop	{r4, r5, r7, pc}
 800735c:	20000000 	.word	0x20000000
 8007360:	40010800 	.word	0x40010800
 8007364:	200001ac 	.word	0x200001ac
 8007368:	200001d4 	.word	0x200001d4

0800736c <takeWifiPass>:

void takeWifiPass(int state) {
 800736c:	b5b0      	push	{r4, r5, r7, lr}
 800736e:	b08a      	sub	sp, #40	; 0x28
 8007370:	af04      	add	r7, sp, #16
 8007372:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 8007374:	2001      	movs	r0, #1
 8007376:	f000 fd6f 	bl	8007e58 <lcd_cursor>

    if(state == 0) {
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d104      	bne.n	800738a <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8007380:	2214      	movs	r2, #20
 8007382:	2100      	movs	r1, #0
 8007384:	4899      	ldr	r0, [pc, #612]	; (80075ec <takeWifiPass+0x280>)
 8007386:	f005 f988 	bl	800c69a <memset>
    }

    int realCharPos = 1;
 800738a:	2301      	movs	r3, #1
 800738c:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 800738e:	4b98      	ldr	r3, [pc, #608]	; (80075f0 <takeWifiPass+0x284>)
 8007390:	2201      	movs	r2, #1
 8007392:	601a      	str	r2, [r3, #0]
    page = 1;
 8007394:	4b97      	ldr	r3, [pc, #604]	; (80075f4 <takeWifiPass+0x288>)
 8007396:	2201      	movs	r2, #1
 8007398:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 800739e:	2307      	movs	r3, #7
 80073a0:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 80073a2:	2101      	movs	r1, #1
 80073a4:	2003      	movs	r0, #3
 80073a6:	f7f9 fd79 	bl	8000e9c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80073aa:	2108      	movs	r1, #8
 80073ac:	4892      	ldr	r0, [pc, #584]	; (80075f8 <takeWifiPass+0x28c>)
 80073ae:	f002 f821 	bl	80093f4 <HAL_GPIO_ReadPin>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d14c      	bne.n	8007452 <takeWifiPass+0xe6>
            lcd_cursor(0);
 80073b8:	2000      	movs	r0, #0
 80073ba:	f000 fd4d 	bl	8007e58 <lcd_cursor>

            if(strlen(wifiPass) > wifiCharacterLimit) {
 80073be:	488b      	ldr	r0, [pc, #556]	; (80075ec <takeWifiPass+0x280>)
 80073c0:	f7f8 ff30 	bl	8000224 <strlen>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b14      	cmp	r3, #20
 80073c8:	d91f      	bls.n	800740a <takeWifiPass+0x9e>
                lcd_clear();
 80073ca:	f000 fd13 	bl	8007df4 <lcd_clear>
                if(dilSecim == 0) {
 80073ce:	4b8b      	ldr	r3, [pc, #556]	; (80075fc <takeWifiPass+0x290>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10a      	bne.n	80073ec <takeWifiPass+0x80>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 80073d6:	4a8a      	ldr	r2, [pc, #552]	; (8007600 <takeWifiPass+0x294>)
 80073d8:	2101      	movs	r1, #1
 80073da:	2001      	movs	r0, #1
 80073dc:	f000 fcde 	bl	8007d9c <lcd_print>
                	lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80073e0:	4a88      	ldr	r2, [pc, #544]	; (8007604 <takeWifiPass+0x298>)
 80073e2:	2101      	movs	r1, #1
 80073e4:	2002      	movs	r0, #2
 80073e6:	f000 fcd9 	bl	8007d9c <lcd_print>
 80073ea:	e009      	b.n	8007400 <takeWifiPass+0x94>
                } else {
                	lcd_print(1, 1, "PASS CANT EXCEED");
 80073ec:	4a86      	ldr	r2, [pc, #536]	; (8007608 <takeWifiPass+0x29c>)
 80073ee:	2101      	movs	r1, #1
 80073f0:	2001      	movs	r0, #1
 80073f2:	f000 fcd3 	bl	8007d9c <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 80073f6:	4a85      	ldr	r2, [pc, #532]	; (800760c <takeWifiPass+0x2a0>)
 80073f8:	2101      	movs	r1, #1
 80073fa:	2002      	movs	r0, #2
 80073fc:	f000 fcce 	bl	8007d9c <lcd_print>
                }
                HAL_Delay(1200);
 8007400:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8007404:	f001 fa26 	bl	8008854 <HAL_Delay>
                goto mainPASSSection;
 8007408:	e7b4      	b.n	8007374 <takeWifiPass+0x8>
            }

            memcpy(&eepromData[passStartPos], wifiPassLocArr, wifiCharacterLimit);
 800740a:	4b81      	ldr	r3, [pc, #516]	; (8007610 <takeWifiPass+0x2a4>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a81      	ldr	r2, [pc, #516]	; (8007614 <takeWifiPass+0x2a8>)
 8007410:	4413      	add	r3, r2
 8007412:	4a81      	ldr	r2, [pc, #516]	; (8007618 <takeWifiPass+0x2ac>)
 8007414:	6811      	ldr	r1, [r2, #0]
 8007416:	6855      	ldr	r5, [r2, #4]
 8007418:	6894      	ldr	r4, [r2, #8]
 800741a:	68d0      	ldr	r0, [r2, #12]
 800741c:	6019      	str	r1, [r3, #0]
 800741e:	605d      	str	r5, [r3, #4]
 8007420:	609c      	str	r4, [r3, #8]
 8007422:	60d8      	str	r0, [r3, #12]
 8007424:	6911      	ldr	r1, [r2, #16]
 8007426:	6119      	str	r1, [r3, #16]
            HAL_Delay(250);
 8007428:	20fa      	movs	r0, #250	; 0xfa
 800742a:	f001 fa13 	bl	8008854 <HAL_Delay>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800742e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007432:	9302      	str	r3, [sp, #8]
 8007434:	236e      	movs	r3, #110	; 0x6e
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	4b76      	ldr	r3, [pc, #472]	; (8007614 <takeWifiPass+0x2a8>)
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	236e      	movs	r3, #110	; 0x6e
 800743e:	2200      	movs	r2, #0
 8007440:	21a0      	movs	r1, #160	; 0xa0
 8007442:	4876      	ldr	r0, [pc, #472]	; (800761c <takeWifiPass+0x2b0>)
 8007444:	f002 fa90 	bl	8009968 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8007448:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800744c:	f001 fa02 	bl	8008854 <HAL_Delay>

            break;
 8007450:	e162      	b.n	8007718 <takeWifiPass+0x3ac>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007452:	2101      	movs	r1, #1
 8007454:	4868      	ldr	r0, [pc, #416]	; (80075f8 <takeWifiPass+0x28c>)
 8007456:	f001 ffcd 	bl	80093f4 <HAL_GPIO_ReadPin>
 800745a:	4603      	mov	r3, r0
 800745c:	2b01      	cmp	r3, #1
 800745e:	d166      	bne.n	800752e <takeWifiPass+0x1c2>
        	realCharPos++;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	3301      	adds	r3, #1
 8007464:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b50      	cmp	r3, #80	; 0x50
 800746a:	dd01      	ble.n	8007470 <takeWifiPass+0x104>
        	    realCharPos = 1;
 800746c:	2301      	movs	r3, #1
 800746e:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8007470:	4b5f      	ldr	r3, [pc, #380]	; (80075f0 <takeWifiPass+0x284>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b10      	cmp	r3, #16
 8007476:	d152      	bne.n	800751e <takeWifiPass+0x1b2>
            	if(page == 1) {
 8007478:	4b5e      	ldr	r3, [pc, #376]	; (80075f4 <takeWifiPass+0x288>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d10c      	bne.n	800749a <takeWifiPass+0x12e>
            		cursorPosition = 1;
 8007480:	4b5b      	ldr	r3, [pc, #364]	; (80075f0 <takeWifiPass+0x284>)
 8007482:	2201      	movs	r2, #1
 8007484:	601a      	str	r2, [r3, #0]
            		page++;
 8007486:	4b5b      	ldr	r3, [pc, #364]	; (80075f4 <takeWifiPass+0x288>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3301      	adds	r3, #1
 800748c:	4a59      	ldr	r2, [pc, #356]	; (80075f4 <takeWifiPass+0x288>)
 800748e:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8007490:	2102      	movs	r1, #2
 8007492:	2003      	movs	r0, #3
 8007494:	f7f9 fd02 	bl	8000e9c <printTemplate>
 8007498:	e046      	b.n	8007528 <takeWifiPass+0x1bc>
            	} else if(page == 2) {
 800749a:	4b56      	ldr	r3, [pc, #344]	; (80075f4 <takeWifiPass+0x288>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d10c      	bne.n	80074bc <takeWifiPass+0x150>
            		cursorPosition = 1;
 80074a2:	4b53      	ldr	r3, [pc, #332]	; (80075f0 <takeWifiPass+0x284>)
 80074a4:	2201      	movs	r2, #1
 80074a6:	601a      	str	r2, [r3, #0]
            		page++;
 80074a8:	4b52      	ldr	r3, [pc, #328]	; (80075f4 <takeWifiPass+0x288>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3301      	adds	r3, #1
 80074ae:	4a51      	ldr	r2, [pc, #324]	; (80075f4 <takeWifiPass+0x288>)
 80074b0:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80074b2:	2103      	movs	r1, #3
 80074b4:	2003      	movs	r0, #3
 80074b6:	f7f9 fcf1 	bl	8000e9c <printTemplate>
 80074ba:	e035      	b.n	8007528 <takeWifiPass+0x1bc>
            	} else if(page == 3) {
 80074bc:	4b4d      	ldr	r3, [pc, #308]	; (80075f4 <takeWifiPass+0x288>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d10c      	bne.n	80074de <takeWifiPass+0x172>
            		cursorPosition = 1;
 80074c4:	4b4a      	ldr	r3, [pc, #296]	; (80075f0 <takeWifiPass+0x284>)
 80074c6:	2201      	movs	r2, #1
 80074c8:	601a      	str	r2, [r3, #0]
            		page++;
 80074ca:	4b4a      	ldr	r3, [pc, #296]	; (80075f4 <takeWifiPass+0x288>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3301      	adds	r3, #1
 80074d0:	4a48      	ldr	r2, [pc, #288]	; (80075f4 <takeWifiPass+0x288>)
 80074d2:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80074d4:	2104      	movs	r1, #4
 80074d6:	2003      	movs	r0, #3
 80074d8:	f7f9 fce0 	bl	8000e9c <printTemplate>
 80074dc:	e024      	b.n	8007528 <takeWifiPass+0x1bc>
            	} else if(page == 4) {
 80074de:	4b45      	ldr	r3, [pc, #276]	; (80075f4 <takeWifiPass+0x288>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d10c      	bne.n	8007500 <takeWifiPass+0x194>
            		cursorPosition = 1;
 80074e6:	4b42      	ldr	r3, [pc, #264]	; (80075f0 <takeWifiPass+0x284>)
 80074e8:	2201      	movs	r2, #1
 80074ea:	601a      	str	r2, [r3, #0]
            		page++;
 80074ec:	4b41      	ldr	r3, [pc, #260]	; (80075f4 <takeWifiPass+0x288>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3301      	adds	r3, #1
 80074f2:	4a40      	ldr	r2, [pc, #256]	; (80075f4 <takeWifiPass+0x288>)
 80074f4:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80074f6:	2105      	movs	r1, #5
 80074f8:	2003      	movs	r0, #3
 80074fa:	f7f9 fccf 	bl	8000e9c <printTemplate>
 80074fe:	e013      	b.n	8007528 <takeWifiPass+0x1bc>
            	} else if(page == 5) {
 8007500:	4b3c      	ldr	r3, [pc, #240]	; (80075f4 <takeWifiPass+0x288>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b05      	cmp	r3, #5
 8007506:	d10f      	bne.n	8007528 <takeWifiPass+0x1bc>
            		cursorPosition = 1;
 8007508:	4b39      	ldr	r3, [pc, #228]	; (80075f0 <takeWifiPass+0x284>)
 800750a:	2201      	movs	r2, #1
 800750c:	601a      	str	r2, [r3, #0]
            		page = 1;
 800750e:	4b39      	ldr	r3, [pc, #228]	; (80075f4 <takeWifiPass+0x288>)
 8007510:	2201      	movs	r2, #1
 8007512:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8007514:	2101      	movs	r1, #1
 8007516:	2003      	movs	r0, #3
 8007518:	f7f9 fcc0 	bl	8000e9c <printTemplate>
 800751c:	e004      	b.n	8007528 <takeWifiPass+0x1bc>
            	}
            } else {
            	cursorPosition++;
 800751e:	4b34      	ldr	r3, [pc, #208]	; (80075f0 <takeWifiPass+0x284>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3301      	adds	r3, #1
 8007524:	4a32      	ldr	r2, [pc, #200]	; (80075f0 <takeWifiPass+0x284>)
 8007526:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007528:	20fa      	movs	r0, #250	; 0xfa
 800752a:	f001 f993 	bl	8008854 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800752e:	2108      	movs	r1, #8
 8007530:	483b      	ldr	r0, [pc, #236]	; (8007620 <takeWifiPass+0x2b4>)
 8007532:	f001 ff5f 	bl	80093f4 <HAL_GPIO_ReadPin>
 8007536:	4603      	mov	r3, r0
 8007538:	2b01      	cmp	r3, #1
 800753a:	d17b      	bne.n	8007634 <takeWifiPass+0x2c8>
        	realCharPos--;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	3b01      	subs	r3, #1
 8007540:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2b00      	cmp	r3, #0
 8007546:	dc01      	bgt.n	800754c <takeWifiPass+0x1e0>
        	    realCharPos = 80;
 8007548:	2350      	movs	r3, #80	; 0x50
 800754a:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 800754c:	4b28      	ldr	r3, [pc, #160]	; (80075f0 <takeWifiPass+0x284>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d167      	bne.n	8007624 <takeWifiPass+0x2b8>
            	if(page == 1) {
 8007554:	4b27      	ldr	r3, [pc, #156]	; (80075f4 <takeWifiPass+0x288>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d10a      	bne.n	8007572 <takeWifiPass+0x206>
            		cursorPosition = 16;
 800755c:	4b24      	ldr	r3, [pc, #144]	; (80075f0 <takeWifiPass+0x284>)
 800755e:	2210      	movs	r2, #16
 8007560:	601a      	str	r2, [r3, #0]
            		page = 5;
 8007562:	4b24      	ldr	r3, [pc, #144]	; (80075f4 <takeWifiPass+0x288>)
 8007564:	2205      	movs	r2, #5
 8007566:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 8007568:	2105      	movs	r1, #5
 800756a:	2003      	movs	r0, #3
 800756c:	f7f9 fc96 	bl	8000e9c <printTemplate>
 8007570:	e05d      	b.n	800762e <takeWifiPass+0x2c2>
            	} else if(page == 2) {
 8007572:	4b20      	ldr	r3, [pc, #128]	; (80075f4 <takeWifiPass+0x288>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d10a      	bne.n	8007590 <takeWifiPass+0x224>
            		cursorPosition = 16;
 800757a:	4b1d      	ldr	r3, [pc, #116]	; (80075f0 <takeWifiPass+0x284>)
 800757c:	2210      	movs	r2, #16
 800757e:	601a      	str	r2, [r3, #0]
            		page = 1;
 8007580:	4b1c      	ldr	r3, [pc, #112]	; (80075f4 <takeWifiPass+0x288>)
 8007582:	2201      	movs	r2, #1
 8007584:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8007586:	2101      	movs	r1, #1
 8007588:	2003      	movs	r0, #3
 800758a:	f7f9 fc87 	bl	8000e9c <printTemplate>
 800758e:	e04e      	b.n	800762e <takeWifiPass+0x2c2>
            	} else if(page == 3) {
 8007590:	4b18      	ldr	r3, [pc, #96]	; (80075f4 <takeWifiPass+0x288>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b03      	cmp	r3, #3
 8007596:	d10a      	bne.n	80075ae <takeWifiPass+0x242>
            		cursorPosition = 16;
 8007598:	4b15      	ldr	r3, [pc, #84]	; (80075f0 <takeWifiPass+0x284>)
 800759a:	2210      	movs	r2, #16
 800759c:	601a      	str	r2, [r3, #0]
            		page = 2;
 800759e:	4b15      	ldr	r3, [pc, #84]	; (80075f4 <takeWifiPass+0x288>)
 80075a0:	2202      	movs	r2, #2
 80075a2:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80075a4:	2102      	movs	r1, #2
 80075a6:	2003      	movs	r0, #3
 80075a8:	f7f9 fc78 	bl	8000e9c <printTemplate>
 80075ac:	e03f      	b.n	800762e <takeWifiPass+0x2c2>
            	} else if(page == 4) {
 80075ae:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <takeWifiPass+0x288>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d10a      	bne.n	80075cc <takeWifiPass+0x260>
            		cursorPosition = 16;
 80075b6:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <takeWifiPass+0x284>)
 80075b8:	2210      	movs	r2, #16
 80075ba:	601a      	str	r2, [r3, #0]
            		page = 3;
 80075bc:	4b0d      	ldr	r3, [pc, #52]	; (80075f4 <takeWifiPass+0x288>)
 80075be:	2203      	movs	r2, #3
 80075c0:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80075c2:	2103      	movs	r1, #3
 80075c4:	2003      	movs	r0, #3
 80075c6:	f7f9 fc69 	bl	8000e9c <printTemplate>
 80075ca:	e030      	b.n	800762e <takeWifiPass+0x2c2>
            	} else if(page == 5) {
 80075cc:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <takeWifiPass+0x288>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b05      	cmp	r3, #5
 80075d2:	d12c      	bne.n	800762e <takeWifiPass+0x2c2>
            		cursorPosition = 16;
 80075d4:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <takeWifiPass+0x284>)
 80075d6:	2210      	movs	r2, #16
 80075d8:	601a      	str	r2, [r3, #0]
            		page = 4;
 80075da:	4b06      	ldr	r3, [pc, #24]	; (80075f4 <takeWifiPass+0x288>)
 80075dc:	2204      	movs	r2, #4
 80075de:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80075e0:	2104      	movs	r1, #4
 80075e2:	2003      	movs	r0, #3
 80075e4:	f7f9 fc5a 	bl	8000e9c <printTemplate>
 80075e8:	e021      	b.n	800762e <takeWifiPass+0x2c2>
 80075ea:	bf00      	nop
 80075ec:	200001c0 	.word	0x200001c0
 80075f0:	20000000 	.word	0x20000000
 80075f4:	20000004 	.word	0x20000004
 80075f8:	40010800 	.word	0x40010800
 80075fc:	20000245 	.word	0x20000245
 8007600:	0800dd54 	.word	0x0800dd54
 8007604:	0800dda4 	.word	0x0800dda4
 8007608:	0800ddb8 	.word	0x0800ddb8
 800760c:	0800dd90 	.word	0x0800dd90
 8007610:	20000014 	.word	0x20000014
 8007614:	20000128 	.word	0x20000128
 8007618:	200001e8 	.word	0x200001e8
 800761c:	200003ac 	.word	0x200003ac
 8007620:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8007624:	4b3e      	ldr	r3, [pc, #248]	; (8007720 <takeWifiPass+0x3b4>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3b01      	subs	r3, #1
 800762a:	4a3d      	ldr	r2, [pc, #244]	; (8007720 <takeWifiPass+0x3b4>)
 800762c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800762e:	20fa      	movs	r0, #250	; 0xfa
 8007630:	f001 f910 	bl	8008854 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007634:	2102      	movs	r1, #2
 8007636:	483b      	ldr	r0, [pc, #236]	; (8007724 <takeWifiPass+0x3b8>)
 8007638:	f001 fedc 	bl	80093f4 <HAL_GPIO_ReadPin>
 800763c:	4603      	mov	r3, r0
 800763e:	2b01      	cmp	r3, #1
 8007640:	d127      	bne.n	8007692 <takeWifiPass+0x326>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	3b01      	subs	r3, #1
 8007646:	4618      	mov	r0, r3
 8007648:	f7f9 f888 	bl	800075c <getCharFromCursorPosition>
 800764c:	4603      	mov	r3, r0
 800764e:	b2d9      	uxtb	r1, r3
 8007650:	4a35      	ldr	r2, [pc, #212]	; (8007728 <takeWifiPass+0x3bc>)
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	4413      	add	r3, r2
 8007656:	460a      	mov	r2, r1
 8007658:	701a      	strb	r2, [r3, #0]
        	wifiPassLocArr[wifiPassLoc] = realCharPos - 1;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	3b01      	subs	r3, #1
 8007660:	b2d9      	uxtb	r1, r3
 8007662:	4a32      	ldr	r2, [pc, #200]	; (800772c <takeWifiPass+0x3c0>)
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	4413      	add	r3, r2
 8007668:	460a      	mov	r2, r1
 800766a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	b2d9      	uxtb	r1, r3
 8007670:	4a2d      	ldr	r2, [pc, #180]	; (8007728 <takeWifiPass+0x3bc>)
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	4413      	add	r3, r2
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	461a      	mov	r2, r3
 800767a:	2001      	movs	r0, #1
 800767c:	f000 fba3 	bl	8007dc6 <lcd_print_char>

            writeLoc++;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3301      	adds	r3, #1
 8007684:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	3301      	adds	r3, #1
 800768a:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 800768c:	20fa      	movs	r0, #250	; 0xfa
 800768e:	f001 f8e1 	bl	8008854 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007692:	2104      	movs	r1, #4
 8007694:	4823      	ldr	r0, [pc, #140]	; (8007724 <takeWifiPass+0x3b8>)
 8007696:	f001 fead 	bl	80093f4 <HAL_GPIO_ReadPin>
 800769a:	4603      	mov	r3, r0
 800769c:	2b01      	cmp	r3, #1
 800769e:	d133      	bne.n	8007708 <takeWifiPass+0x39c>
            if(strlen(wifiPass) >= 1) {
 80076a0:	4b21      	ldr	r3, [pc, #132]	; (8007728 <takeWifiPass+0x3bc>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d02c      	beq.n	8007702 <takeWifiPass+0x396>
            	wifiPass[wifiPassLoc] = '\0';
 80076a8:	4a1f      	ldr	r2, [pc, #124]	; (8007728 <takeWifiPass+0x3bc>)
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	4413      	add	r3, r2
 80076ae:	2200      	movs	r2, #0
 80076b0:	701a      	strb	r2, [r3, #0]
            	wifiPassLocArr[wifiPassLoc] = '\0';
 80076b2:	4a1e      	ldr	r2, [pc, #120]	; (800772c <takeWifiPass+0x3c0>)
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	4413      	add	r3, r2
 80076b8:	2200      	movs	r2, #0
 80076ba:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	3306      	adds	r3, #6
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	4619      	mov	r1, r3
 80076c6:	2001      	movs	r0, #1
 80076c8:	f000 fb9e 	bl	8007e08 <lcd_delete_char>
            	HAL_Delay(50);
 80076cc:	2032      	movs	r0, #50	; 0x32
 80076ce:	f001 f8c1 	bl	8008854 <HAL_Delay>

            	if(writeLoc > 7) {
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b07      	cmp	r3, #7
 80076d6:	dd03      	ble.n	80076e0 <takeWifiPass+0x374>
            		writeLoc--;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3b01      	subs	r3, #1
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	e004      	b.n	80076ea <takeWifiPass+0x37e>
            	} else if(writeLoc < 7) {
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b06      	cmp	r3, #6
 80076e4:	dc01      	bgt.n	80076ea <takeWifiPass+0x37e>
            		writeLoc = 7;
 80076e6:	2307      	movs	r3, #7
 80076e8:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	dd03      	ble.n	80076f8 <takeWifiPass+0x38c>
            		wifiPassLoc--;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	613b      	str	r3, [r7, #16]
 80076f6:	e004      	b.n	8007702 <takeWifiPass+0x396>
            	} else if(wifiPassLoc < 0) {
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	da01      	bge.n	8007702 <takeWifiPass+0x396>
            		wifiPassLoc = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 8007702:	20fa      	movs	r0, #250	; 0xfa
 8007704:	f001 f8a6 	bl	8008854 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007708:	4b05      	ldr	r3, [pc, #20]	; (8007720 <takeWifiPass+0x3b4>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	4619      	mov	r1, r3
 8007710:	2002      	movs	r0, #2
 8007712:	f000 fb24 	bl	8007d5e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007716:	e648      	b.n	80073aa <takeWifiPass+0x3e>
    }
}
 8007718:	bf00      	nop
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bdb0      	pop	{r4, r5, r7, pc}
 8007720:	20000000 	.word	0x20000000
 8007724:	40010800 	.word	0x40010800
 8007728:	200001c0 	.word	0x200001c0
 800772c:	200001e8 	.word	0x200001e8

08007730 <mergeData>:

char* mergeData() {
 8007730:	b580      	push	{r7, lr}
 8007732:	b09c      	sub	sp, #112	; 0x70
 8007734:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 8007736:	2300      	movs	r3, #0
 8007738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800773a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800773e:	2228      	movs	r2, #40	; 0x28
 8007740:	2100      	movs	r1, #0
 8007742:	4618      	mov	r0, r3
 8007744:	f004 ffa9 	bl	800c69a <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007748:	4b67      	ldr	r3, [pc, #412]	; (80078e8 <mergeData+0x1b8>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	713b      	strb	r3, [r7, #4]
 800774e:	4b67      	ldr	r3, [pc, #412]	; (80078ec <mergeData+0x1bc>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	717b      	strb	r3, [r7, #5]
 8007754:	4b66      	ldr	r3, [pc, #408]	; (80078f0 <mergeData+0x1c0>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	71bb      	strb	r3, [r7, #6]
 800775a:	4b66      	ldr	r3, [pc, #408]	; (80078f4 <mergeData+0x1c4>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	71fb      	strb	r3, [r7, #7]
 8007760:	4b65      	ldr	r3, [pc, #404]	; (80078f8 <mergeData+0x1c8>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	723b      	strb	r3, [r7, #8]
 8007766:	4b65      	ldr	r3, [pc, #404]	; (80078fc <mergeData+0x1cc>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	727b      	strb	r3, [r7, #9]
 800776c:	4b64      	ldr	r3, [pc, #400]	; (8007900 <mergeData+0x1d0>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	72bb      	strb	r3, [r7, #10]
 8007772:	4b64      	ldr	r3, [pc, #400]	; (8007904 <mergeData+0x1d4>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	72fb      	strb	r3, [r7, #11]
 8007778:	4b63      	ldr	r3, [pc, #396]	; (8007908 <mergeData+0x1d8>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	733b      	strb	r3, [r7, #12]
 800777e:	4b63      	ldr	r3, [pc, #396]	; (800790c <mergeData+0x1dc>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	737b      	strb	r3, [r7, #13]
 8007784:	4b62      	ldr	r3, [pc, #392]	; (8007910 <mergeData+0x1e0>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	73bb      	strb	r3, [r7, #14]
 800778a:	4b62      	ldr	r3, [pc, #392]	; (8007914 <mergeData+0x1e4>)
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	73fb      	strb	r3, [r7, #15]
 8007790:	4b61      	ldr	r3, [pc, #388]	; (8007918 <mergeData+0x1e8>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	743b      	strb	r3, [r7, #16]
 8007796:	4b61      	ldr	r3, [pc, #388]	; (800791c <mergeData+0x1ec>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	747b      	strb	r3, [r7, #17]
 800779c:	4b60      	ldr	r3, [pc, #384]	; (8007920 <mergeData+0x1f0>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	74bb      	strb	r3, [r7, #18]
 80077a2:	4b60      	ldr	r3, [pc, #384]	; (8007924 <mergeData+0x1f4>)
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	74fb      	strb	r3, [r7, #19]
 80077a8:	4b5f      	ldr	r3, [pc, #380]	; (8007928 <mergeData+0x1f8>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	753b      	strb	r3, [r7, #20]
 80077ae:	4b5f      	ldr	r3, [pc, #380]	; (800792c <mergeData+0x1fc>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	757b      	strb	r3, [r7, #21]
 80077b4:	4b5e      	ldr	r3, [pc, #376]	; (8007930 <mergeData+0x200>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	75bb      	strb	r3, [r7, #22]
 80077ba:	4b5e      	ldr	r3, [pc, #376]	; (8007934 <mergeData+0x204>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	75fb      	strb	r3, [r7, #23]
 80077c0:	4b5d      	ldr	r3, [pc, #372]	; (8007938 <mergeData+0x208>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	763b      	strb	r3, [r7, #24]
 80077c6:	4b5d      	ldr	r3, [pc, #372]	; (800793c <mergeData+0x20c>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	767b      	strb	r3, [r7, #25]
 80077cc:	4b5c      	ldr	r3, [pc, #368]	; (8007940 <mergeData+0x210>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	76bb      	strb	r3, [r7, #26]
 80077d2:	4b5c      	ldr	r3, [pc, #368]	; (8007944 <mergeData+0x214>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	76fb      	strb	r3, [r7, #27]
 80077d8:	4b5b      	ldr	r3, [pc, #364]	; (8007948 <mergeData+0x218>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	773b      	strb	r3, [r7, #28]
 80077de:	4b5b      	ldr	r3, [pc, #364]	; (800794c <mergeData+0x21c>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	777b      	strb	r3, [r7, #29]
 80077e4:	4b5a      	ldr	r3, [pc, #360]	; (8007950 <mergeData+0x220>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	77bb      	strb	r3, [r7, #30]
 80077ea:	4b5a      	ldr	r3, [pc, #360]	; (8007954 <mergeData+0x224>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	77fb      	strb	r3, [r7, #31]
 80077f0:	4b59      	ldr	r3, [pc, #356]	; (8007958 <mergeData+0x228>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f887 3020 	strb.w	r3, [r7, #32]
 80077f8:	4b58      	ldr	r3, [pc, #352]	; (800795c <mergeData+0x22c>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007800:	4b57      	ldr	r3, [pc, #348]	; (8007960 <mergeData+0x230>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007808:	4b56      	ldr	r3, [pc, #344]	; (8007964 <mergeData+0x234>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007810:	4b55      	ldr	r3, [pc, #340]	; (8007968 <mergeData+0x238>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007818:	4b54      	ldr	r3, [pc, #336]	; (800796c <mergeData+0x23c>)
 800781a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 800781e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 8007822:	4b52      	ldr	r3, [pc, #328]	; (800796c <mergeData+0x23c>)
 8007824:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007828:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 800782c:	4b4f      	ldr	r3, [pc, #316]	; (800796c <mergeData+0x23c>)
 800782e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 8007836:	4b4d      	ldr	r3, [pc, #308]	; (800796c <mergeData+0x23c>)
 8007838:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800783c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007840:	4b4a      	ldr	r3, [pc, #296]	; (800796c <mergeData+0x23c>)
 8007842:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007846:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 800784a:	4b48      	ldr	r3, [pc, #288]	; (800796c <mergeData+0x23c>)
 800784c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007850:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007854:	4b45      	ldr	r3, [pc, #276]	; (800796c <mergeData+0x23c>)
 8007856:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800785a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 800785e:	4b43      	ldr	r3, [pc, #268]	; (800796c <mergeData+0x23c>)
 8007860:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007864:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007868:	4b40      	ldr	r3, [pc, #256]	; (800796c <mergeData+0x23c>)
 800786a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800786e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007872:	4b3e      	ldr	r3, [pc, #248]	; (800796c <mergeData+0x23c>)
 8007874:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007878:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800787c:	2306      	movs	r3, #6
 800787e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007882:	2300      	movs	r3, #0
 8007884:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007886:	e015      	b.n	80078b4 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007888:	1d3a      	adds	r2, r7, #4
 800788a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800788c:	4413      	add	r3, r2
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007896:	4936      	ldr	r1, [pc, #216]	; (8007970 <mergeData+0x240>)
 8007898:	4618      	mov	r0, r3
 800789a:	f004 fe8d 	bl	800c5b8 <siprintf>
	    strcat(combinedString, temp);
 800789e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80078a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80078a6:	4611      	mov	r1, r2
 80078a8:	4618      	mov	r0, r3
 80078aa:	f004 fee7 	bl	800c67c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80078ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b0:	3301      	adds	r3, #1
 80078b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b6:	2b2b      	cmp	r3, #43	; 0x2b
 80078b8:	d9e6      	bls.n	8007888 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80078ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80078be:	4618      	mov	r0, r3
 80078c0:	f7f8 fcb0 	bl	8000224 <strlen>
 80078c4:	4603      	mov	r3, r0
 80078c6:	3301      	adds	r3, #1
 80078c8:	4618      	mov	r0, r3
 80078ca:	f004 fdc1 	bl	800c450 <malloc>
 80078ce:	4603      	mov	r3, r0
 80078d0:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80078d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80078d6:	4619      	mov	r1, r3
 80078d8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80078da:	f004 ff23 	bl	800c724 <strcpy>
	return result;
 80078de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3770      	adds	r7, #112	; 0x70
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	20000233 	.word	0x20000233
 80078ec:	20000225 	.word	0x20000225
 80078f0:	20000228 	.word	0x20000228
 80078f4:	20000229 	.word	0x20000229
 80078f8:	2000022a 	.word	0x2000022a
 80078fc:	20000231 	.word	0x20000231
 8007900:	2000022b 	.word	0x2000022b
 8007904:	2000022c 	.word	0x2000022c
 8007908:	20000230 	.word	0x20000230
 800790c:	2000022d 	.word	0x2000022d
 8007910:	2000023d 	.word	0x2000023d
 8007914:	2000022e 	.word	0x2000022e
 8007918:	2000023e 	.word	0x2000023e
 800791c:	2000022f 	.word	0x2000022f
 8007920:	2000023f 	.word	0x2000023f
 8007924:	20000232 	.word	0x20000232
 8007928:	20000234 	.word	0x20000234
 800792c:	20000235 	.word	0x20000235
 8007930:	20000236 	.word	0x20000236
 8007934:	20000237 	.word	0x20000237
 8007938:	20000238 	.word	0x20000238
 800793c:	20000239 	.word	0x20000239
 8007940:	2000023a 	.word	0x2000023a
 8007944:	2000023b 	.word	0x2000023b
 8007948:	2000023c 	.word	0x2000023c
 800794c:	20000240 	.word	0x20000240
 8007950:	20000242 	.word	0x20000242
 8007954:	20000221 	.word	0x20000221
 8007958:	20000222 	.word	0x20000222
 800795c:	20000008 	.word	0x20000008
 8007960:	20000009 	.word	0x20000009
 8007964:	20000223 	.word	0x20000223
 8007968:	20000245 	.word	0x20000245
 800796c:	20000128 	.word	0x20000128
 8007970:	0800ddcc 	.word	0x0800ddcc

08007974 <convertAndSendData>:

void convertAndSendData() {
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 800797a:	4b1c      	ldr	r3, [pc, #112]	; (80079ec <convertAndSendData+0x78>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10a      	bne.n	8007998 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007982:	4a1b      	ldr	r2, [pc, #108]	; (80079f0 <convertAndSendData+0x7c>)
 8007984:	2101      	movs	r1, #1
 8007986:	2001      	movs	r0, #1
 8007988:	f000 fa08 	bl	8007d9c <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 800798c:	4a19      	ldr	r2, [pc, #100]	; (80079f4 <convertAndSendData+0x80>)
 800798e:	2101      	movs	r1, #1
 8007990:	2002      	movs	r0, #2
 8007992:	f000 fa03 	bl	8007d9c <lcd_print>
 8007996:	e009      	b.n	80079ac <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007998:	4a17      	ldr	r2, [pc, #92]	; (80079f8 <convertAndSendData+0x84>)
 800799a:	2101      	movs	r1, #1
 800799c:	2001      	movs	r0, #1
 800799e:	f000 f9fd 	bl	8007d9c <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80079a2:	4a16      	ldr	r2, [pc, #88]	; (80079fc <convertAndSendData+0x88>)
 80079a4:	2101      	movs	r1, #1
 80079a6:	2002      	movs	r0, #2
 80079a8:	f000 f9f8 	bl	8007d9c <lcd_print>
	}
	for(int i=0; i<2; i++) {
 80079ac:	2300      	movs	r3, #0
 80079ae:	607b      	str	r3, [r7, #4]
 80079b0:	e00a      	b.n	80079c8 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 80079b2:	f7ff febd 	bl	8007730 <mergeData>
 80079b6:	4603      	mov	r3, r0
 80079b8:	461a      	mov	r2, r3
 80079ba:	4911      	ldr	r1, [pc, #68]	; (8007a00 <convertAndSendData+0x8c>)
 80079bc:	4811      	ldr	r0, [pc, #68]	; (8007a04 <convertAndSendData+0x90>)
 80079be:	f7f8 ffdf 	bl	8000980 <sendMachineData>
	for(int i=0; i<2; i++) {
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	3301      	adds	r3, #1
 80079c6:	607b      	str	r3, [r7, #4]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	ddf1      	ble.n	80079b2 <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 80079ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079d2:	f000 ff3f 	bl	8008854 <HAL_Delay>
	lcd_clear();
 80079d6:	f000 fa0d 	bl	8007df4 <lcd_clear>
	HAL_Delay(500);
 80079da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079de:	f000 ff39 	bl	8008854 <HAL_Delay>
}
 80079e2:	bf00      	nop
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20000245 	.word	0x20000245
 80079f0:	0800ddd0 	.word	0x0800ddd0
 80079f4:	0800dde4 	.word	0x0800dde4
 80079f8:	0800ddf8 	.word	0x0800ddf8
 80079fc:	0800de0c 	.word	0x0800de0c
 8007a00:	200001a0 	.word	0x200001a0
 8007a04:	20000448 	.word	0x20000448

08007a08 <iotSetup>:

void iotSetup() {
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007a0c:	4b12      	ldr	r3, [pc, #72]	; (8007a58 <iotSetup+0x50>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d014      	beq.n	8007a3e <iotSetup+0x36>
		if(machineID[machineIDCharacterLimit-1] == '\0') {
 8007a14:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <iotSetup+0x54>)
 8007a16:	7adb      	ldrb	r3, [r3, #11]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d102      	bne.n	8007a22 <iotSetup+0x1a>
			takeMachineID(0);
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	f7ff f959 	bl	8006cd4 <takeMachineID>
		}

		if(wifiSSID[0] != '\0') {
 8007a22:	4b0f      	ldr	r3, [pc, #60]	; (8007a60 <iotSetup+0x58>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <iotSetup+0x28>
			takeWifiSSID(0);
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	f7ff fabc 	bl	8006fa8 <takeWifiSSID>
		}

		if(wifiPass[0] != '\0') {
 8007a30:	4b0c      	ldr	r3, [pc, #48]	; (8007a64 <iotSetup+0x5c>)
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <iotSetup+0x36>
			takeWifiPass(0);
 8007a38:	2000      	movs	r0, #0
 8007a3a:	f7ff fc97 	bl	800736c <takeWifiPass>
		}
	}

	//ESP8266_Init(&huart1, "iPhone", "ipek123456");
	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007a3e:	4a09      	ldr	r2, [pc, #36]	; (8007a64 <iotSetup+0x5c>)
 8007a40:	4907      	ldr	r1, [pc, #28]	; (8007a60 <iotSetup+0x58>)
 8007a42:	4809      	ldr	r0, [pc, #36]	; (8007a68 <iotSetup+0x60>)
 8007a44:	f7f8 fef2 	bl	800082c <ESP8266_Init>
	HAL_Delay(500);
 8007a48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a4c:	f000 ff02 	bl	8008854 <HAL_Delay>
	convertAndSendData();
 8007a50:	f7ff ff90 	bl	8007974 <convertAndSendData>
}
 8007a54:	bf00      	nop
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20000243 	.word	0x20000243
 8007a5c:	200001a0 	.word	0x200001a0
 8007a60:	200001ac 	.word	0x200001ac
 8007a64:	200001c0 	.word	0x200001c0
 8007a68:	20000448 	.word	0x20000448

08007a6c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af02      	add	r7, sp, #8
 8007a72:	4603      	mov	r3, r0
 8007a74:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	f023 030f 	bic.w	r3, r3, #15
 8007a7c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	011b      	lsls	r3, r3, #4
 8007a82:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007a84:	7b7b      	ldrb	r3, [r7, #13]
 8007a86:	f043 030c 	orr.w	r3, r3, #12
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007a8e:	7b7b      	ldrb	r3, [r7, #13]
 8007a90:	f043 0308 	orr.w	r3, r3, #8
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007a98:	7b3b      	ldrb	r3, [r7, #12]
 8007a9a:	f043 030c 	orr.w	r3, r3, #12
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007aa2:	7b3b      	ldrb	r3, [r7, #12]
 8007aa4:	f043 0308 	orr.w	r3, r3, #8
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007aac:	bf00      	nop
 8007aae:	4825      	ldr	r0, [pc, #148]	; (8007b44 <lcd_send_cmd+0xd8>)
 8007ab0:	f002 fac9 	bl	800a046 <HAL_I2C_GetError>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d0f9      	beq.n	8007aae <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007aba:	bf00      	nop
 8007abc:	4821      	ldr	r0, [pc, #132]	; (8007b44 <lcd_send_cmd+0xd8>)
 8007abe:	f002 fab5 	bl	800a02c <HAL_I2C_GetState>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b20      	cmp	r3, #32
 8007ac6:	d1f9      	bne.n	8007abc <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007ac8:	4b1f      	ldr	r3, [pc, #124]	; (8007b48 <lcd_send_cmd+0xdc>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d116      	bne.n	8007afe <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73fb      	strb	r3, [r7, #15]
 8007ad4:	e00f      	b.n	8007af6 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
 8007ad8:	3310      	adds	r3, #16
 8007ada:	443b      	add	r3, r7
 8007adc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	f022 0208 	bic.w	r2, r2, #8
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	3310      	adds	r3, #16
 8007aea:	443b      	add	r3, r7
 8007aec:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	3301      	adds	r3, #1
 8007af4:	73fb      	strb	r3, [r7, #15]
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d9ec      	bls.n	8007ad6 <lcd_send_cmd+0x6a>
 8007afc:	e015      	b.n	8007b2a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007afe:	2300      	movs	r3, #0
 8007b00:	73bb      	strb	r3, [r7, #14]
 8007b02:	e00f      	b.n	8007b24 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	3310      	adds	r3, #16
 8007b08:	443b      	add	r3, r7
 8007b0a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	f042 0208 	orr.w	r2, r2, #8
 8007b14:	b2d2      	uxtb	r2, r2
 8007b16:	3310      	adds	r3, #16
 8007b18:	443b      	add	r3, r7
 8007b1a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	3301      	adds	r3, #1
 8007b22:	73bb      	strb	r3, [r7, #14]
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d9ec      	bls.n	8007b04 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007b2a:	f107 0208 	add.w	r2, r7, #8
 8007b2e:	2364      	movs	r3, #100	; 0x64
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	2304      	movs	r3, #4
 8007b34:	214e      	movs	r1, #78	; 0x4e
 8007b36:	4803      	ldr	r0, [pc, #12]	; (8007b44 <lcd_send_cmd+0xd8>)
 8007b38:	f001 fe18 	bl	800976c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007b3c:	bf00      	nop
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	200003ac 	.word	0x200003ac
 8007b48:	20000382 	.word	0x20000382

08007b4c <lcd_send_data>:

void lcd_send_data (char data) {
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	4603      	mov	r3, r0
 8007b54:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007b56:	79fb      	ldrb	r3, [r7, #7]
 8007b58:	f023 030f 	bic.w	r3, r3, #15
 8007b5c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007b64:	7b7b      	ldrb	r3, [r7, #13]
 8007b66:	f043 030d 	orr.w	r3, r3, #13
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007b6e:	7b7b      	ldrb	r3, [r7, #13]
 8007b70:	f043 0309 	orr.w	r3, r3, #9
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007b78:	7b3b      	ldrb	r3, [r7, #12]
 8007b7a:	f043 030d 	orr.w	r3, r3, #13
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007b82:	7b3b      	ldrb	r3, [r7, #12]
 8007b84:	f043 0309 	orr.w	r3, r3, #9
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b8c:	bf00      	nop
 8007b8e:	4825      	ldr	r0, [pc, #148]	; (8007c24 <lcd_send_data+0xd8>)
 8007b90:	f002 fa59 	bl	800a046 <HAL_I2C_GetError>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d0f9      	beq.n	8007b8e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b9a:	bf00      	nop
 8007b9c:	4821      	ldr	r0, [pc, #132]	; (8007c24 <lcd_send_data+0xd8>)
 8007b9e:	f002 fa45 	bl	800a02c <HAL_I2C_GetState>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	d1f9      	bne.n	8007b9c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007ba8:	4b1f      	ldr	r3, [pc, #124]	; (8007c28 <lcd_send_data+0xdc>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d116      	bne.n	8007bde <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	73fb      	strb	r3, [r7, #15]
 8007bb4:	e00f      	b.n	8007bd6 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
 8007bb8:	3310      	adds	r3, #16
 8007bba:	443b      	add	r3, r7
 8007bbc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	f022 0208 	bic.w	r2, r2, #8
 8007bc6:	b2d2      	uxtb	r2, r2
 8007bc8:	3310      	adds	r3, #16
 8007bca:	443b      	add	r3, r7
 8007bcc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	73fb      	strb	r3, [r7, #15]
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
 8007bd8:	2b03      	cmp	r3, #3
 8007bda:	d9ec      	bls.n	8007bb6 <lcd_send_data+0x6a>
 8007bdc:	e015      	b.n	8007c0a <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007bde:	2300      	movs	r3, #0
 8007be0:	73bb      	strb	r3, [r7, #14]
 8007be2:	e00f      	b.n	8007c04 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007be4:	7bbb      	ldrb	r3, [r7, #14]
 8007be6:	3310      	adds	r3, #16
 8007be8:	443b      	add	r3, r7
 8007bea:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	f042 0208 	orr.w	r2, r2, #8
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	3310      	adds	r3, #16
 8007bf8:	443b      	add	r3, r7
 8007bfa:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	3301      	adds	r3, #1
 8007c02:	73bb      	strb	r3, [r7, #14]
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d9ec      	bls.n	8007be4 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007c0a:	f107 0208 	add.w	r2, r7, #8
 8007c0e:	2364      	movs	r3, #100	; 0x64
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	2304      	movs	r3, #4
 8007c14:	214e      	movs	r1, #78	; 0x4e
 8007c16:	4803      	ldr	r0, [pc, #12]	; (8007c24 <lcd_send_data+0xd8>)
 8007c18:	f001 fda8 	bl	800976c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007c1c:	bf00      	nop
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	200003ac 	.word	0x200003ac
 8007c28:	20000382 	.word	0x20000382

08007c2c <lcd_send_string>:

void lcd_send_string (char *str) {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007c34:	e006      	b.n	8007c44 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	607a      	str	r2, [r7, #4]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7ff ff84 	bl	8007b4c <lcd_send_data>
	while (*str) {
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1f4      	bne.n	8007c36 <lcd_send_string+0xa>
	}
}
 8007c4c:	bf00      	nop
 8007c4e:	bf00      	nop
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	4603      	mov	r3, r0
 8007c60:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007c62:	79fb      	ldrb	r3, [r7, #7]
 8007c64:	f023 030f 	bic.w	r3, r3, #15
 8007c68:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	011b      	lsls	r3, r3, #4
 8007c6e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007c70:	7b7b      	ldrb	r3, [r7, #13]
 8007c72:	f043 030d 	orr.w	r3, r3, #13
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007c7a:	7b7b      	ldrb	r3, [r7, #13]
 8007c7c:	f043 0309 	orr.w	r3, r3, #9
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007c84:	7b3b      	ldrb	r3, [r7, #12]
 8007c86:	f043 030d 	orr.w	r3, r3, #13
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007c8e:	7b3b      	ldrb	r3, [r7, #12]
 8007c90:	f043 0309 	orr.w	r3, r3, #9
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c98:	bf00      	nop
 8007c9a:	4825      	ldr	r0, [pc, #148]	; (8007d30 <lcd_send_char+0xd8>)
 8007c9c:	f002 f9d3 	bl	800a046 <HAL_I2C_GetError>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	d0f9      	beq.n	8007c9a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ca6:	bf00      	nop
 8007ca8:	4821      	ldr	r0, [pc, #132]	; (8007d30 <lcd_send_char+0xd8>)
 8007caa:	f002 f9bf 	bl	800a02c <HAL_I2C_GetState>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b20      	cmp	r3, #32
 8007cb2:	d1f9      	bne.n	8007ca8 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007cb4:	4b1f      	ldr	r3, [pc, #124]	; (8007d34 <lcd_send_char+0xdc>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d116      	bne.n	8007cea <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73fb      	strb	r3, [r7, #15]
 8007cc0:	e00f      	b.n	8007ce2 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	3310      	adds	r3, #16
 8007cc6:	443b      	add	r3, r7
 8007cc8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	f022 0208 	bic.w	r2, r2, #8
 8007cd2:	b2d2      	uxtb	r2, r2
 8007cd4:	3310      	adds	r3, #16
 8007cd6:	443b      	add	r3, r7
 8007cd8:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	73fb      	strb	r3, [r7, #15]
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d9ec      	bls.n	8007cc2 <lcd_send_char+0x6a>
 8007ce8:	e015      	b.n	8007d16 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007cea:	2300      	movs	r3, #0
 8007cec:	73bb      	strb	r3, [r7, #14]
 8007cee:	e00f      	b.n	8007d10 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	3310      	adds	r3, #16
 8007cf4:	443b      	add	r3, r7
 8007cf6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007cfa:	7bbb      	ldrb	r3, [r7, #14]
 8007cfc:	f042 0208 	orr.w	r2, r2, #8
 8007d00:	b2d2      	uxtb	r2, r2
 8007d02:	3310      	adds	r3, #16
 8007d04:	443b      	add	r3, r7
 8007d06:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	73bb      	strb	r3, [r7, #14]
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d9ec      	bls.n	8007cf0 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007d16:	f107 0208 	add.w	r2, r7, #8
 8007d1a:	2364      	movs	r3, #100	; 0x64
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	2304      	movs	r3, #4
 8007d20:	214e      	movs	r1, #78	; 0x4e
 8007d22:	4803      	ldr	r0, [pc, #12]	; (8007d30 <lcd_send_char+0xd8>)
 8007d24:	f001 fd22 	bl	800976c <HAL_I2C_Master_Transmit>
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	200003ac 	.word	0x200003ac
 8007d34:	20000382 	.word	0x20000382

08007d38 <lcd_init>:

void lcd_init (void) {
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007d3c:	2002      	movs	r0, #2
 8007d3e:	f7ff fe95 	bl	8007a6c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007d42:	2028      	movs	r0, #40	; 0x28
 8007d44:	f7ff fe92 	bl	8007a6c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007d48:	200c      	movs	r0, #12
 8007d4a:	f7ff fe8f 	bl	8007a6c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007d4e:	2080      	movs	r0, #128	; 0x80
 8007d50:	f7ff fe8c 	bl	8007a6c <lcd_send_cmd>
	lcd_backlight(1);
 8007d54:	2001      	movs	r0, #1
 8007d56:	f000 f86d 	bl	8007e34 <lcd_backlight>
}
 8007d5a:	bf00      	nop
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	4603      	mov	r3, r0
 8007d66:	460a      	mov	r2, r1
 8007d68:	71fb      	strb	r3, [r7, #7]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d106      	bne.n	8007d82 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007d74:	79bb      	ldrb	r3, [r7, #6]
 8007d76:	337f      	adds	r3, #127	; 0x7f
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7ff fe76 	bl	8007a6c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007d80:	e008      	b.n	8007d94 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d105      	bne.n	8007d94 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007d88:	79bb      	ldrb	r3, [r7, #6]
 8007d8a:	3b41      	subs	r3, #65	; 0x41
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff fe6c 	bl	8007a6c <lcd_send_cmd>
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	4603      	mov	r3, r0
 8007da4:	603a      	str	r2, [r7, #0]
 8007da6:	71fb      	strb	r3, [r7, #7]
 8007da8:	460b      	mov	r3, r1
 8007daa:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007dac:	79ba      	ldrb	r2, [r7, #6]
 8007dae:	79fb      	ldrb	r3, [r7, #7]
 8007db0:	4611      	mov	r1, r2
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7ff ffd3 	bl	8007d5e <lcd_gotoxy>
	lcd_send_string(str);
 8007db8:	6838      	ldr	r0, [r7, #0]
 8007dba:	f7ff ff37 	bl	8007c2c <lcd_send_string>
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	4603      	mov	r3, r0
 8007dce:	71fb      	strb	r3, [r7, #7]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	71bb      	strb	r3, [r7, #6]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007dd8:	79ba      	ldrb	r2, [r7, #6]
 8007dda:	79fb      	ldrb	r3, [r7, #7]
 8007ddc:	4611      	mov	r1, r2
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff ffbd 	bl	8007d5e <lcd_gotoxy>
    lcd_send_char(ch);
 8007de4:	797b      	ldrb	r3, [r7, #5]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff ff36 	bl	8007c58 <lcd_send_char>
}
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <lcd_clear>:

void lcd_clear(void) {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007df8:	2001      	movs	r0, #1
 8007dfa:	f7ff fe37 	bl	8007a6c <lcd_send_cmd>
    HAL_Delay(2);
 8007dfe:	2002      	movs	r0, #2
 8007e00:	f000 fd28 	bl	8008854 <HAL_Delay>
}
 8007e04:	bf00      	nop
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	460a      	mov	r2, r1
 8007e12:	71fb      	strb	r3, [r7, #7]
 8007e14:	4613      	mov	r3, r2
 8007e16:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007e18:	79ba      	ldrb	r2, [r7, #6]
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7ff ff9d 	bl	8007d5e <lcd_gotoxy>

    lcd_send_char(' ');
 8007e24:	2020      	movs	r0, #32
 8007e26:	f7ff ff17 	bl	8007c58 <lcd_send_char>
}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007e3e:	4a05      	ldr	r2, [pc, #20]	; (8007e54 <lcd_backlight+0x20>)
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007e44:	2000      	movs	r0, #0
 8007e46:	f7ff fe11 	bl	8007a6c <lcd_send_cmd>
}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000382 	.word	0x20000382

08007e58 <lcd_cursor>:

void lcd_cursor(int state) {
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d106      	bne.n	8007e74 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007e66:	200e      	movs	r0, #14
 8007e68:	f7ff fe00 	bl	8007a6c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007e6c:	200f      	movs	r0, #15
 8007e6e:	f7ff fdfd 	bl	8007a6c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007e72:	e002      	b.n	8007e7a <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007e74:	200c      	movs	r0, #12
 8007e76:	f7ff fdf9 	bl	8007a6c <lcd_send_cmd>
}
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
	...

08007e84 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007e8c:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3301      	adds	r3, #1
 8007e92:	4a03      	ldr	r2, [pc, #12]	; (8007ea0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e94:	6013      	str	r3, [r2, #0]
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bc80      	pop	{r7}
 8007e9e:	4770      	bx	lr
 8007ea0:	20000200 	.word	0x20000200

08007ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ea8:	f000 fc72 	bl	8008790 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007eac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007eb0:	f000 fcd0 	bl	8008854 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007eb4:	f000 f8a2 	bl	8007ffc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007eb8:	f000 f9c4 	bl	8008244 <MX_GPIO_Init>
  MX_CAN_Init();
 8007ebc:	f000 f8e4 	bl	8008088 <MX_CAN_Init>
  MX_I2C1_Init();
 8007ec0:	f000 f916 	bl	80080f0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007ec4:	f000 f942 	bl	800814c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007ec8:	f000 f992 	bl	80081f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007ecc:	2201      	movs	r2, #1
 8007ece:	2140      	movs	r1, #64	; 0x40
 8007ed0:	4841      	ldr	r0, [pc, #260]	; (8007fd8 <main+0x134>)
 8007ed2:	f001 faa6 	bl	8009422 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	2180      	movs	r1, #128	; 0x80
 8007eda:	483f      	ldr	r0, [pc, #252]	; (8007fd8 <main+0x134>)
 8007edc:	f001 faa1 	bl	8009422 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007ee0:	200a      	movs	r0, #10
 8007ee2:	f000 fcb7 	bl	8008854 <HAL_Delay>
  lcd_init();
 8007ee6:	f7ff ff27 	bl	8007d38 <lcd_init>
  HAL_Delay(10);
 8007eea:	200a      	movs	r0, #10
 8007eec:	f000 fcb2 	bl	8008854 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007ef0:	483a      	ldr	r0, [pc, #232]	; (8007fdc <main+0x138>)
 8007ef2:	f003 f949 	bl	800b188 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ef6:	bf00      	nop
 8007ef8:	4839      	ldr	r0, [pc, #228]	; (8007fe0 <main+0x13c>)
 8007efa:	f002 f8a4 	bl	800a046 <HAL_I2C_GetError>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	d0f9      	beq.n	8007ef8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007f04:	bf00      	nop
 8007f06:	4836      	ldr	r0, [pc, #216]	; (8007fe0 <main+0x13c>)
 8007f08:	f002 f890 	bl	800a02c <HAL_I2C_GetState>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b20      	cmp	r3, #32
 8007f10:	d1f9      	bne.n	8007f06 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007f12:	2200      	movs	r2, #0
 8007f14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f18:	482f      	ldr	r0, [pc, #188]	; (8007fd8 <main+0x134>)
 8007f1a:	f001 fa82 	bl	8009422 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f24:	482c      	ldr	r0, [pc, #176]	; (8007fd8 <main+0x134>)
 8007f26:	f001 fa7c 	bl	8009422 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2104      	movs	r1, #4
 8007f2e:	482a      	ldr	r0, [pc, #168]	; (8007fd8 <main+0x134>)
 8007f30:	f001 fa77 	bl	8009422 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007f34:	2200      	movs	r2, #0
 8007f36:	2102      	movs	r1, #2
 8007f38:	4827      	ldr	r0, [pc, #156]	; (8007fd8 <main+0x134>)
 8007f3a:	f001 fa72 	bl	8009422 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2101      	movs	r1, #1
 8007f42:	4825      	ldr	r0, [pc, #148]	; (8007fd8 <main+0x134>)
 8007f44:	f001 fa6d 	bl	8009422 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2120      	movs	r1, #32
 8007f4c:	4825      	ldr	r0, [pc, #148]	; (8007fe4 <main+0x140>)
 8007f4e:	f001 fa68 	bl	8009422 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f52:	2200      	movs	r2, #0
 8007f54:	2110      	movs	r1, #16
 8007f56:	4823      	ldr	r0, [pc, #140]	; (8007fe4 <main+0x140>)
 8007f58:	f001 fa63 	bl	8009422 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2180      	movs	r1, #128	; 0x80
 8007f60:	4821      	ldr	r0, [pc, #132]	; (8007fe8 <main+0x144>)
 8007f62:	f001 fa5e 	bl	8009422 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f66:	2200      	movs	r2, #0
 8007f68:	2140      	movs	r1, #64	; 0x40
 8007f6a:	481f      	ldr	r0, [pc, #124]	; (8007fe8 <main+0x144>)
 8007f6c:	f001 fa59 	bl	8009422 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f70:	2200      	movs	r2, #0
 8007f72:	2120      	movs	r1, #32
 8007f74:	481c      	ldr	r0, [pc, #112]	; (8007fe8 <main+0x144>)
 8007f76:	f001 fa54 	bl	8009422 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2110      	movs	r1, #16
 8007f7e:	481a      	ldr	r0, [pc, #104]	; (8007fe8 <main+0x144>)
 8007f80:	f001 fa4f 	bl	8009422 <HAL_GPIO_WritePin>

  i2cTest();
 8007f84:	f7f8 fedc 	bl	8000d40 <i2cTest>
  HAL_Delay(100);
 8007f88:	2064      	movs	r0, #100	; 0x64
 8007f8a:	f000 fc63 	bl	8008854 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007f8e:	4a17      	ldr	r2, [pc, #92]	; (8007fec <main+0x148>)
 8007f90:	2101      	movs	r1, #1
 8007f92:	2001      	movs	r0, #1
 8007f94:	f7ff ff02 	bl	8007d9c <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007f98:	4a15      	ldr	r2, [pc, #84]	; (8007ff0 <main+0x14c>)
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	2002      	movs	r0, #2
 8007f9e:	f7ff fefd 	bl	8007d9c <lcd_print>
  HAL_Delay(1000);
 8007fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007fa6:	f000 fc55 	bl	8008854 <HAL_Delay>
  lcd_clear();
 8007faa:	f7ff ff23 	bl	8007df4 <lcd_clear>

  eepromKontrol(0);
 8007fae:	2000      	movs	r0, #0
 8007fb0:	f7f8 f940 	bl	8000234 <eepromKontrol>
  HAL_Delay(200);
 8007fb4:	20c8      	movs	r0, #200	; 0xc8
 8007fb6:	f000 fc4d 	bl	8008854 <HAL_Delay>

  lcd_clear();
 8007fba:	f7ff ff1b 	bl	8007df4 <lcd_clear>
  HAL_Delay(200);
 8007fbe:	20c8      	movs	r0, #200	; 0xc8
 8007fc0:	f000 fc48 	bl	8008854 <HAL_Delay>

  backLightTimer = millis;
 8007fc4:	4b0b      	ldr	r3, [pc, #44]	; (8007ff4 <main+0x150>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a0b      	ldr	r2, [pc, #44]	; (8007ff8 <main+0x154>)
 8007fca:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007fcc:	f7ff fd1c 	bl	8007a08 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007fd0:	f7fe fce8 	bl	80069a4 <mainLoop>
 8007fd4:	e7fc      	b.n	8007fd0 <main+0x12c>
 8007fd6:	bf00      	nop
 8007fd8:	40010c00 	.word	0x40010c00
 8007fdc:	20000400 	.word	0x20000400
 8007fe0:	200003ac 	.word	0x200003ac
 8007fe4:	40011000 	.word	0x40011000
 8007fe8:	40010800 	.word	0x40010800
 8007fec:	0800de20 	.word	0x0800de20
 8007ff0:	0800de34 	.word	0x0800de34
 8007ff4:	20000200 	.word	0x20000200
 8007ff8:	2000021c 	.word	0x2000021c

08007ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b090      	sub	sp, #64	; 0x40
 8008000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008002:	f107 0318 	add.w	r3, r7, #24
 8008006:	2228      	movs	r2, #40	; 0x28
 8008008:	2100      	movs	r1, #0
 800800a:	4618      	mov	r0, r3
 800800c:	f004 fb45 	bl	800c69a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008010:	1d3b      	adds	r3, r7, #4
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	605a      	str	r2, [r3, #4]
 8008018:	609a      	str	r2, [r3, #8]
 800801a:	60da      	str	r2, [r3, #12]
 800801c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800801e:	2301      	movs	r3, #1
 8008020:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008026:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008028:	2300      	movs	r3, #0
 800802a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800802c:	2301      	movs	r3, #1
 800802e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008030:	2302      	movs	r3, #2
 8008032:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008038:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800803a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800803e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008040:	f107 0318 	add.w	r3, r7, #24
 8008044:	4618      	mov	r0, r3
 8008046:	f002 fc3f 	bl	800a8c8 <HAL_RCC_OscConfig>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008050:	f000 f9a2 	bl	8008398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008054:	230f      	movs	r3, #15
 8008056:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008058:	2302      	movs	r3, #2
 800805a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800805c:	2300      	movs	r3, #0
 800805e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008064:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008066:	2300      	movs	r3, #0
 8008068:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800806a:	1d3b      	adds	r3, r7, #4
 800806c:	2102      	movs	r1, #2
 800806e:	4618      	mov	r0, r3
 8008070:	f002 feac 	bl	800adcc <HAL_RCC_ClockConfig>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800807a:	f000 f98d 	bl	8008398 <Error_Handler>
  }
}
 800807e:	bf00      	nop
 8008080:	3740      	adds	r7, #64	; 0x40
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800808c:	4b16      	ldr	r3, [pc, #88]	; (80080e8 <MX_CAN_Init+0x60>)
 800808e:	4a17      	ldr	r2, [pc, #92]	; (80080ec <MX_CAN_Init+0x64>)
 8008090:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008092:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <MX_CAN_Init+0x60>)
 8008094:	2210      	movs	r2, #16
 8008096:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008098:	4b13      	ldr	r3, [pc, #76]	; (80080e8 <MX_CAN_Init+0x60>)
 800809a:	2200      	movs	r2, #0
 800809c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800809e:	4b12      	ldr	r3, [pc, #72]	; (80080e8 <MX_CAN_Init+0x60>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80080a4:	4b10      	ldr	r3, [pc, #64]	; (80080e8 <MX_CAN_Init+0x60>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80080aa:	4b0f      	ldr	r3, [pc, #60]	; (80080e8 <MX_CAN_Init+0x60>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80080b0:	4b0d      	ldr	r3, [pc, #52]	; (80080e8 <MX_CAN_Init+0x60>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80080b6:	4b0c      	ldr	r3, [pc, #48]	; (80080e8 <MX_CAN_Init+0x60>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <MX_CAN_Init+0x60>)
 80080be:	2200      	movs	r2, #0
 80080c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80080c2:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <MX_CAN_Init+0x60>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80080c8:	4b07      	ldr	r3, [pc, #28]	; (80080e8 <MX_CAN_Init+0x60>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80080ce:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <MX_CAN_Init+0x60>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80080d4:	4804      	ldr	r0, [pc, #16]	; (80080e8 <MX_CAN_Init+0x60>)
 80080d6:	f000 fbe1 	bl	800889c <HAL_CAN_Init>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80080e0:	f000 f95a 	bl	8008398 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80080e4:	bf00      	nop
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	20000384 	.word	0x20000384
 80080ec:	40006400 	.word	0x40006400

080080f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80080f4:	4b12      	ldr	r3, [pc, #72]	; (8008140 <MX_I2C1_Init+0x50>)
 80080f6:	4a13      	ldr	r2, [pc, #76]	; (8008144 <MX_I2C1_Init+0x54>)
 80080f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80080fa:	4b11      	ldr	r3, [pc, #68]	; (8008140 <MX_I2C1_Init+0x50>)
 80080fc:	4a12      	ldr	r2, [pc, #72]	; (8008148 <MX_I2C1_Init+0x58>)
 80080fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008100:	4b0f      	ldr	r3, [pc, #60]	; (8008140 <MX_I2C1_Init+0x50>)
 8008102:	2200      	movs	r2, #0
 8008104:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008106:	4b0e      	ldr	r3, [pc, #56]	; (8008140 <MX_I2C1_Init+0x50>)
 8008108:	2200      	movs	r2, #0
 800810a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800810c:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <MX_I2C1_Init+0x50>)
 800810e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008112:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008114:	4b0a      	ldr	r3, [pc, #40]	; (8008140 <MX_I2C1_Init+0x50>)
 8008116:	2200      	movs	r2, #0
 8008118:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800811a:	4b09      	ldr	r3, [pc, #36]	; (8008140 <MX_I2C1_Init+0x50>)
 800811c:	2200      	movs	r2, #0
 800811e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008120:	4b07      	ldr	r3, [pc, #28]	; (8008140 <MX_I2C1_Init+0x50>)
 8008122:	2200      	movs	r2, #0
 8008124:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008126:	4b06      	ldr	r3, [pc, #24]	; (8008140 <MX_I2C1_Init+0x50>)
 8008128:	2200      	movs	r2, #0
 800812a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800812c:	4804      	ldr	r0, [pc, #16]	; (8008140 <MX_I2C1_Init+0x50>)
 800812e:	f001 f9a9 	bl	8009484 <HAL_I2C_Init>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008138:	f000 f92e 	bl	8008398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800813c:	bf00      	nop
 800813e:	bd80      	pop	{r7, pc}
 8008140:	200003ac 	.word	0x200003ac
 8008144:	40005400 	.word	0x40005400
 8008148:	00061a80 	.word	0x00061a80

0800814c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008152:	f107 0308 	add.w	r3, r7, #8
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	605a      	str	r2, [r3, #4]
 800815c:	609a      	str	r2, [r3, #8]
 800815e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008160:	463b      	mov	r3, r7
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008168:	4b1f      	ldr	r3, [pc, #124]	; (80081e8 <MX_TIM1_Init+0x9c>)
 800816a:	4a20      	ldr	r2, [pc, #128]	; (80081ec <MX_TIM1_Init+0xa0>)
 800816c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800816e:	4b1e      	ldr	r3, [pc, #120]	; (80081e8 <MX_TIM1_Init+0x9c>)
 8008170:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008174:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008176:	4b1c      	ldr	r3, [pc, #112]	; (80081e8 <MX_TIM1_Init+0x9c>)
 8008178:	2200      	movs	r2, #0
 800817a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800817c:	4b1a      	ldr	r3, [pc, #104]	; (80081e8 <MX_TIM1_Init+0x9c>)
 800817e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008182:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008184:	4b18      	ldr	r3, [pc, #96]	; (80081e8 <MX_TIM1_Init+0x9c>)
 8008186:	2200      	movs	r2, #0
 8008188:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800818a:	4b17      	ldr	r3, [pc, #92]	; (80081e8 <MX_TIM1_Init+0x9c>)
 800818c:	2200      	movs	r2, #0
 800818e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008190:	4b15      	ldr	r3, [pc, #84]	; (80081e8 <MX_TIM1_Init+0x9c>)
 8008192:	2200      	movs	r2, #0
 8008194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008196:	4814      	ldr	r0, [pc, #80]	; (80081e8 <MX_TIM1_Init+0x9c>)
 8008198:	f002 ffa6 	bl	800b0e8 <HAL_TIM_Base_Init>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80081a2:	f000 f8f9 	bl	8008398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80081a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80081ac:	f107 0308 	add.w	r3, r7, #8
 80081b0:	4619      	mov	r1, r3
 80081b2:	480d      	ldr	r0, [pc, #52]	; (80081e8 <MX_TIM1_Init+0x9c>)
 80081b4:	f003 f950 	bl	800b458 <HAL_TIM_ConfigClockSource>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80081be:	f000 f8eb 	bl	8008398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081c2:	2300      	movs	r3, #0
 80081c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081c6:	2300      	movs	r3, #0
 80081c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80081ca:	463b      	mov	r3, r7
 80081cc:	4619      	mov	r1, r3
 80081ce:	4806      	ldr	r0, [pc, #24]	; (80081e8 <MX_TIM1_Init+0x9c>)
 80081d0:	f003 fb3e 	bl	800b850 <HAL_TIMEx_MasterConfigSynchronization>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80081da:	f000 f8dd 	bl	8008398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80081de:	bf00      	nop
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20000400 	.word	0x20000400
 80081ec:	40012c00 	.word	0x40012c00

080081f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80081f4:	4b11      	ldr	r3, [pc, #68]	; (800823c <MX_USART1_UART_Init+0x4c>)
 80081f6:	4a12      	ldr	r2, [pc, #72]	; (8008240 <MX_USART1_UART_Init+0x50>)
 80081f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80081fa:	4b10      	ldr	r3, [pc, #64]	; (800823c <MX_USART1_UART_Init+0x4c>)
 80081fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008202:	4b0e      	ldr	r3, [pc, #56]	; (800823c <MX_USART1_UART_Init+0x4c>)
 8008204:	2200      	movs	r2, #0
 8008206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008208:	4b0c      	ldr	r3, [pc, #48]	; (800823c <MX_USART1_UART_Init+0x4c>)
 800820a:	2200      	movs	r2, #0
 800820c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800820e:	4b0b      	ldr	r3, [pc, #44]	; (800823c <MX_USART1_UART_Init+0x4c>)
 8008210:	2200      	movs	r2, #0
 8008212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008214:	4b09      	ldr	r3, [pc, #36]	; (800823c <MX_USART1_UART_Init+0x4c>)
 8008216:	220c      	movs	r2, #12
 8008218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800821a:	4b08      	ldr	r3, [pc, #32]	; (800823c <MX_USART1_UART_Init+0x4c>)
 800821c:	2200      	movs	r2, #0
 800821e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008220:	4b06      	ldr	r3, [pc, #24]	; (800823c <MX_USART1_UART_Init+0x4c>)
 8008222:	2200      	movs	r2, #0
 8008224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008226:	4805      	ldr	r0, [pc, #20]	; (800823c <MX_USART1_UART_Init+0x4c>)
 8008228:	f003 fb90 	bl	800b94c <HAL_UART_Init>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008232:	f000 f8b1 	bl	8008398 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008236:	bf00      	nop
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000448 	.word	0x20000448
 8008240:	40013800 	.word	0x40013800

08008244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800824a:	f107 0310 	add.w	r3, r7, #16
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	605a      	str	r2, [r3, #4]
 8008254:	609a      	str	r2, [r3, #8]
 8008256:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008258:	4b4b      	ldr	r3, [pc, #300]	; (8008388 <MX_GPIO_Init+0x144>)
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	4a4a      	ldr	r2, [pc, #296]	; (8008388 <MX_GPIO_Init+0x144>)
 800825e:	f043 0310 	orr.w	r3, r3, #16
 8008262:	6193      	str	r3, [r2, #24]
 8008264:	4b48      	ldr	r3, [pc, #288]	; (8008388 <MX_GPIO_Init+0x144>)
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008270:	4b45      	ldr	r3, [pc, #276]	; (8008388 <MX_GPIO_Init+0x144>)
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	4a44      	ldr	r2, [pc, #272]	; (8008388 <MX_GPIO_Init+0x144>)
 8008276:	f043 0320 	orr.w	r3, r3, #32
 800827a:	6193      	str	r3, [r2, #24]
 800827c:	4b42      	ldr	r3, [pc, #264]	; (8008388 <MX_GPIO_Init+0x144>)
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	f003 0320 	and.w	r3, r3, #32
 8008284:	60bb      	str	r3, [r7, #8]
 8008286:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008288:	4b3f      	ldr	r3, [pc, #252]	; (8008388 <MX_GPIO_Init+0x144>)
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	4a3e      	ldr	r2, [pc, #248]	; (8008388 <MX_GPIO_Init+0x144>)
 800828e:	f043 0304 	orr.w	r3, r3, #4
 8008292:	6193      	str	r3, [r2, #24]
 8008294:	4b3c      	ldr	r3, [pc, #240]	; (8008388 <MX_GPIO_Init+0x144>)
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	607b      	str	r3, [r7, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80082a0:	4b39      	ldr	r3, [pc, #228]	; (8008388 <MX_GPIO_Init+0x144>)
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	4a38      	ldr	r2, [pc, #224]	; (8008388 <MX_GPIO_Init+0x144>)
 80082a6:	f043 0308 	orr.w	r3, r3, #8
 80082aa:	6193      	str	r3, [r2, #24]
 80082ac:	4b36      	ldr	r3, [pc, #216]	; (8008388 <MX_GPIO_Init+0x144>)
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	f003 0308 	and.w	r3, r3, #8
 80082b4:	603b      	str	r3, [r7, #0]
 80082b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80082b8:	2200      	movs	r2, #0
 80082ba:	21f0      	movs	r1, #240	; 0xf0
 80082bc:	4833      	ldr	r0, [pc, #204]	; (800838c <MX_GPIO_Init+0x148>)
 80082be:	f001 f8b0 	bl	8009422 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80082c2:	2200      	movs	r2, #0
 80082c4:	f241 0130 	movw	r1, #4144	; 0x1030
 80082c8:	4831      	ldr	r0, [pc, #196]	; (8008390 <MX_GPIO_Init+0x14c>)
 80082ca:	f001 f8aa 	bl	8009422 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80082ce:	2200      	movs	r2, #0
 80082d0:	f640 4107 	movw	r1, #3079	; 0xc07
 80082d4:	482f      	ldr	r0, [pc, #188]	; (8008394 <MX_GPIO_Init+0x150>)
 80082d6:	f001 f8a4 	bl	8009422 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80082da:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80082de:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082e0:	2300      	movs	r3, #0
 80082e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082e8:	f107 0310 	add.w	r3, r7, #16
 80082ec:	4619      	mov	r1, r3
 80082ee:	4828      	ldr	r0, [pc, #160]	; (8008390 <MX_GPIO_Init+0x14c>)
 80082f0:	f000 fe20 	bl	8008f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80082f4:	f248 130f 	movw	r3, #33039	; 0x810f
 80082f8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082fa:	2300      	movs	r3, #0
 80082fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008302:	f107 0310 	add.w	r3, r7, #16
 8008306:	4619      	mov	r1, r3
 8008308:	4820      	ldr	r0, [pc, #128]	; (800838c <MX_GPIO_Init+0x148>)
 800830a:	f000 fe13 	bl	8008f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800830e:	23f0      	movs	r3, #240	; 0xf0
 8008310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008312:	2301      	movs	r3, #1
 8008314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008316:	2300      	movs	r3, #0
 8008318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800831a:	2302      	movs	r3, #2
 800831c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800831e:	f107 0310 	add.w	r3, r7, #16
 8008322:	4619      	mov	r1, r3
 8008324:	4819      	ldr	r0, [pc, #100]	; (800838c <MX_GPIO_Init+0x148>)
 8008326:	f000 fe05 	bl	8008f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800832a:	f241 0330 	movw	r3, #4144	; 0x1030
 800832e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008330:	2301      	movs	r3, #1
 8008332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008334:	2300      	movs	r3, #0
 8008336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008338:	2302      	movs	r3, #2
 800833a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800833c:	f107 0310 	add.w	r3, r7, #16
 8008340:	4619      	mov	r1, r3
 8008342:	4813      	ldr	r0, [pc, #76]	; (8008390 <MX_GPIO_Init+0x14c>)
 8008344:	f000 fdf6 	bl	8008f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008348:	f640 4307 	movw	r3, #3079	; 0xc07
 800834c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800834e:	2301      	movs	r3, #1
 8008350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008352:	2300      	movs	r3, #0
 8008354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008356:	2302      	movs	r3, #2
 8008358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800835a:	f107 0310 	add.w	r3, r7, #16
 800835e:	4619      	mov	r1, r3
 8008360:	480c      	ldr	r0, [pc, #48]	; (8008394 <MX_GPIO_Init+0x150>)
 8008362:	f000 fde7 	bl	8008f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008366:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800836a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800836c:	2300      	movs	r3, #0
 800836e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008370:	2300      	movs	r3, #0
 8008372:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008374:	f107 0310 	add.w	r3, r7, #16
 8008378:	4619      	mov	r1, r3
 800837a:	4806      	ldr	r0, [pc, #24]	; (8008394 <MX_GPIO_Init+0x150>)
 800837c:	f000 fdda 	bl	8008f34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008380:	bf00      	nop
 8008382:	3720      	adds	r7, #32
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	40021000 	.word	0x40021000
 800838c:	40010800 	.word	0x40010800
 8008390:	40011000 	.word	0x40011000
 8008394:	40010c00 	.word	0x40010c00

08008398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008398:	b480      	push	{r7}
 800839a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800839c:	bf00      	nop
 800839e:	46bd      	mov	sp, r7
 80083a0:	bc80      	pop	{r7}
 80083a2:	4770      	bx	lr

080083a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80083aa:	4b15      	ldr	r3, [pc, #84]	; (8008400 <HAL_MspInit+0x5c>)
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	4a14      	ldr	r2, [pc, #80]	; (8008400 <HAL_MspInit+0x5c>)
 80083b0:	f043 0301 	orr.w	r3, r3, #1
 80083b4:	6193      	str	r3, [r2, #24]
 80083b6:	4b12      	ldr	r3, [pc, #72]	; (8008400 <HAL_MspInit+0x5c>)
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	60bb      	str	r3, [r7, #8]
 80083c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80083c2:	4b0f      	ldr	r3, [pc, #60]	; (8008400 <HAL_MspInit+0x5c>)
 80083c4:	69db      	ldr	r3, [r3, #28]
 80083c6:	4a0e      	ldr	r2, [pc, #56]	; (8008400 <HAL_MspInit+0x5c>)
 80083c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083cc:	61d3      	str	r3, [r2, #28]
 80083ce:	4b0c      	ldr	r3, [pc, #48]	; (8008400 <HAL_MspInit+0x5c>)
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083d6:	607b      	str	r3, [r7, #4]
 80083d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80083da:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <HAL_MspInit+0x60>)
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	4a04      	ldr	r2, [pc, #16]	; (8008404 <HAL_MspInit+0x60>)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083f6:	bf00      	nop
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bc80      	pop	{r7}
 80083fe:	4770      	bx	lr
 8008400:	40021000 	.word	0x40021000
 8008404:	40010000 	.word	0x40010000

08008408 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008410:	f107 0310 	add.w	r3, r7, #16
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	605a      	str	r2, [r3, #4]
 800841a:	609a      	str	r2, [r3, #8]
 800841c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a1c      	ldr	r2, [pc, #112]	; (8008494 <HAL_CAN_MspInit+0x8c>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d131      	bne.n	800848c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008428:	4b1b      	ldr	r3, [pc, #108]	; (8008498 <HAL_CAN_MspInit+0x90>)
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	4a1a      	ldr	r2, [pc, #104]	; (8008498 <HAL_CAN_MspInit+0x90>)
 800842e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008432:	61d3      	str	r3, [r2, #28]
 8008434:	4b18      	ldr	r3, [pc, #96]	; (8008498 <HAL_CAN_MspInit+0x90>)
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008440:	4b15      	ldr	r3, [pc, #84]	; (8008498 <HAL_CAN_MspInit+0x90>)
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	4a14      	ldr	r2, [pc, #80]	; (8008498 <HAL_CAN_MspInit+0x90>)
 8008446:	f043 0304 	orr.w	r3, r3, #4
 800844a:	6193      	str	r3, [r2, #24]
 800844c:	4b12      	ldr	r3, [pc, #72]	; (8008498 <HAL_CAN_MspInit+0x90>)
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	f003 0304 	and.w	r3, r3, #4
 8008454:	60bb      	str	r3, [r7, #8]
 8008456:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008458:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800845c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800845e:	2300      	movs	r3, #0
 8008460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008462:	2300      	movs	r3, #0
 8008464:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008466:	f107 0310 	add.w	r3, r7, #16
 800846a:	4619      	mov	r1, r3
 800846c:	480b      	ldr	r0, [pc, #44]	; (800849c <HAL_CAN_MspInit+0x94>)
 800846e:	f000 fd61 	bl	8008f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008478:	2302      	movs	r3, #2
 800847a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800847c:	2303      	movs	r3, #3
 800847e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008480:	f107 0310 	add.w	r3, r7, #16
 8008484:	4619      	mov	r1, r3
 8008486:	4805      	ldr	r0, [pc, #20]	; (800849c <HAL_CAN_MspInit+0x94>)
 8008488:	f000 fd54 	bl	8008f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800848c:	bf00      	nop
 800848e:	3720      	adds	r7, #32
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	40006400 	.word	0x40006400
 8008498:	40021000 	.word	0x40021000
 800849c:	40010800 	.word	0x40010800

080084a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b088      	sub	sp, #32
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084a8:	f107 0310 	add.w	r3, r7, #16
 80084ac:	2200      	movs	r2, #0
 80084ae:	601a      	str	r2, [r3, #0]
 80084b0:	605a      	str	r2, [r3, #4]
 80084b2:	609a      	str	r2, [r3, #8]
 80084b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a15      	ldr	r2, [pc, #84]	; (8008510 <HAL_I2C_MspInit+0x70>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d123      	bne.n	8008508 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084c0:	4b14      	ldr	r3, [pc, #80]	; (8008514 <HAL_I2C_MspInit+0x74>)
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	4a13      	ldr	r2, [pc, #76]	; (8008514 <HAL_I2C_MspInit+0x74>)
 80084c6:	f043 0308 	orr.w	r3, r3, #8
 80084ca:	6193      	str	r3, [r2, #24]
 80084cc:	4b11      	ldr	r3, [pc, #68]	; (8008514 <HAL_I2C_MspInit+0x74>)
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	f003 0308 	and.w	r3, r3, #8
 80084d4:	60fb      	str	r3, [r7, #12]
 80084d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80084d8:	23c0      	movs	r3, #192	; 0xc0
 80084da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80084dc:	2312      	movs	r3, #18
 80084de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084e0:	2303      	movs	r3, #3
 80084e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084e4:	f107 0310 	add.w	r3, r7, #16
 80084e8:	4619      	mov	r1, r3
 80084ea:	480b      	ldr	r0, [pc, #44]	; (8008518 <HAL_I2C_MspInit+0x78>)
 80084ec:	f000 fd22 	bl	8008f34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80084f0:	4b08      	ldr	r3, [pc, #32]	; (8008514 <HAL_I2C_MspInit+0x74>)
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	4a07      	ldr	r2, [pc, #28]	; (8008514 <HAL_I2C_MspInit+0x74>)
 80084f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084fa:	61d3      	str	r3, [r2, #28]
 80084fc:	4b05      	ldr	r3, [pc, #20]	; (8008514 <HAL_I2C_MspInit+0x74>)
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008504:	60bb      	str	r3, [r7, #8]
 8008506:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008508:	bf00      	nop
 800850a:	3720      	adds	r7, #32
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	40005400 	.word	0x40005400
 8008514:	40021000 	.word	0x40021000
 8008518:	40010c00 	.word	0x40010c00

0800851c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a0a      	ldr	r2, [pc, #40]	; (8008554 <HAL_I2C_MspDeInit+0x38>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d10d      	bne.n	800854a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800852e:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <HAL_I2C_MspDeInit+0x3c>)
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	4a09      	ldr	r2, [pc, #36]	; (8008558 <HAL_I2C_MspDeInit+0x3c>)
 8008534:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008538:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800853a:	2140      	movs	r1, #64	; 0x40
 800853c:	4807      	ldr	r0, [pc, #28]	; (800855c <HAL_I2C_MspDeInit+0x40>)
 800853e:	f000 fe8d 	bl	800925c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008542:	2180      	movs	r1, #128	; 0x80
 8008544:	4805      	ldr	r0, [pc, #20]	; (800855c <HAL_I2C_MspDeInit+0x40>)
 8008546:	f000 fe89 	bl	800925c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800854a:	bf00      	nop
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	40005400 	.word	0x40005400
 8008558:	40021000 	.word	0x40021000
 800855c:	40010c00 	.word	0x40010c00

08008560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a0d      	ldr	r2, [pc, #52]	; (80085a4 <HAL_TIM_Base_MspInit+0x44>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d113      	bne.n	800859a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008572:	4b0d      	ldr	r3, [pc, #52]	; (80085a8 <HAL_TIM_Base_MspInit+0x48>)
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	4a0c      	ldr	r2, [pc, #48]	; (80085a8 <HAL_TIM_Base_MspInit+0x48>)
 8008578:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800857c:	6193      	str	r3, [r2, #24]
 800857e:	4b0a      	ldr	r3, [pc, #40]	; (80085a8 <HAL_TIM_Base_MspInit+0x48>)
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800858a:	2200      	movs	r2, #0
 800858c:	2100      	movs	r1, #0
 800858e:	2019      	movs	r0, #25
 8008590:	f000 fb57 	bl	8008c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008594:	2019      	movs	r0, #25
 8008596:	f000 fb70 	bl	8008c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800859a:	bf00      	nop
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	40012c00 	.word	0x40012c00
 80085a8:	40021000 	.word	0x40021000

080085ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085b4:	f107 0310 	add.w	r3, r7, #16
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	605a      	str	r2, [r3, #4]
 80085be:	609a      	str	r2, [r3, #8]
 80085c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a20      	ldr	r2, [pc, #128]	; (8008648 <HAL_UART_MspInit+0x9c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d139      	bne.n	8008640 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80085cc:	4b1f      	ldr	r3, [pc, #124]	; (800864c <HAL_UART_MspInit+0xa0>)
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	4a1e      	ldr	r2, [pc, #120]	; (800864c <HAL_UART_MspInit+0xa0>)
 80085d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085d6:	6193      	str	r3, [r2, #24]
 80085d8:	4b1c      	ldr	r3, [pc, #112]	; (800864c <HAL_UART_MspInit+0xa0>)
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085e4:	4b19      	ldr	r3, [pc, #100]	; (800864c <HAL_UART_MspInit+0xa0>)
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	4a18      	ldr	r2, [pc, #96]	; (800864c <HAL_UART_MspInit+0xa0>)
 80085ea:	f043 0304 	orr.w	r3, r3, #4
 80085ee:	6193      	str	r3, [r2, #24]
 80085f0:	4b16      	ldr	r3, [pc, #88]	; (800864c <HAL_UART_MspInit+0xa0>)
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	60bb      	str	r3, [r7, #8]
 80085fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80085fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008600:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008602:	2302      	movs	r3, #2
 8008604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008606:	2303      	movs	r3, #3
 8008608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800860a:	f107 0310 	add.w	r3, r7, #16
 800860e:	4619      	mov	r1, r3
 8008610:	480f      	ldr	r0, [pc, #60]	; (8008650 <HAL_UART_MspInit+0xa4>)
 8008612:	f000 fc8f 	bl	8008f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800861a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800861c:	2300      	movs	r3, #0
 800861e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008620:	2300      	movs	r3, #0
 8008622:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008624:	f107 0310 	add.w	r3, r7, #16
 8008628:	4619      	mov	r1, r3
 800862a:	4809      	ldr	r0, [pc, #36]	; (8008650 <HAL_UART_MspInit+0xa4>)
 800862c:	f000 fc82 	bl	8008f34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008630:	2200      	movs	r2, #0
 8008632:	2100      	movs	r1, #0
 8008634:	2025      	movs	r0, #37	; 0x25
 8008636:	f000 fb04 	bl	8008c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800863a:	2025      	movs	r0, #37	; 0x25
 800863c:	f000 fb1d 	bl	8008c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008640:	bf00      	nop
 8008642:	3720      	adds	r7, #32
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	40013800 	.word	0x40013800
 800864c:	40021000 	.word	0x40021000
 8008650:	40010800 	.word	0x40010800

08008654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008654:	b480      	push	{r7}
 8008656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008658:	e7fe      	b.n	8008658 <NMI_Handler+0x4>

0800865a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800865a:	b480      	push	{r7}
 800865c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800865e:	e7fe      	b.n	800865e <HardFault_Handler+0x4>

08008660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008660:	b480      	push	{r7}
 8008662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008664:	e7fe      	b.n	8008664 <MemManage_Handler+0x4>

08008666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008666:	b480      	push	{r7}
 8008668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800866a:	e7fe      	b.n	800866a <BusFault_Handler+0x4>

0800866c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008670:	e7fe      	b.n	8008670 <UsageFault_Handler+0x4>

08008672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008672:	b480      	push	{r7}
 8008674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008676:	bf00      	nop
 8008678:	46bd      	mov	sp, r7
 800867a:	bc80      	pop	{r7}
 800867c:	4770      	bx	lr

0800867e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800867e:	b480      	push	{r7}
 8008680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008682:	bf00      	nop
 8008684:	46bd      	mov	sp, r7
 8008686:	bc80      	pop	{r7}
 8008688:	4770      	bx	lr

0800868a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800868a:	b480      	push	{r7}
 800868c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800868e:	bf00      	nop
 8008690:	46bd      	mov	sp, r7
 8008692:	bc80      	pop	{r7}
 8008694:	4770      	bx	lr

08008696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800869a:	f000 f8bf 	bl	800881c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800869e:	bf00      	nop
 80086a0:	bd80      	pop	{r7, pc}
	...

080086a4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80086a8:	4802      	ldr	r0, [pc, #8]	; (80086b4 <TIM1_UP_IRQHandler+0x10>)
 80086aa:	f002 fdcd 	bl	800b248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80086ae:	bf00      	nop
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20000400 	.word	0x20000400

080086b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80086bc:	4802      	ldr	r0, [pc, #8]	; (80086c8 <USART1_IRQHandler+0x10>)
 80086be:	f003 f9cb 	bl	800ba58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80086c2:	bf00      	nop
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20000448 	.word	0x20000448

080086cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80086d4:	4a14      	ldr	r2, [pc, #80]	; (8008728 <_sbrk+0x5c>)
 80086d6:	4b15      	ldr	r3, [pc, #84]	; (800872c <_sbrk+0x60>)
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80086e0:	4b13      	ldr	r3, [pc, #76]	; (8008730 <_sbrk+0x64>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d102      	bne.n	80086ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80086e8:	4b11      	ldr	r3, [pc, #68]	; (8008730 <_sbrk+0x64>)
 80086ea:	4a12      	ldr	r2, [pc, #72]	; (8008734 <_sbrk+0x68>)
 80086ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80086ee:	4b10      	ldr	r3, [pc, #64]	; (8008730 <_sbrk+0x64>)
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4413      	add	r3, r2
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d207      	bcs.n	800870c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80086fc:	f003 ffe6 	bl	800c6cc <__errno>
 8008700:	4603      	mov	r3, r0
 8008702:	220c      	movs	r2, #12
 8008704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800870a:	e009      	b.n	8008720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800870c:	4b08      	ldr	r3, [pc, #32]	; (8008730 <_sbrk+0x64>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008712:	4b07      	ldr	r3, [pc, #28]	; (8008730 <_sbrk+0x64>)
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4413      	add	r3, r2
 800871a:	4a05      	ldr	r2, [pc, #20]	; (8008730 <_sbrk+0x64>)
 800871c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800871e:	68fb      	ldr	r3, [r7, #12]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	2000c000 	.word	0x2000c000
 800872c:	00000400 	.word	0x00000400
 8008730:	20000490 	.word	0x20000490
 8008734:	200005e0 	.word	0x200005e0

08008738 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008738:	b480      	push	{r7}
 800873a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800873c:	bf00      	nop
 800873e:	46bd      	mov	sp, r7
 8008740:	bc80      	pop	{r7}
 8008742:	4770      	bx	lr

08008744 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008744:	480c      	ldr	r0, [pc, #48]	; (8008778 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008746:	490d      	ldr	r1, [pc, #52]	; (800877c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008748:	4a0d      	ldr	r2, [pc, #52]	; (8008780 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800874a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800874c:	e002      	b.n	8008754 <LoopCopyDataInit>

0800874e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800874e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008752:	3304      	adds	r3, #4

08008754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008758:	d3f9      	bcc.n	800874e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800875a:	4a0a      	ldr	r2, [pc, #40]	; (8008784 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800875c:	4c0a      	ldr	r4, [pc, #40]	; (8008788 <LoopFillZerobss+0x22>)
  movs r3, #0
 800875e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008760:	e001      	b.n	8008766 <LoopFillZerobss>

08008762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008764:	3204      	adds	r2, #4

08008766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008768:	d3fb      	bcc.n	8008762 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800876a:	f7ff ffe5 	bl	8008738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800876e:	f003 ffb3 	bl	800c6d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008772:	f7ff fb97 	bl	8007ea4 <main>
  bx lr
 8008776:	4770      	bx	lr
  ldr r0, =_sdata
 8008778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800877c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8008780:	0800ded4 	.word	0x0800ded4
  ldr r2, =_sbss
 8008784:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8008788:	200005e0 	.word	0x200005e0

0800878c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800878c:	e7fe      	b.n	800878c <ADC1_2_IRQHandler>
	...

08008790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008794:	4b08      	ldr	r3, [pc, #32]	; (80087b8 <HAL_Init+0x28>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a07      	ldr	r2, [pc, #28]	; (80087b8 <HAL_Init+0x28>)
 800879a:	f043 0310 	orr.w	r3, r3, #16
 800879e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087a0:	2003      	movs	r0, #3
 80087a2:	f000 fa43 	bl	8008c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80087a6:	200f      	movs	r0, #15
 80087a8:	f000 f808 	bl	80087bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80087ac:	f7ff fdfa 	bl	80083a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	40022000 	.word	0x40022000

080087bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80087c4:	4b12      	ldr	r3, [pc, #72]	; (8008810 <HAL_InitTick+0x54>)
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	4b12      	ldr	r3, [pc, #72]	; (8008814 <HAL_InitTick+0x58>)
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	4619      	mov	r1, r3
 80087ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80087d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fa5b 	bl	8008c96 <HAL_SYSTICK_Config>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e00e      	b.n	8008808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b0f      	cmp	r3, #15
 80087ee:	d80a      	bhi.n	8008806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80087f0:	2200      	movs	r2, #0
 80087f2:	6879      	ldr	r1, [r7, #4]
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087f8:	f000 fa23 	bl	8008c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80087fc:	4a06      	ldr	r2, [pc, #24]	; (8008818 <HAL_InitTick+0x5c>)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	e000      	b.n	8008808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
}
 8008808:	4618      	mov	r0, r3
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	200000b0 	.word	0x200000b0
 8008814:	200000b8 	.word	0x200000b8
 8008818:	200000b4 	.word	0x200000b4

0800881c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008820:	4b05      	ldr	r3, [pc, #20]	; (8008838 <HAL_IncTick+0x1c>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	461a      	mov	r2, r3
 8008826:	4b05      	ldr	r3, [pc, #20]	; (800883c <HAL_IncTick+0x20>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4413      	add	r3, r2
 800882c:	4a03      	ldr	r2, [pc, #12]	; (800883c <HAL_IncTick+0x20>)
 800882e:	6013      	str	r3, [r2, #0]
}
 8008830:	bf00      	nop
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr
 8008838:	200000b8 	.word	0x200000b8
 800883c:	20000494 	.word	0x20000494

08008840 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008840:	b480      	push	{r7}
 8008842:	af00      	add	r7, sp, #0
  return uwTick;
 8008844:	4b02      	ldr	r3, [pc, #8]	; (8008850 <HAL_GetTick+0x10>)
 8008846:	681b      	ldr	r3, [r3, #0]
}
 8008848:	4618      	mov	r0, r3
 800884a:	46bd      	mov	sp, r7
 800884c:	bc80      	pop	{r7}
 800884e:	4770      	bx	lr
 8008850:	20000494 	.word	0x20000494

08008854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800885c:	f7ff fff0 	bl	8008840 <HAL_GetTick>
 8008860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800886c:	d005      	beq.n	800887a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800886e:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <HAL_Delay+0x44>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	461a      	mov	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	4413      	add	r3, r2
 8008878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800887a:	bf00      	nop
 800887c:	f7ff ffe0 	bl	8008840 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	429a      	cmp	r2, r3
 800888a:	d8f7      	bhi.n	800887c <HAL_Delay+0x28>
  {
  }
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	200000b8 	.word	0x200000b8

0800889c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e0ed      	b.n	8008a8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d102      	bne.n	80088c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7ff fda4 	bl	8008408 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f042 0201 	orr.w	r2, r2, #1
 80088ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088d0:	f7ff ffb6 	bl	8008840 <HAL_GetTick>
 80088d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088d6:	e012      	b.n	80088fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80088d8:	f7ff ffb2 	bl	8008840 <HAL_GetTick>
 80088dc:	4602      	mov	r2, r0
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	2b0a      	cmp	r3, #10
 80088e4:	d90b      	bls.n	80088fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2205      	movs	r2, #5
 80088f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e0c5      	b.n	8008a8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0e5      	beq.n	80088d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f022 0202 	bic.w	r2, r2, #2
 800891a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800891c:	f7ff ff90 	bl	8008840 <HAL_GetTick>
 8008920:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008922:	e012      	b.n	800894a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008924:	f7ff ff8c 	bl	8008840 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	2b0a      	cmp	r3, #10
 8008930:	d90b      	bls.n	800894a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2205      	movs	r2, #5
 8008942:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e09f      	b.n	8008a8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e5      	bne.n	8008924 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	7e1b      	ldrb	r3, [r3, #24]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d108      	bne.n	8008972 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800896e:	601a      	str	r2, [r3, #0]
 8008970:	e007      	b.n	8008982 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008980:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	7e5b      	ldrb	r3, [r3, #25]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d108      	bne.n	800899c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	e007      	b.n	80089ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	7e9b      	ldrb	r3, [r3, #26]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d108      	bne.n	80089c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0220 	orr.w	r2, r2, #32
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	e007      	b.n	80089d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f022 0220 	bic.w	r2, r2, #32
 80089d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	7edb      	ldrb	r3, [r3, #27]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d108      	bne.n	80089f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 0210 	bic.w	r2, r2, #16
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	e007      	b.n	8008a00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f042 0210 	orr.w	r2, r2, #16
 80089fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	7f1b      	ldrb	r3, [r3, #28]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d108      	bne.n	8008a1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0208 	orr.w	r2, r2, #8
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	e007      	b.n	8008a2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f022 0208 	bic.w	r2, r2, #8
 8008a28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	7f5b      	ldrb	r3, [r3, #29]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d108      	bne.n	8008a44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f042 0204 	orr.w	r2, r2, #4
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	e007      	b.n	8008a54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f022 0204 	bic.w	r2, r2, #4
 8008a52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	689a      	ldr	r2, [r3, #8]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	431a      	orrs	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	ea42 0103 	orr.w	r1, r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	1e5a      	subs	r2, r3, #1
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
	...

08008a94 <__NVIC_SetPriorityGrouping>:
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008aa4:	4b0c      	ldr	r3, [pc, #48]	; (8008ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ac6:	4a04      	ldr	r2, [pc, #16]	; (8008ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	60d3      	str	r3, [r2, #12]
}
 8008acc:	bf00      	nop
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bc80      	pop	{r7}
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	e000ed00 	.word	0xe000ed00

08008adc <__NVIC_GetPriorityGrouping>:
{
 8008adc:	b480      	push	{r7}
 8008ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ae0:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <__NVIC_GetPriorityGrouping+0x18>)
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	0a1b      	lsrs	r3, r3, #8
 8008ae6:	f003 0307 	and.w	r3, r3, #7
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bc80      	pop	{r7}
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	e000ed00 	.word	0xe000ed00

08008af8 <__NVIC_EnableIRQ>:
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	db0b      	blt.n	8008b22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	f003 021f 	and.w	r2, r3, #31
 8008b10:	4906      	ldr	r1, [pc, #24]	; (8008b2c <__NVIC_EnableIRQ+0x34>)
 8008b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b16:	095b      	lsrs	r3, r3, #5
 8008b18:	2001      	movs	r0, #1
 8008b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8008b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008b22:	bf00      	nop
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bc80      	pop	{r7}
 8008b2a:	4770      	bx	lr
 8008b2c:	e000e100 	.word	0xe000e100

08008b30 <__NVIC_SetPriority>:
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	6039      	str	r1, [r7, #0]
 8008b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	db0a      	blt.n	8008b5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	490c      	ldr	r1, [pc, #48]	; (8008b7c <__NVIC_SetPriority+0x4c>)
 8008b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b4e:	0112      	lsls	r2, r2, #4
 8008b50:	b2d2      	uxtb	r2, r2
 8008b52:	440b      	add	r3, r1
 8008b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b58:	e00a      	b.n	8008b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	4908      	ldr	r1, [pc, #32]	; (8008b80 <__NVIC_SetPriority+0x50>)
 8008b60:	79fb      	ldrb	r3, [r7, #7]
 8008b62:	f003 030f 	and.w	r3, r3, #15
 8008b66:	3b04      	subs	r3, #4
 8008b68:	0112      	lsls	r2, r2, #4
 8008b6a:	b2d2      	uxtb	r2, r2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	761a      	strb	r2, [r3, #24]
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bc80      	pop	{r7}
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	e000e100 	.word	0xe000e100
 8008b80:	e000ed00 	.word	0xe000ed00

08008b84 <NVIC_EncodePriority>:
{
 8008b84:	b480      	push	{r7}
 8008b86:	b089      	sub	sp, #36	; 0x24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f003 0307 	and.w	r3, r3, #7
 8008b96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	f1c3 0307 	rsb	r3, r3, #7
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	bf28      	it	cs
 8008ba2:	2304      	movcs	r3, #4
 8008ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	2b06      	cmp	r3, #6
 8008bac:	d902      	bls.n	8008bb4 <NVIC_EncodePriority+0x30>
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	3b03      	subs	r3, #3
 8008bb2:	e000      	b.n	8008bb6 <NVIC_EncodePriority+0x32>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc2:	43da      	mvns	r2, r3
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	401a      	ands	r2, r3
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008bcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd6:	43d9      	mvns	r1, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bdc:	4313      	orrs	r3, r2
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3724      	adds	r7, #36	; 0x24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bc80      	pop	{r7}
 8008be6:	4770      	bx	lr

08008be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008bf8:	d301      	bcc.n	8008bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e00f      	b.n	8008c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008bfe:	4a0a      	ldr	r2, [pc, #40]	; (8008c28 <SysTick_Config+0x40>)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3b01      	subs	r3, #1
 8008c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c06:	210f      	movs	r1, #15
 8008c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c0c:	f7ff ff90 	bl	8008b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c10:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <SysTick_Config+0x40>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c16:	4b04      	ldr	r3, [pc, #16]	; (8008c28 <SysTick_Config+0x40>)
 8008c18:	2207      	movs	r2, #7
 8008c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	e000e010 	.word	0xe000e010

08008c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff ff2d 	bl	8008a94 <__NVIC_SetPriorityGrouping>
}
 8008c3a:	bf00      	nop
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b086      	sub	sp, #24
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	4603      	mov	r3, r0
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	607a      	str	r2, [r7, #4]
 8008c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c54:	f7ff ff42 	bl	8008adc <__NVIC_GetPriorityGrouping>
 8008c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	68b9      	ldr	r1, [r7, #8]
 8008c5e:	6978      	ldr	r0, [r7, #20]
 8008c60:	f7ff ff90 	bl	8008b84 <NVIC_EncodePriority>
 8008c64:	4602      	mov	r2, r0
 8008c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff ff5f 	bl	8008b30 <__NVIC_SetPriority>
}
 8008c72:	bf00      	nop
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	4603      	mov	r3, r0
 8008c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff ff35 	bl	8008af8 <__NVIC_EnableIRQ>
}
 8008c8e:	bf00      	nop
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b082      	sub	sp, #8
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7ff ffa2 	bl	8008be8 <SysTick_Config>
 8008ca4:	4603      	mov	r3, r0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b085      	sub	sp, #20
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d008      	beq.n	8008cd8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2204      	movs	r2, #4
 8008cca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e020      	b.n	8008d1a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f022 020e 	bic.w	r2, r2, #14
 8008ce6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f022 0201 	bic.w	r2, r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d00:	2101      	movs	r1, #1
 8008d02:	fa01 f202 	lsl.w	r2, r1, r2
 8008d06:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr

08008d24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d005      	beq.n	8008d48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2204      	movs	r2, #4
 8008d40:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	73fb      	strb	r3, [r7, #15]
 8008d46:	e0d6      	b.n	8008ef6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 020e 	bic.w	r2, r2, #14
 8008d56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f022 0201 	bic.w	r2, r2, #1
 8008d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	4b64      	ldr	r3, [pc, #400]	; (8008f00 <HAL_DMA_Abort_IT+0x1dc>)
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d958      	bls.n	8008e26 <HAL_DMA_Abort_IT+0x102>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a62      	ldr	r2, [pc, #392]	; (8008f04 <HAL_DMA_Abort_IT+0x1e0>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d04f      	beq.n	8008e1e <HAL_DMA_Abort_IT+0xfa>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a61      	ldr	r2, [pc, #388]	; (8008f08 <HAL_DMA_Abort_IT+0x1e4>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d048      	beq.n	8008e1a <HAL_DMA_Abort_IT+0xf6>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a5f      	ldr	r2, [pc, #380]	; (8008f0c <HAL_DMA_Abort_IT+0x1e8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d040      	beq.n	8008e14 <HAL_DMA_Abort_IT+0xf0>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a5e      	ldr	r2, [pc, #376]	; (8008f10 <HAL_DMA_Abort_IT+0x1ec>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d038      	beq.n	8008e0e <HAL_DMA_Abort_IT+0xea>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a5c      	ldr	r2, [pc, #368]	; (8008f14 <HAL_DMA_Abort_IT+0x1f0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d030      	beq.n	8008e08 <HAL_DMA_Abort_IT+0xe4>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a5b      	ldr	r2, [pc, #364]	; (8008f18 <HAL_DMA_Abort_IT+0x1f4>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d028      	beq.n	8008e02 <HAL_DMA_Abort_IT+0xde>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a52      	ldr	r2, [pc, #328]	; (8008f00 <HAL_DMA_Abort_IT+0x1dc>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d020      	beq.n	8008dfc <HAL_DMA_Abort_IT+0xd8>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a57      	ldr	r2, [pc, #348]	; (8008f1c <HAL_DMA_Abort_IT+0x1f8>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d019      	beq.n	8008df8 <HAL_DMA_Abort_IT+0xd4>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a55      	ldr	r2, [pc, #340]	; (8008f20 <HAL_DMA_Abort_IT+0x1fc>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d012      	beq.n	8008df4 <HAL_DMA_Abort_IT+0xd0>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a54      	ldr	r2, [pc, #336]	; (8008f24 <HAL_DMA_Abort_IT+0x200>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d00a      	beq.n	8008dee <HAL_DMA_Abort_IT+0xca>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a52      	ldr	r2, [pc, #328]	; (8008f28 <HAL_DMA_Abort_IT+0x204>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d102      	bne.n	8008de8 <HAL_DMA_Abort_IT+0xc4>
 8008de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008de6:	e01b      	b.n	8008e20 <HAL_DMA_Abort_IT+0xfc>
 8008de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dec:	e018      	b.n	8008e20 <HAL_DMA_Abort_IT+0xfc>
 8008dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008df2:	e015      	b.n	8008e20 <HAL_DMA_Abort_IT+0xfc>
 8008df4:	2310      	movs	r3, #16
 8008df6:	e013      	b.n	8008e20 <HAL_DMA_Abort_IT+0xfc>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e011      	b.n	8008e20 <HAL_DMA_Abort_IT+0xfc>
 8008dfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e00:	e00e      	b.n	8008e20 <HAL_DMA_Abort_IT+0xfc>
 8008e02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e06:	e00b      	b.n	8008e20 <HAL_DMA_Abort_IT+0xfc>
 8008e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e0c:	e008      	b.n	8008e20 <HAL_DMA_Abort_IT+0xfc>
 8008e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e12:	e005      	b.n	8008e20 <HAL_DMA_Abort_IT+0xfc>
 8008e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e18:	e002      	b.n	8008e20 <HAL_DMA_Abort_IT+0xfc>
 8008e1a:	2310      	movs	r3, #16
 8008e1c:	e000      	b.n	8008e20 <HAL_DMA_Abort_IT+0xfc>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	4a42      	ldr	r2, [pc, #264]	; (8008f2c <HAL_DMA_Abort_IT+0x208>)
 8008e22:	6053      	str	r3, [r2, #4]
 8008e24:	e057      	b.n	8008ed6 <HAL_DMA_Abort_IT+0x1b2>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a36      	ldr	r2, [pc, #216]	; (8008f04 <HAL_DMA_Abort_IT+0x1e0>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d04f      	beq.n	8008ed0 <HAL_DMA_Abort_IT+0x1ac>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a34      	ldr	r2, [pc, #208]	; (8008f08 <HAL_DMA_Abort_IT+0x1e4>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d048      	beq.n	8008ecc <HAL_DMA_Abort_IT+0x1a8>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a33      	ldr	r2, [pc, #204]	; (8008f0c <HAL_DMA_Abort_IT+0x1e8>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d040      	beq.n	8008ec6 <HAL_DMA_Abort_IT+0x1a2>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a31      	ldr	r2, [pc, #196]	; (8008f10 <HAL_DMA_Abort_IT+0x1ec>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d038      	beq.n	8008ec0 <HAL_DMA_Abort_IT+0x19c>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a30      	ldr	r2, [pc, #192]	; (8008f14 <HAL_DMA_Abort_IT+0x1f0>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d030      	beq.n	8008eba <HAL_DMA_Abort_IT+0x196>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a2e      	ldr	r2, [pc, #184]	; (8008f18 <HAL_DMA_Abort_IT+0x1f4>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d028      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x190>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a26      	ldr	r2, [pc, #152]	; (8008f00 <HAL_DMA_Abort_IT+0x1dc>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d020      	beq.n	8008eae <HAL_DMA_Abort_IT+0x18a>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a2a      	ldr	r2, [pc, #168]	; (8008f1c <HAL_DMA_Abort_IT+0x1f8>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d019      	beq.n	8008eaa <HAL_DMA_Abort_IT+0x186>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a29      	ldr	r2, [pc, #164]	; (8008f20 <HAL_DMA_Abort_IT+0x1fc>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d012      	beq.n	8008ea6 <HAL_DMA_Abort_IT+0x182>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a27      	ldr	r2, [pc, #156]	; (8008f24 <HAL_DMA_Abort_IT+0x200>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d00a      	beq.n	8008ea0 <HAL_DMA_Abort_IT+0x17c>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a26      	ldr	r2, [pc, #152]	; (8008f28 <HAL_DMA_Abort_IT+0x204>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d102      	bne.n	8008e9a <HAL_DMA_Abort_IT+0x176>
 8008e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e98:	e01b      	b.n	8008ed2 <HAL_DMA_Abort_IT+0x1ae>
 8008e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e9e:	e018      	b.n	8008ed2 <HAL_DMA_Abort_IT+0x1ae>
 8008ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ea4:	e015      	b.n	8008ed2 <HAL_DMA_Abort_IT+0x1ae>
 8008ea6:	2310      	movs	r3, #16
 8008ea8:	e013      	b.n	8008ed2 <HAL_DMA_Abort_IT+0x1ae>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e011      	b.n	8008ed2 <HAL_DMA_Abort_IT+0x1ae>
 8008eae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008eb2:	e00e      	b.n	8008ed2 <HAL_DMA_Abort_IT+0x1ae>
 8008eb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008eb8:	e00b      	b.n	8008ed2 <HAL_DMA_Abort_IT+0x1ae>
 8008eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ebe:	e008      	b.n	8008ed2 <HAL_DMA_Abort_IT+0x1ae>
 8008ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ec4:	e005      	b.n	8008ed2 <HAL_DMA_Abort_IT+0x1ae>
 8008ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eca:	e002      	b.n	8008ed2 <HAL_DMA_Abort_IT+0x1ae>
 8008ecc:	2310      	movs	r3, #16
 8008ece:	e000      	b.n	8008ed2 <HAL_DMA_Abort_IT+0x1ae>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	4a17      	ldr	r2, [pc, #92]	; (8008f30 <HAL_DMA_Abort_IT+0x20c>)
 8008ed4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	4798      	blx	r3
    } 
  }
  return status;
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	40020080 	.word	0x40020080
 8008f04:	40020008 	.word	0x40020008
 8008f08:	4002001c 	.word	0x4002001c
 8008f0c:	40020030 	.word	0x40020030
 8008f10:	40020044 	.word	0x40020044
 8008f14:	40020058 	.word	0x40020058
 8008f18:	4002006c 	.word	0x4002006c
 8008f1c:	40020408 	.word	0x40020408
 8008f20:	4002041c 	.word	0x4002041c
 8008f24:	40020430 	.word	0x40020430
 8008f28:	40020444 	.word	0x40020444
 8008f2c:	40020400 	.word	0x40020400
 8008f30:	40020000 	.word	0x40020000

08008f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b08b      	sub	sp, #44	; 0x2c
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008f42:	2300      	movs	r3, #0
 8008f44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f46:	e179      	b.n	800923c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008f48:	2201      	movs	r2, #1
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	69fa      	ldr	r2, [r7, #28]
 8008f58:	4013      	ands	r3, r2
 8008f5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008f5c:	69ba      	ldr	r2, [r7, #24]
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	f040 8168 	bne.w	8009236 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	4a96      	ldr	r2, [pc, #600]	; (80091c4 <HAL_GPIO_Init+0x290>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d05e      	beq.n	800902e <HAL_GPIO_Init+0xfa>
 8008f70:	4a94      	ldr	r2, [pc, #592]	; (80091c4 <HAL_GPIO_Init+0x290>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d875      	bhi.n	8009062 <HAL_GPIO_Init+0x12e>
 8008f76:	4a94      	ldr	r2, [pc, #592]	; (80091c8 <HAL_GPIO_Init+0x294>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d058      	beq.n	800902e <HAL_GPIO_Init+0xfa>
 8008f7c:	4a92      	ldr	r2, [pc, #584]	; (80091c8 <HAL_GPIO_Init+0x294>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d86f      	bhi.n	8009062 <HAL_GPIO_Init+0x12e>
 8008f82:	4a92      	ldr	r2, [pc, #584]	; (80091cc <HAL_GPIO_Init+0x298>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d052      	beq.n	800902e <HAL_GPIO_Init+0xfa>
 8008f88:	4a90      	ldr	r2, [pc, #576]	; (80091cc <HAL_GPIO_Init+0x298>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d869      	bhi.n	8009062 <HAL_GPIO_Init+0x12e>
 8008f8e:	4a90      	ldr	r2, [pc, #576]	; (80091d0 <HAL_GPIO_Init+0x29c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d04c      	beq.n	800902e <HAL_GPIO_Init+0xfa>
 8008f94:	4a8e      	ldr	r2, [pc, #568]	; (80091d0 <HAL_GPIO_Init+0x29c>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d863      	bhi.n	8009062 <HAL_GPIO_Init+0x12e>
 8008f9a:	4a8e      	ldr	r2, [pc, #568]	; (80091d4 <HAL_GPIO_Init+0x2a0>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d046      	beq.n	800902e <HAL_GPIO_Init+0xfa>
 8008fa0:	4a8c      	ldr	r2, [pc, #560]	; (80091d4 <HAL_GPIO_Init+0x2a0>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d85d      	bhi.n	8009062 <HAL_GPIO_Init+0x12e>
 8008fa6:	2b12      	cmp	r3, #18
 8008fa8:	d82a      	bhi.n	8009000 <HAL_GPIO_Init+0xcc>
 8008faa:	2b12      	cmp	r3, #18
 8008fac:	d859      	bhi.n	8009062 <HAL_GPIO_Init+0x12e>
 8008fae:	a201      	add	r2, pc, #4	; (adr r2, 8008fb4 <HAL_GPIO_Init+0x80>)
 8008fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb4:	0800902f 	.word	0x0800902f
 8008fb8:	08009009 	.word	0x08009009
 8008fbc:	0800901b 	.word	0x0800901b
 8008fc0:	0800905d 	.word	0x0800905d
 8008fc4:	08009063 	.word	0x08009063
 8008fc8:	08009063 	.word	0x08009063
 8008fcc:	08009063 	.word	0x08009063
 8008fd0:	08009063 	.word	0x08009063
 8008fd4:	08009063 	.word	0x08009063
 8008fd8:	08009063 	.word	0x08009063
 8008fdc:	08009063 	.word	0x08009063
 8008fe0:	08009063 	.word	0x08009063
 8008fe4:	08009063 	.word	0x08009063
 8008fe8:	08009063 	.word	0x08009063
 8008fec:	08009063 	.word	0x08009063
 8008ff0:	08009063 	.word	0x08009063
 8008ff4:	08009063 	.word	0x08009063
 8008ff8:	08009011 	.word	0x08009011
 8008ffc:	08009025 	.word	0x08009025
 8009000:	4a75      	ldr	r2, [pc, #468]	; (80091d8 <HAL_GPIO_Init+0x2a4>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d013      	beq.n	800902e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009006:	e02c      	b.n	8009062 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	623b      	str	r3, [r7, #32]
          break;
 800900e:	e029      	b.n	8009064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	3304      	adds	r3, #4
 8009016:	623b      	str	r3, [r7, #32]
          break;
 8009018:	e024      	b.n	8009064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	3308      	adds	r3, #8
 8009020:	623b      	str	r3, [r7, #32]
          break;
 8009022:	e01f      	b.n	8009064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	330c      	adds	r3, #12
 800902a:	623b      	str	r3, [r7, #32]
          break;
 800902c:	e01a      	b.n	8009064 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d102      	bne.n	800903c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009036:	2304      	movs	r3, #4
 8009038:	623b      	str	r3, [r7, #32]
          break;
 800903a:	e013      	b.n	8009064 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d105      	bne.n	8009050 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009044:	2308      	movs	r3, #8
 8009046:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	69fa      	ldr	r2, [r7, #28]
 800904c:	611a      	str	r2, [r3, #16]
          break;
 800904e:	e009      	b.n	8009064 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009050:	2308      	movs	r3, #8
 8009052:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69fa      	ldr	r2, [r7, #28]
 8009058:	615a      	str	r2, [r3, #20]
          break;
 800905a:	e003      	b.n	8009064 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800905c:	2300      	movs	r3, #0
 800905e:	623b      	str	r3, [r7, #32]
          break;
 8009060:	e000      	b.n	8009064 <HAL_GPIO_Init+0x130>
          break;
 8009062:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	2bff      	cmp	r3, #255	; 0xff
 8009068:	d801      	bhi.n	800906e <HAL_GPIO_Init+0x13a>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	e001      	b.n	8009072 <HAL_GPIO_Init+0x13e>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3304      	adds	r3, #4
 8009072:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	2bff      	cmp	r3, #255	; 0xff
 8009078:	d802      	bhi.n	8009080 <HAL_GPIO_Init+0x14c>
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	e002      	b.n	8009086 <HAL_GPIO_Init+0x152>
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	3b08      	subs	r3, #8
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	210f      	movs	r1, #15
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	fa01 f303 	lsl.w	r3, r1, r3
 8009094:	43db      	mvns	r3, r3
 8009096:	401a      	ands	r2, r3
 8009098:	6a39      	ldr	r1, [r7, #32]
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	fa01 f303 	lsl.w	r3, r1, r3
 80090a0:	431a      	orrs	r2, r3
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 80c1 	beq.w	8009236 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80090b4:	4b49      	ldr	r3, [pc, #292]	; (80091dc <HAL_GPIO_Init+0x2a8>)
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	4a48      	ldr	r2, [pc, #288]	; (80091dc <HAL_GPIO_Init+0x2a8>)
 80090ba:	f043 0301 	orr.w	r3, r3, #1
 80090be:	6193      	str	r3, [r2, #24]
 80090c0:	4b46      	ldr	r3, [pc, #280]	; (80091dc <HAL_GPIO_Init+0x2a8>)
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	60bb      	str	r3, [r7, #8]
 80090ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80090cc:	4a44      	ldr	r2, [pc, #272]	; (80091e0 <HAL_GPIO_Init+0x2ac>)
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	089b      	lsrs	r3, r3, #2
 80090d2:	3302      	adds	r3, #2
 80090d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	f003 0303 	and.w	r3, r3, #3
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	220f      	movs	r2, #15
 80090e4:	fa02 f303 	lsl.w	r3, r2, r3
 80090e8:	43db      	mvns	r3, r3
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	4013      	ands	r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a3c      	ldr	r2, [pc, #240]	; (80091e4 <HAL_GPIO_Init+0x2b0>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d01f      	beq.n	8009138 <HAL_GPIO_Init+0x204>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a3b      	ldr	r2, [pc, #236]	; (80091e8 <HAL_GPIO_Init+0x2b4>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d019      	beq.n	8009134 <HAL_GPIO_Init+0x200>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a3a      	ldr	r2, [pc, #232]	; (80091ec <HAL_GPIO_Init+0x2b8>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d013      	beq.n	8009130 <HAL_GPIO_Init+0x1fc>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a39      	ldr	r2, [pc, #228]	; (80091f0 <HAL_GPIO_Init+0x2bc>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d00d      	beq.n	800912c <HAL_GPIO_Init+0x1f8>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a38      	ldr	r2, [pc, #224]	; (80091f4 <HAL_GPIO_Init+0x2c0>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d007      	beq.n	8009128 <HAL_GPIO_Init+0x1f4>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a37      	ldr	r2, [pc, #220]	; (80091f8 <HAL_GPIO_Init+0x2c4>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d101      	bne.n	8009124 <HAL_GPIO_Init+0x1f0>
 8009120:	2305      	movs	r3, #5
 8009122:	e00a      	b.n	800913a <HAL_GPIO_Init+0x206>
 8009124:	2306      	movs	r3, #6
 8009126:	e008      	b.n	800913a <HAL_GPIO_Init+0x206>
 8009128:	2304      	movs	r3, #4
 800912a:	e006      	b.n	800913a <HAL_GPIO_Init+0x206>
 800912c:	2303      	movs	r3, #3
 800912e:	e004      	b.n	800913a <HAL_GPIO_Init+0x206>
 8009130:	2302      	movs	r3, #2
 8009132:	e002      	b.n	800913a <HAL_GPIO_Init+0x206>
 8009134:	2301      	movs	r3, #1
 8009136:	e000      	b.n	800913a <HAL_GPIO_Init+0x206>
 8009138:	2300      	movs	r3, #0
 800913a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800913c:	f002 0203 	and.w	r2, r2, #3
 8009140:	0092      	lsls	r2, r2, #2
 8009142:	4093      	lsls	r3, r2
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800914a:	4925      	ldr	r1, [pc, #148]	; (80091e0 <HAL_GPIO_Init+0x2ac>)
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	089b      	lsrs	r3, r3, #2
 8009150:	3302      	adds	r3, #2
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d006      	beq.n	8009172 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009164:	4b25      	ldr	r3, [pc, #148]	; (80091fc <HAL_GPIO_Init+0x2c8>)
 8009166:	689a      	ldr	r2, [r3, #8]
 8009168:	4924      	ldr	r1, [pc, #144]	; (80091fc <HAL_GPIO_Init+0x2c8>)
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	4313      	orrs	r3, r2
 800916e:	608b      	str	r3, [r1, #8]
 8009170:	e006      	b.n	8009180 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009172:	4b22      	ldr	r3, [pc, #136]	; (80091fc <HAL_GPIO_Init+0x2c8>)
 8009174:	689a      	ldr	r2, [r3, #8]
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	43db      	mvns	r3, r3
 800917a:	4920      	ldr	r1, [pc, #128]	; (80091fc <HAL_GPIO_Init+0x2c8>)
 800917c:	4013      	ands	r3, r2
 800917e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d006      	beq.n	800919a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800918c:	4b1b      	ldr	r3, [pc, #108]	; (80091fc <HAL_GPIO_Init+0x2c8>)
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	491a      	ldr	r1, [pc, #104]	; (80091fc <HAL_GPIO_Init+0x2c8>)
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	4313      	orrs	r3, r2
 8009196:	60cb      	str	r3, [r1, #12]
 8009198:	e006      	b.n	80091a8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800919a:	4b18      	ldr	r3, [pc, #96]	; (80091fc <HAL_GPIO_Init+0x2c8>)
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	43db      	mvns	r3, r3
 80091a2:	4916      	ldr	r1, [pc, #88]	; (80091fc <HAL_GPIO_Init+0x2c8>)
 80091a4:	4013      	ands	r3, r2
 80091a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d025      	beq.n	8009200 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80091b4:	4b11      	ldr	r3, [pc, #68]	; (80091fc <HAL_GPIO_Init+0x2c8>)
 80091b6:	685a      	ldr	r2, [r3, #4]
 80091b8:	4910      	ldr	r1, [pc, #64]	; (80091fc <HAL_GPIO_Init+0x2c8>)
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	4313      	orrs	r3, r2
 80091be:	604b      	str	r3, [r1, #4]
 80091c0:	e025      	b.n	800920e <HAL_GPIO_Init+0x2da>
 80091c2:	bf00      	nop
 80091c4:	10320000 	.word	0x10320000
 80091c8:	10310000 	.word	0x10310000
 80091cc:	10220000 	.word	0x10220000
 80091d0:	10210000 	.word	0x10210000
 80091d4:	10120000 	.word	0x10120000
 80091d8:	10110000 	.word	0x10110000
 80091dc:	40021000 	.word	0x40021000
 80091e0:	40010000 	.word	0x40010000
 80091e4:	40010800 	.word	0x40010800
 80091e8:	40010c00 	.word	0x40010c00
 80091ec:	40011000 	.word	0x40011000
 80091f0:	40011400 	.word	0x40011400
 80091f4:	40011800 	.word	0x40011800
 80091f8:	40011c00 	.word	0x40011c00
 80091fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009200:	4b15      	ldr	r3, [pc, #84]	; (8009258 <HAL_GPIO_Init+0x324>)
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	43db      	mvns	r3, r3
 8009208:	4913      	ldr	r1, [pc, #76]	; (8009258 <HAL_GPIO_Init+0x324>)
 800920a:	4013      	ands	r3, r2
 800920c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d006      	beq.n	8009228 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800921a:	4b0f      	ldr	r3, [pc, #60]	; (8009258 <HAL_GPIO_Init+0x324>)
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	490e      	ldr	r1, [pc, #56]	; (8009258 <HAL_GPIO_Init+0x324>)
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	4313      	orrs	r3, r2
 8009224:	600b      	str	r3, [r1, #0]
 8009226:	e006      	b.n	8009236 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009228:	4b0b      	ldr	r3, [pc, #44]	; (8009258 <HAL_GPIO_Init+0x324>)
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	43db      	mvns	r3, r3
 8009230:	4909      	ldr	r1, [pc, #36]	; (8009258 <HAL_GPIO_Init+0x324>)
 8009232:	4013      	ands	r3, r2
 8009234:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	3301      	adds	r3, #1
 800923a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	fa22 f303 	lsr.w	r3, r2, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	f47f ae7e 	bne.w	8008f48 <HAL_GPIO_Init+0x14>
  }
}
 800924c:	bf00      	nop
 800924e:	bf00      	nop
 8009250:	372c      	adds	r7, #44	; 0x2c
 8009252:	46bd      	mov	sp, r7
 8009254:	bc80      	pop	{r7}
 8009256:	4770      	bx	lr
 8009258:	40010400 	.word	0x40010400

0800925c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800925c:	b480      	push	{r7}
 800925e:	b089      	sub	sp, #36	; 0x24
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009266:	2300      	movs	r3, #0
 8009268:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800926a:	e0a6      	b.n	80093ba <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800926c:	2201      	movs	r2, #1
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	fa02 f303 	lsl.w	r3, r2, r3
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	4013      	ands	r3, r2
 8009278:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 8099 	beq.w	80093b4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009282:	4a54      	ldr	r2, [pc, #336]	; (80093d4 <HAL_GPIO_DeInit+0x178>)
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	089b      	lsrs	r3, r3, #2
 8009288:	3302      	adds	r3, #2
 800928a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800928e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f003 0303 	and.w	r3, r3, #3
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	220f      	movs	r2, #15
 800929a:	fa02 f303 	lsl.w	r3, r2, r3
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4013      	ands	r3, r2
 80092a2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a4c      	ldr	r2, [pc, #304]	; (80093d8 <HAL_GPIO_DeInit+0x17c>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d01f      	beq.n	80092ec <HAL_GPIO_DeInit+0x90>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a4b      	ldr	r2, [pc, #300]	; (80093dc <HAL_GPIO_DeInit+0x180>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d019      	beq.n	80092e8 <HAL_GPIO_DeInit+0x8c>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a4a      	ldr	r2, [pc, #296]	; (80093e0 <HAL_GPIO_DeInit+0x184>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d013      	beq.n	80092e4 <HAL_GPIO_DeInit+0x88>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a49      	ldr	r2, [pc, #292]	; (80093e4 <HAL_GPIO_DeInit+0x188>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d00d      	beq.n	80092e0 <HAL_GPIO_DeInit+0x84>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a48      	ldr	r2, [pc, #288]	; (80093e8 <HAL_GPIO_DeInit+0x18c>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d007      	beq.n	80092dc <HAL_GPIO_DeInit+0x80>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a47      	ldr	r2, [pc, #284]	; (80093ec <HAL_GPIO_DeInit+0x190>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d101      	bne.n	80092d8 <HAL_GPIO_DeInit+0x7c>
 80092d4:	2305      	movs	r3, #5
 80092d6:	e00a      	b.n	80092ee <HAL_GPIO_DeInit+0x92>
 80092d8:	2306      	movs	r3, #6
 80092da:	e008      	b.n	80092ee <HAL_GPIO_DeInit+0x92>
 80092dc:	2304      	movs	r3, #4
 80092de:	e006      	b.n	80092ee <HAL_GPIO_DeInit+0x92>
 80092e0:	2303      	movs	r3, #3
 80092e2:	e004      	b.n	80092ee <HAL_GPIO_DeInit+0x92>
 80092e4:	2302      	movs	r3, #2
 80092e6:	e002      	b.n	80092ee <HAL_GPIO_DeInit+0x92>
 80092e8:	2301      	movs	r3, #1
 80092ea:	e000      	b.n	80092ee <HAL_GPIO_DeInit+0x92>
 80092ec:	2300      	movs	r3, #0
 80092ee:	69fa      	ldr	r2, [r7, #28]
 80092f0:	f002 0203 	and.w	r2, r2, #3
 80092f4:	0092      	lsls	r2, r2, #2
 80092f6:	4093      	lsls	r3, r2
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d132      	bne.n	8009364 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80092fe:	4b3c      	ldr	r3, [pc, #240]	; (80093f0 <HAL_GPIO_DeInit+0x194>)
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	43db      	mvns	r3, r3
 8009306:	493a      	ldr	r1, [pc, #232]	; (80093f0 <HAL_GPIO_DeInit+0x194>)
 8009308:	4013      	ands	r3, r2
 800930a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800930c:	4b38      	ldr	r3, [pc, #224]	; (80093f0 <HAL_GPIO_DeInit+0x194>)
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	43db      	mvns	r3, r3
 8009314:	4936      	ldr	r1, [pc, #216]	; (80093f0 <HAL_GPIO_DeInit+0x194>)
 8009316:	4013      	ands	r3, r2
 8009318:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800931a:	4b35      	ldr	r3, [pc, #212]	; (80093f0 <HAL_GPIO_DeInit+0x194>)
 800931c:	68da      	ldr	r2, [r3, #12]
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	43db      	mvns	r3, r3
 8009322:	4933      	ldr	r1, [pc, #204]	; (80093f0 <HAL_GPIO_DeInit+0x194>)
 8009324:	4013      	ands	r3, r2
 8009326:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009328:	4b31      	ldr	r3, [pc, #196]	; (80093f0 <HAL_GPIO_DeInit+0x194>)
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	43db      	mvns	r3, r3
 8009330:	492f      	ldr	r1, [pc, #188]	; (80093f0 <HAL_GPIO_DeInit+0x194>)
 8009332:	4013      	ands	r3, r2
 8009334:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	f003 0303 	and.w	r3, r3, #3
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	220f      	movs	r2, #15
 8009340:	fa02 f303 	lsl.w	r3, r2, r3
 8009344:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009346:	4a23      	ldr	r2, [pc, #140]	; (80093d4 <HAL_GPIO_DeInit+0x178>)
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	089b      	lsrs	r3, r3, #2
 800934c:	3302      	adds	r3, #2
 800934e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	43da      	mvns	r2, r3
 8009356:	481f      	ldr	r0, [pc, #124]	; (80093d4 <HAL_GPIO_DeInit+0x178>)
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	089b      	lsrs	r3, r3, #2
 800935c:	400a      	ands	r2, r1
 800935e:	3302      	adds	r3, #2
 8009360:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	2bff      	cmp	r3, #255	; 0xff
 8009368:	d801      	bhi.n	800936e <HAL_GPIO_DeInit+0x112>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	e001      	b.n	8009372 <HAL_GPIO_DeInit+0x116>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	3304      	adds	r3, #4
 8009372:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	2bff      	cmp	r3, #255	; 0xff
 8009378:	d802      	bhi.n	8009380 <HAL_GPIO_DeInit+0x124>
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	e002      	b.n	8009386 <HAL_GPIO_DeInit+0x12a>
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	3b08      	subs	r3, #8
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	210f      	movs	r1, #15
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	fa01 f303 	lsl.w	r3, r1, r3
 8009394:	43db      	mvns	r3, r3
 8009396:	401a      	ands	r2, r3
 8009398:	2104      	movs	r1, #4
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	fa01 f303 	lsl.w	r3, r1, r3
 80093a0:	431a      	orrs	r2, r3
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68da      	ldr	r2, [r3, #12]
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	43db      	mvns	r3, r3
 80093ae:	401a      	ands	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	3301      	adds	r3, #1
 80093b8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	fa22 f303 	lsr.w	r3, r2, r3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f47f af52 	bne.w	800926c <HAL_GPIO_DeInit+0x10>
  }
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	3724      	adds	r7, #36	; 0x24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bc80      	pop	{r7}
 80093d2:	4770      	bx	lr
 80093d4:	40010000 	.word	0x40010000
 80093d8:	40010800 	.word	0x40010800
 80093dc:	40010c00 	.word	0x40010c00
 80093e0:	40011000 	.word	0x40011000
 80093e4:	40011400 	.word	0x40011400
 80093e8:	40011800 	.word	0x40011800
 80093ec:	40011c00 	.word	0x40011c00
 80093f0:	40010400 	.word	0x40010400

080093f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	887b      	ldrh	r3, [r7, #2]
 8009406:	4013      	ands	r3, r2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800940c:	2301      	movs	r3, #1
 800940e:	73fb      	strb	r3, [r7, #15]
 8009410:	e001      	b.n	8009416 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009412:	2300      	movs	r3, #0
 8009414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009416:	7bfb      	ldrb	r3, [r7, #15]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	bc80      	pop	{r7}
 8009420:	4770      	bx	lr

08009422 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009422:	b480      	push	{r7}
 8009424:	b083      	sub	sp, #12
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	460b      	mov	r3, r1
 800942c:	807b      	strh	r3, [r7, #2]
 800942e:	4613      	mov	r3, r2
 8009430:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009432:	787b      	ldrb	r3, [r7, #1]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d003      	beq.n	8009440 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009438:	887a      	ldrh	r2, [r7, #2]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800943e:	e003      	b.n	8009448 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009440:	887b      	ldrh	r3, [r7, #2]
 8009442:	041a      	lsls	r2, r3, #16
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	611a      	str	r2, [r3, #16]
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	bc80      	pop	{r7}
 8009450:	4770      	bx	lr

08009452 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009452:	b480      	push	{r7}
 8009454:	b085      	sub	sp, #20
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	460b      	mov	r3, r1
 800945c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009464:	887a      	ldrh	r2, [r7, #2]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	4013      	ands	r3, r2
 800946a:	041a      	lsls	r2, r3, #16
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	43d9      	mvns	r1, r3
 8009470:	887b      	ldrh	r3, [r7, #2]
 8009472:	400b      	ands	r3, r1
 8009474:	431a      	orrs	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	611a      	str	r2, [r3, #16]
}
 800947a:	bf00      	nop
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	bc80      	pop	{r7}
 8009482:	4770      	bx	lr

08009484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e12b      	b.n	80096ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d106      	bne.n	80094b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7fe fff8 	bl	80084a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2224      	movs	r2, #36	; 0x24
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f022 0201 	bic.w	r2, r2, #1
 80094c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80094e8:	f001 fdb8 	bl	800b05c <HAL_RCC_GetPCLK1Freq>
 80094ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	4a81      	ldr	r2, [pc, #516]	; (80096f8 <HAL_I2C_Init+0x274>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d807      	bhi.n	8009508 <HAL_I2C_Init+0x84>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	4a80      	ldr	r2, [pc, #512]	; (80096fc <HAL_I2C_Init+0x278>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	bf94      	ite	ls
 8009500:	2301      	movls	r3, #1
 8009502:	2300      	movhi	r3, #0
 8009504:	b2db      	uxtb	r3, r3
 8009506:	e006      	b.n	8009516 <HAL_I2C_Init+0x92>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	4a7d      	ldr	r2, [pc, #500]	; (8009700 <HAL_I2C_Init+0x27c>)
 800950c:	4293      	cmp	r3, r2
 800950e:	bf94      	ite	ls
 8009510:	2301      	movls	r3, #1
 8009512:	2300      	movhi	r3, #0
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e0e7      	b.n	80096ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	4a78      	ldr	r2, [pc, #480]	; (8009704 <HAL_I2C_Init+0x280>)
 8009522:	fba2 2303 	umull	r2, r3, r2, r3
 8009526:	0c9b      	lsrs	r3, r3, #18
 8009528:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	430a      	orrs	r2, r1
 800953c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	6a1b      	ldr	r3, [r3, #32]
 8009544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	4a6a      	ldr	r2, [pc, #424]	; (80096f8 <HAL_I2C_Init+0x274>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d802      	bhi.n	8009558 <HAL_I2C_Init+0xd4>
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	3301      	adds	r3, #1
 8009556:	e009      	b.n	800956c <HAL_I2C_Init+0xe8>
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800955e:	fb02 f303 	mul.w	r3, r2, r3
 8009562:	4a69      	ldr	r2, [pc, #420]	; (8009708 <HAL_I2C_Init+0x284>)
 8009564:	fba2 2303 	umull	r2, r3, r2, r3
 8009568:	099b      	lsrs	r3, r3, #6
 800956a:	3301      	adds	r3, #1
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	6812      	ldr	r2, [r2, #0]
 8009570:	430b      	orrs	r3, r1
 8009572:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800957e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	495c      	ldr	r1, [pc, #368]	; (80096f8 <HAL_I2C_Init+0x274>)
 8009588:	428b      	cmp	r3, r1
 800958a:	d819      	bhi.n	80095c0 <HAL_I2C_Init+0x13c>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	1e59      	subs	r1, r3, #1
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	005b      	lsls	r3, r3, #1
 8009596:	fbb1 f3f3 	udiv	r3, r1, r3
 800959a:	1c59      	adds	r1, r3, #1
 800959c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80095a0:	400b      	ands	r3, r1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00a      	beq.n	80095bc <HAL_I2C_Init+0x138>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	1e59      	subs	r1, r3, #1
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	005b      	lsls	r3, r3, #1
 80095b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80095b4:	3301      	adds	r3, #1
 80095b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095ba:	e051      	b.n	8009660 <HAL_I2C_Init+0x1dc>
 80095bc:	2304      	movs	r3, #4
 80095be:	e04f      	b.n	8009660 <HAL_I2C_Init+0x1dc>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d111      	bne.n	80095ec <HAL_I2C_Init+0x168>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	1e58      	subs	r0, r3, #1
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6859      	ldr	r1, [r3, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	005b      	lsls	r3, r3, #1
 80095d4:	440b      	add	r3, r1
 80095d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80095da:	3301      	adds	r3, #1
 80095dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	bf0c      	ite	eq
 80095e4:	2301      	moveq	r3, #1
 80095e6:	2300      	movne	r3, #0
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	e012      	b.n	8009612 <HAL_I2C_Init+0x18e>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	1e58      	subs	r0, r3, #1
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6859      	ldr	r1, [r3, #4]
 80095f4:	460b      	mov	r3, r1
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	440b      	add	r3, r1
 80095fa:	0099      	lsls	r1, r3, #2
 80095fc:	440b      	add	r3, r1
 80095fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009602:	3301      	adds	r3, #1
 8009604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009608:	2b00      	cmp	r3, #0
 800960a:	bf0c      	ite	eq
 800960c:	2301      	moveq	r3, #1
 800960e:	2300      	movne	r3, #0
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <HAL_I2C_Init+0x196>
 8009616:	2301      	movs	r3, #1
 8009618:	e022      	b.n	8009660 <HAL_I2C_Init+0x1dc>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10e      	bne.n	8009640 <HAL_I2C_Init+0x1bc>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	1e58      	subs	r0, r3, #1
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6859      	ldr	r1, [r3, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	005b      	lsls	r3, r3, #1
 800962e:	440b      	add	r3, r1
 8009630:	fbb0 f3f3 	udiv	r3, r0, r3
 8009634:	3301      	adds	r3, #1
 8009636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800963a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800963e:	e00f      	b.n	8009660 <HAL_I2C_Init+0x1dc>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	1e58      	subs	r0, r3, #1
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6859      	ldr	r1, [r3, #4]
 8009648:	460b      	mov	r3, r1
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	440b      	add	r3, r1
 800964e:	0099      	lsls	r1, r3, #2
 8009650:	440b      	add	r3, r1
 8009652:	fbb0 f3f3 	udiv	r3, r0, r3
 8009656:	3301      	adds	r3, #1
 8009658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800965c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009660:	6879      	ldr	r1, [r7, #4]
 8009662:	6809      	ldr	r1, [r1, #0]
 8009664:	4313      	orrs	r3, r2
 8009666:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	69da      	ldr	r2, [r3, #28]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	431a      	orrs	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	430a      	orrs	r2, r1
 8009682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800968e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	6911      	ldr	r1, [r2, #16]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	68d2      	ldr	r2, [r2, #12]
 800969a:	4311      	orrs	r1, r2
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	6812      	ldr	r2, [r2, #0]
 80096a0:	430b      	orrs	r3, r1
 80096a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	695a      	ldr	r2, [r3, #20]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	431a      	orrs	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	430a      	orrs	r2, r1
 80096be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f042 0201 	orr.w	r2, r2, #1
 80096ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2220      	movs	r2, #32
 80096da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	000186a0 	.word	0x000186a0
 80096fc:	001e847f 	.word	0x001e847f
 8009700:	003d08ff 	.word	0x003d08ff
 8009704:	431bde83 	.word	0x431bde83
 8009708:	10624dd3 	.word	0x10624dd3

0800970c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e021      	b.n	8009762 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2224      	movs	r2, #36	; 0x24
 8009722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 0201 	bic.w	r2, r2, #1
 8009734:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7fe fef0 	bl	800851c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af02      	add	r7, sp, #8
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	607a      	str	r2, [r7, #4]
 8009776:	461a      	mov	r2, r3
 8009778:	460b      	mov	r3, r1
 800977a:	817b      	strh	r3, [r7, #10]
 800977c:	4613      	mov	r3, r2
 800977e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009780:	f7ff f85e 	bl	8008840 <HAL_GetTick>
 8009784:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b20      	cmp	r3, #32
 8009790:	f040 80e0 	bne.w	8009954 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	2319      	movs	r3, #25
 800979a:	2201      	movs	r2, #1
 800979c:	4970      	ldr	r1, [pc, #448]	; (8009960 <HAL_I2C_Master_Transmit+0x1f4>)
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 fe5c 	bl	800a45c <I2C_WaitOnFlagUntilTimeout>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80097aa:	2302      	movs	r3, #2
 80097ac:	e0d3      	b.n	8009956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d101      	bne.n	80097bc <HAL_I2C_Master_Transmit+0x50>
 80097b8:	2302      	movs	r3, #2
 80097ba:	e0cc      	b.n	8009956 <HAL_I2C_Master_Transmit+0x1ea>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d007      	beq.n	80097e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f042 0201 	orr.w	r2, r2, #1
 80097e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2221      	movs	r2, #33	; 0x21
 80097f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2210      	movs	r2, #16
 80097fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	893a      	ldrh	r2, [r7, #8]
 8009812:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009818:	b29a      	uxth	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	4a50      	ldr	r2, [pc, #320]	; (8009964 <HAL_I2C_Master_Transmit+0x1f8>)
 8009822:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009824:	8979      	ldrh	r1, [r7, #10]
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	6a3a      	ldr	r2, [r7, #32]
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 fc16 	bl	800a05c <I2C_MasterRequestWrite>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e08d      	b.n	8009956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800983a:	2300      	movs	r3, #0
 800983c:	613b      	str	r3, [r7, #16]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	613b      	str	r3, [r7, #16]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	613b      	str	r3, [r7, #16]
 800984e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009850:	e066      	b.n	8009920 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	6a39      	ldr	r1, [r7, #32]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 ff1a 	bl	800a690 <I2C_WaitOnTXEFlagUntilTimeout>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00d      	beq.n	800987e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	2b04      	cmp	r3, #4
 8009868:	d107      	bne.n	800987a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009878:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e06b      	b.n	8009956 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009882:	781a      	ldrb	r2, [r3, #0]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	1c5a      	adds	r2, r3, #1
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009898:	b29b      	uxth	r3, r3
 800989a:	3b01      	subs	r3, #1
 800989c:	b29a      	uxth	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098a6:	3b01      	subs	r3, #1
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	f003 0304 	and.w	r3, r3, #4
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	d11b      	bne.n	80098f4 <HAL_I2C_Master_Transmit+0x188>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d017      	beq.n	80098f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c8:	781a      	ldrb	r2, [r3, #0]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098de:	b29b      	uxth	r3, r3
 80098e0:	3b01      	subs	r3, #1
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ec:	3b01      	subs	r3, #1
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	6a39      	ldr	r1, [r7, #32]
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 ff11 	bl	800a720 <I2C_WaitOnBTFFlagUntilTimeout>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00d      	beq.n	8009920 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009908:	2b04      	cmp	r3, #4
 800990a:	d107      	bne.n	800991c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800991a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e01a      	b.n	8009956 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009924:	2b00      	cmp	r3, #0
 8009926:	d194      	bne.n	8009852 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2220      	movs	r2, #32
 800993c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	e000      	b.n	8009956 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009954:	2302      	movs	r3, #2
  }
}
 8009956:	4618      	mov	r0, r3
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	00100002 	.word	0x00100002
 8009964:	ffff0000 	.word	0xffff0000

08009968 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b088      	sub	sp, #32
 800996c:	af02      	add	r7, sp, #8
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	4608      	mov	r0, r1
 8009972:	4611      	mov	r1, r2
 8009974:	461a      	mov	r2, r3
 8009976:	4603      	mov	r3, r0
 8009978:	817b      	strh	r3, [r7, #10]
 800997a:	460b      	mov	r3, r1
 800997c:	813b      	strh	r3, [r7, #8]
 800997e:	4613      	mov	r3, r2
 8009980:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009982:	f7fe ff5d 	bl	8008840 <HAL_GetTick>
 8009986:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b20      	cmp	r3, #32
 8009992:	f040 80d9 	bne.w	8009b48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	2319      	movs	r3, #25
 800999c:	2201      	movs	r2, #1
 800999e:	496d      	ldr	r1, [pc, #436]	; (8009b54 <HAL_I2C_Mem_Write+0x1ec>)
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 fd5b 	bl	800a45c <I2C_WaitOnFlagUntilTimeout>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d001      	beq.n	80099b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80099ac:	2302      	movs	r3, #2
 80099ae:	e0cc      	b.n	8009b4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d101      	bne.n	80099be <HAL_I2C_Mem_Write+0x56>
 80099ba:	2302      	movs	r3, #2
 80099bc:	e0c5      	b.n	8009b4a <HAL_I2C_Mem_Write+0x1e2>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0301 	and.w	r3, r3, #1
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d007      	beq.n	80099e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f042 0201 	orr.w	r2, r2, #1
 80099e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2221      	movs	r2, #33	; 0x21
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2240      	movs	r2, #64	; 0x40
 8009a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6a3a      	ldr	r2, [r7, #32]
 8009a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4a4d      	ldr	r2, [pc, #308]	; (8009b58 <HAL_I2C_Mem_Write+0x1f0>)
 8009a24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a26:	88f8      	ldrh	r0, [r7, #6]
 8009a28:	893a      	ldrh	r2, [r7, #8]
 8009a2a:	8979      	ldrh	r1, [r7, #10]
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	9301      	str	r3, [sp, #4]
 8009a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	4603      	mov	r3, r0
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f000 fb92 	bl	800a160 <I2C_RequestMemoryWrite>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d052      	beq.n	8009ae8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e081      	b.n	8009b4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f000 fe20 	bl	800a690 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00d      	beq.n	8009a72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	d107      	bne.n	8009a6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e06b      	b.n	8009b4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	781a      	ldrb	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	f003 0304 	and.w	r3, r3, #4
 8009aac:	2b04      	cmp	r3, #4
 8009aae:	d11b      	bne.n	8009ae8 <HAL_I2C_Mem_Write+0x180>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d017      	beq.n	8009ae8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abc:	781a      	ldrb	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	1c5a      	adds	r2, r3, #1
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1aa      	bne.n	8009a46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009af0:	697a      	ldr	r2, [r7, #20]
 8009af2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 fe13 	bl	800a720 <I2C_WaitOnBTFFlagUntilTimeout>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00d      	beq.n	8009b1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d107      	bne.n	8009b18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e016      	b.n	8009b4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2220      	movs	r2, #32
 8009b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	e000      	b.n	8009b4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009b48:	2302      	movs	r3, #2
  }
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3718      	adds	r7, #24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	00100002 	.word	0x00100002
 8009b58:	ffff0000 	.word	0xffff0000

08009b5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b08c      	sub	sp, #48	; 0x30
 8009b60:	af02      	add	r7, sp, #8
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	4608      	mov	r0, r1
 8009b66:	4611      	mov	r1, r2
 8009b68:	461a      	mov	r2, r3
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	817b      	strh	r3, [r7, #10]
 8009b6e:	460b      	mov	r3, r1
 8009b70:	813b      	strh	r3, [r7, #8]
 8009b72:	4613      	mov	r3, r2
 8009b74:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b7a:	f7fe fe61 	bl	8008840 <HAL_GetTick>
 8009b7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	2b20      	cmp	r3, #32
 8009b8a:	f040 8244 	bne.w	800a016 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	2319      	movs	r3, #25
 8009b94:	2201      	movs	r2, #1
 8009b96:	4982      	ldr	r1, [pc, #520]	; (8009da0 <HAL_I2C_Mem_Read+0x244>)
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f000 fc5f 	bl	800a45c <I2C_WaitOnFlagUntilTimeout>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	e237      	b.n	800a018 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d101      	bne.n	8009bb6 <HAL_I2C_Mem_Read+0x5a>
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	e230      	b.n	800a018 <HAL_I2C_Mem_Read+0x4bc>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d007      	beq.n	8009bdc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f042 0201 	orr.w	r2, r2, #1
 8009bda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2222      	movs	r2, #34	; 0x22
 8009bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2240      	movs	r2, #64	; 0x40
 8009bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	4a62      	ldr	r2, [pc, #392]	; (8009da4 <HAL_I2C_Mem_Read+0x248>)
 8009c1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009c1e:	88f8      	ldrh	r0, [r7, #6]
 8009c20:	893a      	ldrh	r2, [r7, #8]
 8009c22:	8979      	ldrh	r1, [r7, #10]
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	9301      	str	r3, [sp, #4]
 8009c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f000 fb2c 	bl	800a28c <I2C_RequestMemoryRead>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e1ec      	b.n	800a018 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d113      	bne.n	8009c6e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c46:	2300      	movs	r3, #0
 8009c48:	61fb      	str	r3, [r7, #28]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	61fb      	str	r3, [r7, #28]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	61fb      	str	r3, [r7, #28]
 8009c5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c6a:	601a      	str	r2, [r3, #0]
 8009c6c:	e1c0      	b.n	8009ff0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d11e      	bne.n	8009cb4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c86:	b672      	cpsid	i
}
 8009c88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	61bb      	str	r3, [r7, #24]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	695b      	ldr	r3, [r3, #20]
 8009c94:	61bb      	str	r3, [r7, #24]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	61bb      	str	r3, [r7, #24]
 8009c9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009cb0:	b662      	cpsie	i
}
 8009cb2:	e035      	b.n	8009d20 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d11e      	bne.n	8009cfa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ccc:	b672      	cpsid	i
}
 8009cce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	617b      	str	r3, [r7, #20]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	617b      	str	r3, [r7, #20]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	699b      	ldr	r3, [r3, #24]
 8009ce2:	617b      	str	r3, [r7, #20]
 8009ce4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009cf6:	b662      	cpsie	i
}
 8009cf8:	e012      	b.n	8009d20 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d08:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	613b      	str	r3, [r7, #16]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	695b      	ldr	r3, [r3, #20]
 8009d14:	613b      	str	r3, [r7, #16]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	613b      	str	r3, [r7, #16]
 8009d1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009d20:	e166      	b.n	8009ff0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	f200 811f 	bhi.w	8009f6a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d123      	bne.n	8009d7c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 fd39 	bl	800a7b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	e167      	b.n	800a018 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	691a      	ldr	r2, [r3, #16]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d52:	b2d2      	uxtb	r2, r2
 8009d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	1c5a      	adds	r2, r3, #1
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d64:	3b01      	subs	r3, #1
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	3b01      	subs	r3, #1
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d7a:	e139      	b.n	8009ff0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d152      	bne.n	8009e2a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	4906      	ldr	r1, [pc, #24]	; (8009da8 <HAL_I2C_Mem_Read+0x24c>)
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 fb64 	bl	800a45c <I2C_WaitOnFlagUntilTimeout>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d008      	beq.n	8009dac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e13c      	b.n	800a018 <HAL_I2C_Mem_Read+0x4bc>
 8009d9e:	bf00      	nop
 8009da0:	00100002 	.word	0x00100002
 8009da4:	ffff0000 	.word	0xffff0000
 8009da8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009dac:	b672      	cpsid	i
}
 8009dae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	691a      	ldr	r2, [r3, #16]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dca:	b2d2      	uxtb	r2, r2
 8009dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	3b01      	subs	r3, #1
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009df2:	b662      	cpsie	i
}
 8009df4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	691a      	ldr	r2, [r3, #16]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	b2d2      	uxtb	r2, r2
 8009e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e12:	3b01      	subs	r3, #1
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	3b01      	subs	r3, #1
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e28:	e0e2      	b.n	8009ff0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e30:	2200      	movs	r2, #0
 8009e32:	497b      	ldr	r1, [pc, #492]	; (800a020 <HAL_I2C_Mem_Read+0x4c4>)
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f000 fb11 	bl	800a45c <I2C_WaitOnFlagUntilTimeout>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e0e9      	b.n	800a018 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e54:	b672      	cpsid	i
}
 8009e56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	691a      	ldr	r2, [r3, #16]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e62:	b2d2      	uxtb	r2, r2
 8009e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6a:	1c5a      	adds	r2, r3, #1
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e74:	3b01      	subs	r3, #1
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	3b01      	subs	r3, #1
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009e8a:	4b66      	ldr	r3, [pc, #408]	; (800a024 <HAL_I2C_Mem_Read+0x4c8>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	08db      	lsrs	r3, r3, #3
 8009e90:	4a65      	ldr	r2, [pc, #404]	; (800a028 <HAL_I2C_Mem_Read+0x4cc>)
 8009e92:	fba2 2303 	umull	r2, r3, r2, r3
 8009e96:	0a1a      	lsrs	r2, r3, #8
 8009e98:	4613      	mov	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	00da      	lsls	r2, r3, #3
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d118      	bne.n	8009ee2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2220      	movs	r2, #32
 8009eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	f043 0220 	orr.w	r2, r3, #32
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009ed2:	b662      	cpsie	i
}
 8009ed4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e09a      	b.n	800a018 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	f003 0304 	and.w	r3, r3, #4
 8009eec:	2b04      	cmp	r3, #4
 8009eee:	d1d9      	bne.n	8009ea4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009efe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	691a      	ldr	r2, [r3, #16]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0a:	b2d2      	uxtb	r2, r2
 8009f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009f32:	b662      	cpsie	i
}
 8009f34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	691a      	ldr	r2, [r3, #16]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f40:	b2d2      	uxtb	r2, r2
 8009f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f48:	1c5a      	adds	r2, r3, #1
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f52:	3b01      	subs	r3, #1
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	3b01      	subs	r3, #1
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f68:	e042      	b.n	8009ff0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 fc1e 	bl	800a7b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e04c      	b.n	800a018 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	691a      	ldr	r2, [r3, #16]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f88:	b2d2      	uxtb	r2, r2
 8009f8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f90:	1c5a      	adds	r2, r3, #1
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	f003 0304 	and.w	r3, r3, #4
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	d118      	bne.n	8009ff0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	691a      	ldr	r2, [r3, #16]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc8:	b2d2      	uxtb	r2, r2
 8009fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd0:	1c5a      	adds	r2, r3, #1
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f47f ae94 	bne.w	8009d22 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2220      	movs	r2, #32
 8009ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2200      	movs	r2, #0
 800a006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	e000      	b.n	800a018 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a016:	2302      	movs	r3, #2
  }
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3728      	adds	r7, #40	; 0x28
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	00010004 	.word	0x00010004
 800a024:	200000b0 	.word	0x200000b0
 800a028:	14f8b589 	.word	0x14f8b589

0800a02c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a03a:	b2db      	uxtb	r3, r3
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	bc80      	pop	{r7}
 800a044:	4770      	bx	lr

0800a046 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a046:	b480      	push	{r7}
 800a048:	b083      	sub	sp, #12
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a052:	4618      	mov	r0, r3
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	bc80      	pop	{r7}
 800a05a:	4770      	bx	lr

0800a05c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af02      	add	r7, sp, #8
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	607a      	str	r2, [r7, #4]
 800a066:	603b      	str	r3, [r7, #0]
 800a068:	460b      	mov	r3, r1
 800a06a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a070:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b08      	cmp	r3, #8
 800a076:	d006      	beq.n	800a086 <I2C_MasterRequestWrite+0x2a>
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d003      	beq.n	800a086 <I2C_MasterRequestWrite+0x2a>
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a084:	d108      	bne.n	800a098 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	e00b      	b.n	800a0b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a09c:	2b12      	cmp	r3, #18
 800a09e:	d107      	bne.n	800a0b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f000 f9cd 	bl	800a45c <I2C_WaitOnFlagUntilTimeout>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00d      	beq.n	800a0e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d6:	d103      	bne.n	800a0e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	e035      	b.n	800a150 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0ec:	d108      	bne.n	800a100 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0ee:	897b      	ldrh	r3, [r7, #10]
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0fc:	611a      	str	r2, [r3, #16]
 800a0fe:	e01b      	b.n	800a138 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a100:	897b      	ldrh	r3, [r7, #10]
 800a102:	11db      	asrs	r3, r3, #7
 800a104:	b2db      	uxtb	r3, r3
 800a106:	f003 0306 	and.w	r3, r3, #6
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	f063 030f 	orn	r3, r3, #15
 800a110:	b2da      	uxtb	r2, r3
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	490e      	ldr	r1, [pc, #56]	; (800a158 <I2C_MasterRequestWrite+0xfc>)
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f000 fa16 	bl	800a550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e010      	b.n	800a150 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a12e:	897b      	ldrh	r3, [r7, #10]
 800a130:	b2da      	uxtb	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	4907      	ldr	r1, [pc, #28]	; (800a15c <I2C_MasterRequestWrite+0x100>)
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 fa06 	bl	800a550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d001      	beq.n	800a14e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e000      	b.n	800a150 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	00010008 	.word	0x00010008
 800a15c:	00010002 	.word	0x00010002

0800a160 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af02      	add	r7, sp, #8
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	4608      	mov	r0, r1
 800a16a:	4611      	mov	r1, r2
 800a16c:	461a      	mov	r2, r3
 800a16e:	4603      	mov	r3, r0
 800a170:	817b      	strh	r3, [r7, #10]
 800a172:	460b      	mov	r3, r1
 800a174:	813b      	strh	r3, [r7, #8]
 800a176:	4613      	mov	r3, r2
 800a178:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a188:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	6a3b      	ldr	r3, [r7, #32]
 800a190:	2200      	movs	r2, #0
 800a192:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 f960 	bl	800a45c <I2C_WaitOnFlagUntilTimeout>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00d      	beq.n	800a1be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1b0:	d103      	bne.n	800a1ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	e05f      	b.n	800a27e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1be:	897b      	ldrh	r3, [r7, #10]
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	6a3a      	ldr	r2, [r7, #32]
 800a1d2:	492d      	ldr	r1, [pc, #180]	; (800a288 <I2C_RequestMemoryWrite+0x128>)
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f000 f9bb 	bl	800a550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e04c      	b.n	800a27e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	617b      	str	r3, [r7, #20]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	695b      	ldr	r3, [r3, #20]
 800a1ee:	617b      	str	r3, [r7, #20]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1fc:	6a39      	ldr	r1, [r7, #32]
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f000 fa46 	bl	800a690 <I2C_WaitOnTXEFlagUntilTimeout>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00d      	beq.n	800a226 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20e:	2b04      	cmp	r3, #4
 800a210:	d107      	bne.n	800a222 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a220:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e02b      	b.n	800a27e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a226:	88fb      	ldrh	r3, [r7, #6]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d105      	bne.n	800a238 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a22c:	893b      	ldrh	r3, [r7, #8]
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	611a      	str	r2, [r3, #16]
 800a236:	e021      	b.n	800a27c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a238:	893b      	ldrh	r3, [r7, #8]
 800a23a:	0a1b      	lsrs	r3, r3, #8
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	b2da      	uxtb	r2, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a248:	6a39      	ldr	r1, [r7, #32]
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f000 fa20 	bl	800a690 <I2C_WaitOnTXEFlagUntilTimeout>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00d      	beq.n	800a272 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25a:	2b04      	cmp	r3, #4
 800a25c:	d107      	bne.n	800a26e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a26c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e005      	b.n	800a27e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a272:	893b      	ldrh	r3, [r7, #8]
 800a274:	b2da      	uxtb	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3718      	adds	r7, #24
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	00010002 	.word	0x00010002

0800a28c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af02      	add	r7, sp, #8
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	4608      	mov	r0, r1
 800a296:	4611      	mov	r1, r2
 800a298:	461a      	mov	r2, r3
 800a29a:	4603      	mov	r3, r0
 800a29c:	817b      	strh	r3, [r7, #10]
 800a29e:	460b      	mov	r3, r1
 800a2a0:	813b      	strh	r3, [r7, #8]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a2b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	6a3b      	ldr	r3, [r7, #32]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 f8c2 	bl	800a45c <I2C_WaitOnFlagUntilTimeout>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00d      	beq.n	800a2fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2ec:	d103      	bne.n	800a2f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e0aa      	b.n	800a450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a2fa:	897b      	ldrh	r3, [r7, #10]
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	461a      	mov	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a308:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30c:	6a3a      	ldr	r2, [r7, #32]
 800a30e:	4952      	ldr	r1, [pc, #328]	; (800a458 <I2C_RequestMemoryRead+0x1cc>)
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 f91d 	bl	800a550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	e097      	b.n	800a450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a320:	2300      	movs	r3, #0
 800a322:	617b      	str	r3, [r7, #20]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	617b      	str	r3, [r7, #20]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	617b      	str	r3, [r7, #20]
 800a334:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a338:	6a39      	ldr	r1, [r7, #32]
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f000 f9a8 	bl	800a690 <I2C_WaitOnTXEFlagUntilTimeout>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00d      	beq.n	800a362 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34a:	2b04      	cmp	r3, #4
 800a34c:	d107      	bne.n	800a35e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a35c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e076      	b.n	800a450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a362:	88fb      	ldrh	r3, [r7, #6]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d105      	bne.n	800a374 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a368:	893b      	ldrh	r3, [r7, #8]
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	611a      	str	r2, [r3, #16]
 800a372:	e021      	b.n	800a3b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a374:	893b      	ldrh	r3, [r7, #8]
 800a376:	0a1b      	lsrs	r3, r3, #8
 800a378:	b29b      	uxth	r3, r3
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a384:	6a39      	ldr	r1, [r7, #32]
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f000 f982 	bl	800a690 <I2C_WaitOnTXEFlagUntilTimeout>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00d      	beq.n	800a3ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a396:	2b04      	cmp	r3, #4
 800a398:	d107      	bne.n	800a3aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e050      	b.n	800a450 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a3ae:	893b      	ldrh	r3, [r7, #8]
 800a3b0:	b2da      	uxtb	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ba:	6a39      	ldr	r1, [r7, #32]
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f000 f967 	bl	800a690 <I2C_WaitOnTXEFlagUntilTimeout>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00d      	beq.n	800a3e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3cc:	2b04      	cmp	r3, #4
 800a3ce:	d107      	bne.n	800a3e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e035      	b.n	800a450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f000 f82b 	bl	800a45c <I2C_WaitOnFlagUntilTimeout>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00d      	beq.n	800a428 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a41a:	d103      	bne.n	800a424 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a422:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a424:	2303      	movs	r3, #3
 800a426:	e013      	b.n	800a450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a428:	897b      	ldrh	r3, [r7, #10]
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	f043 0301 	orr.w	r3, r3, #1
 800a430:	b2da      	uxtb	r2, r3
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	6a3a      	ldr	r2, [r7, #32]
 800a43c:	4906      	ldr	r1, [pc, #24]	; (800a458 <I2C_RequestMemoryRead+0x1cc>)
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 f886 	bl	800a550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e000      	b.n	800a450 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3718      	adds	r7, #24
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	00010002 	.word	0x00010002

0800a45c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	603b      	str	r3, [r7, #0]
 800a468:	4613      	mov	r3, r2
 800a46a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a46c:	e048      	b.n	800a500 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a474:	d044      	beq.n	800a500 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a476:	f7fe f9e3 	bl	8008840 <HAL_GetTick>
 800a47a:	4602      	mov	r2, r0
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	429a      	cmp	r2, r3
 800a484:	d302      	bcc.n	800a48c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d139      	bne.n	800a500 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	0c1b      	lsrs	r3, r3, #16
 800a490:	b2db      	uxtb	r3, r3
 800a492:	2b01      	cmp	r3, #1
 800a494:	d10d      	bne.n	800a4b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	43da      	mvns	r2, r3
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	bf0c      	ite	eq
 800a4a8:	2301      	moveq	r3, #1
 800a4aa:	2300      	movne	r3, #0
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	e00c      	b.n	800a4cc <I2C_WaitOnFlagUntilTimeout+0x70>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	699b      	ldr	r3, [r3, #24]
 800a4b8:	43da      	mvns	r2, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	4013      	ands	r3, r2
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	bf0c      	ite	eq
 800a4c4:	2301      	moveq	r3, #1
 800a4c6:	2300      	movne	r3, #0
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	79fb      	ldrb	r3, [r7, #7]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d116      	bne.n	800a500 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2220      	movs	r2, #32
 800a4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ec:	f043 0220 	orr.w	r2, r3, #32
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e023      	b.n	800a548 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	0c1b      	lsrs	r3, r3, #16
 800a504:	b2db      	uxtb	r3, r3
 800a506:	2b01      	cmp	r3, #1
 800a508:	d10d      	bne.n	800a526 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	695b      	ldr	r3, [r3, #20]
 800a510:	43da      	mvns	r2, r3
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	4013      	ands	r3, r2
 800a516:	b29b      	uxth	r3, r3
 800a518:	2b00      	cmp	r3, #0
 800a51a:	bf0c      	ite	eq
 800a51c:	2301      	moveq	r3, #1
 800a51e:	2300      	movne	r3, #0
 800a520:	b2db      	uxtb	r3, r3
 800a522:	461a      	mov	r2, r3
 800a524:	e00c      	b.n	800a540 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	43da      	mvns	r2, r3
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	4013      	ands	r3, r2
 800a532:	b29b      	uxth	r3, r3
 800a534:	2b00      	cmp	r3, #0
 800a536:	bf0c      	ite	eq
 800a538:	2301      	moveq	r3, #1
 800a53a:	2300      	movne	r3, #0
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	461a      	mov	r2, r3
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	429a      	cmp	r2, r3
 800a544:	d093      	beq.n	800a46e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a55e:	e071      	b.n	800a644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a56a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a56e:	d123      	bne.n	800a5b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a57e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a588:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2220      	movs	r2, #32
 800a594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a4:	f043 0204 	orr.w	r2, r3, #4
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e067      	b.n	800a688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5be:	d041      	beq.n	800a644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5c0:	f7fe f93e 	bl	8008840 <HAL_GetTick>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d302      	bcc.n	800a5d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d136      	bne.n	800a644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	0c1b      	lsrs	r3, r3, #16
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d10c      	bne.n	800a5fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	43da      	mvns	r2, r3
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	bf14      	ite	ne
 800a5f2:	2301      	movne	r3, #1
 800a5f4:	2300      	moveq	r3, #0
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	e00b      	b.n	800a612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	43da      	mvns	r2, r3
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	4013      	ands	r3, r2
 800a606:	b29b      	uxth	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	bf14      	ite	ne
 800a60c:	2301      	movne	r3, #1
 800a60e:	2300      	moveq	r3, #0
 800a610:	b2db      	uxtb	r3, r3
 800a612:	2b00      	cmp	r3, #0
 800a614:	d016      	beq.n	800a644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2220      	movs	r2, #32
 800a620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a630:	f043 0220 	orr.w	r2, r3, #32
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	e021      	b.n	800a688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	0c1b      	lsrs	r3, r3, #16
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d10c      	bne.n	800a668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	695b      	ldr	r3, [r3, #20]
 800a654:	43da      	mvns	r2, r3
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	4013      	ands	r3, r2
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	bf14      	ite	ne
 800a660:	2301      	movne	r3, #1
 800a662:	2300      	moveq	r3, #0
 800a664:	b2db      	uxtb	r3, r3
 800a666:	e00b      	b.n	800a680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	43da      	mvns	r2, r3
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	4013      	ands	r3, r2
 800a674:	b29b      	uxth	r3, r3
 800a676:	2b00      	cmp	r3, #0
 800a678:	bf14      	ite	ne
 800a67a:	2301      	movne	r3, #1
 800a67c:	2300      	moveq	r3, #0
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	2b00      	cmp	r3, #0
 800a682:	f47f af6d 	bne.w	800a560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a69c:	e034      	b.n	800a708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f000 f8e3 	bl	800a86a <I2C_IsAcknowledgeFailed>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e034      	b.n	800a718 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6b4:	d028      	beq.n	800a708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6b6:	f7fe f8c3 	bl	8008840 <HAL_GetTick>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d302      	bcc.n	800a6cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d11d      	bne.n	800a708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6d6:	2b80      	cmp	r3, #128	; 0x80
 800a6d8:	d016      	beq.n	800a708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2220      	movs	r2, #32
 800a6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f4:	f043 0220 	orr.w	r2, r3, #32
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	e007      	b.n	800a718 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a712:	2b80      	cmp	r3, #128	; 0x80
 800a714:	d1c3      	bne.n	800a69e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a72c:	e034      	b.n	800a798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f000 f89b 	bl	800a86a <I2C_IsAcknowledgeFailed>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d001      	beq.n	800a73e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e034      	b.n	800a7a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a744:	d028      	beq.n	800a798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a746:	f7fe f87b 	bl	8008840 <HAL_GetTick>
 800a74a:	4602      	mov	r2, r0
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	429a      	cmp	r2, r3
 800a754:	d302      	bcc.n	800a75c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d11d      	bne.n	800a798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	f003 0304 	and.w	r3, r3, #4
 800a766:	2b04      	cmp	r3, #4
 800a768:	d016      	beq.n	800a798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2220      	movs	r2, #32
 800a774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a784:	f043 0220 	orr.w	r2, r3, #32
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e007      	b.n	800a7a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	695b      	ldr	r3, [r3, #20]
 800a79e:	f003 0304 	and.w	r3, r3, #4
 800a7a2:	2b04      	cmp	r3, #4
 800a7a4:	d1c3      	bne.n	800a72e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7bc:	e049      	b.n	800a852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	f003 0310 	and.w	r3, r3, #16
 800a7c8:	2b10      	cmp	r3, #16
 800a7ca:	d119      	bne.n	800a800 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f06f 0210 	mvn.w	r2, #16
 800a7d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2220      	movs	r2, #32
 800a7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e030      	b.n	800a862 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a800:	f7fe f81e 	bl	8008840 <HAL_GetTick>
 800a804:	4602      	mov	r2, r0
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d302      	bcc.n	800a816 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d11d      	bne.n	800a852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	695b      	ldr	r3, [r3, #20]
 800a81c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a820:	2b40      	cmp	r3, #64	; 0x40
 800a822:	d016      	beq.n	800a852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2220      	movs	r2, #32
 800a82e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83e:	f043 0220 	orr.w	r2, r3, #32
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e007      	b.n	800a862 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	695b      	ldr	r3, [r3, #20]
 800a858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a85c:	2b40      	cmp	r3, #64	; 0x40
 800a85e:	d1ae      	bne.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a87c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a880:	d11b      	bne.n	800a8ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a88a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2220      	movs	r2, #32
 800a896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a6:	f043 0204 	orr.w	r2, r3, #4
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e000      	b.n	800a8bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bc80      	pop	{r7}
 800a8c4:	4770      	bx	lr
	...

0800a8c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e272      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 0301 	and.w	r3, r3, #1
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 8087 	beq.w	800a9f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a8e8:	4b92      	ldr	r3, [pc, #584]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	f003 030c 	and.w	r3, r3, #12
 800a8f0:	2b04      	cmp	r3, #4
 800a8f2:	d00c      	beq.n	800a90e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a8f4:	4b8f      	ldr	r3, [pc, #572]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	f003 030c 	and.w	r3, r3, #12
 800a8fc:	2b08      	cmp	r3, #8
 800a8fe:	d112      	bne.n	800a926 <HAL_RCC_OscConfig+0x5e>
 800a900:	4b8c      	ldr	r3, [pc, #560]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a90c:	d10b      	bne.n	800a926 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a90e:	4b89      	ldr	r3, [pc, #548]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a916:	2b00      	cmp	r3, #0
 800a918:	d06c      	beq.n	800a9f4 <HAL_RCC_OscConfig+0x12c>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d168      	bne.n	800a9f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e24c      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a92e:	d106      	bne.n	800a93e <HAL_RCC_OscConfig+0x76>
 800a930:	4b80      	ldr	r3, [pc, #512]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a7f      	ldr	r2, [pc, #508]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a93a:	6013      	str	r3, [r2, #0]
 800a93c:	e02e      	b.n	800a99c <HAL_RCC_OscConfig+0xd4>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10c      	bne.n	800a960 <HAL_RCC_OscConfig+0x98>
 800a946:	4b7b      	ldr	r3, [pc, #492]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a7a      	ldr	r2, [pc, #488]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a94c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	4b78      	ldr	r3, [pc, #480]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a77      	ldr	r2, [pc, #476]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	e01d      	b.n	800a99c <HAL_RCC_OscConfig+0xd4>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a968:	d10c      	bne.n	800a984 <HAL_RCC_OscConfig+0xbc>
 800a96a:	4b72      	ldr	r3, [pc, #456]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a71      	ldr	r2, [pc, #452]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	4b6f      	ldr	r3, [pc, #444]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a6e      	ldr	r2, [pc, #440]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a97c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a980:	6013      	str	r3, [r2, #0]
 800a982:	e00b      	b.n	800a99c <HAL_RCC_OscConfig+0xd4>
 800a984:	4b6b      	ldr	r3, [pc, #428]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a6a      	ldr	r2, [pc, #424]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a98a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a98e:	6013      	str	r3, [r2, #0]
 800a990:	4b68      	ldr	r3, [pc, #416]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a67      	ldr	r2, [pc, #412]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a99a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d013      	beq.n	800a9cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9a4:	f7fd ff4c 	bl	8008840 <HAL_GetTick>
 800a9a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9aa:	e008      	b.n	800a9be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9ac:	f7fd ff48 	bl	8008840 <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	2b64      	cmp	r3, #100	; 0x64
 800a9b8:	d901      	bls.n	800a9be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e200      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9be:	4b5d      	ldr	r3, [pc, #372]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0f0      	beq.n	800a9ac <HAL_RCC_OscConfig+0xe4>
 800a9ca:	e014      	b.n	800a9f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9cc:	f7fd ff38 	bl	8008840 <HAL_GetTick>
 800a9d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9d2:	e008      	b.n	800a9e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9d4:	f7fd ff34 	bl	8008840 <HAL_GetTick>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	2b64      	cmp	r3, #100	; 0x64
 800a9e0:	d901      	bls.n	800a9e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	e1ec      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9e6:	4b53      	ldr	r3, [pc, #332]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1f0      	bne.n	800a9d4 <HAL_RCC_OscConfig+0x10c>
 800a9f2:	e000      	b.n	800a9f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 0302 	and.w	r3, r3, #2
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d063      	beq.n	800aaca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aa02:	4b4c      	ldr	r3, [pc, #304]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	f003 030c 	and.w	r3, r3, #12
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00b      	beq.n	800aa26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800aa0e:	4b49      	ldr	r3, [pc, #292]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	f003 030c 	and.w	r3, r3, #12
 800aa16:	2b08      	cmp	r3, #8
 800aa18:	d11c      	bne.n	800aa54 <HAL_RCC_OscConfig+0x18c>
 800aa1a:	4b46      	ldr	r3, [pc, #280]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d116      	bne.n	800aa54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa26:	4b43      	ldr	r3, [pc, #268]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f003 0302 	and.w	r3, r3, #2
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d005      	beq.n	800aa3e <HAL_RCC_OscConfig+0x176>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d001      	beq.n	800aa3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e1c0      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa3e:	4b3d      	ldr	r3, [pc, #244]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	695b      	ldr	r3, [r3, #20]
 800aa4a:	00db      	lsls	r3, r3, #3
 800aa4c:	4939      	ldr	r1, [pc, #228]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa52:	e03a      	b.n	800aaca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d020      	beq.n	800aa9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa5c:	4b36      	ldr	r3, [pc, #216]	; (800ab38 <HAL_RCC_OscConfig+0x270>)
 800aa5e:	2201      	movs	r2, #1
 800aa60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa62:	f7fd feed 	bl	8008840 <HAL_GetTick>
 800aa66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa68:	e008      	b.n	800aa7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa6a:	f7fd fee9 	bl	8008840 <HAL_GetTick>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d901      	bls.n	800aa7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	e1a1      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa7c:	4b2d      	ldr	r3, [pc, #180]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0302 	and.w	r3, r3, #2
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d0f0      	beq.n	800aa6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa88:	4b2a      	ldr	r3, [pc, #168]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	00db      	lsls	r3, r3, #3
 800aa96:	4927      	ldr	r1, [pc, #156]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	600b      	str	r3, [r1, #0]
 800aa9c:	e015      	b.n	800aaca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa9e:	4b26      	ldr	r3, [pc, #152]	; (800ab38 <HAL_RCC_OscConfig+0x270>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaa4:	f7fd fecc 	bl	8008840 <HAL_GetTick>
 800aaa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aaaa:	e008      	b.n	800aabe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aaac:	f7fd fec8 	bl	8008840 <HAL_GetTick>
 800aab0:	4602      	mov	r2, r0
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d901      	bls.n	800aabe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e180      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aabe:	4b1d      	ldr	r3, [pc, #116]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 0302 	and.w	r3, r3, #2
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1f0      	bne.n	800aaac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f003 0308 	and.w	r3, r3, #8
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d03a      	beq.n	800ab4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d019      	beq.n	800ab12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aade:	4b17      	ldr	r3, [pc, #92]	; (800ab3c <HAL_RCC_OscConfig+0x274>)
 800aae0:	2201      	movs	r2, #1
 800aae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aae4:	f7fd feac 	bl	8008840 <HAL_GetTick>
 800aae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aaea:	e008      	b.n	800aafe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aaec:	f7fd fea8 	bl	8008840 <HAL_GetTick>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	1ad3      	subs	r3, r2, r3
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d901      	bls.n	800aafe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e160      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aafe:	4b0d      	ldr	r3, [pc, #52]	; (800ab34 <HAL_RCC_OscConfig+0x26c>)
 800ab00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab02:	f003 0302 	and.w	r3, r3, #2
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0f0      	beq.n	800aaec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ab0a:	2001      	movs	r0, #1
 800ab0c:	f000 face 	bl	800b0ac <RCC_Delay>
 800ab10:	e01c      	b.n	800ab4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab12:	4b0a      	ldr	r3, [pc, #40]	; (800ab3c <HAL_RCC_OscConfig+0x274>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab18:	f7fd fe92 	bl	8008840 <HAL_GetTick>
 800ab1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab1e:	e00f      	b.n	800ab40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab20:	f7fd fe8e 	bl	8008840 <HAL_GetTick>
 800ab24:	4602      	mov	r2, r0
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d908      	bls.n	800ab40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e146      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
 800ab32:	bf00      	nop
 800ab34:	40021000 	.word	0x40021000
 800ab38:	42420000 	.word	0x42420000
 800ab3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab40:	4b92      	ldr	r3, [pc, #584]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ab42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e9      	bne.n	800ab20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f003 0304 	and.w	r3, r3, #4
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f000 80a6 	beq.w	800aca6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab5e:	4b8b      	ldr	r3, [pc, #556]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ab60:	69db      	ldr	r3, [r3, #28]
 800ab62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d10d      	bne.n	800ab86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab6a:	4b88      	ldr	r3, [pc, #544]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	4a87      	ldr	r2, [pc, #540]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ab70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab74:	61d3      	str	r3, [r2, #28]
 800ab76:	4b85      	ldr	r3, [pc, #532]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ab78:	69db      	ldr	r3, [r3, #28]
 800ab7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab7e:	60bb      	str	r3, [r7, #8]
 800ab80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab82:	2301      	movs	r3, #1
 800ab84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab86:	4b82      	ldr	r3, [pc, #520]	; (800ad90 <HAL_RCC_OscConfig+0x4c8>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d118      	bne.n	800abc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab92:	4b7f      	ldr	r3, [pc, #508]	; (800ad90 <HAL_RCC_OscConfig+0x4c8>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a7e      	ldr	r2, [pc, #504]	; (800ad90 <HAL_RCC_OscConfig+0x4c8>)
 800ab98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab9e:	f7fd fe4f 	bl	8008840 <HAL_GetTick>
 800aba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aba4:	e008      	b.n	800abb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aba6:	f7fd fe4b 	bl	8008840 <HAL_GetTick>
 800abaa:	4602      	mov	r2, r0
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	2b64      	cmp	r3, #100	; 0x64
 800abb2:	d901      	bls.n	800abb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e103      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abb8:	4b75      	ldr	r3, [pc, #468]	; (800ad90 <HAL_RCC_OscConfig+0x4c8>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d0f0      	beq.n	800aba6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d106      	bne.n	800abda <HAL_RCC_OscConfig+0x312>
 800abcc:	4b6f      	ldr	r3, [pc, #444]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	4a6e      	ldr	r2, [pc, #440]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800abd2:	f043 0301 	orr.w	r3, r3, #1
 800abd6:	6213      	str	r3, [r2, #32]
 800abd8:	e02d      	b.n	800ac36 <HAL_RCC_OscConfig+0x36e>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10c      	bne.n	800abfc <HAL_RCC_OscConfig+0x334>
 800abe2:	4b6a      	ldr	r3, [pc, #424]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	4a69      	ldr	r2, [pc, #420]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800abe8:	f023 0301 	bic.w	r3, r3, #1
 800abec:	6213      	str	r3, [r2, #32]
 800abee:	4b67      	ldr	r3, [pc, #412]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	4a66      	ldr	r2, [pc, #408]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800abf4:	f023 0304 	bic.w	r3, r3, #4
 800abf8:	6213      	str	r3, [r2, #32]
 800abfa:	e01c      	b.n	800ac36 <HAL_RCC_OscConfig+0x36e>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	2b05      	cmp	r3, #5
 800ac02:	d10c      	bne.n	800ac1e <HAL_RCC_OscConfig+0x356>
 800ac04:	4b61      	ldr	r3, [pc, #388]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	4a60      	ldr	r2, [pc, #384]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ac0a:	f043 0304 	orr.w	r3, r3, #4
 800ac0e:	6213      	str	r3, [r2, #32]
 800ac10:	4b5e      	ldr	r3, [pc, #376]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ac12:	6a1b      	ldr	r3, [r3, #32]
 800ac14:	4a5d      	ldr	r2, [pc, #372]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ac16:	f043 0301 	orr.w	r3, r3, #1
 800ac1a:	6213      	str	r3, [r2, #32]
 800ac1c:	e00b      	b.n	800ac36 <HAL_RCC_OscConfig+0x36e>
 800ac1e:	4b5b      	ldr	r3, [pc, #364]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	4a5a      	ldr	r2, [pc, #360]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ac24:	f023 0301 	bic.w	r3, r3, #1
 800ac28:	6213      	str	r3, [r2, #32]
 800ac2a:	4b58      	ldr	r3, [pc, #352]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	4a57      	ldr	r2, [pc, #348]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ac30:	f023 0304 	bic.w	r3, r3, #4
 800ac34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d015      	beq.n	800ac6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac3e:	f7fd fdff 	bl	8008840 <HAL_GetTick>
 800ac42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac44:	e00a      	b.n	800ac5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac46:	f7fd fdfb 	bl	8008840 <HAL_GetTick>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d901      	bls.n	800ac5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e0b1      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac5c:	4b4b      	ldr	r3, [pc, #300]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	f003 0302 	and.w	r3, r3, #2
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d0ee      	beq.n	800ac46 <HAL_RCC_OscConfig+0x37e>
 800ac68:	e014      	b.n	800ac94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac6a:	f7fd fde9 	bl	8008840 <HAL_GetTick>
 800ac6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac70:	e00a      	b.n	800ac88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac72:	f7fd fde5 	bl	8008840 <HAL_GetTick>
 800ac76:	4602      	mov	r2, r0
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d901      	bls.n	800ac88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e09b      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac88:	4b40      	ldr	r3, [pc, #256]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ac8a:	6a1b      	ldr	r3, [r3, #32]
 800ac8c:	f003 0302 	and.w	r3, r3, #2
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1ee      	bne.n	800ac72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ac94:	7dfb      	ldrb	r3, [r7, #23]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d105      	bne.n	800aca6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac9a:	4b3c      	ldr	r3, [pc, #240]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ac9c:	69db      	ldr	r3, [r3, #28]
 800ac9e:	4a3b      	ldr	r2, [pc, #236]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800aca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aca4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	69db      	ldr	r3, [r3, #28]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 8087 	beq.w	800adbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800acb0:	4b36      	ldr	r3, [pc, #216]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	f003 030c 	and.w	r3, r3, #12
 800acb8:	2b08      	cmp	r3, #8
 800acba:	d061      	beq.n	800ad80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	69db      	ldr	r3, [r3, #28]
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	d146      	bne.n	800ad52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acc4:	4b33      	ldr	r3, [pc, #204]	; (800ad94 <HAL_RCC_OscConfig+0x4cc>)
 800acc6:	2200      	movs	r2, #0
 800acc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acca:	f7fd fdb9 	bl	8008840 <HAL_GetTick>
 800acce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acd0:	e008      	b.n	800ace4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acd2:	f7fd fdb5 	bl	8008840 <HAL_GetTick>
 800acd6:	4602      	mov	r2, r0
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	1ad3      	subs	r3, r2, r3
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d901      	bls.n	800ace4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ace0:	2303      	movs	r3, #3
 800ace2:	e06d      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ace4:	4b29      	ldr	r3, [pc, #164]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1f0      	bne.n	800acd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a1b      	ldr	r3, [r3, #32]
 800acf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acf8:	d108      	bne.n	800ad0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800acfa:	4b24      	ldr	r3, [pc, #144]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	4921      	ldr	r1, [pc, #132]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad0c:	4b1f      	ldr	r3, [pc, #124]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a19      	ldr	r1, [r3, #32]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1c:	430b      	orrs	r3, r1
 800ad1e:	491b      	ldr	r1, [pc, #108]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ad20:	4313      	orrs	r3, r2
 800ad22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad24:	4b1b      	ldr	r3, [pc, #108]	; (800ad94 <HAL_RCC_OscConfig+0x4cc>)
 800ad26:	2201      	movs	r2, #1
 800ad28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad2a:	f7fd fd89 	bl	8008840 <HAL_GetTick>
 800ad2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad30:	e008      	b.n	800ad44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad32:	f7fd fd85 	bl	8008840 <HAL_GetTick>
 800ad36:	4602      	mov	r2, r0
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	2b02      	cmp	r3, #2
 800ad3e:	d901      	bls.n	800ad44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ad40:	2303      	movs	r3, #3
 800ad42:	e03d      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad44:	4b11      	ldr	r3, [pc, #68]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d0f0      	beq.n	800ad32 <HAL_RCC_OscConfig+0x46a>
 800ad50:	e035      	b.n	800adbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad52:	4b10      	ldr	r3, [pc, #64]	; (800ad94 <HAL_RCC_OscConfig+0x4cc>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad58:	f7fd fd72 	bl	8008840 <HAL_GetTick>
 800ad5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad5e:	e008      	b.n	800ad72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad60:	f7fd fd6e 	bl	8008840 <HAL_GetTick>
 800ad64:	4602      	mov	r2, r0
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d901      	bls.n	800ad72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	e026      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad72:	4b06      	ldr	r3, [pc, #24]	; (800ad8c <HAL_RCC_OscConfig+0x4c4>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1f0      	bne.n	800ad60 <HAL_RCC_OscConfig+0x498>
 800ad7e:	e01e      	b.n	800adbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	69db      	ldr	r3, [r3, #28]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d107      	bne.n	800ad98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e019      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
 800ad8c:	40021000 	.word	0x40021000
 800ad90:	40007000 	.word	0x40007000
 800ad94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ad98:	4b0b      	ldr	r3, [pc, #44]	; (800adc8 <HAL_RCC_OscConfig+0x500>)
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a1b      	ldr	r3, [r3, #32]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d106      	bne.n	800adba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d001      	beq.n	800adbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	e000      	b.n	800adc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	40021000 	.word	0x40021000

0800adcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d101      	bne.n	800ade0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e0d0      	b.n	800af82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ade0:	4b6a      	ldr	r3, [pc, #424]	; (800af8c <HAL_RCC_ClockConfig+0x1c0>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 0307 	and.w	r3, r3, #7
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	429a      	cmp	r2, r3
 800adec:	d910      	bls.n	800ae10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adee:	4b67      	ldr	r3, [pc, #412]	; (800af8c <HAL_RCC_ClockConfig+0x1c0>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f023 0207 	bic.w	r2, r3, #7
 800adf6:	4965      	ldr	r1, [pc, #404]	; (800af8c <HAL_RCC_ClockConfig+0x1c0>)
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adfe:	4b63      	ldr	r3, [pc, #396]	; (800af8c <HAL_RCC_ClockConfig+0x1c0>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 0307 	and.w	r3, r3, #7
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d001      	beq.n	800ae10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e0b8      	b.n	800af82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 0302 	and.w	r3, r3, #2
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d020      	beq.n	800ae5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 0304 	and.w	r3, r3, #4
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d005      	beq.n	800ae34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae28:	4b59      	ldr	r3, [pc, #356]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	4a58      	ldr	r2, [pc, #352]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800ae2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ae32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f003 0308 	and.w	r3, r3, #8
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d005      	beq.n	800ae4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae40:	4b53      	ldr	r3, [pc, #332]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	4a52      	ldr	r2, [pc, #328]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800ae46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ae4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae4c:	4b50      	ldr	r3, [pc, #320]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	494d      	ldr	r1, [pc, #308]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d040      	beq.n	800aeec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d107      	bne.n	800ae82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae72:	4b47      	ldr	r3, [pc, #284]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d115      	bne.n	800aeaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e07f      	b.n	800af82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d107      	bne.n	800ae9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae8a:	4b41      	ldr	r3, [pc, #260]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d109      	bne.n	800aeaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e073      	b.n	800af82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae9a:	4b3d      	ldr	r3, [pc, #244]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 0302 	and.w	r3, r3, #2
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d101      	bne.n	800aeaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e06b      	b.n	800af82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aeaa:	4b39      	ldr	r3, [pc, #228]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	f023 0203 	bic.w	r2, r3, #3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	4936      	ldr	r1, [pc, #216]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aebc:	f7fd fcc0 	bl	8008840 <HAL_GetTick>
 800aec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aec2:	e00a      	b.n	800aeda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aec4:	f7fd fcbc 	bl	8008840 <HAL_GetTick>
 800aec8:	4602      	mov	r2, r0
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	f241 3288 	movw	r2, #5000	; 0x1388
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d901      	bls.n	800aeda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aed6:	2303      	movs	r3, #3
 800aed8:	e053      	b.n	800af82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aeda:	4b2d      	ldr	r3, [pc, #180]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	f003 020c 	and.w	r2, r3, #12
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d1eb      	bne.n	800aec4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aeec:	4b27      	ldr	r3, [pc, #156]	; (800af8c <HAL_RCC_ClockConfig+0x1c0>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 0307 	and.w	r3, r3, #7
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d210      	bcs.n	800af1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aefa:	4b24      	ldr	r3, [pc, #144]	; (800af8c <HAL_RCC_ClockConfig+0x1c0>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f023 0207 	bic.w	r2, r3, #7
 800af02:	4922      	ldr	r1, [pc, #136]	; (800af8c <HAL_RCC_ClockConfig+0x1c0>)
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	4313      	orrs	r3, r2
 800af08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af0a:	4b20      	ldr	r3, [pc, #128]	; (800af8c <HAL_RCC_ClockConfig+0x1c0>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f003 0307 	and.w	r3, r3, #7
 800af12:	683a      	ldr	r2, [r7, #0]
 800af14:	429a      	cmp	r2, r3
 800af16:	d001      	beq.n	800af1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	e032      	b.n	800af82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 0304 	and.w	r3, r3, #4
 800af24:	2b00      	cmp	r3, #0
 800af26:	d008      	beq.n	800af3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af28:	4b19      	ldr	r3, [pc, #100]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	4916      	ldr	r1, [pc, #88]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800af36:	4313      	orrs	r3, r2
 800af38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 0308 	and.w	r3, r3, #8
 800af42:	2b00      	cmp	r3, #0
 800af44:	d009      	beq.n	800af5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800af46:	4b12      	ldr	r3, [pc, #72]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	00db      	lsls	r3, r3, #3
 800af54:	490e      	ldr	r1, [pc, #56]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800af56:	4313      	orrs	r3, r2
 800af58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800af5a:	f000 f821 	bl	800afa0 <HAL_RCC_GetSysClockFreq>
 800af5e:	4602      	mov	r2, r0
 800af60:	4b0b      	ldr	r3, [pc, #44]	; (800af90 <HAL_RCC_ClockConfig+0x1c4>)
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	091b      	lsrs	r3, r3, #4
 800af66:	f003 030f 	and.w	r3, r3, #15
 800af6a:	490a      	ldr	r1, [pc, #40]	; (800af94 <HAL_RCC_ClockConfig+0x1c8>)
 800af6c:	5ccb      	ldrb	r3, [r1, r3]
 800af6e:	fa22 f303 	lsr.w	r3, r2, r3
 800af72:	4a09      	ldr	r2, [pc, #36]	; (800af98 <HAL_RCC_ClockConfig+0x1cc>)
 800af74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800af76:	4b09      	ldr	r3, [pc, #36]	; (800af9c <HAL_RCC_ClockConfig+0x1d0>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fd fc1e 	bl	80087bc <HAL_InitTick>

  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	40022000 	.word	0x40022000
 800af90:	40021000 	.word	0x40021000
 800af94:	0800de48 	.word	0x0800de48
 800af98:	200000b0 	.word	0x200000b0
 800af9c:	200000b4 	.word	0x200000b4

0800afa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b087      	sub	sp, #28
 800afa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800afa6:	2300      	movs	r3, #0
 800afa8:	60fb      	str	r3, [r7, #12]
 800afaa:	2300      	movs	r3, #0
 800afac:	60bb      	str	r3, [r7, #8]
 800afae:	2300      	movs	r3, #0
 800afb0:	617b      	str	r3, [r7, #20]
 800afb2:	2300      	movs	r3, #0
 800afb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800afb6:	2300      	movs	r3, #0
 800afb8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800afba:	4b1e      	ldr	r3, [pc, #120]	; (800b034 <HAL_RCC_GetSysClockFreq+0x94>)
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f003 030c 	and.w	r3, r3, #12
 800afc6:	2b04      	cmp	r3, #4
 800afc8:	d002      	beq.n	800afd0 <HAL_RCC_GetSysClockFreq+0x30>
 800afca:	2b08      	cmp	r3, #8
 800afcc:	d003      	beq.n	800afd6 <HAL_RCC_GetSysClockFreq+0x36>
 800afce:	e027      	b.n	800b020 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800afd0:	4b19      	ldr	r3, [pc, #100]	; (800b038 <HAL_RCC_GetSysClockFreq+0x98>)
 800afd2:	613b      	str	r3, [r7, #16]
      break;
 800afd4:	e027      	b.n	800b026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	0c9b      	lsrs	r3, r3, #18
 800afda:	f003 030f 	and.w	r3, r3, #15
 800afde:	4a17      	ldr	r2, [pc, #92]	; (800b03c <HAL_RCC_GetSysClockFreq+0x9c>)
 800afe0:	5cd3      	ldrb	r3, [r2, r3]
 800afe2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afea:	2b00      	cmp	r3, #0
 800afec:	d010      	beq.n	800b010 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800afee:	4b11      	ldr	r3, [pc, #68]	; (800b034 <HAL_RCC_GetSysClockFreq+0x94>)
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	0c5b      	lsrs	r3, r3, #17
 800aff4:	f003 0301 	and.w	r3, r3, #1
 800aff8:	4a11      	ldr	r2, [pc, #68]	; (800b040 <HAL_RCC_GetSysClockFreq+0xa0>)
 800affa:	5cd3      	ldrb	r3, [r2, r3]
 800affc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a0d      	ldr	r2, [pc, #52]	; (800b038 <HAL_RCC_GetSysClockFreq+0x98>)
 800b002:	fb03 f202 	mul.w	r2, r3, r2
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	fbb2 f3f3 	udiv	r3, r2, r3
 800b00c:	617b      	str	r3, [r7, #20]
 800b00e:	e004      	b.n	800b01a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a0c      	ldr	r2, [pc, #48]	; (800b044 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b014:	fb02 f303 	mul.w	r3, r2, r3
 800b018:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	613b      	str	r3, [r7, #16]
      break;
 800b01e:	e002      	b.n	800b026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b020:	4b05      	ldr	r3, [pc, #20]	; (800b038 <HAL_RCC_GetSysClockFreq+0x98>)
 800b022:	613b      	str	r3, [r7, #16]
      break;
 800b024:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b026:	693b      	ldr	r3, [r7, #16]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	371c      	adds	r7, #28
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bc80      	pop	{r7}
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	40021000 	.word	0x40021000
 800b038:	007a1200 	.word	0x007a1200
 800b03c:	0800de60 	.word	0x0800de60
 800b040:	0800de70 	.word	0x0800de70
 800b044:	003d0900 	.word	0x003d0900

0800b048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b048:	b480      	push	{r7}
 800b04a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b04c:	4b02      	ldr	r3, [pc, #8]	; (800b058 <HAL_RCC_GetHCLKFreq+0x10>)
 800b04e:	681b      	ldr	r3, [r3, #0]
}
 800b050:	4618      	mov	r0, r3
 800b052:	46bd      	mov	sp, r7
 800b054:	bc80      	pop	{r7}
 800b056:	4770      	bx	lr
 800b058:	200000b0 	.word	0x200000b0

0800b05c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b060:	f7ff fff2 	bl	800b048 <HAL_RCC_GetHCLKFreq>
 800b064:	4602      	mov	r2, r0
 800b066:	4b05      	ldr	r3, [pc, #20]	; (800b07c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	0a1b      	lsrs	r3, r3, #8
 800b06c:	f003 0307 	and.w	r3, r3, #7
 800b070:	4903      	ldr	r1, [pc, #12]	; (800b080 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b072:	5ccb      	ldrb	r3, [r1, r3]
 800b074:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b078:	4618      	mov	r0, r3
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	40021000 	.word	0x40021000
 800b080:	0800de58 	.word	0x0800de58

0800b084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b088:	f7ff ffde 	bl	800b048 <HAL_RCC_GetHCLKFreq>
 800b08c:	4602      	mov	r2, r0
 800b08e:	4b05      	ldr	r3, [pc, #20]	; (800b0a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	0adb      	lsrs	r3, r3, #11
 800b094:	f003 0307 	and.w	r3, r3, #7
 800b098:	4903      	ldr	r1, [pc, #12]	; (800b0a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b09a:	5ccb      	ldrb	r3, [r1, r3]
 800b09c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	40021000 	.word	0x40021000
 800b0a8:	0800de58 	.word	0x0800de58

0800b0ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b0b4:	4b0a      	ldr	r3, [pc, #40]	; (800b0e0 <RCC_Delay+0x34>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a0a      	ldr	r2, [pc, #40]	; (800b0e4 <RCC_Delay+0x38>)
 800b0ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b0be:	0a5b      	lsrs	r3, r3, #9
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	fb02 f303 	mul.w	r3, r2, r3
 800b0c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b0c8:	bf00      	nop
  }
  while (Delay --);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	1e5a      	subs	r2, r3, #1
 800b0ce:	60fa      	str	r2, [r7, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1f9      	bne.n	800b0c8 <RCC_Delay+0x1c>
}
 800b0d4:	bf00      	nop
 800b0d6:	bf00      	nop
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bc80      	pop	{r7}
 800b0de:	4770      	bx	lr
 800b0e0:	200000b0 	.word	0x200000b0
 800b0e4:	10624dd3 	.word	0x10624dd3

0800b0e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e041      	b.n	800b17e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b100:	b2db      	uxtb	r3, r3
 800b102:	2b00      	cmp	r3, #0
 800b104:	d106      	bne.n	800b114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7fd fa26 	bl	8008560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2202      	movs	r2, #2
 800b118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	3304      	adds	r3, #4
 800b124:	4619      	mov	r1, r3
 800b126:	4610      	mov	r0, r2
 800b128:	f000 fa82 	bl	800b630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
	...

0800b188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b196:	b2db      	uxtb	r3, r3
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d001      	beq.n	800b1a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e044      	b.n	800b22a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68da      	ldr	r2, [r3, #12]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f042 0201 	orr.w	r2, r2, #1
 800b1b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a1d      	ldr	r2, [pc, #116]	; (800b234 <HAL_TIM_Base_Start_IT+0xac>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d018      	beq.n	800b1f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a1c      	ldr	r2, [pc, #112]	; (800b238 <HAL_TIM_Base_Start_IT+0xb0>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d013      	beq.n	800b1f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1d4:	d00e      	beq.n	800b1f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a18      	ldr	r2, [pc, #96]	; (800b23c <HAL_TIM_Base_Start_IT+0xb4>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d009      	beq.n	800b1f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a16      	ldr	r2, [pc, #88]	; (800b240 <HAL_TIM_Base_Start_IT+0xb8>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d004      	beq.n	800b1f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a15      	ldr	r2, [pc, #84]	; (800b244 <HAL_TIM_Base_Start_IT+0xbc>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d111      	bne.n	800b218 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	f003 0307 	and.w	r3, r3, #7
 800b1fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2b06      	cmp	r3, #6
 800b204:	d010      	beq.n	800b228 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f042 0201 	orr.w	r2, r2, #1
 800b214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b216:	e007      	b.n	800b228 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f042 0201 	orr.w	r2, r2, #1
 800b226:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	bc80      	pop	{r7}
 800b232:	4770      	bx	lr
 800b234:	40012c00 	.word	0x40012c00
 800b238:	40013400 	.word	0x40013400
 800b23c:	40000400 	.word	0x40000400
 800b240:	40000800 	.word	0x40000800
 800b244:	40000c00 	.word	0x40000c00

0800b248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	f003 0302 	and.w	r3, r3, #2
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d122      	bne.n	800b2a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	68db      	ldr	r3, [r3, #12]
 800b264:	f003 0302 	and.w	r3, r3, #2
 800b268:	2b02      	cmp	r3, #2
 800b26a:	d11b      	bne.n	800b2a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f06f 0202 	mvn.w	r2, #2
 800b274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2201      	movs	r2, #1
 800b27a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	699b      	ldr	r3, [r3, #24]
 800b282:	f003 0303 	and.w	r3, r3, #3
 800b286:	2b00      	cmp	r3, #0
 800b288:	d003      	beq.n	800b292 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f9b4 	bl	800b5f8 <HAL_TIM_IC_CaptureCallback>
 800b290:	e005      	b.n	800b29e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f9a7 	bl	800b5e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f9b6 	bl	800b60a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	f003 0304 	and.w	r3, r3, #4
 800b2ae:	2b04      	cmp	r3, #4
 800b2b0:	d122      	bne.n	800b2f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	f003 0304 	and.w	r3, r3, #4
 800b2bc:	2b04      	cmp	r3, #4
 800b2be:	d11b      	bne.n	800b2f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f06f 0204 	mvn.w	r2, #4
 800b2c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2202      	movs	r2, #2
 800b2ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	699b      	ldr	r3, [r3, #24]
 800b2d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d003      	beq.n	800b2e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f98a 	bl	800b5f8 <HAL_TIM_IC_CaptureCallback>
 800b2e4:	e005      	b.n	800b2f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f97d 	bl	800b5e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 f98c 	bl	800b60a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	f003 0308 	and.w	r3, r3, #8
 800b302:	2b08      	cmp	r3, #8
 800b304:	d122      	bne.n	800b34c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	f003 0308 	and.w	r3, r3, #8
 800b310:	2b08      	cmp	r3, #8
 800b312:	d11b      	bne.n	800b34c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f06f 0208 	mvn.w	r2, #8
 800b31c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2204      	movs	r2, #4
 800b322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	69db      	ldr	r3, [r3, #28]
 800b32a:	f003 0303 	and.w	r3, r3, #3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d003      	beq.n	800b33a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 f960 	bl	800b5f8 <HAL_TIM_IC_CaptureCallback>
 800b338:	e005      	b.n	800b346 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 f953 	bl	800b5e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f962 	bl	800b60a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	f003 0310 	and.w	r3, r3, #16
 800b356:	2b10      	cmp	r3, #16
 800b358:	d122      	bne.n	800b3a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	f003 0310 	and.w	r3, r3, #16
 800b364:	2b10      	cmp	r3, #16
 800b366:	d11b      	bne.n	800b3a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f06f 0210 	mvn.w	r2, #16
 800b370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2208      	movs	r2, #8
 800b376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	69db      	ldr	r3, [r3, #28]
 800b37e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b382:	2b00      	cmp	r3, #0
 800b384:	d003      	beq.n	800b38e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f936 	bl	800b5f8 <HAL_TIM_IC_CaptureCallback>
 800b38c:	e005      	b.n	800b39a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 f929 	bl	800b5e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 f938 	bl	800b60a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d10e      	bne.n	800b3cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	f003 0301 	and.w	r3, r3, #1
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d107      	bne.n	800b3cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f06f 0201 	mvn.w	r2, #1
 800b3c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7fc fd5c 	bl	8007e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3d6:	2b80      	cmp	r3, #128	; 0x80
 800b3d8:	d10e      	bne.n	800b3f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3e4:	2b80      	cmp	r3, #128	; 0x80
 800b3e6:	d107      	bne.n	800b3f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b3f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 faa1 	bl	800b93a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b402:	2b40      	cmp	r3, #64	; 0x40
 800b404:	d10e      	bne.n	800b424 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b410:	2b40      	cmp	r3, #64	; 0x40
 800b412:	d107      	bne.n	800b424 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b41c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 f8fc 	bl	800b61c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	f003 0320 	and.w	r3, r3, #32
 800b42e:	2b20      	cmp	r3, #32
 800b430:	d10e      	bne.n	800b450 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	f003 0320 	and.w	r3, r3, #32
 800b43c:	2b20      	cmp	r3, #32
 800b43e:	d107      	bne.n	800b450 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f06f 0220 	mvn.w	r2, #32
 800b448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 fa6c 	bl	800b928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b450:	bf00      	nop
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d101      	bne.n	800b474 <HAL_TIM_ConfigClockSource+0x1c>
 800b470:	2302      	movs	r3, #2
 800b472:	e0b4      	b.n	800b5de <HAL_TIM_ConfigClockSource+0x186>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2202      	movs	r2, #2
 800b480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b49a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4ac:	d03e      	beq.n	800b52c <HAL_TIM_ConfigClockSource+0xd4>
 800b4ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4b2:	f200 8087 	bhi.w	800b5c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ba:	f000 8086 	beq.w	800b5ca <HAL_TIM_ConfigClockSource+0x172>
 800b4be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4c2:	d87f      	bhi.n	800b5c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4c4:	2b70      	cmp	r3, #112	; 0x70
 800b4c6:	d01a      	beq.n	800b4fe <HAL_TIM_ConfigClockSource+0xa6>
 800b4c8:	2b70      	cmp	r3, #112	; 0x70
 800b4ca:	d87b      	bhi.n	800b5c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4cc:	2b60      	cmp	r3, #96	; 0x60
 800b4ce:	d050      	beq.n	800b572 <HAL_TIM_ConfigClockSource+0x11a>
 800b4d0:	2b60      	cmp	r3, #96	; 0x60
 800b4d2:	d877      	bhi.n	800b5c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4d4:	2b50      	cmp	r3, #80	; 0x50
 800b4d6:	d03c      	beq.n	800b552 <HAL_TIM_ConfigClockSource+0xfa>
 800b4d8:	2b50      	cmp	r3, #80	; 0x50
 800b4da:	d873      	bhi.n	800b5c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4dc:	2b40      	cmp	r3, #64	; 0x40
 800b4de:	d058      	beq.n	800b592 <HAL_TIM_ConfigClockSource+0x13a>
 800b4e0:	2b40      	cmp	r3, #64	; 0x40
 800b4e2:	d86f      	bhi.n	800b5c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4e4:	2b30      	cmp	r3, #48	; 0x30
 800b4e6:	d064      	beq.n	800b5b2 <HAL_TIM_ConfigClockSource+0x15a>
 800b4e8:	2b30      	cmp	r3, #48	; 0x30
 800b4ea:	d86b      	bhi.n	800b5c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4ec:	2b20      	cmp	r3, #32
 800b4ee:	d060      	beq.n	800b5b2 <HAL_TIM_ConfigClockSource+0x15a>
 800b4f0:	2b20      	cmp	r3, #32
 800b4f2:	d867      	bhi.n	800b5c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d05c      	beq.n	800b5b2 <HAL_TIM_ConfigClockSource+0x15a>
 800b4f8:	2b10      	cmp	r3, #16
 800b4fa:	d05a      	beq.n	800b5b2 <HAL_TIM_ConfigClockSource+0x15a>
 800b4fc:	e062      	b.n	800b5c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b50e:	f000 f980 	bl	800b812 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b520:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	609a      	str	r2, [r3, #8]
      break;
 800b52a:	e04f      	b.n	800b5cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b53c:	f000 f969 	bl	800b812 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689a      	ldr	r2, [r3, #8]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b54e:	609a      	str	r2, [r3, #8]
      break;
 800b550:	e03c      	b.n	800b5cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b55e:	461a      	mov	r2, r3
 800b560:	f000 f8e0 	bl	800b724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2150      	movs	r1, #80	; 0x50
 800b56a:	4618      	mov	r0, r3
 800b56c:	f000 f937 	bl	800b7de <TIM_ITRx_SetConfig>
      break;
 800b570:	e02c      	b.n	800b5cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b57e:	461a      	mov	r2, r3
 800b580:	f000 f8fe 	bl	800b780 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2160      	movs	r1, #96	; 0x60
 800b58a:	4618      	mov	r0, r3
 800b58c:	f000 f927 	bl	800b7de <TIM_ITRx_SetConfig>
      break;
 800b590:	e01c      	b.n	800b5cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b59e:	461a      	mov	r2, r3
 800b5a0:	f000 f8c0 	bl	800b724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2140      	movs	r1, #64	; 0x40
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f000 f917 	bl	800b7de <TIM_ITRx_SetConfig>
      break;
 800b5b0:	e00c      	b.n	800b5cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	4610      	mov	r0, r2
 800b5be:	f000 f90e 	bl	800b7de <TIM_ITRx_SetConfig>
      break;
 800b5c2:	e003      	b.n	800b5cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b5c8:	e000      	b.n	800b5cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b5ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5e6:	b480      	push	{r7}
 800b5e8:	b083      	sub	sp, #12
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5ee:	bf00      	nop
 800b5f0:	370c      	adds	r7, #12
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bc80      	pop	{r7}
 800b5f6:	4770      	bx	lr

0800b5f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	bc80      	pop	{r7}
 800b608:	4770      	bx	lr

0800b60a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b083      	sub	sp, #12
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b612:	bf00      	nop
 800b614:	370c      	adds	r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	bc80      	pop	{r7}
 800b61a:	4770      	bx	lr

0800b61c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	bc80      	pop	{r7}
 800b62c:	4770      	bx	lr
	...

0800b630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a33      	ldr	r2, [pc, #204]	; (800b710 <TIM_Base_SetConfig+0xe0>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d013      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a32      	ldr	r2, [pc, #200]	; (800b714 <TIM_Base_SetConfig+0xe4>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d00f      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b656:	d00b      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a2f      	ldr	r2, [pc, #188]	; (800b718 <TIM_Base_SetConfig+0xe8>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d007      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a2e      	ldr	r2, [pc, #184]	; (800b71c <TIM_Base_SetConfig+0xec>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d003      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a2d      	ldr	r2, [pc, #180]	; (800b720 <TIM_Base_SetConfig+0xf0>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d108      	bne.n	800b682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	4313      	orrs	r3, r2
 800b680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4a22      	ldr	r2, [pc, #136]	; (800b710 <TIM_Base_SetConfig+0xe0>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d013      	beq.n	800b6b2 <TIM_Base_SetConfig+0x82>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a21      	ldr	r2, [pc, #132]	; (800b714 <TIM_Base_SetConfig+0xe4>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d00f      	beq.n	800b6b2 <TIM_Base_SetConfig+0x82>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b698:	d00b      	beq.n	800b6b2 <TIM_Base_SetConfig+0x82>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a1e      	ldr	r2, [pc, #120]	; (800b718 <TIM_Base_SetConfig+0xe8>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d007      	beq.n	800b6b2 <TIM_Base_SetConfig+0x82>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a1d      	ldr	r2, [pc, #116]	; (800b71c <TIM_Base_SetConfig+0xec>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d003      	beq.n	800b6b2 <TIM_Base_SetConfig+0x82>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a1c      	ldr	r2, [pc, #112]	; (800b720 <TIM_Base_SetConfig+0xf0>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d108      	bne.n	800b6c4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	695b      	ldr	r3, [r3, #20]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	689a      	ldr	r2, [r3, #8]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4a09      	ldr	r2, [pc, #36]	; (800b710 <TIM_Base_SetConfig+0xe0>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d003      	beq.n	800b6f8 <TIM_Base_SetConfig+0xc8>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a08      	ldr	r2, [pc, #32]	; (800b714 <TIM_Base_SetConfig+0xe4>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d103      	bne.n	800b700 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	691a      	ldr	r2, [r3, #16]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2201      	movs	r2, #1
 800b704:	615a      	str	r2, [r3, #20]
}
 800b706:	bf00      	nop
 800b708:	3714      	adds	r7, #20
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bc80      	pop	{r7}
 800b70e:	4770      	bx	lr
 800b710:	40012c00 	.word	0x40012c00
 800b714:	40013400 	.word	0x40013400
 800b718:	40000400 	.word	0x40000400
 800b71c:	40000800 	.word	0x40000800
 800b720:	40000c00 	.word	0x40000c00

0800b724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6a1b      	ldr	r3, [r3, #32]
 800b734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	f023 0201 	bic.w	r2, r3, #1
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b74e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	011b      	lsls	r3, r3, #4
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	4313      	orrs	r3, r2
 800b758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f023 030a 	bic.w	r3, r3, #10
 800b760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b762:	697a      	ldr	r2, [r7, #20]
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	4313      	orrs	r3, r2
 800b768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	693a      	ldr	r2, [r7, #16]
 800b76e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	621a      	str	r2, [r3, #32]
}
 800b776:	bf00      	nop
 800b778:	371c      	adds	r7, #28
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bc80      	pop	{r7}
 800b77e:	4770      	bx	lr

0800b780 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b780:	b480      	push	{r7}
 800b782:	b087      	sub	sp, #28
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6a1b      	ldr	r3, [r3, #32]
 800b790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	6a1b      	ldr	r3, [r3, #32]
 800b796:	f023 0210 	bic.w	r2, r3, #16
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	699b      	ldr	r3, [r3, #24]
 800b7a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	031b      	lsls	r3, r3, #12
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	011b      	lsls	r3, r3, #4
 800b7c2:	697a      	ldr	r2, [r7, #20]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	693a      	ldr	r2, [r7, #16]
 800b7cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	697a      	ldr	r2, [r7, #20]
 800b7d2:	621a      	str	r2, [r3, #32]
}
 800b7d4:	bf00      	nop
 800b7d6:	371c      	adds	r7, #28
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bc80      	pop	{r7}
 800b7dc:	4770      	bx	lr

0800b7de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b085      	sub	sp, #20
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7f6:	683a      	ldr	r2, [r7, #0]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	f043 0307 	orr.w	r3, r3, #7
 800b800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	609a      	str	r2, [r3, #8]
}
 800b808:	bf00      	nop
 800b80a:	3714      	adds	r7, #20
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bc80      	pop	{r7}
 800b810:	4770      	bx	lr

0800b812 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b812:	b480      	push	{r7}
 800b814:	b087      	sub	sp, #28
 800b816:	af00      	add	r7, sp, #0
 800b818:	60f8      	str	r0, [r7, #12]
 800b81a:	60b9      	str	r1, [r7, #8]
 800b81c:	607a      	str	r2, [r7, #4]
 800b81e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b82c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	021a      	lsls	r2, r3, #8
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	431a      	orrs	r2, r3
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	4313      	orrs	r3, r2
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	609a      	str	r2, [r3, #8]
}
 800b846:	bf00      	nop
 800b848:	371c      	adds	r7, #28
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bc80      	pop	{r7}
 800b84e:	4770      	bx	lr

0800b850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b860:	2b01      	cmp	r3, #1
 800b862:	d101      	bne.n	800b868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b864:	2302      	movs	r3, #2
 800b866:	e050      	b.n	800b90a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2202      	movs	r2, #2
 800b874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b88e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	4313      	orrs	r3, r2
 800b898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a1b      	ldr	r2, [pc, #108]	; (800b914 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d018      	beq.n	800b8de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a19      	ldr	r2, [pc, #100]	; (800b918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d013      	beq.n	800b8de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8be:	d00e      	beq.n	800b8de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a15      	ldr	r2, [pc, #84]	; (800b91c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d009      	beq.n	800b8de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a14      	ldr	r2, [pc, #80]	; (800b920 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d004      	beq.n	800b8de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a12      	ldr	r2, [pc, #72]	; (800b924 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d10c      	bne.n	800b8f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	bc80      	pop	{r7}
 800b912:	4770      	bx	lr
 800b914:	40012c00 	.word	0x40012c00
 800b918:	40013400 	.word	0x40013400
 800b91c:	40000400 	.word	0x40000400
 800b920:	40000800 	.word	0x40000800
 800b924:	40000c00 	.word	0x40000c00

0800b928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b930:	bf00      	nop
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	bc80      	pop	{r7}
 800b938:	4770      	bx	lr

0800b93a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b083      	sub	sp, #12
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b942:	bf00      	nop
 800b944:	370c      	adds	r7, #12
 800b946:	46bd      	mov	sp, r7
 800b948:	bc80      	pop	{r7}
 800b94a:	4770      	bx	lr

0800b94c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d101      	bne.n	800b95e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e042      	b.n	800b9e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b00      	cmp	r3, #0
 800b968:	d106      	bne.n	800b978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7fc fe1a 	bl	80085ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2224      	movs	r2, #36	; 0x24
 800b97c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	68da      	ldr	r2, [r3, #12]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b98e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 fcb5 	bl	800c300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	691a      	ldr	r2, [r3, #16]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	695a      	ldr	r2, [r3, #20]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68da      	ldr	r2, [r3, #12]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b9c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2220      	movs	r2, #32
 800b9d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b20      	cmp	r3, #32
 800ba04:	d121      	bne.n	800ba4a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d002      	beq.n	800ba12 <HAL_UART_Transmit_IT+0x26>
 800ba0c:	88fb      	ldrh	r3, [r7, #6]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d101      	bne.n	800ba16 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e01a      	b.n	800ba4c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	68ba      	ldr	r2, [r7, #8]
 800ba1a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	88fa      	ldrh	r2, [r7, #6]
 800ba20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	88fa      	ldrh	r2, [r7, #6]
 800ba26:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2221      	movs	r2, #33	; 0x21
 800ba32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	68da      	ldr	r2, [r3, #12]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ba44:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	e000      	b.n	800ba4c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800ba4a:	2302      	movs	r3, #2
  }
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bc80      	pop	{r7}
 800ba54:	4770      	bx	lr
	...

0800ba58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b0ba      	sub	sp, #232	; 0xe8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	695b      	ldr	r3, [r3, #20]
 800ba7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba8e:	f003 030f 	and.w	r3, r3, #15
 800ba92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ba96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10f      	bne.n	800babe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baa2:	f003 0320 	and.w	r3, r3, #32
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d009      	beq.n	800babe <HAL_UART_IRQHandler+0x66>
 800baaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baae:	f003 0320 	and.w	r3, r3, #32
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d003      	beq.n	800babe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fb63 	bl	800c182 <UART_Receive_IT>
      return;
 800babc:	e25b      	b.n	800bf76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800babe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f000 80de 	beq.w	800bc84 <HAL_UART_IRQHandler+0x22c>
 800bac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bacc:	f003 0301 	and.w	r3, r3, #1
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d106      	bne.n	800bae2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bad8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800badc:	2b00      	cmp	r3, #0
 800bade:	f000 80d1 	beq.w	800bc84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bae6:	f003 0301 	and.w	r3, r3, #1
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00b      	beq.n	800bb06 <HAL_UART_IRQHandler+0xae>
 800baee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d005      	beq.n	800bb06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bafe:	f043 0201 	orr.w	r2, r3, #1
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb0a:	f003 0304 	and.w	r3, r3, #4
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00b      	beq.n	800bb2a <HAL_UART_IRQHandler+0xd2>
 800bb12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d005      	beq.n	800bb2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb22:	f043 0202 	orr.w	r2, r3, #2
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb2e:	f003 0302 	and.w	r3, r3, #2
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00b      	beq.n	800bb4e <HAL_UART_IRQHandler+0xf6>
 800bb36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d005      	beq.n	800bb4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb46:	f043 0204 	orr.w	r2, r3, #4
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bb4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb52:	f003 0308 	and.w	r3, r3, #8
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d011      	beq.n	800bb7e <HAL_UART_IRQHandler+0x126>
 800bb5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb5e:	f003 0320 	and.w	r3, r3, #32
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d105      	bne.n	800bb72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d005      	beq.n	800bb7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb76:	f043 0208 	orr.w	r2, r3, #8
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f000 81f2 	beq.w	800bf6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb8c:	f003 0320 	and.w	r3, r3, #32
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d008      	beq.n	800bba6 <HAL_UART_IRQHandler+0x14e>
 800bb94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb98:	f003 0320 	and.w	r3, r3, #32
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 faee 	bl	800c182 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	695b      	ldr	r3, [r3, #20]
 800bbac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	bf14      	ite	ne
 800bbb4:	2301      	movne	r3, #1
 800bbb6:	2300      	moveq	r3, #0
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbc2:	f003 0308 	and.w	r3, r3, #8
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d103      	bne.n	800bbd2 <HAL_UART_IRQHandler+0x17a>
 800bbca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d04f      	beq.n	800bc72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f9f8 	bl	800bfc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	695b      	ldr	r3, [r3, #20]
 800bbde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d041      	beq.n	800bc6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	3314      	adds	r3, #20
 800bbec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbf4:	e853 3f00 	ldrex	r3, [r3]
 800bbf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bbfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bc00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3314      	adds	r3, #20
 800bc0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bc12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bc16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bc1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bc22:	e841 2300 	strex	r3, r2, [r1]
 800bc26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bc2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1d9      	bne.n	800bbe6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d013      	beq.n	800bc62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3e:	4a7e      	ldr	r2, [pc, #504]	; (800be38 <HAL_UART_IRQHandler+0x3e0>)
 800bc40:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fd f86c 	bl	8008d24 <HAL_DMA_Abort_IT>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d016      	beq.n	800bc80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc60:	e00e      	b.n	800bc80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 f99c 	bl	800bfa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc68:	e00a      	b.n	800bc80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 f998 	bl	800bfa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc70:	e006      	b.n	800bc80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f994 	bl	800bfa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bc7e:	e175      	b.n	800bf6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc80:	bf00      	nop
    return;
 800bc82:	e173      	b.n	800bf6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	f040 814f 	bne.w	800bf2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bc8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc92:	f003 0310 	and.w	r3, r3, #16
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f000 8148 	beq.w	800bf2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bca0:	f003 0310 	and.w	r3, r3, #16
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f000 8141 	beq.w	800bf2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bcaa:	2300      	movs	r3, #0
 800bcac:	60bb      	str	r3, [r7, #8]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	60bb      	str	r3, [r7, #8]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	60bb      	str	r3, [r7, #8]
 800bcbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	695b      	ldr	r3, [r3, #20]
 800bcc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f000 80b6 	beq.w	800be3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bcdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 8145 	beq.w	800bf70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bcea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	f080 813e 	bcs.w	800bf70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcfa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd00:	699b      	ldr	r3, [r3, #24]
 800bd02:	2b20      	cmp	r3, #32
 800bd04:	f000 8088 	beq.w	800be18 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	330c      	adds	r3, #12
 800bd0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd16:	e853 3f00 	ldrex	r3, [r3]
 800bd1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bd1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	330c      	adds	r3, #12
 800bd30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bd34:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bd38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bd40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bd44:	e841 2300 	strex	r3, r2, [r1]
 800bd48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bd4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1d9      	bne.n	800bd08 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	3314      	adds	r3, #20
 800bd5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd5e:	e853 3f00 	ldrex	r3, [r3]
 800bd62:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd66:	f023 0301 	bic.w	r3, r3, #1
 800bd6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3314      	adds	r3, #20
 800bd74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bd78:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd7c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd84:	e841 2300 	strex	r3, r2, [r1]
 800bd88:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d1e1      	bne.n	800bd54 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	3314      	adds	r3, #20
 800bd96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd9a:	e853 3f00 	ldrex	r3, [r3]
 800bd9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bda0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bda2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bda6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	3314      	adds	r3, #20
 800bdb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bdb4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bdb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bdba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bdbc:	e841 2300 	strex	r3, r2, [r1]
 800bdc0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bdc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d1e3      	bne.n	800bd90 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2220      	movs	r2, #32
 800bdcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	330c      	adds	r3, #12
 800bddc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bde0:	e853 3f00 	ldrex	r3, [r3]
 800bde4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bde6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bde8:	f023 0310 	bic.w	r3, r3, #16
 800bdec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	330c      	adds	r3, #12
 800bdf6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bdfa:	65ba      	str	r2, [r7, #88]	; 0x58
 800bdfc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be02:	e841 2300 	strex	r3, r2, [r1]
 800be06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d1e3      	bne.n	800bdd6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be12:	4618      	mov	r0, r3
 800be14:	f7fc ff4b 	bl	8008cae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2202      	movs	r2, #2
 800be1c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be26:	b29b      	uxth	r3, r3
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	4619      	mov	r1, r3
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 f8bf 	bl	800bfb2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be34:	e09c      	b.n	800bf70 <HAL_UART_IRQHandler+0x518>
 800be36:	bf00      	nop
 800be38:	0800c08d 	.word	0x0800c08d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be44:	b29b      	uxth	r3, r3
 800be46:	1ad3      	subs	r3, r2, r3
 800be48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be50:	b29b      	uxth	r3, r3
 800be52:	2b00      	cmp	r3, #0
 800be54:	f000 808e 	beq.w	800bf74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800be58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f000 8089 	beq.w	800bf74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	330c      	adds	r3, #12
 800be68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6c:	e853 3f00 	ldrex	r3, [r3]
 800be70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	330c      	adds	r3, #12
 800be82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be86:	647a      	str	r2, [r7, #68]	; 0x44
 800be88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be8e:	e841 2300 	strex	r3, r2, [r1]
 800be92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1e3      	bne.n	800be62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	3314      	adds	r3, #20
 800bea0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea4:	e853 3f00 	ldrex	r3, [r3]
 800bea8:	623b      	str	r3, [r7, #32]
   return(result);
 800beaa:	6a3b      	ldr	r3, [r7, #32]
 800beac:	f023 0301 	bic.w	r3, r3, #1
 800beb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	3314      	adds	r3, #20
 800beba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bebe:	633a      	str	r2, [r7, #48]	; 0x30
 800bec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bec6:	e841 2300 	strex	r3, r2, [r1]
 800beca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800becc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1e3      	bne.n	800be9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2220      	movs	r2, #32
 800bed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	330c      	adds	r3, #12
 800bee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	e853 3f00 	ldrex	r3, [r3]
 800beee:	60fb      	str	r3, [r7, #12]
   return(result);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f023 0310 	bic.w	r3, r3, #16
 800bef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	330c      	adds	r3, #12
 800bf00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bf04:	61fa      	str	r2, [r7, #28]
 800bf06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf08:	69b9      	ldr	r1, [r7, #24]
 800bf0a:	69fa      	ldr	r2, [r7, #28]
 800bf0c:	e841 2300 	strex	r3, r2, [r1]
 800bf10:	617b      	str	r3, [r7, #20]
   return(result);
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d1e3      	bne.n	800bee0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2202      	movs	r2, #2
 800bf1c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf22:	4619      	mov	r1, r3
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 f844 	bl	800bfb2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bf2a:	e023      	b.n	800bf74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bf2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d009      	beq.n	800bf4c <HAL_UART_IRQHandler+0x4f4>
 800bf38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d003      	beq.n	800bf4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 f8b5 	bl	800c0b4 <UART_Transmit_IT>
    return;
 800bf4a:	e014      	b.n	800bf76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bf4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00e      	beq.n	800bf76 <HAL_UART_IRQHandler+0x51e>
 800bf58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d008      	beq.n	800bf76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 f8f4 	bl	800c152 <UART_EndTransmit_IT>
    return;
 800bf6a:	e004      	b.n	800bf76 <HAL_UART_IRQHandler+0x51e>
    return;
 800bf6c:	bf00      	nop
 800bf6e:	e002      	b.n	800bf76 <HAL_UART_IRQHandler+0x51e>
      return;
 800bf70:	bf00      	nop
 800bf72:	e000      	b.n	800bf76 <HAL_UART_IRQHandler+0x51e>
      return;
 800bf74:	bf00      	nop
  }
}
 800bf76:	37e8      	adds	r7, #232	; 0xe8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bf84:	bf00      	nop
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bc80      	pop	{r7}
 800bf8c:	4770      	bx	lr

0800bf8e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf8e:	b480      	push	{r7}
 800bf90:	b083      	sub	sp, #12
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bf96:	bf00      	nop
 800bf98:	370c      	adds	r7, #12
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bc80      	pop	{r7}
 800bf9e:	4770      	bx	lr

0800bfa0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bc80      	pop	{r7}
 800bfb0:	4770      	bx	lr

0800bfb2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bfb2:	b480      	push	{r7}
 800bfb4:	b083      	sub	sp, #12
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
 800bfba:	460b      	mov	r3, r1
 800bfbc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bfbe:	bf00      	nop
 800bfc0:	370c      	adds	r7, #12
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bc80      	pop	{r7}
 800bfc6:	4770      	bx	lr

0800bfc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b095      	sub	sp, #84	; 0x54
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	330c      	adds	r3, #12
 800bfd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfda:	e853 3f00 	ldrex	r3, [r3]
 800bfde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	330c      	adds	r3, #12
 800bfee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bff0:	643a      	str	r2, [r7, #64]	; 0x40
 800bff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bff6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bff8:	e841 2300 	strex	r3, r2, [r1]
 800bffc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1e5      	bne.n	800bfd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	3314      	adds	r3, #20
 800c00a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00c:	6a3b      	ldr	r3, [r7, #32]
 800c00e:	e853 3f00 	ldrex	r3, [r3]
 800c012:	61fb      	str	r3, [r7, #28]
   return(result);
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	f023 0301 	bic.w	r3, r3, #1
 800c01a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	3314      	adds	r3, #20
 800c022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c024:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c02a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c02c:	e841 2300 	strex	r3, r2, [r1]
 800c030:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c034:	2b00      	cmp	r3, #0
 800c036:	d1e5      	bne.n	800c004 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d119      	bne.n	800c074 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	330c      	adds	r3, #12
 800c046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	e853 3f00 	ldrex	r3, [r3]
 800c04e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	f023 0310 	bic.w	r3, r3, #16
 800c056:	647b      	str	r3, [r7, #68]	; 0x44
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	330c      	adds	r3, #12
 800c05e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c060:	61ba      	str	r2, [r7, #24]
 800c062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c064:	6979      	ldr	r1, [r7, #20]
 800c066:	69ba      	ldr	r2, [r7, #24]
 800c068:	e841 2300 	strex	r3, r2, [r1]
 800c06c:	613b      	str	r3, [r7, #16]
   return(result);
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1e5      	bne.n	800c040 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2220      	movs	r2, #32
 800c078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c082:	bf00      	nop
 800c084:	3754      	adds	r7, #84	; 0x54
 800c086:	46bd      	mov	sp, r7
 800c088:	bc80      	pop	{r7}
 800c08a:	4770      	bx	lr

0800c08c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c098:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2200      	movs	r2, #0
 800c09e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f7ff ff7a 	bl	800bfa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0ac:	bf00      	nop
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	2b21      	cmp	r3, #33	; 0x21
 800c0c6:	d13e      	bne.n	800c146 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0d0:	d114      	bne.n	800c0fc <UART_Transmit_IT+0x48>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	691b      	ldr	r3, [r3, #16]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d110      	bne.n	800c0fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6a1b      	ldr	r3, [r3, #32]
 800c0de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	881b      	ldrh	r3, [r3, #0]
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6a1b      	ldr	r3, [r3, #32]
 800c0f4:	1c9a      	adds	r2, r3, #2
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	621a      	str	r2, [r3, #32]
 800c0fa:	e008      	b.n	800c10e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6a1b      	ldr	r3, [r3, #32]
 800c100:	1c59      	adds	r1, r3, #1
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	6211      	str	r1, [r2, #32]
 800c106:	781a      	ldrb	r2, [r3, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c112:	b29b      	uxth	r3, r3
 800c114:	3b01      	subs	r3, #1
 800c116:	b29b      	uxth	r3, r3
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	4619      	mov	r1, r3
 800c11c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10f      	bne.n	800c142 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68da      	ldr	r2, [r3, #12]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c130:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68da      	ldr	r2, [r3, #12]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c140:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	e000      	b.n	800c148 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c146:	2302      	movs	r3, #2
  }
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3714      	adds	r7, #20
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bc80      	pop	{r7}
 800c150:	4770      	bx	lr

0800c152 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b082      	sub	sp, #8
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68da      	ldr	r2, [r3, #12]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c168:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2220      	movs	r2, #32
 800c16e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f7ff ff02 	bl	800bf7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3708      	adds	r7, #8
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b08c      	sub	sp, #48	; 0x30
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c190:	b2db      	uxtb	r3, r3
 800c192:	2b22      	cmp	r3, #34	; 0x22
 800c194:	f040 80ae 	bne.w	800c2f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1a0:	d117      	bne.n	800c1d2 <UART_Receive_IT+0x50>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	691b      	ldr	r3, [r3, #16]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d113      	bne.n	800c1d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ca:	1c9a      	adds	r2, r3, #2
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	629a      	str	r2, [r3, #40]	; 0x28
 800c1d0:	e026      	b.n	800c220 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1e4:	d007      	beq.n	800c1f6 <UART_Receive_IT+0x74>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d10a      	bne.n	800c204 <UART_Receive_IT+0x82>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d106      	bne.n	800c204 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	b2da      	uxtb	r2, r3
 800c1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c200:	701a      	strb	r2, [r3, #0]
 800c202:	e008      	b.n	800c216 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c210:	b2da      	uxtb	r2, r3
 800c212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c214:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c21a:	1c5a      	adds	r2, r3, #1
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c224:	b29b      	uxth	r3, r3
 800c226:	3b01      	subs	r3, #1
 800c228:	b29b      	uxth	r3, r3
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	4619      	mov	r1, r3
 800c22e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c230:	2b00      	cmp	r3, #0
 800c232:	d15d      	bne.n	800c2f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68da      	ldr	r2, [r3, #12]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f022 0220 	bic.w	r2, r2, #32
 800c242:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68da      	ldr	r2, [r3, #12]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c252:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	695a      	ldr	r2, [r3, #20]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f022 0201 	bic.w	r2, r2, #1
 800c262:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2220      	movs	r2, #32
 800c268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c276:	2b01      	cmp	r3, #1
 800c278:	d135      	bne.n	800c2e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	330c      	adds	r3, #12
 800c286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	e853 3f00 	ldrex	r3, [r3]
 800c28e:	613b      	str	r3, [r7, #16]
   return(result);
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	f023 0310 	bic.w	r3, r3, #16
 800c296:	627b      	str	r3, [r7, #36]	; 0x24
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	330c      	adds	r3, #12
 800c29e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2a0:	623a      	str	r2, [r7, #32]
 800c2a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a4:	69f9      	ldr	r1, [r7, #28]
 800c2a6:	6a3a      	ldr	r2, [r7, #32]
 800c2a8:	e841 2300 	strex	r3, r2, [r1]
 800c2ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d1e5      	bne.n	800c280 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f003 0310 	and.w	r3, r3, #16
 800c2be:	2b10      	cmp	r3, #16
 800c2c0:	d10a      	bne.n	800c2d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	60fb      	str	r3, [r7, #12]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	60fb      	str	r3, [r7, #12]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7ff fe67 	bl	800bfb2 <HAL_UARTEx_RxEventCallback>
 800c2e4:	e002      	b.n	800c2ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7ff fe51 	bl	800bf8e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	e002      	b.n	800c2f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	e000      	b.n	800c2f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c2f4:	2302      	movs	r3, #2
  }
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3730      	adds	r7, #48	; 0x30
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
	...

0800c300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	691b      	ldr	r3, [r3, #16]
 800c30e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	68da      	ldr	r2, [r3, #12]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	430a      	orrs	r2, r1
 800c31c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	689a      	ldr	r2, [r3, #8]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	691b      	ldr	r3, [r3, #16]
 800c326:	431a      	orrs	r2, r3
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	695b      	ldr	r3, [r3, #20]
 800c32c:	4313      	orrs	r3, r2
 800c32e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c33a:	f023 030c 	bic.w	r3, r3, #12
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	6812      	ldr	r2, [r2, #0]
 800c342:	68b9      	ldr	r1, [r7, #8]
 800c344:	430b      	orrs	r3, r1
 800c346:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	695b      	ldr	r3, [r3, #20]
 800c34e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	699a      	ldr	r2, [r3, #24]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	430a      	orrs	r2, r1
 800c35c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a2c      	ldr	r2, [pc, #176]	; (800c414 <UART_SetConfig+0x114>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d103      	bne.n	800c370 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c368:	f7fe fe8c 	bl	800b084 <HAL_RCC_GetPCLK2Freq>
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	e002      	b.n	800c376 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c370:	f7fe fe74 	bl	800b05c <HAL_RCC_GetPCLK1Freq>
 800c374:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	4613      	mov	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4413      	add	r3, r2
 800c37e:	009a      	lsls	r2, r3, #2
 800c380:	441a      	add	r2, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	fbb2 f3f3 	udiv	r3, r2, r3
 800c38c:	4a22      	ldr	r2, [pc, #136]	; (800c418 <UART_SetConfig+0x118>)
 800c38e:	fba2 2303 	umull	r2, r3, r2, r3
 800c392:	095b      	lsrs	r3, r3, #5
 800c394:	0119      	lsls	r1, r3, #4
 800c396:	68fa      	ldr	r2, [r7, #12]
 800c398:	4613      	mov	r3, r2
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	4413      	add	r3, r2
 800c39e:	009a      	lsls	r2, r3, #2
 800c3a0:	441a      	add	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	fbb2 f2f3 	udiv	r2, r2, r3
 800c3ac:	4b1a      	ldr	r3, [pc, #104]	; (800c418 <UART_SetConfig+0x118>)
 800c3ae:	fba3 0302 	umull	r0, r3, r3, r2
 800c3b2:	095b      	lsrs	r3, r3, #5
 800c3b4:	2064      	movs	r0, #100	; 0x64
 800c3b6:	fb00 f303 	mul.w	r3, r0, r3
 800c3ba:	1ad3      	subs	r3, r2, r3
 800c3bc:	011b      	lsls	r3, r3, #4
 800c3be:	3332      	adds	r3, #50	; 0x32
 800c3c0:	4a15      	ldr	r2, [pc, #84]	; (800c418 <UART_SetConfig+0x118>)
 800c3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3c6:	095b      	lsrs	r3, r3, #5
 800c3c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3cc:	4419      	add	r1, r3
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	4413      	add	r3, r2
 800c3d6:	009a      	lsls	r2, r3, #2
 800c3d8:	441a      	add	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c3e4:	4b0c      	ldr	r3, [pc, #48]	; (800c418 <UART_SetConfig+0x118>)
 800c3e6:	fba3 0302 	umull	r0, r3, r3, r2
 800c3ea:	095b      	lsrs	r3, r3, #5
 800c3ec:	2064      	movs	r0, #100	; 0x64
 800c3ee:	fb00 f303 	mul.w	r3, r0, r3
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	011b      	lsls	r3, r3, #4
 800c3f6:	3332      	adds	r3, #50	; 0x32
 800c3f8:	4a07      	ldr	r2, [pc, #28]	; (800c418 <UART_SetConfig+0x118>)
 800c3fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c3fe:	095b      	lsrs	r3, r3, #5
 800c400:	f003 020f 	and.w	r2, r3, #15
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	440a      	add	r2, r1
 800c40a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c40c:	bf00      	nop
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	40013800 	.word	0x40013800
 800c418:	51eb851f 	.word	0x51eb851f

0800c41c <__itoa>:
 800c41c:	1e93      	subs	r3, r2, #2
 800c41e:	2b22      	cmp	r3, #34	; 0x22
 800c420:	b510      	push	{r4, lr}
 800c422:	460c      	mov	r4, r1
 800c424:	d904      	bls.n	800c430 <__itoa+0x14>
 800c426:	2300      	movs	r3, #0
 800c428:	461c      	mov	r4, r3
 800c42a:	700b      	strb	r3, [r1, #0]
 800c42c:	4620      	mov	r0, r4
 800c42e:	bd10      	pop	{r4, pc}
 800c430:	2a0a      	cmp	r2, #10
 800c432:	d109      	bne.n	800c448 <__itoa+0x2c>
 800c434:	2800      	cmp	r0, #0
 800c436:	da07      	bge.n	800c448 <__itoa+0x2c>
 800c438:	232d      	movs	r3, #45	; 0x2d
 800c43a:	700b      	strb	r3, [r1, #0]
 800c43c:	2101      	movs	r1, #1
 800c43e:	4240      	negs	r0, r0
 800c440:	4421      	add	r1, r4
 800c442:	f000 f8d9 	bl	800c5f8 <__utoa>
 800c446:	e7f1      	b.n	800c42c <__itoa+0x10>
 800c448:	2100      	movs	r1, #0
 800c44a:	e7f9      	b.n	800c440 <__itoa+0x24>

0800c44c <itoa>:
 800c44c:	f7ff bfe6 	b.w	800c41c <__itoa>

0800c450 <malloc>:
 800c450:	4b02      	ldr	r3, [pc, #8]	; (800c45c <malloc+0xc>)
 800c452:	4601      	mov	r1, r0
 800c454:	6818      	ldr	r0, [r3, #0]
 800c456:	f000 b823 	b.w	800c4a0 <_malloc_r>
 800c45a:	bf00      	nop
 800c45c:	20000108 	.word	0x20000108

0800c460 <sbrk_aligned>:
 800c460:	b570      	push	{r4, r5, r6, lr}
 800c462:	4e0e      	ldr	r6, [pc, #56]	; (800c49c <sbrk_aligned+0x3c>)
 800c464:	460c      	mov	r4, r1
 800c466:	6831      	ldr	r1, [r6, #0]
 800c468:	4605      	mov	r5, r0
 800c46a:	b911      	cbnz	r1, 800c472 <sbrk_aligned+0x12>
 800c46c:	f000 f91e 	bl	800c6ac <_sbrk_r>
 800c470:	6030      	str	r0, [r6, #0]
 800c472:	4621      	mov	r1, r4
 800c474:	4628      	mov	r0, r5
 800c476:	f000 f919 	bl	800c6ac <_sbrk_r>
 800c47a:	1c43      	adds	r3, r0, #1
 800c47c:	d00a      	beq.n	800c494 <sbrk_aligned+0x34>
 800c47e:	1cc4      	adds	r4, r0, #3
 800c480:	f024 0403 	bic.w	r4, r4, #3
 800c484:	42a0      	cmp	r0, r4
 800c486:	d007      	beq.n	800c498 <sbrk_aligned+0x38>
 800c488:	1a21      	subs	r1, r4, r0
 800c48a:	4628      	mov	r0, r5
 800c48c:	f000 f90e 	bl	800c6ac <_sbrk_r>
 800c490:	3001      	adds	r0, #1
 800c492:	d101      	bne.n	800c498 <sbrk_aligned+0x38>
 800c494:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c498:	4620      	mov	r0, r4
 800c49a:	bd70      	pop	{r4, r5, r6, pc}
 800c49c:	2000049c 	.word	0x2000049c

0800c4a0 <_malloc_r>:
 800c4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4a4:	1ccd      	adds	r5, r1, #3
 800c4a6:	f025 0503 	bic.w	r5, r5, #3
 800c4aa:	3508      	adds	r5, #8
 800c4ac:	2d0c      	cmp	r5, #12
 800c4ae:	bf38      	it	cc
 800c4b0:	250c      	movcc	r5, #12
 800c4b2:	2d00      	cmp	r5, #0
 800c4b4:	4607      	mov	r7, r0
 800c4b6:	db01      	blt.n	800c4bc <_malloc_r+0x1c>
 800c4b8:	42a9      	cmp	r1, r5
 800c4ba:	d905      	bls.n	800c4c8 <_malloc_r+0x28>
 800c4bc:	230c      	movs	r3, #12
 800c4be:	2600      	movs	r6, #0
 800c4c0:	603b      	str	r3, [r7, #0]
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c59c <_malloc_r+0xfc>
 800c4cc:	f000 f868 	bl	800c5a0 <__malloc_lock>
 800c4d0:	f8d8 3000 	ldr.w	r3, [r8]
 800c4d4:	461c      	mov	r4, r3
 800c4d6:	bb5c      	cbnz	r4, 800c530 <_malloc_r+0x90>
 800c4d8:	4629      	mov	r1, r5
 800c4da:	4638      	mov	r0, r7
 800c4dc:	f7ff ffc0 	bl	800c460 <sbrk_aligned>
 800c4e0:	1c43      	adds	r3, r0, #1
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	d155      	bne.n	800c592 <_malloc_r+0xf2>
 800c4e6:	f8d8 4000 	ldr.w	r4, [r8]
 800c4ea:	4626      	mov	r6, r4
 800c4ec:	2e00      	cmp	r6, #0
 800c4ee:	d145      	bne.n	800c57c <_malloc_r+0xdc>
 800c4f0:	2c00      	cmp	r4, #0
 800c4f2:	d048      	beq.n	800c586 <_malloc_r+0xe6>
 800c4f4:	6823      	ldr	r3, [r4, #0]
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	eb04 0903 	add.w	r9, r4, r3
 800c4fe:	f000 f8d5 	bl	800c6ac <_sbrk_r>
 800c502:	4581      	cmp	r9, r0
 800c504:	d13f      	bne.n	800c586 <_malloc_r+0xe6>
 800c506:	6821      	ldr	r1, [r4, #0]
 800c508:	4638      	mov	r0, r7
 800c50a:	1a6d      	subs	r5, r5, r1
 800c50c:	4629      	mov	r1, r5
 800c50e:	f7ff ffa7 	bl	800c460 <sbrk_aligned>
 800c512:	3001      	adds	r0, #1
 800c514:	d037      	beq.n	800c586 <_malloc_r+0xe6>
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	442b      	add	r3, r5
 800c51a:	6023      	str	r3, [r4, #0]
 800c51c:	f8d8 3000 	ldr.w	r3, [r8]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d038      	beq.n	800c596 <_malloc_r+0xf6>
 800c524:	685a      	ldr	r2, [r3, #4]
 800c526:	42a2      	cmp	r2, r4
 800c528:	d12b      	bne.n	800c582 <_malloc_r+0xe2>
 800c52a:	2200      	movs	r2, #0
 800c52c:	605a      	str	r2, [r3, #4]
 800c52e:	e00f      	b.n	800c550 <_malloc_r+0xb0>
 800c530:	6822      	ldr	r2, [r4, #0]
 800c532:	1b52      	subs	r2, r2, r5
 800c534:	d41f      	bmi.n	800c576 <_malloc_r+0xd6>
 800c536:	2a0b      	cmp	r2, #11
 800c538:	d917      	bls.n	800c56a <_malloc_r+0xca>
 800c53a:	1961      	adds	r1, r4, r5
 800c53c:	42a3      	cmp	r3, r4
 800c53e:	6025      	str	r5, [r4, #0]
 800c540:	bf18      	it	ne
 800c542:	6059      	strne	r1, [r3, #4]
 800c544:	6863      	ldr	r3, [r4, #4]
 800c546:	bf08      	it	eq
 800c548:	f8c8 1000 	streq.w	r1, [r8]
 800c54c:	5162      	str	r2, [r4, r5]
 800c54e:	604b      	str	r3, [r1, #4]
 800c550:	4638      	mov	r0, r7
 800c552:	f104 060b 	add.w	r6, r4, #11
 800c556:	f000 f829 	bl	800c5ac <__malloc_unlock>
 800c55a:	f026 0607 	bic.w	r6, r6, #7
 800c55e:	1d23      	adds	r3, r4, #4
 800c560:	1af2      	subs	r2, r6, r3
 800c562:	d0ae      	beq.n	800c4c2 <_malloc_r+0x22>
 800c564:	1b9b      	subs	r3, r3, r6
 800c566:	50a3      	str	r3, [r4, r2]
 800c568:	e7ab      	b.n	800c4c2 <_malloc_r+0x22>
 800c56a:	42a3      	cmp	r3, r4
 800c56c:	6862      	ldr	r2, [r4, #4]
 800c56e:	d1dd      	bne.n	800c52c <_malloc_r+0x8c>
 800c570:	f8c8 2000 	str.w	r2, [r8]
 800c574:	e7ec      	b.n	800c550 <_malloc_r+0xb0>
 800c576:	4623      	mov	r3, r4
 800c578:	6864      	ldr	r4, [r4, #4]
 800c57a:	e7ac      	b.n	800c4d6 <_malloc_r+0x36>
 800c57c:	4634      	mov	r4, r6
 800c57e:	6876      	ldr	r6, [r6, #4]
 800c580:	e7b4      	b.n	800c4ec <_malloc_r+0x4c>
 800c582:	4613      	mov	r3, r2
 800c584:	e7cc      	b.n	800c520 <_malloc_r+0x80>
 800c586:	230c      	movs	r3, #12
 800c588:	4638      	mov	r0, r7
 800c58a:	603b      	str	r3, [r7, #0]
 800c58c:	f000 f80e 	bl	800c5ac <__malloc_unlock>
 800c590:	e797      	b.n	800c4c2 <_malloc_r+0x22>
 800c592:	6025      	str	r5, [r4, #0]
 800c594:	e7dc      	b.n	800c550 <_malloc_r+0xb0>
 800c596:	605b      	str	r3, [r3, #4]
 800c598:	deff      	udf	#255	; 0xff
 800c59a:	bf00      	nop
 800c59c:	20000498 	.word	0x20000498

0800c5a0 <__malloc_lock>:
 800c5a0:	4801      	ldr	r0, [pc, #4]	; (800c5a8 <__malloc_lock+0x8>)
 800c5a2:	f000 b8bd 	b.w	800c720 <__retarget_lock_acquire_recursive>
 800c5a6:	bf00      	nop
 800c5a8:	200005d8 	.word	0x200005d8

0800c5ac <__malloc_unlock>:
 800c5ac:	4801      	ldr	r0, [pc, #4]	; (800c5b4 <__malloc_unlock+0x8>)
 800c5ae:	f000 b8b8 	b.w	800c722 <__retarget_lock_release_recursive>
 800c5b2:	bf00      	nop
 800c5b4:	200005d8 	.word	0x200005d8

0800c5b8 <siprintf>:
 800c5b8:	b40e      	push	{r1, r2, r3}
 800c5ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5be:	b500      	push	{lr}
 800c5c0:	b09c      	sub	sp, #112	; 0x70
 800c5c2:	ab1d      	add	r3, sp, #116	; 0x74
 800c5c4:	9002      	str	r0, [sp, #8]
 800c5c6:	9006      	str	r0, [sp, #24]
 800c5c8:	9107      	str	r1, [sp, #28]
 800c5ca:	9104      	str	r1, [sp, #16]
 800c5cc:	4808      	ldr	r0, [pc, #32]	; (800c5f0 <siprintf+0x38>)
 800c5ce:	4909      	ldr	r1, [pc, #36]	; (800c5f4 <siprintf+0x3c>)
 800c5d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5d4:	9105      	str	r1, [sp, #20]
 800c5d6:	6800      	ldr	r0, [r0, #0]
 800c5d8:	a902      	add	r1, sp, #8
 800c5da:	9301      	str	r3, [sp, #4]
 800c5dc:	f000 f94c 	bl	800c878 <_svfiprintf_r>
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	9b02      	ldr	r3, [sp, #8]
 800c5e4:	701a      	strb	r2, [r3, #0]
 800c5e6:	b01c      	add	sp, #112	; 0x70
 800c5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5ec:	b003      	add	sp, #12
 800c5ee:	4770      	bx	lr
 800c5f0:	20000108 	.word	0x20000108
 800c5f4:	ffff0208 	.word	0xffff0208

0800c5f8 <__utoa>:
 800c5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5fa:	b08b      	sub	sp, #44	; 0x2c
 800c5fc:	4605      	mov	r5, r0
 800c5fe:	460b      	mov	r3, r1
 800c600:	466e      	mov	r6, sp
 800c602:	4c1d      	ldr	r4, [pc, #116]	; (800c678 <__utoa+0x80>)
 800c604:	f104 0c20 	add.w	ip, r4, #32
 800c608:	4637      	mov	r7, r6
 800c60a:	6820      	ldr	r0, [r4, #0]
 800c60c:	6861      	ldr	r1, [r4, #4]
 800c60e:	3408      	adds	r4, #8
 800c610:	c703      	stmia	r7!, {r0, r1}
 800c612:	4564      	cmp	r4, ip
 800c614:	463e      	mov	r6, r7
 800c616:	d1f7      	bne.n	800c608 <__utoa+0x10>
 800c618:	7921      	ldrb	r1, [r4, #4]
 800c61a:	6820      	ldr	r0, [r4, #0]
 800c61c:	7139      	strb	r1, [r7, #4]
 800c61e:	1e91      	subs	r1, r2, #2
 800c620:	2922      	cmp	r1, #34	; 0x22
 800c622:	6038      	str	r0, [r7, #0]
 800c624:	f04f 0100 	mov.w	r1, #0
 800c628:	d904      	bls.n	800c634 <__utoa+0x3c>
 800c62a:	7019      	strb	r1, [r3, #0]
 800c62c:	460b      	mov	r3, r1
 800c62e:	4618      	mov	r0, r3
 800c630:	b00b      	add	sp, #44	; 0x2c
 800c632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c634:	1e58      	subs	r0, r3, #1
 800c636:	4684      	mov	ip, r0
 800c638:	fbb5 f7f2 	udiv	r7, r5, r2
 800c63c:	fb02 5617 	mls	r6, r2, r7, r5
 800c640:	3628      	adds	r6, #40	; 0x28
 800c642:	446e      	add	r6, sp
 800c644:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c648:	460c      	mov	r4, r1
 800c64a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c64e:	462e      	mov	r6, r5
 800c650:	42b2      	cmp	r2, r6
 800c652:	463d      	mov	r5, r7
 800c654:	f101 0101 	add.w	r1, r1, #1
 800c658:	d9ee      	bls.n	800c638 <__utoa+0x40>
 800c65a:	2200      	movs	r2, #0
 800c65c:	545a      	strb	r2, [r3, r1]
 800c65e:	1919      	adds	r1, r3, r4
 800c660:	1aa5      	subs	r5, r4, r2
 800c662:	42aa      	cmp	r2, r5
 800c664:	dae3      	bge.n	800c62e <__utoa+0x36>
 800c666:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c66a:	780e      	ldrb	r6, [r1, #0]
 800c66c:	3201      	adds	r2, #1
 800c66e:	7006      	strb	r6, [r0, #0]
 800c670:	f801 5901 	strb.w	r5, [r1], #-1
 800c674:	e7f4      	b.n	800c660 <__utoa+0x68>
 800c676:	bf00      	nop
 800c678:	0800de72 	.word	0x0800de72

0800c67c <strcat>:
 800c67c:	4602      	mov	r2, r0
 800c67e:	b510      	push	{r4, lr}
 800c680:	7814      	ldrb	r4, [r2, #0]
 800c682:	4613      	mov	r3, r2
 800c684:	3201      	adds	r2, #1
 800c686:	2c00      	cmp	r4, #0
 800c688:	d1fa      	bne.n	800c680 <strcat+0x4>
 800c68a:	3b01      	subs	r3, #1
 800c68c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c690:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c694:	2a00      	cmp	r2, #0
 800c696:	d1f9      	bne.n	800c68c <strcat+0x10>
 800c698:	bd10      	pop	{r4, pc}

0800c69a <memset>:
 800c69a:	4603      	mov	r3, r0
 800c69c:	4402      	add	r2, r0
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d100      	bne.n	800c6a4 <memset+0xa>
 800c6a2:	4770      	bx	lr
 800c6a4:	f803 1b01 	strb.w	r1, [r3], #1
 800c6a8:	e7f9      	b.n	800c69e <memset+0x4>
	...

0800c6ac <_sbrk_r>:
 800c6ac:	b538      	push	{r3, r4, r5, lr}
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	4d05      	ldr	r5, [pc, #20]	; (800c6c8 <_sbrk_r+0x1c>)
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	4608      	mov	r0, r1
 800c6b6:	602b      	str	r3, [r5, #0]
 800c6b8:	f7fc f808 	bl	80086cc <_sbrk>
 800c6bc:	1c43      	adds	r3, r0, #1
 800c6be:	d102      	bne.n	800c6c6 <_sbrk_r+0x1a>
 800c6c0:	682b      	ldr	r3, [r5, #0]
 800c6c2:	b103      	cbz	r3, 800c6c6 <_sbrk_r+0x1a>
 800c6c4:	6023      	str	r3, [r4, #0]
 800c6c6:	bd38      	pop	{r3, r4, r5, pc}
 800c6c8:	200005dc 	.word	0x200005dc

0800c6cc <__errno>:
 800c6cc:	4b01      	ldr	r3, [pc, #4]	; (800c6d4 <__errno+0x8>)
 800c6ce:	6818      	ldr	r0, [r3, #0]
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	20000108 	.word	0x20000108

0800c6d8 <__libc_init_array>:
 800c6d8:	b570      	push	{r4, r5, r6, lr}
 800c6da:	2600      	movs	r6, #0
 800c6dc:	4d0c      	ldr	r5, [pc, #48]	; (800c710 <__libc_init_array+0x38>)
 800c6de:	4c0d      	ldr	r4, [pc, #52]	; (800c714 <__libc_init_array+0x3c>)
 800c6e0:	1b64      	subs	r4, r4, r5
 800c6e2:	10a4      	asrs	r4, r4, #2
 800c6e4:	42a6      	cmp	r6, r4
 800c6e6:	d109      	bne.n	800c6fc <__libc_init_array+0x24>
 800c6e8:	f000 fbc6 	bl	800ce78 <_init>
 800c6ec:	2600      	movs	r6, #0
 800c6ee:	4d0a      	ldr	r5, [pc, #40]	; (800c718 <__libc_init_array+0x40>)
 800c6f0:	4c0a      	ldr	r4, [pc, #40]	; (800c71c <__libc_init_array+0x44>)
 800c6f2:	1b64      	subs	r4, r4, r5
 800c6f4:	10a4      	asrs	r4, r4, #2
 800c6f6:	42a6      	cmp	r6, r4
 800c6f8:	d105      	bne.n	800c706 <__libc_init_array+0x2e>
 800c6fa:	bd70      	pop	{r4, r5, r6, pc}
 800c6fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c700:	4798      	blx	r3
 800c702:	3601      	adds	r6, #1
 800c704:	e7ee      	b.n	800c6e4 <__libc_init_array+0xc>
 800c706:	f855 3b04 	ldr.w	r3, [r5], #4
 800c70a:	4798      	blx	r3
 800c70c:	3601      	adds	r6, #1
 800c70e:	e7f2      	b.n	800c6f6 <__libc_init_array+0x1e>
 800c710:	0800decc 	.word	0x0800decc
 800c714:	0800decc 	.word	0x0800decc
 800c718:	0800decc 	.word	0x0800decc
 800c71c:	0800ded0 	.word	0x0800ded0

0800c720 <__retarget_lock_acquire_recursive>:
 800c720:	4770      	bx	lr

0800c722 <__retarget_lock_release_recursive>:
 800c722:	4770      	bx	lr

0800c724 <strcpy>:
 800c724:	4603      	mov	r3, r0
 800c726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c72a:	f803 2b01 	strb.w	r2, [r3], #1
 800c72e:	2a00      	cmp	r2, #0
 800c730:	d1f9      	bne.n	800c726 <strcpy+0x2>
 800c732:	4770      	bx	lr

0800c734 <_free_r>:
 800c734:	b538      	push	{r3, r4, r5, lr}
 800c736:	4605      	mov	r5, r0
 800c738:	2900      	cmp	r1, #0
 800c73a:	d040      	beq.n	800c7be <_free_r+0x8a>
 800c73c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c740:	1f0c      	subs	r4, r1, #4
 800c742:	2b00      	cmp	r3, #0
 800c744:	bfb8      	it	lt
 800c746:	18e4      	addlt	r4, r4, r3
 800c748:	f7ff ff2a 	bl	800c5a0 <__malloc_lock>
 800c74c:	4a1c      	ldr	r2, [pc, #112]	; (800c7c0 <_free_r+0x8c>)
 800c74e:	6813      	ldr	r3, [r2, #0]
 800c750:	b933      	cbnz	r3, 800c760 <_free_r+0x2c>
 800c752:	6063      	str	r3, [r4, #4]
 800c754:	6014      	str	r4, [r2, #0]
 800c756:	4628      	mov	r0, r5
 800c758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c75c:	f7ff bf26 	b.w	800c5ac <__malloc_unlock>
 800c760:	42a3      	cmp	r3, r4
 800c762:	d908      	bls.n	800c776 <_free_r+0x42>
 800c764:	6820      	ldr	r0, [r4, #0]
 800c766:	1821      	adds	r1, r4, r0
 800c768:	428b      	cmp	r3, r1
 800c76a:	bf01      	itttt	eq
 800c76c:	6819      	ldreq	r1, [r3, #0]
 800c76e:	685b      	ldreq	r3, [r3, #4]
 800c770:	1809      	addeq	r1, r1, r0
 800c772:	6021      	streq	r1, [r4, #0]
 800c774:	e7ed      	b.n	800c752 <_free_r+0x1e>
 800c776:	461a      	mov	r2, r3
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	b10b      	cbz	r3, 800c780 <_free_r+0x4c>
 800c77c:	42a3      	cmp	r3, r4
 800c77e:	d9fa      	bls.n	800c776 <_free_r+0x42>
 800c780:	6811      	ldr	r1, [r2, #0]
 800c782:	1850      	adds	r0, r2, r1
 800c784:	42a0      	cmp	r0, r4
 800c786:	d10b      	bne.n	800c7a0 <_free_r+0x6c>
 800c788:	6820      	ldr	r0, [r4, #0]
 800c78a:	4401      	add	r1, r0
 800c78c:	1850      	adds	r0, r2, r1
 800c78e:	4283      	cmp	r3, r0
 800c790:	6011      	str	r1, [r2, #0]
 800c792:	d1e0      	bne.n	800c756 <_free_r+0x22>
 800c794:	6818      	ldr	r0, [r3, #0]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	4408      	add	r0, r1
 800c79a:	6010      	str	r0, [r2, #0]
 800c79c:	6053      	str	r3, [r2, #4]
 800c79e:	e7da      	b.n	800c756 <_free_r+0x22>
 800c7a0:	d902      	bls.n	800c7a8 <_free_r+0x74>
 800c7a2:	230c      	movs	r3, #12
 800c7a4:	602b      	str	r3, [r5, #0]
 800c7a6:	e7d6      	b.n	800c756 <_free_r+0x22>
 800c7a8:	6820      	ldr	r0, [r4, #0]
 800c7aa:	1821      	adds	r1, r4, r0
 800c7ac:	428b      	cmp	r3, r1
 800c7ae:	bf01      	itttt	eq
 800c7b0:	6819      	ldreq	r1, [r3, #0]
 800c7b2:	685b      	ldreq	r3, [r3, #4]
 800c7b4:	1809      	addeq	r1, r1, r0
 800c7b6:	6021      	streq	r1, [r4, #0]
 800c7b8:	6063      	str	r3, [r4, #4]
 800c7ba:	6054      	str	r4, [r2, #4]
 800c7bc:	e7cb      	b.n	800c756 <_free_r+0x22>
 800c7be:	bd38      	pop	{r3, r4, r5, pc}
 800c7c0:	20000498 	.word	0x20000498

0800c7c4 <__ssputs_r>:
 800c7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c8:	461f      	mov	r7, r3
 800c7ca:	688e      	ldr	r6, [r1, #8]
 800c7cc:	4682      	mov	sl, r0
 800c7ce:	42be      	cmp	r6, r7
 800c7d0:	460c      	mov	r4, r1
 800c7d2:	4690      	mov	r8, r2
 800c7d4:	680b      	ldr	r3, [r1, #0]
 800c7d6:	d82c      	bhi.n	800c832 <__ssputs_r+0x6e>
 800c7d8:	898a      	ldrh	r2, [r1, #12]
 800c7da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7de:	d026      	beq.n	800c82e <__ssputs_r+0x6a>
 800c7e0:	6965      	ldr	r5, [r4, #20]
 800c7e2:	6909      	ldr	r1, [r1, #16]
 800c7e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7e8:	eba3 0901 	sub.w	r9, r3, r1
 800c7ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7f0:	1c7b      	adds	r3, r7, #1
 800c7f2:	444b      	add	r3, r9
 800c7f4:	106d      	asrs	r5, r5, #1
 800c7f6:	429d      	cmp	r5, r3
 800c7f8:	bf38      	it	cc
 800c7fa:	461d      	movcc	r5, r3
 800c7fc:	0553      	lsls	r3, r2, #21
 800c7fe:	d527      	bpl.n	800c850 <__ssputs_r+0x8c>
 800c800:	4629      	mov	r1, r5
 800c802:	f7ff fe4d 	bl	800c4a0 <_malloc_r>
 800c806:	4606      	mov	r6, r0
 800c808:	b360      	cbz	r0, 800c864 <__ssputs_r+0xa0>
 800c80a:	464a      	mov	r2, r9
 800c80c:	6921      	ldr	r1, [r4, #16]
 800c80e:	f000 fb1c 	bl	800ce4a <memcpy>
 800c812:	89a3      	ldrh	r3, [r4, #12]
 800c814:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c81c:	81a3      	strh	r3, [r4, #12]
 800c81e:	6126      	str	r6, [r4, #16]
 800c820:	444e      	add	r6, r9
 800c822:	6026      	str	r6, [r4, #0]
 800c824:	463e      	mov	r6, r7
 800c826:	6165      	str	r5, [r4, #20]
 800c828:	eba5 0509 	sub.w	r5, r5, r9
 800c82c:	60a5      	str	r5, [r4, #8]
 800c82e:	42be      	cmp	r6, r7
 800c830:	d900      	bls.n	800c834 <__ssputs_r+0x70>
 800c832:	463e      	mov	r6, r7
 800c834:	4632      	mov	r2, r6
 800c836:	4641      	mov	r1, r8
 800c838:	6820      	ldr	r0, [r4, #0]
 800c83a:	f000 fade 	bl	800cdfa <memmove>
 800c83e:	2000      	movs	r0, #0
 800c840:	68a3      	ldr	r3, [r4, #8]
 800c842:	1b9b      	subs	r3, r3, r6
 800c844:	60a3      	str	r3, [r4, #8]
 800c846:	6823      	ldr	r3, [r4, #0]
 800c848:	4433      	add	r3, r6
 800c84a:	6023      	str	r3, [r4, #0]
 800c84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c850:	462a      	mov	r2, r5
 800c852:	f000 faa3 	bl	800cd9c <_realloc_r>
 800c856:	4606      	mov	r6, r0
 800c858:	2800      	cmp	r0, #0
 800c85a:	d1e0      	bne.n	800c81e <__ssputs_r+0x5a>
 800c85c:	4650      	mov	r0, sl
 800c85e:	6921      	ldr	r1, [r4, #16]
 800c860:	f7ff ff68 	bl	800c734 <_free_r>
 800c864:	230c      	movs	r3, #12
 800c866:	f8ca 3000 	str.w	r3, [sl]
 800c86a:	89a3      	ldrh	r3, [r4, #12]
 800c86c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c874:	81a3      	strh	r3, [r4, #12]
 800c876:	e7e9      	b.n	800c84c <__ssputs_r+0x88>

0800c878 <_svfiprintf_r>:
 800c878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c87c:	4698      	mov	r8, r3
 800c87e:	898b      	ldrh	r3, [r1, #12]
 800c880:	4607      	mov	r7, r0
 800c882:	061b      	lsls	r3, r3, #24
 800c884:	460d      	mov	r5, r1
 800c886:	4614      	mov	r4, r2
 800c888:	b09d      	sub	sp, #116	; 0x74
 800c88a:	d50e      	bpl.n	800c8aa <_svfiprintf_r+0x32>
 800c88c:	690b      	ldr	r3, [r1, #16]
 800c88e:	b963      	cbnz	r3, 800c8aa <_svfiprintf_r+0x32>
 800c890:	2140      	movs	r1, #64	; 0x40
 800c892:	f7ff fe05 	bl	800c4a0 <_malloc_r>
 800c896:	6028      	str	r0, [r5, #0]
 800c898:	6128      	str	r0, [r5, #16]
 800c89a:	b920      	cbnz	r0, 800c8a6 <_svfiprintf_r+0x2e>
 800c89c:	230c      	movs	r3, #12
 800c89e:	603b      	str	r3, [r7, #0]
 800c8a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8a4:	e0d0      	b.n	800ca48 <_svfiprintf_r+0x1d0>
 800c8a6:	2340      	movs	r3, #64	; 0x40
 800c8a8:	616b      	str	r3, [r5, #20]
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ae:	2320      	movs	r3, #32
 800c8b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8b4:	2330      	movs	r3, #48	; 0x30
 800c8b6:	f04f 0901 	mov.w	r9, #1
 800c8ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8be:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ca60 <_svfiprintf_r+0x1e8>
 800c8c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8c6:	4623      	mov	r3, r4
 800c8c8:	469a      	mov	sl, r3
 800c8ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8ce:	b10a      	cbz	r2, 800c8d4 <_svfiprintf_r+0x5c>
 800c8d0:	2a25      	cmp	r2, #37	; 0x25
 800c8d2:	d1f9      	bne.n	800c8c8 <_svfiprintf_r+0x50>
 800c8d4:	ebba 0b04 	subs.w	fp, sl, r4
 800c8d8:	d00b      	beq.n	800c8f2 <_svfiprintf_r+0x7a>
 800c8da:	465b      	mov	r3, fp
 800c8dc:	4622      	mov	r2, r4
 800c8de:	4629      	mov	r1, r5
 800c8e0:	4638      	mov	r0, r7
 800c8e2:	f7ff ff6f 	bl	800c7c4 <__ssputs_r>
 800c8e6:	3001      	adds	r0, #1
 800c8e8:	f000 80a9 	beq.w	800ca3e <_svfiprintf_r+0x1c6>
 800c8ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8ee:	445a      	add	r2, fp
 800c8f0:	9209      	str	r2, [sp, #36]	; 0x24
 800c8f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f000 80a1 	beq.w	800ca3e <_svfiprintf_r+0x1c6>
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c906:	f10a 0a01 	add.w	sl, sl, #1
 800c90a:	9304      	str	r3, [sp, #16]
 800c90c:	9307      	str	r3, [sp, #28]
 800c90e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c912:	931a      	str	r3, [sp, #104]	; 0x68
 800c914:	4654      	mov	r4, sl
 800c916:	2205      	movs	r2, #5
 800c918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c91c:	4850      	ldr	r0, [pc, #320]	; (800ca60 <_svfiprintf_r+0x1e8>)
 800c91e:	f000 fa86 	bl	800ce2e <memchr>
 800c922:	9a04      	ldr	r2, [sp, #16]
 800c924:	b9d8      	cbnz	r0, 800c95e <_svfiprintf_r+0xe6>
 800c926:	06d0      	lsls	r0, r2, #27
 800c928:	bf44      	itt	mi
 800c92a:	2320      	movmi	r3, #32
 800c92c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c930:	0711      	lsls	r1, r2, #28
 800c932:	bf44      	itt	mi
 800c934:	232b      	movmi	r3, #43	; 0x2b
 800c936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c93a:	f89a 3000 	ldrb.w	r3, [sl]
 800c93e:	2b2a      	cmp	r3, #42	; 0x2a
 800c940:	d015      	beq.n	800c96e <_svfiprintf_r+0xf6>
 800c942:	4654      	mov	r4, sl
 800c944:	2000      	movs	r0, #0
 800c946:	f04f 0c0a 	mov.w	ip, #10
 800c94a:	9a07      	ldr	r2, [sp, #28]
 800c94c:	4621      	mov	r1, r4
 800c94e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c952:	3b30      	subs	r3, #48	; 0x30
 800c954:	2b09      	cmp	r3, #9
 800c956:	d94d      	bls.n	800c9f4 <_svfiprintf_r+0x17c>
 800c958:	b1b0      	cbz	r0, 800c988 <_svfiprintf_r+0x110>
 800c95a:	9207      	str	r2, [sp, #28]
 800c95c:	e014      	b.n	800c988 <_svfiprintf_r+0x110>
 800c95e:	eba0 0308 	sub.w	r3, r0, r8
 800c962:	fa09 f303 	lsl.w	r3, r9, r3
 800c966:	4313      	orrs	r3, r2
 800c968:	46a2      	mov	sl, r4
 800c96a:	9304      	str	r3, [sp, #16]
 800c96c:	e7d2      	b.n	800c914 <_svfiprintf_r+0x9c>
 800c96e:	9b03      	ldr	r3, [sp, #12]
 800c970:	1d19      	adds	r1, r3, #4
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	9103      	str	r1, [sp, #12]
 800c976:	2b00      	cmp	r3, #0
 800c978:	bfbb      	ittet	lt
 800c97a:	425b      	neglt	r3, r3
 800c97c:	f042 0202 	orrlt.w	r2, r2, #2
 800c980:	9307      	strge	r3, [sp, #28]
 800c982:	9307      	strlt	r3, [sp, #28]
 800c984:	bfb8      	it	lt
 800c986:	9204      	strlt	r2, [sp, #16]
 800c988:	7823      	ldrb	r3, [r4, #0]
 800c98a:	2b2e      	cmp	r3, #46	; 0x2e
 800c98c:	d10c      	bne.n	800c9a8 <_svfiprintf_r+0x130>
 800c98e:	7863      	ldrb	r3, [r4, #1]
 800c990:	2b2a      	cmp	r3, #42	; 0x2a
 800c992:	d134      	bne.n	800c9fe <_svfiprintf_r+0x186>
 800c994:	9b03      	ldr	r3, [sp, #12]
 800c996:	3402      	adds	r4, #2
 800c998:	1d1a      	adds	r2, r3, #4
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	9203      	str	r2, [sp, #12]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	bfb8      	it	lt
 800c9a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c9a6:	9305      	str	r3, [sp, #20]
 800c9a8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ca64 <_svfiprintf_r+0x1ec>
 800c9ac:	2203      	movs	r2, #3
 800c9ae:	4650      	mov	r0, sl
 800c9b0:	7821      	ldrb	r1, [r4, #0]
 800c9b2:	f000 fa3c 	bl	800ce2e <memchr>
 800c9b6:	b138      	cbz	r0, 800c9c8 <_svfiprintf_r+0x150>
 800c9b8:	2240      	movs	r2, #64	; 0x40
 800c9ba:	9b04      	ldr	r3, [sp, #16]
 800c9bc:	eba0 000a 	sub.w	r0, r0, sl
 800c9c0:	4082      	lsls	r2, r0
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	3401      	adds	r4, #1
 800c9c6:	9304      	str	r3, [sp, #16]
 800c9c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9cc:	2206      	movs	r2, #6
 800c9ce:	4826      	ldr	r0, [pc, #152]	; (800ca68 <_svfiprintf_r+0x1f0>)
 800c9d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9d4:	f000 fa2b 	bl	800ce2e <memchr>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d038      	beq.n	800ca4e <_svfiprintf_r+0x1d6>
 800c9dc:	4b23      	ldr	r3, [pc, #140]	; (800ca6c <_svfiprintf_r+0x1f4>)
 800c9de:	bb1b      	cbnz	r3, 800ca28 <_svfiprintf_r+0x1b0>
 800c9e0:	9b03      	ldr	r3, [sp, #12]
 800c9e2:	3307      	adds	r3, #7
 800c9e4:	f023 0307 	bic.w	r3, r3, #7
 800c9e8:	3308      	adds	r3, #8
 800c9ea:	9303      	str	r3, [sp, #12]
 800c9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ee:	4433      	add	r3, r6
 800c9f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c9f2:	e768      	b.n	800c8c6 <_svfiprintf_r+0x4e>
 800c9f4:	460c      	mov	r4, r1
 800c9f6:	2001      	movs	r0, #1
 800c9f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9fc:	e7a6      	b.n	800c94c <_svfiprintf_r+0xd4>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	f04f 0c0a 	mov.w	ip, #10
 800ca04:	4619      	mov	r1, r3
 800ca06:	3401      	adds	r4, #1
 800ca08:	9305      	str	r3, [sp, #20]
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca10:	3a30      	subs	r2, #48	; 0x30
 800ca12:	2a09      	cmp	r2, #9
 800ca14:	d903      	bls.n	800ca1e <_svfiprintf_r+0x1a6>
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d0c6      	beq.n	800c9a8 <_svfiprintf_r+0x130>
 800ca1a:	9105      	str	r1, [sp, #20]
 800ca1c:	e7c4      	b.n	800c9a8 <_svfiprintf_r+0x130>
 800ca1e:	4604      	mov	r4, r0
 800ca20:	2301      	movs	r3, #1
 800ca22:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca26:	e7f0      	b.n	800ca0a <_svfiprintf_r+0x192>
 800ca28:	ab03      	add	r3, sp, #12
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	462a      	mov	r2, r5
 800ca2e:	4638      	mov	r0, r7
 800ca30:	4b0f      	ldr	r3, [pc, #60]	; (800ca70 <_svfiprintf_r+0x1f8>)
 800ca32:	a904      	add	r1, sp, #16
 800ca34:	f3af 8000 	nop.w
 800ca38:	1c42      	adds	r2, r0, #1
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	d1d6      	bne.n	800c9ec <_svfiprintf_r+0x174>
 800ca3e:	89ab      	ldrh	r3, [r5, #12]
 800ca40:	065b      	lsls	r3, r3, #25
 800ca42:	f53f af2d 	bmi.w	800c8a0 <_svfiprintf_r+0x28>
 800ca46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca48:	b01d      	add	sp, #116	; 0x74
 800ca4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca4e:	ab03      	add	r3, sp, #12
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	462a      	mov	r2, r5
 800ca54:	4638      	mov	r0, r7
 800ca56:	4b06      	ldr	r3, [pc, #24]	; (800ca70 <_svfiprintf_r+0x1f8>)
 800ca58:	a904      	add	r1, sp, #16
 800ca5a:	f000 f87d 	bl	800cb58 <_printf_i>
 800ca5e:	e7eb      	b.n	800ca38 <_svfiprintf_r+0x1c0>
 800ca60:	0800de97 	.word	0x0800de97
 800ca64:	0800de9d 	.word	0x0800de9d
 800ca68:	0800dea1 	.word	0x0800dea1
 800ca6c:	00000000 	.word	0x00000000
 800ca70:	0800c7c5 	.word	0x0800c7c5

0800ca74 <_printf_common>:
 800ca74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca78:	4616      	mov	r6, r2
 800ca7a:	4699      	mov	r9, r3
 800ca7c:	688a      	ldr	r2, [r1, #8]
 800ca7e:	690b      	ldr	r3, [r1, #16]
 800ca80:	4607      	mov	r7, r0
 800ca82:	4293      	cmp	r3, r2
 800ca84:	bfb8      	it	lt
 800ca86:	4613      	movlt	r3, r2
 800ca88:	6033      	str	r3, [r6, #0]
 800ca8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca8e:	460c      	mov	r4, r1
 800ca90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca94:	b10a      	cbz	r2, 800ca9a <_printf_common+0x26>
 800ca96:	3301      	adds	r3, #1
 800ca98:	6033      	str	r3, [r6, #0]
 800ca9a:	6823      	ldr	r3, [r4, #0]
 800ca9c:	0699      	lsls	r1, r3, #26
 800ca9e:	bf42      	ittt	mi
 800caa0:	6833      	ldrmi	r3, [r6, #0]
 800caa2:	3302      	addmi	r3, #2
 800caa4:	6033      	strmi	r3, [r6, #0]
 800caa6:	6825      	ldr	r5, [r4, #0]
 800caa8:	f015 0506 	ands.w	r5, r5, #6
 800caac:	d106      	bne.n	800cabc <_printf_common+0x48>
 800caae:	f104 0a19 	add.w	sl, r4, #25
 800cab2:	68e3      	ldr	r3, [r4, #12]
 800cab4:	6832      	ldr	r2, [r6, #0]
 800cab6:	1a9b      	subs	r3, r3, r2
 800cab8:	42ab      	cmp	r3, r5
 800caba:	dc2b      	bgt.n	800cb14 <_printf_common+0xa0>
 800cabc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cac0:	1e13      	subs	r3, r2, #0
 800cac2:	6822      	ldr	r2, [r4, #0]
 800cac4:	bf18      	it	ne
 800cac6:	2301      	movne	r3, #1
 800cac8:	0692      	lsls	r2, r2, #26
 800caca:	d430      	bmi.n	800cb2e <_printf_common+0xba>
 800cacc:	4649      	mov	r1, r9
 800cace:	4638      	mov	r0, r7
 800cad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cad4:	47c0      	blx	r8
 800cad6:	3001      	adds	r0, #1
 800cad8:	d023      	beq.n	800cb22 <_printf_common+0xae>
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	6922      	ldr	r2, [r4, #16]
 800cade:	f003 0306 	and.w	r3, r3, #6
 800cae2:	2b04      	cmp	r3, #4
 800cae4:	bf14      	ite	ne
 800cae6:	2500      	movne	r5, #0
 800cae8:	6833      	ldreq	r3, [r6, #0]
 800caea:	f04f 0600 	mov.w	r6, #0
 800caee:	bf08      	it	eq
 800caf0:	68e5      	ldreq	r5, [r4, #12]
 800caf2:	f104 041a 	add.w	r4, r4, #26
 800caf6:	bf08      	it	eq
 800caf8:	1aed      	subeq	r5, r5, r3
 800cafa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cafe:	bf08      	it	eq
 800cb00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb04:	4293      	cmp	r3, r2
 800cb06:	bfc4      	itt	gt
 800cb08:	1a9b      	subgt	r3, r3, r2
 800cb0a:	18ed      	addgt	r5, r5, r3
 800cb0c:	42b5      	cmp	r5, r6
 800cb0e:	d11a      	bne.n	800cb46 <_printf_common+0xd2>
 800cb10:	2000      	movs	r0, #0
 800cb12:	e008      	b.n	800cb26 <_printf_common+0xb2>
 800cb14:	2301      	movs	r3, #1
 800cb16:	4652      	mov	r2, sl
 800cb18:	4649      	mov	r1, r9
 800cb1a:	4638      	mov	r0, r7
 800cb1c:	47c0      	blx	r8
 800cb1e:	3001      	adds	r0, #1
 800cb20:	d103      	bne.n	800cb2a <_printf_common+0xb6>
 800cb22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb2a:	3501      	adds	r5, #1
 800cb2c:	e7c1      	b.n	800cab2 <_printf_common+0x3e>
 800cb2e:	2030      	movs	r0, #48	; 0x30
 800cb30:	18e1      	adds	r1, r4, r3
 800cb32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb36:	1c5a      	adds	r2, r3, #1
 800cb38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb3c:	4422      	add	r2, r4
 800cb3e:	3302      	adds	r3, #2
 800cb40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb44:	e7c2      	b.n	800cacc <_printf_common+0x58>
 800cb46:	2301      	movs	r3, #1
 800cb48:	4622      	mov	r2, r4
 800cb4a:	4649      	mov	r1, r9
 800cb4c:	4638      	mov	r0, r7
 800cb4e:	47c0      	blx	r8
 800cb50:	3001      	adds	r0, #1
 800cb52:	d0e6      	beq.n	800cb22 <_printf_common+0xae>
 800cb54:	3601      	adds	r6, #1
 800cb56:	e7d9      	b.n	800cb0c <_printf_common+0x98>

0800cb58 <_printf_i>:
 800cb58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb5c:	7e0f      	ldrb	r7, [r1, #24]
 800cb5e:	4691      	mov	r9, r2
 800cb60:	2f78      	cmp	r7, #120	; 0x78
 800cb62:	4680      	mov	r8, r0
 800cb64:	460c      	mov	r4, r1
 800cb66:	469a      	mov	sl, r3
 800cb68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb6e:	d807      	bhi.n	800cb80 <_printf_i+0x28>
 800cb70:	2f62      	cmp	r7, #98	; 0x62
 800cb72:	d80a      	bhi.n	800cb8a <_printf_i+0x32>
 800cb74:	2f00      	cmp	r7, #0
 800cb76:	f000 80d5 	beq.w	800cd24 <_printf_i+0x1cc>
 800cb7a:	2f58      	cmp	r7, #88	; 0x58
 800cb7c:	f000 80c1 	beq.w	800cd02 <_printf_i+0x1aa>
 800cb80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb88:	e03a      	b.n	800cc00 <_printf_i+0xa8>
 800cb8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb8e:	2b15      	cmp	r3, #21
 800cb90:	d8f6      	bhi.n	800cb80 <_printf_i+0x28>
 800cb92:	a101      	add	r1, pc, #4	; (adr r1, 800cb98 <_printf_i+0x40>)
 800cb94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb98:	0800cbf1 	.word	0x0800cbf1
 800cb9c:	0800cc05 	.word	0x0800cc05
 800cba0:	0800cb81 	.word	0x0800cb81
 800cba4:	0800cb81 	.word	0x0800cb81
 800cba8:	0800cb81 	.word	0x0800cb81
 800cbac:	0800cb81 	.word	0x0800cb81
 800cbb0:	0800cc05 	.word	0x0800cc05
 800cbb4:	0800cb81 	.word	0x0800cb81
 800cbb8:	0800cb81 	.word	0x0800cb81
 800cbbc:	0800cb81 	.word	0x0800cb81
 800cbc0:	0800cb81 	.word	0x0800cb81
 800cbc4:	0800cd0b 	.word	0x0800cd0b
 800cbc8:	0800cc31 	.word	0x0800cc31
 800cbcc:	0800ccc5 	.word	0x0800ccc5
 800cbd0:	0800cb81 	.word	0x0800cb81
 800cbd4:	0800cb81 	.word	0x0800cb81
 800cbd8:	0800cd2d 	.word	0x0800cd2d
 800cbdc:	0800cb81 	.word	0x0800cb81
 800cbe0:	0800cc31 	.word	0x0800cc31
 800cbe4:	0800cb81 	.word	0x0800cb81
 800cbe8:	0800cb81 	.word	0x0800cb81
 800cbec:	0800cccd 	.word	0x0800cccd
 800cbf0:	682b      	ldr	r3, [r5, #0]
 800cbf2:	1d1a      	adds	r2, r3, #4
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	602a      	str	r2, [r5, #0]
 800cbf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc00:	2301      	movs	r3, #1
 800cc02:	e0a0      	b.n	800cd46 <_printf_i+0x1ee>
 800cc04:	6820      	ldr	r0, [r4, #0]
 800cc06:	682b      	ldr	r3, [r5, #0]
 800cc08:	0607      	lsls	r7, r0, #24
 800cc0a:	f103 0104 	add.w	r1, r3, #4
 800cc0e:	6029      	str	r1, [r5, #0]
 800cc10:	d501      	bpl.n	800cc16 <_printf_i+0xbe>
 800cc12:	681e      	ldr	r6, [r3, #0]
 800cc14:	e003      	b.n	800cc1e <_printf_i+0xc6>
 800cc16:	0646      	lsls	r6, r0, #25
 800cc18:	d5fb      	bpl.n	800cc12 <_printf_i+0xba>
 800cc1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cc1e:	2e00      	cmp	r6, #0
 800cc20:	da03      	bge.n	800cc2a <_printf_i+0xd2>
 800cc22:	232d      	movs	r3, #45	; 0x2d
 800cc24:	4276      	negs	r6, r6
 800cc26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc2a:	230a      	movs	r3, #10
 800cc2c:	4859      	ldr	r0, [pc, #356]	; (800cd94 <_printf_i+0x23c>)
 800cc2e:	e012      	b.n	800cc56 <_printf_i+0xfe>
 800cc30:	682b      	ldr	r3, [r5, #0]
 800cc32:	6820      	ldr	r0, [r4, #0]
 800cc34:	1d19      	adds	r1, r3, #4
 800cc36:	6029      	str	r1, [r5, #0]
 800cc38:	0605      	lsls	r5, r0, #24
 800cc3a:	d501      	bpl.n	800cc40 <_printf_i+0xe8>
 800cc3c:	681e      	ldr	r6, [r3, #0]
 800cc3e:	e002      	b.n	800cc46 <_printf_i+0xee>
 800cc40:	0641      	lsls	r1, r0, #25
 800cc42:	d5fb      	bpl.n	800cc3c <_printf_i+0xe4>
 800cc44:	881e      	ldrh	r6, [r3, #0]
 800cc46:	2f6f      	cmp	r7, #111	; 0x6f
 800cc48:	bf0c      	ite	eq
 800cc4a:	2308      	moveq	r3, #8
 800cc4c:	230a      	movne	r3, #10
 800cc4e:	4851      	ldr	r0, [pc, #324]	; (800cd94 <_printf_i+0x23c>)
 800cc50:	2100      	movs	r1, #0
 800cc52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc56:	6865      	ldr	r5, [r4, #4]
 800cc58:	2d00      	cmp	r5, #0
 800cc5a:	bfa8      	it	ge
 800cc5c:	6821      	ldrge	r1, [r4, #0]
 800cc5e:	60a5      	str	r5, [r4, #8]
 800cc60:	bfa4      	itt	ge
 800cc62:	f021 0104 	bicge.w	r1, r1, #4
 800cc66:	6021      	strge	r1, [r4, #0]
 800cc68:	b90e      	cbnz	r6, 800cc6e <_printf_i+0x116>
 800cc6a:	2d00      	cmp	r5, #0
 800cc6c:	d04b      	beq.n	800cd06 <_printf_i+0x1ae>
 800cc6e:	4615      	mov	r5, r2
 800cc70:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc74:	fb03 6711 	mls	r7, r3, r1, r6
 800cc78:	5dc7      	ldrb	r7, [r0, r7]
 800cc7a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc7e:	4637      	mov	r7, r6
 800cc80:	42bb      	cmp	r3, r7
 800cc82:	460e      	mov	r6, r1
 800cc84:	d9f4      	bls.n	800cc70 <_printf_i+0x118>
 800cc86:	2b08      	cmp	r3, #8
 800cc88:	d10b      	bne.n	800cca2 <_printf_i+0x14a>
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	07de      	lsls	r6, r3, #31
 800cc8e:	d508      	bpl.n	800cca2 <_printf_i+0x14a>
 800cc90:	6923      	ldr	r3, [r4, #16]
 800cc92:	6861      	ldr	r1, [r4, #4]
 800cc94:	4299      	cmp	r1, r3
 800cc96:	bfde      	ittt	le
 800cc98:	2330      	movle	r3, #48	; 0x30
 800cc9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc9e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cca2:	1b52      	subs	r2, r2, r5
 800cca4:	6122      	str	r2, [r4, #16]
 800cca6:	464b      	mov	r3, r9
 800cca8:	4621      	mov	r1, r4
 800ccaa:	4640      	mov	r0, r8
 800ccac:	f8cd a000 	str.w	sl, [sp]
 800ccb0:	aa03      	add	r2, sp, #12
 800ccb2:	f7ff fedf 	bl	800ca74 <_printf_common>
 800ccb6:	3001      	adds	r0, #1
 800ccb8:	d14a      	bne.n	800cd50 <_printf_i+0x1f8>
 800ccba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccbe:	b004      	add	sp, #16
 800ccc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccc4:	6823      	ldr	r3, [r4, #0]
 800ccc6:	f043 0320 	orr.w	r3, r3, #32
 800ccca:	6023      	str	r3, [r4, #0]
 800cccc:	2778      	movs	r7, #120	; 0x78
 800ccce:	4832      	ldr	r0, [pc, #200]	; (800cd98 <_printf_i+0x240>)
 800ccd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ccd4:	6823      	ldr	r3, [r4, #0]
 800ccd6:	6829      	ldr	r1, [r5, #0]
 800ccd8:	061f      	lsls	r7, r3, #24
 800ccda:	f851 6b04 	ldr.w	r6, [r1], #4
 800ccde:	d402      	bmi.n	800cce6 <_printf_i+0x18e>
 800cce0:	065f      	lsls	r7, r3, #25
 800cce2:	bf48      	it	mi
 800cce4:	b2b6      	uxthmi	r6, r6
 800cce6:	07df      	lsls	r7, r3, #31
 800cce8:	bf48      	it	mi
 800ccea:	f043 0320 	orrmi.w	r3, r3, #32
 800ccee:	6029      	str	r1, [r5, #0]
 800ccf0:	bf48      	it	mi
 800ccf2:	6023      	strmi	r3, [r4, #0]
 800ccf4:	b91e      	cbnz	r6, 800ccfe <_printf_i+0x1a6>
 800ccf6:	6823      	ldr	r3, [r4, #0]
 800ccf8:	f023 0320 	bic.w	r3, r3, #32
 800ccfc:	6023      	str	r3, [r4, #0]
 800ccfe:	2310      	movs	r3, #16
 800cd00:	e7a6      	b.n	800cc50 <_printf_i+0xf8>
 800cd02:	4824      	ldr	r0, [pc, #144]	; (800cd94 <_printf_i+0x23c>)
 800cd04:	e7e4      	b.n	800ccd0 <_printf_i+0x178>
 800cd06:	4615      	mov	r5, r2
 800cd08:	e7bd      	b.n	800cc86 <_printf_i+0x12e>
 800cd0a:	682b      	ldr	r3, [r5, #0]
 800cd0c:	6826      	ldr	r6, [r4, #0]
 800cd0e:	1d18      	adds	r0, r3, #4
 800cd10:	6961      	ldr	r1, [r4, #20]
 800cd12:	6028      	str	r0, [r5, #0]
 800cd14:	0635      	lsls	r5, r6, #24
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	d501      	bpl.n	800cd1e <_printf_i+0x1c6>
 800cd1a:	6019      	str	r1, [r3, #0]
 800cd1c:	e002      	b.n	800cd24 <_printf_i+0x1cc>
 800cd1e:	0670      	lsls	r0, r6, #25
 800cd20:	d5fb      	bpl.n	800cd1a <_printf_i+0x1c2>
 800cd22:	8019      	strh	r1, [r3, #0]
 800cd24:	2300      	movs	r3, #0
 800cd26:	4615      	mov	r5, r2
 800cd28:	6123      	str	r3, [r4, #16]
 800cd2a:	e7bc      	b.n	800cca6 <_printf_i+0x14e>
 800cd2c:	682b      	ldr	r3, [r5, #0]
 800cd2e:	2100      	movs	r1, #0
 800cd30:	1d1a      	adds	r2, r3, #4
 800cd32:	602a      	str	r2, [r5, #0]
 800cd34:	681d      	ldr	r5, [r3, #0]
 800cd36:	6862      	ldr	r2, [r4, #4]
 800cd38:	4628      	mov	r0, r5
 800cd3a:	f000 f878 	bl	800ce2e <memchr>
 800cd3e:	b108      	cbz	r0, 800cd44 <_printf_i+0x1ec>
 800cd40:	1b40      	subs	r0, r0, r5
 800cd42:	6060      	str	r0, [r4, #4]
 800cd44:	6863      	ldr	r3, [r4, #4]
 800cd46:	6123      	str	r3, [r4, #16]
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd4e:	e7aa      	b.n	800cca6 <_printf_i+0x14e>
 800cd50:	462a      	mov	r2, r5
 800cd52:	4649      	mov	r1, r9
 800cd54:	4640      	mov	r0, r8
 800cd56:	6923      	ldr	r3, [r4, #16]
 800cd58:	47d0      	blx	sl
 800cd5a:	3001      	adds	r0, #1
 800cd5c:	d0ad      	beq.n	800ccba <_printf_i+0x162>
 800cd5e:	6823      	ldr	r3, [r4, #0]
 800cd60:	079b      	lsls	r3, r3, #30
 800cd62:	d413      	bmi.n	800cd8c <_printf_i+0x234>
 800cd64:	68e0      	ldr	r0, [r4, #12]
 800cd66:	9b03      	ldr	r3, [sp, #12]
 800cd68:	4298      	cmp	r0, r3
 800cd6a:	bfb8      	it	lt
 800cd6c:	4618      	movlt	r0, r3
 800cd6e:	e7a6      	b.n	800ccbe <_printf_i+0x166>
 800cd70:	2301      	movs	r3, #1
 800cd72:	4632      	mov	r2, r6
 800cd74:	4649      	mov	r1, r9
 800cd76:	4640      	mov	r0, r8
 800cd78:	47d0      	blx	sl
 800cd7a:	3001      	adds	r0, #1
 800cd7c:	d09d      	beq.n	800ccba <_printf_i+0x162>
 800cd7e:	3501      	adds	r5, #1
 800cd80:	68e3      	ldr	r3, [r4, #12]
 800cd82:	9903      	ldr	r1, [sp, #12]
 800cd84:	1a5b      	subs	r3, r3, r1
 800cd86:	42ab      	cmp	r3, r5
 800cd88:	dcf2      	bgt.n	800cd70 <_printf_i+0x218>
 800cd8a:	e7eb      	b.n	800cd64 <_printf_i+0x20c>
 800cd8c:	2500      	movs	r5, #0
 800cd8e:	f104 0619 	add.w	r6, r4, #25
 800cd92:	e7f5      	b.n	800cd80 <_printf_i+0x228>
 800cd94:	0800dea8 	.word	0x0800dea8
 800cd98:	0800deb9 	.word	0x0800deb9

0800cd9c <_realloc_r>:
 800cd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda0:	4680      	mov	r8, r0
 800cda2:	4614      	mov	r4, r2
 800cda4:	460e      	mov	r6, r1
 800cda6:	b921      	cbnz	r1, 800cdb2 <_realloc_r+0x16>
 800cda8:	4611      	mov	r1, r2
 800cdaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdae:	f7ff bb77 	b.w	800c4a0 <_malloc_r>
 800cdb2:	b92a      	cbnz	r2, 800cdc0 <_realloc_r+0x24>
 800cdb4:	f7ff fcbe 	bl	800c734 <_free_r>
 800cdb8:	4625      	mov	r5, r4
 800cdba:	4628      	mov	r0, r5
 800cdbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdc0:	f000 f851 	bl	800ce66 <_malloc_usable_size_r>
 800cdc4:	4284      	cmp	r4, r0
 800cdc6:	4607      	mov	r7, r0
 800cdc8:	d802      	bhi.n	800cdd0 <_realloc_r+0x34>
 800cdca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cdce:	d812      	bhi.n	800cdf6 <_realloc_r+0x5a>
 800cdd0:	4621      	mov	r1, r4
 800cdd2:	4640      	mov	r0, r8
 800cdd4:	f7ff fb64 	bl	800c4a0 <_malloc_r>
 800cdd8:	4605      	mov	r5, r0
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d0ed      	beq.n	800cdba <_realloc_r+0x1e>
 800cdde:	42bc      	cmp	r4, r7
 800cde0:	4622      	mov	r2, r4
 800cde2:	4631      	mov	r1, r6
 800cde4:	bf28      	it	cs
 800cde6:	463a      	movcs	r2, r7
 800cde8:	f000 f82f 	bl	800ce4a <memcpy>
 800cdec:	4631      	mov	r1, r6
 800cdee:	4640      	mov	r0, r8
 800cdf0:	f7ff fca0 	bl	800c734 <_free_r>
 800cdf4:	e7e1      	b.n	800cdba <_realloc_r+0x1e>
 800cdf6:	4635      	mov	r5, r6
 800cdf8:	e7df      	b.n	800cdba <_realloc_r+0x1e>

0800cdfa <memmove>:
 800cdfa:	4288      	cmp	r0, r1
 800cdfc:	b510      	push	{r4, lr}
 800cdfe:	eb01 0402 	add.w	r4, r1, r2
 800ce02:	d902      	bls.n	800ce0a <memmove+0x10>
 800ce04:	4284      	cmp	r4, r0
 800ce06:	4623      	mov	r3, r4
 800ce08:	d807      	bhi.n	800ce1a <memmove+0x20>
 800ce0a:	1e43      	subs	r3, r0, #1
 800ce0c:	42a1      	cmp	r1, r4
 800ce0e:	d008      	beq.n	800ce22 <memmove+0x28>
 800ce10:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce14:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce18:	e7f8      	b.n	800ce0c <memmove+0x12>
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	4402      	add	r2, r0
 800ce1e:	428a      	cmp	r2, r1
 800ce20:	d100      	bne.n	800ce24 <memmove+0x2a>
 800ce22:	bd10      	pop	{r4, pc}
 800ce24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce2c:	e7f7      	b.n	800ce1e <memmove+0x24>

0800ce2e <memchr>:
 800ce2e:	4603      	mov	r3, r0
 800ce30:	b510      	push	{r4, lr}
 800ce32:	b2c9      	uxtb	r1, r1
 800ce34:	4402      	add	r2, r0
 800ce36:	4293      	cmp	r3, r2
 800ce38:	4618      	mov	r0, r3
 800ce3a:	d101      	bne.n	800ce40 <memchr+0x12>
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	e003      	b.n	800ce48 <memchr+0x1a>
 800ce40:	7804      	ldrb	r4, [r0, #0]
 800ce42:	3301      	adds	r3, #1
 800ce44:	428c      	cmp	r4, r1
 800ce46:	d1f6      	bne.n	800ce36 <memchr+0x8>
 800ce48:	bd10      	pop	{r4, pc}

0800ce4a <memcpy>:
 800ce4a:	440a      	add	r2, r1
 800ce4c:	4291      	cmp	r1, r2
 800ce4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce52:	d100      	bne.n	800ce56 <memcpy+0xc>
 800ce54:	4770      	bx	lr
 800ce56:	b510      	push	{r4, lr}
 800ce58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce5c:	4291      	cmp	r1, r2
 800ce5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce62:	d1f9      	bne.n	800ce58 <memcpy+0xe>
 800ce64:	bd10      	pop	{r4, pc}

0800ce66 <_malloc_usable_size_r>:
 800ce66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce6a:	1f18      	subs	r0, r3, #4
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	bfbc      	itt	lt
 800ce70:	580b      	ldrlt	r3, [r1, r0]
 800ce72:	18c0      	addlt	r0, r0, r3
 800ce74:	4770      	bx	lr
	...

0800ce78 <_init>:
 800ce78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7a:	bf00      	nop
 800ce7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce7e:	bc08      	pop	{r3}
 800ce80:	469e      	mov	lr, r3
 800ce82:	4770      	bx	lr

0800ce84 <_fini>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	bf00      	nop
 800ce88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce8a:	bc08      	pop	{r3}
 800ce8c:	469e      	mov	lr, r3
 800ce8e:	4770      	bx	lr
