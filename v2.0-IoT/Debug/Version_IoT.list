
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c974  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0800cb58  0800cb58  0001cb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db34  0800db34  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  0800db34  0800db34  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800db34  0800db34  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db34  0800db34  0001db34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db38  0800db38  0001db38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800db3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000110  0800dc4c  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800dc4c  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017924  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000335c  00000000  00000000  00037a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0003adc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  0003c040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cdbb  00000000  00000000  0003d150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c230  00000000  00000000  00059f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f378  00000000  00000000  0007613b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001154b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050cc  00000000  00000000  00115504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000110 	.word	0x20000110
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cb40 	.word	0x0800cb40

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000114 	.word	0x20000114
 8000220:	0800cb40 	.word	0x0800cb40

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 faee 	bl	8009830 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 f966 	bl	8008528 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	2000012c 	.word	0x2000012c
 80004bc:	200003bc 	.word	0x200003bc
 80004c0:	2000020d 	.word	0x2000020d
 80004c4:	20000235 	.word	0x20000235
 80004c8:	20000238 	.word	0x20000238
 80004cc:	20000239 	.word	0x20000239
 80004d0:	2000023a 	.word	0x2000023a
 80004d4:	2000023b 	.word	0x2000023b
 80004d8:	2000023c 	.word	0x2000023c
 80004dc:	2000023d 	.word	0x2000023d
 80004e0:	2000024d 	.word	0x2000024d
 80004e4:	2000023e 	.word	0x2000023e
 80004e8:	2000024e 	.word	0x2000024e
 80004ec:	2000023f 	.word	0x2000023f
 80004f0:	2000024f 	.word	0x2000024f
 80004f4:	20000242 	.word	0x20000242
 80004f8:	20000243 	.word	0x20000243
 80004fc:	20000244 	.word	0x20000244
 8000500:	20000245 	.word	0x20000245
 8000504:	20000246 	.word	0x20000246
 8000508:	20000247 	.word	0x20000247
 800050c:	20000248 	.word	0x20000248
 8000510:	20000249 	.word	0x20000249
 8000514:	2000024a 	.word	0x2000024a
 8000518:	2000024b 	.word	0x2000024b
 800051c:	2000024c 	.word	0x2000024c
 8000520:	20000250 	.word	0x20000250
 8000524:	20000252 	.word	0x20000252
 8000528:	20000230 	.word	0x20000230
 800052c:	20000231 	.word	0x20000231
 8000530:	20000232 	.word	0x20000232
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	20000233 	.word	0x20000233
 8000540:	20000255 	.word	0x20000255
 8000544:	20000253 	.word	0x20000253
 8000548:	20000241 	.word	0x20000241
 800054c:	20000254 	.word	0x20000254
 8000550:	20000240 	.word	0x20000240
 8000554:	20000256 	.word	0x20000256
 8000558:	20000257 	.word	0x20000257
 800055c:	20000258 	.word	0x20000258
 8000560:	20000259 	.word	0x20000259
 8000564:	2000025a 	.word	0x2000025a
 8000568:	2000025b 	.word	0x2000025b
 800056c:	2000025c 	.word	0x2000025c
 8000570:	2000025d 	.word	0x2000025d
 8000574:	2000025e 	.word	0x2000025e
 8000578:	2000025f 	.word	0x2000025f
 800057c:	2000020c 	.word	0x2000020c
	}

	if(kapi1AcSure>5) {
 8000580:	4b6b      	ldr	r3, [pc, #428]	; (8000730 <eepromKontrol+0x4fc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b69      	ldr	r3, [pc, #420]	; (8000730 <eepromKontrol+0x4fc>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b69      	ldr	r3, [pc, #420]	; (8000734 <eepromKontrol+0x500>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b67      	ldr	r3, [pc, #412]	; (8000734 <eepromKontrol+0x500>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b66      	ldr	r3, [pc, #408]	; (8000738 <eepromKontrol+0x504>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b64      	ldr	r3, [pc, #400]	; (8000738 <eepromKontrol+0x504>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b64      	ldr	r3, [pc, #400]	; (800073c <eepromKontrol+0x508>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b62      	ldr	r3, [pc, #392]	; (800073c <eepromKontrol+0x508>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b61      	ldr	r3, [pc, #388]	; (8000740 <eepromKontrol+0x50c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b5f      	ldr	r3, [pc, #380]	; (8000740 <eepromKontrol+0x50c>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b5f      	ldr	r3, [pc, #380]	; (8000744 <eepromKontrol+0x510>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b5d      	ldr	r3, [pc, #372]	; (8000744 <eepromKontrol+0x510>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <eepromKontrol+0x514>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b5a      	ldr	r3, [pc, #360]	; (8000748 <eepromKontrol+0x514>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b5a      	ldr	r3, [pc, #360]	; (800074c <eepromKontrol+0x518>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b58      	ldr	r3, [pc, #352]	; (800074c <eepromKontrol+0x518>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b57      	ldr	r3, [pc, #348]	; (8000750 <eepromKontrol+0x51c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b55      	ldr	r3, [pc, #340]	; (8000750 <eepromKontrol+0x51c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b55      	ldr	r3, [pc, #340]	; (8000754 <eepromKontrol+0x520>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b53      	ldr	r3, [pc, #332]	; (8000754 <eepromKontrol+0x520>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b52      	ldr	r3, [pc, #328]	; (8000758 <eepromKontrol+0x524>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b50      	ldr	r3, [pc, #320]	; (8000758 <eepromKontrol+0x524>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b50      	ldr	r3, [pc, #320]	; (800075c <eepromKontrol+0x528>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b4e      	ldr	r3, [pc, #312]	; (800075c <eepromKontrol+0x528>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b4d      	ldr	r3, [pc, #308]	; (8000760 <eepromKontrol+0x52c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <eepromKontrol+0x52c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b4b      	ldr	r3, [pc, #300]	; (8000764 <eepromKontrol+0x530>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b49      	ldr	r3, [pc, #292]	; (8000764 <eepromKontrol+0x530>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b48      	ldr	r3, [pc, #288]	; (8000768 <eepromKontrol+0x534>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b46      	ldr	r3, [pc, #280]	; (8000768 <eepromKontrol+0x534>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <eepromKontrol+0x538>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b44      	ldr	r3, [pc, #272]	; (800076c <eepromKontrol+0x538>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b43      	ldr	r3, [pc, #268]	; (8000770 <eepromKontrol+0x53c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b41      	ldr	r3, [pc, #260]	; (8000770 <eepromKontrol+0x53c>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b41      	ldr	r3, [pc, #260]	; (8000774 <eepromKontrol+0x540>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b3f      	ldr	r3, [pc, #252]	; (8000774 <eepromKontrol+0x540>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <eepromKontrol+0x544>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b3c      	ldr	r3, [pc, #240]	; (8000778 <eepromKontrol+0x544>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b3c      	ldr	r3, [pc, #240]	; (800077c <eepromKontrol+0x548>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b3a      	ldr	r3, [pc, #232]	; (800077c <eepromKontrol+0x548>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <eepromKontrol+0x54c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b37      	ldr	r3, [pc, #220]	; (8000780 <eepromKontrol+0x54c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b37      	ldr	r3, [pc, #220]	; (8000784 <eepromKontrol+0x550>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <eepromKontrol+0x550>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineIDInt, &eepromData[idStartPos], 12);
 80006b4:	4b34      	ldr	r3, [pc, #208]	; (8000788 <eepromKontrol+0x554>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a34      	ldr	r2, [pc, #208]	; (800078c <eepromKontrol+0x558>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b34      	ldr	r3, [pc, #208]	; (8000790 <eepromKontrol+0x55c>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <eepromKontrol+0x560>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a2f      	ldr	r2, [pc, #188]	; (800078c <eepromKontrol+0x558>)
 80006d0:	441a      	add	r2, r3
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <eepromKontrol+0x564>)
 80006d4:	6811      	ldr	r1, [r2, #0]
 80006d6:	6855      	ldr	r5, [r2, #4]
 80006d8:	6894      	ldr	r4, [r2, #8]
 80006da:	68d0      	ldr	r0, [r2, #12]
 80006dc:	6019      	str	r1, [r3, #0]
 80006de:	605d      	str	r5, [r3, #4]
 80006e0:	609c      	str	r4, [r3, #8]
 80006e2:	60d8      	str	r0, [r3, #12]
 80006e4:	6911      	ldr	r1, [r2, #16]
 80006e6:	6119      	str	r1, [r3, #16]
	memcpy(wifiPassInt, &eepromData[passStartPos], 20);
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <eepromKontrol+0x568>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a27      	ldr	r2, [pc, #156]	; (800078c <eepromKontrol+0x558>)
 80006ee:	441a      	add	r2, r3
 80006f0:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <eepromKontrol+0x56c>)
 80006f2:	6811      	ldr	r1, [r2, #0]
 80006f4:	6855      	ldr	r5, [r2, #4]
 80006f6:	6894      	ldr	r4, [r2, #8]
 80006f8:	68d0      	ldr	r0, [r2, #12]
 80006fa:	6019      	str	r1, [r3, #0]
 80006fc:	605d      	str	r5, [r3, #4]
 80006fe:	609c      	str	r4, [r3, #8]
 8000700:	60d8      	str	r0, [r3, #12]
 8000702:	6911      	ldr	r1, [r2, #16]
 8000704:	6119      	str	r1, [r3, #16]
	HAL_Delay(200);
 8000706:	20c8      	movs	r0, #200	; 0xc8
 8000708:	f007 ff0e 	bl	8008528 <HAL_Delay>
	convertArrays(1);
 800070c:	2001      	movs	r0, #1
 800070e:	f000 f849 	bl	80007a4 <convertArrays>
	HAL_Delay(50);
 8000712:	2032      	movs	r0, #50	; 0x32
 8000714:	f007 ff08 	bl	8008528 <HAL_Delay>
	convertArrays(2);
 8000718:	2002      	movs	r0, #2
 800071a:	f000 f843 	bl	80007a4 <convertArrays>
	HAL_Delay(50);
 800071e:	2032      	movs	r0, #50	; 0x32
 8000720:	f007 ff02 	bl	8008528 <HAL_Delay>
	convertArrays(3);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 f83d 	bl	80007a4 <convertArrays>
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bdb0      	pop	{r4, r5, r7, pc}
 8000730:	2000024d 	.word	0x2000024d
 8000734:	2000023e 	.word	0x2000023e
 8000738:	2000024e 	.word	0x2000024e
 800073c:	2000023f 	.word	0x2000023f
 8000740:	20000241 	.word	0x20000241
 8000744:	2000024f 	.word	0x2000024f
 8000748:	20000242 	.word	0x20000242
 800074c:	20000243 	.word	0x20000243
 8000750:	20000244 	.word	0x20000244
 8000754:	20000245 	.word	0x20000245
 8000758:	20000246 	.word	0x20000246
 800075c:	20000247 	.word	0x20000247
 8000760:	20000248 	.word	0x20000248
 8000764:	20000249 	.word	0x20000249
 8000768:	2000024a 	.word	0x2000024a
 800076c:	2000024b 	.word	0x2000024b
 8000770:	2000024c 	.word	0x2000024c
 8000774:	20000250 	.word	0x20000250
 8000778:	20000252 	.word	0x20000252
 800077c:	20000254 	.word	0x20000254
 8000780:	20000255 	.word	0x20000255
 8000784:	20000253 	.word	0x20000253
 8000788:	20000004 	.word	0x20000004
 800078c:	2000012c 	.word	0x2000012c
 8000790:	200001d8 	.word	0x200001d8
 8000794:	20000008 	.word	0x20000008
 8000798:	200001e4 	.word	0x200001e4
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	200001f8 	.word	0x200001f8

080007a4 <convertArrays>:
			}
		}
	}
}

void convertArrays(int state) {
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d115      	bne.n	80007de <convertArrays+0x3a>
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
 80007b6:	e00e      	b.n	80007d6 <convertArrays+0x32>
			machineID[i] = idCharactersArray[machineIDInt[i]];
 80007b8:	4a25      	ldr	r2, [pc, #148]	; (8000850 <convertArrays+0xac>)
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <convertArrays+0xb0>)
 80007c4:	5c99      	ldrb	r1, [r3, r2]
 80007c6:	4a24      	ldr	r2, [pc, #144]	; (8000858 <convertArrays+0xb4>)
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	4413      	add	r3, r2
 80007cc:	460a      	mov	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	3301      	adds	r3, #1
 80007d4:	61fb      	str	r3, [r7, #28]
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	2b0b      	cmp	r3, #11
 80007da:	dded      	ble.n	80007b8 <convertArrays+0x14>

		for(int i=0; i<arrLength; i++) {
			wifiPass[i] = charactersArray[wifiPassInt[i]];
		}
	}
}
 80007dc:	e033      	b.n	8000846 <convertArrays+0xa2>
	} else if(state == 2) {
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d118      	bne.n	8000816 <convertArrays+0x72>
		int arrLength = sizeof(wifiSSIDInt)/sizeof(wifiSSIDInt[0]);
 80007e4:	2314      	movs	r3, #20
 80007e6:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<arrLength; i++) {
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	e00e      	b.n	800080c <convertArrays+0x68>
			wifiSSID[i] = charactersArray[wifiSSIDInt[i]];
 80007ee:	4a1b      	ldr	r2, [pc, #108]	; (800085c <convertArrays+0xb8>)
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	4413      	add	r3, r2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <convertArrays+0xbc>)
 80007fa:	5c99      	ldrb	r1, [r3, r2]
 80007fc:	4a19      	ldr	r2, [pc, #100]	; (8000864 <convertArrays+0xc0>)
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	4413      	add	r3, r2
 8000802:	460a      	mov	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrLength; i++) {
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	3301      	adds	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbec      	blt.n	80007ee <convertArrays+0x4a>
}
 8000814:	e017      	b.n	8000846 <convertArrays+0xa2>
		int arrLength = sizeof(wifiPassInt)/sizeof(wifiPassInt[0]);
 8000816:	2314      	movs	r3, #20
 8000818:	613b      	str	r3, [r7, #16]
		for(int i=0; i<arrLength; i++) {
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	e00e      	b.n	800083e <convertArrays+0x9a>
			wifiPass[i] = charactersArray[wifiPassInt[i]];
 8000820:	4a11      	ldr	r2, [pc, #68]	; (8000868 <convertArrays+0xc4>)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	4413      	add	r3, r2
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <convertArrays+0xbc>)
 800082c:	5c99      	ldrb	r1, [r3, r2]
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <convertArrays+0xc8>)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	4413      	add	r3, r2
 8000834:	460a      	mov	r2, r1
 8000836:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrLength; i++) {
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	3301      	adds	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	429a      	cmp	r2, r3
 8000844:	dbec      	blt.n	8000820 <convertArrays+0x7c>
}
 8000846:	bf00      	nop
 8000848:	3724      	adds	r7, #36	; 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	200001d8 	.word	0x200001d8
 8000854:	20000010 	.word	0x20000010
 8000858:	200001a4 	.word	0x200001a4
 800085c:	200001e4 	.word	0x200001e4
 8000860:	2000001c 	.word	0x2000001c
 8000864:	200001b0 	.word	0x200001b0
 8000868:	200001f8 	.word	0x200001f8
 800086c:	200001c4 	.word	0x200001c4

08000870 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b0c6      	sub	sp, #280	; 0x118
 8000874:	af02      	add	r7, sp, #8
 8000876:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800087a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800087e:	6018      	str	r0, [r3, #0]
 8000880:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000888:	6019      	str	r1, [r3, #0]
 800088a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800088e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000892:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000894:	4a31      	ldr	r2, [pc, #196]	; (800095c <sendMachineData+0xec>)
 8000896:	4932      	ldr	r1, [pc, #200]	; (8000960 <sendMachineData+0xf0>)
 8000898:	4832      	ldr	r0, [pc, #200]	; (8000964 <sendMachineData+0xf4>)
 800089a:	f00b fd69 	bl	800c370 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800089e:	4831      	ldr	r0, [pc, #196]	; (8000964 <sendMachineData+0xf4>)
 80008a0:	f7ff fcc0 	bl	8000224 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008b0:	492c      	ldr	r1, [pc, #176]	; (8000964 <sendMachineData+0xf4>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	f00a ff04 	bl	800b6c0 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80008b8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80008bc:	f007 fe34 	bl	8008528 <HAL_Delay>

	sprintf(local_txA,
 80008c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80008cc:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80008d0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80008d4:	4924      	ldr	r1, [pc, #144]	; (8000968 <sendMachineData+0xf8>)
 80008d6:	9100      	str	r1, [sp, #0]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6812      	ldr	r2, [r2, #0]
 80008dc:	4923      	ldr	r1, [pc, #140]	; (800096c <sendMachineData+0xfc>)
 80008de:	f00b fd47 	bl	800c370 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80008e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fc9c 	bl	8000224 <strlen>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80008fa:	491d      	ldr	r1, [pc, #116]	; (8000970 <sendMachineData+0x100>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00b fd37 	bl	800c370 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc8c 	bl	8000224 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	b29a      	uxth	r2, r3
 8000910:	f107 0110 	add.w	r1, r7, #16
 8000914:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000918:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800091c:	6818      	ldr	r0, [r3, #0]
 800091e:	f00a fecf 	bl	800b6c0 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000922:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000926:	f007 fdff 	bl	8008528 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800092a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fc78 	bl	8000224 <strlen>
 8000934:	4603      	mov	r3, r0
 8000936:	b29a      	uxth	r2, r3
 8000938:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800093c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000944:	6818      	ldr	r0, [r3, #0]
 8000946:	f00a febb 	bl	800b6c0 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 800094a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800094e:	f007 fdeb 	bl	8008528 <HAL_Delay>
}
 8000952:	bf00      	nop
 8000954:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	0800cba8 	.word	0x0800cba8
 8000960:	0800cbb8 	.word	0x0800cbb8
 8000964:	20000298 	.word	0x20000298
 8000968:	0800cc34 	.word	0x0800cc34
 800096c:	0800cbd8 	.word	0x0800cbd8
 8000970:	0800cc48 	.word	0x0800cc48

08000974 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af04      	add	r7, sp, #16
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 800097e:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <hata2EEPROM+0xa4>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	1e5a      	subs	r2, r3, #1
 8000984:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <hata2EEPROM+0xa8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4413      	add	r3, r2
 800098a:	4a25      	ldr	r2, [pc, #148]	; (8000a20 <hata2EEPROM+0xac>)
 800098c:	5cd3      	ldrb	r3, [r2, r3]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000992:	f000 f92b 	bl	8000bec <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000996:	e000      	b.n	800099a <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000998:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e012      	b.n	80009c6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <hata2EEPROM+0xa8>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <hata2EEPROM+0xac>)
 80009aa:	5cd3      	ldrb	r3, [r2, r3]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d107      	bne.n	80009c0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <hata2EEPROM+0xa8>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	4919      	ldr	r1, [pc, #100]	; (8000a20 <hata2EEPROM+0xac>)
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	54ca      	strb	r2, [r1, r3]
					break;
 80009be:	e007      	b.n	80009d0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <hata2EEPROM+0xa4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dbe7      	blt.n	80009a0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <hata2EEPROM+0xa8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	b299      	uxth	r1, r3
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <hata2EEPROM+0xa4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	b298      	uxth	r0, r3
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <hata2EEPROM+0xa8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <hata2EEPROM+0xac>)
 80009e2:	4413      	add	r3, r2
 80009e4:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <hata2EEPROM+0xa4>)
 80009e6:	6812      	ldr	r2, [r2, #0]
 80009e8:	b292      	uxth	r2, r2
 80009ea:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80009ee:	9402      	str	r4, [sp, #8]
 80009f0:	9201      	str	r2, [sp, #4]
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	4603      	mov	r3, r0
 80009f6:	460a      	mov	r2, r1
 80009f8:	21a0      	movs	r1, #160	; 0xa0
 80009fa:	480a      	ldr	r0, [pc, #40]	; (8000a24 <hata2EEPROM+0xb0>)
 80009fc:	f008 fe1e 	bl	800963c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a04:	f007 fd90 	bl	8008528 <HAL_Delay>
	eepromKontrol(1);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff fc13 	bl	8000234 <eepromKontrol>
}
 8000a0e:	bf00      	nop
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd90      	pop	{r4, r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000098 	.word	0x20000098
 8000a1c:	2000009c 	.word	0x2000009c
 8000a20:	2000012c 	.word	0x2000012c
 8000a24:	200003bc 	.word	0x200003bc

08000a28 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d11d      	bne.n	8000a74 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000a38:	4b62      	ldr	r3, [pc, #392]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d105      	bne.n	8000a4c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000a40:	4a61      	ldr	r2, [pc, #388]	; (8000bc8 <hataKoduLcdGoster+0x1a0>)
 8000a42:	2101      	movs	r1, #1
 8000a44:	2001      	movs	r0, #1
 8000a46:	f007 f819 	bl	8007a7c <lcd_print>
 8000a4a:	e008      	b.n	8000a5e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000a4c:	4b5d      	ldr	r3, [pc, #372]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d104      	bne.n	8000a5e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000a54:	4a5d      	ldr	r2, [pc, #372]	; (8000bcc <hataKoduLcdGoster+0x1a4>)
 8000a56:	2101      	movs	r1, #1
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f007 f80f 	bl	8007a7c <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000a5e:	4a5c      	ldr	r2, [pc, #368]	; (8000bd0 <hataKoduLcdGoster+0x1a8>)
 8000a60:	2101      	movs	r1, #1
 8000a62:	2002      	movs	r0, #2
 8000a64:	f007 f80a 	bl	8007a7c <lcd_print>
		lcd_print(2, 7, "          ");
 8000a68:	4a5a      	ldr	r2, [pc, #360]	; (8000bd4 <hataKoduLcdGoster+0x1ac>)
 8000a6a:	2107      	movs	r1, #7
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	f007 f805 	bl	8007a7c <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000a72:	e0a3      	b.n	8000bbc <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d11d      	bne.n	8000ab6 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000a7a:	4b52      	ldr	r3, [pc, #328]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d105      	bne.n	8000a8e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000a82:	4a51      	ldr	r2, [pc, #324]	; (8000bc8 <hataKoduLcdGoster+0x1a0>)
 8000a84:	2101      	movs	r1, #1
 8000a86:	2001      	movs	r0, #1
 8000a88:	f006 fff8 	bl	8007a7c <lcd_print>
 8000a8c:	e008      	b.n	8000aa0 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000a8e:	4b4d      	ldr	r3, [pc, #308]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d104      	bne.n	8000aa0 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000a96:	4a4d      	ldr	r2, [pc, #308]	; (8000bcc <hataKoduLcdGoster+0x1a4>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f006 ffee 	bl	8007a7c <lcd_print>
		lcd_print(2, 2, "2");
 8000aa0:	4a4d      	ldr	r2, [pc, #308]	; (8000bd8 <hataKoduLcdGoster+0x1b0>)
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f006 ffe9 	bl	8007a7c <lcd_print>
		lcd_print(2, 7, "          ");
 8000aaa:	4a4a      	ldr	r2, [pc, #296]	; (8000bd4 <hataKoduLcdGoster+0x1ac>)
 8000aac:	2107      	movs	r1, #7
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f006 ffe4 	bl	8007a7c <lcd_print>
}
 8000ab4:	e082      	b.n	8000bbc <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d11d      	bne.n	8000af8 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000abc:	4b41      	ldr	r3, [pc, #260]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d105      	bne.n	8000ad0 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000ac4:	4a40      	ldr	r2, [pc, #256]	; (8000bc8 <hataKoduLcdGoster+0x1a0>)
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f006 ffd7 	bl	8007a7c <lcd_print>
 8000ace:	e008      	b.n	8000ae2 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000ad0:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d104      	bne.n	8000ae2 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000ad8:	4a3c      	ldr	r2, [pc, #240]	; (8000bcc <hataKoduLcdGoster+0x1a4>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	2001      	movs	r0, #1
 8000ade:	f006 ffcd 	bl	8007a7c <lcd_print>
		lcd_print(2, 3, "3");
 8000ae2:	4a3e      	ldr	r2, [pc, #248]	; (8000bdc <hataKoduLcdGoster+0x1b4>)
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f006 ffc8 	bl	8007a7c <lcd_print>
		lcd_print(2, 7, "          ");
 8000aec:	4a39      	ldr	r2, [pc, #228]	; (8000bd4 <hataKoduLcdGoster+0x1ac>)
 8000aee:	2107      	movs	r1, #7
 8000af0:	2002      	movs	r0, #2
 8000af2:	f006 ffc3 	bl	8007a7c <lcd_print>
}
 8000af6:	e061      	b.n	8000bbc <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d11d      	bne.n	8000b3a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000afe:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d105      	bne.n	8000b12 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000b06:	4a30      	ldr	r2, [pc, #192]	; (8000bc8 <hataKoduLcdGoster+0x1a0>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f006 ffb6 	bl	8007a7c <lcd_print>
 8000b10:	e008      	b.n	8000b24 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000b12:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d104      	bne.n	8000b24 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000b1a:	4a2c      	ldr	r2, [pc, #176]	; (8000bcc <hataKoduLcdGoster+0x1a4>)
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f006 ffac 	bl	8007a7c <lcd_print>
		lcd_print(2, 4, "4");
 8000b24:	4a2e      	ldr	r2, [pc, #184]	; (8000be0 <hataKoduLcdGoster+0x1b8>)
 8000b26:	2104      	movs	r1, #4
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f006 ffa7 	bl	8007a7c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b2e:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <hataKoduLcdGoster+0x1ac>)
 8000b30:	2107      	movs	r1, #7
 8000b32:	2002      	movs	r0, #2
 8000b34:	f006 ffa2 	bl	8007a7c <lcd_print>
}
 8000b38:	e040      	b.n	8000bbc <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b05      	cmp	r3, #5
 8000b3e:	d11d      	bne.n	8000b7c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000b40:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d105      	bne.n	8000b54 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000b48:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <hataKoduLcdGoster+0x1a0>)
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f006 ff95 	bl	8007a7c <lcd_print>
 8000b52:	e008      	b.n	8000b66 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d104      	bne.n	8000b66 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <hataKoduLcdGoster+0x1a4>)
 8000b5e:	2101      	movs	r1, #1
 8000b60:	2001      	movs	r0, #1
 8000b62:	f006 ff8b 	bl	8007a7c <lcd_print>
		lcd_print(2, 5, "5");
 8000b66:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <hataKoduLcdGoster+0x1bc>)
 8000b68:	2105      	movs	r1, #5
 8000b6a:	2002      	movs	r0, #2
 8000b6c:	f006 ff86 	bl	8007a7c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b70:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <hataKoduLcdGoster+0x1ac>)
 8000b72:	2107      	movs	r1, #7
 8000b74:	2002      	movs	r0, #2
 8000b76:	f006 ff81 	bl	8007a7c <lcd_print>
}
 8000b7a:	e01f      	b.n	8000bbc <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d11c      	bne.n	8000bbc <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d105      	bne.n	8000b96 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <hataKoduLcdGoster+0x1a0>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f006 ff74 	bl	8007a7c <lcd_print>
 8000b94:	e008      	b.n	8000ba8 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d104      	bne.n	8000ba8 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <hataKoduLcdGoster+0x1a4>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f006 ff6a 	bl	8007a7c <lcd_print>
		lcd_print(2, 6, "6");
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <hataKoduLcdGoster+0x1c0>)
 8000baa:	2106      	movs	r1, #6
 8000bac:	2002      	movs	r0, #2
 8000bae:	f006 ff65 	bl	8007a7c <lcd_print>
		lcd_print(2, 7, "          ");
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <hataKoduLcdGoster+0x1ac>)
 8000bb4:	2107      	movs	r1, #7
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f006 ff60 	bl	8007a7c <lcd_print>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000255 	.word	0x20000255
 8000bc8:	0800ccd4 	.word	0x0800ccd4
 8000bcc:	0800cce4 	.word	0x0800cce4
 8000bd0:	0800ccf4 	.word	0x0800ccf4
 8000bd4:	0800ccf8 	.word	0x0800ccf8
 8000bd8:	0800cd04 	.word	0x0800cd04
 8000bdc:	0800cd08 	.word	0x0800cd08
 8000be0:	0800cd0c 	.word	0x0800cd0c
 8000be4:	0800cd10 	.word	0x0800cd10
 8000be8:	0800cd14 	.word	0x0800cd14

08000bec <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	e009      	b.n	8000c0c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <eepromDataFillWithEmpty+0x38>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <eepromDataFillWithEmpty+0x3c>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <eepromDataFillWithEmpty+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dbf0      	blt.n	8000bf8 <eepromDataFillWithEmpty+0xc>
	}
}
 8000c16:	bf00      	nop
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000070 	.word	0x20000070
 8000c28:	2000012c 	.word	0x2000012c
 8000c2c:	20000098 	.word	0x20000098

08000c30 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c36:	463b      	mov	r3, r7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c42:	4b50      	ldr	r3, [pc, #320]	; (8000d84 <i2cTest+0x154>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b4e      	ldr	r3, [pc, #312]	; (8000d84 <i2cTest+0x154>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 0201 	bic.w	r2, r2, #1
 8000c50:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000c52:	484c      	ldr	r0, [pc, #304]	; (8000d84 <i2cTest+0x154>)
 8000c54:	f008 fbc4 	bl	80093e0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c58:	23c0      	movs	r3, #192	; 0xc0
 8000c5a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000c5c:	2311      	movs	r3, #17
 8000c5e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4846      	ldr	r0, [pc, #280]	; (8000d88 <i2cTest+0x158>)
 8000c6e:	f007 ffcb 	bl	8008c08 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	4844      	ldr	r0, [pc, #272]	; (8000d88 <i2cTest+0x158>)
 8000c78:	f008 fa3d 	bl	80090f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	4841      	ldr	r0, [pc, #260]	; (8000d88 <i2cTest+0x158>)
 8000c82:	f008 fa38 	bl	80090f6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000c86:	200a      	movs	r0, #10
 8000c88:	f007 fc4e 	bl	8008528 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c8c:	bf00      	nop
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	483d      	ldr	r0, [pc, #244]	; (8000d88 <i2cTest+0x158>)
 8000c92:	f008 fa19 	bl	80090c8 <HAL_GPIO_ReadPin>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d006      	beq.n	8000caa <i2cTest+0x7a>
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	483a      	ldr	r0, [pc, #232]	; (8000d88 <i2cTest+0x158>)
 8000ca0:	f008 fa12 	bl	80090c8 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d1f1      	bne.n	8000c8e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	4836      	ldr	r0, [pc, #216]	; (8000d88 <i2cTest+0x158>)
 8000cb0:	f008 fa21 	bl	80090f6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f007 fc37 	bl	8008528 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000cba:	bf00      	nop
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	4832      	ldr	r0, [pc, #200]	; (8000d88 <i2cTest+0x158>)
 8000cc0:	f008 fa02 	bl	80090c8 <HAL_GPIO_ReadPin>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d0f8      	beq.n	8000cbc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2140      	movs	r1, #64	; 0x40
 8000cce:	482e      	ldr	r0, [pc, #184]	; (8000d88 <i2cTest+0x158>)
 8000cd0:	f008 fa11 	bl	80090f6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cd4:	200a      	movs	r0, #10
 8000cd6:	f007 fc27 	bl	8008528 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000cda:	bf00      	nop
 8000cdc:	2140      	movs	r1, #64	; 0x40
 8000cde:	482a      	ldr	r0, [pc, #168]	; (8000d88 <i2cTest+0x158>)
 8000ce0:	f008 f9f2 	bl	80090c8 <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d0f8      	beq.n	8000cdc <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2140      	movs	r1, #64	; 0x40
 8000cee:	4826      	ldr	r0, [pc, #152]	; (8000d88 <i2cTest+0x158>)
 8000cf0:	f008 fa01 	bl	80090f6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cf4:	200a      	movs	r0, #10
 8000cf6:	f007 fc17 	bl	8008528 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000cfa:	bf00      	nop
 8000cfc:	2140      	movs	r1, #64	; 0x40
 8000cfe:	4822      	ldr	r0, [pc, #136]	; (8000d88 <i2cTest+0x158>)
 8000d00:	f008 f9e2 	bl	80090c8 <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d1f8      	bne.n	8000cfc <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	481e      	ldr	r0, [pc, #120]	; (8000d88 <i2cTest+0x158>)
 8000d10:	f008 f9f1 	bl	80090f6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d14:	200a      	movs	r0, #10
 8000d16:	f007 fc07 	bl	8008528 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d1a:	bf00      	nop
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	481a      	ldr	r0, [pc, #104]	; (8000d88 <i2cTest+0x158>)
 8000d20:	f008 f9d2 	bl	80090c8 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d1f8      	bne.n	8000d1c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d2a:	23c0      	movs	r3, #192	; 0xc0
 8000d2c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d2e:	2312      	movs	r3, #18
 8000d30:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4812      	ldr	r0, [pc, #72]	; (8000d88 <i2cTest+0x158>)
 8000d40:	f007 ff62 	bl	8008c08 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <i2cTest+0x154>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <i2cTest+0x154>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d52:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <i2cTest+0x154>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <i2cTest+0x154>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d62:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <i2cTest+0x154>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <i2cTest+0x154>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0201 	orr.w	r2, r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <i2cTest+0x154>)
 8000d76:	f008 f9ef 	bl	8009158 <HAL_I2C_Init>
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200003bc 	.word	0x200003bc
 8000d88:	40010c00 	.word	0x40010c00

08000d8c <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000d96:	20c8      	movs	r0, #200	; 0xc8
 8000d98:	f007 fbc6 	bl	8008528 <HAL_Delay>
	lcd_clear();
 8000d9c:	f006 fe9a 	bl	8007ad4 <lcd_clear>
	if(type == 1 && page == 0) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d143      	bne.n	8000e2e <printTemplate+0xa2>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d140      	bne.n	8000e2e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000dac:	4a9d      	ldr	r2, [pc, #628]	; (8001024 <printTemplate+0x298>)
 8000dae:	2101      	movs	r1, #1
 8000db0:	2001      	movs	r0, #1
 8000db2:	f006 fe63 	bl	8007a7c <lcd_print>
		lcd_print(2, 3, "0");
 8000db6:	4a9c      	ldr	r2, [pc, #624]	; (8001028 <printTemplate+0x29c>)
 8000db8:	2103      	movs	r1, #3
 8000dba:	2002      	movs	r0, #2
 8000dbc:	f006 fe5e 	bl	8007a7c <lcd_print>
		lcd_print(2, 4, "1");
 8000dc0:	4a9a      	ldr	r2, [pc, #616]	; (800102c <printTemplate+0x2a0>)
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	f006 fe59 	bl	8007a7c <lcd_print>
		lcd_print(2, 5, "2");
 8000dca:	4a99      	ldr	r2, [pc, #612]	; (8001030 <printTemplate+0x2a4>)
 8000dcc:	2105      	movs	r1, #5
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f006 fe54 	bl	8007a7c <lcd_print>
		lcd_print(2, 6, "3");
 8000dd4:	4a97      	ldr	r2, [pc, #604]	; (8001034 <printTemplate+0x2a8>)
 8000dd6:	2106      	movs	r1, #6
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f006 fe4f 	bl	8007a7c <lcd_print>
		lcd_print(2, 7, "4");
 8000dde:	4a96      	ldr	r2, [pc, #600]	; (8001038 <printTemplate+0x2ac>)
 8000de0:	2107      	movs	r1, #7
 8000de2:	2002      	movs	r0, #2
 8000de4:	f006 fe4a 	bl	8007a7c <lcd_print>
		lcd_print(2, 10, "5");
 8000de8:	4a94      	ldr	r2, [pc, #592]	; (800103c <printTemplate+0x2b0>)
 8000dea:	210a      	movs	r1, #10
 8000dec:	2002      	movs	r0, #2
 8000dee:	f006 fe45 	bl	8007a7c <lcd_print>
		lcd_print(2, 11, "6");
 8000df2:	4a93      	ldr	r2, [pc, #588]	; (8001040 <printTemplate+0x2b4>)
 8000df4:	210b      	movs	r1, #11
 8000df6:	2002      	movs	r0, #2
 8000df8:	f006 fe40 	bl	8007a7c <lcd_print>
		lcd_print(2, 12, "7");
 8000dfc:	4a91      	ldr	r2, [pc, #580]	; (8001044 <printTemplate+0x2b8>)
 8000dfe:	210c      	movs	r1, #12
 8000e00:	2002      	movs	r0, #2
 8000e02:	f006 fe3b 	bl	8007a7c <lcd_print>
		lcd_print(2, 13, "8");
 8000e06:	4a90      	ldr	r2, [pc, #576]	; (8001048 <printTemplate+0x2bc>)
 8000e08:	210d      	movs	r1, #13
 8000e0a:	2002      	movs	r0, #2
 8000e0c:	f006 fe36 	bl	8007a7c <lcd_print>
		lcd_print(2, 14, "9");
 8000e10:	4a8e      	ldr	r2, [pc, #568]	; (800104c <printTemplate+0x2c0>)
 8000e12:	210e      	movs	r1, #14
 8000e14:	2002      	movs	r0, #2
 8000e16:	f006 fe31 	bl	8007a7c <lcd_print>
		lcd_print(1, 5, machineID);
 8000e1a:	4a8d      	ldr	r2, [pc, #564]	; (8001050 <printTemplate+0x2c4>)
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f006 fe2c 	bl	8007a7c <lcd_print>
		lcd_gotoxy(2, 3);
 8000e24:	2103      	movs	r1, #3
 8000e26:	2002      	movs	r0, #2
 8000e28:	f006 fe09 	bl	8007a3e <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000e2c:	e0f5      	b.n	800101a <printTemplate+0x28e>
	} else if(type == 2) {
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d178      	bne.n	8000f26 <printTemplate+0x19a>
		if(page == 1) {
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d114      	bne.n	8000e64 <printTemplate+0xd8>
			lcd_clear();
 8000e3a:	f006 fe4b 	bl	8007ad4 <lcd_clear>
			HAL_Delay(100);
 8000e3e:	2064      	movs	r0, #100	; 0x64
 8000e40:	f007 fb72 	bl	8008528 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e44:	4a83      	ldr	r2, [pc, #524]	; (8001054 <printTemplate+0x2c8>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f006 fe17 	bl	8007a7c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e4e:	4a82      	ldr	r2, [pc, #520]	; (8001058 <printTemplate+0x2cc>)
 8000e50:	2107      	movs	r1, #7
 8000e52:	2001      	movs	r0, #1
 8000e54:	f006 fe12 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e58:	4a80      	ldr	r2, [pc, #512]	; (800105c <printTemplate+0x2d0>)
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f006 fe0d 	bl	8007a7c <lcd_print>
}
 8000e62:	e0da      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 2) {
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d114      	bne.n	8000e94 <printTemplate+0x108>
			lcd_clear();
 8000e6a:	f006 fe33 	bl	8007ad4 <lcd_clear>
			HAL_Delay(100);
 8000e6e:	2064      	movs	r0, #100	; 0x64
 8000e70:	f007 fb5a 	bl	8008528 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e74:	4a77      	ldr	r2, [pc, #476]	; (8001054 <printTemplate+0x2c8>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f006 fdff 	bl	8007a7c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e7e:	4a76      	ldr	r2, [pc, #472]	; (8001058 <printTemplate+0x2cc>)
 8000e80:	2107      	movs	r1, #7
 8000e82:	2001      	movs	r0, #1
 8000e84:	f006 fdfa 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000e88:	4a75      	ldr	r2, [pc, #468]	; (8001060 <printTemplate+0x2d4>)
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f006 fdf5 	bl	8007a7c <lcd_print>
}
 8000e92:	e0c2      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 3) {
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d114      	bne.n	8000ec4 <printTemplate+0x138>
			lcd_clear();
 8000e9a:	f006 fe1b 	bl	8007ad4 <lcd_clear>
			HAL_Delay(100);
 8000e9e:	2064      	movs	r0, #100	; 0x64
 8000ea0:	f007 fb42 	bl	8008528 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ea4:	4a6b      	ldr	r2, [pc, #428]	; (8001054 <printTemplate+0x2c8>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f006 fde7 	bl	8007a7c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000eae:	4a6a      	ldr	r2, [pc, #424]	; (8001058 <printTemplate+0x2cc>)
 8000eb0:	2107      	movs	r1, #7
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f006 fde2 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000eb8:	4a6a      	ldr	r2, [pc, #424]	; (8001064 <printTemplate+0x2d8>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f006 fddd 	bl	8007a7c <lcd_print>
}
 8000ec2:	e0aa      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 4) {
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d114      	bne.n	8000ef4 <printTemplate+0x168>
			lcd_clear();
 8000eca:	f006 fe03 	bl	8007ad4 <lcd_clear>
			HAL_Delay(100);
 8000ece:	2064      	movs	r0, #100	; 0x64
 8000ed0:	f007 fb2a 	bl	8008528 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ed4:	4a5f      	ldr	r2, [pc, #380]	; (8001054 <printTemplate+0x2c8>)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f006 fdcf 	bl	8007a7c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ede:	4a5e      	ldr	r2, [pc, #376]	; (8001058 <printTemplate+0x2cc>)
 8000ee0:	2107      	movs	r1, #7
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f006 fdca 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000ee8:	4a5f      	ldr	r2, [pc, #380]	; (8001068 <printTemplate+0x2dc>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	2002      	movs	r0, #2
 8000eee:	f006 fdc5 	bl	8007a7c <lcd_print>
}
 8000ef2:	e092      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 5) {
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b05      	cmp	r3, #5
 8000ef8:	f040 808f 	bne.w	800101a <printTemplate+0x28e>
			lcd_clear();
 8000efc:	f006 fdea 	bl	8007ad4 <lcd_clear>
			HAL_Delay(100);
 8000f00:	2064      	movs	r0, #100	; 0x64
 8000f02:	f007 fb11 	bl	8008528 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f06:	4a53      	ldr	r2, [pc, #332]	; (8001054 <printTemplate+0x2c8>)
 8000f08:	2101      	movs	r1, #1
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f006 fdb6 	bl	8007a7c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f10:	4a51      	ldr	r2, [pc, #324]	; (8001058 <printTemplate+0x2cc>)
 8000f12:	2107      	movs	r1, #7
 8000f14:	2001      	movs	r0, #1
 8000f16:	f006 fdb1 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000f1a:	4a54      	ldr	r2, [pc, #336]	; (800106c <printTemplate+0x2e0>)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f006 fdac 	bl	8007a7c <lcd_print>
}
 8000f24:	e079      	b.n	800101a <printTemplate+0x28e>
	} else if(type == 3) {
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d176      	bne.n	800101a <printTemplate+0x28e>
		if(page == 1) {
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d114      	bne.n	8000f5c <printTemplate+0x1d0>
			lcd_clear();
 8000f32:	f006 fdcf 	bl	8007ad4 <lcd_clear>
			HAL_Delay(100);
 8000f36:	2064      	movs	r0, #100	; 0x64
 8000f38:	f007 faf6 	bl	8008528 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f3c:	4a4c      	ldr	r2, [pc, #304]	; (8001070 <printTemplate+0x2e4>)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2001      	movs	r0, #1
 8000f42:	f006 fd9b 	bl	8007a7c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f46:	4a4b      	ldr	r2, [pc, #300]	; (8001074 <printTemplate+0x2e8>)
 8000f48:	2107      	movs	r1, #7
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f006 fd96 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f50:	4a42      	ldr	r2, [pc, #264]	; (800105c <printTemplate+0x2d0>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	2002      	movs	r0, #2
 8000f56:	f006 fd91 	bl	8007a7c <lcd_print>
}
 8000f5a:	e05e      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 2) {
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d114      	bne.n	8000f8c <printTemplate+0x200>
			lcd_clear();
 8000f62:	f006 fdb7 	bl	8007ad4 <lcd_clear>
			HAL_Delay(100);
 8000f66:	2064      	movs	r0, #100	; 0x64
 8000f68:	f007 fade 	bl	8008528 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f6c:	4a40      	ldr	r2, [pc, #256]	; (8001070 <printTemplate+0x2e4>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2001      	movs	r0, #1
 8000f72:	f006 fd83 	bl	8007a7c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f76:	4a3f      	ldr	r2, [pc, #252]	; (8001074 <printTemplate+0x2e8>)
 8000f78:	2107      	movs	r1, #7
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f006 fd7e 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f80:	4a37      	ldr	r2, [pc, #220]	; (8001060 <printTemplate+0x2d4>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	2002      	movs	r0, #2
 8000f86:	f006 fd79 	bl	8007a7c <lcd_print>
}
 8000f8a:	e046      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 3) {
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d114      	bne.n	8000fbc <printTemplate+0x230>
			lcd_clear();
 8000f92:	f006 fd9f 	bl	8007ad4 <lcd_clear>
			HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f007 fac6 	bl	8008528 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f9c:	4a34      	ldr	r2, [pc, #208]	; (8001070 <printTemplate+0x2e4>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f006 fd6b 	bl	8007a7c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fa6:	4a33      	ldr	r2, [pc, #204]	; (8001074 <printTemplate+0x2e8>)
 8000fa8:	2107      	movs	r1, #7
 8000faa:	2001      	movs	r0, #1
 8000fac:	f006 fd66 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000fb0:	4a2c      	ldr	r2, [pc, #176]	; (8001064 <printTemplate+0x2d8>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f006 fd61 	bl	8007a7c <lcd_print>
}
 8000fba:	e02e      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 4) {
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d114      	bne.n	8000fec <printTemplate+0x260>
			lcd_clear();
 8000fc2:	f006 fd87 	bl	8007ad4 <lcd_clear>
			HAL_Delay(100);
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f007 faae 	bl	8008528 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fcc:	4a28      	ldr	r2, [pc, #160]	; (8001070 <printTemplate+0x2e4>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f006 fd53 	bl	8007a7c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fd6:	4a27      	ldr	r2, [pc, #156]	; (8001074 <printTemplate+0x2e8>)
 8000fd8:	2107      	movs	r1, #7
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f006 fd4e 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <printTemplate+0x2dc>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f006 fd49 	bl	8007a7c <lcd_print>
}
 8000fea:	e016      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 5) {
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b05      	cmp	r3, #5
 8000ff0:	d113      	bne.n	800101a <printTemplate+0x28e>
			lcd_clear();
 8000ff2:	f006 fd6f 	bl	8007ad4 <lcd_clear>
			HAL_Delay(100);
 8000ff6:	2064      	movs	r0, #100	; 0x64
 8000ff8:	f007 fa96 	bl	8008528 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ffc:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <printTemplate+0x2e4>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	2001      	movs	r0, #1
 8001002:	f006 fd3b 	bl	8007a7c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001006:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <printTemplate+0x2e8>)
 8001008:	2107      	movs	r1, #7
 800100a:	2001      	movs	r0, #1
 800100c:	f006 fd36 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001010:	4a16      	ldr	r2, [pc, #88]	; (800106c <printTemplate+0x2e0>)
 8001012:	2101      	movs	r1, #1
 8001014:	2002      	movs	r0, #2
 8001016:	f006 fd31 	bl	8007a7c <lcd_print>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	0800cd18 	.word	0x0800cd18
 8001028:	0800cd20 	.word	0x0800cd20
 800102c:	0800cd24 	.word	0x0800cd24
 8001030:	0800cd28 	.word	0x0800cd28
 8001034:	0800cd2c 	.word	0x0800cd2c
 8001038:	0800cd30 	.word	0x0800cd30
 800103c:	0800cd34 	.word	0x0800cd34
 8001040:	0800cd38 	.word	0x0800cd38
 8001044:	0800cd3c 	.word	0x0800cd3c
 8001048:	0800cd40 	.word	0x0800cd40
 800104c:	0800cd44 	.word	0x0800cd44
 8001050:	200001a4 	.word	0x200001a4
 8001054:	0800cd48 	.word	0x0800cd48
 8001058:	200001b0 	.word	0x200001b0
 800105c:	0800cd50 	.word	0x0800cd50
 8001060:	0800cd64 	.word	0x0800cd64
 8001064:	0800cd78 	.word	0x0800cd78
 8001068:	0800cd8c 	.word	0x0800cd8c
 800106c:	0800cda0 	.word	0x0800cda0
 8001070:	0800cdb4 	.word	0x0800cdb4
 8001074:	200001c4 	.word	0x200001c4

08001078 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800107c:	f3bf 8f4f 	dsb	sy
}
 8001080:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <__NVIC_SystemReset+0x24>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800108a:	4904      	ldr	r1, [pc, #16]	; (800109c <__NVIC_SystemReset+0x24>)
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_SystemReset+0x28>)
 800108e:	4313      	orrs	r3, r2
 8001090:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001092:	f3bf 8f4f 	dsb	sy
}
 8001096:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <__NVIC_SystemReset+0x20>
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	05fa0004 	.word	0x05fa0004

080010a4 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80010aa:	2101      	movs	r1, #1
 80010ac:	488e      	ldr	r0, [pc, #568]	; (80012e8 <menu+0x244>)
 80010ae:	f008 f80b 	bl	80090c8 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	f040 808e 	bne.w	80011d6 <menu+0x132>
 80010ba:	4b8c      	ldr	r3, [pc, #560]	; (80012ec <menu+0x248>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	f083 0301 	eor.w	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 8086 	beq.w	80011d6 <menu+0x132>
		menuSayac = menuSayac+1;
 80010ca:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <menu+0x24c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b87      	ldr	r3, [pc, #540]	; (80012f0 <menu+0x24c>)
 80010d4:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80010d6:	4b86      	ldr	r3, [pc, #536]	; (80012f0 <menu+0x24c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b24      	cmp	r3, #36	; 0x24
 80010dc:	d102      	bne.n	80010e4 <menu+0x40>
			menuSayac = 1;
 80010de:	4b84      	ldr	r3, [pc, #528]	; (80012f0 <menu+0x24c>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80010e4:	4b82      	ldr	r3, [pc, #520]	; (80012f0 <menu+0x24c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b12      	cmp	r3, #18
 80010ea:	d106      	bne.n	80010fa <menu+0x56>
 80010ec:	4b81      	ldr	r3, [pc, #516]	; (80012f4 <menu+0x250>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <menu+0x56>
			menuSayac = 21;
 80010f4:	4b7e      	ldr	r3, [pc, #504]	; (80012f0 <menu+0x24c>)
 80010f6:	2215      	movs	r2, #21
 80010f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80010fa:	4b7d      	ldr	r3, [pc, #500]	; (80012f0 <menu+0x24c>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d106      	bne.n	8001110 <menu+0x6c>
 8001102:	4b7d      	ldr	r3, [pc, #500]	; (80012f8 <menu+0x254>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <menu+0x6c>
			menuSayac = 16;
 800110a:	4b79      	ldr	r3, [pc, #484]	; (80012f0 <menu+0x24c>)
 800110c:	2210      	movs	r2, #16
 800110e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001110:	4b77      	ldr	r3, [pc, #476]	; (80012f0 <menu+0x24c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b0d      	cmp	r3, #13
 8001116:	d106      	bne.n	8001126 <menu+0x82>
 8001118:	4b77      	ldr	r3, [pc, #476]	; (80012f8 <menu+0x254>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d102      	bne.n	8001126 <menu+0x82>
			menuSayac = 16;
 8001120:	4b73      	ldr	r3, [pc, #460]	; (80012f0 <menu+0x24c>)
 8001122:	2210      	movs	r2, #16
 8001124:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001126:	4b72      	ldr	r3, [pc, #456]	; (80012f0 <menu+0x24c>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b09      	cmp	r3, #9
 800112c:	d106      	bne.n	800113c <menu+0x98>
 800112e:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <menu+0x254>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d102      	bne.n	800113c <menu+0x98>
			menuSayac = 13;
 8001136:	4b6e      	ldr	r3, [pc, #440]	; (80012f0 <menu+0x24c>)
 8001138:	220d      	movs	r2, #13
 800113a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800113c:	4b6c      	ldr	r3, [pc, #432]	; (80012f0 <menu+0x24c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b0a      	cmp	r3, #10
 8001142:	d10a      	bne.n	800115a <menu+0xb6>
 8001144:	4b6d      	ldr	r3, [pc, #436]	; (80012fc <menu+0x258>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d003      	beq.n	8001154 <menu+0xb0>
 800114c:	4b6b      	ldr	r3, [pc, #428]	; (80012fc <menu+0x258>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d102      	bne.n	800115a <menu+0xb6>
			menuSayac = 11;
 8001154:	4b66      	ldr	r3, [pc, #408]	; (80012f0 <menu+0x24c>)
 8001156:	220b      	movs	r2, #11
 8001158:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800115a:	4b65      	ldr	r3, [pc, #404]	; (80012f0 <menu+0x24c>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b0c      	cmp	r3, #12
 8001160:	d10e      	bne.n	8001180 <menu+0xdc>
 8001162:	4b67      	ldr	r3, [pc, #412]	; (8001300 <menu+0x25c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d003      	beq.n	8001172 <menu+0xce>
 800116a:	4b65      	ldr	r3, [pc, #404]	; (8001300 <menu+0x25c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d106      	bne.n	8001180 <menu+0xdc>
 8001172:	4b61      	ldr	r3, [pc, #388]	; (80012f8 <menu+0x254>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d102      	bne.n	8001180 <menu+0xdc>
			menuSayac = 16;
 800117a:	4b5d      	ldr	r3, [pc, #372]	; (80012f0 <menu+0x24c>)
 800117c:	2210      	movs	r2, #16
 800117e:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001180:	4b5b      	ldr	r3, [pc, #364]	; (80012f0 <menu+0x24c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b0c      	cmp	r3, #12
 8001186:	d10e      	bne.n	80011a6 <menu+0x102>
 8001188:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <menu+0x25c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d003      	beq.n	8001198 <menu+0xf4>
 8001190:	4b5b      	ldr	r3, [pc, #364]	; (8001300 <menu+0x25c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d106      	bne.n	80011a6 <menu+0x102>
 8001198:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <menu+0x254>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d102      	bne.n	80011a6 <menu+0x102>
			menuSayac = 13;
 80011a0:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <menu+0x24c>)
 80011a2:	220d      	movs	r2, #13
 80011a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80011a6:	4b52      	ldr	r3, [pc, #328]	; (80012f0 <menu+0x24c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	d106      	bne.n	80011bc <menu+0x118>
 80011ae:	4b55      	ldr	r3, [pc, #340]	; (8001304 <menu+0x260>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d102      	bne.n	80011bc <menu+0x118>
			menuSayac = 16;
 80011b6:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <menu+0x24c>)
 80011b8:	2210      	movs	r2, #16
 80011ba:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80011bc:	4b4c      	ldr	r3, [pc, #304]	; (80012f0 <menu+0x24c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b18      	cmp	r3, #24
 80011c2:	d106      	bne.n	80011d2 <menu+0x12e>
 80011c4:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <menu+0x250>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <menu+0x12e>
			menuSayac = 26;
 80011cc:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <menu+0x24c>)
 80011ce:	221a      	movs	r2, #26
 80011d0:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80011d2:	f003 fb5f 	bl	8004894 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80011d6:	2108      	movs	r1, #8
 80011d8:	484b      	ldr	r0, [pc, #300]	; (8001308 <menu+0x264>)
 80011da:	f007 ff75 	bl	80090c8 <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d175      	bne.n	80012d0 <menu+0x22c>
 80011e4:	4b41      	ldr	r3, [pc, #260]	; (80012ec <menu+0x248>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f083 0301 	eor.w	r3, r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d06e      	beq.n	80012d0 <menu+0x22c>
		if (menuSayac <= 1) {
 80011f2:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <menu+0x24c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d802      	bhi.n	8001200 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <menu+0x24c>)
 80011fc:	2224      	movs	r2, #36	; 0x24
 80011fe:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001200:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <menu+0x24c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	3b01      	subs	r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <menu+0x24c>)
 800120a:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <menu+0x24c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b14      	cmp	r3, #20
 8001212:	d106      	bne.n	8001222 <menu+0x17e>
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <menu+0x250>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <menu+0x17e>
			menuSayac = 17;
 800121c:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <menu+0x24c>)
 800121e:	2211      	movs	r2, #17
 8001220:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001222:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <menu+0x24c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	d106      	bne.n	8001238 <menu+0x194>
 800122a:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <menu+0x254>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <menu+0x194>
			menuSayac = 7;
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <menu+0x24c>)
 8001234:	2207      	movs	r2, #7
 8001236:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <menu+0x24c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d106      	bne.n	800124e <menu+0x1aa>
 8001240:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <menu+0x254>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <menu+0x1aa>
			menuSayac = 12;
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <menu+0x24c>)
 800124a:	220c      	movs	r2, #12
 800124c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <menu+0x24c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b0c      	cmp	r3, #12
 8001254:	d106      	bne.n	8001264 <menu+0x1c0>
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <menu+0x254>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d102      	bne.n	8001264 <menu+0x1c0>
			menuSayac = 8;
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <menu+0x24c>)
 8001260:	2208      	movs	r2, #8
 8001262:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <menu+0x24c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b0a      	cmp	r3, #10
 800126a:	d10a      	bne.n	8001282 <menu+0x1de>
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <menu+0x258>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d003      	beq.n	800127c <menu+0x1d8>
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <menu+0x258>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d102      	bne.n	8001282 <menu+0x1de>
			menuSayac = 9;
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <menu+0x24c>)
 800127e:	2209      	movs	r2, #9
 8001280:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <menu+0x24c>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b0c      	cmp	r3, #12
 8001288:	d10a      	bne.n	80012a0 <menu+0x1fc>
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <menu+0x25c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d003      	beq.n	800129a <menu+0x1f6>
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <menu+0x25c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d102      	bne.n	80012a0 <menu+0x1fc>
			menuSayac = 11;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <menu+0x24c>)
 800129c:	220b      	movs	r2, #11
 800129e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <menu+0x24c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d106      	bne.n	80012b6 <menu+0x212>
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <menu+0x260>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d102      	bne.n	80012b6 <menu+0x212>
			menuSayac = 14;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <menu+0x24c>)
 80012b2:	220e      	movs	r2, #14
 80012b4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <menu+0x24c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b19      	cmp	r3, #25
 80012bc:	d106      	bne.n	80012cc <menu+0x228>
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <menu+0x250>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d102      	bne.n	80012cc <menu+0x228>
			menuSayac = 23;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <menu+0x24c>)
 80012c8:	2217      	movs	r2, #23
 80012ca:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80012cc:	f003 fae2 	bl	8004894 <bekle>
	}

	if (menuSayac == 0) {
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <menu+0x24c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d133      	bne.n	8001340 <menu+0x29c>
		if(dilSecim == 0) {
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <menu+0x268>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d121      	bne.n	8001324 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80012e0:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <menu+0x26c>)
 80012e2:	2101      	movs	r1, #1
 80012e4:	2001      	movs	r0, #1
 80012e6:	e015      	b.n	8001314 <menu+0x270>
 80012e8:	40010800 	.word	0x40010800
 80012ec:	20000263 	.word	0x20000263
 80012f0:	20000234 	.word	0x20000234
 80012f4:	20000243 	.word	0x20000243
 80012f8:	2000023c 	.word	0x2000023c
 80012fc:	2000023d 	.word	0x2000023d
 8001300:	2000023e 	.word	0x2000023e
 8001304:	2000023f 	.word	0x2000023f
 8001308:	40011000 	.word	0x40011000
 800130c:	20000255 	.word	0x20000255
 8001310:	0800cdbc 	.word	0x0800cdbc
 8001314:	f006 fbb2 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001318:	4a94      	ldr	r2, [pc, #592]	; (800156c <menu+0x4c8>)
 800131a:	2101      	movs	r1, #1
 800131c:	2002      	movs	r0, #2
 800131e:	f006 fbad 	bl	8007a7c <lcd_print>
 8001322:	e00d      	b.n	8001340 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001324:	4b92      	ldr	r3, [pc, #584]	; (8001570 <menu+0x4cc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d109      	bne.n	8001340 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 800132c:	4a91      	ldr	r2, [pc, #580]	; (8001574 <menu+0x4d0>)
 800132e:	2101      	movs	r1, #1
 8001330:	2001      	movs	r0, #1
 8001332:	f006 fba3 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001336:	4a90      	ldr	r2, [pc, #576]	; (8001578 <menu+0x4d4>)
 8001338:	2101      	movs	r1, #1
 800133a:	2002      	movs	r0, #2
 800133c:	f006 fb9e 	bl	8007a7c <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001340:	4b8e      	ldr	r3, [pc, #568]	; (800157c <menu+0x4d8>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b01      	cmp	r3, #1
 8001346:	f040 82b5 	bne.w	80018b4 <menu+0x810>
		if(dilSecim == 0) {
 800134a:	4b89      	ldr	r3, [pc, #548]	; (8001570 <menu+0x4cc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d105      	bne.n	800135e <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001352:	4a8b      	ldr	r2, [pc, #556]	; (8001580 <menu+0x4dc>)
 8001354:	2101      	movs	r1, #1
 8001356:	2001      	movs	r0, #1
 8001358:	f006 fb90 	bl	8007a7c <lcd_print>
 800135c:	e008      	b.n	8001370 <menu+0x2cc>
		} else if(dilSecim == 1) {
 800135e:	4b84      	ldr	r3, [pc, #528]	; (8001570 <menu+0x4cc>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d104      	bne.n	8001370 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001366:	4a87      	ldr	r2, [pc, #540]	; (8001584 <menu+0x4e0>)
 8001368:	2101      	movs	r1, #1
 800136a:	2001      	movs	r0, #1
 800136c:	f006 fb86 	bl	8007a7c <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001370:	4b85      	ldr	r3, [pc, #532]	; (8001588 <menu+0x4e4>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d123      	bne.n	80013c0 <menu+0x31c>
			if(dilSecim == 0) {
 8001378:	4b7d      	ldr	r3, [pc, #500]	; (8001570 <menu+0x4cc>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d105      	bne.n	800138c <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001380:	4a82      	ldr	r2, [pc, #520]	; (800158c <menu+0x4e8>)
 8001382:	2101      	movs	r1, #1
 8001384:	2002      	movs	r0, #2
 8001386:	f006 fb79 	bl	8007a7c <lcd_print>
 800138a:	e008      	b.n	800139e <menu+0x2fa>

			} else if(dilSecim == 1) {
 800138c:	4b78      	ldr	r3, [pc, #480]	; (8001570 <menu+0x4cc>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d104      	bne.n	800139e <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001394:	4a7e      	ldr	r2, [pc, #504]	; (8001590 <menu+0x4ec>)
 8001396:	2101      	movs	r1, #1
 8001398:	2002      	movs	r0, #2
 800139a:	f006 fb6f 	bl	8007a7c <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800139e:	4a7d      	ldr	r2, [pc, #500]	; (8001594 <menu+0x4f0>)
 80013a0:	210f      	movs	r1, #15
 80013a2:	2002      	movs	r0, #2
 80013a4:	f006 fb6a 	bl	8007a7c <lcd_print>
			itoa(hataKayit1, snum, 10);
 80013a8:	4b7b      	ldr	r3, [pc, #492]	; (8001598 <menu+0x4f4>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	220a      	movs	r2, #10
 80013ae:	497b      	ldr	r1, [pc, #492]	; (800159c <menu+0x4f8>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f00a fedf 	bl	800c174 <itoa>
			lcd_print(2, 14, snum);
 80013b6:	4a79      	ldr	r2, [pc, #484]	; (800159c <menu+0x4f8>)
 80013b8:	210e      	movs	r1, #14
 80013ba:	2002      	movs	r0, #2
 80013bc:	f006 fb5e 	bl	8007a7c <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80013c0:	4b71      	ldr	r3, [pc, #452]	; (8001588 <menu+0x4e4>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d123      	bne.n	8001410 <menu+0x36c>
			if(dilSecim == 0) {
 80013c8:	4b69      	ldr	r3, [pc, #420]	; (8001570 <menu+0x4cc>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80013d0:	4a73      	ldr	r2, [pc, #460]	; (80015a0 <menu+0x4fc>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	2002      	movs	r0, #2
 80013d6:	f006 fb51 	bl	8007a7c <lcd_print>
 80013da:	e008      	b.n	80013ee <menu+0x34a>
			} else if(dilSecim == 1) {
 80013dc:	4b64      	ldr	r3, [pc, #400]	; (8001570 <menu+0x4cc>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d104      	bne.n	80013ee <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80013e4:	4a6f      	ldr	r2, [pc, #444]	; (80015a4 <menu+0x500>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	2002      	movs	r0, #2
 80013ea:	f006 fb47 	bl	8007a7c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80013ee:	4a6e      	ldr	r2, [pc, #440]	; (80015a8 <menu+0x504>)
 80013f0:	210f      	movs	r1, #15
 80013f2:	2002      	movs	r0, #2
 80013f4:	f006 fb42 	bl	8007a7c <lcd_print>
			itoa(hataKayit2, snum, 10);
 80013f8:	4b6c      	ldr	r3, [pc, #432]	; (80015ac <menu+0x508>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	220a      	movs	r2, #10
 80013fe:	4967      	ldr	r1, [pc, #412]	; (800159c <menu+0x4f8>)
 8001400:	4618      	mov	r0, r3
 8001402:	f00a feb7 	bl	800c174 <itoa>
			lcd_print(2, 14, snum);
 8001406:	4a65      	ldr	r2, [pc, #404]	; (800159c <menu+0x4f8>)
 8001408:	210e      	movs	r1, #14
 800140a:	2002      	movs	r0, #2
 800140c:	f006 fb36 	bl	8007a7c <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001410:	4b5d      	ldr	r3, [pc, #372]	; (8001588 <menu+0x4e4>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d123      	bne.n	8001460 <menu+0x3bc>
			if(dilSecim == 0) {
 8001418:	4b55      	ldr	r3, [pc, #340]	; (8001570 <menu+0x4cc>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d105      	bne.n	800142c <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001420:	4a63      	ldr	r2, [pc, #396]	; (80015b0 <menu+0x50c>)
 8001422:	2101      	movs	r1, #1
 8001424:	2002      	movs	r0, #2
 8001426:	f006 fb29 	bl	8007a7c <lcd_print>
 800142a:	e008      	b.n	800143e <menu+0x39a>
			} else if(dilSecim == 1) {
 800142c:	4b50      	ldr	r3, [pc, #320]	; (8001570 <menu+0x4cc>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d104      	bne.n	800143e <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001434:	4a5f      	ldr	r2, [pc, #380]	; (80015b4 <menu+0x510>)
 8001436:	2101      	movs	r1, #1
 8001438:	2002      	movs	r0, #2
 800143a:	f006 fb1f 	bl	8007a7c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800143e:	4a5a      	ldr	r2, [pc, #360]	; (80015a8 <menu+0x504>)
 8001440:	210f      	movs	r1, #15
 8001442:	2002      	movs	r0, #2
 8001444:	f006 fb1a 	bl	8007a7c <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001448:	4b5b      	ldr	r3, [pc, #364]	; (80015b8 <menu+0x514>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	220a      	movs	r2, #10
 800144e:	4953      	ldr	r1, [pc, #332]	; (800159c <menu+0x4f8>)
 8001450:	4618      	mov	r0, r3
 8001452:	f00a fe8f 	bl	800c174 <itoa>
			lcd_print(2, 14, snum);
 8001456:	4a51      	ldr	r2, [pc, #324]	; (800159c <menu+0x4f8>)
 8001458:	210e      	movs	r1, #14
 800145a:	2002      	movs	r0, #2
 800145c:	f006 fb0e 	bl	8007a7c <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001460:	4b49      	ldr	r3, [pc, #292]	; (8001588 <menu+0x4e4>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b03      	cmp	r3, #3
 8001466:	d123      	bne.n	80014b0 <menu+0x40c>
			if(dilSecim == 0) {
 8001468:	4b41      	ldr	r3, [pc, #260]	; (8001570 <menu+0x4cc>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d105      	bne.n	800147c <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001470:	4a52      	ldr	r2, [pc, #328]	; (80015bc <menu+0x518>)
 8001472:	2101      	movs	r1, #1
 8001474:	2002      	movs	r0, #2
 8001476:	f006 fb01 	bl	8007a7c <lcd_print>
 800147a:	e008      	b.n	800148e <menu+0x3ea>
			} else if(dilSecim == 1) {
 800147c:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <menu+0x4cc>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d104      	bne.n	800148e <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001484:	4a4e      	ldr	r2, [pc, #312]	; (80015c0 <menu+0x51c>)
 8001486:	2101      	movs	r1, #1
 8001488:	2002      	movs	r0, #2
 800148a:	f006 faf7 	bl	8007a7c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800148e:	4a46      	ldr	r2, [pc, #280]	; (80015a8 <menu+0x504>)
 8001490:	210f      	movs	r1, #15
 8001492:	2002      	movs	r0, #2
 8001494:	f006 faf2 	bl	8007a7c <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001498:	4b4a      	ldr	r3, [pc, #296]	; (80015c4 <menu+0x520>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	220a      	movs	r2, #10
 800149e:	493f      	ldr	r1, [pc, #252]	; (800159c <menu+0x4f8>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00a fe67 	bl	800c174 <itoa>
			lcd_print(2, 14, snum);
 80014a6:	4a3d      	ldr	r2, [pc, #244]	; (800159c <menu+0x4f8>)
 80014a8:	210e      	movs	r1, #14
 80014aa:	2002      	movs	r0, #2
 80014ac:	f006 fae6 	bl	8007a7c <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80014b0:	4b35      	ldr	r3, [pc, #212]	; (8001588 <menu+0x4e4>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d123      	bne.n	8001500 <menu+0x45c>
			if(dilSecim == 0) {
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <menu+0x4cc>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d105      	bne.n	80014cc <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80014c0:	4a41      	ldr	r2, [pc, #260]	; (80015c8 <menu+0x524>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	2002      	movs	r0, #2
 80014c6:	f006 fad9 	bl	8007a7c <lcd_print>
 80014ca:	e008      	b.n	80014de <menu+0x43a>
			} else if(dilSecim == 1) {
 80014cc:	4b28      	ldr	r3, [pc, #160]	; (8001570 <menu+0x4cc>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d104      	bne.n	80014de <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80014d4:	4a3d      	ldr	r2, [pc, #244]	; (80015cc <menu+0x528>)
 80014d6:	2101      	movs	r1, #1
 80014d8:	2002      	movs	r0, #2
 80014da:	f006 facf 	bl	8007a7c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80014de:	4a32      	ldr	r2, [pc, #200]	; (80015a8 <menu+0x504>)
 80014e0:	210f      	movs	r1, #15
 80014e2:	2002      	movs	r0, #2
 80014e4:	f006 faca 	bl	8007a7c <lcd_print>
			itoa(hataKayit5, snum, 10);
 80014e8:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <menu+0x52c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	220a      	movs	r2, #10
 80014ee:	492b      	ldr	r1, [pc, #172]	; (800159c <menu+0x4f8>)
 80014f0:	4618      	mov	r0, r3
 80014f2:	f00a fe3f 	bl	800c174 <itoa>
			lcd_print(2, 14, snum);
 80014f6:	4a29      	ldr	r2, [pc, #164]	; (800159c <menu+0x4f8>)
 80014f8:	210e      	movs	r1, #14
 80014fa:	2002      	movs	r0, #2
 80014fc:	f006 fabe 	bl	8007a7c <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <menu+0x4e4>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d123      	bne.n	8001550 <menu+0x4ac>
			if(dilSecim == 0) {
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <menu+0x4cc>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d105      	bne.n	800151c <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001510:	4a30      	ldr	r2, [pc, #192]	; (80015d4 <menu+0x530>)
 8001512:	2101      	movs	r1, #1
 8001514:	2002      	movs	r0, #2
 8001516:	f006 fab1 	bl	8007a7c <lcd_print>
 800151a:	e008      	b.n	800152e <menu+0x48a>
			} else if(dilSecim == 1) {
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <menu+0x4cc>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d104      	bne.n	800152e <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001524:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <menu+0x534>)
 8001526:	2101      	movs	r1, #1
 8001528:	2002      	movs	r0, #2
 800152a:	f006 faa7 	bl	8007a7c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800152e:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <menu+0x504>)
 8001530:	210f      	movs	r1, #15
 8001532:	2002      	movs	r0, #2
 8001534:	f006 faa2 	bl	8007a7c <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <menu+0x538>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	220a      	movs	r2, #10
 800153e:	4917      	ldr	r1, [pc, #92]	; (800159c <menu+0x4f8>)
 8001540:	4618      	mov	r0, r3
 8001542:	f00a fe17 	bl	800c174 <itoa>
			lcd_print(2, 14, snum);
 8001546:	4a15      	ldr	r2, [pc, #84]	; (800159c <menu+0x4f8>)
 8001548:	210e      	movs	r1, #14
 800154a:	2002      	movs	r0, #2
 800154c:	f006 fa96 	bl	8007a7c <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <menu+0x4e4>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b06      	cmp	r3, #6
 8001556:	d15f      	bne.n	8001618 <menu+0x574>
			if(dilSecim == 0) {
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <menu+0x4cc>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d141      	bne.n	80015e4 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001560:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <menu+0x53c>)
 8001562:	2101      	movs	r1, #1
 8001564:	2002      	movs	r0, #2
 8001566:	f006 fa89 	bl	8007a7c <lcd_print>
 800156a:	e044      	b.n	80015f6 <menu+0x552>
 800156c:	0800cdd0 	.word	0x0800cdd0
 8001570:	20000255 	.word	0x20000255
 8001574:	0800cde4 	.word	0x0800cde4
 8001578:	0800cdf8 	.word	0x0800cdf8
 800157c:	20000234 	.word	0x20000234
 8001580:	0800ce0c 	.word	0x0800ce0c
 8001584:	0800ce20 	.word	0x0800ce20
 8001588:	20000236 	.word	0x20000236
 800158c:	0800ce34 	.word	0x0800ce34
 8001590:	0800ce44 	.word	0x0800ce44
 8001594:	0800ce54 	.word	0x0800ce54
 8001598:	20000256 	.word	0x20000256
 800159c:	2000019c 	.word	0x2000019c
 80015a0:	0800ce58 	.word	0x0800ce58
 80015a4:	0800ce68 	.word	0x0800ce68
 80015a8:	0800ce78 	.word	0x0800ce78
 80015ac:	20000257 	.word	0x20000257
 80015b0:	0800ce7c 	.word	0x0800ce7c
 80015b4:	0800ce8c 	.word	0x0800ce8c
 80015b8:	20000258 	.word	0x20000258
 80015bc:	0800ce9c 	.word	0x0800ce9c
 80015c0:	0800ceac 	.word	0x0800ceac
 80015c4:	20000259 	.word	0x20000259
 80015c8:	0800cebc 	.word	0x0800cebc
 80015cc:	0800cecc 	.word	0x0800cecc
 80015d0:	2000025a 	.word	0x2000025a
 80015d4:	0800cedc 	.word	0x0800cedc
 80015d8:	0800ceec 	.word	0x0800ceec
 80015dc:	2000025b 	.word	0x2000025b
 80015e0:	0800cefc 	.word	0x0800cefc
			} else if(dilSecim == 1) {
 80015e4:	4b4f      	ldr	r3, [pc, #316]	; (8001724 <menu+0x680>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d104      	bne.n	80015f6 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80015ec:	4a4e      	ldr	r2, [pc, #312]	; (8001728 <menu+0x684>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	2002      	movs	r0, #2
 80015f2:	f006 fa43 	bl	8007a7c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015f6:	4a4d      	ldr	r2, [pc, #308]	; (800172c <menu+0x688>)
 80015f8:	210f      	movs	r1, #15
 80015fa:	2002      	movs	r0, #2
 80015fc:	f006 fa3e 	bl	8007a7c <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001600:	4b4b      	ldr	r3, [pc, #300]	; (8001730 <menu+0x68c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	220a      	movs	r2, #10
 8001606:	494b      	ldr	r1, [pc, #300]	; (8001734 <menu+0x690>)
 8001608:	4618      	mov	r0, r3
 800160a:	f00a fdb3 	bl	800c174 <itoa>
			lcd_print(2, 14, snum);
 800160e:	4a49      	ldr	r2, [pc, #292]	; (8001734 <menu+0x690>)
 8001610:	210e      	movs	r1, #14
 8001612:	2002      	movs	r0, #2
 8001614:	f006 fa32 	bl	8007a7c <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001618:	4b47      	ldr	r3, [pc, #284]	; (8001738 <menu+0x694>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b07      	cmp	r3, #7
 800161e:	d123      	bne.n	8001668 <menu+0x5c4>
			if(dilSecim == 0) {
 8001620:	4b40      	ldr	r3, [pc, #256]	; (8001724 <menu+0x680>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d105      	bne.n	8001634 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001628:	4a44      	ldr	r2, [pc, #272]	; (800173c <menu+0x698>)
 800162a:	2101      	movs	r1, #1
 800162c:	2002      	movs	r0, #2
 800162e:	f006 fa25 	bl	8007a7c <lcd_print>
 8001632:	e008      	b.n	8001646 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001634:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <menu+0x680>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d104      	bne.n	8001646 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 800163c:	4a40      	ldr	r2, [pc, #256]	; (8001740 <menu+0x69c>)
 800163e:	2101      	movs	r1, #1
 8001640:	2002      	movs	r0, #2
 8001642:	f006 fa1b 	bl	8007a7c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001646:	4a39      	ldr	r2, [pc, #228]	; (800172c <menu+0x688>)
 8001648:	210f      	movs	r1, #15
 800164a:	2002      	movs	r0, #2
 800164c:	f006 fa16 	bl	8007a7c <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001650:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <menu+0x6a0>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	220a      	movs	r2, #10
 8001656:	4937      	ldr	r1, [pc, #220]	; (8001734 <menu+0x690>)
 8001658:	4618      	mov	r0, r3
 800165a:	f00a fd8b 	bl	800c174 <itoa>
			lcd_print(2, 14, snum);
 800165e:	4a35      	ldr	r2, [pc, #212]	; (8001734 <menu+0x690>)
 8001660:	210e      	movs	r1, #14
 8001662:	2002      	movs	r0, #2
 8001664:	f006 fa0a 	bl	8007a7c <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001668:	4b33      	ldr	r3, [pc, #204]	; (8001738 <menu+0x694>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b08      	cmp	r3, #8
 800166e:	d123      	bne.n	80016b8 <menu+0x614>
			if(dilSecim == 0) {
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <menu+0x680>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001678:	4a33      	ldr	r2, [pc, #204]	; (8001748 <menu+0x6a4>)
 800167a:	2101      	movs	r1, #1
 800167c:	2002      	movs	r0, #2
 800167e:	f006 f9fd 	bl	8007a7c <lcd_print>
 8001682:	e008      	b.n	8001696 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <menu+0x680>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d104      	bne.n	8001696 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 800168c:	4a2f      	ldr	r2, [pc, #188]	; (800174c <menu+0x6a8>)
 800168e:	2101      	movs	r1, #1
 8001690:	2002      	movs	r0, #2
 8001692:	f006 f9f3 	bl	8007a7c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001696:	4a25      	ldr	r2, [pc, #148]	; (800172c <menu+0x688>)
 8001698:	210f      	movs	r1, #15
 800169a:	2002      	movs	r0, #2
 800169c:	f006 f9ee 	bl	8007a7c <lcd_print>
			itoa(hataKayit9, snum, 10);
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <menu+0x6ac>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	220a      	movs	r2, #10
 80016a6:	4923      	ldr	r1, [pc, #140]	; (8001734 <menu+0x690>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f00a fd63 	bl	800c174 <itoa>
			lcd_print(2, 14, snum);
 80016ae:	4a21      	ldr	r2, [pc, #132]	; (8001734 <menu+0x690>)
 80016b0:	210e      	movs	r1, #14
 80016b2:	2002      	movs	r0, #2
 80016b4:	f006 f9e2 	bl	8007a7c <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <menu+0x694>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b09      	cmp	r3, #9
 80016be:	d123      	bne.n	8001708 <menu+0x664>
			if(dilSecim == 0) {
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <menu+0x680>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d105      	bne.n	80016d4 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80016c8:	4a22      	ldr	r2, [pc, #136]	; (8001754 <menu+0x6b0>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	2002      	movs	r0, #2
 80016ce:	f006 f9d5 	bl	8007a7c <lcd_print>
 80016d2:	e008      	b.n	80016e6 <menu+0x642>
			} else if(dilSecim == 1) {
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <menu+0x680>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d104      	bne.n	80016e6 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <menu+0x6b4>)
 80016de:	2101      	movs	r1, #1
 80016e0:	2002      	movs	r0, #2
 80016e2:	f006 f9cb 	bl	8007a7c <lcd_print>
			}
			lcd_print(2, 16, " ");
 80016e6:	4a1d      	ldr	r2, [pc, #116]	; (800175c <menu+0x6b8>)
 80016e8:	2110      	movs	r1, #16
 80016ea:	2002      	movs	r0, #2
 80016ec:	f006 f9c6 	bl	8007a7c <lcd_print>
			itoa(hataKayit10, snum, 10);
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <menu+0x6bc>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	220a      	movs	r2, #10
 80016f6:	490f      	ldr	r1, [pc, #60]	; (8001734 <menu+0x690>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00a fd3b 	bl	800c174 <itoa>
			lcd_print(2, 15, snum);
 80016fe:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <menu+0x690>)
 8001700:	210f      	movs	r1, #15
 8001702:	2002      	movs	r0, #2
 8001704:	f006 f9ba 	bl	8007a7c <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <menu+0x694>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b0a      	cmp	r3, #10
 800170e:	d134      	bne.n	800177a <menu+0x6d6>
			if(dilSecim == 0) {
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <menu+0x680>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d127      	bne.n	8001768 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <menu+0x6c0>)
 800171a:	2101      	movs	r1, #1
 800171c:	2002      	movs	r0, #2
 800171e:	f006 f9ad 	bl	8007a7c <lcd_print>
 8001722:	e02a      	b.n	800177a <menu+0x6d6>
 8001724:	20000255 	.word	0x20000255
 8001728:	0800cf0c 	.word	0x0800cf0c
 800172c:	0800ce78 	.word	0x0800ce78
 8001730:	2000025c 	.word	0x2000025c
 8001734:	2000019c 	.word	0x2000019c
 8001738:	20000236 	.word	0x20000236
 800173c:	0800cf1c 	.word	0x0800cf1c
 8001740:	0800cf2c 	.word	0x0800cf2c
 8001744:	2000025d 	.word	0x2000025d
 8001748:	0800cf3c 	.word	0x0800cf3c
 800174c:	0800cf4c 	.word	0x0800cf4c
 8001750:	2000025e 	.word	0x2000025e
 8001754:	0800cf5c 	.word	0x0800cf5c
 8001758:	0800cf6c 	.word	0x0800cf6c
 800175c:	0800cf7c 	.word	0x0800cf7c
 8001760:	2000025f 	.word	0x2000025f
 8001764:	0800cf80 	.word	0x0800cf80
			} else if(dilSecim == 1) {
 8001768:	4b82      	ldr	r3, [pc, #520]	; (8001974 <menu+0x8d0>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d104      	bne.n	800177a <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001770:	4a81      	ldr	r2, [pc, #516]	; (8001978 <menu+0x8d4>)
 8001772:	2101      	movs	r1, #1
 8001774:	2002      	movs	r0, #2
 8001776:	f006 f981 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800177a:	2102      	movs	r1, #2
 800177c:	487f      	ldr	r0, [pc, #508]	; (800197c <menu+0x8d8>)
 800177e:	f007 fca3 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001782:	4603      	mov	r3, r0
 8001784:	2b01      	cmp	r3, #1
 8001786:	d119      	bne.n	80017bc <menu+0x718>
 8001788:	4b7d      	ldr	r3, [pc, #500]	; (8001980 <menu+0x8dc>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	f083 0301 	eor.w	r3, r3, #1
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d012      	beq.n	80017bc <menu+0x718>
 8001796:	4b7b      	ldr	r3, [pc, #492]	; (8001984 <menu+0x8e0>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10e      	bne.n	80017bc <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 800179e:	4b7a      	ldr	r3, [pc, #488]	; (8001988 <menu+0x8e4>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b78      	ldr	r3, [pc, #480]	; (8001988 <menu+0x8e4>)
 80017a8:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80017aa:	4b77      	ldr	r3, [pc, #476]	; (8001988 <menu+0x8e4>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b0a      	cmp	r3, #10
 80017b0:	d902      	bls.n	80017b8 <menu+0x714>
				hataGostermeSirasi = 0;
 80017b2:	4b75      	ldr	r3, [pc, #468]	; (8001988 <menu+0x8e4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80017b8:	f003 f86c 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80017bc:	2104      	movs	r1, #4
 80017be:	486f      	ldr	r0, [pc, #444]	; (800197c <menu+0x8d8>)
 80017c0:	f007 fc82 	bl	80090c8 <HAL_GPIO_ReadPin>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d119      	bne.n	80017fe <menu+0x75a>
 80017ca:	4b6d      	ldr	r3, [pc, #436]	; (8001980 <menu+0x8dc>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	f083 0301 	eor.w	r3, r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d012      	beq.n	80017fe <menu+0x75a>
 80017d8:	4b6a      	ldr	r3, [pc, #424]	; (8001984 <menu+0x8e0>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10e      	bne.n	80017fe <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80017e0:	4b69      	ldr	r3, [pc, #420]	; (8001988 <menu+0x8e4>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b67      	ldr	r3, [pc, #412]	; (8001988 <menu+0x8e4>)
 80017ea:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80017ec:	4b66      	ldr	r3, [pc, #408]	; (8001988 <menu+0x8e4>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b0b      	cmp	r3, #11
 80017f2:	d902      	bls.n	80017fa <menu+0x756>
	    		hataGostermeSirasi = 10;
 80017f4:	4b64      	ldr	r3, [pc, #400]	; (8001988 <menu+0x8e4>)
 80017f6:	220a      	movs	r2, #10
 80017f8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80017fa:	f003 f84b 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80017fe:	2108      	movs	r1, #8
 8001800:	485e      	ldr	r0, [pc, #376]	; (800197c <menu+0x8d8>)
 8001802:	f007 fc61 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001806:	4603      	mov	r3, r0
 8001808:	2b01      	cmp	r3, #1
 800180a:	d153      	bne.n	80018b4 <menu+0x810>
 800180c:	4b5c      	ldr	r3, [pc, #368]	; (8001980 <menu+0x8dc>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	f083 0301 	eor.w	r3, r3, #1
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d04c      	beq.n	80018b4 <menu+0x810>
 800181a:	4b5b      	ldr	r3, [pc, #364]	; (8001988 <menu+0x8e4>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b0a      	cmp	r3, #10
 8001820:	d148      	bne.n	80018b4 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001822:	4b5a      	ldr	r3, [pc, #360]	; (800198c <menu+0x8e8>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <menu+0x8ec>)
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001830:	4b58      	ldr	r3, [pc, #352]	; (8001994 <menu+0x8f0>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	4b56      	ldr	r3, [pc, #344]	; (8001990 <menu+0x8ec>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800183e:	4b56      	ldr	r3, [pc, #344]	; (8001998 <menu+0x8f4>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	4b52      	ldr	r3, [pc, #328]	; (8001990 <menu+0x8ec>)
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <menu+0x8f8>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <menu+0x8ec>)
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800185a:	4b51      	ldr	r3, [pc, #324]	; (80019a0 <menu+0x8fc>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	4b4b      	ldr	r3, [pc, #300]	; (8001990 <menu+0x8ec>)
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001868:	4b4e      	ldr	r3, [pc, #312]	; (80019a4 <menu+0x900>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
 800186e:	4b48      	ldr	r3, [pc, #288]	; (8001990 <menu+0x8ec>)
 8001870:	2200      	movs	r2, #0
 8001872:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001876:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <menu+0x904>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	4b44      	ldr	r3, [pc, #272]	; (8001990 <menu+0x8ec>)
 800187e:	2200      	movs	r2, #0
 8001880:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001884:	4b49      	ldr	r3, [pc, #292]	; (80019ac <menu+0x908>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	4b41      	ldr	r3, [pc, #260]	; (8001990 <menu+0x8ec>)
 800188c:	2200      	movs	r2, #0
 800188e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <menu+0x90c>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
 8001898:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <menu+0x8ec>)
 800189a:	2200      	movs	r2, #0
 800189c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80018a0:	4b44      	ldr	r3, [pc, #272]	; (80019b4 <menu+0x910>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <menu+0x8ec>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 80018ae:	4b42      	ldr	r3, [pc, #264]	; (80019b8 <menu+0x914>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80018b4:	4b41      	ldr	r3, [pc, #260]	; (80019bc <menu+0x918>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	f040 80fc 	bne.w	8001ab6 <menu+0xa12>
		if(dilSecim == 0) {
 80018be:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <menu+0x8d0>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d105      	bne.n	80018d2 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 80018c6:	4a3e      	ldr	r2, [pc, #248]	; (80019c0 <menu+0x91c>)
 80018c8:	2101      	movs	r1, #1
 80018ca:	2001      	movs	r0, #1
 80018cc:	f006 f8d6 	bl	8007a7c <lcd_print>
 80018d0:	e008      	b.n	80018e4 <menu+0x840>
		} else if(dilSecim == 1) {
 80018d2:	4b28      	ldr	r3, [pc, #160]	; (8001974 <menu+0x8d0>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d104      	bne.n	80018e4 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 80018da:	4a3a      	ldr	r2, [pc, #232]	; (80019c4 <menu+0x920>)
 80018dc:	2101      	movs	r1, #1
 80018de:	2001      	movs	r0, #1
 80018e0:	f006 f8cc 	bl	8007a7c <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <menu+0x8e0>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d003      	beq.n	80018f4 <menu+0x850>
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <menu+0x8e0>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d112      	bne.n	800191a <menu+0x876>
			if(dilSecim == 0) {
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <menu+0x8d0>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 80018fc:	4a32      	ldr	r2, [pc, #200]	; (80019c8 <menu+0x924>)
 80018fe:	2101      	movs	r1, #1
 8001900:	2002      	movs	r0, #2
 8001902:	f006 f8bb 	bl	8007a7c <lcd_print>
 8001906:	e008      	b.n	800191a <menu+0x876>
			} else if(dilSecim == 1) {
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <menu+0x8d0>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d104      	bne.n	800191a <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001910:	4a2e      	ldr	r2, [pc, #184]	; (80019cc <menu+0x928>)
 8001912:	2101      	movs	r1, #1
 8001914:	2002      	movs	r0, #2
 8001916:	f006 f8b1 	bl	8007a7c <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <menu+0x92c>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d116      	bne.n	8001950 <menu+0x8ac>
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <menu+0x8e0>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d112      	bne.n	8001950 <menu+0x8ac>
			if(dilSecim == 0) {
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <menu+0x8d0>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d105      	bne.n	800193e <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001932:	4a28      	ldr	r2, [pc, #160]	; (80019d4 <menu+0x930>)
 8001934:	2101      	movs	r1, #1
 8001936:	2002      	movs	r0, #2
 8001938:	f006 f8a0 	bl	8007a7c <lcd_print>
 800193c:	e008      	b.n	8001950 <menu+0x8ac>
			} else if(dilSecim == 1) {
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <menu+0x8d0>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d104      	bne.n	8001950 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001946:	4a24      	ldr	r2, [pc, #144]	; (80019d8 <menu+0x934>)
 8001948:	2101      	movs	r1, #1
 800194a:	2002      	movs	r0, #2
 800194c:	f006 f896 	bl	8007a7c <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <menu+0x92c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d14c      	bne.n	80019f2 <menu+0x94e>
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <menu+0x8e0>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d148      	bne.n	80019f2 <menu+0x94e>
			if(dilSecim == 0) {
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <menu+0x8d0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d13b      	bne.n	80019e0 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001968:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <menu+0x938>)
 800196a:	2101      	movs	r1, #1
 800196c:	2002      	movs	r0, #2
 800196e:	f006 f885 	bl	8007a7c <lcd_print>
 8001972:	e03e      	b.n	80019f2 <menu+0x94e>
 8001974:	20000255 	.word	0x20000255
 8001978:	0800cf94 	.word	0x0800cf94
 800197c:	40010800 	.word	0x40010800
 8001980:	20000263 	.word	0x20000263
 8001984:	20000243 	.word	0x20000243
 8001988:	20000236 	.word	0x20000236
 800198c:	20000256 	.word	0x20000256
 8001990:	2000012c 	.word	0x2000012c
 8001994:	20000257 	.word	0x20000257
 8001998:	20000258 	.word	0x20000258
 800199c:	20000259 	.word	0x20000259
 80019a0:	2000025a 	.word	0x2000025a
 80019a4:	2000025b 	.word	0x2000025b
 80019a8:	2000025c 	.word	0x2000025c
 80019ac:	2000025d 	.word	0x2000025d
 80019b0:	2000025e 	.word	0x2000025e
 80019b4:	2000025f 	.word	0x2000025f
 80019b8:	20000260 	.word	0x20000260
 80019bc:	20000234 	.word	0x20000234
 80019c0:	0800cfa8 	.word	0x0800cfa8
 80019c4:	0800cfbc 	.word	0x0800cfbc
 80019c8:	0800cfd0 	.word	0x0800cfd0
 80019cc:	0800cfe4 	.word	0x0800cfe4
 80019d0:	20000235 	.word	0x20000235
 80019d4:	0800cff8 	.word	0x0800cff8
 80019d8:	0800d008 	.word	0x0800d008
 80019dc:	0800d018 	.word	0x0800d018
			} else if(dilSecim == 1) {
 80019e0:	4b98      	ldr	r3, [pc, #608]	; (8001c44 <menu+0xba0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d104      	bne.n	80019f2 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 80019e8:	4a97      	ldr	r2, [pc, #604]	; (8001c48 <menu+0xba4>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	2002      	movs	r0, #2
 80019ee:	f006 f845 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019f2:	2102      	movs	r1, #2
 80019f4:	4895      	ldr	r0, [pc, #596]	; (8001c4c <menu+0xba8>)
 80019f6:	f007 fb67 	bl	80090c8 <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d119      	bne.n	8001a34 <menu+0x990>
 8001a00:	4b93      	ldr	r3, [pc, #588]	; (8001c50 <menu+0xbac>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	f083 0301 	eor.w	r3, r3, #1
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d012      	beq.n	8001a34 <menu+0x990>
 8001a0e:	4b91      	ldr	r3, [pc, #580]	; (8001c54 <menu+0xbb0>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10e      	bne.n	8001a34 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001a16:	4b90      	ldr	r3, [pc, #576]	; (8001c58 <menu+0xbb4>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b8e      	ldr	r3, [pc, #568]	; (8001c58 <menu+0xbb4>)
 8001a20:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001a22:	4b8d      	ldr	r3, [pc, #564]	; (8001c58 <menu+0xbb4>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d902      	bls.n	8001a30 <menu+0x98c>
				calismaSekli = 0;
 8001a2a:	4b8b      	ldr	r3, [pc, #556]	; (8001c58 <menu+0xbb4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a30:	f002 ff30 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a34:	2104      	movs	r1, #4
 8001a36:	4885      	ldr	r0, [pc, #532]	; (8001c4c <menu+0xba8>)
 8001a38:	f007 fb46 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d119      	bne.n	8001a76 <menu+0x9d2>
 8001a42:	4b83      	ldr	r3, [pc, #524]	; (8001c50 <menu+0xbac>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	f083 0301 	eor.w	r3, r3, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d012      	beq.n	8001a76 <menu+0x9d2>
 8001a50:	4b80      	ldr	r3, [pc, #512]	; (8001c54 <menu+0xbb0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10e      	bne.n	8001a76 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001a58:	4b7f      	ldr	r3, [pc, #508]	; (8001c58 <menu+0xbb4>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b7d      	ldr	r3, [pc, #500]	; (8001c58 <menu+0xbb4>)
 8001a62:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001a64:	4b7c      	ldr	r3, [pc, #496]	; (8001c58 <menu+0xbb4>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <menu+0x9ce>
	    		calismaSekli = 1;
 8001a6c:	4b7a      	ldr	r3, [pc, #488]	; (8001c58 <menu+0xbb4>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a72:	f002 ff0f 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a76:	2108      	movs	r1, #8
 8001a78:	4874      	ldr	r0, [pc, #464]	; (8001c4c <menu+0xba8>)
 8001a7a:	f007 fb25 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d118      	bne.n	8001ab6 <menu+0xa12>
 8001a84:	4b72      	ldr	r3, [pc, #456]	; (8001c50 <menu+0xbac>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	f083 0301 	eor.w	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d011      	beq.n	8001ab6 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001a92:	4b71      	ldr	r3, [pc, #452]	; (8001c58 <menu+0xbb4>)
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	4b71      	ldr	r3, [pc, #452]	; (8001c5c <menu+0xbb8>)
 8001a98:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001a9a:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <menu+0xbb4>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d106      	bne.n	8001ab0 <menu+0xa0c>
				altLimit = 1;
 8001aa2:	4b6f      	ldr	r3, [pc, #444]	; (8001c60 <menu+0xbbc>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001aa8:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <menu+0xbbc>)
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	4b6b      	ldr	r3, [pc, #428]	; (8001c5c <menu+0xbb8>)
 8001aae:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ab0:	4b6c      	ldr	r3, [pc, #432]	; (8001c64 <menu+0xbc0>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001ab6:	4b6c      	ldr	r3, [pc, #432]	; (8001c68 <menu+0xbc4>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	f040 8083 	bne.w	8001bc6 <menu+0xb22>
		if(dilSecim == 0) {
 8001ac0:	4b60      	ldr	r3, [pc, #384]	; (8001c44 <menu+0xba0>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001ac8:	4a68      	ldr	r2, [pc, #416]	; (8001c6c <menu+0xbc8>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	2001      	movs	r0, #1
 8001ace:	f005 ffd5 	bl	8007a7c <lcd_print>
 8001ad2:	e008      	b.n	8001ae6 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001ad4:	4b5b      	ldr	r3, [pc, #364]	; (8001c44 <menu+0xba0>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d104      	bne.n	8001ae6 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001adc:	4a64      	ldr	r2, [pc, #400]	; (8001c70 <menu+0xbcc>)
 8001ade:	2101      	movs	r1, #1
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f005 ffcb 	bl	8007a7c <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <menu+0xbd0>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d113      	bne.n	8001b16 <menu+0xa72>
			if(dilSecim == 0) {
 8001aee:	4b55      	ldr	r3, [pc, #340]	; (8001c44 <menu+0xba0>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d105      	bne.n	8001b02 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001af6:	4a60      	ldr	r2, [pc, #384]	; (8001c78 <menu+0xbd4>)
 8001af8:	2101      	movs	r1, #1
 8001afa:	2002      	movs	r0, #2
 8001afc:	f005 ffbe 	bl	8007a7c <lcd_print>
 8001b00:	e012      	b.n	8001b28 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001b02:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <menu+0xba0>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d10e      	bne.n	8001b28 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001b0a:	4a5c      	ldr	r2, [pc, #368]	; (8001c7c <menu+0xbd8>)
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f005 ffb4 	bl	8007a7c <lcd_print>
 8001b14:	e008      	b.n	8001b28 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001b16:	4b57      	ldr	r3, [pc, #348]	; (8001c74 <menu+0xbd0>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d104      	bne.n	8001b28 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001b1e:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <menu+0xbdc>)
 8001b20:	2101      	movs	r1, #1
 8001b22:	2002      	movs	r0, #2
 8001b24:	f005 ffaa 	bl	8007a7c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b28:	2102      	movs	r1, #2
 8001b2a:	4848      	ldr	r0, [pc, #288]	; (8001c4c <menu+0xba8>)
 8001b2c:	f007 facc 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d115      	bne.n	8001b62 <menu+0xabe>
 8001b36:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <menu+0xbac>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	f083 0301 	eor.w	r3, r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00e      	beq.n	8001b62 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001b44:	4b4b      	ldr	r3, [pc, #300]	; (8001c74 <menu+0xbd0>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	4b49      	ldr	r3, [pc, #292]	; (8001c74 <menu+0xbd0>)
 8001b4e:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001b50:	4b48      	ldr	r3, [pc, #288]	; (8001c74 <menu+0xbd0>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d902      	bls.n	8001b5e <menu+0xaba>
				emniyetCercevesi = 0;
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <menu+0xbd0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b5e:	f002 fe99 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b62:	2104      	movs	r1, #4
 8001b64:	4839      	ldr	r0, [pc, #228]	; (8001c4c <menu+0xba8>)
 8001b66:	f007 faaf 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d115      	bne.n	8001b9c <menu+0xaf8>
 8001b70:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <menu+0xbac>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f083 0301 	eor.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00e      	beq.n	8001b9c <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <menu+0xbd0>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <menu+0xbd0>)
 8001b88:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001b8a:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <menu+0xbd0>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001b92:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <menu+0xbd0>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b98:	f002 fe7c 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	482b      	ldr	r0, [pc, #172]	; (8001c4c <menu+0xba8>)
 8001ba0:	f007 fa92 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d10d      	bne.n	8001bc6 <menu+0xb22>
 8001baa:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <menu+0xbac>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	f083 0301 	eor.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d006      	beq.n	8001bc6 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <menu+0xbd0>)
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <menu+0xbb8>)
 8001bbe:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001bc0:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <menu+0xbc0>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001bc6:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <menu+0xbc4>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	f040 80ba 	bne.w	8001d44 <menu+0xca0>
		if(dilSecim == 0) {
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <menu+0xba0>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001bd8:	4a2a      	ldr	r2, [pc, #168]	; (8001c84 <menu+0xbe0>)
 8001bda:	2101      	movs	r1, #1
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f005 ff4d 	bl	8007a7c <lcd_print>
 8001be2:	e008      	b.n	8001bf6 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <menu+0xba0>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d104      	bne.n	8001bf6 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001bec:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <menu+0xbe4>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f005 ff43 	bl	8007a7c <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <menu+0xbe8>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d113      	bne.n	8001c26 <menu+0xb82>
			if(dilSecim == 0) {
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <menu+0xba0>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d105      	bne.n	8001c12 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001c06:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <menu+0xbd4>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f005 ff36 	bl	8007a7c <lcd_print>
 8001c10:	e049      	b.n	8001ca6 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <menu+0xba0>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d145      	bne.n	8001ca6 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001c1a:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <menu+0xbd8>)
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f005 ff2c 	bl	8007a7c <lcd_print>
 8001c24:	e03f      	b.n	8001ca6 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <menu+0xbe8>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d13b      	bne.n	8001ca6 <menu+0xc02>
			if(dilSecim == 0) {
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <menu+0xba0>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d12e      	bne.n	8001c94 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001c36:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <menu+0xbec>)
 8001c38:	2101      	movs	r1, #1
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	f005 ff1e 	bl	8007a7c <lcd_print>
 8001c40:	e031      	b.n	8001ca6 <menu+0xc02>
 8001c42:	bf00      	nop
 8001c44:	20000255 	.word	0x20000255
 8001c48:	0800d028 	.word	0x0800d028
 8001c4c:	40010800 	.word	0x40010800
 8001c50:	20000263 	.word	0x20000263
 8001c54:	20000243 	.word	0x20000243
 8001c58:	20000235 	.word	0x20000235
 8001c5c:	2000012c 	.word	0x2000012c
 8001c60:	2000023a 	.word	0x2000023a
 8001c64:	20000260 	.word	0x20000260
 8001c68:	20000234 	.word	0x20000234
 8001c6c:	0800d038 	.word	0x0800d038
 8001c70:	0800d04c 	.word	0x0800d04c
 8001c74:	20000238 	.word	0x20000238
 8001c78:	0800d060 	.word	0x0800d060
 8001c7c:	0800d074 	.word	0x0800d074
 8001c80:	0800d088 	.word	0x0800d088
 8001c84:	0800d098 	.word	0x0800d098
 8001c88:	0800d0ac 	.word	0x0800d0ac
 8001c8c:	20000239 	.word	0x20000239
 8001c90:	0800d0c0 	.word	0x0800d0c0
			} else if(dilSecim == 1) {
 8001c94:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <menu+0xe3c>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d104      	bne.n	8001ca6 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001c9c:	4a91      	ldr	r2, [pc, #580]	; (8001ee4 <menu+0xe40>)
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	2002      	movs	r0, #2
 8001ca2:	f005 feeb 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	488f      	ldr	r0, [pc, #572]	; (8001ee8 <menu+0xe44>)
 8001caa:	f007 fa0d 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d115      	bne.n	8001ce0 <menu+0xc3c>
 8001cb4:	4b8d      	ldr	r3, [pc, #564]	; (8001eec <menu+0xe48>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	f083 0301 	eor.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00e      	beq.n	8001ce0 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001cc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ef0 <menu+0xe4c>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b89      	ldr	r3, [pc, #548]	; (8001ef0 <menu+0xe4c>)
 8001ccc:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001cce:	4b88      	ldr	r3, [pc, #544]	; (8001ef0 <menu+0xe4c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d902      	bls.n	8001cdc <menu+0xc38>
				yavaslamaLimit = 0;
 8001cd6:	4b86      	ldr	r3, [pc, #536]	; (8001ef0 <menu+0xe4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cdc:	f002 fdda 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	4881      	ldr	r0, [pc, #516]	; (8001ee8 <menu+0xe44>)
 8001ce4:	f007 f9f0 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d115      	bne.n	8001d1a <menu+0xc76>
 8001cee:	4b7f      	ldr	r3, [pc, #508]	; (8001eec <menu+0xe48>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	f083 0301 	eor.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00e      	beq.n	8001d1a <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001cfc:	4b7c      	ldr	r3, [pc, #496]	; (8001ef0 <menu+0xe4c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	4b7a      	ldr	r3, [pc, #488]	; (8001ef0 <menu+0xe4c>)
 8001d06:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001d08:	4b79      	ldr	r3, [pc, #484]	; (8001ef0 <menu+0xe4c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001d10:	4b77      	ldr	r3, [pc, #476]	; (8001ef0 <menu+0xe4c>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d16:	f002 fdbd 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d1a:	2108      	movs	r1, #8
 8001d1c:	4872      	ldr	r0, [pc, #456]	; (8001ee8 <menu+0xe44>)
 8001d1e:	f007 f9d3 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d10d      	bne.n	8001d44 <menu+0xca0>
 8001d28:	4b70      	ldr	r3, [pc, #448]	; (8001eec <menu+0xe48>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f083 0301 	eor.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001d36:	4b6e      	ldr	r3, [pc, #440]	; (8001ef0 <menu+0xe4c>)
 8001d38:	781a      	ldrb	r2, [r3, #0]
 8001d3a:	4b6e      	ldr	r3, [pc, #440]	; (8001ef4 <menu+0xe50>)
 8001d3c:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <menu+0xe54>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001d44:	4b6d      	ldr	r3, [pc, #436]	; (8001efc <menu+0xe58>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	f040 80b9 	bne.w	8001ec0 <menu+0xe1c>
		if(dilSecim == 0) {
 8001d4e:	4b64      	ldr	r3, [pc, #400]	; (8001ee0 <menu+0xe3c>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d105      	bne.n	8001d62 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001d56:	4a6a      	ldr	r2, [pc, #424]	; (8001f00 <menu+0xe5c>)
 8001d58:	2101      	movs	r1, #1
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f005 fe8e 	bl	8007a7c <lcd_print>
 8001d60:	e008      	b.n	8001d74 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001d62:	4b5f      	ldr	r3, [pc, #380]	; (8001ee0 <menu+0xe3c>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d104      	bne.n	8001d74 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001d6a:	4a66      	ldr	r2, [pc, #408]	; (8001f04 <menu+0xe60>)
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f005 fe84 	bl	8007a7c <lcd_print>
		}

		if(altLimit == 0) {
 8001d74:	4b64      	ldr	r3, [pc, #400]	; (8001f08 <menu+0xe64>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d113      	bne.n	8001da4 <menu+0xd00>
			if(dilSecim == 0) {
 8001d7c:	4b58      	ldr	r3, [pc, #352]	; (8001ee0 <menu+0xe3c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d105      	bne.n	8001d90 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001d84:	4a61      	ldr	r2, [pc, #388]	; (8001f0c <menu+0xe68>)
 8001d86:	2101      	movs	r1, #1
 8001d88:	2002      	movs	r0, #2
 8001d8a:	f005 fe77 	bl	8007a7c <lcd_print>
 8001d8e:	e020      	b.n	8001dd2 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001d90:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <menu+0xe3c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d11c      	bne.n	8001dd2 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001d98:	4a5d      	ldr	r2, [pc, #372]	; (8001f10 <menu+0xe6c>)
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f005 fe6d 	bl	8007a7c <lcd_print>
 8001da2:	e016      	b.n	8001dd2 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001da4:	4b58      	ldr	r3, [pc, #352]	; (8001f08 <menu+0xe64>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d112      	bne.n	8001dd2 <menu+0xd2e>
			if(dilSecim == 0){
 8001dac:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <menu+0xe3c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001db4:	4a57      	ldr	r2, [pc, #348]	; (8001f14 <menu+0xe70>)
 8001db6:	2101      	movs	r1, #1
 8001db8:	2002      	movs	r0, #2
 8001dba:	f005 fe5f 	bl	8007a7c <lcd_print>
 8001dbe:	e008      	b.n	8001dd2 <menu+0xd2e>
			} else if(dilSecim == 1){
 8001dc0:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <menu+0xe3c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d104      	bne.n	8001dd2 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001dc8:	4a46      	ldr	r2, [pc, #280]	; (8001ee4 <menu+0xe40>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f005 fe55 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	4844      	ldr	r0, [pc, #272]	; (8001ee8 <menu+0xe44>)
 8001dd6:	f007 f977 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d119      	bne.n	8001e14 <menu+0xd70>
 8001de0:	4b42      	ldr	r3, [pc, #264]	; (8001eec <menu+0xe48>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	f083 0301 	eor.w	r3, r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d012      	beq.n	8001e14 <menu+0xd70>
 8001dee:	4b4a      	ldr	r3, [pc, #296]	; (8001f18 <menu+0xe74>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10e      	bne.n	8001e14 <menu+0xd70>
			altLimit = altLimit + 1;
 8001df6:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <menu+0xe64>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b42      	ldr	r3, [pc, #264]	; (8001f08 <menu+0xe64>)
 8001e00:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001e02:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <menu+0xe64>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d902      	bls.n	8001e10 <menu+0xd6c>
				altLimit = 0;
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <menu+0xe64>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e10:	f002 fd40 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001e14:	2104      	movs	r1, #4
 8001e16:	4834      	ldr	r0, [pc, #208]	; (8001ee8 <menu+0xe44>)
 8001e18:	f007 f956 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d119      	bne.n	8001e56 <menu+0xdb2>
 8001e22:	4b32      	ldr	r3, [pc, #200]	; (8001eec <menu+0xe48>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d012      	beq.n	8001e56 <menu+0xdb2>
 8001e30:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <menu+0xe74>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10e      	bne.n	8001e56 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001e38:	4b33      	ldr	r3, [pc, #204]	; (8001f08 <menu+0xe64>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b31      	ldr	r3, [pc, #196]	; (8001f08 <menu+0xe64>)
 8001e42:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001e44:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <menu+0xe64>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <menu+0xdae>
		   		altLimit = 1;
 8001e4c:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <menu+0xe64>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e52:	f002 fd1f 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e56:	2108      	movs	r1, #8
 8001e58:	4823      	ldr	r0, [pc, #140]	; (8001ee8 <menu+0xe44>)
 8001e5a:	f007 f935 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d12d      	bne.n	8001ec0 <menu+0xe1c>
 8001e64:	4b21      	ldr	r3, [pc, #132]	; (8001eec <menu+0xe48>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	f083 0301 	eor.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d026      	beq.n	8001ec0 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <menu+0xe64>)
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <menu+0xe50>)
 8001e78:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001e7a:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <menu+0xe64>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d110      	bne.n	8001ea4 <menu+0xe00>
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <menu+0xe78>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <menu+0xdee>
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <menu+0xe78>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d108      	bne.n	8001ea4 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <menu+0xe78>)
 8001e94:	2203      	movs	r2, #3
 8001e96:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <menu+0xe78>)
 8001e9a:	781a      	ldrb	r2, [r3, #0]
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <menu+0xe50>)
 8001e9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001ea2:	e00a      	b.n	8001eba <menu+0xe16>
			} else if(altLimit == 0) {
 8001ea4:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <menu+0xe64>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d106      	bne.n	8001eba <menu+0xe16>
				platformSilindirTipi = 0;
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <menu+0xe7c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <menu+0xe7c>)
 8001eb4:	781a      	ldrb	r2, [r3, #0]
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <menu+0xe50>)
 8001eb8:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <menu+0xe54>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <menu+0xe58>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b06      	cmp	r3, #6
 8001ec6:	f040 80b6 	bne.w	8002036 <menu+0xf92>
		if(dilSecim == 0) {
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <menu+0xe3c>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d12a      	bne.n	8001f28 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001ed2:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <menu+0xe80>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f005 fdd0 	bl	8007a7c <lcd_print>
 8001edc:	e02d      	b.n	8001f3a <menu+0xe96>
 8001ede:	bf00      	nop
 8001ee0:	20000255 	.word	0x20000255
 8001ee4:	0800d0d4 	.word	0x0800d0d4
 8001ee8:	40010800 	.word	0x40010800
 8001eec:	20000263 	.word	0x20000263
 8001ef0:	20000239 	.word	0x20000239
 8001ef4:	2000012c 	.word	0x2000012c
 8001ef8:	20000260 	.word	0x20000260
 8001efc:	20000234 	.word	0x20000234
 8001f00:	0800d0e8 	.word	0x0800d0e8
 8001f04:	0800d0fc 	.word	0x0800d0fc
 8001f08:	2000023a 	.word	0x2000023a
 8001f0c:	0800d060 	.word	0x0800d060
 8001f10:	0800d074 	.word	0x0800d074
 8001f14:	0800d0c0 	.word	0x0800d0c0
 8001f18:	20000235 	.word	0x20000235
 8001f1c:	20000241 	.word	0x20000241
 8001f20:	20000247 	.word	0x20000247
 8001f24:	0800d110 	.word	0x0800d110
		} else if(dilSecim == 1){
 8001f28:	4b7a      	ldr	r3, [pc, #488]	; (8002114 <menu+0x1070>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d104      	bne.n	8001f3a <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8001f30:	4a79      	ldr	r2, [pc, #484]	; (8002118 <menu+0x1074>)
 8001f32:	2101      	movs	r1, #1
 8001f34:	2001      	movs	r0, #1
 8001f36:	f005 fda1 	bl	8007a7c <lcd_print>
		}
		if(basincSalteri == 0){
 8001f3a:	4b78      	ldr	r3, [pc, #480]	; (800211c <menu+0x1078>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d113      	bne.n	8001f6a <menu+0xec6>
			if(dilSecim == 0) {
 8001f42:	4b74      	ldr	r3, [pc, #464]	; (8002114 <menu+0x1070>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001f4a:	4a75      	ldr	r2, [pc, #468]	; (8002120 <menu+0x107c>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	2002      	movs	r0, #2
 8001f50:	f005 fd94 	bl	8007a7c <lcd_print>
 8001f54:	e020      	b.n	8001f98 <menu+0xef4>
			} else if(dilSecim == 1){
 8001f56:	4b6f      	ldr	r3, [pc, #444]	; (8002114 <menu+0x1070>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d11c      	bne.n	8001f98 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8001f5e:	4a71      	ldr	r2, [pc, #452]	; (8002124 <menu+0x1080>)
 8001f60:	2101      	movs	r1, #1
 8001f62:	2002      	movs	r0, #2
 8001f64:	f005 fd8a 	bl	8007a7c <lcd_print>
 8001f68:	e016      	b.n	8001f98 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8001f6a:	4b6c      	ldr	r3, [pc, #432]	; (800211c <menu+0x1078>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d112      	bne.n	8001f98 <menu+0xef4>
			if(dilSecim == 0) {
 8001f72:	4b68      	ldr	r3, [pc, #416]	; (8002114 <menu+0x1070>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d105      	bne.n	8001f86 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8001f7a:	4a6b      	ldr	r2, [pc, #428]	; (8002128 <menu+0x1084>)
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f005 fd7c 	bl	8007a7c <lcd_print>
 8001f84:	e008      	b.n	8001f98 <menu+0xef4>
			} else if(dilSecim == 1) {
 8001f86:	4b63      	ldr	r3, [pc, #396]	; (8002114 <menu+0x1070>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d104      	bne.n	8001f98 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8001f8e:	4a67      	ldr	r2, [pc, #412]	; (800212c <menu+0x1088>)
 8001f90:	2101      	movs	r1, #1
 8001f92:	2002      	movs	r0, #2
 8001f94:	f005 fd72 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f98:	2102      	movs	r1, #2
 8001f9a:	4865      	ldr	r0, [pc, #404]	; (8002130 <menu+0x108c>)
 8001f9c:	f007 f894 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d115      	bne.n	8001fd2 <menu+0xf2e>
 8001fa6:	4b63      	ldr	r3, [pc, #396]	; (8002134 <menu+0x1090>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	f083 0301 	eor.w	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00e      	beq.n	8001fd2 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8001fb4:	4b59      	ldr	r3, [pc, #356]	; (800211c <menu+0x1078>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b57      	ldr	r3, [pc, #348]	; (800211c <menu+0x1078>)
 8001fbe:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001fc0:	4b56      	ldr	r3, [pc, #344]	; (800211c <menu+0x1078>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d902      	bls.n	8001fce <menu+0xf2a>
				basincSalteri = 0;
 8001fc8:	4b54      	ldr	r3, [pc, #336]	; (800211c <menu+0x1078>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fce:	f002 fc61 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fd2:	2104      	movs	r1, #4
 8001fd4:	4856      	ldr	r0, [pc, #344]	; (8002130 <menu+0x108c>)
 8001fd6:	f007 f877 	bl	80090c8 <HAL_GPIO_ReadPin>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d115      	bne.n	800200c <menu+0xf68>
 8001fe0:	4b54      	ldr	r3, [pc, #336]	; (8002134 <menu+0x1090>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	f083 0301 	eor.w	r3, r3, #1
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00e      	beq.n	800200c <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8001fee:	4b4b      	ldr	r3, [pc, #300]	; (800211c <menu+0x1078>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b49      	ldr	r3, [pc, #292]	; (800211c <menu+0x1078>)
 8001ff8:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001ffa:	4b48      	ldr	r3, [pc, #288]	; (800211c <menu+0x1078>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <menu+0xf64>
		   		basincSalteri = 1;
 8002002:	4b46      	ldr	r3, [pc, #280]	; (800211c <menu+0x1078>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002008:	f002 fc44 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800200c:	2108      	movs	r1, #8
 800200e:	4848      	ldr	r0, [pc, #288]	; (8002130 <menu+0x108c>)
 8002010:	f007 f85a 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002014:	4603      	mov	r3, r0
 8002016:	2b01      	cmp	r3, #1
 8002018:	d10d      	bne.n	8002036 <menu+0xf92>
 800201a:	4b46      	ldr	r3, [pc, #280]	; (8002134 <menu+0x1090>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	f083 0301 	eor.w	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002028:	4b3c      	ldr	r3, [pc, #240]	; (800211c <menu+0x1078>)
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	4b42      	ldr	r3, [pc, #264]	; (8002138 <menu+0x1094>)
 800202e:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002030:	4b42      	ldr	r3, [pc, #264]	; (800213c <menu+0x1098>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002036:	4b42      	ldr	r3, [pc, #264]	; (8002140 <menu+0x109c>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b07      	cmp	r3, #7
 800203c:	f040 80f5 	bne.w	800222a <menu+0x1186>
		if(dilSecim == 0) {
 8002040:	4b34      	ldr	r3, [pc, #208]	; (8002114 <menu+0x1070>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002048:	4a3e      	ldr	r2, [pc, #248]	; (8002144 <menu+0x10a0>)
 800204a:	2101      	movs	r1, #1
 800204c:	2001      	movs	r0, #1
 800204e:	f005 fd15 	bl	8007a7c <lcd_print>
 8002052:	e008      	b.n	8002066 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002054:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <menu+0x1070>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d104      	bne.n	8002066 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 800205c:	4a3a      	ldr	r2, [pc, #232]	; (8002148 <menu+0x10a4>)
 800205e:	2101      	movs	r1, #1
 8002060:	2001      	movs	r0, #1
 8002062:	f005 fd0b 	bl	8007a7c <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <menu+0x10a8>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d113      	bne.n	8002096 <menu+0xff2>
			if(dilSecim == 0) {
 800206e:	4b29      	ldr	r3, [pc, #164]	; (8002114 <menu+0x1070>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002076:	4a2a      	ldr	r2, [pc, #168]	; (8002120 <menu+0x107c>)
 8002078:	2101      	movs	r1, #1
 800207a:	2002      	movs	r0, #2
 800207c:	f005 fcfe 	bl	8007a7c <lcd_print>
 8002080:	e079      	b.n	8002176 <menu+0x10d2>
			} else if(dilSecim == 1){
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <menu+0x1070>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d175      	bne.n	8002176 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800208a:	4a26      	ldr	r2, [pc, #152]	; (8002124 <menu+0x1080>)
 800208c:	2101      	movs	r1, #1
 800208e:	2002      	movs	r0, #2
 8002090:	f005 fcf4 	bl	8007a7c <lcd_print>
 8002094:	e06f      	b.n	8002176 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <menu+0x10a8>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d113      	bne.n	80020c6 <menu+0x1022>
			if(dilSecim == 0) {
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <menu+0x1070>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80020a6:	4a2a      	ldr	r2, [pc, #168]	; (8002150 <menu+0x10ac>)
 80020a8:	2101      	movs	r1, #1
 80020aa:	2002      	movs	r0, #2
 80020ac:	f005 fce6 	bl	8007a7c <lcd_print>
 80020b0:	e061      	b.n	8002176 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <menu+0x1070>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d15d      	bne.n	8002176 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80020ba:	4a26      	ldr	r2, [pc, #152]	; (8002154 <menu+0x10b0>)
 80020bc:	2101      	movs	r1, #1
 80020be:	2002      	movs	r0, #2
 80020c0:	f005 fcdc 	bl	8007a7c <lcd_print>
 80020c4:	e057      	b.n	8002176 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80020c6:	4b21      	ldr	r3, [pc, #132]	; (800214c <menu+0x10a8>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d113      	bne.n	80020f6 <menu+0x1052>
			if(dilSecim == 0) {
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <menu+0x1070>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80020d6:	4a20      	ldr	r2, [pc, #128]	; (8002158 <menu+0x10b4>)
 80020d8:	2101      	movs	r1, #1
 80020da:	2002      	movs	r0, #2
 80020dc:	f005 fcce 	bl	8007a7c <lcd_print>
 80020e0:	e049      	b.n	8002176 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <menu+0x1070>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d145      	bne.n	8002176 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80020ea:	4a1c      	ldr	r2, [pc, #112]	; (800215c <menu+0x10b8>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	2002      	movs	r0, #2
 80020f0:	f005 fcc4 	bl	8007a7c <lcd_print>
 80020f4:	e03f      	b.n	8002176 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <menu+0x10a8>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d13b      	bne.n	8002176 <menu+0x10d2>
			if(dilSecim == 0) {
 80020fe:	4b05      	ldr	r3, [pc, #20]	; (8002114 <menu+0x1070>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d12e      	bne.n	8002164 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002106:	4a16      	ldr	r2, [pc, #88]	; (8002160 <menu+0x10bc>)
 8002108:	2101      	movs	r1, #1
 800210a:	2002      	movs	r0, #2
 800210c:	f005 fcb6 	bl	8007a7c <lcd_print>
 8002110:	e031      	b.n	8002176 <menu+0x10d2>
 8002112:	bf00      	nop
 8002114:	20000255 	.word	0x20000255
 8002118:	0800d120 	.word	0x0800d120
 800211c:	2000023b 	.word	0x2000023b
 8002120:	0800d060 	.word	0x0800d060
 8002124:	0800d074 	.word	0x0800d074
 8002128:	0800d0c0 	.word	0x0800d0c0
 800212c:	0800d0d4 	.word	0x0800d0d4
 8002130:	40010800 	.word	0x40010800
 8002134:	20000263 	.word	0x20000263
 8002138:	2000012c 	.word	0x2000012c
 800213c:	20000260 	.word	0x20000260
 8002140:	20000234 	.word	0x20000234
 8002144:	0800d130 	.word	0x0800d130
 8002148:	0800d144 	.word	0x0800d144
 800214c:	2000023c 	.word	0x2000023c
 8002150:	0800d158 	.word	0x0800d158
 8002154:	0800d16c 	.word	0x0800d16c
 8002158:	0800d180 	.word	0x0800d180
 800215c:	0800d194 	.word	0x0800d194
 8002160:	0800d1a8 	.word	0x0800d1a8
			} else if(dilSecim == 1){
 8002164:	4b99      	ldr	r3, [pc, #612]	; (80023cc <menu+0x1328>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d104      	bne.n	8002176 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 800216c:	4a98      	ldr	r2, [pc, #608]	; (80023d0 <menu+0x132c>)
 800216e:	2101      	movs	r1, #1
 8002170:	2002      	movs	r0, #2
 8002172:	f005 fc83 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002176:	2102      	movs	r1, #2
 8002178:	4896      	ldr	r0, [pc, #600]	; (80023d4 <menu+0x1330>)
 800217a:	f006 ffa5 	bl	80090c8 <HAL_GPIO_ReadPin>
 800217e:	4603      	mov	r3, r0
 8002180:	2b01      	cmp	r3, #1
 8002182:	d115      	bne.n	80021b0 <menu+0x110c>
 8002184:	4b94      	ldr	r3, [pc, #592]	; (80023d8 <menu+0x1334>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	f083 0301 	eor.w	r3, r3, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00e      	beq.n	80021b0 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002192:	4b92      	ldr	r3, [pc, #584]	; (80023dc <menu+0x1338>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b90      	ldr	r3, [pc, #576]	; (80023dc <menu+0x1338>)
 800219c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800219e:	4b8f      	ldr	r3, [pc, #572]	; (80023dc <menu+0x1338>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d902      	bls.n	80021ac <menu+0x1108>
				kapiSecimleri = 0;
 80021a6:	4b8d      	ldr	r3, [pc, #564]	; (80023dc <menu+0x1338>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021ac:	f002 fb72 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021b0:	2104      	movs	r1, #4
 80021b2:	4888      	ldr	r0, [pc, #544]	; (80023d4 <menu+0x1330>)
 80021b4:	f006 ff88 	bl	80090c8 <HAL_GPIO_ReadPin>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d115      	bne.n	80021ea <menu+0x1146>
 80021be:	4b86      	ldr	r3, [pc, #536]	; (80023d8 <menu+0x1334>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	f083 0301 	eor.w	r3, r3, #1
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80021cc:	4b83      	ldr	r3, [pc, #524]	; (80023dc <menu+0x1338>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	4b81      	ldr	r3, [pc, #516]	; (80023dc <menu+0x1338>)
 80021d6:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80021d8:	4b80      	ldr	r3, [pc, #512]	; (80023dc <menu+0x1338>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d902      	bls.n	80021e6 <menu+0x1142>
		   		kapiSecimleri = 3;
 80021e0:	4b7e      	ldr	r3, [pc, #504]	; (80023dc <menu+0x1338>)
 80021e2:	2203      	movs	r2, #3
 80021e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021e6:	f002 fb55 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ea:	2108      	movs	r1, #8
 80021ec:	4879      	ldr	r0, [pc, #484]	; (80023d4 <menu+0x1330>)
 80021ee:	f006 ff6b 	bl	80090c8 <HAL_GPIO_ReadPin>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d118      	bne.n	800222a <menu+0x1186>
 80021f8:	4b77      	ldr	r3, [pc, #476]	; (80023d8 <menu+0x1334>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	f083 0301 	eor.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d011      	beq.n	800222a <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002206:	4b75      	ldr	r3, [pc, #468]	; (80023dc <menu+0x1338>)
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	4b75      	ldr	r3, [pc, #468]	; (80023e0 <menu+0x133c>)
 800220c:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800220e:	4b73      	ldr	r3, [pc, #460]	; (80023dc <menu+0x1338>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <menu+0x1180>
				altLimit = 1;
 8002216:	4b73      	ldr	r3, [pc, #460]	; (80023e4 <menu+0x1340>)
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800221c:	4b71      	ldr	r3, [pc, #452]	; (80023e4 <menu+0x1340>)
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	4b6f      	ldr	r3, [pc, #444]	; (80023e0 <menu+0x133c>)
 8002222:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002224:	4b70      	ldr	r3, [pc, #448]	; (80023e8 <menu+0x1344>)
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800222a:	4b70      	ldr	r3, [pc, #448]	; (80023ec <menu+0x1348>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b08      	cmp	r3, #8
 8002230:	f040 8092 	bne.w	8002358 <menu+0x12b4>
		if(dilSecim == 0) {
 8002234:	4b65      	ldr	r3, [pc, #404]	; (80023cc <menu+0x1328>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 800223c:	4a6c      	ldr	r2, [pc, #432]	; (80023f0 <menu+0x134c>)
 800223e:	2101      	movs	r1, #1
 8002240:	2001      	movs	r0, #1
 8002242:	f005 fc1b 	bl	8007a7c <lcd_print>
 8002246:	e008      	b.n	800225a <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002248:	4b60      	ldr	r3, [pc, #384]	; (80023cc <menu+0x1328>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d104      	bne.n	800225a <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002250:	4a68      	ldr	r2, [pc, #416]	; (80023f4 <menu+0x1350>)
 8002252:	2101      	movs	r1, #1
 8002254:	2001      	movs	r0, #1
 8002256:	f005 fc11 	bl	8007a7c <lcd_print>
		}

		if(kapiAcTipi == 0){
 800225a:	4b67      	ldr	r3, [pc, #412]	; (80023f8 <menu+0x1354>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d113      	bne.n	800228a <menu+0x11e6>
			if(dilSecim == 0) {
 8002262:	4b5a      	ldr	r3, [pc, #360]	; (80023cc <menu+0x1328>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800226a:	4a64      	ldr	r2, [pc, #400]	; (80023fc <menu+0x1358>)
 800226c:	2101      	movs	r1, #1
 800226e:	2002      	movs	r0, #2
 8002270:	f005 fc04 	bl	8007a7c <lcd_print>
 8002274:	e020      	b.n	80022b8 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002276:	4b55      	ldr	r3, [pc, #340]	; (80023cc <menu+0x1328>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d11c      	bne.n	80022b8 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800227e:	4a60      	ldr	r2, [pc, #384]	; (8002400 <menu+0x135c>)
 8002280:	2101      	movs	r1, #1
 8002282:	2002      	movs	r0, #2
 8002284:	f005 fbfa 	bl	8007a7c <lcd_print>
 8002288:	e016      	b.n	80022b8 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800228a:	4b5b      	ldr	r3, [pc, #364]	; (80023f8 <menu+0x1354>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d112      	bne.n	80022b8 <menu+0x1214>
			if(dilSecim == 0){
 8002292:	4b4e      	ldr	r3, [pc, #312]	; (80023cc <menu+0x1328>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800229a:	4a5a      	ldr	r2, [pc, #360]	; (8002404 <menu+0x1360>)
 800229c:	2101      	movs	r1, #1
 800229e:	2002      	movs	r0, #2
 80022a0:	f005 fbec 	bl	8007a7c <lcd_print>
 80022a4:	e008      	b.n	80022b8 <menu+0x1214>
			} else if(dilSecim == 1){
 80022a6:	4b49      	ldr	r3, [pc, #292]	; (80023cc <menu+0x1328>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d104      	bne.n	80022b8 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80022ae:	4a56      	ldr	r2, [pc, #344]	; (8002408 <menu+0x1364>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	2002      	movs	r0, #2
 80022b4:	f005 fbe2 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022b8:	2102      	movs	r1, #2
 80022ba:	4846      	ldr	r0, [pc, #280]	; (80023d4 <menu+0x1330>)
 80022bc:	f006 ff04 	bl	80090c8 <HAL_GPIO_ReadPin>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d115      	bne.n	80022f2 <menu+0x124e>
 80022c6:	4b44      	ldr	r3, [pc, #272]	; (80023d8 <menu+0x1334>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f083 0301 	eor.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00e      	beq.n	80022f2 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80022d4:	4b48      	ldr	r3, [pc, #288]	; (80023f8 <menu+0x1354>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <menu+0x1354>)
 80022de:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80022e0:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <menu+0x1354>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d902      	bls.n	80022ee <menu+0x124a>
				kapiAcTipi = 0;
 80022e8:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <menu+0x1354>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022ee:	f002 fad1 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022f2:	2104      	movs	r1, #4
 80022f4:	4837      	ldr	r0, [pc, #220]	; (80023d4 <menu+0x1330>)
 80022f6:	f006 fee7 	bl	80090c8 <HAL_GPIO_ReadPin>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d115      	bne.n	800232c <menu+0x1288>
 8002300:	4b35      	ldr	r3, [pc, #212]	; (80023d8 <menu+0x1334>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	f083 0301 	eor.w	r3, r3, #1
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00e      	beq.n	800232c <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800230e:	4b3a      	ldr	r3, [pc, #232]	; (80023f8 <menu+0x1354>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	3b01      	subs	r3, #1
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4b38      	ldr	r3, [pc, #224]	; (80023f8 <menu+0x1354>)
 8002318:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800231a:	4b37      	ldr	r3, [pc, #220]	; (80023f8 <menu+0x1354>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <menu+0x1284>
		   		kapiAcTipi = 1;
 8002322:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <menu+0x1354>)
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002328:	f002 fab4 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800232c:	2108      	movs	r1, #8
 800232e:	4829      	ldr	r0, [pc, #164]	; (80023d4 <menu+0x1330>)
 8002330:	f006 feca 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002334:	4603      	mov	r3, r0
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10e      	bne.n	8002358 <menu+0x12b4>
 800233a:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <menu+0x1334>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	f083 0301 	eor.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <menu+0x1354>)
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <menu+0x133c>)
 800234e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002352:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <menu+0x1344>)
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002358:	4b24      	ldr	r3, [pc, #144]	; (80023ec <menu+0x1348>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b09      	cmp	r3, #9
 800235e:	f040 80b9 	bne.w	80024d4 <menu+0x1430>
		if(dilSecim == 0){
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <menu+0x1328>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800236a:	4a28      	ldr	r2, [pc, #160]	; (800240c <menu+0x1368>)
 800236c:	2101      	movs	r1, #1
 800236e:	2001      	movs	r0, #1
 8002370:	f005 fb84 	bl	8007a7c <lcd_print>
 8002374:	e008      	b.n	8002388 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <menu+0x1328>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d104      	bne.n	8002388 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800237e:	4a24      	ldr	r2, [pc, #144]	; (8002410 <menu+0x136c>)
 8002380:	2101      	movs	r1, #1
 8002382:	2001      	movs	r0, #1
 8002384:	f005 fb7a 	bl	8007a7c <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002388:	4b22      	ldr	r3, [pc, #136]	; (8002414 <menu+0x1370>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002390:	4a21      	ldr	r2, [pc, #132]	; (8002418 <menu+0x1374>)
 8002392:	2101      	movs	r1, #1
 8002394:	2002      	movs	r0, #2
 8002396:	f005 fb71 	bl	8007a7c <lcd_print>
 800239a:	e04c      	b.n	8002436 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <menu+0x1370>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d13f      	bne.n	8002424 <menu+0x1380>
			if(dilSecim == 0){
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <menu+0x1328>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80023ac:	4a1b      	ldr	r2, [pc, #108]	; (800241c <menu+0x1378>)
 80023ae:	2101      	movs	r1, #1
 80023b0:	2002      	movs	r0, #2
 80023b2:	f005 fb63 	bl	8007a7c <lcd_print>
 80023b6:	e03e      	b.n	8002436 <menu+0x1392>
			} else if(dilSecim == 1) {
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <menu+0x1328>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d13a      	bne.n	8002436 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80023c0:	4a17      	ldr	r2, [pc, #92]	; (8002420 <menu+0x137c>)
 80023c2:	2101      	movs	r1, #1
 80023c4:	2002      	movs	r0, #2
 80023c6:	f005 fb59 	bl	8007a7c <lcd_print>
 80023ca:	e034      	b.n	8002436 <menu+0x1392>
 80023cc:	20000255 	.word	0x20000255
 80023d0:	0800d1bc 	.word	0x0800d1bc
 80023d4:	40010800 	.word	0x40010800
 80023d8:	20000263 	.word	0x20000263
 80023dc:	2000023c 	.word	0x2000023c
 80023e0:	2000012c 	.word	0x2000012c
 80023e4:	2000023a 	.word	0x2000023a
 80023e8:	20000260 	.word	0x20000260
 80023ec:	20000234 	.word	0x20000234
 80023f0:	0800d1d0 	.word	0x0800d1d0
 80023f4:	0800d1e4 	.word	0x0800d1e4
 80023f8:	20000240 	.word	0x20000240
 80023fc:	0800d1f8 	.word	0x0800d1f8
 8002400:	0800d208 	.word	0x0800d208
 8002404:	0800d218 	.word	0x0800d218
 8002408:	0800d22c 	.word	0x0800d22c
 800240c:	0800d240 	.word	0x0800d240
 8002410:	0800d254 	.word	0x0800d254
 8002414:	2000023d 	.word	0x2000023d
 8002418:	0800d268 	.word	0x0800d268
 800241c:	0800d27c 	.word	0x0800d27c
 8002420:	0800d28c 	.word	0x0800d28c
			}
		} else if(kapi1Tip == 2) {
 8002424:	4b8a      	ldr	r3, [pc, #552]	; (8002650 <menu+0x15ac>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d104      	bne.n	8002436 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 800242c:	4a89      	ldr	r2, [pc, #548]	; (8002654 <menu+0x15b0>)
 800242e:	2101      	movs	r1, #1
 8002430:	2002      	movs	r0, #2
 8002432:	f005 fb23 	bl	8007a7c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002436:	2102      	movs	r1, #2
 8002438:	4887      	ldr	r0, [pc, #540]	; (8002658 <menu+0x15b4>)
 800243a:	f006 fe45 	bl	80090c8 <HAL_GPIO_ReadPin>
 800243e:	4603      	mov	r3, r0
 8002440:	2b01      	cmp	r3, #1
 8002442:	d115      	bne.n	8002470 <menu+0x13cc>
 8002444:	4b85      	ldr	r3, [pc, #532]	; (800265c <menu+0x15b8>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	f083 0301 	eor.w	r3, r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00e      	beq.n	8002470 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002452:	4b7f      	ldr	r3, [pc, #508]	; (8002650 <menu+0x15ac>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b7d      	ldr	r3, [pc, #500]	; (8002650 <menu+0x15ac>)
 800245c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800245e:	4b7c      	ldr	r3, [pc, #496]	; (8002650 <menu+0x15ac>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d902      	bls.n	800246c <menu+0x13c8>
				kapi1Tip = 0;
 8002466:	4b7a      	ldr	r3, [pc, #488]	; (8002650 <menu+0x15ac>)
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800246c:	f002 fa12 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002470:	2104      	movs	r1, #4
 8002472:	4879      	ldr	r0, [pc, #484]	; (8002658 <menu+0x15b4>)
 8002474:	f006 fe28 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002478:	4603      	mov	r3, r0
 800247a:	2b01      	cmp	r3, #1
 800247c:	d115      	bne.n	80024aa <menu+0x1406>
 800247e:	4b77      	ldr	r3, [pc, #476]	; (800265c <menu+0x15b8>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	f083 0301 	eor.w	r3, r3, #1
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00e      	beq.n	80024aa <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 800248c:	4b70      	ldr	r3, [pc, #448]	; (8002650 <menu+0x15ac>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	3b01      	subs	r3, #1
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b6e      	ldr	r3, [pc, #440]	; (8002650 <menu+0x15ac>)
 8002496:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002498:	4b6d      	ldr	r3, [pc, #436]	; (8002650 <menu+0x15ac>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d902      	bls.n	80024a6 <menu+0x1402>
		   		kapi1Tip = 2;
 80024a0:	4b6b      	ldr	r3, [pc, #428]	; (8002650 <menu+0x15ac>)
 80024a2:	2202      	movs	r2, #2
 80024a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024a6:	f002 f9f5 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024aa:	2108      	movs	r1, #8
 80024ac:	486a      	ldr	r0, [pc, #424]	; (8002658 <menu+0x15b4>)
 80024ae:	f006 fe0b 	bl	80090c8 <HAL_GPIO_ReadPin>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d10d      	bne.n	80024d4 <menu+0x1430>
 80024b8:	4b68      	ldr	r3, [pc, #416]	; (800265c <menu+0x15b8>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	f083 0301 	eor.w	r3, r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80024c6:	4b62      	ldr	r3, [pc, #392]	; (8002650 <menu+0x15ac>)
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	4b65      	ldr	r3, [pc, #404]	; (8002660 <menu+0x15bc>)
 80024cc:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80024ce:	4b65      	ldr	r3, [pc, #404]	; (8002664 <menu+0x15c0>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80024d4:	4b64      	ldr	r3, [pc, #400]	; (8002668 <menu+0x15c4>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b0a      	cmp	r3, #10
 80024da:	d17f      	bne.n	80025dc <menu+0x1538>
		if(dilSecim == 0) {
 80024dc:	4b63      	ldr	r3, [pc, #396]	; (800266c <menu+0x15c8>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80024e4:	4a62      	ldr	r2, [pc, #392]	; (8002670 <menu+0x15cc>)
 80024e6:	2101      	movs	r1, #1
 80024e8:	2001      	movs	r0, #1
 80024ea:	f005 fac7 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80024ee:	4a61      	ldr	r2, [pc, #388]	; (8002674 <menu+0x15d0>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	2002      	movs	r0, #2
 80024f4:	f005 fac2 	bl	8007a7c <lcd_print>
 80024f8:	e00d      	b.n	8002516 <menu+0x1472>
		} else if(dilSecim == 1) {
 80024fa:	4b5c      	ldr	r3, [pc, #368]	; (800266c <menu+0x15c8>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d109      	bne.n	8002516 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002502:	4a5d      	ldr	r2, [pc, #372]	; (8002678 <menu+0x15d4>)
 8002504:	2101      	movs	r1, #1
 8002506:	2001      	movs	r0, #1
 8002508:	f005 fab8 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800250c:	4a5b      	ldr	r2, [pc, #364]	; (800267c <menu+0x15d8>)
 800250e:	2101      	movs	r1, #1
 8002510:	2002      	movs	r0, #2
 8002512:	f005 fab3 	bl	8007a7c <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002516:	4b5a      	ldr	r3, [pc, #360]	; (8002680 <menu+0x15dc>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	220a      	movs	r2, #10
 800251c:	4959      	ldr	r1, [pc, #356]	; (8002684 <menu+0x15e0>)
 800251e:	4618      	mov	r0, r3
 8002520:	f009 fe28 	bl	800c174 <itoa>
		lcd_print(2,16,snum);
 8002524:	4a57      	ldr	r2, [pc, #348]	; (8002684 <menu+0x15e0>)
 8002526:	2110      	movs	r1, #16
 8002528:	2002      	movs	r0, #2
 800252a:	f005 faa7 	bl	8007a7c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800252e:	2102      	movs	r1, #2
 8002530:	4849      	ldr	r0, [pc, #292]	; (8002658 <menu+0x15b4>)
 8002532:	f006 fdc9 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002536:	4603      	mov	r3, r0
 8002538:	2b01      	cmp	r3, #1
 800253a:	d119      	bne.n	8002570 <menu+0x14cc>
 800253c:	4b47      	ldr	r3, [pc, #284]	; (800265c <menu+0x15b8>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d012      	beq.n	8002570 <menu+0x14cc>
 800254a:	4b41      	ldr	r3, [pc, #260]	; (8002650 <menu+0x15ac>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10e      	bne.n	8002570 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002552:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <menu+0x15dc>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b49      	ldr	r3, [pc, #292]	; (8002680 <menu+0x15dc>)
 800255c:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800255e:	4b48      	ldr	r3, [pc, #288]	; (8002680 <menu+0x15dc>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b05      	cmp	r3, #5
 8002564:	d902      	bls.n	800256c <menu+0x14c8>
				kapi1AcSure = 0;
 8002566:	4b46      	ldr	r3, [pc, #280]	; (8002680 <menu+0x15dc>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800256c:	f002 f992 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002570:	2104      	movs	r1, #4
 8002572:	4839      	ldr	r0, [pc, #228]	; (8002658 <menu+0x15b4>)
 8002574:	f006 fda8 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002578:	4603      	mov	r3, r0
 800257a:	2b01      	cmp	r3, #1
 800257c:	d119      	bne.n	80025b2 <menu+0x150e>
 800257e:	4b37      	ldr	r3, [pc, #220]	; (800265c <menu+0x15b8>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	f083 0301 	eor.w	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d012      	beq.n	80025b2 <menu+0x150e>
 800258c:	4b30      	ldr	r3, [pc, #192]	; (8002650 <menu+0x15ac>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10e      	bne.n	80025b2 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002594:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <menu+0x15dc>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	3b01      	subs	r3, #1
 800259a:	b2da      	uxtb	r2, r3
 800259c:	4b38      	ldr	r3, [pc, #224]	; (8002680 <menu+0x15dc>)
 800259e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80025a0:	4b37      	ldr	r3, [pc, #220]	; (8002680 <menu+0x15dc>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b06      	cmp	r3, #6
 80025a6:	d902      	bls.n	80025ae <menu+0x150a>
		   		kapi1AcSure = 5;
 80025a8:	4b35      	ldr	r3, [pc, #212]	; (8002680 <menu+0x15dc>)
 80025aa:	2205      	movs	r2, #5
 80025ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025ae:	f002 f971 	bl	8004894 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025b2:	2108      	movs	r1, #8
 80025b4:	4828      	ldr	r0, [pc, #160]	; (8002658 <menu+0x15b4>)
 80025b6:	f006 fd87 	bl	80090c8 <HAL_GPIO_ReadPin>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10d      	bne.n	80025dc <menu+0x1538>
 80025c0:	4b26      	ldr	r3, [pc, #152]	; (800265c <menu+0x15b8>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	f083 0301 	eor.w	r3, r3, #1
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80025ce:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <menu+0x15dc>)
 80025d0:	781a      	ldrb	r2, [r3, #0]
 80025d2:	4b23      	ldr	r3, [pc, #140]	; (8002660 <menu+0x15bc>)
 80025d4:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80025d6:	4b23      	ldr	r3, [pc, #140]	; (8002664 <menu+0x15c0>)
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80025dc:	4b22      	ldr	r3, [pc, #136]	; (8002668 <menu+0x15c4>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b0b      	cmp	r3, #11
 80025e2:	f040 80b5 	bne.w	8002750 <menu+0x16ac>
		if(dilSecim == 0) {
 80025e6:	4b21      	ldr	r3, [pc, #132]	; (800266c <menu+0x15c8>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d105      	bne.n	80025fa <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80025ee:	4a26      	ldr	r2, [pc, #152]	; (8002688 <menu+0x15e4>)
 80025f0:	2101      	movs	r1, #1
 80025f2:	2001      	movs	r0, #1
 80025f4:	f005 fa42 	bl	8007a7c <lcd_print>
 80025f8:	e008      	b.n	800260c <menu+0x1568>
		} else if(dilSecim == 1) {
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <menu+0x15c8>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d104      	bne.n	800260c <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002602:	4a22      	ldr	r2, [pc, #136]	; (800268c <menu+0x15e8>)
 8002604:	2101      	movs	r1, #1
 8002606:	2001      	movs	r0, #1
 8002608:	f005 fa38 	bl	8007a7c <lcd_print>
		}

		if(kapi2Tip == 0) {
 800260c:	4b20      	ldr	r3, [pc, #128]	; (8002690 <menu+0x15ec>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d105      	bne.n	8002620 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002614:	4a1f      	ldr	r2, [pc, #124]	; (8002694 <menu+0x15f0>)
 8002616:	2101      	movs	r1, #1
 8002618:	2002      	movs	r0, #2
 800261a:	f005 fa2f 	bl	8007a7c <lcd_print>
 800261e:	e048      	b.n	80026b2 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <menu+0x15ec>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d13b      	bne.n	80026a0 <menu+0x15fc>
			if(dilSecim == 0) {
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <menu+0x15c8>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002630:	4a19      	ldr	r2, [pc, #100]	; (8002698 <menu+0x15f4>)
 8002632:	2101      	movs	r1, #1
 8002634:	2002      	movs	r0, #2
 8002636:	f005 fa21 	bl	8007a7c <lcd_print>
 800263a:	e03a      	b.n	80026b2 <menu+0x160e>
			} else if(dilSecim == 1) {
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <menu+0x15c8>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d136      	bne.n	80026b2 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002644:	4a15      	ldr	r2, [pc, #84]	; (800269c <menu+0x15f8>)
 8002646:	2101      	movs	r1, #1
 8002648:	2002      	movs	r0, #2
 800264a:	f005 fa17 	bl	8007a7c <lcd_print>
 800264e:	e030      	b.n	80026b2 <menu+0x160e>
 8002650:	2000023d 	.word	0x2000023d
 8002654:	0800d2a0 	.word	0x0800d2a0
 8002658:	40010800 	.word	0x40010800
 800265c:	20000263 	.word	0x20000263
 8002660:	2000012c 	.word	0x2000012c
 8002664:	20000260 	.word	0x20000260
 8002668:	20000234 	.word	0x20000234
 800266c:	20000255 	.word	0x20000255
 8002670:	0800d2b0 	.word	0x0800d2b0
 8002674:	0800d2c4 	.word	0x0800d2c4
 8002678:	0800d2d4 	.word	0x0800d2d4
 800267c:	0800d2e8 	.word	0x0800d2e8
 8002680:	2000024d 	.word	0x2000024d
 8002684:	2000019c 	.word	0x2000019c
 8002688:	0800d2f8 	.word	0x0800d2f8
 800268c:	0800d30c 	.word	0x0800d30c
 8002690:	2000023e 	.word	0x2000023e
 8002694:	0800d268 	.word	0x0800d268
 8002698:	0800d27c 	.word	0x0800d27c
 800269c:	0800d28c 	.word	0x0800d28c
			}
		} else if(kapi2Tip == 2) {
 80026a0:	4b8a      	ldr	r3, [pc, #552]	; (80028cc <menu+0x1828>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d104      	bne.n	80026b2 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 80026a8:	4a89      	ldr	r2, [pc, #548]	; (80028d0 <menu+0x182c>)
 80026aa:	2101      	movs	r1, #1
 80026ac:	2002      	movs	r0, #2
 80026ae:	f005 f9e5 	bl	8007a7c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026b2:	2102      	movs	r1, #2
 80026b4:	4887      	ldr	r0, [pc, #540]	; (80028d4 <menu+0x1830>)
 80026b6:	f006 fd07 	bl	80090c8 <HAL_GPIO_ReadPin>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d115      	bne.n	80026ec <menu+0x1648>
 80026c0:	4b85      	ldr	r3, [pc, #532]	; (80028d8 <menu+0x1834>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f083 0301 	eor.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00e      	beq.n	80026ec <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80026ce:	4b7f      	ldr	r3, [pc, #508]	; (80028cc <menu+0x1828>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <menu+0x1828>)
 80026d8:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80026da:	4b7c      	ldr	r3, [pc, #496]	; (80028cc <menu+0x1828>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d902      	bls.n	80026e8 <menu+0x1644>
				kapi2Tip = 0;
 80026e2:	4b7a      	ldr	r3, [pc, #488]	; (80028cc <menu+0x1828>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026e8:	f002 f8d4 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ec:	2104      	movs	r1, #4
 80026ee:	4879      	ldr	r0, [pc, #484]	; (80028d4 <menu+0x1830>)
 80026f0:	f006 fcea 	bl	80090c8 <HAL_GPIO_ReadPin>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d115      	bne.n	8002726 <menu+0x1682>
 80026fa:	4b77      	ldr	r3, [pc, #476]	; (80028d8 <menu+0x1834>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	f083 0301 	eor.w	r3, r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002708:	4b70      	ldr	r3, [pc, #448]	; (80028cc <menu+0x1828>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	3b01      	subs	r3, #1
 800270e:	b2da      	uxtb	r2, r3
 8002710:	4b6e      	ldr	r3, [pc, #440]	; (80028cc <menu+0x1828>)
 8002712:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002714:	4b6d      	ldr	r3, [pc, #436]	; (80028cc <menu+0x1828>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d902      	bls.n	8002722 <menu+0x167e>
		   		kapi2Tip = 2;
 800271c:	4b6b      	ldr	r3, [pc, #428]	; (80028cc <menu+0x1828>)
 800271e:	2202      	movs	r2, #2
 8002720:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002722:	f002 f8b7 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002726:	2108      	movs	r1, #8
 8002728:	486a      	ldr	r0, [pc, #424]	; (80028d4 <menu+0x1830>)
 800272a:	f006 fccd 	bl	80090c8 <HAL_GPIO_ReadPin>
 800272e:	4603      	mov	r3, r0
 8002730:	2b01      	cmp	r3, #1
 8002732:	d10d      	bne.n	8002750 <menu+0x16ac>
 8002734:	4b68      	ldr	r3, [pc, #416]	; (80028d8 <menu+0x1834>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d006      	beq.n	8002750 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002742:	4b62      	ldr	r3, [pc, #392]	; (80028cc <menu+0x1828>)
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	4b65      	ldr	r3, [pc, #404]	; (80028dc <menu+0x1838>)
 8002748:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800274a:	4b65      	ldr	r3, [pc, #404]	; (80028e0 <menu+0x183c>)
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002750:	4b64      	ldr	r3, [pc, #400]	; (80028e4 <menu+0x1840>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d17f      	bne.n	8002858 <menu+0x17b4>
		if(dilSecim == 0) {
 8002758:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <menu+0x1844>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002760:	4a62      	ldr	r2, [pc, #392]	; (80028ec <menu+0x1848>)
 8002762:	2101      	movs	r1, #1
 8002764:	2001      	movs	r0, #1
 8002766:	f005 f989 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800276a:	4a61      	ldr	r2, [pc, #388]	; (80028f0 <menu+0x184c>)
 800276c:	2101      	movs	r1, #1
 800276e:	2002      	movs	r0, #2
 8002770:	f005 f984 	bl	8007a7c <lcd_print>
 8002774:	e00d      	b.n	8002792 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002776:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <menu+0x1844>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d109      	bne.n	8002792 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 800277e:	4a5d      	ldr	r2, [pc, #372]	; (80028f4 <menu+0x1850>)
 8002780:	2101      	movs	r1, #1
 8002782:	2001      	movs	r0, #1
 8002784:	f005 f97a 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002788:	4a5b      	ldr	r2, [pc, #364]	; (80028f8 <menu+0x1854>)
 800278a:	2101      	movs	r1, #1
 800278c:	2002      	movs	r0, #2
 800278e:	f005 f975 	bl	8007a7c <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002792:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <menu+0x1858>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	220a      	movs	r2, #10
 8002798:	4959      	ldr	r1, [pc, #356]	; (8002900 <menu+0x185c>)
 800279a:	4618      	mov	r0, r3
 800279c:	f009 fcea 	bl	800c174 <itoa>
		lcd_print(2,16,snum);
 80027a0:	4a57      	ldr	r2, [pc, #348]	; (8002900 <menu+0x185c>)
 80027a2:	2110      	movs	r1, #16
 80027a4:	2002      	movs	r0, #2
 80027a6:	f005 f969 	bl	8007a7c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80027aa:	2102      	movs	r1, #2
 80027ac:	4849      	ldr	r0, [pc, #292]	; (80028d4 <menu+0x1830>)
 80027ae:	f006 fc8b 	bl	80090c8 <HAL_GPIO_ReadPin>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d119      	bne.n	80027ec <menu+0x1748>
 80027b8:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <menu+0x1834>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	f083 0301 	eor.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d012      	beq.n	80027ec <menu+0x1748>
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <menu+0x1828>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10e      	bne.n	80027ec <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 80027ce:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <menu+0x1858>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4b49      	ldr	r3, [pc, #292]	; (80028fc <menu+0x1858>)
 80027d8:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80027da:	4b48      	ldr	r3, [pc, #288]	; (80028fc <menu+0x1858>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d902      	bls.n	80027e8 <menu+0x1744>
				kapi2AcSure = 0;
 80027e2:	4b46      	ldr	r3, [pc, #280]	; (80028fc <menu+0x1858>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027e8:	f002 f854 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80027ec:	2104      	movs	r1, #4
 80027ee:	4839      	ldr	r0, [pc, #228]	; (80028d4 <menu+0x1830>)
 80027f0:	f006 fc6a 	bl	80090c8 <HAL_GPIO_ReadPin>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d119      	bne.n	800282e <menu+0x178a>
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <menu+0x1834>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	f083 0301 	eor.w	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d012      	beq.n	800282e <menu+0x178a>
 8002808:	4b30      	ldr	r3, [pc, #192]	; (80028cc <menu+0x1828>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10e      	bne.n	800282e <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002810:	4b3a      	ldr	r3, [pc, #232]	; (80028fc <menu+0x1858>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	3b01      	subs	r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b38      	ldr	r3, [pc, #224]	; (80028fc <menu+0x1858>)
 800281a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 800281c:	4b37      	ldr	r3, [pc, #220]	; (80028fc <menu+0x1858>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b06      	cmp	r3, #6
 8002822:	d902      	bls.n	800282a <menu+0x1786>
		   		kapi2AcSure = 5;
 8002824:	4b35      	ldr	r3, [pc, #212]	; (80028fc <menu+0x1858>)
 8002826:	2205      	movs	r2, #5
 8002828:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800282a:	f002 f833 	bl	8004894 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800282e:	2108      	movs	r1, #8
 8002830:	4828      	ldr	r0, [pc, #160]	; (80028d4 <menu+0x1830>)
 8002832:	f006 fc49 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002836:	4603      	mov	r3, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10d      	bne.n	8002858 <menu+0x17b4>
 800283c:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <menu+0x1834>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	f083 0301 	eor.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <menu+0x1858>)
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	4b23      	ldr	r3, [pc, #140]	; (80028dc <menu+0x1838>)
 8002850:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <menu+0x183c>)
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002858:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <menu+0x1840>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b0d      	cmp	r3, #13
 800285e:	f040 80b5 	bne.w	80029cc <menu+0x1928>
		if(dilSecim == 0) {
 8002862:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <menu+0x1844>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 800286a:	4a26      	ldr	r2, [pc, #152]	; (8002904 <menu+0x1860>)
 800286c:	2101      	movs	r1, #1
 800286e:	2001      	movs	r0, #1
 8002870:	f005 f904 	bl	8007a7c <lcd_print>
 8002874:	e008      	b.n	8002888 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <menu+0x1844>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d104      	bne.n	8002888 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 800287e:	4a22      	ldr	r2, [pc, #136]	; (8002908 <menu+0x1864>)
 8002880:	2101      	movs	r1, #1
 8002882:	2001      	movs	r0, #1
 8002884:	f005 f8fa 	bl	8007a7c <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002888:	4b20      	ldr	r3, [pc, #128]	; (800290c <menu+0x1868>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002890:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <menu+0x186c>)
 8002892:	2101      	movs	r1, #1
 8002894:	2002      	movs	r0, #2
 8002896:	f005 f8f1 	bl	8007a7c <lcd_print>
 800289a:	e048      	b.n	800292e <menu+0x188a>
		} else if(kapitablaTip == 1) {
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <menu+0x1868>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d13b      	bne.n	800291c <menu+0x1878>
			if(dilSecim == 0) {
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <menu+0x1844>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <menu+0x1870>)
 80028ae:	2101      	movs	r1, #1
 80028b0:	2002      	movs	r0, #2
 80028b2:	f005 f8e3 	bl	8007a7c <lcd_print>
 80028b6:	e03a      	b.n	800292e <menu+0x188a>
			} else if(dilSecim == 1) {
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <menu+0x1844>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d136      	bne.n	800292e <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 80028c0:	4a15      	ldr	r2, [pc, #84]	; (8002918 <menu+0x1874>)
 80028c2:	2101      	movs	r1, #1
 80028c4:	2002      	movs	r0, #2
 80028c6:	f005 f8d9 	bl	8007a7c <lcd_print>
 80028ca:	e030      	b.n	800292e <menu+0x188a>
 80028cc:	2000023e 	.word	0x2000023e
 80028d0:	0800d2a0 	.word	0x0800d2a0
 80028d4:	40010800 	.word	0x40010800
 80028d8:	20000263 	.word	0x20000263
 80028dc:	2000012c 	.word	0x2000012c
 80028e0:	20000260 	.word	0x20000260
 80028e4:	20000234 	.word	0x20000234
 80028e8:	20000255 	.word	0x20000255
 80028ec:	0800d320 	.word	0x0800d320
 80028f0:	0800d2c4 	.word	0x0800d2c4
 80028f4:	0800d334 	.word	0x0800d334
 80028f8:	0800d2e8 	.word	0x0800d2e8
 80028fc:	2000024e 	.word	0x2000024e
 8002900:	2000019c 	.word	0x2000019c
 8002904:	0800d348 	.word	0x0800d348
 8002908:	0800d35c 	.word	0x0800d35c
 800290c:	2000023f 	.word	0x2000023f
 8002910:	0800d268 	.word	0x0800d268
 8002914:	0800d27c 	.word	0x0800d27c
 8002918:	0800d28c 	.word	0x0800d28c
			}
		} else if(kapitablaTip == 2) {
 800291c:	4b5b      	ldr	r3, [pc, #364]	; (8002a8c <menu+0x19e8>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d104      	bne.n	800292e <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002924:	4a5a      	ldr	r2, [pc, #360]	; (8002a90 <menu+0x19ec>)
 8002926:	2101      	movs	r1, #1
 8002928:	2002      	movs	r0, #2
 800292a:	f005 f8a7 	bl	8007a7c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800292e:	2102      	movs	r1, #2
 8002930:	4858      	ldr	r0, [pc, #352]	; (8002a94 <menu+0x19f0>)
 8002932:	f006 fbc9 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	d115      	bne.n	8002968 <menu+0x18c4>
 800293c:	4b56      	ldr	r3, [pc, #344]	; (8002a98 <menu+0x19f4>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	f083 0301 	eor.w	r3, r3, #1
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00e      	beq.n	8002968 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 800294a:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <menu+0x19e8>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b4e      	ldr	r3, [pc, #312]	; (8002a8c <menu+0x19e8>)
 8002954:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002956:	4b4d      	ldr	r3, [pc, #308]	; (8002a8c <menu+0x19e8>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d902      	bls.n	8002964 <menu+0x18c0>
				kapitablaTip = 0;
 800295e:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <menu+0x19e8>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002964:	f001 ff96 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002968:	2104      	movs	r1, #4
 800296a:	484a      	ldr	r0, [pc, #296]	; (8002a94 <menu+0x19f0>)
 800296c:	f006 fbac 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002970:	4603      	mov	r3, r0
 8002972:	2b01      	cmp	r3, #1
 8002974:	d115      	bne.n	80029a2 <menu+0x18fe>
 8002976:	4b48      	ldr	r3, [pc, #288]	; (8002a98 <menu+0x19f4>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	f083 0301 	eor.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00e      	beq.n	80029a2 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002984:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <menu+0x19e8>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	3b01      	subs	r3, #1
 800298a:	b2da      	uxtb	r2, r3
 800298c:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <menu+0x19e8>)
 800298e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002990:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <menu+0x19e8>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d902      	bls.n	800299e <menu+0x18fa>
		   		kapitablaTip = 2;
 8002998:	4b3c      	ldr	r3, [pc, #240]	; (8002a8c <menu+0x19e8>)
 800299a:	2202      	movs	r2, #2
 800299c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800299e:	f001 ff79 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029a2:	2108      	movs	r1, #8
 80029a4:	483b      	ldr	r0, [pc, #236]	; (8002a94 <menu+0x19f0>)
 80029a6:	f006 fb8f 	bl	80090c8 <HAL_GPIO_ReadPin>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10d      	bne.n	80029cc <menu+0x1928>
 80029b0:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <menu+0x19f4>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f083 0301 	eor.w	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <menu+0x1928>
			eepromData[12] = kapitablaTip;
 80029be:	4b33      	ldr	r3, [pc, #204]	; (8002a8c <menu+0x19e8>)
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <menu+0x19f8>)
 80029c4:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80029c6:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <menu+0x19fc>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80029cc:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <menu+0x1a00>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b0e      	cmp	r3, #14
 80029d2:	f040 80f2 	bne.w	8002bba <menu+0x1b16>
		if(dilSecim == 0) {
 80029d6:	4b34      	ldr	r3, [pc, #208]	; (8002aa8 <menu+0x1a04>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d105      	bne.n	80029ea <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 80029de:	4a33      	ldr	r2, [pc, #204]	; (8002aac <menu+0x1a08>)
 80029e0:	2101      	movs	r1, #1
 80029e2:	2001      	movs	r0, #1
 80029e4:	f005 f84a 	bl	8007a7c <lcd_print>
 80029e8:	e008      	b.n	80029fc <menu+0x1958>
		} else if(dilSecim == 1) {
 80029ea:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <menu+0x1a04>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d104      	bne.n	80029fc <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 80029f2:	4a2f      	ldr	r2, [pc, #188]	; (8002ab0 <menu+0x1a0c>)
 80029f4:	2101      	movs	r1, #1
 80029f6:	2001      	movs	r0, #1
 80029f8:	f005 f840 	bl	8007a7c <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 80029fc:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <menu+0x1a10>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d113      	bne.n	8002a2c <menu+0x1988>
			if(dilSecim == 0){
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <menu+0x1a04>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002a0c:	4a2a      	ldr	r2, [pc, #168]	; (8002ab8 <menu+0x1a14>)
 8002a0e:	2101      	movs	r1, #1
 8002a10:	2002      	movs	r0, #2
 8002a12:	f005 f833 	bl	8007a7c <lcd_print>
 8002a16:	e071      	b.n	8002afc <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002a18:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <menu+0x1a04>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d16d      	bne.n	8002afc <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002a20:	4a26      	ldr	r2, [pc, #152]	; (8002abc <menu+0x1a18>)
 8002a22:	2101      	movs	r1, #1
 8002a24:	2002      	movs	r0, #2
 8002a26:	f005 f829 	bl	8007a7c <lcd_print>
 8002a2a:	e067      	b.n	8002afc <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002a2c:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <menu+0x1a10>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d112      	bne.n	8002a5a <menu+0x19b6>
			if(dilSecim == 0){
 8002a34:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <menu+0x1a04>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d104      	bne.n	8002a46 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002a3c:	4a20      	ldr	r2, [pc, #128]	; (8002ac0 <menu+0x1a1c>)
 8002a3e:	2101      	movs	r1, #1
 8002a40:	2002      	movs	r0, #2
 8002a42:	f005 f81b 	bl	8007a7c <lcd_print>
			}
			if(dilSecim == 1){
 8002a46:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <menu+0x1a04>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d156      	bne.n	8002afc <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <menu+0x1a20>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	2002      	movs	r0, #2
 8002a54:	f005 f812 	bl	8007a7c <lcd_print>
 8002a58:	e050      	b.n	8002afc <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <menu+0x1a10>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d136      	bne.n	8002ad0 <menu+0x1a2c>
			if(dilSecim == 0){
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <menu+0x1a04>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <menu+0x1a24>)
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	2002      	movs	r0, #2
 8002a70:	f005 f804 	bl	8007a7c <lcd_print>
 8002a74:	e042      	b.n	8002afc <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <menu+0x1a04>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d13e      	bne.n	8002afc <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002a7e:	4a13      	ldr	r2, [pc, #76]	; (8002acc <menu+0x1a28>)
 8002a80:	2101      	movs	r1, #1
 8002a82:	2002      	movs	r0, #2
 8002a84:	f004 fffa 	bl	8007a7c <lcd_print>
 8002a88:	e038      	b.n	8002afc <menu+0x1a58>
 8002a8a:	bf00      	nop
 8002a8c:	2000023f 	.word	0x2000023f
 8002a90:	0800d2a0 	.word	0x0800d2a0
 8002a94:	40010800 	.word	0x40010800
 8002a98:	20000263 	.word	0x20000263
 8002a9c:	2000012c 	.word	0x2000012c
 8002aa0:	20000260 	.word	0x20000260
 8002aa4:	20000234 	.word	0x20000234
 8002aa8:	20000255 	.word	0x20000255
 8002aac:	0800d370 	.word	0x0800d370
 8002ab0:	0800d384 	.word	0x0800d384
 8002ab4:	20000241 	.word	0x20000241
 8002ab8:	0800d398 	.word	0x0800d398
 8002abc:	0800d3a8 	.word	0x0800d3a8
 8002ac0:	0800d3b8 	.word	0x0800d3b8
 8002ac4:	0800d3c8 	.word	0x0800d3c8
 8002ac8:	0800d3d8 	.word	0x0800d3d8
 8002acc:	0800d3ec 	.word	0x0800d3ec
			}
		} else if(kapiTablaAcKonum == 3) {
 8002ad0:	4b9b      	ldr	r3, [pc, #620]	; (8002d40 <menu+0x1c9c>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d111      	bne.n	8002afc <menu+0x1a58>
			if(dilSecim == 0) {
 8002ad8:	4b9a      	ldr	r3, [pc, #616]	; (8002d44 <menu+0x1ca0>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d104      	bne.n	8002aea <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002ae0:	4a99      	ldr	r2, [pc, #612]	; (8002d48 <menu+0x1ca4>)
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	f004 ffc9 	bl	8007a7c <lcd_print>
			}
			if(dilSecim == 1) {
 8002aea:	4b96      	ldr	r3, [pc, #600]	; (8002d44 <menu+0x1ca0>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d104      	bne.n	8002afc <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002af2:	4a96      	ldr	r2, [pc, #600]	; (8002d4c <menu+0x1ca8>)
 8002af4:	2101      	movs	r1, #1
 8002af6:	2002      	movs	r0, #2
 8002af8:	f004 ffc0 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002afc:	2102      	movs	r1, #2
 8002afe:	4894      	ldr	r0, [pc, #592]	; (8002d50 <menu+0x1cac>)
 8002b00:	f006 fae2 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d115      	bne.n	8002b36 <menu+0x1a92>
 8002b0a:	4b92      	ldr	r3, [pc, #584]	; (8002d54 <menu+0x1cb0>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	f083 0301 	eor.w	r3, r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00e      	beq.n	8002b36 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002b18:	4b89      	ldr	r3, [pc, #548]	; (8002d40 <menu+0x1c9c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	4b87      	ldr	r3, [pc, #540]	; (8002d40 <menu+0x1c9c>)
 8002b22:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002b24:	4b86      	ldr	r3, [pc, #536]	; (8002d40 <menu+0x1c9c>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d902      	bls.n	8002b32 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002b2c:	4b84      	ldr	r3, [pc, #528]	; (8002d40 <menu+0x1c9c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b32:	f001 feaf 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b36:	2104      	movs	r1, #4
 8002b38:	4885      	ldr	r0, [pc, #532]	; (8002d50 <menu+0x1cac>)
 8002b3a:	f006 fac5 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d115      	bne.n	8002b70 <menu+0x1acc>
 8002b44:	4b83      	ldr	r3, [pc, #524]	; (8002d54 <menu+0x1cb0>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	f083 0301 	eor.w	r3, r3, #1
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00e      	beq.n	8002b70 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002b52:	4b7b      	ldr	r3, [pc, #492]	; (8002d40 <menu+0x1c9c>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4b79      	ldr	r3, [pc, #484]	; (8002d40 <menu+0x1c9c>)
 8002b5c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002b5e:	4b78      	ldr	r3, [pc, #480]	; (8002d40 <menu+0x1c9c>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d902      	bls.n	8002b6c <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002b66:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <menu+0x1c9c>)
 8002b68:	2202      	movs	r2, #2
 8002b6a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b6c:	f001 fe92 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b70:	2108      	movs	r1, #8
 8002b72:	4877      	ldr	r0, [pc, #476]	; (8002d50 <menu+0x1cac>)
 8002b74:	f006 faa8 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d11d      	bne.n	8002bba <menu+0x1b16>
 8002b7e:	4b75      	ldr	r3, [pc, #468]	; (8002d54 <menu+0x1cb0>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	f083 0301 	eor.w	r3, r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d016      	beq.n	8002bba <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002b8c:	4b6c      	ldr	r3, [pc, #432]	; (8002d40 <menu+0x1c9c>)
 8002b8e:	781a      	ldrb	r2, [r3, #0]
 8002b90:	4b71      	ldr	r3, [pc, #452]	; (8002d58 <menu+0x1cb4>)
 8002b92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002b96:	4b6a      	ldr	r3, [pc, #424]	; (8002d40 <menu+0x1c9c>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <menu+0x1b02>
 8002b9e:	4b68      	ldr	r3, [pc, #416]	; (8002d40 <menu+0x1c9c>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d106      	bne.n	8002bb4 <menu+0x1b10>
				altLimit = 1;
 8002ba6:	4b6d      	ldr	r3, [pc, #436]	; (8002d5c <menu+0x1cb8>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002bac:	4b6b      	ldr	r3, [pc, #428]	; (8002d5c <menu+0x1cb8>)
 8002bae:	781a      	ldrb	r2, [r3, #0]
 8002bb0:	4b69      	ldr	r3, [pc, #420]	; (8002d58 <menu+0x1cb4>)
 8002bb2:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002bb4:	4b6a      	ldr	r3, [pc, #424]	; (8002d60 <menu+0x1cbc>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002bba:	4b6a      	ldr	r3, [pc, #424]	; (8002d64 <menu+0x1cc0>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	d17f      	bne.n	8002cc2 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002bc2:	4b60      	ldr	r3, [pc, #384]	; (8002d44 <menu+0x1ca0>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002bca:	4a67      	ldr	r2, [pc, #412]	; (8002d68 <menu+0x1cc4>)
 8002bcc:	2101      	movs	r1, #1
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f004 ff54 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002bd4:	4a65      	ldr	r2, [pc, #404]	; (8002d6c <menu+0x1cc8>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	2002      	movs	r0, #2
 8002bda:	f004 ff4f 	bl	8007a7c <lcd_print>
 8002bde:	e00d      	b.n	8002bfc <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002be0:	4b58      	ldr	r3, [pc, #352]	; (8002d44 <menu+0x1ca0>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d109      	bne.n	8002bfc <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002be8:	4a61      	ldr	r2, [pc, #388]	; (8002d70 <menu+0x1ccc>)
 8002bea:	2101      	movs	r1, #1
 8002bec:	2001      	movs	r0, #1
 8002bee:	f004 ff45 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002bf2:	4a60      	ldr	r2, [pc, #384]	; (8002d74 <menu+0x1cd0>)
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	2002      	movs	r0, #2
 8002bf8:	f004 ff40 	bl	8007a7c <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002bfc:	4b5e      	ldr	r3, [pc, #376]	; (8002d78 <menu+0x1cd4>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	220a      	movs	r2, #10
 8002c02:	495e      	ldr	r1, [pc, #376]	; (8002d7c <menu+0x1cd8>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	f009 fab5 	bl	800c174 <itoa>
		lcd_print(2,16,snum);
 8002c0a:	4a5c      	ldr	r2, [pc, #368]	; (8002d7c <menu+0x1cd8>)
 8002c0c:	2110      	movs	r1, #16
 8002c0e:	2002      	movs	r0, #2
 8002c10:	f004 ff34 	bl	8007a7c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002c14:	2102      	movs	r1, #2
 8002c16:	484e      	ldr	r0, [pc, #312]	; (8002d50 <menu+0x1cac>)
 8002c18:	f006 fa56 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d119      	bne.n	8002c56 <menu+0x1bb2>
 8002c22:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <menu+0x1cb0>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	f083 0301 	eor.w	r3, r3, #1
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d012      	beq.n	8002c56 <menu+0x1bb2>
 8002c30:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <menu+0x1cdc>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10e      	bne.n	8002c56 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002c38:	4b4f      	ldr	r3, [pc, #316]	; (8002d78 <menu+0x1cd4>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	4b4d      	ldr	r3, [pc, #308]	; (8002d78 <menu+0x1cd4>)
 8002c42:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002c44:	4b4c      	ldr	r3, [pc, #304]	; (8002d78 <menu+0x1cd4>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d902      	bls.n	8002c52 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002c4c:	4b4a      	ldr	r3, [pc, #296]	; (8002d78 <menu+0x1cd4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c52:	f001 fe1f 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002c56:	2104      	movs	r1, #4
 8002c58:	483d      	ldr	r0, [pc, #244]	; (8002d50 <menu+0x1cac>)
 8002c5a:	f006 fa35 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d119      	bne.n	8002c98 <menu+0x1bf4>
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <menu+0x1cb0>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	f083 0301 	eor.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d012      	beq.n	8002c98 <menu+0x1bf4>
 8002c72:	4b43      	ldr	r3, [pc, #268]	; (8002d80 <menu+0x1cdc>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10e      	bne.n	8002c98 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002c7a:	4b3f      	ldr	r3, [pc, #252]	; (8002d78 <menu+0x1cd4>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	4b3d      	ldr	r3, [pc, #244]	; (8002d78 <menu+0x1cd4>)
 8002c84:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002c86:	4b3c      	ldr	r3, [pc, #240]	; (8002d78 <menu+0x1cd4>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b06      	cmp	r3, #6
 8002c8c:	d902      	bls.n	8002c94 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002c8e:	4b3a      	ldr	r3, [pc, #232]	; (8002d78 <menu+0x1cd4>)
 8002c90:	2205      	movs	r2, #5
 8002c92:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002c94:	f001 fdfe 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c98:	2108      	movs	r1, #8
 8002c9a:	482d      	ldr	r0, [pc, #180]	; (8002d50 <menu+0x1cac>)
 8002c9c:	f006 fa14 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d10d      	bne.n	8002cc2 <menu+0x1c1e>
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <menu+0x1cb0>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	f083 0301 	eor.w	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d006      	beq.n	8002cc2 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002cb4:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <menu+0x1cd4>)
 8002cb6:	781a      	ldrb	r2, [r3, #0]
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <menu+0x1cb4>)
 8002cba:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002cbc:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <menu+0x1cbc>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002cc2:	4b28      	ldr	r3, [pc, #160]	; (8002d64 <menu+0x1cc0>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	f040 80bc 	bne.w	8002e44 <menu+0x1da0>
		if(dilSecim == 0) {
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <menu+0x1ca0>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d105      	bne.n	8002ce0 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002cd4:	4a2b      	ldr	r2, [pc, #172]	; (8002d84 <menu+0x1ce0>)
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2001      	movs	r0, #1
 8002cda:	f004 fecf 	bl	8007a7c <lcd_print>
 8002cde:	e008      	b.n	8002cf2 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <menu+0x1ca0>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d104      	bne.n	8002cf2 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002ce8:	4a27      	ldr	r2, [pc, #156]	; (8002d88 <menu+0x1ce4>)
 8002cea:	2101      	movs	r1, #1
 8002cec:	2001      	movs	r0, #1
 8002cee:	f004 fec5 	bl	8007a7c <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002cf2:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <menu+0x1ce8>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d113      	bne.n	8002d22 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <menu+0x1ca0>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d105      	bne.n	8002d0e <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002d02:	4a11      	ldr	r2, [pc, #68]	; (8002d48 <menu+0x1ca4>)
 8002d04:	2101      	movs	r1, #1
 8002d06:	2002      	movs	r0, #2
 8002d08:	f004 feb8 	bl	8007a7c <lcd_print>
 8002d0c:	e04b      	b.n	8002da6 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <menu+0x1ca0>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d147      	bne.n	8002da6 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002d16:	4a0d      	ldr	r2, [pc, #52]	; (8002d4c <menu+0x1ca8>)
 8002d18:	2101      	movs	r1, #1
 8002d1a:	2002      	movs	r0, #2
 8002d1c:	f004 feae 	bl	8007a7c <lcd_print>
 8002d20:	e041      	b.n	8002da6 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002d22:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <menu+0x1ce8>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d13d      	bne.n	8002da6 <menu+0x1d02>
			if(dilSecim == 0) {
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <menu+0x1ca0>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d130      	bne.n	8002d94 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002d32:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <menu+0x1cec>)
 8002d34:	2101      	movs	r1, #1
 8002d36:	2002      	movs	r0, #2
 8002d38:	f004 fea0 	bl	8007a7c <lcd_print>
 8002d3c:	e033      	b.n	8002da6 <menu+0x1d02>
 8002d3e:	bf00      	nop
 8002d40:	20000241 	.word	0x20000241
 8002d44:	20000255 	.word	0x20000255
 8002d48:	0800d060 	.word	0x0800d060
 8002d4c:	0800d074 	.word	0x0800d074
 8002d50:	40010800 	.word	0x40010800
 8002d54:	20000263 	.word	0x20000263
 8002d58:	2000012c 	.word	0x2000012c
 8002d5c:	2000023a 	.word	0x2000023a
 8002d60:	20000260 	.word	0x20000260
 8002d64:	20000234 	.word	0x20000234
 8002d68:	0800d400 	.word	0x0800d400
 8002d6c:	0800d2c4 	.word	0x0800d2c4
 8002d70:	0800d414 	.word	0x0800d414
 8002d74:	0800d2e8 	.word	0x0800d2e8
 8002d78:	2000024f 	.word	0x2000024f
 8002d7c:	2000019c 	.word	0x2000019c
 8002d80:	2000023f 	.word	0x2000023f
 8002d84:	0800d428 	.word	0x0800d428
 8002d88:	0800d43c 	.word	0x0800d43c
 8002d8c:	20000242 	.word	0x20000242
 8002d90:	0800d0c0 	.word	0x0800d0c0
			} else if(dilSecim == 1) {
 8002d94:	4b99      	ldr	r3, [pc, #612]	; (8002ffc <menu+0x1f58>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d104      	bne.n	8002da6 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002d9c:	4a98      	ldr	r2, [pc, #608]	; (8003000 <menu+0x1f5c>)
 8002d9e:	2101      	movs	r1, #1
 8002da0:	2002      	movs	r0, #2
 8002da2:	f004 fe6b 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002da6:	2102      	movs	r1, #2
 8002da8:	4896      	ldr	r0, [pc, #600]	; (8003004 <menu+0x1f60>)
 8002daa:	f006 f98d 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d115      	bne.n	8002de0 <menu+0x1d3c>
 8002db4:	4b94      	ldr	r3, [pc, #592]	; (8003008 <menu+0x1f64>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	f083 0301 	eor.w	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00e      	beq.n	8002de0 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002dc2:	4b92      	ldr	r3, [pc, #584]	; (800300c <menu+0x1f68>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4b90      	ldr	r3, [pc, #576]	; (800300c <menu+0x1f68>)
 8002dcc:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002dce:	4b8f      	ldr	r3, [pc, #572]	; (800300c <menu+0x1f68>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d902      	bls.n	8002ddc <menu+0x1d38>
				yukariYavasLimit = 0;
 8002dd6:	4b8d      	ldr	r3, [pc, #564]	; (800300c <menu+0x1f68>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ddc:	f001 fd5a 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002de0:	2104      	movs	r1, #4
 8002de2:	4888      	ldr	r0, [pc, #544]	; (8003004 <menu+0x1f60>)
 8002de4:	f006 f970 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d115      	bne.n	8002e1a <menu+0x1d76>
 8002dee:	4b86      	ldr	r3, [pc, #536]	; (8003008 <menu+0x1f64>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	f083 0301 	eor.w	r3, r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00e      	beq.n	8002e1a <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002dfc:	4b83      	ldr	r3, [pc, #524]	; (800300c <menu+0x1f68>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	4b81      	ldr	r3, [pc, #516]	; (800300c <menu+0x1f68>)
 8002e06:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002e08:	4b80      	ldr	r3, [pc, #512]	; (800300c <menu+0x1f68>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002e10:	4b7e      	ldr	r3, [pc, #504]	; (800300c <menu+0x1f68>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e16:	f001 fd3d 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e1a:	2108      	movs	r1, #8
 8002e1c:	4879      	ldr	r0, [pc, #484]	; (8003004 <menu+0x1f60>)
 8002e1e:	f006 f953 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d10d      	bne.n	8002e44 <menu+0x1da0>
 8002e28:	4b77      	ldr	r3, [pc, #476]	; (8003008 <menu+0x1f64>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	f083 0301 	eor.w	r3, r3, #1
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002e36:	4b75      	ldr	r3, [pc, #468]	; (800300c <menu+0x1f68>)
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	4b75      	ldr	r3, [pc, #468]	; (8003010 <menu+0x1f6c>)
 8002e3c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002e3e:	4b75      	ldr	r3, [pc, #468]	; (8003014 <menu+0x1f70>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002e44:	4b74      	ldr	r3, [pc, #464]	; (8003018 <menu+0x1f74>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b11      	cmp	r3, #17
 8002e4a:	f040 80c3 	bne.w	8002fd4 <menu+0x1f30>
		if(dilSecim == 0) {
 8002e4e:	4b6b      	ldr	r3, [pc, #428]	; (8002ffc <menu+0x1f58>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002e56:	4a71      	ldr	r2, [pc, #452]	; (800301c <menu+0x1f78>)
 8002e58:	2101      	movs	r1, #1
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f004 fe0e 	bl	8007a7c <lcd_print>
 8002e60:	e008      	b.n	8002e74 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002e62:	4b66      	ldr	r3, [pc, #408]	; (8002ffc <menu+0x1f58>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d104      	bne.n	8002e74 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002e6a:	4a6d      	ldr	r2, [pc, #436]	; (8003020 <menu+0x1f7c>)
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f004 fe04 	bl	8007a7c <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002e74:	4b6b      	ldr	r3, [pc, #428]	; (8003024 <menu+0x1f80>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d113      	bne.n	8002ea4 <menu+0x1e00>
			if(dilSecim == 0){
 8002e7c:	4b5f      	ldr	r3, [pc, #380]	; (8002ffc <menu+0x1f58>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d105      	bne.n	8002e90 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002e84:	4a68      	ldr	r2, [pc, #416]	; (8003028 <menu+0x1f84>)
 8002e86:	2101      	movs	r1, #1
 8002e88:	2002      	movs	r0, #2
 8002e8a:	f004 fdf7 	bl	8007a7c <lcd_print>
 8002e8e:	e038      	b.n	8002f02 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002e90:	4b5a      	ldr	r3, [pc, #360]	; (8002ffc <menu+0x1f58>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d134      	bne.n	8002f02 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002e98:	4a64      	ldr	r2, [pc, #400]	; (800302c <menu+0x1f88>)
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	f004 fded 	bl	8007a7c <lcd_print>
 8002ea2:	e02e      	b.n	8002f02 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002ea4:	4b5f      	ldr	r3, [pc, #380]	; (8003024 <menu+0x1f80>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d113      	bne.n	8002ed4 <menu+0x1e30>
			if(dilSecim == 0){
 8002eac:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <menu+0x1f58>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002eb4:	4a5e      	ldr	r2, [pc, #376]	; (8003030 <menu+0x1f8c>)
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	2002      	movs	r0, #2
 8002eba:	f004 fddf 	bl	8007a7c <lcd_print>
 8002ebe:	e020      	b.n	8002f02 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002ec0:	4b4e      	ldr	r3, [pc, #312]	; (8002ffc <menu+0x1f58>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d11c      	bne.n	8002f02 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002ec8:	4a5a      	ldr	r2, [pc, #360]	; (8003034 <menu+0x1f90>)
 8002eca:	2101      	movs	r1, #1
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f004 fdd5 	bl	8007a7c <lcd_print>
 8002ed2:	e016      	b.n	8002f02 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <menu+0x1f80>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d112      	bne.n	8002f02 <menu+0x1e5e>
			if(dilSecim == 0) {
 8002edc:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <menu+0x1f58>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002ee4:	4a54      	ldr	r2, [pc, #336]	; (8003038 <menu+0x1f94>)
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	2002      	movs	r0, #2
 8002eea:	f004 fdc7 	bl	8007a7c <lcd_print>
 8002eee:	e008      	b.n	8002f02 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002ef0:	4b42      	ldr	r3, [pc, #264]	; (8002ffc <menu+0x1f58>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d104      	bne.n	8002f02 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002ef8:	4a50      	ldr	r2, [pc, #320]	; (800303c <menu+0x1f98>)
 8002efa:	2101      	movs	r1, #1
 8002efc:	2002      	movs	r0, #2
 8002efe:	f004 fdbd 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f02:	2102      	movs	r1, #2
 8002f04:	483f      	ldr	r0, [pc, #252]	; (8003004 <menu+0x1f60>)
 8002f06:	f006 f8df 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d115      	bne.n	8002f3c <menu+0x1e98>
 8002f10:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <menu+0x1f64>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f083 0301 	eor.w	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00e      	beq.n	8002f3c <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002f1e:	4b41      	ldr	r3, [pc, #260]	; (8003024 <menu+0x1f80>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <menu+0x1f80>)
 8002f28:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002f2a:	4b3e      	ldr	r3, [pc, #248]	; (8003024 <menu+0x1f80>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8002f32:	4b3c      	ldr	r3, [pc, #240]	; (8003024 <menu+0x1f80>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f38:	f001 fcac 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	4831      	ldr	r0, [pc, #196]	; (8003004 <menu+0x1f60>)
 8002f40:	f006 f8c2 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d115      	bne.n	8002f76 <menu+0x1ed2>
 8002f4a:	4b2f      	ldr	r3, [pc, #188]	; (8003008 <menu+0x1f64>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	f083 0301 	eor.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00e      	beq.n	8002f76 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002f58:	4b32      	ldr	r3, [pc, #200]	; (8003024 <menu+0x1f80>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	4b30      	ldr	r3, [pc, #192]	; (8003024 <menu+0x1f80>)
 8002f62:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002f64:	4b2f      	ldr	r3, [pc, #188]	; (8003024 <menu+0x1f80>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d902      	bls.n	8002f72 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8002f6c:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <menu+0x1f80>)
 8002f6e:	2202      	movs	r2, #2
 8002f70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f72:	f001 fc8f 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f76:	2108      	movs	r1, #8
 8002f78:	4822      	ldr	r0, [pc, #136]	; (8003004 <menu+0x1f60>)
 8002f7a:	f006 f8a5 	bl	80090c8 <HAL_GPIO_ReadPin>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d127      	bne.n	8002fd4 <menu+0x1f30>
 8002f84:	4b20      	ldr	r3, [pc, #128]	; (8003008 <menu+0x1f64>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	f083 0301 	eor.w	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d020      	beq.n	8002fd4 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <menu+0x1f80>)
 8002f94:	781a      	ldrb	r2, [r3, #0]
 8002f96:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <menu+0x1f6c>)
 8002f98:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002f9a:	4b22      	ldr	r3, [pc, #136]	; (8003024 <menu+0x1f80>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d003      	beq.n	8002faa <menu+0x1f06>
 8002fa2:	4b20      	ldr	r3, [pc, #128]	; (8003024 <menu+0x1f80>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d106      	bne.n	8002fb8 <menu+0x1f14>
				calismaSekli = 0;
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <menu+0x1f9c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002fb0:	4b23      	ldr	r3, [pc, #140]	; (8003040 <menu+0x1f9c>)
 8002fb2:	781a      	ldrb	r2, [r3, #0]
 8002fb4:	4b16      	ldr	r3, [pc, #88]	; (8003010 <menu+0x1f6c>)
 8002fb6:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <menu+0x1f80>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d106      	bne.n	8002fce <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8002fc0:	4b20      	ldr	r3, [pc, #128]	; (8003044 <menu+0x1fa0>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <menu+0x1fa0>)
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	4b11      	ldr	r3, [pc, #68]	; (8003010 <menu+0x1f6c>)
 8002fcc:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <menu+0x1f70>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002fd4:	4b10      	ldr	r3, [pc, #64]	; (8003018 <menu+0x1f74>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b12      	cmp	r3, #18
 8002fda:	f040 80d5 	bne.w	8003188 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8002fde:	4b11      	ldr	r3, [pc, #68]	; (8003024 <menu+0x1f80>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d13c      	bne.n	8003060 <menu+0x1fbc>
			if(dilSecim == 0) {
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <menu+0x1f58>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d12e      	bne.n	800304c <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8002fee:	4a16      	ldr	r2, [pc, #88]	; (8003048 <menu+0x1fa4>)
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	f004 fd42 	bl	8007a7c <lcd_print>
 8002ff8:	e048      	b.n	800308c <menu+0x1fe8>
 8002ffa:	bf00      	nop
 8002ffc:	20000255 	.word	0x20000255
 8003000:	0800d0d4 	.word	0x0800d0d4
 8003004:	40010800 	.word	0x40010800
 8003008:	20000263 	.word	0x20000263
 800300c:	20000242 	.word	0x20000242
 8003010:	2000012c 	.word	0x2000012c
 8003014:	20000260 	.word	0x20000260
 8003018:	20000234 	.word	0x20000234
 800301c:	0800d450 	.word	0x0800d450
 8003020:	0800d464 	.word	0x0800d464
 8003024:	20000243 	.word	0x20000243
 8003028:	0800d478 	.word	0x0800d478
 800302c:	0800d488 	.word	0x0800d488
 8003030:	0800d498 	.word	0x0800d498
 8003034:	0800d4a8 	.word	0x0800d4a8
 8003038:	0800d060 	.word	0x0800d060
 800303c:	0800d074 	.word	0x0800d074
 8003040:	20000235 	.word	0x20000235
 8003044:	20000246 	.word	0x20000246
 8003048:	0800d4b8 	.word	0x0800d4b8
			} else if(dilSecim == 1) {
 800304c:	4b7b      	ldr	r3, [pc, #492]	; (800323c <menu+0x2198>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d11b      	bne.n	800308c <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003054:	4a7a      	ldr	r2, [pc, #488]	; (8003240 <menu+0x219c>)
 8003056:	2101      	movs	r1, #1
 8003058:	2001      	movs	r0, #1
 800305a:	f004 fd0f 	bl	8007a7c <lcd_print>
 800305e:	e015      	b.n	800308c <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003060:	4b78      	ldr	r3, [pc, #480]	; (8003244 <menu+0x21a0>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d111      	bne.n	800308c <menu+0x1fe8>
			if(dilSecim == 0){
 8003068:	4b74      	ldr	r3, [pc, #464]	; (800323c <menu+0x2198>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003070:	4a75      	ldr	r2, [pc, #468]	; (8003248 <menu+0x21a4>)
 8003072:	2101      	movs	r1, #1
 8003074:	2001      	movs	r0, #1
 8003076:	f004 fd01 	bl	8007a7c <lcd_print>
			}
			if(dilSecim == 1){
 800307a:	4b70      	ldr	r3, [pc, #448]	; (800323c <menu+0x2198>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d104      	bne.n	800308c <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003082:	4a72      	ldr	r2, [pc, #456]	; (800324c <menu+0x21a8>)
 8003084:	2101      	movs	r1, #1
 8003086:	2001      	movs	r0, #1
 8003088:	f004 fcf8 	bl	8007a7c <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 800308c:	4b70      	ldr	r3, [pc, #448]	; (8003250 <menu+0x21ac>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d113      	bne.n	80030bc <menu+0x2018>
			if(dilSecim == 0) {
 8003094:	4b69      	ldr	r3, [pc, #420]	; (800323c <menu+0x2198>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d105      	bne.n	80030a8 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 800309c:	4a6d      	ldr	r2, [pc, #436]	; (8003254 <menu+0x21b0>)
 800309e:	2101      	movs	r1, #1
 80030a0:	2002      	movs	r0, #2
 80030a2:	f004 fceb 	bl	8007a7c <lcd_print>
 80030a6:	e020      	b.n	80030ea <menu+0x2046>
			} else if(dilSecim == 1){
 80030a8:	4b64      	ldr	r3, [pc, #400]	; (800323c <menu+0x2198>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d11c      	bne.n	80030ea <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80030b0:	4a69      	ldr	r2, [pc, #420]	; (8003258 <menu+0x21b4>)
 80030b2:	2101      	movs	r1, #1
 80030b4:	2002      	movs	r0, #2
 80030b6:	f004 fce1 	bl	8007a7c <lcd_print>
 80030ba:	e016      	b.n	80030ea <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80030bc:	4b64      	ldr	r3, [pc, #400]	; (8003250 <menu+0x21ac>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d112      	bne.n	80030ea <menu+0x2046>
			if(dilSecim == 0){
 80030c4:	4b5d      	ldr	r3, [pc, #372]	; (800323c <menu+0x2198>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80030cc:	4a63      	ldr	r2, [pc, #396]	; (800325c <menu+0x21b8>)
 80030ce:	2101      	movs	r1, #1
 80030d0:	2002      	movs	r0, #2
 80030d2:	f004 fcd3 	bl	8007a7c <lcd_print>
 80030d6:	e008      	b.n	80030ea <menu+0x2046>
			} else if(dilSecim == 1){
 80030d8:	4b58      	ldr	r3, [pc, #352]	; (800323c <menu+0x2198>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d104      	bne.n	80030ea <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80030e0:	4a5f      	ldr	r2, [pc, #380]	; (8003260 <menu+0x21bc>)
 80030e2:	2101      	movs	r1, #1
 80030e4:	2002      	movs	r0, #2
 80030e6:	f004 fcc9 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ea:	2102      	movs	r1, #2
 80030ec:	485d      	ldr	r0, [pc, #372]	; (8003264 <menu+0x21c0>)
 80030ee:	f005 ffeb 	bl	80090c8 <HAL_GPIO_ReadPin>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d115      	bne.n	8003124 <menu+0x2080>
 80030f8:	4b5b      	ldr	r3, [pc, #364]	; (8003268 <menu+0x21c4>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	f083 0301 	eor.w	r3, r3, #1
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00e      	beq.n	8003124 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003106:	4b52      	ldr	r3, [pc, #328]	; (8003250 <menu+0x21ac>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	b2da      	uxtb	r2, r3
 800310e:	4b50      	ldr	r3, [pc, #320]	; (8003250 <menu+0x21ac>)
 8003110:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003112:	4b4f      	ldr	r3, [pc, #316]	; (8003250 <menu+0x21ac>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d902      	bls.n	8003120 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800311a:	4b4d      	ldr	r3, [pc, #308]	; (8003250 <menu+0x21ac>)
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003120:	f001 fbb8 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003124:	2104      	movs	r1, #4
 8003126:	484f      	ldr	r0, [pc, #316]	; (8003264 <menu+0x21c0>)
 8003128:	f005 ffce 	bl	80090c8 <HAL_GPIO_ReadPin>
 800312c:	4603      	mov	r3, r0
 800312e:	2b01      	cmp	r3, #1
 8003130:	d115      	bne.n	800315e <menu+0x20ba>
 8003132:	4b4d      	ldr	r3, [pc, #308]	; (8003268 <menu+0x21c4>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	f083 0301 	eor.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00e      	beq.n	800315e <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003140:	4b43      	ldr	r3, [pc, #268]	; (8003250 <menu+0x21ac>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	3b01      	subs	r3, #1
 8003146:	b2da      	uxtb	r2, r3
 8003148:	4b41      	ldr	r3, [pc, #260]	; (8003250 <menu+0x21ac>)
 800314a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 800314c:	4b40      	ldr	r3, [pc, #256]	; (8003250 <menu+0x21ac>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003154:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <menu+0x21ac>)
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800315a:	f001 fb9b 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800315e:	2108      	movs	r1, #8
 8003160:	4840      	ldr	r0, [pc, #256]	; (8003264 <menu+0x21c0>)
 8003162:	f005 ffb1 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003166:	4603      	mov	r3, r0
 8003168:	2b01      	cmp	r3, #1
 800316a:	d10d      	bne.n	8003188 <menu+0x20e4>
 800316c:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <menu+0x21c4>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	f083 0301 	eor.w	r3, r3, #1
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d006      	beq.n	8003188 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800317a:	4b35      	ldr	r3, [pc, #212]	; (8003250 <menu+0x21ac>)
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	4b3b      	ldr	r3, [pc, #236]	; (800326c <menu+0x21c8>)
 8003180:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003182:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <menu+0x21cc>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003188:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <menu+0x21d0>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b13      	cmp	r3, #19
 800318e:	f040 80d5 	bne.w	800333c <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003192:	4b2c      	ldr	r3, [pc, #176]	; (8003244 <menu+0x21a0>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d113      	bne.n	80031c2 <menu+0x211e>
			if(dilSecim == 0) {
 800319a:	4b28      	ldr	r3, [pc, #160]	; (800323c <menu+0x2198>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80031a2:	4a35      	ldr	r2, [pc, #212]	; (8003278 <menu+0x21d4>)
 80031a4:	2101      	movs	r1, #1
 80031a6:	2001      	movs	r0, #1
 80031a8:	f004 fc68 	bl	8007a7c <lcd_print>
 80031ac:	e01f      	b.n	80031ee <menu+0x214a>
			} else if(dilSecim == 1) {
 80031ae:	4b23      	ldr	r3, [pc, #140]	; (800323c <menu+0x2198>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d11b      	bne.n	80031ee <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80031b6:	4a31      	ldr	r2, [pc, #196]	; (800327c <menu+0x21d8>)
 80031b8:	2101      	movs	r1, #1
 80031ba:	2001      	movs	r0, #1
 80031bc:	f004 fc5e 	bl	8007a7c <lcd_print>
 80031c0:	e015      	b.n	80031ee <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <menu+0x21a0>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d111      	bne.n	80031ee <menu+0x214a>
			if(dilSecim == 0) {
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <menu+0x2198>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d104      	bne.n	80031dc <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80031d2:	4a2b      	ldr	r2, [pc, #172]	; (8003280 <menu+0x21dc>)
 80031d4:	2101      	movs	r1, #1
 80031d6:	2001      	movs	r0, #1
 80031d8:	f004 fc50 	bl	8007a7c <lcd_print>
			}
			if(dilSecim == 1) {
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <menu+0x2198>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d104      	bne.n	80031ee <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80031e4:	4a27      	ldr	r2, [pc, #156]	; (8003284 <menu+0x21e0>)
 80031e6:	2101      	movs	r1, #1
 80031e8:	2001      	movs	r0, #1
 80031ea:	f004 fc47 	bl	8007a7c <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80031ee:	4b26      	ldr	r3, [pc, #152]	; (8003288 <menu+0x21e4>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d113      	bne.n	800321e <menu+0x217a>
			if(dilSecim == 0) {
 80031f6:	4b11      	ldr	r3, [pc, #68]	; (800323c <menu+0x2198>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d105      	bne.n	800320a <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80031fe:	4a15      	ldr	r2, [pc, #84]	; (8003254 <menu+0x21b0>)
 8003200:	2101      	movs	r1, #1
 8003202:	2002      	movs	r0, #2
 8003204:	f004 fc3a 	bl	8007a7c <lcd_print>
 8003208:	e049      	b.n	800329e <menu+0x21fa>
			} else if(dilSecim == 1) {
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <menu+0x2198>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d145      	bne.n	800329e <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003212:	4a11      	ldr	r2, [pc, #68]	; (8003258 <menu+0x21b4>)
 8003214:	2101      	movs	r1, #1
 8003216:	2002      	movs	r0, #2
 8003218:	f004 fc30 	bl	8007a7c <lcd_print>
 800321c:	e03f      	b.n	800329e <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800321e:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <menu+0x21e4>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d13b      	bne.n	800329e <menu+0x21fa>
			if(dilSecim == 0) {
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <menu+0x2198>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d12e      	bne.n	800328c <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800322e:	4a0b      	ldr	r2, [pc, #44]	; (800325c <menu+0x21b8>)
 8003230:	2101      	movs	r1, #1
 8003232:	2002      	movs	r0, #2
 8003234:	f004 fc22 	bl	8007a7c <lcd_print>
 8003238:	e031      	b.n	800329e <menu+0x21fa>
 800323a:	bf00      	nop
 800323c:	20000255 	.word	0x20000255
 8003240:	0800d4cc 	.word	0x0800d4cc
 8003244:	20000243 	.word	0x20000243
 8003248:	0800d4dc 	.word	0x0800d4dc
 800324c:	0800d4f0 	.word	0x0800d4f0
 8003250:	20000244 	.word	0x20000244
 8003254:	0800d060 	.word	0x0800d060
 8003258:	0800d074 	.word	0x0800d074
 800325c:	0800d0c0 	.word	0x0800d0c0
 8003260:	0800d0d4 	.word	0x0800d0d4
 8003264:	40010800 	.word	0x40010800
 8003268:	20000263 	.word	0x20000263
 800326c:	2000012c 	.word	0x2000012c
 8003270:	20000260 	.word	0x20000260
 8003274:	20000234 	.word	0x20000234
 8003278:	0800d504 	.word	0x0800d504
 800327c:	0800d518 	.word	0x0800d518
 8003280:	0800d52c 	.word	0x0800d52c
 8003284:	0800d540 	.word	0x0800d540
 8003288:	20000245 	.word	0x20000245
			} else if(dilSecim == 1) {
 800328c:	4b90      	ldr	r3, [pc, #576]	; (80034d0 <menu+0x242c>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d104      	bne.n	800329e <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003294:	4a8f      	ldr	r2, [pc, #572]	; (80034d4 <menu+0x2430>)
 8003296:	2101      	movs	r1, #1
 8003298:	2002      	movs	r0, #2
 800329a:	f004 fbef 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800329e:	2102      	movs	r1, #2
 80032a0:	488d      	ldr	r0, [pc, #564]	; (80034d8 <menu+0x2434>)
 80032a2:	f005 ff11 	bl	80090c8 <HAL_GPIO_ReadPin>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d115      	bne.n	80032d8 <menu+0x2234>
 80032ac:	4b8b      	ldr	r3, [pc, #556]	; (80034dc <menu+0x2438>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	f083 0301 	eor.w	r3, r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00e      	beq.n	80032d8 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80032ba:	4b89      	ldr	r3, [pc, #548]	; (80034e0 <menu+0x243c>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	3301      	adds	r3, #1
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b87      	ldr	r3, [pc, #540]	; (80034e0 <menu+0x243c>)
 80032c4:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80032c6:	4b86      	ldr	r3, [pc, #536]	; (80034e0 <menu+0x243c>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d902      	bls.n	80032d4 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80032ce:	4b84      	ldr	r3, [pc, #528]	; (80034e0 <menu+0x243c>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032d4:	f001 fade 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032d8:	2104      	movs	r1, #4
 80032da:	487f      	ldr	r0, [pc, #508]	; (80034d8 <menu+0x2434>)
 80032dc:	f005 fef4 	bl	80090c8 <HAL_GPIO_ReadPin>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d115      	bne.n	8003312 <menu+0x226e>
 80032e6:	4b7d      	ldr	r3, [pc, #500]	; (80034dc <menu+0x2438>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	f083 0301 	eor.w	r3, r3, #1
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00e      	beq.n	8003312 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80032f4:	4b7a      	ldr	r3, [pc, #488]	; (80034e0 <menu+0x243c>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	4b78      	ldr	r3, [pc, #480]	; (80034e0 <menu+0x243c>)
 80032fe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003300:	4b77      	ldr	r3, [pc, #476]	; (80034e0 <menu+0x243c>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003308:	4b75      	ldr	r3, [pc, #468]	; (80034e0 <menu+0x243c>)
 800330a:	2201      	movs	r2, #1
 800330c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800330e:	f001 fac1 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003312:	2108      	movs	r1, #8
 8003314:	4870      	ldr	r0, [pc, #448]	; (80034d8 <menu+0x2434>)
 8003316:	f005 fed7 	bl	80090c8 <HAL_GPIO_ReadPin>
 800331a:	4603      	mov	r3, r0
 800331c:	2b01      	cmp	r3, #1
 800331e:	d10d      	bne.n	800333c <menu+0x2298>
 8003320:	4b6e      	ldr	r3, [pc, #440]	; (80034dc <menu+0x2438>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	f083 0301 	eor.w	r3, r3, #1
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800332e:	4b6c      	ldr	r3, [pc, #432]	; (80034e0 <menu+0x243c>)
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	4b6c      	ldr	r3, [pc, #432]	; (80034e4 <menu+0x2440>)
 8003334:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003336:	4b6c      	ldr	r3, [pc, #432]	; (80034e8 <menu+0x2444>)
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 800333c:	4b6b      	ldr	r3, [pc, #428]	; (80034ec <menu+0x2448>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b14      	cmp	r3, #20
 8003342:	f040 80b5 	bne.w	80034b0 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003346:	4b6a      	ldr	r3, [pc, #424]	; (80034f0 <menu+0x244c>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d113      	bne.n	8003376 <menu+0x22d2>
			if(dilSecim == 0) {
 800334e:	4b60      	ldr	r3, [pc, #384]	; (80034d0 <menu+0x242c>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003356:	4a67      	ldr	r2, [pc, #412]	; (80034f4 <menu+0x2450>)
 8003358:	2101      	movs	r1, #1
 800335a:	2001      	movs	r0, #1
 800335c:	f004 fb8e 	bl	8007a7c <lcd_print>
 8003360:	e020      	b.n	80033a4 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003362:	4b5b      	ldr	r3, [pc, #364]	; (80034d0 <menu+0x242c>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d11c      	bne.n	80033a4 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800336a:	4a63      	ldr	r2, [pc, #396]	; (80034f8 <menu+0x2454>)
 800336c:	2101      	movs	r1, #1
 800336e:	2001      	movs	r0, #1
 8003370:	f004 fb84 	bl	8007a7c <lcd_print>
 8003374:	e016      	b.n	80033a4 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003376:	4b5e      	ldr	r3, [pc, #376]	; (80034f0 <menu+0x244c>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d112      	bne.n	80033a4 <menu+0x2300>
			if(dilSecim == 0) {
 800337e:	4b54      	ldr	r3, [pc, #336]	; (80034d0 <menu+0x242c>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003386:	4a5d      	ldr	r2, [pc, #372]	; (80034fc <menu+0x2458>)
 8003388:	2101      	movs	r1, #1
 800338a:	2001      	movs	r0, #1
 800338c:	f004 fb76 	bl	8007a7c <lcd_print>
 8003390:	e008      	b.n	80033a4 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003392:	4b4f      	ldr	r3, [pc, #316]	; (80034d0 <menu+0x242c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d104      	bne.n	80033a4 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800339a:	4a59      	ldr	r2, [pc, #356]	; (8003500 <menu+0x245c>)
 800339c:	2101      	movs	r1, #1
 800339e:	2001      	movs	r0, #1
 80033a0:	f004 fb6c 	bl	8007a7c <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80033a4:	4b57      	ldr	r3, [pc, #348]	; (8003504 <menu+0x2460>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d113      	bne.n	80033d4 <menu+0x2330>
			if(dilSecim == 0) {
 80033ac:	4b48      	ldr	r3, [pc, #288]	; (80034d0 <menu+0x242c>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d105      	bne.n	80033c0 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80033b4:	4a54      	ldr	r2, [pc, #336]	; (8003508 <menu+0x2464>)
 80033b6:	2101      	movs	r1, #1
 80033b8:	2002      	movs	r0, #2
 80033ba:	f004 fb5f 	bl	8007a7c <lcd_print>
 80033be:	e020      	b.n	8003402 <menu+0x235e>
			} else if(dilSecim == 1) {
 80033c0:	4b43      	ldr	r3, [pc, #268]	; (80034d0 <menu+0x242c>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d11c      	bne.n	8003402 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80033c8:	4a50      	ldr	r2, [pc, #320]	; (800350c <menu+0x2468>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	2002      	movs	r0, #2
 80033ce:	f004 fb55 	bl	8007a7c <lcd_print>
 80033d2:	e016      	b.n	8003402 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80033d4:	4b4b      	ldr	r3, [pc, #300]	; (8003504 <menu+0x2460>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d112      	bne.n	8003402 <menu+0x235e>
			if(dilSecim == 0) {
 80033dc:	4b3c      	ldr	r3, [pc, #240]	; (80034d0 <menu+0x242c>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d105      	bne.n	80033f0 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80033e4:	4a4a      	ldr	r2, [pc, #296]	; (8003510 <menu+0x246c>)
 80033e6:	2101      	movs	r1, #1
 80033e8:	2002      	movs	r0, #2
 80033ea:	f004 fb47 	bl	8007a7c <lcd_print>
 80033ee:	e008      	b.n	8003402 <menu+0x235e>
			} else if(dilSecim == 1) {
 80033f0:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <menu+0x242c>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d104      	bne.n	8003402 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80033f8:	4a46      	ldr	r2, [pc, #280]	; (8003514 <menu+0x2470>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	2002      	movs	r0, #2
 80033fe:	f004 fb3d 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003402:	2102      	movs	r1, #2
 8003404:	4834      	ldr	r0, [pc, #208]	; (80034d8 <menu+0x2434>)
 8003406:	f005 fe5f 	bl	80090c8 <HAL_GPIO_ReadPin>
 800340a:	4603      	mov	r3, r0
 800340c:	2b01      	cmp	r3, #1
 800340e:	d119      	bne.n	8003444 <menu+0x23a0>
 8003410:	4b32      	ldr	r3, [pc, #200]	; (80034dc <menu+0x2438>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	f083 0301 	eor.w	r3, r3, #1
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d012      	beq.n	8003444 <menu+0x23a0>
 800341e:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <menu+0x244c>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d10e      	bne.n	8003444 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003426:	4b37      	ldr	r3, [pc, #220]	; (8003504 <menu+0x2460>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	3301      	adds	r3, #1
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4b35      	ldr	r3, [pc, #212]	; (8003504 <menu+0x2460>)
 8003430:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003432:	4b34      	ldr	r3, [pc, #208]	; (8003504 <menu+0x2460>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d902      	bls.n	8003440 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800343a:	4b32      	ldr	r3, [pc, #200]	; (8003504 <menu+0x2460>)
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003440:	f001 fa28 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003444:	2104      	movs	r1, #4
 8003446:	4824      	ldr	r0, [pc, #144]	; (80034d8 <menu+0x2434>)
 8003448:	f005 fe3e 	bl	80090c8 <HAL_GPIO_ReadPin>
 800344c:	4603      	mov	r3, r0
 800344e:	2b01      	cmp	r3, #1
 8003450:	d119      	bne.n	8003486 <menu+0x23e2>
 8003452:	4b22      	ldr	r3, [pc, #136]	; (80034dc <menu+0x2438>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	f083 0301 	eor.w	r3, r3, #1
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d012      	beq.n	8003486 <menu+0x23e2>
 8003460:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <menu+0x244c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d10e      	bne.n	8003486 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003468:	4b26      	ldr	r3, [pc, #152]	; (8003504 <menu+0x2460>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	3b01      	subs	r3, #1
 800346e:	b2da      	uxtb	r2, r3
 8003470:	4b24      	ldr	r3, [pc, #144]	; (8003504 <menu+0x2460>)
 8003472:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003474:	4b23      	ldr	r3, [pc, #140]	; (8003504 <menu+0x2460>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 800347c:	4b21      	ldr	r3, [pc, #132]	; (8003504 <menu+0x2460>)
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003482:	f001 fa07 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003486:	2108      	movs	r1, #8
 8003488:	4813      	ldr	r0, [pc, #76]	; (80034d8 <menu+0x2434>)
 800348a:	f005 fe1d 	bl	80090c8 <HAL_GPIO_ReadPin>
 800348e:	4603      	mov	r3, r0
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10d      	bne.n	80034b0 <menu+0x240c>
 8003494:	4b11      	ldr	r3, [pc, #68]	; (80034dc <menu+0x2438>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	f083 0301 	eor.w	r3, r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80034a2:	4b18      	ldr	r3, [pc, #96]	; (8003504 <menu+0x2460>)
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <menu+0x2440>)
 80034a8:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <menu+0x2444>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80034b0:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <menu+0x2448>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b15      	cmp	r3, #21
 80034b6:	f040 80c2 	bne.w	800363e <menu+0x259a>
		if(dilSecim == 0) {
 80034ba:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <menu+0x242c>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d12c      	bne.n	800351c <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80034c2:	4a15      	ldr	r2, [pc, #84]	; (8003518 <menu+0x2474>)
 80034c4:	2101      	movs	r1, #1
 80034c6:	2001      	movs	r0, #1
 80034c8:	f004 fad8 	bl	8007a7c <lcd_print>
 80034cc:	e02f      	b.n	800352e <menu+0x248a>
 80034ce:	bf00      	nop
 80034d0:	20000255 	.word	0x20000255
 80034d4:	0800d0d4 	.word	0x0800d0d4
 80034d8:	40010800 	.word	0x40010800
 80034dc:	20000263 	.word	0x20000263
 80034e0:	20000245 	.word	0x20000245
 80034e4:	2000012c 	.word	0x2000012c
 80034e8:	20000260 	.word	0x20000260
 80034ec:	20000234 	.word	0x20000234
 80034f0:	20000243 	.word	0x20000243
 80034f4:	0800d554 	.word	0x0800d554
 80034f8:	0800d568 	.word	0x0800d568
 80034fc:	0800d57c 	.word	0x0800d57c
 8003500:	0800d590 	.word	0x0800d590
 8003504:	20000246 	.word	0x20000246
 8003508:	0800d5a4 	.word	0x0800d5a4
 800350c:	0800d5b8 	.word	0x0800d5b8
 8003510:	0800d5c8 	.word	0x0800d5c8
 8003514:	0800d5dc 	.word	0x0800d5dc
 8003518:	0800d5ec 	.word	0x0800d5ec
		} else if(dilSecim == 1) {
 800351c:	4b9c      	ldr	r3, [pc, #624]	; (8003790 <menu+0x26ec>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d104      	bne.n	800352e <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003524:	4a9b      	ldr	r2, [pc, #620]	; (8003794 <menu+0x26f0>)
 8003526:	2101      	movs	r1, #1
 8003528:	2001      	movs	r0, #1
 800352a:	f004 faa7 	bl	8007a7c <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800352e:	4b9a      	ldr	r3, [pc, #616]	; (8003798 <menu+0x26f4>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d112      	bne.n	800355c <menu+0x24b8>
			if(dilSecim == 0) {
 8003536:	4b96      	ldr	r3, [pc, #600]	; (8003790 <menu+0x26ec>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d104      	bne.n	8003548 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800353e:	4a97      	ldr	r2, [pc, #604]	; (800379c <menu+0x26f8>)
 8003540:	2101      	movs	r1, #1
 8003542:	2002      	movs	r0, #2
 8003544:	f004 fa9a 	bl	8007a7c <lcd_print>
			}
			if(dilSecim == 1) {
 8003548:	4b91      	ldr	r3, [pc, #580]	; (8003790 <menu+0x26ec>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d11c      	bne.n	800358a <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003550:	4a93      	ldr	r2, [pc, #588]	; (80037a0 <menu+0x26fc>)
 8003552:	2101      	movs	r1, #1
 8003554:	2002      	movs	r0, #2
 8003556:	f004 fa91 	bl	8007a7c <lcd_print>
 800355a:	e016      	b.n	800358a <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 800355c:	4b8e      	ldr	r3, [pc, #568]	; (8003798 <menu+0x26f4>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d112      	bne.n	800358a <menu+0x24e6>
			if(dilSecim == 0) {
 8003564:	4b8a      	ldr	r3, [pc, #552]	; (8003790 <menu+0x26ec>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d105      	bne.n	8003578 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 800356c:	4a8d      	ldr	r2, [pc, #564]	; (80037a4 <menu+0x2700>)
 800356e:	2101      	movs	r1, #1
 8003570:	2002      	movs	r0, #2
 8003572:	f004 fa83 	bl	8007a7c <lcd_print>
 8003576:	e008      	b.n	800358a <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003578:	4b85      	ldr	r3, [pc, #532]	; (8003790 <menu+0x26ec>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d104      	bne.n	800358a <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003580:	4a89      	ldr	r2, [pc, #548]	; (80037a8 <menu+0x2704>)
 8003582:	2101      	movs	r1, #1
 8003584:	2002      	movs	r0, #2
 8003586:	f004 fa79 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800358a:	2102      	movs	r1, #2
 800358c:	4887      	ldr	r0, [pc, #540]	; (80037ac <menu+0x2708>)
 800358e:	f005 fd9b 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003592:	4603      	mov	r3, r0
 8003594:	2b01      	cmp	r3, #1
 8003596:	d115      	bne.n	80035c4 <menu+0x2520>
 8003598:	4b85      	ldr	r3, [pc, #532]	; (80037b0 <menu+0x270c>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	f083 0301 	eor.w	r3, r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00e      	beq.n	80035c4 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80035a6:	4b7c      	ldr	r3, [pc, #496]	; (8003798 <menu+0x26f4>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	3301      	adds	r3, #1
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	4b7a      	ldr	r3, [pc, #488]	; (8003798 <menu+0x26f4>)
 80035b0:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80035b2:	4b79      	ldr	r3, [pc, #484]	; (8003798 <menu+0x26f4>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d902      	bls.n	80035c0 <menu+0x251c>
				platformSilindirTipi = 0;
 80035ba:	4b77      	ldr	r3, [pc, #476]	; (8003798 <menu+0x26f4>)
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035c0:	f001 f968 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035c4:	2104      	movs	r1, #4
 80035c6:	4879      	ldr	r0, [pc, #484]	; (80037ac <menu+0x2708>)
 80035c8:	f005 fd7e 	bl	80090c8 <HAL_GPIO_ReadPin>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d115      	bne.n	80035fe <menu+0x255a>
 80035d2:	4b77      	ldr	r3, [pc, #476]	; (80037b0 <menu+0x270c>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	f083 0301 	eor.w	r3, r3, #1
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00e      	beq.n	80035fe <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80035e0:	4b6d      	ldr	r3, [pc, #436]	; (8003798 <menu+0x26f4>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	4b6b      	ldr	r3, [pc, #428]	; (8003798 <menu+0x26f4>)
 80035ea:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80035ec:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <menu+0x26f4>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <menu+0x2556>
		   		platformSilindirTipi = 1;
 80035f4:	4b68      	ldr	r3, [pc, #416]	; (8003798 <menu+0x26f4>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035fa:	f001 f94b 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035fe:	2108      	movs	r1, #8
 8003600:	486a      	ldr	r0, [pc, #424]	; (80037ac <menu+0x2708>)
 8003602:	f005 fd61 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003606:	4603      	mov	r3, r0
 8003608:	2b01      	cmp	r3, #1
 800360a:	d118      	bne.n	800363e <menu+0x259a>
 800360c:	4b68      	ldr	r3, [pc, #416]	; (80037b0 <menu+0x270c>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	f083 0301 	eor.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d011      	beq.n	800363e <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 800361a:	4b5f      	ldr	r3, [pc, #380]	; (8003798 <menu+0x26f4>)
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	4b65      	ldr	r3, [pc, #404]	; (80037b4 <menu+0x2710>)
 8003620:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003622:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <menu+0x26f4>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d106      	bne.n	8003638 <menu+0x2594>
				altLimit = 1;
 800362a:	4b63      	ldr	r3, [pc, #396]	; (80037b8 <menu+0x2714>)
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003630:	4b61      	ldr	r3, [pc, #388]	; (80037b8 <menu+0x2714>)
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	4b5f      	ldr	r3, [pc, #380]	; (80037b4 <menu+0x2710>)
 8003636:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003638:	4b60      	ldr	r3, [pc, #384]	; (80037bc <menu+0x2718>)
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800363e:	4b60      	ldr	r3, [pc, #384]	; (80037c0 <menu+0x271c>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b16      	cmp	r3, #22
 8003644:	f040 8081 	bne.w	800374a <menu+0x26a6>
		if(dilSecim == 0) {
 8003648:	4b51      	ldr	r3, [pc, #324]	; (8003790 <menu+0x26ec>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003650:	4a5c      	ldr	r2, [pc, #368]	; (80037c4 <menu+0x2720>)
 8003652:	2101      	movs	r1, #1
 8003654:	2001      	movs	r0, #1
 8003656:	f004 fa11 	bl	8007a7c <lcd_print>
 800365a:	e008      	b.n	800366e <menu+0x25ca>
		} else if(dilSecim == 1) {
 800365c:	4b4c      	ldr	r3, [pc, #304]	; (8003790 <menu+0x26ec>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d104      	bne.n	800366e <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003664:	4a58      	ldr	r2, [pc, #352]	; (80037c8 <menu+0x2724>)
 8003666:	2101      	movs	r1, #1
 8003668:	2001      	movs	r0, #1
 800366a:	f004 fa07 	bl	8007a7c <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 800366e:	4b48      	ldr	r3, [pc, #288]	; (8003790 <menu+0x26ec>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d105      	bne.n	8003682 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003676:	4a55      	ldr	r2, [pc, #340]	; (80037cc <menu+0x2728>)
 8003678:	2101      	movs	r1, #1
 800367a:	2002      	movs	r0, #2
 800367c:	f004 f9fe 	bl	8007a7c <lcd_print>
 8003680:	e008      	b.n	8003694 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003682:	4b43      	ldr	r3, [pc, #268]	; (8003790 <menu+0x26ec>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d104      	bne.n	8003694 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 800368a:	4a51      	ldr	r2, [pc, #324]	; (80037d0 <menu+0x272c>)
 800368c:	2101      	movs	r1, #1
 800368e:	2002      	movs	r0, #2
 8003690:	f004 f9f4 	bl	8007a7c <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003694:	4b4f      	ldr	r3, [pc, #316]	; (80037d4 <menu+0x2730>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	220a      	movs	r2, #10
 800369a:	494f      	ldr	r1, [pc, #316]	; (80037d8 <menu+0x2734>)
 800369c:	4618      	mov	r0, r3
 800369e:	f008 fd69 	bl	800c174 <itoa>
		lcd_print(2,16,snum);
 80036a2:	4a4d      	ldr	r2, [pc, #308]	; (80037d8 <menu+0x2734>)
 80036a4:	2110      	movs	r1, #16
 80036a6:	2002      	movs	r0, #2
 80036a8:	f004 f9e8 	bl	8007a7c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ac:	2102      	movs	r1, #2
 80036ae:	483f      	ldr	r0, [pc, #252]	; (80037ac <menu+0x2708>)
 80036b0:	f005 fd0a 	bl	80090c8 <HAL_GPIO_ReadPin>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d115      	bne.n	80036e6 <menu+0x2642>
 80036ba:	4b3d      	ldr	r3, [pc, #244]	; (80037b0 <menu+0x270c>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	f083 0301 	eor.w	r3, r3, #1
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00e      	beq.n	80036e6 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80036c8:	4b42      	ldr	r3, [pc, #264]	; (80037d4 <menu+0x2730>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	4b40      	ldr	r3, [pc, #256]	; (80037d4 <menu+0x2730>)
 80036d2:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80036d4:	4b3f      	ldr	r3, [pc, #252]	; (80037d4 <menu+0x2730>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d902      	bls.n	80036e2 <menu+0x263e>
				yukariValfTmr = 0;
 80036dc:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <menu+0x2730>)
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036e2:	f001 f8d7 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036e6:	2104      	movs	r1, #4
 80036e8:	4830      	ldr	r0, [pc, #192]	; (80037ac <menu+0x2708>)
 80036ea:	f005 fced 	bl	80090c8 <HAL_GPIO_ReadPin>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d115      	bne.n	8003720 <menu+0x267c>
 80036f4:	4b2e      	ldr	r3, [pc, #184]	; (80037b0 <menu+0x270c>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	f083 0301 	eor.w	r3, r3, #1
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00e      	beq.n	8003720 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003702:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <menu+0x2730>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	3b01      	subs	r3, #1
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <menu+0x2730>)
 800370c:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800370e:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <menu+0x2730>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b06      	cmp	r3, #6
 8003714:	d902      	bls.n	800371c <menu+0x2678>
		   		yukariValfTmr = 5;
 8003716:	4b2f      	ldr	r3, [pc, #188]	; (80037d4 <menu+0x2730>)
 8003718:	2205      	movs	r2, #5
 800371a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800371c:	f001 f8ba 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003720:	2108      	movs	r1, #8
 8003722:	4822      	ldr	r0, [pc, #136]	; (80037ac <menu+0x2708>)
 8003724:	f005 fcd0 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003728:	4603      	mov	r3, r0
 800372a:	2b01      	cmp	r3, #1
 800372c:	d10d      	bne.n	800374a <menu+0x26a6>
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <menu+0x270c>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	f083 0301 	eor.w	r3, r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d006      	beq.n	800374a <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 800373c:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <menu+0x2730>)
 800373e:	781a      	ldrb	r2, [r3, #0]
 8003740:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <menu+0x2710>)
 8003742:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <menu+0x2718>)
 8003746:	2201      	movs	r2, #1
 8003748:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 800374a:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <menu+0x271c>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b17      	cmp	r3, #23
 8003750:	f040 80ac 	bne.w	80038ac <menu+0x2808>
		if(dilSecim == 0) {
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <menu+0x26ec>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 800375c:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <menu+0x2738>)
 800375e:	2101      	movs	r1, #1
 8003760:	2001      	movs	r0, #1
 8003762:	f004 f98b 	bl	8007a7c <lcd_print>
 8003766:	e008      	b.n	800377a <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <menu+0x26ec>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d104      	bne.n	800377a <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003770:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <menu+0x273c>)
 8003772:	2101      	movs	r1, #1
 8003774:	2001      	movs	r0, #1
 8003776:	f004 f981 	bl	8007a7c <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <menu+0x26ec>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d130      	bne.n	80037e4 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003782:	4a12      	ldr	r2, [pc, #72]	; (80037cc <menu+0x2728>)
 8003784:	2101      	movs	r1, #1
 8003786:	2002      	movs	r0, #2
 8003788:	f004 f978 	bl	8007a7c <lcd_print>
 800378c:	e033      	b.n	80037f6 <menu+0x2752>
 800378e:	bf00      	nop
 8003790:	20000255 	.word	0x20000255
 8003794:	0800d600 	.word	0x0800d600
 8003798:	20000247 	.word	0x20000247
 800379c:	0800d5a4 	.word	0x0800d5a4
 80037a0:	0800d5b8 	.word	0x0800d5b8
 80037a4:	0800d5c8 	.word	0x0800d5c8
 80037a8:	0800d5dc 	.word	0x0800d5dc
 80037ac:	40010800 	.word	0x40010800
 80037b0:	20000263 	.word	0x20000263
 80037b4:	2000012c 	.word	0x2000012c
 80037b8:	2000023a 	.word	0x2000023a
 80037bc:	20000260 	.word	0x20000260
 80037c0:	20000234 	.word	0x20000234
 80037c4:	0800d610 	.word	0x0800d610
 80037c8:	0800d624 	.word	0x0800d624
 80037cc:	0800d2c4 	.word	0x0800d2c4
 80037d0:	0800d638 	.word	0x0800d638
 80037d4:	20000248 	.word	0x20000248
 80037d8:	2000019c 	.word	0x2000019c
 80037dc:	0800d648 	.word	0x0800d648
 80037e0:	0800d65c 	.word	0x0800d65c
			} else if(dilSecim == 1) {
 80037e4:	4b98      	ldr	r3, [pc, #608]	; (8003a48 <menu+0x29a4>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d104      	bne.n	80037f6 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 80037ec:	4a97      	ldr	r2, [pc, #604]	; (8003a4c <menu+0x29a8>)
 80037ee:	2101      	movs	r1, #1
 80037f0:	2002      	movs	r0, #2
 80037f2:	f004 f943 	bl	8007a7c <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 80037f6:	4b96      	ldr	r3, [pc, #600]	; (8003a50 <menu+0x29ac>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	220a      	movs	r2, #10
 80037fc:	4995      	ldr	r1, [pc, #596]	; (8003a54 <menu+0x29b0>)
 80037fe:	4618      	mov	r0, r3
 8003800:	f008 fcb8 	bl	800c174 <itoa>
		lcd_print(2,16,snum);
 8003804:	4a93      	ldr	r2, [pc, #588]	; (8003a54 <menu+0x29b0>)
 8003806:	2110      	movs	r1, #16
 8003808:	2002      	movs	r0, #2
 800380a:	f004 f937 	bl	8007a7c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800380e:	2102      	movs	r1, #2
 8003810:	4891      	ldr	r0, [pc, #580]	; (8003a58 <menu+0x29b4>)
 8003812:	f005 fc59 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003816:	4603      	mov	r3, r0
 8003818:	2b01      	cmp	r3, #1
 800381a:	d115      	bne.n	8003848 <menu+0x27a4>
 800381c:	4b8f      	ldr	r3, [pc, #572]	; (8003a5c <menu+0x29b8>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	f083 0301 	eor.w	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00e      	beq.n	8003848 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 800382a:	4b89      	ldr	r3, [pc, #548]	; (8003a50 <menu+0x29ac>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4b87      	ldr	r3, [pc, #540]	; (8003a50 <menu+0x29ac>)
 8003834:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003836:	4b86      	ldr	r3, [pc, #536]	; (8003a50 <menu+0x29ac>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b05      	cmp	r3, #5
 800383c:	d902      	bls.n	8003844 <menu+0x27a0>
				asagiValfTmr = 0;
 800383e:	4b84      	ldr	r3, [pc, #528]	; (8003a50 <menu+0x29ac>)
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003844:	f001 f826 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003848:	2104      	movs	r1, #4
 800384a:	4883      	ldr	r0, [pc, #524]	; (8003a58 <menu+0x29b4>)
 800384c:	f005 fc3c 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003850:	4603      	mov	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	d115      	bne.n	8003882 <menu+0x27de>
 8003856:	4b81      	ldr	r3, [pc, #516]	; (8003a5c <menu+0x29b8>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	f083 0301 	eor.w	r3, r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00e      	beq.n	8003882 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003864:	4b7a      	ldr	r3, [pc, #488]	; (8003a50 <menu+0x29ac>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	3b01      	subs	r3, #1
 800386a:	b2da      	uxtb	r2, r3
 800386c:	4b78      	ldr	r3, [pc, #480]	; (8003a50 <menu+0x29ac>)
 800386e:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003870:	4b77      	ldr	r3, [pc, #476]	; (8003a50 <menu+0x29ac>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b06      	cmp	r3, #6
 8003876:	d902      	bls.n	800387e <menu+0x27da>
		   		asagiValfTmr = 5;
 8003878:	4b75      	ldr	r3, [pc, #468]	; (8003a50 <menu+0x29ac>)
 800387a:	2205      	movs	r2, #5
 800387c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800387e:	f001 f809 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003882:	2108      	movs	r1, #8
 8003884:	4874      	ldr	r0, [pc, #464]	; (8003a58 <menu+0x29b4>)
 8003886:	f005 fc1f 	bl	80090c8 <HAL_GPIO_ReadPin>
 800388a:	4603      	mov	r3, r0
 800388c:	2b01      	cmp	r3, #1
 800388e:	d10d      	bne.n	80038ac <menu+0x2808>
 8003890:	4b72      	ldr	r3, [pc, #456]	; (8003a5c <menu+0x29b8>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	f083 0301 	eor.w	r3, r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d006      	beq.n	80038ac <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 800389e:	4b6c      	ldr	r3, [pc, #432]	; (8003a50 <menu+0x29ac>)
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	4b6f      	ldr	r3, [pc, #444]	; (8003a60 <menu+0x29bc>)
 80038a4:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80038a6:	4b6f      	ldr	r3, [pc, #444]	; (8003a64 <menu+0x29c0>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80038ac:	4b6e      	ldr	r3, [pc, #440]	; (8003a68 <menu+0x29c4>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b18      	cmp	r3, #24
 80038b2:	f040 809d 	bne.w	80039f0 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 80038b6:	4b6d      	ldr	r3, [pc, #436]	; (8003a6c <menu+0x29c8>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d113      	bne.n	80038e6 <menu+0x2842>
			if(dilSecim == 0) {
 80038be:	4b62      	ldr	r3, [pc, #392]	; (8003a48 <menu+0x29a4>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d105      	bne.n	80038d2 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 80038c6:	4a6a      	ldr	r2, [pc, #424]	; (8003a70 <menu+0x29cc>)
 80038c8:	2101      	movs	r1, #1
 80038ca:	2001      	movs	r0, #1
 80038cc:	f004 f8d6 	bl	8007a7c <lcd_print>
 80038d0:	e020      	b.n	8003914 <menu+0x2870>
			} else if(dilSecim == 1) {
 80038d2:	4b5d      	ldr	r3, [pc, #372]	; (8003a48 <menu+0x29a4>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d11c      	bne.n	8003914 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 80038da:	4a66      	ldr	r2, [pc, #408]	; (8003a74 <menu+0x29d0>)
 80038dc:	2101      	movs	r1, #1
 80038de:	2001      	movs	r0, #1
 80038e0:	f004 f8cc 	bl	8007a7c <lcd_print>
 80038e4:	e016      	b.n	8003914 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80038e6:	4b61      	ldr	r3, [pc, #388]	; (8003a6c <menu+0x29c8>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d112      	bne.n	8003914 <menu+0x2870>
			if(dilSecim == 0) {
 80038ee:	4b56      	ldr	r3, [pc, #344]	; (8003a48 <menu+0x29a4>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d105      	bne.n	8003902 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 80038f6:	4a60      	ldr	r2, [pc, #384]	; (8003a78 <menu+0x29d4>)
 80038f8:	2101      	movs	r1, #1
 80038fa:	2001      	movs	r0, #1
 80038fc:	f004 f8be 	bl	8007a7c <lcd_print>
 8003900:	e008      	b.n	8003914 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003902:	4b51      	ldr	r3, [pc, #324]	; (8003a48 <menu+0x29a4>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d104      	bne.n	8003914 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 800390a:	4a5c      	ldr	r2, [pc, #368]	; (8003a7c <menu+0x29d8>)
 800390c:	2101      	movs	r1, #1
 800390e:	2001      	movs	r0, #1
 8003910:	f004 f8b4 	bl	8007a7c <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003914:	4b4c      	ldr	r3, [pc, #304]	; (8003a48 <menu+0x29a4>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d105      	bne.n	8003928 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 800391c:	4a58      	ldr	r2, [pc, #352]	; (8003a80 <menu+0x29dc>)
 800391e:	2101      	movs	r1, #1
 8003920:	2002      	movs	r0, #2
 8003922:	f004 f8ab 	bl	8007a7c <lcd_print>
 8003926:	e008      	b.n	800393a <menu+0x2896>
			} else if(dilSecim == 1) {
 8003928:	4b47      	ldr	r3, [pc, #284]	; (8003a48 <menu+0x29a4>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d104      	bne.n	800393a <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003930:	4a46      	ldr	r2, [pc, #280]	; (8003a4c <menu+0x29a8>)
 8003932:	2101      	movs	r1, #1
 8003934:	2002      	movs	r0, #2
 8003936:	f004 f8a1 	bl	8007a7c <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800393a:	4b52      	ldr	r3, [pc, #328]	; (8003a84 <menu+0x29e0>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	220a      	movs	r2, #10
 8003940:	4944      	ldr	r1, [pc, #272]	; (8003a54 <menu+0x29b0>)
 8003942:	4618      	mov	r0, r3
 8003944:	f008 fc16 	bl	800c174 <itoa>
		lcd_print(2, 16, snum);
 8003948:	4a42      	ldr	r2, [pc, #264]	; (8003a54 <menu+0x29b0>)
 800394a:	2110      	movs	r1, #16
 800394c:	2002      	movs	r0, #2
 800394e:	f004 f895 	bl	8007a7c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003952:	2102      	movs	r1, #2
 8003954:	4840      	ldr	r0, [pc, #256]	; (8003a58 <menu+0x29b4>)
 8003956:	f005 fbb7 	bl	80090c8 <HAL_GPIO_ReadPin>
 800395a:	4603      	mov	r3, r0
 800395c:	2b01      	cmp	r3, #1
 800395e:	d115      	bne.n	800398c <menu+0x28e8>
 8003960:	4b3e      	ldr	r3, [pc, #248]	; (8003a5c <menu+0x29b8>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	f083 0301 	eor.w	r3, r3, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00e      	beq.n	800398c <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 800396e:	4b45      	ldr	r3, [pc, #276]	; (8003a84 <menu+0x29e0>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	b2da      	uxtb	r2, r3
 8003976:	4b43      	ldr	r3, [pc, #268]	; (8003a84 <menu+0x29e0>)
 8003978:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800397a:	4b42      	ldr	r3, [pc, #264]	; (8003a84 <menu+0x29e0>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b05      	cmp	r3, #5
 8003980:	d902      	bls.n	8003988 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003982:	4b40      	ldr	r3, [pc, #256]	; (8003a84 <menu+0x29e0>)
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003988:	f000 ff84 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800398c:	2104      	movs	r1, #4
 800398e:	4832      	ldr	r0, [pc, #200]	; (8003a58 <menu+0x29b4>)
 8003990:	f005 fb9a 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003994:	4603      	mov	r3, r0
 8003996:	2b01      	cmp	r3, #1
 8003998:	d115      	bne.n	80039c6 <menu+0x2922>
 800399a:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <menu+0x29b8>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	f083 0301 	eor.w	r3, r3, #1
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00e      	beq.n	80039c6 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <menu+0x29e0>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <menu+0x29e0>)
 80039b2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80039b4:	4b33      	ldr	r3, [pc, #204]	; (8003a84 <menu+0x29e0>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b06      	cmp	r3, #6
 80039ba:	d902      	bls.n	80039c2 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 80039bc:	4b31      	ldr	r3, [pc, #196]	; (8003a84 <menu+0x29e0>)
 80039be:	2205      	movs	r2, #5
 80039c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039c2:	f000 ff67 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039c6:	2108      	movs	r1, #8
 80039c8:	4823      	ldr	r0, [pc, #140]	; (8003a58 <menu+0x29b4>)
 80039ca:	f005 fb7d 	bl	80090c8 <HAL_GPIO_ReadPin>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d10d      	bne.n	80039f0 <menu+0x294c>
 80039d4:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <menu+0x29b8>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	f083 0301 	eor.w	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 80039e2:	4b28      	ldr	r3, [pc, #160]	; (8003a84 <menu+0x29e0>)
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	4b1e      	ldr	r3, [pc, #120]	; (8003a60 <menu+0x29bc>)
 80039e8:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80039ea:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <menu+0x29c0>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80039f0:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <menu+0x29c4>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b19      	cmp	r3, #25
 80039f6:	f040 80c4 	bne.w	8003b82 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 80039fa:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <menu+0x29c8>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d113      	bne.n	8003a2a <menu+0x2986>
			if(dilSecim == 0) {
 8003a02:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <menu+0x29a4>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003a0a:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <menu+0x29e4>)
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	2001      	movs	r0, #1
 8003a10:	f004 f834 	bl	8007a7c <lcd_print>
 8003a14:	e047      	b.n	8003aa6 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <menu+0x29a4>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d143      	bne.n	8003aa6 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003a1e:	4a1b      	ldr	r2, [pc, #108]	; (8003a8c <menu+0x29e8>)
 8003a20:	2101      	movs	r1, #1
 8003a22:	2001      	movs	r0, #1
 8003a24:	f004 f82a 	bl	8007a7c <lcd_print>
 8003a28:	e03d      	b.n	8003aa6 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <menu+0x29c8>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d139      	bne.n	8003aa6 <menu+0x2a02>
			if(dilSecim == 0) {
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <menu+0x29a4>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d12c      	bne.n	8003a94 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003a3a:	4a15      	ldr	r2, [pc, #84]	; (8003a90 <menu+0x29ec>)
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f004 f81c 	bl	8007a7c <lcd_print>
 8003a44:	e02f      	b.n	8003aa6 <menu+0x2a02>
 8003a46:	bf00      	nop
 8003a48:	20000255 	.word	0x20000255
 8003a4c:	0800d638 	.word	0x0800d638
 8003a50:	20000249 	.word	0x20000249
 8003a54:	2000019c 	.word	0x2000019c
 8003a58:	40010800 	.word	0x40010800
 8003a5c:	20000263 	.word	0x20000263
 8003a60:	2000012c 	.word	0x2000012c
 8003a64:	20000260 	.word	0x20000260
 8003a68:	20000234 	.word	0x20000234
 8003a6c:	20000243 	.word	0x20000243
 8003a70:	0800d670 	.word	0x0800d670
 8003a74:	0800d684 	.word	0x0800d684
 8003a78:	0800d698 	.word	0x0800d698
 8003a7c:	0800d6ac 	.word	0x0800d6ac
 8003a80:	0800d2c4 	.word	0x0800d2c4
 8003a84:	2000024a 	.word	0x2000024a
 8003a88:	0800d6c0 	.word	0x0800d6c0
 8003a8c:	0800d6d4 	.word	0x0800d6d4
 8003a90:	0800d6e8 	.word	0x0800d6e8
			} else if(dilSecim == 1) {
 8003a94:	4b73      	ldr	r3, [pc, #460]	; (8003c64 <menu+0x2bc0>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d104      	bne.n	8003aa6 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003a9c:	4a72      	ldr	r2, [pc, #456]	; (8003c68 <menu+0x2bc4>)
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	f003 ffeb 	bl	8007a7c <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003aa6:	4b6f      	ldr	r3, [pc, #444]	; (8003c64 <menu+0x2bc0>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d105      	bne.n	8003aba <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003aae:	4a6f      	ldr	r2, [pc, #444]	; (8003c6c <menu+0x2bc8>)
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	2002      	movs	r0, #2
 8003ab4:	f003 ffe2 	bl	8007a7c <lcd_print>
 8003ab8:	e008      	b.n	8003acc <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003aba:	4b6a      	ldr	r3, [pc, #424]	; (8003c64 <menu+0x2bc0>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d104      	bne.n	8003acc <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003ac2:	4a6b      	ldr	r2, [pc, #428]	; (8003c70 <menu+0x2bcc>)
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	2002      	movs	r0, #2
 8003ac8:	f003 ffd8 	bl	8007a7c <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003acc:	4b69      	ldr	r3, [pc, #420]	; (8003c74 <menu+0x2bd0>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	220a      	movs	r2, #10
 8003ad2:	4969      	ldr	r1, [pc, #420]	; (8003c78 <menu+0x2bd4>)
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f008 fb4d 	bl	800c174 <itoa>
		lcd_print(2,16,snum);
 8003ada:	4a67      	ldr	r2, [pc, #412]	; (8003c78 <menu+0x2bd4>)
 8003adc:	2110      	movs	r1, #16
 8003ade:	2002      	movs	r0, #2
 8003ae0:	f003 ffcc 	bl	8007a7c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4865      	ldr	r0, [pc, #404]	; (8003c7c <menu+0x2bd8>)
 8003ae8:	f005 faee 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d115      	bne.n	8003b1e <menu+0x2a7a>
 8003af2:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <menu+0x2bdc>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	f083 0301 	eor.w	r3, r3, #1
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00e      	beq.n	8003b1e <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003b00:	4b5c      	ldr	r3, [pc, #368]	; (8003c74 <menu+0x2bd0>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	3301      	adds	r3, #1
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	4b5a      	ldr	r3, [pc, #360]	; (8003c74 <menu+0x2bd0>)
 8003b0a:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003b0c:	4b59      	ldr	r3, [pc, #356]	; (8003c74 <menu+0x2bd0>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b05      	cmp	r3, #5
 8003b12:	d902      	bls.n	8003b1a <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003b14:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <menu+0x2bd0>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b1a:	f000 febb 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b1e:	2104      	movs	r1, #4
 8003b20:	4856      	ldr	r0, [pc, #344]	; (8003c7c <menu+0x2bd8>)
 8003b22:	f005 fad1 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d115      	bne.n	8003b58 <menu+0x2ab4>
 8003b2c:	4b54      	ldr	r3, [pc, #336]	; (8003c80 <menu+0x2bdc>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	f083 0301 	eor.w	r3, r3, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00e      	beq.n	8003b58 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003b3a:	4b4e      	ldr	r3, [pc, #312]	; (8003c74 <menu+0x2bd0>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	4b4c      	ldr	r3, [pc, #304]	; (8003c74 <menu+0x2bd0>)
 8003b44:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003b46:	4b4b      	ldr	r3, [pc, #300]	; (8003c74 <menu+0x2bd0>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d902      	bls.n	8003b54 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003b4e:	4b49      	ldr	r3, [pc, #292]	; (8003c74 <menu+0x2bd0>)
 8003b50:	2205      	movs	r2, #5
 8003b52:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b54:	f000 fe9e 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b58:	2108      	movs	r1, #8
 8003b5a:	4848      	ldr	r0, [pc, #288]	; (8003c7c <menu+0x2bd8>)
 8003b5c:	f005 fab4 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d10d      	bne.n	8003b82 <menu+0x2ade>
 8003b66:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <menu+0x2bdc>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	f083 0301 	eor.w	r3, r3, #1
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d006      	beq.n	8003b82 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003b74:	4b3f      	ldr	r3, [pc, #252]	; (8003c74 <menu+0x2bd0>)
 8003b76:	781a      	ldrb	r2, [r3, #0]
 8003b78:	4b42      	ldr	r3, [pc, #264]	; (8003c84 <menu+0x2be0>)
 8003b7a:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003b7c:	4b42      	ldr	r3, [pc, #264]	; (8003c88 <menu+0x2be4>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003b82:	4b42      	ldr	r3, [pc, #264]	; (8003c8c <menu+0x2be8>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b1a      	cmp	r3, #26
 8003b88:	f040 80ec 	bne.w	8003d64 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003b8c:	4b35      	ldr	r3, [pc, #212]	; (8003c64 <menu+0x2bc0>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003b94:	4a3e      	ldr	r2, [pc, #248]	; (8003c90 <menu+0x2bec>)
 8003b96:	2101      	movs	r1, #1
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f003 ff6f 	bl	8007a7c <lcd_print>
 8003b9e:	e008      	b.n	8003bb2 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003ba0:	4b30      	ldr	r3, [pc, #192]	; (8003c64 <menu+0x2bc0>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d104      	bne.n	8003bb2 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003ba8:	4a3a      	ldr	r2, [pc, #232]	; (8003c94 <menu+0x2bf0>)
 8003baa:	2101      	movs	r1, #1
 8003bac:	2001      	movs	r0, #1
 8003bae:	f003 ff65 	bl	8007a7c <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003bb2:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <menu+0x2bf4>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b63      	cmp	r3, #99	; 0x63
 8003bb8:	d91e      	bls.n	8003bf8 <menu+0x2b54>
			if(dilSecim == 0) {
 8003bba:	4b2a      	ldr	r3, [pc, #168]	; (8003c64 <menu+0x2bc0>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <menu+0x2bc8>)
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	2002      	movs	r0, #2
 8003bc8:	f003 ff58 	bl	8007a7c <lcd_print>
			}
			if(dilSecim == 1) {
 8003bcc:	4b25      	ldr	r3, [pc, #148]	; (8003c64 <menu+0x2bc0>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d104      	bne.n	8003bde <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003bd4:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <menu+0x2bcc>)
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	2002      	movs	r0, #2
 8003bda:	f003 ff4f 	bl	8007a7c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003bde:	4b2e      	ldr	r3, [pc, #184]	; (8003c98 <menu+0x2bf4>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	220a      	movs	r2, #10
 8003be4:	4924      	ldr	r1, [pc, #144]	; (8003c78 <menu+0x2bd4>)
 8003be6:	4618      	mov	r0, r3
 8003be8:	f008 fac4 	bl	800c174 <itoa>
			lcd_print(2,14,snum);
 8003bec:	4a22      	ldr	r2, [pc, #136]	; (8003c78 <menu+0x2bd4>)
 8003bee:	210e      	movs	r1, #14
 8003bf0:	2002      	movs	r0, #2
 8003bf2:	f003 ff43 	bl	8007a7c <lcd_print>
 8003bf6:	e066      	b.n	8003cc6 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <menu+0x2bf4>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b09      	cmp	r3, #9
 8003bfe:	d923      	bls.n	8003c48 <menu+0x2ba4>
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <menu+0x2bf4>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b63      	cmp	r3, #99	; 0x63
 8003c06:	d81f      	bhi.n	8003c48 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003c08:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <menu+0x2bc0>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d105      	bne.n	8003c1c <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c10:	4a16      	ldr	r2, [pc, #88]	; (8003c6c <menu+0x2bc8>)
 8003c12:	2101      	movs	r1, #1
 8003c14:	2002      	movs	r0, #2
 8003c16:	f003 ff31 	bl	8007a7c <lcd_print>
 8003c1a:	e008      	b.n	8003c2e <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <menu+0x2bc0>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d104      	bne.n	8003c2e <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003c24:	4a12      	ldr	r2, [pc, #72]	; (8003c70 <menu+0x2bcc>)
 8003c26:	2101      	movs	r1, #1
 8003c28:	2002      	movs	r0, #2
 8003c2a:	f003 ff27 	bl	8007a7c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003c2e:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <menu+0x2bf4>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	220a      	movs	r2, #10
 8003c34:	4910      	ldr	r1, [pc, #64]	; (8003c78 <menu+0x2bd4>)
 8003c36:	4618      	mov	r0, r3
 8003c38:	f008 fa9c 	bl	800c174 <itoa>
			lcd_print(2, 15, snum);
 8003c3c:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <menu+0x2bd4>)
 8003c3e:	210f      	movs	r1, #15
 8003c40:	2002      	movs	r0, #2
 8003c42:	f003 ff1b 	bl	8007a7c <lcd_print>
 8003c46:	e03e      	b.n	8003cc6 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <menu+0x2bf4>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b09      	cmp	r3, #9
 8003c4e:	d83a      	bhi.n	8003cc6 <menu+0x2c22>
			if(dilSecim == 0) {
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <menu+0x2bc0>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d121      	bne.n	8003c9c <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c58:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <menu+0x2bc8>)
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	2002      	movs	r0, #2
 8003c5e:	f003 ff0d 	bl	8007a7c <lcd_print>
 8003c62:	e024      	b.n	8003cae <menu+0x2c0a>
 8003c64:	20000255 	.word	0x20000255
 8003c68:	0800d6fc 	.word	0x0800d6fc
 8003c6c:	0800d2c4 	.word	0x0800d2c4
 8003c70:	0800d638 	.word	0x0800d638
 8003c74:	2000024b 	.word	0x2000024b
 8003c78:	2000019c 	.word	0x2000019c
 8003c7c:	40010800 	.word	0x40010800
 8003c80:	20000263 	.word	0x20000263
 8003c84:	2000012c 	.word	0x2000012c
 8003c88:	20000260 	.word	0x20000260
 8003c8c:	20000234 	.word	0x20000234
 8003c90:	0800d710 	.word	0x0800d710
 8003c94:	0800d724 	.word	0x0800d724
 8003c98:	2000024c 	.word	0x2000024c
			} else if(dilSecim == 1) {
 8003c9c:	4b8f      	ldr	r3, [pc, #572]	; (8003edc <menu+0x2e38>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d104      	bne.n	8003cae <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003ca4:	4a8e      	ldr	r2, [pc, #568]	; (8003ee0 <menu+0x2e3c>)
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	2002      	movs	r0, #2
 8003caa:	f003 fee7 	bl	8007a7c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003cae:	4b8d      	ldr	r3, [pc, #564]	; (8003ee4 <menu+0x2e40>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	220a      	movs	r2, #10
 8003cb4:	498c      	ldr	r1, [pc, #560]	; (8003ee8 <menu+0x2e44>)
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f008 fa5c 	bl	800c174 <itoa>
			lcd_print(2, 16, snum);
 8003cbc:	4a8a      	ldr	r2, [pc, #552]	; (8003ee8 <menu+0x2e44>)
 8003cbe:	2110      	movs	r1, #16
 8003cc0:	2002      	movs	r0, #2
 8003cc2:	f003 fedb 	bl	8007a7c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cc6:	2102      	movs	r1, #2
 8003cc8:	4888      	ldr	r0, [pc, #544]	; (8003eec <menu+0x2e48>)
 8003cca:	f005 f9fd 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d115      	bne.n	8003d00 <menu+0x2c5c>
 8003cd4:	4b86      	ldr	r3, [pc, #536]	; (8003ef0 <menu+0x2e4c>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	f083 0301 	eor.w	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00e      	beq.n	8003d00 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003ce2:	4b80      	ldr	r3, [pc, #512]	; (8003ee4 <menu+0x2e40>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4b7e      	ldr	r3, [pc, #504]	; (8003ee4 <menu+0x2e40>)
 8003cec:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003cee:	4b7d      	ldr	r3, [pc, #500]	; (8003ee4 <menu+0x2e40>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2bb4      	cmp	r3, #180	; 0xb4
 8003cf4:	d902      	bls.n	8003cfc <menu+0x2c58>
				makineCalismaTmr = 0;
 8003cf6:	4b7b      	ldr	r3, [pc, #492]	; (8003ee4 <menu+0x2e40>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003cfc:	f000 fdca 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d00:	2104      	movs	r1, #4
 8003d02:	487a      	ldr	r0, [pc, #488]	; (8003eec <menu+0x2e48>)
 8003d04:	f005 f9e0 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d115      	bne.n	8003d3a <menu+0x2c96>
 8003d0e:	4b78      	ldr	r3, [pc, #480]	; (8003ef0 <menu+0x2e4c>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	f083 0301 	eor.w	r3, r3, #1
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003d1c:	4b71      	ldr	r3, [pc, #452]	; (8003ee4 <menu+0x2e40>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	4b6f      	ldr	r3, [pc, #444]	; (8003ee4 <menu+0x2e40>)
 8003d26:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003d28:	4b6e      	ldr	r3, [pc, #440]	; (8003ee4 <menu+0x2e40>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2bb5      	cmp	r3, #181	; 0xb5
 8003d2e:	d902      	bls.n	8003d36 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003d30:	4b6c      	ldr	r3, [pc, #432]	; (8003ee4 <menu+0x2e40>)
 8003d32:	22b4      	movs	r2, #180	; 0xb4
 8003d34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d36:	f000 fdad 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d3a:	2108      	movs	r1, #8
 8003d3c:	486b      	ldr	r0, [pc, #428]	; (8003eec <menu+0x2e48>)
 8003d3e:	f005 f9c3 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10d      	bne.n	8003d64 <menu+0x2cc0>
 8003d48:	4b69      	ldr	r3, [pc, #420]	; (8003ef0 <menu+0x2e4c>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	f083 0301 	eor.w	r3, r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d006      	beq.n	8003d64 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003d56:	4b63      	ldr	r3, [pc, #396]	; (8003ee4 <menu+0x2e40>)
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	4b66      	ldr	r3, [pc, #408]	; (8003ef4 <menu+0x2e50>)
 8003d5c:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003d5e:	4b66      	ldr	r3, [pc, #408]	; (8003ef8 <menu+0x2e54>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003d64:	4b65      	ldr	r3, [pc, #404]	; (8003efc <menu+0x2e58>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b1b      	cmp	r3, #27
 8003d6a:	f040 8083 	bne.w	8003e74 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003d6e:	4a64      	ldr	r2, [pc, #400]	; (8003f00 <menu+0x2e5c>)
 8003d70:	2101      	movs	r1, #1
 8003d72:	2001      	movs	r0, #1
 8003d74:	f003 fe82 	bl	8007a7c <lcd_print>

		if(buzzer == 0) {
 8003d78:	4b62      	ldr	r3, [pc, #392]	; (8003f04 <menu+0x2e60>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d113      	bne.n	8003da8 <menu+0x2d04>
			if(dilSecim == 0) {
 8003d80:	4b56      	ldr	r3, [pc, #344]	; (8003edc <menu+0x2e38>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d105      	bne.n	8003d94 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003d88:	4a5f      	ldr	r2, [pc, #380]	; (8003f08 <menu+0x2e64>)
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	2002      	movs	r0, #2
 8003d8e:	f003 fe75 	bl	8007a7c <lcd_print>
 8003d92:	e020      	b.n	8003dd6 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003d94:	4b51      	ldr	r3, [pc, #324]	; (8003edc <menu+0x2e38>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d11c      	bne.n	8003dd6 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003d9c:	4a5b      	ldr	r2, [pc, #364]	; (8003f0c <menu+0x2e68>)
 8003d9e:	2101      	movs	r1, #1
 8003da0:	2002      	movs	r0, #2
 8003da2:	f003 fe6b 	bl	8007a7c <lcd_print>
 8003da6:	e016      	b.n	8003dd6 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003da8:	4b56      	ldr	r3, [pc, #344]	; (8003f04 <menu+0x2e60>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d112      	bne.n	8003dd6 <menu+0x2d32>
			if(dilSecim == 0) {
 8003db0:	4b4a      	ldr	r3, [pc, #296]	; (8003edc <menu+0x2e38>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d105      	bne.n	8003dc4 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003db8:	4a55      	ldr	r2, [pc, #340]	; (8003f10 <menu+0x2e6c>)
 8003dba:	2101      	movs	r1, #1
 8003dbc:	2002      	movs	r0, #2
 8003dbe:	f003 fe5d 	bl	8007a7c <lcd_print>
 8003dc2:	e008      	b.n	8003dd6 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003dc4:	4b45      	ldr	r3, [pc, #276]	; (8003edc <menu+0x2e38>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d104      	bne.n	8003dd6 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003dcc:	4a51      	ldr	r2, [pc, #324]	; (8003f14 <menu+0x2e70>)
 8003dce:	2101      	movs	r1, #1
 8003dd0:	2002      	movs	r0, #2
 8003dd2:	f003 fe53 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	4844      	ldr	r0, [pc, #272]	; (8003eec <menu+0x2e48>)
 8003dda:	f005 f975 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d115      	bne.n	8003e10 <menu+0x2d6c>
 8003de4:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <menu+0x2e4c>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	f083 0301 	eor.w	r3, r3, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00e      	beq.n	8003e10 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003df2:	4b44      	ldr	r3, [pc, #272]	; (8003f04 <menu+0x2e60>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	3301      	adds	r3, #1
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4b42      	ldr	r3, [pc, #264]	; (8003f04 <menu+0x2e60>)
 8003dfc:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003dfe:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <menu+0x2e60>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d902      	bls.n	8003e0c <menu+0x2d68>
				buzzer = 0;
 8003e06:	4b3f      	ldr	r3, [pc, #252]	; (8003f04 <menu+0x2e60>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e0c:	f000 fd42 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e10:	2104      	movs	r1, #4
 8003e12:	4836      	ldr	r0, [pc, #216]	; (8003eec <menu+0x2e48>)
 8003e14:	f005 f958 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d115      	bne.n	8003e4a <menu+0x2da6>
 8003e1e:	4b34      	ldr	r3, [pc, #208]	; (8003ef0 <menu+0x2e4c>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	f083 0301 	eor.w	r3, r3, #1
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <menu+0x2da6>
			buzzer = buzzer - 1;
 8003e2c:	4b35      	ldr	r3, [pc, #212]	; (8003f04 <menu+0x2e60>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	4b33      	ldr	r3, [pc, #204]	; (8003f04 <menu+0x2e60>)
 8003e36:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003e38:	4b32      	ldr	r3, [pc, #200]	; (8003f04 <menu+0x2e60>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <menu+0x2da2>
		   		buzzer = 1;
 8003e40:	4b30      	ldr	r3, [pc, #192]	; (8003f04 <menu+0x2e60>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e46:	f000 fd25 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e4a:	2108      	movs	r1, #8
 8003e4c:	4827      	ldr	r0, [pc, #156]	; (8003eec <menu+0x2e48>)
 8003e4e:	f005 f93b 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d10d      	bne.n	8003e74 <menu+0x2dd0>
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <menu+0x2e4c>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	f083 0301 	eor.w	r3, r3, #1
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d006      	beq.n	8003e74 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003e66:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <menu+0x2e60>)
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	4b22      	ldr	r3, [pc, #136]	; (8003ef4 <menu+0x2e50>)
 8003e6c:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003e6e:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <menu+0x2e54>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003e74:	4b21      	ldr	r3, [pc, #132]	; (8003efc <menu+0x2e58>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b1c      	cmp	r3, #28
 8003e7a:	f040 80ab 	bne.w	8003fd4 <menu+0x2f30>
		calismaSayModu = 0;
 8003e7e:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <menu+0x2e74>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003e84:	4a25      	ldr	r2, [pc, #148]	; (8003f1c <menu+0x2e78>)
 8003e86:	2101      	movs	r1, #1
 8003e88:	2001      	movs	r0, #1
 8003e8a:	f003 fdf7 	bl	8007a7c <lcd_print>

		if(demoMode == 0) {
 8003e8e:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <menu+0x2e7c>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d113      	bne.n	8003ebe <menu+0x2e1a>
			if(dilSecim == 0) {
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <menu+0x2e38>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d105      	bne.n	8003eaa <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003e9e:	4a1a      	ldr	r2, [pc, #104]	; (8003f08 <menu+0x2e64>)
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	2002      	movs	r0, #2
 8003ea4:	f003 fdea 	bl	8007a7c <lcd_print>
 8003ea8:	e045      	b.n	8003f36 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <menu+0x2e38>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d141      	bne.n	8003f36 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003eb2:	4a16      	ldr	r2, [pc, #88]	; (8003f0c <menu+0x2e68>)
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	2002      	movs	r0, #2
 8003eb8:	f003 fde0 	bl	8007a7c <lcd_print>
 8003ebc:	e03b      	b.n	8003f36 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8003ebe:	4b18      	ldr	r3, [pc, #96]	; (8003f20 <menu+0x2e7c>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d137      	bne.n	8003f36 <menu+0x2e92>
			if(dilSecim == 0){
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <menu+0x2e38>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d12a      	bne.n	8003f24 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8003ece:	4a10      	ldr	r2, [pc, #64]	; (8003f10 <menu+0x2e6c>)
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	2002      	movs	r0, #2
 8003ed4:	f003 fdd2 	bl	8007a7c <lcd_print>
 8003ed8:	e02d      	b.n	8003f36 <menu+0x2e92>
 8003eda:	bf00      	nop
 8003edc:	20000255 	.word	0x20000255
 8003ee0:	0800d638 	.word	0x0800d638
 8003ee4:	2000024c 	.word	0x2000024c
 8003ee8:	2000019c 	.word	0x2000019c
 8003eec:	40010800 	.word	0x40010800
 8003ef0:	20000263 	.word	0x20000263
 8003ef4:	2000012c 	.word	0x2000012c
 8003ef8:	20000260 	.word	0x20000260
 8003efc:	20000234 	.word	0x20000234
 8003f00:	0800d738 	.word	0x0800d738
 8003f04:	20000250 	.word	0x20000250
 8003f08:	0800d060 	.word	0x0800d060
 8003f0c:	0800d074 	.word	0x0800d074
 8003f10:	0800d0c0 	.word	0x0800d0c0
 8003f14:	0800d0d4 	.word	0x0800d0d4
 8003f18:	20000254 	.word	0x20000254
 8003f1c:	0800d74c 	.word	0x0800d74c
 8003f20:	20000252 	.word	0x20000252
			} else if(dilSecim == 1) {
 8003f24:	4b71      	ldr	r3, [pc, #452]	; (80040ec <menu+0x3048>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d104      	bne.n	8003f36 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003f2c:	4a70      	ldr	r2, [pc, #448]	; (80040f0 <menu+0x304c>)
 8003f2e:	2101      	movs	r1, #1
 8003f30:	2002      	movs	r0, #2
 8003f32:	f003 fda3 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f36:	2102      	movs	r1, #2
 8003f38:	486e      	ldr	r0, [pc, #440]	; (80040f4 <menu+0x3050>)
 8003f3a:	f005 f8c5 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d115      	bne.n	8003f70 <menu+0x2ecc>
 8003f44:	4b6c      	ldr	r3, [pc, #432]	; (80040f8 <menu+0x3054>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f083 0301 	eor.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00e      	beq.n	8003f70 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8003f52:	4b6a      	ldr	r3, [pc, #424]	; (80040fc <menu+0x3058>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	3301      	adds	r3, #1
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4b68      	ldr	r3, [pc, #416]	; (80040fc <menu+0x3058>)
 8003f5c:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003f5e:	4b67      	ldr	r3, [pc, #412]	; (80040fc <menu+0x3058>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d902      	bls.n	8003f6c <menu+0x2ec8>
				demoMode = 0;
 8003f66:	4b65      	ldr	r3, [pc, #404]	; (80040fc <menu+0x3058>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f6c:	f000 fc92 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f70:	2104      	movs	r1, #4
 8003f72:	4860      	ldr	r0, [pc, #384]	; (80040f4 <menu+0x3050>)
 8003f74:	f005 f8a8 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d115      	bne.n	8003faa <menu+0x2f06>
 8003f7e:	4b5e      	ldr	r3, [pc, #376]	; (80040f8 <menu+0x3054>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	f083 0301 	eor.w	r3, r3, #1
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <menu+0x2f06>
			demoMode = demoMode - 1;
 8003f8c:	4b5b      	ldr	r3, [pc, #364]	; (80040fc <menu+0x3058>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	4b59      	ldr	r3, [pc, #356]	; (80040fc <menu+0x3058>)
 8003f96:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003f98:	4b58      	ldr	r3, [pc, #352]	; (80040fc <menu+0x3058>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <menu+0x2f02>
		   		demoMode = 1;
 8003fa0:	4b56      	ldr	r3, [pc, #344]	; (80040fc <menu+0x3058>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fa6:	f000 fc75 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003faa:	2108      	movs	r1, #8
 8003fac:	4851      	ldr	r0, [pc, #324]	; (80040f4 <menu+0x3050>)
 8003fae:	f005 f88b 	bl	80090c8 <HAL_GPIO_ReadPin>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d10d      	bne.n	8003fd4 <menu+0x2f30>
 8003fb8:	4b4f      	ldr	r3, [pc, #316]	; (80040f8 <menu+0x3054>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	f083 0301 	eor.w	r3, r3, #1
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d006      	beq.n	8003fd4 <menu+0x2f30>
			eepromData[26] = demoMode;
 8003fc6:	4b4d      	ldr	r3, [pc, #308]	; (80040fc <menu+0x3058>)
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	4b4d      	ldr	r3, [pc, #308]	; (8004100 <menu+0x305c>)
 8003fcc:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003fce:	4b4d      	ldr	r3, [pc, #308]	; (8004104 <menu+0x3060>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003fd4:	4b4c      	ldr	r3, [pc, #304]	; (8004108 <menu+0x3064>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b1d      	cmp	r3, #29
 8003fda:	f040 8132 	bne.w	8004242 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8003fde:	4b4b      	ldr	r3, [pc, #300]	; (800410c <menu+0x3068>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d113      	bne.n	800400e <menu+0x2f6a>
 8003fe6:	4b4a      	ldr	r3, [pc, #296]	; (8004110 <menu+0x306c>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10f      	bne.n	800400e <menu+0x2f6a>
 8003fee:	4b49      	ldr	r3, [pc, #292]	; (8004114 <menu+0x3070>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10b      	bne.n	800400e <menu+0x2f6a>
 8003ff6:	4b48      	ldr	r3, [pc, #288]	; (8004118 <menu+0x3074>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d107      	bne.n	800400e <menu+0x2f6a>
 8003ffe:	4b47      	ldr	r3, [pc, #284]	; (800411c <menu+0x3078>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d103      	bne.n	800400e <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004006:	4b46      	ldr	r3, [pc, #280]	; (8004120 <menu+0x307c>)
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	e002      	b.n	8004014 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800400e:	4b44      	ldr	r3, [pc, #272]	; (8004120 <menu+0x307c>)
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004014:	4b43      	ldr	r3, [pc, #268]	; (8004124 <menu+0x3080>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d154      	bne.n	80040c6 <menu+0x3022>
			if(dilSecim == 0) {
 800401c:	4b33      	ldr	r3, [pc, #204]	; (80040ec <menu+0x3048>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d105      	bne.n	8004030 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004024:	4a40      	ldr	r2, [pc, #256]	; (8004128 <menu+0x3084>)
 8004026:	2101      	movs	r1, #1
 8004028:	2001      	movs	r0, #1
 800402a:	f003 fd27 	bl	8007a7c <lcd_print>
 800402e:	e008      	b.n	8004042 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004030:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <menu+0x3048>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d104      	bne.n	8004042 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004038:	4a3c      	ldr	r2, [pc, #240]	; (800412c <menu+0x3088>)
 800403a:	2101      	movs	r1, #1
 800403c:	2001      	movs	r0, #1
 800403e:	f003 fd1d 	bl	8007a7c <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004042:	4b36      	ldr	r3, [pc, #216]	; (800411c <menu+0x3078>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	220a      	movs	r2, #10
 8004048:	4939      	ldr	r1, [pc, #228]	; (8004130 <menu+0x308c>)
 800404a:	4618      	mov	r0, r3
 800404c:	f008 f892 	bl	800c174 <itoa>
			lcd_print(2, 12, snum);
 8004050:	4a37      	ldr	r2, [pc, #220]	; (8004130 <menu+0x308c>)
 8004052:	210c      	movs	r1, #12
 8004054:	2002      	movs	r0, #2
 8004056:	f003 fd11 	bl	8007a7c <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800405a:	4b2f      	ldr	r3, [pc, #188]	; (8004118 <menu+0x3074>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	220a      	movs	r2, #10
 8004060:	4933      	ldr	r1, [pc, #204]	; (8004130 <menu+0x308c>)
 8004062:	4618      	mov	r0, r3
 8004064:	f008 f886 	bl	800c174 <itoa>
			lcd_print(2, 13, snum);
 8004068:	4a31      	ldr	r2, [pc, #196]	; (8004130 <menu+0x308c>)
 800406a:	210d      	movs	r1, #13
 800406c:	2002      	movs	r0, #2
 800406e:	f003 fd05 	bl	8007a7c <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004072:	4b28      	ldr	r3, [pc, #160]	; (8004114 <menu+0x3070>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	220a      	movs	r2, #10
 8004078:	492d      	ldr	r1, [pc, #180]	; (8004130 <menu+0x308c>)
 800407a:	4618      	mov	r0, r3
 800407c:	f008 f87a 	bl	800c174 <itoa>
			lcd_print(2, 14, snum);
 8004080:	4a2b      	ldr	r2, [pc, #172]	; (8004130 <menu+0x308c>)
 8004082:	210e      	movs	r1, #14
 8004084:	2002      	movs	r0, #2
 8004086:	f003 fcf9 	bl	8007a7c <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800408a:	4b21      	ldr	r3, [pc, #132]	; (8004110 <menu+0x306c>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	220a      	movs	r2, #10
 8004090:	4927      	ldr	r1, [pc, #156]	; (8004130 <menu+0x308c>)
 8004092:	4618      	mov	r0, r3
 8004094:	f008 f86e 	bl	800c174 <itoa>
			lcd_print(2, 15, snum);
 8004098:	4a25      	ldr	r2, [pc, #148]	; (8004130 <menu+0x308c>)
 800409a:	210f      	movs	r1, #15
 800409c:	2002      	movs	r0, #2
 800409e:	f003 fced 	bl	8007a7c <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80040a2:	4b1a      	ldr	r3, [pc, #104]	; (800410c <menu+0x3068>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	220a      	movs	r2, #10
 80040a8:	4921      	ldr	r1, [pc, #132]	; (8004130 <menu+0x308c>)
 80040aa:	4618      	mov	r0, r3
 80040ac:	f008 f862 	bl	800c174 <itoa>
			lcd_print(2, 16, snum);
 80040b0:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <menu+0x308c>)
 80040b2:	2110      	movs	r1, #16
 80040b4:	2002      	movs	r0, #2
 80040b6:	f003 fce1 	bl	8007a7c <lcd_print>

			lcd_print(2, 1, "           ");
 80040ba:	4a1e      	ldr	r2, [pc, #120]	; (8004134 <menu+0x3090>)
 80040bc:	2101      	movs	r1, #1
 80040be:	2002      	movs	r0, #2
 80040c0:	f003 fcdc 	bl	8007a7c <lcd_print>
 80040c4:	e048      	b.n	8004158 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80040c6:	4b17      	ldr	r3, [pc, #92]	; (8004124 <menu+0x3080>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d144      	bne.n	8004158 <menu+0x30b4>
			if(dilSecim == 0) {
 80040ce:	4b07      	ldr	r3, [pc, #28]	; (80040ec <menu+0x3048>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d132      	bne.n	800413c <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80040d6:	4a14      	ldr	r2, [pc, #80]	; (8004128 <menu+0x3084>)
 80040d8:	2101      	movs	r1, #1
 80040da:	2001      	movs	r0, #1
 80040dc:	f003 fcce 	bl	8007a7c <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80040e0:	4a15      	ldr	r2, [pc, #84]	; (8004138 <menu+0x3094>)
 80040e2:	2101      	movs	r1, #1
 80040e4:	2002      	movs	r0, #2
 80040e6:	f003 fcc9 	bl	8007a7c <lcd_print>
 80040ea:	e035      	b.n	8004158 <menu+0x30b4>
 80040ec:	20000255 	.word	0x20000255
 80040f0:	0800d0d4 	.word	0x0800d0d4
 80040f4:	40010800 	.word	0x40010800
 80040f8:	20000263 	.word	0x20000263
 80040fc:	20000252 	.word	0x20000252
 8004100:	2000012c 	.word	0x2000012c
 8004104:	20000260 	.word	0x20000260
 8004108:	20000234 	.word	0x20000234
 800410c:	20000231 	.word	0x20000231
 8004110:	20000232 	.word	0x20000232
 8004114:	20000000 	.word	0x20000000
 8004118:	20000001 	.word	0x20000001
 800411c:	20000233 	.word	0x20000233
 8004120:	20000275 	.word	0x20000275
 8004124:	20000254 	.word	0x20000254
 8004128:	0800d75c 	.word	0x0800d75c
 800412c:	0800d770 	.word	0x0800d770
 8004130:	2000019c 	.word	0x2000019c
 8004134:	0800d784 	.word	0x0800d784
 8004138:	0800d790 	.word	0x0800d790
			} else if(dilSecim == 1) {
 800413c:	4b94      	ldr	r3, [pc, #592]	; (8004390 <menu+0x32ec>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d109      	bne.n	8004158 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004144:	4a93      	ldr	r2, [pc, #588]	; (8004394 <menu+0x32f0>)
 8004146:	2101      	movs	r1, #1
 8004148:	2001      	movs	r0, #1
 800414a:	f003 fc97 	bl	8007a7c <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800414e:	4a92      	ldr	r2, [pc, #584]	; (8004398 <menu+0x32f4>)
 8004150:	2101      	movs	r1, #1
 8004152:	2002      	movs	r0, #2
 8004154:	f003 fc92 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004158:	2102      	movs	r1, #2
 800415a:	4890      	ldr	r0, [pc, #576]	; (800439c <menu+0x32f8>)
 800415c:	f004 ffb4 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d119      	bne.n	800419a <menu+0x30f6>
 8004166:	4b8e      	ldr	r3, [pc, #568]	; (80043a0 <menu+0x32fc>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	f083 0301 	eor.w	r3, r3, #1
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d012      	beq.n	800419a <menu+0x30f6>
 8004174:	4b8b      	ldr	r3, [pc, #556]	; (80043a4 <menu+0x3300>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00e      	beq.n	800419a <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 800417c:	4b8a      	ldr	r3, [pc, #552]	; (80043a8 <menu+0x3304>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	b2da      	uxtb	r2, r3
 8004184:	4b88      	ldr	r3, [pc, #544]	; (80043a8 <menu+0x3304>)
 8004186:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004188:	4b87      	ldr	r3, [pc, #540]	; (80043a8 <menu+0x3304>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d902      	bls.n	8004196 <menu+0x30f2>
				calismaSayModu = 0;
 8004190:	4b85      	ldr	r3, [pc, #532]	; (80043a8 <menu+0x3304>)
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004196:	f000 fb7d 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800419a:	2104      	movs	r1, #4
 800419c:	487f      	ldr	r0, [pc, #508]	; (800439c <menu+0x32f8>)
 800419e:	f004 ff93 	bl	80090c8 <HAL_GPIO_ReadPin>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d119      	bne.n	80041dc <menu+0x3138>
 80041a8:	4b7d      	ldr	r3, [pc, #500]	; (80043a0 <menu+0x32fc>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	f083 0301 	eor.w	r3, r3, #1
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d012      	beq.n	80041dc <menu+0x3138>
 80041b6:	4b7b      	ldr	r3, [pc, #492]	; (80043a4 <menu+0x3300>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00e      	beq.n	80041dc <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80041be:	4b7a      	ldr	r3, [pc, #488]	; (80043a8 <menu+0x3304>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	4b78      	ldr	r3, [pc, #480]	; (80043a8 <menu+0x3304>)
 80041c8:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80041ca:	4b77      	ldr	r3, [pc, #476]	; (80043a8 <menu+0x3304>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <menu+0x3134>
		   		calismaSayModu = 1;
 80041d2:	4b75      	ldr	r3, [pc, #468]	; (80043a8 <menu+0x3304>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80041d8:	f000 fb5c 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80041dc:	2108      	movs	r1, #8
 80041de:	486f      	ldr	r0, [pc, #444]	; (800439c <menu+0x32f8>)
 80041e0:	f004 ff72 	bl	80090c8 <HAL_GPIO_ReadPin>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d12b      	bne.n	8004242 <menu+0x319e>
 80041ea:	4b6d      	ldr	r3, [pc, #436]	; (80043a0 <menu+0x32fc>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	f083 0301 	eor.w	r3, r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d024      	beq.n	8004242 <menu+0x319e>
			eepromData[32] = 0;
 80041f8:	4b6c      	ldr	r3, [pc, #432]	; (80043ac <menu+0x3308>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004200:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <menu+0x3308>)
 8004202:	2200      	movs	r2, #0
 8004204:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004206:	4b69      	ldr	r3, [pc, #420]	; (80043ac <menu+0x3308>)
 8004208:	2200      	movs	r2, #0
 800420a:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 800420c:	4b67      	ldr	r3, [pc, #412]	; (80043ac <menu+0x3308>)
 800420e:	2200      	movs	r2, #0
 8004210:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004212:	4b66      	ldr	r3, [pc, #408]	; (80043ac <menu+0x3308>)
 8004214:	2200      	movs	r2, #0
 8004216:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004218:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <menu+0x330c>)
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800421e:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <menu+0x3310>)
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004224:	4b64      	ldr	r3, [pc, #400]	; (80043b8 <menu+0x3314>)
 8004226:	2200      	movs	r2, #0
 8004228:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800422a:	4b64      	ldr	r3, [pc, #400]	; (80043bc <menu+0x3318>)
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004230:	4b63      	ldr	r3, [pc, #396]	; (80043c0 <menu+0x331c>)
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004236:	4b5c      	ldr	r3, [pc, #368]	; (80043a8 <menu+0x3304>)
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 800423c:	4b61      	ldr	r3, [pc, #388]	; (80043c4 <menu+0x3320>)
 800423e:	2201      	movs	r2, #1
 8004240:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004242:	4b61      	ldr	r3, [pc, #388]	; (80043c8 <menu+0x3324>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b1e      	cmp	r3, #30
 8004248:	d16f      	bne.n	800432a <menu+0x3286>
		calismaSayModu = 0;
 800424a:	4b57      	ldr	r3, [pc, #348]	; (80043a8 <menu+0x3304>)
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004250:	4b4f      	ldr	r3, [pc, #316]	; (8004390 <menu+0x32ec>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004258:	4a5c      	ldr	r2, [pc, #368]	; (80043cc <menu+0x3328>)
 800425a:	2101      	movs	r1, #1
 800425c:	2001      	movs	r0, #1
 800425e:	f003 fc0d 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004262:	4a5b      	ldr	r2, [pc, #364]	; (80043d0 <menu+0x332c>)
 8004264:	2101      	movs	r1, #1
 8004266:	2002      	movs	r0, #2
 8004268:	f003 fc08 	bl	8007a7c <lcd_print>
 800426c:	e00d      	b.n	800428a <menu+0x31e6>
		} else if(dilSecim == 1) {
 800426e:	4b48      	ldr	r3, [pc, #288]	; (8004390 <menu+0x32ec>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d109      	bne.n	800428a <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004276:	4a57      	ldr	r2, [pc, #348]	; (80043d4 <menu+0x3330>)
 8004278:	2101      	movs	r1, #1
 800427a:	2001      	movs	r0, #1
 800427c:	f003 fbfe 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004280:	4a55      	ldr	r2, [pc, #340]	; (80043d8 <menu+0x3334>)
 8004282:	2101      	movs	r1, #1
 8004284:	2002      	movs	r0, #2
 8004286:	f003 fbf9 	bl	8007a7c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800428a:	2102      	movs	r1, #2
 800428c:	4843      	ldr	r0, [pc, #268]	; (800439c <menu+0x32f8>)
 800428e:	f004 ff1b 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004292:	4603      	mov	r3, r0
 8004294:	2b01      	cmp	r3, #1
 8004296:	d115      	bne.n	80042c4 <menu+0x3220>
 8004298:	4b41      	ldr	r3, [pc, #260]	; (80043a0 <menu+0x32fc>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	f083 0301 	eor.w	r3, r3, #1
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00e      	beq.n	80042c4 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80042a6:	4b3a      	ldr	r3, [pc, #232]	; (8004390 <menu+0x32ec>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	3301      	adds	r3, #1
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4b38      	ldr	r3, [pc, #224]	; (8004390 <menu+0x32ec>)
 80042b0:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80042b2:	4b37      	ldr	r3, [pc, #220]	; (8004390 <menu+0x32ec>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d902      	bls.n	80042c0 <menu+0x321c>
				dilSecim = 0;
 80042ba:	4b35      	ldr	r3, [pc, #212]	; (8004390 <menu+0x32ec>)
 80042bc:	2200      	movs	r2, #0
 80042be:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80042c0:	f000 fae8 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80042c4:	2104      	movs	r1, #4
 80042c6:	4835      	ldr	r0, [pc, #212]	; (800439c <menu+0x32f8>)
 80042c8:	f004 fefe 	bl	80090c8 <HAL_GPIO_ReadPin>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d115      	bne.n	80042fe <menu+0x325a>
 80042d2:	4b33      	ldr	r3, [pc, #204]	; (80043a0 <menu+0x32fc>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	f083 0301 	eor.w	r3, r3, #1
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00e      	beq.n	80042fe <menu+0x325a>
			dilSecim = dilSecim - 1;
 80042e0:	4b2b      	ldr	r3, [pc, #172]	; (8004390 <menu+0x32ec>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	4b29      	ldr	r3, [pc, #164]	; (8004390 <menu+0x32ec>)
 80042ea:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80042ec:	4b28      	ldr	r3, [pc, #160]	; (8004390 <menu+0x32ec>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <menu+0x3256>
		   		dilSecim = 1;
 80042f4:	4b26      	ldr	r3, [pc, #152]	; (8004390 <menu+0x32ec>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80042fa:	f000 facb 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042fe:	2108      	movs	r1, #8
 8004300:	4826      	ldr	r0, [pc, #152]	; (800439c <menu+0x32f8>)
 8004302:	f004 fee1 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004306:	4603      	mov	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	d10e      	bne.n	800432a <menu+0x3286>
 800430c:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <menu+0x32fc>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	f083 0301 	eor.w	r3, r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <menu+0x3286>
			eepromData[33] = dilSecim;
 800431a:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <menu+0x32ec>)
 800431c:	781a      	ldrb	r2, [r3, #0]
 800431e:	4b23      	ldr	r3, [pc, #140]	; (80043ac <menu+0x3308>)
 8004320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004324:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <menu+0x3320>)
 8004326:	2201      	movs	r2, #1
 8004328:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800432a:	4b27      	ldr	r3, [pc, #156]	; (80043c8 <menu+0x3324>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b1f      	cmp	r3, #31
 8004330:	f040 80b7 	bne.w	80044a2 <menu+0x33fe>
		calismaSayModu = 0;
 8004334:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <menu+0x3304>)
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800433a:	4a28      	ldr	r2, [pc, #160]	; (80043dc <menu+0x3338>)
 800433c:	2101      	movs	r1, #1
 800433e:	2001      	movs	r0, #1
 8004340:	f003 fb9c 	bl	8007a7c <lcd_print>

		if(iotMode == 0) {
 8004344:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <menu+0x333c>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d113      	bne.n	8004374 <menu+0x32d0>
			if(dilSecim == 0) {
 800434c:	4b10      	ldr	r3, [pc, #64]	; (8004390 <menu+0x32ec>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004354:	4a23      	ldr	r2, [pc, #140]	; (80043e4 <menu+0x3340>)
 8004356:	2101      	movs	r1, #1
 8004358:	2002      	movs	r0, #2
 800435a:	f003 fb8f 	bl	8007a7c <lcd_print>
 800435e:	e050      	b.n	8004402 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <menu+0x32ec>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d14c      	bne.n	8004402 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004368:	4a1f      	ldr	r2, [pc, #124]	; (80043e8 <menu+0x3344>)
 800436a:	2101      	movs	r1, #1
 800436c:	2002      	movs	r0, #2
 800436e:	f003 fb85 	bl	8007a7c <lcd_print>
 8004372:	e046      	b.n	8004402 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004374:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <menu+0x333c>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d142      	bne.n	8004402 <menu+0x335e>
			if(dilSecim == 0) {
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <menu+0x32ec>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d135      	bne.n	80043f0 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004384:	4a19      	ldr	r2, [pc, #100]	; (80043ec <menu+0x3348>)
 8004386:	2101      	movs	r1, #1
 8004388:	2002      	movs	r0, #2
 800438a:	f003 fb77 	bl	8007a7c <lcd_print>
 800438e:	e038      	b.n	8004402 <menu+0x335e>
 8004390:	20000255 	.word	0x20000255
 8004394:	0800d770 	.word	0x0800d770
 8004398:	0800d7a4 	.word	0x0800d7a4
 800439c:	40010800 	.word	0x40010800
 80043a0:	20000263 	.word	0x20000263
 80043a4:	20000275 	.word	0x20000275
 80043a8:	20000254 	.word	0x20000254
 80043ac:	2000012c 	.word	0x2000012c
 80043b0:	20000233 	.word	0x20000233
 80043b4:	20000001 	.word	0x20000001
 80043b8:	20000000 	.word	0x20000000
 80043bc:	20000232 	.word	0x20000232
 80043c0:	20000231 	.word	0x20000231
 80043c4:	20000260 	.word	0x20000260
 80043c8:	20000234 	.word	0x20000234
 80043cc:	0800d7b8 	.word	0x0800d7b8
 80043d0:	0800d7cc 	.word	0x0800d7cc
 80043d4:	0800d7e0 	.word	0x0800d7e0
 80043d8:	0800d7f4 	.word	0x0800d7f4
 80043dc:	0800d808 	.word	0x0800d808
 80043e0:	20000253 	.word	0x20000253
 80043e4:	0800d060 	.word	0x0800d060
 80043e8:	0800d074 	.word	0x0800d074
 80043ec:	0800d0c0 	.word	0x0800d0c0
			} else if(dilSecim == 1) {
 80043f0:	4b34      	ldr	r3, [pc, #208]	; (80044c4 <menu+0x3420>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d104      	bne.n	8004402 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80043f8:	4a33      	ldr	r2, [pc, #204]	; (80044c8 <menu+0x3424>)
 80043fa:	2101      	movs	r1, #1
 80043fc:	2002      	movs	r0, #2
 80043fe:	f003 fb3d 	bl	8007a7c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004402:	2102      	movs	r1, #2
 8004404:	4831      	ldr	r0, [pc, #196]	; (80044cc <menu+0x3428>)
 8004406:	f004 fe5f 	bl	80090c8 <HAL_GPIO_ReadPin>
 800440a:	4603      	mov	r3, r0
 800440c:	2b01      	cmp	r3, #1
 800440e:	d115      	bne.n	800443c <menu+0x3398>
 8004410:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <menu+0x342c>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	f083 0301 	eor.w	r3, r3, #1
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00e      	beq.n	800443c <menu+0x3398>
			iotMode = iotMode + 1;
 800441e:	4b2d      	ldr	r3, [pc, #180]	; (80044d4 <menu+0x3430>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	3301      	adds	r3, #1
 8004424:	b2da      	uxtb	r2, r3
 8004426:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <menu+0x3430>)
 8004428:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800442a:	4b2a      	ldr	r3, [pc, #168]	; (80044d4 <menu+0x3430>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d902      	bls.n	8004438 <menu+0x3394>
				iotMode = 0;
 8004432:	4b28      	ldr	r3, [pc, #160]	; (80044d4 <menu+0x3430>)
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004438:	f000 fa2c 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800443c:	2104      	movs	r1, #4
 800443e:	4823      	ldr	r0, [pc, #140]	; (80044cc <menu+0x3428>)
 8004440:	f004 fe42 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004444:	4603      	mov	r3, r0
 8004446:	2b01      	cmp	r3, #1
 8004448:	d115      	bne.n	8004476 <menu+0x33d2>
 800444a:	4b21      	ldr	r3, [pc, #132]	; (80044d0 <menu+0x342c>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	f083 0301 	eor.w	r3, r3, #1
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00e      	beq.n	8004476 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004458:	4b1e      	ldr	r3, [pc, #120]	; (80044d4 <menu+0x3430>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	3b01      	subs	r3, #1
 800445e:	b2da      	uxtb	r2, r3
 8004460:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <menu+0x3430>)
 8004462:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <menu+0x3430>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <menu+0x33ce>
		   		iotMode = 1;
 800446c:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <menu+0x3430>)
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004472:	f000 fa0f 	bl	8004894 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004476:	2108      	movs	r1, #8
 8004478:	4814      	ldr	r0, [pc, #80]	; (80044cc <menu+0x3428>)
 800447a:	f004 fe25 	bl	80090c8 <HAL_GPIO_ReadPin>
 800447e:	4603      	mov	r3, r0
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10e      	bne.n	80044a2 <menu+0x33fe>
 8004484:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <menu+0x342c>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	f083 0301 	eor.w	r3, r3, #1
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <menu+0x3430>)
 8004494:	781a      	ldrb	r2, [r3, #0]
 8004496:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <menu+0x3434>)
 8004498:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <menu+0x3438>)
 800449e:	2201      	movs	r2, #1
 80044a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80044a2:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <menu+0x343c>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d172      	bne.n	8004590 <menu+0x34ec>
		calismaSayModu = 0;
 80044aa:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <menu+0x3440>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80044b0:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <menu+0x3420>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d119      	bne.n	80044ec <menu+0x3448>
			lcd_print(1, 1, "MAKINE ID       ");
 80044b8:	4a0b      	ldr	r2, [pc, #44]	; (80044e8 <menu+0x3444>)
 80044ba:	2101      	movs	r1, #1
 80044bc:	2001      	movs	r0, #1
 80044be:	f003 fadd 	bl	8007a7c <lcd_print>
 80044c2:	e018      	b.n	80044f6 <menu+0x3452>
 80044c4:	20000255 	.word	0x20000255
 80044c8:	0800d0d4 	.word	0x0800d0d4
 80044cc:	40010800 	.word	0x40010800
 80044d0:	20000263 	.word	0x20000263
 80044d4:	20000253 	.word	0x20000253
 80044d8:	2000012c 	.word	0x2000012c
 80044dc:	20000260 	.word	0x20000260
 80044e0:	20000234 	.word	0x20000234
 80044e4:	20000254 	.word	0x20000254
 80044e8:	0800d81c 	.word	0x0800d81c
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80044ec:	4aa6      	ldr	r2, [pc, #664]	; (8004788 <menu+0x36e4>)
 80044ee:	2101      	movs	r1, #1
 80044f0:	2001      	movs	r0, #1
 80044f2:	f003 fac3 	bl	8007a7c <lcd_print>
		}

		lcd_print(2, 1, machineID);
 80044f6:	4aa5      	ldr	r2, [pc, #660]	; (800478c <menu+0x36e8>)
 80044f8:	2101      	movs	r1, #1
 80044fa:	2002      	movs	r0, #2
 80044fc:	f003 fabe 	bl	8007a7c <lcd_print>
		lcd_print(2, 13, "    ");
 8004500:	4aa3      	ldr	r2, [pc, #652]	; (8004790 <menu+0x36ec>)
 8004502:	210d      	movs	r1, #13
 8004504:	2002      	movs	r0, #2
 8004506:	f003 fab9 	bl	8007a7c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800450a:	2102      	movs	r1, #2
 800450c:	48a1      	ldr	r0, [pc, #644]	; (8004794 <menu+0x36f0>)
 800450e:	f004 fddb 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004512:	4603      	mov	r3, r0
 8004514:	2b01      	cmp	r3, #1
 8004516:	d13b      	bne.n	8004590 <menu+0x34ec>
 8004518:	2104      	movs	r1, #4
 800451a:	489e      	ldr	r0, [pc, #632]	; (8004794 <menu+0x36f0>)
 800451c:	f004 fdd4 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004520:	4603      	mov	r3, r0
 8004522:	2b01      	cmp	r3, #1
 8004524:	d134      	bne.n	8004590 <menu+0x34ec>
 8004526:	4b9c      	ldr	r3, [pc, #624]	; (8004798 <menu+0x36f4>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	f083 0301 	eor.w	r3, r3, #1
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d02d      	beq.n	8004590 <menu+0x34ec>
			takeMachineID();
 8004534:	f002 faba 	bl	8006aac <takeMachineID>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004538:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800453c:	9302      	str	r3, [sp, #8]
 800453e:	236e      	movs	r3, #110	; 0x6e
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	4b96      	ldr	r3, [pc, #600]	; (800479c <menu+0x36f8>)
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	236e      	movs	r3, #110	; 0x6e
 8004548:	2200      	movs	r2, #0
 800454a:	21a0      	movs	r1, #160	; 0xa0
 800454c:	4894      	ldr	r0, [pc, #592]	; (80047a0 <menu+0x36fc>)
 800454e:	f005 f96f 	bl	8009830 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 8004552:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004556:	f003 ffe7 	bl	8008528 <HAL_Delay>
			memcpy(machineIDInt, &eepromData[idStartPos], 12);
 800455a:	4b92      	ldr	r3, [pc, #584]	; (80047a4 <menu+0x3700>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a8f      	ldr	r2, [pc, #572]	; (800479c <menu+0x36f8>)
 8004560:	441a      	add	r2, r3
 8004562:	4b91      	ldr	r3, [pc, #580]	; (80047a8 <menu+0x3704>)
 8004564:	6810      	ldr	r0, [r2, #0]
 8004566:	6851      	ldr	r1, [r2, #4]
 8004568:	6892      	ldr	r2, [r2, #8]
 800456a:	6018      	str	r0, [r3, #0]
 800456c:	6059      	str	r1, [r3, #4]
 800456e:	609a      	str	r2, [r3, #8]
			convertArrays(1);
 8004570:	2001      	movs	r0, #1
 8004572:	f7fc f917 	bl	80007a4 <convertArrays>

			HAL_Delay(250);
 8004576:	20fa      	movs	r0, #250	; 0xfa
 8004578:	f003 ffd6 	bl	8008528 <HAL_Delay>
			lcd_print(2, 1, machineID);
 800457c:	4a83      	ldr	r2, [pc, #524]	; (800478c <menu+0x36e8>)
 800457e:	2101      	movs	r1, #1
 8004580:	2002      	movs	r0, #2
 8004582:	f003 fa7b 	bl	8007a7c <lcd_print>
			lcd_print(2, 13, "    ");
 8004586:	4a82      	ldr	r2, [pc, #520]	; (8004790 <menu+0x36ec>)
 8004588:	210d      	movs	r1, #13
 800458a:	2002      	movs	r0, #2
 800458c:	f003 fa76 	bl	8007a7c <lcd_print>
		}
	}

	if (menuSayac == 33) {
 8004590:	4b86      	ldr	r3, [pc, #536]	; (80047ac <menu+0x3708>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b21      	cmp	r3, #33	; 0x21
 8004596:	d14e      	bne.n	8004636 <menu+0x3592>
		calismaSayModu = 0;
 8004598:	4b85      	ldr	r3, [pc, #532]	; (80047b0 <menu+0x370c>)
 800459a:	2200      	movs	r2, #0
 800459c:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 800459e:	4885      	ldr	r0, [pc, #532]	; (80047b4 <menu+0x3710>)
 80045a0:	f7fb fe40 	bl	8000224 <strlen>
 80045a4:	4603      	mov	r3, r0
 80045a6:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 80045a8:	4a83      	ldr	r2, [pc, #524]	; (80047b8 <menu+0x3714>)
 80045aa:	2101      	movs	r1, #1
 80045ac:	2001      	movs	r0, #1
 80045ae:	f003 fa65 	bl	8007a7c <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
		} else {
			slideText(wifiSSID, 1, 2, 0);
		}*/

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045b2:	2102      	movs	r1, #2
 80045b4:	4877      	ldr	r0, [pc, #476]	; (8004794 <menu+0x36f0>)
 80045b6:	f004 fd87 	bl	80090c8 <HAL_GPIO_ReadPin>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d13a      	bne.n	8004636 <menu+0x3592>
 80045c0:	2104      	movs	r1, #4
 80045c2:	4874      	ldr	r0, [pc, #464]	; (8004794 <menu+0x36f0>)
 80045c4:	f004 fd80 	bl	80090c8 <HAL_GPIO_ReadPin>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d133      	bne.n	8004636 <menu+0x3592>
 80045ce:	4b72      	ldr	r3, [pc, #456]	; (8004798 <menu+0x36f4>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	f083 0301 	eor.w	r3, r3, #1
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d02c      	beq.n	8004636 <menu+0x3592>
			takeWifiSSID();
 80045dc:	f002 fbf4 	bl	8006dc8 <takeWifiSSID>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80045e0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80045e4:	9302      	str	r3, [sp, #8]
 80045e6:	236e      	movs	r3, #110	; 0x6e
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	4b6c      	ldr	r3, [pc, #432]	; (800479c <menu+0x36f8>)
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	236e      	movs	r3, #110	; 0x6e
 80045f0:	2200      	movs	r2, #0
 80045f2:	21a0      	movs	r1, #160	; 0xa0
 80045f4:	486a      	ldr	r0, [pc, #424]	; (80047a0 <menu+0x36fc>)
 80045f6:	f005 f91b 	bl	8009830 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 80045fa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80045fe:	f003 ff93 	bl	8008528 <HAL_Delay>
			memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
 8004602:	4b6e      	ldr	r3, [pc, #440]	; (80047bc <menu+0x3718>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a65      	ldr	r2, [pc, #404]	; (800479c <menu+0x36f8>)
 8004608:	441a      	add	r2, r3
 800460a:	4b6d      	ldr	r3, [pc, #436]	; (80047c0 <menu+0x371c>)
 800460c:	6811      	ldr	r1, [r2, #0]
 800460e:	6855      	ldr	r5, [r2, #4]
 8004610:	6894      	ldr	r4, [r2, #8]
 8004612:	68d0      	ldr	r0, [r2, #12]
 8004614:	6019      	str	r1, [r3, #0]
 8004616:	605d      	str	r5, [r3, #4]
 8004618:	609c      	str	r4, [r3, #8]
 800461a:	60d8      	str	r0, [r3, #12]
 800461c:	6911      	ldr	r1, [r2, #16]
 800461e:	6119      	str	r1, [r3, #16]
			convertArrays(2);
 8004620:	2002      	movs	r0, #2
 8004622:	f7fc f8bf 	bl	80007a4 <convertArrays>

			HAL_Delay(250);
 8004626:	20fa      	movs	r0, #250	; 0xfa
 8004628:	f003 ff7e 	bl	8008528 <HAL_Delay>
			lcd_print(2, 1, wifiSSID);
 800462c:	4a61      	ldr	r2, [pc, #388]	; (80047b4 <menu+0x3710>)
 800462e:	2101      	movs	r1, #1
 8004630:	2002      	movs	r0, #2
 8004632:	f003 fa23 	bl	8007a7c <lcd_print>
			//lcd_print(2, 1+strlen(wifiSSID), emptyArray);
		}
	}

	if (menuSayac == 34) {
 8004636:	4b5d      	ldr	r3, [pc, #372]	; (80047ac <menu+0x3708>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b22      	cmp	r3, #34	; 0x22
 800463c:	d14e      	bne.n	80046dc <menu+0x3638>
		calismaSayModu = 0;
 800463e:	4b5c      	ldr	r3, [pc, #368]	; (80047b0 <menu+0x370c>)
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 8004644:	485f      	ldr	r0, [pc, #380]	; (80047c4 <menu+0x3720>)
 8004646:	f7fb fded 	bl	8000224 <strlen>
 800464a:	4603      	mov	r3, r0
 800464c:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 800464e:	4a5e      	ldr	r2, [pc, #376]	; (80047c8 <menu+0x3724>)
 8004650:	2101      	movs	r1, #1
 8004652:	2001      	movs	r0, #1
 8004654:	f003 fa12 	bl	8007a7c <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
		} else {
			slideText(wifiPass, 1, 2, 1);
		}*/

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004658:	2102      	movs	r1, #2
 800465a:	484e      	ldr	r0, [pc, #312]	; (8004794 <menu+0x36f0>)
 800465c:	f004 fd34 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004660:	4603      	mov	r3, r0
 8004662:	2b01      	cmp	r3, #1
 8004664:	d13a      	bne.n	80046dc <menu+0x3638>
 8004666:	2104      	movs	r1, #4
 8004668:	484a      	ldr	r0, [pc, #296]	; (8004794 <menu+0x36f0>)
 800466a:	f004 fd2d 	bl	80090c8 <HAL_GPIO_ReadPin>
 800466e:	4603      	mov	r3, r0
 8004670:	2b01      	cmp	r3, #1
 8004672:	d133      	bne.n	80046dc <menu+0x3638>
 8004674:	4b48      	ldr	r3, [pc, #288]	; (8004798 <menu+0x36f4>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	f083 0301 	eor.w	r3, r3, #1
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d02c      	beq.n	80046dc <menu+0x3638>
			takeWifiPass();
 8004682:	f002 fd55 	bl	8007130 <takeWifiPass>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004686:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800468a:	9302      	str	r3, [sp, #8]
 800468c:	236e      	movs	r3, #110	; 0x6e
 800468e:	9301      	str	r3, [sp, #4]
 8004690:	4b42      	ldr	r3, [pc, #264]	; (800479c <menu+0x36f8>)
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	236e      	movs	r3, #110	; 0x6e
 8004696:	2200      	movs	r2, #0
 8004698:	21a0      	movs	r1, #160	; 0xa0
 800469a:	4841      	ldr	r0, [pc, #260]	; (80047a0 <menu+0x36fc>)
 800469c:	f005 f8c8 	bl	8009830 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 80046a0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80046a4:	f003 ff40 	bl	8008528 <HAL_Delay>
			memcpy(wifiPassInt, &eepromData[passStartPos], 20);
 80046a8:	4b48      	ldr	r3, [pc, #288]	; (80047cc <menu+0x3728>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a3b      	ldr	r2, [pc, #236]	; (800479c <menu+0x36f8>)
 80046ae:	441a      	add	r2, r3
 80046b0:	4b47      	ldr	r3, [pc, #284]	; (80047d0 <menu+0x372c>)
 80046b2:	6811      	ldr	r1, [r2, #0]
 80046b4:	6855      	ldr	r5, [r2, #4]
 80046b6:	6894      	ldr	r4, [r2, #8]
 80046b8:	68d0      	ldr	r0, [r2, #12]
 80046ba:	6019      	str	r1, [r3, #0]
 80046bc:	605d      	str	r5, [r3, #4]
 80046be:	609c      	str	r4, [r3, #8]
 80046c0:	60d8      	str	r0, [r3, #12]
 80046c2:	6911      	ldr	r1, [r2, #16]
 80046c4:	6119      	str	r1, [r3, #16]
			convertArrays(3);
 80046c6:	2003      	movs	r0, #3
 80046c8:	f7fc f86c 	bl	80007a4 <convertArrays>

			HAL_Delay(250);
 80046cc:	20fa      	movs	r0, #250	; 0xfa
 80046ce:	f003 ff2b 	bl	8008528 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 80046d2:	4a3c      	ldr	r2, [pc, #240]	; (80047c4 <menu+0x3720>)
 80046d4:	2101      	movs	r1, #1
 80046d6:	2002      	movs	r0, #2
 80046d8:	f003 f9d0 	bl	8007a7c <lcd_print>
			//lcd_print(2, 1+strlen(wifiPass), emptyArray);
		}
	}

	if (menuSayac == 35) {
 80046dc:	4b33      	ldr	r3, [pc, #204]	; (80047ac <menu+0x3708>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b23      	cmp	r3, #35	; 0x23
 80046e2:	d14d      	bne.n	8004780 <menu+0x36dc>
		if(dilSecim == 0) {
 80046e4:	4b3b      	ldr	r3, [pc, #236]	; (80047d4 <menu+0x3730>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10a      	bne.n	8004702 <menu+0x365e>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 80046ec:	4a3a      	ldr	r2, [pc, #232]	; (80047d8 <menu+0x3734>)
 80046ee:	2101      	movs	r1, #1
 80046f0:	2001      	movs	r0, #1
 80046f2:	f003 f9c3 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 80046f6:	4a39      	ldr	r2, [pc, #228]	; (80047dc <menu+0x3738>)
 80046f8:	2101      	movs	r1, #1
 80046fa:	2002      	movs	r0, #2
 80046fc:	f003 f9be 	bl	8007a7c <lcd_print>
 8004700:	e00d      	b.n	800471e <menu+0x367a>
		} else if(dilSecim == 1) {
 8004702:	4b34      	ldr	r3, [pc, #208]	; (80047d4 <menu+0x3730>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d109      	bne.n	800471e <menu+0x367a>
			lcd_print(1, 1, " EXIT THE MENU  ");
 800470a:	4a35      	ldr	r2, [pc, #212]	; (80047e0 <menu+0x373c>)
 800470c:	2101      	movs	r1, #1
 800470e:	2001      	movs	r0, #1
 8004710:	f003 f9b4 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004714:	4a33      	ldr	r2, [pc, #204]	; (80047e4 <menu+0x3740>)
 8004716:	2101      	movs	r1, #1
 8004718:	2002      	movs	r0, #2
 800471a:	f003 f9af 	bl	8007a7c <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 800471e:	2108      	movs	r1, #8
 8004720:	481c      	ldr	r0, [pc, #112]	; (8004794 <menu+0x36f0>)
 8004722:	f004 fcd1 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004726:	4603      	mov	r3, r0
 8004728:	2b01      	cmp	r3, #1
 800472a:	d129      	bne.n	8004780 <menu+0x36dc>
			menuGiris = 0;
 800472c:	4b2e      	ldr	r3, [pc, #184]	; (80047e8 <menu+0x3744>)
 800472e:	2200      	movs	r2, #0
 8004730:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004732:	bf00      	nop
 8004734:	481a      	ldr	r0, [pc, #104]	; (80047a0 <menu+0x36fc>)
 8004736:	f005 faf0 	bl	8009d1a <HAL_I2C_GetError>
 800473a:	4603      	mov	r3, r0
 800473c:	2b04      	cmp	r3, #4
 800473e:	d0f9      	beq.n	8004734 <menu+0x3690>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004740:	bf00      	nop
 8004742:	4817      	ldr	r0, [pc, #92]	; (80047a0 <menu+0x36fc>)
 8004744:	f005 fadc 	bl	8009d00 <HAL_I2C_GetState>
 8004748:	4603      	mov	r3, r0
 800474a:	2b20      	cmp	r3, #32
 800474c:	d1f9      	bne.n	8004742 <menu+0x369e>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800474e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004752:	9302      	str	r3, [sp, #8]
 8004754:	236e      	movs	r3, #110	; 0x6e
 8004756:	9301      	str	r3, [sp, #4]
 8004758:	4b10      	ldr	r3, [pc, #64]	; (800479c <menu+0x36f8>)
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	236e      	movs	r3, #110	; 0x6e
 800475e:	2200      	movs	r2, #0
 8004760:	21a0      	movs	r1, #160	; 0xa0
 8004762:	480f      	ldr	r0, [pc, #60]	; (80047a0 <menu+0x36fc>)
 8004764:	f004 ff6a 	bl	800963c <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004768:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800476c:	f003 fedc 	bl	8008528 <HAL_Delay>

			lcd_clear();
 8004770:	f003 f9b0 	bl	8007ad4 <lcd_clear>
			HAL_Delay(500);
 8004774:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004778:	f003 fed6 	bl	8008528 <HAL_Delay>
			NVIC_SystemReset();
 800477c:	f7fc fc7c 	bl	8001078 <__NVIC_SystemReset>
		}
	}
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bdb0      	pop	{r4, r5, r7, pc}
 8004788:	0800d830 	.word	0x0800d830
 800478c:	200001a4 	.word	0x200001a4
 8004790:	0800d844 	.word	0x0800d844
 8004794:	40010800 	.word	0x40010800
 8004798:	20000263 	.word	0x20000263
 800479c:	2000012c 	.word	0x2000012c
 80047a0:	200003bc 	.word	0x200003bc
 80047a4:	20000004 	.word	0x20000004
 80047a8:	200001d8 	.word	0x200001d8
 80047ac:	20000234 	.word	0x20000234
 80047b0:	20000254 	.word	0x20000254
 80047b4:	200001b0 	.word	0x200001b0
 80047b8:	0800d84c 	.word	0x0800d84c
 80047bc:	20000008 	.word	0x20000008
 80047c0:	200001e4 	.word	0x200001e4
 80047c4:	200001c4 	.word	0x200001c4
 80047c8:	0800d860 	.word	0x0800d860
 80047cc:	2000000c 	.word	0x2000000c
 80047d0:	200001f8 	.word	0x200001f8
 80047d4:	20000255 	.word	0x20000255
 80047d8:	0800d874 	.word	0x0800d874
 80047dc:	0800d888 	.word	0x0800d888
 80047e0:	0800d89c 	.word	0x0800d89c
 80047e4:	0800d8b0 	.word	0x0800d8b0
 80047e8:	20000251 	.word	0x20000251

080047ec <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80047fc:	4a22      	ldr	r2, [pc, #136]	; (8004888 <lcdUpdate+0x9c>)
 80047fe:	2101      	movs	r1, #1
 8004800:	2002      	movs	r0, #2
 8004802:	f003 f93b 	bl	8007a7c <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004806:	e03b      	b.n	8004880 <lcdUpdate+0x94>
	} else if(y==2) {
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d105      	bne.n	800481a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800480e:	4a1e      	ldr	r2, [pc, #120]	; (8004888 <lcdUpdate+0x9c>)
 8004810:	2102      	movs	r1, #2
 8004812:	2002      	movs	r0, #2
 8004814:	f003 f932 	bl	8007a7c <lcd_print>
}
 8004818:	e032      	b.n	8004880 <lcdUpdate+0x94>
	} else if(y==3) {
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d105      	bne.n	800482c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004820:	4a19      	ldr	r2, [pc, #100]	; (8004888 <lcdUpdate+0x9c>)
 8004822:	2103      	movs	r1, #3
 8004824:	2002      	movs	r0, #2
 8004826:	f003 f929 	bl	8007a7c <lcd_print>
}
 800482a:	e029      	b.n	8004880 <lcdUpdate+0x94>
	} else if(y==4) {
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	2b04      	cmp	r3, #4
 8004830:	d105      	bne.n	800483e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004832:	4a15      	ldr	r2, [pc, #84]	; (8004888 <lcdUpdate+0x9c>)
 8004834:	2104      	movs	r1, #4
 8004836:	2002      	movs	r0, #2
 8004838:	f003 f920 	bl	8007a7c <lcd_print>
}
 800483c:	e020      	b.n	8004880 <lcdUpdate+0x94>
	} else if(y==5) {
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	2b05      	cmp	r3, #5
 8004842:	d105      	bne.n	8004850 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004844:	4a10      	ldr	r2, [pc, #64]	; (8004888 <lcdUpdate+0x9c>)
 8004846:	2105      	movs	r1, #5
 8004848:	2002      	movs	r0, #2
 800484a:	f003 f917 	bl	8007a7c <lcd_print>
}
 800484e:	e017      	b.n	8004880 <lcdUpdate+0x94>
	} else if(y==6) {
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	2b06      	cmp	r3, #6
 8004854:	d105      	bne.n	8004862 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004856:	4a0c      	ldr	r2, [pc, #48]	; (8004888 <lcdUpdate+0x9c>)
 8004858:	2106      	movs	r1, #6
 800485a:	2002      	movs	r0, #2
 800485c:	f003 f90e 	bl	8007a7c <lcd_print>
}
 8004860:	e00e      	b.n	8004880 <lcdUpdate+0x94>
	} else if (y==7) {
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	2b07      	cmp	r3, #7
 8004866:	d10b      	bne.n	8004880 <lcdUpdate+0x94>
		lcd_clear();
 8004868:	f003 f934 	bl	8007ad4 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 800486c:	4a07      	ldr	r2, [pc, #28]	; (800488c <lcdUpdate+0xa0>)
 800486e:	2104      	movs	r1, #4
 8004870:	2001      	movs	r0, #1
 8004872:	f003 f903 	bl	8007a7c <lcd_print>
		lcd_print(2, 6, "RUN");
 8004876:	4a06      	ldr	r2, [pc, #24]	; (8004890 <lcdUpdate+0xa4>)
 8004878:	2106      	movs	r1, #6
 800487a:	2002      	movs	r0, #2
 800487c:	f003 f8fe 	bl	8007a7c <lcd_print>
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	0800d8c4 	.word	0x0800d8c4
 800488c:	0800d8c8 	.word	0x0800d8c8
 8004890:	0800d8d0 	.word	0x0800d8d0

08004894 <bekle>:

void bekle() {
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
	timer1=millis;
 8004898:	4b47      	ldr	r3, [pc, #284]	; (80049b8 <bekle+0x124>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a47      	ldr	r2, [pc, #284]	; (80049bc <bekle+0x128>)
 800489e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048a0:	e002      	b.n	80048a8 <bekle+0x14>
    	butonKontrol = 1;
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <bekle+0x12c>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048a8:	2101      	movs	r1, #1
 80048aa:	4846      	ldr	r0, [pc, #280]	; (80049c4 <bekle+0x130>)
 80048ac:	f004 fc0c 	bl	80090c8 <HAL_GPIO_ReadPin>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d109      	bne.n	80048ca <bekle+0x36>
 80048b6:	4b40      	ldr	r3, [pc, #256]	; (80049b8 <bekle+0x124>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b40      	ldr	r3, [pc, #256]	; (80049bc <bekle+0x128>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d0ef      	beq.n	80048a2 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048c2:	e002      	b.n	80048ca <bekle+0x36>
    	butonKontrol = 1;
 80048c4:	4b3e      	ldr	r3, [pc, #248]	; (80049c0 <bekle+0x12c>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048ca:	2108      	movs	r1, #8
 80048cc:	483e      	ldr	r0, [pc, #248]	; (80049c8 <bekle+0x134>)
 80048ce:	f004 fbfb 	bl	80090c8 <HAL_GPIO_ReadPin>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d109      	bne.n	80048ec <bekle+0x58>
 80048d8:	4b37      	ldr	r3, [pc, #220]	; (80049b8 <bekle+0x124>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4b37      	ldr	r3, [pc, #220]	; (80049bc <bekle+0x128>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d0ef      	beq.n	80048c4 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048e4:	e002      	b.n	80048ec <bekle+0x58>
    	butonKontrol = 1;
 80048e6:	4b36      	ldr	r3, [pc, #216]	; (80049c0 <bekle+0x12c>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048ec:	2102      	movs	r1, #2
 80048ee:	4835      	ldr	r0, [pc, #212]	; (80049c4 <bekle+0x130>)
 80048f0:	f004 fbea 	bl	80090c8 <HAL_GPIO_ReadPin>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d109      	bne.n	800490e <bekle+0x7a>
 80048fa:	4b2f      	ldr	r3, [pc, #188]	; (80049b8 <bekle+0x124>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b2f      	ldr	r3, [pc, #188]	; (80049bc <bekle+0x128>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d0ef      	beq.n	80048e6 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004906:	e002      	b.n	800490e <bekle+0x7a>
    	butonKontrol = 1;
 8004908:	4b2d      	ldr	r3, [pc, #180]	; (80049c0 <bekle+0x12c>)
 800490a:	2201      	movs	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800490e:	2104      	movs	r1, #4
 8004910:	482c      	ldr	r0, [pc, #176]	; (80049c4 <bekle+0x130>)
 8004912:	f004 fbd9 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004916:	4603      	mov	r3, r0
 8004918:	2b01      	cmp	r3, #1
 800491a:	d109      	bne.n	8004930 <bekle+0x9c>
 800491c:	4b26      	ldr	r3, [pc, #152]	; (80049b8 <bekle+0x124>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	4b26      	ldr	r3, [pc, #152]	; (80049bc <bekle+0x128>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d0ef      	beq.n	8004908 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004928:	e002      	b.n	8004930 <bekle+0x9c>
    	butonKontrol = 1;
 800492a:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <bekle+0x12c>)
 800492c:	2201      	movs	r2, #1
 800492e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004930:	2108      	movs	r1, #8
 8004932:	4824      	ldr	r0, [pc, #144]	; (80049c4 <bekle+0x130>)
 8004934:	f004 fbc8 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004938:	4603      	mov	r3, r0
 800493a:	2b01      	cmp	r3, #1
 800493c:	d109      	bne.n	8004952 <bekle+0xbe>
 800493e:	4b1e      	ldr	r3, [pc, #120]	; (80049b8 <bekle+0x124>)
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	4b1e      	ldr	r3, [pc, #120]	; (80049bc <bekle+0x128>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d0ef      	beq.n	800492a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800494a:	e002      	b.n	8004952 <bekle+0xbe>
    	butonKontrol = 1;
 800494c:	4b1c      	ldr	r3, [pc, #112]	; (80049c0 <bekle+0x12c>)
 800494e:	2201      	movs	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004952:	2180      	movs	r1, #128	; 0x80
 8004954:	481c      	ldr	r0, [pc, #112]	; (80049c8 <bekle+0x134>)
 8004956:	f004 fbb7 	bl	80090c8 <HAL_GPIO_ReadPin>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <bekle+0xe0>
 8004960:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <bekle+0x124>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b15      	ldr	r3, [pc, #84]	; (80049bc <bekle+0x128>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d0ef      	beq.n	800494c <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800496c:	e002      	b.n	8004974 <bekle+0xe0>
    	butonKontrol = 1;
 800496e:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <bekle+0x12c>)
 8004970:	2201      	movs	r2, #1
 8004972:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004978:	4813      	ldr	r0, [pc, #76]	; (80049c8 <bekle+0x134>)
 800497a:	f004 fba5 	bl	80090c8 <HAL_GPIO_ReadPin>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <bekle+0x104>
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <bekle+0x124>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <bekle+0x128>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d0ee      	beq.n	800496e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004990:	e002      	b.n	8004998 <bekle+0x104>
    	butonKontrol = 1;
 8004992:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <bekle+0x12c>)
 8004994:	2201      	movs	r2, #1
 8004996:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800499c:	480a      	ldr	r0, [pc, #40]	; (80049c8 <bekle+0x134>)
 800499e:	f004 fb93 	bl	80090c8 <HAL_GPIO_ReadPin>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <bekle+0x120>
 80049a8:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <bekle+0x124>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4b03      	ldr	r3, [pc, #12]	; (80049bc <bekle+0x128>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d0ee      	beq.n	8004992 <bekle+0xfe>
    }

}
 80049b4:	bf00      	nop
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20000210 	.word	0x20000210
 80049bc:	20000218 	.word	0x20000218
 80049c0:	20000263 	.word	0x20000263
 80049c4:	40010800 	.word	0x40010800
 80049c8:	40011000 	.word	0x40011000

080049cc <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 80049d0:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <checkLCDBacklight+0x24>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <checkLCDBacklight+0x28>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b3b      	cmp	r3, #59	; 0x3b
 80049dc:	d903      	bls.n	80049e6 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 80049de:	2000      	movs	r0, #0
 80049e0:	f003 f898 	bl	8007b14 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80049e4:	e002      	b.n	80049ec <checkLCDBacklight+0x20>
		lcd_backlight(1);
 80049e6:	2001      	movs	r0, #1
 80049e8:	f003 f894 	bl	8007b14 <lcd_backlight>
}
 80049ec:	bf00      	nop
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20000210 	.word	0x20000210
 80049f4:	2000022c 	.word	0x2000022c

080049f8 <checkBasincSalteri>:

void checkBasincSalteri() {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80049fc:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <checkBasincSalteri+0x54>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <checkBasincSalteri+0x12>
		basincVar=1;
 8004a04:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <checkBasincSalteri+0x58>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004a0a:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <checkBasincSalteri+0x54>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d119      	bne.n	8004a46 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a16:	480f      	ldr	r0, [pc, #60]	; (8004a54 <checkBasincSalteri+0x5c>)
 8004a18:	f004 fb56 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004a22:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <checkBasincSalteri+0x60>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <checkBasincSalteri+0x64>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d90a      	bls.n	8004a46 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <checkBasincSalteri+0x58>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004a36:	e006      	b.n	8004a46 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004a38:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <checkBasincSalteri+0x60>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a07      	ldr	r2, [pc, #28]	; (8004a5c <checkBasincSalteri+0x64>)
 8004a3e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004a40:	4b03      	ldr	r3, [pc, #12]	; (8004a50 <checkBasincSalteri+0x58>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	701a      	strb	r2, [r3, #0]
}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	2000023b 	.word	0x2000023b
 8004a50:	20000237 	.word	0x20000237
 8004a54:	40011000 	.word	0x40011000
 8004a58:	20000210 	.word	0x20000210
 8004a5c:	20000228 	.word	0x20000228

08004a60 <checkBasGonder>:

void checkBasGonder() {
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004a64:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <checkBasGonder+0x74>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d10b      	bne.n	8004a84 <checkBasGonder+0x24>
 8004a6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <checkBasGonder+0x78>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <checkBasGonder+0x24>
 8004a74:	4b19      	ldr	r3, [pc, #100]	; (8004adc <checkBasGonder+0x7c>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d103      	bne.n	8004a84 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004a7c:	4b18      	ldr	r3, [pc, #96]	; (8004ae0 <checkBasGonder+0x80>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	e009      	b.n	8004a98 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004a84:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <checkBasGonder+0x78>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	f083 0301 	eor.w	r3, r3, #1
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004a92:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <checkBasGonder+0x80>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004a98:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <checkBasGonder+0x74>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d10b      	bne.n	8004ab8 <checkBasGonder+0x58>
 8004aa0:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <checkBasGonder+0x84>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <checkBasGonder+0x58>
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <checkBasGonder+0x7c>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d103      	bne.n	8004ab8 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <checkBasGonder+0x88>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004ab6:	e009      	b.n	8004acc <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <checkBasGonder+0x84>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	f083 0301 	eor.w	r3, r3, #1
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004ac6:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <checkBasGonder+0x88>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
}
 8004acc:	bf00      	nop
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr
 8004ad4:	20000235 	.word	0x20000235
 8004ad8:	20000269 	.word	0x20000269
 8004adc:	20000243 	.word	0x20000243
 8004ae0:	20000270 	.word	0x20000270
 8004ae4:	2000026c 	.word	0x2000026c
 8004ae8:	20000271 	.word	0x20000271

08004aec <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004af0:	4b24      	ldr	r3, [pc, #144]	; (8004b84 <checkKapiSecimleri+0x98>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004af8:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <checkKapiSecimleri+0x9c>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004afe:	4b21      	ldr	r3, [pc, #132]	; (8004b84 <checkKapiSecimleri+0x98>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d10e      	bne.n	8004b24 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004b06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b0a:	4820      	ldr	r0, [pc, #128]	; (8004b8c <checkKapiSecimleri+0xa0>)
 8004b0c:	f004 fadc 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004b16:	4b1c      	ldr	r3, [pc, #112]	; (8004b88 <checkKapiSecimleri+0x9c>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e002      	b.n	8004b24 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004b1e:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <checkKapiSecimleri+0x9c>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004b24:	4b17      	ldr	r3, [pc, #92]	; (8004b84 <checkKapiSecimleri+0x98>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d10e      	bne.n	8004b4a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b30:	4816      	ldr	r0, [pc, #88]	; (8004b8c <checkKapiSecimleri+0xa0>)
 8004b32:	f004 fac9 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d103      	bne.n	8004b44 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004b3c:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <checkKapiSecimleri+0x9c>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	e002      	b.n	8004b4a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004b44:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <checkKapiSecimleri+0x9c>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004b4a:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <checkKapiSecimleri+0x98>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b03      	cmp	r3, #3
 8004b50:	d116      	bne.n	8004b80 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004b52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b56:	480d      	ldr	r0, [pc, #52]	; (8004b8c <checkKapiSecimleri+0xa0>)
 8004b58:	f004 fab6 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10b      	bne.n	8004b7a <checkKapiSecimleri+0x8e>
 8004b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b66:	4809      	ldr	r0, [pc, #36]	; (8004b8c <checkKapiSecimleri+0xa0>)
 8004b68:	f004 faae 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d103      	bne.n	8004b7a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004b72:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <checkKapiSecimleri+0x9c>)
 8004b74:	2201      	movs	r2, #1
 8004b76:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004b78:	e002      	b.n	8004b80 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004b7a:	4b03      	ldr	r3, [pc, #12]	; (8004b88 <checkKapiSecimleri+0x9c>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
}
 8004b80:	bf00      	nop
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	2000023c 	.word	0x2000023c
 8004b88:	20000287 	.word	0x20000287
 8004b8c:	40010800 	.word	0x40010800

08004b90 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004b94:	4b62      	ldr	r3, [pc, #392]	; (8004d20 <checkAktifCalisma+0x190>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f041 833e 	bne.w	800621a <checkAktifCalisma+0x168a>
 8004b9e:	4b61      	ldr	r3, [pc, #388]	; (8004d24 <checkAktifCalisma+0x194>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f041 8339 	bne.w	800621a <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004ba8:	4b5f      	ldr	r3, [pc, #380]	; (8004d28 <checkAktifCalisma+0x198>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d11a      	bne.n	8004be6 <checkAktifCalisma+0x56>
 8004bb0:	4b5e      	ldr	r3, [pc, #376]	; (8004d2c <checkAktifCalisma+0x19c>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d116      	bne.n	8004be6 <checkAktifCalisma+0x56>
 8004bb8:	4b5d      	ldr	r3, [pc, #372]	; (8004d30 <checkAktifCalisma+0x1a0>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <checkAktifCalisma+0x46>
 8004bc0:	4b5c      	ldr	r3, [pc, #368]	; (8004d34 <checkAktifCalisma+0x1a4>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	f083 0301 	eor.w	r3, r3, #1
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <checkAktifCalisma+0x46>
 8004bce:	4b5a      	ldr	r3, [pc, #360]	; (8004d38 <checkAktifCalisma+0x1a8>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d007      	beq.n	8004be6 <checkAktifCalisma+0x56>
 8004bd6:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <checkAktifCalisma+0x1ac>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d018      	beq.n	8004c10 <checkAktifCalisma+0x80>
 8004bde:	4b58      	ldr	r3, [pc, #352]	; (8004d40 <checkAktifCalisma+0x1b0>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d114      	bne.n	8004c10 <checkAktifCalisma+0x80>
 8004be6:	4b57      	ldr	r3, [pc, #348]	; (8004d44 <checkAktifCalisma+0x1b4>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d010      	beq.n	8004c10 <checkAktifCalisma+0x80>
 8004bee:	4b56      	ldr	r3, [pc, #344]	; (8004d48 <checkAktifCalisma+0x1b8>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00c      	beq.n	8004c10 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bfc:	4853      	ldr	r0, [pc, #332]	; (8004d4c <checkAktifCalisma+0x1bc>)
 8004bfe:	f004 fa7a 	bl	80090f6 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004c02:	4b53      	ldr	r3, [pc, #332]	; (8004d50 <checkAktifCalisma+0x1c0>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004c08:	4b52      	ldr	r3, [pc, #328]	; (8004d54 <checkAktifCalisma+0x1c4>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e008      	b.n	8004c22 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004c10:	2200      	movs	r2, #0
 8004c12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c16:	484d      	ldr	r0, [pc, #308]	; (8004d4c <checkAktifCalisma+0x1bc>)
 8004c18:	f004 fa6d 	bl	80090f6 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004c1c:	4b4c      	ldr	r3, [pc, #304]	; (8004d50 <checkAktifCalisma+0x1c0>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004c22:	4b40      	ldr	r3, [pc, #256]	; (8004d24 <checkAktifCalisma+0x194>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d160      	bne.n	8004cec <checkAktifCalisma+0x15c>
 8004c2a:	4b46      	ldr	r3, [pc, #280]	; (8004d44 <checkAktifCalisma+0x1b4>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d05c      	beq.n	8004cec <checkAktifCalisma+0x15c>
 8004c32:	4b45      	ldr	r3, [pc, #276]	; (8004d48 <checkAktifCalisma+0x1b8>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d058      	beq.n	8004cec <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004c3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c3e:	4843      	ldr	r0, [pc, #268]	; (8004d4c <checkAktifCalisma+0x1bc>)
 8004c40:	f004 fa42 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <checkAktifCalisma+0xc2>
 8004c4a:	4b43      	ldr	r3, [pc, #268]	; (8004d58 <checkAktifCalisma+0x1c8>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d04c      	beq.n	8004cec <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004c52:	2102      	movs	r1, #2
 8004c54:	4841      	ldr	r0, [pc, #260]	; (8004d5c <checkAktifCalisma+0x1cc>)
 8004c56:	f004 fa37 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d145      	bne.n	8004cec <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004c60:	4b3f      	ldr	r3, [pc, #252]	; (8004d60 <checkAktifCalisma+0x1d0>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d041      	beq.n	8004cec <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004c68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c6c:	4837      	ldr	r0, [pc, #220]	; (8004d4c <checkAktifCalisma+0x1bc>)
 8004c6e:	f004 fa2b 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d10e      	bne.n	8004c96 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004c78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c7c:	4833      	ldr	r0, [pc, #204]	; (8004d4c <checkAktifCalisma+0x1bc>)
 8004c7e:	f004 fa23 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d106      	bne.n	8004c96 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004c88:	2140      	movs	r1, #64	; 0x40
 8004c8a:	4834      	ldr	r0, [pc, #208]	; (8004d5c <checkAktifCalisma+0x1cc>)
 8004c8c:	f004 fa1c 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d003      	beq.n	8004c9e <checkAktifCalisma+0x10e>
 8004c96:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <checkAktifCalisma+0x198>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d026      	beq.n	8004cec <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004c9e:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <checkAktifCalisma+0x1a0>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	f083 0301 	eor.w	r3, r3, #1
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01f      	beq.n	8004cec <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004cac:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <checkAktifCalisma+0x19c>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	f083 0301 	eor.w	r3, r3, #1
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d018      	beq.n	8004cec <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004cba:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <checkAktifCalisma+0x1ac>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	f083 0301 	eor.w	r3, r3, #1
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d011      	beq.n	8004cec <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004cc8:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <checkAktifCalisma+0x1d4>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	f083 0301 	eor.w	r3, r3, #1
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004cd6:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <checkAktifCalisma+0x1d8>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	f083 0301 	eor.w	r3, r3, #1
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004ce4:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <checkAktifCalisma+0x198>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]
 8004cea:	e002      	b.n	8004cf2 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004cec:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <checkAktifCalisma+0x198>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	; (8004d28 <checkAktifCalisma+0x198>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d03a      	beq.n	8004d70 <checkAktifCalisma+0x1e0>
 8004cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cfe:	4817      	ldr	r0, [pc, #92]	; (8004d5c <checkAktifCalisma+0x1cc>)
 8004d00:	f004 f9e2 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d132      	bne.n	8004d70 <checkAktifCalisma+0x1e0>
 8004d0a:	4b18      	ldr	r3, [pc, #96]	; (8004d6c <checkAktifCalisma+0x1dc>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d02e      	beq.n	8004d70 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004d12:	2201      	movs	r2, #1
 8004d14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d18:	480c      	ldr	r0, [pc, #48]	; (8004d4c <checkAktifCalisma+0x1bc>)
 8004d1a:	f004 f9ec 	bl	80090f6 <HAL_GPIO_WritePin>
 8004d1e:	e02d      	b.n	8004d7c <checkAktifCalisma+0x1ec>
 8004d20:	20000252 	.word	0x20000252
 8004d24:	20000251 	.word	0x20000251
 8004d28:	20000269 	.word	0x20000269
 8004d2c:	2000026a 	.word	0x2000026a
 8004d30:	2000026c 	.word	0x2000026c
 8004d34:	20000264 	.word	0x20000264
 8004d38:	20000247 	.word	0x20000247
 8004d3c:	2000026b 	.word	0x2000026b
 8004d40:	20000246 	.word	0x20000246
 8004d44:	20000286 	.word	0x20000286
 8004d48:	20000287 	.word	0x20000287
 8004d4c:	40010c00 	.word	0x40010c00
 8004d50:	20000288 	.word	0x20000288
 8004d54:	20000273 	.word	0x20000273
 8004d58:	20000270 	.word	0x20000270
 8004d5c:	40011000 	.word	0x40011000
 8004d60:	20000237 	.word	0x20000237
 8004d64:	2000026e 	.word	0x2000026e
 8004d68:	2000026f 	.word	0x2000026f
 8004d6c:	20000242 	.word	0x20000242
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004d70:	2200      	movs	r2, #0
 8004d72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d76:	4860      	ldr	r0, [pc, #384]	; (8004ef8 <checkAktifCalisma+0x368>)
 8004d78:	f004 f9bd 	bl	80090f6 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004d7c:	4b5f      	ldr	r3, [pc, #380]	; (8004efc <checkAktifCalisma+0x36c>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d013      	beq.n	8004dac <checkAktifCalisma+0x21c>
 8004d84:	4b5e      	ldr	r3, [pc, #376]	; (8004f00 <checkAktifCalisma+0x370>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d007      	beq.n	8004d9c <checkAktifCalisma+0x20c>
 8004d8c:	4b5c      	ldr	r3, [pc, #368]	; (8004f00 <checkAktifCalisma+0x370>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d003      	beq.n	8004d9c <checkAktifCalisma+0x20c>
 8004d94:	4b5b      	ldr	r3, [pc, #364]	; (8004f04 <checkAktifCalisma+0x374>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d107      	bne.n	8004dac <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	2104      	movs	r1, #4
 8004da0:	4855      	ldr	r0, [pc, #340]	; (8004ef8 <checkAktifCalisma+0x368>)
 8004da2:	f004 f9a8 	bl	80090f6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004da6:	4b58      	ldr	r3, [pc, #352]	; (8004f08 <checkAktifCalisma+0x378>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004dac:	4b56      	ldr	r3, [pc, #344]	; (8004f08 <checkAktifCalisma+0x378>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d02f      	beq.n	8004e14 <checkAktifCalisma+0x284>
 8004db4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004db8:	484f      	ldr	r0, [pc, #316]	; (8004ef8 <checkAktifCalisma+0x368>)
 8004dba:	f004 f985 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d106      	bne.n	8004dd2 <checkAktifCalisma+0x242>
 8004dc4:	4b51      	ldr	r3, [pc, #324]	; (8004f0c <checkAktifCalisma+0x37c>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	f083 0301 	eor.w	r3, r3, #1
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <checkAktifCalisma+0x250>
 8004dd2:	2102      	movs	r1, #2
 8004dd4:	484e      	ldr	r0, [pc, #312]	; (8004f10 <checkAktifCalisma+0x380>)
 8004dd6:	f004 f977 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d119      	bne.n	8004e14 <checkAktifCalisma+0x284>
 8004de0:	4b4c      	ldr	r3, [pc, #304]	; (8004f14 <checkAktifCalisma+0x384>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d015      	beq.n	8004e14 <checkAktifCalisma+0x284>
 8004de8:	4b4b      	ldr	r3, [pc, #300]	; (8004f18 <checkAktifCalisma+0x388>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d011      	beq.n	8004e14 <checkAktifCalisma+0x284>
 8004df0:	4b4a      	ldr	r3, [pc, #296]	; (8004f1c <checkAktifCalisma+0x38c>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00d      	beq.n	8004e14 <checkAktifCalisma+0x284>
 8004df8:	4b49      	ldr	r3, [pc, #292]	; (8004f20 <checkAktifCalisma+0x390>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	f083 0301 	eor.w	r3, r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d006      	beq.n	8004e14 <checkAktifCalisma+0x284>
			timer2=millis;
 8004e06:	4b47      	ldr	r3, [pc, #284]	; (8004f24 <checkAktifCalisma+0x394>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a47      	ldr	r2, [pc, #284]	; (8004f28 <checkAktifCalisma+0x398>)
 8004e0c:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004e0e:	4b44      	ldr	r3, [pc, #272]	; (8004f20 <checkAktifCalisma+0x390>)
 8004e10:	2201      	movs	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004e14:	4b43      	ldr	r3, [pc, #268]	; (8004f24 <checkAktifCalisma+0x394>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <checkAktifCalisma+0x398>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	4a43      	ldr	r2, [pc, #268]	; (8004f2c <checkAktifCalisma+0x39c>)
 8004e20:	7812      	ldrb	r2, [r2, #0]
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d303      	bcc.n	8004e2e <checkAktifCalisma+0x29e>
 8004e26:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <checkAktifCalisma+0x390>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d111      	bne.n	8004e52 <checkAktifCalisma+0x2c2>
 8004e2e:	4b39      	ldr	r3, [pc, #228]	; (8004f14 <checkAktifCalisma+0x384>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	f083 0301 	eor.w	r3, r3, #1
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <checkAktifCalisma+0x2c2>
 8004e3c:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <checkAktifCalisma+0x388>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	f083 0301 	eor.w	r3, r3, #1
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d103      	bne.n	8004e52 <checkAktifCalisma+0x2c2>
 8004e4a:	4b34      	ldr	r3, [pc, #208]	; (8004f1c <checkAktifCalisma+0x38c>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004e52:	2200      	movs	r2, #0
 8004e54:	2104      	movs	r1, #4
 8004e56:	4828      	ldr	r0, [pc, #160]	; (8004ef8 <checkAktifCalisma+0x368>)
 8004e58:	f004 f94d 	bl	80090f6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004e5c:	4b2a      	ldr	r3, [pc, #168]	; (8004f08 <checkAktifCalisma+0x378>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004e62:	4b2f      	ldr	r3, [pc, #188]	; (8004f20 <checkAktifCalisma+0x390>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004e68:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <checkAktifCalisma+0x3a0>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004e70:	4b30      	ldr	r3, [pc, #192]	; (8004f34 <checkAktifCalisma+0x3a4>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004e76:	4b2e      	ldr	r3, [pc, #184]	; (8004f30 <checkAktifCalisma+0x3a0>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d116      	bne.n	8004eac <checkAktifCalisma+0x31c>
 8004e7e:	4b2e      	ldr	r3, [pc, #184]	; (8004f38 <checkAktifCalisma+0x3a8>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d112      	bne.n	8004eac <checkAktifCalisma+0x31c>
 8004e86:	2101      	movs	r1, #1
 8004e88:	4821      	ldr	r0, [pc, #132]	; (8004f10 <checkAktifCalisma+0x380>)
 8004e8a:	f004 f91d 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10b      	bne.n	8004eac <checkAktifCalisma+0x31c>
 8004e94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e98:	4817      	ldr	r0, [pc, #92]	; (8004ef8 <checkAktifCalisma+0x368>)
 8004e9a:	f004 f915 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d103      	bne.n	8004eac <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004ea4:	4b23      	ldr	r3, [pc, #140]	; (8004f34 <checkAktifCalisma+0x3a4>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	e011      	b.n	8004ed0 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004eac:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <checkAktifCalisma+0x3a0>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10d      	bne.n	8004ed0 <checkAktifCalisma+0x340>
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4816      	ldr	r0, [pc, #88]	; (8004f10 <checkAktifCalisma+0x380>)
 8004eb8:	f004 f906 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d106      	bne.n	8004ed0 <checkAktifCalisma+0x340>
 8004ec2:	4b1d      	ldr	r3, [pc, #116]	; (8004f38 <checkAktifCalisma+0x3a8>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d102      	bne.n	8004ed0 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004eca:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <checkAktifCalisma+0x3a4>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004ed0:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <checkAktifCalisma+0x3a0>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d134      	bne.n	8004f42 <checkAktifCalisma+0x3b2>
 8004ed8:	4b17      	ldr	r3, [pc, #92]	; (8004f38 <checkAktifCalisma+0x3a8>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d130      	bne.n	8004f42 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	480b      	ldr	r0, [pc, #44]	; (8004f10 <checkAktifCalisma+0x380>)
 8004ee4:	f004 f8f0 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d126      	bne.n	8004f3c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004eee:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <checkAktifCalisma+0x3a4>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e025      	b.n	8004f42 <checkAktifCalisma+0x3b2>
 8004ef6:	bf00      	nop
 8004ef8:	40010c00 	.word	0x40010c00
 8004efc:	20000269 	.word	0x20000269
 8004f00:	20000243 	.word	0x20000243
 8004f04:	20000247 	.word	0x20000247
 8004f08:	2000026d 	.word	0x2000026d
 8004f0c:	20000270 	.word	0x20000270
 8004f10:	40011000 	.word	0x40011000
 8004f14:	20000286 	.word	0x20000286
 8004f18:	20000287 	.word	0x20000287
 8004f1c:	20000237 	.word	0x20000237
 8004f20:	20000265 	.word	0x20000265
 8004f24:	20000210 	.word	0x20000210
 8004f28:	2000021c 	.word	0x2000021c
 8004f2c:	20000248 	.word	0x20000248
 8004f30:	20000238 	.word	0x20000238
 8004f34:	2000028b 	.word	0x2000028b
 8004f38:	20000235 	.word	0x20000235
			} else {
				cerceveVar=0;
 8004f3c:	4b7f      	ldr	r3, [pc, #508]	; (800513c <checkAktifCalisma+0x5ac>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004f42:	4b7f      	ldr	r3, [pc, #508]	; (8005140 <checkAktifCalisma+0x5b0>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d17c      	bne.n	8005044 <checkAktifCalisma+0x4b4>
 8004f4a:	4b7e      	ldr	r3, [pc, #504]	; (8005144 <checkAktifCalisma+0x5b4>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d078      	beq.n	8005044 <checkAktifCalisma+0x4b4>
 8004f52:	4b7d      	ldr	r3, [pc, #500]	; (8005148 <checkAktifCalisma+0x5b8>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d074      	beq.n	8005044 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004f5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f5e:	487b      	ldr	r0, [pc, #492]	; (800514c <checkAktifCalisma+0x5bc>)
 8004f60:	f004 f8b2 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <checkAktifCalisma+0x3e2>
 8004f6a:	4b79      	ldr	r3, [pc, #484]	; (8005150 <checkAktifCalisma+0x5c0>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d068      	beq.n	8005044 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004f72:	4b72      	ldr	r3, [pc, #456]	; (800513c <checkAktifCalisma+0x5ac>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d064      	beq.n	8005044 <checkAktifCalisma+0x4b4>
 8004f7a:	4b76      	ldr	r3, [pc, #472]	; (8005154 <checkAktifCalisma+0x5c4>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	f083 0301 	eor.w	r3, r3, #1
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d05d      	beq.n	8005044 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004f88:	2104      	movs	r1, #4
 8004f8a:	4873      	ldr	r0, [pc, #460]	; (8005158 <checkAktifCalisma+0x5c8>)
 8004f8c:	f004 f89c 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <checkAktifCalisma+0x40e>
 8004f96:	4b71      	ldr	r3, [pc, #452]	; (800515c <checkAktifCalisma+0x5cc>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d152      	bne.n	8005044 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fa2:	486a      	ldr	r0, [pc, #424]	; (800514c <checkAktifCalisma+0x5bc>)
 8004fa4:	f004 f890 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d10e      	bne.n	8004fcc <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004fae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fb2:	4866      	ldr	r0, [pc, #408]	; (800514c <checkAktifCalisma+0x5bc>)
 8004fb4:	f004 f888 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d106      	bne.n	8004fcc <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004fbe:	2140      	movs	r1, #64	; 0x40
 8004fc0:	4865      	ldr	r0, [pc, #404]	; (8005158 <checkAktifCalisma+0x5c8>)
 8004fc2:	f004 f881 	bl	80090c8 <HAL_GPIO_ReadPin>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d003      	beq.n	8004fd4 <checkAktifCalisma+0x444>
 8004fcc:	4b64      	ldr	r3, [pc, #400]	; (8005160 <checkAktifCalisma+0x5d0>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d037      	beq.n	8005044 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8004fd4:	4b63      	ldr	r3, [pc, #396]	; (8005164 <checkAktifCalisma+0x5d4>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	f083 0301 	eor.w	r3, r3, #1
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d030      	beq.n	8005044 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8004fe2:	4b61      	ldr	r3, [pc, #388]	; (8005168 <checkAktifCalisma+0x5d8>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	f083 0301 	eor.w	r3, r3, #1
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d029      	beq.n	8005044 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8004ff0:	4b5e      	ldr	r3, [pc, #376]	; (800516c <checkAktifCalisma+0x5dc>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	f083 0301 	eor.w	r3, r3, #1
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d022      	beq.n	8005044 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8004ffe:	4b5c      	ldr	r3, [pc, #368]	; (8005170 <checkAktifCalisma+0x5e0>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	f083 0301 	eor.w	r3, r3, #1
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01b      	beq.n	8005044 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 800500c:	4b59      	ldr	r3, [pc, #356]	; (8005174 <checkAktifCalisma+0x5e4>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	f083 0301 	eor.w	r3, r3, #1
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d014      	beq.n	8005044 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800501a:	4b57      	ldr	r3, [pc, #348]	; (8005178 <checkAktifCalisma+0x5e8>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	f083 0301 	eor.w	r3, r3, #1
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00d      	beq.n	8005044 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005028:	2201      	movs	r2, #1
 800502a:	2102      	movs	r1, #2
 800502c:	4847      	ldr	r0, [pc, #284]	; (800514c <checkAktifCalisma+0x5bc>)
 800502e:	f004 f862 	bl	80090f6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005032:	4b4b      	ldr	r3, [pc, #300]	; (8005160 <checkAktifCalisma+0x5d0>)
 8005034:	2201      	movs	r2, #1
 8005036:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005038:	4b50      	ldr	r3, [pc, #320]	; (800517c <checkAktifCalisma+0x5ec>)
 800503a:	2201      	movs	r2, #1
 800503c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800503e:	4b50      	ldr	r3, [pc, #320]	; (8005180 <checkAktifCalisma+0x5f0>)
 8005040:	2201      	movs	r2, #1
 8005042:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005044:	4b46      	ldr	r3, [pc, #280]	; (8005160 <checkAktifCalisma+0x5d0>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d033      	beq.n	80050b4 <checkAktifCalisma+0x524>
 800504c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005050:	483e      	ldr	r0, [pc, #248]	; (800514c <checkAktifCalisma+0x5bc>)
 8005052:	f004 f839 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005056:	4603      	mov	r3, r0
 8005058:	2b01      	cmp	r3, #1
 800505a:	d106      	bne.n	800506a <checkAktifCalisma+0x4da>
 800505c:	4b3c      	ldr	r3, [pc, #240]	; (8005150 <checkAktifCalisma+0x5c0>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	f083 0301 	eor.w	r3, r3, #1
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10a      	bne.n	8005080 <checkAktifCalisma+0x4f0>
 800506a:	2104      	movs	r1, #4
 800506c:	483a      	ldr	r0, [pc, #232]	; (8005158 <checkAktifCalisma+0x5c8>)
 800506e:	f004 f82b 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005072:	4603      	mov	r3, r0
 8005074:	2b01      	cmp	r3, #1
 8005076:	d11d      	bne.n	80050b4 <checkAktifCalisma+0x524>
 8005078:	4b38      	ldr	r3, [pc, #224]	; (800515c <checkAktifCalisma+0x5cc>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d019      	beq.n	80050b4 <checkAktifCalisma+0x524>
 8005080:	4b30      	ldr	r3, [pc, #192]	; (8005144 <checkAktifCalisma+0x5b4>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d015      	beq.n	80050b4 <checkAktifCalisma+0x524>
 8005088:	4b2f      	ldr	r3, [pc, #188]	; (8005148 <checkAktifCalisma+0x5b8>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d011      	beq.n	80050b4 <checkAktifCalisma+0x524>
 8005090:	4b2a      	ldr	r3, [pc, #168]	; (800513c <checkAktifCalisma+0x5ac>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00d      	beq.n	80050b4 <checkAktifCalisma+0x524>
 8005098:	4b3a      	ldr	r3, [pc, #232]	; (8005184 <checkAktifCalisma+0x5f4>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f083 0301 	eor.w	r3, r3, #1
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d006      	beq.n	80050b4 <checkAktifCalisma+0x524>
			timer2=millis;
 80050a6:	4b38      	ldr	r3, [pc, #224]	; (8005188 <checkAktifCalisma+0x5f8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a38      	ldr	r2, [pc, #224]	; (800518c <checkAktifCalisma+0x5fc>)
 80050ac:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80050ae:	4b35      	ldr	r3, [pc, #212]	; (8005184 <checkAktifCalisma+0x5f4>)
 80050b0:	2201      	movs	r2, #1
 80050b2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80050b4:	4b34      	ldr	r3, [pc, #208]	; (8005188 <checkAktifCalisma+0x5f8>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	4b34      	ldr	r3, [pc, #208]	; (800518c <checkAktifCalisma+0x5fc>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	4a34      	ldr	r2, [pc, #208]	; (8005190 <checkAktifCalisma+0x600>)
 80050c0:	7812      	ldrb	r2, [r2, #0]
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d303      	bcc.n	80050ce <checkAktifCalisma+0x53e>
 80050c6:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <checkAktifCalisma+0x5f4>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d114      	bne.n	80050f8 <checkAktifCalisma+0x568>
 80050ce:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <checkAktifCalisma+0x5b4>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	f083 0301 	eor.w	r3, r3, #1
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10d      	bne.n	80050f8 <checkAktifCalisma+0x568>
 80050dc:	4b1a      	ldr	r3, [pc, #104]	; (8005148 <checkAktifCalisma+0x5b8>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f083 0301 	eor.w	r3, r3, #1
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <checkAktifCalisma+0x568>
 80050ea:	4b14      	ldr	r3, [pc, #80]	; (800513c <checkAktifCalisma+0x5ac>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	f083 0301 	eor.w	r3, r3, #1
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80050f8:	2200      	movs	r2, #0
 80050fa:	2102      	movs	r1, #2
 80050fc:	4813      	ldr	r0, [pc, #76]	; (800514c <checkAktifCalisma+0x5bc>)
 80050fe:	f003 fffa 	bl	80090f6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005102:	4b17      	ldr	r3, [pc, #92]	; (8005160 <checkAktifCalisma+0x5d0>)
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005108:	4b1e      	ldr	r3, [pc, #120]	; (8005184 <checkAktifCalisma+0x5f4>)
 800510a:	2200      	movs	r2, #0
 800510c:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800510e:	4b14      	ldr	r3, [pc, #80]	; (8005160 <checkAktifCalisma+0x5d0>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d040      	beq.n	8005198 <checkAktifCalisma+0x608>
 8005116:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800511a:	480f      	ldr	r0, [pc, #60]	; (8005158 <checkAktifCalisma+0x5c8>)
 800511c:	f003 ffd4 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d138      	bne.n	8005198 <checkAktifCalisma+0x608>
 8005126:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <checkAktifCalisma+0x604>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d034      	beq.n	8005198 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800512e:	2201      	movs	r2, #1
 8005130:	2101      	movs	r1, #1
 8005132:	4806      	ldr	r0, [pc, #24]	; (800514c <checkAktifCalisma+0x5bc>)
 8005134:	f003 ffdf 	bl	80090f6 <HAL_GPIO_WritePin>
 8005138:	e033      	b.n	80051a2 <checkAktifCalisma+0x612>
 800513a:	bf00      	nop
 800513c:	2000028b 	.word	0x2000028b
 8005140:	20000251 	.word	0x20000251
 8005144:	20000286 	.word	0x20000286
 8005148:	20000287 	.word	0x20000287
 800514c:	40010c00 	.word	0x40010c00
 8005150:	20000271 	.word	0x20000271
 8005154:	20000285 	.word	0x20000285
 8005158:	40011000 	.word	0x40011000
 800515c:	2000023a 	.word	0x2000023a
 8005160:	2000026c 	.word	0x2000026c
 8005164:	20000269 	.word	0x20000269
 8005168:	2000026d 	.word	0x2000026d
 800516c:	2000026a 	.word	0x2000026a
 8005170:	2000026b 	.word	0x2000026b
 8005174:	2000026e 	.word	0x2000026e
 8005178:	2000026f 	.word	0x2000026f
 800517c:	20000274 	.word	0x20000274
 8005180:	20000295 	.word	0x20000295
 8005184:	20000264 	.word	0x20000264
 8005188:	20000210 	.word	0x20000210
 800518c:	2000021c 	.word	0x2000021c
 8005190:	20000249 	.word	0x20000249
 8005194:	20000239 	.word	0x20000239
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005198:	2200      	movs	r2, #0
 800519a:	2101      	movs	r1, #1
 800519c:	4836      	ldr	r0, [pc, #216]	; (8005278 <checkAktifCalisma+0x6e8>)
 800519e:	f003 ffaa 	bl	80090f6 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80051a2:	4b36      	ldr	r3, [pc, #216]	; (800527c <checkAktifCalisma+0x6ec>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f040 8080 	bne.w	80052ac <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80051ac:	4b34      	ldr	r3, [pc, #208]	; (8005280 <checkAktifCalisma+0x6f0>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d003      	beq.n	80051bc <checkAktifCalisma+0x62c>
 80051b4:	4b32      	ldr	r3, [pc, #200]	; (8005280 <checkAktifCalisma+0x6f0>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d177      	bne.n	80052ac <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80051bc:	4b31      	ldr	r3, [pc, #196]	; (8005284 <checkAktifCalisma+0x6f4>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d073      	beq.n	80052ac <checkAktifCalisma+0x71c>
 80051c4:	4b30      	ldr	r3, [pc, #192]	; (8005288 <checkAktifCalisma+0x6f8>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d06f      	beq.n	80052ac <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80051cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051d0:	4829      	ldr	r0, [pc, #164]	; (8005278 <checkAktifCalisma+0x6e8>)
 80051d2:	f003 ff79 	bl	80090c8 <HAL_GPIO_ReadPin>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d167      	bne.n	80052ac <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80051dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80051e0:	482a      	ldr	r0, [pc, #168]	; (800528c <checkAktifCalisma+0x6fc>)
 80051e2:	f003 ff71 	bl	80090c8 <HAL_GPIO_ReadPin>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <checkAktifCalisma+0x664>
 80051ec:	4b28      	ldr	r3, [pc, #160]	; (8005290 <checkAktifCalisma+0x700>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d15b      	bne.n	80052ac <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80051f4:	2140      	movs	r1, #64	; 0x40
 80051f6:	4825      	ldr	r0, [pc, #148]	; (800528c <checkAktifCalisma+0x6fc>)
 80051f8:	f003 ff66 	bl	80090c8 <HAL_GPIO_ReadPin>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d10f      	bne.n	8005222 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005206:	481c      	ldr	r0, [pc, #112]	; (8005278 <checkAktifCalisma+0x6e8>)
 8005208:	f003 ff5e 	bl	80090c8 <HAL_GPIO_ReadPin>
 800520c:	4603      	mov	r3, r0
 800520e:	2b01      	cmp	r3, #1
 8005210:	d107      	bne.n	8005222 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005212:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005216:	4818      	ldr	r0, [pc, #96]	; (8005278 <checkAktifCalisma+0x6e8>)
 8005218:	f003 ff56 	bl	80090c8 <HAL_GPIO_ReadPin>
 800521c:	4603      	mov	r3, r0
 800521e:	2b01      	cmp	r3, #1
 8005220:	d003      	beq.n	800522a <checkAktifCalisma+0x69a>
 8005222:	4b1c      	ldr	r3, [pc, #112]	; (8005294 <checkAktifCalisma+0x704>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d040      	beq.n	80052ac <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800522a:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <checkAktifCalisma+0x708>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	f083 0301 	eor.w	r3, r3, #1
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d039      	beq.n	80052ac <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005238:	4b18      	ldr	r3, [pc, #96]	; (800529c <checkAktifCalisma+0x70c>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	f083 0301 	eor.w	r3, r3, #1
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d032      	beq.n	80052ac <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005246:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <checkAktifCalisma+0x710>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	f083 0301 	eor.w	r3, r3, #1
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d02b      	beq.n	80052ac <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005254:	4b13      	ldr	r3, [pc, #76]	; (80052a4 <checkAktifCalisma+0x714>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	f083 0301 	eor.w	r3, r3, #1
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d024      	beq.n	80052ac <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005262:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <checkAktifCalisma+0x718>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	f083 0301 	eor.w	r3, r3, #1
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01d      	beq.n	80052ac <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005270:	4b08      	ldr	r3, [pc, #32]	; (8005294 <checkAktifCalisma+0x704>)
 8005272:	2201      	movs	r2, #1
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	e01c      	b.n	80052b2 <checkAktifCalisma+0x722>
 8005278:	40010c00 	.word	0x40010c00
 800527c:	20000251 	.word	0x20000251
 8005280:	20000243 	.word	0x20000243
 8005284:	20000286 	.word	0x20000286
 8005288:	20000287 	.word	0x20000287
 800528c:	40011000 	.word	0x40011000
 8005290:	20000244 	.word	0x20000244
 8005294:	2000026a 	.word	0x2000026a
 8005298:	20000269 	.word	0x20000269
 800529c:	2000026d 	.word	0x2000026d
 80052a0:	2000026c 	.word	0x2000026c
 80052a4:	2000026b 	.word	0x2000026b
 80052a8:	2000026f 	.word	0x2000026f
		} else {
			devmotoryukaricalisiyor=0;
 80052ac:	4b64      	ldr	r3, [pc, #400]	; (8005440 <checkAktifCalisma+0x8b0>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80052b2:	4b63      	ldr	r3, [pc, #396]	; (8005440 <checkAktifCalisma+0x8b0>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80052ba:	2201      	movs	r2, #1
 80052bc:	2120      	movs	r1, #32
 80052be:	4861      	ldr	r0, [pc, #388]	; (8005444 <checkAktifCalisma+0x8b4>)
 80052c0:	f003 ff19 	bl	80090f6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80052c4:	4b60      	ldr	r3, [pc, #384]	; (8005448 <checkAktifCalisma+0x8b8>)
 80052c6:	2201      	movs	r2, #1
 80052c8:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80052ca:	4b5f      	ldr	r3, [pc, #380]	; (8005448 <checkAktifCalisma+0x8b8>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d025      	beq.n	800531e <checkAktifCalisma+0x78e>
 80052d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052d6:	485d      	ldr	r0, [pc, #372]	; (800544c <checkAktifCalisma+0x8bc>)
 80052d8:	f003 fef6 	bl	80090c8 <HAL_GPIO_ReadPin>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d007      	beq.n	80052f2 <checkAktifCalisma+0x762>
 80052e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052e6:	4857      	ldr	r0, [pc, #348]	; (8005444 <checkAktifCalisma+0x8b4>)
 80052e8:	f003 feee 	bl	80090c8 <HAL_GPIO_ReadPin>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d115      	bne.n	800531e <checkAktifCalisma+0x78e>
 80052f2:	4b57      	ldr	r3, [pc, #348]	; (8005450 <checkAktifCalisma+0x8c0>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d011      	beq.n	800531e <checkAktifCalisma+0x78e>
 80052fa:	4b56      	ldr	r3, [pc, #344]	; (8005454 <checkAktifCalisma+0x8c4>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00d      	beq.n	800531e <checkAktifCalisma+0x78e>
 8005302:	4b55      	ldr	r3, [pc, #340]	; (8005458 <checkAktifCalisma+0x8c8>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	f083 0301 	eor.w	r3, r3, #1
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d006      	beq.n	800531e <checkAktifCalisma+0x78e>
			timer2=millis;
 8005310:	4b52      	ldr	r3, [pc, #328]	; (800545c <checkAktifCalisma+0x8cc>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a52      	ldr	r2, [pc, #328]	; (8005460 <checkAktifCalisma+0x8d0>)
 8005316:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005318:	4b4f      	ldr	r3, [pc, #316]	; (8005458 <checkAktifCalisma+0x8c8>)
 800531a:	2201      	movs	r2, #1
 800531c:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800531e:	4b4f      	ldr	r3, [pc, #316]	; (800545c <checkAktifCalisma+0x8cc>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b4f      	ldr	r3, [pc, #316]	; (8005460 <checkAktifCalisma+0x8d0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	4a4e      	ldr	r2, [pc, #312]	; (8005464 <checkAktifCalisma+0x8d4>)
 800532a:	7812      	ldrb	r2, [r2, #0]
 800532c:	4293      	cmp	r3, r2
 800532e:	d303      	bcc.n	8005338 <checkAktifCalisma+0x7a8>
 8005330:	4b49      	ldr	r3, [pc, #292]	; (8005458 <checkAktifCalisma+0x8c8>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10d      	bne.n	8005354 <checkAktifCalisma+0x7c4>
 8005338:	4b45      	ldr	r3, [pc, #276]	; (8005450 <checkAktifCalisma+0x8c0>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f083 0301 	eor.w	r3, r3, #1
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <checkAktifCalisma+0x7c4>
 8005346:	4b43      	ldr	r3, [pc, #268]	; (8005454 <checkAktifCalisma+0x8c4>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	f083 0301 	eor.w	r3, r3, #1
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005354:	2200      	movs	r2, #0
 8005356:	2120      	movs	r1, #32
 8005358:	483a      	ldr	r0, [pc, #232]	; (8005444 <checkAktifCalisma+0x8b4>)
 800535a:	f003 fecc 	bl	80090f6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800535e:	4b3a      	ldr	r3, [pc, #232]	; (8005448 <checkAktifCalisma+0x8b8>)
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005364:	4b3c      	ldr	r3, [pc, #240]	; (8005458 <checkAktifCalisma+0x8c8>)
 8005366:	2200      	movs	r2, #0
 8005368:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800536a:	4b3f      	ldr	r3, [pc, #252]	; (8005468 <checkAktifCalisma+0x8d8>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	f040 8088 	bne.w	8005484 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005374:	4b3d      	ldr	r3, [pc, #244]	; (800546c <checkAktifCalisma+0x8dc>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d003      	beq.n	8005384 <checkAktifCalisma+0x7f4>
 800537c:	4b3b      	ldr	r3, [pc, #236]	; (800546c <checkAktifCalisma+0x8dc>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d17f      	bne.n	8005484 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005384:	4b32      	ldr	r3, [pc, #200]	; (8005450 <checkAktifCalisma+0x8c0>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d07b      	beq.n	8005484 <checkAktifCalisma+0x8f4>
 800538c:	4b31      	ldr	r3, [pc, #196]	; (8005454 <checkAktifCalisma+0x8c4>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d077      	beq.n	8005484 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005394:	2140      	movs	r1, #64	; 0x40
 8005396:	482b      	ldr	r0, [pc, #172]	; (8005444 <checkAktifCalisma+0x8b4>)
 8005398:	f003 fe96 	bl	80090c8 <HAL_GPIO_ReadPin>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d170      	bne.n	8005484 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80053a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053a6:	4827      	ldr	r0, [pc, #156]	; (8005444 <checkAktifCalisma+0x8b4>)
 80053a8:	f003 fe8e 	bl	80090c8 <HAL_GPIO_ReadPin>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <checkAktifCalisma+0x82a>
 80053b2:	4b2f      	ldr	r3, [pc, #188]	; (8005470 <checkAktifCalisma+0x8e0>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d164      	bne.n	8005484 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80053ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053be:	4823      	ldr	r0, [pc, #140]	; (800544c <checkAktifCalisma+0x8bc>)
 80053c0:	f003 fe82 	bl	80090c8 <HAL_GPIO_ReadPin>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d10f      	bne.n	80053ea <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80053ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053ce:	481f      	ldr	r0, [pc, #124]	; (800544c <checkAktifCalisma+0x8bc>)
 80053d0:	f003 fe7a 	bl	80090c8 <HAL_GPIO_ReadPin>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d107      	bne.n	80053ea <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80053da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053de:	481b      	ldr	r0, [pc, #108]	; (800544c <checkAktifCalisma+0x8bc>)
 80053e0:	f003 fe72 	bl	80090c8 <HAL_GPIO_ReadPin>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d003      	beq.n	80053f2 <checkAktifCalisma+0x862>
 80053ea:	4b22      	ldr	r3, [pc, #136]	; (8005474 <checkAktifCalisma+0x8e4>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d048      	beq.n	8005484 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80053f2:	4b21      	ldr	r3, [pc, #132]	; (8005478 <checkAktifCalisma+0x8e8>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	f083 0301 	eor.w	r3, r3, #1
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d041      	beq.n	8005484 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005400:	4b1e      	ldr	r3, [pc, #120]	; (800547c <checkAktifCalisma+0x8ec>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	f083 0301 	eor.w	r3, r3, #1
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d03a      	beq.n	8005484 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800540e:	4b1c      	ldr	r3, [pc, #112]	; (8005480 <checkAktifCalisma+0x8f0>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	f083 0301 	eor.w	r3, r3, #1
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d033      	beq.n	8005484 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <checkAktifCalisma+0x8b8>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	f083 0301 	eor.w	r3, r3, #1
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d02c      	beq.n	8005484 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800542a:	4b05      	ldr	r3, [pc, #20]	; (8005440 <checkAktifCalisma+0x8b0>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	f083 0301 	eor.w	r3, r3, #1
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d025      	beq.n	8005484 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005438:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <checkAktifCalisma+0x8e4>)
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	e024      	b.n	800548a <checkAktifCalisma+0x8fa>
 8005440:	2000026a 	.word	0x2000026a
 8005444:	40011000 	.word	0x40011000
 8005448:	2000026e 	.word	0x2000026e
 800544c:	40010c00 	.word	0x40010c00
 8005450:	20000286 	.word	0x20000286
 8005454:	20000287 	.word	0x20000287
 8005458:	20000266 	.word	0x20000266
 800545c:	20000210 	.word	0x20000210
 8005460:	2000021c 	.word	0x2000021c
 8005464:	2000024a 	.word	0x2000024a
 8005468:	20000251 	.word	0x20000251
 800546c:	20000243 	.word	0x20000243
 8005470:	20000245 	.word	0x20000245
 8005474:	2000026b 	.word	0x2000026b
 8005478:	20000269 	.word	0x20000269
 800547c:	2000026d 	.word	0x2000026d
 8005480:	2000026c 	.word	0x2000026c
		} else {
			devmotorasagicalisiyor=0;
 8005484:	4b96      	ldr	r3, [pc, #600]	; (80056e0 <checkAktifCalisma+0xb50>)
 8005486:	2200      	movs	r2, #0
 8005488:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800548a:	4b95      	ldr	r3, [pc, #596]	; (80056e0 <checkAktifCalisma+0xb50>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005492:	2201      	movs	r2, #1
 8005494:	2110      	movs	r1, #16
 8005496:	4893      	ldr	r0, [pc, #588]	; (80056e4 <checkAktifCalisma+0xb54>)
 8005498:	f003 fe2d 	bl	80090f6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 800549c:	4b92      	ldr	r3, [pc, #584]	; (80056e8 <checkAktifCalisma+0xb58>)
 800549e:	2201      	movs	r2, #1
 80054a0:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80054a2:	4b91      	ldr	r3, [pc, #580]	; (80056e8 <checkAktifCalisma+0xb58>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d024      	beq.n	80054f4 <checkAktifCalisma+0x964>
 80054aa:	2140      	movs	r1, #64	; 0x40
 80054ac:	488d      	ldr	r0, [pc, #564]	; (80056e4 <checkAktifCalisma+0xb54>)
 80054ae:	f003 fe0b 	bl	80090c8 <HAL_GPIO_ReadPin>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d007      	beq.n	80054c8 <checkAktifCalisma+0x938>
 80054b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054bc:	4889      	ldr	r0, [pc, #548]	; (80056e4 <checkAktifCalisma+0xb54>)
 80054be:	f003 fe03 	bl	80090c8 <HAL_GPIO_ReadPin>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d115      	bne.n	80054f4 <checkAktifCalisma+0x964>
 80054c8:	4b88      	ldr	r3, [pc, #544]	; (80056ec <checkAktifCalisma+0xb5c>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d011      	beq.n	80054f4 <checkAktifCalisma+0x964>
 80054d0:	4b87      	ldr	r3, [pc, #540]	; (80056f0 <checkAktifCalisma+0xb60>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00d      	beq.n	80054f4 <checkAktifCalisma+0x964>
 80054d8:	4b86      	ldr	r3, [pc, #536]	; (80056f4 <checkAktifCalisma+0xb64>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	f083 0301 	eor.w	r3, r3, #1
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d006      	beq.n	80054f4 <checkAktifCalisma+0x964>
			timer2=millis;
 80054e6:	4b84      	ldr	r3, [pc, #528]	; (80056f8 <checkAktifCalisma+0xb68>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a84      	ldr	r2, [pc, #528]	; (80056fc <checkAktifCalisma+0xb6c>)
 80054ec:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80054ee:	4b81      	ldr	r3, [pc, #516]	; (80056f4 <checkAktifCalisma+0xb64>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80054f4:	4b80      	ldr	r3, [pc, #512]	; (80056f8 <checkAktifCalisma+0xb68>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4b80      	ldr	r3, [pc, #512]	; (80056fc <checkAktifCalisma+0xb6c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	4a80      	ldr	r2, [pc, #512]	; (8005700 <checkAktifCalisma+0xb70>)
 8005500:	7812      	ldrb	r2, [r2, #0]
 8005502:	4293      	cmp	r3, r2
 8005504:	d303      	bcc.n	800550e <checkAktifCalisma+0x97e>
 8005506:	4b7b      	ldr	r3, [pc, #492]	; (80056f4 <checkAktifCalisma+0xb64>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10d      	bne.n	800552a <checkAktifCalisma+0x99a>
 800550e:	4b77      	ldr	r3, [pc, #476]	; (80056ec <checkAktifCalisma+0xb5c>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	f083 0301 	eor.w	r3, r3, #1
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d106      	bne.n	800552a <checkAktifCalisma+0x99a>
 800551c:	4b74      	ldr	r3, [pc, #464]	; (80056f0 <checkAktifCalisma+0xb60>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	f083 0301 	eor.w	r3, r3, #1
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800552a:	2200      	movs	r2, #0
 800552c:	2110      	movs	r1, #16
 800552e:	486d      	ldr	r0, [pc, #436]	; (80056e4 <checkAktifCalisma+0xb54>)
 8005530:	f003 fde1 	bl	80090f6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005534:	4b6c      	ldr	r3, [pc, #432]	; (80056e8 <checkAktifCalisma+0xb58>)
 8005536:	2200      	movs	r2, #0
 8005538:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800553a:	4b6e      	ldr	r3, [pc, #440]	; (80056f4 <checkAktifCalisma+0xb64>)
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005540:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005544:	486f      	ldr	r0, [pc, #444]	; (8005704 <checkAktifCalisma+0xb74>)
 8005546:	f003 fdbf 	bl	80090c8 <HAL_GPIO_ReadPin>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d120      	bne.n	8005592 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005554:	486b      	ldr	r0, [pc, #428]	; (8005704 <checkAktifCalisma+0xb74>)
 8005556:	f003 fdb7 	bl	80090c8 <HAL_GPIO_ReadPin>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d118      	bne.n	8005592 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005560:	2104      	movs	r1, #4
 8005562:	4868      	ldr	r0, [pc, #416]	; (8005704 <checkAktifCalisma+0xb74>)
 8005564:	f003 fdb0 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d111      	bne.n	8005592 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800556e:	2102      	movs	r1, #2
 8005570:	4864      	ldr	r0, [pc, #400]	; (8005704 <checkAktifCalisma+0xb74>)
 8005572:	f003 fda9 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 800557c:	2101      	movs	r1, #1
 800557e:	4861      	ldr	r0, [pc, #388]	; (8005704 <checkAktifCalisma+0xb74>)
 8005580:	f003 fda2 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d103      	bne.n	8005592 <checkAktifCalisma+0xa02>
			makineStop=1;
 800558a:	4b5f      	ldr	r3, [pc, #380]	; (8005708 <checkAktifCalisma+0xb78>)
 800558c:	2201      	movs	r2, #1
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	e002      	b.n	8005598 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8005592:	4b5d      	ldr	r3, [pc, #372]	; (8005708 <checkAktifCalisma+0xb78>)
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005598:	4b5c      	ldr	r3, [pc, #368]	; (800570c <checkAktifCalisma+0xb7c>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d144      	bne.n	800562a <checkAktifCalisma+0xa9a>
 80055a0:	4b5b      	ldr	r3, [pc, #364]	; (8005710 <checkAktifCalisma+0xb80>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d003      	beq.n	80055b0 <checkAktifCalisma+0xa20>
 80055a8:	4b59      	ldr	r3, [pc, #356]	; (8005710 <checkAktifCalisma+0xb80>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d13c      	bne.n	800562a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	484c      	ldr	r0, [pc, #304]	; (80056e4 <checkAktifCalisma+0xb54>)
 80055b4:	f003 fd88 	bl	80090c8 <HAL_GPIO_ReadPin>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d103      	bne.n	80055c6 <checkAktifCalisma+0xa36>
 80055be:	4b55      	ldr	r3, [pc, #340]	; (8005714 <checkAktifCalisma+0xb84>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <checkAktifCalisma+0xa4e>
 80055c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055ca:	484e      	ldr	r0, [pc, #312]	; (8005704 <checkAktifCalisma+0xb74>)
 80055cc:	f003 fd7c 	bl	80090c8 <HAL_GPIO_ReadPin>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d129      	bne.n	800562a <checkAktifCalisma+0xa9a>
 80055d6:	4b4f      	ldr	r3, [pc, #316]	; (8005714 <checkAktifCalisma+0xb84>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d125      	bne.n	800562a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80055de:	2104      	movs	r1, #4
 80055e0:	4840      	ldr	r0, [pc, #256]	; (80056e4 <checkAktifCalisma+0xb54>)
 80055e2:	f003 fd71 	bl	80090c8 <HAL_GPIO_ReadPin>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d003      	beq.n	80055f4 <checkAktifCalisma+0xa64>
 80055ec:	4b4a      	ldr	r3, [pc, #296]	; (8005718 <checkAktifCalisma+0xb88>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d11a      	bne.n	800562a <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80055f4:	2102      	movs	r1, #2
 80055f6:	483b      	ldr	r0, [pc, #236]	; (80056e4 <checkAktifCalisma+0xb54>)
 80055f8:	f003 fd66 	bl	80090c8 <HAL_GPIO_ReadPin>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d113      	bne.n	800562a <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005602:	4b46      	ldr	r3, [pc, #280]	; (800571c <checkAktifCalisma+0xb8c>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	f083 0301 	eor.w	r3, r3, #1
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00c      	beq.n	800562a <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005610:	4b3d      	ldr	r3, [pc, #244]	; (8005708 <checkAktifCalisma+0xb78>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d008      	beq.n	800562a <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005618:	4b41      	ldr	r3, [pc, #260]	; (8005720 <checkAktifCalisma+0xb90>)
 800561a:	2201      	movs	r2, #1
 800561c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800561e:	4b36      	ldr	r3, [pc, #216]	; (80056f8 <checkAktifCalisma+0xb68>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a40      	ldr	r2, [pc, #256]	; (8005724 <checkAktifCalisma+0xb94>)
 8005624:	6013      	str	r3, [r2, #0]
			bekle();
 8005626:	f7ff f935 	bl	8004894 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800562a:	4b33      	ldr	r3, [pc, #204]	; (80056f8 <checkAktifCalisma+0xb68>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	4b3d      	ldr	r3, [pc, #244]	; (8005724 <checkAktifCalisma+0xb94>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	4a3c      	ldr	r2, [pc, #240]	; (8005728 <checkAktifCalisma+0xb98>)
 8005636:	7812      	ldrb	r2, [r2, #0]
 8005638:	4293      	cmp	r3, r2
 800563a:	d211      	bcs.n	8005660 <checkAktifCalisma+0xad0>
 800563c:	2104      	movs	r1, #4
 800563e:	4829      	ldr	r0, [pc, #164]	; (80056e4 <checkAktifCalisma+0xb54>)
 8005640:	f003 fd42 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <checkAktifCalisma+0xad0>
 800564a:	4b33      	ldr	r3, [pc, #204]	; (8005718 <checkAktifCalisma+0xb88>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d006      	beq.n	8005660 <checkAktifCalisma+0xad0>
 8005652:	4b2d      	ldr	r3, [pc, #180]	; (8005708 <checkAktifCalisma+0xb78>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	f083 0301 	eor.w	r3, r3, #1
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005660:	4b2f      	ldr	r3, [pc, #188]	; (8005720 <checkAktifCalisma+0xb90>)
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005666:	4b29      	ldr	r3, [pc, #164]	; (800570c <checkAktifCalisma+0xb7c>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d160      	bne.n	8005730 <checkAktifCalisma+0xba0>
 800566e:	4b28      	ldr	r3, [pc, #160]	; (8005710 <checkAktifCalisma+0xb80>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d003      	beq.n	800567e <checkAktifCalisma+0xaee>
 8005676:	4b26      	ldr	r3, [pc, #152]	; (8005710 <checkAktifCalisma+0xb80>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b03      	cmp	r3, #3
 800567c:	d158      	bne.n	8005730 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800567e:	2104      	movs	r1, #4
 8005680:	4818      	ldr	r0, [pc, #96]	; (80056e4 <checkAktifCalisma+0xb54>)
 8005682:	f003 fd21 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005686:	4603      	mov	r3, r0
 8005688:	2b01      	cmp	r3, #1
 800568a:	d003      	beq.n	8005694 <checkAktifCalisma+0xb04>
 800568c:	4b22      	ldr	r3, [pc, #136]	; (8005718 <checkAktifCalisma+0xb88>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d14d      	bne.n	8005730 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005694:	2102      	movs	r1, #2
 8005696:	4813      	ldr	r0, [pc, #76]	; (80056e4 <checkAktifCalisma+0xb54>)
 8005698:	f003 fd16 	bl	80090c8 <HAL_GPIO_ReadPin>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d146      	bne.n	8005730 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80056a2:	2180      	movs	r1, #128	; 0x80
 80056a4:	480f      	ldr	r0, [pc, #60]	; (80056e4 <checkAktifCalisma+0xb54>)
 80056a6:	f003 fd0f 	bl	80090c8 <HAL_GPIO_ReadPin>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d103      	bne.n	80056b8 <checkAktifCalisma+0xb28>
 80056b0:	4b18      	ldr	r3, [pc, #96]	; (8005714 <checkAktifCalisma+0xb84>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <checkAktifCalisma+0xb40>
 80056b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056bc:	4811      	ldr	r0, [pc, #68]	; (8005704 <checkAktifCalisma+0xb74>)
 80056be:	f003 fd03 	bl	80090c8 <HAL_GPIO_ReadPin>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d133      	bne.n	8005730 <checkAktifCalisma+0xba0>
 80056c8:	4b12      	ldr	r3, [pc, #72]	; (8005714 <checkAktifCalisma+0xb84>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d12f      	bne.n	8005730 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 80056d0:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <checkAktifCalisma+0xb78>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d02b      	beq.n	8005730 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 80056d8:	4b14      	ldr	r3, [pc, #80]	; (800572c <checkAktifCalisma+0xb9c>)
 80056da:	2201      	movs	r2, #1
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e02a      	b.n	8005736 <checkAktifCalisma+0xba6>
 80056e0:	2000026b 	.word	0x2000026b
 80056e4:	40011000 	.word	0x40011000
 80056e8:	2000026f 	.word	0x2000026f
 80056ec:	20000286 	.word	0x20000286
 80056f0:	20000287 	.word	0x20000287
 80056f4:	20000267 	.word	0x20000267
 80056f8:	20000210 	.word	0x20000210
 80056fc:	2000021c 	.word	0x2000021c
 8005700:	2000024a 	.word	0x2000024a
 8005704:	40010c00 	.word	0x40010c00
 8005708:	20000276 	.word	0x20000276
 800570c:	2000023d 	.word	0x2000023d
 8005710:	2000023c 	.word	0x2000023c
 8005714:	20000240 	.word	0x20000240
 8005718:	2000023a 	.word	0x2000023a
 800571c:	20000263 	.word	0x20000263
 8005720:	20000277 	.word	0x20000277
 8005724:	20000214 	.word	0x20000214
 8005728:	2000024d 	.word	0x2000024d
 800572c:	20000278 	.word	0x20000278
		} else {
			kapi1butonkontrol=0;
 8005730:	4b8b      	ldr	r3, [pc, #556]	; (8005960 <checkAktifCalisma+0xdd0>)
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005736:	4b8b      	ldr	r3, [pc, #556]	; (8005964 <checkAktifCalisma+0xdd4>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d121      	bne.n	8005782 <checkAktifCalisma+0xbf2>
 800573e:	4b8a      	ldr	r3, [pc, #552]	; (8005968 <checkAktifCalisma+0xdd8>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d003      	beq.n	800574e <checkAktifCalisma+0xbbe>
 8005746:	4b88      	ldr	r3, [pc, #544]	; (8005968 <checkAktifCalisma+0xdd8>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2b03      	cmp	r3, #3
 800574c:	d119      	bne.n	8005782 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800574e:	2104      	movs	r1, #4
 8005750:	4886      	ldr	r0, [pc, #536]	; (800596c <checkAktifCalisma+0xddc>)
 8005752:	f003 fcb9 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005756:	4603      	mov	r3, r0
 8005758:	2b01      	cmp	r3, #1
 800575a:	d003      	beq.n	8005764 <checkAktifCalisma+0xbd4>
 800575c:	4b84      	ldr	r3, [pc, #528]	; (8005970 <checkAktifCalisma+0xde0>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10e      	bne.n	8005782 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005764:	2102      	movs	r1, #2
 8005766:	4881      	ldr	r0, [pc, #516]	; (800596c <checkAktifCalisma+0xddc>)
 8005768:	f003 fcae 	bl	80090c8 <HAL_GPIO_ReadPin>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d107      	bne.n	8005782 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005772:	4b80      	ldr	r3, [pc, #512]	; (8005974 <checkAktifCalisma+0xde4>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800577a:	4b7f      	ldr	r3, [pc, #508]	; (8005978 <checkAktifCalisma+0xde8>)
 800577c:	2201      	movs	r2, #1
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	e002      	b.n	8005788 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005782:	4b7d      	ldr	r3, [pc, #500]	; (8005978 <checkAktifCalisma+0xde8>)
 8005784:	2200      	movs	r2, #0
 8005786:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005788:	4b75      	ldr	r3, [pc, #468]	; (8005960 <checkAktifCalisma+0xdd0>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d107      	bne.n	80057a0 <checkAktifCalisma+0xc10>
 8005790:	4b79      	ldr	r3, [pc, #484]	; (8005978 <checkAktifCalisma+0xde8>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d103      	bne.n	80057a0 <checkAktifCalisma+0xc10>
 8005798:	4b78      	ldr	r3, [pc, #480]	; (800597c <checkAktifCalisma+0xdec>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80057a0:	2201      	movs	r2, #1
 80057a2:	2180      	movs	r1, #128	; 0x80
 80057a4:	4876      	ldr	r0, [pc, #472]	; (8005980 <checkAktifCalisma+0xdf0>)
 80057a6:	f003 fca6 	bl	80090f6 <HAL_GPIO_WritePin>
 80057aa:	e004      	b.n	80057b6 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80057ac:	2200      	movs	r2, #0
 80057ae:	2180      	movs	r1, #128	; 0x80
 80057b0:	4873      	ldr	r0, [pc, #460]	; (8005980 <checkAktifCalisma+0xdf0>)
 80057b2:	f003 fca0 	bl	80090f6 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057b6:	4b73      	ldr	r3, [pc, #460]	; (8005984 <checkAktifCalisma+0xdf4>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d141      	bne.n	8005842 <checkAktifCalisma+0xcb2>
 80057be:	4b6a      	ldr	r3, [pc, #424]	; (8005968 <checkAktifCalisma+0xdd8>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d003      	beq.n	80057ce <checkAktifCalisma+0xc3e>
 80057c6:	4b68      	ldr	r3, [pc, #416]	; (8005968 <checkAktifCalisma+0xdd8>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d139      	bne.n	8005842 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80057ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057d2:	4866      	ldr	r0, [pc, #408]	; (800596c <checkAktifCalisma+0xddc>)
 80057d4:	f003 fc78 	bl	80090c8 <HAL_GPIO_ReadPin>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <checkAktifCalisma+0xc56>
 80057de:	4b6a      	ldr	r3, [pc, #424]	; (8005988 <checkAktifCalisma+0xdf8>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00b      	beq.n	80057fe <checkAktifCalisma+0xc6e>
 80057e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057ea:	4868      	ldr	r0, [pc, #416]	; (800598c <checkAktifCalisma+0xdfc>)
 80057ec:	f003 fc6c 	bl	80090c8 <HAL_GPIO_ReadPin>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d125      	bne.n	8005842 <checkAktifCalisma+0xcb2>
 80057f6:	4b64      	ldr	r3, [pc, #400]	; (8005988 <checkAktifCalisma+0xdf8>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d121      	bne.n	8005842 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80057fe:	2102      	movs	r1, #2
 8005800:	485a      	ldr	r0, [pc, #360]	; (800596c <checkAktifCalisma+0xddc>)
 8005802:	f003 fc61 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005806:	4603      	mov	r3, r0
 8005808:	2b01      	cmp	r3, #1
 800580a:	d11a      	bne.n	8005842 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800580c:	2104      	movs	r1, #4
 800580e:	4857      	ldr	r0, [pc, #348]	; (800596c <checkAktifCalisma+0xddc>)
 8005810:	f003 fc5a 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d113      	bne.n	8005842 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 800581a:	4b56      	ldr	r3, [pc, #344]	; (8005974 <checkAktifCalisma+0xde4>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00f      	beq.n	8005842 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005822:	4b5b      	ldr	r3, [pc, #364]	; (8005990 <checkAktifCalisma+0xe00>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	f083 0301 	eor.w	r3, r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005830:	4b58      	ldr	r3, [pc, #352]	; (8005994 <checkAktifCalisma+0xe04>)
 8005832:	2201      	movs	r2, #1
 8005834:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005836:	4b58      	ldr	r3, [pc, #352]	; (8005998 <checkAktifCalisma+0xe08>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a58      	ldr	r2, [pc, #352]	; (800599c <checkAktifCalisma+0xe0c>)
 800583c:	6013      	str	r3, [r2, #0]
			bekle();
 800583e:	f7ff f829 	bl	8004894 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005842:	4b55      	ldr	r3, [pc, #340]	; (8005998 <checkAktifCalisma+0xe08>)
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	4b55      	ldr	r3, [pc, #340]	; (800599c <checkAktifCalisma+0xe0c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	4a54      	ldr	r2, [pc, #336]	; (80059a0 <checkAktifCalisma+0xe10>)
 800584e:	7812      	ldrb	r2, [r2, #0]
 8005850:	4293      	cmp	r3, r2
 8005852:	d20d      	bcs.n	8005870 <checkAktifCalisma+0xce0>
 8005854:	2102      	movs	r1, #2
 8005856:	4845      	ldr	r0, [pc, #276]	; (800596c <checkAktifCalisma+0xddc>)
 8005858:	f003 fc36 	bl	80090c8 <HAL_GPIO_ReadPin>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d006      	beq.n	8005870 <checkAktifCalisma+0xce0>
 8005862:	4b44      	ldr	r3, [pc, #272]	; (8005974 <checkAktifCalisma+0xde4>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	f083 0301 	eor.w	r3, r3, #1
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005870:	4b48      	ldr	r3, [pc, #288]	; (8005994 <checkAktifCalisma+0xe04>)
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005876:	4b43      	ldr	r3, [pc, #268]	; (8005984 <checkAktifCalisma+0xdf4>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d135      	bne.n	80058ea <checkAktifCalisma+0xd5a>
 800587e:	4b3a      	ldr	r3, [pc, #232]	; (8005968 <checkAktifCalisma+0xdd8>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d003      	beq.n	800588e <checkAktifCalisma+0xcfe>
 8005886:	4b38      	ldr	r3, [pc, #224]	; (8005968 <checkAktifCalisma+0xdd8>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b03      	cmp	r3, #3
 800588c:	d12d      	bne.n	80058ea <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800588e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005892:	4836      	ldr	r0, [pc, #216]	; (800596c <checkAktifCalisma+0xddc>)
 8005894:	f003 fc18 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d103      	bne.n	80058a6 <checkAktifCalisma+0xd16>
 800589e:	4b3a      	ldr	r3, [pc, #232]	; (8005988 <checkAktifCalisma+0xdf8>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <checkAktifCalisma+0xd2e>
 80058a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058aa:	4838      	ldr	r0, [pc, #224]	; (800598c <checkAktifCalisma+0xdfc>)
 80058ac:	f003 fc0c 	bl	80090c8 <HAL_GPIO_ReadPin>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d119      	bne.n	80058ea <checkAktifCalisma+0xd5a>
 80058b6:	4b34      	ldr	r3, [pc, #208]	; (8005988 <checkAktifCalisma+0xdf8>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d115      	bne.n	80058ea <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80058be:	2102      	movs	r1, #2
 80058c0:	482a      	ldr	r0, [pc, #168]	; (800596c <checkAktifCalisma+0xddc>)
 80058c2:	f003 fc01 	bl	80090c8 <HAL_GPIO_ReadPin>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d10e      	bne.n	80058ea <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80058cc:	2104      	movs	r1, #4
 80058ce:	4827      	ldr	r0, [pc, #156]	; (800596c <checkAktifCalisma+0xddc>)
 80058d0:	f003 fbfa 	bl	80090c8 <HAL_GPIO_ReadPin>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d107      	bne.n	80058ea <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 80058da:	4b26      	ldr	r3, [pc, #152]	; (8005974 <checkAktifCalisma+0xde4>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 80058e2:	4b30      	ldr	r3, [pc, #192]	; (80059a4 <checkAktifCalisma+0xe14>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	701a      	strb	r2, [r3, #0]
 80058e8:	e002      	b.n	80058f0 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80058ea:	4b2e      	ldr	r3, [pc, #184]	; (80059a4 <checkAktifCalisma+0xe14>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058f0:	4b24      	ldr	r3, [pc, #144]	; (8005984 <checkAktifCalisma+0xdf4>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d11d      	bne.n	8005934 <checkAktifCalisma+0xda4>
 80058f8:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <checkAktifCalisma+0xdd8>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d003      	beq.n	8005908 <checkAktifCalisma+0xd78>
 8005900:	4b19      	ldr	r3, [pc, #100]	; (8005968 <checkAktifCalisma+0xdd8>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b03      	cmp	r3, #3
 8005906:	d115      	bne.n	8005934 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005908:	2102      	movs	r1, #2
 800590a:	4818      	ldr	r0, [pc, #96]	; (800596c <checkAktifCalisma+0xddc>)
 800590c:	f003 fbdc 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005910:	4603      	mov	r3, r0
 8005912:	2b01      	cmp	r3, #1
 8005914:	d10e      	bne.n	8005934 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005916:	2104      	movs	r1, #4
 8005918:	4814      	ldr	r0, [pc, #80]	; (800596c <checkAktifCalisma+0xddc>)
 800591a:	f003 fbd5 	bl	80090c8 <HAL_GPIO_ReadPin>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d107      	bne.n	8005934 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005924:	4b13      	ldr	r3, [pc, #76]	; (8005974 <checkAktifCalisma+0xde4>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 800592c:	4b1e      	ldr	r3, [pc, #120]	; (80059a8 <checkAktifCalisma+0xe18>)
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	e002      	b.n	800593a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005934:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <checkAktifCalisma+0xe18>)
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800593a:	4b1a      	ldr	r3, [pc, #104]	; (80059a4 <checkAktifCalisma+0xe14>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d107      	bne.n	8005952 <checkAktifCalisma+0xdc2>
 8005942:	4b19      	ldr	r3, [pc, #100]	; (80059a8 <checkAktifCalisma+0xe18>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <checkAktifCalisma+0xdc2>
 800594a:	4b12      	ldr	r3, [pc, #72]	; (8005994 <checkAktifCalisma+0xe04>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d02c      	beq.n	80059ac <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005952:	2201      	movs	r2, #1
 8005954:	2140      	movs	r1, #64	; 0x40
 8005956:	480a      	ldr	r0, [pc, #40]	; (8005980 <checkAktifCalisma+0xdf0>)
 8005958:	f003 fbcd 	bl	80090f6 <HAL_GPIO_WritePin>
 800595c:	e02b      	b.n	80059b6 <checkAktifCalisma+0xe26>
 800595e:	bf00      	nop
 8005960:	20000278 	.word	0x20000278
 8005964:	2000023d 	.word	0x2000023d
 8005968:	2000023c 	.word	0x2000023c
 800596c:	40011000 	.word	0x40011000
 8005970:	2000023a 	.word	0x2000023a
 8005974:	20000276 	.word	0x20000276
 8005978:	20000279 	.word	0x20000279
 800597c:	20000277 	.word	0x20000277
 8005980:	40010800 	.word	0x40010800
 8005984:	2000023e 	.word	0x2000023e
 8005988:	20000240 	.word	0x20000240
 800598c:	40010c00 	.word	0x40010c00
 8005990:	20000263 	.word	0x20000263
 8005994:	2000027a 	.word	0x2000027a
 8005998:	20000210 	.word	0x20000210
 800599c:	20000214 	.word	0x20000214
 80059a0:	2000024e 	.word	0x2000024e
 80059a4:	2000027b 	.word	0x2000027b
 80059a8:	2000027c 	.word	0x2000027c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80059ac:	2200      	movs	r2, #0
 80059ae:	2140      	movs	r1, #64	; 0x40
 80059b0:	488d      	ldr	r0, [pc, #564]	; (8005be8 <checkAktifCalisma+0x1058>)
 80059b2:	f003 fba0 	bl	80090f6 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 80059b6:	4b8d      	ldr	r3, [pc, #564]	; (8005bec <checkAktifCalisma+0x105c>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <checkAktifCalisma+0xe36>
 80059be:	4b8b      	ldr	r3, [pc, #556]	; (8005bec <checkAktifCalisma+0x105c>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d115      	bne.n	80059f2 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80059c6:	2104      	movs	r1, #4
 80059c8:	4889      	ldr	r0, [pc, #548]	; (8005bf0 <checkAktifCalisma+0x1060>)
 80059ca:	f003 fb7d 	bl	80090c8 <HAL_GPIO_ReadPin>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d003      	beq.n	80059dc <checkAktifCalisma+0xe4c>
 80059d4:	4b87      	ldr	r3, [pc, #540]	; (8005bf4 <checkAktifCalisma+0x1064>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80059dc:	2102      	movs	r1, #2
 80059de:	4884      	ldr	r0, [pc, #528]	; (8005bf0 <checkAktifCalisma+0x1060>)
 80059e0:	f003 fb72 	bl	80090c8 <HAL_GPIO_ReadPin>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 80059ea:	4b83      	ldr	r3, [pc, #524]	; (8005bf8 <checkAktifCalisma+0x1068>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	e002      	b.n	80059f8 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 80059f2:	4b81      	ldr	r3, [pc, #516]	; (8005bf8 <checkAktifCalisma+0x1068>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80059f8:	4b7c      	ldr	r3, [pc, #496]	; (8005bec <checkAktifCalisma+0x105c>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d003      	beq.n	8005a08 <checkAktifCalisma+0xe78>
 8005a00:	4b7a      	ldr	r3, [pc, #488]	; (8005bec <checkAktifCalisma+0x105c>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d111      	bne.n	8005a2c <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a08:	2102      	movs	r1, #2
 8005a0a:	4879      	ldr	r0, [pc, #484]	; (8005bf0 <checkAktifCalisma+0x1060>)
 8005a0c:	f003 fb5c 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d10a      	bne.n	8005a2c <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005a16:	2104      	movs	r1, #4
 8005a18:	4875      	ldr	r0, [pc, #468]	; (8005bf0 <checkAktifCalisma+0x1060>)
 8005a1a:	f003 fb55 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d103      	bne.n	8005a2c <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005a24:	4b75      	ldr	r3, [pc, #468]	; (8005bfc <checkAktifCalisma+0x106c>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	e002      	b.n	8005a32 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005a2c:	4b73      	ldr	r3, [pc, #460]	; (8005bfc <checkAktifCalisma+0x106c>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005a32:	4b71      	ldr	r3, [pc, #452]	; (8005bf8 <checkAktifCalisma+0x1068>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00f      	beq.n	8005a5a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005a3a:	4b71      	ldr	r3, [pc, #452]	; (8005c00 <checkAktifCalisma+0x1070>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d10b      	bne.n	8005a5a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005a42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a46:	486f      	ldr	r0, [pc, #444]	; (8005c04 <checkAktifCalisma+0x1074>)
 8005a48:	f003 fb3e 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d103      	bne.n	8005a5a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005a52:	4b6d      	ldr	r3, [pc, #436]	; (8005c08 <checkAktifCalisma+0x1078>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	e002      	b.n	8005a60 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005a5a:	4b6b      	ldr	r3, [pc, #428]	; (8005c08 <checkAktifCalisma+0x1078>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005a60:	4b66      	ldr	r3, [pc, #408]	; (8005bfc <checkAktifCalisma+0x106c>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00f      	beq.n	8005a88 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005a68:	4b65      	ldr	r3, [pc, #404]	; (8005c00 <checkAktifCalisma+0x1070>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d10b      	bne.n	8005a88 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005a70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a74:	4863      	ldr	r0, [pc, #396]	; (8005c04 <checkAktifCalisma+0x1074>)
 8005a76:	f003 fb27 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d103      	bne.n	8005a88 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005a80:	4b62      	ldr	r3, [pc, #392]	; (8005c0c <checkAktifCalisma+0x107c>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	701a      	strb	r2, [r3, #0]
 8005a86:	e002      	b.n	8005a8e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005a88:	4b60      	ldr	r3, [pc, #384]	; (8005c0c <checkAktifCalisma+0x107c>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005a8e:	4b60      	ldr	r3, [pc, #384]	; (8005c10 <checkAktifCalisma+0x1080>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d137      	bne.n	8005b06 <checkAktifCalisma+0xf76>
 8005a96:	4b5f      	ldr	r3, [pc, #380]	; (8005c14 <checkAktifCalisma+0x1084>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d003      	beq.n	8005aa6 <checkAktifCalisma+0xf16>
 8005a9e:	4b5d      	ldr	r3, [pc, #372]	; (8005c14 <checkAktifCalisma+0x1084>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d12f      	bne.n	8005b06 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005aa6:	4b54      	ldr	r3, [pc, #336]	; (8005bf8 <checkAktifCalisma+0x1068>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d103      	bne.n	8005ab6 <checkAktifCalisma+0xf26>
 8005aae:	4b53      	ldr	r3, [pc, #332]	; (8005bfc <checkAktifCalisma+0x106c>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d027      	beq.n	8005b06 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005ab6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005aba:	484d      	ldr	r0, [pc, #308]	; (8005bf0 <checkAktifCalisma+0x1060>)
 8005abc:	f003 fb04 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d103      	bne.n	8005ace <checkAktifCalisma+0xf3e>
 8005ac6:	4b4e      	ldr	r3, [pc, #312]	; (8005c00 <checkAktifCalisma+0x1070>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d007      	beq.n	8005ade <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005ace:	4b4e      	ldr	r3, [pc, #312]	; (8005c08 <checkAktifCalisma+0x1078>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <checkAktifCalisma+0xf4e>
 8005ad6:	4b4d      	ldr	r3, [pc, #308]	; (8005c0c <checkAktifCalisma+0x107c>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d013      	beq.n	8005b06 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005ade:	4b4e      	ldr	r3, [pc, #312]	; (8005c18 <checkAktifCalisma+0x1088>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00f      	beq.n	8005b06 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005ae6:	4b4d      	ldr	r3, [pc, #308]	; (8005c1c <checkAktifCalisma+0x108c>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	f083 0301 	eor.w	r3, r3, #1
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005af4:	4b4a      	ldr	r3, [pc, #296]	; (8005c20 <checkAktifCalisma+0x1090>)
 8005af6:	2201      	movs	r2, #1
 8005af8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005afa:	4b4a      	ldr	r3, [pc, #296]	; (8005c24 <checkAktifCalisma+0x1094>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a4a      	ldr	r2, [pc, #296]	; (8005c28 <checkAktifCalisma+0x1098>)
 8005b00:	6013      	str	r3, [r2, #0]
			bekle();
 8005b02:	f7fe fec7 	bl	8004894 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005b06:	4b47      	ldr	r3, [pc, #284]	; (8005c24 <checkAktifCalisma+0x1094>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4b47      	ldr	r3, [pc, #284]	; (8005c28 <checkAktifCalisma+0x1098>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	4a46      	ldr	r2, [pc, #280]	; (8005c2c <checkAktifCalisma+0x109c>)
 8005b12:	7812      	ldrb	r2, [r2, #0]
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d214      	bcs.n	8005b42 <checkAktifCalisma+0xfb2>
 8005b18:	4b37      	ldr	r3, [pc, #220]	; (8005bf8 <checkAktifCalisma+0x1068>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	f083 0301 	eor.w	r3, r3, #1
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d006      	beq.n	8005b34 <checkAktifCalisma+0xfa4>
 8005b26:	4b35      	ldr	r3, [pc, #212]	; (8005bfc <checkAktifCalisma+0x106c>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	f083 0301 	eor.w	r3, r3, #1
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d106      	bne.n	8005b42 <checkAktifCalisma+0xfb2>
 8005b34:	4b38      	ldr	r3, [pc, #224]	; (8005c18 <checkAktifCalisma+0x1088>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f083 0301 	eor.w	r3, r3, #1
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005b42:	4b37      	ldr	r3, [pc, #220]	; (8005c20 <checkAktifCalisma+0x1090>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005b48:	4b31      	ldr	r3, [pc, #196]	; (8005c10 <checkAktifCalisma+0x1080>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d12b      	bne.n	8005ba8 <checkAktifCalisma+0x1018>
 8005b50:	4b30      	ldr	r3, [pc, #192]	; (8005c14 <checkAktifCalisma+0x1084>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d003      	beq.n	8005b60 <checkAktifCalisma+0xfd0>
 8005b58:	4b2e      	ldr	r3, [pc, #184]	; (8005c14 <checkAktifCalisma+0x1084>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d123      	bne.n	8005ba8 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005b60:	4b25      	ldr	r3, [pc, #148]	; (8005bf8 <checkAktifCalisma+0x1068>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d103      	bne.n	8005b70 <checkAktifCalisma+0xfe0>
 8005b68:	4b24      	ldr	r3, [pc, #144]	; (8005bfc <checkAktifCalisma+0x106c>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01b      	beq.n	8005ba8 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005b70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b74:	481e      	ldr	r0, [pc, #120]	; (8005bf0 <checkAktifCalisma+0x1060>)
 8005b76:	f003 faa7 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d103      	bne.n	8005b88 <checkAktifCalisma+0xff8>
 8005b80:	4b1f      	ldr	r3, [pc, #124]	; (8005c00 <checkAktifCalisma+0x1070>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d007      	beq.n	8005b98 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005b88:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <checkAktifCalisma+0x1078>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d103      	bne.n	8005b98 <checkAktifCalisma+0x1008>
 8005b90:	4b1e      	ldr	r3, [pc, #120]	; (8005c0c <checkAktifCalisma+0x107c>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d007      	beq.n	8005ba8 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005b98:	4b1f      	ldr	r3, [pc, #124]	; (8005c18 <checkAktifCalisma+0x1088>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005ba0:	4b23      	ldr	r3, [pc, #140]	; (8005c30 <checkAktifCalisma+0x10a0>)
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	e002      	b.n	8005bae <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005ba8:	4b21      	ldr	r3, [pc, #132]	; (8005c30 <checkAktifCalisma+0x10a0>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005bae:	4b18      	ldr	r3, [pc, #96]	; (8005c10 <checkAktifCalisma+0x1080>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d140      	bne.n	8005c38 <checkAktifCalisma+0x10a8>
 8005bb6:	4b17      	ldr	r3, [pc, #92]	; (8005c14 <checkAktifCalisma+0x1084>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d003      	beq.n	8005bc6 <checkAktifCalisma+0x1036>
 8005bbe:	4b15      	ldr	r3, [pc, #84]	; (8005c14 <checkAktifCalisma+0x1084>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d138      	bne.n	8005c38 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <checkAktifCalisma+0x1068>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d103      	bne.n	8005bd6 <checkAktifCalisma+0x1046>
 8005bce:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <checkAktifCalisma+0x106c>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d030      	beq.n	8005c38 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005bd6:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <checkAktifCalisma+0x1088>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d02c      	beq.n	8005c38 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005bde:	4b15      	ldr	r3, [pc, #84]	; (8005c34 <checkAktifCalisma+0x10a4>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	e02b      	b.n	8005c3e <checkAktifCalisma+0x10ae>
 8005be6:	bf00      	nop
 8005be8:	40010800 	.word	0x40010800
 8005bec:	20000241 	.word	0x20000241
 8005bf0:	40011000 	.word	0x40011000
 8005bf4:	2000023a 	.word	0x2000023a
 8005bf8:	20000280 	.word	0x20000280
 8005bfc:	20000281 	.word	0x20000281
 8005c00:	20000240 	.word	0x20000240
 8005c04:	40010c00 	.word	0x40010c00
 8005c08:	20000290 	.word	0x20000290
 8005c0c:	20000291 	.word	0x20000291
 8005c10:	2000023f 	.word	0x2000023f
 8005c14:	2000023c 	.word	0x2000023c
 8005c18:	20000276 	.word	0x20000276
 8005c1c:	20000263 	.word	0x20000263
 8005c20:	2000027d 	.word	0x2000027d
 8005c24:	20000210 	.word	0x20000210
 8005c28:	20000214 	.word	0x20000214
 8005c2c:	2000024f 	.word	0x2000024f
 8005c30:	2000027e 	.word	0x2000027e
 8005c34:	2000027f 	.word	0x2000027f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005c38:	4b8b      	ldr	r3, [pc, #556]	; (8005e68 <checkAktifCalisma+0x12d8>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005c3e:	4b8b      	ldr	r3, [pc, #556]	; (8005e6c <checkAktifCalisma+0x12dc>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d107      	bne.n	8005c56 <checkAktifCalisma+0x10c6>
 8005c46:	4b8a      	ldr	r3, [pc, #552]	; (8005e70 <checkAktifCalisma+0x12e0>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <checkAktifCalisma+0x10c6>
 8005c4e:	4b86      	ldr	r3, [pc, #536]	; (8005e68 <checkAktifCalisma+0x12d8>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005c56:	2201      	movs	r2, #1
 8005c58:	2120      	movs	r1, #32
 8005c5a:	4886      	ldr	r0, [pc, #536]	; (8005e74 <checkAktifCalisma+0x12e4>)
 8005c5c:	f003 fa4b 	bl	80090f6 <HAL_GPIO_WritePin>
 8005c60:	e004      	b.n	8005c6c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005c62:	2200      	movs	r2, #0
 8005c64:	2120      	movs	r1, #32
 8005c66:	4883      	ldr	r0, [pc, #524]	; (8005e74 <checkAktifCalisma+0x12e4>)
 8005c68:	f003 fa45 	bl	80090f6 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005c6c:	4b82      	ldr	r3, [pc, #520]	; (8005e78 <checkAktifCalisma+0x12e8>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00e      	beq.n	8005c92 <checkAktifCalisma+0x1102>
 8005c74:	2102      	movs	r1, #2
 8005c76:	4881      	ldr	r0, [pc, #516]	; (8005e7c <checkAktifCalisma+0x12ec>)
 8005c78:	f003 fa26 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d107      	bne.n	8005c92 <checkAktifCalisma+0x1102>
 8005c82:	4b7f      	ldr	r3, [pc, #508]	; (8005e80 <checkAktifCalisma+0x12f0>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <checkAktifCalisma+0x1102>
 8005c8a:	4b7e      	ldr	r3, [pc, #504]	; (8005e84 <checkAktifCalisma+0x12f4>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d112      	bne.n	8005cb8 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005c92:	4b7d      	ldr	r3, [pc, #500]	; (8005e88 <checkAktifCalisma+0x12f8>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d066      	beq.n	8005d68 <checkAktifCalisma+0x11d8>
 8005c9a:	2104      	movs	r1, #4
 8005c9c:	4877      	ldr	r0, [pc, #476]	; (8005e7c <checkAktifCalisma+0x12ec>)
 8005c9e:	f003 fa13 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d15f      	bne.n	8005d68 <checkAktifCalisma+0x11d8>
 8005ca8:	4b75      	ldr	r3, [pc, #468]	; (8005e80 <checkAktifCalisma+0x12f0>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d05b      	beq.n	8005d68 <checkAktifCalisma+0x11d8>
 8005cb0:	4b74      	ldr	r3, [pc, #464]	; (8005e84 <checkAktifCalisma+0x12f4>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d057      	beq.n	8005d68 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005cb8:	4b74      	ldr	r3, [pc, #464]	; (8005e8c <checkAktifCalisma+0x12fc>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	4b72      	ldr	r3, [pc, #456]	; (8005e8c <checkAktifCalisma+0x12fc>)
 8005cc2:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005cc4:	4b71      	ldr	r3, [pc, #452]	; (8005e8c <checkAktifCalisma+0x12fc>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b09      	cmp	r3, #9
 8005cca:	d908      	bls.n	8005cde <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005ccc:	4b6f      	ldr	r3, [pc, #444]	; (8005e8c <checkAktifCalisma+0x12fc>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005cd2:	4b6f      	ldr	r3, [pc, #444]	; (8005e90 <checkAktifCalisma+0x1300>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	4b6d      	ldr	r3, [pc, #436]	; (8005e90 <checkAktifCalisma+0x1300>)
 8005cdc:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005cde:	4b6c      	ldr	r3, [pc, #432]	; (8005e90 <checkAktifCalisma+0x1300>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b09      	cmp	r3, #9
 8005ce4:	d908      	bls.n	8005cf8 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005ce6:	4b6a      	ldr	r3, [pc, #424]	; (8005e90 <checkAktifCalisma+0x1300>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005cec:	4b69      	ldr	r3, [pc, #420]	; (8005e94 <checkAktifCalisma+0x1304>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	4b67      	ldr	r3, [pc, #412]	; (8005e94 <checkAktifCalisma+0x1304>)
 8005cf6:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005cf8:	4b66      	ldr	r3, [pc, #408]	; (8005e94 <checkAktifCalisma+0x1304>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b09      	cmp	r3, #9
 8005cfe:	d908      	bls.n	8005d12 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005d00:	4b64      	ldr	r3, [pc, #400]	; (8005e94 <checkAktifCalisma+0x1304>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005d06:	4b64      	ldr	r3, [pc, #400]	; (8005e98 <checkAktifCalisma+0x1308>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	4b62      	ldr	r3, [pc, #392]	; (8005e98 <checkAktifCalisma+0x1308>)
 8005d10:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005d12:	4b61      	ldr	r3, [pc, #388]	; (8005e98 <checkAktifCalisma+0x1308>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b09      	cmp	r3, #9
 8005d18:	d908      	bls.n	8005d2c <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005d1a:	4b5f      	ldr	r3, [pc, #380]	; (8005e98 <checkAktifCalisma+0x1308>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005d20:	4b5e      	ldr	r3, [pc, #376]	; (8005e9c <checkAktifCalisma+0x130c>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	3301      	adds	r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	4b5c      	ldr	r3, [pc, #368]	; (8005e9c <checkAktifCalisma+0x130c>)
 8005d2a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005d2c:	4b5b      	ldr	r3, [pc, #364]	; (8005e9c <checkAktifCalisma+0x130c>)
 8005d2e:	781a      	ldrb	r2, [r3, #0]
 8005d30:	4b5b      	ldr	r3, [pc, #364]	; (8005ea0 <checkAktifCalisma+0x1310>)
 8005d32:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005d36:	4b58      	ldr	r3, [pc, #352]	; (8005e98 <checkAktifCalisma+0x1308>)
 8005d38:	781a      	ldrb	r2, [r3, #0]
 8005d3a:	4b59      	ldr	r3, [pc, #356]	; (8005ea0 <checkAktifCalisma+0x1310>)
 8005d3c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005d3e:	4b55      	ldr	r3, [pc, #340]	; (8005e94 <checkAktifCalisma+0x1304>)
 8005d40:	781a      	ldrb	r2, [r3, #0]
 8005d42:	4b57      	ldr	r3, [pc, #348]	; (8005ea0 <checkAktifCalisma+0x1310>)
 8005d44:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005d46:	4b52      	ldr	r3, [pc, #328]	; (8005e90 <checkAktifCalisma+0x1300>)
 8005d48:	781a      	ldrb	r2, [r3, #0]
 8005d4a:	4b55      	ldr	r3, [pc, #340]	; (8005ea0 <checkAktifCalisma+0x1310>)
 8005d4c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005d4e:	4b4f      	ldr	r3, [pc, #316]	; (8005e8c <checkAktifCalisma+0x12fc>)
 8005d50:	781a      	ldrb	r2, [r3, #0]
 8005d52:	4b53      	ldr	r3, [pc, #332]	; (8005ea0 <checkAktifCalisma+0x1310>)
 8005d54:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005d56:	4b53      	ldr	r3, [pc, #332]	; (8005ea4 <checkAktifCalisma+0x1314>)
 8005d58:	2201      	movs	r2, #1
 8005d5a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005d5c:	4b46      	ldr	r3, [pc, #280]	; (8005e78 <checkAktifCalisma+0x12e8>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005d62:	4b49      	ldr	r3, [pc, #292]	; (8005e88 <checkAktifCalisma+0x12f8>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005d68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d6c:	484e      	ldr	r0, [pc, #312]	; (8005ea8 <checkAktifCalisma+0x1318>)
 8005d6e:	f003 f9ab 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d016      	beq.n	8005da6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005d78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d7c:	484a      	ldr	r0, [pc, #296]	; (8005ea8 <checkAktifCalisma+0x1318>)
 8005d7e:	f003 f9a3 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00e      	beq.n	8005da6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005d88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d8c:	4846      	ldr	r0, [pc, #280]	; (8005ea8 <checkAktifCalisma+0x1318>)
 8005d8e:	f003 f99b 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d006      	beq.n	8005da6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005d98:	2140      	movs	r1, #64	; 0x40
 8005d9a:	4838      	ldr	r0, [pc, #224]	; (8005e7c <checkAktifCalisma+0x12ec>)
 8005d9c:	f003 f994 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d103      	bne.n	8005dae <checkAktifCalisma+0x121e>
			startBasili=1;
 8005da6:	4b41      	ldr	r3, [pc, #260]	; (8005eac <checkAktifCalisma+0x131c>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e002      	b.n	8005db4 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005dae:	4b3f      	ldr	r3, [pc, #252]	; (8005eac <checkAktifCalisma+0x131c>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005db4:	4b3d      	ldr	r3, [pc, #244]	; (8005eac <checkAktifCalisma+0x131c>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d016      	beq.n	8005dea <checkAktifCalisma+0x125a>
 8005dbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005dc0:	4839      	ldr	r0, [pc, #228]	; (8005ea8 <checkAktifCalisma+0x1318>)
 8005dc2:	f003 f981 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d10e      	bne.n	8005dea <checkAktifCalisma+0x125a>
			hataVar=1;
 8005dcc:	4b38      	ldr	r3, [pc, #224]	; (8005eb0 <checkAktifCalisma+0x1320>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005dd2:	2001      	movs	r0, #1
 8005dd4:	f7fa fe28 	bl	8000a28 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005dd8:	2001      	movs	r0, #1
 8005dda:	f7fa fdcb 	bl	8000974 <hata2EEPROM>
			convertAndSendData();
 8005dde:	f001 fc53 	bl	8007688 <convertAndSendData>
			acilstophatasi=1;
 8005de2:	4b34      	ldr	r3, [pc, #208]	; (8005eb4 <checkAktifCalisma+0x1324>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	e018      	b.n	8005e1c <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005dea:	4b32      	ldr	r3, [pc, #200]	; (8005eb4 <checkAktifCalisma+0x1324>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d014      	beq.n	8005e1c <checkAktifCalisma+0x128c>
 8005df2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005df6:	482c      	ldr	r0, [pc, #176]	; (8005ea8 <checkAktifCalisma+0x1318>)
 8005df8:	f003 f966 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10c      	bne.n	8005e1c <checkAktifCalisma+0x128c>
 8005e02:	4b2a      	ldr	r3, [pc, #168]	; (8005eac <checkAktifCalisma+0x131c>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	f083 0301 	eor.w	r3, r3, #1
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005e10:	4b28      	ldr	r3, [pc, #160]	; (8005eb4 <checkAktifCalisma+0x1324>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005e16:	2001      	movs	r0, #1
 8005e18:	f7fe fce8 	bl	80047ec <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005e1c:	4b26      	ldr	r3, [pc, #152]	; (8005eb8 <checkAktifCalisma+0x1328>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	f083 0301 	eor.w	r3, r3, #1
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d04e      	beq.n	8005ec8 <checkAktifCalisma+0x1338>
 8005e2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e2e:	481e      	ldr	r0, [pc, #120]	; (8005ea8 <checkAktifCalisma+0x1318>)
 8005e30:	f003 f94a 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <checkAktifCalisma+0x12b2>
 8005e3a:	4b20      	ldr	r3, [pc, #128]	; (8005ebc <checkAktifCalisma+0x132c>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d042      	beq.n	8005ec8 <checkAktifCalisma+0x1338>
 8005e42:	4b1f      	ldr	r3, [pc, #124]	; (8005ec0 <checkAktifCalisma+0x1330>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d13e      	bne.n	8005ec8 <checkAktifCalisma+0x1338>
			hataVar=1;
 8005e4a:	4b19      	ldr	r3, [pc, #100]	; (8005eb0 <checkAktifCalisma+0x1320>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005e50:	2002      	movs	r0, #2
 8005e52:	f7fa fde9 	bl	8000a28 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005e56:	2002      	movs	r0, #2
 8005e58:	f7fa fd8c 	bl	8000974 <hata2EEPROM>
			convertAndSendData();
 8005e5c:	f001 fc14 	bl	8007688 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005e60:	4b18      	ldr	r3, [pc, #96]	; (8005ec4 <checkAktifCalisma+0x1334>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	e047      	b.n	8005ef8 <checkAktifCalisma+0x1368>
 8005e68:	2000027f 	.word	0x2000027f
 8005e6c:	2000027e 	.word	0x2000027e
 8005e70:	2000027d 	.word	0x2000027d
 8005e74:	40010800 	.word	0x40010800
 8005e78:	20000273 	.word	0x20000273
 8005e7c:	40011000 	.word	0x40011000
 8005e80:	2000023a 	.word	0x2000023a
 8005e84:	20000276 	.word	0x20000276
 8005e88:	20000274 	.word	0x20000274
 8005e8c:	20000231 	.word	0x20000231
 8005e90:	20000232 	.word	0x20000232
 8005e94:	20000000 	.word	0x20000000
 8005e98:	20000001 	.word	0x20000001
 8005e9c:	20000233 	.word	0x20000233
 8005ea0:	2000012c 	.word	0x2000012c
 8005ea4:	20000260 	.word	0x20000260
 8005ea8:	40010c00 	.word	0x40010c00
 8005eac:	20000282 	.word	0x20000282
 8005eb0:	20000289 	.word	0x20000289
 8005eb4:	20000284 	.word	0x20000284
 8005eb8:	2000028b 	.word	0x2000028b
 8005ebc:	20000295 	.word	0x20000295
 8005ec0:	20000238 	.word	0x20000238
 8005ec4:	20000285 	.word	0x20000285
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005ec8:	4b9b      	ldr	r3, [pc, #620]	; (8006138 <checkAktifCalisma+0x15a8>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d013      	beq.n	8005ef8 <checkAktifCalisma+0x1368>
 8005ed0:	4b9a      	ldr	r3, [pc, #616]	; (800613c <checkAktifCalisma+0x15ac>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00f      	beq.n	8005ef8 <checkAktifCalisma+0x1368>
 8005ed8:	4b99      	ldr	r3, [pc, #612]	; (8006140 <checkAktifCalisma+0x15b0>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	f083 0301 	eor.w	r3, r3, #1
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d008      	beq.n	8005ef8 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005ee6:	4b94      	ldr	r3, [pc, #592]	; (8006138 <checkAktifCalisma+0x15a8>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005eec:	4b95      	ldr	r3, [pc, #596]	; (8006144 <checkAktifCalisma+0x15b4>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005ef2:	2002      	movs	r0, #2
 8005ef4:	f7fe fc7a 	bl	80047ec <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005ef8:	4b93      	ldr	r3, [pc, #588]	; (8006148 <checkAktifCalisma+0x15b8>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d11e      	bne.n	8005f3e <checkAktifCalisma+0x13ae>
 8005f00:	4b92      	ldr	r3, [pc, #584]	; (800614c <checkAktifCalisma+0x15bc>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d11a      	bne.n	8005f3e <checkAktifCalisma+0x13ae>
 8005f08:	4b91      	ldr	r3, [pc, #580]	; (8006150 <checkAktifCalisma+0x15c0>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d016      	beq.n	8005f3e <checkAktifCalisma+0x13ae>
 8005f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f14:	488f      	ldr	r0, [pc, #572]	; (8006154 <checkAktifCalisma+0x15c4>)
 8005f16:	f003 f8d7 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d10e      	bne.n	8005f3e <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005f20:	4b8d      	ldr	r3, [pc, #564]	; (8006158 <checkAktifCalisma+0x15c8>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8005f26:	2003      	movs	r0, #3
 8005f28:	f7fa fd7e 	bl	8000a28 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8005f2c:	2003      	movs	r0, #3
 8005f2e:	f7fa fd21 	bl	8000974 <hata2EEPROM>
			convertAndSendData();
 8005f32:	f001 fba9 	bl	8007688 <convertAndSendData>
			basinchatasi=1;
 8005f36:	4b89      	ldr	r3, [pc, #548]	; (800615c <checkAktifCalisma+0x15cc>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	e015      	b.n	8005f6a <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005f3e:	4b87      	ldr	r3, [pc, #540]	; (800615c <checkAktifCalisma+0x15cc>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d011      	beq.n	8005f6a <checkAktifCalisma+0x13da>
 8005f46:	4b80      	ldr	r3, [pc, #512]	; (8006148 <checkAktifCalisma+0x15b8>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d10d      	bne.n	8005f6a <checkAktifCalisma+0x13da>
 8005f4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f52:	4883      	ldr	r0, [pc, #524]	; (8006160 <checkAktifCalisma+0x15d0>)
 8005f54:	f003 f8b8 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d105      	bne.n	8005f6a <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8005f5e:	4b7f      	ldr	r3, [pc, #508]	; (800615c <checkAktifCalisma+0x15cc>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8005f64:	2003      	movs	r0, #3
 8005f66:	f7fe fc41 	bl	80047ec <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005f6a:	4b7e      	ldr	r3, [pc, #504]	; (8006164 <checkAktifCalisma+0x15d4>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d103      	bne.n	8005f7a <checkAktifCalisma+0x13ea>
 8005f72:	4b7d      	ldr	r3, [pc, #500]	; (8006168 <checkAktifCalisma+0x15d8>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d01e      	beq.n	8005fb8 <checkAktifCalisma+0x1428>
 8005f7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f7e:	487b      	ldr	r0, [pc, #492]	; (800616c <checkAktifCalisma+0x15dc>)
 8005f80:	f003 f8a2 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d116      	bne.n	8005fb8 <checkAktifCalisma+0x1428>
 8005f8a:	4b79      	ldr	r3, [pc, #484]	; (8006170 <checkAktifCalisma+0x15e0>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d003      	beq.n	8005f9a <checkAktifCalisma+0x140a>
 8005f92:	4b77      	ldr	r3, [pc, #476]	; (8006170 <checkAktifCalisma+0x15e0>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d10e      	bne.n	8005fb8 <checkAktifCalisma+0x1428>
			hataVar=1;
 8005f9a:	4b6f      	ldr	r3, [pc, #444]	; (8006158 <checkAktifCalisma+0x15c8>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8005fa0:	2004      	movs	r0, #4
 8005fa2:	f7fa fd41 	bl	8000a28 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8005fa6:	2004      	movs	r0, #4
 8005fa8:	f7fa fce4 	bl	8000974 <hata2EEPROM>
			convertAndSendData();
 8005fac:	f001 fb6c 	bl	8007688 <convertAndSendData>
			katkapisivicihatasi=1;
 8005fb0:	4b70      	ldr	r3, [pc, #448]	; (8006174 <checkAktifCalisma+0x15e4>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	e01f      	b.n	8005ff8 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005fb8:	4b6e      	ldr	r3, [pc, #440]	; (8006174 <checkAktifCalisma+0x15e4>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01b      	beq.n	8005ff8 <checkAktifCalisma+0x1468>
 8005fc0:	4b6d      	ldr	r3, [pc, #436]	; (8006178 <checkAktifCalisma+0x15e8>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d017      	beq.n	8005ff8 <checkAktifCalisma+0x1468>
 8005fc8:	4b66      	ldr	r3, [pc, #408]	; (8006164 <checkAktifCalisma+0x15d4>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	f083 0301 	eor.w	r3, r3, #1
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d010      	beq.n	8005ff8 <checkAktifCalisma+0x1468>
 8005fd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fda:	4864      	ldr	r0, [pc, #400]	; (800616c <checkAktifCalisma+0x15dc>)
 8005fdc:	f003 f874 	bl	80090c8 <HAL_GPIO_ReadPin>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d108      	bne.n	8005ff8 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8005fe6:	4b63      	ldr	r3, [pc, #396]	; (8006174 <checkAktifCalisma+0x15e4>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8005fec:	4b5e      	ldr	r3, [pc, #376]	; (8006168 <checkAktifCalisma+0x15d8>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8005ff2:	2004      	movs	r0, #4
 8005ff4:	f7fe fbfa 	bl	80047ec <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005ff8:	4b5a      	ldr	r3, [pc, #360]	; (8006164 <checkAktifCalisma+0x15d4>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d103      	bne.n	8006008 <checkAktifCalisma+0x1478>
 8006000:	4b5e      	ldr	r3, [pc, #376]	; (800617c <checkAktifCalisma+0x15ec>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d01e      	beq.n	8006046 <checkAktifCalisma+0x14b6>
 8006008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800600c:	4857      	ldr	r0, [pc, #348]	; (800616c <checkAktifCalisma+0x15dc>)
 800600e:	f003 f85b 	bl	80090c8 <HAL_GPIO_ReadPin>
 8006012:	4603      	mov	r3, r0
 8006014:	2b01      	cmp	r3, #1
 8006016:	d116      	bne.n	8006046 <checkAktifCalisma+0x14b6>
 8006018:	4b55      	ldr	r3, [pc, #340]	; (8006170 <checkAktifCalisma+0x15e0>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d003      	beq.n	8006028 <checkAktifCalisma+0x1498>
 8006020:	4b53      	ldr	r3, [pc, #332]	; (8006170 <checkAktifCalisma+0x15e0>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b03      	cmp	r3, #3
 8006026:	d10e      	bne.n	8006046 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006028:	4b4b      	ldr	r3, [pc, #300]	; (8006158 <checkAktifCalisma+0x15c8>)
 800602a:	2201      	movs	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800602e:	2005      	movs	r0, #5
 8006030:	f7fa fcfa 	bl	8000a28 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006034:	2005      	movs	r0, #5
 8006036:	f7fa fc9d 	bl	8000974 <hata2EEPROM>
			convertAndSendData();
 800603a:	f001 fb25 	bl	8007688 <convertAndSendData>
			tablakapisivicihatasi=1;
 800603e:	4b50      	ldr	r3, [pc, #320]	; (8006180 <checkAktifCalisma+0x15f0>)
 8006040:	2201      	movs	r2, #1
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	e023      	b.n	800608e <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006046:	4b4e      	ldr	r3, [pc, #312]	; (8006180 <checkAktifCalisma+0x15f0>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d01f      	beq.n	800608e <checkAktifCalisma+0x14fe>
 800604e:	4b4a      	ldr	r3, [pc, #296]	; (8006178 <checkAktifCalisma+0x15e8>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01b      	beq.n	800608e <checkAktifCalisma+0x14fe>
 8006056:	4b43      	ldr	r3, [pc, #268]	; (8006164 <checkAktifCalisma+0x15d4>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	f083 0301 	eor.w	r3, r3, #1
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d014      	beq.n	800608e <checkAktifCalisma+0x14fe>
 8006064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006068:	4840      	ldr	r0, [pc, #256]	; (800616c <checkAktifCalisma+0x15dc>)
 800606a:	f003 f82d 	bl	80090c8 <HAL_GPIO_ReadPin>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10c      	bne.n	800608e <checkAktifCalisma+0x14fe>
 8006074:	4b40      	ldr	r3, [pc, #256]	; (8006178 <checkAktifCalisma+0x15e8>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d008      	beq.n	800608e <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 800607c:	4b40      	ldr	r3, [pc, #256]	; (8006180 <checkAktifCalisma+0x15f0>)
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006082:	4b3e      	ldr	r3, [pc, #248]	; (800617c <checkAktifCalisma+0x15ec>)
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006088:	2005      	movs	r0, #5
 800608a:	f7fe fbaf 	bl	80047ec <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800608e:	4b30      	ldr	r3, [pc, #192]	; (8006150 <checkAktifCalisma+0x15c0>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d107      	bne.n	80060a6 <checkAktifCalisma+0x1516>
 8006096:	4b2a      	ldr	r3, [pc, #168]	; (8006140 <checkAktifCalisma+0x15b0>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d103      	bne.n	80060a6 <checkAktifCalisma+0x1516>
 800609e:	4b39      	ldr	r3, [pc, #228]	; (8006184 <checkAktifCalisma+0x15f4>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d016      	beq.n	80060d4 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80060a6:	4b38      	ldr	r3, [pc, #224]	; (8006188 <checkAktifCalisma+0x15f8>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b38      	ldr	r3, [pc, #224]	; (800618c <checkAktifCalisma+0x15fc>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	4a37      	ldr	r2, [pc, #220]	; (8006190 <checkAktifCalisma+0x1600>)
 80060b2:	7812      	ldrb	r2, [r2, #0]
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d30d      	bcc.n	80060d4 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80060b8:	4b27      	ldr	r3, [pc, #156]	; (8006158 <checkAktifCalisma+0x15c8>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80060be:	2006      	movs	r0, #6
 80060c0:	f7fa fcb2 	bl	8000a28 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80060c4:	2006      	movs	r0, #6
 80060c6:	f7fa fc55 	bl	8000974 <hata2EEPROM>
			  	convertAndSendData();
 80060ca:	f001 fadd 	bl	8007688 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 80060ce:	4b31      	ldr	r3, [pc, #196]	; (8006194 <checkAktifCalisma+0x1604>)
 80060d0:	2201      	movs	r2, #1
 80060d2:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80060d4:	4b2f      	ldr	r3, [pc, #188]	; (8006194 <checkAktifCalisma+0x1604>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d013      	beq.n	8006104 <checkAktifCalisma+0x1574>
 80060dc:	2108      	movs	r1, #8
 80060de:	4823      	ldr	r0, [pc, #140]	; (800616c <checkAktifCalisma+0x15dc>)
 80060e0:	f002 fff2 	bl	80090c8 <HAL_GPIO_ReadPin>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00c      	beq.n	8006104 <checkAktifCalisma+0x1574>
 80060ea:	4b1e      	ldr	r3, [pc, #120]	; (8006164 <checkAktifCalisma+0x15d4>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	f083 0301 	eor.w	r3, r3, #1
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d005      	beq.n	8006104 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80060f8:	4b26      	ldr	r3, [pc, #152]	; (8006194 <checkAktifCalisma+0x1604>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80060fe:	2006      	movs	r0, #6
 8006100:	f7fe fb74 	bl	80047ec <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006104:	4b24      	ldr	r3, [pc, #144]	; (8006198 <checkAktifCalisma+0x1608>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10b      	bne.n	8006124 <checkAktifCalisma+0x1594>
 800610c:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <checkAktifCalisma+0x15b0>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d107      	bne.n	8006124 <checkAktifCalisma+0x1594>
 8006114:	4b21      	ldr	r3, [pc, #132]	; (800619c <checkAktifCalisma+0x160c>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d103      	bne.n	8006124 <checkAktifCalisma+0x1594>
 800611c:	4b19      	ldr	r3, [pc, #100]	; (8006184 <checkAktifCalisma+0x15f4>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d03f      	beq.n	80061a4 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006124:	4b1e      	ldr	r3, [pc, #120]	; (80061a0 <checkAktifCalisma+0x1610>)
 8006126:	2200      	movs	r2, #0
 8006128:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800612a:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <checkAktifCalisma+0x15d8>)
 800612c:	2201      	movs	r2, #1
 800612e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006130:	4b12      	ldr	r3, [pc, #72]	; (800617c <checkAktifCalisma+0x15ec>)
 8006132:	2201      	movs	r2, #1
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	e03c      	b.n	80061b2 <checkAktifCalisma+0x1622>
 8006138:	20000285 	.word	0x20000285
 800613c:	2000028b 	.word	0x2000028b
 8006140:	2000026c 	.word	0x2000026c
 8006144:	20000295 	.word	0x20000295
 8006148:	20000237 	.word	0x20000237
 800614c:	2000023b 	.word	0x2000023b
 8006150:	20000288 	.word	0x20000288
 8006154:	40011000 	.word	0x40011000
 8006158:	20000289 	.word	0x20000289
 800615c:	20000292 	.word	0x20000292
 8006160:	40010c00 	.word	0x40010c00
 8006164:	20000282 	.word	0x20000282
 8006168:	20000296 	.word	0x20000296
 800616c:	40010800 	.word	0x40010800
 8006170:	2000023c 	.word	0x2000023c
 8006174:	20000293 	.word	0x20000293
 8006178:	20000276 	.word	0x20000276
 800617c:	20000297 	.word	0x20000297
 8006180:	20000294 	.word	0x20000294
 8006184:	2000026b 	.word	0x2000026b
 8006188:	20000210 	.word	0x20000210
 800618c:	20000224 	.word	0x20000224
 8006190:	2000024c 	.word	0x2000024c
 8006194:	20000283 	.word	0x20000283
 8006198:	20000269 	.word	0x20000269
 800619c:	2000026a 	.word	0x2000026a
 80061a0:	2000028a 	.word	0x2000028a
		} else {
			makineCalisiyor=1;
 80061a4:	4b1e      	ldr	r3, [pc, #120]	; (8006220 <checkAktifCalisma+0x1690>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80061aa:	4b1e      	ldr	r3, [pc, #120]	; (8006224 <checkAktifCalisma+0x1694>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a1e      	ldr	r2, [pc, #120]	; (8006228 <checkAktifCalisma+0x1698>)
 80061b0:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80061b2:	4b1e      	ldr	r3, [pc, #120]	; (800622c <checkAktifCalisma+0x169c>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d02f      	beq.n	800621a <checkAktifCalisma+0x168a>
 80061ba:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <checkAktifCalisma+0x16a0>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	f083 0301 	eor.w	r3, r3, #1
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d028      	beq.n	800621a <checkAktifCalisma+0x168a>
 80061c8:	4b1a      	ldr	r3, [pc, #104]	; (8006234 <checkAktifCalisma+0x16a4>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	f083 0301 	eor.w	r3, r3, #1
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d021      	beq.n	800621a <checkAktifCalisma+0x168a>
 80061d6:	4b18      	ldr	r3, [pc, #96]	; (8006238 <checkAktifCalisma+0x16a8>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	f083 0301 	eor.w	r3, r3, #1
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d01a      	beq.n	800621a <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80061e4:	4b15      	ldr	r3, [pc, #84]	; (800623c <checkAktifCalisma+0x16ac>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	f083 0301 	eor.w	r3, r3, #1
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d013      	beq.n	800621a <checkAktifCalisma+0x168a>
 80061f2:	4b13      	ldr	r3, [pc, #76]	; (8006240 <checkAktifCalisma+0x16b0>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	f083 0301 	eor.w	r3, r3, #1
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00c      	beq.n	800621a <checkAktifCalisma+0x168a>
 8006200:	4b10      	ldr	r3, [pc, #64]	; (8006244 <checkAktifCalisma+0x16b4>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	f083 0301 	eor.w	r3, r3, #1
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <checkAktifCalisma+0x168a>
			hataVar=0;
 800620e:	4b07      	ldr	r3, [pc, #28]	; (800622c <checkAktifCalisma+0x169c>)
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006214:	2007      	movs	r0, #7
 8006216:	f7fe fae9 	bl	80047ec <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800621a:	bf00      	nop
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	2000028a 	.word	0x2000028a
 8006224:	20000210 	.word	0x20000210
 8006228:	20000224 	.word	0x20000224
 800622c:	20000289 	.word	0x20000289
 8006230:	20000284 	.word	0x20000284
 8006234:	20000285 	.word	0x20000285
 8006238:	20000292 	.word	0x20000292
 800623c:	20000293 	.word	0x20000293
 8006240:	20000294 	.word	0x20000294
 8006244:	20000283 	.word	0x20000283

08006248 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 800624c:	4b8b      	ldr	r3, [pc, #556]	; (800647c <checkDemoModCalisma+0x234>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b01      	cmp	r3, #1
 8006252:	f040 8229 	bne.w	80066a8 <checkDemoModCalisma+0x460>
 8006256:	4b8a      	ldr	r3, [pc, #552]	; (8006480 <checkDemoModCalisma+0x238>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 8224 	beq.w	80066a8 <checkDemoModCalisma+0x460>
 8006260:	4b88      	ldr	r3, [pc, #544]	; (8006484 <checkDemoModCalisma+0x23c>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f040 821f 	bne.w	80066a8 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800626a:	2102      	movs	r1, #2
 800626c:	4886      	ldr	r0, [pc, #536]	; (8006488 <checkDemoModCalisma+0x240>)
 800626e:	f002 ff2b 	bl	80090c8 <HAL_GPIO_ReadPin>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d11d      	bne.n	80062b4 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006278:	4b84      	ldr	r3, [pc, #528]	; (800648c <checkDemoModCalisma+0x244>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	f083 0301 	eor.w	r3, r3, #1
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d016      	beq.n	80062b4 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006286:	4b82      	ldr	r3, [pc, #520]	; (8006490 <checkDemoModCalisma+0x248>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	f083 0301 	eor.w	r3, r3, #1
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00f      	beq.n	80062b4 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006294:	4b7f      	ldr	r3, [pc, #508]	; (8006494 <checkDemoModCalisma+0x24c>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	f083 0301 	eor.w	r3, r3, #1
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d008      	beq.n	80062b4 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80062a2:	2201      	movs	r2, #1
 80062a4:	2104      	movs	r1, #4
 80062a6:	487c      	ldr	r0, [pc, #496]	; (8006498 <checkDemoModCalisma+0x250>)
 80062a8:	f002 ff25 	bl	80090f6 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80062ac:	4b7b      	ldr	r3, [pc, #492]	; (800649c <checkDemoModCalisma+0x254>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	701a      	strb	r2, [r3, #0]
 80062b2:	e00e      	b.n	80062d2 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80062b4:	2102      	movs	r1, #2
 80062b6:	4874      	ldr	r0, [pc, #464]	; (8006488 <checkDemoModCalisma+0x240>)
 80062b8:	f002 ff06 	bl	80090c8 <HAL_GPIO_ReadPin>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d107      	bne.n	80062d2 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80062c2:	2200      	movs	r2, #0
 80062c4:	2104      	movs	r1, #4
 80062c6:	4874      	ldr	r0, [pc, #464]	; (8006498 <checkDemoModCalisma+0x250>)
 80062c8:	f002 ff15 	bl	80090f6 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80062cc:	4b73      	ldr	r3, [pc, #460]	; (800649c <checkDemoModCalisma+0x254>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80062d2:	4b72      	ldr	r3, [pc, #456]	; (800649c <checkDemoModCalisma+0x254>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <checkDemoModCalisma+0xaa>
 80062da:	4b6d      	ldr	r3, [pc, #436]	; (8006490 <checkDemoModCalisma+0x248>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d107      	bne.n	80062f2 <checkDemoModCalisma+0xaa>
 80062e2:	4b6c      	ldr	r3, [pc, #432]	; (8006494 <checkDemoModCalisma+0x24c>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <checkDemoModCalisma+0xaa>
 80062ea:	4b68      	ldr	r3, [pc, #416]	; (800648c <checkDemoModCalisma+0x244>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00c      	beq.n	800630c <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80062f2:	2201      	movs	r2, #1
 80062f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062f8:	4867      	ldr	r0, [pc, #412]	; (8006498 <checkDemoModCalisma+0x250>)
 80062fa:	f002 fefc 	bl	80090f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80062fe:	2201      	movs	r2, #1
 8006300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006304:	4864      	ldr	r0, [pc, #400]	; (8006498 <checkDemoModCalisma+0x250>)
 8006306:	f002 fef6 	bl	80090f6 <HAL_GPIO_WritePin>
 800630a:	e00b      	b.n	8006324 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800630c:	2200      	movs	r2, #0
 800630e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006312:	4861      	ldr	r0, [pc, #388]	; (8006498 <checkDemoModCalisma+0x250>)
 8006314:	f002 feef 	bl	80090f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006318:	2200      	movs	r2, #0
 800631a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800631e:	485e      	ldr	r0, [pc, #376]	; (8006498 <checkDemoModCalisma+0x250>)
 8006320:	f002 fee9 	bl	80090f6 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006324:	2102      	movs	r1, #2
 8006326:	4858      	ldr	r0, [pc, #352]	; (8006488 <checkDemoModCalisma+0x240>)
 8006328:	f002 fece 	bl	80090c8 <HAL_GPIO_ReadPin>
 800632c:	4603      	mov	r3, r0
 800632e:	2b01      	cmp	r3, #1
 8006330:	d10d      	bne.n	800634e <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006336:	4854      	ldr	r0, [pc, #336]	; (8006488 <checkDemoModCalisma+0x240>)
 8006338:	f002 fec6 	bl	80090c8 <HAL_GPIO_ReadPin>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d105      	bne.n	800634e <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006342:	4b56      	ldr	r3, [pc, #344]	; (800649c <checkDemoModCalisma+0x254>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	f083 0301 	eor.w	r3, r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800634e:	2102      	movs	r1, #2
 8006350:	484d      	ldr	r0, [pc, #308]	; (8006488 <checkDemoModCalisma+0x240>)
 8006352:	f002 feb9 	bl	80090c8 <HAL_GPIO_ReadPin>
 8006356:	4603      	mov	r3, r0
 8006358:	2b01      	cmp	r3, #1
 800635a:	d125      	bne.n	80063a8 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800635c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006360:	4849      	ldr	r0, [pc, #292]	; (8006488 <checkDemoModCalisma+0x240>)
 8006362:	f002 feb1 	bl	80090c8 <HAL_GPIO_ReadPin>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d11d      	bne.n	80063a8 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 800636c:	4b4b      	ldr	r3, [pc, #300]	; (800649c <checkDemoModCalisma+0x254>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	f083 0301 	eor.w	r3, r3, #1
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d016      	beq.n	80063a8 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800637a:	4b44      	ldr	r3, [pc, #272]	; (800648c <checkDemoModCalisma+0x244>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	f083 0301 	eor.w	r3, r3, #1
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00f      	beq.n	80063a8 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006388:	4b42      	ldr	r3, [pc, #264]	; (8006494 <checkDemoModCalisma+0x24c>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	f083 0301 	eor.w	r3, r3, #1
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d008      	beq.n	80063a8 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006396:	2201      	movs	r2, #1
 8006398:	2120      	movs	r1, #32
 800639a:	483b      	ldr	r0, [pc, #236]	; (8006488 <checkDemoModCalisma+0x240>)
 800639c:	f002 feab 	bl	80090f6 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80063a0:	4b3b      	ldr	r3, [pc, #236]	; (8006490 <checkDemoModCalisma+0x248>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	e007      	b.n	80063b8 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80063a8:	2200      	movs	r2, #0
 80063aa:	2120      	movs	r1, #32
 80063ac:	4836      	ldr	r0, [pc, #216]	; (8006488 <checkDemoModCalisma+0x240>)
 80063ae:	f002 fea2 	bl	80090f6 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80063b2:	4b37      	ldr	r3, [pc, #220]	; (8006490 <checkDemoModCalisma+0x248>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063b8:	2102      	movs	r1, #2
 80063ba:	4833      	ldr	r0, [pc, #204]	; (8006488 <checkDemoModCalisma+0x240>)
 80063bc:	f002 fe84 	bl	80090c8 <HAL_GPIO_ReadPin>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d125      	bne.n	8006412 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80063c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80063ca:	482f      	ldr	r0, [pc, #188]	; (8006488 <checkDemoModCalisma+0x240>)
 80063cc:	f002 fe7c 	bl	80090c8 <HAL_GPIO_ReadPin>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d11d      	bne.n	8006412 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80063d6:	4b31      	ldr	r3, [pc, #196]	; (800649c <checkDemoModCalisma+0x254>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	f083 0301 	eor.w	r3, r3, #1
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d016      	beq.n	8006412 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80063e4:	4b2a      	ldr	r3, [pc, #168]	; (8006490 <checkDemoModCalisma+0x248>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	f083 0301 	eor.w	r3, r3, #1
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00f      	beq.n	8006412 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80063f2:	4b26      	ldr	r3, [pc, #152]	; (800648c <checkDemoModCalisma+0x244>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	f083 0301 	eor.w	r3, r3, #1
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d008      	beq.n	8006412 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006400:	2201      	movs	r2, #1
 8006402:	2110      	movs	r1, #16
 8006404:	4820      	ldr	r0, [pc, #128]	; (8006488 <checkDemoModCalisma+0x240>)
 8006406:	f002 fe76 	bl	80090f6 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800640a:	4b22      	ldr	r3, [pc, #136]	; (8006494 <checkDemoModCalisma+0x24c>)
 800640c:	2201      	movs	r2, #1
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	e007      	b.n	8006422 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006412:	2200      	movs	r2, #0
 8006414:	2110      	movs	r1, #16
 8006416:	481c      	ldr	r0, [pc, #112]	; (8006488 <checkDemoModCalisma+0x240>)
 8006418:	f002 fe6d 	bl	80090f6 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 800641c:	4b1d      	ldr	r3, [pc, #116]	; (8006494 <checkDemoModCalisma+0x24c>)
 800641e:	2200      	movs	r2, #0
 8006420:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006422:	2104      	movs	r1, #4
 8006424:	4818      	ldr	r0, [pc, #96]	; (8006488 <checkDemoModCalisma+0x240>)
 8006426:	f002 fe4f 	bl	80090c8 <HAL_GPIO_ReadPin>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d139      	bne.n	80064a4 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006430:	4b1a      	ldr	r3, [pc, #104]	; (800649c <checkDemoModCalisma+0x254>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	f083 0301 	eor.w	r3, r3, #1
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d032      	beq.n	80064a4 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800643e:	4b15      	ldr	r3, [pc, #84]	; (8006494 <checkDemoModCalisma+0x24c>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	f083 0301 	eor.w	r3, r3, #1
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d02b      	beq.n	80064a4 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 800644c:	4b10      	ldr	r3, [pc, #64]	; (8006490 <checkDemoModCalisma+0x248>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	f083 0301 	eor.w	r3, r3, #1
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d024      	beq.n	80064a4 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800645a:	2201      	movs	r2, #1
 800645c:	2102      	movs	r1, #2
 800645e:	480e      	ldr	r0, [pc, #56]	; (8006498 <checkDemoModCalisma+0x250>)
 8006460:	f002 fe49 	bl	80090f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006464:	2201      	movs	r2, #1
 8006466:	2101      	movs	r1, #1
 8006468:	480b      	ldr	r0, [pc, #44]	; (8006498 <checkDemoModCalisma+0x250>)
 800646a:	f002 fe44 	bl	80090f6 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800646e:	4b07      	ldr	r3, [pc, #28]	; (800648c <checkDemoModCalisma+0x244>)
 8006470:	2201      	movs	r2, #1
 8006472:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006474:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <checkDemoModCalisma+0x258>)
 8006476:	2201      	movs	r2, #1
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	e027      	b.n	80064cc <checkDemoModCalisma+0x284>
 800647c:	20000252 	.word	0x20000252
 8006480:	20000286 	.word	0x20000286
 8006484:	20000251 	.word	0x20000251
 8006488:	40011000 	.word	0x40011000
 800648c:	2000028d 	.word	0x2000028d
 8006490:	2000028e 	.word	0x2000028e
 8006494:	2000028f 	.word	0x2000028f
 8006498:	40010c00 	.word	0x40010c00
 800649c:	2000028c 	.word	0x2000028c
 80064a0:	20000272 	.word	0x20000272
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80064a4:	2104      	movs	r1, #4
 80064a6:	48a0      	ldr	r0, [pc, #640]	; (8006728 <checkDemoModCalisma+0x4e0>)
 80064a8:	f002 fe0e 	bl	80090c8 <HAL_GPIO_ReadPin>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d10c      	bne.n	80064cc <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80064b2:	2200      	movs	r2, #0
 80064b4:	2102      	movs	r1, #2
 80064b6:	489d      	ldr	r0, [pc, #628]	; (800672c <checkDemoModCalisma+0x4e4>)
 80064b8:	f002 fe1d 	bl	80090f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80064bc:	2200      	movs	r2, #0
 80064be:	2101      	movs	r1, #1
 80064c0:	489a      	ldr	r0, [pc, #616]	; (800672c <checkDemoModCalisma+0x4e4>)
 80064c2:	f002 fe18 	bl	80090f6 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80064c6:	4b9a      	ldr	r3, [pc, #616]	; (8006730 <checkDemoModCalisma+0x4e8>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80064cc:	2104      	movs	r1, #4
 80064ce:	4896      	ldr	r0, [pc, #600]	; (8006728 <checkDemoModCalisma+0x4e0>)
 80064d0:	f002 fdfa 	bl	80090c8 <HAL_GPIO_ReadPin>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d10d      	bne.n	80064f6 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80064da:	2201      	movs	r2, #1
 80064dc:	2180      	movs	r1, #128	; 0x80
 80064de:	4895      	ldr	r0, [pc, #596]	; (8006734 <checkDemoModCalisma+0x4ec>)
 80064e0:	f002 fe09 	bl	80090f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80064e4:	2201      	movs	r2, #1
 80064e6:	2120      	movs	r1, #32
 80064e8:	4892      	ldr	r0, [pc, #584]	; (8006734 <checkDemoModCalisma+0x4ec>)
 80064ea:	f002 fe04 	bl	80090f6 <HAL_GPIO_WritePin>
			timer3 = millis;
 80064ee:	4b92      	ldr	r3, [pc, #584]	; (8006738 <checkDemoModCalisma+0x4f0>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a92      	ldr	r2, [pc, #584]	; (800673c <checkDemoModCalisma+0x4f4>)
 80064f4:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80064f6:	4b90      	ldr	r3, [pc, #576]	; (8006738 <checkDemoModCalisma+0x4f0>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	4b90      	ldr	r3, [pc, #576]	; (800673c <checkDemoModCalisma+0x4f4>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	2b04      	cmp	r3, #4
 8006502:	d909      	bls.n	8006518 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006504:	2200      	movs	r2, #0
 8006506:	2180      	movs	r1, #128	; 0x80
 8006508:	488a      	ldr	r0, [pc, #552]	; (8006734 <checkDemoModCalisma+0x4ec>)
 800650a:	f002 fdf4 	bl	80090f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800650e:	2200      	movs	r2, #0
 8006510:	2120      	movs	r1, #32
 8006512:	4888      	ldr	r0, [pc, #544]	; (8006734 <checkDemoModCalisma+0x4ec>)
 8006514:	f002 fdef 	bl	80090f6 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006518:	2102      	movs	r1, #2
 800651a:	4883      	ldr	r0, [pc, #524]	; (8006728 <checkDemoModCalisma+0x4e0>)
 800651c:	f002 fdd4 	bl	80090c8 <HAL_GPIO_ReadPin>
 8006520:	4603      	mov	r3, r0
 8006522:	2b01      	cmp	r3, #1
 8006524:	d108      	bne.n	8006538 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006526:	2201      	movs	r2, #1
 8006528:	2140      	movs	r1, #64	; 0x40
 800652a:	4882      	ldr	r0, [pc, #520]	; (8006734 <checkDemoModCalisma+0x4ec>)
 800652c:	f002 fde3 	bl	80090f6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006530:	4b81      	ldr	r3, [pc, #516]	; (8006738 <checkDemoModCalisma+0x4f0>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a81      	ldr	r2, [pc, #516]	; (800673c <checkDemoModCalisma+0x4f4>)
 8006536:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006538:	4b7f      	ldr	r3, [pc, #508]	; (8006738 <checkDemoModCalisma+0x4f0>)
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	4b7f      	ldr	r3, [pc, #508]	; (800673c <checkDemoModCalisma+0x4f4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b04      	cmp	r3, #4
 8006544:	d904      	bls.n	8006550 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006546:	2200      	movs	r2, #0
 8006548:	2140      	movs	r1, #64	; 0x40
 800654a:	487a      	ldr	r0, [pc, #488]	; (8006734 <checkDemoModCalisma+0x4ec>)
 800654c:	f002 fdd3 	bl	80090f6 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006550:	4b7b      	ldr	r3, [pc, #492]	; (8006740 <checkDemoModCalisma+0x4f8>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d058      	beq.n	800660a <checkDemoModCalisma+0x3c2>
 8006558:	4b7a      	ldr	r3, [pc, #488]	; (8006744 <checkDemoModCalisma+0x4fc>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d054      	beq.n	800660a <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006560:	4b79      	ldr	r3, [pc, #484]	; (8006748 <checkDemoModCalisma+0x500>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	b2da      	uxtb	r2, r3
 8006568:	4b77      	ldr	r3, [pc, #476]	; (8006748 <checkDemoModCalisma+0x500>)
 800656a:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 800656c:	4b76      	ldr	r3, [pc, #472]	; (8006748 <checkDemoModCalisma+0x500>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b09      	cmp	r3, #9
 8006572:	d908      	bls.n	8006586 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006574:	4b74      	ldr	r3, [pc, #464]	; (8006748 <checkDemoModCalisma+0x500>)
 8006576:	2200      	movs	r2, #0
 8006578:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800657a:	4b74      	ldr	r3, [pc, #464]	; (800674c <checkDemoModCalisma+0x504>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	3301      	adds	r3, #1
 8006580:	b2da      	uxtb	r2, r3
 8006582:	4b72      	ldr	r3, [pc, #456]	; (800674c <checkDemoModCalisma+0x504>)
 8006584:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006586:	4b71      	ldr	r3, [pc, #452]	; (800674c <checkDemoModCalisma+0x504>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b09      	cmp	r3, #9
 800658c:	d908      	bls.n	80065a0 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800658e:	4b6f      	ldr	r3, [pc, #444]	; (800674c <checkDemoModCalisma+0x504>)
 8006590:	2200      	movs	r2, #0
 8006592:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006594:	4b6e      	ldr	r3, [pc, #440]	; (8006750 <checkDemoModCalisma+0x508>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	3301      	adds	r3, #1
 800659a:	b2da      	uxtb	r2, r3
 800659c:	4b6c      	ldr	r3, [pc, #432]	; (8006750 <checkDemoModCalisma+0x508>)
 800659e:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80065a0:	4b6b      	ldr	r3, [pc, #428]	; (8006750 <checkDemoModCalisma+0x508>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b09      	cmp	r3, #9
 80065a6:	d908      	bls.n	80065ba <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80065a8:	4b69      	ldr	r3, [pc, #420]	; (8006750 <checkDemoModCalisma+0x508>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80065ae:	4b69      	ldr	r3, [pc, #420]	; (8006754 <checkDemoModCalisma+0x50c>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	3301      	adds	r3, #1
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	4b67      	ldr	r3, [pc, #412]	; (8006754 <checkDemoModCalisma+0x50c>)
 80065b8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80065ba:	4b66      	ldr	r3, [pc, #408]	; (8006754 <checkDemoModCalisma+0x50c>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b09      	cmp	r3, #9
 80065c0:	d908      	bls.n	80065d4 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80065c2:	4b64      	ldr	r3, [pc, #400]	; (8006754 <checkDemoModCalisma+0x50c>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80065c8:	4b63      	ldr	r3, [pc, #396]	; (8006758 <checkDemoModCalisma+0x510>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	3301      	adds	r3, #1
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	4b61      	ldr	r3, [pc, #388]	; (8006758 <checkDemoModCalisma+0x510>)
 80065d2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80065d4:	4b60      	ldr	r3, [pc, #384]	; (8006758 <checkDemoModCalisma+0x510>)
 80065d6:	781a      	ldrb	r2, [r3, #0]
 80065d8:	4b60      	ldr	r3, [pc, #384]	; (800675c <checkDemoModCalisma+0x514>)
 80065da:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80065de:	4b5d      	ldr	r3, [pc, #372]	; (8006754 <checkDemoModCalisma+0x50c>)
 80065e0:	781a      	ldrb	r2, [r3, #0]
 80065e2:	4b5e      	ldr	r3, [pc, #376]	; (800675c <checkDemoModCalisma+0x514>)
 80065e4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80065e6:	4b5a      	ldr	r3, [pc, #360]	; (8006750 <checkDemoModCalisma+0x508>)
 80065e8:	781a      	ldrb	r2, [r3, #0]
 80065ea:	4b5c      	ldr	r3, [pc, #368]	; (800675c <checkDemoModCalisma+0x514>)
 80065ec:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80065ee:	4b57      	ldr	r3, [pc, #348]	; (800674c <checkDemoModCalisma+0x504>)
 80065f0:	781a      	ldrb	r2, [r3, #0]
 80065f2:	4b5a      	ldr	r3, [pc, #360]	; (800675c <checkDemoModCalisma+0x514>)
 80065f4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80065f6:	4b54      	ldr	r3, [pc, #336]	; (8006748 <checkDemoModCalisma+0x500>)
 80065f8:	781a      	ldrb	r2, [r3, #0]
 80065fa:	4b58      	ldr	r3, [pc, #352]	; (800675c <checkDemoModCalisma+0x514>)
 80065fc:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80065fe:	4b58      	ldr	r3, [pc, #352]	; (8006760 <checkDemoModCalisma+0x518>)
 8006600:	2201      	movs	r2, #1
 8006602:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006604:	4b4f      	ldr	r3, [pc, #316]	; (8006744 <checkDemoModCalisma+0x4fc>)
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800660a:	4b56      	ldr	r3, [pc, #344]	; (8006764 <checkDemoModCalisma+0x51c>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f040 8087 	bne.w	8006722 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006614:	4a54      	ldr	r2, [pc, #336]	; (8006768 <checkDemoModCalisma+0x520>)
 8006616:	2101      	movs	r1, #1
 8006618:	2002      	movs	r0, #2
 800661a:	f001 fa2f 	bl	8007a7c <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800661e:	4a53      	ldr	r2, [pc, #332]	; (800676c <checkDemoModCalisma+0x524>)
 8006620:	2101      	movs	r1, #1
 8006622:	2001      	movs	r0, #1
 8006624:	f001 fa2a 	bl	8007a7c <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006628:	4b4b      	ldr	r3, [pc, #300]	; (8006758 <checkDemoModCalisma+0x510>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	220a      	movs	r2, #10
 800662e:	4950      	ldr	r1, [pc, #320]	; (8006770 <checkDemoModCalisma+0x528>)
 8006630:	4618      	mov	r0, r3
 8006632:	f005 fd9f 	bl	800c174 <itoa>
			lcd_print(2,12,snum);
 8006636:	4a4e      	ldr	r2, [pc, #312]	; (8006770 <checkDemoModCalisma+0x528>)
 8006638:	210c      	movs	r1, #12
 800663a:	2002      	movs	r0, #2
 800663c:	f001 fa1e 	bl	8007a7c <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006640:	4b44      	ldr	r3, [pc, #272]	; (8006754 <checkDemoModCalisma+0x50c>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	220a      	movs	r2, #10
 8006646:	494a      	ldr	r1, [pc, #296]	; (8006770 <checkDemoModCalisma+0x528>)
 8006648:	4618      	mov	r0, r3
 800664a:	f005 fd93 	bl	800c174 <itoa>
			lcd_print(2,13,snum);
 800664e:	4a48      	ldr	r2, [pc, #288]	; (8006770 <checkDemoModCalisma+0x528>)
 8006650:	210d      	movs	r1, #13
 8006652:	2002      	movs	r0, #2
 8006654:	f001 fa12 	bl	8007a7c <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006658:	4b3d      	ldr	r3, [pc, #244]	; (8006750 <checkDemoModCalisma+0x508>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	220a      	movs	r2, #10
 800665e:	4944      	ldr	r1, [pc, #272]	; (8006770 <checkDemoModCalisma+0x528>)
 8006660:	4618      	mov	r0, r3
 8006662:	f005 fd87 	bl	800c174 <itoa>
			lcd_print(2,14,snum);
 8006666:	4a42      	ldr	r2, [pc, #264]	; (8006770 <checkDemoModCalisma+0x528>)
 8006668:	210e      	movs	r1, #14
 800666a:	2002      	movs	r0, #2
 800666c:	f001 fa06 	bl	8007a7c <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006670:	4b36      	ldr	r3, [pc, #216]	; (800674c <checkDemoModCalisma+0x504>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	220a      	movs	r2, #10
 8006676:	493e      	ldr	r1, [pc, #248]	; (8006770 <checkDemoModCalisma+0x528>)
 8006678:	4618      	mov	r0, r3
 800667a:	f005 fd7b 	bl	800c174 <itoa>
			lcd_print(2,15,snum);
 800667e:	4a3c      	ldr	r2, [pc, #240]	; (8006770 <checkDemoModCalisma+0x528>)
 8006680:	210f      	movs	r1, #15
 8006682:	2002      	movs	r0, #2
 8006684:	f001 f9fa 	bl	8007a7c <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006688:	4b2f      	ldr	r3, [pc, #188]	; (8006748 <checkDemoModCalisma+0x500>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	220a      	movs	r2, #10
 800668e:	4938      	ldr	r1, [pc, #224]	; (8006770 <checkDemoModCalisma+0x528>)
 8006690:	4618      	mov	r0, r3
 8006692:	f005 fd6f 	bl	800c174 <itoa>
			lcd_print(2,16,snum);
 8006696:	4a36      	ldr	r2, [pc, #216]	; (8006770 <checkDemoModCalisma+0x528>)
 8006698:	2110      	movs	r1, #16
 800669a:	2002      	movs	r0, #2
 800669c:	f001 f9ee 	bl	8007a7c <lcd_print>
			mesajYazildi=1;
 80066a0:	4b34      	ldr	r3, [pc, #208]	; (8006774 <checkDemoModCalisma+0x52c>)
 80066a2:	2201      	movs	r2, #1
 80066a4:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80066a6:	e03c      	b.n	8006722 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80066a8:	4b33      	ldr	r3, [pc, #204]	; (8006778 <checkDemoModCalisma+0x530>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d003      	beq.n	80066b8 <checkDemoModCalisma+0x470>
 80066b0:	4b2c      	ldr	r3, [pc, #176]	; (8006764 <checkDemoModCalisma+0x51c>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d134      	bne.n	8006722 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80066b8:	2200      	movs	r2, #0
 80066ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066be:	481b      	ldr	r0, [pc, #108]	; (800672c <checkDemoModCalisma+0x4e4>)
 80066c0:	f002 fd19 	bl	80090f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80066c4:	2200      	movs	r2, #0
 80066c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066ca:	4818      	ldr	r0, [pc, #96]	; (800672c <checkDemoModCalisma+0x4e4>)
 80066cc:	f002 fd13 	bl	80090f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80066d0:	2200      	movs	r2, #0
 80066d2:	2104      	movs	r1, #4
 80066d4:	4815      	ldr	r0, [pc, #84]	; (800672c <checkDemoModCalisma+0x4e4>)
 80066d6:	f002 fd0e 	bl	80090f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80066da:	2200      	movs	r2, #0
 80066dc:	2102      	movs	r1, #2
 80066de:	4813      	ldr	r0, [pc, #76]	; (800672c <checkDemoModCalisma+0x4e4>)
 80066e0:	f002 fd09 	bl	80090f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80066e4:	2200      	movs	r2, #0
 80066e6:	2101      	movs	r1, #1
 80066e8:	4810      	ldr	r0, [pc, #64]	; (800672c <checkDemoModCalisma+0x4e4>)
 80066ea:	f002 fd04 	bl	80090f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80066ee:	2200      	movs	r2, #0
 80066f0:	2120      	movs	r1, #32
 80066f2:	480d      	ldr	r0, [pc, #52]	; (8006728 <checkDemoModCalisma+0x4e0>)
 80066f4:	f002 fcff 	bl	80090f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80066f8:	2200      	movs	r2, #0
 80066fa:	2110      	movs	r1, #16
 80066fc:	480a      	ldr	r0, [pc, #40]	; (8006728 <checkDemoModCalisma+0x4e0>)
 80066fe:	f002 fcfa 	bl	80090f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006702:	2200      	movs	r2, #0
 8006704:	2180      	movs	r1, #128	; 0x80
 8006706:	480b      	ldr	r0, [pc, #44]	; (8006734 <checkDemoModCalisma+0x4ec>)
 8006708:	f002 fcf5 	bl	80090f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800670c:	2200      	movs	r2, #0
 800670e:	2140      	movs	r1, #64	; 0x40
 8006710:	4808      	ldr	r0, [pc, #32]	; (8006734 <checkDemoModCalisma+0x4ec>)
 8006712:	f002 fcf0 	bl	80090f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006716:	2200      	movs	r2, #0
 8006718:	2120      	movs	r1, #32
 800671a:	4806      	ldr	r0, [pc, #24]	; (8006734 <checkDemoModCalisma+0x4ec>)
 800671c:	f002 fceb 	bl	80090f6 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006720:	e7ff      	b.n	8006722 <checkDemoModCalisma+0x4da>
 8006722:	bf00      	nop
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	40011000 	.word	0x40011000
 800672c:	40010c00 	.word	0x40010c00
 8006730:	2000028d 	.word	0x2000028d
 8006734:	40010800 	.word	0x40010800
 8006738:	20000210 	.word	0x20000210
 800673c:	20000220 	.word	0x20000220
 8006740:	2000028c 	.word	0x2000028c
 8006744:	20000272 	.word	0x20000272
 8006748:	20000231 	.word	0x20000231
 800674c:	20000232 	.word	0x20000232
 8006750:	20000000 	.word	0x20000000
 8006754:	20000001 	.word	0x20000001
 8006758:	20000233 	.word	0x20000233
 800675c:	2000012c 	.word	0x2000012c
 8006760:	20000260 	.word	0x20000260
 8006764:	20000251 	.word	0x20000251
 8006768:	0800d8d4 	.word	0x0800d8d4
 800676c:	0800d8e0 	.word	0x0800d8e0
 8006770:	2000019c 	.word	0x2000019c
 8006774:	20000268 	.word	0x20000268
 8006778:	20000252 	.word	0x20000252

0800677c <mainLoop>:

void mainLoop() {
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006782:	f7fe f923 	bl	80049cc <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006786:	2101      	movs	r1, #1
 8006788:	48ac      	ldr	r0, [pc, #688]	; (8006a3c <mainLoop+0x2c0>)
 800678a:	f002 fc9d 	bl	80090c8 <HAL_GPIO_ReadPin>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d136      	bne.n	8006802 <mainLoop+0x86>
 8006794:	2108      	movs	r1, #8
 8006796:	48aa      	ldr	r0, [pc, #680]	; (8006a40 <mainLoop+0x2c4>)
 8006798:	f002 fc96 	bl	80090c8 <HAL_GPIO_ReadPin>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d12f      	bne.n	8006802 <mainLoop+0x86>
 80067a2:	2102      	movs	r1, #2
 80067a4:	48a5      	ldr	r0, [pc, #660]	; (8006a3c <mainLoop+0x2c0>)
 80067a6:	f002 fc8f 	bl	80090c8 <HAL_GPIO_ReadPin>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d128      	bne.n	8006802 <mainLoop+0x86>
 80067b0:	2104      	movs	r1, #4
 80067b2:	48a2      	ldr	r0, [pc, #648]	; (8006a3c <mainLoop+0x2c0>)
 80067b4:	f002 fc88 	bl	80090c8 <HAL_GPIO_ReadPin>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d121      	bne.n	8006802 <mainLoop+0x86>
 80067be:	2108      	movs	r1, #8
 80067c0:	489e      	ldr	r0, [pc, #632]	; (8006a3c <mainLoop+0x2c0>)
 80067c2:	f002 fc81 	bl	80090c8 <HAL_GPIO_ReadPin>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d11a      	bne.n	8006802 <mainLoop+0x86>
 80067cc:	2180      	movs	r1, #128	; 0x80
 80067ce:	489c      	ldr	r0, [pc, #624]	; (8006a40 <mainLoop+0x2c4>)
 80067d0:	f002 fc7a 	bl	80090c8 <HAL_GPIO_ReadPin>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d113      	bne.n	8006802 <mainLoop+0x86>
 80067da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067de:	4898      	ldr	r0, [pc, #608]	; (8006a40 <mainLoop+0x2c4>)
 80067e0:	f002 fc72 	bl	80090c8 <HAL_GPIO_ReadPin>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d10b      	bne.n	8006802 <mainLoop+0x86>
 80067ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067ee:	4894      	ldr	r0, [pc, #592]	; (8006a40 <mainLoop+0x2c4>)
 80067f0:	f002 fc6a 	bl	80090c8 <HAL_GPIO_ReadPin>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d103      	bne.n	8006802 <mainLoop+0x86>
			butonKontrol=0;
 80067fa:	4b92      	ldr	r3, [pc, #584]	; (8006a44 <mainLoop+0x2c8>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	e003      	b.n	800680a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006802:	4b91      	ldr	r3, [pc, #580]	; (8006a48 <mainLoop+0x2cc>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a91      	ldr	r2, [pc, #580]	; (8006a4c <mainLoop+0x2d0>)
 8006808:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800680a:	4b91      	ldr	r3, [pc, #580]	; (8006a50 <mainLoop+0x2d4>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d03a      	beq.n	8006888 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006812:	bf00      	nop
 8006814:	488f      	ldr	r0, [pc, #572]	; (8006a54 <mainLoop+0x2d8>)
 8006816:	f003 fa80 	bl	8009d1a <HAL_I2C_GetError>
 800681a:	4603      	mov	r3, r0
 800681c:	2b04      	cmp	r3, #4
 800681e:	d0f9      	beq.n	8006814 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006820:	bf00      	nop
 8006822:	488c      	ldr	r0, [pc, #560]	; (8006a54 <mainLoop+0x2d8>)
 8006824:	f003 fa6c 	bl	8009d00 <HAL_I2C_GetState>
 8006828:	4603      	mov	r3, r0
 800682a:	2b20      	cmp	r3, #32
 800682c:	d1f9      	bne.n	8006822 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800682e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006832:	9302      	str	r3, [sp, #8]
 8006834:	236e      	movs	r3, #110	; 0x6e
 8006836:	9301      	str	r3, [sp, #4]
 8006838:	4b87      	ldr	r3, [pc, #540]	; (8006a58 <mainLoop+0x2dc>)
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	236e      	movs	r3, #110	; 0x6e
 800683e:	2200      	movs	r2, #0
 8006840:	21a0      	movs	r1, #160	; 0xa0
 8006842:	4884      	ldr	r0, [pc, #528]	; (8006a54 <mainLoop+0x2d8>)
 8006844:	f002 fefa 	bl	800963c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006848:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800684c:	f001 fe6c 	bl	8008528 <HAL_Delay>

		  hafizaYaz=0;
 8006850:	4b7f      	ldr	r3, [pc, #508]	; (8006a50 <mainLoop+0x2d4>)
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006856:	4b81      	ldr	r3, [pc, #516]	; (8006a5c <mainLoop+0x2e0>)
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d105      	bne.n	800686a <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 800685e:	4a80      	ldr	r2, [pc, #512]	; (8006a60 <mainLoop+0x2e4>)
 8006860:	2101      	movs	r1, #1
 8006862:	2002      	movs	r0, #2
 8006864:	f001 f90a 	bl	8007a7c <lcd_print>
 8006868:	e008      	b.n	800687c <mainLoop+0x100>
		  } else if(dilSecim==1) {
 800686a:	4b7c      	ldr	r3, [pc, #496]	; (8006a5c <mainLoop+0x2e0>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d104      	bne.n	800687c <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006872:	4a7c      	ldr	r2, [pc, #496]	; (8006a64 <mainLoop+0x2e8>)
 8006874:	2101      	movs	r1, #1
 8006876:	2002      	movs	r0, #2
 8006878:	f001 f900 	bl	8007a7c <lcd_print>
		  }

		  HAL_Delay(1000);
 800687c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006880:	f001 fe52 	bl	8008528 <HAL_Delay>
		  lcd_clear();
 8006884:	f001 f926 	bl	8007ad4 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006888:	4b77      	ldr	r3, [pc, #476]	; (8006a68 <mainLoop+0x2ec>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f083 0301 	eor.w	r3, r3, #1
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d06d      	beq.n	8006972 <mainLoop+0x1f6>
 8006896:	486f      	ldr	r0, [pc, #444]	; (8006a54 <mainLoop+0x2d8>)
 8006898:	f003 fa32 	bl	8009d00 <HAL_I2C_GetState>
 800689c:	4603      	mov	r3, r0
 800689e:	2b20      	cmp	r3, #32
 80068a0:	d167      	bne.n	8006972 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 80068a2:	4b72      	ldr	r3, [pc, #456]	; (8006a6c <mainLoop+0x2f0>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	f083 0301 	eor.w	r3, r3, #1
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d044      	beq.n	800693a <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 80068b0:	4a6f      	ldr	r2, [pc, #444]	; (8006a70 <mainLoop+0x2f4>)
 80068b2:	2101      	movs	r1, #1
 80068b4:	2001      	movs	r0, #1
 80068b6:	f001 f8e1 	bl	8007a7c <lcd_print>
			  if(dilSecim==0) {
 80068ba:	4b68      	ldr	r3, [pc, #416]	; (8006a5c <mainLoop+0x2e0>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d105      	bne.n	80068ce <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 80068c2:	4a6c      	ldr	r2, [pc, #432]	; (8006a74 <mainLoop+0x2f8>)
 80068c4:	2101      	movs	r1, #1
 80068c6:	2002      	movs	r0, #2
 80068c8:	f001 f8d8 	bl	8007a7c <lcd_print>
 80068cc:	e008      	b.n	80068e0 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 80068ce:	4b63      	ldr	r3, [pc, #396]	; (8006a5c <mainLoop+0x2e0>)
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d104      	bne.n	80068e0 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 80068d6:	4a68      	ldr	r2, [pc, #416]	; (8006a78 <mainLoop+0x2fc>)
 80068d8:	2101      	movs	r1, #1
 80068da:	2002      	movs	r0, #2
 80068dc:	f001 f8ce 	bl	8007a7c <lcd_print>
			  }
			  HAL_Delay(1000);
 80068e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068e4:	f001 fe20 	bl	8008528 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80068e8:	bf00      	nop
 80068ea:	485a      	ldr	r0, [pc, #360]	; (8006a54 <mainLoop+0x2d8>)
 80068ec:	f003 fa15 	bl	8009d1a <HAL_I2C_GetError>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d0f9      	beq.n	80068ea <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80068f6:	e003      	b.n	8006900 <mainLoop+0x184>
				  HAL_Delay(1000);
 80068f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068fc:	f001 fe14 	bl	8008528 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006900:	4854      	ldr	r0, [pc, #336]	; (8006a54 <mainLoop+0x2d8>)
 8006902:	f003 f9fd 	bl	8009d00 <HAL_I2C_GetState>
 8006906:	4603      	mov	r3, r0
 8006908:	2b20      	cmp	r3, #32
 800690a:	d1f5      	bne.n	80068f8 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 800690c:	4b53      	ldr	r3, [pc, #332]	; (8006a5c <mainLoop+0x2e0>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d105      	bne.n	8006920 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006914:	4a59      	ldr	r2, [pc, #356]	; (8006a7c <mainLoop+0x300>)
 8006916:	2101      	movs	r1, #1
 8006918:	2002      	movs	r0, #2
 800691a:	f001 f8af 	bl	8007a7c <lcd_print>
 800691e:	e008      	b.n	8006932 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006920:	4b4e      	ldr	r3, [pc, #312]	; (8006a5c <mainLoop+0x2e0>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d104      	bne.n	8006932 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006928:	4a55      	ldr	r2, [pc, #340]	; (8006a80 <mainLoop+0x304>)
 800692a:	2101      	movs	r1, #1
 800692c:	2002      	movs	r0, #2
 800692e:	f001 f8a5 	bl	8007a7c <lcd_print>
			  }

			  ilkOkuma=1;
 8006932:	4b4e      	ldr	r3, [pc, #312]	; (8006a6c <mainLoop+0x2f0>)
 8006934:	2201      	movs	r2, #1
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	e014      	b.n	8006964 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 800693a:	4b48      	ldr	r3, [pc, #288]	; (8006a5c <mainLoop+0x2e0>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d105      	bne.n	800694e <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006942:	4a50      	ldr	r2, [pc, #320]	; (8006a84 <mainLoop+0x308>)
 8006944:	2101      	movs	r1, #1
 8006946:	2002      	movs	r0, #2
 8006948:	f001 f898 	bl	8007a7c <lcd_print>
 800694c:	e008      	b.n	8006960 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 800694e:	4b43      	ldr	r3, [pc, #268]	; (8006a5c <mainLoop+0x2e0>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d104      	bne.n	8006960 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006956:	4a4c      	ldr	r2, [pc, #304]	; (8006a88 <mainLoop+0x30c>)
 8006958:	2101      	movs	r1, #1
 800695a:	2002      	movs	r0, #2
 800695c:	f001 f88e 	bl	8007a7c <lcd_print>
			  }
			  lcd_clear();
 8006960:	f001 f8b8 	bl	8007ad4 <lcd_clear>
		  }

		  lcd_clear();
 8006964:	f001 f8b6 	bl	8007ad4 <lcd_clear>

		  eepromKontrol();
 8006968:	f7f9 fc64 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 800696c:	4b3e      	ldr	r3, [pc, #248]	; (8006a68 <mainLoop+0x2ec>)
 800696e:	2201      	movs	r2, #1
 8006970:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006972:	4b46      	ldr	r3, [pc, #280]	; (8006a8c <mainLoop+0x310>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d11c      	bne.n	80069b4 <mainLoop+0x238>
 800697a:	4b45      	ldr	r3, [pc, #276]	; (8006a90 <mainLoop+0x314>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	f083 0301 	eor.w	r3, r3, #1
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d015      	beq.n	80069b4 <mainLoop+0x238>
 8006988:	4b42      	ldr	r3, [pc, #264]	; (8006a94 <mainLoop+0x318>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d111      	bne.n	80069b4 <mainLoop+0x238>
			lcd_clear();
 8006990:	f001 f8a0 	bl	8007ad4 <lcd_clear>
			HAL_Delay(10);
 8006994:	200a      	movs	r0, #10
 8006996:	f001 fdc7 	bl	8008528 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 800699a:	4a3f      	ldr	r2, [pc, #252]	; (8006a98 <mainLoop+0x31c>)
 800699c:	2101      	movs	r1, #1
 800699e:	2001      	movs	r0, #1
 80069a0:	f001 f86c 	bl	8007a7c <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 80069a4:	4a3d      	ldr	r2, [pc, #244]	; (8006a9c <mainLoop+0x320>)
 80069a6:	2101      	movs	r1, #1
 80069a8:	2002      	movs	r0, #2
 80069aa:	f001 f867 	bl	8007a7c <lcd_print>
			mesajYazildi=1;
 80069ae:	4b38      	ldr	r3, [pc, #224]	; (8006a90 <mainLoop+0x314>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 80069b4:	4b35      	ldr	r3, [pc, #212]	; (8006a8c <mainLoop+0x310>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d112      	bne.n	80069e2 <mainLoop+0x266>
 80069bc:	2102      	movs	r1, #2
 80069be:	481f      	ldr	r0, [pc, #124]	; (8006a3c <mainLoop+0x2c0>)
 80069c0:	f002 fb82 	bl	80090c8 <HAL_GPIO_ReadPin>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d10b      	bne.n	80069e2 <mainLoop+0x266>
 80069ca:	2104      	movs	r1, #4
 80069cc:	481b      	ldr	r0, [pc, #108]	; (8006a3c <mainLoop+0x2c0>)
 80069ce:	f002 fb7b 	bl	80090c8 <HAL_GPIO_ReadPin>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d104      	bne.n	80069e2 <mainLoop+0x266>
			menuGiris=1;
 80069d8:	4b2c      	ldr	r3, [pc, #176]	; (8006a8c <mainLoop+0x310>)
 80069da:	2201      	movs	r2, #1
 80069dc:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80069de:	f001 f879 	bl	8007ad4 <lcd_clear>
		}

		if(menuGiris==1) {
 80069e2:	4b2a      	ldr	r3, [pc, #168]	; (8006a8c <mainLoop+0x310>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d101      	bne.n	80069ee <mainLoop+0x272>
			menu();
 80069ea:	f7fa fb5b 	bl	80010a4 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80069ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069f2:	4813      	ldr	r0, [pc, #76]	; (8006a40 <mainLoop+0x2c4>)
 80069f4:	f002 fb97 	bl	8009126 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80069f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069fc:	4828      	ldr	r0, [pc, #160]	; (8006aa0 <mainLoop+0x324>)
 80069fe:	f002 fb63 	bl	80090c8 <HAL_GPIO_ReadPin>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10a      	bne.n	8006a1e <mainLoop+0x2a2>
 8006a08:	4b26      	ldr	r3, [pc, #152]	; (8006aa4 <mainLoop+0x328>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	f083 0301 	eor.w	r3, r3, #1
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <mainLoop+0x2a2>
			stopVar=1;
 8006a16:	4b24      	ldr	r3, [pc, #144]	; (8006aa8 <mainLoop+0x32c>)
 8006a18:	2201      	movs	r2, #1
 8006a1a:	701a      	strb	r2, [r3, #0]
 8006a1c:	e002      	b.n	8006a24 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006a1e:	4b22      	ldr	r3, [pc, #136]	; (8006aa8 <mainLoop+0x32c>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006a24:	f7fd ffe8 	bl	80049f8 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006a28:	f7fe f81a 	bl	8004a60 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006a2c:	f7fe f85e 	bl	8004aec <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006a30:	f7fe f8ae 	bl	8004b90 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006a34:	f7ff fc08 	bl	8006248 <checkDemoModCalisma>
		checkLCDBacklight();
 8006a38:	e6a3      	b.n	8006782 <mainLoop+0x6>
 8006a3a:	bf00      	nop
 8006a3c:	40010800 	.word	0x40010800
 8006a40:	40011000 	.word	0x40011000
 8006a44:	20000263 	.word	0x20000263
 8006a48:	20000210 	.word	0x20000210
 8006a4c:	2000022c 	.word	0x2000022c
 8006a50:	20000260 	.word	0x20000260
 8006a54:	200003bc 	.word	0x200003bc
 8006a58:	2000012c 	.word	0x2000012c
 8006a5c:	20000255 	.word	0x20000255
 8006a60:	0800d8f4 	.word	0x0800d8f4
 8006a64:	0800d908 	.word	0x0800d908
 8006a68:	20000261 	.word	0x20000261
 8006a6c:	20000262 	.word	0x20000262
 8006a70:	0800d91c 	.word	0x0800d91c
 8006a74:	0800d930 	.word	0x0800d930
 8006a78:	0800d944 	.word	0x0800d944
 8006a7c:	0800d958 	.word	0x0800d958
 8006a80:	0800d96c 	.word	0x0800d96c
 8006a84:	0800d980 	.word	0x0800d980
 8006a88:	0800d994 	.word	0x0800d994
 8006a8c:	20000251 	.word	0x20000251
 8006a90:	20000268 	.word	0x20000268
 8006a94:	20000252 	.word	0x20000252
 8006a98:	0800d9a8 	.word	0x0800d9a8
 8006a9c:	0800d9bc 	.word	0x0800d9bc
 8006aa0:	40010c00 	.word	0x40010c00
 8006aa4:	20000289 	.word	0x20000289
 8006aa8:	20000286 	.word	0x20000286

08006aac <takeMachineID>:
#include "GlobalVariables.h"
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006ab2:	2001      	movs	r0, #1
 8006ab4:	f001 f840 	bl	8007b38 <lcd_cursor>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006ab8:	2305      	movs	r3, #5
 8006aba:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006abc:	2303      	movs	r3, #3
 8006abe:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006ac4:	4ba6      	ldr	r3, [pc, #664]	; (8006d60 <takeMachineID+0x2b4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	603b      	str	r3, [r7, #0]

    memset(machineID, 0, sizeof(machineID));
 8006aca:	220c      	movs	r2, #12
 8006acc:	2100      	movs	r1, #0
 8006ace:	48a5      	ldr	r0, [pc, #660]	; (8006d64 <takeMachineID+0x2b8>)
 8006ad0:	f005 fb5a 	bl	800c188 <memset>
    HAL_Delay(100);
 8006ad4:	2064      	movs	r0, #100	; 0x64
 8006ad6:	f001 fd27 	bl	8008528 <HAL_Delay>

    printTemplate(1, 0);
 8006ada:	2100      	movs	r1, #0
 8006adc:	2001      	movs	r0, #1
 8006ade:	f7fa f955 	bl	8000d8c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006ae2:	2108      	movs	r1, #8
 8006ae4:	48a0      	ldr	r0, [pc, #640]	; (8006d68 <takeMachineID+0x2bc>)
 8006ae6:	f002 faef 	bl	80090c8 <HAL_GPIO_ReadPin>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d12b      	bne.n	8006b48 <takeMachineID+0x9c>
        	lcd_cursor(0);
 8006af0:	2000      	movs	r0, #0
 8006af2:	f001 f821 	bl	8007b38 <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006af6:	489b      	ldr	r0, [pc, #620]	; (8006d64 <takeMachineID+0x2b8>)
 8006af8:	f7f9 fb94 	bl	8000224 <strlen>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b0c      	cmp	r3, #12
 8006b00:	d010      	beq.n	8006b24 <takeMachineID+0x78>
        		lcd_clear();
 8006b02:	f000 ffe7 	bl	8007ad4 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006b06:	4a99      	ldr	r2, [pc, #612]	; (8006d6c <takeMachineID+0x2c0>)
 8006b08:	2101      	movs	r1, #1
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	f000 ffb6 	bl	8007a7c <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006b10:	4a97      	ldr	r2, [pc, #604]	; (8006d70 <takeMachineID+0x2c4>)
 8006b12:	2101      	movs	r1, #1
 8006b14:	2002      	movs	r0, #2
 8006b16:	f000 ffb1 	bl	8007a7c <lcd_print>
        		HAL_Delay(1200);
 8006b1a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006b1e:	f001 fd03 	bl	8008528 <HAL_Delay>
        		goto mainSection;
 8006b22:	e7c6      	b.n	8006ab2 <takeMachineID+0x6>
        	}

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006b24:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006b28:	9302      	str	r3, [sp, #8]
 8006b2a:	236e      	movs	r3, #110	; 0x6e
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	4b91      	ldr	r3, [pc, #580]	; (8006d74 <takeMachineID+0x2c8>)
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	236e      	movs	r3, #110	; 0x6e
 8006b34:	2200      	movs	r2, #0
 8006b36:	21a0      	movs	r1, #160	; 0xa0
 8006b38:	488f      	ldr	r0, [pc, #572]	; (8006d78 <takeMachineID+0x2cc>)
 8006b3a:	f002 fd7f 	bl	800963c <HAL_I2C_Mem_Write>
        	HAL_Delay(1000);
 8006b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b42:	f001 fcf1 	bl	8008528 <HAL_Delay>

            break;
 8006b46:	e138      	b.n	8006dba <takeMachineID+0x30e>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006b48:	2101      	movs	r1, #1
 8006b4a:	4887      	ldr	r0, [pc, #540]	; (8006d68 <takeMachineID+0x2bc>)
 8006b4c:	f002 fabc 	bl	80090c8 <HAL_GPIO_ReadPin>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d111      	bne.n	8006b7a <takeMachineID+0xce>
        	if(cursorPosition == 7) {
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b07      	cmp	r3, #7
 8006b5a:	d102      	bne.n	8006b62 <takeMachineID+0xb6>
        		cursorPosition = 10;
 8006b5c:	230a      	movs	r3, #10
 8006b5e:	60bb      	str	r3, [r7, #8]
 8006b60:	e008      	b.n	8006b74 <takeMachineID+0xc8>
        	} else if (cursorPosition == 14) {
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b0e      	cmp	r3, #14
 8006b66:	d102      	bne.n	8006b6e <takeMachineID+0xc2>
                cursorPosition = 3;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	60bb      	str	r3, [r7, #8]
 8006b6c:	e002      	b.n	8006b74 <takeMachineID+0xc8>
            } else {
            	cursorPosition++;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	3301      	adds	r3, #1
 8006b72:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006b74:	2096      	movs	r0, #150	; 0x96
 8006b76:	f001 fcd7 	bl	8008528 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006b7a:	2108      	movs	r1, #8
 8006b7c:	487f      	ldr	r0, [pc, #508]	; (8006d7c <takeMachineID+0x2d0>)
 8006b7e:	f002 faa3 	bl	80090c8 <HAL_GPIO_ReadPin>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d111      	bne.n	8006bac <takeMachineID+0x100>
            if (cursorPosition == 3) {
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d102      	bne.n	8006b94 <takeMachineID+0xe8>
                cursorPosition = 14;
 8006b8e:	230e      	movs	r3, #14
 8006b90:	60bb      	str	r3, [r7, #8]
 8006b92:	e008      	b.n	8006ba6 <takeMachineID+0xfa>
            } else if(cursorPosition == 10) {
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b0a      	cmp	r3, #10
 8006b98:	d102      	bne.n	8006ba0 <takeMachineID+0xf4>
            	cursorPosition = 7;
 8006b9a:	2307      	movs	r3, #7
 8006b9c:	60bb      	str	r3, [r7, #8]
 8006b9e:	e002      	b.n	8006ba6 <takeMachineID+0xfa>
            } else {
            	cursorPosition--;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006ba6:	2096      	movs	r0, #150	; 0x96
 8006ba8:	f001 fcbe 	bl	8008528 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006bac:	2102      	movs	r1, #2
 8006bae:	486e      	ldr	r0, [pc, #440]	; (8006d68 <takeMachineID+0x2bc>)
 8006bb0:	f002 fa8a 	bl	80090c8 <HAL_GPIO_ReadPin>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	f040 80a7 	bne.w	8006d0a <takeMachineID+0x25e>
        	if(cursorPosition == 3) {
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d10a      	bne.n	8006bd8 <takeMachineID+0x12c>
        		machineID[arrayPos] = '0';
 8006bc2:	4a68      	ldr	r2, [pc, #416]	; (8006d64 <takeMachineID+0x2b8>)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	2230      	movs	r2, #48	; 0x30
 8006bca:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006bcc:	4a69      	ldr	r2, [pc, #420]	; (8006d74 <takeMachineID+0x2c8>)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	e07c      	b.n	8006cd2 <takeMachineID+0x226>
        	} else if(cursorPosition == 4) {
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	d10a      	bne.n	8006bf4 <takeMachineID+0x148>
        		machineID[arrayPos] = '1';
 8006bde:	4a61      	ldr	r2, [pc, #388]	; (8006d64 <takeMachineID+0x2b8>)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4413      	add	r3, r2
 8006be4:	2231      	movs	r2, #49	; 0x31
 8006be6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006be8:	4a62      	ldr	r2, [pc, #392]	; (8006d74 <takeMachineID+0x2c8>)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	4413      	add	r3, r2
 8006bee:	2201      	movs	r2, #1
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	e06e      	b.n	8006cd2 <takeMachineID+0x226>
        	} else if(cursorPosition == 5) {
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2b05      	cmp	r3, #5
 8006bf8:	d10a      	bne.n	8006c10 <takeMachineID+0x164>
        		machineID[arrayPos] = '2';
 8006bfa:	4a5a      	ldr	r2, [pc, #360]	; (8006d64 <takeMachineID+0x2b8>)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4413      	add	r3, r2
 8006c00:	2232      	movs	r2, #50	; 0x32
 8006c02:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006c04:	4a5b      	ldr	r2, [pc, #364]	; (8006d74 <takeMachineID+0x2c8>)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	4413      	add	r3, r2
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	e060      	b.n	8006cd2 <takeMachineID+0x226>
        	} else if(cursorPosition == 6) {
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b06      	cmp	r3, #6
 8006c14:	d10a      	bne.n	8006c2c <takeMachineID+0x180>
        		machineID[arrayPos] = '3';
 8006c16:	4a53      	ldr	r2, [pc, #332]	; (8006d64 <takeMachineID+0x2b8>)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	2233      	movs	r2, #51	; 0x33
 8006c1e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006c20:	4a54      	ldr	r2, [pc, #336]	; (8006d74 <takeMachineID+0x2c8>)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	4413      	add	r3, r2
 8006c26:	2203      	movs	r2, #3
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	e052      	b.n	8006cd2 <takeMachineID+0x226>
        	} else if(cursorPosition == 7) {
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b07      	cmp	r3, #7
 8006c30:	d10a      	bne.n	8006c48 <takeMachineID+0x19c>
        		machineID[arrayPos] = '4';
 8006c32:	4a4c      	ldr	r2, [pc, #304]	; (8006d64 <takeMachineID+0x2b8>)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4413      	add	r3, r2
 8006c38:	2234      	movs	r2, #52	; 0x34
 8006c3a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006c3c:	4a4d      	ldr	r2, [pc, #308]	; (8006d74 <takeMachineID+0x2c8>)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	4413      	add	r3, r2
 8006c42:	2204      	movs	r2, #4
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	e044      	b.n	8006cd2 <takeMachineID+0x226>
        	} else if(cursorPosition == 10) {
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b0a      	cmp	r3, #10
 8006c4c:	d10a      	bne.n	8006c64 <takeMachineID+0x1b8>
        		machineID[arrayPos] = '5';
 8006c4e:	4a45      	ldr	r2, [pc, #276]	; (8006d64 <takeMachineID+0x2b8>)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4413      	add	r3, r2
 8006c54:	2235      	movs	r2, #53	; 0x35
 8006c56:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006c58:	4a46      	ldr	r2, [pc, #280]	; (8006d74 <takeMachineID+0x2c8>)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	2205      	movs	r2, #5
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	e036      	b.n	8006cd2 <takeMachineID+0x226>
        	} else if(cursorPosition == 11) {
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b0b      	cmp	r3, #11
 8006c68:	d10a      	bne.n	8006c80 <takeMachineID+0x1d4>
        		machineID[arrayPos] = '6';
 8006c6a:	4a3e      	ldr	r2, [pc, #248]	; (8006d64 <takeMachineID+0x2b8>)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4413      	add	r3, r2
 8006c70:	2236      	movs	r2, #54	; 0x36
 8006c72:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006c74:	4a3f      	ldr	r2, [pc, #252]	; (8006d74 <takeMachineID+0x2c8>)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	4413      	add	r3, r2
 8006c7a:	2206      	movs	r2, #6
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	e028      	b.n	8006cd2 <takeMachineID+0x226>
        	} else if(cursorPosition == 12) {
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2b0c      	cmp	r3, #12
 8006c84:	d10a      	bne.n	8006c9c <takeMachineID+0x1f0>
        		machineID[arrayPos] = '7';
 8006c86:	4a37      	ldr	r2, [pc, #220]	; (8006d64 <takeMachineID+0x2b8>)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	2237      	movs	r2, #55	; 0x37
 8006c8e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006c90:	4a38      	ldr	r2, [pc, #224]	; (8006d74 <takeMachineID+0x2c8>)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	4413      	add	r3, r2
 8006c96:	2207      	movs	r2, #7
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	e01a      	b.n	8006cd2 <takeMachineID+0x226>
        	} else if(cursorPosition == 13) {
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b0d      	cmp	r3, #13
 8006ca0:	d10a      	bne.n	8006cb8 <takeMachineID+0x20c>
        		machineID[arrayPos] = '8';
 8006ca2:	4a30      	ldr	r2, [pc, #192]	; (8006d64 <takeMachineID+0x2b8>)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	2238      	movs	r2, #56	; 0x38
 8006caa:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8006cac:	4a31      	ldr	r2, [pc, #196]	; (8006d74 <takeMachineID+0x2c8>)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	2208      	movs	r2, #8
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	e00c      	b.n	8006cd2 <takeMachineID+0x226>
        	} else if(cursorPosition == 14) {
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b0e      	cmp	r3, #14
 8006cbc:	d109      	bne.n	8006cd2 <takeMachineID+0x226>
        		machineID[arrayPos] = '9';
 8006cbe:	4a29      	ldr	r2, [pc, #164]	; (8006d64 <takeMachineID+0x2b8>)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	2239      	movs	r2, #57	; 0x39
 8006cc6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8006cc8:	4a2a      	ldr	r2, [pc, #168]	; (8006d74 <takeMachineID+0x2c8>)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	4413      	add	r3, r2
 8006cce:	2209      	movs	r2, #9
 8006cd0:	701a      	strb	r2, [r3, #0]
        	}

        	if(arrayPos == machineIDCharacterLimit - 1) {
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b0b      	cmp	r3, #11
 8006cd6:	d102      	bne.n	8006cde <takeMachineID+0x232>
        		machineID[machineIDCharacterLimit] = '\0';
 8006cd8:	4b22      	ldr	r3, [pc, #136]	; (8006d64 <takeMachineID+0x2b8>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	731a      	strb	r2, [r3, #12]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	b2d9      	uxtb	r1, r3
 8006ce2:	4a20      	ldr	r2, [pc, #128]	; (8006d64 <takeMachineID+0x2b8>)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	2001      	movs	r0, #1
 8006cee:	f000 feda 	bl	8007aa6 <lcd_print_char>

        	writeLoc++;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	3301      	adds	r3, #1
 8006d02:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8006d04:	2096      	movs	r0, #150	; 0x96
 8006d06:	f001 fc0f 	bl	8008528 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006d0a:	2104      	movs	r1, #4
 8006d0c:	4816      	ldr	r0, [pc, #88]	; (8006d68 <takeMachineID+0x2bc>)
 8006d0e:	f002 f9db 	bl	80090c8 <HAL_GPIO_ReadPin>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d149      	bne.n	8006dac <takeMachineID+0x300>
            if(strlen(machineID) >= 1) {
 8006d18:	4b12      	ldr	r3, [pc, #72]	; (8006d64 <takeMachineID+0x2b8>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d042      	beq.n	8006da6 <takeMachineID+0x2fa>
                machineID[arrayPos] = '\0';
 8006d20:	4a10      	ldr	r2, [pc, #64]	; (8006d64 <takeMachineID+0x2b8>)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4413      	add	r3, r2
 8006d26:	2200      	movs	r2, #0
 8006d28:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8006d2a:	4a12      	ldr	r2, [pc, #72]	; (8006d74 <takeMachineID+0x2c8>)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	4413      	add	r3, r2
 8006d30:	2200      	movs	r2, #0
 8006d32:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b05      	cmp	r3, #5
 8006d38:	dd03      	ble.n	8006d42 <takeMachineID+0x296>
                	writeLoc--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	e004      	b.n	8006d4c <takeMachineID+0x2a0>
                } else if(writeLoc < 5) {
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b04      	cmp	r3, #4
 8006d46:	dc01      	bgt.n	8006d4c <takeMachineID+0x2a0>
                	writeLoc = 5;
 8006d48:	2305      	movs	r3, #5
 8006d4a:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	dd16      	ble.n	8006d80 <takeMachineID+0x2d4>
                	arrayPos--;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	603b      	str	r3, [r7, #0]
 8006d5e:	e017      	b.n	8006d90 <takeMachineID+0x2e4>
 8006d60:	20000004 	.word	0x20000004
 8006d64:	200001a4 	.word	0x200001a4
 8006d68:	40010800 	.word	0x40010800
 8006d6c:	0800d9d0 	.word	0x0800d9d0
 8006d70:	0800d9e4 	.word	0x0800d9e4
 8006d74:	2000012c 	.word	0x2000012c
 8006d78:	200003bc 	.word	0x200003bc
 8006d7c:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	da04      	bge.n	8006d90 <takeMachineID+0x2e4>
                	arrayPos = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8006d8a:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <takeMachineID+0x318>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	3304      	adds	r3, #4
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	4619      	mov	r1, r3
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	f000 fea4 	bl	8007ae8 <lcd_delete_char>
                HAL_Delay(50);
 8006da0:	2032      	movs	r0, #50	; 0x32
 8006da2:	f001 fbc1 	bl	8008528 <HAL_Delay>
            }

            HAL_Delay(150);
 8006da6:	2096      	movs	r0, #150	; 0x96
 8006da8:	f001 fbbe 	bl	8008528 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	4619      	mov	r1, r3
 8006db2:	2002      	movs	r0, #2
 8006db4:	f000 fe43 	bl	8007a3e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006db8:	e693      	b.n	8006ae2 <takeMachineID+0x36>
    }
}
 8006dba:	bf00      	nop
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000004 	.word	0x20000004

08006dc8 <takeWifiSSID>:

void takeWifiSSID() {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	; 0x28
 8006dcc:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006dce:	2001      	movs	r0, #1
 8006dd0:	f000 feb2 	bl	8007b38 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID)); //wifiSSID Sıfırlanıyor.
 8006dd4:	2214      	movs	r2, #20
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	487e      	ldr	r0, [pc, #504]	; (8006fd4 <takeWifiSSID+0x20c>)
 8006dda:	f005 f9d5 	bl	800c188 <memset>
    HAL_Delay(100);
 8006dde:	2064      	movs	r0, #100	; 0x64
 8006de0:	f001 fba2 	bl	8008528 <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8006de4:	2301      	movs	r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8006de8:	2307      	movs	r3, #7
 8006dea:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8006dec:	2301      	movs	r3, #1
 8006dee:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8006df0:	2300      	movs	r3, #0
 8006df2:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8006df4:	4b78      	ldr	r3, [pc, #480]	; (8006fd8 <takeWifiSSID+0x210>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	2002      	movs	r0, #2
 8006dfe:	f7f9 ffc5 	bl	8000d8c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e02:	2108      	movs	r1, #8
 8006e04:	4875      	ldr	r0, [pc, #468]	; (8006fdc <takeWifiSSID+0x214>)
 8006e06:	f002 f95f 	bl	80090c8 <HAL_GPIO_ReadPin>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d13a      	bne.n	8006e86 <takeWifiSSID+0xbe>
            lcd_cursor(0);
 8006e10:	2000      	movs	r0, #0
 8006e12:	f000 fe91 	bl	8007b38 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006e16:	486f      	ldr	r0, [pc, #444]	; (8006fd4 <takeWifiSSID+0x20c>)
 8006e18:	f7f9 fa04 	bl	8000224 <strlen>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b14      	cmp	r3, #20
 8006e20:	d910      	bls.n	8006e44 <takeWifiSSID+0x7c>
                lcd_clear();
 8006e22:	f000 fe57 	bl	8007ad4 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006e26:	4a6e      	ldr	r2, [pc, #440]	; (8006fe0 <takeWifiSSID+0x218>)
 8006e28:	2101      	movs	r1, #1
 8006e2a:	2001      	movs	r0, #1
 8006e2c:	f000 fe26 	bl	8007a7c <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006e30:	4a6c      	ldr	r2, [pc, #432]	; (8006fe4 <takeWifiSSID+0x21c>)
 8006e32:	2101      	movs	r1, #1
 8006e34:	2002      	movs	r0, #2
 8006e36:	f000 fe21 	bl	8007a7c <lcd_print>
                HAL_Delay(1250);
 8006e3a:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8006e3e:	f001 fb73 	bl	8008528 <HAL_Delay>
                goto mainSSIDSection;
 8006e42:	e7c4      	b.n	8006dce <takeWifiSSID+0x6>
            }

            wifiSSID[arrayPosition] = '\0';
 8006e44:	4a63      	ldr	r2, [pc, #396]	; (8006fd4 <takeWifiSSID+0x20c>)
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	4413      	add	r3, r2
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[arrayPosition] = '\0';
 8006e4e:	4a66      	ldr	r2, [pc, #408]	; (8006fe8 <takeWifiSSID+0x220>)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	4413      	add	r3, r2
 8006e54:	2200      	movs	r2, #0
 8006e56:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 8006e58:	4a64      	ldr	r2, [pc, #400]	; (8006fec <takeWifiSSID+0x224>)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	2200      	movs	r2, #0
 8006e60:	701a      	strb	r2, [r3, #0]

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006e62:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e66:	9302      	str	r3, [sp, #8]
 8006e68:	236e      	movs	r3, #110	; 0x6e
 8006e6a:	9301      	str	r3, [sp, #4]
 8006e6c:	4b5f      	ldr	r3, [pc, #380]	; (8006fec <takeWifiSSID+0x224>)
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	236e      	movs	r3, #110	; 0x6e
 8006e72:	2200      	movs	r2, #0
 8006e74:	21a0      	movs	r1, #160	; 0xa0
 8006e76:	485e      	ldr	r0, [pc, #376]	; (8006ff0 <takeWifiSSID+0x228>)
 8006e78:	f002 fbe0 	bl	800963c <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 8006e7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e80:	f001 fb52 	bl	8008528 <HAL_Delay>

            break;
 8006e84:	e143      	b.n	800710e <takeWifiSSID+0x346>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006e86:	2101      	movs	r1, #1
 8006e88:	4854      	ldr	r0, [pc, #336]	; (8006fdc <takeWifiSSID+0x214>)
 8006e8a:	f002 f91d 	bl	80090c8 <HAL_GPIO_ReadPin>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d150      	bne.n	8006f36 <takeWifiSSID+0x16e>
        	cursorPosition++;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3301      	adds	r3, #1
 8006e98:	60fb      	str	r3, [r7, #12]
        	if(cursorPosition > 80) {
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b50      	cmp	r3, #80	; 0x50
 8006e9e:	dd01      	ble.n	8006ea4 <takeWifiSSID+0xdc>
        		cursorPosition = 1;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b10      	cmp	r3, #16
 8006ea8:	d13f      	bne.n	8006f2a <takeWifiSSID+0x162>
            	if(page == 1) {
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d109      	bne.n	8006ec4 <takeWifiSSID+0xfc>
            		cursorPosition = 1;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	60fb      	str	r3, [r7, #12]
            		page++;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8006eba:	2102      	movs	r1, #2
 8006ebc:	2002      	movs	r0, #2
 8006ebe:	f7f9 ff65 	bl	8000d8c <printTemplate>
 8006ec2:	e035      	b.n	8006f30 <takeWifiSSID+0x168>
            	} else if(page == 2) {
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d109      	bne.n	8006ede <takeWifiSSID+0x116>
            		cursorPosition = 1;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]
            		page++;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8006ed4:	2103      	movs	r1, #3
 8006ed6:	2002      	movs	r0, #2
 8006ed8:	f7f9 ff58 	bl	8000d8c <printTemplate>
 8006edc:	e028      	b.n	8006f30 <takeWifiSSID+0x168>
            	} else if(page == 3) {
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d109      	bne.n	8006ef8 <takeWifiSSID+0x130>
            		cursorPosition = 1;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]
            		page++;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	3301      	adds	r3, #1
 8006eec:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8006eee:	2104      	movs	r1, #4
 8006ef0:	2002      	movs	r0, #2
 8006ef2:	f7f9 ff4b 	bl	8000d8c <printTemplate>
 8006ef6:	e01b      	b.n	8006f30 <takeWifiSSID+0x168>
            	} else if(page == 4) {
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d109      	bne.n	8006f12 <takeWifiSSID+0x14a>
            		cursorPosition = 1;
 8006efe:	2301      	movs	r3, #1
 8006f00:	60fb      	str	r3, [r7, #12]
            		page++;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	3301      	adds	r3, #1
 8006f06:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8006f08:	2105      	movs	r1, #5
 8006f0a:	2002      	movs	r0, #2
 8006f0c:	f7f9 ff3e 	bl	8000d8c <printTemplate>
 8006f10:	e00e      	b.n	8006f30 <takeWifiSSID+0x168>
            	} else if(page == 5) {
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b05      	cmp	r3, #5
 8006f16:	d10b      	bne.n	8006f30 <takeWifiSSID+0x168>
            		cursorPosition = 1;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8006f20:	2101      	movs	r1, #1
 8006f22:	2002      	movs	r0, #2
 8006f24:	f7f9 ff32 	bl	8000d8c <printTemplate>
 8006f28:	e002      	b.n	8006f30 <takeWifiSSID+0x168>
            	}
            } else {
            	cursorPosition++;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006f30:	2096      	movs	r0, #150	; 0x96
 8006f32:	f001 faf9 	bl	8008528 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006f36:	2108      	movs	r1, #8
 8006f38:	482e      	ldr	r0, [pc, #184]	; (8006ff4 <takeWifiSSID+0x22c>)
 8006f3a:	f002 f8c5 	bl	80090c8 <HAL_GPIO_ReadPin>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d15f      	bne.n	8007004 <takeWifiSSID+0x23c>
        	cursorPosition--;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]
        	if(cursorPosition < 1) {
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dc01      	bgt.n	8006f54 <takeWifiSSID+0x18c>
        		cursorPosition = 80;
 8006f50:	2350      	movs	r3, #80	; 0x50
 8006f52:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d14e      	bne.n	8006ff8 <takeWifiSSID+0x230>
            	if(page == 1) {
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d108      	bne.n	8006f72 <takeWifiSSID+0x1aa>
            		cursorPosition = 16;
 8006f60:	2310      	movs	r3, #16
 8006f62:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8006f64:	2305      	movs	r3, #5
 8006f66:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8006f68:	2105      	movs	r1, #5
 8006f6a:	2002      	movs	r0, #2
 8006f6c:	f7f9 ff0e 	bl	8000d8c <printTemplate>
 8006f70:	e045      	b.n	8006ffe <takeWifiSSID+0x236>
            	} else if(page == 2) {
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d108      	bne.n	8006f8a <takeWifiSSID+0x1c2>
            		cursorPosition = 16;
 8006f78:	2310      	movs	r3, #16
 8006f7a:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8006f80:	2101      	movs	r1, #1
 8006f82:	2002      	movs	r0, #2
 8006f84:	f7f9 ff02 	bl	8000d8c <printTemplate>
 8006f88:	e039      	b.n	8006ffe <takeWifiSSID+0x236>
            	} else if(page == 3) {
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d108      	bne.n	8006fa2 <takeWifiSSID+0x1da>
            		cursorPosition = 16;
 8006f90:	2310      	movs	r3, #16
 8006f92:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8006f94:	2302      	movs	r3, #2
 8006f96:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8006f98:	2102      	movs	r1, #2
 8006f9a:	2002      	movs	r0, #2
 8006f9c:	f7f9 fef6 	bl	8000d8c <printTemplate>
 8006fa0:	e02d      	b.n	8006ffe <takeWifiSSID+0x236>
            	} else if(page == 4) {
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d108      	bne.n	8006fba <takeWifiSSID+0x1f2>
            		cursorPosition = 16;
 8006fa8:	2310      	movs	r3, #16
 8006faa:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8006fac:	2303      	movs	r3, #3
 8006fae:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8006fb0:	2103      	movs	r1, #3
 8006fb2:	2002      	movs	r0, #2
 8006fb4:	f7f9 feea 	bl	8000d8c <printTemplate>
 8006fb8:	e021      	b.n	8006ffe <takeWifiSSID+0x236>
            	} else if(page == 5) {
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b05      	cmp	r3, #5
 8006fbe:	d11e      	bne.n	8006ffe <takeWifiSSID+0x236>
            		cursorPosition = 16;
 8006fc0:	2310      	movs	r3, #16
 8006fc2:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8006fc4:	2304      	movs	r3, #4
 8006fc6:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8006fc8:	2104      	movs	r1, #4
 8006fca:	2002      	movs	r0, #2
 8006fcc:	f7f9 fede 	bl	8000d8c <printTemplate>
 8006fd0:	e015      	b.n	8006ffe <takeWifiSSID+0x236>
 8006fd2:	bf00      	nop
 8006fd4:	200001b0 	.word	0x200001b0
 8006fd8:	20000008 	.word	0x20000008
 8006fdc:	40010800 	.word	0x40010800
 8006fe0:	0800d9f8 	.word	0x0800d9f8
 8006fe4:	0800da0c 	.word	0x0800da0c
 8006fe8:	200001e4 	.word	0x200001e4
 8006fec:	2000012c 	.word	0x2000012c
 8006ff0:	200003bc 	.word	0x200003bc
 8006ff4:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006ffe:	2096      	movs	r0, #150	; 0x96
 8007000:	f001 fa92 	bl	8008528 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007004:	2102      	movs	r1, #2
 8007006:	4844      	ldr	r0, [pc, #272]	; (8007118 <takeWifiSSID+0x350>)
 8007008:	f002 f85e 	bl	80090c8 <HAL_GPIO_ReadPin>
 800700c:	4603      	mov	r3, r0
 800700e:	2b01      	cmp	r3, #1
 8007010:	d130      	bne.n	8007074 <takeWifiSSID+0x2ac>
        	wifiSSID[arrayPosition] = charactersArray[cursorPosition - 1];
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3b01      	subs	r3, #1
 8007016:	4a41      	ldr	r2, [pc, #260]	; (800711c <takeWifiSSID+0x354>)
 8007018:	5cd1      	ldrb	r1, [r2, r3]
 800701a:	4a41      	ldr	r2, [pc, #260]	; (8007120 <takeWifiSSID+0x358>)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	4413      	add	r3, r2
 8007020:	460a      	mov	r2, r1
 8007022:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[arrayPosition] = cursorPosition - 1;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b2d9      	uxtb	r1, r3
 800702c:	4a3d      	ldr	r2, [pc, #244]	; (8007124 <takeWifiSSID+0x35c>)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	4413      	add	r3, r2
 8007032:	460a      	mov	r2, r1
 8007034:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition - 1;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	3b01      	subs	r3, #1
 800703c:	b2d9      	uxtb	r1, r3
 800703e:	4a3a      	ldr	r2, [pc, #232]	; (8007128 <takeWifiSSID+0x360>)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4413      	add	r3, r2
 8007044:	460a      	mov	r2, r1
 8007046:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[arrayPosition]);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	b2d9      	uxtb	r1, r3
 800704c:	4a34      	ldr	r2, [pc, #208]	; (8007120 <takeWifiSSID+0x358>)
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	4413      	add	r3, r2
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	2001      	movs	r0, #1
 8007058:	f000 fd25 	bl	8007aa6 <lcd_print_char>

            writeLoc++;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	3301      	adds	r3, #1
 8007060:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	3301      	adds	r3, #1
 8007066:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3301      	adds	r3, #1
 800706c:	607b      	str	r3, [r7, #4]

            HAL_Delay(150);
 800706e:	2096      	movs	r0, #150	; 0x96
 8007070:	f001 fa5a 	bl	8008528 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007074:	2104      	movs	r1, #4
 8007076:	4828      	ldr	r0, [pc, #160]	; (8007118 <takeWifiSSID+0x350>)
 8007078:	f002 f826 	bl	80090c8 <HAL_GPIO_ReadPin>
 800707c:	4603      	mov	r3, r0
 800707e:	2b01      	cmp	r3, #1
 8007080:	d13e      	bne.n	8007100 <takeWifiSSID+0x338>
        	if(strlen(wifiSSID) >= 1) {
 8007082:	4b27      	ldr	r3, [pc, #156]	; (8007120 <takeWifiSSID+0x358>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d037      	beq.n	80070fa <takeWifiSSID+0x332>
        		wifiSSID[arrayPosition] = '\0';
 800708a:	4a25      	ldr	r2, [pc, #148]	; (8007120 <takeWifiSSID+0x358>)
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4413      	add	r3, r2
 8007090:	2200      	movs	r2, #0
 8007092:	701a      	strb	r2, [r3, #0]
        		wifiSSIDInt[arrayPosition] = '\0';
 8007094:	4a23      	ldr	r2, [pc, #140]	; (8007124 <takeWifiSSID+0x35c>)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	4413      	add	r3, r2
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 800709e:	4a22      	ldr	r2, [pc, #136]	; (8007128 <takeWifiSSID+0x360>)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4413      	add	r3, r2
 80070a4:	2200      	movs	r2, #0
 80070a6:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b07      	cmp	r3, #7
 80070ac:	dd03      	ble.n	80070b6 <takeWifiSSID+0x2ee>
        			writeLoc--;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	e004      	b.n	80070c0 <takeWifiSSID+0x2f8>
        		} else if(writeLoc < 7) {
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	2b06      	cmp	r3, #6
 80070ba:	dc01      	bgt.n	80070c0 <takeWifiSSID+0x2f8>
        			writeLoc = 7;
 80070bc:	2307      	movs	r3, #7
 80070be:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	dd06      	ble.n	80070d4 <takeWifiSSID+0x30c>
        			arrayPosition--;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	607b      	str	r3, [r7, #4]
 80070d2:	e007      	b.n	80070e4 <takeWifiSSID+0x31c>
        		} else if(arrayPosition < 0) {
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	da04      	bge.n	80070e4 <takeWifiSSID+0x31c>
        			arrayPosition = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 80070de:	4b13      	ldr	r3, [pc, #76]	; (800712c <takeWifiSSID+0x364>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	3306      	adds	r3, #6
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	4619      	mov	r1, r3
 80070ee:	2001      	movs	r0, #1
 80070f0:	f000 fcfa 	bl	8007ae8 <lcd_delete_char>
        		HAL_Delay(50);
 80070f4:	2032      	movs	r0, #50	; 0x32
 80070f6:	f001 fa17 	bl	8008528 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80070fa:	2096      	movs	r0, #150	; 0x96
 80070fc:	f001 fa14 	bl	8008528 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	4619      	mov	r1, r3
 8007106:	2002      	movs	r0, #2
 8007108:	f000 fc99 	bl	8007a3e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800710c:	e679      	b.n	8006e02 <takeWifiSSID+0x3a>
    }
}
 800710e:	bf00      	nop
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	40010800 	.word	0x40010800
 800711c:	2000001c 	.word	0x2000001c
 8007120:	200001b0 	.word	0x200001b0
 8007124:	200001e4 	.word	0x200001e4
 8007128:	2000012c 	.word	0x2000012c
 800712c:	20000008 	.word	0x20000008

08007130 <takeWifiPass>:

void takeWifiPass() {
 8007130:	b580      	push	{r7, lr}
 8007132:	b08a      	sub	sp, #40	; 0x28
 8007134:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 8007136:	2001      	movs	r0, #1
 8007138:	f000 fcfe 	bl	8007b38 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 800713c:	2214      	movs	r2, #20
 800713e:	2100      	movs	r1, #0
 8007140:	4876      	ldr	r0, [pc, #472]	; (800731c <takeWifiPass+0x1ec>)
 8007142:	f005 f821 	bl	800c188 <memset>
    HAL_Delay(100);
 8007146:	2064      	movs	r0, #100	; 0x64
 8007148:	f001 f9ee 	bl	8008528 <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800714c:	2301      	movs	r3, #1
 800714e:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterlerin yazılacağı başlangıç karakteri
 8007150:	2307      	movs	r3, #7
 8007152:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının seçim yaparken kullandığı işaretçi değişkeni
 8007154:	2301      	movs	r3, #1
 8007156:	60fb      	str	r3, [r7, #12]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarmak için kullanılacak olan değişken
 8007158:	2300      	movs	r3, #0
 800715a:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma aktarırken kullanılacak olan değişken
 800715c:	4b70      	ldr	r3, [pc, #448]	; (8007320 <takeWifiPass+0x1f0>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	607b      	str	r3, [r7, #4]


    printTemplate(3, 1);
 8007162:	2101      	movs	r1, #1
 8007164:	2003      	movs	r0, #3
 8007166:	f7f9 fe11 	bl	8000d8c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800716a:	2108      	movs	r1, #8
 800716c:	486d      	ldr	r0, [pc, #436]	; (8007324 <takeWifiPass+0x1f4>)
 800716e:	f001 ffab 	bl	80090c8 <HAL_GPIO_ReadPin>
 8007172:	4603      	mov	r3, r0
 8007174:	2b01      	cmp	r3, #1
 8007176:	d12b      	bne.n	80071d0 <takeWifiPass+0xa0>
            lcd_cursor(0);
 8007178:	2000      	movs	r0, #0
 800717a:	f000 fcdd 	bl	8007b38 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 800717e:	4867      	ldr	r0, [pc, #412]	; (800731c <takeWifiPass+0x1ec>)
 8007180:	f7f9 f850 	bl	8000224 <strlen>
 8007184:	4603      	mov	r3, r0
 8007186:	2b14      	cmp	r3, #20
 8007188:	d910      	bls.n	80071ac <takeWifiPass+0x7c>
                lcd_clear();
 800718a:	f000 fca3 	bl	8007ad4 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 800718e:	4a66      	ldr	r2, [pc, #408]	; (8007328 <takeWifiPass+0x1f8>)
 8007190:	2101      	movs	r1, #1
 8007192:	2001      	movs	r0, #1
 8007194:	f000 fc72 	bl	8007a7c <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8007198:	4a64      	ldr	r2, [pc, #400]	; (800732c <takeWifiPass+0x1fc>)
 800719a:	2101      	movs	r1, #1
 800719c:	2002      	movs	r0, #2
 800719e:	f000 fc6d 	bl	8007a7c <lcd_print>
                HAL_Delay(1200);
 80071a2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80071a6:	f001 f9bf 	bl	8008528 <HAL_Delay>
                goto mainPASSSection;
 80071aa:	e7c4      	b.n	8007136 <takeWifiPass+0x6>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80071ac:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80071b0:	9302      	str	r3, [sp, #8]
 80071b2:	236e      	movs	r3, #110	; 0x6e
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	4b5e      	ldr	r3, [pc, #376]	; (8007330 <takeWifiPass+0x200>)
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	236e      	movs	r3, #110	; 0x6e
 80071bc:	2200      	movs	r2, #0
 80071be:	21a0      	movs	r1, #160	; 0xa0
 80071c0:	485c      	ldr	r0, [pc, #368]	; (8007334 <takeWifiPass+0x204>)
 80071c2:	f002 fa3b 	bl	800963c <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 80071c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071ca:	f001 f9ad 	bl	8008528 <HAL_Delay>

            break;
 80071ce:	e12b      	b.n	8007428 <takeWifiPass+0x2f8>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80071d0:	2101      	movs	r1, #1
 80071d2:	4854      	ldr	r0, [pc, #336]	; (8007324 <takeWifiPass+0x1f4>)
 80071d4:	f001 ff78 	bl	80090c8 <HAL_GPIO_ReadPin>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d150      	bne.n	8007280 <takeWifiPass+0x150>
        	cursorPosition++;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3301      	adds	r3, #1
 80071e2:	60fb      	str	r3, [r7, #12]
        	if(cursorPosition > 80) {
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b50      	cmp	r3, #80	; 0x50
 80071e8:	dd01      	ble.n	80071ee <takeWifiPass+0xbe>
        	    cursorPosition = 1;
 80071ea:	2301      	movs	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b10      	cmp	r3, #16
 80071f2:	d13f      	bne.n	8007274 <takeWifiPass+0x144>
            	if(page == 1) {
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d109      	bne.n	800720e <takeWifiPass+0xde>
            		cursorPosition = 1;
 80071fa:	2301      	movs	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]
            		page++;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	3301      	adds	r3, #1
 8007202:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007204:	2102      	movs	r1, #2
 8007206:	2003      	movs	r0, #3
 8007208:	f7f9 fdc0 	bl	8000d8c <printTemplate>
 800720c:	e035      	b.n	800727a <takeWifiPass+0x14a>
            	} else if(page == 2) {
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2b02      	cmp	r3, #2
 8007212:	d109      	bne.n	8007228 <takeWifiPass+0xf8>
            		cursorPosition = 1;
 8007214:	2301      	movs	r3, #1
 8007216:	60fb      	str	r3, [r7, #12]
            		page++;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	3301      	adds	r3, #1
 800721c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800721e:	2103      	movs	r1, #3
 8007220:	2003      	movs	r0, #3
 8007222:	f7f9 fdb3 	bl	8000d8c <printTemplate>
 8007226:	e028      	b.n	800727a <takeWifiPass+0x14a>
            	} else if(page == 3) {
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2b03      	cmp	r3, #3
 800722c:	d109      	bne.n	8007242 <takeWifiPass+0x112>
            		cursorPosition = 1;
 800722e:	2301      	movs	r3, #1
 8007230:	60fb      	str	r3, [r7, #12]
            		page++;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	3301      	adds	r3, #1
 8007236:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007238:	2104      	movs	r1, #4
 800723a:	2003      	movs	r0, #3
 800723c:	f7f9 fda6 	bl	8000d8c <printTemplate>
 8007240:	e01b      	b.n	800727a <takeWifiPass+0x14a>
            	} else if(page == 4) {
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b04      	cmp	r3, #4
 8007246:	d109      	bne.n	800725c <takeWifiPass+0x12c>
            		cursorPosition = 1;
 8007248:	2301      	movs	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]
            		page++;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	3301      	adds	r3, #1
 8007250:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007252:	2105      	movs	r1, #5
 8007254:	2003      	movs	r0, #3
 8007256:	f7f9 fd99 	bl	8000d8c <printTemplate>
 800725a:	e00e      	b.n	800727a <takeWifiPass+0x14a>
            	} else if(page == 5) {
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2b05      	cmp	r3, #5
 8007260:	d10b      	bne.n	800727a <takeWifiPass+0x14a>
            		cursorPosition = 1;
 8007262:	2301      	movs	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007266:	2301      	movs	r3, #1
 8007268:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800726a:	2101      	movs	r1, #1
 800726c:	2003      	movs	r0, #3
 800726e:	f7f9 fd8d 	bl	8000d8c <printTemplate>
 8007272:	e002      	b.n	800727a <takeWifiPass+0x14a>
            	}
            } else {
            	cursorPosition++;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800727a:	2096      	movs	r0, #150	; 0x96
 800727c:	f001 f954 	bl	8008528 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007280:	2108      	movs	r1, #8
 8007282:	482d      	ldr	r0, [pc, #180]	; (8007338 <takeWifiPass+0x208>)
 8007284:	f001 ff20 	bl	80090c8 <HAL_GPIO_ReadPin>
 8007288:	4603      	mov	r3, r0
 800728a:	2b01      	cmp	r3, #1
 800728c:	d15c      	bne.n	8007348 <takeWifiPass+0x218>
        	cursorPosition--;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3b01      	subs	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]
        	if(cursorPosition < 1) {
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	dc01      	bgt.n	800729e <takeWifiPass+0x16e>
        	    cursorPosition = 80;
 800729a:	2350      	movs	r3, #80	; 0x50
 800729c:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d14b      	bne.n	800733c <takeWifiPass+0x20c>
            	if(page == 1) {
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d108      	bne.n	80072bc <takeWifiPass+0x18c>
            		cursorPosition = 16;
 80072aa:	2310      	movs	r3, #16
 80072ac:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80072ae:	2305      	movs	r3, #5
 80072b0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80072b2:	2105      	movs	r1, #5
 80072b4:	2003      	movs	r0, #3
 80072b6:	f7f9 fd69 	bl	8000d8c <printTemplate>
 80072ba:	e042      	b.n	8007342 <takeWifiPass+0x212>
            	} else if(page == 2) {
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d108      	bne.n	80072d4 <takeWifiPass+0x1a4>
            		cursorPosition = 16;
 80072c2:	2310      	movs	r3, #16
 80072c4:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80072c6:	2301      	movs	r3, #1
 80072c8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80072ca:	2101      	movs	r1, #1
 80072cc:	2003      	movs	r0, #3
 80072ce:	f7f9 fd5d 	bl	8000d8c <printTemplate>
 80072d2:	e036      	b.n	8007342 <takeWifiPass+0x212>
            	} else if(page == 3) {
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d108      	bne.n	80072ec <takeWifiPass+0x1bc>
            		cursorPosition = 16;
 80072da:	2310      	movs	r3, #16
 80072dc:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80072de:	2302      	movs	r3, #2
 80072e0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80072e2:	2102      	movs	r1, #2
 80072e4:	2003      	movs	r0, #3
 80072e6:	f7f9 fd51 	bl	8000d8c <printTemplate>
 80072ea:	e02a      	b.n	8007342 <takeWifiPass+0x212>
            	} else if(page == 4) {
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d108      	bne.n	8007304 <takeWifiPass+0x1d4>
            		cursorPosition = 16;
 80072f2:	2310      	movs	r3, #16
 80072f4:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80072f6:	2303      	movs	r3, #3
 80072f8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80072fa:	2103      	movs	r1, #3
 80072fc:	2003      	movs	r0, #3
 80072fe:	f7f9 fd45 	bl	8000d8c <printTemplate>
 8007302:	e01e      	b.n	8007342 <takeWifiPass+0x212>
            	} else if(page == 5) {
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2b05      	cmp	r3, #5
 8007308:	d11b      	bne.n	8007342 <takeWifiPass+0x212>
            		cursorPosition = 16;
 800730a:	2310      	movs	r3, #16
 800730c:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800730e:	2304      	movs	r3, #4
 8007310:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007312:	2104      	movs	r1, #4
 8007314:	2003      	movs	r0, #3
 8007316:	f7f9 fd39 	bl	8000d8c <printTemplate>
 800731a:	e012      	b.n	8007342 <takeWifiPass+0x212>
 800731c:	200001c4 	.word	0x200001c4
 8007320:	2000000c 	.word	0x2000000c
 8007324:	40010800 	.word	0x40010800
 8007328:	0800d9f8 	.word	0x0800d9f8
 800732c:	0800da20 	.word	0x0800da20
 8007330:	2000012c 	.word	0x2000012c
 8007334:	200003bc 	.word	0x200003bc
 8007338:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3b01      	subs	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007342:	2096      	movs	r0, #150	; 0x96
 8007344:	f001 f8f0 	bl	8008528 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007348:	2102      	movs	r1, #2
 800734a:	4839      	ldr	r0, [pc, #228]	; (8007430 <takeWifiPass+0x300>)
 800734c:	f001 febc 	bl	80090c8 <HAL_GPIO_ReadPin>
 8007350:	4603      	mov	r3, r0
 8007352:	2b01      	cmp	r3, #1
 8007354:	d130      	bne.n	80073b8 <takeWifiPass+0x288>
        	wifiPass[arrayPos] = charactersArray[cursorPosition - 1];
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3b01      	subs	r3, #1
 800735a:	4a36      	ldr	r2, [pc, #216]	; (8007434 <takeWifiPass+0x304>)
 800735c:	5cd1      	ldrb	r1, [r2, r3]
 800735e:	4a36      	ldr	r2, [pc, #216]	; (8007438 <takeWifiPass+0x308>)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4413      	add	r3, r2
 8007364:	460a      	mov	r2, r1
 8007366:	701a      	strb	r2, [r3, #0]
        	wifiPassInt[arrayPos] = cursorPosition - 1;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b2d9      	uxtb	r1, r3
 8007370:	4a32      	ldr	r2, [pc, #200]	; (800743c <takeWifiPass+0x30c>)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	4413      	add	r3, r2
 8007376:	460a      	mov	r2, r1
 8007378:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = cursorPosition - 1;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	3b01      	subs	r3, #1
 8007380:	b2d9      	uxtb	r1, r3
 8007382:	4a2f      	ldr	r2, [pc, #188]	; (8007440 <takeWifiPass+0x310>)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4413      	add	r3, r2
 8007388:	460a      	mov	r2, r1
 800738a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[arrayPos]);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	b2d9      	uxtb	r1, r3
 8007390:	4a29      	ldr	r2, [pc, #164]	; (8007438 <takeWifiPass+0x308>)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	4413      	add	r3, r2
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	2001      	movs	r0, #1
 800739c:	f000 fb83 	bl	8007aa6 <lcd_print_char>

            writeLoc++;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	3301      	adds	r3, #1
 80073a4:	613b      	str	r3, [r7, #16]
            arrayPos++;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	3301      	adds	r3, #1
 80073aa:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3301      	adds	r3, #1
 80073b0:	607b      	str	r3, [r7, #4]

            HAL_Delay(150);
 80073b2:	2096      	movs	r0, #150	; 0x96
 80073b4:	f001 f8b8 	bl	8008528 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80073b8:	2104      	movs	r1, #4
 80073ba:	481d      	ldr	r0, [pc, #116]	; (8007430 <takeWifiPass+0x300>)
 80073bc:	f001 fe84 	bl	80090c8 <HAL_GPIO_ReadPin>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d129      	bne.n	800741a <takeWifiPass+0x2ea>
            if(strlen(wifiPass) >= 1) {
 80073c6:	4b1c      	ldr	r3, [pc, #112]	; (8007438 <takeWifiPass+0x308>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d022      	beq.n	8007414 <takeWifiPass+0x2e4>
            	wifiPass[arrayPos] = '\0';
 80073ce:	4a1a      	ldr	r2, [pc, #104]	; (8007438 <takeWifiPass+0x308>)
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	4413      	add	r3, r2
 80073d4:	2200      	movs	r2, #0
 80073d6:	701a      	strb	r2, [r3, #0]
            	wifiPassInt[arrayPos] = '\0';
 80073d8:	4a18      	ldr	r2, [pc, #96]	; (800743c <takeWifiPass+0x30c>)
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	4413      	add	r3, r2
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]
            	eepromData[eepromVal] = '\0';
 80073e2:	4a17      	ldr	r2, [pc, #92]	; (8007440 <takeWifiPass+0x310>)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4413      	add	r3, r2
 80073e8:	2200      	movs	r2, #0
 80073ea:	701a      	strb	r2, [r3, #0]

            	writeLoc--;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	613b      	str	r3, [r7, #16]
            	arrayPos--;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	60bb      	str	r3, [r7, #8]
            	eepromVal--;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	607b      	str	r3, [r7, #4]

            	lcd_delete_char(1, 6+arrayPos);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	3306      	adds	r3, #6
 8007404:	b2db      	uxtb	r3, r3
 8007406:	4619      	mov	r1, r3
 8007408:	2001      	movs	r0, #1
 800740a:	f000 fb6d 	bl	8007ae8 <lcd_delete_char>
            	HAL_Delay(50);
 800740e:	2032      	movs	r0, #50	; 0x32
 8007410:	f001 f88a 	bl	8008528 <HAL_Delay>
            }

            HAL_Delay(150);
 8007414:	2096      	movs	r0, #150	; 0x96
 8007416:	f001 f887 	bl	8008528 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	b2db      	uxtb	r3, r3
 800741e:	4619      	mov	r1, r3
 8007420:	2002      	movs	r0, #2
 8007422:	f000 fb0c 	bl	8007a3e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007426:	e6a0      	b.n	800716a <takeWifiPass+0x3a>
    }
}
 8007428:	bf00      	nop
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	40010800 	.word	0x40010800
 8007434:	2000001c 	.word	0x2000001c
 8007438:	200001c4 	.word	0x200001c4
 800743c:	200001f8 	.word	0x200001f8
 8007440:	2000012c 	.word	0x2000012c

08007444 <mergeData>:

char* mergeData() {
 8007444:	b580      	push	{r7, lr}
 8007446:	b09c      	sub	sp, #112	; 0x70
 8007448:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 800744a:	2300      	movs	r3, #0
 800744c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800744e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007452:	2228      	movs	r2, #40	; 0x28
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f004 fe96 	bl	800c188 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 800745c:	4b67      	ldr	r3, [pc, #412]	; (80075fc <mergeData+0x1b8>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	713b      	strb	r3, [r7, #4]
 8007462:	4b67      	ldr	r3, [pc, #412]	; (8007600 <mergeData+0x1bc>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	717b      	strb	r3, [r7, #5]
 8007468:	4b66      	ldr	r3, [pc, #408]	; (8007604 <mergeData+0x1c0>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	71bb      	strb	r3, [r7, #6]
 800746e:	4b66      	ldr	r3, [pc, #408]	; (8007608 <mergeData+0x1c4>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	71fb      	strb	r3, [r7, #7]
 8007474:	4b65      	ldr	r3, [pc, #404]	; (800760c <mergeData+0x1c8>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	723b      	strb	r3, [r7, #8]
 800747a:	4b65      	ldr	r3, [pc, #404]	; (8007610 <mergeData+0x1cc>)
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	727b      	strb	r3, [r7, #9]
 8007480:	4b64      	ldr	r3, [pc, #400]	; (8007614 <mergeData+0x1d0>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	72bb      	strb	r3, [r7, #10]
 8007486:	4b64      	ldr	r3, [pc, #400]	; (8007618 <mergeData+0x1d4>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	72fb      	strb	r3, [r7, #11]
 800748c:	4b63      	ldr	r3, [pc, #396]	; (800761c <mergeData+0x1d8>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	733b      	strb	r3, [r7, #12]
 8007492:	4b63      	ldr	r3, [pc, #396]	; (8007620 <mergeData+0x1dc>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	737b      	strb	r3, [r7, #13]
 8007498:	4b62      	ldr	r3, [pc, #392]	; (8007624 <mergeData+0x1e0>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	73bb      	strb	r3, [r7, #14]
 800749e:	4b62      	ldr	r3, [pc, #392]	; (8007628 <mergeData+0x1e4>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	73fb      	strb	r3, [r7, #15]
 80074a4:	4b61      	ldr	r3, [pc, #388]	; (800762c <mergeData+0x1e8>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	743b      	strb	r3, [r7, #16]
 80074aa:	4b61      	ldr	r3, [pc, #388]	; (8007630 <mergeData+0x1ec>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	747b      	strb	r3, [r7, #17]
 80074b0:	4b60      	ldr	r3, [pc, #384]	; (8007634 <mergeData+0x1f0>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	74bb      	strb	r3, [r7, #18]
 80074b6:	4b60      	ldr	r3, [pc, #384]	; (8007638 <mergeData+0x1f4>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	74fb      	strb	r3, [r7, #19]
 80074bc:	4b5f      	ldr	r3, [pc, #380]	; (800763c <mergeData+0x1f8>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	753b      	strb	r3, [r7, #20]
 80074c2:	4b5f      	ldr	r3, [pc, #380]	; (8007640 <mergeData+0x1fc>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	757b      	strb	r3, [r7, #21]
 80074c8:	4b5e      	ldr	r3, [pc, #376]	; (8007644 <mergeData+0x200>)
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	75bb      	strb	r3, [r7, #22]
 80074ce:	4b5e      	ldr	r3, [pc, #376]	; (8007648 <mergeData+0x204>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	75fb      	strb	r3, [r7, #23]
 80074d4:	4b5d      	ldr	r3, [pc, #372]	; (800764c <mergeData+0x208>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	763b      	strb	r3, [r7, #24]
 80074da:	4b5d      	ldr	r3, [pc, #372]	; (8007650 <mergeData+0x20c>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	767b      	strb	r3, [r7, #25]
 80074e0:	4b5c      	ldr	r3, [pc, #368]	; (8007654 <mergeData+0x210>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	76bb      	strb	r3, [r7, #26]
 80074e6:	4b5c      	ldr	r3, [pc, #368]	; (8007658 <mergeData+0x214>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	76fb      	strb	r3, [r7, #27]
 80074ec:	4b5b      	ldr	r3, [pc, #364]	; (800765c <mergeData+0x218>)
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	773b      	strb	r3, [r7, #28]
 80074f2:	4b5b      	ldr	r3, [pc, #364]	; (8007660 <mergeData+0x21c>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	777b      	strb	r3, [r7, #29]
 80074f8:	4b5a      	ldr	r3, [pc, #360]	; (8007664 <mergeData+0x220>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	77bb      	strb	r3, [r7, #30]
 80074fe:	4b5a      	ldr	r3, [pc, #360]	; (8007668 <mergeData+0x224>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	77fb      	strb	r3, [r7, #31]
 8007504:	4b59      	ldr	r3, [pc, #356]	; (800766c <mergeData+0x228>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	f887 3020 	strb.w	r3, [r7, #32]
 800750c:	4b58      	ldr	r3, [pc, #352]	; (8007670 <mergeData+0x22c>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007514:	4b57      	ldr	r3, [pc, #348]	; (8007674 <mergeData+0x230>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800751c:	4b56      	ldr	r3, [pc, #344]	; (8007678 <mergeData+0x234>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007524:	4b55      	ldr	r3, [pc, #340]	; (800767c <mergeData+0x238>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 800752c:	4b54      	ldr	r3, [pc, #336]	; (8007680 <mergeData+0x23c>)
 800752e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007532:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 8007536:	4b52      	ldr	r3, [pc, #328]	; (8007680 <mergeData+0x23c>)
 8007538:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800753c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007540:	4b4f      	ldr	r3, [pc, #316]	; (8007680 <mergeData+0x23c>)
 8007542:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 800754a:	4b4d      	ldr	r3, [pc, #308]	; (8007680 <mergeData+0x23c>)
 800754c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007550:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007554:	4b4a      	ldr	r3, [pc, #296]	; (8007680 <mergeData+0x23c>)
 8007556:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800755a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 800755e:	4b48      	ldr	r3, [pc, #288]	; (8007680 <mergeData+0x23c>)
 8007560:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007568:	4b45      	ldr	r3, [pc, #276]	; (8007680 <mergeData+0x23c>)
 800756a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800756e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 8007572:	4b43      	ldr	r3, [pc, #268]	; (8007680 <mergeData+0x23c>)
 8007574:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007578:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 800757c:	4b40      	ldr	r3, [pc, #256]	; (8007680 <mergeData+0x23c>)
 800757e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007582:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007586:	4b3e      	ldr	r3, [pc, #248]	; (8007680 <mergeData+0x23c>)
 8007588:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800758c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007590:	2306      	movs	r3, #6
 8007592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007596:	2300      	movs	r3, #0
 8007598:	66fb      	str	r3, [r7, #108]	; 0x6c
 800759a:	e015      	b.n	80075c8 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 800759c:	1d3a      	adds	r2, r7, #4
 800759e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a0:	4413      	add	r3, r2
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075aa:	4936      	ldr	r1, [pc, #216]	; (8007684 <mergeData+0x240>)
 80075ac:	4618      	mov	r0, r3
 80075ae:	f004 fedf 	bl	800c370 <siprintf>
	    strcat(combinedString, temp);
 80075b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80075b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075ba:	4611      	mov	r1, r2
 80075bc:	4618      	mov	r0, r3
 80075be:	f004 fef7 	bl	800c3b0 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80075c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c4:	3301      	adds	r3, #1
 80075c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ca:	2b2b      	cmp	r3, #43	; 0x2b
 80075cc:	d9e6      	bls.n	800759c <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80075ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7f8 fe26 	bl	8000224 <strlen>
 80075d8:	4603      	mov	r3, r0
 80075da:	3301      	adds	r3, #1
 80075dc:	4618      	mov	r0, r3
 80075de:	f004 fdcb 	bl	800c178 <malloc>
 80075e2:	4603      	mov	r3, r0
 80075e4:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80075e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075ea:	4619      	mov	r1, r3
 80075ec:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80075ee:	f004 feee 	bl	800c3ce <strcpy>
	return result;
 80075f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3770      	adds	r7, #112	; 0x70
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20000243 	.word	0x20000243
 8007600:	20000235 	.word	0x20000235
 8007604:	20000238 	.word	0x20000238
 8007608:	20000239 	.word	0x20000239
 800760c:	2000023a 	.word	0x2000023a
 8007610:	20000241 	.word	0x20000241
 8007614:	2000023b 	.word	0x2000023b
 8007618:	2000023c 	.word	0x2000023c
 800761c:	20000240 	.word	0x20000240
 8007620:	2000023d 	.word	0x2000023d
 8007624:	2000024d 	.word	0x2000024d
 8007628:	2000023e 	.word	0x2000023e
 800762c:	2000024e 	.word	0x2000024e
 8007630:	2000023f 	.word	0x2000023f
 8007634:	2000024f 	.word	0x2000024f
 8007638:	20000242 	.word	0x20000242
 800763c:	20000244 	.word	0x20000244
 8007640:	20000245 	.word	0x20000245
 8007644:	20000246 	.word	0x20000246
 8007648:	20000247 	.word	0x20000247
 800764c:	20000248 	.word	0x20000248
 8007650:	20000249 	.word	0x20000249
 8007654:	2000024a 	.word	0x2000024a
 8007658:	2000024b 	.word	0x2000024b
 800765c:	2000024c 	.word	0x2000024c
 8007660:	20000250 	.word	0x20000250
 8007664:	20000252 	.word	0x20000252
 8007668:	20000231 	.word	0x20000231
 800766c:	20000232 	.word	0x20000232
 8007670:	20000000 	.word	0x20000000
 8007674:	20000001 	.word	0x20000001
 8007678:	20000233 	.word	0x20000233
 800767c:	20000255 	.word	0x20000255
 8007680:	2000012c 	.word	0x2000012c
 8007684:	0800da34 	.word	0x0800da34

08007688 <convertAndSendData>:

void convertAndSendData() {
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 800768c:	4b14      	ldr	r3, [pc, #80]	; (80076e0 <convertAndSendData+0x58>)
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <convertAndSendData+0x22>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007694:	4a13      	ldr	r2, [pc, #76]	; (80076e4 <convertAndSendData+0x5c>)
 8007696:	2101      	movs	r1, #1
 8007698:	2001      	movs	r0, #1
 800769a:	f000 f9ef 	bl	8007a7c <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 800769e:	4a12      	ldr	r2, [pc, #72]	; (80076e8 <convertAndSendData+0x60>)
 80076a0:	2101      	movs	r1, #1
 80076a2:	2002      	movs	r0, #2
 80076a4:	f000 f9ea 	bl	8007a7c <lcd_print>
 80076a8:	e009      	b.n	80076be <convertAndSendData+0x36>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80076aa:	4a10      	ldr	r2, [pc, #64]	; (80076ec <convertAndSendData+0x64>)
 80076ac:	2101      	movs	r1, #1
 80076ae:	2001      	movs	r0, #1
 80076b0:	f000 f9e4 	bl	8007a7c <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80076b4:	4a0e      	ldr	r2, [pc, #56]	; (80076f0 <convertAndSendData+0x68>)
 80076b6:	2101      	movs	r1, #1
 80076b8:	2002      	movs	r0, #2
 80076ba:	f000 f9df 	bl	8007a7c <lcd_print>
	}

	sendMachineData(&huart1, machineID, mergeData());
 80076be:	f7ff fec1 	bl	8007444 <mergeData>
 80076c2:	4603      	mov	r3, r0
 80076c4:	461a      	mov	r2, r3
 80076c6:	490b      	ldr	r1, [pc, #44]	; (80076f4 <convertAndSendData+0x6c>)
 80076c8:	480b      	ldr	r0, [pc, #44]	; (80076f8 <convertAndSendData+0x70>)
 80076ca:	f7f9 f8d1 	bl	8000870 <sendMachineData>

	HAL_Delay(500);
 80076ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80076d2:	f000 ff29 	bl	8008528 <HAL_Delay>
	lcd_clear();
 80076d6:	f000 f9fd 	bl	8007ad4 <lcd_clear>
}
 80076da:	bf00      	nop
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000255 	.word	0x20000255
 80076e4:	0800da38 	.word	0x0800da38
 80076e8:	0800da4c 	.word	0x0800da4c
 80076ec:	0800da60 	.word	0x0800da60
 80076f0:	0800da74 	.word	0x0800da74
 80076f4:	200001a4 	.word	0x200001a4
 80076f8:	20000458 	.word	0x20000458

080076fc <iotSetup>:

void iotSetup() {
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007700:	4b0e      	ldr	r3, [pc, #56]	; (800773c <iotSetup+0x40>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d017      	beq.n	8007738 <iotSetup+0x3c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 8007708:	480d      	ldr	r0, [pc, #52]	; (8007740 <iotSetup+0x44>)
 800770a:	f7f8 fd8b 	bl	8000224 <strlen>
 800770e:	4603      	mov	r3, r0
 8007710:	2b0c      	cmp	r3, #12
 8007712:	d001      	beq.n	8007718 <iotSetup+0x1c>
			takeMachineID();
 8007714:	f7ff f9ca 	bl	8006aac <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007718:	480a      	ldr	r0, [pc, #40]	; (8007744 <iotSetup+0x48>)
 800771a:	f7f8 fd83 	bl	8000224 <strlen>
 800771e:	4603      	mov	r3, r0
 8007720:	2b01      	cmp	r3, #1
 8007722:	d801      	bhi.n	8007728 <iotSetup+0x2c>
			takeWifiSSID();
 8007724:	f7ff fb50 	bl	8006dc8 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007728:	4807      	ldr	r0, [pc, #28]	; (8007748 <iotSetup+0x4c>)
 800772a:	f7f8 fd7b 	bl	8000224 <strlen>
 800772e:	4603      	mov	r3, r0
 8007730:	2b01      	cmp	r3, #1
 8007732:	d801      	bhi.n	8007738 <iotSetup+0x3c>
			takeWifiPass();
 8007734:	f7ff fcfc 	bl	8007130 <takeWifiPass>
	}

	//ESP8266_Init(&huart1, wifiSSID, wifiPass);
	//HAL_Delay(500);
	//convertAndSendData();
}
 8007738:	bf00      	nop
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20000253 	.word	0x20000253
 8007740:	200001a4 	.word	0x200001a4
 8007744:	200001b0 	.word	0x200001b0
 8007748:	200001c4 	.word	0x200001c4

0800774c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af02      	add	r7, sp, #8
 8007752:	4603      	mov	r3, r0
 8007754:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007756:	79fb      	ldrb	r3, [r7, #7]
 8007758:	f023 030f 	bic.w	r3, r3, #15
 800775c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007764:	7b7b      	ldrb	r3, [r7, #13]
 8007766:	f043 030c 	orr.w	r3, r3, #12
 800776a:	b2db      	uxtb	r3, r3
 800776c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800776e:	7b7b      	ldrb	r3, [r7, #13]
 8007770:	f043 0308 	orr.w	r3, r3, #8
 8007774:	b2db      	uxtb	r3, r3
 8007776:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007778:	7b3b      	ldrb	r3, [r7, #12]
 800777a:	f043 030c 	orr.w	r3, r3, #12
 800777e:	b2db      	uxtb	r3, r3
 8007780:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007782:	7b3b      	ldrb	r3, [r7, #12]
 8007784:	f043 0308 	orr.w	r3, r3, #8
 8007788:	b2db      	uxtb	r3, r3
 800778a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800778c:	bf00      	nop
 800778e:	4825      	ldr	r0, [pc, #148]	; (8007824 <lcd_send_cmd+0xd8>)
 8007790:	f002 fac3 	bl	8009d1a <HAL_I2C_GetError>
 8007794:	4603      	mov	r3, r0
 8007796:	2b04      	cmp	r3, #4
 8007798:	d0f9      	beq.n	800778e <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800779a:	bf00      	nop
 800779c:	4821      	ldr	r0, [pc, #132]	; (8007824 <lcd_send_cmd+0xd8>)
 800779e:	f002 faaf 	bl	8009d00 <HAL_I2C_GetState>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	d1f9      	bne.n	800779c <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80077a8:	4b1f      	ldr	r3, [pc, #124]	; (8007828 <lcd_send_cmd+0xdc>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d116      	bne.n	80077de <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
 80077b4:	e00f      	b.n	80077d6 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
 80077b8:	3310      	adds	r3, #16
 80077ba:	443b      	add	r3, r7
 80077bc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	f022 0208 	bic.w	r2, r2, #8
 80077c6:	b2d2      	uxtb	r2, r2
 80077c8:	3310      	adds	r3, #16
 80077ca:	443b      	add	r3, r7
 80077cc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	3301      	adds	r3, #1
 80077d4:	73fb      	strb	r3, [r7, #15]
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d9ec      	bls.n	80077b6 <lcd_send_cmd+0x6a>
 80077dc:	e015      	b.n	800780a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80077de:	2300      	movs	r3, #0
 80077e0:	73bb      	strb	r3, [r7, #14]
 80077e2:	e00f      	b.n	8007804 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	3310      	adds	r3, #16
 80077e8:	443b      	add	r3, r7
 80077ea:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
 80077f0:	f042 0208 	orr.w	r2, r2, #8
 80077f4:	b2d2      	uxtb	r2, r2
 80077f6:	3310      	adds	r3, #16
 80077f8:	443b      	add	r3, r7
 80077fa:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	3301      	adds	r3, #1
 8007802:	73bb      	strb	r3, [r7, #14]
 8007804:	7bbb      	ldrb	r3, [r7, #14]
 8007806:	2b03      	cmp	r3, #3
 8007808:	d9ec      	bls.n	80077e4 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800780a:	f107 0208 	add.w	r2, r7, #8
 800780e:	2364      	movs	r3, #100	; 0x64
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	2304      	movs	r3, #4
 8007814:	214e      	movs	r1, #78	; 0x4e
 8007816:	4803      	ldr	r0, [pc, #12]	; (8007824 <lcd_send_cmd+0xd8>)
 8007818:	f001 fe12 	bl	8009440 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800781c:	bf00      	nop
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	200003bc 	.word	0x200003bc
 8007828:	20000392 	.word	0x20000392

0800782c <lcd_send_data>:

void lcd_send_data (char data) {
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af02      	add	r7, sp, #8
 8007832:	4603      	mov	r3, r0
 8007834:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007836:	79fb      	ldrb	r3, [r7, #7]
 8007838:	f023 030f 	bic.w	r3, r3, #15
 800783c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	011b      	lsls	r3, r3, #4
 8007842:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007844:	7b7b      	ldrb	r3, [r7, #13]
 8007846:	f043 030d 	orr.w	r3, r3, #13
 800784a:	b2db      	uxtb	r3, r3
 800784c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800784e:	7b7b      	ldrb	r3, [r7, #13]
 8007850:	f043 0309 	orr.w	r3, r3, #9
 8007854:	b2db      	uxtb	r3, r3
 8007856:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007858:	7b3b      	ldrb	r3, [r7, #12]
 800785a:	f043 030d 	orr.w	r3, r3, #13
 800785e:	b2db      	uxtb	r3, r3
 8007860:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007862:	7b3b      	ldrb	r3, [r7, #12]
 8007864:	f043 0309 	orr.w	r3, r3, #9
 8007868:	b2db      	uxtb	r3, r3
 800786a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800786c:	bf00      	nop
 800786e:	4825      	ldr	r0, [pc, #148]	; (8007904 <lcd_send_data+0xd8>)
 8007870:	f002 fa53 	bl	8009d1a <HAL_I2C_GetError>
 8007874:	4603      	mov	r3, r0
 8007876:	2b04      	cmp	r3, #4
 8007878:	d0f9      	beq.n	800786e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800787a:	bf00      	nop
 800787c:	4821      	ldr	r0, [pc, #132]	; (8007904 <lcd_send_data+0xd8>)
 800787e:	f002 fa3f 	bl	8009d00 <HAL_I2C_GetState>
 8007882:	4603      	mov	r3, r0
 8007884:	2b20      	cmp	r3, #32
 8007886:	d1f9      	bne.n	800787c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007888:	4b1f      	ldr	r3, [pc, #124]	; (8007908 <lcd_send_data+0xdc>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d116      	bne.n	80078be <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007890:	2300      	movs	r3, #0
 8007892:	73fb      	strb	r3, [r7, #15]
 8007894:	e00f      	b.n	80078b6 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	3310      	adds	r3, #16
 800789a:	443b      	add	r3, r7
 800789c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
 80078a2:	f022 0208 	bic.w	r2, r2, #8
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	3310      	adds	r3, #16
 80078aa:	443b      	add	r3, r7
 80078ac:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	3301      	adds	r3, #1
 80078b4:	73fb      	strb	r3, [r7, #15]
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	d9ec      	bls.n	8007896 <lcd_send_data+0x6a>
 80078bc:	e015      	b.n	80078ea <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80078be:	2300      	movs	r3, #0
 80078c0:	73bb      	strb	r3, [r7, #14]
 80078c2:	e00f      	b.n	80078e4 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	3310      	adds	r3, #16
 80078c8:	443b      	add	r3, r7
 80078ca:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	f042 0208 	orr.w	r2, r2, #8
 80078d4:	b2d2      	uxtb	r2, r2
 80078d6:	3310      	adds	r3, #16
 80078d8:	443b      	add	r3, r7
 80078da:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	3301      	adds	r3, #1
 80078e2:	73bb      	strb	r3, [r7, #14]
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d9ec      	bls.n	80078c4 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80078ea:	f107 0208 	add.w	r2, r7, #8
 80078ee:	2364      	movs	r3, #100	; 0x64
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	2304      	movs	r3, #4
 80078f4:	214e      	movs	r1, #78	; 0x4e
 80078f6:	4803      	ldr	r0, [pc, #12]	; (8007904 <lcd_send_data+0xd8>)
 80078f8:	f001 fda2 	bl	8009440 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80078fc:	bf00      	nop
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	200003bc 	.word	0x200003bc
 8007908:	20000392 	.word	0x20000392

0800790c <lcd_send_string>:

void lcd_send_string (char *str) {
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007914:	e006      	b.n	8007924 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff ff84 	bl	800782c <lcd_send_data>
	while (*str) {
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1f4      	bne.n	8007916 <lcd_send_string+0xa>
	}
}
 800792c:	bf00      	nop
 800792e:	bf00      	nop
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af02      	add	r7, sp, #8
 800793e:	4603      	mov	r3, r0
 8007940:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	f023 030f 	bic.w	r3, r3, #15
 8007948:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007950:	7b7b      	ldrb	r3, [r7, #13]
 8007952:	f043 030d 	orr.w	r3, r3, #13
 8007956:	b2db      	uxtb	r3, r3
 8007958:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 800795a:	7b7b      	ldrb	r3, [r7, #13]
 800795c:	f043 0309 	orr.w	r3, r3, #9
 8007960:	b2db      	uxtb	r3, r3
 8007962:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007964:	7b3b      	ldrb	r3, [r7, #12]
 8007966:	f043 030d 	orr.w	r3, r3, #13
 800796a:	b2db      	uxtb	r3, r3
 800796c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800796e:	7b3b      	ldrb	r3, [r7, #12]
 8007970:	f043 0309 	orr.w	r3, r3, #9
 8007974:	b2db      	uxtb	r3, r3
 8007976:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007978:	bf00      	nop
 800797a:	4825      	ldr	r0, [pc, #148]	; (8007a10 <lcd_send_char+0xd8>)
 800797c:	f002 f9cd 	bl	8009d1a <HAL_I2C_GetError>
 8007980:	4603      	mov	r3, r0
 8007982:	2b04      	cmp	r3, #4
 8007984:	d0f9      	beq.n	800797a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007986:	bf00      	nop
 8007988:	4821      	ldr	r0, [pc, #132]	; (8007a10 <lcd_send_char+0xd8>)
 800798a:	f002 f9b9 	bl	8009d00 <HAL_I2C_GetState>
 800798e:	4603      	mov	r3, r0
 8007990:	2b20      	cmp	r3, #32
 8007992:	d1f9      	bne.n	8007988 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007994:	4b1f      	ldr	r3, [pc, #124]	; (8007a14 <lcd_send_char+0xdc>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d116      	bne.n	80079ca <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]
 80079a0:	e00f      	b.n	80079c2 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	3310      	adds	r3, #16
 80079a6:	443b      	add	r3, r7
 80079a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	f022 0208 	bic.w	r2, r2, #8
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	3310      	adds	r3, #16
 80079b6:	443b      	add	r3, r7
 80079b8:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	3301      	adds	r3, #1
 80079c0:	73fb      	strb	r3, [r7, #15]
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	2b03      	cmp	r3, #3
 80079c6:	d9ec      	bls.n	80079a2 <lcd_send_char+0x6a>
 80079c8:	e015      	b.n	80079f6 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80079ca:	2300      	movs	r3, #0
 80079cc:	73bb      	strb	r3, [r7, #14]
 80079ce:	e00f      	b.n	80079f0 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
 80079d2:	3310      	adds	r3, #16
 80079d4:	443b      	add	r3, r7
 80079d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	f042 0208 	orr.w	r2, r2, #8
 80079e0:	b2d2      	uxtb	r2, r2
 80079e2:	3310      	adds	r3, #16
 80079e4:	443b      	add	r3, r7
 80079e6:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	3301      	adds	r3, #1
 80079ee:	73bb      	strb	r3, [r7, #14]
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d9ec      	bls.n	80079d0 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80079f6:	f107 0208 	add.w	r2, r7, #8
 80079fa:	2364      	movs	r3, #100	; 0x64
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	2304      	movs	r3, #4
 8007a00:	214e      	movs	r1, #78	; 0x4e
 8007a02:	4803      	ldr	r0, [pc, #12]	; (8007a10 <lcd_send_char+0xd8>)
 8007a04:	f001 fd1c 	bl	8009440 <HAL_I2C_Master_Transmit>
}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	200003bc 	.word	0x200003bc
 8007a14:	20000392 	.word	0x20000392

08007a18 <lcd_init>:

void lcd_init (void) {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007a1c:	2002      	movs	r0, #2
 8007a1e:	f7ff fe95 	bl	800774c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007a22:	2028      	movs	r0, #40	; 0x28
 8007a24:	f7ff fe92 	bl	800774c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007a28:	200c      	movs	r0, #12
 8007a2a:	f7ff fe8f 	bl	800774c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007a2e:	2080      	movs	r0, #128	; 0x80
 8007a30:	f7ff fe8c 	bl	800774c <lcd_send_cmd>
	lcd_backlight(1);
 8007a34:	2001      	movs	r0, #1
 8007a36:	f000 f86d 	bl	8007b14 <lcd_backlight>
}
 8007a3a:	bf00      	nop
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	4603      	mov	r3, r0
 8007a46:	460a      	mov	r2, r1
 8007a48:	71fb      	strb	r3, [r7, #7]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007a4e:	79fb      	ldrb	r3, [r7, #7]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d106      	bne.n	8007a62 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007a54:	79bb      	ldrb	r3, [r7, #6]
 8007a56:	337f      	adds	r3, #127	; 0x7f
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7ff fe76 	bl	800774c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007a60:	e008      	b.n	8007a74 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007a62:	79fb      	ldrb	r3, [r7, #7]
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d105      	bne.n	8007a74 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007a68:	79bb      	ldrb	r3, [r7, #6]
 8007a6a:	3b41      	subs	r3, #65	; 0x41
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff fe6c 	bl	800774c <lcd_send_cmd>
}
 8007a74:	bf00      	nop
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	603a      	str	r2, [r7, #0]
 8007a86:	71fb      	strb	r3, [r7, #7]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007a8c:	79ba      	ldrb	r2, [r7, #6]
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	4611      	mov	r1, r2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff ffd3 	bl	8007a3e <lcd_gotoxy>
	lcd_send_string(str);
 8007a98:	6838      	ldr	r0, [r7, #0]
 8007a9a:	f7ff ff37 	bl	800790c <lcd_send_string>
}
 8007a9e:	bf00      	nop
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	4603      	mov	r3, r0
 8007aae:	71fb      	strb	r3, [r7, #7]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	71bb      	strb	r3, [r7, #6]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007ab8:	79ba      	ldrb	r2, [r7, #6]
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	4611      	mov	r1, r2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff ffbd 	bl	8007a3e <lcd_gotoxy>
    lcd_send_char(ch);
 8007ac4:	797b      	ldrb	r3, [r7, #5]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7ff ff36 	bl	8007938 <lcd_send_char>
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <lcd_clear>:

void lcd_clear(void) {
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007ad8:	2001      	movs	r0, #1
 8007ada:	f7ff fe37 	bl	800774c <lcd_send_cmd>
    HAL_Delay(2);
 8007ade:	2002      	movs	r0, #2
 8007ae0:	f000 fd22 	bl	8008528 <HAL_Delay>
}
 8007ae4:	bf00      	nop
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	460a      	mov	r2, r1
 8007af2:	71fb      	strb	r3, [r7, #7]
 8007af4:	4613      	mov	r3, r2
 8007af6:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007af8:	79ba      	ldrb	r2, [r7, #6]
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	4611      	mov	r1, r2
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff ff9d 	bl	8007a3e <lcd_gotoxy>

    lcd_send_char(' ');
 8007b04:	2020      	movs	r0, #32
 8007b06:	f7ff ff17 	bl	8007938 <lcd_send_char>
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007b1e:	4a05      	ldr	r2, [pc, #20]	; (8007b34 <lcd_backlight+0x20>)
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007b24:	2000      	movs	r0, #0
 8007b26:	f7ff fe11 	bl	800774c <lcd_send_cmd>
}
 8007b2a:	bf00      	nop
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20000392 	.word	0x20000392

08007b38 <lcd_cursor>:

void lcd_cursor(int state) {
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d106      	bne.n	8007b54 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007b46:	200e      	movs	r0, #14
 8007b48:	f7ff fe00 	bl	800774c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007b4c:	200f      	movs	r0, #15
 8007b4e:	f7ff fdfd 	bl	800774c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007b52:	e002      	b.n	8007b5a <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007b54:	200c      	movs	r0, #12
 8007b56:	f7ff fdf9 	bl	800774c <lcd_send_cmd>
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007b6c:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3301      	adds	r3, #1
 8007b72:	4a03      	ldr	r2, [pc, #12]	; (8007b80 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007b74:	6013      	str	r3, [r2, #0]
}
 8007b76:	bf00      	nop
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bc80      	pop	{r7}
 8007b7e:	4770      	bx	lr
 8007b80:	20000210 	.word	0x20000210

08007b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b88:	f000 fc6c 	bl	8008464 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007b8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b90:	f000 fcca 	bl	8008528 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b94:	f000 f89c 	bl	8007cd0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b98:	f000 f9be 	bl	8007f18 <MX_GPIO_Init>
  MX_CAN_Init();
 8007b9c:	f000 f8de 	bl	8007d5c <MX_CAN_Init>
  MX_I2C1_Init();
 8007ba0:	f000 f910 	bl	8007dc4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007ba4:	f000 f93c 	bl	8007e20 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007ba8:	f000 f98c 	bl	8007ec4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007bac:	2201      	movs	r2, #1
 8007bae:	2140      	movs	r1, #64	; 0x40
 8007bb0:	483e      	ldr	r0, [pc, #248]	; (8007cac <main+0x128>)
 8007bb2:	f001 faa0 	bl	80090f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	2180      	movs	r1, #128	; 0x80
 8007bba:	483c      	ldr	r0, [pc, #240]	; (8007cac <main+0x128>)
 8007bbc:	f001 fa9b 	bl	80090f6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007bc0:	200a      	movs	r0, #10
 8007bc2:	f000 fcb1 	bl	8008528 <HAL_Delay>
  lcd_init();
 8007bc6:	f7ff ff27 	bl	8007a18 <lcd_init>
  HAL_Delay(10);
 8007bca:	200a      	movs	r0, #10
 8007bcc:	f000 fcac 	bl	8008528 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007bd0:	4837      	ldr	r0, [pc, #220]	; (8007cb0 <main+0x12c>)
 8007bd2:	f003 f943 	bl	800ae5c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007bd6:	bf00      	nop
 8007bd8:	4836      	ldr	r0, [pc, #216]	; (8007cb4 <main+0x130>)
 8007bda:	f002 f89e 	bl	8009d1a <HAL_I2C_GetError>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	d0f9      	beq.n	8007bd8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007be4:	bf00      	nop
 8007be6:	4833      	ldr	r0, [pc, #204]	; (8007cb4 <main+0x130>)
 8007be8:	f002 f88a 	bl	8009d00 <HAL_I2C_GetState>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b20      	cmp	r3, #32
 8007bf0:	d1f9      	bne.n	8007be6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bf8:	482c      	ldr	r0, [pc, #176]	; (8007cac <main+0x128>)
 8007bfa:	f001 fa7c 	bl	80090f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c04:	4829      	ldr	r0, [pc, #164]	; (8007cac <main+0x128>)
 8007c06:	f001 fa76 	bl	80090f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2104      	movs	r1, #4
 8007c0e:	4827      	ldr	r0, [pc, #156]	; (8007cac <main+0x128>)
 8007c10:	f001 fa71 	bl	80090f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007c14:	2200      	movs	r2, #0
 8007c16:	2102      	movs	r1, #2
 8007c18:	4824      	ldr	r0, [pc, #144]	; (8007cac <main+0x128>)
 8007c1a:	f001 fa6c 	bl	80090f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2101      	movs	r1, #1
 8007c22:	4822      	ldr	r0, [pc, #136]	; (8007cac <main+0x128>)
 8007c24:	f001 fa67 	bl	80090f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007c28:	2200      	movs	r2, #0
 8007c2a:	2120      	movs	r1, #32
 8007c2c:	4822      	ldr	r0, [pc, #136]	; (8007cb8 <main+0x134>)
 8007c2e:	f001 fa62 	bl	80090f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007c32:	2200      	movs	r2, #0
 8007c34:	2110      	movs	r1, #16
 8007c36:	4820      	ldr	r0, [pc, #128]	; (8007cb8 <main+0x134>)
 8007c38:	f001 fa5d 	bl	80090f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	2180      	movs	r1, #128	; 0x80
 8007c40:	481e      	ldr	r0, [pc, #120]	; (8007cbc <main+0x138>)
 8007c42:	f001 fa58 	bl	80090f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007c46:	2200      	movs	r2, #0
 8007c48:	2140      	movs	r1, #64	; 0x40
 8007c4a:	481c      	ldr	r0, [pc, #112]	; (8007cbc <main+0x138>)
 8007c4c:	f001 fa53 	bl	80090f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007c50:	2200      	movs	r2, #0
 8007c52:	2120      	movs	r1, #32
 8007c54:	4819      	ldr	r0, [pc, #100]	; (8007cbc <main+0x138>)
 8007c56:	f001 fa4e 	bl	80090f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2110      	movs	r1, #16
 8007c5e:	4817      	ldr	r0, [pc, #92]	; (8007cbc <main+0x138>)
 8007c60:	f001 fa49 	bl	80090f6 <HAL_GPIO_WritePin>

  i2cTest();
 8007c64:	f7f8 ffe4 	bl	8000c30 <i2cTest>
  HAL_Delay(100);
 8007c68:	2064      	movs	r0, #100	; 0x64
 8007c6a:	f000 fc5d 	bl	8008528 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007c6e:	4a14      	ldr	r2, [pc, #80]	; (8007cc0 <main+0x13c>)
 8007c70:	2101      	movs	r1, #1
 8007c72:	2001      	movs	r0, #1
 8007c74:	f7ff ff02 	bl	8007a7c <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007c78:	4a12      	ldr	r2, [pc, #72]	; (8007cc4 <main+0x140>)
 8007c7a:	2101      	movs	r1, #1
 8007c7c:	2002      	movs	r0, #2
 8007c7e:	f7ff fefd 	bl	8007a7c <lcd_print>
  HAL_Delay(1000);
 8007c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c86:	f000 fc4f 	bl	8008528 <HAL_Delay>
  lcd_clear();
 8007c8a:	f7ff ff23 	bl	8007ad4 <lcd_clear>

  eepromKontrol();
 8007c8e:	f7f8 fad1 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007c92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c96:	f000 fc47 	bl	8008528 <HAL_Delay>

  backLightTimer = millis;
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <main+0x144>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a0b      	ldr	r2, [pc, #44]	; (8007ccc <main+0x148>)
 8007ca0:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007ca2:	f7ff fd2b 	bl	80076fc <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007ca6:	f7fe fd69 	bl	800677c <mainLoop>
 8007caa:	e7fc      	b.n	8007ca6 <main+0x122>
 8007cac:	40010c00 	.word	0x40010c00
 8007cb0:	20000410 	.word	0x20000410
 8007cb4:	200003bc 	.word	0x200003bc
 8007cb8:	40011000 	.word	0x40011000
 8007cbc:	40010800 	.word	0x40010800
 8007cc0:	0800da88 	.word	0x0800da88
 8007cc4:	0800da9c 	.word	0x0800da9c
 8007cc8:	20000210 	.word	0x20000210
 8007ccc:	2000022c 	.word	0x2000022c

08007cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b090      	sub	sp, #64	; 0x40
 8007cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007cd6:	f107 0318 	add.w	r3, r7, #24
 8007cda:	2228      	movs	r2, #40	; 0x28
 8007cdc:	2100      	movs	r1, #0
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f004 fa52 	bl	800c188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ce4:	1d3b      	adds	r3, r7, #4
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	605a      	str	r2, [r3, #4]
 8007cec:	609a      	str	r2, [r3, #8]
 8007cee:	60da      	str	r2, [r3, #12]
 8007cf0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007d00:	2301      	movs	r3, #1
 8007d02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007d04:	2302      	movs	r3, #2
 8007d06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007d0e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d14:	f107 0318 	add.w	r3, r7, #24
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f002 fc3f 	bl	800a59c <HAL_RCC_OscConfig>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007d24:	f000 f9a2 	bl	800806c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007d28:	230f      	movs	r3, #15
 8007d2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d30:	2300      	movs	r3, #0
 8007d32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007d3e:	1d3b      	adds	r3, r7, #4
 8007d40:	2102      	movs	r1, #2
 8007d42:	4618      	mov	r0, r3
 8007d44:	f002 feac 	bl	800aaa0 <HAL_RCC_ClockConfig>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007d4e:	f000 f98d 	bl	800806c <Error_Handler>
  }
}
 8007d52:	bf00      	nop
 8007d54:	3740      	adds	r7, #64	; 0x40
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007d60:	4b16      	ldr	r3, [pc, #88]	; (8007dbc <MX_CAN_Init+0x60>)
 8007d62:	4a17      	ldr	r2, [pc, #92]	; (8007dc0 <MX_CAN_Init+0x64>)
 8007d64:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007d66:	4b15      	ldr	r3, [pc, #84]	; (8007dbc <MX_CAN_Init+0x60>)
 8007d68:	2210      	movs	r2, #16
 8007d6a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007d6c:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <MX_CAN_Init+0x60>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007d72:	4b12      	ldr	r3, [pc, #72]	; (8007dbc <MX_CAN_Init+0x60>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007d78:	4b10      	ldr	r3, [pc, #64]	; (8007dbc <MX_CAN_Init+0x60>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007d7e:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <MX_CAN_Init+0x60>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007d84:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <MX_CAN_Init+0x60>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007d8a:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <MX_CAN_Init+0x60>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <MX_CAN_Init+0x60>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007d96:	4b09      	ldr	r3, [pc, #36]	; (8007dbc <MX_CAN_Init+0x60>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007d9c:	4b07      	ldr	r3, [pc, #28]	; (8007dbc <MX_CAN_Init+0x60>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007da2:	4b06      	ldr	r3, [pc, #24]	; (8007dbc <MX_CAN_Init+0x60>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007da8:	4804      	ldr	r0, [pc, #16]	; (8007dbc <MX_CAN_Init+0x60>)
 8007daa:	f000 fbe1 	bl	8008570 <HAL_CAN_Init>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007db4:	f000 f95a 	bl	800806c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007db8:	bf00      	nop
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20000394 	.word	0x20000394
 8007dc0:	40006400 	.word	0x40006400

08007dc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007dc8:	4b12      	ldr	r3, [pc, #72]	; (8007e14 <MX_I2C1_Init+0x50>)
 8007dca:	4a13      	ldr	r2, [pc, #76]	; (8007e18 <MX_I2C1_Init+0x54>)
 8007dcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007dce:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <MX_I2C1_Init+0x50>)
 8007dd0:	4a12      	ldr	r2, [pc, #72]	; (8007e1c <MX_I2C1_Init+0x58>)
 8007dd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007dd4:	4b0f      	ldr	r3, [pc, #60]	; (8007e14 <MX_I2C1_Init+0x50>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007dda:	4b0e      	ldr	r3, [pc, #56]	; (8007e14 <MX_I2C1_Init+0x50>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007de0:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <MX_I2C1_Init+0x50>)
 8007de2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007de6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007de8:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <MX_I2C1_Init+0x50>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <MX_I2C1_Init+0x50>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007df4:	4b07      	ldr	r3, [pc, #28]	; (8007e14 <MX_I2C1_Init+0x50>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007dfa:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <MX_I2C1_Init+0x50>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007e00:	4804      	ldr	r0, [pc, #16]	; (8007e14 <MX_I2C1_Init+0x50>)
 8007e02:	f001 f9a9 	bl	8009158 <HAL_I2C_Init>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007e0c:	f000 f92e 	bl	800806c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007e10:	bf00      	nop
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	200003bc 	.word	0x200003bc
 8007e18:	40005400 	.word	0x40005400
 8007e1c:	00061a80 	.word	0x00061a80

08007e20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007e26:	f107 0308 	add.w	r3, r7, #8
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	605a      	str	r2, [r3, #4]
 8007e30:	609a      	str	r2, [r3, #8]
 8007e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e34:	463b      	mov	r3, r7
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007e3c:	4b1f      	ldr	r3, [pc, #124]	; (8007ebc <MX_TIM1_Init+0x9c>)
 8007e3e:	4a20      	ldr	r2, [pc, #128]	; (8007ec0 <MX_TIM1_Init+0xa0>)
 8007e40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007e42:	4b1e      	ldr	r3, [pc, #120]	; (8007ebc <MX_TIM1_Init+0x9c>)
 8007e44:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007e48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e4a:	4b1c      	ldr	r3, [pc, #112]	; (8007ebc <MX_TIM1_Init+0x9c>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007e50:	4b1a      	ldr	r3, [pc, #104]	; (8007ebc <MX_TIM1_Init+0x9c>)
 8007e52:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007e56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e58:	4b18      	ldr	r3, [pc, #96]	; (8007ebc <MX_TIM1_Init+0x9c>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007e5e:	4b17      	ldr	r3, [pc, #92]	; (8007ebc <MX_TIM1_Init+0x9c>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e64:	4b15      	ldr	r3, [pc, #84]	; (8007ebc <MX_TIM1_Init+0x9c>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007e6a:	4814      	ldr	r0, [pc, #80]	; (8007ebc <MX_TIM1_Init+0x9c>)
 8007e6c:	f002 ffa6 	bl	800adbc <HAL_TIM_Base_Init>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007e76:	f000 f8f9 	bl	800806c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007e80:	f107 0308 	add.w	r3, r7, #8
 8007e84:	4619      	mov	r1, r3
 8007e86:	480d      	ldr	r0, [pc, #52]	; (8007ebc <MX_TIM1_Init+0x9c>)
 8007e88:	f003 f950 	bl	800b12c <HAL_TIM_ConfigClockSource>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007e92:	f000 f8eb 	bl	800806c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e96:	2300      	movs	r3, #0
 8007e98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007e9e:	463b      	mov	r3, r7
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4806      	ldr	r0, [pc, #24]	; (8007ebc <MX_TIM1_Init+0x9c>)
 8007ea4:	f003 fb3e 	bl	800b524 <HAL_TIMEx_MasterConfigSynchronization>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007eae:	f000 f8dd 	bl	800806c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007eb2:	bf00      	nop
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	20000410 	.word	0x20000410
 8007ec0:	40012c00 	.word	0x40012c00

08007ec4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007ec8:	4b11      	ldr	r3, [pc, #68]	; (8007f10 <MX_USART1_UART_Init+0x4c>)
 8007eca:	4a12      	ldr	r2, [pc, #72]	; (8007f14 <MX_USART1_UART_Init+0x50>)
 8007ecc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007ece:	4b10      	ldr	r3, [pc, #64]	; (8007f10 <MX_USART1_UART_Init+0x4c>)
 8007ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ed4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007ed6:	4b0e      	ldr	r3, [pc, #56]	; (8007f10 <MX_USART1_UART_Init+0x4c>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007edc:	4b0c      	ldr	r3, [pc, #48]	; (8007f10 <MX_USART1_UART_Init+0x4c>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007ee2:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <MX_USART1_UART_Init+0x4c>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007ee8:	4b09      	ldr	r3, [pc, #36]	; (8007f10 <MX_USART1_UART_Init+0x4c>)
 8007eea:	220c      	movs	r2, #12
 8007eec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007eee:	4b08      	ldr	r3, [pc, #32]	; (8007f10 <MX_USART1_UART_Init+0x4c>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007ef4:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <MX_USART1_UART_Init+0x4c>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007efa:	4805      	ldr	r0, [pc, #20]	; (8007f10 <MX_USART1_UART_Init+0x4c>)
 8007efc:	f003 fb90 	bl	800b620 <HAL_UART_Init>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007f06:	f000 f8b1 	bl	800806c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007f0a:	bf00      	nop
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000458 	.word	0x20000458
 8007f14:	40013800 	.word	0x40013800

08007f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f1e:	f107 0310 	add.w	r3, r7, #16
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	605a      	str	r2, [r3, #4]
 8007f28:	609a      	str	r2, [r3, #8]
 8007f2a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f2c:	4b4b      	ldr	r3, [pc, #300]	; (800805c <MX_GPIO_Init+0x144>)
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	4a4a      	ldr	r2, [pc, #296]	; (800805c <MX_GPIO_Init+0x144>)
 8007f32:	f043 0310 	orr.w	r3, r3, #16
 8007f36:	6193      	str	r3, [r2, #24]
 8007f38:	4b48      	ldr	r3, [pc, #288]	; (800805c <MX_GPIO_Init+0x144>)
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	f003 0310 	and.w	r3, r3, #16
 8007f40:	60fb      	str	r3, [r7, #12]
 8007f42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f44:	4b45      	ldr	r3, [pc, #276]	; (800805c <MX_GPIO_Init+0x144>)
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	4a44      	ldr	r2, [pc, #272]	; (800805c <MX_GPIO_Init+0x144>)
 8007f4a:	f043 0320 	orr.w	r3, r3, #32
 8007f4e:	6193      	str	r3, [r2, #24]
 8007f50:	4b42      	ldr	r3, [pc, #264]	; (800805c <MX_GPIO_Init+0x144>)
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	f003 0320 	and.w	r3, r3, #32
 8007f58:	60bb      	str	r3, [r7, #8]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f5c:	4b3f      	ldr	r3, [pc, #252]	; (800805c <MX_GPIO_Init+0x144>)
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	4a3e      	ldr	r2, [pc, #248]	; (800805c <MX_GPIO_Init+0x144>)
 8007f62:	f043 0304 	orr.w	r3, r3, #4
 8007f66:	6193      	str	r3, [r2, #24]
 8007f68:	4b3c      	ldr	r3, [pc, #240]	; (800805c <MX_GPIO_Init+0x144>)
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	607b      	str	r3, [r7, #4]
 8007f72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f74:	4b39      	ldr	r3, [pc, #228]	; (800805c <MX_GPIO_Init+0x144>)
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	4a38      	ldr	r2, [pc, #224]	; (800805c <MX_GPIO_Init+0x144>)
 8007f7a:	f043 0308 	orr.w	r3, r3, #8
 8007f7e:	6193      	str	r3, [r2, #24]
 8007f80:	4b36      	ldr	r3, [pc, #216]	; (800805c <MX_GPIO_Init+0x144>)
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	f003 0308 	and.w	r3, r3, #8
 8007f88:	603b      	str	r3, [r7, #0]
 8007f8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	21f0      	movs	r1, #240	; 0xf0
 8007f90:	4833      	ldr	r0, [pc, #204]	; (8008060 <MX_GPIO_Init+0x148>)
 8007f92:	f001 f8b0 	bl	80090f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007f96:	2200      	movs	r2, #0
 8007f98:	f241 0130 	movw	r1, #4144	; 0x1030
 8007f9c:	4831      	ldr	r0, [pc, #196]	; (8008064 <MX_GPIO_Init+0x14c>)
 8007f9e:	f001 f8aa 	bl	80090f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f640 4107 	movw	r1, #3079	; 0xc07
 8007fa8:	482f      	ldr	r0, [pc, #188]	; (8008068 <MX_GPIO_Init+0x150>)
 8007faa:	f001 f8a4 	bl	80090f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007fae:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007fb2:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fbc:	f107 0310 	add.w	r3, r7, #16
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4828      	ldr	r0, [pc, #160]	; (8008064 <MX_GPIO_Init+0x14c>)
 8007fc4:	f000 fe20 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007fc8:	f248 130f 	movw	r3, #33039	; 0x810f
 8007fcc:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fd6:	f107 0310 	add.w	r3, r7, #16
 8007fda:	4619      	mov	r1, r3
 8007fdc:	4820      	ldr	r0, [pc, #128]	; (8008060 <MX_GPIO_Init+0x148>)
 8007fde:	f000 fe13 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007fe2:	23f0      	movs	r3, #240	; 0xf0
 8007fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fee:	2302      	movs	r3, #2
 8007ff0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ff2:	f107 0310 	add.w	r3, r7, #16
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	4819      	ldr	r0, [pc, #100]	; (8008060 <MX_GPIO_Init+0x148>)
 8007ffa:	f000 fe05 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007ffe:	f241 0330 	movw	r3, #4144	; 0x1030
 8008002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008004:	2301      	movs	r3, #1
 8008006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008008:	2300      	movs	r3, #0
 800800a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800800c:	2302      	movs	r3, #2
 800800e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008010:	f107 0310 	add.w	r3, r7, #16
 8008014:	4619      	mov	r1, r3
 8008016:	4813      	ldr	r0, [pc, #76]	; (8008064 <MX_GPIO_Init+0x14c>)
 8008018:	f000 fdf6 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800801c:	f640 4307 	movw	r3, #3079	; 0xc07
 8008020:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008022:	2301      	movs	r3, #1
 8008024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008026:	2300      	movs	r3, #0
 8008028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800802a:	2302      	movs	r3, #2
 800802c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800802e:	f107 0310 	add.w	r3, r7, #16
 8008032:	4619      	mov	r1, r3
 8008034:	480c      	ldr	r0, [pc, #48]	; (8008068 <MX_GPIO_Init+0x150>)
 8008036:	f000 fde7 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800803a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800803e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008040:	2300      	movs	r3, #0
 8008042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008044:	2300      	movs	r3, #0
 8008046:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008048:	f107 0310 	add.w	r3, r7, #16
 800804c:	4619      	mov	r1, r3
 800804e:	4806      	ldr	r0, [pc, #24]	; (8008068 <MX_GPIO_Init+0x150>)
 8008050:	f000 fdda 	bl	8008c08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008054:	bf00      	nop
 8008056:	3720      	adds	r7, #32
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	40021000 	.word	0x40021000
 8008060:	40010800 	.word	0x40010800
 8008064:	40011000 	.word	0x40011000
 8008068:	40010c00 	.word	0x40010c00

0800806c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800806c:	b480      	push	{r7}
 800806e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008070:	bf00      	nop
 8008072:	46bd      	mov	sp, r7
 8008074:	bc80      	pop	{r7}
 8008076:	4770      	bx	lr

08008078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800807e:	4b15      	ldr	r3, [pc, #84]	; (80080d4 <HAL_MspInit+0x5c>)
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	4a14      	ldr	r2, [pc, #80]	; (80080d4 <HAL_MspInit+0x5c>)
 8008084:	f043 0301 	orr.w	r3, r3, #1
 8008088:	6193      	str	r3, [r2, #24]
 800808a:	4b12      	ldr	r3, [pc, #72]	; (80080d4 <HAL_MspInit+0x5c>)
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	60bb      	str	r3, [r7, #8]
 8008094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008096:	4b0f      	ldr	r3, [pc, #60]	; (80080d4 <HAL_MspInit+0x5c>)
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	4a0e      	ldr	r2, [pc, #56]	; (80080d4 <HAL_MspInit+0x5c>)
 800809c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080a0:	61d3      	str	r3, [r2, #28]
 80080a2:	4b0c      	ldr	r3, [pc, #48]	; (80080d4 <HAL_MspInit+0x5c>)
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080aa:	607b      	str	r3, [r7, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80080ae:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <HAL_MspInit+0x60>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	4a04      	ldr	r2, [pc, #16]	; (80080d8 <HAL_MspInit+0x60>)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080ca:	bf00      	nop
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bc80      	pop	{r7}
 80080d2:	4770      	bx	lr
 80080d4:	40021000 	.word	0x40021000
 80080d8:	40010000 	.word	0x40010000

080080dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080e4:	f107 0310 	add.w	r3, r7, #16
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	605a      	str	r2, [r3, #4]
 80080ee:	609a      	str	r2, [r3, #8]
 80080f0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a1c      	ldr	r2, [pc, #112]	; (8008168 <HAL_CAN_MspInit+0x8c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d131      	bne.n	8008160 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80080fc:	4b1b      	ldr	r3, [pc, #108]	; (800816c <HAL_CAN_MspInit+0x90>)
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	4a1a      	ldr	r2, [pc, #104]	; (800816c <HAL_CAN_MspInit+0x90>)
 8008102:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008106:	61d3      	str	r3, [r2, #28]
 8008108:	4b18      	ldr	r3, [pc, #96]	; (800816c <HAL_CAN_MspInit+0x90>)
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008114:	4b15      	ldr	r3, [pc, #84]	; (800816c <HAL_CAN_MspInit+0x90>)
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	4a14      	ldr	r2, [pc, #80]	; (800816c <HAL_CAN_MspInit+0x90>)
 800811a:	f043 0304 	orr.w	r3, r3, #4
 800811e:	6193      	str	r3, [r2, #24]
 8008120:	4b12      	ldr	r3, [pc, #72]	; (800816c <HAL_CAN_MspInit+0x90>)
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	60bb      	str	r3, [r7, #8]
 800812a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800812c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008130:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008132:	2300      	movs	r3, #0
 8008134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008136:	2300      	movs	r3, #0
 8008138:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800813a:	f107 0310 	add.w	r3, r7, #16
 800813e:	4619      	mov	r1, r3
 8008140:	480b      	ldr	r0, [pc, #44]	; (8008170 <HAL_CAN_MspInit+0x94>)
 8008142:	f000 fd61 	bl	8008c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800814a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800814c:	2302      	movs	r3, #2
 800814e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008150:	2303      	movs	r3, #3
 8008152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008154:	f107 0310 	add.w	r3, r7, #16
 8008158:	4619      	mov	r1, r3
 800815a:	4805      	ldr	r0, [pc, #20]	; (8008170 <HAL_CAN_MspInit+0x94>)
 800815c:	f000 fd54 	bl	8008c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008160:	bf00      	nop
 8008162:	3720      	adds	r7, #32
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	40006400 	.word	0x40006400
 800816c:	40021000 	.word	0x40021000
 8008170:	40010800 	.word	0x40010800

08008174 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b088      	sub	sp, #32
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800817c:	f107 0310 	add.w	r3, r7, #16
 8008180:	2200      	movs	r2, #0
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	605a      	str	r2, [r3, #4]
 8008186:	609a      	str	r2, [r3, #8]
 8008188:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a15      	ldr	r2, [pc, #84]	; (80081e4 <HAL_I2C_MspInit+0x70>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d123      	bne.n	80081dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008194:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <HAL_I2C_MspInit+0x74>)
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	4a13      	ldr	r2, [pc, #76]	; (80081e8 <HAL_I2C_MspInit+0x74>)
 800819a:	f043 0308 	orr.w	r3, r3, #8
 800819e:	6193      	str	r3, [r2, #24]
 80081a0:	4b11      	ldr	r3, [pc, #68]	; (80081e8 <HAL_I2C_MspInit+0x74>)
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	f003 0308 	and.w	r3, r3, #8
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80081ac:	23c0      	movs	r3, #192	; 0xc0
 80081ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80081b0:	2312      	movs	r3, #18
 80081b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80081b4:	2303      	movs	r3, #3
 80081b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081b8:	f107 0310 	add.w	r3, r7, #16
 80081bc:	4619      	mov	r1, r3
 80081be:	480b      	ldr	r0, [pc, #44]	; (80081ec <HAL_I2C_MspInit+0x78>)
 80081c0:	f000 fd22 	bl	8008c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80081c4:	4b08      	ldr	r3, [pc, #32]	; (80081e8 <HAL_I2C_MspInit+0x74>)
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	4a07      	ldr	r2, [pc, #28]	; (80081e8 <HAL_I2C_MspInit+0x74>)
 80081ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081ce:	61d3      	str	r3, [r2, #28]
 80081d0:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <HAL_I2C_MspInit+0x74>)
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081d8:	60bb      	str	r3, [r7, #8]
 80081da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80081dc:	bf00      	nop
 80081de:	3720      	adds	r7, #32
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	40005400 	.word	0x40005400
 80081e8:	40021000 	.word	0x40021000
 80081ec:	40010c00 	.word	0x40010c00

080081f0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a0a      	ldr	r2, [pc, #40]	; (8008228 <HAL_I2C_MspDeInit+0x38>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d10d      	bne.n	800821e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008202:	4b0a      	ldr	r3, [pc, #40]	; (800822c <HAL_I2C_MspDeInit+0x3c>)
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	4a09      	ldr	r2, [pc, #36]	; (800822c <HAL_I2C_MspDeInit+0x3c>)
 8008208:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800820c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800820e:	2140      	movs	r1, #64	; 0x40
 8008210:	4807      	ldr	r0, [pc, #28]	; (8008230 <HAL_I2C_MspDeInit+0x40>)
 8008212:	f000 fe8d 	bl	8008f30 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008216:	2180      	movs	r1, #128	; 0x80
 8008218:	4805      	ldr	r0, [pc, #20]	; (8008230 <HAL_I2C_MspDeInit+0x40>)
 800821a:	f000 fe89 	bl	8008f30 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	40005400 	.word	0x40005400
 800822c:	40021000 	.word	0x40021000
 8008230:	40010c00 	.word	0x40010c00

08008234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a0d      	ldr	r2, [pc, #52]	; (8008278 <HAL_TIM_Base_MspInit+0x44>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d113      	bne.n	800826e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008246:	4b0d      	ldr	r3, [pc, #52]	; (800827c <HAL_TIM_Base_MspInit+0x48>)
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	4a0c      	ldr	r2, [pc, #48]	; (800827c <HAL_TIM_Base_MspInit+0x48>)
 800824c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008250:	6193      	str	r3, [r2, #24]
 8008252:	4b0a      	ldr	r3, [pc, #40]	; (800827c <HAL_TIM_Base_MspInit+0x48>)
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800825a:	60fb      	str	r3, [r7, #12]
 800825c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800825e:	2200      	movs	r2, #0
 8008260:	2100      	movs	r1, #0
 8008262:	2019      	movs	r0, #25
 8008264:	f000 fb57 	bl	8008916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008268:	2019      	movs	r0, #25
 800826a:	f000 fb70 	bl	800894e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800826e:	bf00      	nop
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	40012c00 	.word	0x40012c00
 800827c:	40021000 	.word	0x40021000

08008280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008288:	f107 0310 	add.w	r3, r7, #16
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	605a      	str	r2, [r3, #4]
 8008292:	609a      	str	r2, [r3, #8]
 8008294:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a20      	ldr	r2, [pc, #128]	; (800831c <HAL_UART_MspInit+0x9c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d139      	bne.n	8008314 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80082a0:	4b1f      	ldr	r3, [pc, #124]	; (8008320 <HAL_UART_MspInit+0xa0>)
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	4a1e      	ldr	r2, [pc, #120]	; (8008320 <HAL_UART_MspInit+0xa0>)
 80082a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082aa:	6193      	str	r3, [r2, #24]
 80082ac:	4b1c      	ldr	r3, [pc, #112]	; (8008320 <HAL_UART_MspInit+0xa0>)
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082b4:	60fb      	str	r3, [r7, #12]
 80082b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082b8:	4b19      	ldr	r3, [pc, #100]	; (8008320 <HAL_UART_MspInit+0xa0>)
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	4a18      	ldr	r2, [pc, #96]	; (8008320 <HAL_UART_MspInit+0xa0>)
 80082be:	f043 0304 	orr.w	r3, r3, #4
 80082c2:	6193      	str	r3, [r2, #24]
 80082c4:	4b16      	ldr	r3, [pc, #88]	; (8008320 <HAL_UART_MspInit+0xa0>)
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	f003 0304 	and.w	r3, r3, #4
 80082cc:	60bb      	str	r3, [r7, #8]
 80082ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80082d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082d6:	2302      	movs	r3, #2
 80082d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80082da:	2303      	movs	r3, #3
 80082dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082de:	f107 0310 	add.w	r3, r7, #16
 80082e2:	4619      	mov	r1, r3
 80082e4:	480f      	ldr	r0, [pc, #60]	; (8008324 <HAL_UART_MspInit+0xa4>)
 80082e6:	f000 fc8f 	bl	8008c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80082ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f4:	2300      	movs	r3, #0
 80082f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082f8:	f107 0310 	add.w	r3, r7, #16
 80082fc:	4619      	mov	r1, r3
 80082fe:	4809      	ldr	r0, [pc, #36]	; (8008324 <HAL_UART_MspInit+0xa4>)
 8008300:	f000 fc82 	bl	8008c08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008304:	2200      	movs	r2, #0
 8008306:	2100      	movs	r1, #0
 8008308:	2025      	movs	r0, #37	; 0x25
 800830a:	f000 fb04 	bl	8008916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800830e:	2025      	movs	r0, #37	; 0x25
 8008310:	f000 fb1d 	bl	800894e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008314:	bf00      	nop
 8008316:	3720      	adds	r7, #32
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	40013800 	.word	0x40013800
 8008320:	40021000 	.word	0x40021000
 8008324:	40010800 	.word	0x40010800

08008328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800832c:	e7fe      	b.n	800832c <NMI_Handler+0x4>

0800832e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800832e:	b480      	push	{r7}
 8008330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008332:	e7fe      	b.n	8008332 <HardFault_Handler+0x4>

08008334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008334:	b480      	push	{r7}
 8008336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008338:	e7fe      	b.n	8008338 <MemManage_Handler+0x4>

0800833a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800833a:	b480      	push	{r7}
 800833c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800833e:	e7fe      	b.n	800833e <BusFault_Handler+0x4>

08008340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008340:	b480      	push	{r7}
 8008342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008344:	e7fe      	b.n	8008344 <UsageFault_Handler+0x4>

08008346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008346:	b480      	push	{r7}
 8008348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800834a:	bf00      	nop
 800834c:	46bd      	mov	sp, r7
 800834e:	bc80      	pop	{r7}
 8008350:	4770      	bx	lr

08008352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008352:	b480      	push	{r7}
 8008354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008356:	bf00      	nop
 8008358:	46bd      	mov	sp, r7
 800835a:	bc80      	pop	{r7}
 800835c:	4770      	bx	lr

0800835e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800835e:	b480      	push	{r7}
 8008360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008362:	bf00      	nop
 8008364:	46bd      	mov	sp, r7
 8008366:	bc80      	pop	{r7}
 8008368:	4770      	bx	lr

0800836a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800836e:	f000 f8bf 	bl	80084f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008372:	bf00      	nop
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800837c:	4802      	ldr	r0, [pc, #8]	; (8008388 <TIM1_UP_IRQHandler+0x10>)
 800837e:	f002 fdcd 	bl	800af1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008382:	bf00      	nop
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20000410 	.word	0x20000410

0800838c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008390:	4802      	ldr	r0, [pc, #8]	; (800839c <USART1_IRQHandler+0x10>)
 8008392:	f003 f9cb 	bl	800b72c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008396:	bf00      	nop
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20000458 	.word	0x20000458

080083a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80083a8:	4a14      	ldr	r2, [pc, #80]	; (80083fc <_sbrk+0x5c>)
 80083aa:	4b15      	ldr	r3, [pc, #84]	; (8008400 <_sbrk+0x60>)
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80083b4:	4b13      	ldr	r3, [pc, #76]	; (8008404 <_sbrk+0x64>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d102      	bne.n	80083c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80083bc:	4b11      	ldr	r3, [pc, #68]	; (8008404 <_sbrk+0x64>)
 80083be:	4a12      	ldr	r2, [pc, #72]	; (8008408 <_sbrk+0x68>)
 80083c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80083c2:	4b10      	ldr	r3, [pc, #64]	; (8008404 <_sbrk+0x64>)
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4413      	add	r3, r2
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d207      	bcs.n	80083e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083d0:	f003 fe8e 	bl	800c0f0 <__errno>
 80083d4:	4603      	mov	r3, r0
 80083d6:	220c      	movs	r2, #12
 80083d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083da:	f04f 33ff 	mov.w	r3, #4294967295
 80083de:	e009      	b.n	80083f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80083e0:	4b08      	ldr	r3, [pc, #32]	; (8008404 <_sbrk+0x64>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80083e6:	4b07      	ldr	r3, [pc, #28]	; (8008404 <_sbrk+0x64>)
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4413      	add	r3, r2
 80083ee:	4a05      	ldr	r2, [pc, #20]	; (8008404 <_sbrk+0x64>)
 80083f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80083f2:	68fb      	ldr	r3, [r7, #12]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3718      	adds	r7, #24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	2000c000 	.word	0x2000c000
 8008400:	00000400 	.word	0x00000400
 8008404:	200004a0 	.word	0x200004a0
 8008408:	200004b8 	.word	0x200004b8

0800840c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008410:	bf00      	nop
 8008412:	46bd      	mov	sp, r7
 8008414:	bc80      	pop	{r7}
 8008416:	4770      	bx	lr

08008418 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008418:	480c      	ldr	r0, [pc, #48]	; (800844c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800841a:	490d      	ldr	r1, [pc, #52]	; (8008450 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800841c:	4a0d      	ldr	r2, [pc, #52]	; (8008454 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800841e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008420:	e002      	b.n	8008428 <LoopCopyDataInit>

08008422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008426:	3304      	adds	r3, #4

08008428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800842a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800842c:	d3f9      	bcc.n	8008422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800842e:	4a0a      	ldr	r2, [pc, #40]	; (8008458 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008430:	4c0a      	ldr	r4, [pc, #40]	; (800845c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008434:	e001      	b.n	800843a <LoopFillZerobss>

08008436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008438:	3204      	adds	r2, #4

0800843a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800843a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800843c:	d3fb      	bcc.n	8008436 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800843e:	f7ff ffe5 	bl	800840c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008442:	f003 fe5b 	bl	800c0fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008446:	f7ff fb9d 	bl	8007b84 <main>
  bx lr
 800844a:	4770      	bx	lr
  ldr r0, =_sdata
 800844c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008450:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8008454:	0800db3c 	.word	0x0800db3c
  ldr r2, =_sbss
 8008458:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800845c:	200004b8 	.word	0x200004b8

08008460 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008460:	e7fe      	b.n	8008460 <ADC1_2_IRQHandler>
	...

08008464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008468:	4b08      	ldr	r3, [pc, #32]	; (800848c <HAL_Init+0x28>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a07      	ldr	r2, [pc, #28]	; (800848c <HAL_Init+0x28>)
 800846e:	f043 0310 	orr.w	r3, r3, #16
 8008472:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008474:	2003      	movs	r0, #3
 8008476:	f000 fa43 	bl	8008900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800847a:	200f      	movs	r0, #15
 800847c:	f000 f808 	bl	8008490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008480:	f7ff fdfa 	bl	8008078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	40022000 	.word	0x40022000

08008490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008498:	4b12      	ldr	r3, [pc, #72]	; (80084e4 <HAL_InitTick+0x54>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	4b12      	ldr	r3, [pc, #72]	; (80084e8 <HAL_InitTick+0x58>)
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	4619      	mov	r1, r3
 80084a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80084aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 fa5b 	bl	800896a <HAL_SYSTICK_Config>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e00e      	b.n	80084dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b0f      	cmp	r3, #15
 80084c2:	d80a      	bhi.n	80084da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084c4:	2200      	movs	r2, #0
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	f04f 30ff 	mov.w	r0, #4294967295
 80084cc:	f000 fa23 	bl	8008916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80084d0:	4a06      	ldr	r2, [pc, #24]	; (80084ec <HAL_InitTick+0x5c>)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	e000      	b.n	80084dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	200000a0 	.word	0x200000a0
 80084e8:	200000a8 	.word	0x200000a8
 80084ec:	200000a4 	.word	0x200000a4

080084f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80084f0:	b480      	push	{r7}
 80084f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80084f4:	4b05      	ldr	r3, [pc, #20]	; (800850c <HAL_IncTick+0x1c>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	461a      	mov	r2, r3
 80084fa:	4b05      	ldr	r3, [pc, #20]	; (8008510 <HAL_IncTick+0x20>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4413      	add	r3, r2
 8008500:	4a03      	ldr	r2, [pc, #12]	; (8008510 <HAL_IncTick+0x20>)
 8008502:	6013      	str	r3, [r2, #0]
}
 8008504:	bf00      	nop
 8008506:	46bd      	mov	sp, r7
 8008508:	bc80      	pop	{r7}
 800850a:	4770      	bx	lr
 800850c:	200000a8 	.word	0x200000a8
 8008510:	200004a4 	.word	0x200004a4

08008514 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0
  return uwTick;
 8008518:	4b02      	ldr	r3, [pc, #8]	; (8008524 <HAL_GetTick+0x10>)
 800851a:	681b      	ldr	r3, [r3, #0]
}
 800851c:	4618      	mov	r0, r3
 800851e:	46bd      	mov	sp, r7
 8008520:	bc80      	pop	{r7}
 8008522:	4770      	bx	lr
 8008524:	200004a4 	.word	0x200004a4

08008528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008530:	f7ff fff0 	bl	8008514 <HAL_GetTick>
 8008534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008540:	d005      	beq.n	800854e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008542:	4b0a      	ldr	r3, [pc, #40]	; (800856c <HAL_Delay+0x44>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800854e:	bf00      	nop
 8008550:	f7ff ffe0 	bl	8008514 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	429a      	cmp	r2, r3
 800855e:	d8f7      	bhi.n	8008550 <HAL_Delay+0x28>
  {
  }
}
 8008560:	bf00      	nop
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	200000a8 	.word	0x200000a8

08008570 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e0ed      	b.n	800875e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d102      	bne.n	8008594 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff fda4 	bl	80080dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f042 0201 	orr.w	r2, r2, #1
 80085a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085a4:	f7ff ffb6 	bl	8008514 <HAL_GetTick>
 80085a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80085aa:	e012      	b.n	80085d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80085ac:	f7ff ffb2 	bl	8008514 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b0a      	cmp	r3, #10
 80085b8:	d90b      	bls.n	80085d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2205      	movs	r2, #5
 80085ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e0c5      	b.n	800875e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0e5      	beq.n	80085ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0202 	bic.w	r2, r2, #2
 80085ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085f0:	f7ff ff90 	bl	8008514 <HAL_GetTick>
 80085f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80085f6:	e012      	b.n	800861e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80085f8:	f7ff ff8c 	bl	8008514 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b0a      	cmp	r3, #10
 8008604:	d90b      	bls.n	800861e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2205      	movs	r2, #5
 8008616:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e09f      	b.n	800875e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e5      	bne.n	80085f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	7e1b      	ldrb	r3, [r3, #24]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d108      	bne.n	8008646 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	e007      	b.n	8008656 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008654:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	7e5b      	ldrb	r3, [r3, #25]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d108      	bne.n	8008670 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	e007      	b.n	8008680 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800867e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	7e9b      	ldrb	r3, [r3, #26]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d108      	bne.n	800869a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0220 	orr.w	r2, r2, #32
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	e007      	b.n	80086aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f022 0220 	bic.w	r2, r2, #32
 80086a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	7edb      	ldrb	r3, [r3, #27]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d108      	bne.n	80086c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 0210 	bic.w	r2, r2, #16
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	e007      	b.n	80086d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f042 0210 	orr.w	r2, r2, #16
 80086d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	7f1b      	ldrb	r3, [r3, #28]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d108      	bne.n	80086ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0208 	orr.w	r2, r2, #8
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	e007      	b.n	80086fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 0208 	bic.w	r2, r2, #8
 80086fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	7f5b      	ldrb	r3, [r3, #29]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d108      	bne.n	8008718 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f042 0204 	orr.w	r2, r2, #4
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	e007      	b.n	8008728 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f022 0204 	bic.w	r2, r2, #4
 8008726:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	689a      	ldr	r2, [r3, #8]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	431a      	orrs	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	431a      	orrs	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	ea42 0103 	orr.w	r1, r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	1e5a      	subs	r2, r3, #1
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <__NVIC_SetPriorityGrouping>:
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f003 0307 	and.w	r3, r3, #7
 8008776:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008778:	4b0c      	ldr	r3, [pc, #48]	; (80087ac <__NVIC_SetPriorityGrouping+0x44>)
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008784:	4013      	ands	r3, r2
 8008786:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800879a:	4a04      	ldr	r2, [pc, #16]	; (80087ac <__NVIC_SetPriorityGrouping+0x44>)
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	60d3      	str	r3, [r2, #12]
}
 80087a0:	bf00      	nop
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bc80      	pop	{r7}
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	e000ed00 	.word	0xe000ed00

080087b0 <__NVIC_GetPriorityGrouping>:
{
 80087b0:	b480      	push	{r7}
 80087b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087b4:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <__NVIC_GetPriorityGrouping+0x18>)
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	0a1b      	lsrs	r3, r3, #8
 80087ba:	f003 0307 	and.w	r3, r3, #7
}
 80087be:	4618      	mov	r0, r3
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bc80      	pop	{r7}
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	e000ed00 	.word	0xe000ed00

080087cc <__NVIC_EnableIRQ>:
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	db0b      	blt.n	80087f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	f003 021f 	and.w	r2, r3, #31
 80087e4:	4906      	ldr	r1, [pc, #24]	; (8008800 <__NVIC_EnableIRQ+0x34>)
 80087e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087ea:	095b      	lsrs	r3, r3, #5
 80087ec:	2001      	movs	r0, #1
 80087ee:	fa00 f202 	lsl.w	r2, r0, r2
 80087f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bc80      	pop	{r7}
 80087fe:	4770      	bx	lr
 8008800:	e000e100 	.word	0xe000e100

08008804 <__NVIC_SetPriority>:
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	6039      	str	r1, [r7, #0]
 800880e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008814:	2b00      	cmp	r3, #0
 8008816:	db0a      	blt.n	800882e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	b2da      	uxtb	r2, r3
 800881c:	490c      	ldr	r1, [pc, #48]	; (8008850 <__NVIC_SetPriority+0x4c>)
 800881e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008822:	0112      	lsls	r2, r2, #4
 8008824:	b2d2      	uxtb	r2, r2
 8008826:	440b      	add	r3, r1
 8008828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800882c:	e00a      	b.n	8008844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	b2da      	uxtb	r2, r3
 8008832:	4908      	ldr	r1, [pc, #32]	; (8008854 <__NVIC_SetPriority+0x50>)
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	f003 030f 	and.w	r3, r3, #15
 800883a:	3b04      	subs	r3, #4
 800883c:	0112      	lsls	r2, r2, #4
 800883e:	b2d2      	uxtb	r2, r2
 8008840:	440b      	add	r3, r1
 8008842:	761a      	strb	r2, [r3, #24]
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	bc80      	pop	{r7}
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	e000e100 	.word	0xe000e100
 8008854:	e000ed00 	.word	0xe000ed00

08008858 <NVIC_EncodePriority>:
{
 8008858:	b480      	push	{r7}
 800885a:	b089      	sub	sp, #36	; 0x24
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f003 0307 	and.w	r3, r3, #7
 800886a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	f1c3 0307 	rsb	r3, r3, #7
 8008872:	2b04      	cmp	r3, #4
 8008874:	bf28      	it	cs
 8008876:	2304      	movcs	r3, #4
 8008878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	3304      	adds	r3, #4
 800887e:	2b06      	cmp	r3, #6
 8008880:	d902      	bls.n	8008888 <NVIC_EncodePriority+0x30>
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	3b03      	subs	r3, #3
 8008886:	e000      	b.n	800888a <NVIC_EncodePriority+0x32>
 8008888:	2300      	movs	r3, #0
 800888a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800888c:	f04f 32ff 	mov.w	r2, #4294967295
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	fa02 f303 	lsl.w	r3, r2, r3
 8008896:	43da      	mvns	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	401a      	ands	r2, r3
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80088a0:	f04f 31ff 	mov.w	r1, #4294967295
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	fa01 f303 	lsl.w	r3, r1, r3
 80088aa:	43d9      	mvns	r1, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088b0:	4313      	orrs	r3, r2
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3724      	adds	r7, #36	; 0x24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bc80      	pop	{r7}
 80088ba:	4770      	bx	lr

080088bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088cc:	d301      	bcc.n	80088d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80088ce:	2301      	movs	r3, #1
 80088d0:	e00f      	b.n	80088f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80088d2:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <SysTick_Config+0x40>)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80088da:	210f      	movs	r1, #15
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	f7ff ff90 	bl	8008804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <SysTick_Config+0x40>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80088ea:	4b04      	ldr	r3, [pc, #16]	; (80088fc <SysTick_Config+0x40>)
 80088ec:	2207      	movs	r2, #7
 80088ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	e000e010 	.word	0xe000e010

08008900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7ff ff2d 	bl	8008768 <__NVIC_SetPriorityGrouping>
}
 800890e:	bf00      	nop
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008916:	b580      	push	{r7, lr}
 8008918:	b086      	sub	sp, #24
 800891a:	af00      	add	r7, sp, #0
 800891c:	4603      	mov	r3, r0
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
 8008922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008924:	2300      	movs	r3, #0
 8008926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008928:	f7ff ff42 	bl	80087b0 <__NVIC_GetPriorityGrouping>
 800892c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	68b9      	ldr	r1, [r7, #8]
 8008932:	6978      	ldr	r0, [r7, #20]
 8008934:	f7ff ff90 	bl	8008858 <NVIC_EncodePriority>
 8008938:	4602      	mov	r2, r0
 800893a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800893e:	4611      	mov	r1, r2
 8008940:	4618      	mov	r0, r3
 8008942:	f7ff ff5f 	bl	8008804 <__NVIC_SetPriority>
}
 8008946:	bf00      	nop
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	4603      	mov	r3, r0
 8008956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff ff35 	bl	80087cc <__NVIC_EnableIRQ>
}
 8008962:	bf00      	nop
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7ff ffa2 	bl	80088bc <SysTick_Config>
 8008978:	4603      	mov	r3, r0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008982:	b480      	push	{r7}
 8008984:	b085      	sub	sp, #20
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b02      	cmp	r3, #2
 8008998:	d008      	beq.n	80089ac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2204      	movs	r2, #4
 800899e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e020      	b.n	80089ee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f022 020e 	bic.w	r2, r2, #14
 80089ba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 0201 	bic.w	r2, r2, #1
 80089ca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d4:	2101      	movs	r1, #1
 80089d6:	fa01 f202 	lsl.w	r2, r1, r2
 80089da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bc80      	pop	{r7}
 80089f6:	4770      	bx	lr

080089f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d005      	beq.n	8008a1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2204      	movs	r2, #4
 8008a14:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	73fb      	strb	r3, [r7, #15]
 8008a1a:	e0d6      	b.n	8008bca <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 020e 	bic.w	r2, r2, #14
 8008a2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 0201 	bic.w	r2, r2, #1
 8008a3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	461a      	mov	r2, r3
 8008a42:	4b64      	ldr	r3, [pc, #400]	; (8008bd4 <HAL_DMA_Abort_IT+0x1dc>)
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d958      	bls.n	8008afa <HAL_DMA_Abort_IT+0x102>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a62      	ldr	r2, [pc, #392]	; (8008bd8 <HAL_DMA_Abort_IT+0x1e0>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d04f      	beq.n	8008af2 <HAL_DMA_Abort_IT+0xfa>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a61      	ldr	r2, [pc, #388]	; (8008bdc <HAL_DMA_Abort_IT+0x1e4>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d048      	beq.n	8008aee <HAL_DMA_Abort_IT+0xf6>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a5f      	ldr	r2, [pc, #380]	; (8008be0 <HAL_DMA_Abort_IT+0x1e8>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d040      	beq.n	8008ae8 <HAL_DMA_Abort_IT+0xf0>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a5e      	ldr	r2, [pc, #376]	; (8008be4 <HAL_DMA_Abort_IT+0x1ec>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d038      	beq.n	8008ae2 <HAL_DMA_Abort_IT+0xea>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a5c      	ldr	r2, [pc, #368]	; (8008be8 <HAL_DMA_Abort_IT+0x1f0>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d030      	beq.n	8008adc <HAL_DMA_Abort_IT+0xe4>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a5b      	ldr	r2, [pc, #364]	; (8008bec <HAL_DMA_Abort_IT+0x1f4>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d028      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0xde>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a52      	ldr	r2, [pc, #328]	; (8008bd4 <HAL_DMA_Abort_IT+0x1dc>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d020      	beq.n	8008ad0 <HAL_DMA_Abort_IT+0xd8>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a57      	ldr	r2, [pc, #348]	; (8008bf0 <HAL_DMA_Abort_IT+0x1f8>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d019      	beq.n	8008acc <HAL_DMA_Abort_IT+0xd4>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a55      	ldr	r2, [pc, #340]	; (8008bf4 <HAL_DMA_Abort_IT+0x1fc>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d012      	beq.n	8008ac8 <HAL_DMA_Abort_IT+0xd0>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a54      	ldr	r2, [pc, #336]	; (8008bf8 <HAL_DMA_Abort_IT+0x200>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00a      	beq.n	8008ac2 <HAL_DMA_Abort_IT+0xca>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a52      	ldr	r2, [pc, #328]	; (8008bfc <HAL_DMA_Abort_IT+0x204>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d102      	bne.n	8008abc <HAL_DMA_Abort_IT+0xc4>
 8008ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aba:	e01b      	b.n	8008af4 <HAL_DMA_Abort_IT+0xfc>
 8008abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ac0:	e018      	b.n	8008af4 <HAL_DMA_Abort_IT+0xfc>
 8008ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ac6:	e015      	b.n	8008af4 <HAL_DMA_Abort_IT+0xfc>
 8008ac8:	2310      	movs	r3, #16
 8008aca:	e013      	b.n	8008af4 <HAL_DMA_Abort_IT+0xfc>
 8008acc:	2301      	movs	r3, #1
 8008ace:	e011      	b.n	8008af4 <HAL_DMA_Abort_IT+0xfc>
 8008ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ad4:	e00e      	b.n	8008af4 <HAL_DMA_Abort_IT+0xfc>
 8008ad6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ada:	e00b      	b.n	8008af4 <HAL_DMA_Abort_IT+0xfc>
 8008adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ae0:	e008      	b.n	8008af4 <HAL_DMA_Abort_IT+0xfc>
 8008ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ae6:	e005      	b.n	8008af4 <HAL_DMA_Abort_IT+0xfc>
 8008ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008aec:	e002      	b.n	8008af4 <HAL_DMA_Abort_IT+0xfc>
 8008aee:	2310      	movs	r3, #16
 8008af0:	e000      	b.n	8008af4 <HAL_DMA_Abort_IT+0xfc>
 8008af2:	2301      	movs	r3, #1
 8008af4:	4a42      	ldr	r2, [pc, #264]	; (8008c00 <HAL_DMA_Abort_IT+0x208>)
 8008af6:	6053      	str	r3, [r2, #4]
 8008af8:	e057      	b.n	8008baa <HAL_DMA_Abort_IT+0x1b2>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a36      	ldr	r2, [pc, #216]	; (8008bd8 <HAL_DMA_Abort_IT+0x1e0>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d04f      	beq.n	8008ba4 <HAL_DMA_Abort_IT+0x1ac>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a34      	ldr	r2, [pc, #208]	; (8008bdc <HAL_DMA_Abort_IT+0x1e4>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d048      	beq.n	8008ba0 <HAL_DMA_Abort_IT+0x1a8>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a33      	ldr	r2, [pc, #204]	; (8008be0 <HAL_DMA_Abort_IT+0x1e8>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d040      	beq.n	8008b9a <HAL_DMA_Abort_IT+0x1a2>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a31      	ldr	r2, [pc, #196]	; (8008be4 <HAL_DMA_Abort_IT+0x1ec>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d038      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x19c>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a30      	ldr	r2, [pc, #192]	; (8008be8 <HAL_DMA_Abort_IT+0x1f0>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d030      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x196>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a2e      	ldr	r2, [pc, #184]	; (8008bec <HAL_DMA_Abort_IT+0x1f4>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d028      	beq.n	8008b88 <HAL_DMA_Abort_IT+0x190>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a26      	ldr	r2, [pc, #152]	; (8008bd4 <HAL_DMA_Abort_IT+0x1dc>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d020      	beq.n	8008b82 <HAL_DMA_Abort_IT+0x18a>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a2a      	ldr	r2, [pc, #168]	; (8008bf0 <HAL_DMA_Abort_IT+0x1f8>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d019      	beq.n	8008b7e <HAL_DMA_Abort_IT+0x186>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a29      	ldr	r2, [pc, #164]	; (8008bf4 <HAL_DMA_Abort_IT+0x1fc>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d012      	beq.n	8008b7a <HAL_DMA_Abort_IT+0x182>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a27      	ldr	r2, [pc, #156]	; (8008bf8 <HAL_DMA_Abort_IT+0x200>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d00a      	beq.n	8008b74 <HAL_DMA_Abort_IT+0x17c>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a26      	ldr	r2, [pc, #152]	; (8008bfc <HAL_DMA_Abort_IT+0x204>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d102      	bne.n	8008b6e <HAL_DMA_Abort_IT+0x176>
 8008b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b6c:	e01b      	b.n	8008ba6 <HAL_DMA_Abort_IT+0x1ae>
 8008b6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b72:	e018      	b.n	8008ba6 <HAL_DMA_Abort_IT+0x1ae>
 8008b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b78:	e015      	b.n	8008ba6 <HAL_DMA_Abort_IT+0x1ae>
 8008b7a:	2310      	movs	r3, #16
 8008b7c:	e013      	b.n	8008ba6 <HAL_DMA_Abort_IT+0x1ae>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e011      	b.n	8008ba6 <HAL_DMA_Abort_IT+0x1ae>
 8008b82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b86:	e00e      	b.n	8008ba6 <HAL_DMA_Abort_IT+0x1ae>
 8008b88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b8c:	e00b      	b.n	8008ba6 <HAL_DMA_Abort_IT+0x1ae>
 8008b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b92:	e008      	b.n	8008ba6 <HAL_DMA_Abort_IT+0x1ae>
 8008b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b98:	e005      	b.n	8008ba6 <HAL_DMA_Abort_IT+0x1ae>
 8008b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b9e:	e002      	b.n	8008ba6 <HAL_DMA_Abort_IT+0x1ae>
 8008ba0:	2310      	movs	r3, #16
 8008ba2:	e000      	b.n	8008ba6 <HAL_DMA_Abort_IT+0x1ae>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	4a17      	ldr	r2, [pc, #92]	; (8008c04 <HAL_DMA_Abort_IT+0x20c>)
 8008ba8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	4798      	blx	r3
    } 
  }
  return status;
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	40020080 	.word	0x40020080
 8008bd8:	40020008 	.word	0x40020008
 8008bdc:	4002001c 	.word	0x4002001c
 8008be0:	40020030 	.word	0x40020030
 8008be4:	40020044 	.word	0x40020044
 8008be8:	40020058 	.word	0x40020058
 8008bec:	4002006c 	.word	0x4002006c
 8008bf0:	40020408 	.word	0x40020408
 8008bf4:	4002041c 	.word	0x4002041c
 8008bf8:	40020430 	.word	0x40020430
 8008bfc:	40020444 	.word	0x40020444
 8008c00:	40020400 	.word	0x40020400
 8008c04:	40020000 	.word	0x40020000

08008c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b08b      	sub	sp, #44	; 0x2c
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008c12:	2300      	movs	r3, #0
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008c16:	2300      	movs	r3, #0
 8008c18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c1a:	e179      	b.n	8008f10 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	fa02 f303 	lsl.w	r3, r2, r3
 8008c24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	f040 8168 	bne.w	8008f0a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	4a96      	ldr	r2, [pc, #600]	; (8008e98 <HAL_GPIO_Init+0x290>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d05e      	beq.n	8008d02 <HAL_GPIO_Init+0xfa>
 8008c44:	4a94      	ldr	r2, [pc, #592]	; (8008e98 <HAL_GPIO_Init+0x290>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d875      	bhi.n	8008d36 <HAL_GPIO_Init+0x12e>
 8008c4a:	4a94      	ldr	r2, [pc, #592]	; (8008e9c <HAL_GPIO_Init+0x294>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d058      	beq.n	8008d02 <HAL_GPIO_Init+0xfa>
 8008c50:	4a92      	ldr	r2, [pc, #584]	; (8008e9c <HAL_GPIO_Init+0x294>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d86f      	bhi.n	8008d36 <HAL_GPIO_Init+0x12e>
 8008c56:	4a92      	ldr	r2, [pc, #584]	; (8008ea0 <HAL_GPIO_Init+0x298>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d052      	beq.n	8008d02 <HAL_GPIO_Init+0xfa>
 8008c5c:	4a90      	ldr	r2, [pc, #576]	; (8008ea0 <HAL_GPIO_Init+0x298>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d869      	bhi.n	8008d36 <HAL_GPIO_Init+0x12e>
 8008c62:	4a90      	ldr	r2, [pc, #576]	; (8008ea4 <HAL_GPIO_Init+0x29c>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d04c      	beq.n	8008d02 <HAL_GPIO_Init+0xfa>
 8008c68:	4a8e      	ldr	r2, [pc, #568]	; (8008ea4 <HAL_GPIO_Init+0x29c>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d863      	bhi.n	8008d36 <HAL_GPIO_Init+0x12e>
 8008c6e:	4a8e      	ldr	r2, [pc, #568]	; (8008ea8 <HAL_GPIO_Init+0x2a0>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d046      	beq.n	8008d02 <HAL_GPIO_Init+0xfa>
 8008c74:	4a8c      	ldr	r2, [pc, #560]	; (8008ea8 <HAL_GPIO_Init+0x2a0>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d85d      	bhi.n	8008d36 <HAL_GPIO_Init+0x12e>
 8008c7a:	2b12      	cmp	r3, #18
 8008c7c:	d82a      	bhi.n	8008cd4 <HAL_GPIO_Init+0xcc>
 8008c7e:	2b12      	cmp	r3, #18
 8008c80:	d859      	bhi.n	8008d36 <HAL_GPIO_Init+0x12e>
 8008c82:	a201      	add	r2, pc, #4	; (adr r2, 8008c88 <HAL_GPIO_Init+0x80>)
 8008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c88:	08008d03 	.word	0x08008d03
 8008c8c:	08008cdd 	.word	0x08008cdd
 8008c90:	08008cef 	.word	0x08008cef
 8008c94:	08008d31 	.word	0x08008d31
 8008c98:	08008d37 	.word	0x08008d37
 8008c9c:	08008d37 	.word	0x08008d37
 8008ca0:	08008d37 	.word	0x08008d37
 8008ca4:	08008d37 	.word	0x08008d37
 8008ca8:	08008d37 	.word	0x08008d37
 8008cac:	08008d37 	.word	0x08008d37
 8008cb0:	08008d37 	.word	0x08008d37
 8008cb4:	08008d37 	.word	0x08008d37
 8008cb8:	08008d37 	.word	0x08008d37
 8008cbc:	08008d37 	.word	0x08008d37
 8008cc0:	08008d37 	.word	0x08008d37
 8008cc4:	08008d37 	.word	0x08008d37
 8008cc8:	08008d37 	.word	0x08008d37
 8008ccc:	08008ce5 	.word	0x08008ce5
 8008cd0:	08008cf9 	.word	0x08008cf9
 8008cd4:	4a75      	ldr	r2, [pc, #468]	; (8008eac <HAL_GPIO_Init+0x2a4>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d013      	beq.n	8008d02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008cda:	e02c      	b.n	8008d36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	623b      	str	r3, [r7, #32]
          break;
 8008ce2:	e029      	b.n	8008d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	623b      	str	r3, [r7, #32]
          break;
 8008cec:	e024      	b.n	8008d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	623b      	str	r3, [r7, #32]
          break;
 8008cf6:	e01f      	b.n	8008d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	330c      	adds	r3, #12
 8008cfe:	623b      	str	r3, [r7, #32]
          break;
 8008d00:	e01a      	b.n	8008d38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d102      	bne.n	8008d10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008d0a:	2304      	movs	r3, #4
 8008d0c:	623b      	str	r3, [r7, #32]
          break;
 8008d0e:	e013      	b.n	8008d38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d105      	bne.n	8008d24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008d18:	2308      	movs	r3, #8
 8008d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	69fa      	ldr	r2, [r7, #28]
 8008d20:	611a      	str	r2, [r3, #16]
          break;
 8008d22:	e009      	b.n	8008d38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008d24:	2308      	movs	r3, #8
 8008d26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	69fa      	ldr	r2, [r7, #28]
 8008d2c:	615a      	str	r2, [r3, #20]
          break;
 8008d2e:	e003      	b.n	8008d38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008d30:	2300      	movs	r3, #0
 8008d32:	623b      	str	r3, [r7, #32]
          break;
 8008d34:	e000      	b.n	8008d38 <HAL_GPIO_Init+0x130>
          break;
 8008d36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	2bff      	cmp	r3, #255	; 0xff
 8008d3c:	d801      	bhi.n	8008d42 <HAL_GPIO_Init+0x13a>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	e001      	b.n	8008d46 <HAL_GPIO_Init+0x13e>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	3304      	adds	r3, #4
 8008d46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	2bff      	cmp	r3, #255	; 0xff
 8008d4c:	d802      	bhi.n	8008d54 <HAL_GPIO_Init+0x14c>
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	e002      	b.n	8008d5a <HAL_GPIO_Init+0x152>
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	3b08      	subs	r3, #8
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	210f      	movs	r1, #15
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	fa01 f303 	lsl.w	r3, r1, r3
 8008d68:	43db      	mvns	r3, r3
 8008d6a:	401a      	ands	r2, r3
 8008d6c:	6a39      	ldr	r1, [r7, #32]
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	fa01 f303 	lsl.w	r3, r1, r3
 8008d74:	431a      	orrs	r2, r3
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 80c1 	beq.w	8008f0a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008d88:	4b49      	ldr	r3, [pc, #292]	; (8008eb0 <HAL_GPIO_Init+0x2a8>)
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	4a48      	ldr	r2, [pc, #288]	; (8008eb0 <HAL_GPIO_Init+0x2a8>)
 8008d8e:	f043 0301 	orr.w	r3, r3, #1
 8008d92:	6193      	str	r3, [r2, #24]
 8008d94:	4b46      	ldr	r3, [pc, #280]	; (8008eb0 <HAL_GPIO_Init+0x2a8>)
 8008d96:	699b      	ldr	r3, [r3, #24]
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	60bb      	str	r3, [r7, #8]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008da0:	4a44      	ldr	r2, [pc, #272]	; (8008eb4 <HAL_GPIO_Init+0x2ac>)
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	089b      	lsrs	r3, r3, #2
 8008da6:	3302      	adds	r3, #2
 8008da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	f003 0303 	and.w	r3, r3, #3
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	220f      	movs	r2, #15
 8008db8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbc:	43db      	mvns	r3, r3
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a3c      	ldr	r2, [pc, #240]	; (8008eb8 <HAL_GPIO_Init+0x2b0>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d01f      	beq.n	8008e0c <HAL_GPIO_Init+0x204>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a3b      	ldr	r2, [pc, #236]	; (8008ebc <HAL_GPIO_Init+0x2b4>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d019      	beq.n	8008e08 <HAL_GPIO_Init+0x200>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a3a      	ldr	r2, [pc, #232]	; (8008ec0 <HAL_GPIO_Init+0x2b8>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d013      	beq.n	8008e04 <HAL_GPIO_Init+0x1fc>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a39      	ldr	r2, [pc, #228]	; (8008ec4 <HAL_GPIO_Init+0x2bc>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00d      	beq.n	8008e00 <HAL_GPIO_Init+0x1f8>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a38      	ldr	r2, [pc, #224]	; (8008ec8 <HAL_GPIO_Init+0x2c0>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d007      	beq.n	8008dfc <HAL_GPIO_Init+0x1f4>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a37      	ldr	r2, [pc, #220]	; (8008ecc <HAL_GPIO_Init+0x2c4>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d101      	bne.n	8008df8 <HAL_GPIO_Init+0x1f0>
 8008df4:	2305      	movs	r3, #5
 8008df6:	e00a      	b.n	8008e0e <HAL_GPIO_Init+0x206>
 8008df8:	2306      	movs	r3, #6
 8008dfa:	e008      	b.n	8008e0e <HAL_GPIO_Init+0x206>
 8008dfc:	2304      	movs	r3, #4
 8008dfe:	e006      	b.n	8008e0e <HAL_GPIO_Init+0x206>
 8008e00:	2303      	movs	r3, #3
 8008e02:	e004      	b.n	8008e0e <HAL_GPIO_Init+0x206>
 8008e04:	2302      	movs	r3, #2
 8008e06:	e002      	b.n	8008e0e <HAL_GPIO_Init+0x206>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e000      	b.n	8008e0e <HAL_GPIO_Init+0x206>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e10:	f002 0203 	and.w	r2, r2, #3
 8008e14:	0092      	lsls	r2, r2, #2
 8008e16:	4093      	lsls	r3, r2
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008e1e:	4925      	ldr	r1, [pc, #148]	; (8008eb4 <HAL_GPIO_Init+0x2ac>)
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	089b      	lsrs	r3, r3, #2
 8008e24:	3302      	adds	r3, #2
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d006      	beq.n	8008e46 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008e38:	4b25      	ldr	r3, [pc, #148]	; (8008ed0 <HAL_GPIO_Init+0x2c8>)
 8008e3a:	689a      	ldr	r2, [r3, #8]
 8008e3c:	4924      	ldr	r1, [pc, #144]	; (8008ed0 <HAL_GPIO_Init+0x2c8>)
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	608b      	str	r3, [r1, #8]
 8008e44:	e006      	b.n	8008e54 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008e46:	4b22      	ldr	r3, [pc, #136]	; (8008ed0 <HAL_GPIO_Init+0x2c8>)
 8008e48:	689a      	ldr	r2, [r3, #8]
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	43db      	mvns	r3, r3
 8008e4e:	4920      	ldr	r1, [pc, #128]	; (8008ed0 <HAL_GPIO_Init+0x2c8>)
 8008e50:	4013      	ands	r3, r2
 8008e52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d006      	beq.n	8008e6e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008e60:	4b1b      	ldr	r3, [pc, #108]	; (8008ed0 <HAL_GPIO_Init+0x2c8>)
 8008e62:	68da      	ldr	r2, [r3, #12]
 8008e64:	491a      	ldr	r1, [pc, #104]	; (8008ed0 <HAL_GPIO_Init+0x2c8>)
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60cb      	str	r3, [r1, #12]
 8008e6c:	e006      	b.n	8008e7c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008e6e:	4b18      	ldr	r3, [pc, #96]	; (8008ed0 <HAL_GPIO_Init+0x2c8>)
 8008e70:	68da      	ldr	r2, [r3, #12]
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	43db      	mvns	r3, r3
 8008e76:	4916      	ldr	r1, [pc, #88]	; (8008ed0 <HAL_GPIO_Init+0x2c8>)
 8008e78:	4013      	ands	r3, r2
 8008e7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d025      	beq.n	8008ed4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008e88:	4b11      	ldr	r3, [pc, #68]	; (8008ed0 <HAL_GPIO_Init+0x2c8>)
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	4910      	ldr	r1, [pc, #64]	; (8008ed0 <HAL_GPIO_Init+0x2c8>)
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	604b      	str	r3, [r1, #4]
 8008e94:	e025      	b.n	8008ee2 <HAL_GPIO_Init+0x2da>
 8008e96:	bf00      	nop
 8008e98:	10320000 	.word	0x10320000
 8008e9c:	10310000 	.word	0x10310000
 8008ea0:	10220000 	.word	0x10220000
 8008ea4:	10210000 	.word	0x10210000
 8008ea8:	10120000 	.word	0x10120000
 8008eac:	10110000 	.word	0x10110000
 8008eb0:	40021000 	.word	0x40021000
 8008eb4:	40010000 	.word	0x40010000
 8008eb8:	40010800 	.word	0x40010800
 8008ebc:	40010c00 	.word	0x40010c00
 8008ec0:	40011000 	.word	0x40011000
 8008ec4:	40011400 	.word	0x40011400
 8008ec8:	40011800 	.word	0x40011800
 8008ecc:	40011c00 	.word	0x40011c00
 8008ed0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008ed4:	4b15      	ldr	r3, [pc, #84]	; (8008f2c <HAL_GPIO_Init+0x324>)
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	43db      	mvns	r3, r3
 8008edc:	4913      	ldr	r1, [pc, #76]	; (8008f2c <HAL_GPIO_Init+0x324>)
 8008ede:	4013      	ands	r3, r2
 8008ee0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d006      	beq.n	8008efc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008eee:	4b0f      	ldr	r3, [pc, #60]	; (8008f2c <HAL_GPIO_Init+0x324>)
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	490e      	ldr	r1, [pc, #56]	; (8008f2c <HAL_GPIO_Init+0x324>)
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	600b      	str	r3, [r1, #0]
 8008efa:	e006      	b.n	8008f0a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008efc:	4b0b      	ldr	r3, [pc, #44]	; (8008f2c <HAL_GPIO_Init+0x324>)
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	43db      	mvns	r3, r3
 8008f04:	4909      	ldr	r1, [pc, #36]	; (8008f2c <HAL_GPIO_Init+0x324>)
 8008f06:	4013      	ands	r3, r2
 8008f08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f47f ae7e 	bne.w	8008c1c <HAL_GPIO_Init+0x14>
  }
}
 8008f20:	bf00      	nop
 8008f22:	bf00      	nop
 8008f24:	372c      	adds	r7, #44	; 0x2c
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bc80      	pop	{r7}
 8008f2a:	4770      	bx	lr
 8008f2c:	40010400 	.word	0x40010400

08008f30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b089      	sub	sp, #36	; 0x24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008f3e:	e0a6      	b.n	800908e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008f40:	2201      	movs	r2, #1
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	fa02 f303 	lsl.w	r3, r2, r3
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 8099 	beq.w	8009088 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008f56:	4a54      	ldr	r2, [pc, #336]	; (80090a8 <HAL_GPIO_DeInit+0x178>)
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	089b      	lsrs	r3, r3, #2
 8008f5c:	3302      	adds	r3, #2
 8008f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f62:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	f003 0303 	and.w	r3, r3, #3
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	220f      	movs	r2, #15
 8008f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	4013      	ands	r3, r2
 8008f76:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a4c      	ldr	r2, [pc, #304]	; (80090ac <HAL_GPIO_DeInit+0x17c>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d01f      	beq.n	8008fc0 <HAL_GPIO_DeInit+0x90>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a4b      	ldr	r2, [pc, #300]	; (80090b0 <HAL_GPIO_DeInit+0x180>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d019      	beq.n	8008fbc <HAL_GPIO_DeInit+0x8c>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a4a      	ldr	r2, [pc, #296]	; (80090b4 <HAL_GPIO_DeInit+0x184>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d013      	beq.n	8008fb8 <HAL_GPIO_DeInit+0x88>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a49      	ldr	r2, [pc, #292]	; (80090b8 <HAL_GPIO_DeInit+0x188>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d00d      	beq.n	8008fb4 <HAL_GPIO_DeInit+0x84>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a48      	ldr	r2, [pc, #288]	; (80090bc <HAL_GPIO_DeInit+0x18c>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d007      	beq.n	8008fb0 <HAL_GPIO_DeInit+0x80>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a47      	ldr	r2, [pc, #284]	; (80090c0 <HAL_GPIO_DeInit+0x190>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d101      	bne.n	8008fac <HAL_GPIO_DeInit+0x7c>
 8008fa8:	2305      	movs	r3, #5
 8008faa:	e00a      	b.n	8008fc2 <HAL_GPIO_DeInit+0x92>
 8008fac:	2306      	movs	r3, #6
 8008fae:	e008      	b.n	8008fc2 <HAL_GPIO_DeInit+0x92>
 8008fb0:	2304      	movs	r3, #4
 8008fb2:	e006      	b.n	8008fc2 <HAL_GPIO_DeInit+0x92>
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e004      	b.n	8008fc2 <HAL_GPIO_DeInit+0x92>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e002      	b.n	8008fc2 <HAL_GPIO_DeInit+0x92>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e000      	b.n	8008fc2 <HAL_GPIO_DeInit+0x92>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	69fa      	ldr	r2, [r7, #28]
 8008fc4:	f002 0203 	and.w	r2, r2, #3
 8008fc8:	0092      	lsls	r2, r2, #2
 8008fca:	4093      	lsls	r3, r2
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d132      	bne.n	8009038 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008fd2:	4b3c      	ldr	r3, [pc, #240]	; (80090c4 <HAL_GPIO_DeInit+0x194>)
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	43db      	mvns	r3, r3
 8008fda:	493a      	ldr	r1, [pc, #232]	; (80090c4 <HAL_GPIO_DeInit+0x194>)
 8008fdc:	4013      	ands	r3, r2
 8008fde:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008fe0:	4b38      	ldr	r3, [pc, #224]	; (80090c4 <HAL_GPIO_DeInit+0x194>)
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	43db      	mvns	r3, r3
 8008fe8:	4936      	ldr	r1, [pc, #216]	; (80090c4 <HAL_GPIO_DeInit+0x194>)
 8008fea:	4013      	ands	r3, r2
 8008fec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008fee:	4b35      	ldr	r3, [pc, #212]	; (80090c4 <HAL_GPIO_DeInit+0x194>)
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	43db      	mvns	r3, r3
 8008ff6:	4933      	ldr	r1, [pc, #204]	; (80090c4 <HAL_GPIO_DeInit+0x194>)
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008ffc:	4b31      	ldr	r3, [pc, #196]	; (80090c4 <HAL_GPIO_DeInit+0x194>)
 8008ffe:	689a      	ldr	r2, [r3, #8]
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	43db      	mvns	r3, r3
 8009004:	492f      	ldr	r1, [pc, #188]	; (80090c4 <HAL_GPIO_DeInit+0x194>)
 8009006:	4013      	ands	r3, r2
 8009008:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	f003 0303 	and.w	r3, r3, #3
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	220f      	movs	r2, #15
 8009014:	fa02 f303 	lsl.w	r3, r2, r3
 8009018:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800901a:	4a23      	ldr	r2, [pc, #140]	; (80090a8 <HAL_GPIO_DeInit+0x178>)
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	089b      	lsrs	r3, r3, #2
 8009020:	3302      	adds	r3, #2
 8009022:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	43da      	mvns	r2, r3
 800902a:	481f      	ldr	r0, [pc, #124]	; (80090a8 <HAL_GPIO_DeInit+0x178>)
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	089b      	lsrs	r3, r3, #2
 8009030:	400a      	ands	r2, r1
 8009032:	3302      	adds	r3, #2
 8009034:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	2bff      	cmp	r3, #255	; 0xff
 800903c:	d801      	bhi.n	8009042 <HAL_GPIO_DeInit+0x112>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	e001      	b.n	8009046 <HAL_GPIO_DeInit+0x116>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	3304      	adds	r3, #4
 8009046:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	2bff      	cmp	r3, #255	; 0xff
 800904c:	d802      	bhi.n	8009054 <HAL_GPIO_DeInit+0x124>
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	e002      	b.n	800905a <HAL_GPIO_DeInit+0x12a>
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	3b08      	subs	r3, #8
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	210f      	movs	r1, #15
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	fa01 f303 	lsl.w	r3, r1, r3
 8009068:	43db      	mvns	r3, r3
 800906a:	401a      	ands	r2, r3
 800906c:	2104      	movs	r1, #4
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	fa01 f303 	lsl.w	r3, r1, r3
 8009074:	431a      	orrs	r2, r3
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68da      	ldr	r2, [r3, #12]
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	43db      	mvns	r3, r3
 8009082:	401a      	ands	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	3301      	adds	r3, #1
 800908c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	fa22 f303 	lsr.w	r3, r2, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	f47f af52 	bne.w	8008f40 <HAL_GPIO_DeInit+0x10>
  }
}
 800909c:	bf00      	nop
 800909e:	bf00      	nop
 80090a0:	3724      	adds	r7, #36	; 0x24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bc80      	pop	{r7}
 80090a6:	4770      	bx	lr
 80090a8:	40010000 	.word	0x40010000
 80090ac:	40010800 	.word	0x40010800
 80090b0:	40010c00 	.word	0x40010c00
 80090b4:	40011000 	.word	0x40011000
 80090b8:	40011400 	.word	0x40011400
 80090bc:	40011800 	.word	0x40011800
 80090c0:	40011c00 	.word	0x40011c00
 80090c4:	40010400 	.word	0x40010400

080090c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	887b      	ldrh	r3, [r7, #2]
 80090da:	4013      	ands	r3, r2
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80090e0:	2301      	movs	r3, #1
 80090e2:	73fb      	strb	r3, [r7, #15]
 80090e4:	e001      	b.n	80090ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80090e6:	2300      	movs	r3, #0
 80090e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bc80      	pop	{r7}
 80090f4:	4770      	bx	lr

080090f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	807b      	strh	r3, [r7, #2]
 8009102:	4613      	mov	r3, r2
 8009104:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009106:	787b      	ldrb	r3, [r7, #1]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d003      	beq.n	8009114 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800910c:	887a      	ldrh	r2, [r7, #2]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009112:	e003      	b.n	800911c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009114:	887b      	ldrh	r3, [r7, #2]
 8009116:	041a      	lsls	r2, r3, #16
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	611a      	str	r2, [r3, #16]
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	bc80      	pop	{r7}
 8009124:	4770      	bx	lr

08009126 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009126:	b480      	push	{r7}
 8009128:	b085      	sub	sp, #20
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	460b      	mov	r3, r1
 8009130:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009138:	887a      	ldrh	r2, [r7, #2]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	4013      	ands	r3, r2
 800913e:	041a      	lsls	r2, r3, #16
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	43d9      	mvns	r1, r3
 8009144:	887b      	ldrh	r3, [r7, #2]
 8009146:	400b      	ands	r3, r1
 8009148:	431a      	orrs	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	611a      	str	r2, [r3, #16]
}
 800914e:	bf00      	nop
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	bc80      	pop	{r7}
 8009156:	4770      	bx	lr

08009158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e12b      	b.n	80093c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d106      	bne.n	8009184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7fe fff8 	bl	8008174 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2224      	movs	r2, #36	; 0x24
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 0201 	bic.w	r2, r2, #1
 800919a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80091bc:	f001 fdb8 	bl	800ad30 <HAL_RCC_GetPCLK1Freq>
 80091c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	4a81      	ldr	r2, [pc, #516]	; (80093cc <HAL_I2C_Init+0x274>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d807      	bhi.n	80091dc <HAL_I2C_Init+0x84>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4a80      	ldr	r2, [pc, #512]	; (80093d0 <HAL_I2C_Init+0x278>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	bf94      	ite	ls
 80091d4:	2301      	movls	r3, #1
 80091d6:	2300      	movhi	r3, #0
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	e006      	b.n	80091ea <HAL_I2C_Init+0x92>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4a7d      	ldr	r2, [pc, #500]	; (80093d4 <HAL_I2C_Init+0x27c>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	bf94      	ite	ls
 80091e4:	2301      	movls	r3, #1
 80091e6:	2300      	movhi	r3, #0
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e0e7      	b.n	80093c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4a78      	ldr	r2, [pc, #480]	; (80093d8 <HAL_I2C_Init+0x280>)
 80091f6:	fba2 2303 	umull	r2, r3, r2, r3
 80091fa:	0c9b      	lsrs	r3, r3, #18
 80091fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	430a      	orrs	r2, r1
 8009210:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	4a6a      	ldr	r2, [pc, #424]	; (80093cc <HAL_I2C_Init+0x274>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d802      	bhi.n	800922c <HAL_I2C_Init+0xd4>
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	3301      	adds	r3, #1
 800922a:	e009      	b.n	8009240 <HAL_I2C_Init+0xe8>
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009232:	fb02 f303 	mul.w	r3, r2, r3
 8009236:	4a69      	ldr	r2, [pc, #420]	; (80093dc <HAL_I2C_Init+0x284>)
 8009238:	fba2 2303 	umull	r2, r3, r2, r3
 800923c:	099b      	lsrs	r3, r3, #6
 800923e:	3301      	adds	r3, #1
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6812      	ldr	r2, [r2, #0]
 8009244:	430b      	orrs	r3, r1
 8009246:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009252:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	495c      	ldr	r1, [pc, #368]	; (80093cc <HAL_I2C_Init+0x274>)
 800925c:	428b      	cmp	r3, r1
 800925e:	d819      	bhi.n	8009294 <HAL_I2C_Init+0x13c>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	1e59      	subs	r1, r3, #1
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	005b      	lsls	r3, r3, #1
 800926a:	fbb1 f3f3 	udiv	r3, r1, r3
 800926e:	1c59      	adds	r1, r3, #1
 8009270:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009274:	400b      	ands	r3, r1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <HAL_I2C_Init+0x138>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	1e59      	subs	r1, r3, #1
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	fbb1 f3f3 	udiv	r3, r1, r3
 8009288:	3301      	adds	r3, #1
 800928a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800928e:	e051      	b.n	8009334 <HAL_I2C_Init+0x1dc>
 8009290:	2304      	movs	r3, #4
 8009292:	e04f      	b.n	8009334 <HAL_I2C_Init+0x1dc>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d111      	bne.n	80092c0 <HAL_I2C_Init+0x168>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	1e58      	subs	r0, r3, #1
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6859      	ldr	r1, [r3, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	440b      	add	r3, r1
 80092aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80092ae:	3301      	adds	r3, #1
 80092b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	bf0c      	ite	eq
 80092b8:	2301      	moveq	r3, #1
 80092ba:	2300      	movne	r3, #0
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	e012      	b.n	80092e6 <HAL_I2C_Init+0x18e>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	1e58      	subs	r0, r3, #1
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6859      	ldr	r1, [r3, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	440b      	add	r3, r1
 80092ce:	0099      	lsls	r1, r3, #2
 80092d0:	440b      	add	r3, r1
 80092d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80092d6:	3301      	adds	r3, #1
 80092d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092dc:	2b00      	cmp	r3, #0
 80092de:	bf0c      	ite	eq
 80092e0:	2301      	moveq	r3, #1
 80092e2:	2300      	movne	r3, #0
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <HAL_I2C_Init+0x196>
 80092ea:	2301      	movs	r3, #1
 80092ec:	e022      	b.n	8009334 <HAL_I2C_Init+0x1dc>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10e      	bne.n	8009314 <HAL_I2C_Init+0x1bc>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	1e58      	subs	r0, r3, #1
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6859      	ldr	r1, [r3, #4]
 80092fe:	460b      	mov	r3, r1
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	440b      	add	r3, r1
 8009304:	fbb0 f3f3 	udiv	r3, r0, r3
 8009308:	3301      	adds	r3, #1
 800930a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800930e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009312:	e00f      	b.n	8009334 <HAL_I2C_Init+0x1dc>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	1e58      	subs	r0, r3, #1
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6859      	ldr	r1, [r3, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	440b      	add	r3, r1
 8009322:	0099      	lsls	r1, r3, #2
 8009324:	440b      	add	r3, r1
 8009326:	fbb0 f3f3 	udiv	r3, r0, r3
 800932a:	3301      	adds	r3, #1
 800932c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009330:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009334:	6879      	ldr	r1, [r7, #4]
 8009336:	6809      	ldr	r1, [r1, #0]
 8009338:	4313      	orrs	r3, r2
 800933a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	69da      	ldr	r2, [r3, #28]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	431a      	orrs	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	430a      	orrs	r2, r1
 8009356:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009362:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	6911      	ldr	r1, [r2, #16]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	68d2      	ldr	r2, [r2, #12]
 800936e:	4311      	orrs	r1, r2
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	6812      	ldr	r2, [r2, #0]
 8009374:	430b      	orrs	r3, r1
 8009376:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	695a      	ldr	r2, [r3, #20]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	430a      	orrs	r2, r1
 8009392:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0201 	orr.w	r2, r2, #1
 80093a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2220      	movs	r2, #32
 80093ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	000186a0 	.word	0x000186a0
 80093d0:	001e847f 	.word	0x001e847f
 80093d4:	003d08ff 	.word	0x003d08ff
 80093d8:	431bde83 	.word	0x431bde83
 80093dc:	10624dd3 	.word	0x10624dd3

080093e0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e021      	b.n	8009436 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2224      	movs	r2, #36	; 0x24
 80093f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f022 0201 	bic.w	r2, r2, #1
 8009408:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7fe fef0 	bl	80081f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af02      	add	r7, sp, #8
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	607a      	str	r2, [r7, #4]
 800944a:	461a      	mov	r2, r3
 800944c:	460b      	mov	r3, r1
 800944e:	817b      	strh	r3, [r7, #10]
 8009450:	4613      	mov	r3, r2
 8009452:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009454:	f7ff f85e 	bl	8008514 <HAL_GetTick>
 8009458:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b20      	cmp	r3, #32
 8009464:	f040 80e0 	bne.w	8009628 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	2319      	movs	r3, #25
 800946e:	2201      	movs	r2, #1
 8009470:	4970      	ldr	r1, [pc, #448]	; (8009634 <HAL_I2C_Master_Transmit+0x1f4>)
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f000 fe5c 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800947e:	2302      	movs	r3, #2
 8009480:	e0d3      	b.n	800962a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009488:	2b01      	cmp	r3, #1
 800948a:	d101      	bne.n	8009490 <HAL_I2C_Master_Transmit+0x50>
 800948c:	2302      	movs	r3, #2
 800948e:	e0cc      	b.n	800962a <HAL_I2C_Master_Transmit+0x1ea>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0301 	and.w	r3, r3, #1
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d007      	beq.n	80094b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f042 0201 	orr.w	r2, r2, #1
 80094b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2221      	movs	r2, #33	; 0x21
 80094ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2210      	movs	r2, #16
 80094d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	893a      	ldrh	r2, [r7, #8]
 80094e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	4a50      	ldr	r2, [pc, #320]	; (8009638 <HAL_I2C_Master_Transmit+0x1f8>)
 80094f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80094f8:	8979      	ldrh	r1, [r7, #10]
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	6a3a      	ldr	r2, [r7, #32]
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 fc16 	bl	8009d30 <I2C_MasterRequestWrite>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e08d      	b.n	800962a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800950e:	2300      	movs	r3, #0
 8009510:	613b      	str	r3, [r7, #16]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	695b      	ldr	r3, [r3, #20]
 8009518:	613b      	str	r3, [r7, #16]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	613b      	str	r3, [r7, #16]
 8009522:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009524:	e066      	b.n	80095f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	6a39      	ldr	r1, [r7, #32]
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f000 ff1a 	bl	800a364 <I2C_WaitOnTXEFlagUntilTimeout>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00d      	beq.n	8009552 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953a:	2b04      	cmp	r3, #4
 800953c:	d107      	bne.n	800954e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800954c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e06b      	b.n	800962a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	781a      	ldrb	r2, [r3, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956c:	b29b      	uxth	r3, r3
 800956e:	3b01      	subs	r3, #1
 8009570:	b29a      	uxth	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800957a:	3b01      	subs	r3, #1
 800957c:	b29a      	uxth	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	f003 0304 	and.w	r3, r3, #4
 800958c:	2b04      	cmp	r3, #4
 800958e:	d11b      	bne.n	80095c8 <HAL_I2C_Master_Transmit+0x188>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009594:	2b00      	cmp	r3, #0
 8009596:	d017      	beq.n	80095c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959c:	781a      	ldrb	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	3b01      	subs	r3, #1
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c0:	3b01      	subs	r3, #1
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	6a39      	ldr	r1, [r7, #32]
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 ff11 	bl	800a3f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00d      	beq.n	80095f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095dc:	2b04      	cmp	r3, #4
 80095de:	d107      	bne.n	80095f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e01a      	b.n	800962a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d194      	bne.n	8009526 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800960a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2220      	movs	r2, #32
 8009610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	e000      	b.n	800962a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009628:	2302      	movs	r3, #2
  }
}
 800962a:	4618      	mov	r0, r3
 800962c:	3718      	adds	r7, #24
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	00100002 	.word	0x00100002
 8009638:	ffff0000 	.word	0xffff0000

0800963c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af02      	add	r7, sp, #8
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	4608      	mov	r0, r1
 8009646:	4611      	mov	r1, r2
 8009648:	461a      	mov	r2, r3
 800964a:	4603      	mov	r3, r0
 800964c:	817b      	strh	r3, [r7, #10]
 800964e:	460b      	mov	r3, r1
 8009650:	813b      	strh	r3, [r7, #8]
 8009652:	4613      	mov	r3, r2
 8009654:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009656:	f7fe ff5d 	bl	8008514 <HAL_GetTick>
 800965a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b20      	cmp	r3, #32
 8009666:	f040 80d9 	bne.w	800981c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	2319      	movs	r3, #25
 8009670:	2201      	movs	r2, #1
 8009672:	496d      	ldr	r1, [pc, #436]	; (8009828 <HAL_I2C_Mem_Write+0x1ec>)
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 fd5b 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009680:	2302      	movs	r3, #2
 8009682:	e0cc      	b.n	800981e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800968a:	2b01      	cmp	r3, #1
 800968c:	d101      	bne.n	8009692 <HAL_I2C_Mem_Write+0x56>
 800968e:	2302      	movs	r3, #2
 8009690:	e0c5      	b.n	800981e <HAL_I2C_Mem_Write+0x1e2>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0301 	and.w	r3, r3, #1
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d007      	beq.n	80096b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f042 0201 	orr.w	r2, r2, #1
 80096b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2221      	movs	r2, #33	; 0x21
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2240      	movs	r2, #64	; 0x40
 80096d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6a3a      	ldr	r2, [r7, #32]
 80096e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80096e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	4a4d      	ldr	r2, [pc, #308]	; (800982c <HAL_I2C_Mem_Write+0x1f0>)
 80096f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80096fa:	88f8      	ldrh	r0, [r7, #6]
 80096fc:	893a      	ldrh	r2, [r7, #8]
 80096fe:	8979      	ldrh	r1, [r7, #10]
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	4603      	mov	r3, r0
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 fb92 	bl	8009e34 <I2C_RequestMemoryWrite>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d052      	beq.n	80097bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e081      	b.n	800981e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f000 fe20 	bl	800a364 <I2C_WaitOnTXEFlagUntilTimeout>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00d      	beq.n	8009746 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972e:	2b04      	cmp	r3, #4
 8009730:	d107      	bne.n	8009742 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009740:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e06b      	b.n	800981e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	781a      	ldrb	r2, [r3, #0]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009760:	3b01      	subs	r3, #1
 8009762:	b29a      	uxth	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800976c:	b29b      	uxth	r3, r3
 800976e:	3b01      	subs	r3, #1
 8009770:	b29a      	uxth	r2, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	f003 0304 	and.w	r3, r3, #4
 8009780:	2b04      	cmp	r3, #4
 8009782:	d11b      	bne.n	80097bc <HAL_I2C_Mem_Write+0x180>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009788:	2b00      	cmp	r3, #0
 800978a:	d017      	beq.n	80097bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009790:	781a      	ldrb	r2, [r3, #0]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979c:	1c5a      	adds	r2, r3, #1
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a6:	3b01      	subs	r3, #1
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	3b01      	subs	r3, #1
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1aa      	bne.n	800971a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097c4:	697a      	ldr	r2, [r7, #20]
 80097c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 fe13 	bl	800a3f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00d      	beq.n	80097f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d8:	2b04      	cmp	r3, #4
 80097da:	d107      	bne.n	80097ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e016      	b.n	800981e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2220      	movs	r2, #32
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	e000      	b.n	800981e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800981c:	2302      	movs	r3, #2
  }
}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	00100002 	.word	0x00100002
 800982c:	ffff0000 	.word	0xffff0000

08009830 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b08c      	sub	sp, #48	; 0x30
 8009834:	af02      	add	r7, sp, #8
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	4608      	mov	r0, r1
 800983a:	4611      	mov	r1, r2
 800983c:	461a      	mov	r2, r3
 800983e:	4603      	mov	r3, r0
 8009840:	817b      	strh	r3, [r7, #10]
 8009842:	460b      	mov	r3, r1
 8009844:	813b      	strh	r3, [r7, #8]
 8009846:	4613      	mov	r3, r2
 8009848:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800984a:	2300      	movs	r3, #0
 800984c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800984e:	f7fe fe61 	bl	8008514 <HAL_GetTick>
 8009852:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b20      	cmp	r3, #32
 800985e:	f040 8244 	bne.w	8009cea <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	2319      	movs	r3, #25
 8009868:	2201      	movs	r2, #1
 800986a:	4982      	ldr	r1, [pc, #520]	; (8009a74 <HAL_I2C_Mem_Read+0x244>)
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f000 fc5f 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009878:	2302      	movs	r3, #2
 800987a:	e237      	b.n	8009cec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009882:	2b01      	cmp	r3, #1
 8009884:	d101      	bne.n	800988a <HAL_I2C_Mem_Read+0x5a>
 8009886:	2302      	movs	r3, #2
 8009888:	e230      	b.n	8009cec <HAL_I2C_Mem_Read+0x4bc>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 0301 	and.w	r3, r3, #1
 800989c:	2b01      	cmp	r3, #1
 800989e:	d007      	beq.n	80098b0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f042 0201 	orr.w	r2, r2, #1
 80098ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2222      	movs	r2, #34	; 0x22
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2240      	movs	r2, #64	; 0x40
 80098cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80098e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4a62      	ldr	r2, [pc, #392]	; (8009a78 <HAL_I2C_Mem_Read+0x248>)
 80098f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80098f2:	88f8      	ldrh	r0, [r7, #6]
 80098f4:	893a      	ldrh	r2, [r7, #8]
 80098f6:	8979      	ldrh	r1, [r7, #10]
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	9301      	str	r3, [sp, #4]
 80098fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	4603      	mov	r3, r0
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 fb2c 	bl	8009f60 <I2C_RequestMemoryRead>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e1ec      	b.n	8009cec <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009916:	2b00      	cmp	r3, #0
 8009918:	d113      	bne.n	8009942 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800991a:	2300      	movs	r3, #0
 800991c:	61fb      	str	r3, [r7, #28]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	61fb      	str	r3, [r7, #28]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	61fb      	str	r3, [r7, #28]
 800992e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	e1c0      	b.n	8009cc4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009946:	2b01      	cmp	r3, #1
 8009948:	d11e      	bne.n	8009988 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009958:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800995a:	b672      	cpsid	i
}
 800995c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800995e:	2300      	movs	r3, #0
 8009960:	61bb      	str	r3, [r7, #24]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	695b      	ldr	r3, [r3, #20]
 8009968:	61bb      	str	r3, [r7, #24]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	61bb      	str	r3, [r7, #24]
 8009972:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009982:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009984:	b662      	cpsie	i
}
 8009986:	e035      	b.n	80099f4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800998c:	2b02      	cmp	r3, #2
 800998e:	d11e      	bne.n	80099ce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800999e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80099a0:	b672      	cpsid	i
}
 80099a2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099a4:	2300      	movs	r3, #0
 80099a6:	617b      	str	r3, [r7, #20]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	617b      	str	r3, [r7, #20]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	617b      	str	r3, [r7, #20]
 80099b8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80099ca:	b662      	cpsie	i
}
 80099cc:	e012      	b.n	80099f4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099dc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099de:	2300      	movs	r3, #0
 80099e0:	613b      	str	r3, [r7, #16]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	613b      	str	r3, [r7, #16]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	699b      	ldr	r3, [r3, #24]
 80099f0:	613b      	str	r3, [r7, #16]
 80099f2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80099f4:	e166      	b.n	8009cc4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	f200 811f 	bhi.w	8009c3e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d123      	bne.n	8009a50 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f000 fd39 	bl	800a484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e167      	b.n	8009cec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	691a      	ldr	r2, [r3, #16]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a26:	b2d2      	uxtb	r2, r2
 8009a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	3b01      	subs	r3, #1
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a4e:	e139      	b.n	8009cc4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d152      	bne.n	8009afe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5e:	2200      	movs	r2, #0
 8009a60:	4906      	ldr	r1, [pc, #24]	; (8009a7c <HAL_I2C_Mem_Read+0x24c>)
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 fb64 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d008      	beq.n	8009a80 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e13c      	b.n	8009cec <HAL_I2C_Mem_Read+0x4bc>
 8009a72:	bf00      	nop
 8009a74:	00100002 	.word	0x00100002
 8009a78:	ffff0000 	.word	0xffff0000
 8009a7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009a80:	b672      	cpsid	i
}
 8009a82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	691a      	ldr	r2, [r3, #16]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9e:	b2d2      	uxtb	r2, r2
 8009aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009ac6:	b662      	cpsie	i
}
 8009ac8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	691a      	ldr	r2, [r3, #16]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad4:	b2d2      	uxtb	r2, r2
 8009ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009adc:	1c5a      	adds	r2, r3, #1
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	3b01      	subs	r3, #1
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009afc:	e0e2      	b.n	8009cc4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b04:	2200      	movs	r2, #0
 8009b06:	497b      	ldr	r1, [pc, #492]	; (8009cf4 <HAL_I2C_Mem_Read+0x4c4>)
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 fb11 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d001      	beq.n	8009b18 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e0e9      	b.n	8009cec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b28:	b672      	cpsid	i
}
 8009b2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	691a      	ldr	r2, [r3, #16]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b36:	b2d2      	uxtb	r2, r2
 8009b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	3b01      	subs	r3, #1
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009b5e:	4b66      	ldr	r3, [pc, #408]	; (8009cf8 <HAL_I2C_Mem_Read+0x4c8>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	08db      	lsrs	r3, r3, #3
 8009b64:	4a65      	ldr	r2, [pc, #404]	; (8009cfc <HAL_I2C_Mem_Read+0x4cc>)
 8009b66:	fba2 2303 	umull	r2, r3, r2, r3
 8009b6a:	0a1a      	lsrs	r2, r3, #8
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	00da      	lsls	r2, r3, #3
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d118      	bne.n	8009bb6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9e:	f043 0220 	orr.w	r2, r3, #32
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009ba6:	b662      	cpsie	i
}
 8009ba8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e09a      	b.n	8009cec <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	695b      	ldr	r3, [r3, #20]
 8009bbc:	f003 0304 	and.w	r3, r3, #4
 8009bc0:	2b04      	cmp	r3, #4
 8009bc2:	d1d9      	bne.n	8009b78 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	691a      	ldr	r2, [r3, #16]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	b2d2      	uxtb	r2, r2
 8009be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	1c5a      	adds	r2, r3, #1
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009c06:	b662      	cpsie	i
}
 8009c08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	691a      	ldr	r2, [r3, #16]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c14:	b2d2      	uxtb	r2, r2
 8009c16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1c:	1c5a      	adds	r2, r3, #1
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c26:	3b01      	subs	r3, #1
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	3b01      	subs	r3, #1
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c3c:	e042      	b.n	8009cc4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f000 fc1e 	bl	800a484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e04c      	b.n	8009cec <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	691a      	ldr	r2, [r3, #16]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5c:	b2d2      	uxtb	r2, r2
 8009c5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c64:	1c5a      	adds	r2, r3, #1
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	695b      	ldr	r3, [r3, #20]
 8009c8a:	f003 0304 	and.w	r3, r3, #4
 8009c8e:	2b04      	cmp	r3, #4
 8009c90:	d118      	bne.n	8009cc4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	691a      	ldr	r2, [r3, #16]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9c:	b2d2      	uxtb	r2, r2
 8009c9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	1c5a      	adds	r2, r3, #1
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f47f ae94 	bne.w	80099f6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2220      	movs	r2, #32
 8009cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	e000      	b.n	8009cec <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009cea:	2302      	movs	r3, #2
  }
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3728      	adds	r7, #40	; 0x28
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	00010004 	.word	0x00010004
 8009cf8:	200000a0 	.word	0x200000a0
 8009cfc:	14f8b589 	.word	0x14f8b589

08009d00 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d0e:	b2db      	uxtb	r3, r3
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bc80      	pop	{r7}
 8009d18:	4770      	bx	lr

08009d1a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bc80      	pop	{r7}
 8009d2e:	4770      	bx	lr

08009d30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b088      	sub	sp, #32
 8009d34:	af02      	add	r7, sp, #8
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	607a      	str	r2, [r7, #4]
 8009d3a:	603b      	str	r3, [r7, #0]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	2b08      	cmp	r3, #8
 8009d4a:	d006      	beq.n	8009d5a <I2C_MasterRequestWrite+0x2a>
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d003      	beq.n	8009d5a <I2C_MasterRequestWrite+0x2a>
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d58:	d108      	bne.n	8009d6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d68:	601a      	str	r2, [r3, #0]
 8009d6a:	e00b      	b.n	8009d84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d70:	2b12      	cmp	r3, #18
 8009d72:	d107      	bne.n	8009d84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f000 f9cd 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00d      	beq.n	8009db8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009daa:	d103      	bne.n	8009db4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009db2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e035      	b.n	8009e24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dc0:	d108      	bne.n	8009dd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009dc2:	897b      	ldrh	r3, [r7, #10]
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009dd0:	611a      	str	r2, [r3, #16]
 8009dd2:	e01b      	b.n	8009e0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009dd4:	897b      	ldrh	r3, [r7, #10]
 8009dd6:	11db      	asrs	r3, r3, #7
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	f003 0306 	and.w	r3, r3, #6
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	f063 030f 	orn	r3, r3, #15
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	490e      	ldr	r1, [pc, #56]	; (8009e2c <I2C_MasterRequestWrite+0xfc>)
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f000 fa16 	bl	800a224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e010      	b.n	8009e24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009e02:	897b      	ldrh	r3, [r7, #10]
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	4907      	ldr	r1, [pc, #28]	; (8009e30 <I2C_MasterRequestWrite+0x100>)
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f000 fa06 	bl	800a224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e000      	b.n	8009e24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	00010008 	.word	0x00010008
 8009e30:	00010002 	.word	0x00010002

08009e34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b088      	sub	sp, #32
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	4608      	mov	r0, r1
 8009e3e:	4611      	mov	r1, r2
 8009e40:	461a      	mov	r2, r3
 8009e42:	4603      	mov	r3, r0
 8009e44:	817b      	strh	r3, [r7, #10]
 8009e46:	460b      	mov	r3, r1
 8009e48:	813b      	strh	r3, [r7, #8]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 f960 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00d      	beq.n	8009e92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e84:	d103      	bne.n	8009e8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e05f      	b.n	8009f52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e92:	897b      	ldrh	r3, [r7, #10]
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	461a      	mov	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ea0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea4:	6a3a      	ldr	r2, [r7, #32]
 8009ea6:	492d      	ldr	r1, [pc, #180]	; (8009f5c <I2C_RequestMemoryWrite+0x128>)
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f000 f9bb 	bl	800a224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e04c      	b.n	8009f52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009eb8:	2300      	movs	r3, #0
 8009eba:	617b      	str	r3, [r7, #20]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	695b      	ldr	r3, [r3, #20]
 8009ec2:	617b      	str	r3, [r7, #20]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	617b      	str	r3, [r7, #20]
 8009ecc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed0:	6a39      	ldr	r1, [r7, #32]
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f000 fa46 	bl	800a364 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00d      	beq.n	8009efa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee2:	2b04      	cmp	r3, #4
 8009ee4:	d107      	bne.n	8009ef6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ef4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e02b      	b.n	8009f52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009efa:	88fb      	ldrh	r3, [r7, #6]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d105      	bne.n	8009f0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f00:	893b      	ldrh	r3, [r7, #8]
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	611a      	str	r2, [r3, #16]
 8009f0a:	e021      	b.n	8009f50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009f0c:	893b      	ldrh	r3, [r7, #8]
 8009f0e:	0a1b      	lsrs	r3, r3, #8
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f1c:	6a39      	ldr	r1, [r7, #32]
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f000 fa20 	bl	800a364 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00d      	beq.n	8009f46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	2b04      	cmp	r3, #4
 8009f30:	d107      	bne.n	8009f42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e005      	b.n	8009f52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f46:	893b      	ldrh	r3, [r7, #8]
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3718      	adds	r7, #24
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	00010002 	.word	0x00010002

08009f60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b088      	sub	sp, #32
 8009f64:	af02      	add	r7, sp, #8
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	4608      	mov	r0, r1
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	4603      	mov	r3, r0
 8009f70:	817b      	strh	r3, [r7, #10]
 8009f72:	460b      	mov	r3, r1
 8009f74:	813b      	strh	r3, [r7, #8]
 8009f76:	4613      	mov	r3, r2
 8009f78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f000 f8c2 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00d      	beq.n	8009fce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fc0:	d103      	bne.n	8009fca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e0aa      	b.n	800a124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fce:	897b      	ldrh	r3, [r7, #10]
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009fdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	6a3a      	ldr	r2, [r7, #32]
 8009fe2:	4952      	ldr	r1, [pc, #328]	; (800a12c <I2C_RequestMemoryRead+0x1cc>)
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f000 f91d 	bl	800a224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e097      	b.n	800a124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	617b      	str	r3, [r7, #20]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	617b      	str	r3, [r7, #20]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	617b      	str	r3, [r7, #20]
 800a008:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a00a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a00c:	6a39      	ldr	r1, [r7, #32]
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f000 f9a8 	bl	800a364 <I2C_WaitOnTXEFlagUntilTimeout>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00d      	beq.n	800a036 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01e:	2b04      	cmp	r3, #4
 800a020:	d107      	bne.n	800a032 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a030:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e076      	b.n	800a124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a036:	88fb      	ldrh	r3, [r7, #6]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d105      	bne.n	800a048 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a03c:	893b      	ldrh	r3, [r7, #8]
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	611a      	str	r2, [r3, #16]
 800a046:	e021      	b.n	800a08c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a048:	893b      	ldrh	r3, [r7, #8]
 800a04a:	0a1b      	lsrs	r3, r3, #8
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	b2da      	uxtb	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a058:	6a39      	ldr	r1, [r7, #32]
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f000 f982 	bl	800a364 <I2C_WaitOnTXEFlagUntilTimeout>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00d      	beq.n	800a082 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06a:	2b04      	cmp	r3, #4
 800a06c:	d107      	bne.n	800a07e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a07c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e050      	b.n	800a124 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a082:	893b      	ldrh	r3, [r7, #8]
 800a084:	b2da      	uxtb	r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08e:	6a39      	ldr	r1, [r7, #32]
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 f967 	bl	800a364 <I2C_WaitOnTXEFlagUntilTimeout>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00d      	beq.n	800a0b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a0:	2b04      	cmp	r3, #4
 800a0a2:	d107      	bne.n	800a0b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e035      	b.n	800a124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 f82b 	bl	800a130 <I2C_WaitOnFlagUntilTimeout>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00d      	beq.n	800a0fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ee:	d103      	bne.n	800a0f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e013      	b.n	800a124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a0fc:	897b      	ldrh	r3, [r7, #10]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f043 0301 	orr.w	r3, r3, #1
 800a104:	b2da      	uxtb	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	6a3a      	ldr	r2, [r7, #32]
 800a110:	4906      	ldr	r1, [pc, #24]	; (800a12c <I2C_RequestMemoryRead+0x1cc>)
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f000 f886 	bl	800a224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e000      	b.n	800a124 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3718      	adds	r7, #24
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	00010002 	.word	0x00010002

0800a130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	4613      	mov	r3, r2
 800a13e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a140:	e048      	b.n	800a1d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a148:	d044      	beq.n	800a1d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a14a:	f7fe f9e3 	bl	8008514 <HAL_GetTick>
 800a14e:	4602      	mov	r2, r0
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	429a      	cmp	r2, r3
 800a158:	d302      	bcc.n	800a160 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d139      	bne.n	800a1d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	0c1b      	lsrs	r3, r3, #16
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b01      	cmp	r3, #1
 800a168:	d10d      	bne.n	800a186 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	43da      	mvns	r2, r3
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	4013      	ands	r3, r2
 800a176:	b29b      	uxth	r3, r3
 800a178:	2b00      	cmp	r3, #0
 800a17a:	bf0c      	ite	eq
 800a17c:	2301      	moveq	r3, #1
 800a17e:	2300      	movne	r3, #0
 800a180:	b2db      	uxtb	r3, r3
 800a182:	461a      	mov	r2, r3
 800a184:	e00c      	b.n	800a1a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	43da      	mvns	r2, r3
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	4013      	ands	r3, r2
 800a192:	b29b      	uxth	r3, r3
 800a194:	2b00      	cmp	r3, #0
 800a196:	bf0c      	ite	eq
 800a198:	2301      	moveq	r3, #1
 800a19a:	2300      	movne	r3, #0
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	461a      	mov	r2, r3
 800a1a0:	79fb      	ldrb	r3, [r7, #7]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d116      	bne.n	800a1d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2220      	movs	r2, #32
 800a1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c0:	f043 0220 	orr.w	r2, r3, #32
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e023      	b.n	800a21c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	0c1b      	lsrs	r3, r3, #16
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d10d      	bne.n	800a1fa <I2C_WaitOnFlagUntilTimeout+0xca>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	43da      	mvns	r2, r3
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	bf0c      	ite	eq
 800a1f0:	2301      	moveq	r3, #1
 800a1f2:	2300      	movne	r3, #0
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	e00c      	b.n	800a214 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	43da      	mvns	r2, r3
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	4013      	ands	r3, r2
 800a206:	b29b      	uxth	r3, r3
 800a208:	2b00      	cmp	r3, #0
 800a20a:	bf0c      	ite	eq
 800a20c:	2301      	moveq	r3, #1
 800a20e:	2300      	movne	r3, #0
 800a210:	b2db      	uxtb	r3, r3
 800a212:	461a      	mov	r2, r3
 800a214:	79fb      	ldrb	r3, [r7, #7]
 800a216:	429a      	cmp	r2, r3
 800a218:	d093      	beq.n	800a142 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
 800a230:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a232:	e071      	b.n	800a318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a23e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a242:	d123      	bne.n	800a28c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a252:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a25c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2220      	movs	r2, #32
 800a268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a278:	f043 0204 	orr.w	r2, r3, #4
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e067      	b.n	800a35c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a292:	d041      	beq.n	800a318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a294:	f7fe f93e 	bl	8008514 <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d302      	bcc.n	800a2aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d136      	bne.n	800a318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	0c1b      	lsrs	r3, r3, #16
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d10c      	bne.n	800a2ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	43da      	mvns	r2, r3
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	4013      	ands	r3, r2
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	bf14      	ite	ne
 800a2c6:	2301      	movne	r3, #1
 800a2c8:	2300      	moveq	r3, #0
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	e00b      	b.n	800a2e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	43da      	mvns	r2, r3
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	4013      	ands	r3, r2
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	bf14      	ite	ne
 800a2e0:	2301      	movne	r3, #1
 800a2e2:	2300      	moveq	r3, #0
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d016      	beq.n	800a318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2220      	movs	r2, #32
 800a2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a304:	f043 0220 	orr.w	r2, r3, #32
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e021      	b.n	800a35c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	0c1b      	lsrs	r3, r3, #16
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d10c      	bne.n	800a33c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	43da      	mvns	r2, r3
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	4013      	ands	r3, r2
 800a32e:	b29b      	uxth	r3, r3
 800a330:	2b00      	cmp	r3, #0
 800a332:	bf14      	ite	ne
 800a334:	2301      	movne	r3, #1
 800a336:	2300      	moveq	r3, #0
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	e00b      	b.n	800a354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	43da      	mvns	r2, r3
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	4013      	ands	r3, r2
 800a348:	b29b      	uxth	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	bf14      	ite	ne
 800a34e:	2301      	movne	r3, #1
 800a350:	2300      	moveq	r3, #0
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2b00      	cmp	r3, #0
 800a356:	f47f af6d 	bne.w	800a234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a370:	e034      	b.n	800a3dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 f8e3 	bl	800a53e <I2C_IsAcknowledgeFailed>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e034      	b.n	800a3ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a388:	d028      	beq.n	800a3dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a38a:	f7fe f8c3 	bl	8008514 <HAL_GetTick>
 800a38e:	4602      	mov	r2, r0
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	429a      	cmp	r2, r3
 800a398:	d302      	bcc.n	800a3a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d11d      	bne.n	800a3dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3aa:	2b80      	cmp	r3, #128	; 0x80
 800a3ac:	d016      	beq.n	800a3dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2220      	movs	r2, #32
 800a3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c8:	f043 0220 	orr.w	r2, r3, #32
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e007      	b.n	800a3ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3e6:	2b80      	cmp	r3, #128	; 0x80
 800a3e8:	d1c3      	bne.n	800a372 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a400:	e034      	b.n	800a46c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f000 f89b 	bl	800a53e <I2C_IsAcknowledgeFailed>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e034      	b.n	800a47c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a418:	d028      	beq.n	800a46c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a41a:	f7fe f87b 	bl	8008514 <HAL_GetTick>
 800a41e:	4602      	mov	r2, r0
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	429a      	cmp	r2, r3
 800a428:	d302      	bcc.n	800a430 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d11d      	bne.n	800a46c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	f003 0304 	and.w	r3, r3, #4
 800a43a:	2b04      	cmp	r3, #4
 800a43c:	d016      	beq.n	800a46c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2220      	movs	r2, #32
 800a448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a458:	f043 0220 	orr.w	r2, r3, #32
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e007      	b.n	800a47c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	695b      	ldr	r3, [r3, #20]
 800a472:	f003 0304 	and.w	r3, r3, #4
 800a476:	2b04      	cmp	r3, #4
 800a478:	d1c3      	bne.n	800a402 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a490:	e049      	b.n	800a526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	f003 0310 	and.w	r3, r3, #16
 800a49c:	2b10      	cmp	r3, #16
 800a49e:	d119      	bne.n	800a4d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f06f 0210 	mvn.w	r2, #16
 800a4a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2220      	movs	r2, #32
 800a4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e030      	b.n	800a536 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4d4:	f7fe f81e 	bl	8008514 <HAL_GetTick>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d302      	bcc.n	800a4ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d11d      	bne.n	800a526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	695b      	ldr	r3, [r3, #20]
 800a4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f4:	2b40      	cmp	r3, #64	; 0x40
 800a4f6:	d016      	beq.n	800a526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2220      	movs	r2, #32
 800a502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a512:	f043 0220 	orr.w	r2, r3, #32
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e007      	b.n	800a536 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	695b      	ldr	r3, [r3, #20]
 800a52c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a530:	2b40      	cmp	r3, #64	; 0x40
 800a532:	d1ae      	bne.n	800a492 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	695b      	ldr	r3, [r3, #20]
 800a54c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a554:	d11b      	bne.n	800a58e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a55e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2220      	movs	r2, #32
 800a56a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57a:	f043 0204 	orr.w	r2, r3, #4
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e000      	b.n	800a590 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	bc80      	pop	{r7}
 800a598:	4770      	bx	lr
	...

0800a59c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b086      	sub	sp, #24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e272      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 8087 	beq.w	800a6ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a5bc:	4b92      	ldr	r3, [pc, #584]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f003 030c 	and.w	r3, r3, #12
 800a5c4:	2b04      	cmp	r3, #4
 800a5c6:	d00c      	beq.n	800a5e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a5c8:	4b8f      	ldr	r3, [pc, #572]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	f003 030c 	and.w	r3, r3, #12
 800a5d0:	2b08      	cmp	r3, #8
 800a5d2:	d112      	bne.n	800a5fa <HAL_RCC_OscConfig+0x5e>
 800a5d4:	4b8c      	ldr	r3, [pc, #560]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5e0:	d10b      	bne.n	800a5fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5e2:	4b89      	ldr	r3, [pc, #548]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d06c      	beq.n	800a6c8 <HAL_RCC_OscConfig+0x12c>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d168      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e24c      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a602:	d106      	bne.n	800a612 <HAL_RCC_OscConfig+0x76>
 800a604:	4b80      	ldr	r3, [pc, #512]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a7f      	ldr	r2, [pc, #508]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a60a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a60e:	6013      	str	r3, [r2, #0]
 800a610:	e02e      	b.n	800a670 <HAL_RCC_OscConfig+0xd4>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10c      	bne.n	800a634 <HAL_RCC_OscConfig+0x98>
 800a61a:	4b7b      	ldr	r3, [pc, #492]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a7a      	ldr	r2, [pc, #488]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a624:	6013      	str	r3, [r2, #0]
 800a626:	4b78      	ldr	r3, [pc, #480]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a77      	ldr	r2, [pc, #476]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a62c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a630:	6013      	str	r3, [r2, #0]
 800a632:	e01d      	b.n	800a670 <HAL_RCC_OscConfig+0xd4>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a63c:	d10c      	bne.n	800a658 <HAL_RCC_OscConfig+0xbc>
 800a63e:	4b72      	ldr	r3, [pc, #456]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a71      	ldr	r2, [pc, #452]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a648:	6013      	str	r3, [r2, #0]
 800a64a:	4b6f      	ldr	r3, [pc, #444]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a6e      	ldr	r2, [pc, #440]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	e00b      	b.n	800a670 <HAL_RCC_OscConfig+0xd4>
 800a658:	4b6b      	ldr	r3, [pc, #428]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a6a      	ldr	r2, [pc, #424]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a65e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a662:	6013      	str	r3, [r2, #0]
 800a664:	4b68      	ldr	r3, [pc, #416]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a67      	ldr	r2, [pc, #412]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a66a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a66e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d013      	beq.n	800a6a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a678:	f7fd ff4c 	bl	8008514 <HAL_GetTick>
 800a67c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a67e:	e008      	b.n	800a692 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a680:	f7fd ff48 	bl	8008514 <HAL_GetTick>
 800a684:	4602      	mov	r2, r0
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	2b64      	cmp	r3, #100	; 0x64
 800a68c:	d901      	bls.n	800a692 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a68e:	2303      	movs	r3, #3
 800a690:	e200      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a692:	4b5d      	ldr	r3, [pc, #372]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d0f0      	beq.n	800a680 <HAL_RCC_OscConfig+0xe4>
 800a69e:	e014      	b.n	800a6ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6a0:	f7fd ff38 	bl	8008514 <HAL_GetTick>
 800a6a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6a6:	e008      	b.n	800a6ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6a8:	f7fd ff34 	bl	8008514 <HAL_GetTick>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	2b64      	cmp	r3, #100	; 0x64
 800a6b4:	d901      	bls.n	800a6ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e1ec      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6ba:	4b53      	ldr	r3, [pc, #332]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1f0      	bne.n	800a6a8 <HAL_RCC_OscConfig+0x10c>
 800a6c6:	e000      	b.n	800a6ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 0302 	and.w	r3, r3, #2
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d063      	beq.n	800a79e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a6d6:	4b4c      	ldr	r3, [pc, #304]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	f003 030c 	and.w	r3, r3, #12
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00b      	beq.n	800a6fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a6e2:	4b49      	ldr	r3, [pc, #292]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	f003 030c 	and.w	r3, r3, #12
 800a6ea:	2b08      	cmp	r3, #8
 800a6ec:	d11c      	bne.n	800a728 <HAL_RCC_OscConfig+0x18c>
 800a6ee:	4b46      	ldr	r3, [pc, #280]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d116      	bne.n	800a728 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6fa:	4b43      	ldr	r3, [pc, #268]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0302 	and.w	r3, r3, #2
 800a702:	2b00      	cmp	r3, #0
 800a704:	d005      	beq.n	800a712 <HAL_RCC_OscConfig+0x176>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d001      	beq.n	800a712 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	e1c0      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a712:	4b3d      	ldr	r3, [pc, #244]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	00db      	lsls	r3, r3, #3
 800a720:	4939      	ldr	r1, [pc, #228]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a722:	4313      	orrs	r3, r2
 800a724:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a726:	e03a      	b.n	800a79e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d020      	beq.n	800a772 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a730:	4b36      	ldr	r3, [pc, #216]	; (800a80c <HAL_RCC_OscConfig+0x270>)
 800a732:	2201      	movs	r2, #1
 800a734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a736:	f7fd feed 	bl	8008514 <HAL_GetTick>
 800a73a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a73c:	e008      	b.n	800a750 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a73e:	f7fd fee9 	bl	8008514 <HAL_GetTick>
 800a742:	4602      	mov	r2, r0
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d901      	bls.n	800a750 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e1a1      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a750:	4b2d      	ldr	r3, [pc, #180]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 0302 	and.w	r3, r3, #2
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d0f0      	beq.n	800a73e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a75c:	4b2a      	ldr	r3, [pc, #168]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	695b      	ldr	r3, [r3, #20]
 800a768:	00db      	lsls	r3, r3, #3
 800a76a:	4927      	ldr	r1, [pc, #156]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a76c:	4313      	orrs	r3, r2
 800a76e:	600b      	str	r3, [r1, #0]
 800a770:	e015      	b.n	800a79e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a772:	4b26      	ldr	r3, [pc, #152]	; (800a80c <HAL_RCC_OscConfig+0x270>)
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a778:	f7fd fecc 	bl	8008514 <HAL_GetTick>
 800a77c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a77e:	e008      	b.n	800a792 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a780:	f7fd fec8 	bl	8008514 <HAL_GetTick>
 800a784:	4602      	mov	r2, r0
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d901      	bls.n	800a792 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e180      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a792:	4b1d      	ldr	r3, [pc, #116]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f003 0302 	and.w	r3, r3, #2
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1f0      	bne.n	800a780 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 0308 	and.w	r3, r3, #8
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d03a      	beq.n	800a820 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	699b      	ldr	r3, [r3, #24]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d019      	beq.n	800a7e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7b2:	4b17      	ldr	r3, [pc, #92]	; (800a810 <HAL_RCC_OscConfig+0x274>)
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a7b8:	f7fd feac 	bl	8008514 <HAL_GetTick>
 800a7bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a7be:	e008      	b.n	800a7d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7c0:	f7fd fea8 	bl	8008514 <HAL_GetTick>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d901      	bls.n	800a7d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e160      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a7d2:	4b0d      	ldr	r3, [pc, #52]	; (800a808 <HAL_RCC_OscConfig+0x26c>)
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d6:	f003 0302 	and.w	r3, r3, #2
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0f0      	beq.n	800a7c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a7de:	2001      	movs	r0, #1
 800a7e0:	f000 face 	bl	800ad80 <RCC_Delay>
 800a7e4:	e01c      	b.n	800a820 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a7e6:	4b0a      	ldr	r3, [pc, #40]	; (800a810 <HAL_RCC_OscConfig+0x274>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a7ec:	f7fd fe92 	bl	8008514 <HAL_GetTick>
 800a7f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7f2:	e00f      	b.n	800a814 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7f4:	f7fd fe8e 	bl	8008514 <HAL_GetTick>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d908      	bls.n	800a814 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	e146      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
 800a806:	bf00      	nop
 800a808:	40021000 	.word	0x40021000
 800a80c:	42420000 	.word	0x42420000
 800a810:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a814:	4b92      	ldr	r3, [pc, #584]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a818:	f003 0302 	and.w	r3, r3, #2
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1e9      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0304 	and.w	r3, r3, #4
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f000 80a6 	beq.w	800a97a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a82e:	2300      	movs	r3, #0
 800a830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a832:	4b8b      	ldr	r3, [pc, #556]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a834:	69db      	ldr	r3, [r3, #28]
 800a836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10d      	bne.n	800a85a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a83e:	4b88      	ldr	r3, [pc, #544]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a840:	69db      	ldr	r3, [r3, #28]
 800a842:	4a87      	ldr	r2, [pc, #540]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a848:	61d3      	str	r3, [r2, #28]
 800a84a:	4b85      	ldr	r3, [pc, #532]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a84c:	69db      	ldr	r3, [r3, #28]
 800a84e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a852:	60bb      	str	r3, [r7, #8]
 800a854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a856:	2301      	movs	r3, #1
 800a858:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a85a:	4b82      	ldr	r3, [pc, #520]	; (800aa64 <HAL_RCC_OscConfig+0x4c8>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a862:	2b00      	cmp	r3, #0
 800a864:	d118      	bne.n	800a898 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a866:	4b7f      	ldr	r3, [pc, #508]	; (800aa64 <HAL_RCC_OscConfig+0x4c8>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a7e      	ldr	r2, [pc, #504]	; (800aa64 <HAL_RCC_OscConfig+0x4c8>)
 800a86c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a872:	f7fd fe4f 	bl	8008514 <HAL_GetTick>
 800a876:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a878:	e008      	b.n	800a88c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a87a:	f7fd fe4b 	bl	8008514 <HAL_GetTick>
 800a87e:	4602      	mov	r2, r0
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	2b64      	cmp	r3, #100	; 0x64
 800a886:	d901      	bls.n	800a88c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a888:	2303      	movs	r3, #3
 800a88a:	e103      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a88c:	4b75      	ldr	r3, [pc, #468]	; (800aa64 <HAL_RCC_OscConfig+0x4c8>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a894:	2b00      	cmp	r3, #0
 800a896:	d0f0      	beq.n	800a87a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d106      	bne.n	800a8ae <HAL_RCC_OscConfig+0x312>
 800a8a0:	4b6f      	ldr	r3, [pc, #444]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a8a2:	6a1b      	ldr	r3, [r3, #32]
 800a8a4:	4a6e      	ldr	r2, [pc, #440]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a8a6:	f043 0301 	orr.w	r3, r3, #1
 800a8aa:	6213      	str	r3, [r2, #32]
 800a8ac:	e02d      	b.n	800a90a <HAL_RCC_OscConfig+0x36e>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10c      	bne.n	800a8d0 <HAL_RCC_OscConfig+0x334>
 800a8b6:	4b6a      	ldr	r3, [pc, #424]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	4a69      	ldr	r2, [pc, #420]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a8bc:	f023 0301 	bic.w	r3, r3, #1
 800a8c0:	6213      	str	r3, [r2, #32]
 800a8c2:	4b67      	ldr	r3, [pc, #412]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	4a66      	ldr	r2, [pc, #408]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a8c8:	f023 0304 	bic.w	r3, r3, #4
 800a8cc:	6213      	str	r3, [r2, #32]
 800a8ce:	e01c      	b.n	800a90a <HAL_RCC_OscConfig+0x36e>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	2b05      	cmp	r3, #5
 800a8d6:	d10c      	bne.n	800a8f2 <HAL_RCC_OscConfig+0x356>
 800a8d8:	4b61      	ldr	r3, [pc, #388]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	4a60      	ldr	r2, [pc, #384]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a8de:	f043 0304 	orr.w	r3, r3, #4
 800a8e2:	6213      	str	r3, [r2, #32]
 800a8e4:	4b5e      	ldr	r3, [pc, #376]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a8e6:	6a1b      	ldr	r3, [r3, #32]
 800a8e8:	4a5d      	ldr	r2, [pc, #372]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a8ea:	f043 0301 	orr.w	r3, r3, #1
 800a8ee:	6213      	str	r3, [r2, #32]
 800a8f0:	e00b      	b.n	800a90a <HAL_RCC_OscConfig+0x36e>
 800a8f2:	4b5b      	ldr	r3, [pc, #364]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	4a5a      	ldr	r2, [pc, #360]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a8f8:	f023 0301 	bic.w	r3, r3, #1
 800a8fc:	6213      	str	r3, [r2, #32]
 800a8fe:	4b58      	ldr	r3, [pc, #352]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a900:	6a1b      	ldr	r3, [r3, #32]
 800a902:	4a57      	ldr	r2, [pc, #348]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a904:	f023 0304 	bic.w	r3, r3, #4
 800a908:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d015      	beq.n	800a93e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a912:	f7fd fdff 	bl	8008514 <HAL_GetTick>
 800a916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a918:	e00a      	b.n	800a930 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a91a:	f7fd fdfb 	bl	8008514 <HAL_GetTick>
 800a91e:	4602      	mov	r2, r0
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	f241 3288 	movw	r2, #5000	; 0x1388
 800a928:	4293      	cmp	r3, r2
 800a92a:	d901      	bls.n	800a930 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e0b1      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a930:	4b4b      	ldr	r3, [pc, #300]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a932:	6a1b      	ldr	r3, [r3, #32]
 800a934:	f003 0302 	and.w	r3, r3, #2
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d0ee      	beq.n	800a91a <HAL_RCC_OscConfig+0x37e>
 800a93c:	e014      	b.n	800a968 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a93e:	f7fd fde9 	bl	8008514 <HAL_GetTick>
 800a942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a944:	e00a      	b.n	800a95c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a946:	f7fd fde5 	bl	8008514 <HAL_GetTick>
 800a94a:	4602      	mov	r2, r0
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	f241 3288 	movw	r2, #5000	; 0x1388
 800a954:	4293      	cmp	r3, r2
 800a956:	d901      	bls.n	800a95c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a958:	2303      	movs	r3, #3
 800a95a:	e09b      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a95c:	4b40      	ldr	r3, [pc, #256]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a95e:	6a1b      	ldr	r3, [r3, #32]
 800a960:	f003 0302 	and.w	r3, r3, #2
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1ee      	bne.n	800a946 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a968:	7dfb      	ldrb	r3, [r7, #23]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d105      	bne.n	800a97a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a96e:	4b3c      	ldr	r3, [pc, #240]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a970:	69db      	ldr	r3, [r3, #28]
 800a972:	4a3b      	ldr	r2, [pc, #236]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a978:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f000 8087 	beq.w	800aa92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a984:	4b36      	ldr	r3, [pc, #216]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	f003 030c 	and.w	r3, r3, #12
 800a98c:	2b08      	cmp	r3, #8
 800a98e:	d061      	beq.n	800aa54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	69db      	ldr	r3, [r3, #28]
 800a994:	2b02      	cmp	r3, #2
 800a996:	d146      	bne.n	800aa26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a998:	4b33      	ldr	r3, [pc, #204]	; (800aa68 <HAL_RCC_OscConfig+0x4cc>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a99e:	f7fd fdb9 	bl	8008514 <HAL_GetTick>
 800a9a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9a4:	e008      	b.n	800a9b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9a6:	f7fd fdb5 	bl	8008514 <HAL_GetTick>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d901      	bls.n	800a9b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e06d      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9b8:	4b29      	ldr	r3, [pc, #164]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1f0      	bne.n	800a9a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a1b      	ldr	r3, [r3, #32]
 800a9c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9cc:	d108      	bne.n	800a9e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a9ce:	4b24      	ldr	r3, [pc, #144]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	4921      	ldr	r1, [pc, #132]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a9e0:	4b1f      	ldr	r3, [pc, #124]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a19      	ldr	r1, [r3, #32]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	430b      	orrs	r3, r1
 800a9f2:	491b      	ldr	r1, [pc, #108]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a9f8:	4b1b      	ldr	r3, [pc, #108]	; (800aa68 <HAL_RCC_OscConfig+0x4cc>)
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9fe:	f7fd fd89 	bl	8008514 <HAL_GetTick>
 800aa02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aa04:	e008      	b.n	800aa18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa06:	f7fd fd85 	bl	8008514 <HAL_GetTick>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d901      	bls.n	800aa18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800aa14:	2303      	movs	r3, #3
 800aa16:	e03d      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aa18:	4b11      	ldr	r3, [pc, #68]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d0f0      	beq.n	800aa06 <HAL_RCC_OscConfig+0x46a>
 800aa24:	e035      	b.n	800aa92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa26:	4b10      	ldr	r3, [pc, #64]	; (800aa68 <HAL_RCC_OscConfig+0x4cc>)
 800aa28:	2200      	movs	r2, #0
 800aa2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa2c:	f7fd fd72 	bl	8008514 <HAL_GetTick>
 800aa30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa32:	e008      	b.n	800aa46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa34:	f7fd fd6e 	bl	8008514 <HAL_GetTick>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d901      	bls.n	800aa46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800aa42:	2303      	movs	r3, #3
 800aa44:	e026      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa46:	4b06      	ldr	r3, [pc, #24]	; (800aa60 <HAL_RCC_OscConfig+0x4c4>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1f0      	bne.n	800aa34 <HAL_RCC_OscConfig+0x498>
 800aa52:	e01e      	b.n	800aa92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	69db      	ldr	r3, [r3, #28]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d107      	bne.n	800aa6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e019      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
 800aa60:	40021000 	.word	0x40021000
 800aa64:	40007000 	.word	0x40007000
 800aa68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800aa6c:	4b0b      	ldr	r3, [pc, #44]	; (800aa9c <HAL_RCC_OscConfig+0x500>)
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a1b      	ldr	r3, [r3, #32]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d106      	bne.n	800aa8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d001      	beq.n	800aa92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e000      	b.n	800aa94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3718      	adds	r7, #24
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	40021000 	.word	0x40021000

0800aaa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d101      	bne.n	800aab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	e0d0      	b.n	800ac56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aab4:	4b6a      	ldr	r3, [pc, #424]	; (800ac60 <HAL_RCC_ClockConfig+0x1c0>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 0307 	and.w	r3, r3, #7
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d910      	bls.n	800aae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aac2:	4b67      	ldr	r3, [pc, #412]	; (800ac60 <HAL_RCC_ClockConfig+0x1c0>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f023 0207 	bic.w	r2, r3, #7
 800aaca:	4965      	ldr	r1, [pc, #404]	; (800ac60 <HAL_RCC_ClockConfig+0x1c0>)
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	4313      	orrs	r3, r2
 800aad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aad2:	4b63      	ldr	r3, [pc, #396]	; (800ac60 <HAL_RCC_ClockConfig+0x1c0>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f003 0307 	and.w	r3, r3, #7
 800aada:	683a      	ldr	r2, [r7, #0]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d001      	beq.n	800aae4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	e0b8      	b.n	800ac56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 0302 	and.w	r3, r3, #2
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d020      	beq.n	800ab32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 0304 	and.w	r3, r3, #4
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d005      	beq.n	800ab08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aafc:	4b59      	ldr	r3, [pc, #356]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	4a58      	ldr	r2, [pc, #352]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800ab02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ab06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0308 	and.w	r3, r3, #8
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d005      	beq.n	800ab20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ab14:	4b53      	ldr	r3, [pc, #332]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	4a52      	ldr	r2, [pc, #328]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800ab1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ab1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab20:	4b50      	ldr	r3, [pc, #320]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	494d      	ldr	r1, [pc, #308]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 0301 	and.w	r3, r3, #1
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d040      	beq.n	800abc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d107      	bne.n	800ab56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab46:	4b47      	ldr	r3, [pc, #284]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d115      	bne.n	800ab7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e07f      	b.n	800ac56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	d107      	bne.n	800ab6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab5e:	4b41      	ldr	r3, [pc, #260]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d109      	bne.n	800ab7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e073      	b.n	800ac56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab6e:	4b3d      	ldr	r3, [pc, #244]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 0302 	and.w	r3, r3, #2
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e06b      	b.n	800ac56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ab7e:	4b39      	ldr	r3, [pc, #228]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	f023 0203 	bic.w	r2, r3, #3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	4936      	ldr	r1, [pc, #216]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ab90:	f7fd fcc0 	bl	8008514 <HAL_GetTick>
 800ab94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab96:	e00a      	b.n	800abae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab98:	f7fd fcbc 	bl	8008514 <HAL_GetTick>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d901      	bls.n	800abae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800abaa:	2303      	movs	r3, #3
 800abac:	e053      	b.n	800ac56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abae:	4b2d      	ldr	r3, [pc, #180]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f003 020c 	and.w	r2, r3, #12
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d1eb      	bne.n	800ab98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800abc0:	4b27      	ldr	r3, [pc, #156]	; (800ac60 <HAL_RCC_ClockConfig+0x1c0>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 0307 	and.w	r3, r3, #7
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d210      	bcs.n	800abf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abce:	4b24      	ldr	r3, [pc, #144]	; (800ac60 <HAL_RCC_ClockConfig+0x1c0>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f023 0207 	bic.w	r2, r3, #7
 800abd6:	4922      	ldr	r1, [pc, #136]	; (800ac60 <HAL_RCC_ClockConfig+0x1c0>)
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	4313      	orrs	r3, r2
 800abdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abde:	4b20      	ldr	r3, [pc, #128]	; (800ac60 <HAL_RCC_ClockConfig+0x1c0>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 0307 	and.w	r3, r3, #7
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d001      	beq.n	800abf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e032      	b.n	800ac56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0304 	and.w	r3, r3, #4
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d008      	beq.n	800ac0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800abfc:	4b19      	ldr	r3, [pc, #100]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	4916      	ldr	r1, [pc, #88]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 0308 	and.w	r3, r3, #8
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d009      	beq.n	800ac2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ac1a:	4b12      	ldr	r3, [pc, #72]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	00db      	lsls	r3, r3, #3
 800ac28:	490e      	ldr	r1, [pc, #56]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ac2e:	f000 f821 	bl	800ac74 <HAL_RCC_GetSysClockFreq>
 800ac32:	4602      	mov	r2, r0
 800ac34:	4b0b      	ldr	r3, [pc, #44]	; (800ac64 <HAL_RCC_ClockConfig+0x1c4>)
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	091b      	lsrs	r3, r3, #4
 800ac3a:	f003 030f 	and.w	r3, r3, #15
 800ac3e:	490a      	ldr	r1, [pc, #40]	; (800ac68 <HAL_RCC_ClockConfig+0x1c8>)
 800ac40:	5ccb      	ldrb	r3, [r1, r3]
 800ac42:	fa22 f303 	lsr.w	r3, r2, r3
 800ac46:	4a09      	ldr	r2, [pc, #36]	; (800ac6c <HAL_RCC_ClockConfig+0x1cc>)
 800ac48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ac4a:	4b09      	ldr	r3, [pc, #36]	; (800ac70 <HAL_RCC_ClockConfig+0x1d0>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fd fc1e 	bl	8008490 <HAL_InitTick>

  return HAL_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	40022000 	.word	0x40022000
 800ac64:	40021000 	.word	0x40021000
 800ac68:	0800dab0 	.word	0x0800dab0
 800ac6c:	200000a0 	.word	0x200000a0
 800ac70:	200000a4 	.word	0x200000a4

0800ac74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b087      	sub	sp, #28
 800ac78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	60fb      	str	r3, [r7, #12]
 800ac7e:	2300      	movs	r3, #0
 800ac80:	60bb      	str	r3, [r7, #8]
 800ac82:	2300      	movs	r3, #0
 800ac84:	617b      	str	r3, [r7, #20]
 800ac86:	2300      	movs	r3, #0
 800ac88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ac8e:	4b1e      	ldr	r3, [pc, #120]	; (800ad08 <HAL_RCC_GetSysClockFreq+0x94>)
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f003 030c 	and.w	r3, r3, #12
 800ac9a:	2b04      	cmp	r3, #4
 800ac9c:	d002      	beq.n	800aca4 <HAL_RCC_GetSysClockFreq+0x30>
 800ac9e:	2b08      	cmp	r3, #8
 800aca0:	d003      	beq.n	800acaa <HAL_RCC_GetSysClockFreq+0x36>
 800aca2:	e027      	b.n	800acf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aca4:	4b19      	ldr	r3, [pc, #100]	; (800ad0c <HAL_RCC_GetSysClockFreq+0x98>)
 800aca6:	613b      	str	r3, [r7, #16]
      break;
 800aca8:	e027      	b.n	800acfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	0c9b      	lsrs	r3, r3, #18
 800acae:	f003 030f 	and.w	r3, r3, #15
 800acb2:	4a17      	ldr	r2, [pc, #92]	; (800ad10 <HAL_RCC_GetSysClockFreq+0x9c>)
 800acb4:	5cd3      	ldrb	r3, [r2, r3]
 800acb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d010      	beq.n	800ace4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800acc2:	4b11      	ldr	r3, [pc, #68]	; (800ad08 <HAL_RCC_GetSysClockFreq+0x94>)
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	0c5b      	lsrs	r3, r3, #17
 800acc8:	f003 0301 	and.w	r3, r3, #1
 800accc:	4a11      	ldr	r2, [pc, #68]	; (800ad14 <HAL_RCC_GetSysClockFreq+0xa0>)
 800acce:	5cd3      	ldrb	r3, [r2, r3]
 800acd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a0d      	ldr	r2, [pc, #52]	; (800ad0c <HAL_RCC_GetSysClockFreq+0x98>)
 800acd6:	fb03 f202 	mul.w	r2, r3, r2
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ace0:	617b      	str	r3, [r7, #20]
 800ace2:	e004      	b.n	800acee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a0c      	ldr	r2, [pc, #48]	; (800ad18 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ace8:	fb02 f303 	mul.w	r3, r2, r3
 800acec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	613b      	str	r3, [r7, #16]
      break;
 800acf2:	e002      	b.n	800acfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800acf4:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <HAL_RCC_GetSysClockFreq+0x98>)
 800acf6:	613b      	str	r3, [r7, #16]
      break;
 800acf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800acfa:	693b      	ldr	r3, [r7, #16]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	371c      	adds	r7, #28
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bc80      	pop	{r7}
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	40021000 	.word	0x40021000
 800ad0c:	007a1200 	.word	0x007a1200
 800ad10:	0800dac8 	.word	0x0800dac8
 800ad14:	0800dad8 	.word	0x0800dad8
 800ad18:	003d0900 	.word	0x003d0900

0800ad1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad20:	4b02      	ldr	r3, [pc, #8]	; (800ad2c <HAL_RCC_GetHCLKFreq+0x10>)
 800ad22:	681b      	ldr	r3, [r3, #0]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bc80      	pop	{r7}
 800ad2a:	4770      	bx	lr
 800ad2c:	200000a0 	.word	0x200000a0

0800ad30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ad34:	f7ff fff2 	bl	800ad1c <HAL_RCC_GetHCLKFreq>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	4b05      	ldr	r3, [pc, #20]	; (800ad50 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	0a1b      	lsrs	r3, r3, #8
 800ad40:	f003 0307 	and.w	r3, r3, #7
 800ad44:	4903      	ldr	r1, [pc, #12]	; (800ad54 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad46:	5ccb      	ldrb	r3, [r1, r3]
 800ad48:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	40021000 	.word	0x40021000
 800ad54:	0800dac0 	.word	0x0800dac0

0800ad58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ad5c:	f7ff ffde 	bl	800ad1c <HAL_RCC_GetHCLKFreq>
 800ad60:	4602      	mov	r2, r0
 800ad62:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	0adb      	lsrs	r3, r3, #11
 800ad68:	f003 0307 	and.w	r3, r3, #7
 800ad6c:	4903      	ldr	r1, [pc, #12]	; (800ad7c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad6e:	5ccb      	ldrb	r3, [r1, r3]
 800ad70:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	40021000 	.word	0x40021000
 800ad7c:	0800dac0 	.word	0x0800dac0

0800ad80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ad88:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <RCC_Delay+0x34>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a0a      	ldr	r2, [pc, #40]	; (800adb8 <RCC_Delay+0x38>)
 800ad8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad92:	0a5b      	lsrs	r3, r3, #9
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	fb02 f303 	mul.w	r3, r2, r3
 800ad9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ad9c:	bf00      	nop
  }
  while (Delay --);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	1e5a      	subs	r2, r3, #1
 800ada2:	60fa      	str	r2, [r7, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1f9      	bne.n	800ad9c <RCC_Delay+0x1c>
}
 800ada8:	bf00      	nop
 800adaa:	bf00      	nop
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	bc80      	pop	{r7}
 800adb2:	4770      	bx	lr
 800adb4:	200000a0 	.word	0x200000a0
 800adb8:	10624dd3 	.word	0x10624dd3

0800adbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d101      	bne.n	800adce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	e041      	b.n	800ae52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d106      	bne.n	800ade8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f7fd fa26 	bl	8008234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2202      	movs	r2, #2
 800adec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	3304      	adds	r3, #4
 800adf8:	4619      	mov	r1, r3
 800adfa:	4610      	mov	r0, r2
 800adfc:	f000 fa82 	bl	800b304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
	...

0800ae5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d001      	beq.n	800ae74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	e044      	b.n	800aefe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2202      	movs	r2, #2
 800ae78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68da      	ldr	r2, [r3, #12]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f042 0201 	orr.w	r2, r2, #1
 800ae8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a1d      	ldr	r2, [pc, #116]	; (800af08 <HAL_TIM_Base_Start_IT+0xac>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d018      	beq.n	800aec8 <HAL_TIM_Base_Start_IT+0x6c>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a1c      	ldr	r2, [pc, #112]	; (800af0c <HAL_TIM_Base_Start_IT+0xb0>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d013      	beq.n	800aec8 <HAL_TIM_Base_Start_IT+0x6c>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea8:	d00e      	beq.n	800aec8 <HAL_TIM_Base_Start_IT+0x6c>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a18      	ldr	r2, [pc, #96]	; (800af10 <HAL_TIM_Base_Start_IT+0xb4>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d009      	beq.n	800aec8 <HAL_TIM_Base_Start_IT+0x6c>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a16      	ldr	r2, [pc, #88]	; (800af14 <HAL_TIM_Base_Start_IT+0xb8>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d004      	beq.n	800aec8 <HAL_TIM_Base_Start_IT+0x6c>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a15      	ldr	r2, [pc, #84]	; (800af18 <HAL_TIM_Base_Start_IT+0xbc>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d111      	bne.n	800aeec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	f003 0307 	and.w	r3, r3, #7
 800aed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b06      	cmp	r3, #6
 800aed8:	d010      	beq.n	800aefc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f042 0201 	orr.w	r2, r2, #1
 800aee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aeea:	e007      	b.n	800aefc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f042 0201 	orr.w	r2, r2, #1
 800aefa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	bc80      	pop	{r7}
 800af06:	4770      	bx	lr
 800af08:	40012c00 	.word	0x40012c00
 800af0c:	40013400 	.word	0x40013400
 800af10:	40000400 	.word	0x40000400
 800af14:	40000800 	.word	0x40000800
 800af18:	40000c00 	.word	0x40000c00

0800af1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	f003 0302 	and.w	r3, r3, #2
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d122      	bne.n	800af78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	f003 0302 	and.w	r3, r3, #2
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d11b      	bne.n	800af78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f06f 0202 	mvn.w	r2, #2
 800af48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	699b      	ldr	r3, [r3, #24]
 800af56:	f003 0303 	and.w	r3, r3, #3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d003      	beq.n	800af66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f9b4 	bl	800b2cc <HAL_TIM_IC_CaptureCallback>
 800af64:	e005      	b.n	800af72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 f9a7 	bl	800b2ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f9b6 	bl	800b2de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	f003 0304 	and.w	r3, r3, #4
 800af82:	2b04      	cmp	r3, #4
 800af84:	d122      	bne.n	800afcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	f003 0304 	and.w	r3, r3, #4
 800af90:	2b04      	cmp	r3, #4
 800af92:	d11b      	bne.n	800afcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f06f 0204 	mvn.w	r2, #4
 800af9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2202      	movs	r2, #2
 800afa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d003      	beq.n	800afba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f98a 	bl	800b2cc <HAL_TIM_IC_CaptureCallback>
 800afb8:	e005      	b.n	800afc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f97d 	bl	800b2ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f98c 	bl	800b2de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	f003 0308 	and.w	r3, r3, #8
 800afd6:	2b08      	cmp	r3, #8
 800afd8:	d122      	bne.n	800b020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	f003 0308 	and.w	r3, r3, #8
 800afe4:	2b08      	cmp	r3, #8
 800afe6:	d11b      	bne.n	800b020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f06f 0208 	mvn.w	r2, #8
 800aff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2204      	movs	r2, #4
 800aff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	69db      	ldr	r3, [r3, #28]
 800affe:	f003 0303 	and.w	r3, r3, #3
 800b002:	2b00      	cmp	r3, #0
 800b004:	d003      	beq.n	800b00e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f960 	bl	800b2cc <HAL_TIM_IC_CaptureCallback>
 800b00c:	e005      	b.n	800b01a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f953 	bl	800b2ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f962 	bl	800b2de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	f003 0310 	and.w	r3, r3, #16
 800b02a:	2b10      	cmp	r3, #16
 800b02c:	d122      	bne.n	800b074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	f003 0310 	and.w	r3, r3, #16
 800b038:	2b10      	cmp	r3, #16
 800b03a:	d11b      	bne.n	800b074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f06f 0210 	mvn.w	r2, #16
 800b044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2208      	movs	r2, #8
 800b04a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	69db      	ldr	r3, [r3, #28]
 800b052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b056:	2b00      	cmp	r3, #0
 800b058:	d003      	beq.n	800b062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f936 	bl	800b2cc <HAL_TIM_IC_CaptureCallback>
 800b060:	e005      	b.n	800b06e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f929 	bl	800b2ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f938 	bl	800b2de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	f003 0301 	and.w	r3, r3, #1
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d10e      	bne.n	800b0a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d107      	bne.n	800b0a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f06f 0201 	mvn.w	r2, #1
 800b098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7fc fd62 	bl	8007b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0aa:	2b80      	cmp	r3, #128	; 0x80
 800b0ac:	d10e      	bne.n	800b0cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0b8:	2b80      	cmp	r3, #128	; 0x80
 800b0ba:	d107      	bne.n	800b0cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b0c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 faa1 	bl	800b60e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0d6:	2b40      	cmp	r3, #64	; 0x40
 800b0d8:	d10e      	bne.n	800b0f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e4:	2b40      	cmp	r3, #64	; 0x40
 800b0e6:	d107      	bne.n	800b0f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b0f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f8fc 	bl	800b2f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	f003 0320 	and.w	r3, r3, #32
 800b102:	2b20      	cmp	r3, #32
 800b104:	d10e      	bne.n	800b124 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	f003 0320 	and.w	r3, r3, #32
 800b110:	2b20      	cmp	r3, #32
 800b112:	d107      	bne.n	800b124 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f06f 0220 	mvn.w	r2, #32
 800b11c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fa6c 	bl	800b5fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b124:	bf00      	nop
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b136:	2300      	movs	r3, #0
 800b138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b140:	2b01      	cmp	r3, #1
 800b142:	d101      	bne.n	800b148 <HAL_TIM_ConfigClockSource+0x1c>
 800b144:	2302      	movs	r3, #2
 800b146:	e0b4      	b.n	800b2b2 <HAL_TIM_ConfigClockSource+0x186>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2202      	movs	r2, #2
 800b154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b16e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b180:	d03e      	beq.n	800b200 <HAL_TIM_ConfigClockSource+0xd4>
 800b182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b186:	f200 8087 	bhi.w	800b298 <HAL_TIM_ConfigClockSource+0x16c>
 800b18a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b18e:	f000 8086 	beq.w	800b29e <HAL_TIM_ConfigClockSource+0x172>
 800b192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b196:	d87f      	bhi.n	800b298 <HAL_TIM_ConfigClockSource+0x16c>
 800b198:	2b70      	cmp	r3, #112	; 0x70
 800b19a:	d01a      	beq.n	800b1d2 <HAL_TIM_ConfigClockSource+0xa6>
 800b19c:	2b70      	cmp	r3, #112	; 0x70
 800b19e:	d87b      	bhi.n	800b298 <HAL_TIM_ConfigClockSource+0x16c>
 800b1a0:	2b60      	cmp	r3, #96	; 0x60
 800b1a2:	d050      	beq.n	800b246 <HAL_TIM_ConfigClockSource+0x11a>
 800b1a4:	2b60      	cmp	r3, #96	; 0x60
 800b1a6:	d877      	bhi.n	800b298 <HAL_TIM_ConfigClockSource+0x16c>
 800b1a8:	2b50      	cmp	r3, #80	; 0x50
 800b1aa:	d03c      	beq.n	800b226 <HAL_TIM_ConfigClockSource+0xfa>
 800b1ac:	2b50      	cmp	r3, #80	; 0x50
 800b1ae:	d873      	bhi.n	800b298 <HAL_TIM_ConfigClockSource+0x16c>
 800b1b0:	2b40      	cmp	r3, #64	; 0x40
 800b1b2:	d058      	beq.n	800b266 <HAL_TIM_ConfigClockSource+0x13a>
 800b1b4:	2b40      	cmp	r3, #64	; 0x40
 800b1b6:	d86f      	bhi.n	800b298 <HAL_TIM_ConfigClockSource+0x16c>
 800b1b8:	2b30      	cmp	r3, #48	; 0x30
 800b1ba:	d064      	beq.n	800b286 <HAL_TIM_ConfigClockSource+0x15a>
 800b1bc:	2b30      	cmp	r3, #48	; 0x30
 800b1be:	d86b      	bhi.n	800b298 <HAL_TIM_ConfigClockSource+0x16c>
 800b1c0:	2b20      	cmp	r3, #32
 800b1c2:	d060      	beq.n	800b286 <HAL_TIM_ConfigClockSource+0x15a>
 800b1c4:	2b20      	cmp	r3, #32
 800b1c6:	d867      	bhi.n	800b298 <HAL_TIM_ConfigClockSource+0x16c>
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d05c      	beq.n	800b286 <HAL_TIM_ConfigClockSource+0x15a>
 800b1cc:	2b10      	cmp	r3, #16
 800b1ce:	d05a      	beq.n	800b286 <HAL_TIM_ConfigClockSource+0x15a>
 800b1d0:	e062      	b.n	800b298 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6818      	ldr	r0, [r3, #0]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	6899      	ldr	r1, [r3, #8]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	685a      	ldr	r2, [r3, #4]
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	f000 f980 	bl	800b4e6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b1f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	609a      	str	r2, [r3, #8]
      break;
 800b1fe:	e04f      	b.n	800b2a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6818      	ldr	r0, [r3, #0]
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	6899      	ldr	r1, [r3, #8]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	f000 f969 	bl	800b4e6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	689a      	ldr	r2, [r3, #8]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b222:	609a      	str	r2, [r3, #8]
      break;
 800b224:	e03c      	b.n	800b2a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6818      	ldr	r0, [r3, #0]
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	6859      	ldr	r1, [r3, #4]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	461a      	mov	r2, r3
 800b234:	f000 f8e0 	bl	800b3f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2150      	movs	r1, #80	; 0x50
 800b23e:	4618      	mov	r0, r3
 800b240:	f000 f937 	bl	800b4b2 <TIM_ITRx_SetConfig>
      break;
 800b244:	e02c      	b.n	800b2a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6818      	ldr	r0, [r3, #0]
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	6859      	ldr	r1, [r3, #4]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	461a      	mov	r2, r3
 800b254:	f000 f8fe 	bl	800b454 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2160      	movs	r1, #96	; 0x60
 800b25e:	4618      	mov	r0, r3
 800b260:	f000 f927 	bl	800b4b2 <TIM_ITRx_SetConfig>
      break;
 800b264:	e01c      	b.n	800b2a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6818      	ldr	r0, [r3, #0]
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	6859      	ldr	r1, [r3, #4]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	461a      	mov	r2, r3
 800b274:	f000 f8c0 	bl	800b3f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2140      	movs	r1, #64	; 0x40
 800b27e:	4618      	mov	r0, r3
 800b280:	f000 f917 	bl	800b4b2 <TIM_ITRx_SetConfig>
      break;
 800b284:	e00c      	b.n	800b2a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4619      	mov	r1, r3
 800b290:	4610      	mov	r0, r2
 800b292:	f000 f90e 	bl	800b4b2 <TIM_ITRx_SetConfig>
      break;
 800b296:	e003      	b.n	800b2a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	73fb      	strb	r3, [r7, #15]
      break;
 800b29c:	e000      	b.n	800b2a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b29e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b083      	sub	sp, #12
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2c2:	bf00      	nop
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bc80      	pop	{r7}
 800b2ca:	4770      	bx	lr

0800b2cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2d4:	bf00      	nop
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bc80      	pop	{r7}
 800b2dc:	4770      	bx	lr

0800b2de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b083      	sub	sp, #12
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2e6:	bf00      	nop
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bc80      	pop	{r7}
 800b2ee:	4770      	bx	lr

0800b2f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2f8:	bf00      	nop
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bc80      	pop	{r7}
 800b300:	4770      	bx	lr
	...

0800b304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a33      	ldr	r2, [pc, #204]	; (800b3e4 <TIM_Base_SetConfig+0xe0>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d013      	beq.n	800b344 <TIM_Base_SetConfig+0x40>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a32      	ldr	r2, [pc, #200]	; (800b3e8 <TIM_Base_SetConfig+0xe4>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d00f      	beq.n	800b344 <TIM_Base_SetConfig+0x40>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b32a:	d00b      	beq.n	800b344 <TIM_Base_SetConfig+0x40>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a2f      	ldr	r2, [pc, #188]	; (800b3ec <TIM_Base_SetConfig+0xe8>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d007      	beq.n	800b344 <TIM_Base_SetConfig+0x40>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a2e      	ldr	r2, [pc, #184]	; (800b3f0 <TIM_Base_SetConfig+0xec>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d003      	beq.n	800b344 <TIM_Base_SetConfig+0x40>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a2d      	ldr	r2, [pc, #180]	; (800b3f4 <TIM_Base_SetConfig+0xf0>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d108      	bne.n	800b356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b34a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	4313      	orrs	r3, r2
 800b354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a22      	ldr	r2, [pc, #136]	; (800b3e4 <TIM_Base_SetConfig+0xe0>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d013      	beq.n	800b386 <TIM_Base_SetConfig+0x82>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a21      	ldr	r2, [pc, #132]	; (800b3e8 <TIM_Base_SetConfig+0xe4>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d00f      	beq.n	800b386 <TIM_Base_SetConfig+0x82>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b36c:	d00b      	beq.n	800b386 <TIM_Base_SetConfig+0x82>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a1e      	ldr	r2, [pc, #120]	; (800b3ec <TIM_Base_SetConfig+0xe8>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d007      	beq.n	800b386 <TIM_Base_SetConfig+0x82>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a1d      	ldr	r2, [pc, #116]	; (800b3f0 <TIM_Base_SetConfig+0xec>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d003      	beq.n	800b386 <TIM_Base_SetConfig+0x82>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a1c      	ldr	r2, [pc, #112]	; (800b3f4 <TIM_Base_SetConfig+0xf0>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d108      	bne.n	800b398 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b38c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	4313      	orrs	r3, r2
 800b396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	689a      	ldr	r2, [r3, #8]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4a09      	ldr	r2, [pc, #36]	; (800b3e4 <TIM_Base_SetConfig+0xe0>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d003      	beq.n	800b3cc <TIM_Base_SetConfig+0xc8>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a08      	ldr	r2, [pc, #32]	; (800b3e8 <TIM_Base_SetConfig+0xe4>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d103      	bne.n	800b3d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	691a      	ldr	r2, [r3, #16]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	615a      	str	r2, [r3, #20]
}
 800b3da:	bf00      	nop
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bc80      	pop	{r7}
 800b3e2:	4770      	bx	lr
 800b3e4:	40012c00 	.word	0x40012c00
 800b3e8:	40013400 	.word	0x40013400
 800b3ec:	40000400 	.word	0x40000400
 800b3f0:	40000800 	.word	0x40000800
 800b3f4:	40000c00 	.word	0x40000c00

0800b3f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6a1b      	ldr	r3, [r3, #32]
 800b408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6a1b      	ldr	r3, [r3, #32]
 800b40e:	f023 0201 	bic.w	r2, r3, #1
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	011b      	lsls	r3, r3, #4
 800b428:	693a      	ldr	r2, [r7, #16]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f023 030a 	bic.w	r3, r3, #10
 800b434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	621a      	str	r2, [r3, #32]
}
 800b44a:	bf00      	nop
 800b44c:	371c      	adds	r7, #28
 800b44e:	46bd      	mov	sp, r7
 800b450:	bc80      	pop	{r7}
 800b452:	4770      	bx	lr

0800b454 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b454:	b480      	push	{r7}
 800b456:	b087      	sub	sp, #28
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6a1b      	ldr	r3, [r3, #32]
 800b464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6a1b      	ldr	r3, [r3, #32]
 800b46a:	f023 0210 	bic.w	r2, r3, #16
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b47e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	031b      	lsls	r3, r3, #12
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	4313      	orrs	r3, r2
 800b488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b490:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	011b      	lsls	r3, r3, #4
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	4313      	orrs	r3, r2
 800b49a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	697a      	ldr	r2, [r7, #20]
 800b4a6:	621a      	str	r2, [r3, #32]
}
 800b4a8:	bf00      	nop
 800b4aa:	371c      	adds	r7, #28
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bc80      	pop	{r7}
 800b4b0:	4770      	bx	lr

0800b4b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b4b2:	b480      	push	{r7}
 800b4b4:	b085      	sub	sp, #20
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4ca:	683a      	ldr	r2, [r7, #0]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	f043 0307 	orr.w	r3, r3, #7
 800b4d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	609a      	str	r2, [r3, #8]
}
 800b4dc:	bf00      	nop
 800b4de:	3714      	adds	r7, #20
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bc80      	pop	{r7}
 800b4e4:	4770      	bx	lr

0800b4e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4e6:	b480      	push	{r7}
 800b4e8:	b087      	sub	sp, #28
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	60f8      	str	r0, [r7, #12]
 800b4ee:	60b9      	str	r1, [r7, #8]
 800b4f0:	607a      	str	r2, [r7, #4]
 800b4f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b500:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	021a      	lsls	r2, r3, #8
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	431a      	orrs	r2, r3
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	697a      	ldr	r2, [r7, #20]
 800b510:	4313      	orrs	r3, r2
 800b512:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	609a      	str	r2, [r3, #8]
}
 800b51a:	bf00      	nop
 800b51c:	371c      	adds	r7, #28
 800b51e:	46bd      	mov	sp, r7
 800b520:	bc80      	pop	{r7}
 800b522:	4770      	bx	lr

0800b524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b534:	2b01      	cmp	r3, #1
 800b536:	d101      	bne.n	800b53c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b538:	2302      	movs	r3, #2
 800b53a:	e050      	b.n	800b5de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2202      	movs	r2, #2
 800b548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a1b      	ldr	r2, [pc, #108]	; (800b5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d018      	beq.n	800b5b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a19      	ldr	r2, [pc, #100]	; (800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d013      	beq.n	800b5b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b592:	d00e      	beq.n	800b5b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a15      	ldr	r2, [pc, #84]	; (800b5f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d009      	beq.n	800b5b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a14      	ldr	r2, [pc, #80]	; (800b5f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d004      	beq.n	800b5b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a12      	ldr	r2, [pc, #72]	; (800b5f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d10c      	bne.n	800b5cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	68ba      	ldr	r2, [r7, #8]
 800b5ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bc80      	pop	{r7}
 800b5e6:	4770      	bx	lr
 800b5e8:	40012c00 	.word	0x40012c00
 800b5ec:	40013400 	.word	0x40013400
 800b5f0:	40000400 	.word	0x40000400
 800b5f4:	40000800 	.word	0x40000800
 800b5f8:	40000c00 	.word	0x40000c00

0800b5fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	bc80      	pop	{r7}
 800b60c:	4770      	bx	lr

0800b60e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b60e:	b480      	push	{r7}
 800b610:	b083      	sub	sp, #12
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b616:	bf00      	nop
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bc80      	pop	{r7}
 800b61e:	4770      	bx	lr

0800b620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d101      	bne.n	800b632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	e042      	b.n	800b6b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d106      	bne.n	800b64c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7fc fe1a 	bl	8008280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2224      	movs	r2, #36	; 0x24
 800b650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68da      	ldr	r2, [r3, #12]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fcb5 	bl	800bfd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	691a      	ldr	r2, [r3, #16]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	695a      	ldr	r2, [r3, #20]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68da      	ldr	r2, [r3, #12]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2220      	movs	r2, #32
 800b6a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2220      	movs	r2, #32
 800b6ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b6b6:	2300      	movs	r3, #0
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	2b20      	cmp	r3, #32
 800b6d8:	d121      	bne.n	800b71e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d002      	beq.n	800b6e6 <HAL_UART_Transmit_IT+0x26>
 800b6e0:	88fb      	ldrh	r3, [r7, #6]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e01a      	b.n	800b720 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	88fa      	ldrh	r2, [r7, #6]
 800b6f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	88fa      	ldrh	r2, [r7, #6]
 800b6fa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2221      	movs	r2, #33	; 0x21
 800b706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	68da      	ldr	r2, [r3, #12]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b718:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b71a:	2300      	movs	r3, #0
 800b71c:	e000      	b.n	800b720 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b71e:	2302      	movs	r3, #2
  }
}
 800b720:	4618      	mov	r0, r3
 800b722:	3714      	adds	r7, #20
 800b724:	46bd      	mov	sp, r7
 800b726:	bc80      	pop	{r7}
 800b728:	4770      	bx	lr
	...

0800b72c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b0ba      	sub	sp, #232	; 0xe8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	695b      	ldr	r3, [r3, #20]
 800b74e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b752:	2300      	movs	r3, #0
 800b754:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b758:	2300      	movs	r3, #0
 800b75a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b762:	f003 030f 	and.w	r3, r3, #15
 800b766:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b76a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10f      	bne.n	800b792 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b776:	f003 0320 	and.w	r3, r3, #32
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d009      	beq.n	800b792 <HAL_UART_IRQHandler+0x66>
 800b77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b782:	f003 0320 	and.w	r3, r3, #32
 800b786:	2b00      	cmp	r3, #0
 800b788:	d003      	beq.n	800b792 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 fb63 	bl	800be56 <UART_Receive_IT>
      return;
 800b790:	e25b      	b.n	800bc4a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b792:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b796:	2b00      	cmp	r3, #0
 800b798:	f000 80de 	beq.w	800b958 <HAL_UART_IRQHandler+0x22c>
 800b79c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7a0:	f003 0301 	and.w	r3, r3, #1
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d106      	bne.n	800b7b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b7a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f000 80d1 	beq.w	800b958 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b7b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00b      	beq.n	800b7da <HAL_UART_IRQHandler+0xae>
 800b7c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d005      	beq.n	800b7da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7d2:	f043 0201 	orr.w	r2, r3, #1
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b7da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7de:	f003 0304 	and.w	r3, r3, #4
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00b      	beq.n	800b7fe <HAL_UART_IRQHandler+0xd2>
 800b7e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d005      	beq.n	800b7fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7f6:	f043 0202 	orr.w	r2, r3, #2
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b7fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b802:	f003 0302 	and.w	r3, r3, #2
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00b      	beq.n	800b822 <HAL_UART_IRQHandler+0xf6>
 800b80a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	d005      	beq.n	800b822 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b81a:	f043 0204 	orr.w	r2, r3, #4
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b826:	f003 0308 	and.w	r3, r3, #8
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d011      	beq.n	800b852 <HAL_UART_IRQHandler+0x126>
 800b82e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b832:	f003 0320 	and.w	r3, r3, #32
 800b836:	2b00      	cmp	r3, #0
 800b838:	d105      	bne.n	800b846 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b83a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b83e:	f003 0301 	and.w	r3, r3, #1
 800b842:	2b00      	cmp	r3, #0
 800b844:	d005      	beq.n	800b852 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b84a:	f043 0208 	orr.w	r2, r3, #8
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b856:	2b00      	cmp	r3, #0
 800b858:	f000 81f2 	beq.w	800bc40 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b85c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b860:	f003 0320 	and.w	r3, r3, #32
 800b864:	2b00      	cmp	r3, #0
 800b866:	d008      	beq.n	800b87a <HAL_UART_IRQHandler+0x14e>
 800b868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b86c:	f003 0320 	and.w	r3, r3, #32
 800b870:	2b00      	cmp	r3, #0
 800b872:	d002      	beq.n	800b87a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 faee 	bl	800be56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	695b      	ldr	r3, [r3, #20]
 800b880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b884:	2b00      	cmp	r3, #0
 800b886:	bf14      	ite	ne
 800b888:	2301      	movne	r3, #1
 800b88a:	2300      	moveq	r3, #0
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b896:	f003 0308 	and.w	r3, r3, #8
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d103      	bne.n	800b8a6 <HAL_UART_IRQHandler+0x17a>
 800b89e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d04f      	beq.n	800b946 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 f9f8 	bl	800bc9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d041      	beq.n	800b93e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	3314      	adds	r3, #20
 800b8c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b8c8:	e853 3f00 	ldrex	r3, [r3]
 800b8cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b8d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b8d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	3314      	adds	r3, #20
 800b8e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b8e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b8ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b8f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b8f6:	e841 2300 	strex	r3, r2, [r1]
 800b8fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b8fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1d9      	bne.n	800b8ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d013      	beq.n	800b936 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b912:	4a7e      	ldr	r2, [pc, #504]	; (800bb0c <HAL_UART_IRQHandler+0x3e0>)
 800b914:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fd f86c 	bl	80089f8 <HAL_DMA_Abort_IT>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d016      	beq.n	800b954 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b92a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b930:	4610      	mov	r0, r2
 800b932:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b934:	e00e      	b.n	800b954 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f99c 	bl	800bc74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b93c:	e00a      	b.n	800b954 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 f998 	bl	800bc74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b944:	e006      	b.n	800b954 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f994 	bl	800bc74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b952:	e175      	b.n	800bc40 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b954:	bf00      	nop
    return;
 800b956:	e173      	b.n	800bc40 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	f040 814f 	bne.w	800bc00 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b966:	f003 0310 	and.w	r3, r3, #16
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 8148 	beq.w	800bc00 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b974:	f003 0310 	and.w	r3, r3, #16
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f000 8141 	beq.w	800bc00 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b97e:	2300      	movs	r3, #0
 800b980:	60bb      	str	r3, [r7, #8]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	60bb      	str	r3, [r7, #8]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	60bb      	str	r3, [r7, #8]
 800b992:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	695b      	ldr	r3, [r3, #20]
 800b99a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f000 80b6 	beq.w	800bb10 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b9b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f000 8145 	beq.w	800bc44 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b9be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	f080 813e 	bcs.w	800bc44 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b9ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	2b20      	cmp	r3, #32
 800b9d8:	f000 8088 	beq.w	800baec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	330c      	adds	r3, #12
 800b9e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9ea:	e853 3f00 	ldrex	r3, [r3]
 800b9ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b9f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b9f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	330c      	adds	r3, #12
 800ba04:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ba08:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ba0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba10:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ba14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba18:	e841 2300 	strex	r3, r2, [r1]
 800ba1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ba20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1d9      	bne.n	800b9dc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	3314      	adds	r3, #20
 800ba2e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba32:	e853 3f00 	ldrex	r3, [r3]
 800ba36:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ba38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba3a:	f023 0301 	bic.w	r3, r3, #1
 800ba3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3314      	adds	r3, #20
 800ba48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ba4c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ba50:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba52:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ba54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ba58:	e841 2300 	strex	r3, r2, [r1]
 800ba5c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ba5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1e1      	bne.n	800ba28 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	3314      	adds	r3, #20
 800ba6a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba6e:	e853 3f00 	ldrex	r3, [r3]
 800ba72:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ba74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	3314      	adds	r3, #20
 800ba84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba88:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ba8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ba90:	e841 2300 	strex	r3, r2, [r1]
 800ba94:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ba96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1e3      	bne.n	800ba64 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2220      	movs	r2, #32
 800baa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	330c      	adds	r3, #12
 800bab0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bab4:	e853 3f00 	ldrex	r3, [r3]
 800bab8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800baba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800babc:	f023 0310 	bic.w	r3, r3, #16
 800bac0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	330c      	adds	r3, #12
 800baca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bace:	65ba      	str	r2, [r7, #88]	; 0x58
 800bad0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bad4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bad6:	e841 2300 	strex	r3, r2, [r1]
 800bada:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800badc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1e3      	bne.n	800baaa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fc ff4b 	bl	8008982 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2202      	movs	r2, #2
 800baf0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	4619      	mov	r1, r3
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f8bf 	bl	800bc86 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb08:	e09c      	b.n	800bc44 <HAL_UART_IRQHandler+0x518>
 800bb0a:	bf00      	nop
 800bb0c:	0800bd61 	.word	0x0800bd61
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 808e 	beq.w	800bc48 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bb2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f000 8089 	beq.w	800bc48 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	330c      	adds	r3, #12
 800bb3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb40:	e853 3f00 	ldrex	r3, [r3]
 800bb44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	330c      	adds	r3, #12
 800bb56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bb5a:	647a      	str	r2, [r7, #68]	; 0x44
 800bb5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb62:	e841 2300 	strex	r3, r2, [r1]
 800bb66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1e3      	bne.n	800bb36 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	3314      	adds	r3, #20
 800bb74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb78:	e853 3f00 	ldrex	r3, [r3]
 800bb7c:	623b      	str	r3, [r7, #32]
   return(result);
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	f023 0301 	bic.w	r3, r3, #1
 800bb84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	3314      	adds	r3, #20
 800bb8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bb92:	633a      	str	r2, [r7, #48]	; 0x30
 800bb94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb9a:	e841 2300 	strex	r3, r2, [r1]
 800bb9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1e3      	bne.n	800bb6e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2220      	movs	r2, #32
 800bbaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	330c      	adds	r3, #12
 800bbba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	e853 3f00 	ldrex	r3, [r3]
 800bbc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f023 0310 	bic.w	r3, r3, #16
 800bbca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	330c      	adds	r3, #12
 800bbd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bbd8:	61fa      	str	r2, [r7, #28]
 800bbda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbdc:	69b9      	ldr	r1, [r7, #24]
 800bbde:	69fa      	ldr	r2, [r7, #28]
 800bbe0:	e841 2300 	strex	r3, r2, [r1]
 800bbe4:	617b      	str	r3, [r7, #20]
   return(result);
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1e3      	bne.n	800bbb4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2202      	movs	r2, #2
 800bbf0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bbf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f844 	bl	800bc86 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bbfe:	e023      	b.n	800bc48 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bc00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d009      	beq.n	800bc20 <HAL_UART_IRQHandler+0x4f4>
 800bc0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d003      	beq.n	800bc20 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 f8b5 	bl	800bd88 <UART_Transmit_IT>
    return;
 800bc1e:	e014      	b.n	800bc4a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bc20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00e      	beq.n	800bc4a <HAL_UART_IRQHandler+0x51e>
 800bc2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d008      	beq.n	800bc4a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 f8f4 	bl	800be26 <UART_EndTransmit_IT>
    return;
 800bc3e:	e004      	b.n	800bc4a <HAL_UART_IRQHandler+0x51e>
    return;
 800bc40:	bf00      	nop
 800bc42:	e002      	b.n	800bc4a <HAL_UART_IRQHandler+0x51e>
      return;
 800bc44:	bf00      	nop
 800bc46:	e000      	b.n	800bc4a <HAL_UART_IRQHandler+0x51e>
      return;
 800bc48:	bf00      	nop
  }
}
 800bc4a:	37e8      	adds	r7, #232	; 0xe8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bc58:	bf00      	nop
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bc80      	pop	{r7}
 800bc60:	4770      	bx	lr

0800bc62 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bc6a:	bf00      	nop
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bc80      	pop	{r7}
 800bc72:	4770      	bx	lr

0800bc74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bc7c:	bf00      	nop
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bc80      	pop	{r7}
 800bc84:	4770      	bx	lr

0800bc86 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc86:	b480      	push	{r7}
 800bc88:	b083      	sub	sp, #12
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc92:	bf00      	nop
 800bc94:	370c      	adds	r7, #12
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bc80      	pop	{r7}
 800bc9a:	4770      	bx	lr

0800bc9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b095      	sub	sp, #84	; 0x54
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	330c      	adds	r3, #12
 800bcaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcae:	e853 3f00 	ldrex	r3, [r3]
 800bcb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bcba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	330c      	adds	r3, #12
 800bcc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bcc4:	643a      	str	r2, [r7, #64]	; 0x40
 800bcc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bccc:	e841 2300 	strex	r3, r2, [r1]
 800bcd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d1e5      	bne.n	800bca4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	3314      	adds	r3, #20
 800bcde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce0:	6a3b      	ldr	r3, [r7, #32]
 800bce2:	e853 3f00 	ldrex	r3, [r3]
 800bce6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	f023 0301 	bic.w	r3, r3, #1
 800bcee:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	3314      	adds	r3, #20
 800bcf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bcfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd00:	e841 2300 	strex	r3, r2, [r1]
 800bd04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1e5      	bne.n	800bcd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d119      	bne.n	800bd48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	330c      	adds	r3, #12
 800bd1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	e853 3f00 	ldrex	r3, [r3]
 800bd22:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	f023 0310 	bic.w	r3, r3, #16
 800bd2a:	647b      	str	r3, [r7, #68]	; 0x44
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	330c      	adds	r3, #12
 800bd32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd34:	61ba      	str	r2, [r7, #24]
 800bd36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd38:	6979      	ldr	r1, [r7, #20]
 800bd3a:	69ba      	ldr	r2, [r7, #24]
 800bd3c:	e841 2300 	strex	r3, r2, [r1]
 800bd40:	613b      	str	r3, [r7, #16]
   return(result);
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1e5      	bne.n	800bd14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2220      	movs	r2, #32
 800bd4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bd56:	bf00      	nop
 800bd58:	3754      	adds	r7, #84	; 0x54
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bc80      	pop	{r7}
 800bd5e:	4770      	bx	lr

0800bd60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2200      	movs	r2, #0
 800bd72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	f7ff ff7a 	bl	800bc74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd80:	bf00      	nop
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	2b21      	cmp	r3, #33	; 0x21
 800bd9a:	d13e      	bne.n	800be1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bda4:	d114      	bne.n	800bdd0 <UART_Transmit_IT+0x48>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d110      	bne.n	800bdd0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	881b      	ldrh	r3, [r3, #0]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6a1b      	ldr	r3, [r3, #32]
 800bdc8:	1c9a      	adds	r2, r3, #2
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	621a      	str	r2, [r3, #32]
 800bdce:	e008      	b.n	800bde2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a1b      	ldr	r3, [r3, #32]
 800bdd4:	1c59      	adds	r1, r3, #1
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	6211      	str	r1, [r2, #32]
 800bdda:	781a      	ldrb	r2, [r3, #0]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	3b01      	subs	r3, #1
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	4619      	mov	r1, r3
 800bdf0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d10f      	bne.n	800be16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68da      	ldr	r2, [r3, #12]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68da      	ldr	r2, [r3, #12]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	e000      	b.n	800be1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800be1a:	2302      	movs	r3, #2
  }
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3714      	adds	r7, #20
 800be20:	46bd      	mov	sp, r7
 800be22:	bc80      	pop	{r7}
 800be24:	4770      	bx	lr

0800be26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b082      	sub	sp, #8
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	68da      	ldr	r2, [r3, #12]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2220      	movs	r2, #32
 800be42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f7ff ff02 	bl	800bc50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3708      	adds	r7, #8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800be56:	b580      	push	{r7, lr}
 800be58:	b08c      	sub	sp, #48	; 0x30
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be64:	b2db      	uxtb	r3, r3
 800be66:	2b22      	cmp	r3, #34	; 0x22
 800be68:	f040 80ae 	bne.w	800bfc8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be74:	d117      	bne.n	800bea6 <UART_Receive_IT+0x50>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d113      	bne.n	800bea6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800be7e:	2300      	movs	r3, #0
 800be80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	b29b      	uxth	r3, r3
 800be90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be94:	b29a      	uxth	r2, r3
 800be96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be9e:	1c9a      	adds	r2, r3, #2
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	629a      	str	r2, [r3, #40]	; 0x28
 800bea4:	e026      	b.n	800bef4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800beac:	2300      	movs	r3, #0
 800beae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beb8:	d007      	beq.n	800beca <UART_Receive_IT+0x74>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10a      	bne.n	800bed8 <UART_Receive_IT+0x82>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d106      	bne.n	800bed8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	b2da      	uxtb	r2, r3
 800bed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed4:	701a      	strb	r2, [r3, #0]
 800bed6:	e008      	b.n	800beea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beee:	1c5a      	adds	r2, r3, #1
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bef8:	b29b      	uxth	r3, r3
 800befa:	3b01      	subs	r3, #1
 800befc:	b29b      	uxth	r3, r3
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	4619      	mov	r1, r3
 800bf02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d15d      	bne.n	800bfc4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68da      	ldr	r2, [r3, #12]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f022 0220 	bic.w	r2, r2, #32
 800bf16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	68da      	ldr	r2, [r3, #12]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	695a      	ldr	r2, [r3, #20]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f022 0201 	bic.w	r2, r2, #1
 800bf36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2220      	movs	r2, #32
 800bf3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d135      	bne.n	800bfba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	330c      	adds	r3, #12
 800bf5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	e853 3f00 	ldrex	r3, [r3]
 800bf62:	613b      	str	r3, [r7, #16]
   return(result);
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	f023 0310 	bic.w	r3, r3, #16
 800bf6a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	330c      	adds	r3, #12
 800bf72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf74:	623a      	str	r2, [r7, #32]
 800bf76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf78:	69f9      	ldr	r1, [r7, #28]
 800bf7a:	6a3a      	ldr	r2, [r7, #32]
 800bf7c:	e841 2300 	strex	r3, r2, [r1]
 800bf80:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1e5      	bne.n	800bf54 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f003 0310 	and.w	r3, r3, #16
 800bf92:	2b10      	cmp	r3, #16
 800bf94:	d10a      	bne.n	800bfac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf96:	2300      	movs	r3, #0
 800bf98:	60fb      	str	r3, [r7, #12]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	60fb      	str	r3, [r7, #12]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	60fb      	str	r3, [r7, #12]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7ff fe67 	bl	800bc86 <HAL_UARTEx_RxEventCallback>
 800bfb8:	e002      	b.n	800bfc0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7ff fe51 	bl	800bc62 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	e002      	b.n	800bfca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	e000      	b.n	800bfca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bfc8:	2302      	movs	r3, #2
  }
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3730      	adds	r7, #48	; 0x30
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
	...

0800bfd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68da      	ldr	r2, [r3, #12]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	430a      	orrs	r2, r1
 800bff0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	689a      	ldr	r2, [r3, #8]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	431a      	orrs	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	695b      	ldr	r3, [r3, #20]
 800c000:	4313      	orrs	r3, r2
 800c002:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c00e:	f023 030c 	bic.w	r3, r3, #12
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	6812      	ldr	r2, [r2, #0]
 800c016:	68b9      	ldr	r1, [r7, #8]
 800c018:	430b      	orrs	r3, r1
 800c01a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	699a      	ldr	r2, [r3, #24]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	430a      	orrs	r2, r1
 800c030:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a2c      	ldr	r2, [pc, #176]	; (800c0e8 <UART_SetConfig+0x114>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d103      	bne.n	800c044 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c03c:	f7fe fe8c 	bl	800ad58 <HAL_RCC_GetPCLK2Freq>
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	e002      	b.n	800c04a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c044:	f7fe fe74 	bl	800ad30 <HAL_RCC_GetPCLK1Freq>
 800c048:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	4613      	mov	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	009a      	lsls	r2, r3, #2
 800c054:	441a      	add	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c060:	4a22      	ldr	r2, [pc, #136]	; (800c0ec <UART_SetConfig+0x118>)
 800c062:	fba2 2303 	umull	r2, r3, r2, r3
 800c066:	095b      	lsrs	r3, r3, #5
 800c068:	0119      	lsls	r1, r3, #4
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	4613      	mov	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	009a      	lsls	r2, r3, #2
 800c074:	441a      	add	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c080:	4b1a      	ldr	r3, [pc, #104]	; (800c0ec <UART_SetConfig+0x118>)
 800c082:	fba3 0302 	umull	r0, r3, r3, r2
 800c086:	095b      	lsrs	r3, r3, #5
 800c088:	2064      	movs	r0, #100	; 0x64
 800c08a:	fb00 f303 	mul.w	r3, r0, r3
 800c08e:	1ad3      	subs	r3, r2, r3
 800c090:	011b      	lsls	r3, r3, #4
 800c092:	3332      	adds	r3, #50	; 0x32
 800c094:	4a15      	ldr	r2, [pc, #84]	; (800c0ec <UART_SetConfig+0x118>)
 800c096:	fba2 2303 	umull	r2, r3, r2, r3
 800c09a:	095b      	lsrs	r3, r3, #5
 800c09c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0a0:	4419      	add	r1, r3
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009a      	lsls	r2, r3, #2
 800c0ac:	441a      	add	r2, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c0b8:	4b0c      	ldr	r3, [pc, #48]	; (800c0ec <UART_SetConfig+0x118>)
 800c0ba:	fba3 0302 	umull	r0, r3, r3, r2
 800c0be:	095b      	lsrs	r3, r3, #5
 800c0c0:	2064      	movs	r0, #100	; 0x64
 800c0c2:	fb00 f303 	mul.w	r3, r0, r3
 800c0c6:	1ad3      	subs	r3, r2, r3
 800c0c8:	011b      	lsls	r3, r3, #4
 800c0ca:	3332      	adds	r3, #50	; 0x32
 800c0cc:	4a07      	ldr	r2, [pc, #28]	; (800c0ec <UART_SetConfig+0x118>)
 800c0ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c0d2:	095b      	lsrs	r3, r3, #5
 800c0d4:	f003 020f 	and.w	r2, r3, #15
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	440a      	add	r2, r1
 800c0de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c0e0:	bf00      	nop
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	40013800 	.word	0x40013800
 800c0ec:	51eb851f 	.word	0x51eb851f

0800c0f0 <__errno>:
 800c0f0:	4b01      	ldr	r3, [pc, #4]	; (800c0f8 <__errno+0x8>)
 800c0f2:	6818      	ldr	r0, [r3, #0]
 800c0f4:	4770      	bx	lr
 800c0f6:	bf00      	nop
 800c0f8:	200000ac 	.word	0x200000ac

0800c0fc <__libc_init_array>:
 800c0fc:	b570      	push	{r4, r5, r6, lr}
 800c0fe:	2600      	movs	r6, #0
 800c100:	4d0c      	ldr	r5, [pc, #48]	; (800c134 <__libc_init_array+0x38>)
 800c102:	4c0d      	ldr	r4, [pc, #52]	; (800c138 <__libc_init_array+0x3c>)
 800c104:	1b64      	subs	r4, r4, r5
 800c106:	10a4      	asrs	r4, r4, #2
 800c108:	42a6      	cmp	r6, r4
 800c10a:	d109      	bne.n	800c120 <__libc_init_array+0x24>
 800c10c:	f000 fd18 	bl	800cb40 <_init>
 800c110:	2600      	movs	r6, #0
 800c112:	4d0a      	ldr	r5, [pc, #40]	; (800c13c <__libc_init_array+0x40>)
 800c114:	4c0a      	ldr	r4, [pc, #40]	; (800c140 <__libc_init_array+0x44>)
 800c116:	1b64      	subs	r4, r4, r5
 800c118:	10a4      	asrs	r4, r4, #2
 800c11a:	42a6      	cmp	r6, r4
 800c11c:	d105      	bne.n	800c12a <__libc_init_array+0x2e>
 800c11e:	bd70      	pop	{r4, r5, r6, pc}
 800c120:	f855 3b04 	ldr.w	r3, [r5], #4
 800c124:	4798      	blx	r3
 800c126:	3601      	adds	r6, #1
 800c128:	e7ee      	b.n	800c108 <__libc_init_array+0xc>
 800c12a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c12e:	4798      	blx	r3
 800c130:	3601      	adds	r6, #1
 800c132:	e7f2      	b.n	800c11a <__libc_init_array+0x1e>
 800c134:	0800db34 	.word	0x0800db34
 800c138:	0800db34 	.word	0x0800db34
 800c13c:	0800db34 	.word	0x0800db34
 800c140:	0800db38 	.word	0x0800db38

0800c144 <__itoa>:
 800c144:	1e93      	subs	r3, r2, #2
 800c146:	2b22      	cmp	r3, #34	; 0x22
 800c148:	b510      	push	{r4, lr}
 800c14a:	460c      	mov	r4, r1
 800c14c:	d904      	bls.n	800c158 <__itoa+0x14>
 800c14e:	2300      	movs	r3, #0
 800c150:	461c      	mov	r4, r3
 800c152:	700b      	strb	r3, [r1, #0]
 800c154:	4620      	mov	r0, r4
 800c156:	bd10      	pop	{r4, pc}
 800c158:	2a0a      	cmp	r2, #10
 800c15a:	d109      	bne.n	800c170 <__itoa+0x2c>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	da07      	bge.n	800c170 <__itoa+0x2c>
 800c160:	232d      	movs	r3, #45	; 0x2d
 800c162:	700b      	strb	r3, [r1, #0]
 800c164:	2101      	movs	r1, #1
 800c166:	4240      	negs	r0, r0
 800c168:	4421      	add	r1, r4
 800c16a:	f000 f939 	bl	800c3e0 <__utoa>
 800c16e:	e7f1      	b.n	800c154 <__itoa+0x10>
 800c170:	2100      	movs	r1, #0
 800c172:	e7f9      	b.n	800c168 <__itoa+0x24>

0800c174 <itoa>:
 800c174:	f7ff bfe6 	b.w	800c144 <__itoa>

0800c178 <malloc>:
 800c178:	4b02      	ldr	r3, [pc, #8]	; (800c184 <malloc+0xc>)
 800c17a:	4601      	mov	r1, r0
 800c17c:	6818      	ldr	r0, [r3, #0]
 800c17e:	f000 b873 	b.w	800c268 <_malloc_r>
 800c182:	bf00      	nop
 800c184:	200000ac 	.word	0x200000ac

0800c188 <memset>:
 800c188:	4603      	mov	r3, r0
 800c18a:	4402      	add	r2, r0
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d100      	bne.n	800c192 <memset+0xa>
 800c190:	4770      	bx	lr
 800c192:	f803 1b01 	strb.w	r1, [r3], #1
 800c196:	e7f9      	b.n	800c18c <memset+0x4>

0800c198 <_free_r>:
 800c198:	b538      	push	{r3, r4, r5, lr}
 800c19a:	4605      	mov	r5, r0
 800c19c:	2900      	cmp	r1, #0
 800c19e:	d040      	beq.n	800c222 <_free_r+0x8a>
 800c1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1a4:	1f0c      	subs	r4, r1, #4
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	bfb8      	it	lt
 800c1aa:	18e4      	addlt	r4, r4, r3
 800c1ac:	f000 f95a 	bl	800c464 <__malloc_lock>
 800c1b0:	4a1c      	ldr	r2, [pc, #112]	; (800c224 <_free_r+0x8c>)
 800c1b2:	6813      	ldr	r3, [r2, #0]
 800c1b4:	b933      	cbnz	r3, 800c1c4 <_free_r+0x2c>
 800c1b6:	6063      	str	r3, [r4, #4]
 800c1b8:	6014      	str	r4, [r2, #0]
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1c0:	f000 b956 	b.w	800c470 <__malloc_unlock>
 800c1c4:	42a3      	cmp	r3, r4
 800c1c6:	d908      	bls.n	800c1da <_free_r+0x42>
 800c1c8:	6820      	ldr	r0, [r4, #0]
 800c1ca:	1821      	adds	r1, r4, r0
 800c1cc:	428b      	cmp	r3, r1
 800c1ce:	bf01      	itttt	eq
 800c1d0:	6819      	ldreq	r1, [r3, #0]
 800c1d2:	685b      	ldreq	r3, [r3, #4]
 800c1d4:	1809      	addeq	r1, r1, r0
 800c1d6:	6021      	streq	r1, [r4, #0]
 800c1d8:	e7ed      	b.n	800c1b6 <_free_r+0x1e>
 800c1da:	461a      	mov	r2, r3
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	b10b      	cbz	r3, 800c1e4 <_free_r+0x4c>
 800c1e0:	42a3      	cmp	r3, r4
 800c1e2:	d9fa      	bls.n	800c1da <_free_r+0x42>
 800c1e4:	6811      	ldr	r1, [r2, #0]
 800c1e6:	1850      	adds	r0, r2, r1
 800c1e8:	42a0      	cmp	r0, r4
 800c1ea:	d10b      	bne.n	800c204 <_free_r+0x6c>
 800c1ec:	6820      	ldr	r0, [r4, #0]
 800c1ee:	4401      	add	r1, r0
 800c1f0:	1850      	adds	r0, r2, r1
 800c1f2:	4283      	cmp	r3, r0
 800c1f4:	6011      	str	r1, [r2, #0]
 800c1f6:	d1e0      	bne.n	800c1ba <_free_r+0x22>
 800c1f8:	6818      	ldr	r0, [r3, #0]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	4401      	add	r1, r0
 800c1fe:	6011      	str	r1, [r2, #0]
 800c200:	6053      	str	r3, [r2, #4]
 800c202:	e7da      	b.n	800c1ba <_free_r+0x22>
 800c204:	d902      	bls.n	800c20c <_free_r+0x74>
 800c206:	230c      	movs	r3, #12
 800c208:	602b      	str	r3, [r5, #0]
 800c20a:	e7d6      	b.n	800c1ba <_free_r+0x22>
 800c20c:	6820      	ldr	r0, [r4, #0]
 800c20e:	1821      	adds	r1, r4, r0
 800c210:	428b      	cmp	r3, r1
 800c212:	bf01      	itttt	eq
 800c214:	6819      	ldreq	r1, [r3, #0]
 800c216:	685b      	ldreq	r3, [r3, #4]
 800c218:	1809      	addeq	r1, r1, r0
 800c21a:	6021      	streq	r1, [r4, #0]
 800c21c:	6063      	str	r3, [r4, #4]
 800c21e:	6054      	str	r4, [r2, #4]
 800c220:	e7cb      	b.n	800c1ba <_free_r+0x22>
 800c222:	bd38      	pop	{r3, r4, r5, pc}
 800c224:	200004a8 	.word	0x200004a8

0800c228 <sbrk_aligned>:
 800c228:	b570      	push	{r4, r5, r6, lr}
 800c22a:	4e0e      	ldr	r6, [pc, #56]	; (800c264 <sbrk_aligned+0x3c>)
 800c22c:	460c      	mov	r4, r1
 800c22e:	6831      	ldr	r1, [r6, #0]
 800c230:	4605      	mov	r5, r0
 800c232:	b911      	cbnz	r1, 800c23a <sbrk_aligned+0x12>
 800c234:	f000 f88c 	bl	800c350 <_sbrk_r>
 800c238:	6030      	str	r0, [r6, #0]
 800c23a:	4621      	mov	r1, r4
 800c23c:	4628      	mov	r0, r5
 800c23e:	f000 f887 	bl	800c350 <_sbrk_r>
 800c242:	1c43      	adds	r3, r0, #1
 800c244:	d00a      	beq.n	800c25c <sbrk_aligned+0x34>
 800c246:	1cc4      	adds	r4, r0, #3
 800c248:	f024 0403 	bic.w	r4, r4, #3
 800c24c:	42a0      	cmp	r0, r4
 800c24e:	d007      	beq.n	800c260 <sbrk_aligned+0x38>
 800c250:	1a21      	subs	r1, r4, r0
 800c252:	4628      	mov	r0, r5
 800c254:	f000 f87c 	bl	800c350 <_sbrk_r>
 800c258:	3001      	adds	r0, #1
 800c25a:	d101      	bne.n	800c260 <sbrk_aligned+0x38>
 800c25c:	f04f 34ff 	mov.w	r4, #4294967295
 800c260:	4620      	mov	r0, r4
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	200004ac 	.word	0x200004ac

0800c268 <_malloc_r>:
 800c268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c26c:	1ccd      	adds	r5, r1, #3
 800c26e:	f025 0503 	bic.w	r5, r5, #3
 800c272:	3508      	adds	r5, #8
 800c274:	2d0c      	cmp	r5, #12
 800c276:	bf38      	it	cc
 800c278:	250c      	movcc	r5, #12
 800c27a:	2d00      	cmp	r5, #0
 800c27c:	4607      	mov	r7, r0
 800c27e:	db01      	blt.n	800c284 <_malloc_r+0x1c>
 800c280:	42a9      	cmp	r1, r5
 800c282:	d905      	bls.n	800c290 <_malloc_r+0x28>
 800c284:	230c      	movs	r3, #12
 800c286:	2600      	movs	r6, #0
 800c288:	603b      	str	r3, [r7, #0]
 800c28a:	4630      	mov	r0, r6
 800c28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c290:	4e2e      	ldr	r6, [pc, #184]	; (800c34c <_malloc_r+0xe4>)
 800c292:	f000 f8e7 	bl	800c464 <__malloc_lock>
 800c296:	6833      	ldr	r3, [r6, #0]
 800c298:	461c      	mov	r4, r3
 800c29a:	bb34      	cbnz	r4, 800c2ea <_malloc_r+0x82>
 800c29c:	4629      	mov	r1, r5
 800c29e:	4638      	mov	r0, r7
 800c2a0:	f7ff ffc2 	bl	800c228 <sbrk_aligned>
 800c2a4:	1c43      	adds	r3, r0, #1
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	d14d      	bne.n	800c346 <_malloc_r+0xde>
 800c2aa:	6834      	ldr	r4, [r6, #0]
 800c2ac:	4626      	mov	r6, r4
 800c2ae:	2e00      	cmp	r6, #0
 800c2b0:	d140      	bne.n	800c334 <_malloc_r+0xcc>
 800c2b2:	6823      	ldr	r3, [r4, #0]
 800c2b4:	4631      	mov	r1, r6
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	eb04 0803 	add.w	r8, r4, r3
 800c2bc:	f000 f848 	bl	800c350 <_sbrk_r>
 800c2c0:	4580      	cmp	r8, r0
 800c2c2:	d13a      	bne.n	800c33a <_malloc_r+0xd2>
 800c2c4:	6821      	ldr	r1, [r4, #0]
 800c2c6:	3503      	adds	r5, #3
 800c2c8:	1a6d      	subs	r5, r5, r1
 800c2ca:	f025 0503 	bic.w	r5, r5, #3
 800c2ce:	3508      	adds	r5, #8
 800c2d0:	2d0c      	cmp	r5, #12
 800c2d2:	bf38      	it	cc
 800c2d4:	250c      	movcc	r5, #12
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	4629      	mov	r1, r5
 800c2da:	f7ff ffa5 	bl	800c228 <sbrk_aligned>
 800c2de:	3001      	adds	r0, #1
 800c2e0:	d02b      	beq.n	800c33a <_malloc_r+0xd2>
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	442b      	add	r3, r5
 800c2e6:	6023      	str	r3, [r4, #0]
 800c2e8:	e00e      	b.n	800c308 <_malloc_r+0xa0>
 800c2ea:	6822      	ldr	r2, [r4, #0]
 800c2ec:	1b52      	subs	r2, r2, r5
 800c2ee:	d41e      	bmi.n	800c32e <_malloc_r+0xc6>
 800c2f0:	2a0b      	cmp	r2, #11
 800c2f2:	d916      	bls.n	800c322 <_malloc_r+0xba>
 800c2f4:	1961      	adds	r1, r4, r5
 800c2f6:	42a3      	cmp	r3, r4
 800c2f8:	6025      	str	r5, [r4, #0]
 800c2fa:	bf18      	it	ne
 800c2fc:	6059      	strne	r1, [r3, #4]
 800c2fe:	6863      	ldr	r3, [r4, #4]
 800c300:	bf08      	it	eq
 800c302:	6031      	streq	r1, [r6, #0]
 800c304:	5162      	str	r2, [r4, r5]
 800c306:	604b      	str	r3, [r1, #4]
 800c308:	4638      	mov	r0, r7
 800c30a:	f104 060b 	add.w	r6, r4, #11
 800c30e:	f000 f8af 	bl	800c470 <__malloc_unlock>
 800c312:	f026 0607 	bic.w	r6, r6, #7
 800c316:	1d23      	adds	r3, r4, #4
 800c318:	1af2      	subs	r2, r6, r3
 800c31a:	d0b6      	beq.n	800c28a <_malloc_r+0x22>
 800c31c:	1b9b      	subs	r3, r3, r6
 800c31e:	50a3      	str	r3, [r4, r2]
 800c320:	e7b3      	b.n	800c28a <_malloc_r+0x22>
 800c322:	6862      	ldr	r2, [r4, #4]
 800c324:	42a3      	cmp	r3, r4
 800c326:	bf0c      	ite	eq
 800c328:	6032      	streq	r2, [r6, #0]
 800c32a:	605a      	strne	r2, [r3, #4]
 800c32c:	e7ec      	b.n	800c308 <_malloc_r+0xa0>
 800c32e:	4623      	mov	r3, r4
 800c330:	6864      	ldr	r4, [r4, #4]
 800c332:	e7b2      	b.n	800c29a <_malloc_r+0x32>
 800c334:	4634      	mov	r4, r6
 800c336:	6876      	ldr	r6, [r6, #4]
 800c338:	e7b9      	b.n	800c2ae <_malloc_r+0x46>
 800c33a:	230c      	movs	r3, #12
 800c33c:	4638      	mov	r0, r7
 800c33e:	603b      	str	r3, [r7, #0]
 800c340:	f000 f896 	bl	800c470 <__malloc_unlock>
 800c344:	e7a1      	b.n	800c28a <_malloc_r+0x22>
 800c346:	6025      	str	r5, [r4, #0]
 800c348:	e7de      	b.n	800c308 <_malloc_r+0xa0>
 800c34a:	bf00      	nop
 800c34c:	200004a8 	.word	0x200004a8

0800c350 <_sbrk_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	2300      	movs	r3, #0
 800c354:	4d05      	ldr	r5, [pc, #20]	; (800c36c <_sbrk_r+0x1c>)
 800c356:	4604      	mov	r4, r0
 800c358:	4608      	mov	r0, r1
 800c35a:	602b      	str	r3, [r5, #0]
 800c35c:	f7fc f820 	bl	80083a0 <_sbrk>
 800c360:	1c43      	adds	r3, r0, #1
 800c362:	d102      	bne.n	800c36a <_sbrk_r+0x1a>
 800c364:	682b      	ldr	r3, [r5, #0]
 800c366:	b103      	cbz	r3, 800c36a <_sbrk_r+0x1a>
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	bd38      	pop	{r3, r4, r5, pc}
 800c36c:	200004b0 	.word	0x200004b0

0800c370 <siprintf>:
 800c370:	b40e      	push	{r1, r2, r3}
 800c372:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c376:	b500      	push	{lr}
 800c378:	b09c      	sub	sp, #112	; 0x70
 800c37a:	ab1d      	add	r3, sp, #116	; 0x74
 800c37c:	9002      	str	r0, [sp, #8]
 800c37e:	9006      	str	r0, [sp, #24]
 800c380:	9107      	str	r1, [sp, #28]
 800c382:	9104      	str	r1, [sp, #16]
 800c384:	4808      	ldr	r0, [pc, #32]	; (800c3a8 <siprintf+0x38>)
 800c386:	4909      	ldr	r1, [pc, #36]	; (800c3ac <siprintf+0x3c>)
 800c388:	f853 2b04 	ldr.w	r2, [r3], #4
 800c38c:	9105      	str	r1, [sp, #20]
 800c38e:	6800      	ldr	r0, [r0, #0]
 800c390:	a902      	add	r1, sp, #8
 800c392:	9301      	str	r3, [sp, #4]
 800c394:	f000 f8ce 	bl	800c534 <_svfiprintf_r>
 800c398:	2200      	movs	r2, #0
 800c39a:	9b02      	ldr	r3, [sp, #8]
 800c39c:	701a      	strb	r2, [r3, #0]
 800c39e:	b01c      	add	sp, #112	; 0x70
 800c3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3a4:	b003      	add	sp, #12
 800c3a6:	4770      	bx	lr
 800c3a8:	200000ac 	.word	0x200000ac
 800c3ac:	ffff0208 	.word	0xffff0208

0800c3b0 <strcat>:
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	b510      	push	{r4, lr}
 800c3b4:	7814      	ldrb	r4, [r2, #0]
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	3201      	adds	r2, #1
 800c3ba:	2c00      	cmp	r4, #0
 800c3bc:	d1fa      	bne.n	800c3b4 <strcat+0x4>
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3c8:	2a00      	cmp	r2, #0
 800c3ca:	d1f9      	bne.n	800c3c0 <strcat+0x10>
 800c3cc:	bd10      	pop	{r4, pc}

0800c3ce <strcpy>:
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3d4:	f803 2b01 	strb.w	r2, [r3], #1
 800c3d8:	2a00      	cmp	r2, #0
 800c3da:	d1f9      	bne.n	800c3d0 <strcpy+0x2>
 800c3dc:	4770      	bx	lr
	...

0800c3e0 <__utoa>:
 800c3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3e2:	b08b      	sub	sp, #44	; 0x2c
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	466e      	mov	r6, sp
 800c3ea:	4c1d      	ldr	r4, [pc, #116]	; (800c460 <__utoa+0x80>)
 800c3ec:	f104 0c20 	add.w	ip, r4, #32
 800c3f0:	4637      	mov	r7, r6
 800c3f2:	6820      	ldr	r0, [r4, #0]
 800c3f4:	6861      	ldr	r1, [r4, #4]
 800c3f6:	3408      	adds	r4, #8
 800c3f8:	c703      	stmia	r7!, {r0, r1}
 800c3fa:	4564      	cmp	r4, ip
 800c3fc:	463e      	mov	r6, r7
 800c3fe:	d1f7      	bne.n	800c3f0 <__utoa+0x10>
 800c400:	7921      	ldrb	r1, [r4, #4]
 800c402:	6820      	ldr	r0, [r4, #0]
 800c404:	7139      	strb	r1, [r7, #4]
 800c406:	1e91      	subs	r1, r2, #2
 800c408:	2922      	cmp	r1, #34	; 0x22
 800c40a:	6038      	str	r0, [r7, #0]
 800c40c:	f04f 0100 	mov.w	r1, #0
 800c410:	d904      	bls.n	800c41c <__utoa+0x3c>
 800c412:	7019      	strb	r1, [r3, #0]
 800c414:	460b      	mov	r3, r1
 800c416:	4618      	mov	r0, r3
 800c418:	b00b      	add	sp, #44	; 0x2c
 800c41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c41c:	1e58      	subs	r0, r3, #1
 800c41e:	4684      	mov	ip, r0
 800c420:	fbb5 f7f2 	udiv	r7, r5, r2
 800c424:	fb02 5617 	mls	r6, r2, r7, r5
 800c428:	3628      	adds	r6, #40	; 0x28
 800c42a:	446e      	add	r6, sp
 800c42c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c430:	460c      	mov	r4, r1
 800c432:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c436:	462e      	mov	r6, r5
 800c438:	42b2      	cmp	r2, r6
 800c43a:	463d      	mov	r5, r7
 800c43c:	f101 0101 	add.w	r1, r1, #1
 800c440:	d9ee      	bls.n	800c420 <__utoa+0x40>
 800c442:	2200      	movs	r2, #0
 800c444:	545a      	strb	r2, [r3, r1]
 800c446:	1919      	adds	r1, r3, r4
 800c448:	1aa5      	subs	r5, r4, r2
 800c44a:	42aa      	cmp	r2, r5
 800c44c:	dae3      	bge.n	800c416 <__utoa+0x36>
 800c44e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c452:	780e      	ldrb	r6, [r1, #0]
 800c454:	3201      	adds	r2, #1
 800c456:	7006      	strb	r6, [r0, #0]
 800c458:	f801 5901 	strb.w	r5, [r1], #-1
 800c45c:	e7f4      	b.n	800c448 <__utoa+0x68>
 800c45e:	bf00      	nop
 800c460:	0800dada 	.word	0x0800dada

0800c464 <__malloc_lock>:
 800c464:	4801      	ldr	r0, [pc, #4]	; (800c46c <__malloc_lock+0x8>)
 800c466:	f000 bafb 	b.w	800ca60 <__retarget_lock_acquire_recursive>
 800c46a:	bf00      	nop
 800c46c:	200004b4 	.word	0x200004b4

0800c470 <__malloc_unlock>:
 800c470:	4801      	ldr	r0, [pc, #4]	; (800c478 <__malloc_unlock+0x8>)
 800c472:	f000 baf6 	b.w	800ca62 <__retarget_lock_release_recursive>
 800c476:	bf00      	nop
 800c478:	200004b4 	.word	0x200004b4

0800c47c <__ssputs_r>:
 800c47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c480:	688e      	ldr	r6, [r1, #8]
 800c482:	4682      	mov	sl, r0
 800c484:	429e      	cmp	r6, r3
 800c486:	460c      	mov	r4, r1
 800c488:	4690      	mov	r8, r2
 800c48a:	461f      	mov	r7, r3
 800c48c:	d838      	bhi.n	800c500 <__ssputs_r+0x84>
 800c48e:	898a      	ldrh	r2, [r1, #12]
 800c490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c494:	d032      	beq.n	800c4fc <__ssputs_r+0x80>
 800c496:	6825      	ldr	r5, [r4, #0]
 800c498:	6909      	ldr	r1, [r1, #16]
 800c49a:	3301      	adds	r3, #1
 800c49c:	eba5 0901 	sub.w	r9, r5, r1
 800c4a0:	6965      	ldr	r5, [r4, #20]
 800c4a2:	444b      	add	r3, r9
 800c4a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4ac:	106d      	asrs	r5, r5, #1
 800c4ae:	429d      	cmp	r5, r3
 800c4b0:	bf38      	it	cc
 800c4b2:	461d      	movcc	r5, r3
 800c4b4:	0553      	lsls	r3, r2, #21
 800c4b6:	d531      	bpl.n	800c51c <__ssputs_r+0xa0>
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	f7ff fed5 	bl	800c268 <_malloc_r>
 800c4be:	4606      	mov	r6, r0
 800c4c0:	b950      	cbnz	r0, 800c4d8 <__ssputs_r+0x5c>
 800c4c2:	230c      	movs	r3, #12
 800c4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c8:	f8ca 3000 	str.w	r3, [sl]
 800c4cc:	89a3      	ldrh	r3, [r4, #12]
 800c4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4d2:	81a3      	strh	r3, [r4, #12]
 800c4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4d8:	464a      	mov	r2, r9
 800c4da:	6921      	ldr	r1, [r4, #16]
 800c4dc:	f000 fad0 	bl	800ca80 <memcpy>
 800c4e0:	89a3      	ldrh	r3, [r4, #12]
 800c4e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ea:	81a3      	strh	r3, [r4, #12]
 800c4ec:	6126      	str	r6, [r4, #16]
 800c4ee:	444e      	add	r6, r9
 800c4f0:	6026      	str	r6, [r4, #0]
 800c4f2:	463e      	mov	r6, r7
 800c4f4:	6165      	str	r5, [r4, #20]
 800c4f6:	eba5 0509 	sub.w	r5, r5, r9
 800c4fa:	60a5      	str	r5, [r4, #8]
 800c4fc:	42be      	cmp	r6, r7
 800c4fe:	d900      	bls.n	800c502 <__ssputs_r+0x86>
 800c500:	463e      	mov	r6, r7
 800c502:	4632      	mov	r2, r6
 800c504:	4641      	mov	r1, r8
 800c506:	6820      	ldr	r0, [r4, #0]
 800c508:	f000 fac8 	bl	800ca9c <memmove>
 800c50c:	68a3      	ldr	r3, [r4, #8]
 800c50e:	2000      	movs	r0, #0
 800c510:	1b9b      	subs	r3, r3, r6
 800c512:	60a3      	str	r3, [r4, #8]
 800c514:	6823      	ldr	r3, [r4, #0]
 800c516:	4433      	add	r3, r6
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	e7db      	b.n	800c4d4 <__ssputs_r+0x58>
 800c51c:	462a      	mov	r2, r5
 800c51e:	f000 fad7 	bl	800cad0 <_realloc_r>
 800c522:	4606      	mov	r6, r0
 800c524:	2800      	cmp	r0, #0
 800c526:	d1e1      	bne.n	800c4ec <__ssputs_r+0x70>
 800c528:	4650      	mov	r0, sl
 800c52a:	6921      	ldr	r1, [r4, #16]
 800c52c:	f7ff fe34 	bl	800c198 <_free_r>
 800c530:	e7c7      	b.n	800c4c2 <__ssputs_r+0x46>
	...

0800c534 <_svfiprintf_r>:
 800c534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c538:	4698      	mov	r8, r3
 800c53a:	898b      	ldrh	r3, [r1, #12]
 800c53c:	4607      	mov	r7, r0
 800c53e:	061b      	lsls	r3, r3, #24
 800c540:	460d      	mov	r5, r1
 800c542:	4614      	mov	r4, r2
 800c544:	b09d      	sub	sp, #116	; 0x74
 800c546:	d50e      	bpl.n	800c566 <_svfiprintf_r+0x32>
 800c548:	690b      	ldr	r3, [r1, #16]
 800c54a:	b963      	cbnz	r3, 800c566 <_svfiprintf_r+0x32>
 800c54c:	2140      	movs	r1, #64	; 0x40
 800c54e:	f7ff fe8b 	bl	800c268 <_malloc_r>
 800c552:	6028      	str	r0, [r5, #0]
 800c554:	6128      	str	r0, [r5, #16]
 800c556:	b920      	cbnz	r0, 800c562 <_svfiprintf_r+0x2e>
 800c558:	230c      	movs	r3, #12
 800c55a:	603b      	str	r3, [r7, #0]
 800c55c:	f04f 30ff 	mov.w	r0, #4294967295
 800c560:	e0d1      	b.n	800c706 <_svfiprintf_r+0x1d2>
 800c562:	2340      	movs	r3, #64	; 0x40
 800c564:	616b      	str	r3, [r5, #20]
 800c566:	2300      	movs	r3, #0
 800c568:	9309      	str	r3, [sp, #36]	; 0x24
 800c56a:	2320      	movs	r3, #32
 800c56c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c570:	2330      	movs	r3, #48	; 0x30
 800c572:	f04f 0901 	mov.w	r9, #1
 800c576:	f8cd 800c 	str.w	r8, [sp, #12]
 800c57a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c720 <_svfiprintf_r+0x1ec>
 800c57e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c582:	4623      	mov	r3, r4
 800c584:	469a      	mov	sl, r3
 800c586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c58a:	b10a      	cbz	r2, 800c590 <_svfiprintf_r+0x5c>
 800c58c:	2a25      	cmp	r2, #37	; 0x25
 800c58e:	d1f9      	bne.n	800c584 <_svfiprintf_r+0x50>
 800c590:	ebba 0b04 	subs.w	fp, sl, r4
 800c594:	d00b      	beq.n	800c5ae <_svfiprintf_r+0x7a>
 800c596:	465b      	mov	r3, fp
 800c598:	4622      	mov	r2, r4
 800c59a:	4629      	mov	r1, r5
 800c59c:	4638      	mov	r0, r7
 800c59e:	f7ff ff6d 	bl	800c47c <__ssputs_r>
 800c5a2:	3001      	adds	r0, #1
 800c5a4:	f000 80aa 	beq.w	800c6fc <_svfiprintf_r+0x1c8>
 800c5a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5aa:	445a      	add	r2, fp
 800c5ac:	9209      	str	r2, [sp, #36]	; 0x24
 800c5ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 80a2 	beq.w	800c6fc <_svfiprintf_r+0x1c8>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c5be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5c2:	f10a 0a01 	add.w	sl, sl, #1
 800c5c6:	9304      	str	r3, [sp, #16]
 800c5c8:	9307      	str	r3, [sp, #28]
 800c5ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5ce:	931a      	str	r3, [sp, #104]	; 0x68
 800c5d0:	4654      	mov	r4, sl
 800c5d2:	2205      	movs	r2, #5
 800c5d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5d8:	4851      	ldr	r0, [pc, #324]	; (800c720 <_svfiprintf_r+0x1ec>)
 800c5da:	f000 fa43 	bl	800ca64 <memchr>
 800c5de:	9a04      	ldr	r2, [sp, #16]
 800c5e0:	b9d8      	cbnz	r0, 800c61a <_svfiprintf_r+0xe6>
 800c5e2:	06d0      	lsls	r0, r2, #27
 800c5e4:	bf44      	itt	mi
 800c5e6:	2320      	movmi	r3, #32
 800c5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5ec:	0711      	lsls	r1, r2, #28
 800c5ee:	bf44      	itt	mi
 800c5f0:	232b      	movmi	r3, #43	; 0x2b
 800c5f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c5fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c5fc:	d015      	beq.n	800c62a <_svfiprintf_r+0xf6>
 800c5fe:	4654      	mov	r4, sl
 800c600:	2000      	movs	r0, #0
 800c602:	f04f 0c0a 	mov.w	ip, #10
 800c606:	9a07      	ldr	r2, [sp, #28]
 800c608:	4621      	mov	r1, r4
 800c60a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c60e:	3b30      	subs	r3, #48	; 0x30
 800c610:	2b09      	cmp	r3, #9
 800c612:	d94e      	bls.n	800c6b2 <_svfiprintf_r+0x17e>
 800c614:	b1b0      	cbz	r0, 800c644 <_svfiprintf_r+0x110>
 800c616:	9207      	str	r2, [sp, #28]
 800c618:	e014      	b.n	800c644 <_svfiprintf_r+0x110>
 800c61a:	eba0 0308 	sub.w	r3, r0, r8
 800c61e:	fa09 f303 	lsl.w	r3, r9, r3
 800c622:	4313      	orrs	r3, r2
 800c624:	46a2      	mov	sl, r4
 800c626:	9304      	str	r3, [sp, #16]
 800c628:	e7d2      	b.n	800c5d0 <_svfiprintf_r+0x9c>
 800c62a:	9b03      	ldr	r3, [sp, #12]
 800c62c:	1d19      	adds	r1, r3, #4
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	9103      	str	r1, [sp, #12]
 800c632:	2b00      	cmp	r3, #0
 800c634:	bfbb      	ittet	lt
 800c636:	425b      	neglt	r3, r3
 800c638:	f042 0202 	orrlt.w	r2, r2, #2
 800c63c:	9307      	strge	r3, [sp, #28]
 800c63e:	9307      	strlt	r3, [sp, #28]
 800c640:	bfb8      	it	lt
 800c642:	9204      	strlt	r2, [sp, #16]
 800c644:	7823      	ldrb	r3, [r4, #0]
 800c646:	2b2e      	cmp	r3, #46	; 0x2e
 800c648:	d10c      	bne.n	800c664 <_svfiprintf_r+0x130>
 800c64a:	7863      	ldrb	r3, [r4, #1]
 800c64c:	2b2a      	cmp	r3, #42	; 0x2a
 800c64e:	d135      	bne.n	800c6bc <_svfiprintf_r+0x188>
 800c650:	9b03      	ldr	r3, [sp, #12]
 800c652:	3402      	adds	r4, #2
 800c654:	1d1a      	adds	r2, r3, #4
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	9203      	str	r2, [sp, #12]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	bfb8      	it	lt
 800c65e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c662:	9305      	str	r3, [sp, #20]
 800c664:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c724 <_svfiprintf_r+0x1f0>
 800c668:	2203      	movs	r2, #3
 800c66a:	4650      	mov	r0, sl
 800c66c:	7821      	ldrb	r1, [r4, #0]
 800c66e:	f000 f9f9 	bl	800ca64 <memchr>
 800c672:	b140      	cbz	r0, 800c686 <_svfiprintf_r+0x152>
 800c674:	2340      	movs	r3, #64	; 0x40
 800c676:	eba0 000a 	sub.w	r0, r0, sl
 800c67a:	fa03 f000 	lsl.w	r0, r3, r0
 800c67e:	9b04      	ldr	r3, [sp, #16]
 800c680:	3401      	adds	r4, #1
 800c682:	4303      	orrs	r3, r0
 800c684:	9304      	str	r3, [sp, #16]
 800c686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c68a:	2206      	movs	r2, #6
 800c68c:	4826      	ldr	r0, [pc, #152]	; (800c728 <_svfiprintf_r+0x1f4>)
 800c68e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c692:	f000 f9e7 	bl	800ca64 <memchr>
 800c696:	2800      	cmp	r0, #0
 800c698:	d038      	beq.n	800c70c <_svfiprintf_r+0x1d8>
 800c69a:	4b24      	ldr	r3, [pc, #144]	; (800c72c <_svfiprintf_r+0x1f8>)
 800c69c:	bb1b      	cbnz	r3, 800c6e6 <_svfiprintf_r+0x1b2>
 800c69e:	9b03      	ldr	r3, [sp, #12]
 800c6a0:	3307      	adds	r3, #7
 800c6a2:	f023 0307 	bic.w	r3, r3, #7
 800c6a6:	3308      	adds	r3, #8
 800c6a8:	9303      	str	r3, [sp, #12]
 800c6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ac:	4433      	add	r3, r6
 800c6ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b0:	e767      	b.n	800c582 <_svfiprintf_r+0x4e>
 800c6b2:	460c      	mov	r4, r1
 800c6b4:	2001      	movs	r0, #1
 800c6b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6ba:	e7a5      	b.n	800c608 <_svfiprintf_r+0xd4>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	f04f 0c0a 	mov.w	ip, #10
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	3401      	adds	r4, #1
 800c6c6:	9305      	str	r3, [sp, #20]
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6ce:	3a30      	subs	r2, #48	; 0x30
 800c6d0:	2a09      	cmp	r2, #9
 800c6d2:	d903      	bls.n	800c6dc <_svfiprintf_r+0x1a8>
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d0c5      	beq.n	800c664 <_svfiprintf_r+0x130>
 800c6d8:	9105      	str	r1, [sp, #20]
 800c6da:	e7c3      	b.n	800c664 <_svfiprintf_r+0x130>
 800c6dc:	4604      	mov	r4, r0
 800c6de:	2301      	movs	r3, #1
 800c6e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6e4:	e7f0      	b.n	800c6c8 <_svfiprintf_r+0x194>
 800c6e6:	ab03      	add	r3, sp, #12
 800c6e8:	9300      	str	r3, [sp, #0]
 800c6ea:	462a      	mov	r2, r5
 800c6ec:	4638      	mov	r0, r7
 800c6ee:	4b10      	ldr	r3, [pc, #64]	; (800c730 <_svfiprintf_r+0x1fc>)
 800c6f0:	a904      	add	r1, sp, #16
 800c6f2:	f3af 8000 	nop.w
 800c6f6:	1c42      	adds	r2, r0, #1
 800c6f8:	4606      	mov	r6, r0
 800c6fa:	d1d6      	bne.n	800c6aa <_svfiprintf_r+0x176>
 800c6fc:	89ab      	ldrh	r3, [r5, #12]
 800c6fe:	065b      	lsls	r3, r3, #25
 800c700:	f53f af2c 	bmi.w	800c55c <_svfiprintf_r+0x28>
 800c704:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c706:	b01d      	add	sp, #116	; 0x74
 800c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c70c:	ab03      	add	r3, sp, #12
 800c70e:	9300      	str	r3, [sp, #0]
 800c710:	462a      	mov	r2, r5
 800c712:	4638      	mov	r0, r7
 800c714:	4b06      	ldr	r3, [pc, #24]	; (800c730 <_svfiprintf_r+0x1fc>)
 800c716:	a904      	add	r1, sp, #16
 800c718:	f000 f87c 	bl	800c814 <_printf_i>
 800c71c:	e7eb      	b.n	800c6f6 <_svfiprintf_r+0x1c2>
 800c71e:	bf00      	nop
 800c720:	0800daff 	.word	0x0800daff
 800c724:	0800db05 	.word	0x0800db05
 800c728:	0800db09 	.word	0x0800db09
 800c72c:	00000000 	.word	0x00000000
 800c730:	0800c47d 	.word	0x0800c47d

0800c734 <_printf_common>:
 800c734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c738:	4616      	mov	r6, r2
 800c73a:	4699      	mov	r9, r3
 800c73c:	688a      	ldr	r2, [r1, #8]
 800c73e:	690b      	ldr	r3, [r1, #16]
 800c740:	4607      	mov	r7, r0
 800c742:	4293      	cmp	r3, r2
 800c744:	bfb8      	it	lt
 800c746:	4613      	movlt	r3, r2
 800c748:	6033      	str	r3, [r6, #0]
 800c74a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c74e:	460c      	mov	r4, r1
 800c750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c754:	b10a      	cbz	r2, 800c75a <_printf_common+0x26>
 800c756:	3301      	adds	r3, #1
 800c758:	6033      	str	r3, [r6, #0]
 800c75a:	6823      	ldr	r3, [r4, #0]
 800c75c:	0699      	lsls	r1, r3, #26
 800c75e:	bf42      	ittt	mi
 800c760:	6833      	ldrmi	r3, [r6, #0]
 800c762:	3302      	addmi	r3, #2
 800c764:	6033      	strmi	r3, [r6, #0]
 800c766:	6825      	ldr	r5, [r4, #0]
 800c768:	f015 0506 	ands.w	r5, r5, #6
 800c76c:	d106      	bne.n	800c77c <_printf_common+0x48>
 800c76e:	f104 0a19 	add.w	sl, r4, #25
 800c772:	68e3      	ldr	r3, [r4, #12]
 800c774:	6832      	ldr	r2, [r6, #0]
 800c776:	1a9b      	subs	r3, r3, r2
 800c778:	42ab      	cmp	r3, r5
 800c77a:	dc28      	bgt.n	800c7ce <_printf_common+0x9a>
 800c77c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c780:	1e13      	subs	r3, r2, #0
 800c782:	6822      	ldr	r2, [r4, #0]
 800c784:	bf18      	it	ne
 800c786:	2301      	movne	r3, #1
 800c788:	0692      	lsls	r2, r2, #26
 800c78a:	d42d      	bmi.n	800c7e8 <_printf_common+0xb4>
 800c78c:	4649      	mov	r1, r9
 800c78e:	4638      	mov	r0, r7
 800c790:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c794:	47c0      	blx	r8
 800c796:	3001      	adds	r0, #1
 800c798:	d020      	beq.n	800c7dc <_printf_common+0xa8>
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	68e5      	ldr	r5, [r4, #12]
 800c79e:	f003 0306 	and.w	r3, r3, #6
 800c7a2:	2b04      	cmp	r3, #4
 800c7a4:	bf18      	it	ne
 800c7a6:	2500      	movne	r5, #0
 800c7a8:	6832      	ldr	r2, [r6, #0]
 800c7aa:	f04f 0600 	mov.w	r6, #0
 800c7ae:	68a3      	ldr	r3, [r4, #8]
 800c7b0:	bf08      	it	eq
 800c7b2:	1aad      	subeq	r5, r5, r2
 800c7b4:	6922      	ldr	r2, [r4, #16]
 800c7b6:	bf08      	it	eq
 800c7b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	bfc4      	itt	gt
 800c7c0:	1a9b      	subgt	r3, r3, r2
 800c7c2:	18ed      	addgt	r5, r5, r3
 800c7c4:	341a      	adds	r4, #26
 800c7c6:	42b5      	cmp	r5, r6
 800c7c8:	d11a      	bne.n	800c800 <_printf_common+0xcc>
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	e008      	b.n	800c7e0 <_printf_common+0xac>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	4652      	mov	r2, sl
 800c7d2:	4649      	mov	r1, r9
 800c7d4:	4638      	mov	r0, r7
 800c7d6:	47c0      	blx	r8
 800c7d8:	3001      	adds	r0, #1
 800c7da:	d103      	bne.n	800c7e4 <_printf_common+0xb0>
 800c7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e4:	3501      	adds	r5, #1
 800c7e6:	e7c4      	b.n	800c772 <_printf_common+0x3e>
 800c7e8:	2030      	movs	r0, #48	; 0x30
 800c7ea:	18e1      	adds	r1, r4, r3
 800c7ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7f0:	1c5a      	adds	r2, r3, #1
 800c7f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c7f6:	4422      	add	r2, r4
 800c7f8:	3302      	adds	r3, #2
 800c7fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c7fe:	e7c5      	b.n	800c78c <_printf_common+0x58>
 800c800:	2301      	movs	r3, #1
 800c802:	4622      	mov	r2, r4
 800c804:	4649      	mov	r1, r9
 800c806:	4638      	mov	r0, r7
 800c808:	47c0      	blx	r8
 800c80a:	3001      	adds	r0, #1
 800c80c:	d0e6      	beq.n	800c7dc <_printf_common+0xa8>
 800c80e:	3601      	adds	r6, #1
 800c810:	e7d9      	b.n	800c7c6 <_printf_common+0x92>
	...

0800c814 <_printf_i>:
 800c814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c818:	7e0f      	ldrb	r7, [r1, #24]
 800c81a:	4691      	mov	r9, r2
 800c81c:	2f78      	cmp	r7, #120	; 0x78
 800c81e:	4680      	mov	r8, r0
 800c820:	460c      	mov	r4, r1
 800c822:	469a      	mov	sl, r3
 800c824:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c826:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c82a:	d807      	bhi.n	800c83c <_printf_i+0x28>
 800c82c:	2f62      	cmp	r7, #98	; 0x62
 800c82e:	d80a      	bhi.n	800c846 <_printf_i+0x32>
 800c830:	2f00      	cmp	r7, #0
 800c832:	f000 80d9 	beq.w	800c9e8 <_printf_i+0x1d4>
 800c836:	2f58      	cmp	r7, #88	; 0x58
 800c838:	f000 80a4 	beq.w	800c984 <_printf_i+0x170>
 800c83c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c840:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c844:	e03a      	b.n	800c8bc <_printf_i+0xa8>
 800c846:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c84a:	2b15      	cmp	r3, #21
 800c84c:	d8f6      	bhi.n	800c83c <_printf_i+0x28>
 800c84e:	a101      	add	r1, pc, #4	; (adr r1, 800c854 <_printf_i+0x40>)
 800c850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c854:	0800c8ad 	.word	0x0800c8ad
 800c858:	0800c8c1 	.word	0x0800c8c1
 800c85c:	0800c83d 	.word	0x0800c83d
 800c860:	0800c83d 	.word	0x0800c83d
 800c864:	0800c83d 	.word	0x0800c83d
 800c868:	0800c83d 	.word	0x0800c83d
 800c86c:	0800c8c1 	.word	0x0800c8c1
 800c870:	0800c83d 	.word	0x0800c83d
 800c874:	0800c83d 	.word	0x0800c83d
 800c878:	0800c83d 	.word	0x0800c83d
 800c87c:	0800c83d 	.word	0x0800c83d
 800c880:	0800c9cf 	.word	0x0800c9cf
 800c884:	0800c8f1 	.word	0x0800c8f1
 800c888:	0800c9b1 	.word	0x0800c9b1
 800c88c:	0800c83d 	.word	0x0800c83d
 800c890:	0800c83d 	.word	0x0800c83d
 800c894:	0800c9f1 	.word	0x0800c9f1
 800c898:	0800c83d 	.word	0x0800c83d
 800c89c:	0800c8f1 	.word	0x0800c8f1
 800c8a0:	0800c83d 	.word	0x0800c83d
 800c8a4:	0800c83d 	.word	0x0800c83d
 800c8a8:	0800c9b9 	.word	0x0800c9b9
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	1d1a      	adds	r2, r3, #4
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	602a      	str	r2, [r5, #0]
 800c8b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e0a4      	b.n	800ca0a <_printf_i+0x1f6>
 800c8c0:	6820      	ldr	r0, [r4, #0]
 800c8c2:	6829      	ldr	r1, [r5, #0]
 800c8c4:	0606      	lsls	r6, r0, #24
 800c8c6:	f101 0304 	add.w	r3, r1, #4
 800c8ca:	d50a      	bpl.n	800c8e2 <_printf_i+0xce>
 800c8cc:	680e      	ldr	r6, [r1, #0]
 800c8ce:	602b      	str	r3, [r5, #0]
 800c8d0:	2e00      	cmp	r6, #0
 800c8d2:	da03      	bge.n	800c8dc <_printf_i+0xc8>
 800c8d4:	232d      	movs	r3, #45	; 0x2d
 800c8d6:	4276      	negs	r6, r6
 800c8d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8dc:	230a      	movs	r3, #10
 800c8de:	485e      	ldr	r0, [pc, #376]	; (800ca58 <_printf_i+0x244>)
 800c8e0:	e019      	b.n	800c916 <_printf_i+0x102>
 800c8e2:	680e      	ldr	r6, [r1, #0]
 800c8e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c8e8:	602b      	str	r3, [r5, #0]
 800c8ea:	bf18      	it	ne
 800c8ec:	b236      	sxthne	r6, r6
 800c8ee:	e7ef      	b.n	800c8d0 <_printf_i+0xbc>
 800c8f0:	682b      	ldr	r3, [r5, #0]
 800c8f2:	6820      	ldr	r0, [r4, #0]
 800c8f4:	1d19      	adds	r1, r3, #4
 800c8f6:	6029      	str	r1, [r5, #0]
 800c8f8:	0601      	lsls	r1, r0, #24
 800c8fa:	d501      	bpl.n	800c900 <_printf_i+0xec>
 800c8fc:	681e      	ldr	r6, [r3, #0]
 800c8fe:	e002      	b.n	800c906 <_printf_i+0xf2>
 800c900:	0646      	lsls	r6, r0, #25
 800c902:	d5fb      	bpl.n	800c8fc <_printf_i+0xe8>
 800c904:	881e      	ldrh	r6, [r3, #0]
 800c906:	2f6f      	cmp	r7, #111	; 0x6f
 800c908:	bf0c      	ite	eq
 800c90a:	2308      	moveq	r3, #8
 800c90c:	230a      	movne	r3, #10
 800c90e:	4852      	ldr	r0, [pc, #328]	; (800ca58 <_printf_i+0x244>)
 800c910:	2100      	movs	r1, #0
 800c912:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c916:	6865      	ldr	r5, [r4, #4]
 800c918:	2d00      	cmp	r5, #0
 800c91a:	bfa8      	it	ge
 800c91c:	6821      	ldrge	r1, [r4, #0]
 800c91e:	60a5      	str	r5, [r4, #8]
 800c920:	bfa4      	itt	ge
 800c922:	f021 0104 	bicge.w	r1, r1, #4
 800c926:	6021      	strge	r1, [r4, #0]
 800c928:	b90e      	cbnz	r6, 800c92e <_printf_i+0x11a>
 800c92a:	2d00      	cmp	r5, #0
 800c92c:	d04d      	beq.n	800c9ca <_printf_i+0x1b6>
 800c92e:	4615      	mov	r5, r2
 800c930:	fbb6 f1f3 	udiv	r1, r6, r3
 800c934:	fb03 6711 	mls	r7, r3, r1, r6
 800c938:	5dc7      	ldrb	r7, [r0, r7]
 800c93a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c93e:	4637      	mov	r7, r6
 800c940:	42bb      	cmp	r3, r7
 800c942:	460e      	mov	r6, r1
 800c944:	d9f4      	bls.n	800c930 <_printf_i+0x11c>
 800c946:	2b08      	cmp	r3, #8
 800c948:	d10b      	bne.n	800c962 <_printf_i+0x14e>
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	07de      	lsls	r6, r3, #31
 800c94e:	d508      	bpl.n	800c962 <_printf_i+0x14e>
 800c950:	6923      	ldr	r3, [r4, #16]
 800c952:	6861      	ldr	r1, [r4, #4]
 800c954:	4299      	cmp	r1, r3
 800c956:	bfde      	ittt	le
 800c958:	2330      	movle	r3, #48	; 0x30
 800c95a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c95e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c962:	1b52      	subs	r2, r2, r5
 800c964:	6122      	str	r2, [r4, #16]
 800c966:	464b      	mov	r3, r9
 800c968:	4621      	mov	r1, r4
 800c96a:	4640      	mov	r0, r8
 800c96c:	f8cd a000 	str.w	sl, [sp]
 800c970:	aa03      	add	r2, sp, #12
 800c972:	f7ff fedf 	bl	800c734 <_printf_common>
 800c976:	3001      	adds	r0, #1
 800c978:	d14c      	bne.n	800ca14 <_printf_i+0x200>
 800c97a:	f04f 30ff 	mov.w	r0, #4294967295
 800c97e:	b004      	add	sp, #16
 800c980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c984:	4834      	ldr	r0, [pc, #208]	; (800ca58 <_printf_i+0x244>)
 800c986:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c98a:	6829      	ldr	r1, [r5, #0]
 800c98c:	6823      	ldr	r3, [r4, #0]
 800c98e:	f851 6b04 	ldr.w	r6, [r1], #4
 800c992:	6029      	str	r1, [r5, #0]
 800c994:	061d      	lsls	r5, r3, #24
 800c996:	d514      	bpl.n	800c9c2 <_printf_i+0x1ae>
 800c998:	07df      	lsls	r7, r3, #31
 800c99a:	bf44      	itt	mi
 800c99c:	f043 0320 	orrmi.w	r3, r3, #32
 800c9a0:	6023      	strmi	r3, [r4, #0]
 800c9a2:	b91e      	cbnz	r6, 800c9ac <_printf_i+0x198>
 800c9a4:	6823      	ldr	r3, [r4, #0]
 800c9a6:	f023 0320 	bic.w	r3, r3, #32
 800c9aa:	6023      	str	r3, [r4, #0]
 800c9ac:	2310      	movs	r3, #16
 800c9ae:	e7af      	b.n	800c910 <_printf_i+0xfc>
 800c9b0:	6823      	ldr	r3, [r4, #0]
 800c9b2:	f043 0320 	orr.w	r3, r3, #32
 800c9b6:	6023      	str	r3, [r4, #0]
 800c9b8:	2378      	movs	r3, #120	; 0x78
 800c9ba:	4828      	ldr	r0, [pc, #160]	; (800ca5c <_printf_i+0x248>)
 800c9bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c9c0:	e7e3      	b.n	800c98a <_printf_i+0x176>
 800c9c2:	0659      	lsls	r1, r3, #25
 800c9c4:	bf48      	it	mi
 800c9c6:	b2b6      	uxthmi	r6, r6
 800c9c8:	e7e6      	b.n	800c998 <_printf_i+0x184>
 800c9ca:	4615      	mov	r5, r2
 800c9cc:	e7bb      	b.n	800c946 <_printf_i+0x132>
 800c9ce:	682b      	ldr	r3, [r5, #0]
 800c9d0:	6826      	ldr	r6, [r4, #0]
 800c9d2:	1d18      	adds	r0, r3, #4
 800c9d4:	6961      	ldr	r1, [r4, #20]
 800c9d6:	6028      	str	r0, [r5, #0]
 800c9d8:	0635      	lsls	r5, r6, #24
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	d501      	bpl.n	800c9e2 <_printf_i+0x1ce>
 800c9de:	6019      	str	r1, [r3, #0]
 800c9e0:	e002      	b.n	800c9e8 <_printf_i+0x1d4>
 800c9e2:	0670      	lsls	r0, r6, #25
 800c9e4:	d5fb      	bpl.n	800c9de <_printf_i+0x1ca>
 800c9e6:	8019      	strh	r1, [r3, #0]
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	4615      	mov	r5, r2
 800c9ec:	6123      	str	r3, [r4, #16]
 800c9ee:	e7ba      	b.n	800c966 <_printf_i+0x152>
 800c9f0:	682b      	ldr	r3, [r5, #0]
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	1d1a      	adds	r2, r3, #4
 800c9f6:	602a      	str	r2, [r5, #0]
 800c9f8:	681d      	ldr	r5, [r3, #0]
 800c9fa:	6862      	ldr	r2, [r4, #4]
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	f000 f831 	bl	800ca64 <memchr>
 800ca02:	b108      	cbz	r0, 800ca08 <_printf_i+0x1f4>
 800ca04:	1b40      	subs	r0, r0, r5
 800ca06:	6060      	str	r0, [r4, #4]
 800ca08:	6863      	ldr	r3, [r4, #4]
 800ca0a:	6123      	str	r3, [r4, #16]
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca12:	e7a8      	b.n	800c966 <_printf_i+0x152>
 800ca14:	462a      	mov	r2, r5
 800ca16:	4649      	mov	r1, r9
 800ca18:	4640      	mov	r0, r8
 800ca1a:	6923      	ldr	r3, [r4, #16]
 800ca1c:	47d0      	blx	sl
 800ca1e:	3001      	adds	r0, #1
 800ca20:	d0ab      	beq.n	800c97a <_printf_i+0x166>
 800ca22:	6823      	ldr	r3, [r4, #0]
 800ca24:	079b      	lsls	r3, r3, #30
 800ca26:	d413      	bmi.n	800ca50 <_printf_i+0x23c>
 800ca28:	68e0      	ldr	r0, [r4, #12]
 800ca2a:	9b03      	ldr	r3, [sp, #12]
 800ca2c:	4298      	cmp	r0, r3
 800ca2e:	bfb8      	it	lt
 800ca30:	4618      	movlt	r0, r3
 800ca32:	e7a4      	b.n	800c97e <_printf_i+0x16a>
 800ca34:	2301      	movs	r3, #1
 800ca36:	4632      	mov	r2, r6
 800ca38:	4649      	mov	r1, r9
 800ca3a:	4640      	mov	r0, r8
 800ca3c:	47d0      	blx	sl
 800ca3e:	3001      	adds	r0, #1
 800ca40:	d09b      	beq.n	800c97a <_printf_i+0x166>
 800ca42:	3501      	adds	r5, #1
 800ca44:	68e3      	ldr	r3, [r4, #12]
 800ca46:	9903      	ldr	r1, [sp, #12]
 800ca48:	1a5b      	subs	r3, r3, r1
 800ca4a:	42ab      	cmp	r3, r5
 800ca4c:	dcf2      	bgt.n	800ca34 <_printf_i+0x220>
 800ca4e:	e7eb      	b.n	800ca28 <_printf_i+0x214>
 800ca50:	2500      	movs	r5, #0
 800ca52:	f104 0619 	add.w	r6, r4, #25
 800ca56:	e7f5      	b.n	800ca44 <_printf_i+0x230>
 800ca58:	0800db10 	.word	0x0800db10
 800ca5c:	0800db21 	.word	0x0800db21

0800ca60 <__retarget_lock_acquire_recursive>:
 800ca60:	4770      	bx	lr

0800ca62 <__retarget_lock_release_recursive>:
 800ca62:	4770      	bx	lr

0800ca64 <memchr>:
 800ca64:	4603      	mov	r3, r0
 800ca66:	b510      	push	{r4, lr}
 800ca68:	b2c9      	uxtb	r1, r1
 800ca6a:	4402      	add	r2, r0
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	4618      	mov	r0, r3
 800ca70:	d101      	bne.n	800ca76 <memchr+0x12>
 800ca72:	2000      	movs	r0, #0
 800ca74:	e003      	b.n	800ca7e <memchr+0x1a>
 800ca76:	7804      	ldrb	r4, [r0, #0]
 800ca78:	3301      	adds	r3, #1
 800ca7a:	428c      	cmp	r4, r1
 800ca7c:	d1f6      	bne.n	800ca6c <memchr+0x8>
 800ca7e:	bd10      	pop	{r4, pc}

0800ca80 <memcpy>:
 800ca80:	440a      	add	r2, r1
 800ca82:	4291      	cmp	r1, r2
 800ca84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca88:	d100      	bne.n	800ca8c <memcpy+0xc>
 800ca8a:	4770      	bx	lr
 800ca8c:	b510      	push	{r4, lr}
 800ca8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca92:	4291      	cmp	r1, r2
 800ca94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca98:	d1f9      	bne.n	800ca8e <memcpy+0xe>
 800ca9a:	bd10      	pop	{r4, pc}

0800ca9c <memmove>:
 800ca9c:	4288      	cmp	r0, r1
 800ca9e:	b510      	push	{r4, lr}
 800caa0:	eb01 0402 	add.w	r4, r1, r2
 800caa4:	d902      	bls.n	800caac <memmove+0x10>
 800caa6:	4284      	cmp	r4, r0
 800caa8:	4623      	mov	r3, r4
 800caaa:	d807      	bhi.n	800cabc <memmove+0x20>
 800caac:	1e43      	subs	r3, r0, #1
 800caae:	42a1      	cmp	r1, r4
 800cab0:	d008      	beq.n	800cac4 <memmove+0x28>
 800cab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caba:	e7f8      	b.n	800caae <memmove+0x12>
 800cabc:	4601      	mov	r1, r0
 800cabe:	4402      	add	r2, r0
 800cac0:	428a      	cmp	r2, r1
 800cac2:	d100      	bne.n	800cac6 <memmove+0x2a>
 800cac4:	bd10      	pop	{r4, pc}
 800cac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800caca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cace:	e7f7      	b.n	800cac0 <memmove+0x24>

0800cad0 <_realloc_r>:
 800cad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad4:	4680      	mov	r8, r0
 800cad6:	4614      	mov	r4, r2
 800cad8:	460e      	mov	r6, r1
 800cada:	b921      	cbnz	r1, 800cae6 <_realloc_r+0x16>
 800cadc:	4611      	mov	r1, r2
 800cade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cae2:	f7ff bbc1 	b.w	800c268 <_malloc_r>
 800cae6:	b92a      	cbnz	r2, 800caf4 <_realloc_r+0x24>
 800cae8:	f7ff fb56 	bl	800c198 <_free_r>
 800caec:	4625      	mov	r5, r4
 800caee:	4628      	mov	r0, r5
 800caf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf4:	f000 f81b 	bl	800cb2e <_malloc_usable_size_r>
 800caf8:	4284      	cmp	r4, r0
 800cafa:	4607      	mov	r7, r0
 800cafc:	d802      	bhi.n	800cb04 <_realloc_r+0x34>
 800cafe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb02:	d812      	bhi.n	800cb2a <_realloc_r+0x5a>
 800cb04:	4621      	mov	r1, r4
 800cb06:	4640      	mov	r0, r8
 800cb08:	f7ff fbae 	bl	800c268 <_malloc_r>
 800cb0c:	4605      	mov	r5, r0
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	d0ed      	beq.n	800caee <_realloc_r+0x1e>
 800cb12:	42bc      	cmp	r4, r7
 800cb14:	4622      	mov	r2, r4
 800cb16:	4631      	mov	r1, r6
 800cb18:	bf28      	it	cs
 800cb1a:	463a      	movcs	r2, r7
 800cb1c:	f7ff ffb0 	bl	800ca80 <memcpy>
 800cb20:	4631      	mov	r1, r6
 800cb22:	4640      	mov	r0, r8
 800cb24:	f7ff fb38 	bl	800c198 <_free_r>
 800cb28:	e7e1      	b.n	800caee <_realloc_r+0x1e>
 800cb2a:	4635      	mov	r5, r6
 800cb2c:	e7df      	b.n	800caee <_realloc_r+0x1e>

0800cb2e <_malloc_usable_size_r>:
 800cb2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb32:	1f18      	subs	r0, r3, #4
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	bfbc      	itt	lt
 800cb38:	580b      	ldrlt	r3, [r1, r0]
 800cb3a:	18c0      	addlt	r0, r0, r3
 800cb3c:	4770      	bx	lr
	...

0800cb40 <_init>:
 800cb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb42:	bf00      	nop
 800cb44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb46:	bc08      	pop	{r3}
 800cb48:	469e      	mov	lr, r3
 800cb4a:	4770      	bx	lr

0800cb4c <_fini>:
 800cb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4e:	bf00      	nop
 800cb50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb52:	bc08      	pop	{r3}
 800cb54:	469e      	mov	lr, r3
 800cb56:	4770      	bx	lr
