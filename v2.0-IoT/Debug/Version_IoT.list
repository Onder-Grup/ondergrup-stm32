
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bba4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  0800bd88  0800bd88  0001bd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb4c  0800cb4c  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cb4c  0800cb4c  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cb4c  0800cb4c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb4c  0800cb4c  0001cb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb50  0800cb50  0001cb50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800cb54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200000b4  0800cc08  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800cc08  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001212e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023f5  00000000  00000000  0003224e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  00034648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd0  00000000  00000000  000357b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002150  00000000  00000000  00036580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170eb  00000000  00000000  000386d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ebc6  00000000  00000000  0004f7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b60  00000000  00000000  000ee384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f2ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000b4 	.word	0x200000b4
 8000200:	00000000 	.word	0x00000000
 8000204:	0800bd70 	.word	0x0800bd70

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000b8 	.word	0x200000b8
 8000220:	0800bd70 	.word	0x0800bd70

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af02      	add	r7, sp, #8
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f023 030f 	bic.w	r3, r3, #15
 8000244:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	011b      	lsls	r3, r3, #4
 800024a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800024c:	7b7b      	ldrb	r3, [r7, #13]
 800024e:	f043 030c 	orr.w	r3, r3, #12
 8000252:	b2db      	uxtb	r3, r3
 8000254:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000256:	7b7b      	ldrb	r3, [r7, #13]
 8000258:	f043 0308 	orr.w	r3, r3, #8
 800025c:	b2db      	uxtb	r3, r3
 800025e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000260:	7b3b      	ldrb	r3, [r7, #12]
 8000262:	f043 030c 	orr.w	r3, r3, #12
 8000266:	b2db      	uxtb	r3, r3
 8000268:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800026a:	7b3b      	ldrb	r3, [r7, #12]
 800026c:	f043 0308 	orr.w	r3, r3, #8
 8000270:	b2db      	uxtb	r3, r3
 8000272:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000274:	bf00      	nop
 8000276:	4825      	ldr	r0, [pc, #148]	; (800030c <lcd_send_cmd+0xd8>)
 8000278:	f009 fb2f 	bl	80098da <HAL_I2C_GetError>
 800027c:	4603      	mov	r3, r0
 800027e:	2b04      	cmp	r3, #4
 8000280:	d0f9      	beq.n	8000276 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000282:	bf00      	nop
 8000284:	4821      	ldr	r0, [pc, #132]	; (800030c <lcd_send_cmd+0xd8>)
 8000286:	f009 fb1b 	bl	80098c0 <HAL_I2C_GetState>
 800028a:	4603      	mov	r3, r0
 800028c:	2b20      	cmp	r3, #32
 800028e:	d1f9      	bne.n	8000284 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000290:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <lcd_send_cmd+0xdc>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d116      	bne.n	80002c6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000298:	2300      	movs	r3, #0
 800029a:	73fb      	strb	r3, [r7, #15]
 800029c:	e00f      	b.n	80002be <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	3310      	adds	r3, #16
 80002a2:	443b      	add	r3, r7
 80002a4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	f022 0208 	bic.w	r2, r2, #8
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	3310      	adds	r3, #16
 80002b2:	443b      	add	r3, r7
 80002b4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002b8:	7bfb      	ldrb	r3, [r7, #15]
 80002ba:	3301      	adds	r3, #1
 80002bc:	73fb      	strb	r3, [r7, #15]
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	d9ec      	bls.n	800029e <lcd_send_cmd+0x6a>
 80002c4:	e015      	b.n	80002f2 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80002c6:	2300      	movs	r3, #0
 80002c8:	73bb      	strb	r3, [r7, #14]
 80002ca:	e00f      	b.n	80002ec <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80002cc:	7bbb      	ldrb	r3, [r7, #14]
 80002ce:	3310      	adds	r3, #16
 80002d0:	443b      	add	r3, r7
 80002d2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002d6:	7bbb      	ldrb	r3, [r7, #14]
 80002d8:	f042 0208 	orr.w	r2, r2, #8
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	3310      	adds	r3, #16
 80002e0:	443b      	add	r3, r7
 80002e2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002e6:	7bbb      	ldrb	r3, [r7, #14]
 80002e8:	3301      	adds	r3, #1
 80002ea:	73bb      	strb	r3, [r7, #14]
 80002ec:	7bbb      	ldrb	r3, [r7, #14]
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	d9ec      	bls.n	80002cc <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002f2:	f107 0208 	add.w	r2, r7, #8
 80002f6:	2364      	movs	r3, #100	; 0x64
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2304      	movs	r3, #4
 80002fc:	214e      	movs	r1, #78	; 0x4e
 80002fe:	4803      	ldr	r0, [pc, #12]	; (800030c <lcd_send_cmd+0xd8>)
 8000300:	f008 fe7e 	bl	8009000 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	200000fc 	.word	0x200000fc
 8000310:	200000d0 	.word	0x200000d0

08000314 <lcd_send_data>:

void lcd_send_data (char data) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af02      	add	r7, sp, #8
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	f023 030f 	bic.w	r3, r3, #15
 8000324:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	011b      	lsls	r3, r3, #4
 800032a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800032c:	7b7b      	ldrb	r3, [r7, #13]
 800032e:	f043 030d 	orr.w	r3, r3, #13
 8000332:	b2db      	uxtb	r3, r3
 8000334:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000336:	7b7b      	ldrb	r3, [r7, #13]
 8000338:	f043 0309 	orr.w	r3, r3, #9
 800033c:	b2db      	uxtb	r3, r3
 800033e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000340:	7b3b      	ldrb	r3, [r7, #12]
 8000342:	f043 030d 	orr.w	r3, r3, #13
 8000346:	b2db      	uxtb	r3, r3
 8000348:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800034a:	7b3b      	ldrb	r3, [r7, #12]
 800034c:	f043 0309 	orr.w	r3, r3, #9
 8000350:	b2db      	uxtb	r3, r3
 8000352:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000354:	bf00      	nop
 8000356:	4825      	ldr	r0, [pc, #148]	; (80003ec <lcd_send_data+0xd8>)
 8000358:	f009 fabf 	bl	80098da <HAL_I2C_GetError>
 800035c:	4603      	mov	r3, r0
 800035e:	2b04      	cmp	r3, #4
 8000360:	d0f9      	beq.n	8000356 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000362:	bf00      	nop
 8000364:	4821      	ldr	r0, [pc, #132]	; (80003ec <lcd_send_data+0xd8>)
 8000366:	f009 faab 	bl	80098c0 <HAL_I2C_GetState>
 800036a:	4603      	mov	r3, r0
 800036c:	2b20      	cmp	r3, #32
 800036e:	d1f9      	bne.n	8000364 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <lcd_send_data+0xdc>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d116      	bne.n	80003a6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]
 800037c:	e00f      	b.n	800039e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	3310      	adds	r3, #16
 8000382:	443b      	add	r3, r7
 8000384:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	f022 0208 	bic.w	r2, r2, #8
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	3310      	adds	r3, #16
 8000392:	443b      	add	r3, r7
 8000394:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	3301      	adds	r3, #1
 800039c:	73fb      	strb	r3, [r7, #15]
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d9ec      	bls.n	800037e <lcd_send_data+0x6a>
 80003a4:	e015      	b.n	80003d2 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003a6:	2300      	movs	r3, #0
 80003a8:	73bb      	strb	r3, [r7, #14]
 80003aa:	e00f      	b.n	80003cc <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80003ac:	7bbb      	ldrb	r3, [r7, #14]
 80003ae:	3310      	adds	r3, #16
 80003b0:	443b      	add	r3, r7
 80003b2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003b6:	7bbb      	ldrb	r3, [r7, #14]
 80003b8:	f042 0208 	orr.w	r2, r2, #8
 80003bc:	b2d2      	uxtb	r2, r2
 80003be:	3310      	adds	r3, #16
 80003c0:	443b      	add	r3, r7
 80003c2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003c6:	7bbb      	ldrb	r3, [r7, #14]
 80003c8:	3301      	adds	r3, #1
 80003ca:	73bb      	strb	r3, [r7, #14]
 80003cc:	7bbb      	ldrb	r3, [r7, #14]
 80003ce:	2b03      	cmp	r3, #3
 80003d0:	d9ec      	bls.n	80003ac <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003d2:	f107 0208 	add.w	r2, r7, #8
 80003d6:	2364      	movs	r3, #100	; 0x64
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	2304      	movs	r3, #4
 80003dc:	214e      	movs	r1, #78	; 0x4e
 80003de:	4803      	ldr	r0, [pc, #12]	; (80003ec <lcd_send_data+0xd8>)
 80003e0:	f008 fe0e 	bl	8009000 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	200000fc 	.word	0x200000fc
 80003f0:	200000d0 	.word	0x200000d0

080003f4 <lcd_send_string>:

void lcd_send_string (char *str) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	while (*str) {
 80003fc:	e006      	b.n	800040c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	607a      	str	r2, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff84 	bl	8000314 <lcd_send_data>
	while (*str) {
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1f4      	bne.n	80003fe <lcd_send_string+0xa>
	}
}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af02      	add	r7, sp, #8
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	f023 030f 	bic.w	r3, r3, #15
 8000430:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8000438:	7b7b      	ldrb	r3, [r7, #13]
 800043a:	f043 030d 	orr.w	r3, r3, #13
 800043e:	b2db      	uxtb	r3, r3
 8000440:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000442:	7b7b      	ldrb	r3, [r7, #13]
 8000444:	f043 0309 	orr.w	r3, r3, #9
 8000448:	b2db      	uxtb	r3, r3
 800044a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800044c:	7b3b      	ldrb	r3, [r7, #12]
 800044e:	f043 030d 	orr.w	r3, r3, #13
 8000452:	b2db      	uxtb	r3, r3
 8000454:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8000456:	7b3b      	ldrb	r3, [r7, #12]
 8000458:	f043 0309 	orr.w	r3, r3, #9
 800045c:	b2db      	uxtb	r3, r3
 800045e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000460:	bf00      	nop
 8000462:	4825      	ldr	r0, [pc, #148]	; (80004f8 <lcd_send_char+0xd8>)
 8000464:	f009 fa39 	bl	80098da <HAL_I2C_GetError>
 8000468:	4603      	mov	r3, r0
 800046a:	2b04      	cmp	r3, #4
 800046c:	d0f9      	beq.n	8000462 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800046e:	bf00      	nop
 8000470:	4821      	ldr	r0, [pc, #132]	; (80004f8 <lcd_send_char+0xd8>)
 8000472:	f009 fa25 	bl	80098c0 <HAL_I2C_GetState>
 8000476:	4603      	mov	r3, r0
 8000478:	2b20      	cmp	r3, #32
 800047a:	d1f9      	bne.n	8000470 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 800047c:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <lcd_send_char+0xdc>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d116      	bne.n	80004b2 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000484:	2300      	movs	r3, #0
 8000486:	73fb      	strb	r3, [r7, #15]
 8000488:	e00f      	b.n	80004aa <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800048a:	7bfb      	ldrb	r3, [r7, #15]
 800048c:	3310      	adds	r3, #16
 800048e:	443b      	add	r3, r7
 8000490:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	f022 0208 	bic.w	r2, r2, #8
 800049a:	b2d2      	uxtb	r2, r2
 800049c:	3310      	adds	r3, #16
 800049e:	443b      	add	r3, r7
 80004a0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	3301      	adds	r3, #1
 80004a8:	73fb      	strb	r3, [r7, #15]
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d9ec      	bls.n	800048a <lcd_send_char+0x6a>
 80004b0:	e015      	b.n	80004de <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80004b2:	2300      	movs	r3, #0
 80004b4:	73bb      	strb	r3, [r7, #14]
 80004b6:	e00f      	b.n	80004d8 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80004b8:	7bbb      	ldrb	r3, [r7, #14]
 80004ba:	3310      	adds	r3, #16
 80004bc:	443b      	add	r3, r7
 80004be:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004c2:	7bbb      	ldrb	r3, [r7, #14]
 80004c4:	f042 0208 	orr.w	r2, r2, #8
 80004c8:	b2d2      	uxtb	r2, r2
 80004ca:	3310      	adds	r3, #16
 80004cc:	443b      	add	r3, r7
 80004ce:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80004d2:	7bbb      	ldrb	r3, [r7, #14]
 80004d4:	3301      	adds	r3, #1
 80004d6:	73bb      	strb	r3, [r7, #14]
 80004d8:	7bbb      	ldrb	r3, [r7, #14]
 80004da:	2b03      	cmp	r3, #3
 80004dc:	d9ec      	bls.n	80004b8 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80004de:	f107 0208 	add.w	r2, r7, #8
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2304      	movs	r3, #4
 80004e8:	214e      	movs	r1, #78	; 0x4e
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <lcd_send_char+0xd8>)
 80004ec:	f008 fd88 	bl	8009000 <HAL_I2C_Master_Transmit>
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200000fc 	.word	0x200000fc
 80004fc:	200000d0 	.word	0x200000d0

08000500 <lcd_init>:

void lcd_init (void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000504:	2002      	movs	r0, #2
 8000506:	f7ff fe95 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800050a:	2028      	movs	r0, #40	; 0x28
 800050c:	f7ff fe92 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000510:	200c      	movs	r0, #12
 8000512:	f7ff fe8f 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000516:	2080      	movs	r0, #128	; 0x80
 8000518:	f7ff fe8c 	bl	8000234 <lcd_send_cmd>
	lcd_backlight(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f000 f86d 	bl	80005fc <lcd_backlight>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}

08000526 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	460a      	mov	r2, r1
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	4613      	mov	r3, r2
 8000534:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d106      	bne.n	800054a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800053c:	79bb      	ldrb	r3, [r7, #6]
 800053e:	337f      	adds	r3, #127	; 0x7f
 8000540:	b2db      	uxtb	r3, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fe76 	bl	8000234 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8000548:	e008      	b.n	800055c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d105      	bne.n	800055c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	3b41      	subs	r3, #65	; 0x41
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fe6c 	bl	8000234 <lcd_send_cmd>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	603a      	str	r2, [r7, #0]
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	460b      	mov	r3, r1
 8000572:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000574:	79ba      	ldrb	r2, [r7, #6]
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4611      	mov	r1, r2
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ffd3 	bl	8000526 <lcd_gotoxy>
	lcd_send_string(str);
 8000580:	6838      	ldr	r0, [r7, #0]
 8000582:	f7ff ff37 	bl	80003f4 <lcd_send_string>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	4603      	mov	r3, r0
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	460b      	mov	r3, r1
 800059a:	71bb      	strb	r3, [r7, #6]
 800059c:	4613      	mov	r3, r2
 800059e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80005a0:	79ba      	ldrb	r2, [r7, #6]
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ffbd 	bl	8000526 <lcd_gotoxy>
    lcd_send_char(ch);
 80005ac:	797b      	ldrb	r3, [r7, #5]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff36 	bl	8000420 <lcd_send_char>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <lcd_clear>:

void lcd_clear(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff fe37 	bl	8000234 <lcd_send_cmd>
    HAL_Delay(2);
 80005c6:	2002      	movs	r0, #2
 80005c8:	f007 fd8e 	bl	80080e8 <HAL_Delay>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	460a      	mov	r2, r1
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	4613      	mov	r3, r2
 80005de:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80005e0:	79ba      	ldrb	r2, [r7, #6]
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	4611      	mov	r1, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff9d 	bl	8000526 <lcd_gotoxy>

    lcd_send_char(' ');
 80005ec:	2020      	movs	r0, #32
 80005ee:	f7ff ff17 	bl	8000420 <lcd_send_char>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <lcd_backlight+0x20>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff fe11 	bl	8000234 <lcd_send_cmd>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000d0 	.word	0x200000d0

08000620 <lcd_cursor>:

void lcd_cursor(int state) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d106      	bne.n	800063c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 800062e:	200e      	movs	r0, #14
 8000630:	f7ff fe00 	bl	8000234 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000634:	200f      	movs	r0, #15
 8000636:	f7ff fdfd 	bl	8000234 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800063a:	e002      	b.n	8000642 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 800063c:	200c      	movs	r0, #12
 800063e:	f7ff fdf9 	bl	8000234 <lcd_send_cmd>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000650:	f3bf 8f4f 	dsb	sy
}
 8000654:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <__NVIC_SystemReset+0x24>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800065e:	4904      	ldr	r1, [pc, #16]	; (8000670 <__NVIC_SystemReset+0x24>)
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_SystemReset+0x28>)
 8000662:	4313      	orrs	r3, r2
 8000664:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000666:	f3bf 8f4f 	dsb	sy
}
 800066a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <__NVIC_SystemReset+0x20>
 8000670:	e000ed00 	.word	0xe000ed00
 8000674:	05fa0004 	.word	0x05fa0004

08000678 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000682:	20c8      	movs	r0, #200	; 0xc8
 8000684:	f007 fd30 	bl	80080e8 <HAL_Delay>
	lcd_clear();
 8000688:	f7ff ff98 	bl	80005bc <lcd_clear>
	if(type == 1 && page == 0) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d143      	bne.n	800071a <printTemplate+0xa2>
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d140      	bne.n	800071a <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000698:	4a9d      	ldr	r2, [pc, #628]	; (8000910 <printTemplate+0x298>)
 800069a:	2101      	movs	r1, #1
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ff61 	bl	8000564 <lcd_print>
		lcd_print(2, 3, "0");
 80006a2:	4a9c      	ldr	r2, [pc, #624]	; (8000914 <printTemplate+0x29c>)
 80006a4:	2103      	movs	r1, #3
 80006a6:	2002      	movs	r0, #2
 80006a8:	f7ff ff5c 	bl	8000564 <lcd_print>
		lcd_print(2, 4, "1");
 80006ac:	4a9a      	ldr	r2, [pc, #616]	; (8000918 <printTemplate+0x2a0>)
 80006ae:	2104      	movs	r1, #4
 80006b0:	2002      	movs	r0, #2
 80006b2:	f7ff ff57 	bl	8000564 <lcd_print>
		lcd_print(2, 5, "2");
 80006b6:	4a99      	ldr	r2, [pc, #612]	; (800091c <printTemplate+0x2a4>)
 80006b8:	2105      	movs	r1, #5
 80006ba:	2002      	movs	r0, #2
 80006bc:	f7ff ff52 	bl	8000564 <lcd_print>
		lcd_print(2, 6, "3");
 80006c0:	4a97      	ldr	r2, [pc, #604]	; (8000920 <printTemplate+0x2a8>)
 80006c2:	2106      	movs	r1, #6
 80006c4:	2002      	movs	r0, #2
 80006c6:	f7ff ff4d 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "4");
 80006ca:	4a96      	ldr	r2, [pc, #600]	; (8000924 <printTemplate+0x2ac>)
 80006cc:	2107      	movs	r1, #7
 80006ce:	2002      	movs	r0, #2
 80006d0:	f7ff ff48 	bl	8000564 <lcd_print>
		lcd_print(2, 10, "5");
 80006d4:	4a94      	ldr	r2, [pc, #592]	; (8000928 <printTemplate+0x2b0>)
 80006d6:	210a      	movs	r1, #10
 80006d8:	2002      	movs	r0, #2
 80006da:	f7ff ff43 	bl	8000564 <lcd_print>
		lcd_print(2, 11, "6");
 80006de:	4a93      	ldr	r2, [pc, #588]	; (800092c <printTemplate+0x2b4>)
 80006e0:	210b      	movs	r1, #11
 80006e2:	2002      	movs	r0, #2
 80006e4:	f7ff ff3e 	bl	8000564 <lcd_print>
		lcd_print(2, 12, "7");
 80006e8:	4a91      	ldr	r2, [pc, #580]	; (8000930 <printTemplate+0x2b8>)
 80006ea:	210c      	movs	r1, #12
 80006ec:	2002      	movs	r0, #2
 80006ee:	f7ff ff39 	bl	8000564 <lcd_print>
		lcd_print(2, 13, "8");
 80006f2:	4a90      	ldr	r2, [pc, #576]	; (8000934 <printTemplate+0x2bc>)
 80006f4:	210d      	movs	r1, #13
 80006f6:	2002      	movs	r0, #2
 80006f8:	f7ff ff34 	bl	8000564 <lcd_print>
		lcd_print(2, 14, "9");
 80006fc:	4a8e      	ldr	r2, [pc, #568]	; (8000938 <printTemplate+0x2c0>)
 80006fe:	210e      	movs	r1, #14
 8000700:	2002      	movs	r0, #2
 8000702:	f7ff ff2f 	bl	8000564 <lcd_print>
		lcd_print(1, 5, machineID);
 8000706:	4a8d      	ldr	r2, [pc, #564]	; (800093c <printTemplate+0x2c4>)
 8000708:	2105      	movs	r1, #5
 800070a:	2001      	movs	r0, #1
 800070c:	f7ff ff2a 	bl	8000564 <lcd_print>
		lcd_gotoxy(2, 3);
 8000710:	2103      	movs	r1, #3
 8000712:	2002      	movs	r0, #2
 8000714:	f7ff ff07 	bl	8000526 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000718:	e0f5      	b.n	8000906 <printTemplate+0x28e>
	} else if(type == 2) {
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d178      	bne.n	8000812 <printTemplate+0x19a>
		if(page == 1) {
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d114      	bne.n	8000750 <printTemplate+0xd8>
			lcd_clear();
 8000726:	f7ff ff49 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 800072a:	2064      	movs	r0, #100	; 0x64
 800072c:	f007 fcdc 	bl	80080e8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000730:	4a83      	ldr	r2, [pc, #524]	; (8000940 <printTemplate+0x2c8>)
 8000732:	2101      	movs	r1, #1
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff ff15 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800073a:	4a82      	ldr	r2, [pc, #520]	; (8000944 <printTemplate+0x2cc>)
 800073c:	2107      	movs	r1, #7
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff ff10 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000744:	4a80      	ldr	r2, [pc, #512]	; (8000948 <printTemplate+0x2d0>)
 8000746:	2101      	movs	r1, #1
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff ff0b 	bl	8000564 <lcd_print>
}
 800074e:	e0da      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 2) {
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d114      	bne.n	8000780 <printTemplate+0x108>
			lcd_clear();
 8000756:	f7ff ff31 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 800075a:	2064      	movs	r0, #100	; 0x64
 800075c:	f007 fcc4 	bl	80080e8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000760:	4a77      	ldr	r2, [pc, #476]	; (8000940 <printTemplate+0x2c8>)
 8000762:	2101      	movs	r1, #1
 8000764:	2001      	movs	r0, #1
 8000766:	f7ff fefd 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800076a:	4a76      	ldr	r2, [pc, #472]	; (8000944 <printTemplate+0x2cc>)
 800076c:	2107      	movs	r1, #7
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff fef8 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000774:	4a75      	ldr	r2, [pc, #468]	; (800094c <printTemplate+0x2d4>)
 8000776:	2101      	movs	r1, #1
 8000778:	2002      	movs	r0, #2
 800077a:	f7ff fef3 	bl	8000564 <lcd_print>
}
 800077e:	e0c2      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 3) {
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d114      	bne.n	80007b0 <printTemplate+0x138>
			lcd_clear();
 8000786:	f7ff ff19 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 800078a:	2064      	movs	r0, #100	; 0x64
 800078c:	f007 fcac 	bl	80080e8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000790:	4a6b      	ldr	r2, [pc, #428]	; (8000940 <printTemplate+0x2c8>)
 8000792:	2101      	movs	r1, #1
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff fee5 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800079a:	4a6a      	ldr	r2, [pc, #424]	; (8000944 <printTemplate+0x2cc>)
 800079c:	2107      	movs	r1, #7
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff fee0 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80007a4:	4a6a      	ldr	r2, [pc, #424]	; (8000950 <printTemplate+0x2d8>)
 80007a6:	2101      	movs	r1, #1
 80007a8:	2002      	movs	r0, #2
 80007aa:	f7ff fedb 	bl	8000564 <lcd_print>
}
 80007ae:	e0aa      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 4) {
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	d114      	bne.n	80007e0 <printTemplate+0x168>
			lcd_clear();
 80007b6:	f7ff ff01 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80007ba:	2064      	movs	r0, #100	; 0x64
 80007bc:	f007 fc94 	bl	80080e8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80007c0:	4a5f      	ldr	r2, [pc, #380]	; (8000940 <printTemplate+0x2c8>)
 80007c2:	2101      	movs	r1, #1
 80007c4:	2001      	movs	r0, #1
 80007c6:	f7ff fecd 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80007ca:	4a5e      	ldr	r2, [pc, #376]	; (8000944 <printTemplate+0x2cc>)
 80007cc:	2107      	movs	r1, #7
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff fec8 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80007d4:	4a5f      	ldr	r2, [pc, #380]	; (8000954 <printTemplate+0x2dc>)
 80007d6:	2101      	movs	r1, #1
 80007d8:	2002      	movs	r0, #2
 80007da:	f7ff fec3 	bl	8000564 <lcd_print>
}
 80007de:	e092      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 5) {
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	2b05      	cmp	r3, #5
 80007e4:	f040 808f 	bne.w	8000906 <printTemplate+0x28e>
			lcd_clear();
 80007e8:	f7ff fee8 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80007ec:	2064      	movs	r0, #100	; 0x64
 80007ee:	f007 fc7b 	bl	80080e8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80007f2:	4a53      	ldr	r2, [pc, #332]	; (8000940 <printTemplate+0x2c8>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff feb4 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80007fc:	4a51      	ldr	r2, [pc, #324]	; (8000944 <printTemplate+0x2cc>)
 80007fe:	2107      	movs	r1, #7
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff feaf 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000806:	4a54      	ldr	r2, [pc, #336]	; (8000958 <printTemplate+0x2e0>)
 8000808:	2101      	movs	r1, #1
 800080a:	2002      	movs	r0, #2
 800080c:	f7ff feaa 	bl	8000564 <lcd_print>
}
 8000810:	e079      	b.n	8000906 <printTemplate+0x28e>
	} else if(type == 3) {
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b03      	cmp	r3, #3
 8000816:	d176      	bne.n	8000906 <printTemplate+0x28e>
		if(page == 1) {
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d114      	bne.n	8000848 <printTemplate+0x1d0>
			lcd_clear();
 800081e:	f7ff fecd 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000822:	2064      	movs	r0, #100	; 0x64
 8000824:	f007 fc60 	bl	80080e8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000828:	4a4c      	ldr	r2, [pc, #304]	; (800095c <printTemplate+0x2e4>)
 800082a:	2101      	movs	r1, #1
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff fe99 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000832:	4a4b      	ldr	r2, [pc, #300]	; (8000960 <printTemplate+0x2e8>)
 8000834:	2107      	movs	r1, #7
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff fe94 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800083c:	4a42      	ldr	r2, [pc, #264]	; (8000948 <printTemplate+0x2d0>)
 800083e:	2101      	movs	r1, #1
 8000840:	2002      	movs	r0, #2
 8000842:	f7ff fe8f 	bl	8000564 <lcd_print>
}
 8000846:	e05e      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 2) {
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d114      	bne.n	8000878 <printTemplate+0x200>
			lcd_clear();
 800084e:	f7ff feb5 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000852:	2064      	movs	r0, #100	; 0x64
 8000854:	f007 fc48 	bl	80080e8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000858:	4a40      	ldr	r2, [pc, #256]	; (800095c <printTemplate+0x2e4>)
 800085a:	2101      	movs	r1, #1
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff fe81 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000862:	4a3f      	ldr	r2, [pc, #252]	; (8000960 <printTemplate+0x2e8>)
 8000864:	2107      	movs	r1, #7
 8000866:	2001      	movs	r0, #1
 8000868:	f7ff fe7c 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800086c:	4a37      	ldr	r2, [pc, #220]	; (800094c <printTemplate+0x2d4>)
 800086e:	2101      	movs	r1, #1
 8000870:	2002      	movs	r0, #2
 8000872:	f7ff fe77 	bl	8000564 <lcd_print>
}
 8000876:	e046      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 3) {
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2b03      	cmp	r3, #3
 800087c:	d114      	bne.n	80008a8 <printTemplate+0x230>
			lcd_clear();
 800087e:	f7ff fe9d 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000882:	2064      	movs	r0, #100	; 0x64
 8000884:	f007 fc30 	bl	80080e8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000888:	4a34      	ldr	r2, [pc, #208]	; (800095c <printTemplate+0x2e4>)
 800088a:	2101      	movs	r1, #1
 800088c:	2001      	movs	r0, #1
 800088e:	f7ff fe69 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000892:	4a33      	ldr	r2, [pc, #204]	; (8000960 <printTemplate+0x2e8>)
 8000894:	2107      	movs	r1, #7
 8000896:	2001      	movs	r0, #1
 8000898:	f7ff fe64 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 800089c:	4a2c      	ldr	r2, [pc, #176]	; (8000950 <printTemplate+0x2d8>)
 800089e:	2101      	movs	r1, #1
 80008a0:	2002      	movs	r0, #2
 80008a2:	f7ff fe5f 	bl	8000564 <lcd_print>
}
 80008a6:	e02e      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 4) {
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	d114      	bne.n	80008d8 <printTemplate+0x260>
			lcd_clear();
 80008ae:	f7ff fe85 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80008b2:	2064      	movs	r0, #100	; 0x64
 80008b4:	f007 fc18 	bl	80080e8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80008b8:	4a28      	ldr	r2, [pc, #160]	; (800095c <printTemplate+0x2e4>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	2001      	movs	r0, #1
 80008be:	f7ff fe51 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80008c2:	4a27      	ldr	r2, [pc, #156]	; (8000960 <printTemplate+0x2e8>)
 80008c4:	2107      	movs	r1, #7
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff fe4c 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <printTemplate+0x2dc>)
 80008ce:	2101      	movs	r1, #1
 80008d0:	2002      	movs	r0, #2
 80008d2:	f7ff fe47 	bl	8000564 <lcd_print>
}
 80008d6:	e016      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 5) {
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	2b05      	cmp	r3, #5
 80008dc:	d113      	bne.n	8000906 <printTemplate+0x28e>
			lcd_clear();
 80008de:	f7ff fe6d 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80008e2:	2064      	movs	r0, #100	; 0x64
 80008e4:	f007 fc00 	bl	80080e8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80008e8:	4a1c      	ldr	r2, [pc, #112]	; (800095c <printTemplate+0x2e4>)
 80008ea:	2101      	movs	r1, #1
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff fe39 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80008f2:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <printTemplate+0x2e8>)
 80008f4:	2107      	movs	r1, #7
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff fe34 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 80008fc:	4a16      	ldr	r2, [pc, #88]	; (8000958 <printTemplate+0x2e0>)
 80008fe:	2101      	movs	r1, #1
 8000900:	2002      	movs	r0, #2
 8000902:	f7ff fe2f 	bl	8000564 <lcd_print>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	0800bd88 	.word	0x0800bd88
 8000914:	0800bd90 	.word	0x0800bd90
 8000918:	0800bd94 	.word	0x0800bd94
 800091c:	0800bd98 	.word	0x0800bd98
 8000920:	0800bd9c 	.word	0x0800bd9c
 8000924:	0800bda0 	.word	0x0800bda0
 8000928:	0800bda4 	.word	0x0800bda4
 800092c:	0800bda8 	.word	0x0800bda8
 8000930:	0800bdac 	.word	0x0800bdac
 8000934:	0800bdb0 	.word	0x0800bdb0
 8000938:	0800bdb4 	.word	0x0800bdb4
 800093c:	20000278 	.word	0x20000278
 8000940:	0800bdb8 	.word	0x0800bdb8
 8000944:	20000284 	.word	0x20000284
 8000948:	0800bdc0 	.word	0x0800bdc0
 800094c:	0800bdd4 	.word	0x0800bdd4
 8000950:	0800bde8 	.word	0x0800bde8
 8000954:	0800bdfc 	.word	0x0800bdfc
 8000958:	0800be10 	.word	0x0800be10
 800095c:	0800be24 	.word	0x0800be24
 8000960:	20000298 	.word	0x20000298

08000964 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <getCharFromCursorPosition+0x1c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	781b      	ldrb	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000050 	.word	0x20000050

08000984 <takeMachineID>:
		strncpy(wifiPass, (char *)&eepromData[passStartPos], 20);
		wifiPass[20] = '\0';
	}
}

void takeMachineID(int state) {
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b08b      	sub	sp, #44	; 0x2c
 8000988:	af04      	add	r7, sp, #16
 800098a:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff fe47 	bl	8000620 <lcd_cursor>

    int cursorPosition = 3;
 8000992:	2303      	movs	r3, #3
 8000994:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 800099a:	2305      	movs	r3, #5
 800099c:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d104      	bne.n	80009ae <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 80009a4:	220c      	movs	r2, #12
 80009a6:	2100      	movs	r1, #0
 80009a8:	4899      	ldr	r0, [pc, #612]	; (8000c10 <takeMachineID+0x28c>)
 80009aa:	f00b f9a7 	bl	800bcfc <memset>
    }
    HAL_Delay(100);
 80009ae:	2064      	movs	r0, #100	; 0x64
 80009b0:	f007 fb9a 	bl	80080e8 <HAL_Delay>

    printTemplate(1, 0);
 80009b4:	2100      	movs	r1, #0
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff fe5e 	bl	8000678 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80009bc:	2108      	movs	r1, #8
 80009be:	4895      	ldr	r0, [pc, #596]	; (8000c14 <takeMachineID+0x290>)
 80009c0:	f008 f962 	bl	8008c88 <HAL_GPIO_ReadPin>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d138      	bne.n	8000a3c <takeMachineID+0xb8>
        	lcd_cursor(0);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff fe28 	bl	8000620 <lcd_cursor>

        	if(machineID[11] == '\0') {
 80009d0:	4b8f      	ldr	r3, [pc, #572]	; (8000c10 <takeMachineID+0x28c>)
 80009d2:	7adb      	ldrb	r3, [r3, #11]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d110      	bne.n	80009fa <takeMachineID+0x76>
        		lcd_clear();
 80009d8:	f7ff fdf0 	bl	80005bc <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 80009dc:	4a8e      	ldr	r2, [pc, #568]	; (8000c18 <takeMachineID+0x294>)
 80009de:	2101      	movs	r1, #1
 80009e0:	2001      	movs	r0, #1
 80009e2:	f7ff fdbf 	bl	8000564 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 80009e6:	4a8d      	ldr	r2, [pc, #564]	; (8000c1c <takeMachineID+0x298>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff fdba 	bl	8000564 <lcd_print>
        		HAL_Delay(1200);
 80009f0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80009f4:	f007 fb78 	bl	80080e8 <HAL_Delay>
        		goto mainSection;
 80009f8:	e7c8      	b.n	800098c <takeMachineID+0x8>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, 12);
 80009fa:	4b89      	ldr	r3, [pc, #548]	; (8000c20 <takeMachineID+0x29c>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b88      	ldr	r3, [pc, #544]	; (8000c24 <takeMachineID+0x2a0>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a82      	ldr	r2, [pc, #520]	; (8000c10 <takeMachineID+0x28c>)
 8000a06:	461c      	mov	r4, r3
 8000a08:	4613      	mov	r3, r2
 8000a0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a0c:	6020      	str	r0, [r4, #0]
 8000a0e:	6061      	str	r1, [r4, #4]
 8000a10:	60a2      	str	r2, [r4, #8]
        	HAL_Delay(200);
 8000a12:	20c8      	movs	r0, #200	; 0xc8
 8000a14:	f007 fb68 	bl	80080e8 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000a18:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a1c:	9302      	str	r3, [sp, #8]
 8000a1e:	236e      	movs	r3, #110	; 0x6e
 8000a20:	9301      	str	r3, [sp, #4]
 8000a22:	4b80      	ldr	r3, [pc, #512]	; (8000c24 <takeMachineID+0x2a0>)
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	236e      	movs	r3, #110	; 0x6e
 8000a28:	2200      	movs	r2, #0
 8000a2a:	21a0      	movs	r1, #160	; 0xa0
 8000a2c:	487e      	ldr	r0, [pc, #504]	; (8000c28 <takeMachineID+0x2a4>)
 8000a2e:	f008 fbe5 	bl	80091fc <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8000a32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a36:	f007 fb57 	bl	80080e8 <HAL_Delay>

            break;
 8000a3a:	e0e5      	b.n	8000c08 <takeMachineID+0x284>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4875      	ldr	r0, [pc, #468]	; (8000c14 <takeMachineID+0x290>)
 8000a40:	f008 f922 	bl	8008c88 <HAL_GPIO_ReadPin>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d112      	bne.n	8000a70 <takeMachineID+0xec>
        	if(cursorPosition == 7) {
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	2b07      	cmp	r3, #7
 8000a4e:	d102      	bne.n	8000a56 <takeMachineID+0xd2>
        		cursorPosition = 10;
 8000a50:	230a      	movs	r3, #10
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	e008      	b.n	8000a68 <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	2b0e      	cmp	r3, #14
 8000a5a:	d102      	bne.n	8000a62 <takeMachineID+0xde>
                cursorPosition = 3;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e002      	b.n	8000a68 <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000a68:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000a6c:	f007 fb3c 	bl	80080e8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000a70:	2108      	movs	r1, #8
 8000a72:	486e      	ldr	r0, [pc, #440]	; (8000c2c <takeMachineID+0x2a8>)
 8000a74:	f008 f908 	bl	8008c88 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d112      	bne.n	8000aa4 <takeMachineID+0x120>
            if (cursorPosition == 3) {
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d102      	bne.n	8000a8a <takeMachineID+0x106>
                cursorPosition = 14;
 8000a84:	230e      	movs	r3, #14
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	e008      	b.n	8000a9c <takeMachineID+0x118>
            } else if(cursorPosition == 10) {
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	2b0a      	cmp	r3, #10
 8000a8e:	d102      	bne.n	8000a96 <takeMachineID+0x112>
            	cursorPosition = 7;
 8000a90:	2307      	movs	r3, #7
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	e002      	b.n	8000a9c <takeMachineID+0x118>
            } else {
            	cursorPosition--;
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000a9c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000aa0:	f007 fb22 	bl	80080e8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	485b      	ldr	r0, [pc, #364]	; (8000c14 <takeMachineID+0x290>)
 8000aa8:	f008 f8ee 	bl	8008c88 <HAL_GPIO_ReadPin>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d16c      	bne.n	8000b8c <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d105      	bne.n	8000ac4 <takeMachineID+0x140>
        		machineID[machineIDLoc] = '0';
 8000ab8:	4a55      	ldr	r2, [pc, #340]	; (8000c10 <takeMachineID+0x28c>)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	4413      	add	r3, r2
 8000abe:	2230      	movs	r2, #48	; 0x30
 8000ac0:	701a      	strb	r2, [r3, #0]
 8000ac2:	e04f      	b.n	8000b64 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 4) {
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	d105      	bne.n	8000ad6 <takeMachineID+0x152>
        		machineID[machineIDLoc] = '1';
 8000aca:	4a51      	ldr	r2, [pc, #324]	; (8000c10 <takeMachineID+0x28c>)
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4413      	add	r3, r2
 8000ad0:	2231      	movs	r2, #49	; 0x31
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	e046      	b.n	8000b64 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 5) {
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	2b05      	cmp	r3, #5
 8000ada:	d105      	bne.n	8000ae8 <takeMachineID+0x164>
        		machineID[machineIDLoc] = '2';
 8000adc:	4a4c      	ldr	r2, [pc, #304]	; (8000c10 <takeMachineID+0x28c>)
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	2232      	movs	r2, #50	; 0x32
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	e03d      	b.n	8000b64 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 6) {
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d105      	bne.n	8000afa <takeMachineID+0x176>
        		machineID[machineIDLoc] = '3';
 8000aee:	4a48      	ldr	r2, [pc, #288]	; (8000c10 <takeMachineID+0x28c>)
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	4413      	add	r3, r2
 8000af4:	2233      	movs	r2, #51	; 0x33
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e034      	b.n	8000b64 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 7) {
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	2b07      	cmp	r3, #7
 8000afe:	d105      	bne.n	8000b0c <takeMachineID+0x188>
        		machineID[machineIDLoc] = '4';
 8000b00:	4a43      	ldr	r2, [pc, #268]	; (8000c10 <takeMachineID+0x28c>)
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	4413      	add	r3, r2
 8000b06:	2234      	movs	r2, #52	; 0x34
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	e02b      	b.n	8000b64 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 10) {
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	2b0a      	cmp	r3, #10
 8000b10:	d105      	bne.n	8000b1e <takeMachineID+0x19a>
        		machineID[machineIDLoc] = '5';
 8000b12:	4a3f      	ldr	r2, [pc, #252]	; (8000c10 <takeMachineID+0x28c>)
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	4413      	add	r3, r2
 8000b18:	2235      	movs	r2, #53	; 0x35
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	e022      	b.n	8000b64 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 11) {
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	2b0b      	cmp	r3, #11
 8000b22:	d105      	bne.n	8000b30 <takeMachineID+0x1ac>
        		machineID[machineIDLoc] = '6';
 8000b24:	4a3a      	ldr	r2, [pc, #232]	; (8000c10 <takeMachineID+0x28c>)
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	4413      	add	r3, r2
 8000b2a:	2236      	movs	r2, #54	; 0x36
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	e019      	b.n	8000b64 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 12) {
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	2b0c      	cmp	r3, #12
 8000b34:	d105      	bne.n	8000b42 <takeMachineID+0x1be>
        		machineID[machineIDLoc] = '7';
 8000b36:	4a36      	ldr	r2, [pc, #216]	; (8000c10 <takeMachineID+0x28c>)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	2237      	movs	r2, #55	; 0x37
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	e010      	b.n	8000b64 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 13) {
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	2b0d      	cmp	r3, #13
 8000b46:	d105      	bne.n	8000b54 <takeMachineID+0x1d0>
        		machineID[machineIDLoc] = '8';
 8000b48:	4a31      	ldr	r2, [pc, #196]	; (8000c10 <takeMachineID+0x28c>)
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	2238      	movs	r2, #56	; 0x38
 8000b50:	701a      	strb	r2, [r3, #0]
 8000b52:	e007      	b.n	8000b64 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 14) {
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	2b0e      	cmp	r3, #14
 8000b58:	d104      	bne.n	8000b64 <takeMachineID+0x1e0>
        		machineID[machineIDLoc] = '9';
 8000b5a:	4a2d      	ldr	r2, [pc, #180]	; (8000c10 <takeMachineID+0x28c>)
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4413      	add	r3, r2
 8000b60:	2239      	movs	r2, #57	; 0x39
 8000b62:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	b2d9      	uxtb	r1, r3
 8000b68:	4a29      	ldr	r2, [pc, #164]	; (8000c10 <takeMachineID+0x28c>)
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	f7ff fd0b 	bl	800058e <lcd_print_char>

        	writeLoc++;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	3301      	adds	r3, #1
 8000b82:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000b84:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000b88:	f007 faae 	bl	80080e8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	4821      	ldr	r0, [pc, #132]	; (8000c14 <takeMachineID+0x290>)
 8000b90:	f008 f87a 	bl	8008c88 <HAL_GPIO_ReadPin>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d12f      	bne.n	8000bfa <takeMachineID+0x276>
            if(strlen(machineID) >= 1) {
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <takeMachineID+0x28c>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d027      	beq.n	8000bf2 <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8000ba2:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <takeMachineID+0x28c>)
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff fd0a 	bl	80005d0 <lcd_delete_char>
                HAL_Delay(50);
 8000bbc:	2032      	movs	r0, #50	; 0x32
 8000bbe:	f007 fa93 	bl	80080e8 <HAL_Delay>

                if(writeLoc > 5) {
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b05      	cmp	r3, #5
 8000bc6:	dd03      	ble.n	8000bd0 <takeMachineID+0x24c>
                	writeLoc--;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e004      	b.n	8000bda <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	dc01      	bgt.n	8000bda <takeMachineID+0x256>
                	writeLoc = 5;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	dd03      	ble.n	8000be8 <takeMachineID+0x264>
                	machineIDLoc--;
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	e004      	b.n	8000bf2 <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	da01      	bge.n	8000bf2 <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000bf2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000bf6:	f007 fa77 	bl	80080e8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	4619      	mov	r1, r3
 8000c00:	2002      	movs	r0, #2
 8000c02:	f7ff fc90 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000c06:	e6d9      	b.n	80009bc <takeMachineID+0x38>
    }
}
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd90      	pop	{r4, r7, pc}
 8000c10:	20000278 	.word	0x20000278
 8000c14:	40010800 	.word	0x40010800
 8000c18:	0800be2c 	.word	0x0800be2c
 8000c1c:	0800be40 	.word	0x0800be40
 8000c20:	200000a1 	.word	0x200000a1
 8000c24:	200001e0 	.word	0x200001e0
 8000c28:	200000fc 	.word	0x200000fc
 8000c2c:	40011000 	.word	0x40011000

08000c30 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b08b      	sub	sp, #44	; 0x2c
 8000c34:	af04      	add	r7, sp, #16
 8000c36:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f7ff fcf1 	bl	8000620 <lcd_cursor>

    if(state == 0) {
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d104      	bne.n	8000c4e <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000c44:	2214      	movs	r2, #20
 8000c46:	2100      	movs	r1, #0
 8000c48:	488f      	ldr	r0, [pc, #572]	; (8000e88 <takeWifiSSID+0x258>)
 8000c4a:	f00b f857 	bl	800bcfc <memset>
    }

    int realCharPos = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000c52:	4b8e      	ldr	r3, [pc, #568]	; (8000e8c <takeWifiSSID+0x25c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
    page = 1;
 8000c58:	4b8d      	ldr	r3, [pc, #564]	; (8000e90 <takeWifiSSID+0x260>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000c62:	2307      	movs	r3, #7
 8000c64:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8000c66:	2101      	movs	r1, #1
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f7ff fd05 	bl	8000678 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000c6e:	2108      	movs	r1, #8
 8000c70:	4888      	ldr	r0, [pc, #544]	; (8000e94 <takeWifiSSID+0x264>)
 8000c72:	f008 f809 	bl	8008c88 <HAL_GPIO_ReadPin>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d139      	bne.n	8000cf0 <takeWifiSSID+0xc0>
            lcd_cursor(0);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff fccf 	bl	8000620 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8000c82:	4881      	ldr	r0, [pc, #516]	; (8000e88 <takeWifiSSID+0x258>)
 8000c84:	f7ff face 	bl	8000224 <strlen>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b14      	cmp	r3, #20
 8000c8c:	d910      	bls.n	8000cb0 <takeWifiSSID+0x80>
                lcd_clear();
 8000c8e:	f7ff fc95 	bl	80005bc <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8000c92:	4a81      	ldr	r2, [pc, #516]	; (8000e98 <takeWifiSSID+0x268>)
 8000c94:	2101      	movs	r1, #1
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff fc64 	bl	8000564 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8000c9c:	4a7f      	ldr	r2, [pc, #508]	; (8000e9c <takeWifiSSID+0x26c>)
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f7ff fc5f 	bl	8000564 <lcd_print>
                HAL_Delay(1200);
 8000ca6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000caa:	f007 fa1d 	bl	80080e8 <HAL_Delay>
                goto mainSSIDSection;
 8000cae:	e7c3      	b.n	8000c38 <takeWifiSSID+0x8>
            }

            memcpy(&eepromData[ssidStartPos], (uint8_t *)wifiSSID, strlen(wifiSSID));
 8000cb0:	4b7b      	ldr	r3, [pc, #492]	; (8000ea0 <takeWifiSSID+0x270>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b7b      	ldr	r3, [pc, #492]	; (8000ea4 <takeWifiSSID+0x274>)
 8000cb8:	18d4      	adds	r4, r2, r3
 8000cba:	4873      	ldr	r0, [pc, #460]	; (8000e88 <takeWifiSSID+0x258>)
 8000cbc:	f7ff fab2 	bl	8000224 <strlen>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4970      	ldr	r1, [pc, #448]	; (8000e88 <takeWifiSSID+0x258>)
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f00b f844 	bl	800bd54 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000ccc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	236e      	movs	r3, #110	; 0x6e
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	4b73      	ldr	r3, [pc, #460]	; (8000ea4 <takeWifiSSID+0x274>)
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	236e      	movs	r3, #110	; 0x6e
 8000cdc:	2200      	movs	r2, #0
 8000cde:	21a0      	movs	r1, #160	; 0xa0
 8000ce0:	4871      	ldr	r0, [pc, #452]	; (8000ea8 <takeWifiSSID+0x278>)
 8000ce2:	f008 fa8b 	bl	80091fc <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8000ce6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cea:	f007 f9fd 	bl	80080e8 <HAL_Delay>

            break;
 8000cee:	e14b      	b.n	8000f88 <takeWifiSSID+0x358>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4868      	ldr	r0, [pc, #416]	; (8000e94 <takeWifiSSID+0x264>)
 8000cf4:	f007 ffc8 	bl	8008c88 <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d166      	bne.n	8000dcc <takeWifiSSID+0x19c>
        	realCharPos++;
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	2b50      	cmp	r3, #80	; 0x50
 8000d08:	dd01      	ble.n	8000d0e <takeWifiSSID+0xde>
        		realCharPos = 1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8000d0e:	4b5f      	ldr	r3, [pc, #380]	; (8000e8c <takeWifiSSID+0x25c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b10      	cmp	r3, #16
 8000d14:	d152      	bne.n	8000dbc <takeWifiSSID+0x18c>
            	if(page == 1) {
 8000d16:	4b5e      	ldr	r3, [pc, #376]	; (8000e90 <takeWifiSSID+0x260>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d10c      	bne.n	8000d38 <takeWifiSSID+0x108>
            		cursorPosition = 1;
 8000d1e:	4b5b      	ldr	r3, [pc, #364]	; (8000e8c <takeWifiSSID+0x25c>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	601a      	str	r2, [r3, #0]
            		page++;
 8000d24:	4b5a      	ldr	r3, [pc, #360]	; (8000e90 <takeWifiSSID+0x260>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	4a59      	ldr	r2, [pc, #356]	; (8000e90 <takeWifiSSID+0x260>)
 8000d2c:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000d2e:	2102      	movs	r1, #2
 8000d30:	2002      	movs	r0, #2
 8000d32:	f7ff fca1 	bl	8000678 <printTemplate>
 8000d36:	e046      	b.n	8000dc6 <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8000d38:	4b55      	ldr	r3, [pc, #340]	; (8000e90 <takeWifiSSID+0x260>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d10c      	bne.n	8000d5a <takeWifiSSID+0x12a>
            		cursorPosition = 1;
 8000d40:	4b52      	ldr	r3, [pc, #328]	; (8000e8c <takeWifiSSID+0x25c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
            		page++;
 8000d46:	4b52      	ldr	r3, [pc, #328]	; (8000e90 <takeWifiSSID+0x260>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	4a50      	ldr	r2, [pc, #320]	; (8000e90 <takeWifiSSID+0x260>)
 8000d4e:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000d50:	2103      	movs	r1, #3
 8000d52:	2002      	movs	r0, #2
 8000d54:	f7ff fc90 	bl	8000678 <printTemplate>
 8000d58:	e035      	b.n	8000dc6 <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8000d5a:	4b4d      	ldr	r3, [pc, #308]	; (8000e90 <takeWifiSSID+0x260>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d10c      	bne.n	8000d7c <takeWifiSSID+0x14c>
            		cursorPosition = 1;
 8000d62:	4b4a      	ldr	r3, [pc, #296]	; (8000e8c <takeWifiSSID+0x25c>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	601a      	str	r2, [r3, #0]
            		page++;
 8000d68:	4b49      	ldr	r3, [pc, #292]	; (8000e90 <takeWifiSSID+0x260>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	4a48      	ldr	r2, [pc, #288]	; (8000e90 <takeWifiSSID+0x260>)
 8000d70:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000d72:	2104      	movs	r1, #4
 8000d74:	2002      	movs	r0, #2
 8000d76:	f7ff fc7f 	bl	8000678 <printTemplate>
 8000d7a:	e024      	b.n	8000dc6 <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8000d7c:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <takeWifiSSID+0x260>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d10c      	bne.n	8000d9e <takeWifiSSID+0x16e>
            		cursorPosition = 1;
 8000d84:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <takeWifiSSID+0x25c>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]
            		page++;
 8000d8a:	4b41      	ldr	r3, [pc, #260]	; (8000e90 <takeWifiSSID+0x260>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	4a3f      	ldr	r2, [pc, #252]	; (8000e90 <takeWifiSSID+0x260>)
 8000d92:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000d94:	2105      	movs	r1, #5
 8000d96:	2002      	movs	r0, #2
 8000d98:	f7ff fc6e 	bl	8000678 <printTemplate>
 8000d9c:	e013      	b.n	8000dc6 <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8000d9e:	4b3c      	ldr	r3, [pc, #240]	; (8000e90 <takeWifiSSID+0x260>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b05      	cmp	r3, #5
 8000da4:	d10f      	bne.n	8000dc6 <takeWifiSSID+0x196>
            		cursorPosition = 1;
 8000da6:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <takeWifiSSID+0x25c>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000dac:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <takeWifiSSID+0x260>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000db2:	2101      	movs	r1, #1
 8000db4:	2002      	movs	r0, #2
 8000db6:	f7ff fc5f 	bl	8000678 <printTemplate>
 8000dba:	e004      	b.n	8000dc6 <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition++;
 8000dbc:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <takeWifiSSID+0x25c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a32      	ldr	r2, [pc, #200]	; (8000e8c <takeWifiSSID+0x25c>)
 8000dc4:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000dc6:	20fa      	movs	r0, #250	; 0xfa
 8000dc8:	f007 f98e 	bl	80080e8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000dcc:	2108      	movs	r1, #8
 8000dce:	4837      	ldr	r0, [pc, #220]	; (8000eac <takeWifiSSID+0x27c>)
 8000dd0:	f007 ff5a 	bl	8008c88 <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d172      	bne.n	8000ec0 <takeWifiSSID+0x290>
        	realCharPos--;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	dc01      	bgt.n	8000dea <takeWifiSSID+0x1ba>
        		realCharPos = 80;
 8000de6:	2350      	movs	r3, #80	; 0x50
 8000de8:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8000dea:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <takeWifiSSID+0x25c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d15e      	bne.n	8000eb0 <takeWifiSSID+0x280>
            	if(page == 1) {
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <takeWifiSSID+0x260>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d10a      	bne.n	8000e10 <takeWifiSSID+0x1e0>
            		cursorPosition = 16;
 8000dfa:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <takeWifiSSID+0x25c>)
 8000dfc:	2210      	movs	r2, #16
 8000dfe:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000e00:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <takeWifiSSID+0x260>)
 8000e02:	2205      	movs	r2, #5
 8000e04:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000e06:	2105      	movs	r1, #5
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f7ff fc35 	bl	8000678 <printTemplate>
 8000e0e:	e054      	b.n	8000eba <takeWifiSSID+0x28a>
            	} else if(page == 2) {
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <takeWifiSSID+0x260>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d10a      	bne.n	8000e2e <takeWifiSSID+0x1fe>
            		cursorPosition = 16;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <takeWifiSSID+0x25c>)
 8000e1a:	2210      	movs	r2, #16
 8000e1c:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <takeWifiSSID+0x260>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000e24:	2101      	movs	r1, #1
 8000e26:	2002      	movs	r0, #2
 8000e28:	f7ff fc26 	bl	8000678 <printTemplate>
 8000e2c:	e045      	b.n	8000eba <takeWifiSSID+0x28a>
            	} else if(page == 3) {
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <takeWifiSSID+0x260>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d10a      	bne.n	8000e4c <takeWifiSSID+0x21c>
            		cursorPosition = 16;
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <takeWifiSSID+0x25c>)
 8000e38:	2210      	movs	r2, #16
 8000e3a:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <takeWifiSSID+0x260>)
 8000e3e:	2202      	movs	r2, #2
 8000e40:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000e42:	2102      	movs	r1, #2
 8000e44:	2002      	movs	r0, #2
 8000e46:	f7ff fc17 	bl	8000678 <printTemplate>
 8000e4a:	e036      	b.n	8000eba <takeWifiSSID+0x28a>
            	} else if(page == 4) {
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <takeWifiSSID+0x260>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d10a      	bne.n	8000e6a <takeWifiSSID+0x23a>
            		cursorPosition = 16;
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <takeWifiSSID+0x25c>)
 8000e56:	2210      	movs	r2, #16
 8000e58:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <takeWifiSSID+0x260>)
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000e60:	2103      	movs	r1, #3
 8000e62:	2002      	movs	r0, #2
 8000e64:	f7ff fc08 	bl	8000678 <printTemplate>
 8000e68:	e027      	b.n	8000eba <takeWifiSSID+0x28a>
            	} else if(page == 5) {
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <takeWifiSSID+0x260>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b05      	cmp	r3, #5
 8000e70:	d123      	bne.n	8000eba <takeWifiSSID+0x28a>
            		cursorPosition = 16;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <takeWifiSSID+0x25c>)
 8000e74:	2210      	movs	r2, #16
 8000e76:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <takeWifiSSID+0x260>)
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000e7e:	2104      	movs	r1, #4
 8000e80:	2002      	movs	r0, #2
 8000e82:	f7ff fbf9 	bl	8000678 <printTemplate>
 8000e86:	e018      	b.n	8000eba <takeWifiSSID+0x28a>
 8000e88:	20000284 	.word	0x20000284
 8000e8c:	20000034 	.word	0x20000034
 8000e90:	20000038 	.word	0x20000038
 8000e94:	40010800 	.word	0x40010800
 8000e98:	0800be54 	.word	0x0800be54
 8000e9c:	0800be68 	.word	0x0800be68
 8000ea0:	200000a2 	.word	0x200000a2
 8000ea4:	200001e0 	.word	0x200001e0
 8000ea8:	200000fc 	.word	0x200000fc
 8000eac:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8000eb0:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <takeWifiSSID+0x360>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	4a36      	ldr	r2, [pc, #216]	; (8000f90 <takeWifiSSID+0x360>)
 8000eb8:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000eba:	20fa      	movs	r0, #250	; 0xfa
 8000ebc:	f007 f914 	bl	80080e8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4834      	ldr	r0, [pc, #208]	; (8000f94 <takeWifiSSID+0x364>)
 8000ec4:	f007 fee0 	bl	8008c88 <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d11e      	bne.n	8000f0c <takeWifiSSID+0x2dc>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fd46 	bl	8000964 <getCharFromCursorPosition>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4619      	mov	r1, r3
 8000edc:	4a2e      	ldr	r2, [pc, #184]	; (8000f98 <takeWifiSSID+0x368>)
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	460a      	mov	r2, r1
 8000ee4:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	b2d9      	uxtb	r1, r3
 8000eea:	4a2b      	ldr	r2, [pc, #172]	; (8000f98 <takeWifiSSID+0x368>)
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f7ff fb4a 	bl	800058e <lcd_print_char>

            writeLoc++;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	3301      	adds	r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	3301      	adds	r3, #1
 8000f04:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8000f06:	20fa      	movs	r0, #250	; 0xfa
 8000f08:	f007 f8ee 	bl	80080e8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	4821      	ldr	r0, [pc, #132]	; (8000f94 <takeWifiSSID+0x364>)
 8000f10:	f007 feba 	bl	8008c88 <HAL_GPIO_ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d12e      	bne.n	8000f78 <takeWifiSSID+0x348>
        	if(strlen(wifiSSID) >= 1) {
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <takeWifiSSID+0x368>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d027      	beq.n	8000f72 <takeWifiSSID+0x342>
        		wifiSSID[wifiNameLoc] = '\0';
 8000f22:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <takeWifiSSID+0x368>)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4413      	add	r3, r2
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	3306      	adds	r3, #6
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4619      	mov	r1, r3
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff fb4a 	bl	80005d0 <lcd_delete_char>
        		HAL_Delay(50);
 8000f3c:	2032      	movs	r0, #50	; 0x32
 8000f3e:	f007 f8d3 	bl	80080e8 <HAL_Delay>
        		if(writeLoc > 7) {
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2b07      	cmp	r3, #7
 8000f46:	dd03      	ble.n	8000f50 <takeWifiSSID+0x320>
        			writeLoc--;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	e004      	b.n	8000f5a <takeWifiSSID+0x32a>
        		} else if(writeLoc < 7) {
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	dc01      	bgt.n	8000f5a <takeWifiSSID+0x32a>
        			writeLoc = 7;
 8000f56:	2307      	movs	r3, #7
 8000f58:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	dd03      	ble.n	8000f68 <takeWifiSSID+0x338>
        			wifiNameLoc--;
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	e004      	b.n	8000f72 <takeWifiSSID+0x342>
        		} else if(wifiNameLoc < 0) {
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	da01      	bge.n	8000f72 <takeWifiSSID+0x342>
        			wifiNameLoc = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 8000f72:	20fa      	movs	r0, #250	; 0xfa
 8000f74:	f007 f8b8 	bl	80080e8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <takeWifiSSID+0x360>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4619      	mov	r1, r3
 8000f80:	2002      	movs	r0, #2
 8000f82:	f7ff fad0 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000f86:	e672      	b.n	8000c6e <takeWifiSSID+0x3e>
    }
}
 8000f88:	bf00      	nop
 8000f8a:	371c      	adds	r7, #28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	20000034 	.word	0x20000034
 8000f94:	40010800 	.word	0x40010800
 8000f98:	20000284 	.word	0x20000284

08000f9c <takeWifiPass>:

void takeWifiPass(int state) {
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b08b      	sub	sp, #44	; 0x2c
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff fb3b 	bl	8000620 <lcd_cursor>

    if(state == 0) {
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d104      	bne.n	8000fba <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8000fb0:	2214      	movs	r2, #20
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	488f      	ldr	r0, [pc, #572]	; (80011f4 <takeWifiPass+0x258>)
 8000fb6:	f00a fea1 	bl	800bcfc <memset>
    }

    int realCharPos = 1;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000fbe:	4b8e      	ldr	r3, [pc, #568]	; (80011f8 <takeWifiPass+0x25c>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
    page = 1;
 8000fc4:	4b8d      	ldr	r3, [pc, #564]	; (80011fc <takeWifiPass+0x260>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000fce:	2307      	movs	r3, #7
 8000fd0:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f7ff fb4f 	bl	8000678 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000fda:	2108      	movs	r1, #8
 8000fdc:	4888      	ldr	r0, [pc, #544]	; (8001200 <takeWifiPass+0x264>)
 8000fde:	f007 fe53 	bl	8008c88 <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d139      	bne.n	800105c <takeWifiPass+0xc0>
            lcd_cursor(0);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fb19 	bl	8000620 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8000fee:	4881      	ldr	r0, [pc, #516]	; (80011f4 <takeWifiPass+0x258>)
 8000ff0:	f7ff f918 	bl	8000224 <strlen>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b14      	cmp	r3, #20
 8000ff8:	d910      	bls.n	800101c <takeWifiPass+0x80>
                lcd_clear();
 8000ffa:	f7ff fadf 	bl	80005bc <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8000ffe:	4a81      	ldr	r2, [pc, #516]	; (8001204 <takeWifiPass+0x268>)
 8001000:	2101      	movs	r1, #1
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff faae 	bl	8000564 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8001008:	4a7f      	ldr	r2, [pc, #508]	; (8001208 <takeWifiPass+0x26c>)
 800100a:	2101      	movs	r1, #1
 800100c:	2002      	movs	r0, #2
 800100e:	f7ff faa9 	bl	8000564 <lcd_print>
                HAL_Delay(1200);
 8001012:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001016:	f007 f867 	bl	80080e8 <HAL_Delay>
                goto mainPASSSection;
 800101a:	e7c3      	b.n	8000fa4 <takeWifiPass+0x8>
            }

            memcpy(&eepromData[passStartPos], (uint8_t *)wifiPass, strlen(wifiPass));
 800101c:	4b7b      	ldr	r3, [pc, #492]	; (800120c <takeWifiPass+0x270>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b7b      	ldr	r3, [pc, #492]	; (8001210 <takeWifiPass+0x274>)
 8001024:	18d4      	adds	r4, r2, r3
 8001026:	4873      	ldr	r0, [pc, #460]	; (80011f4 <takeWifiPass+0x258>)
 8001028:	f7ff f8fc 	bl	8000224 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	461a      	mov	r2, r3
 8001030:	4970      	ldr	r1, [pc, #448]	; (80011f4 <takeWifiPass+0x258>)
 8001032:	4620      	mov	r0, r4
 8001034:	f00a fe8e 	bl	800bd54 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8001038:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	236e      	movs	r3, #110	; 0x6e
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	4b73      	ldr	r3, [pc, #460]	; (8001210 <takeWifiPass+0x274>)
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	236e      	movs	r3, #110	; 0x6e
 8001048:	2200      	movs	r2, #0
 800104a:	21a0      	movs	r1, #160	; 0xa0
 800104c:	4871      	ldr	r0, [pc, #452]	; (8001214 <takeWifiPass+0x278>)
 800104e:	f008 f8d5 	bl	80091fc <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8001052:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001056:	f007 f847 	bl	80080e8 <HAL_Delay>

            break;
 800105a:	e14b      	b.n	80012f4 <takeWifiPass+0x358>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800105c:	2101      	movs	r1, #1
 800105e:	4868      	ldr	r0, [pc, #416]	; (8001200 <takeWifiPass+0x264>)
 8001060:	f007 fe12 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b01      	cmp	r3, #1
 8001068:	d166      	bne.n	8001138 <takeWifiPass+0x19c>
        	realCharPos++;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b50      	cmp	r3, #80	; 0x50
 8001074:	dd01      	ble.n	800107a <takeWifiPass+0xde>
        	    realCharPos = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 800107a:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <takeWifiPass+0x25c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b10      	cmp	r3, #16
 8001080:	d152      	bne.n	8001128 <takeWifiPass+0x18c>
            	if(page == 1) {
 8001082:	4b5e      	ldr	r3, [pc, #376]	; (80011fc <takeWifiPass+0x260>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d10c      	bne.n	80010a4 <takeWifiPass+0x108>
            		cursorPosition = 1;
 800108a:	4b5b      	ldr	r3, [pc, #364]	; (80011f8 <takeWifiPass+0x25c>)
 800108c:	2201      	movs	r2, #1
 800108e:	601a      	str	r2, [r3, #0]
            		page++;
 8001090:	4b5a      	ldr	r3, [pc, #360]	; (80011fc <takeWifiPass+0x260>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	4a59      	ldr	r2, [pc, #356]	; (80011fc <takeWifiPass+0x260>)
 8001098:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 800109a:	2102      	movs	r1, #2
 800109c:	2003      	movs	r0, #3
 800109e:	f7ff faeb 	bl	8000678 <printTemplate>
 80010a2:	e046      	b.n	8001132 <takeWifiPass+0x196>
            	} else if(page == 2) {
 80010a4:	4b55      	ldr	r3, [pc, #340]	; (80011fc <takeWifiPass+0x260>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d10c      	bne.n	80010c6 <takeWifiPass+0x12a>
            		cursorPosition = 1;
 80010ac:	4b52      	ldr	r3, [pc, #328]	; (80011f8 <takeWifiPass+0x25c>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]
            		page++;
 80010b2:	4b52      	ldr	r3, [pc, #328]	; (80011fc <takeWifiPass+0x260>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	4a50      	ldr	r2, [pc, #320]	; (80011fc <takeWifiPass+0x260>)
 80010ba:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80010bc:	2103      	movs	r1, #3
 80010be:	2003      	movs	r0, #3
 80010c0:	f7ff fada 	bl	8000678 <printTemplate>
 80010c4:	e035      	b.n	8001132 <takeWifiPass+0x196>
            	} else if(page == 3) {
 80010c6:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <takeWifiPass+0x260>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d10c      	bne.n	80010e8 <takeWifiPass+0x14c>
            		cursorPosition = 1;
 80010ce:	4b4a      	ldr	r3, [pc, #296]	; (80011f8 <takeWifiPass+0x25c>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
            		page++;
 80010d4:	4b49      	ldr	r3, [pc, #292]	; (80011fc <takeWifiPass+0x260>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a48      	ldr	r2, [pc, #288]	; (80011fc <takeWifiPass+0x260>)
 80010dc:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80010de:	2104      	movs	r1, #4
 80010e0:	2003      	movs	r0, #3
 80010e2:	f7ff fac9 	bl	8000678 <printTemplate>
 80010e6:	e024      	b.n	8001132 <takeWifiPass+0x196>
            	} else if(page == 4) {
 80010e8:	4b44      	ldr	r3, [pc, #272]	; (80011fc <takeWifiPass+0x260>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d10c      	bne.n	800110a <takeWifiPass+0x16e>
            		cursorPosition = 1;
 80010f0:	4b41      	ldr	r3, [pc, #260]	; (80011f8 <takeWifiPass+0x25c>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
            		page++;
 80010f6:	4b41      	ldr	r3, [pc, #260]	; (80011fc <takeWifiPass+0x260>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a3f      	ldr	r2, [pc, #252]	; (80011fc <takeWifiPass+0x260>)
 80010fe:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8001100:	2105      	movs	r1, #5
 8001102:	2003      	movs	r0, #3
 8001104:	f7ff fab8 	bl	8000678 <printTemplate>
 8001108:	e013      	b.n	8001132 <takeWifiPass+0x196>
            	} else if(page == 5) {
 800110a:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <takeWifiPass+0x260>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b05      	cmp	r3, #5
 8001110:	d10f      	bne.n	8001132 <takeWifiPass+0x196>
            		cursorPosition = 1;
 8001112:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <takeWifiPass+0x25c>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001118:	4b38      	ldr	r3, [pc, #224]	; (80011fc <takeWifiPass+0x260>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800111e:	2101      	movs	r1, #1
 8001120:	2003      	movs	r0, #3
 8001122:	f7ff faa9 	bl	8000678 <printTemplate>
 8001126:	e004      	b.n	8001132 <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition++;
 8001128:	4b33      	ldr	r3, [pc, #204]	; (80011f8 <takeWifiPass+0x25c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	4a32      	ldr	r2, [pc, #200]	; (80011f8 <takeWifiPass+0x25c>)
 8001130:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001132:	20fa      	movs	r0, #250	; 0xfa
 8001134:	f006 ffd8 	bl	80080e8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001138:	2108      	movs	r1, #8
 800113a:	4837      	ldr	r0, [pc, #220]	; (8001218 <takeWifiPass+0x27c>)
 800113c:	f007 fda4 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d172      	bne.n	800122c <takeWifiPass+0x290>
        	realCharPos--;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3b01      	subs	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2b00      	cmp	r3, #0
 8001150:	dc01      	bgt.n	8001156 <takeWifiPass+0x1ba>
        	    realCharPos = 80;
 8001152:	2350      	movs	r3, #80	; 0x50
 8001154:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8001156:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <takeWifiPass+0x25c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d15e      	bne.n	800121c <takeWifiPass+0x280>
            	if(page == 1) {
 800115e:	4b27      	ldr	r3, [pc, #156]	; (80011fc <takeWifiPass+0x260>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d10a      	bne.n	800117c <takeWifiPass+0x1e0>
            		cursorPosition = 16;
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <takeWifiPass+0x25c>)
 8001168:	2210      	movs	r2, #16
 800116a:	601a      	str	r2, [r3, #0]
            		page = 5;
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <takeWifiPass+0x260>)
 800116e:	2205      	movs	r2, #5
 8001170:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 8001172:	2105      	movs	r1, #5
 8001174:	2003      	movs	r0, #3
 8001176:	f7ff fa7f 	bl	8000678 <printTemplate>
 800117a:	e054      	b.n	8001226 <takeWifiPass+0x28a>
            	} else if(page == 2) {
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <takeWifiPass+0x260>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d10a      	bne.n	800119a <takeWifiPass+0x1fe>
            		cursorPosition = 16;
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <takeWifiPass+0x25c>)
 8001186:	2210      	movs	r2, #16
 8001188:	601a      	str	r2, [r3, #0]
            		page = 1;
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <takeWifiPass+0x260>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001190:	2101      	movs	r1, #1
 8001192:	2003      	movs	r0, #3
 8001194:	f7ff fa70 	bl	8000678 <printTemplate>
 8001198:	e045      	b.n	8001226 <takeWifiPass+0x28a>
            	} else if(page == 3) {
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <takeWifiPass+0x260>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d10a      	bne.n	80011b8 <takeWifiPass+0x21c>
            		cursorPosition = 16;
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <takeWifiPass+0x25c>)
 80011a4:	2210      	movs	r2, #16
 80011a6:	601a      	str	r2, [r3, #0]
            		page = 2;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <takeWifiPass+0x260>)
 80011aa:	2202      	movs	r2, #2
 80011ac:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80011ae:	2102      	movs	r1, #2
 80011b0:	2003      	movs	r0, #3
 80011b2:	f7ff fa61 	bl	8000678 <printTemplate>
 80011b6:	e036      	b.n	8001226 <takeWifiPass+0x28a>
            	} else if(page == 4) {
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <takeWifiPass+0x260>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d10a      	bne.n	80011d6 <takeWifiPass+0x23a>
            		cursorPosition = 16;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <takeWifiPass+0x25c>)
 80011c2:	2210      	movs	r2, #16
 80011c4:	601a      	str	r2, [r3, #0]
            		page = 3;
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <takeWifiPass+0x260>)
 80011c8:	2203      	movs	r2, #3
 80011ca:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80011cc:	2103      	movs	r1, #3
 80011ce:	2003      	movs	r0, #3
 80011d0:	f7ff fa52 	bl	8000678 <printTemplate>
 80011d4:	e027      	b.n	8001226 <takeWifiPass+0x28a>
            	} else if(page == 5) {
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <takeWifiPass+0x260>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d123      	bne.n	8001226 <takeWifiPass+0x28a>
            		cursorPosition = 16;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <takeWifiPass+0x25c>)
 80011e0:	2210      	movs	r2, #16
 80011e2:	601a      	str	r2, [r3, #0]
            		page = 4;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <takeWifiPass+0x260>)
 80011e6:	2204      	movs	r2, #4
 80011e8:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80011ea:	2104      	movs	r1, #4
 80011ec:	2003      	movs	r0, #3
 80011ee:	f7ff fa43 	bl	8000678 <printTemplate>
 80011f2:	e018      	b.n	8001226 <takeWifiPass+0x28a>
 80011f4:	20000298 	.word	0x20000298
 80011f8:	20000034 	.word	0x20000034
 80011fc:	20000038 	.word	0x20000038
 8001200:	40010800 	.word	0x40010800
 8001204:	0800be54 	.word	0x0800be54
 8001208:	0800be7c 	.word	0x0800be7c
 800120c:	200000a3 	.word	0x200000a3
 8001210:	200001e0 	.word	0x200001e0
 8001214:	200000fc 	.word	0x200000fc
 8001218:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800121c:	4b37      	ldr	r3, [pc, #220]	; (80012fc <takeWifiPass+0x360>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3b01      	subs	r3, #1
 8001222:	4a36      	ldr	r2, [pc, #216]	; (80012fc <takeWifiPass+0x360>)
 8001224:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001226:	20fa      	movs	r0, #250	; 0xfa
 8001228:	f006 ff5e 	bl	80080e8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800122c:	2102      	movs	r1, #2
 800122e:	4834      	ldr	r0, [pc, #208]	; (8001300 <takeWifiPass+0x364>)
 8001230:	f007 fd2a 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001234:	4603      	mov	r3, r0
 8001236:	2b01      	cmp	r3, #1
 8001238:	d11e      	bne.n	8001278 <takeWifiPass+0x2dc>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3b01      	subs	r3, #1
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fb90 	bl	8000964 <getCharFromCursorPosition>
 8001244:	4603      	mov	r3, r0
 8001246:	4619      	mov	r1, r3
 8001248:	4a2e      	ldr	r2, [pc, #184]	; (8001304 <takeWifiPass+0x368>)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4413      	add	r3, r2
 800124e:	460a      	mov	r2, r1
 8001250:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	b2d9      	uxtb	r1, r3
 8001256:	4a2b      	ldr	r2, [pc, #172]	; (8001304 <takeWifiPass+0x368>)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4413      	add	r3, r2
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	2001      	movs	r0, #1
 8001262:	f7ff f994 	bl	800058e <lcd_print_char>

            writeLoc++;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3301      	adds	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	3301      	adds	r3, #1
 8001270:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8001272:	20fa      	movs	r0, #250	; 0xfa
 8001274:	f006 ff38 	bl	80080e8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001278:	2104      	movs	r1, #4
 800127a:	4821      	ldr	r0, [pc, #132]	; (8001300 <takeWifiPass+0x364>)
 800127c:	f007 fd04 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	2b01      	cmp	r3, #1
 8001284:	d12e      	bne.n	80012e4 <takeWifiPass+0x348>
            if(strlen(wifiPass) >= 1) {
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <takeWifiPass+0x368>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d027      	beq.n	80012de <takeWifiPass+0x342>
            	wifiPass[wifiPassLoc] = '\0';
 800128e:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <takeWifiPass+0x368>)
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4413      	add	r3, r2
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	3306      	adds	r3, #6
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	4619      	mov	r1, r3
 80012a2:	2001      	movs	r0, #1
 80012a4:	f7ff f994 	bl	80005d0 <lcd_delete_char>
            	HAL_Delay(50);
 80012a8:	2032      	movs	r0, #50	; 0x32
 80012aa:	f006 ff1d 	bl	80080e8 <HAL_Delay>

            	if(writeLoc > 7) {
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2b07      	cmp	r3, #7
 80012b2:	dd03      	ble.n	80012bc <takeWifiPass+0x320>
            		writeLoc--;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	e004      	b.n	80012c6 <takeWifiPass+0x32a>
            	} else if(writeLoc < 7) {
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b06      	cmp	r3, #6
 80012c0:	dc01      	bgt.n	80012c6 <takeWifiPass+0x32a>
            		writeLoc = 7;
 80012c2:	2307      	movs	r3, #7
 80012c4:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	dd03      	ble.n	80012d4 <takeWifiPass+0x338>
            		wifiPassLoc--;
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	e004      	b.n	80012de <takeWifiPass+0x342>
            	} else if(wifiPassLoc < 0) {
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da01      	bge.n	80012de <takeWifiPass+0x342>
            		wifiPassLoc = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 80012de:	20fa      	movs	r0, #250	; 0xfa
 80012e0:	f006 ff02 	bl	80080e8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <takeWifiPass+0x360>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	2002      	movs	r0, #2
 80012ee:	f7ff f91a 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80012f2:	e672      	b.n	8000fda <takeWifiPass+0x3e>
    }
}
 80012f4:	bf00      	nop
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd90      	pop	{r4, r7, pc}
 80012fc:	20000034 	.word	0x20000034
 8001300:	40010800 	.word	0x40010800
 8001304:	20000298 	.word	0x20000298

08001308 <checkSlideVal>:

int checkSlideVal(int state) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d111      	bne.n	800133a <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001316:	2101      	movs	r1, #1
 8001318:	4813      	ldr	r0, [pc, #76]	; (8001368 <checkSlideVal+0x60>)
 800131a:	f007 fcb5 	bl	8008c88 <HAL_GPIO_ReadPin>
 800131e:	4603      	mov	r3, r0
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <checkSlideVal+0x20>
			return 34;
 8001324:	2322      	movs	r3, #34	; 0x22
 8001326:	e01b      	b.n	8001360 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001328:	2108      	movs	r1, #8
 800132a:	4810      	ldr	r0, [pc, #64]	; (800136c <checkSlideVal+0x64>)
 800132c:	f007 fcac 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d113      	bne.n	800135e <checkSlideVal+0x56>
			return 32;
 8001336:	2320      	movs	r3, #32
 8001338:	e012      	b.n	8001360 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800133a:	2101      	movs	r1, #1
 800133c:	480a      	ldr	r0, [pc, #40]	; (8001368 <checkSlideVal+0x60>)
 800133e:	f007 fca3 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001342:	4603      	mov	r3, r0
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <checkSlideVal+0x44>
			return 35;
 8001348:	2323      	movs	r3, #35	; 0x23
 800134a:	e009      	b.n	8001360 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800134c:	2108      	movs	r1, #8
 800134e:	4807      	ldr	r0, [pc, #28]	; (800136c <checkSlideVal+0x64>)
 8001350:	f007 fc9a 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <checkSlideVal+0x56>
			return 33;
 800135a:	2321      	movs	r3, #33	; 0x21
 800135c:	e000      	b.n	8001360 <checkSlideVal+0x58>
		}
	}
	return 0;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40010800 	.word	0x40010800
 800136c:	40011000 	.word	0x40011000

08001370 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7fe ff50 	bl	8000224 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 800138c:	e08a      	b.n	80014a4 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800138e:	6838      	ldr	r0, [r7, #0]
 8001390:	f7ff ffba 	bl	8001308 <checkSlideVal>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	dd07      	ble.n	80013aa <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800139a:	6838      	ldr	r0, [r7, #0]
 800139c:	f7ff ffb4 	bl	8001308 <checkSlideVal>
 80013a0:	4603      	mov	r3, r0
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b44      	ldr	r3, [pc, #272]	; (80014b8 <slideText+0x148>)
 80013a6:	701a      	strb	r2, [r3, #0]
			break;
 80013a8:	e081      	b.n	80014ae <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
 80013ae:	e075      	b.n	800149c <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80013b0:	6838      	ldr	r0, [r7, #0]
 80013b2:	f7ff ffa9 	bl	8001308 <checkSlideVal>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	dd09      	ble.n	80013d0 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f7ff ffa3 	bl	8001308 <checkSlideVal>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b3c      	ldr	r3, [pc, #240]	; (80014b8 <slideText+0x148>)
 80013c8:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80013ce:	e069      	b.n	80014a4 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	4413      	add	r3, r2
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	e029      	b.n	800142e <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f7ff ff94 	bl	8001308 <checkSlideVal>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	dd0b      	ble.n	80013fe <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80013e6:	6838      	ldr	r0, [r7, #0]
 80013e8:	f7ff ff8e 	bl	8001308 <checkSlideVal>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <slideText+0x148>)
 80013f2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80013fc:	e01d      	b.n	800143a <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	b2d8      	uxtb	r0, r3
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	b2d9      	uxtb	r1, r3
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	461a      	mov	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	f7ff f8b6 	bl	800058e <lcd_print_char>
				HAL_Delay(30);
 8001422:	201e      	movs	r0, #30
 8001424:	f006 fe60 	bl	80080e8 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	3301      	adds	r3, #1
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	7dfa      	ldrb	r2, [r7, #23]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4413      	add	r3, r2
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	429a      	cmp	r2, r3
 8001438:	dbcf      	blt.n	80013da <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800143a:	7dfb      	ldrb	r3, [r7, #23]
 800143c:	3b01      	subs	r3, #1
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	e023      	b.n	800148a <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 8001442:	6838      	ldr	r0, [r7, #0]
 8001444:	f7ff ff60 	bl	8001308 <checkSlideVal>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	dd0b      	ble.n	8001466 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 800144e:	6838      	ldr	r0, [r7, #0]
 8001450:	f7ff ff5a 	bl	8001308 <checkSlideVal>
 8001454:	4603      	mov	r3, r0
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <slideText+0x148>)
 800145a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001464:	e017      	b.n	8001496 <slideText+0x126>
				}
			     if(j >= startPos) {
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	429a      	cmp	r2, r3
 800146c:	db0a      	blt.n	8001484 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	b2d1      	uxtb	r1, r2
 8001476:	2220      	movs	r2, #32
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f888 	bl	800058e <lcd_print_char>
			    	 HAL_Delay(30);
 800147e:	201e      	movs	r0, #30
 8001480:	f006 fe32 	bl	80080e8 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	3b01      	subs	r3, #1
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	7dfa      	ldrb	r2, [r7, #23]
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	429a      	cmp	r2, r3
 8001494:	dad5      	bge.n	8001442 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	3301      	adds	r3, #1
 800149a:	623b      	str	r3, [r7, #32]
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	6a3a      	ldr	r2, [r7, #32]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	db85      	blt.n	80013b0 <slideText+0x40>
	while(mainLoopVal == 1) {
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	f43f af71 	beq.w	800138e <slideText+0x1e>
			     }
			}
		}
	}
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200002b0 	.word	0x200002b0

080014bc <menu>:

void menu() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80014c0:	2101      	movs	r1, #1
 80014c2:	488f      	ldr	r0, [pc, #572]	; (8001700 <menu+0x244>)
 80014c4:	f007 fbe0 	bl	8008c88 <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	f040 808e 	bne.w	80015ec <menu+0x130>
 80014d0:	4b8c      	ldr	r3, [pc, #560]	; (8001704 <menu+0x248>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	f083 0301 	eor.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8086 	beq.w	80015ec <menu+0x130>
		menuSayac = menuSayac+1;
 80014e0:	4b89      	ldr	r3, [pc, #548]	; (8001708 <menu+0x24c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b87      	ldr	r3, [pc, #540]	; (8001708 <menu+0x24c>)
 80014ea:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80014ec:	4b86      	ldr	r3, [pc, #536]	; (8001708 <menu+0x24c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b24      	cmp	r3, #36	; 0x24
 80014f2:	d102      	bne.n	80014fa <menu+0x3e>
			menuSayac = 1;
 80014f4:	4b84      	ldr	r3, [pc, #528]	; (8001708 <menu+0x24c>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80014fa:	4b83      	ldr	r3, [pc, #524]	; (8001708 <menu+0x24c>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b12      	cmp	r3, #18
 8001500:	d106      	bne.n	8001510 <menu+0x54>
 8001502:	4b82      	ldr	r3, [pc, #520]	; (800170c <menu+0x250>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <menu+0x54>
			menuSayac = 21;
 800150a:	4b7f      	ldr	r3, [pc, #508]	; (8001708 <menu+0x24c>)
 800150c:	2215      	movs	r2, #21
 800150e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001510:	4b7d      	ldr	r3, [pc, #500]	; (8001708 <menu+0x24c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b08      	cmp	r3, #8
 8001516:	d106      	bne.n	8001526 <menu+0x6a>
 8001518:	4b7d      	ldr	r3, [pc, #500]	; (8001710 <menu+0x254>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <menu+0x6a>
			menuSayac = 16;
 8001520:	4b79      	ldr	r3, [pc, #484]	; (8001708 <menu+0x24c>)
 8001522:	2210      	movs	r2, #16
 8001524:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001526:	4b78      	ldr	r3, [pc, #480]	; (8001708 <menu+0x24c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b0d      	cmp	r3, #13
 800152c:	d106      	bne.n	800153c <menu+0x80>
 800152e:	4b78      	ldr	r3, [pc, #480]	; (8001710 <menu+0x254>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d102      	bne.n	800153c <menu+0x80>
			menuSayac = 16;
 8001536:	4b74      	ldr	r3, [pc, #464]	; (8001708 <menu+0x24c>)
 8001538:	2210      	movs	r2, #16
 800153a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800153c:	4b72      	ldr	r3, [pc, #456]	; (8001708 <menu+0x24c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b09      	cmp	r3, #9
 8001542:	d106      	bne.n	8001552 <menu+0x96>
 8001544:	4b72      	ldr	r3, [pc, #456]	; (8001710 <menu+0x254>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d102      	bne.n	8001552 <menu+0x96>
			menuSayac = 13;
 800154c:	4b6e      	ldr	r3, [pc, #440]	; (8001708 <menu+0x24c>)
 800154e:	220d      	movs	r2, #13
 8001550:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001552:	4b6d      	ldr	r3, [pc, #436]	; (8001708 <menu+0x24c>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b0a      	cmp	r3, #10
 8001558:	d10a      	bne.n	8001570 <menu+0xb4>
 800155a:	4b6e      	ldr	r3, [pc, #440]	; (8001714 <menu+0x258>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d003      	beq.n	800156a <menu+0xae>
 8001562:	4b6c      	ldr	r3, [pc, #432]	; (8001714 <menu+0x258>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d102      	bne.n	8001570 <menu+0xb4>
			menuSayac = 11;
 800156a:	4b67      	ldr	r3, [pc, #412]	; (8001708 <menu+0x24c>)
 800156c:	220b      	movs	r2, #11
 800156e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001570:	4b65      	ldr	r3, [pc, #404]	; (8001708 <menu+0x24c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b0c      	cmp	r3, #12
 8001576:	d10e      	bne.n	8001596 <menu+0xda>
 8001578:	4b67      	ldr	r3, [pc, #412]	; (8001718 <menu+0x25c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d003      	beq.n	8001588 <menu+0xcc>
 8001580:	4b65      	ldr	r3, [pc, #404]	; (8001718 <menu+0x25c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d106      	bne.n	8001596 <menu+0xda>
 8001588:	4b61      	ldr	r3, [pc, #388]	; (8001710 <menu+0x254>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d102      	bne.n	8001596 <menu+0xda>
			menuSayac = 16;
 8001590:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <menu+0x24c>)
 8001592:	2210      	movs	r2, #16
 8001594:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001596:	4b5c      	ldr	r3, [pc, #368]	; (8001708 <menu+0x24c>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b0c      	cmp	r3, #12
 800159c:	d10e      	bne.n	80015bc <menu+0x100>
 800159e:	4b5e      	ldr	r3, [pc, #376]	; (8001718 <menu+0x25c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d003      	beq.n	80015ae <menu+0xf2>
 80015a6:	4b5c      	ldr	r3, [pc, #368]	; (8001718 <menu+0x25c>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d106      	bne.n	80015bc <menu+0x100>
 80015ae:	4b58      	ldr	r3, [pc, #352]	; (8001710 <menu+0x254>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d102      	bne.n	80015bc <menu+0x100>
			menuSayac = 13;
 80015b6:	4b54      	ldr	r3, [pc, #336]	; (8001708 <menu+0x24c>)
 80015b8:	220d      	movs	r2, #13
 80015ba:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80015bc:	4b52      	ldr	r3, [pc, #328]	; (8001708 <menu+0x24c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d106      	bne.n	80015d2 <menu+0x116>
 80015c4:	4b55      	ldr	r3, [pc, #340]	; (800171c <menu+0x260>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d102      	bne.n	80015d2 <menu+0x116>
			menuSayac = 16;
 80015cc:	4b4e      	ldr	r3, [pc, #312]	; (8001708 <menu+0x24c>)
 80015ce:	2210      	movs	r2, #16
 80015d0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80015d2:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <menu+0x24c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b18      	cmp	r3, #24
 80015d8:	d106      	bne.n	80015e8 <menu+0x12c>
 80015da:	4b4c      	ldr	r3, [pc, #304]	; (800170c <menu+0x250>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <menu+0x12c>
			menuSayac = 26;
 80015e2:	4b49      	ldr	r3, [pc, #292]	; (8001708 <menu+0x24c>)
 80015e4:	221a      	movs	r2, #26
 80015e6:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80015e8:	f003 ff0c 	bl	8005404 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015ec:	2108      	movs	r1, #8
 80015ee:	484c      	ldr	r0, [pc, #304]	; (8001720 <menu+0x264>)
 80015f0:	f007 fb4a 	bl	8008c88 <HAL_GPIO_ReadPin>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d175      	bne.n	80016e6 <menu+0x22a>
 80015fa:	4b42      	ldr	r3, [pc, #264]	; (8001704 <menu+0x248>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	f083 0301 	eor.w	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d06e      	beq.n	80016e6 <menu+0x22a>
		if (menuSayac <= 1) {
 8001608:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <menu+0x24c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d802      	bhi.n	8001616 <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001610:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <menu+0x24c>)
 8001612:	2224      	movs	r2, #36	; 0x24
 8001614:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001616:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <menu+0x24c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	3b01      	subs	r3, #1
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <menu+0x24c>)
 8001620:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001622:	4b39      	ldr	r3, [pc, #228]	; (8001708 <menu+0x24c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b14      	cmp	r3, #20
 8001628:	d106      	bne.n	8001638 <menu+0x17c>
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <menu+0x250>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <menu+0x17c>
			menuSayac = 17;
 8001632:	4b35      	ldr	r3, [pc, #212]	; (8001708 <menu+0x24c>)
 8001634:	2211      	movs	r2, #17
 8001636:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <menu+0x24c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d106      	bne.n	800164e <menu+0x192>
 8001640:	4b33      	ldr	r3, [pc, #204]	; (8001710 <menu+0x254>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <menu+0x192>
			menuSayac = 7;
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <menu+0x24c>)
 800164a:	2207      	movs	r2, #7
 800164c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <menu+0x24c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b0f      	cmp	r3, #15
 8001654:	d106      	bne.n	8001664 <menu+0x1a8>
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <menu+0x254>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d102      	bne.n	8001664 <menu+0x1a8>
			menuSayac = 12;
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <menu+0x24c>)
 8001660:	220c      	movs	r2, #12
 8001662:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001664:	4b28      	ldr	r3, [pc, #160]	; (8001708 <menu+0x24c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b0c      	cmp	r3, #12
 800166a:	d106      	bne.n	800167a <menu+0x1be>
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <menu+0x254>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d102      	bne.n	800167a <menu+0x1be>
			menuSayac = 8;
 8001674:	4b24      	ldr	r3, [pc, #144]	; (8001708 <menu+0x24c>)
 8001676:	2208      	movs	r2, #8
 8001678:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800167a:	4b23      	ldr	r3, [pc, #140]	; (8001708 <menu+0x24c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b0a      	cmp	r3, #10
 8001680:	d10a      	bne.n	8001698 <menu+0x1dc>
 8001682:	4b24      	ldr	r3, [pc, #144]	; (8001714 <menu+0x258>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d003      	beq.n	8001692 <menu+0x1d6>
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <menu+0x258>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d102      	bne.n	8001698 <menu+0x1dc>
			menuSayac = 9;
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <menu+0x24c>)
 8001694:	2209      	movs	r2, #9
 8001696:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <menu+0x24c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	d10a      	bne.n	80016b6 <menu+0x1fa>
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <menu+0x25c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d003      	beq.n	80016b0 <menu+0x1f4>
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <menu+0x25c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d102      	bne.n	80016b6 <menu+0x1fa>
			menuSayac = 11;
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <menu+0x24c>)
 80016b2:	220b      	movs	r2, #11
 80016b4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <menu+0x24c>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b0f      	cmp	r3, #15
 80016bc:	d106      	bne.n	80016cc <menu+0x210>
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <menu+0x260>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d102      	bne.n	80016cc <menu+0x210>
			menuSayac = 14;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <menu+0x24c>)
 80016c8:	220e      	movs	r2, #14
 80016ca:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <menu+0x24c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b19      	cmp	r3, #25
 80016d2:	d106      	bne.n	80016e2 <menu+0x226>
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <menu+0x250>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <menu+0x226>
			menuSayac = 23;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <menu+0x24c>)
 80016de:	2217      	movs	r2, #23
 80016e0:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016e2:	f003 fe8f 	bl	8005404 <bekle>
	}

	if (menuSayac == 0) {
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <menu+0x24c>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d134      	bne.n	8001758 <menu+0x29c>
		if(dilSecim == 0) {
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <menu+0x268>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d122      	bne.n	800173c <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80016f6:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <menu+0x26c>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	2001      	movs	r0, #1
 80016fc:	e016      	b.n	800172c <menu+0x270>
 80016fe:	bf00      	nop
 8001700:	40010800 	.word	0x40010800
 8001704:	200002df 	.word	0x200002df
 8001708:	200002b0 	.word	0x200002b0
 800170c:	200002bf 	.word	0x200002bf
 8001710:	200002b8 	.word	0x200002b8
 8001714:	200002b9 	.word	0x200002b9
 8001718:	200002ba 	.word	0x200002ba
 800171c:	200002bb 	.word	0x200002bb
 8001720:	40011000 	.word	0x40011000
 8001724:	200002d1 	.word	0x200002d1
 8001728:	0800be90 	.word	0x0800be90
 800172c:	f7fe ff1a 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001730:	4a94      	ldr	r2, [pc, #592]	; (8001984 <menu+0x4c8>)
 8001732:	2101      	movs	r1, #1
 8001734:	2002      	movs	r0, #2
 8001736:	f7fe ff15 	bl	8000564 <lcd_print>
 800173a:	e00d      	b.n	8001758 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 800173c:	4b92      	ldr	r3, [pc, #584]	; (8001988 <menu+0x4cc>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d109      	bne.n	8001758 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001744:	4a91      	ldr	r2, [pc, #580]	; (800198c <menu+0x4d0>)
 8001746:	2101      	movs	r1, #1
 8001748:	2001      	movs	r0, #1
 800174a:	f7fe ff0b 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800174e:	4a90      	ldr	r2, [pc, #576]	; (8001990 <menu+0x4d4>)
 8001750:	2101      	movs	r1, #1
 8001752:	2002      	movs	r0, #2
 8001754:	f7fe ff06 	bl	8000564 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001758:	4b8e      	ldr	r3, [pc, #568]	; (8001994 <menu+0x4d8>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	f040 82b5 	bne.w	8001ccc <menu+0x810>
		if(dilSecim == 0) {
 8001762:	4b89      	ldr	r3, [pc, #548]	; (8001988 <menu+0x4cc>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d105      	bne.n	8001776 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800176a:	4a8b      	ldr	r2, [pc, #556]	; (8001998 <menu+0x4dc>)
 800176c:	2101      	movs	r1, #1
 800176e:	2001      	movs	r0, #1
 8001770:	f7fe fef8 	bl	8000564 <lcd_print>
 8001774:	e008      	b.n	8001788 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001776:	4b84      	ldr	r3, [pc, #528]	; (8001988 <menu+0x4cc>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d104      	bne.n	8001788 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800177e:	4a87      	ldr	r2, [pc, #540]	; (800199c <menu+0x4e0>)
 8001780:	2101      	movs	r1, #1
 8001782:	2001      	movs	r0, #1
 8001784:	f7fe feee 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001788:	4b85      	ldr	r3, [pc, #532]	; (80019a0 <menu+0x4e4>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d123      	bne.n	80017d8 <menu+0x31c>
			if(dilSecim == 0) {
 8001790:	4b7d      	ldr	r3, [pc, #500]	; (8001988 <menu+0x4cc>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001798:	4a82      	ldr	r2, [pc, #520]	; (80019a4 <menu+0x4e8>)
 800179a:	2101      	movs	r1, #1
 800179c:	2002      	movs	r0, #2
 800179e:	f7fe fee1 	bl	8000564 <lcd_print>
 80017a2:	e008      	b.n	80017b6 <menu+0x2fa>

			} else if(dilSecim == 1) {
 80017a4:	4b78      	ldr	r3, [pc, #480]	; (8001988 <menu+0x4cc>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d104      	bne.n	80017b6 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80017ac:	4a7e      	ldr	r2, [pc, #504]	; (80019a8 <menu+0x4ec>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	2002      	movs	r0, #2
 80017b2:	f7fe fed7 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80017b6:	4a7d      	ldr	r2, [pc, #500]	; (80019ac <menu+0x4f0>)
 80017b8:	210f      	movs	r1, #15
 80017ba:	2002      	movs	r0, #2
 80017bc:	f7fe fed2 	bl	8000564 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80017c0:	4b7b      	ldr	r3, [pc, #492]	; (80019b0 <menu+0x4f4>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	220a      	movs	r2, #10
 80017c6:	497b      	ldr	r1, [pc, #492]	; (80019b4 <menu+0x4f8>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00a fa53 	bl	800bc74 <itoa>
			lcd_print(2, 14, snum);
 80017ce:	4a79      	ldr	r2, [pc, #484]	; (80019b4 <menu+0x4f8>)
 80017d0:	210e      	movs	r1, #14
 80017d2:	2002      	movs	r0, #2
 80017d4:	f7fe fec6 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80017d8:	4b71      	ldr	r3, [pc, #452]	; (80019a0 <menu+0x4e4>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d123      	bne.n	8001828 <menu+0x36c>
			if(dilSecim == 0) {
 80017e0:	4b69      	ldr	r3, [pc, #420]	; (8001988 <menu+0x4cc>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d105      	bne.n	80017f4 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80017e8:	4a73      	ldr	r2, [pc, #460]	; (80019b8 <menu+0x4fc>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	2002      	movs	r0, #2
 80017ee:	f7fe feb9 	bl	8000564 <lcd_print>
 80017f2:	e008      	b.n	8001806 <menu+0x34a>
			} else if(dilSecim == 1) {
 80017f4:	4b64      	ldr	r3, [pc, #400]	; (8001988 <menu+0x4cc>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d104      	bne.n	8001806 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80017fc:	4a6f      	ldr	r2, [pc, #444]	; (80019bc <menu+0x500>)
 80017fe:	2101      	movs	r1, #1
 8001800:	2002      	movs	r0, #2
 8001802:	f7fe feaf 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001806:	4a6e      	ldr	r2, [pc, #440]	; (80019c0 <menu+0x504>)
 8001808:	210f      	movs	r1, #15
 800180a:	2002      	movs	r0, #2
 800180c:	f7fe feaa 	bl	8000564 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001810:	4b6c      	ldr	r3, [pc, #432]	; (80019c4 <menu+0x508>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	220a      	movs	r2, #10
 8001816:	4967      	ldr	r1, [pc, #412]	; (80019b4 <menu+0x4f8>)
 8001818:	4618      	mov	r0, r3
 800181a:	f00a fa2b 	bl	800bc74 <itoa>
			lcd_print(2, 14, snum);
 800181e:	4a65      	ldr	r2, [pc, #404]	; (80019b4 <menu+0x4f8>)
 8001820:	210e      	movs	r1, #14
 8001822:	2002      	movs	r0, #2
 8001824:	f7fe fe9e 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001828:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <menu+0x4e4>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d123      	bne.n	8001878 <menu+0x3bc>
			if(dilSecim == 0) {
 8001830:	4b55      	ldr	r3, [pc, #340]	; (8001988 <menu+0x4cc>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d105      	bne.n	8001844 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001838:	4a63      	ldr	r2, [pc, #396]	; (80019c8 <menu+0x50c>)
 800183a:	2101      	movs	r1, #1
 800183c:	2002      	movs	r0, #2
 800183e:	f7fe fe91 	bl	8000564 <lcd_print>
 8001842:	e008      	b.n	8001856 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001844:	4b50      	ldr	r3, [pc, #320]	; (8001988 <menu+0x4cc>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d104      	bne.n	8001856 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 800184c:	4a5f      	ldr	r2, [pc, #380]	; (80019cc <menu+0x510>)
 800184e:	2101      	movs	r1, #1
 8001850:	2002      	movs	r0, #2
 8001852:	f7fe fe87 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001856:	4a5a      	ldr	r2, [pc, #360]	; (80019c0 <menu+0x504>)
 8001858:	210f      	movs	r1, #15
 800185a:	2002      	movs	r0, #2
 800185c:	f7fe fe82 	bl	8000564 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001860:	4b5b      	ldr	r3, [pc, #364]	; (80019d0 <menu+0x514>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	220a      	movs	r2, #10
 8001866:	4953      	ldr	r1, [pc, #332]	; (80019b4 <menu+0x4f8>)
 8001868:	4618      	mov	r0, r3
 800186a:	f00a fa03 	bl	800bc74 <itoa>
			lcd_print(2, 14, snum);
 800186e:	4a51      	ldr	r2, [pc, #324]	; (80019b4 <menu+0x4f8>)
 8001870:	210e      	movs	r1, #14
 8001872:	2002      	movs	r0, #2
 8001874:	f7fe fe76 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001878:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <menu+0x4e4>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d123      	bne.n	80018c8 <menu+0x40c>
			if(dilSecim == 0) {
 8001880:	4b41      	ldr	r3, [pc, #260]	; (8001988 <menu+0x4cc>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001888:	4a52      	ldr	r2, [pc, #328]	; (80019d4 <menu+0x518>)
 800188a:	2101      	movs	r1, #1
 800188c:	2002      	movs	r0, #2
 800188e:	f7fe fe69 	bl	8000564 <lcd_print>
 8001892:	e008      	b.n	80018a6 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001894:	4b3c      	ldr	r3, [pc, #240]	; (8001988 <menu+0x4cc>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d104      	bne.n	80018a6 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 800189c:	4a4e      	ldr	r2, [pc, #312]	; (80019d8 <menu+0x51c>)
 800189e:	2101      	movs	r1, #1
 80018a0:	2002      	movs	r0, #2
 80018a2:	f7fe fe5f 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018a6:	4a46      	ldr	r2, [pc, #280]	; (80019c0 <menu+0x504>)
 80018a8:	210f      	movs	r1, #15
 80018aa:	2002      	movs	r0, #2
 80018ac:	f7fe fe5a 	bl	8000564 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80018b0:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <menu+0x520>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	220a      	movs	r2, #10
 80018b6:	493f      	ldr	r1, [pc, #252]	; (80019b4 <menu+0x4f8>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00a f9db 	bl	800bc74 <itoa>
			lcd_print(2, 14, snum);
 80018be:	4a3d      	ldr	r2, [pc, #244]	; (80019b4 <menu+0x4f8>)
 80018c0:	210e      	movs	r1, #14
 80018c2:	2002      	movs	r0, #2
 80018c4:	f7fe fe4e 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80018c8:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <menu+0x4e4>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d123      	bne.n	8001918 <menu+0x45c>
			if(dilSecim == 0) {
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <menu+0x4cc>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80018d8:	4a41      	ldr	r2, [pc, #260]	; (80019e0 <menu+0x524>)
 80018da:	2101      	movs	r1, #1
 80018dc:	2002      	movs	r0, #2
 80018de:	f7fe fe41 	bl	8000564 <lcd_print>
 80018e2:	e008      	b.n	80018f6 <menu+0x43a>
			} else if(dilSecim == 1) {
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <menu+0x4cc>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d104      	bne.n	80018f6 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80018ec:	4a3d      	ldr	r2, [pc, #244]	; (80019e4 <menu+0x528>)
 80018ee:	2101      	movs	r1, #1
 80018f0:	2002      	movs	r0, #2
 80018f2:	f7fe fe37 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018f6:	4a32      	ldr	r2, [pc, #200]	; (80019c0 <menu+0x504>)
 80018f8:	210f      	movs	r1, #15
 80018fa:	2002      	movs	r0, #2
 80018fc:	f7fe fe32 	bl	8000564 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001900:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <menu+0x52c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	220a      	movs	r2, #10
 8001906:	492b      	ldr	r1, [pc, #172]	; (80019b4 <menu+0x4f8>)
 8001908:	4618      	mov	r0, r3
 800190a:	f00a f9b3 	bl	800bc74 <itoa>
			lcd_print(2, 14, snum);
 800190e:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <menu+0x4f8>)
 8001910:	210e      	movs	r1, #14
 8001912:	2002      	movs	r0, #2
 8001914:	f7fe fe26 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <menu+0x4e4>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b05      	cmp	r3, #5
 800191e:	d123      	bne.n	8001968 <menu+0x4ac>
			if(dilSecim == 0) {
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <menu+0x4cc>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001928:	4a30      	ldr	r2, [pc, #192]	; (80019ec <menu+0x530>)
 800192a:	2101      	movs	r1, #1
 800192c:	2002      	movs	r0, #2
 800192e:	f7fe fe19 	bl	8000564 <lcd_print>
 8001932:	e008      	b.n	8001946 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <menu+0x4cc>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d104      	bne.n	8001946 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 800193c:	4a2c      	ldr	r2, [pc, #176]	; (80019f0 <menu+0x534>)
 800193e:	2101      	movs	r1, #1
 8001940:	2002      	movs	r0, #2
 8001942:	f7fe fe0f 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001946:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <menu+0x504>)
 8001948:	210f      	movs	r1, #15
 800194a:	2002      	movs	r0, #2
 800194c:	f7fe fe0a 	bl	8000564 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001950:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <menu+0x538>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	220a      	movs	r2, #10
 8001956:	4917      	ldr	r1, [pc, #92]	; (80019b4 <menu+0x4f8>)
 8001958:	4618      	mov	r0, r3
 800195a:	f00a f98b 	bl	800bc74 <itoa>
			lcd_print(2, 14, snum);
 800195e:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <menu+0x4f8>)
 8001960:	210e      	movs	r1, #14
 8001962:	2002      	movs	r0, #2
 8001964:	f7fe fdfe 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <menu+0x4e4>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b06      	cmp	r3, #6
 800196e:	d15f      	bne.n	8001a30 <menu+0x574>
			if(dilSecim == 0) {
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <menu+0x4cc>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d141      	bne.n	80019fc <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001978:	4a1f      	ldr	r2, [pc, #124]	; (80019f8 <menu+0x53c>)
 800197a:	2101      	movs	r1, #1
 800197c:	2002      	movs	r0, #2
 800197e:	f7fe fdf1 	bl	8000564 <lcd_print>
 8001982:	e044      	b.n	8001a0e <menu+0x552>
 8001984:	0800bea4 	.word	0x0800bea4
 8001988:	200002d1 	.word	0x200002d1
 800198c:	0800beb8 	.word	0x0800beb8
 8001990:	0800becc 	.word	0x0800becc
 8001994:	200002b0 	.word	0x200002b0
 8001998:	0800bee0 	.word	0x0800bee0
 800199c:	0800bef4 	.word	0x0800bef4
 80019a0:	200002b2 	.word	0x200002b2
 80019a4:	0800bf08 	.word	0x0800bf08
 80019a8:	0800bf18 	.word	0x0800bf18
 80019ac:	0800bf28 	.word	0x0800bf28
 80019b0:	200002d2 	.word	0x200002d2
 80019b4:	20000250 	.word	0x20000250
 80019b8:	0800bf2c 	.word	0x0800bf2c
 80019bc:	0800bf3c 	.word	0x0800bf3c
 80019c0:	0800bf4c 	.word	0x0800bf4c
 80019c4:	200002d3 	.word	0x200002d3
 80019c8:	0800bf50 	.word	0x0800bf50
 80019cc:	0800bf60 	.word	0x0800bf60
 80019d0:	200002d4 	.word	0x200002d4
 80019d4:	0800bf70 	.word	0x0800bf70
 80019d8:	0800bf80 	.word	0x0800bf80
 80019dc:	200002d5 	.word	0x200002d5
 80019e0:	0800bf90 	.word	0x0800bf90
 80019e4:	0800bfa0 	.word	0x0800bfa0
 80019e8:	200002d6 	.word	0x200002d6
 80019ec:	0800bfb0 	.word	0x0800bfb0
 80019f0:	0800bfc0 	.word	0x0800bfc0
 80019f4:	200002d7 	.word	0x200002d7
 80019f8:	0800bfd0 	.word	0x0800bfd0
			} else if(dilSecim == 1) {
 80019fc:	4b4f      	ldr	r3, [pc, #316]	; (8001b3c <menu+0x680>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d104      	bne.n	8001a0e <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001a04:	4a4e      	ldr	r2, [pc, #312]	; (8001b40 <menu+0x684>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	2002      	movs	r0, #2
 8001a0a:	f7fe fdab 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a0e:	4a4d      	ldr	r2, [pc, #308]	; (8001b44 <menu+0x688>)
 8001a10:	210f      	movs	r1, #15
 8001a12:	2002      	movs	r0, #2
 8001a14:	f7fe fda6 	bl	8000564 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001a18:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <menu+0x68c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	220a      	movs	r2, #10
 8001a1e:	494b      	ldr	r1, [pc, #300]	; (8001b4c <menu+0x690>)
 8001a20:	4618      	mov	r0, r3
 8001a22:	f00a f927 	bl	800bc74 <itoa>
			lcd_print(2, 14, snum);
 8001a26:	4a49      	ldr	r2, [pc, #292]	; (8001b4c <menu+0x690>)
 8001a28:	210e      	movs	r1, #14
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f7fe fd9a 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001a30:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <menu+0x694>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b07      	cmp	r3, #7
 8001a36:	d123      	bne.n	8001a80 <menu+0x5c4>
			if(dilSecim == 0) {
 8001a38:	4b40      	ldr	r3, [pc, #256]	; (8001b3c <menu+0x680>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001a40:	4a44      	ldr	r2, [pc, #272]	; (8001b54 <menu+0x698>)
 8001a42:	2101      	movs	r1, #1
 8001a44:	2002      	movs	r0, #2
 8001a46:	f7fe fd8d 	bl	8000564 <lcd_print>
 8001a4a:	e008      	b.n	8001a5e <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001a4c:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <menu+0x680>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d104      	bne.n	8001a5e <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001a54:	4a40      	ldr	r2, [pc, #256]	; (8001b58 <menu+0x69c>)
 8001a56:	2101      	movs	r1, #1
 8001a58:	2002      	movs	r0, #2
 8001a5a:	f7fe fd83 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a5e:	4a39      	ldr	r2, [pc, #228]	; (8001b44 <menu+0x688>)
 8001a60:	210f      	movs	r1, #15
 8001a62:	2002      	movs	r0, #2
 8001a64:	f7fe fd7e 	bl	8000564 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001a68:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <menu+0x6a0>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	220a      	movs	r2, #10
 8001a6e:	4937      	ldr	r1, [pc, #220]	; (8001b4c <menu+0x690>)
 8001a70:	4618      	mov	r0, r3
 8001a72:	f00a f8ff 	bl	800bc74 <itoa>
			lcd_print(2, 14, snum);
 8001a76:	4a35      	ldr	r2, [pc, #212]	; (8001b4c <menu+0x690>)
 8001a78:	210e      	movs	r1, #14
 8001a7a:	2002      	movs	r0, #2
 8001a7c:	f7fe fd72 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001a80:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <menu+0x694>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d123      	bne.n	8001ad0 <menu+0x614>
			if(dilSecim == 0) {
 8001a88:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <menu+0x680>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001a90:	4a33      	ldr	r2, [pc, #204]	; (8001b60 <menu+0x6a4>)
 8001a92:	2101      	movs	r1, #1
 8001a94:	2002      	movs	r0, #2
 8001a96:	f7fe fd65 	bl	8000564 <lcd_print>
 8001a9a:	e008      	b.n	8001aae <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <menu+0x680>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d104      	bne.n	8001aae <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001aa4:	4a2f      	ldr	r2, [pc, #188]	; (8001b64 <menu+0x6a8>)
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f7fe fd5b 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001aae:	4a25      	ldr	r2, [pc, #148]	; (8001b44 <menu+0x688>)
 8001ab0:	210f      	movs	r1, #15
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f7fe fd56 	bl	8000564 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <menu+0x6ac>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	220a      	movs	r2, #10
 8001abe:	4923      	ldr	r1, [pc, #140]	; (8001b4c <menu+0x690>)
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f00a f8d7 	bl	800bc74 <itoa>
			lcd_print(2, 14, snum);
 8001ac6:	4a21      	ldr	r2, [pc, #132]	; (8001b4c <menu+0x690>)
 8001ac8:	210e      	movs	r1, #14
 8001aca:	2002      	movs	r0, #2
 8001acc:	f7fe fd4a 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <menu+0x694>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	d123      	bne.n	8001b20 <menu+0x664>
			if(dilSecim == 0) {
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <menu+0x680>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001ae0:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <menu+0x6b0>)
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	f7fe fd3d 	bl	8000564 <lcd_print>
 8001aea:	e008      	b.n	8001afe <menu+0x642>
			} else if(dilSecim == 1) {
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <menu+0x680>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d104      	bne.n	8001afe <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001af4:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <menu+0x6b4>)
 8001af6:	2101      	movs	r1, #1
 8001af8:	2002      	movs	r0, #2
 8001afa:	f7fe fd33 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001afe:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <menu+0x6b8>)
 8001b00:	2110      	movs	r1, #16
 8001b02:	2002      	movs	r0, #2
 8001b04:	f7fe fd2e 	bl	8000564 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <menu+0x6bc>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	220a      	movs	r2, #10
 8001b0e:	490f      	ldr	r1, [pc, #60]	; (8001b4c <menu+0x690>)
 8001b10:	4618      	mov	r0, r3
 8001b12:	f00a f8af 	bl	800bc74 <itoa>
			lcd_print(2, 15, snum);
 8001b16:	4a0d      	ldr	r2, [pc, #52]	; (8001b4c <menu+0x690>)
 8001b18:	210f      	movs	r1, #15
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f7fe fd22 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <menu+0x694>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b0a      	cmp	r3, #10
 8001b26:	d134      	bne.n	8001b92 <menu+0x6d6>
			if(dilSecim == 0) {
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <menu+0x680>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d127      	bne.n	8001b80 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001b30:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <menu+0x6c0>)
 8001b32:	2101      	movs	r1, #1
 8001b34:	2002      	movs	r0, #2
 8001b36:	f7fe fd15 	bl	8000564 <lcd_print>
 8001b3a:	e02a      	b.n	8001b92 <menu+0x6d6>
 8001b3c:	200002d1 	.word	0x200002d1
 8001b40:	0800bfe0 	.word	0x0800bfe0
 8001b44:	0800bf4c 	.word	0x0800bf4c
 8001b48:	200002d8 	.word	0x200002d8
 8001b4c:	20000250 	.word	0x20000250
 8001b50:	200002b2 	.word	0x200002b2
 8001b54:	0800bff0 	.word	0x0800bff0
 8001b58:	0800c000 	.word	0x0800c000
 8001b5c:	200002d9 	.word	0x200002d9
 8001b60:	0800c010 	.word	0x0800c010
 8001b64:	0800c020 	.word	0x0800c020
 8001b68:	200002da 	.word	0x200002da
 8001b6c:	0800c030 	.word	0x0800c030
 8001b70:	0800c040 	.word	0x0800c040
 8001b74:	0800c050 	.word	0x0800c050
 8001b78:	200002db 	.word	0x200002db
 8001b7c:	0800c054 	.word	0x0800c054
			} else if(dilSecim == 1) {
 8001b80:	4b82      	ldr	r3, [pc, #520]	; (8001d8c <menu+0x8d0>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d104      	bne.n	8001b92 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001b88:	4a81      	ldr	r2, [pc, #516]	; (8001d90 <menu+0x8d4>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f7fe fce9 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b92:	2102      	movs	r1, #2
 8001b94:	487f      	ldr	r0, [pc, #508]	; (8001d94 <menu+0x8d8>)
 8001b96:	f007 f877 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d119      	bne.n	8001bd4 <menu+0x718>
 8001ba0:	4b7d      	ldr	r3, [pc, #500]	; (8001d98 <menu+0x8dc>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	f083 0301 	eor.w	r3, r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d012      	beq.n	8001bd4 <menu+0x718>
 8001bae:	4b7b      	ldr	r3, [pc, #492]	; (8001d9c <menu+0x8e0>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10e      	bne.n	8001bd4 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001bb6:	4b7a      	ldr	r3, [pc, #488]	; (8001da0 <menu+0x8e4>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b78      	ldr	r3, [pc, #480]	; (8001da0 <menu+0x8e4>)
 8001bc0:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001bc2:	4b77      	ldr	r3, [pc, #476]	; (8001da0 <menu+0x8e4>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b0a      	cmp	r3, #10
 8001bc8:	d902      	bls.n	8001bd0 <menu+0x714>
				hataGostermeSirasi = 0;
 8001bca:	4b75      	ldr	r3, [pc, #468]	; (8001da0 <menu+0x8e4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bd0:	f003 fc18 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bd4:	2104      	movs	r1, #4
 8001bd6:	486f      	ldr	r0, [pc, #444]	; (8001d94 <menu+0x8d8>)
 8001bd8:	f007 f856 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d119      	bne.n	8001c16 <menu+0x75a>
 8001be2:	4b6d      	ldr	r3, [pc, #436]	; (8001d98 <menu+0x8dc>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	f083 0301 	eor.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d012      	beq.n	8001c16 <menu+0x75a>
 8001bf0:	4b6a      	ldr	r3, [pc, #424]	; (8001d9c <menu+0x8e0>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10e      	bne.n	8001c16 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001bf8:	4b69      	ldr	r3, [pc, #420]	; (8001da0 <menu+0x8e4>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	4b67      	ldr	r3, [pc, #412]	; (8001da0 <menu+0x8e4>)
 8001c02:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001c04:	4b66      	ldr	r3, [pc, #408]	; (8001da0 <menu+0x8e4>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b0b      	cmp	r3, #11
 8001c0a:	d902      	bls.n	8001c12 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001c0c:	4b64      	ldr	r3, [pc, #400]	; (8001da0 <menu+0x8e4>)
 8001c0e:	220a      	movs	r2, #10
 8001c10:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001c12:	f003 fbf7 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001c16:	2108      	movs	r1, #8
 8001c18:	485e      	ldr	r0, [pc, #376]	; (8001d94 <menu+0x8d8>)
 8001c1a:	f007 f835 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d153      	bne.n	8001ccc <menu+0x810>
 8001c24:	4b5c      	ldr	r3, [pc, #368]	; (8001d98 <menu+0x8dc>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	f083 0301 	eor.w	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d04c      	beq.n	8001ccc <menu+0x810>
 8001c32:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <menu+0x8e4>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b0a      	cmp	r3, #10
 8001c38:	d148      	bne.n	8001ccc <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001c3a:	4b5a      	ldr	r3, [pc, #360]	; (8001da4 <menu+0x8e8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	4b59      	ldr	r3, [pc, #356]	; (8001da8 <menu+0x8ec>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001c48:	4b58      	ldr	r3, [pc, #352]	; (8001dac <menu+0x8f0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	4b56      	ldr	r3, [pc, #344]	; (8001da8 <menu+0x8ec>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001c56:	4b56      	ldr	r3, [pc, #344]	; (8001db0 <menu+0x8f4>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	4b52      	ldr	r3, [pc, #328]	; (8001da8 <menu+0x8ec>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001c64:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <menu+0x8f8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	4b4f      	ldr	r3, [pc, #316]	; (8001da8 <menu+0x8ec>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001c72:	4b51      	ldr	r3, [pc, #324]	; (8001db8 <menu+0x8fc>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	4b4b      	ldr	r3, [pc, #300]	; (8001da8 <menu+0x8ec>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001c80:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <menu+0x900>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	4b48      	ldr	r3, [pc, #288]	; (8001da8 <menu+0x8ec>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001c8e:	4b4c      	ldr	r3, [pc, #304]	; (8001dc0 <menu+0x904>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
 8001c94:	4b44      	ldr	r3, [pc, #272]	; (8001da8 <menu+0x8ec>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001c9c:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <menu+0x908>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <menu+0x8ec>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <menu+0x90c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <menu+0x8ec>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001cb8:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <menu+0x910>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <menu+0x8ec>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001cc6:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <menu+0x914>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001ccc:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <menu+0x918>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	f040 80fc 	bne.w	8001ece <menu+0xa12>
		if(dilSecim == 0) {
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <menu+0x8d0>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d105      	bne.n	8001cea <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001cde:	4a3e      	ldr	r2, [pc, #248]	; (8001dd8 <menu+0x91c>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f7fe fc3e 	bl	8000564 <lcd_print>
 8001ce8:	e008      	b.n	8001cfc <menu+0x840>
		} else if(dilSecim == 1) {
 8001cea:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <menu+0x8d0>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d104      	bne.n	8001cfc <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001cf2:	4a3a      	ldr	r2, [pc, #232]	; (8001ddc <menu+0x920>)
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f7fe fc34 	bl	8000564 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <menu+0x8e0>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d003      	beq.n	8001d0c <menu+0x850>
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <menu+0x8e0>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d112      	bne.n	8001d32 <menu+0x876>
			if(dilSecim == 0) {
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <menu+0x8d0>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d105      	bne.n	8001d20 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001d14:	4a32      	ldr	r2, [pc, #200]	; (8001de0 <menu+0x924>)
 8001d16:	2101      	movs	r1, #1
 8001d18:	2002      	movs	r0, #2
 8001d1a:	f7fe fc23 	bl	8000564 <lcd_print>
 8001d1e:	e008      	b.n	8001d32 <menu+0x876>
			} else if(dilSecim == 1) {
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <menu+0x8d0>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d104      	bne.n	8001d32 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001d28:	4a2e      	ldr	r2, [pc, #184]	; (8001de4 <menu+0x928>)
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	2002      	movs	r0, #2
 8001d2e:	f7fe fc19 	bl	8000564 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <menu+0x92c>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d116      	bne.n	8001d68 <menu+0x8ac>
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <menu+0x8e0>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d112      	bne.n	8001d68 <menu+0x8ac>
			if(dilSecim == 0) {
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <menu+0x8d0>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d105      	bne.n	8001d56 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001d4a:	4a28      	ldr	r2, [pc, #160]	; (8001dec <menu+0x930>)
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	2002      	movs	r0, #2
 8001d50:	f7fe fc08 	bl	8000564 <lcd_print>
 8001d54:	e008      	b.n	8001d68 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <menu+0x8d0>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d104      	bne.n	8001d68 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001d5e:	4a24      	ldr	r2, [pc, #144]	; (8001df0 <menu+0x934>)
 8001d60:	2101      	movs	r1, #1
 8001d62:	2002      	movs	r0, #2
 8001d64:	f7fe fbfe 	bl	8000564 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <menu+0x92c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d14c      	bne.n	8001e0a <menu+0x94e>
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <menu+0x8e0>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d148      	bne.n	8001e0a <menu+0x94e>
			if(dilSecim == 0) {
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <menu+0x8d0>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d13b      	bne.n	8001df8 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001d80:	4a1c      	ldr	r2, [pc, #112]	; (8001df4 <menu+0x938>)
 8001d82:	2101      	movs	r1, #1
 8001d84:	2002      	movs	r0, #2
 8001d86:	f7fe fbed 	bl	8000564 <lcd_print>
 8001d8a:	e03e      	b.n	8001e0a <menu+0x94e>
 8001d8c:	200002d1 	.word	0x200002d1
 8001d90:	0800c068 	.word	0x0800c068
 8001d94:	40010800 	.word	0x40010800
 8001d98:	200002df 	.word	0x200002df
 8001d9c:	200002bf 	.word	0x200002bf
 8001da0:	200002b2 	.word	0x200002b2
 8001da4:	200002d2 	.word	0x200002d2
 8001da8:	200001e0 	.word	0x200001e0
 8001dac:	200002d3 	.word	0x200002d3
 8001db0:	200002d4 	.word	0x200002d4
 8001db4:	200002d5 	.word	0x200002d5
 8001db8:	200002d6 	.word	0x200002d6
 8001dbc:	200002d7 	.word	0x200002d7
 8001dc0:	200002d8 	.word	0x200002d8
 8001dc4:	200002d9 	.word	0x200002d9
 8001dc8:	200002da 	.word	0x200002da
 8001dcc:	200002db 	.word	0x200002db
 8001dd0:	200002dc 	.word	0x200002dc
 8001dd4:	200002b0 	.word	0x200002b0
 8001dd8:	0800c07c 	.word	0x0800c07c
 8001ddc:	0800c090 	.word	0x0800c090
 8001de0:	0800c0a4 	.word	0x0800c0a4
 8001de4:	0800c0b8 	.word	0x0800c0b8
 8001de8:	200002b1 	.word	0x200002b1
 8001dec:	0800c0cc 	.word	0x0800c0cc
 8001df0:	0800c0dc 	.word	0x0800c0dc
 8001df4:	0800c0ec 	.word	0x0800c0ec
			} else if(dilSecim == 1) {
 8001df8:	4b98      	ldr	r3, [pc, #608]	; (800205c <menu+0xba0>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d104      	bne.n	8001e0a <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001e00:	4a97      	ldr	r2, [pc, #604]	; (8002060 <menu+0xba4>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	2002      	movs	r0, #2
 8001e06:	f7fe fbad 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	4895      	ldr	r0, [pc, #596]	; (8002064 <menu+0xba8>)
 8001e0e:	f006 ff3b 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d119      	bne.n	8001e4c <menu+0x990>
 8001e18:	4b93      	ldr	r3, [pc, #588]	; (8002068 <menu+0xbac>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f083 0301 	eor.w	r3, r3, #1
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d012      	beq.n	8001e4c <menu+0x990>
 8001e26:	4b91      	ldr	r3, [pc, #580]	; (800206c <menu+0xbb0>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10e      	bne.n	8001e4c <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001e2e:	4b90      	ldr	r3, [pc, #576]	; (8002070 <menu+0xbb4>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4b8e      	ldr	r3, [pc, #568]	; (8002070 <menu+0xbb4>)
 8001e38:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001e3a:	4b8d      	ldr	r3, [pc, #564]	; (8002070 <menu+0xbb4>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d902      	bls.n	8001e48 <menu+0x98c>
				calismaSekli = 0;
 8001e42:	4b8b      	ldr	r3, [pc, #556]	; (8002070 <menu+0xbb4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e48:	f003 fadc 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	4885      	ldr	r0, [pc, #532]	; (8002064 <menu+0xba8>)
 8001e50:	f006 ff1a 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d119      	bne.n	8001e8e <menu+0x9d2>
 8001e5a:	4b83      	ldr	r3, [pc, #524]	; (8002068 <menu+0xbac>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	f083 0301 	eor.w	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d012      	beq.n	8001e8e <menu+0x9d2>
 8001e68:	4b80      	ldr	r3, [pc, #512]	; (800206c <menu+0xbb0>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10e      	bne.n	8001e8e <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001e70:	4b7f      	ldr	r3, [pc, #508]	; (8002070 <menu+0xbb4>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b7d      	ldr	r3, [pc, #500]	; (8002070 <menu+0xbb4>)
 8001e7a:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001e7c:	4b7c      	ldr	r3, [pc, #496]	; (8002070 <menu+0xbb4>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <menu+0x9ce>
	    		calismaSekli = 1;
 8001e84:	4b7a      	ldr	r3, [pc, #488]	; (8002070 <menu+0xbb4>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e8a:	f003 fabb 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e8e:	2108      	movs	r1, #8
 8001e90:	4874      	ldr	r0, [pc, #464]	; (8002064 <menu+0xba8>)
 8001e92:	f006 fef9 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d118      	bne.n	8001ece <menu+0xa12>
 8001e9c:	4b72      	ldr	r3, [pc, #456]	; (8002068 <menu+0xbac>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	f083 0301 	eor.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d011      	beq.n	8001ece <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001eaa:	4b71      	ldr	r3, [pc, #452]	; (8002070 <menu+0xbb4>)
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	4b71      	ldr	r3, [pc, #452]	; (8002074 <menu+0xbb8>)
 8001eb0:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001eb2:	4b6f      	ldr	r3, [pc, #444]	; (8002070 <menu+0xbb4>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d106      	bne.n	8001ec8 <menu+0xa0c>
				altLimit = 1;
 8001eba:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <menu+0xbbc>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001ec0:	4b6d      	ldr	r3, [pc, #436]	; (8002078 <menu+0xbbc>)
 8001ec2:	781a      	ldrb	r2, [r3, #0]
 8001ec4:	4b6b      	ldr	r3, [pc, #428]	; (8002074 <menu+0xbb8>)
 8001ec6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ec8:	4b6c      	ldr	r3, [pc, #432]	; (800207c <menu+0xbc0>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001ece:	4b6c      	ldr	r3, [pc, #432]	; (8002080 <menu+0xbc4>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	f040 8083 	bne.w	8001fde <menu+0xb22>
		if(dilSecim == 0) {
 8001ed8:	4b60      	ldr	r3, [pc, #384]	; (800205c <menu+0xba0>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d105      	bne.n	8001eec <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001ee0:	4a68      	ldr	r2, [pc, #416]	; (8002084 <menu+0xbc8>)
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7fe fb3d 	bl	8000564 <lcd_print>
 8001eea:	e008      	b.n	8001efe <menu+0xa42>
		} else if(dilSecim == 1) {
 8001eec:	4b5b      	ldr	r3, [pc, #364]	; (800205c <menu+0xba0>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d104      	bne.n	8001efe <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001ef4:	4a64      	ldr	r2, [pc, #400]	; (8002088 <menu+0xbcc>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7fe fb33 	bl	8000564 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001efe:	4b63      	ldr	r3, [pc, #396]	; (800208c <menu+0xbd0>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d113      	bne.n	8001f2e <menu+0xa72>
			if(dilSecim == 0) {
 8001f06:	4b55      	ldr	r3, [pc, #340]	; (800205c <menu+0xba0>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d105      	bne.n	8001f1a <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001f0e:	4a60      	ldr	r2, [pc, #384]	; (8002090 <menu+0xbd4>)
 8001f10:	2101      	movs	r1, #1
 8001f12:	2002      	movs	r0, #2
 8001f14:	f7fe fb26 	bl	8000564 <lcd_print>
 8001f18:	e012      	b.n	8001f40 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001f1a:	4b50      	ldr	r3, [pc, #320]	; (800205c <menu+0xba0>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10e      	bne.n	8001f40 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001f22:	4a5c      	ldr	r2, [pc, #368]	; (8002094 <menu+0xbd8>)
 8001f24:	2101      	movs	r1, #1
 8001f26:	2002      	movs	r0, #2
 8001f28:	f7fe fb1c 	bl	8000564 <lcd_print>
 8001f2c:	e008      	b.n	8001f40 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001f2e:	4b57      	ldr	r3, [pc, #348]	; (800208c <menu+0xbd0>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d104      	bne.n	8001f40 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001f36:	4a58      	ldr	r2, [pc, #352]	; (8002098 <menu+0xbdc>)
 8001f38:	2101      	movs	r1, #1
 8001f3a:	2002      	movs	r0, #2
 8001f3c:	f7fe fb12 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f40:	2102      	movs	r1, #2
 8001f42:	4848      	ldr	r0, [pc, #288]	; (8002064 <menu+0xba8>)
 8001f44:	f006 fea0 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d115      	bne.n	8001f7a <menu+0xabe>
 8001f4e:	4b46      	ldr	r3, [pc, #280]	; (8002068 <menu+0xbac>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	f083 0301 	eor.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00e      	beq.n	8001f7a <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001f5c:	4b4b      	ldr	r3, [pc, #300]	; (800208c <menu+0xbd0>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b49      	ldr	r3, [pc, #292]	; (800208c <menu+0xbd0>)
 8001f66:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001f68:	4b48      	ldr	r3, [pc, #288]	; (800208c <menu+0xbd0>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d902      	bls.n	8001f76 <menu+0xaba>
				emniyetCercevesi = 0;
 8001f70:	4b46      	ldr	r3, [pc, #280]	; (800208c <menu+0xbd0>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f76:	f003 fa45 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	4839      	ldr	r0, [pc, #228]	; (8002064 <menu+0xba8>)
 8001f7e:	f006 fe83 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d115      	bne.n	8001fb4 <menu+0xaf8>
 8001f88:	4b37      	ldr	r3, [pc, #220]	; (8002068 <menu+0xbac>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	f083 0301 	eor.w	r3, r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00e      	beq.n	8001fb4 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <menu+0xbd0>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	; (800208c <menu+0xbd0>)
 8001fa0:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001fa2:	4b3a      	ldr	r3, [pc, #232]	; (800208c <menu+0xbd0>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001faa:	4b38      	ldr	r3, [pc, #224]	; (800208c <menu+0xbd0>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fb0:	f003 fa28 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001fb4:	2108      	movs	r1, #8
 8001fb6:	482b      	ldr	r0, [pc, #172]	; (8002064 <menu+0xba8>)
 8001fb8:	f006 fe66 	bl	8008c88 <HAL_GPIO_ReadPin>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d10d      	bne.n	8001fde <menu+0xb22>
 8001fc2:	4b29      	ldr	r3, [pc, #164]	; (8002068 <menu+0xbac>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	f083 0301 	eor.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001fd0:	4b2e      	ldr	r3, [pc, #184]	; (800208c <menu+0xbd0>)
 8001fd2:	781a      	ldrb	r2, [r3, #0]
 8001fd4:	4b27      	ldr	r3, [pc, #156]	; (8002074 <menu+0xbb8>)
 8001fd6:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001fd8:	4b28      	ldr	r3, [pc, #160]	; (800207c <menu+0xbc0>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001fde:	4b28      	ldr	r3, [pc, #160]	; (8002080 <menu+0xbc4>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	f040 80ba 	bne.w	800215c <menu+0xca0>
		if(dilSecim == 0) {
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <menu+0xba0>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001ff0:	4a2a      	ldr	r2, [pc, #168]	; (800209c <menu+0xbe0>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7fe fab5 	bl	8000564 <lcd_print>
 8001ffa:	e008      	b.n	800200e <menu+0xb52>
		} else if(dilSecim == 1) {
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <menu+0xba0>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d104      	bne.n	800200e <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8002004:	4a26      	ldr	r2, [pc, #152]	; (80020a0 <menu+0xbe4>)
 8002006:	2101      	movs	r1, #1
 8002008:	2001      	movs	r0, #1
 800200a:	f7fe faab 	bl	8000564 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 800200e:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <menu+0xbe8>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d113      	bne.n	800203e <menu+0xb82>
			if(dilSecim == 0) {
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <menu+0xba0>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d105      	bne.n	800202a <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 800201e:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <menu+0xbd4>)
 8002020:	2101      	movs	r1, #1
 8002022:	2002      	movs	r0, #2
 8002024:	f7fe fa9e 	bl	8000564 <lcd_print>
 8002028:	e049      	b.n	80020be <menu+0xc02>
			} else if(dilSecim == 1) {
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <menu+0xba0>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d145      	bne.n	80020be <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8002032:	4a18      	ldr	r2, [pc, #96]	; (8002094 <menu+0xbd8>)
 8002034:	2101      	movs	r1, #1
 8002036:	2002      	movs	r0, #2
 8002038:	f7fe fa94 	bl	8000564 <lcd_print>
 800203c:	e03f      	b.n	80020be <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <menu+0xbe8>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d13b      	bne.n	80020be <menu+0xc02>
			if(dilSecim == 0) {
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <menu+0xba0>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d12e      	bne.n	80020ac <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 800204e:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <menu+0xbec>)
 8002050:	2101      	movs	r1, #1
 8002052:	2002      	movs	r0, #2
 8002054:	f7fe fa86 	bl	8000564 <lcd_print>
 8002058:	e031      	b.n	80020be <menu+0xc02>
 800205a:	bf00      	nop
 800205c:	200002d1 	.word	0x200002d1
 8002060:	0800c0fc 	.word	0x0800c0fc
 8002064:	40010800 	.word	0x40010800
 8002068:	200002df 	.word	0x200002df
 800206c:	200002bf 	.word	0x200002bf
 8002070:	200002b1 	.word	0x200002b1
 8002074:	200001e0 	.word	0x200001e0
 8002078:	200002b6 	.word	0x200002b6
 800207c:	200002dc 	.word	0x200002dc
 8002080:	200002b0 	.word	0x200002b0
 8002084:	0800c10c 	.word	0x0800c10c
 8002088:	0800c120 	.word	0x0800c120
 800208c:	200002b4 	.word	0x200002b4
 8002090:	0800c134 	.word	0x0800c134
 8002094:	0800c148 	.word	0x0800c148
 8002098:	0800c15c 	.word	0x0800c15c
 800209c:	0800c16c 	.word	0x0800c16c
 80020a0:	0800c180 	.word	0x0800c180
 80020a4:	200002b5 	.word	0x200002b5
 80020a8:	0800c194 	.word	0x0800c194
			} else if(dilSecim == 1) {
 80020ac:	4b92      	ldr	r3, [pc, #584]	; (80022f8 <menu+0xe3c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d104      	bne.n	80020be <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80020b4:	4a91      	ldr	r2, [pc, #580]	; (80022fc <menu+0xe40>)
 80020b6:	2101      	movs	r1, #1
 80020b8:	2002      	movs	r0, #2
 80020ba:	f7fe fa53 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020be:	2102      	movs	r1, #2
 80020c0:	488f      	ldr	r0, [pc, #572]	; (8002300 <menu+0xe44>)
 80020c2:	f006 fde1 	bl	8008c88 <HAL_GPIO_ReadPin>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d115      	bne.n	80020f8 <menu+0xc3c>
 80020cc:	4b8d      	ldr	r3, [pc, #564]	; (8002304 <menu+0xe48>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	f083 0301 	eor.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00e      	beq.n	80020f8 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80020da:	4b8b      	ldr	r3, [pc, #556]	; (8002308 <menu+0xe4c>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4b89      	ldr	r3, [pc, #548]	; (8002308 <menu+0xe4c>)
 80020e4:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80020e6:	4b88      	ldr	r3, [pc, #544]	; (8002308 <menu+0xe4c>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d902      	bls.n	80020f4 <menu+0xc38>
				yavaslamaLimit = 0;
 80020ee:	4b86      	ldr	r3, [pc, #536]	; (8002308 <menu+0xe4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020f4:	f003 f986 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020f8:	2104      	movs	r1, #4
 80020fa:	4881      	ldr	r0, [pc, #516]	; (8002300 <menu+0xe44>)
 80020fc:	f006 fdc4 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d115      	bne.n	8002132 <menu+0xc76>
 8002106:	4b7f      	ldr	r3, [pc, #508]	; (8002304 <menu+0xe48>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	f083 0301 	eor.w	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00e      	beq.n	8002132 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002114:	4b7c      	ldr	r3, [pc, #496]	; (8002308 <menu+0xe4c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	3b01      	subs	r3, #1
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b7a      	ldr	r3, [pc, #488]	; (8002308 <menu+0xe4c>)
 800211e:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002120:	4b79      	ldr	r3, [pc, #484]	; (8002308 <menu+0xe4c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <menu+0xc72>
		   		yavaslamaLimit = 1;
 8002128:	4b77      	ldr	r3, [pc, #476]	; (8002308 <menu+0xe4c>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800212e:	f003 f969 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002132:	2108      	movs	r1, #8
 8002134:	4872      	ldr	r0, [pc, #456]	; (8002300 <menu+0xe44>)
 8002136:	f006 fda7 	bl	8008c88 <HAL_GPIO_ReadPin>
 800213a:	4603      	mov	r3, r0
 800213c:	2b01      	cmp	r3, #1
 800213e:	d10d      	bne.n	800215c <menu+0xca0>
 8002140:	4b70      	ldr	r3, [pc, #448]	; (8002304 <menu+0xe48>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f083 0301 	eor.w	r3, r3, #1
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 800214e:	4b6e      	ldr	r3, [pc, #440]	; (8002308 <menu+0xe4c>)
 8002150:	781a      	ldrb	r2, [r3, #0]
 8002152:	4b6e      	ldr	r3, [pc, #440]	; (800230c <menu+0xe50>)
 8002154:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002156:	4b6e      	ldr	r3, [pc, #440]	; (8002310 <menu+0xe54>)
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 800215c:	4b6d      	ldr	r3, [pc, #436]	; (8002314 <menu+0xe58>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b05      	cmp	r3, #5
 8002162:	f040 80b9 	bne.w	80022d8 <menu+0xe1c>
		if(dilSecim == 0) {
 8002166:	4b64      	ldr	r3, [pc, #400]	; (80022f8 <menu+0xe3c>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 800216e:	4a6a      	ldr	r2, [pc, #424]	; (8002318 <menu+0xe5c>)
 8002170:	2101      	movs	r1, #1
 8002172:	2001      	movs	r0, #1
 8002174:	f7fe f9f6 	bl	8000564 <lcd_print>
 8002178:	e008      	b.n	800218c <menu+0xcd0>
		} else if(dilSecim == 1) {
 800217a:	4b5f      	ldr	r3, [pc, #380]	; (80022f8 <menu+0xe3c>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d104      	bne.n	800218c <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002182:	4a66      	ldr	r2, [pc, #408]	; (800231c <menu+0xe60>)
 8002184:	2101      	movs	r1, #1
 8002186:	2001      	movs	r0, #1
 8002188:	f7fe f9ec 	bl	8000564 <lcd_print>
		}

		if(altLimit == 0) {
 800218c:	4b64      	ldr	r3, [pc, #400]	; (8002320 <menu+0xe64>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d113      	bne.n	80021bc <menu+0xd00>
			if(dilSecim == 0) {
 8002194:	4b58      	ldr	r3, [pc, #352]	; (80022f8 <menu+0xe3c>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 800219c:	4a61      	ldr	r2, [pc, #388]	; (8002324 <menu+0xe68>)
 800219e:	2101      	movs	r1, #1
 80021a0:	2002      	movs	r0, #2
 80021a2:	f7fe f9df 	bl	8000564 <lcd_print>
 80021a6:	e020      	b.n	80021ea <menu+0xd2e>
			} else if(dilSecim == 1) {
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <menu+0xe3c>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d11c      	bne.n	80021ea <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80021b0:	4a5d      	ldr	r2, [pc, #372]	; (8002328 <menu+0xe6c>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	2002      	movs	r0, #2
 80021b6:	f7fe f9d5 	bl	8000564 <lcd_print>
 80021ba:	e016      	b.n	80021ea <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80021bc:	4b58      	ldr	r3, [pc, #352]	; (8002320 <menu+0xe64>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d112      	bne.n	80021ea <menu+0xd2e>
			if(dilSecim == 0){
 80021c4:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <menu+0xe3c>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d105      	bne.n	80021d8 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80021cc:	4a57      	ldr	r2, [pc, #348]	; (800232c <menu+0xe70>)
 80021ce:	2101      	movs	r1, #1
 80021d0:	2002      	movs	r0, #2
 80021d2:	f7fe f9c7 	bl	8000564 <lcd_print>
 80021d6:	e008      	b.n	80021ea <menu+0xd2e>
			} else if(dilSecim == 1){
 80021d8:	4b47      	ldr	r3, [pc, #284]	; (80022f8 <menu+0xe3c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d104      	bne.n	80021ea <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80021e0:	4a46      	ldr	r2, [pc, #280]	; (80022fc <menu+0xe40>)
 80021e2:	2101      	movs	r1, #1
 80021e4:	2002      	movs	r0, #2
 80021e6:	f7fe f9bd 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80021ea:	2102      	movs	r1, #2
 80021ec:	4844      	ldr	r0, [pc, #272]	; (8002300 <menu+0xe44>)
 80021ee:	f006 fd4b 	bl	8008c88 <HAL_GPIO_ReadPin>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d119      	bne.n	800222c <menu+0xd70>
 80021f8:	4b42      	ldr	r3, [pc, #264]	; (8002304 <menu+0xe48>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	f083 0301 	eor.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d012      	beq.n	800222c <menu+0xd70>
 8002206:	4b4a      	ldr	r3, [pc, #296]	; (8002330 <menu+0xe74>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10e      	bne.n	800222c <menu+0xd70>
			altLimit = altLimit + 1;
 800220e:	4b44      	ldr	r3, [pc, #272]	; (8002320 <menu+0xe64>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4b42      	ldr	r3, [pc, #264]	; (8002320 <menu+0xe64>)
 8002218:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800221a:	4b41      	ldr	r3, [pc, #260]	; (8002320 <menu+0xe64>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d902      	bls.n	8002228 <menu+0xd6c>
				altLimit = 0;
 8002222:	4b3f      	ldr	r3, [pc, #252]	; (8002320 <menu+0xe64>)
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002228:	f003 f8ec 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 800222c:	2104      	movs	r1, #4
 800222e:	4834      	ldr	r0, [pc, #208]	; (8002300 <menu+0xe44>)
 8002230:	f006 fd2a 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002234:	4603      	mov	r3, r0
 8002236:	2b01      	cmp	r3, #1
 8002238:	d119      	bne.n	800226e <menu+0xdb2>
 800223a:	4b32      	ldr	r3, [pc, #200]	; (8002304 <menu+0xe48>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	f083 0301 	eor.w	r3, r3, #1
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d012      	beq.n	800226e <menu+0xdb2>
 8002248:	4b39      	ldr	r3, [pc, #228]	; (8002330 <menu+0xe74>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10e      	bne.n	800226e <menu+0xdb2>
			altLimit = altLimit - 1;
 8002250:	4b33      	ldr	r3, [pc, #204]	; (8002320 <menu+0xe64>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3b01      	subs	r3, #1
 8002256:	b2da      	uxtb	r2, r3
 8002258:	4b31      	ldr	r3, [pc, #196]	; (8002320 <menu+0xe64>)
 800225a:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 800225c:	4b30      	ldr	r3, [pc, #192]	; (8002320 <menu+0xe64>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <menu+0xdae>
		   		altLimit = 1;
 8002264:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <menu+0xe64>)
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800226a:	f003 f8cb 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800226e:	2108      	movs	r1, #8
 8002270:	4823      	ldr	r0, [pc, #140]	; (8002300 <menu+0xe44>)
 8002272:	f006 fd09 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002276:	4603      	mov	r3, r0
 8002278:	2b01      	cmp	r3, #1
 800227a:	d12d      	bne.n	80022d8 <menu+0xe1c>
 800227c:	4b21      	ldr	r3, [pc, #132]	; (8002304 <menu+0xe48>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	f083 0301 	eor.w	r3, r3, #1
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d026      	beq.n	80022d8 <menu+0xe1c>
			eepromData[5] = altLimit;
 800228a:	4b25      	ldr	r3, [pc, #148]	; (8002320 <menu+0xe64>)
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	4b1f      	ldr	r3, [pc, #124]	; (800230c <menu+0xe50>)
 8002290:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002292:	4b23      	ldr	r3, [pc, #140]	; (8002320 <menu+0xe64>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d110      	bne.n	80022bc <menu+0xe00>
 800229a:	4b26      	ldr	r3, [pc, #152]	; (8002334 <menu+0xe78>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <menu+0xdee>
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <menu+0xe78>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d108      	bne.n	80022bc <menu+0xe00>
				kapiTablaAcKonum = 3;
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <menu+0xe78>)
 80022ac:	2203      	movs	r2, #3
 80022ae:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <menu+0xe78>)
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	4b15      	ldr	r3, [pc, #84]	; (800230c <menu+0xe50>)
 80022b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80022ba:	e00a      	b.n	80022d2 <menu+0xe16>
			} else if(altLimit == 0) {
 80022bc:	4b18      	ldr	r3, [pc, #96]	; (8002320 <menu+0xe64>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d106      	bne.n	80022d2 <menu+0xe16>
				platformSilindirTipi = 0;
 80022c4:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <menu+0xe7c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <menu+0xe7c>)
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	4b0f      	ldr	r3, [pc, #60]	; (800230c <menu+0xe50>)
 80022d0:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <menu+0xe54>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <menu+0xe58>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b06      	cmp	r3, #6
 80022de:	f040 80b6 	bne.w	800244e <menu+0xf92>
		if(dilSecim == 0) {
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <menu+0xe3c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d12a      	bne.n	8002340 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80022ea:	4a14      	ldr	r2, [pc, #80]	; (800233c <menu+0xe80>)
 80022ec:	2101      	movs	r1, #1
 80022ee:	2001      	movs	r0, #1
 80022f0:	f7fe f938 	bl	8000564 <lcd_print>
 80022f4:	e02d      	b.n	8002352 <menu+0xe96>
 80022f6:	bf00      	nop
 80022f8:	200002d1 	.word	0x200002d1
 80022fc:	0800c1a8 	.word	0x0800c1a8
 8002300:	40010800 	.word	0x40010800
 8002304:	200002df 	.word	0x200002df
 8002308:	200002b5 	.word	0x200002b5
 800230c:	200001e0 	.word	0x200001e0
 8002310:	200002dc 	.word	0x200002dc
 8002314:	200002b0 	.word	0x200002b0
 8002318:	0800c1bc 	.word	0x0800c1bc
 800231c:	0800c1d0 	.word	0x0800c1d0
 8002320:	200002b6 	.word	0x200002b6
 8002324:	0800c134 	.word	0x0800c134
 8002328:	0800c148 	.word	0x0800c148
 800232c:	0800c194 	.word	0x0800c194
 8002330:	200002b1 	.word	0x200002b1
 8002334:	200002bd 	.word	0x200002bd
 8002338:	200002c3 	.word	0x200002c3
 800233c:	0800c1e4 	.word	0x0800c1e4
		} else if(dilSecim == 1){
 8002340:	4b7a      	ldr	r3, [pc, #488]	; (800252c <menu+0x1070>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d104      	bne.n	8002352 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002348:	4a79      	ldr	r2, [pc, #484]	; (8002530 <menu+0x1074>)
 800234a:	2101      	movs	r1, #1
 800234c:	2001      	movs	r0, #1
 800234e:	f7fe f909 	bl	8000564 <lcd_print>
		}
		if(basincSalteri == 0){
 8002352:	4b78      	ldr	r3, [pc, #480]	; (8002534 <menu+0x1078>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d113      	bne.n	8002382 <menu+0xec6>
			if(dilSecim == 0) {
 800235a:	4b74      	ldr	r3, [pc, #464]	; (800252c <menu+0x1070>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002362:	4a75      	ldr	r2, [pc, #468]	; (8002538 <menu+0x107c>)
 8002364:	2101      	movs	r1, #1
 8002366:	2002      	movs	r0, #2
 8002368:	f7fe f8fc 	bl	8000564 <lcd_print>
 800236c:	e020      	b.n	80023b0 <menu+0xef4>
			} else if(dilSecim == 1){
 800236e:	4b6f      	ldr	r3, [pc, #444]	; (800252c <menu+0x1070>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d11c      	bne.n	80023b0 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8002376:	4a71      	ldr	r2, [pc, #452]	; (800253c <menu+0x1080>)
 8002378:	2101      	movs	r1, #1
 800237a:	2002      	movs	r0, #2
 800237c:	f7fe f8f2 	bl	8000564 <lcd_print>
 8002380:	e016      	b.n	80023b0 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002382:	4b6c      	ldr	r3, [pc, #432]	; (8002534 <menu+0x1078>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d112      	bne.n	80023b0 <menu+0xef4>
			if(dilSecim == 0) {
 800238a:	4b68      	ldr	r3, [pc, #416]	; (800252c <menu+0x1070>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002392:	4a6b      	ldr	r2, [pc, #428]	; (8002540 <menu+0x1084>)
 8002394:	2101      	movs	r1, #1
 8002396:	2002      	movs	r0, #2
 8002398:	f7fe f8e4 	bl	8000564 <lcd_print>
 800239c:	e008      	b.n	80023b0 <menu+0xef4>
			} else if(dilSecim == 1) {
 800239e:	4b63      	ldr	r3, [pc, #396]	; (800252c <menu+0x1070>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d104      	bne.n	80023b0 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80023a6:	4a67      	ldr	r2, [pc, #412]	; (8002544 <menu+0x1088>)
 80023a8:	2101      	movs	r1, #1
 80023aa:	2002      	movs	r0, #2
 80023ac:	f7fe f8da 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023b0:	2102      	movs	r1, #2
 80023b2:	4865      	ldr	r0, [pc, #404]	; (8002548 <menu+0x108c>)
 80023b4:	f006 fc68 	bl	8008c88 <HAL_GPIO_ReadPin>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d115      	bne.n	80023ea <menu+0xf2e>
 80023be:	4b63      	ldr	r3, [pc, #396]	; (800254c <menu+0x1090>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	f083 0301 	eor.w	r3, r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00e      	beq.n	80023ea <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80023cc:	4b59      	ldr	r3, [pc, #356]	; (8002534 <menu+0x1078>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	4b57      	ldr	r3, [pc, #348]	; (8002534 <menu+0x1078>)
 80023d6:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80023d8:	4b56      	ldr	r3, [pc, #344]	; (8002534 <menu+0x1078>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d902      	bls.n	80023e6 <menu+0xf2a>
				basincSalteri = 0;
 80023e0:	4b54      	ldr	r3, [pc, #336]	; (8002534 <menu+0x1078>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023e6:	f003 f80d 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ea:	2104      	movs	r1, #4
 80023ec:	4856      	ldr	r0, [pc, #344]	; (8002548 <menu+0x108c>)
 80023ee:	f006 fc4b 	bl	8008c88 <HAL_GPIO_ReadPin>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d115      	bne.n	8002424 <menu+0xf68>
 80023f8:	4b54      	ldr	r3, [pc, #336]	; (800254c <menu+0x1090>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	f083 0301 	eor.w	r3, r3, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00e      	beq.n	8002424 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8002406:	4b4b      	ldr	r3, [pc, #300]	; (8002534 <menu+0x1078>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	3b01      	subs	r3, #1
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4b49      	ldr	r3, [pc, #292]	; (8002534 <menu+0x1078>)
 8002410:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002412:	4b48      	ldr	r3, [pc, #288]	; (8002534 <menu+0x1078>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <menu+0xf64>
		   		basincSalteri = 1;
 800241a:	4b46      	ldr	r3, [pc, #280]	; (8002534 <menu+0x1078>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002420:	f002 fff0 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002424:	2108      	movs	r1, #8
 8002426:	4848      	ldr	r0, [pc, #288]	; (8002548 <menu+0x108c>)
 8002428:	f006 fc2e 	bl	8008c88 <HAL_GPIO_ReadPin>
 800242c:	4603      	mov	r3, r0
 800242e:	2b01      	cmp	r3, #1
 8002430:	d10d      	bne.n	800244e <menu+0xf92>
 8002432:	4b46      	ldr	r3, [pc, #280]	; (800254c <menu+0x1090>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	f083 0301 	eor.w	r3, r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002440:	4b3c      	ldr	r3, [pc, #240]	; (8002534 <menu+0x1078>)
 8002442:	781a      	ldrb	r2, [r3, #0]
 8002444:	4b42      	ldr	r3, [pc, #264]	; (8002550 <menu+0x1094>)
 8002446:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002448:	4b42      	ldr	r3, [pc, #264]	; (8002554 <menu+0x1098>)
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800244e:	4b42      	ldr	r3, [pc, #264]	; (8002558 <menu+0x109c>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b07      	cmp	r3, #7
 8002454:	f040 80f5 	bne.w	8002642 <menu+0x1186>
		if(dilSecim == 0) {
 8002458:	4b34      	ldr	r3, [pc, #208]	; (800252c <menu+0x1070>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002460:	4a3e      	ldr	r2, [pc, #248]	; (800255c <menu+0x10a0>)
 8002462:	2101      	movs	r1, #1
 8002464:	2001      	movs	r0, #1
 8002466:	f7fe f87d 	bl	8000564 <lcd_print>
 800246a:	e008      	b.n	800247e <menu+0xfc2>
		} else if(dilSecim == 1){
 800246c:	4b2f      	ldr	r3, [pc, #188]	; (800252c <menu+0x1070>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d104      	bne.n	800247e <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002474:	4a3a      	ldr	r2, [pc, #232]	; (8002560 <menu+0x10a4>)
 8002476:	2101      	movs	r1, #1
 8002478:	2001      	movs	r0, #1
 800247a:	f7fe f873 	bl	8000564 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800247e:	4b39      	ldr	r3, [pc, #228]	; (8002564 <menu+0x10a8>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d113      	bne.n	80024ae <menu+0xff2>
			if(dilSecim == 0) {
 8002486:	4b29      	ldr	r3, [pc, #164]	; (800252c <menu+0x1070>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d105      	bne.n	800249a <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800248e:	4a2a      	ldr	r2, [pc, #168]	; (8002538 <menu+0x107c>)
 8002490:	2101      	movs	r1, #1
 8002492:	2002      	movs	r0, #2
 8002494:	f7fe f866 	bl	8000564 <lcd_print>
 8002498:	e079      	b.n	800258e <menu+0x10d2>
			} else if(dilSecim == 1){
 800249a:	4b24      	ldr	r3, [pc, #144]	; (800252c <menu+0x1070>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d175      	bne.n	800258e <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80024a2:	4a26      	ldr	r2, [pc, #152]	; (800253c <menu+0x1080>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	2002      	movs	r0, #2
 80024a8:	f7fe f85c 	bl	8000564 <lcd_print>
 80024ac:	e06f      	b.n	800258e <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80024ae:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <menu+0x10a8>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d113      	bne.n	80024de <menu+0x1022>
			if(dilSecim == 0) {
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <menu+0x1070>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d105      	bne.n	80024ca <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80024be:	4a2a      	ldr	r2, [pc, #168]	; (8002568 <menu+0x10ac>)
 80024c0:	2101      	movs	r1, #1
 80024c2:	2002      	movs	r0, #2
 80024c4:	f7fe f84e 	bl	8000564 <lcd_print>
 80024c8:	e061      	b.n	800258e <menu+0x10d2>
			} else if(dilSecim == 1) {
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <menu+0x1070>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d15d      	bne.n	800258e <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80024d2:	4a26      	ldr	r2, [pc, #152]	; (800256c <menu+0x10b0>)
 80024d4:	2101      	movs	r1, #1
 80024d6:	2002      	movs	r0, #2
 80024d8:	f7fe f844 	bl	8000564 <lcd_print>
 80024dc:	e057      	b.n	800258e <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80024de:	4b21      	ldr	r3, [pc, #132]	; (8002564 <menu+0x10a8>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d113      	bne.n	800250e <menu+0x1052>
			if(dilSecim == 0) {
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <menu+0x1070>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80024ee:	4a20      	ldr	r2, [pc, #128]	; (8002570 <menu+0x10b4>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	2002      	movs	r0, #2
 80024f4:	f7fe f836 	bl	8000564 <lcd_print>
 80024f8:	e049      	b.n	800258e <menu+0x10d2>
			} else if(dilSecim == 1) {
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <menu+0x1070>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d145      	bne.n	800258e <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002502:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <menu+0x10b8>)
 8002504:	2101      	movs	r1, #1
 8002506:	2002      	movs	r0, #2
 8002508:	f7fe f82c 	bl	8000564 <lcd_print>
 800250c:	e03f      	b.n	800258e <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <menu+0x10a8>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d13b      	bne.n	800258e <menu+0x10d2>
			if(dilSecim == 0) {
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <menu+0x1070>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d12e      	bne.n	800257c <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800251e:	4a16      	ldr	r2, [pc, #88]	; (8002578 <menu+0x10bc>)
 8002520:	2101      	movs	r1, #1
 8002522:	2002      	movs	r0, #2
 8002524:	f7fe f81e 	bl	8000564 <lcd_print>
 8002528:	e031      	b.n	800258e <menu+0x10d2>
 800252a:	bf00      	nop
 800252c:	200002d1 	.word	0x200002d1
 8002530:	0800c1f4 	.word	0x0800c1f4
 8002534:	200002b7 	.word	0x200002b7
 8002538:	0800c134 	.word	0x0800c134
 800253c:	0800c148 	.word	0x0800c148
 8002540:	0800c194 	.word	0x0800c194
 8002544:	0800c1a8 	.word	0x0800c1a8
 8002548:	40010800 	.word	0x40010800
 800254c:	200002df 	.word	0x200002df
 8002550:	200001e0 	.word	0x200001e0
 8002554:	200002dc 	.word	0x200002dc
 8002558:	200002b0 	.word	0x200002b0
 800255c:	0800c204 	.word	0x0800c204
 8002560:	0800c218 	.word	0x0800c218
 8002564:	200002b8 	.word	0x200002b8
 8002568:	0800c22c 	.word	0x0800c22c
 800256c:	0800c240 	.word	0x0800c240
 8002570:	0800c254 	.word	0x0800c254
 8002574:	0800c268 	.word	0x0800c268
 8002578:	0800c27c 	.word	0x0800c27c
			} else if(dilSecim == 1){
 800257c:	4b99      	ldr	r3, [pc, #612]	; (80027e4 <menu+0x1328>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d104      	bne.n	800258e <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002584:	4a98      	ldr	r2, [pc, #608]	; (80027e8 <menu+0x132c>)
 8002586:	2101      	movs	r1, #1
 8002588:	2002      	movs	r0, #2
 800258a:	f7fd ffeb 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800258e:	2102      	movs	r1, #2
 8002590:	4896      	ldr	r0, [pc, #600]	; (80027ec <menu+0x1330>)
 8002592:	f006 fb79 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002596:	4603      	mov	r3, r0
 8002598:	2b01      	cmp	r3, #1
 800259a:	d115      	bne.n	80025c8 <menu+0x110c>
 800259c:	4b94      	ldr	r3, [pc, #592]	; (80027f0 <menu+0x1334>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	f083 0301 	eor.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00e      	beq.n	80025c8 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80025aa:	4b92      	ldr	r3, [pc, #584]	; (80027f4 <menu+0x1338>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b90      	ldr	r3, [pc, #576]	; (80027f4 <menu+0x1338>)
 80025b4:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80025b6:	4b8f      	ldr	r3, [pc, #572]	; (80027f4 <menu+0x1338>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d902      	bls.n	80025c4 <menu+0x1108>
				kapiSecimleri = 0;
 80025be:	4b8d      	ldr	r3, [pc, #564]	; (80027f4 <menu+0x1338>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025c4:	f002 ff1e 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c8:	2104      	movs	r1, #4
 80025ca:	4888      	ldr	r0, [pc, #544]	; (80027ec <menu+0x1330>)
 80025cc:	f006 fb5c 	bl	8008c88 <HAL_GPIO_ReadPin>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d115      	bne.n	8002602 <menu+0x1146>
 80025d6:	4b86      	ldr	r3, [pc, #536]	; (80027f0 <menu+0x1334>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	f083 0301 	eor.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00e      	beq.n	8002602 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80025e4:	4b83      	ldr	r3, [pc, #524]	; (80027f4 <menu+0x1338>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	4b81      	ldr	r3, [pc, #516]	; (80027f4 <menu+0x1338>)
 80025ee:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80025f0:	4b80      	ldr	r3, [pc, #512]	; (80027f4 <menu+0x1338>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d902      	bls.n	80025fe <menu+0x1142>
		   		kapiSecimleri = 3;
 80025f8:	4b7e      	ldr	r3, [pc, #504]	; (80027f4 <menu+0x1338>)
 80025fa:	2203      	movs	r2, #3
 80025fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025fe:	f002 ff01 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002602:	2108      	movs	r1, #8
 8002604:	4879      	ldr	r0, [pc, #484]	; (80027ec <menu+0x1330>)
 8002606:	f006 fb3f 	bl	8008c88 <HAL_GPIO_ReadPin>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d118      	bne.n	8002642 <menu+0x1186>
 8002610:	4b77      	ldr	r3, [pc, #476]	; (80027f0 <menu+0x1334>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	f083 0301 	eor.w	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d011      	beq.n	8002642 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 800261e:	4b75      	ldr	r3, [pc, #468]	; (80027f4 <menu+0x1338>)
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	4b75      	ldr	r3, [pc, #468]	; (80027f8 <menu+0x133c>)
 8002624:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002626:	4b73      	ldr	r3, [pc, #460]	; (80027f4 <menu+0x1338>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <menu+0x1180>
				altLimit = 1;
 800262e:	4b73      	ldr	r3, [pc, #460]	; (80027fc <menu+0x1340>)
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002634:	4b71      	ldr	r3, [pc, #452]	; (80027fc <menu+0x1340>)
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <menu+0x133c>)
 800263a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800263c:	4b70      	ldr	r3, [pc, #448]	; (8002800 <menu+0x1344>)
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002642:	4b70      	ldr	r3, [pc, #448]	; (8002804 <menu+0x1348>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b08      	cmp	r3, #8
 8002648:	f040 8092 	bne.w	8002770 <menu+0x12b4>
		if(dilSecim == 0) {
 800264c:	4b65      	ldr	r3, [pc, #404]	; (80027e4 <menu+0x1328>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002654:	4a6c      	ldr	r2, [pc, #432]	; (8002808 <menu+0x134c>)
 8002656:	2101      	movs	r1, #1
 8002658:	2001      	movs	r0, #1
 800265a:	f7fd ff83 	bl	8000564 <lcd_print>
 800265e:	e008      	b.n	8002672 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002660:	4b60      	ldr	r3, [pc, #384]	; (80027e4 <menu+0x1328>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d104      	bne.n	8002672 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002668:	4a68      	ldr	r2, [pc, #416]	; (800280c <menu+0x1350>)
 800266a:	2101      	movs	r1, #1
 800266c:	2001      	movs	r0, #1
 800266e:	f7fd ff79 	bl	8000564 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002672:	4b67      	ldr	r3, [pc, #412]	; (8002810 <menu+0x1354>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d113      	bne.n	80026a2 <menu+0x11e6>
			if(dilSecim == 0) {
 800267a:	4b5a      	ldr	r3, [pc, #360]	; (80027e4 <menu+0x1328>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002682:	4a64      	ldr	r2, [pc, #400]	; (8002814 <menu+0x1358>)
 8002684:	2101      	movs	r1, #1
 8002686:	2002      	movs	r0, #2
 8002688:	f7fd ff6c 	bl	8000564 <lcd_print>
 800268c:	e020      	b.n	80026d0 <menu+0x1214>
			} else if(dilSecim == 1) {
 800268e:	4b55      	ldr	r3, [pc, #340]	; (80027e4 <menu+0x1328>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d11c      	bne.n	80026d0 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002696:	4a60      	ldr	r2, [pc, #384]	; (8002818 <menu+0x135c>)
 8002698:	2101      	movs	r1, #1
 800269a:	2002      	movs	r0, #2
 800269c:	f7fd ff62 	bl	8000564 <lcd_print>
 80026a0:	e016      	b.n	80026d0 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80026a2:	4b5b      	ldr	r3, [pc, #364]	; (8002810 <menu+0x1354>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d112      	bne.n	80026d0 <menu+0x1214>
			if(dilSecim == 0){
 80026aa:	4b4e      	ldr	r3, [pc, #312]	; (80027e4 <menu+0x1328>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80026b2:	4a5a      	ldr	r2, [pc, #360]	; (800281c <menu+0x1360>)
 80026b4:	2101      	movs	r1, #1
 80026b6:	2002      	movs	r0, #2
 80026b8:	f7fd ff54 	bl	8000564 <lcd_print>
 80026bc:	e008      	b.n	80026d0 <menu+0x1214>
			} else if(dilSecim == 1){
 80026be:	4b49      	ldr	r3, [pc, #292]	; (80027e4 <menu+0x1328>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d104      	bne.n	80026d0 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80026c6:	4a56      	ldr	r2, [pc, #344]	; (8002820 <menu+0x1364>)
 80026c8:	2101      	movs	r1, #1
 80026ca:	2002      	movs	r0, #2
 80026cc:	f7fd ff4a 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026d0:	2102      	movs	r1, #2
 80026d2:	4846      	ldr	r0, [pc, #280]	; (80027ec <menu+0x1330>)
 80026d4:	f006 fad8 	bl	8008c88 <HAL_GPIO_ReadPin>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d115      	bne.n	800270a <menu+0x124e>
 80026de:	4b44      	ldr	r3, [pc, #272]	; (80027f0 <menu+0x1334>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	f083 0301 	eor.w	r3, r3, #1
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00e      	beq.n	800270a <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80026ec:	4b48      	ldr	r3, [pc, #288]	; (8002810 <menu+0x1354>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	4b46      	ldr	r3, [pc, #280]	; (8002810 <menu+0x1354>)
 80026f6:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80026f8:	4b45      	ldr	r3, [pc, #276]	; (8002810 <menu+0x1354>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d902      	bls.n	8002706 <menu+0x124a>
				kapiAcTipi = 0;
 8002700:	4b43      	ldr	r3, [pc, #268]	; (8002810 <menu+0x1354>)
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002706:	f002 fe7d 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800270a:	2104      	movs	r1, #4
 800270c:	4837      	ldr	r0, [pc, #220]	; (80027ec <menu+0x1330>)
 800270e:	f006 fabb 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d115      	bne.n	8002744 <menu+0x1288>
 8002718:	4b35      	ldr	r3, [pc, #212]	; (80027f0 <menu+0x1334>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	f083 0301 	eor.w	r3, r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00e      	beq.n	8002744 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002726:	4b3a      	ldr	r3, [pc, #232]	; (8002810 <menu+0x1354>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	3b01      	subs	r3, #1
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4b38      	ldr	r3, [pc, #224]	; (8002810 <menu+0x1354>)
 8002730:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002732:	4b37      	ldr	r3, [pc, #220]	; (8002810 <menu+0x1354>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <menu+0x1284>
		   		kapiAcTipi = 1;
 800273a:	4b35      	ldr	r3, [pc, #212]	; (8002810 <menu+0x1354>)
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002740:	f002 fe60 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002744:	2108      	movs	r1, #8
 8002746:	4829      	ldr	r0, [pc, #164]	; (80027ec <menu+0x1330>)
 8002748:	f006 fa9e 	bl	8008c88 <HAL_GPIO_ReadPin>
 800274c:	4603      	mov	r3, r0
 800274e:	2b01      	cmp	r3, #1
 8002750:	d10e      	bne.n	8002770 <menu+0x12b4>
 8002752:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <menu+0x1334>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	f083 0301 	eor.w	r3, r3, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d007      	beq.n	8002770 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002760:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <menu+0x1354>)
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <menu+0x133c>)
 8002766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800276a:	4b25      	ldr	r3, [pc, #148]	; (8002800 <menu+0x1344>)
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002770:	4b24      	ldr	r3, [pc, #144]	; (8002804 <menu+0x1348>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b09      	cmp	r3, #9
 8002776:	f040 80b9 	bne.w	80028ec <menu+0x1430>
		if(dilSecim == 0){
 800277a:	4b1a      	ldr	r3, [pc, #104]	; (80027e4 <menu+0x1328>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002782:	4a28      	ldr	r2, [pc, #160]	; (8002824 <menu+0x1368>)
 8002784:	2101      	movs	r1, #1
 8002786:	2001      	movs	r0, #1
 8002788:	f7fd feec 	bl	8000564 <lcd_print>
 800278c:	e008      	b.n	80027a0 <menu+0x12e4>
		} else if(dilSecim == 1) {
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <menu+0x1328>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d104      	bne.n	80027a0 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002796:	4a24      	ldr	r2, [pc, #144]	; (8002828 <menu+0x136c>)
 8002798:	2101      	movs	r1, #1
 800279a:	2001      	movs	r0, #1
 800279c:	f7fd fee2 	bl	8000564 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80027a0:	4b22      	ldr	r3, [pc, #136]	; (800282c <menu+0x1370>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80027a8:	4a21      	ldr	r2, [pc, #132]	; (8002830 <menu+0x1374>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	2002      	movs	r0, #2
 80027ae:	f7fd fed9 	bl	8000564 <lcd_print>
 80027b2:	e04c      	b.n	800284e <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <menu+0x1370>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d13f      	bne.n	800283c <menu+0x1380>
			if(dilSecim == 0){
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <menu+0x1328>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d105      	bne.n	80027d0 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80027c4:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <menu+0x1378>)
 80027c6:	2101      	movs	r1, #1
 80027c8:	2002      	movs	r0, #2
 80027ca:	f7fd fecb 	bl	8000564 <lcd_print>
 80027ce:	e03e      	b.n	800284e <menu+0x1392>
			} else if(dilSecim == 1) {
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <menu+0x1328>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d13a      	bne.n	800284e <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80027d8:	4a17      	ldr	r2, [pc, #92]	; (8002838 <menu+0x137c>)
 80027da:	2101      	movs	r1, #1
 80027dc:	2002      	movs	r0, #2
 80027de:	f7fd fec1 	bl	8000564 <lcd_print>
 80027e2:	e034      	b.n	800284e <menu+0x1392>
 80027e4:	200002d1 	.word	0x200002d1
 80027e8:	0800c290 	.word	0x0800c290
 80027ec:	40010800 	.word	0x40010800
 80027f0:	200002df 	.word	0x200002df
 80027f4:	200002b8 	.word	0x200002b8
 80027f8:	200001e0 	.word	0x200001e0
 80027fc:	200002b6 	.word	0x200002b6
 8002800:	200002dc 	.word	0x200002dc
 8002804:	200002b0 	.word	0x200002b0
 8002808:	0800c2a4 	.word	0x0800c2a4
 800280c:	0800c2b8 	.word	0x0800c2b8
 8002810:	200002bc 	.word	0x200002bc
 8002814:	0800c2cc 	.word	0x0800c2cc
 8002818:	0800c2dc 	.word	0x0800c2dc
 800281c:	0800c2ec 	.word	0x0800c2ec
 8002820:	0800c300 	.word	0x0800c300
 8002824:	0800c314 	.word	0x0800c314
 8002828:	0800c328 	.word	0x0800c328
 800282c:	200002b9 	.word	0x200002b9
 8002830:	0800c33c 	.word	0x0800c33c
 8002834:	0800c350 	.word	0x0800c350
 8002838:	0800c360 	.word	0x0800c360
			}
		} else if(kapi1Tip == 2) {
 800283c:	4b8a      	ldr	r3, [pc, #552]	; (8002a68 <menu+0x15ac>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d104      	bne.n	800284e <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002844:	4a89      	ldr	r2, [pc, #548]	; (8002a6c <menu+0x15b0>)
 8002846:	2101      	movs	r1, #1
 8002848:	2002      	movs	r0, #2
 800284a:	f7fd fe8b 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800284e:	2102      	movs	r1, #2
 8002850:	4887      	ldr	r0, [pc, #540]	; (8002a70 <menu+0x15b4>)
 8002852:	f006 fa19 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002856:	4603      	mov	r3, r0
 8002858:	2b01      	cmp	r3, #1
 800285a:	d115      	bne.n	8002888 <menu+0x13cc>
 800285c:	4b85      	ldr	r3, [pc, #532]	; (8002a74 <menu+0x15b8>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	f083 0301 	eor.w	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00e      	beq.n	8002888 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800286a:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <menu+0x15ac>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4b7d      	ldr	r3, [pc, #500]	; (8002a68 <menu+0x15ac>)
 8002874:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002876:	4b7c      	ldr	r3, [pc, #496]	; (8002a68 <menu+0x15ac>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d902      	bls.n	8002884 <menu+0x13c8>
				kapi1Tip = 0;
 800287e:	4b7a      	ldr	r3, [pc, #488]	; (8002a68 <menu+0x15ac>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002884:	f002 fdbe 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002888:	2104      	movs	r1, #4
 800288a:	4879      	ldr	r0, [pc, #484]	; (8002a70 <menu+0x15b4>)
 800288c:	f006 f9fc 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002890:	4603      	mov	r3, r0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d115      	bne.n	80028c2 <menu+0x1406>
 8002896:	4b77      	ldr	r3, [pc, #476]	; (8002a74 <menu+0x15b8>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	f083 0301 	eor.w	r3, r3, #1
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00e      	beq.n	80028c2 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80028a4:	4b70      	ldr	r3, [pc, #448]	; (8002a68 <menu+0x15ac>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	4b6e      	ldr	r3, [pc, #440]	; (8002a68 <menu+0x15ac>)
 80028ae:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80028b0:	4b6d      	ldr	r3, [pc, #436]	; (8002a68 <menu+0x15ac>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d902      	bls.n	80028be <menu+0x1402>
		   		kapi1Tip = 2;
 80028b8:	4b6b      	ldr	r3, [pc, #428]	; (8002a68 <menu+0x15ac>)
 80028ba:	2202      	movs	r2, #2
 80028bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028be:	f002 fda1 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028c2:	2108      	movs	r1, #8
 80028c4:	486a      	ldr	r0, [pc, #424]	; (8002a70 <menu+0x15b4>)
 80028c6:	f006 f9df 	bl	8008c88 <HAL_GPIO_ReadPin>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d10d      	bne.n	80028ec <menu+0x1430>
 80028d0:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <menu+0x15b8>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	f083 0301 	eor.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80028de:	4b62      	ldr	r3, [pc, #392]	; (8002a68 <menu+0x15ac>)
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <menu+0x15bc>)
 80028e4:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80028e6:	4b65      	ldr	r3, [pc, #404]	; (8002a7c <menu+0x15c0>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80028ec:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <menu+0x15c4>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b0a      	cmp	r3, #10
 80028f2:	d17f      	bne.n	80029f4 <menu+0x1538>
		if(dilSecim == 0) {
 80028f4:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <menu+0x15c8>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80028fc:	4a62      	ldr	r2, [pc, #392]	; (8002a88 <menu+0x15cc>)
 80028fe:	2101      	movs	r1, #1
 8002900:	2001      	movs	r0, #1
 8002902:	f7fd fe2f 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002906:	4a61      	ldr	r2, [pc, #388]	; (8002a8c <menu+0x15d0>)
 8002908:	2101      	movs	r1, #1
 800290a:	2002      	movs	r0, #2
 800290c:	f7fd fe2a 	bl	8000564 <lcd_print>
 8002910:	e00d      	b.n	800292e <menu+0x1472>
		} else if(dilSecim == 1) {
 8002912:	4b5c      	ldr	r3, [pc, #368]	; (8002a84 <menu+0x15c8>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d109      	bne.n	800292e <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800291a:	4a5d      	ldr	r2, [pc, #372]	; (8002a90 <menu+0x15d4>)
 800291c:	2101      	movs	r1, #1
 800291e:	2001      	movs	r0, #1
 8002920:	f7fd fe20 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002924:	4a5b      	ldr	r2, [pc, #364]	; (8002a94 <menu+0x15d8>)
 8002926:	2101      	movs	r1, #1
 8002928:	2002      	movs	r0, #2
 800292a:	f7fd fe1b 	bl	8000564 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800292e:	4b5a      	ldr	r3, [pc, #360]	; (8002a98 <menu+0x15dc>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	220a      	movs	r2, #10
 8002934:	4959      	ldr	r1, [pc, #356]	; (8002a9c <menu+0x15e0>)
 8002936:	4618      	mov	r0, r3
 8002938:	f009 f99c 	bl	800bc74 <itoa>
		lcd_print(2,16,snum);
 800293c:	4a57      	ldr	r2, [pc, #348]	; (8002a9c <menu+0x15e0>)
 800293e:	2110      	movs	r1, #16
 8002940:	2002      	movs	r0, #2
 8002942:	f7fd fe0f 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002946:	2102      	movs	r1, #2
 8002948:	4849      	ldr	r0, [pc, #292]	; (8002a70 <menu+0x15b4>)
 800294a:	f006 f99d 	bl	8008c88 <HAL_GPIO_ReadPin>
 800294e:	4603      	mov	r3, r0
 8002950:	2b01      	cmp	r3, #1
 8002952:	d119      	bne.n	8002988 <menu+0x14cc>
 8002954:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <menu+0x15b8>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	f083 0301 	eor.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d012      	beq.n	8002988 <menu+0x14cc>
 8002962:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <menu+0x15ac>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10e      	bne.n	8002988 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800296a:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <menu+0x15dc>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	3301      	adds	r3, #1
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <menu+0x15dc>)
 8002974:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002976:	4b48      	ldr	r3, [pc, #288]	; (8002a98 <menu+0x15dc>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d902      	bls.n	8002984 <menu+0x14c8>
				kapi1AcSure = 0;
 800297e:	4b46      	ldr	r3, [pc, #280]	; (8002a98 <menu+0x15dc>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002984:	f002 fd3e 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002988:	2104      	movs	r1, #4
 800298a:	4839      	ldr	r0, [pc, #228]	; (8002a70 <menu+0x15b4>)
 800298c:	f006 f97c 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002990:	4603      	mov	r3, r0
 8002992:	2b01      	cmp	r3, #1
 8002994:	d119      	bne.n	80029ca <menu+0x150e>
 8002996:	4b37      	ldr	r3, [pc, #220]	; (8002a74 <menu+0x15b8>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	f083 0301 	eor.w	r3, r3, #1
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <menu+0x150e>
 80029a4:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <menu+0x15ac>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10e      	bne.n	80029ca <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80029ac:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <menu+0x15dc>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <menu+0x15dc>)
 80029b6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80029b8:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <menu+0x15dc>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b06      	cmp	r3, #6
 80029be:	d902      	bls.n	80029c6 <menu+0x150a>
		   		kapi1AcSure = 5;
 80029c0:	4b35      	ldr	r3, [pc, #212]	; (8002a98 <menu+0x15dc>)
 80029c2:	2205      	movs	r2, #5
 80029c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029c6:	f002 fd1d 	bl	8005404 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ca:	2108      	movs	r1, #8
 80029cc:	4828      	ldr	r0, [pc, #160]	; (8002a70 <menu+0x15b4>)
 80029ce:	f006 f95b 	bl	8008c88 <HAL_GPIO_ReadPin>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d10d      	bne.n	80029f4 <menu+0x1538>
 80029d8:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <menu+0x15b8>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	f083 0301 	eor.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80029e6:	4b2c      	ldr	r3, [pc, #176]	; (8002a98 <menu+0x15dc>)
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <menu+0x15bc>)
 80029ec:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80029ee:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <menu+0x15c0>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <menu+0x15c4>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b0b      	cmp	r3, #11
 80029fa:	f040 80b5 	bne.w	8002b68 <menu+0x16ac>
		if(dilSecim == 0) {
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <menu+0x15c8>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d105      	bne.n	8002a12 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002a06:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <menu+0x15e4>)
 8002a08:	2101      	movs	r1, #1
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	f7fd fdaa 	bl	8000564 <lcd_print>
 8002a10:	e008      	b.n	8002a24 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002a12:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <menu+0x15c8>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d104      	bne.n	8002a24 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002a1a:	4a22      	ldr	r2, [pc, #136]	; (8002aa4 <menu+0x15e8>)
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f7fd fda0 	bl	8000564 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <menu+0x15ec>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d105      	bne.n	8002a38 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002a2c:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <menu+0x15f0>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	2002      	movs	r0, #2
 8002a32:	f7fd fd97 	bl	8000564 <lcd_print>
 8002a36:	e048      	b.n	8002aca <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002a38:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <menu+0x15ec>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d13b      	bne.n	8002ab8 <menu+0x15fc>
			if(dilSecim == 0) {
 8002a40:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <menu+0x15c8>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <menu+0x15f4>)
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f7fd fd89 	bl	8000564 <lcd_print>
 8002a52:	e03a      	b.n	8002aca <menu+0x160e>
			} else if(dilSecim == 1) {
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <menu+0x15c8>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d136      	bne.n	8002aca <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002a5c:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <menu+0x15f8>)
 8002a5e:	2101      	movs	r1, #1
 8002a60:	2002      	movs	r0, #2
 8002a62:	f7fd fd7f 	bl	8000564 <lcd_print>
 8002a66:	e030      	b.n	8002aca <menu+0x160e>
 8002a68:	200002b9 	.word	0x200002b9
 8002a6c:	0800c374 	.word	0x0800c374
 8002a70:	40010800 	.word	0x40010800
 8002a74:	200002df 	.word	0x200002df
 8002a78:	200001e0 	.word	0x200001e0
 8002a7c:	200002dc 	.word	0x200002dc
 8002a80:	200002b0 	.word	0x200002b0
 8002a84:	200002d1 	.word	0x200002d1
 8002a88:	0800c384 	.word	0x0800c384
 8002a8c:	0800c398 	.word	0x0800c398
 8002a90:	0800c3a8 	.word	0x0800c3a8
 8002a94:	0800c3bc 	.word	0x0800c3bc
 8002a98:	200002c9 	.word	0x200002c9
 8002a9c:	20000250 	.word	0x20000250
 8002aa0:	0800c3cc 	.word	0x0800c3cc
 8002aa4:	0800c3e0 	.word	0x0800c3e0
 8002aa8:	200002ba 	.word	0x200002ba
 8002aac:	0800c33c 	.word	0x0800c33c
 8002ab0:	0800c350 	.word	0x0800c350
 8002ab4:	0800c360 	.word	0x0800c360
			}
		} else if(kapi2Tip == 2) {
 8002ab8:	4b8a      	ldr	r3, [pc, #552]	; (8002ce4 <menu+0x1828>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d104      	bne.n	8002aca <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002ac0:	4a89      	ldr	r2, [pc, #548]	; (8002ce8 <menu+0x182c>)
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	2002      	movs	r0, #2
 8002ac6:	f7fd fd4d 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aca:	2102      	movs	r1, #2
 8002acc:	4887      	ldr	r0, [pc, #540]	; (8002cec <menu+0x1830>)
 8002ace:	f006 f8db 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d115      	bne.n	8002b04 <menu+0x1648>
 8002ad8:	4b85      	ldr	r3, [pc, #532]	; (8002cf0 <menu+0x1834>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	f083 0301 	eor.w	r3, r3, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00e      	beq.n	8002b04 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002ae6:	4b7f      	ldr	r3, [pc, #508]	; (8002ce4 <menu+0x1828>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	3301      	adds	r3, #1
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4b7d      	ldr	r3, [pc, #500]	; (8002ce4 <menu+0x1828>)
 8002af0:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002af2:	4b7c      	ldr	r3, [pc, #496]	; (8002ce4 <menu+0x1828>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d902      	bls.n	8002b00 <menu+0x1644>
				kapi2Tip = 0;
 8002afa:	4b7a      	ldr	r3, [pc, #488]	; (8002ce4 <menu+0x1828>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b00:	f002 fc80 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b04:	2104      	movs	r1, #4
 8002b06:	4879      	ldr	r0, [pc, #484]	; (8002cec <menu+0x1830>)
 8002b08:	f006 f8be 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d115      	bne.n	8002b3e <menu+0x1682>
 8002b12:	4b77      	ldr	r3, [pc, #476]	; (8002cf0 <menu+0x1834>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f083 0301 	eor.w	r3, r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00e      	beq.n	8002b3e <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002b20:	4b70      	ldr	r3, [pc, #448]	; (8002ce4 <menu+0x1828>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b6e      	ldr	r3, [pc, #440]	; (8002ce4 <menu+0x1828>)
 8002b2a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002b2c:	4b6d      	ldr	r3, [pc, #436]	; (8002ce4 <menu+0x1828>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d902      	bls.n	8002b3a <menu+0x167e>
		   		kapi2Tip = 2;
 8002b34:	4b6b      	ldr	r3, [pc, #428]	; (8002ce4 <menu+0x1828>)
 8002b36:	2202      	movs	r2, #2
 8002b38:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b3a:	f002 fc63 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b3e:	2108      	movs	r1, #8
 8002b40:	486a      	ldr	r0, [pc, #424]	; (8002cec <menu+0x1830>)
 8002b42:	f006 f8a1 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d10d      	bne.n	8002b68 <menu+0x16ac>
 8002b4c:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <menu+0x1834>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	f083 0301 	eor.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002b5a:	4b62      	ldr	r3, [pc, #392]	; (8002ce4 <menu+0x1828>)
 8002b5c:	781a      	ldrb	r2, [r3, #0]
 8002b5e:	4b65      	ldr	r3, [pc, #404]	; (8002cf4 <menu+0x1838>)
 8002b60:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002b62:	4b65      	ldr	r3, [pc, #404]	; (8002cf8 <menu+0x183c>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002b68:	4b64      	ldr	r3, [pc, #400]	; (8002cfc <menu+0x1840>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b0c      	cmp	r3, #12
 8002b6e:	d17f      	bne.n	8002c70 <menu+0x17b4>
		if(dilSecim == 0) {
 8002b70:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <menu+0x1844>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002b78:	4a62      	ldr	r2, [pc, #392]	; (8002d04 <menu+0x1848>)
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f7fd fcf1 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002b82:	4a61      	ldr	r2, [pc, #388]	; (8002d08 <menu+0x184c>)
 8002b84:	2101      	movs	r1, #1
 8002b86:	2002      	movs	r0, #2
 8002b88:	f7fd fcec 	bl	8000564 <lcd_print>
 8002b8c:	e00d      	b.n	8002baa <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002b8e:	4b5c      	ldr	r3, [pc, #368]	; (8002d00 <menu+0x1844>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d109      	bne.n	8002baa <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002b96:	4a5d      	ldr	r2, [pc, #372]	; (8002d0c <menu+0x1850>)
 8002b98:	2101      	movs	r1, #1
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	f7fd fce2 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002ba0:	4a5b      	ldr	r2, [pc, #364]	; (8002d10 <menu+0x1854>)
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	2002      	movs	r0, #2
 8002ba6:	f7fd fcdd 	bl	8000564 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002baa:	4b5a      	ldr	r3, [pc, #360]	; (8002d14 <menu+0x1858>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	220a      	movs	r2, #10
 8002bb0:	4959      	ldr	r1, [pc, #356]	; (8002d18 <menu+0x185c>)
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f009 f85e 	bl	800bc74 <itoa>
		lcd_print(2,16,snum);
 8002bb8:	4a57      	ldr	r2, [pc, #348]	; (8002d18 <menu+0x185c>)
 8002bba:	2110      	movs	r1, #16
 8002bbc:	2002      	movs	r0, #2
 8002bbe:	f7fd fcd1 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	4849      	ldr	r0, [pc, #292]	; (8002cec <menu+0x1830>)
 8002bc6:	f006 f85f 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d119      	bne.n	8002c04 <menu+0x1748>
 8002bd0:	4b47      	ldr	r3, [pc, #284]	; (8002cf0 <menu+0x1834>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	f083 0301 	eor.w	r3, r3, #1
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d012      	beq.n	8002c04 <menu+0x1748>
 8002bde:	4b41      	ldr	r3, [pc, #260]	; (8002ce4 <menu+0x1828>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10e      	bne.n	8002c04 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002be6:	4b4b      	ldr	r3, [pc, #300]	; (8002d14 <menu+0x1858>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4b49      	ldr	r3, [pc, #292]	; (8002d14 <menu+0x1858>)
 8002bf0:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002bf2:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <menu+0x1858>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d902      	bls.n	8002c00 <menu+0x1744>
				kapi2AcSure = 0;
 8002bfa:	4b46      	ldr	r3, [pc, #280]	; (8002d14 <menu+0x1858>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c00:	f002 fc00 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002c04:	2104      	movs	r1, #4
 8002c06:	4839      	ldr	r0, [pc, #228]	; (8002cec <menu+0x1830>)
 8002c08:	f006 f83e 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d119      	bne.n	8002c46 <menu+0x178a>
 8002c12:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <menu+0x1834>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	f083 0301 	eor.w	r3, r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d012      	beq.n	8002c46 <menu+0x178a>
 8002c20:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <menu+0x1828>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10e      	bne.n	8002c46 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002c28:	4b3a      	ldr	r3, [pc, #232]	; (8002d14 <menu+0x1858>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <menu+0x1858>)
 8002c32:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002c34:	4b37      	ldr	r3, [pc, #220]	; (8002d14 <menu+0x1858>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b06      	cmp	r3, #6
 8002c3a:	d902      	bls.n	8002c42 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002c3c:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <menu+0x1858>)
 8002c3e:	2205      	movs	r2, #5
 8002c40:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c42:	f002 fbdf 	bl	8005404 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c46:	2108      	movs	r1, #8
 8002c48:	4828      	ldr	r0, [pc, #160]	; (8002cec <menu+0x1830>)
 8002c4a:	f006 f81d 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d10d      	bne.n	8002c70 <menu+0x17b4>
 8002c54:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <menu+0x1834>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	f083 0301 	eor.w	r3, r3, #1
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002c62:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <menu+0x1858>)
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <menu+0x1838>)
 8002c68:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <menu+0x183c>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002c70:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <menu+0x1840>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b0d      	cmp	r3, #13
 8002c76:	f040 80b5 	bne.w	8002de4 <menu+0x1928>
		if(dilSecim == 0) {
 8002c7a:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <menu+0x1844>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d105      	bne.n	8002c8e <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002c82:	4a26      	ldr	r2, [pc, #152]	; (8002d1c <menu+0x1860>)
 8002c84:	2101      	movs	r1, #1
 8002c86:	2001      	movs	r0, #1
 8002c88:	f7fd fc6c 	bl	8000564 <lcd_print>
 8002c8c:	e008      	b.n	8002ca0 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002c8e:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <menu+0x1844>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d104      	bne.n	8002ca0 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002c96:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <menu+0x1864>)
 8002c98:	2101      	movs	r1, #1
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	f7fd fc62 	bl	8000564 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002ca0:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <menu+0x1868>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002ca8:	4a1f      	ldr	r2, [pc, #124]	; (8002d28 <menu+0x186c>)
 8002caa:	2101      	movs	r1, #1
 8002cac:	2002      	movs	r0, #2
 8002cae:	f7fd fc59 	bl	8000564 <lcd_print>
 8002cb2:	e048      	b.n	8002d46 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <menu+0x1868>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d13b      	bne.n	8002d34 <menu+0x1878>
			if(dilSecim == 0) {
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <menu+0x1844>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002cc4:	4a19      	ldr	r2, [pc, #100]	; (8002d2c <menu+0x1870>)
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	2002      	movs	r0, #2
 8002cca:	f7fd fc4b 	bl	8000564 <lcd_print>
 8002cce:	e03a      	b.n	8002d46 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <menu+0x1844>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d136      	bne.n	8002d46 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002cd8:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <menu+0x1874>)
 8002cda:	2101      	movs	r1, #1
 8002cdc:	2002      	movs	r0, #2
 8002cde:	f7fd fc41 	bl	8000564 <lcd_print>
 8002ce2:	e030      	b.n	8002d46 <menu+0x188a>
 8002ce4:	200002ba 	.word	0x200002ba
 8002ce8:	0800c374 	.word	0x0800c374
 8002cec:	40010800 	.word	0x40010800
 8002cf0:	200002df 	.word	0x200002df
 8002cf4:	200001e0 	.word	0x200001e0
 8002cf8:	200002dc 	.word	0x200002dc
 8002cfc:	200002b0 	.word	0x200002b0
 8002d00:	200002d1 	.word	0x200002d1
 8002d04:	0800c3f4 	.word	0x0800c3f4
 8002d08:	0800c398 	.word	0x0800c398
 8002d0c:	0800c408 	.word	0x0800c408
 8002d10:	0800c3bc 	.word	0x0800c3bc
 8002d14:	200002ca 	.word	0x200002ca
 8002d18:	20000250 	.word	0x20000250
 8002d1c:	0800c41c 	.word	0x0800c41c
 8002d20:	0800c430 	.word	0x0800c430
 8002d24:	200002bb 	.word	0x200002bb
 8002d28:	0800c33c 	.word	0x0800c33c
 8002d2c:	0800c350 	.word	0x0800c350
 8002d30:	0800c360 	.word	0x0800c360
			}
		} else if(kapitablaTip == 2) {
 8002d34:	4b5b      	ldr	r3, [pc, #364]	; (8002ea4 <menu+0x19e8>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d104      	bne.n	8002d46 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002d3c:	4a5a      	ldr	r2, [pc, #360]	; (8002ea8 <menu+0x19ec>)
 8002d3e:	2101      	movs	r1, #1
 8002d40:	2002      	movs	r0, #2
 8002d42:	f7fd fc0f 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d46:	2102      	movs	r1, #2
 8002d48:	4858      	ldr	r0, [pc, #352]	; (8002eac <menu+0x19f0>)
 8002d4a:	f005 ff9d 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d115      	bne.n	8002d80 <menu+0x18c4>
 8002d54:	4b56      	ldr	r3, [pc, #344]	; (8002eb0 <menu+0x19f4>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	f083 0301 	eor.w	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00e      	beq.n	8002d80 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002d62:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <menu+0x19e8>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4b4e      	ldr	r3, [pc, #312]	; (8002ea4 <menu+0x19e8>)
 8002d6c:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002d6e:	4b4d      	ldr	r3, [pc, #308]	; (8002ea4 <menu+0x19e8>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d902      	bls.n	8002d7c <menu+0x18c0>
				kapitablaTip = 0;
 8002d76:	4b4b      	ldr	r3, [pc, #300]	; (8002ea4 <menu+0x19e8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d7c:	f002 fb42 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d80:	2104      	movs	r1, #4
 8002d82:	484a      	ldr	r0, [pc, #296]	; (8002eac <menu+0x19f0>)
 8002d84:	f005 ff80 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d115      	bne.n	8002dba <menu+0x18fe>
 8002d8e:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <menu+0x19f4>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	f083 0301 	eor.w	r3, r3, #1
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00e      	beq.n	8002dba <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002d9c:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <menu+0x19e8>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <menu+0x19e8>)
 8002da6:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002da8:	4b3e      	ldr	r3, [pc, #248]	; (8002ea4 <menu+0x19e8>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d902      	bls.n	8002db6 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002db0:	4b3c      	ldr	r3, [pc, #240]	; (8002ea4 <menu+0x19e8>)
 8002db2:	2202      	movs	r2, #2
 8002db4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002db6:	f002 fb25 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dba:	2108      	movs	r1, #8
 8002dbc:	483b      	ldr	r0, [pc, #236]	; (8002eac <menu+0x19f0>)
 8002dbe:	f005 ff63 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d10d      	bne.n	8002de4 <menu+0x1928>
 8002dc8:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <menu+0x19f4>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	f083 0301 	eor.w	r3, r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d006      	beq.n	8002de4 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002dd6:	4b33      	ldr	r3, [pc, #204]	; (8002ea4 <menu+0x19e8>)
 8002dd8:	781a      	ldrb	r2, [r3, #0]
 8002dda:	4b36      	ldr	r3, [pc, #216]	; (8002eb4 <menu+0x19f8>)
 8002ddc:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002dde:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <menu+0x19fc>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002de4:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <menu+0x1a00>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b0e      	cmp	r3, #14
 8002dea:	f040 80f2 	bne.w	8002fd2 <menu+0x1b16>
		if(dilSecim == 0) {
 8002dee:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <menu+0x1a04>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002df6:	4a33      	ldr	r2, [pc, #204]	; (8002ec4 <menu+0x1a08>)
 8002df8:	2101      	movs	r1, #1
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f7fd fbb2 	bl	8000564 <lcd_print>
 8002e00:	e008      	b.n	8002e14 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002e02:	4b2f      	ldr	r3, [pc, #188]	; (8002ec0 <menu+0x1a04>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d104      	bne.n	8002e14 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002e0a:	4a2f      	ldr	r2, [pc, #188]	; (8002ec8 <menu+0x1a0c>)
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f7fd fba8 	bl	8000564 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002e14:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <menu+0x1a10>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d113      	bne.n	8002e44 <menu+0x1988>
			if(dilSecim == 0){
 8002e1c:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <menu+0x1a04>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d105      	bne.n	8002e30 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002e24:	4a2a      	ldr	r2, [pc, #168]	; (8002ed0 <menu+0x1a14>)
 8002e26:	2101      	movs	r1, #1
 8002e28:	2002      	movs	r0, #2
 8002e2a:	f7fd fb9b 	bl	8000564 <lcd_print>
 8002e2e:	e071      	b.n	8002f14 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002e30:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <menu+0x1a04>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d16d      	bne.n	8002f14 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002e38:	4a26      	ldr	r2, [pc, #152]	; (8002ed4 <menu+0x1a18>)
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	2002      	movs	r0, #2
 8002e3e:	f7fd fb91 	bl	8000564 <lcd_print>
 8002e42:	e067      	b.n	8002f14 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002e44:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <menu+0x1a10>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d112      	bne.n	8002e72 <menu+0x19b6>
			if(dilSecim == 0){
 8002e4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <menu+0x1a04>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d104      	bne.n	8002e5e <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002e54:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <menu+0x1a1c>)
 8002e56:	2101      	movs	r1, #1
 8002e58:	2002      	movs	r0, #2
 8002e5a:	f7fd fb83 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1){
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <menu+0x1a04>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d156      	bne.n	8002f14 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002e66:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <menu+0x1a20>)
 8002e68:	2101      	movs	r1, #1
 8002e6a:	2002      	movs	r0, #2
 8002e6c:	f7fd fb7a 	bl	8000564 <lcd_print>
 8002e70:	e050      	b.n	8002f14 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002e72:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <menu+0x1a10>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d136      	bne.n	8002ee8 <menu+0x1a2c>
			if(dilSecim == 0){
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <menu+0x1a04>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d105      	bne.n	8002e8e <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002e82:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <menu+0x1a24>)
 8002e84:	2101      	movs	r1, #1
 8002e86:	2002      	movs	r0, #2
 8002e88:	f7fd fb6c 	bl	8000564 <lcd_print>
 8002e8c:	e042      	b.n	8002f14 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <menu+0x1a04>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d13e      	bne.n	8002f14 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002e96:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <menu+0x1a28>)
 8002e98:	2101      	movs	r1, #1
 8002e9a:	2002      	movs	r0, #2
 8002e9c:	f7fd fb62 	bl	8000564 <lcd_print>
 8002ea0:	e038      	b.n	8002f14 <menu+0x1a58>
 8002ea2:	bf00      	nop
 8002ea4:	200002bb 	.word	0x200002bb
 8002ea8:	0800c374 	.word	0x0800c374
 8002eac:	40010800 	.word	0x40010800
 8002eb0:	200002df 	.word	0x200002df
 8002eb4:	200001e0 	.word	0x200001e0
 8002eb8:	200002dc 	.word	0x200002dc
 8002ebc:	200002b0 	.word	0x200002b0
 8002ec0:	200002d1 	.word	0x200002d1
 8002ec4:	0800c444 	.word	0x0800c444
 8002ec8:	0800c458 	.word	0x0800c458
 8002ecc:	200002bd 	.word	0x200002bd
 8002ed0:	0800c46c 	.word	0x0800c46c
 8002ed4:	0800c47c 	.word	0x0800c47c
 8002ed8:	0800c48c 	.word	0x0800c48c
 8002edc:	0800c49c 	.word	0x0800c49c
 8002ee0:	0800c4ac 	.word	0x0800c4ac
 8002ee4:	0800c4c0 	.word	0x0800c4c0
			}
		} else if(kapiTablaAcKonum == 3) {
 8002ee8:	4b9b      	ldr	r3, [pc, #620]	; (8003158 <menu+0x1c9c>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d111      	bne.n	8002f14 <menu+0x1a58>
			if(dilSecim == 0) {
 8002ef0:	4b9a      	ldr	r3, [pc, #616]	; (800315c <menu+0x1ca0>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d104      	bne.n	8002f02 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002ef8:	4a99      	ldr	r2, [pc, #612]	; (8003160 <menu+0x1ca4>)
 8002efa:	2101      	movs	r1, #1
 8002efc:	2002      	movs	r0, #2
 8002efe:	f7fd fb31 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 8002f02:	4b96      	ldr	r3, [pc, #600]	; (800315c <menu+0x1ca0>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d104      	bne.n	8002f14 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002f0a:	4a96      	ldr	r2, [pc, #600]	; (8003164 <menu+0x1ca8>)
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	2002      	movs	r0, #2
 8002f10:	f7fd fb28 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f14:	2102      	movs	r1, #2
 8002f16:	4894      	ldr	r0, [pc, #592]	; (8003168 <menu+0x1cac>)
 8002f18:	f005 feb6 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d115      	bne.n	8002f4e <menu+0x1a92>
 8002f22:	4b92      	ldr	r3, [pc, #584]	; (800316c <menu+0x1cb0>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	f083 0301 	eor.w	r3, r3, #1
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00e      	beq.n	8002f4e <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002f30:	4b89      	ldr	r3, [pc, #548]	; (8003158 <menu+0x1c9c>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	4b87      	ldr	r3, [pc, #540]	; (8003158 <menu+0x1c9c>)
 8002f3a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002f3c:	4b86      	ldr	r3, [pc, #536]	; (8003158 <menu+0x1c9c>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d902      	bls.n	8002f4a <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002f44:	4b84      	ldr	r3, [pc, #528]	; (8003158 <menu+0x1c9c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f4a:	f002 fa5b 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f4e:	2104      	movs	r1, #4
 8002f50:	4885      	ldr	r0, [pc, #532]	; (8003168 <menu+0x1cac>)
 8002f52:	f005 fe99 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d115      	bne.n	8002f88 <menu+0x1acc>
 8002f5c:	4b83      	ldr	r3, [pc, #524]	; (800316c <menu+0x1cb0>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	f083 0301 	eor.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00e      	beq.n	8002f88 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002f6a:	4b7b      	ldr	r3, [pc, #492]	; (8003158 <menu+0x1c9c>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4b79      	ldr	r3, [pc, #484]	; (8003158 <menu+0x1c9c>)
 8002f74:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002f76:	4b78      	ldr	r3, [pc, #480]	; (8003158 <menu+0x1c9c>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d902      	bls.n	8002f84 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002f7e:	4b76      	ldr	r3, [pc, #472]	; (8003158 <menu+0x1c9c>)
 8002f80:	2202      	movs	r2, #2
 8002f82:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f84:	f002 fa3e 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f88:	2108      	movs	r1, #8
 8002f8a:	4877      	ldr	r0, [pc, #476]	; (8003168 <menu+0x1cac>)
 8002f8c:	f005 fe7c 	bl	8008c88 <HAL_GPIO_ReadPin>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d11d      	bne.n	8002fd2 <menu+0x1b16>
 8002f96:	4b75      	ldr	r3, [pc, #468]	; (800316c <menu+0x1cb0>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	f083 0301 	eor.w	r3, r3, #1
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d016      	beq.n	8002fd2 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002fa4:	4b6c      	ldr	r3, [pc, #432]	; (8003158 <menu+0x1c9c>)
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	4b71      	ldr	r3, [pc, #452]	; (8003170 <menu+0x1cb4>)
 8002faa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002fae:	4b6a      	ldr	r3, [pc, #424]	; (8003158 <menu+0x1c9c>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <menu+0x1b02>
 8002fb6:	4b68      	ldr	r3, [pc, #416]	; (8003158 <menu+0x1c9c>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d106      	bne.n	8002fcc <menu+0x1b10>
				altLimit = 1;
 8002fbe:	4b6d      	ldr	r3, [pc, #436]	; (8003174 <menu+0x1cb8>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002fc4:	4b6b      	ldr	r3, [pc, #428]	; (8003174 <menu+0x1cb8>)
 8002fc6:	781a      	ldrb	r2, [r3, #0]
 8002fc8:	4b69      	ldr	r3, [pc, #420]	; (8003170 <menu+0x1cb4>)
 8002fca:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <menu+0x1cbc>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002fd2:	4b6a      	ldr	r3, [pc, #424]	; (800317c <menu+0x1cc0>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	d17f      	bne.n	80030da <menu+0x1c1e>
		if(dilSecim == 0) {
 8002fda:	4b60      	ldr	r3, [pc, #384]	; (800315c <menu+0x1ca0>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10a      	bne.n	8002ff8 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002fe2:	4a67      	ldr	r2, [pc, #412]	; (8003180 <menu+0x1cc4>)
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f7fd fabc 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002fec:	4a65      	ldr	r2, [pc, #404]	; (8003184 <menu+0x1cc8>)
 8002fee:	2101      	movs	r1, #1
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	f7fd fab7 	bl	8000564 <lcd_print>
 8002ff6:	e00d      	b.n	8003014 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002ff8:	4b58      	ldr	r3, [pc, #352]	; (800315c <menu+0x1ca0>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d109      	bne.n	8003014 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8003000:	4a61      	ldr	r2, [pc, #388]	; (8003188 <menu+0x1ccc>)
 8003002:	2101      	movs	r1, #1
 8003004:	2001      	movs	r0, #1
 8003006:	f7fd faad 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800300a:	4a60      	ldr	r2, [pc, #384]	; (800318c <menu+0x1cd0>)
 800300c:	2101      	movs	r1, #1
 800300e:	2002      	movs	r0, #2
 8003010:	f7fd faa8 	bl	8000564 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003014:	4b5e      	ldr	r3, [pc, #376]	; (8003190 <menu+0x1cd4>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	220a      	movs	r2, #10
 800301a:	495e      	ldr	r1, [pc, #376]	; (8003194 <menu+0x1cd8>)
 800301c:	4618      	mov	r0, r3
 800301e:	f008 fe29 	bl	800bc74 <itoa>
		lcd_print(2,16,snum);
 8003022:	4a5c      	ldr	r2, [pc, #368]	; (8003194 <menu+0x1cd8>)
 8003024:	2110      	movs	r1, #16
 8003026:	2002      	movs	r0, #2
 8003028:	f7fd fa9c 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800302c:	2102      	movs	r1, #2
 800302e:	484e      	ldr	r0, [pc, #312]	; (8003168 <menu+0x1cac>)
 8003030:	f005 fe2a 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003034:	4603      	mov	r3, r0
 8003036:	2b01      	cmp	r3, #1
 8003038:	d119      	bne.n	800306e <menu+0x1bb2>
 800303a:	4b4c      	ldr	r3, [pc, #304]	; (800316c <menu+0x1cb0>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	f083 0301 	eor.w	r3, r3, #1
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d012      	beq.n	800306e <menu+0x1bb2>
 8003048:	4b53      	ldr	r3, [pc, #332]	; (8003198 <menu+0x1cdc>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10e      	bne.n	800306e <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8003050:	4b4f      	ldr	r3, [pc, #316]	; (8003190 <menu+0x1cd4>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	3301      	adds	r3, #1
 8003056:	b2da      	uxtb	r2, r3
 8003058:	4b4d      	ldr	r3, [pc, #308]	; (8003190 <menu+0x1cd4>)
 800305a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 800305c:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <menu+0x1cd4>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b05      	cmp	r3, #5
 8003062:	d902      	bls.n	800306a <menu+0x1bae>
				kapiTablaAcSure = 0;
 8003064:	4b4a      	ldr	r3, [pc, #296]	; (8003190 <menu+0x1cd4>)
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800306a:	f002 f9cb 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800306e:	2104      	movs	r1, #4
 8003070:	483d      	ldr	r0, [pc, #244]	; (8003168 <menu+0x1cac>)
 8003072:	f005 fe09 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003076:	4603      	mov	r3, r0
 8003078:	2b01      	cmp	r3, #1
 800307a:	d119      	bne.n	80030b0 <menu+0x1bf4>
 800307c:	4b3b      	ldr	r3, [pc, #236]	; (800316c <menu+0x1cb0>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	f083 0301 	eor.w	r3, r3, #1
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d012      	beq.n	80030b0 <menu+0x1bf4>
 800308a:	4b43      	ldr	r3, [pc, #268]	; (8003198 <menu+0x1cdc>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10e      	bne.n	80030b0 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <menu+0x1cd4>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	3b01      	subs	r3, #1
 8003098:	b2da      	uxtb	r2, r3
 800309a:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <menu+0x1cd4>)
 800309c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800309e:	4b3c      	ldr	r3, [pc, #240]	; (8003190 <menu+0x1cd4>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d902      	bls.n	80030ac <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 80030a6:	4b3a      	ldr	r3, [pc, #232]	; (8003190 <menu+0x1cd4>)
 80030a8:	2205      	movs	r2, #5
 80030aa:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80030ac:	f002 f9aa 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b0:	2108      	movs	r1, #8
 80030b2:	482d      	ldr	r0, [pc, #180]	; (8003168 <menu+0x1cac>)
 80030b4:	f005 fde8 	bl	8008c88 <HAL_GPIO_ReadPin>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d10d      	bne.n	80030da <menu+0x1c1e>
 80030be:	4b2b      	ldr	r3, [pc, #172]	; (800316c <menu+0x1cb0>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	f083 0301 	eor.w	r3, r3, #1
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d006      	beq.n	80030da <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80030cc:	4b30      	ldr	r3, [pc, #192]	; (8003190 <menu+0x1cd4>)
 80030ce:	781a      	ldrb	r2, [r3, #0]
 80030d0:	4b27      	ldr	r3, [pc, #156]	; (8003170 <menu+0x1cb4>)
 80030d2:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80030d4:	4b28      	ldr	r3, [pc, #160]	; (8003178 <menu+0x1cbc>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80030da:	4b28      	ldr	r3, [pc, #160]	; (800317c <menu+0x1cc0>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b10      	cmp	r3, #16
 80030e0:	f040 80bc 	bne.w	800325c <menu+0x1da0>
		if(dilSecim == 0) {
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <menu+0x1ca0>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d105      	bne.n	80030f8 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80030ec:	4a2b      	ldr	r2, [pc, #172]	; (800319c <menu+0x1ce0>)
 80030ee:	2101      	movs	r1, #1
 80030f0:	2001      	movs	r0, #1
 80030f2:	f7fd fa37 	bl	8000564 <lcd_print>
 80030f6:	e008      	b.n	800310a <menu+0x1c4e>
		} else if(dilSecim == 1) {
 80030f8:	4b18      	ldr	r3, [pc, #96]	; (800315c <menu+0x1ca0>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d104      	bne.n	800310a <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003100:	4a27      	ldr	r2, [pc, #156]	; (80031a0 <menu+0x1ce4>)
 8003102:	2101      	movs	r1, #1
 8003104:	2001      	movs	r0, #1
 8003106:	f7fd fa2d 	bl	8000564 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 800310a:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <menu+0x1ce8>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d113      	bne.n	800313a <menu+0x1c7e>
			if(dilSecim == 0) {
 8003112:	4b12      	ldr	r3, [pc, #72]	; (800315c <menu+0x1ca0>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 800311a:	4a11      	ldr	r2, [pc, #68]	; (8003160 <menu+0x1ca4>)
 800311c:	2101      	movs	r1, #1
 800311e:	2002      	movs	r0, #2
 8003120:	f7fd fa20 	bl	8000564 <lcd_print>
 8003124:	e04b      	b.n	80031be <menu+0x1d02>
			} else if(dilSecim == 1) {
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <menu+0x1ca0>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d147      	bne.n	80031be <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 800312e:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <menu+0x1ca8>)
 8003130:	2101      	movs	r1, #1
 8003132:	2002      	movs	r0, #2
 8003134:	f7fd fa16 	bl	8000564 <lcd_print>
 8003138:	e041      	b.n	80031be <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800313a:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <menu+0x1ce8>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d13d      	bne.n	80031be <menu+0x1d02>
			if(dilSecim == 0) {
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <menu+0x1ca0>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d130      	bne.n	80031ac <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800314a:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <menu+0x1cec>)
 800314c:	2101      	movs	r1, #1
 800314e:	2002      	movs	r0, #2
 8003150:	f7fd fa08 	bl	8000564 <lcd_print>
 8003154:	e033      	b.n	80031be <menu+0x1d02>
 8003156:	bf00      	nop
 8003158:	200002bd 	.word	0x200002bd
 800315c:	200002d1 	.word	0x200002d1
 8003160:	0800c134 	.word	0x0800c134
 8003164:	0800c148 	.word	0x0800c148
 8003168:	40010800 	.word	0x40010800
 800316c:	200002df 	.word	0x200002df
 8003170:	200001e0 	.word	0x200001e0
 8003174:	200002b6 	.word	0x200002b6
 8003178:	200002dc 	.word	0x200002dc
 800317c:	200002b0 	.word	0x200002b0
 8003180:	0800c4d4 	.word	0x0800c4d4
 8003184:	0800c398 	.word	0x0800c398
 8003188:	0800c4e8 	.word	0x0800c4e8
 800318c:	0800c3bc 	.word	0x0800c3bc
 8003190:	200002cb 	.word	0x200002cb
 8003194:	20000250 	.word	0x20000250
 8003198:	200002bb 	.word	0x200002bb
 800319c:	0800c4fc 	.word	0x0800c4fc
 80031a0:	0800c510 	.word	0x0800c510
 80031a4:	200002be 	.word	0x200002be
 80031a8:	0800c194 	.word	0x0800c194
			} else if(dilSecim == 1) {
 80031ac:	4b99      	ldr	r3, [pc, #612]	; (8003414 <menu+0x1f58>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d104      	bne.n	80031be <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80031b4:	4a98      	ldr	r2, [pc, #608]	; (8003418 <menu+0x1f5c>)
 80031b6:	2101      	movs	r1, #1
 80031b8:	2002      	movs	r0, #2
 80031ba:	f7fd f9d3 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031be:	2102      	movs	r1, #2
 80031c0:	4896      	ldr	r0, [pc, #600]	; (800341c <menu+0x1f60>)
 80031c2:	f005 fd61 	bl	8008c88 <HAL_GPIO_ReadPin>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d115      	bne.n	80031f8 <menu+0x1d3c>
 80031cc:	4b94      	ldr	r3, [pc, #592]	; (8003420 <menu+0x1f64>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	f083 0301 	eor.w	r3, r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00e      	beq.n	80031f8 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80031da:	4b92      	ldr	r3, [pc, #584]	; (8003424 <menu+0x1f68>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	3301      	adds	r3, #1
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4b90      	ldr	r3, [pc, #576]	; (8003424 <menu+0x1f68>)
 80031e4:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80031e6:	4b8f      	ldr	r3, [pc, #572]	; (8003424 <menu+0x1f68>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d902      	bls.n	80031f4 <menu+0x1d38>
				yukariYavasLimit = 0;
 80031ee:	4b8d      	ldr	r3, [pc, #564]	; (8003424 <menu+0x1f68>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031f4:	f002 f906 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031f8:	2104      	movs	r1, #4
 80031fa:	4888      	ldr	r0, [pc, #544]	; (800341c <menu+0x1f60>)
 80031fc:	f005 fd44 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003200:	4603      	mov	r3, r0
 8003202:	2b01      	cmp	r3, #1
 8003204:	d115      	bne.n	8003232 <menu+0x1d76>
 8003206:	4b86      	ldr	r3, [pc, #536]	; (8003420 <menu+0x1f64>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	f083 0301 	eor.w	r3, r3, #1
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00e      	beq.n	8003232 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003214:	4b83      	ldr	r3, [pc, #524]	; (8003424 <menu+0x1f68>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	3b01      	subs	r3, #1
 800321a:	b2da      	uxtb	r2, r3
 800321c:	4b81      	ldr	r3, [pc, #516]	; (8003424 <menu+0x1f68>)
 800321e:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003220:	4b80      	ldr	r3, [pc, #512]	; (8003424 <menu+0x1f68>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003228:	4b7e      	ldr	r3, [pc, #504]	; (8003424 <menu+0x1f68>)
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800322e:	f002 f8e9 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003232:	2108      	movs	r1, #8
 8003234:	4879      	ldr	r0, [pc, #484]	; (800341c <menu+0x1f60>)
 8003236:	f005 fd27 	bl	8008c88 <HAL_GPIO_ReadPin>
 800323a:	4603      	mov	r3, r0
 800323c:	2b01      	cmp	r3, #1
 800323e:	d10d      	bne.n	800325c <menu+0x1da0>
 8003240:	4b77      	ldr	r3, [pc, #476]	; (8003420 <menu+0x1f64>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	f083 0301 	eor.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d006      	beq.n	800325c <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 800324e:	4b75      	ldr	r3, [pc, #468]	; (8003424 <menu+0x1f68>)
 8003250:	781a      	ldrb	r2, [r3, #0]
 8003252:	4b75      	ldr	r3, [pc, #468]	; (8003428 <menu+0x1f6c>)
 8003254:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003256:	4b75      	ldr	r3, [pc, #468]	; (800342c <menu+0x1f70>)
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 800325c:	4b74      	ldr	r3, [pc, #464]	; (8003430 <menu+0x1f74>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b11      	cmp	r3, #17
 8003262:	f040 80c3 	bne.w	80033ec <menu+0x1f30>
		if(dilSecim == 0) {
 8003266:	4b6b      	ldr	r3, [pc, #428]	; (8003414 <menu+0x1f58>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800326e:	4a71      	ldr	r2, [pc, #452]	; (8003434 <menu+0x1f78>)
 8003270:	2101      	movs	r1, #1
 8003272:	2001      	movs	r0, #1
 8003274:	f7fd f976 	bl	8000564 <lcd_print>
 8003278:	e008      	b.n	800328c <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800327a:	4b66      	ldr	r3, [pc, #408]	; (8003414 <menu+0x1f58>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d104      	bne.n	800328c <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003282:	4a6d      	ldr	r2, [pc, #436]	; (8003438 <menu+0x1f7c>)
 8003284:	2101      	movs	r1, #1
 8003286:	2001      	movs	r0, #1
 8003288:	f7fd f96c 	bl	8000564 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 800328c:	4b6b      	ldr	r3, [pc, #428]	; (800343c <menu+0x1f80>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d113      	bne.n	80032bc <menu+0x1e00>
			if(dilSecim == 0){
 8003294:	4b5f      	ldr	r3, [pc, #380]	; (8003414 <menu+0x1f58>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 800329c:	4a68      	ldr	r2, [pc, #416]	; (8003440 <menu+0x1f84>)
 800329e:	2101      	movs	r1, #1
 80032a0:	2002      	movs	r0, #2
 80032a2:	f7fd f95f 	bl	8000564 <lcd_print>
 80032a6:	e038      	b.n	800331a <menu+0x1e5e>
			} else if(dilSecim == 1){
 80032a8:	4b5a      	ldr	r3, [pc, #360]	; (8003414 <menu+0x1f58>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d134      	bne.n	800331a <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80032b0:	4a64      	ldr	r2, [pc, #400]	; (8003444 <menu+0x1f88>)
 80032b2:	2101      	movs	r1, #1
 80032b4:	2002      	movs	r0, #2
 80032b6:	f7fd f955 	bl	8000564 <lcd_print>
 80032ba:	e02e      	b.n	800331a <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032bc:	4b5f      	ldr	r3, [pc, #380]	; (800343c <menu+0x1f80>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d113      	bne.n	80032ec <menu+0x1e30>
			if(dilSecim == 0){
 80032c4:	4b53      	ldr	r3, [pc, #332]	; (8003414 <menu+0x1f58>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d105      	bne.n	80032d8 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80032cc:	4a5e      	ldr	r2, [pc, #376]	; (8003448 <menu+0x1f8c>)
 80032ce:	2101      	movs	r1, #1
 80032d0:	2002      	movs	r0, #2
 80032d2:	f7fd f947 	bl	8000564 <lcd_print>
 80032d6:	e020      	b.n	800331a <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80032d8:	4b4e      	ldr	r3, [pc, #312]	; (8003414 <menu+0x1f58>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d11c      	bne.n	800331a <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80032e0:	4a5a      	ldr	r2, [pc, #360]	; (800344c <menu+0x1f90>)
 80032e2:	2101      	movs	r1, #1
 80032e4:	2002      	movs	r0, #2
 80032e6:	f7fd f93d 	bl	8000564 <lcd_print>
 80032ea:	e016      	b.n	800331a <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80032ec:	4b53      	ldr	r3, [pc, #332]	; (800343c <menu+0x1f80>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d112      	bne.n	800331a <menu+0x1e5e>
			if(dilSecim == 0) {
 80032f4:	4b47      	ldr	r3, [pc, #284]	; (8003414 <menu+0x1f58>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80032fc:	4a54      	ldr	r2, [pc, #336]	; (8003450 <menu+0x1f94>)
 80032fe:	2101      	movs	r1, #1
 8003300:	2002      	movs	r0, #2
 8003302:	f7fd f92f 	bl	8000564 <lcd_print>
 8003306:	e008      	b.n	800331a <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003308:	4b42      	ldr	r3, [pc, #264]	; (8003414 <menu+0x1f58>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d104      	bne.n	800331a <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003310:	4a50      	ldr	r2, [pc, #320]	; (8003454 <menu+0x1f98>)
 8003312:	2101      	movs	r1, #1
 8003314:	2002      	movs	r0, #2
 8003316:	f7fd f925 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800331a:	2102      	movs	r1, #2
 800331c:	483f      	ldr	r0, [pc, #252]	; (800341c <menu+0x1f60>)
 800331e:	f005 fcb3 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003322:	4603      	mov	r3, r0
 8003324:	2b01      	cmp	r3, #1
 8003326:	d115      	bne.n	8003354 <menu+0x1e98>
 8003328:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <menu+0x1f64>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	f083 0301 	eor.w	r3, r3, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00e      	beq.n	8003354 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003336:	4b41      	ldr	r3, [pc, #260]	; (800343c <menu+0x1f80>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	3301      	adds	r3, #1
 800333c:	b2da      	uxtb	r2, r3
 800333e:	4b3f      	ldr	r3, [pc, #252]	; (800343c <menu+0x1f80>)
 8003340:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003342:	4b3e      	ldr	r3, [pc, #248]	; (800343c <menu+0x1f80>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d902      	bls.n	8003350 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800334a:	4b3c      	ldr	r3, [pc, #240]	; (800343c <menu+0x1f80>)
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003350:	f002 f858 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003354:	2104      	movs	r1, #4
 8003356:	4831      	ldr	r0, [pc, #196]	; (800341c <menu+0x1f60>)
 8003358:	f005 fc96 	bl	8008c88 <HAL_GPIO_ReadPin>
 800335c:	4603      	mov	r3, r0
 800335e:	2b01      	cmp	r3, #1
 8003360:	d115      	bne.n	800338e <menu+0x1ed2>
 8003362:	4b2f      	ldr	r3, [pc, #188]	; (8003420 <menu+0x1f64>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	f083 0301 	eor.w	r3, r3, #1
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00e      	beq.n	800338e <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003370:	4b32      	ldr	r3, [pc, #200]	; (800343c <menu+0x1f80>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	3b01      	subs	r3, #1
 8003376:	b2da      	uxtb	r2, r3
 8003378:	4b30      	ldr	r3, [pc, #192]	; (800343c <menu+0x1f80>)
 800337a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 800337c:	4b2f      	ldr	r3, [pc, #188]	; (800343c <menu+0x1f80>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d902      	bls.n	800338a <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003384:	4b2d      	ldr	r3, [pc, #180]	; (800343c <menu+0x1f80>)
 8003386:	2202      	movs	r2, #2
 8003388:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800338a:	f002 f83b 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800338e:	2108      	movs	r1, #8
 8003390:	4822      	ldr	r0, [pc, #136]	; (800341c <menu+0x1f60>)
 8003392:	f005 fc79 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003396:	4603      	mov	r3, r0
 8003398:	2b01      	cmp	r3, #1
 800339a:	d127      	bne.n	80033ec <menu+0x1f30>
 800339c:	4b20      	ldr	r3, [pc, #128]	; (8003420 <menu+0x1f64>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	f083 0301 	eor.w	r3, r3, #1
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d020      	beq.n	80033ec <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80033aa:	4b24      	ldr	r3, [pc, #144]	; (800343c <menu+0x1f80>)
 80033ac:	781a      	ldrb	r2, [r3, #0]
 80033ae:	4b1e      	ldr	r3, [pc, #120]	; (8003428 <menu+0x1f6c>)
 80033b0:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80033b2:	4b22      	ldr	r3, [pc, #136]	; (800343c <menu+0x1f80>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d003      	beq.n	80033c2 <menu+0x1f06>
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <menu+0x1f80>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d106      	bne.n	80033d0 <menu+0x1f14>
				calismaSekli = 0;
 80033c2:	4b25      	ldr	r3, [pc, #148]	; (8003458 <menu+0x1f9c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80033c8:	4b23      	ldr	r3, [pc, #140]	; (8003458 <menu+0x1f9c>)
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	4b16      	ldr	r3, [pc, #88]	; (8003428 <menu+0x1f6c>)
 80033ce:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <menu+0x1f80>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d106      	bne.n	80033e6 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80033d8:	4b20      	ldr	r3, [pc, #128]	; (800345c <menu+0x1fa0>)
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80033de:	4b1f      	ldr	r3, [pc, #124]	; (800345c <menu+0x1fa0>)
 80033e0:	781a      	ldrb	r2, [r3, #0]
 80033e2:	4b11      	ldr	r3, [pc, #68]	; (8003428 <menu+0x1f6c>)
 80033e4:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <menu+0x1f70>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80033ec:	4b10      	ldr	r3, [pc, #64]	; (8003430 <menu+0x1f74>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b12      	cmp	r3, #18
 80033f2:	f040 80d5 	bne.w	80035a0 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <menu+0x1f80>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d13c      	bne.n	8003478 <menu+0x1fbc>
			if(dilSecim == 0) {
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <menu+0x1f58>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d12e      	bne.n	8003464 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003406:	4a16      	ldr	r2, [pc, #88]	; (8003460 <menu+0x1fa4>)
 8003408:	2101      	movs	r1, #1
 800340a:	2001      	movs	r0, #1
 800340c:	f7fd f8aa 	bl	8000564 <lcd_print>
 8003410:	e048      	b.n	80034a4 <menu+0x1fe8>
 8003412:	bf00      	nop
 8003414:	200002d1 	.word	0x200002d1
 8003418:	0800c1a8 	.word	0x0800c1a8
 800341c:	40010800 	.word	0x40010800
 8003420:	200002df 	.word	0x200002df
 8003424:	200002be 	.word	0x200002be
 8003428:	200001e0 	.word	0x200001e0
 800342c:	200002dc 	.word	0x200002dc
 8003430:	200002b0 	.word	0x200002b0
 8003434:	0800c524 	.word	0x0800c524
 8003438:	0800c538 	.word	0x0800c538
 800343c:	200002bf 	.word	0x200002bf
 8003440:	0800c54c 	.word	0x0800c54c
 8003444:	0800c55c 	.word	0x0800c55c
 8003448:	0800c56c 	.word	0x0800c56c
 800344c:	0800c57c 	.word	0x0800c57c
 8003450:	0800c134 	.word	0x0800c134
 8003454:	0800c148 	.word	0x0800c148
 8003458:	200002b1 	.word	0x200002b1
 800345c:	200002c2 	.word	0x200002c2
 8003460:	0800c58c 	.word	0x0800c58c
			} else if(dilSecim == 1) {
 8003464:	4b7b      	ldr	r3, [pc, #492]	; (8003654 <menu+0x2198>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d11b      	bne.n	80034a4 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 800346c:	4a7a      	ldr	r2, [pc, #488]	; (8003658 <menu+0x219c>)
 800346e:	2101      	movs	r1, #1
 8003470:	2001      	movs	r0, #1
 8003472:	f7fd f877 	bl	8000564 <lcd_print>
 8003476:	e015      	b.n	80034a4 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003478:	4b78      	ldr	r3, [pc, #480]	; (800365c <menu+0x21a0>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d111      	bne.n	80034a4 <menu+0x1fe8>
			if(dilSecim == 0){
 8003480:	4b74      	ldr	r3, [pc, #464]	; (8003654 <menu+0x2198>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d104      	bne.n	8003492 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003488:	4a75      	ldr	r2, [pc, #468]	; (8003660 <menu+0x21a4>)
 800348a:	2101      	movs	r1, #1
 800348c:	2001      	movs	r0, #1
 800348e:	f7fd f869 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1){
 8003492:	4b70      	ldr	r3, [pc, #448]	; (8003654 <menu+0x2198>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d104      	bne.n	80034a4 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800349a:	4a72      	ldr	r2, [pc, #456]	; (8003664 <menu+0x21a8>)
 800349c:	2101      	movs	r1, #1
 800349e:	2001      	movs	r0, #1
 80034a0:	f7fd f860 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80034a4:	4b70      	ldr	r3, [pc, #448]	; (8003668 <menu+0x21ac>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d113      	bne.n	80034d4 <menu+0x2018>
			if(dilSecim == 0) {
 80034ac:	4b69      	ldr	r3, [pc, #420]	; (8003654 <menu+0x2198>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80034b4:	4a6d      	ldr	r2, [pc, #436]	; (800366c <menu+0x21b0>)
 80034b6:	2101      	movs	r1, #1
 80034b8:	2002      	movs	r0, #2
 80034ba:	f7fd f853 	bl	8000564 <lcd_print>
 80034be:	e020      	b.n	8003502 <menu+0x2046>
			} else if(dilSecim == 1){
 80034c0:	4b64      	ldr	r3, [pc, #400]	; (8003654 <menu+0x2198>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d11c      	bne.n	8003502 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80034c8:	4a69      	ldr	r2, [pc, #420]	; (8003670 <menu+0x21b4>)
 80034ca:	2101      	movs	r1, #1
 80034cc:	2002      	movs	r0, #2
 80034ce:	f7fd f849 	bl	8000564 <lcd_print>
 80034d2:	e016      	b.n	8003502 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80034d4:	4b64      	ldr	r3, [pc, #400]	; (8003668 <menu+0x21ac>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d112      	bne.n	8003502 <menu+0x2046>
			if(dilSecim == 0){
 80034dc:	4b5d      	ldr	r3, [pc, #372]	; (8003654 <menu+0x2198>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80034e4:	4a63      	ldr	r2, [pc, #396]	; (8003674 <menu+0x21b8>)
 80034e6:	2101      	movs	r1, #1
 80034e8:	2002      	movs	r0, #2
 80034ea:	f7fd f83b 	bl	8000564 <lcd_print>
 80034ee:	e008      	b.n	8003502 <menu+0x2046>
			} else if(dilSecim == 1){
 80034f0:	4b58      	ldr	r3, [pc, #352]	; (8003654 <menu+0x2198>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d104      	bne.n	8003502 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80034f8:	4a5f      	ldr	r2, [pc, #380]	; (8003678 <menu+0x21bc>)
 80034fa:	2101      	movs	r1, #1
 80034fc:	2002      	movs	r0, #2
 80034fe:	f7fd f831 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003502:	2102      	movs	r1, #2
 8003504:	485d      	ldr	r0, [pc, #372]	; (800367c <menu+0x21c0>)
 8003506:	f005 fbbf 	bl	8008c88 <HAL_GPIO_ReadPin>
 800350a:	4603      	mov	r3, r0
 800350c:	2b01      	cmp	r3, #1
 800350e:	d115      	bne.n	800353c <menu+0x2080>
 8003510:	4b5b      	ldr	r3, [pc, #364]	; (8003680 <menu+0x21c4>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	f083 0301 	eor.w	r3, r3, #1
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00e      	beq.n	800353c <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800351e:	4b52      	ldr	r3, [pc, #328]	; (8003668 <menu+0x21ac>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	3301      	adds	r3, #1
 8003524:	b2da      	uxtb	r2, r3
 8003526:	4b50      	ldr	r3, [pc, #320]	; (8003668 <menu+0x21ac>)
 8003528:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800352a:	4b4f      	ldr	r3, [pc, #316]	; (8003668 <menu+0x21ac>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d902      	bls.n	8003538 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003532:	4b4d      	ldr	r3, [pc, #308]	; (8003668 <menu+0x21ac>)
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003538:	f001 ff64 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800353c:	2104      	movs	r1, #4
 800353e:	484f      	ldr	r0, [pc, #316]	; (800367c <menu+0x21c0>)
 8003540:	f005 fba2 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003544:	4603      	mov	r3, r0
 8003546:	2b01      	cmp	r3, #1
 8003548:	d115      	bne.n	8003576 <menu+0x20ba>
 800354a:	4b4d      	ldr	r3, [pc, #308]	; (8003680 <menu+0x21c4>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	f083 0301 	eor.w	r3, r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00e      	beq.n	8003576 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003558:	4b43      	ldr	r3, [pc, #268]	; (8003668 <menu+0x21ac>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	3b01      	subs	r3, #1
 800355e:	b2da      	uxtb	r2, r3
 8003560:	4b41      	ldr	r3, [pc, #260]	; (8003668 <menu+0x21ac>)
 8003562:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003564:	4b40      	ldr	r3, [pc, #256]	; (8003668 <menu+0x21ac>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 800356c:	4b3e      	ldr	r3, [pc, #248]	; (8003668 <menu+0x21ac>)
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003572:	f001 ff47 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003576:	2108      	movs	r1, #8
 8003578:	4840      	ldr	r0, [pc, #256]	; (800367c <menu+0x21c0>)
 800357a:	f005 fb85 	bl	8008c88 <HAL_GPIO_ReadPin>
 800357e:	4603      	mov	r3, r0
 8003580:	2b01      	cmp	r3, #1
 8003582:	d10d      	bne.n	80035a0 <menu+0x20e4>
 8003584:	4b3e      	ldr	r3, [pc, #248]	; (8003680 <menu+0x21c4>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	f083 0301 	eor.w	r3, r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003592:	4b35      	ldr	r3, [pc, #212]	; (8003668 <menu+0x21ac>)
 8003594:	781a      	ldrb	r2, [r3, #0]
 8003596:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <menu+0x21c8>)
 8003598:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <menu+0x21cc>)
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80035a0:	4b3a      	ldr	r3, [pc, #232]	; (800368c <menu+0x21d0>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b13      	cmp	r3, #19
 80035a6:	f040 80d5 	bne.w	8003754 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <menu+0x21a0>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d113      	bne.n	80035da <menu+0x211e>
			if(dilSecim == 0) {
 80035b2:	4b28      	ldr	r3, [pc, #160]	; (8003654 <menu+0x2198>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d105      	bne.n	80035c6 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80035ba:	4a35      	ldr	r2, [pc, #212]	; (8003690 <menu+0x21d4>)
 80035bc:	2101      	movs	r1, #1
 80035be:	2001      	movs	r0, #1
 80035c0:	f7fc ffd0 	bl	8000564 <lcd_print>
 80035c4:	e01f      	b.n	8003606 <menu+0x214a>
			} else if(dilSecim == 1) {
 80035c6:	4b23      	ldr	r3, [pc, #140]	; (8003654 <menu+0x2198>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d11b      	bne.n	8003606 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80035ce:	4a31      	ldr	r2, [pc, #196]	; (8003694 <menu+0x21d8>)
 80035d0:	2101      	movs	r1, #1
 80035d2:	2001      	movs	r0, #1
 80035d4:	f7fc ffc6 	bl	8000564 <lcd_print>
 80035d8:	e015      	b.n	8003606 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <menu+0x21a0>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d111      	bne.n	8003606 <menu+0x214a>
			if(dilSecim == 0) {
 80035e2:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <menu+0x2198>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80035ea:	4a2b      	ldr	r2, [pc, #172]	; (8003698 <menu+0x21dc>)
 80035ec:	2101      	movs	r1, #1
 80035ee:	2001      	movs	r0, #1
 80035f0:	f7fc ffb8 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 80035f4:	4b17      	ldr	r3, [pc, #92]	; (8003654 <menu+0x2198>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d104      	bne.n	8003606 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80035fc:	4a27      	ldr	r2, [pc, #156]	; (800369c <menu+0x21e0>)
 80035fe:	2101      	movs	r1, #1
 8003600:	2001      	movs	r0, #1
 8003602:	f7fc ffaf 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003606:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <menu+0x21e4>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d113      	bne.n	8003636 <menu+0x217a>
			if(dilSecim == 0) {
 800360e:	4b11      	ldr	r3, [pc, #68]	; (8003654 <menu+0x2198>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d105      	bne.n	8003622 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8003616:	4a15      	ldr	r2, [pc, #84]	; (800366c <menu+0x21b0>)
 8003618:	2101      	movs	r1, #1
 800361a:	2002      	movs	r0, #2
 800361c:	f7fc ffa2 	bl	8000564 <lcd_print>
 8003620:	e049      	b.n	80036b6 <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <menu+0x2198>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d145      	bne.n	80036b6 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800362a:	4a11      	ldr	r2, [pc, #68]	; (8003670 <menu+0x21b4>)
 800362c:	2101      	movs	r1, #1
 800362e:	2002      	movs	r0, #2
 8003630:	f7fc ff98 	bl	8000564 <lcd_print>
 8003634:	e03f      	b.n	80036b6 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003636:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <menu+0x21e4>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d13b      	bne.n	80036b6 <menu+0x21fa>
			if(dilSecim == 0) {
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <menu+0x2198>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d12e      	bne.n	80036a4 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003646:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <menu+0x21b8>)
 8003648:	2101      	movs	r1, #1
 800364a:	2002      	movs	r0, #2
 800364c:	f7fc ff8a 	bl	8000564 <lcd_print>
 8003650:	e031      	b.n	80036b6 <menu+0x21fa>
 8003652:	bf00      	nop
 8003654:	200002d1 	.word	0x200002d1
 8003658:	0800c5a0 	.word	0x0800c5a0
 800365c:	200002bf 	.word	0x200002bf
 8003660:	0800c5b0 	.word	0x0800c5b0
 8003664:	0800c5c4 	.word	0x0800c5c4
 8003668:	200002c0 	.word	0x200002c0
 800366c:	0800c134 	.word	0x0800c134
 8003670:	0800c148 	.word	0x0800c148
 8003674:	0800c194 	.word	0x0800c194
 8003678:	0800c1a8 	.word	0x0800c1a8
 800367c:	40010800 	.word	0x40010800
 8003680:	200002df 	.word	0x200002df
 8003684:	200001e0 	.word	0x200001e0
 8003688:	200002dc 	.word	0x200002dc
 800368c:	200002b0 	.word	0x200002b0
 8003690:	0800c5d8 	.word	0x0800c5d8
 8003694:	0800c5ec 	.word	0x0800c5ec
 8003698:	0800c600 	.word	0x0800c600
 800369c:	0800c614 	.word	0x0800c614
 80036a0:	200002c1 	.word	0x200002c1
			} else if(dilSecim == 1) {
 80036a4:	4b90      	ldr	r3, [pc, #576]	; (80038e8 <menu+0x242c>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d104      	bne.n	80036b6 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80036ac:	4a8f      	ldr	r2, [pc, #572]	; (80038ec <menu+0x2430>)
 80036ae:	2101      	movs	r1, #1
 80036b0:	2002      	movs	r0, #2
 80036b2:	f7fc ff57 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b6:	2102      	movs	r1, #2
 80036b8:	488d      	ldr	r0, [pc, #564]	; (80038f0 <menu+0x2434>)
 80036ba:	f005 fae5 	bl	8008c88 <HAL_GPIO_ReadPin>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d115      	bne.n	80036f0 <menu+0x2234>
 80036c4:	4b8b      	ldr	r3, [pc, #556]	; (80038f4 <menu+0x2438>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f083 0301 	eor.w	r3, r3, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00e      	beq.n	80036f0 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80036d2:	4b89      	ldr	r3, [pc, #548]	; (80038f8 <menu+0x243c>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4b87      	ldr	r3, [pc, #540]	; (80038f8 <menu+0x243c>)
 80036dc:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80036de:	4b86      	ldr	r3, [pc, #536]	; (80038f8 <menu+0x243c>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d902      	bls.n	80036ec <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80036e6:	4b84      	ldr	r3, [pc, #528]	; (80038f8 <menu+0x243c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036ec:	f001 fe8a 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036f0:	2104      	movs	r1, #4
 80036f2:	487f      	ldr	r0, [pc, #508]	; (80038f0 <menu+0x2434>)
 80036f4:	f005 fac8 	bl	8008c88 <HAL_GPIO_ReadPin>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d115      	bne.n	800372a <menu+0x226e>
 80036fe:	4b7d      	ldr	r3, [pc, #500]	; (80038f4 <menu+0x2438>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	f083 0301 	eor.w	r3, r3, #1
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00e      	beq.n	800372a <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 800370c:	4b7a      	ldr	r3, [pc, #488]	; (80038f8 <menu+0x243c>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	3b01      	subs	r3, #1
 8003712:	b2da      	uxtb	r2, r3
 8003714:	4b78      	ldr	r3, [pc, #480]	; (80038f8 <menu+0x243c>)
 8003716:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003718:	4b77      	ldr	r3, [pc, #476]	; (80038f8 <menu+0x243c>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003720:	4b75      	ldr	r3, [pc, #468]	; (80038f8 <menu+0x243c>)
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003726:	f001 fe6d 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800372a:	2108      	movs	r1, #8
 800372c:	4870      	ldr	r0, [pc, #448]	; (80038f0 <menu+0x2434>)
 800372e:	f005 faab 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003732:	4603      	mov	r3, r0
 8003734:	2b01      	cmp	r3, #1
 8003736:	d10d      	bne.n	8003754 <menu+0x2298>
 8003738:	4b6e      	ldr	r3, [pc, #440]	; (80038f4 <menu+0x2438>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	f083 0301 	eor.w	r3, r3, #1
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d006      	beq.n	8003754 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003746:	4b6c      	ldr	r3, [pc, #432]	; (80038f8 <menu+0x243c>)
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	4b6c      	ldr	r3, [pc, #432]	; (80038fc <menu+0x2440>)
 800374c:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800374e:	4b6c      	ldr	r3, [pc, #432]	; (8003900 <menu+0x2444>)
 8003750:	2201      	movs	r2, #1
 8003752:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003754:	4b6b      	ldr	r3, [pc, #428]	; (8003904 <menu+0x2448>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b14      	cmp	r3, #20
 800375a:	f040 80b5 	bne.w	80038c8 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800375e:	4b6a      	ldr	r3, [pc, #424]	; (8003908 <menu+0x244c>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d113      	bne.n	800378e <menu+0x22d2>
			if(dilSecim == 0) {
 8003766:	4b60      	ldr	r3, [pc, #384]	; (80038e8 <menu+0x242c>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d105      	bne.n	800377a <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800376e:	4a67      	ldr	r2, [pc, #412]	; (800390c <menu+0x2450>)
 8003770:	2101      	movs	r1, #1
 8003772:	2001      	movs	r0, #1
 8003774:	f7fc fef6 	bl	8000564 <lcd_print>
 8003778:	e020      	b.n	80037bc <menu+0x2300>
			} else if(dilSecim == 1) {
 800377a:	4b5b      	ldr	r3, [pc, #364]	; (80038e8 <menu+0x242c>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d11c      	bne.n	80037bc <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003782:	4a63      	ldr	r2, [pc, #396]	; (8003910 <menu+0x2454>)
 8003784:	2101      	movs	r1, #1
 8003786:	2001      	movs	r0, #1
 8003788:	f7fc feec 	bl	8000564 <lcd_print>
 800378c:	e016      	b.n	80037bc <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800378e:	4b5e      	ldr	r3, [pc, #376]	; (8003908 <menu+0x244c>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d112      	bne.n	80037bc <menu+0x2300>
			if(dilSecim == 0) {
 8003796:	4b54      	ldr	r3, [pc, #336]	; (80038e8 <menu+0x242c>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d105      	bne.n	80037aa <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800379e:	4a5d      	ldr	r2, [pc, #372]	; (8003914 <menu+0x2458>)
 80037a0:	2101      	movs	r1, #1
 80037a2:	2001      	movs	r0, #1
 80037a4:	f7fc fede 	bl	8000564 <lcd_print>
 80037a8:	e008      	b.n	80037bc <menu+0x2300>
			} else if(dilSecim == 1) {
 80037aa:	4b4f      	ldr	r3, [pc, #316]	; (80038e8 <menu+0x242c>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d104      	bne.n	80037bc <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80037b2:	4a59      	ldr	r2, [pc, #356]	; (8003918 <menu+0x245c>)
 80037b4:	2101      	movs	r1, #1
 80037b6:	2001      	movs	r0, #1
 80037b8:	f7fc fed4 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80037bc:	4b57      	ldr	r3, [pc, #348]	; (800391c <menu+0x2460>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d113      	bne.n	80037ec <menu+0x2330>
			if(dilSecim == 0) {
 80037c4:	4b48      	ldr	r3, [pc, #288]	; (80038e8 <menu+0x242c>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80037cc:	4a54      	ldr	r2, [pc, #336]	; (8003920 <menu+0x2464>)
 80037ce:	2101      	movs	r1, #1
 80037d0:	2002      	movs	r0, #2
 80037d2:	f7fc fec7 	bl	8000564 <lcd_print>
 80037d6:	e020      	b.n	800381a <menu+0x235e>
			} else if(dilSecim == 1) {
 80037d8:	4b43      	ldr	r3, [pc, #268]	; (80038e8 <menu+0x242c>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d11c      	bne.n	800381a <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80037e0:	4a50      	ldr	r2, [pc, #320]	; (8003924 <menu+0x2468>)
 80037e2:	2101      	movs	r1, #1
 80037e4:	2002      	movs	r0, #2
 80037e6:	f7fc febd 	bl	8000564 <lcd_print>
 80037ea:	e016      	b.n	800381a <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80037ec:	4b4b      	ldr	r3, [pc, #300]	; (800391c <menu+0x2460>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d112      	bne.n	800381a <menu+0x235e>
			if(dilSecim == 0) {
 80037f4:	4b3c      	ldr	r3, [pc, #240]	; (80038e8 <menu+0x242c>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d105      	bne.n	8003808 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80037fc:	4a4a      	ldr	r2, [pc, #296]	; (8003928 <menu+0x246c>)
 80037fe:	2101      	movs	r1, #1
 8003800:	2002      	movs	r0, #2
 8003802:	f7fc feaf 	bl	8000564 <lcd_print>
 8003806:	e008      	b.n	800381a <menu+0x235e>
			} else if(dilSecim == 1) {
 8003808:	4b37      	ldr	r3, [pc, #220]	; (80038e8 <menu+0x242c>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d104      	bne.n	800381a <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003810:	4a46      	ldr	r2, [pc, #280]	; (800392c <menu+0x2470>)
 8003812:	2101      	movs	r1, #1
 8003814:	2002      	movs	r0, #2
 8003816:	f7fc fea5 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800381a:	2102      	movs	r1, #2
 800381c:	4834      	ldr	r0, [pc, #208]	; (80038f0 <menu+0x2434>)
 800381e:	f005 fa33 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003822:	4603      	mov	r3, r0
 8003824:	2b01      	cmp	r3, #1
 8003826:	d119      	bne.n	800385c <menu+0x23a0>
 8003828:	4b32      	ldr	r3, [pc, #200]	; (80038f4 <menu+0x2438>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	f083 0301 	eor.w	r3, r3, #1
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d012      	beq.n	800385c <menu+0x23a0>
 8003836:	4b34      	ldr	r3, [pc, #208]	; (8003908 <menu+0x244c>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d10e      	bne.n	800385c <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800383e:	4b37      	ldr	r3, [pc, #220]	; (800391c <menu+0x2460>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b35      	ldr	r3, [pc, #212]	; (800391c <menu+0x2460>)
 8003848:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800384a:	4b34      	ldr	r3, [pc, #208]	; (800391c <menu+0x2460>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d902      	bls.n	8003858 <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003852:	4b32      	ldr	r3, [pc, #200]	; (800391c <menu+0x2460>)
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003858:	f001 fdd4 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800385c:	2104      	movs	r1, #4
 800385e:	4824      	ldr	r0, [pc, #144]	; (80038f0 <menu+0x2434>)
 8003860:	f005 fa12 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003864:	4603      	mov	r3, r0
 8003866:	2b01      	cmp	r3, #1
 8003868:	d119      	bne.n	800389e <menu+0x23e2>
 800386a:	4b22      	ldr	r3, [pc, #136]	; (80038f4 <menu+0x2438>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	f083 0301 	eor.w	r3, r3, #1
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d012      	beq.n	800389e <menu+0x23e2>
 8003878:	4b23      	ldr	r3, [pc, #140]	; (8003908 <menu+0x244c>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d10e      	bne.n	800389e <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003880:	4b26      	ldr	r3, [pc, #152]	; (800391c <menu+0x2460>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	3b01      	subs	r3, #1
 8003886:	b2da      	uxtb	r2, r3
 8003888:	4b24      	ldr	r3, [pc, #144]	; (800391c <menu+0x2460>)
 800388a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 800388c:	4b23      	ldr	r3, [pc, #140]	; (800391c <menu+0x2460>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003894:	4b21      	ldr	r3, [pc, #132]	; (800391c <menu+0x2460>)
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800389a:	f001 fdb3 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800389e:	2108      	movs	r1, #8
 80038a0:	4813      	ldr	r0, [pc, #76]	; (80038f0 <menu+0x2434>)
 80038a2:	f005 f9f1 	bl	8008c88 <HAL_GPIO_ReadPin>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d10d      	bne.n	80038c8 <menu+0x240c>
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <menu+0x2438>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	f083 0301 	eor.w	r3, r3, #1
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d006      	beq.n	80038c8 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80038ba:	4b18      	ldr	r3, [pc, #96]	; (800391c <menu+0x2460>)
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <menu+0x2440>)
 80038c0:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <menu+0x2444>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <menu+0x2448>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b15      	cmp	r3, #21
 80038ce:	f040 80c2 	bne.w	8003a56 <menu+0x259a>
		if(dilSecim == 0) {
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <menu+0x242c>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d12c      	bne.n	8003934 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80038da:	4a15      	ldr	r2, [pc, #84]	; (8003930 <menu+0x2474>)
 80038dc:	2101      	movs	r1, #1
 80038de:	2001      	movs	r0, #1
 80038e0:	f7fc fe40 	bl	8000564 <lcd_print>
 80038e4:	e02f      	b.n	8003946 <menu+0x248a>
 80038e6:	bf00      	nop
 80038e8:	200002d1 	.word	0x200002d1
 80038ec:	0800c1a8 	.word	0x0800c1a8
 80038f0:	40010800 	.word	0x40010800
 80038f4:	200002df 	.word	0x200002df
 80038f8:	200002c1 	.word	0x200002c1
 80038fc:	200001e0 	.word	0x200001e0
 8003900:	200002dc 	.word	0x200002dc
 8003904:	200002b0 	.word	0x200002b0
 8003908:	200002bf 	.word	0x200002bf
 800390c:	0800c628 	.word	0x0800c628
 8003910:	0800c63c 	.word	0x0800c63c
 8003914:	0800c650 	.word	0x0800c650
 8003918:	0800c664 	.word	0x0800c664
 800391c:	200002c2 	.word	0x200002c2
 8003920:	0800c678 	.word	0x0800c678
 8003924:	0800c68c 	.word	0x0800c68c
 8003928:	0800c69c 	.word	0x0800c69c
 800392c:	0800c6b0 	.word	0x0800c6b0
 8003930:	0800c6c0 	.word	0x0800c6c0
		} else if(dilSecim == 1) {
 8003934:	4b9c      	ldr	r3, [pc, #624]	; (8003ba8 <menu+0x26ec>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d104      	bne.n	8003946 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 800393c:	4a9b      	ldr	r2, [pc, #620]	; (8003bac <menu+0x26f0>)
 800393e:	2101      	movs	r1, #1
 8003940:	2001      	movs	r0, #1
 8003942:	f7fc fe0f 	bl	8000564 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003946:	4b9a      	ldr	r3, [pc, #616]	; (8003bb0 <menu+0x26f4>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d112      	bne.n	8003974 <menu+0x24b8>
			if(dilSecim == 0) {
 800394e:	4b96      	ldr	r3, [pc, #600]	; (8003ba8 <menu+0x26ec>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d104      	bne.n	8003960 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003956:	4a97      	ldr	r2, [pc, #604]	; (8003bb4 <menu+0x26f8>)
 8003958:	2101      	movs	r1, #1
 800395a:	2002      	movs	r0, #2
 800395c:	f7fc fe02 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 8003960:	4b91      	ldr	r3, [pc, #580]	; (8003ba8 <menu+0x26ec>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d11c      	bne.n	80039a2 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003968:	4a93      	ldr	r2, [pc, #588]	; (8003bb8 <menu+0x26fc>)
 800396a:	2101      	movs	r1, #1
 800396c:	2002      	movs	r0, #2
 800396e:	f7fc fdf9 	bl	8000564 <lcd_print>
 8003972:	e016      	b.n	80039a2 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003974:	4b8e      	ldr	r3, [pc, #568]	; (8003bb0 <menu+0x26f4>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d112      	bne.n	80039a2 <menu+0x24e6>
			if(dilSecim == 0) {
 800397c:	4b8a      	ldr	r3, [pc, #552]	; (8003ba8 <menu+0x26ec>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d105      	bne.n	8003990 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003984:	4a8d      	ldr	r2, [pc, #564]	; (8003bbc <menu+0x2700>)
 8003986:	2101      	movs	r1, #1
 8003988:	2002      	movs	r0, #2
 800398a:	f7fc fdeb 	bl	8000564 <lcd_print>
 800398e:	e008      	b.n	80039a2 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003990:	4b85      	ldr	r3, [pc, #532]	; (8003ba8 <menu+0x26ec>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d104      	bne.n	80039a2 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003998:	4a89      	ldr	r2, [pc, #548]	; (8003bc0 <menu+0x2704>)
 800399a:	2101      	movs	r1, #1
 800399c:	2002      	movs	r0, #2
 800399e:	f7fc fde1 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039a2:	2102      	movs	r1, #2
 80039a4:	4887      	ldr	r0, [pc, #540]	; (8003bc4 <menu+0x2708>)
 80039a6:	f005 f96f 	bl	8008c88 <HAL_GPIO_ReadPin>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d115      	bne.n	80039dc <menu+0x2520>
 80039b0:	4b85      	ldr	r3, [pc, #532]	; (8003bc8 <menu+0x270c>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	f083 0301 	eor.w	r3, r3, #1
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00e      	beq.n	80039dc <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80039be:	4b7c      	ldr	r3, [pc, #496]	; (8003bb0 <menu+0x26f4>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	3301      	adds	r3, #1
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	4b7a      	ldr	r3, [pc, #488]	; (8003bb0 <menu+0x26f4>)
 80039c8:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80039ca:	4b79      	ldr	r3, [pc, #484]	; (8003bb0 <menu+0x26f4>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d902      	bls.n	80039d8 <menu+0x251c>
				platformSilindirTipi = 0;
 80039d2:	4b77      	ldr	r3, [pc, #476]	; (8003bb0 <menu+0x26f4>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039d8:	f001 fd14 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039dc:	2104      	movs	r1, #4
 80039de:	4879      	ldr	r0, [pc, #484]	; (8003bc4 <menu+0x2708>)
 80039e0:	f005 f952 	bl	8008c88 <HAL_GPIO_ReadPin>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d115      	bne.n	8003a16 <menu+0x255a>
 80039ea:	4b77      	ldr	r3, [pc, #476]	; (8003bc8 <menu+0x270c>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	f083 0301 	eor.w	r3, r3, #1
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00e      	beq.n	8003a16 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80039f8:	4b6d      	ldr	r3, [pc, #436]	; (8003bb0 <menu+0x26f4>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	4b6b      	ldr	r3, [pc, #428]	; (8003bb0 <menu+0x26f4>)
 8003a02:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003a04:	4b6a      	ldr	r3, [pc, #424]	; (8003bb0 <menu+0x26f4>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003a0c:	4b68      	ldr	r3, [pc, #416]	; (8003bb0 <menu+0x26f4>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a12:	f001 fcf7 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a16:	2108      	movs	r1, #8
 8003a18:	486a      	ldr	r0, [pc, #424]	; (8003bc4 <menu+0x2708>)
 8003a1a:	f005 f935 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d118      	bne.n	8003a56 <menu+0x259a>
 8003a24:	4b68      	ldr	r3, [pc, #416]	; (8003bc8 <menu+0x270c>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	f083 0301 	eor.w	r3, r3, #1
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d011      	beq.n	8003a56 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003a32:	4b5f      	ldr	r3, [pc, #380]	; (8003bb0 <menu+0x26f4>)
 8003a34:	781a      	ldrb	r2, [r3, #0]
 8003a36:	4b65      	ldr	r3, [pc, #404]	; (8003bcc <menu+0x2710>)
 8003a38:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003a3a:	4b5d      	ldr	r3, [pc, #372]	; (8003bb0 <menu+0x26f4>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d106      	bne.n	8003a50 <menu+0x2594>
				altLimit = 1;
 8003a42:	4b63      	ldr	r3, [pc, #396]	; (8003bd0 <menu+0x2714>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003a48:	4b61      	ldr	r3, [pc, #388]	; (8003bd0 <menu+0x2714>)
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	4b5f      	ldr	r3, [pc, #380]	; (8003bcc <menu+0x2710>)
 8003a4e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003a50:	4b60      	ldr	r3, [pc, #384]	; (8003bd4 <menu+0x2718>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003a56:	4b60      	ldr	r3, [pc, #384]	; (8003bd8 <menu+0x271c>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b16      	cmp	r3, #22
 8003a5c:	f040 8081 	bne.w	8003b62 <menu+0x26a6>
		if(dilSecim == 0) {
 8003a60:	4b51      	ldr	r3, [pc, #324]	; (8003ba8 <menu+0x26ec>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d105      	bne.n	8003a74 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003a68:	4a5c      	ldr	r2, [pc, #368]	; (8003bdc <menu+0x2720>)
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f7fc fd79 	bl	8000564 <lcd_print>
 8003a72:	e008      	b.n	8003a86 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003a74:	4b4c      	ldr	r3, [pc, #304]	; (8003ba8 <menu+0x26ec>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d104      	bne.n	8003a86 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003a7c:	4a58      	ldr	r2, [pc, #352]	; (8003be0 <menu+0x2724>)
 8003a7e:	2101      	movs	r1, #1
 8003a80:	2001      	movs	r0, #1
 8003a82:	f7fc fd6f 	bl	8000564 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a86:	4b48      	ldr	r3, [pc, #288]	; (8003ba8 <menu+0x26ec>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d105      	bne.n	8003a9a <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a8e:	4a55      	ldr	r2, [pc, #340]	; (8003be4 <menu+0x2728>)
 8003a90:	2101      	movs	r1, #1
 8003a92:	2002      	movs	r0, #2
 8003a94:	f7fc fd66 	bl	8000564 <lcd_print>
 8003a98:	e008      	b.n	8003aac <menu+0x25f0>
			} else if(dilSecim == 1){
 8003a9a:	4b43      	ldr	r3, [pc, #268]	; (8003ba8 <menu+0x26ec>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d104      	bne.n	8003aac <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003aa2:	4a51      	ldr	r2, [pc, #324]	; (8003be8 <menu+0x272c>)
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	2002      	movs	r0, #2
 8003aa8:	f7fc fd5c 	bl	8000564 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003aac:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <menu+0x2730>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	220a      	movs	r2, #10
 8003ab2:	494f      	ldr	r1, [pc, #316]	; (8003bf0 <menu+0x2734>)
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f008 f8dd 	bl	800bc74 <itoa>
		lcd_print(2,16,snum);
 8003aba:	4a4d      	ldr	r2, [pc, #308]	; (8003bf0 <menu+0x2734>)
 8003abc:	2110      	movs	r1, #16
 8003abe:	2002      	movs	r0, #2
 8003ac0:	f7fc fd50 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	483f      	ldr	r0, [pc, #252]	; (8003bc4 <menu+0x2708>)
 8003ac8:	f005 f8de 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d115      	bne.n	8003afe <menu+0x2642>
 8003ad2:	4b3d      	ldr	r3, [pc, #244]	; (8003bc8 <menu+0x270c>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	f083 0301 	eor.w	r3, r3, #1
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00e      	beq.n	8003afe <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003ae0:	4b42      	ldr	r3, [pc, #264]	; (8003bec <menu+0x2730>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	4b40      	ldr	r3, [pc, #256]	; (8003bec <menu+0x2730>)
 8003aea:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003aec:	4b3f      	ldr	r3, [pc, #252]	; (8003bec <menu+0x2730>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d902      	bls.n	8003afa <menu+0x263e>
				yukariValfTmr = 0;
 8003af4:	4b3d      	ldr	r3, [pc, #244]	; (8003bec <menu+0x2730>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003afa:	f001 fc83 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003afe:	2104      	movs	r1, #4
 8003b00:	4830      	ldr	r0, [pc, #192]	; (8003bc4 <menu+0x2708>)
 8003b02:	f005 f8c1 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d115      	bne.n	8003b38 <menu+0x267c>
 8003b0c:	4b2e      	ldr	r3, [pc, #184]	; (8003bc8 <menu+0x270c>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	f083 0301 	eor.w	r3, r3, #1
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00e      	beq.n	8003b38 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003b1a:	4b34      	ldr	r3, [pc, #208]	; (8003bec <menu+0x2730>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4b32      	ldr	r3, [pc, #200]	; (8003bec <menu+0x2730>)
 8003b24:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003b26:	4b31      	ldr	r3, [pc, #196]	; (8003bec <menu+0x2730>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b06      	cmp	r3, #6
 8003b2c:	d902      	bls.n	8003b34 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003b2e:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <menu+0x2730>)
 8003b30:	2205      	movs	r2, #5
 8003b32:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b34:	f001 fc66 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b38:	2108      	movs	r1, #8
 8003b3a:	4822      	ldr	r0, [pc, #136]	; (8003bc4 <menu+0x2708>)
 8003b3c:	f005 f8a4 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d10d      	bne.n	8003b62 <menu+0x26a6>
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <menu+0x270c>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	f083 0301 	eor.w	r3, r3, #1
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d006      	beq.n	8003b62 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003b54:	4b25      	ldr	r3, [pc, #148]	; (8003bec <menu+0x2730>)
 8003b56:	781a      	ldrb	r2, [r3, #0]
 8003b58:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <menu+0x2710>)
 8003b5a:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <menu+0x2718>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003b62:	4b1d      	ldr	r3, [pc, #116]	; (8003bd8 <menu+0x271c>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b17      	cmp	r3, #23
 8003b68:	f040 80ac 	bne.w	8003cc4 <menu+0x2808>
		if(dilSecim == 0) {
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <menu+0x26ec>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003b74:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <menu+0x2738>)
 8003b76:	2101      	movs	r1, #1
 8003b78:	2001      	movs	r0, #1
 8003b7a:	f7fc fcf3 	bl	8000564 <lcd_print>
 8003b7e:	e008      	b.n	8003b92 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <menu+0x26ec>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d104      	bne.n	8003b92 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003b88:	4a1b      	ldr	r2, [pc, #108]	; (8003bf8 <menu+0x273c>)
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f7fc fce9 	bl	8000564 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <menu+0x26ec>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d130      	bne.n	8003bfc <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b9a:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <menu+0x2728>)
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	2002      	movs	r0, #2
 8003ba0:	f7fc fce0 	bl	8000564 <lcd_print>
 8003ba4:	e033      	b.n	8003c0e <menu+0x2752>
 8003ba6:	bf00      	nop
 8003ba8:	200002d1 	.word	0x200002d1
 8003bac:	0800c6d4 	.word	0x0800c6d4
 8003bb0:	200002c3 	.word	0x200002c3
 8003bb4:	0800c678 	.word	0x0800c678
 8003bb8:	0800c68c 	.word	0x0800c68c
 8003bbc:	0800c69c 	.word	0x0800c69c
 8003bc0:	0800c6b0 	.word	0x0800c6b0
 8003bc4:	40010800 	.word	0x40010800
 8003bc8:	200002df 	.word	0x200002df
 8003bcc:	200001e0 	.word	0x200001e0
 8003bd0:	200002b6 	.word	0x200002b6
 8003bd4:	200002dc 	.word	0x200002dc
 8003bd8:	200002b0 	.word	0x200002b0
 8003bdc:	0800c6e4 	.word	0x0800c6e4
 8003be0:	0800c6f8 	.word	0x0800c6f8
 8003be4:	0800c398 	.word	0x0800c398
 8003be8:	0800c70c 	.word	0x0800c70c
 8003bec:	200002c4 	.word	0x200002c4
 8003bf0:	20000250 	.word	0x20000250
 8003bf4:	0800c71c 	.word	0x0800c71c
 8003bf8:	0800c730 	.word	0x0800c730
			} else if(dilSecim == 1) {
 8003bfc:	4b98      	ldr	r3, [pc, #608]	; (8003e60 <menu+0x29a4>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d104      	bne.n	8003c0e <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003c04:	4a97      	ldr	r2, [pc, #604]	; (8003e64 <menu+0x29a8>)
 8003c06:	2101      	movs	r1, #1
 8003c08:	2002      	movs	r0, #2
 8003c0a:	f7fc fcab 	bl	8000564 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003c0e:	4b96      	ldr	r3, [pc, #600]	; (8003e68 <menu+0x29ac>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	220a      	movs	r2, #10
 8003c14:	4995      	ldr	r1, [pc, #596]	; (8003e6c <menu+0x29b0>)
 8003c16:	4618      	mov	r0, r3
 8003c18:	f008 f82c 	bl	800bc74 <itoa>
		lcd_print(2,16,snum);
 8003c1c:	4a93      	ldr	r2, [pc, #588]	; (8003e6c <menu+0x29b0>)
 8003c1e:	2110      	movs	r1, #16
 8003c20:	2002      	movs	r0, #2
 8003c22:	f7fc fc9f 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c26:	2102      	movs	r1, #2
 8003c28:	4891      	ldr	r0, [pc, #580]	; (8003e70 <menu+0x29b4>)
 8003c2a:	f005 f82d 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d115      	bne.n	8003c60 <menu+0x27a4>
 8003c34:	4b8f      	ldr	r3, [pc, #572]	; (8003e74 <menu+0x29b8>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	f083 0301 	eor.w	r3, r3, #1
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00e      	beq.n	8003c60 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003c42:	4b89      	ldr	r3, [pc, #548]	; (8003e68 <menu+0x29ac>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	3301      	adds	r3, #1
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	4b87      	ldr	r3, [pc, #540]	; (8003e68 <menu+0x29ac>)
 8003c4c:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003c4e:	4b86      	ldr	r3, [pc, #536]	; (8003e68 <menu+0x29ac>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b05      	cmp	r3, #5
 8003c54:	d902      	bls.n	8003c5c <menu+0x27a0>
				asagiValfTmr = 0;
 8003c56:	4b84      	ldr	r3, [pc, #528]	; (8003e68 <menu+0x29ac>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c5c:	f001 fbd2 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c60:	2104      	movs	r1, #4
 8003c62:	4883      	ldr	r0, [pc, #524]	; (8003e70 <menu+0x29b4>)
 8003c64:	f005 f810 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d115      	bne.n	8003c9a <menu+0x27de>
 8003c6e:	4b81      	ldr	r3, [pc, #516]	; (8003e74 <menu+0x29b8>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	f083 0301 	eor.w	r3, r3, #1
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00e      	beq.n	8003c9a <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003c7c:	4b7a      	ldr	r3, [pc, #488]	; (8003e68 <menu+0x29ac>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	4b78      	ldr	r3, [pc, #480]	; (8003e68 <menu+0x29ac>)
 8003c86:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003c88:	4b77      	ldr	r3, [pc, #476]	; (8003e68 <menu+0x29ac>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b06      	cmp	r3, #6
 8003c8e:	d902      	bls.n	8003c96 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003c90:	4b75      	ldr	r3, [pc, #468]	; (8003e68 <menu+0x29ac>)
 8003c92:	2205      	movs	r2, #5
 8003c94:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c96:	f001 fbb5 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c9a:	2108      	movs	r1, #8
 8003c9c:	4874      	ldr	r0, [pc, #464]	; (8003e70 <menu+0x29b4>)
 8003c9e:	f004 fff3 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d10d      	bne.n	8003cc4 <menu+0x2808>
 8003ca8:	4b72      	ldr	r3, [pc, #456]	; (8003e74 <menu+0x29b8>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	f083 0301 	eor.w	r3, r3, #1
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003cb6:	4b6c      	ldr	r3, [pc, #432]	; (8003e68 <menu+0x29ac>)
 8003cb8:	781a      	ldrb	r2, [r3, #0]
 8003cba:	4b6f      	ldr	r3, [pc, #444]	; (8003e78 <menu+0x29bc>)
 8003cbc:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003cbe:	4b6f      	ldr	r3, [pc, #444]	; (8003e7c <menu+0x29c0>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003cc4:	4b6e      	ldr	r3, [pc, #440]	; (8003e80 <menu+0x29c4>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b18      	cmp	r3, #24
 8003cca:	f040 809d 	bne.w	8003e08 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003cce:	4b6d      	ldr	r3, [pc, #436]	; (8003e84 <menu+0x29c8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d113      	bne.n	8003cfe <menu+0x2842>
			if(dilSecim == 0) {
 8003cd6:	4b62      	ldr	r3, [pc, #392]	; (8003e60 <menu+0x29a4>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d105      	bne.n	8003cea <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003cde:	4a6a      	ldr	r2, [pc, #424]	; (8003e88 <menu+0x29cc>)
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f7fc fc3e 	bl	8000564 <lcd_print>
 8003ce8:	e020      	b.n	8003d2c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003cea:	4b5d      	ldr	r3, [pc, #372]	; (8003e60 <menu+0x29a4>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d11c      	bne.n	8003d2c <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003cf2:	4a66      	ldr	r2, [pc, #408]	; (8003e8c <menu+0x29d0>)
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f7fc fc34 	bl	8000564 <lcd_print>
 8003cfc:	e016      	b.n	8003d2c <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003cfe:	4b61      	ldr	r3, [pc, #388]	; (8003e84 <menu+0x29c8>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d112      	bne.n	8003d2c <menu+0x2870>
			if(dilSecim == 0) {
 8003d06:	4b56      	ldr	r3, [pc, #344]	; (8003e60 <menu+0x29a4>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003d0e:	4a60      	ldr	r2, [pc, #384]	; (8003e90 <menu+0x29d4>)
 8003d10:	2101      	movs	r1, #1
 8003d12:	2001      	movs	r0, #1
 8003d14:	f7fc fc26 	bl	8000564 <lcd_print>
 8003d18:	e008      	b.n	8003d2c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003d1a:	4b51      	ldr	r3, [pc, #324]	; (8003e60 <menu+0x29a4>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d104      	bne.n	8003d2c <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003d22:	4a5c      	ldr	r2, [pc, #368]	; (8003e94 <menu+0x29d8>)
 8003d24:	2101      	movs	r1, #1
 8003d26:	2001      	movs	r0, #1
 8003d28:	f7fc fc1c 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003d2c:	4b4c      	ldr	r3, [pc, #304]	; (8003e60 <menu+0x29a4>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d34:	4a58      	ldr	r2, [pc, #352]	; (8003e98 <menu+0x29dc>)
 8003d36:	2101      	movs	r1, #1
 8003d38:	2002      	movs	r0, #2
 8003d3a:	f7fc fc13 	bl	8000564 <lcd_print>
 8003d3e:	e008      	b.n	8003d52 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003d40:	4b47      	ldr	r3, [pc, #284]	; (8003e60 <menu+0x29a4>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d104      	bne.n	8003d52 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003d48:	4a46      	ldr	r2, [pc, #280]	; (8003e64 <menu+0x29a8>)
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	2002      	movs	r0, #2
 8003d4e:	f7fc fc09 	bl	8000564 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003d52:	4b52      	ldr	r3, [pc, #328]	; (8003e9c <menu+0x29e0>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	220a      	movs	r2, #10
 8003d58:	4944      	ldr	r1, [pc, #272]	; (8003e6c <menu+0x29b0>)
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f007 ff8a 	bl	800bc74 <itoa>
		lcd_print(2, 16, snum);
 8003d60:	4a42      	ldr	r2, [pc, #264]	; (8003e6c <menu+0x29b0>)
 8003d62:	2110      	movs	r1, #16
 8003d64:	2002      	movs	r0, #2
 8003d66:	f7fc fbfd 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	4840      	ldr	r0, [pc, #256]	; (8003e70 <menu+0x29b4>)
 8003d6e:	f004 ff8b 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d115      	bne.n	8003da4 <menu+0x28e8>
 8003d78:	4b3e      	ldr	r3, [pc, #248]	; (8003e74 <menu+0x29b8>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	f083 0301 	eor.w	r3, r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00e      	beq.n	8003da4 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003d86:	4b45      	ldr	r3, [pc, #276]	; (8003e9c <menu+0x29e0>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <menu+0x29e0>)
 8003d90:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003d92:	4b42      	ldr	r3, [pc, #264]	; (8003e9c <menu+0x29e0>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b05      	cmp	r3, #5
 8003d98:	d902      	bls.n	8003da0 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003d9a:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <menu+0x29e0>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003da0:	f001 fb30 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003da4:	2104      	movs	r1, #4
 8003da6:	4832      	ldr	r0, [pc, #200]	; (8003e70 <menu+0x29b4>)
 8003da8:	f004 ff6e 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d115      	bne.n	8003dde <menu+0x2922>
 8003db2:	4b30      	ldr	r3, [pc, #192]	; (8003e74 <menu+0x29b8>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	f083 0301 	eor.w	r3, r3, #1
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00e      	beq.n	8003dde <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003dc0:	4b36      	ldr	r3, [pc, #216]	; (8003e9c <menu+0x29e0>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	4b34      	ldr	r3, [pc, #208]	; (8003e9c <menu+0x29e0>)
 8003dca:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003dcc:	4b33      	ldr	r3, [pc, #204]	; (8003e9c <menu+0x29e0>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b06      	cmp	r3, #6
 8003dd2:	d902      	bls.n	8003dda <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003dd4:	4b31      	ldr	r3, [pc, #196]	; (8003e9c <menu+0x29e0>)
 8003dd6:	2205      	movs	r2, #5
 8003dd8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003dda:	f001 fb13 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dde:	2108      	movs	r1, #8
 8003de0:	4823      	ldr	r0, [pc, #140]	; (8003e70 <menu+0x29b4>)
 8003de2:	f004 ff51 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d10d      	bne.n	8003e08 <menu+0x294c>
 8003dec:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <menu+0x29b8>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	f083 0301 	eor.w	r3, r3, #1
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d006      	beq.n	8003e08 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003dfa:	4b28      	ldr	r3, [pc, #160]	; (8003e9c <menu+0x29e0>)
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	; (8003e78 <menu+0x29bc>)
 8003e00:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <menu+0x29c0>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <menu+0x29c4>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b19      	cmp	r3, #25
 8003e0e:	f040 80c4 	bne.w	8003f9a <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003e12:	4b1c      	ldr	r3, [pc, #112]	; (8003e84 <menu+0x29c8>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d113      	bne.n	8003e42 <menu+0x2986>
			if(dilSecim == 0) {
 8003e1a:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <menu+0x29a4>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003e22:	4a1f      	ldr	r2, [pc, #124]	; (8003ea0 <menu+0x29e4>)
 8003e24:	2101      	movs	r1, #1
 8003e26:	2001      	movs	r0, #1
 8003e28:	f7fc fb9c 	bl	8000564 <lcd_print>
 8003e2c:	e047      	b.n	8003ebe <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <menu+0x29a4>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d143      	bne.n	8003ebe <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003e36:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <menu+0x29e8>)
 8003e38:	2101      	movs	r1, #1
 8003e3a:	2001      	movs	r0, #1
 8003e3c:	f7fc fb92 	bl	8000564 <lcd_print>
 8003e40:	e03d      	b.n	8003ebe <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <menu+0x29c8>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d139      	bne.n	8003ebe <menu+0x2a02>
			if(dilSecim == 0) {
 8003e4a:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <menu+0x29a4>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d12c      	bne.n	8003eac <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <menu+0x29ec>)
 8003e54:	2101      	movs	r1, #1
 8003e56:	2001      	movs	r0, #1
 8003e58:	f7fc fb84 	bl	8000564 <lcd_print>
 8003e5c:	e02f      	b.n	8003ebe <menu+0x2a02>
 8003e5e:	bf00      	nop
 8003e60:	200002d1 	.word	0x200002d1
 8003e64:	0800c70c 	.word	0x0800c70c
 8003e68:	200002c5 	.word	0x200002c5
 8003e6c:	20000250 	.word	0x20000250
 8003e70:	40010800 	.word	0x40010800
 8003e74:	200002df 	.word	0x200002df
 8003e78:	200001e0 	.word	0x200001e0
 8003e7c:	200002dc 	.word	0x200002dc
 8003e80:	200002b0 	.word	0x200002b0
 8003e84:	200002bf 	.word	0x200002bf
 8003e88:	0800c744 	.word	0x0800c744
 8003e8c:	0800c758 	.word	0x0800c758
 8003e90:	0800c76c 	.word	0x0800c76c
 8003e94:	0800c780 	.word	0x0800c780
 8003e98:	0800c398 	.word	0x0800c398
 8003e9c:	200002c6 	.word	0x200002c6
 8003ea0:	0800c794 	.word	0x0800c794
 8003ea4:	0800c7a8 	.word	0x0800c7a8
 8003ea8:	0800c7bc 	.word	0x0800c7bc
			} else if(dilSecim == 1) {
 8003eac:	4b73      	ldr	r3, [pc, #460]	; (800407c <menu+0x2bc0>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d104      	bne.n	8003ebe <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003eb4:	4a72      	ldr	r2, [pc, #456]	; (8004080 <menu+0x2bc4>)
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	2001      	movs	r0, #1
 8003eba:	f7fc fb53 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003ebe:	4b6f      	ldr	r3, [pc, #444]	; (800407c <menu+0x2bc0>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d105      	bne.n	8003ed2 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ec6:	4a6f      	ldr	r2, [pc, #444]	; (8004084 <menu+0x2bc8>)
 8003ec8:	2101      	movs	r1, #1
 8003eca:	2002      	movs	r0, #2
 8003ecc:	f7fc fb4a 	bl	8000564 <lcd_print>
 8003ed0:	e008      	b.n	8003ee4 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003ed2:	4b6a      	ldr	r3, [pc, #424]	; (800407c <menu+0x2bc0>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d104      	bne.n	8003ee4 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003eda:	4a6b      	ldr	r2, [pc, #428]	; (8004088 <menu+0x2bcc>)
 8003edc:	2101      	movs	r1, #1
 8003ede:	2002      	movs	r0, #2
 8003ee0:	f7fc fb40 	bl	8000564 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003ee4:	4b69      	ldr	r3, [pc, #420]	; (800408c <menu+0x2bd0>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	220a      	movs	r2, #10
 8003eea:	4969      	ldr	r1, [pc, #420]	; (8004090 <menu+0x2bd4>)
 8003eec:	4618      	mov	r0, r3
 8003eee:	f007 fec1 	bl	800bc74 <itoa>
		lcd_print(2,16,snum);
 8003ef2:	4a67      	ldr	r2, [pc, #412]	; (8004090 <menu+0x2bd4>)
 8003ef4:	2110      	movs	r1, #16
 8003ef6:	2002      	movs	r0, #2
 8003ef8:	f7fc fb34 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003efc:	2102      	movs	r1, #2
 8003efe:	4865      	ldr	r0, [pc, #404]	; (8004094 <menu+0x2bd8>)
 8003f00:	f004 fec2 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d115      	bne.n	8003f36 <menu+0x2a7a>
 8003f0a:	4b63      	ldr	r3, [pc, #396]	; (8004098 <menu+0x2bdc>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	f083 0301 	eor.w	r3, r3, #1
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00e      	beq.n	8003f36 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003f18:	4b5c      	ldr	r3, [pc, #368]	; (800408c <menu+0x2bd0>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	4b5a      	ldr	r3, [pc, #360]	; (800408c <menu+0x2bd0>)
 8003f22:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003f24:	4b59      	ldr	r3, [pc, #356]	; (800408c <menu+0x2bd0>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	d902      	bls.n	8003f32 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003f2c:	4b57      	ldr	r3, [pc, #348]	; (800408c <menu+0x2bd0>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f32:	f001 fa67 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f36:	2104      	movs	r1, #4
 8003f38:	4856      	ldr	r0, [pc, #344]	; (8004094 <menu+0x2bd8>)
 8003f3a:	f004 fea5 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d115      	bne.n	8003f70 <menu+0x2ab4>
 8003f44:	4b54      	ldr	r3, [pc, #336]	; (8004098 <menu+0x2bdc>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f083 0301 	eor.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00e      	beq.n	8003f70 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003f52:	4b4e      	ldr	r3, [pc, #312]	; (800408c <menu+0x2bd0>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4b4c      	ldr	r3, [pc, #304]	; (800408c <menu+0x2bd0>)
 8003f5c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003f5e:	4b4b      	ldr	r3, [pc, #300]	; (800408c <menu+0x2bd0>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b06      	cmp	r3, #6
 8003f64:	d902      	bls.n	8003f6c <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003f66:	4b49      	ldr	r3, [pc, #292]	; (800408c <menu+0x2bd0>)
 8003f68:	2205      	movs	r2, #5
 8003f6a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f6c:	f001 fa4a 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f70:	2108      	movs	r1, #8
 8003f72:	4848      	ldr	r0, [pc, #288]	; (8004094 <menu+0x2bd8>)
 8003f74:	f004 fe88 	bl	8008c88 <HAL_GPIO_ReadPin>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d10d      	bne.n	8003f9a <menu+0x2ade>
 8003f7e:	4b46      	ldr	r3, [pc, #280]	; (8004098 <menu+0x2bdc>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	f083 0301 	eor.w	r3, r3, #1
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d006      	beq.n	8003f9a <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003f8c:	4b3f      	ldr	r3, [pc, #252]	; (800408c <menu+0x2bd0>)
 8003f8e:	781a      	ldrb	r2, [r3, #0]
 8003f90:	4b42      	ldr	r3, [pc, #264]	; (800409c <menu+0x2be0>)
 8003f92:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003f94:	4b42      	ldr	r3, [pc, #264]	; (80040a0 <menu+0x2be4>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003f9a:	4b42      	ldr	r3, [pc, #264]	; (80040a4 <menu+0x2be8>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b1a      	cmp	r3, #26
 8003fa0:	f040 80ec 	bne.w	800417c <menu+0x2cc0>
		if(dilSecim == 0) {
 8003fa4:	4b35      	ldr	r3, [pc, #212]	; (800407c <menu+0x2bc0>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003fac:	4a3e      	ldr	r2, [pc, #248]	; (80040a8 <menu+0x2bec>)
 8003fae:	2101      	movs	r1, #1
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	f7fc fad7 	bl	8000564 <lcd_print>
 8003fb6:	e008      	b.n	8003fca <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003fb8:	4b30      	ldr	r3, [pc, #192]	; (800407c <menu+0x2bc0>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d104      	bne.n	8003fca <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003fc0:	4a3a      	ldr	r2, [pc, #232]	; (80040ac <menu+0x2bf0>)
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	f7fc facd 	bl	8000564 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003fca:	4b39      	ldr	r3, [pc, #228]	; (80040b0 <menu+0x2bf4>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b63      	cmp	r3, #99	; 0x63
 8003fd0:	d91e      	bls.n	8004010 <menu+0x2b54>
			if(dilSecim == 0) {
 8003fd2:	4b2a      	ldr	r3, [pc, #168]	; (800407c <menu+0x2bc0>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d104      	bne.n	8003fe4 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fda:	4a2a      	ldr	r2, [pc, #168]	; (8004084 <menu+0x2bc8>)
 8003fdc:	2101      	movs	r1, #1
 8003fde:	2002      	movs	r0, #2
 8003fe0:	f7fc fac0 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 8003fe4:	4b25      	ldr	r3, [pc, #148]	; (800407c <menu+0x2bc0>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d104      	bne.n	8003ff6 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003fec:	4a26      	ldr	r2, [pc, #152]	; (8004088 <menu+0x2bcc>)
 8003fee:	2101      	movs	r1, #1
 8003ff0:	2002      	movs	r0, #2
 8003ff2:	f7fc fab7 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003ff6:	4b2e      	ldr	r3, [pc, #184]	; (80040b0 <menu+0x2bf4>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	220a      	movs	r2, #10
 8003ffc:	4924      	ldr	r1, [pc, #144]	; (8004090 <menu+0x2bd4>)
 8003ffe:	4618      	mov	r0, r3
 8004000:	f007 fe38 	bl	800bc74 <itoa>
			lcd_print(2,14,snum);
 8004004:	4a22      	ldr	r2, [pc, #136]	; (8004090 <menu+0x2bd4>)
 8004006:	210e      	movs	r1, #14
 8004008:	2002      	movs	r0, #2
 800400a:	f7fc faab 	bl	8000564 <lcd_print>
 800400e:	e066      	b.n	80040de <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8004010:	4b27      	ldr	r3, [pc, #156]	; (80040b0 <menu+0x2bf4>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b09      	cmp	r3, #9
 8004016:	d923      	bls.n	8004060 <menu+0x2ba4>
 8004018:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <menu+0x2bf4>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b63      	cmp	r3, #99	; 0x63
 800401e:	d81f      	bhi.n	8004060 <menu+0x2ba4>
			if(dilSecim == 0) {
 8004020:	4b16      	ldr	r3, [pc, #88]	; (800407c <menu+0x2bc0>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d105      	bne.n	8004034 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8004028:	4a16      	ldr	r2, [pc, #88]	; (8004084 <menu+0x2bc8>)
 800402a:	2101      	movs	r1, #1
 800402c:	2002      	movs	r0, #2
 800402e:	f7fc fa99 	bl	8000564 <lcd_print>
 8004032:	e008      	b.n	8004046 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8004034:	4b11      	ldr	r3, [pc, #68]	; (800407c <menu+0x2bc0>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d104      	bne.n	8004046 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 800403c:	4a12      	ldr	r2, [pc, #72]	; (8004088 <menu+0x2bcc>)
 800403e:	2101      	movs	r1, #1
 8004040:	2002      	movs	r0, #2
 8004042:	f7fc fa8f 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004046:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <menu+0x2bf4>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	220a      	movs	r2, #10
 800404c:	4910      	ldr	r1, [pc, #64]	; (8004090 <menu+0x2bd4>)
 800404e:	4618      	mov	r0, r3
 8004050:	f007 fe10 	bl	800bc74 <itoa>
			lcd_print(2, 15, snum);
 8004054:	4a0e      	ldr	r2, [pc, #56]	; (8004090 <menu+0x2bd4>)
 8004056:	210f      	movs	r1, #15
 8004058:	2002      	movs	r0, #2
 800405a:	f7fc fa83 	bl	8000564 <lcd_print>
 800405e:	e03e      	b.n	80040de <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8004060:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <menu+0x2bf4>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b09      	cmp	r3, #9
 8004066:	d83a      	bhi.n	80040de <menu+0x2c22>
			if(dilSecim == 0) {
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <menu+0x2bc0>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d121      	bne.n	80040b4 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8004070:	4a04      	ldr	r2, [pc, #16]	; (8004084 <menu+0x2bc8>)
 8004072:	2101      	movs	r1, #1
 8004074:	2002      	movs	r0, #2
 8004076:	f7fc fa75 	bl	8000564 <lcd_print>
 800407a:	e024      	b.n	80040c6 <menu+0x2c0a>
 800407c:	200002d1 	.word	0x200002d1
 8004080:	0800c7d0 	.word	0x0800c7d0
 8004084:	0800c398 	.word	0x0800c398
 8004088:	0800c70c 	.word	0x0800c70c
 800408c:	200002c7 	.word	0x200002c7
 8004090:	20000250 	.word	0x20000250
 8004094:	40010800 	.word	0x40010800
 8004098:	200002df 	.word	0x200002df
 800409c:	200001e0 	.word	0x200001e0
 80040a0:	200002dc 	.word	0x200002dc
 80040a4:	200002b0 	.word	0x200002b0
 80040a8:	0800c7e4 	.word	0x0800c7e4
 80040ac:	0800c7f8 	.word	0x0800c7f8
 80040b0:	200002c8 	.word	0x200002c8
			} else if(dilSecim == 1) {
 80040b4:	4b8f      	ldr	r3, [pc, #572]	; (80042f4 <menu+0x2e38>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d104      	bne.n	80040c6 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80040bc:	4a8e      	ldr	r2, [pc, #568]	; (80042f8 <menu+0x2e3c>)
 80040be:	2101      	movs	r1, #1
 80040c0:	2002      	movs	r0, #2
 80040c2:	f7fc fa4f 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80040c6:	4b8d      	ldr	r3, [pc, #564]	; (80042fc <menu+0x2e40>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	220a      	movs	r2, #10
 80040cc:	498c      	ldr	r1, [pc, #560]	; (8004300 <menu+0x2e44>)
 80040ce:	4618      	mov	r0, r3
 80040d0:	f007 fdd0 	bl	800bc74 <itoa>
			lcd_print(2, 16, snum);
 80040d4:	4a8a      	ldr	r2, [pc, #552]	; (8004300 <menu+0x2e44>)
 80040d6:	2110      	movs	r1, #16
 80040d8:	2002      	movs	r0, #2
 80040da:	f7fc fa43 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040de:	2102      	movs	r1, #2
 80040e0:	4888      	ldr	r0, [pc, #544]	; (8004304 <menu+0x2e48>)
 80040e2:	f004 fdd1 	bl	8008c88 <HAL_GPIO_ReadPin>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d115      	bne.n	8004118 <menu+0x2c5c>
 80040ec:	4b86      	ldr	r3, [pc, #536]	; (8004308 <menu+0x2e4c>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	f083 0301 	eor.w	r3, r3, #1
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00e      	beq.n	8004118 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 80040fa:	4b80      	ldr	r3, [pc, #512]	; (80042fc <menu+0x2e40>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	3301      	adds	r3, #1
 8004100:	b2da      	uxtb	r2, r3
 8004102:	4b7e      	ldr	r3, [pc, #504]	; (80042fc <menu+0x2e40>)
 8004104:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8004106:	4b7d      	ldr	r3, [pc, #500]	; (80042fc <menu+0x2e40>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2bb4      	cmp	r3, #180	; 0xb4
 800410c:	d902      	bls.n	8004114 <menu+0x2c58>
				makineCalismaTmr = 0;
 800410e:	4b7b      	ldr	r3, [pc, #492]	; (80042fc <menu+0x2e40>)
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004114:	f001 f976 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004118:	2104      	movs	r1, #4
 800411a:	487a      	ldr	r0, [pc, #488]	; (8004304 <menu+0x2e48>)
 800411c:	f004 fdb4 	bl	8008c88 <HAL_GPIO_ReadPin>
 8004120:	4603      	mov	r3, r0
 8004122:	2b01      	cmp	r3, #1
 8004124:	d115      	bne.n	8004152 <menu+0x2c96>
 8004126:	4b78      	ldr	r3, [pc, #480]	; (8004308 <menu+0x2e4c>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	f083 0301 	eor.w	r3, r3, #1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00e      	beq.n	8004152 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004134:	4b71      	ldr	r3, [pc, #452]	; (80042fc <menu+0x2e40>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	3b01      	subs	r3, #1
 800413a:	b2da      	uxtb	r2, r3
 800413c:	4b6f      	ldr	r3, [pc, #444]	; (80042fc <menu+0x2e40>)
 800413e:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004140:	4b6e      	ldr	r3, [pc, #440]	; (80042fc <menu+0x2e40>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2bb5      	cmp	r3, #181	; 0xb5
 8004146:	d902      	bls.n	800414e <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8004148:	4b6c      	ldr	r3, [pc, #432]	; (80042fc <menu+0x2e40>)
 800414a:	22b4      	movs	r2, #180	; 0xb4
 800414c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800414e:	f001 f959 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004152:	2108      	movs	r1, #8
 8004154:	486b      	ldr	r0, [pc, #428]	; (8004304 <menu+0x2e48>)
 8004156:	f004 fd97 	bl	8008c88 <HAL_GPIO_ReadPin>
 800415a:	4603      	mov	r3, r0
 800415c:	2b01      	cmp	r3, #1
 800415e:	d10d      	bne.n	800417c <menu+0x2cc0>
 8004160:	4b69      	ldr	r3, [pc, #420]	; (8004308 <menu+0x2e4c>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	f083 0301 	eor.w	r3, r3, #1
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d006      	beq.n	800417c <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 800416e:	4b63      	ldr	r3, [pc, #396]	; (80042fc <menu+0x2e40>)
 8004170:	781a      	ldrb	r2, [r3, #0]
 8004172:	4b66      	ldr	r3, [pc, #408]	; (800430c <menu+0x2e50>)
 8004174:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8004176:	4b66      	ldr	r3, [pc, #408]	; (8004310 <menu+0x2e54>)
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 800417c:	4b65      	ldr	r3, [pc, #404]	; (8004314 <menu+0x2e58>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b1b      	cmp	r3, #27
 8004182:	f040 8083 	bne.w	800428c <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8004186:	4a64      	ldr	r2, [pc, #400]	; (8004318 <menu+0x2e5c>)
 8004188:	2101      	movs	r1, #1
 800418a:	2001      	movs	r0, #1
 800418c:	f7fc f9ea 	bl	8000564 <lcd_print>

		if(buzzer == 0) {
 8004190:	4b62      	ldr	r3, [pc, #392]	; (800431c <menu+0x2e60>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d113      	bne.n	80041c0 <menu+0x2d04>
			if(dilSecim == 0) {
 8004198:	4b56      	ldr	r3, [pc, #344]	; (80042f4 <menu+0x2e38>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 80041a0:	4a5f      	ldr	r2, [pc, #380]	; (8004320 <menu+0x2e64>)
 80041a2:	2101      	movs	r1, #1
 80041a4:	2002      	movs	r0, #2
 80041a6:	f7fc f9dd 	bl	8000564 <lcd_print>
 80041aa:	e020      	b.n	80041ee <menu+0x2d32>
			} else if(dilSecim == 1) {
 80041ac:	4b51      	ldr	r3, [pc, #324]	; (80042f4 <menu+0x2e38>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d11c      	bne.n	80041ee <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80041b4:	4a5b      	ldr	r2, [pc, #364]	; (8004324 <menu+0x2e68>)
 80041b6:	2101      	movs	r1, #1
 80041b8:	2002      	movs	r0, #2
 80041ba:	f7fc f9d3 	bl	8000564 <lcd_print>
 80041be:	e016      	b.n	80041ee <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80041c0:	4b56      	ldr	r3, [pc, #344]	; (800431c <menu+0x2e60>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d112      	bne.n	80041ee <menu+0x2d32>
			if(dilSecim == 0) {
 80041c8:	4b4a      	ldr	r3, [pc, #296]	; (80042f4 <menu+0x2e38>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d105      	bne.n	80041dc <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80041d0:	4a55      	ldr	r2, [pc, #340]	; (8004328 <menu+0x2e6c>)
 80041d2:	2101      	movs	r1, #1
 80041d4:	2002      	movs	r0, #2
 80041d6:	f7fc f9c5 	bl	8000564 <lcd_print>
 80041da:	e008      	b.n	80041ee <menu+0x2d32>
			} else if(dilSecim == 1) {
 80041dc:	4b45      	ldr	r3, [pc, #276]	; (80042f4 <menu+0x2e38>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d104      	bne.n	80041ee <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80041e4:	4a51      	ldr	r2, [pc, #324]	; (800432c <menu+0x2e70>)
 80041e6:	2101      	movs	r1, #1
 80041e8:	2002      	movs	r0, #2
 80041ea:	f7fc f9bb 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041ee:	2102      	movs	r1, #2
 80041f0:	4844      	ldr	r0, [pc, #272]	; (8004304 <menu+0x2e48>)
 80041f2:	f004 fd49 	bl	8008c88 <HAL_GPIO_ReadPin>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d115      	bne.n	8004228 <menu+0x2d6c>
 80041fc:	4b42      	ldr	r3, [pc, #264]	; (8004308 <menu+0x2e4c>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	f083 0301 	eor.w	r3, r3, #1
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00e      	beq.n	8004228 <menu+0x2d6c>
			buzzer = buzzer + 1;
 800420a:	4b44      	ldr	r3, [pc, #272]	; (800431c <menu+0x2e60>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	3301      	adds	r3, #1
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4b42      	ldr	r3, [pc, #264]	; (800431c <menu+0x2e60>)
 8004214:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8004216:	4b41      	ldr	r3, [pc, #260]	; (800431c <menu+0x2e60>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d902      	bls.n	8004224 <menu+0x2d68>
				buzzer = 0;
 800421e:	4b3f      	ldr	r3, [pc, #252]	; (800431c <menu+0x2e60>)
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004224:	f001 f8ee 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004228:	2104      	movs	r1, #4
 800422a:	4836      	ldr	r0, [pc, #216]	; (8004304 <menu+0x2e48>)
 800422c:	f004 fd2c 	bl	8008c88 <HAL_GPIO_ReadPin>
 8004230:	4603      	mov	r3, r0
 8004232:	2b01      	cmp	r3, #1
 8004234:	d115      	bne.n	8004262 <menu+0x2da6>
 8004236:	4b34      	ldr	r3, [pc, #208]	; (8004308 <menu+0x2e4c>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	f083 0301 	eor.w	r3, r3, #1
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00e      	beq.n	8004262 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004244:	4b35      	ldr	r3, [pc, #212]	; (800431c <menu+0x2e60>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	3b01      	subs	r3, #1
 800424a:	b2da      	uxtb	r2, r3
 800424c:	4b33      	ldr	r3, [pc, #204]	; (800431c <menu+0x2e60>)
 800424e:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004250:	4b32      	ldr	r3, [pc, #200]	; (800431c <menu+0x2e60>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <menu+0x2da2>
		   		buzzer = 1;
 8004258:	4b30      	ldr	r3, [pc, #192]	; (800431c <menu+0x2e60>)
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800425e:	f001 f8d1 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004262:	2108      	movs	r1, #8
 8004264:	4827      	ldr	r0, [pc, #156]	; (8004304 <menu+0x2e48>)
 8004266:	f004 fd0f 	bl	8008c88 <HAL_GPIO_ReadPin>
 800426a:	4603      	mov	r3, r0
 800426c:	2b01      	cmp	r3, #1
 800426e:	d10d      	bne.n	800428c <menu+0x2dd0>
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <menu+0x2e4c>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	f083 0301 	eor.w	r3, r3, #1
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d006      	beq.n	800428c <menu+0x2dd0>
			eepromData[25] = buzzer;
 800427e:	4b27      	ldr	r3, [pc, #156]	; (800431c <menu+0x2e60>)
 8004280:	781a      	ldrb	r2, [r3, #0]
 8004282:	4b22      	ldr	r3, [pc, #136]	; (800430c <menu+0x2e50>)
 8004284:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8004286:	4b22      	ldr	r3, [pc, #136]	; (8004310 <menu+0x2e54>)
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800428c:	4b21      	ldr	r3, [pc, #132]	; (8004314 <menu+0x2e58>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b1c      	cmp	r3, #28
 8004292:	f040 80ab 	bne.w	80043ec <menu+0x2f30>
		calismaSayModu = 0;
 8004296:	4b26      	ldr	r3, [pc, #152]	; (8004330 <menu+0x2e74>)
 8004298:	2200      	movs	r2, #0
 800429a:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 800429c:	4a25      	ldr	r2, [pc, #148]	; (8004334 <menu+0x2e78>)
 800429e:	2101      	movs	r1, #1
 80042a0:	2001      	movs	r0, #1
 80042a2:	f7fc f95f 	bl	8000564 <lcd_print>

		if(demoMode == 0) {
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <menu+0x2e7c>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d113      	bne.n	80042d6 <menu+0x2e1a>
			if(dilSecim == 0) {
 80042ae:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <menu+0x2e38>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d105      	bne.n	80042c2 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80042b6:	4a1a      	ldr	r2, [pc, #104]	; (8004320 <menu+0x2e64>)
 80042b8:	2101      	movs	r1, #1
 80042ba:	2002      	movs	r0, #2
 80042bc:	f7fc f952 	bl	8000564 <lcd_print>
 80042c0:	e045      	b.n	800434e <menu+0x2e92>
			} else if(dilSecim == 1) {
 80042c2:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <menu+0x2e38>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d141      	bne.n	800434e <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80042ca:	4a16      	ldr	r2, [pc, #88]	; (8004324 <menu+0x2e68>)
 80042cc:	2101      	movs	r1, #1
 80042ce:	2002      	movs	r0, #2
 80042d0:	f7fc f948 	bl	8000564 <lcd_print>
 80042d4:	e03b      	b.n	800434e <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80042d6:	4b18      	ldr	r3, [pc, #96]	; (8004338 <menu+0x2e7c>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d137      	bne.n	800434e <menu+0x2e92>
			if(dilSecim == 0){
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <menu+0x2e38>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d12a      	bne.n	800433c <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80042e6:	4a10      	ldr	r2, [pc, #64]	; (8004328 <menu+0x2e6c>)
 80042e8:	2101      	movs	r1, #1
 80042ea:	2002      	movs	r0, #2
 80042ec:	f7fc f93a 	bl	8000564 <lcd_print>
 80042f0:	e02d      	b.n	800434e <menu+0x2e92>
 80042f2:	bf00      	nop
 80042f4:	200002d1 	.word	0x200002d1
 80042f8:	0800c70c 	.word	0x0800c70c
 80042fc:	200002c8 	.word	0x200002c8
 8004300:	20000250 	.word	0x20000250
 8004304:	40010800 	.word	0x40010800
 8004308:	200002df 	.word	0x200002df
 800430c:	200001e0 	.word	0x200001e0
 8004310:	200002dc 	.word	0x200002dc
 8004314:	200002b0 	.word	0x200002b0
 8004318:	0800c80c 	.word	0x0800c80c
 800431c:	200002cc 	.word	0x200002cc
 8004320:	0800c134 	.word	0x0800c134
 8004324:	0800c148 	.word	0x0800c148
 8004328:	0800c194 	.word	0x0800c194
 800432c:	0800c1a8 	.word	0x0800c1a8
 8004330:	200002d0 	.word	0x200002d0
 8004334:	0800c820 	.word	0x0800c820
 8004338:	200002ce 	.word	0x200002ce
			} else if(dilSecim == 1) {
 800433c:	4b71      	ldr	r3, [pc, #452]	; (8004504 <menu+0x3048>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d104      	bne.n	800434e <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004344:	4a70      	ldr	r2, [pc, #448]	; (8004508 <menu+0x304c>)
 8004346:	2101      	movs	r1, #1
 8004348:	2002      	movs	r0, #2
 800434a:	f7fc f90b 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800434e:	2102      	movs	r1, #2
 8004350:	486e      	ldr	r0, [pc, #440]	; (800450c <menu+0x3050>)
 8004352:	f004 fc99 	bl	8008c88 <HAL_GPIO_ReadPin>
 8004356:	4603      	mov	r3, r0
 8004358:	2b01      	cmp	r3, #1
 800435a:	d115      	bne.n	8004388 <menu+0x2ecc>
 800435c:	4b6c      	ldr	r3, [pc, #432]	; (8004510 <menu+0x3054>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	f083 0301 	eor.w	r3, r3, #1
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00e      	beq.n	8004388 <menu+0x2ecc>
			demoMode = demoMode + 1;
 800436a:	4b6a      	ldr	r3, [pc, #424]	; (8004514 <menu+0x3058>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	3301      	adds	r3, #1
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4b68      	ldr	r3, [pc, #416]	; (8004514 <menu+0x3058>)
 8004374:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004376:	4b67      	ldr	r3, [pc, #412]	; (8004514 <menu+0x3058>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d902      	bls.n	8004384 <menu+0x2ec8>
				demoMode = 0;
 800437e:	4b65      	ldr	r3, [pc, #404]	; (8004514 <menu+0x3058>)
 8004380:	2200      	movs	r2, #0
 8004382:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004384:	f001 f83e 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004388:	2104      	movs	r1, #4
 800438a:	4860      	ldr	r0, [pc, #384]	; (800450c <menu+0x3050>)
 800438c:	f004 fc7c 	bl	8008c88 <HAL_GPIO_ReadPin>
 8004390:	4603      	mov	r3, r0
 8004392:	2b01      	cmp	r3, #1
 8004394:	d115      	bne.n	80043c2 <menu+0x2f06>
 8004396:	4b5e      	ldr	r3, [pc, #376]	; (8004510 <menu+0x3054>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	f083 0301 	eor.w	r3, r3, #1
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00e      	beq.n	80043c2 <menu+0x2f06>
			demoMode = demoMode - 1;
 80043a4:	4b5b      	ldr	r3, [pc, #364]	; (8004514 <menu+0x3058>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	4b59      	ldr	r3, [pc, #356]	; (8004514 <menu+0x3058>)
 80043ae:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80043b0:	4b58      	ldr	r3, [pc, #352]	; (8004514 <menu+0x3058>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <menu+0x2f02>
		   		demoMode = 1;
 80043b8:	4b56      	ldr	r3, [pc, #344]	; (8004514 <menu+0x3058>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80043be:	f001 f821 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043c2:	2108      	movs	r1, #8
 80043c4:	4851      	ldr	r0, [pc, #324]	; (800450c <menu+0x3050>)
 80043c6:	f004 fc5f 	bl	8008c88 <HAL_GPIO_ReadPin>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d10d      	bne.n	80043ec <menu+0x2f30>
 80043d0:	4b4f      	ldr	r3, [pc, #316]	; (8004510 <menu+0x3054>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	f083 0301 	eor.w	r3, r3, #1
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d006      	beq.n	80043ec <menu+0x2f30>
			eepromData[26] = demoMode;
 80043de:	4b4d      	ldr	r3, [pc, #308]	; (8004514 <menu+0x3058>)
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	4b4d      	ldr	r3, [pc, #308]	; (8004518 <menu+0x305c>)
 80043e4:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80043e6:	4b4d      	ldr	r3, [pc, #308]	; (800451c <menu+0x3060>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80043ec:	4b4c      	ldr	r3, [pc, #304]	; (8004520 <menu+0x3064>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b1d      	cmp	r3, #29
 80043f2:	f040 8132 	bne.w	800465a <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80043f6:	4b4b      	ldr	r3, [pc, #300]	; (8004524 <menu+0x3068>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d113      	bne.n	8004426 <menu+0x2f6a>
 80043fe:	4b4a      	ldr	r3, [pc, #296]	; (8004528 <menu+0x306c>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <menu+0x2f6a>
 8004406:	4b49      	ldr	r3, [pc, #292]	; (800452c <menu+0x3070>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10b      	bne.n	8004426 <menu+0x2f6a>
 800440e:	4b48      	ldr	r3, [pc, #288]	; (8004530 <menu+0x3074>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d107      	bne.n	8004426 <menu+0x2f6a>
 8004416:	4b47      	ldr	r3, [pc, #284]	; (8004534 <menu+0x3078>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800441e:	4b46      	ldr	r3, [pc, #280]	; (8004538 <menu+0x307c>)
 8004420:	2200      	movs	r2, #0
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	e002      	b.n	800442c <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004426:	4b44      	ldr	r3, [pc, #272]	; (8004538 <menu+0x307c>)
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 800442c:	4b43      	ldr	r3, [pc, #268]	; (800453c <menu+0x3080>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d154      	bne.n	80044de <menu+0x3022>
			if(dilSecim == 0) {
 8004434:	4b33      	ldr	r3, [pc, #204]	; (8004504 <menu+0x3048>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d105      	bne.n	8004448 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800443c:	4a40      	ldr	r2, [pc, #256]	; (8004540 <menu+0x3084>)
 800443e:	2101      	movs	r1, #1
 8004440:	2001      	movs	r0, #1
 8004442:	f7fc f88f 	bl	8000564 <lcd_print>
 8004446:	e008      	b.n	800445a <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004448:	4b2e      	ldr	r3, [pc, #184]	; (8004504 <menu+0x3048>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d104      	bne.n	800445a <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004450:	4a3c      	ldr	r2, [pc, #240]	; (8004544 <menu+0x3088>)
 8004452:	2101      	movs	r1, #1
 8004454:	2001      	movs	r0, #1
 8004456:	f7fc f885 	bl	8000564 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800445a:	4b36      	ldr	r3, [pc, #216]	; (8004534 <menu+0x3078>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	220a      	movs	r2, #10
 8004460:	4939      	ldr	r1, [pc, #228]	; (8004548 <menu+0x308c>)
 8004462:	4618      	mov	r0, r3
 8004464:	f007 fc06 	bl	800bc74 <itoa>
			lcd_print(2, 12, snum);
 8004468:	4a37      	ldr	r2, [pc, #220]	; (8004548 <menu+0x308c>)
 800446a:	210c      	movs	r1, #12
 800446c:	2002      	movs	r0, #2
 800446e:	f7fc f879 	bl	8000564 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004472:	4b2f      	ldr	r3, [pc, #188]	; (8004530 <menu+0x3074>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	220a      	movs	r2, #10
 8004478:	4933      	ldr	r1, [pc, #204]	; (8004548 <menu+0x308c>)
 800447a:	4618      	mov	r0, r3
 800447c:	f007 fbfa 	bl	800bc74 <itoa>
			lcd_print(2, 13, snum);
 8004480:	4a31      	ldr	r2, [pc, #196]	; (8004548 <menu+0x308c>)
 8004482:	210d      	movs	r1, #13
 8004484:	2002      	movs	r0, #2
 8004486:	f7fc f86d 	bl	8000564 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800448a:	4b28      	ldr	r3, [pc, #160]	; (800452c <menu+0x3070>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	220a      	movs	r2, #10
 8004490:	492d      	ldr	r1, [pc, #180]	; (8004548 <menu+0x308c>)
 8004492:	4618      	mov	r0, r3
 8004494:	f007 fbee 	bl	800bc74 <itoa>
			lcd_print(2, 14, snum);
 8004498:	4a2b      	ldr	r2, [pc, #172]	; (8004548 <menu+0x308c>)
 800449a:	210e      	movs	r1, #14
 800449c:	2002      	movs	r0, #2
 800449e:	f7fc f861 	bl	8000564 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80044a2:	4b21      	ldr	r3, [pc, #132]	; (8004528 <menu+0x306c>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	220a      	movs	r2, #10
 80044a8:	4927      	ldr	r1, [pc, #156]	; (8004548 <menu+0x308c>)
 80044aa:	4618      	mov	r0, r3
 80044ac:	f007 fbe2 	bl	800bc74 <itoa>
			lcd_print(2, 15, snum);
 80044b0:	4a25      	ldr	r2, [pc, #148]	; (8004548 <menu+0x308c>)
 80044b2:	210f      	movs	r1, #15
 80044b4:	2002      	movs	r0, #2
 80044b6:	f7fc f855 	bl	8000564 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80044ba:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <menu+0x3068>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	220a      	movs	r2, #10
 80044c0:	4921      	ldr	r1, [pc, #132]	; (8004548 <menu+0x308c>)
 80044c2:	4618      	mov	r0, r3
 80044c4:	f007 fbd6 	bl	800bc74 <itoa>
			lcd_print(2, 16, snum);
 80044c8:	4a1f      	ldr	r2, [pc, #124]	; (8004548 <menu+0x308c>)
 80044ca:	2110      	movs	r1, #16
 80044cc:	2002      	movs	r0, #2
 80044ce:	f7fc f849 	bl	8000564 <lcd_print>

			lcd_print(2, 1, "           ");
 80044d2:	4a1e      	ldr	r2, [pc, #120]	; (800454c <menu+0x3090>)
 80044d4:	2101      	movs	r1, #1
 80044d6:	2002      	movs	r0, #2
 80044d8:	f7fc f844 	bl	8000564 <lcd_print>
 80044dc:	e048      	b.n	8004570 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80044de:	4b17      	ldr	r3, [pc, #92]	; (800453c <menu+0x3080>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d144      	bne.n	8004570 <menu+0x30b4>
			if(dilSecim == 0) {
 80044e6:	4b07      	ldr	r3, [pc, #28]	; (8004504 <menu+0x3048>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d132      	bne.n	8004554 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80044ee:	4a14      	ldr	r2, [pc, #80]	; (8004540 <menu+0x3084>)
 80044f0:	2101      	movs	r1, #1
 80044f2:	2001      	movs	r0, #1
 80044f4:	f7fc f836 	bl	8000564 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80044f8:	4a15      	ldr	r2, [pc, #84]	; (8004550 <menu+0x3094>)
 80044fa:	2101      	movs	r1, #1
 80044fc:	2002      	movs	r0, #2
 80044fe:	f7fc f831 	bl	8000564 <lcd_print>
 8004502:	e035      	b.n	8004570 <menu+0x30b4>
 8004504:	200002d1 	.word	0x200002d1
 8004508:	0800c1a8 	.word	0x0800c1a8
 800450c:	40010800 	.word	0x40010800
 8004510:	200002df 	.word	0x200002df
 8004514:	200002ce 	.word	0x200002ce
 8004518:	200001e0 	.word	0x200001e0
 800451c:	200002dc 	.word	0x200002dc
 8004520:	200002b0 	.word	0x200002b0
 8004524:	200002ad 	.word	0x200002ad
 8004528:	200002ae 	.word	0x200002ae
 800452c:	200000a4 	.word	0x200000a4
 8004530:	200000a5 	.word	0x200000a5
 8004534:	200002af 	.word	0x200002af
 8004538:	200002f1 	.word	0x200002f1
 800453c:	200002d0 	.word	0x200002d0
 8004540:	0800c830 	.word	0x0800c830
 8004544:	0800c844 	.word	0x0800c844
 8004548:	20000250 	.word	0x20000250
 800454c:	0800c858 	.word	0x0800c858
 8004550:	0800c864 	.word	0x0800c864
			} else if(dilSecim == 1) {
 8004554:	4b94      	ldr	r3, [pc, #592]	; (80047a8 <menu+0x32ec>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d109      	bne.n	8004570 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 800455c:	4a93      	ldr	r2, [pc, #588]	; (80047ac <menu+0x32f0>)
 800455e:	2101      	movs	r1, #1
 8004560:	2001      	movs	r0, #1
 8004562:	f7fb ffff 	bl	8000564 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004566:	4a92      	ldr	r2, [pc, #584]	; (80047b0 <menu+0x32f4>)
 8004568:	2101      	movs	r1, #1
 800456a:	2002      	movs	r0, #2
 800456c:	f7fb fffa 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004570:	2102      	movs	r1, #2
 8004572:	4890      	ldr	r0, [pc, #576]	; (80047b4 <menu+0x32f8>)
 8004574:	f004 fb88 	bl	8008c88 <HAL_GPIO_ReadPin>
 8004578:	4603      	mov	r3, r0
 800457a:	2b01      	cmp	r3, #1
 800457c:	d119      	bne.n	80045b2 <menu+0x30f6>
 800457e:	4b8e      	ldr	r3, [pc, #568]	; (80047b8 <menu+0x32fc>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	f083 0301 	eor.w	r3, r3, #1
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d012      	beq.n	80045b2 <menu+0x30f6>
 800458c:	4b8b      	ldr	r3, [pc, #556]	; (80047bc <menu+0x3300>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00e      	beq.n	80045b2 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004594:	4b8a      	ldr	r3, [pc, #552]	; (80047c0 <menu+0x3304>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	3301      	adds	r3, #1
 800459a:	b2da      	uxtb	r2, r3
 800459c:	4b88      	ldr	r3, [pc, #544]	; (80047c0 <menu+0x3304>)
 800459e:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80045a0:	4b87      	ldr	r3, [pc, #540]	; (80047c0 <menu+0x3304>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d902      	bls.n	80045ae <menu+0x30f2>
				calismaSayModu = 0;
 80045a8:	4b85      	ldr	r3, [pc, #532]	; (80047c0 <menu+0x3304>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80045ae:	f000 ff29 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80045b2:	2104      	movs	r1, #4
 80045b4:	487f      	ldr	r0, [pc, #508]	; (80047b4 <menu+0x32f8>)
 80045b6:	f004 fb67 	bl	8008c88 <HAL_GPIO_ReadPin>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d119      	bne.n	80045f4 <menu+0x3138>
 80045c0:	4b7d      	ldr	r3, [pc, #500]	; (80047b8 <menu+0x32fc>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	f083 0301 	eor.w	r3, r3, #1
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d012      	beq.n	80045f4 <menu+0x3138>
 80045ce:	4b7b      	ldr	r3, [pc, #492]	; (80047bc <menu+0x3300>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00e      	beq.n	80045f4 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80045d6:	4b7a      	ldr	r3, [pc, #488]	; (80047c0 <menu+0x3304>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	3b01      	subs	r3, #1
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	4b78      	ldr	r3, [pc, #480]	; (80047c0 <menu+0x3304>)
 80045e0:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80045e2:	4b77      	ldr	r3, [pc, #476]	; (80047c0 <menu+0x3304>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <menu+0x3134>
		   		calismaSayModu = 1;
 80045ea:	4b75      	ldr	r3, [pc, #468]	; (80047c0 <menu+0x3304>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80045f0:	f000 ff08 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045f4:	2108      	movs	r1, #8
 80045f6:	486f      	ldr	r0, [pc, #444]	; (80047b4 <menu+0x32f8>)
 80045f8:	f004 fb46 	bl	8008c88 <HAL_GPIO_ReadPin>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d12b      	bne.n	800465a <menu+0x319e>
 8004602:	4b6d      	ldr	r3, [pc, #436]	; (80047b8 <menu+0x32fc>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	f083 0301 	eor.w	r3, r3, #1
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d024      	beq.n	800465a <menu+0x319e>
			eepromData[32] = 0;
 8004610:	4b6c      	ldr	r3, [pc, #432]	; (80047c4 <menu+0x3308>)
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004618:	4b6a      	ldr	r3, [pc, #424]	; (80047c4 <menu+0x3308>)
 800461a:	2200      	movs	r2, #0
 800461c:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800461e:	4b69      	ldr	r3, [pc, #420]	; (80047c4 <menu+0x3308>)
 8004620:	2200      	movs	r2, #0
 8004622:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004624:	4b67      	ldr	r3, [pc, #412]	; (80047c4 <menu+0x3308>)
 8004626:	2200      	movs	r2, #0
 8004628:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800462a:	4b66      	ldr	r3, [pc, #408]	; (80047c4 <menu+0x3308>)
 800462c:	2200      	movs	r2, #0
 800462e:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004630:	4b65      	ldr	r3, [pc, #404]	; (80047c8 <menu+0x330c>)
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004636:	4b65      	ldr	r3, [pc, #404]	; (80047cc <menu+0x3310>)
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 800463c:	4b64      	ldr	r3, [pc, #400]	; (80047d0 <menu+0x3314>)
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004642:	4b64      	ldr	r3, [pc, #400]	; (80047d4 <menu+0x3318>)
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004648:	4b63      	ldr	r3, [pc, #396]	; (80047d8 <menu+0x331c>)
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800464e:	4b5c      	ldr	r3, [pc, #368]	; (80047c0 <menu+0x3304>)
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004654:	4b61      	ldr	r3, [pc, #388]	; (80047dc <menu+0x3320>)
 8004656:	2201      	movs	r2, #1
 8004658:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800465a:	4b61      	ldr	r3, [pc, #388]	; (80047e0 <menu+0x3324>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b1e      	cmp	r3, #30
 8004660:	d16f      	bne.n	8004742 <menu+0x3286>
		calismaSayModu = 0;
 8004662:	4b57      	ldr	r3, [pc, #348]	; (80047c0 <menu+0x3304>)
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004668:	4b4f      	ldr	r3, [pc, #316]	; (80047a8 <menu+0x32ec>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004670:	4a5c      	ldr	r2, [pc, #368]	; (80047e4 <menu+0x3328>)
 8004672:	2101      	movs	r1, #1
 8004674:	2001      	movs	r0, #1
 8004676:	f7fb ff75 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800467a:	4a5b      	ldr	r2, [pc, #364]	; (80047e8 <menu+0x332c>)
 800467c:	2101      	movs	r1, #1
 800467e:	2002      	movs	r0, #2
 8004680:	f7fb ff70 	bl	8000564 <lcd_print>
 8004684:	e00d      	b.n	80046a2 <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004686:	4b48      	ldr	r3, [pc, #288]	; (80047a8 <menu+0x32ec>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d109      	bne.n	80046a2 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800468e:	4a57      	ldr	r2, [pc, #348]	; (80047ec <menu+0x3330>)
 8004690:	2101      	movs	r1, #1
 8004692:	2001      	movs	r0, #1
 8004694:	f7fb ff66 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004698:	4a55      	ldr	r2, [pc, #340]	; (80047f0 <menu+0x3334>)
 800469a:	2101      	movs	r1, #1
 800469c:	2002      	movs	r0, #2
 800469e:	f7fb ff61 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80046a2:	2102      	movs	r1, #2
 80046a4:	4843      	ldr	r0, [pc, #268]	; (80047b4 <menu+0x32f8>)
 80046a6:	f004 faef 	bl	8008c88 <HAL_GPIO_ReadPin>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d115      	bne.n	80046dc <menu+0x3220>
 80046b0:	4b41      	ldr	r3, [pc, #260]	; (80047b8 <menu+0x32fc>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	f083 0301 	eor.w	r3, r3, #1
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00e      	beq.n	80046dc <menu+0x3220>
			dilSecim = dilSecim + 1;
 80046be:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <menu+0x32ec>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	3301      	adds	r3, #1
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	4b38      	ldr	r3, [pc, #224]	; (80047a8 <menu+0x32ec>)
 80046c8:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80046ca:	4b37      	ldr	r3, [pc, #220]	; (80047a8 <menu+0x32ec>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d902      	bls.n	80046d8 <menu+0x321c>
				dilSecim = 0;
 80046d2:	4b35      	ldr	r3, [pc, #212]	; (80047a8 <menu+0x32ec>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80046d8:	f000 fe94 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046dc:	2104      	movs	r1, #4
 80046de:	4835      	ldr	r0, [pc, #212]	; (80047b4 <menu+0x32f8>)
 80046e0:	f004 fad2 	bl	8008c88 <HAL_GPIO_ReadPin>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d115      	bne.n	8004716 <menu+0x325a>
 80046ea:	4b33      	ldr	r3, [pc, #204]	; (80047b8 <menu+0x32fc>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	f083 0301 	eor.w	r3, r3, #1
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00e      	beq.n	8004716 <menu+0x325a>
			dilSecim = dilSecim - 1;
 80046f8:	4b2b      	ldr	r3, [pc, #172]	; (80047a8 <menu+0x32ec>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	4b29      	ldr	r3, [pc, #164]	; (80047a8 <menu+0x32ec>)
 8004702:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004704:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <menu+0x32ec>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <menu+0x3256>
		   		dilSecim = 1;
 800470c:	4b26      	ldr	r3, [pc, #152]	; (80047a8 <menu+0x32ec>)
 800470e:	2201      	movs	r2, #1
 8004710:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004712:	f000 fe77 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004716:	2108      	movs	r1, #8
 8004718:	4826      	ldr	r0, [pc, #152]	; (80047b4 <menu+0x32f8>)
 800471a:	f004 fab5 	bl	8008c88 <HAL_GPIO_ReadPin>
 800471e:	4603      	mov	r3, r0
 8004720:	2b01      	cmp	r3, #1
 8004722:	d10e      	bne.n	8004742 <menu+0x3286>
 8004724:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <menu+0x32fc>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	f083 0301 	eor.w	r3, r3, #1
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004732:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <menu+0x32ec>)
 8004734:	781a      	ldrb	r2, [r3, #0]
 8004736:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <menu+0x3308>)
 8004738:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 800473c:	4b27      	ldr	r3, [pc, #156]	; (80047dc <menu+0x3320>)
 800473e:	2201      	movs	r2, #1
 8004740:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004742:	4b27      	ldr	r3, [pc, #156]	; (80047e0 <menu+0x3324>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b1f      	cmp	r3, #31
 8004748:	f040 80b7 	bne.w	80048ba <menu+0x33fe>
		calismaSayModu = 0;
 800474c:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <menu+0x3304>)
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004752:	4a28      	ldr	r2, [pc, #160]	; (80047f4 <menu+0x3338>)
 8004754:	2101      	movs	r1, #1
 8004756:	2001      	movs	r0, #1
 8004758:	f7fb ff04 	bl	8000564 <lcd_print>

		if(iotMode == 0) {
 800475c:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <menu+0x333c>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d113      	bne.n	800478c <menu+0x32d0>
			if(dilSecim == 0) {
 8004764:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <menu+0x32ec>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d105      	bne.n	8004778 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 800476c:	4a23      	ldr	r2, [pc, #140]	; (80047fc <menu+0x3340>)
 800476e:	2101      	movs	r1, #1
 8004770:	2002      	movs	r0, #2
 8004772:	f7fb fef7 	bl	8000564 <lcd_print>
 8004776:	e050      	b.n	800481a <menu+0x335e>
			} else if(dilSecim == 1) {
 8004778:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <menu+0x32ec>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d14c      	bne.n	800481a <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004780:	4a1f      	ldr	r2, [pc, #124]	; (8004800 <menu+0x3344>)
 8004782:	2101      	movs	r1, #1
 8004784:	2002      	movs	r0, #2
 8004786:	f7fb feed 	bl	8000564 <lcd_print>
 800478a:	e046      	b.n	800481a <menu+0x335e>
			}
		} else if(iotMode == 1) {
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <menu+0x333c>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d142      	bne.n	800481a <menu+0x335e>
			if(dilSecim == 0){
 8004794:	4b04      	ldr	r3, [pc, #16]	; (80047a8 <menu+0x32ec>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d135      	bne.n	8004808 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 800479c:	4a19      	ldr	r2, [pc, #100]	; (8004804 <menu+0x3348>)
 800479e:	2101      	movs	r1, #1
 80047a0:	2002      	movs	r0, #2
 80047a2:	f7fb fedf 	bl	8000564 <lcd_print>
 80047a6:	e038      	b.n	800481a <menu+0x335e>
 80047a8:	200002d1 	.word	0x200002d1
 80047ac:	0800c844 	.word	0x0800c844
 80047b0:	0800c878 	.word	0x0800c878
 80047b4:	40010800 	.word	0x40010800
 80047b8:	200002df 	.word	0x200002df
 80047bc:	200002f1 	.word	0x200002f1
 80047c0:	200002d0 	.word	0x200002d0
 80047c4:	200001e0 	.word	0x200001e0
 80047c8:	200002af 	.word	0x200002af
 80047cc:	200000a5 	.word	0x200000a5
 80047d0:	200000a4 	.word	0x200000a4
 80047d4:	200002ae 	.word	0x200002ae
 80047d8:	200002ad 	.word	0x200002ad
 80047dc:	200002dc 	.word	0x200002dc
 80047e0:	200002b0 	.word	0x200002b0
 80047e4:	0800c88c 	.word	0x0800c88c
 80047e8:	0800c8a0 	.word	0x0800c8a0
 80047ec:	0800c8b4 	.word	0x0800c8b4
 80047f0:	0800c8c8 	.word	0x0800c8c8
 80047f4:	0800c8dc 	.word	0x0800c8dc
 80047f8:	200002cf 	.word	0x200002cf
 80047fc:	0800c134 	.word	0x0800c134
 8004800:	0800c148 	.word	0x0800c148
 8004804:	0800c194 	.word	0x0800c194
			} else if(dilSecim == 1) {
 8004808:	4bac      	ldr	r3, [pc, #688]	; (8004abc <menu+0x3600>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d104      	bne.n	800481a <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004810:	4aab      	ldr	r2, [pc, #684]	; (8004ac0 <menu+0x3604>)
 8004812:	2101      	movs	r1, #1
 8004814:	2002      	movs	r0, #2
 8004816:	f7fb fea5 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800481a:	2102      	movs	r1, #2
 800481c:	48a9      	ldr	r0, [pc, #676]	; (8004ac4 <menu+0x3608>)
 800481e:	f004 fa33 	bl	8008c88 <HAL_GPIO_ReadPin>
 8004822:	4603      	mov	r3, r0
 8004824:	2b01      	cmp	r3, #1
 8004826:	d115      	bne.n	8004854 <menu+0x3398>
 8004828:	4ba7      	ldr	r3, [pc, #668]	; (8004ac8 <menu+0x360c>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	f083 0301 	eor.w	r3, r3, #1
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00e      	beq.n	8004854 <menu+0x3398>
			iotMode = iotMode + 1;
 8004836:	4ba5      	ldr	r3, [pc, #660]	; (8004acc <menu+0x3610>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	3301      	adds	r3, #1
 800483c:	b2da      	uxtb	r2, r3
 800483e:	4ba3      	ldr	r3, [pc, #652]	; (8004acc <menu+0x3610>)
 8004840:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004842:	4ba2      	ldr	r3, [pc, #648]	; (8004acc <menu+0x3610>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d902      	bls.n	8004850 <menu+0x3394>
				iotMode = 0;
 800484a:	4ba0      	ldr	r3, [pc, #640]	; (8004acc <menu+0x3610>)
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004850:	f000 fdd8 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004854:	2104      	movs	r1, #4
 8004856:	489b      	ldr	r0, [pc, #620]	; (8004ac4 <menu+0x3608>)
 8004858:	f004 fa16 	bl	8008c88 <HAL_GPIO_ReadPin>
 800485c:	4603      	mov	r3, r0
 800485e:	2b01      	cmp	r3, #1
 8004860:	d115      	bne.n	800488e <menu+0x33d2>
 8004862:	4b99      	ldr	r3, [pc, #612]	; (8004ac8 <menu+0x360c>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	f083 0301 	eor.w	r3, r3, #1
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00e      	beq.n	800488e <menu+0x33d2>
			iotMode = iotMode - 1;
 8004870:	4b96      	ldr	r3, [pc, #600]	; (8004acc <menu+0x3610>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	3b01      	subs	r3, #1
 8004876:	b2da      	uxtb	r2, r3
 8004878:	4b94      	ldr	r3, [pc, #592]	; (8004acc <menu+0x3610>)
 800487a:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 800487c:	4b93      	ldr	r3, [pc, #588]	; (8004acc <menu+0x3610>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <menu+0x33ce>
		   		iotMode = 1;
 8004884:	4b91      	ldr	r3, [pc, #580]	; (8004acc <menu+0x3610>)
 8004886:	2201      	movs	r2, #1
 8004888:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800488a:	f000 fdbb 	bl	8005404 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800488e:	2108      	movs	r1, #8
 8004890:	488c      	ldr	r0, [pc, #560]	; (8004ac4 <menu+0x3608>)
 8004892:	f004 f9f9 	bl	8008c88 <HAL_GPIO_ReadPin>
 8004896:	4603      	mov	r3, r0
 8004898:	2b01      	cmp	r3, #1
 800489a:	d10e      	bne.n	80048ba <menu+0x33fe>
 800489c:	4b8a      	ldr	r3, [pc, #552]	; (8004ac8 <menu+0x360c>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	f083 0301 	eor.w	r3, r3, #1
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <menu+0x33fe>
			eepromData[48] = iotMode;
 80048aa:	4b88      	ldr	r3, [pc, #544]	; (8004acc <menu+0x3610>)
 80048ac:	781a      	ldrb	r2, [r3, #0]
 80048ae:	4b88      	ldr	r3, [pc, #544]	; (8004ad0 <menu+0x3614>)
 80048b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80048b4:	4b87      	ldr	r3, [pc, #540]	; (8004ad4 <menu+0x3618>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80048ba:	4b87      	ldr	r3, [pc, #540]	; (8004ad8 <menu+0x361c>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d138      	bne.n	8004934 <menu+0x3478>
		calismaSayModu = 0;
 80048c2:	4b86      	ldr	r3, [pc, #536]	; (8004adc <menu+0x3620>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 80048c8:	4a85      	ldr	r2, [pc, #532]	; (8004ae0 <menu+0x3624>)
 80048ca:	2101      	movs	r1, #1
 80048cc:	2001      	movs	r0, #1
 80048ce:	f7fb fe49 	bl	8000564 <lcd_print>

		lcd_print(2, 1, machineID);
 80048d2:	4a84      	ldr	r2, [pc, #528]	; (8004ae4 <menu+0x3628>)
 80048d4:	2101      	movs	r1, #1
 80048d6:	2002      	movs	r0, #2
 80048d8:	f7fb fe44 	bl	8000564 <lcd_print>
		lcd_print(2, 13, "    ");
 80048dc:	4a82      	ldr	r2, [pc, #520]	; (8004ae8 <menu+0x362c>)
 80048de:	210d      	movs	r1, #13
 80048e0:	2002      	movs	r0, #2
 80048e2:	f7fb fe3f 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048e6:	2102      	movs	r1, #2
 80048e8:	4876      	ldr	r0, [pc, #472]	; (8004ac4 <menu+0x3608>)
 80048ea:	f004 f9cd 	bl	8008c88 <HAL_GPIO_ReadPin>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d11f      	bne.n	8004934 <menu+0x3478>
 80048f4:	2104      	movs	r1, #4
 80048f6:	4873      	ldr	r0, [pc, #460]	; (8004ac4 <menu+0x3608>)
 80048f8:	f004 f9c6 	bl	8008c88 <HAL_GPIO_ReadPin>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d118      	bne.n	8004934 <menu+0x3478>
 8004902:	4b71      	ldr	r3, [pc, #452]	; (8004ac8 <menu+0x360c>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	f083 0301 	eor.w	r3, r3, #1
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d011      	beq.n	8004934 <menu+0x3478>
			takeMachineID(0);
 8004910:	2000      	movs	r0, #0
 8004912:	f7fc f837 	bl	8000984 <takeMachineID>

			HAL_Delay(50);
 8004916:	2032      	movs	r0, #50	; 0x32
 8004918:	f003 fbe6 	bl	80080e8 <HAL_Delay>

			lcd_print(2, 1, machineID);
 800491c:	4a71      	ldr	r2, [pc, #452]	; (8004ae4 <menu+0x3628>)
 800491e:	2101      	movs	r1, #1
 8004920:	2002      	movs	r0, #2
 8004922:	f7fb fe1f 	bl	8000564 <lcd_print>
			lcd_print(2, 13, "    ");
 8004926:	4a70      	ldr	r2, [pc, #448]	; (8004ae8 <menu+0x362c>)
 8004928:	210d      	movs	r1, #13
 800492a:	2002      	movs	r0, #2
 800492c:	f7fb fe1a 	bl	8000564 <lcd_print>

			bekle();
 8004930:	f000 fd68 	bl	8005404 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004934:	4b68      	ldr	r3, [pc, #416]	; (8004ad8 <menu+0x361c>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b21      	cmp	r3, #33	; 0x21
 800493a:	d153      	bne.n	80049e4 <menu+0x3528>
		calismaSayModu = 0;
 800493c:	4b67      	ldr	r3, [pc, #412]	; (8004adc <menu+0x3620>)
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004942:	4a6a      	ldr	r2, [pc, #424]	; (8004aec <menu+0x3630>)
 8004944:	2101      	movs	r1, #1
 8004946:	2001      	movs	r0, #1
 8004948:	f7fb fe0c 	bl	8000564 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 800494c:	4868      	ldr	r0, [pc, #416]	; (8004af0 <menu+0x3634>)
 800494e:	f7fb fc69 	bl	8000224 <strlen>
 8004952:	4603      	mov	r3, r0
 8004954:	2b10      	cmp	r3, #16
 8004956:	d811      	bhi.n	800497c <menu+0x34c0>
			lcd_print(2, 1, wifiSSID);
 8004958:	4a65      	ldr	r2, [pc, #404]	; (8004af0 <menu+0x3634>)
 800495a:	2101      	movs	r1, #1
 800495c:	2002      	movs	r0, #2
 800495e:	f7fb fe01 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004962:	4863      	ldr	r0, [pc, #396]	; (8004af0 <menu+0x3634>)
 8004964:	f7fb fc5e 	bl	8000224 <strlen>
 8004968:	4603      	mov	r3, r0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	3301      	adds	r3, #1
 800496e:	b2db      	uxtb	r3, r3
 8004970:	4a60      	ldr	r2, [pc, #384]	; (8004af4 <menu+0x3638>)
 8004972:	4619      	mov	r1, r3
 8004974:	2002      	movs	r0, #2
 8004976:	f7fb fdf5 	bl	8000564 <lcd_print>
 800497a:	e005      	b.n	8004988 <menu+0x34cc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 800497c:	2300      	movs	r3, #0
 800497e:	2202      	movs	r2, #2
 8004980:	2101      	movs	r1, #1
 8004982:	485b      	ldr	r0, [pc, #364]	; (8004af0 <menu+0x3634>)
 8004984:	f7fc fcf4 	bl	8001370 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004988:	2102      	movs	r1, #2
 800498a:	484e      	ldr	r0, [pc, #312]	; (8004ac4 <menu+0x3608>)
 800498c:	f004 f97c 	bl	8008c88 <HAL_GPIO_ReadPin>
 8004990:	4603      	mov	r3, r0
 8004992:	2b01      	cmp	r3, #1
 8004994:	d126      	bne.n	80049e4 <menu+0x3528>
 8004996:	2104      	movs	r1, #4
 8004998:	484a      	ldr	r0, [pc, #296]	; (8004ac4 <menu+0x3608>)
 800499a:	f004 f975 	bl	8008c88 <HAL_GPIO_ReadPin>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d11f      	bne.n	80049e4 <menu+0x3528>
 80049a4:	4b48      	ldr	r3, [pc, #288]	; (8004ac8 <menu+0x360c>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f083 0301 	eor.w	r3, r3, #1
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d018      	beq.n	80049e4 <menu+0x3528>
			takeWifiSSID(0);
 80049b2:	2000      	movs	r0, #0
 80049b4:	f7fc f93c 	bl	8000c30 <takeWifiSSID>

			HAL_Delay(100);
 80049b8:	2064      	movs	r0, #100	; 0x64
 80049ba:	f003 fb95 	bl	80080e8 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 80049be:	4a4c      	ldr	r2, [pc, #304]	; (8004af0 <menu+0x3634>)
 80049c0:	2101      	movs	r1, #1
 80049c2:	2002      	movs	r0, #2
 80049c4:	f7fb fdce 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80049c8:	4849      	ldr	r0, [pc, #292]	; (8004af0 <menu+0x3634>)
 80049ca:	f7fb fc2b 	bl	8000224 <strlen>
 80049ce:	4603      	mov	r3, r0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	3301      	adds	r3, #1
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	4a47      	ldr	r2, [pc, #284]	; (8004af4 <menu+0x3638>)
 80049d8:	4619      	mov	r1, r3
 80049da:	2002      	movs	r0, #2
 80049dc:	f7fb fdc2 	bl	8000564 <lcd_print>

			bekle();
 80049e0:	f000 fd10 	bl	8005404 <bekle>
		}
	}

	if (menuSayac == 34) {
 80049e4:	4b3c      	ldr	r3, [pc, #240]	; (8004ad8 <menu+0x361c>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b22      	cmp	r3, #34	; 0x22
 80049ea:	d153      	bne.n	8004a94 <menu+0x35d8>
		calismaSayModu = 0;
 80049ec:	4b3b      	ldr	r3, [pc, #236]	; (8004adc <menu+0x3620>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80049f2:	4a41      	ldr	r2, [pc, #260]	; (8004af8 <menu+0x363c>)
 80049f4:	2101      	movs	r1, #1
 80049f6:	2001      	movs	r0, #1
 80049f8:	f7fb fdb4 	bl	8000564 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 80049fc:	483f      	ldr	r0, [pc, #252]	; (8004afc <menu+0x3640>)
 80049fe:	f7fb fc11 	bl	8000224 <strlen>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d811      	bhi.n	8004a2c <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8004a08:	4a3c      	ldr	r2, [pc, #240]	; (8004afc <menu+0x3640>)
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	2002      	movs	r0, #2
 8004a0e:	f7fb fda9 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004a12:	483a      	ldr	r0, [pc, #232]	; (8004afc <menu+0x3640>)
 8004a14:	f7fb fc06 	bl	8000224 <strlen>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	4a34      	ldr	r2, [pc, #208]	; (8004af4 <menu+0x3638>)
 8004a22:	4619      	mov	r1, r3
 8004a24:	2002      	movs	r0, #2
 8004a26:	f7fb fd9d 	bl	8000564 <lcd_print>
 8004a2a:	e005      	b.n	8004a38 <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	2202      	movs	r2, #2
 8004a30:	2101      	movs	r1, #1
 8004a32:	4832      	ldr	r0, [pc, #200]	; (8004afc <menu+0x3640>)
 8004a34:	f7fc fc9c 	bl	8001370 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a38:	2102      	movs	r1, #2
 8004a3a:	4822      	ldr	r0, [pc, #136]	; (8004ac4 <menu+0x3608>)
 8004a3c:	f004 f924 	bl	8008c88 <HAL_GPIO_ReadPin>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d126      	bne.n	8004a94 <menu+0x35d8>
 8004a46:	2104      	movs	r1, #4
 8004a48:	481e      	ldr	r0, [pc, #120]	; (8004ac4 <menu+0x3608>)
 8004a4a:	f004 f91d 	bl	8008c88 <HAL_GPIO_ReadPin>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d11f      	bne.n	8004a94 <menu+0x35d8>
 8004a54:	4b1c      	ldr	r3, [pc, #112]	; (8004ac8 <menu+0x360c>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	f083 0301 	eor.w	r3, r3, #1
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d018      	beq.n	8004a94 <menu+0x35d8>
			takeWifiPass(0);
 8004a62:	2000      	movs	r0, #0
 8004a64:	f7fc fa9a 	bl	8000f9c <takeWifiPass>

			HAL_Delay(50);
 8004a68:	2032      	movs	r0, #50	; 0x32
 8004a6a:	f003 fb3d 	bl	80080e8 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004a6e:	4a23      	ldr	r2, [pc, #140]	; (8004afc <menu+0x3640>)
 8004a70:	2101      	movs	r1, #1
 8004a72:	2002      	movs	r0, #2
 8004a74:	f7fb fd76 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004a78:	4820      	ldr	r0, [pc, #128]	; (8004afc <menu+0x3640>)
 8004a7a:	f7fb fbd3 	bl	8000224 <strlen>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	3301      	adds	r3, #1
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	4a1b      	ldr	r2, [pc, #108]	; (8004af4 <menu+0x3638>)
 8004a88:	4619      	mov	r1, r3
 8004a8a:	2002      	movs	r0, #2
 8004a8c:	f7fb fd6a 	bl	8000564 <lcd_print>

			bekle();
 8004a90:	f000 fcb8 	bl	8005404 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004a94:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <menu+0x361c>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b23      	cmp	r3, #35	; 0x23
 8004a9a:	d155      	bne.n	8004b48 <menu+0x368c>
		if(dilSecim == 0) {
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <menu+0x3600>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d131      	bne.n	8004b08 <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004aa4:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <menu+0x3644>)
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f7fb fd5b 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004aae:	4a15      	ldr	r2, [pc, #84]	; (8004b04 <menu+0x3648>)
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	2002      	movs	r0, #2
 8004ab4:	f7fb fd56 	bl	8000564 <lcd_print>
 8004ab8:	e034      	b.n	8004b24 <menu+0x3668>
 8004aba:	bf00      	nop
 8004abc:	200002d1 	.word	0x200002d1
 8004ac0:	0800c1a8 	.word	0x0800c1a8
 8004ac4:	40010800 	.word	0x40010800
 8004ac8:	200002df 	.word	0x200002df
 8004acc:	200002cf 	.word	0x200002cf
 8004ad0:	200001e0 	.word	0x200001e0
 8004ad4:	200002dc 	.word	0x200002dc
 8004ad8:	200002b0 	.word	0x200002b0
 8004adc:	200002d0 	.word	0x200002d0
 8004ae0:	0800c8f0 	.word	0x0800c8f0
 8004ae4:	20000278 	.word	0x20000278
 8004ae8:	0800c904 	.word	0x0800c904
 8004aec:	0800c90c 	.word	0x0800c90c
 8004af0:	20000284 	.word	0x20000284
 8004af4:	2000003c 	.word	0x2000003c
 8004af8:	0800c920 	.word	0x0800c920
 8004afc:	20000298 	.word	0x20000298
 8004b00:	0800c934 	.word	0x0800c934
 8004b04:	0800c948 	.word	0x0800c948
		} else if(dilSecim == 1) {
 8004b08:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <menu+0x3690>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d109      	bne.n	8004b24 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004b10:	4a0f      	ldr	r2, [pc, #60]	; (8004b50 <menu+0x3694>)
 8004b12:	2101      	movs	r1, #1
 8004b14:	2001      	movs	r0, #1
 8004b16:	f7fb fd25 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004b1a:	4a0e      	ldr	r2, [pc, #56]	; (8004b54 <menu+0x3698>)
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	2002      	movs	r0, #2
 8004b20:	f7fb fd20 	bl	8000564 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004b24:	2108      	movs	r1, #8
 8004b26:	480c      	ldr	r0, [pc, #48]	; (8004b58 <menu+0x369c>)
 8004b28:	f004 f8ae 	bl	8008c88 <HAL_GPIO_ReadPin>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d10a      	bne.n	8004b48 <menu+0x368c>
			menuGiris = 0;
 8004b32:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <menu+0x36a0>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004b38:	f7fb fd40 	bl	80005bc <lcd_clear>
			HAL_Delay(500);
 8004b3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b40:	f003 fad2 	bl	80080e8 <HAL_Delay>
			NVIC_SystemReset();
 8004b44:	f7fb fd82 	bl	800064c <__NVIC_SystemReset>
		}
	}
}
 8004b48:	bf00      	nop
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	200002d1 	.word	0x200002d1
 8004b50:	0800c95c 	.word	0x0800c95c
 8004b54:	0800c970 	.word	0x0800c970
 8004b58:	40010800 	.word	0x40010800
 8004b5c:	200002cd 	.word	0x200002cd

08004b60 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d105      	bne.n	8004b7c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004b70:	4a22      	ldr	r2, [pc, #136]	; (8004bfc <lcdUpdate+0x9c>)
 8004b72:	2101      	movs	r1, #1
 8004b74:	2002      	movs	r0, #2
 8004b76:	f7fb fcf5 	bl	8000564 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8004b7a:	e03b      	b.n	8004bf4 <lcdUpdate+0x94>
	} else if(y==2) {
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d105      	bne.n	8004b8e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004b82:	4a1e      	ldr	r2, [pc, #120]	; (8004bfc <lcdUpdate+0x9c>)
 8004b84:	2102      	movs	r1, #2
 8004b86:	2002      	movs	r0, #2
 8004b88:	f7fb fcec 	bl	8000564 <lcd_print>
}
 8004b8c:	e032      	b.n	8004bf4 <lcdUpdate+0x94>
	} else if(y==3) {
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d105      	bne.n	8004ba0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004b94:	4a19      	ldr	r2, [pc, #100]	; (8004bfc <lcdUpdate+0x9c>)
 8004b96:	2103      	movs	r1, #3
 8004b98:	2002      	movs	r0, #2
 8004b9a:	f7fb fce3 	bl	8000564 <lcd_print>
}
 8004b9e:	e029      	b.n	8004bf4 <lcdUpdate+0x94>
	} else if(y==4) {
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d105      	bne.n	8004bb2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004ba6:	4a15      	ldr	r2, [pc, #84]	; (8004bfc <lcdUpdate+0x9c>)
 8004ba8:	2104      	movs	r1, #4
 8004baa:	2002      	movs	r0, #2
 8004bac:	f7fb fcda 	bl	8000564 <lcd_print>
}
 8004bb0:	e020      	b.n	8004bf4 <lcdUpdate+0x94>
	} else if(y==5) {
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	2b05      	cmp	r3, #5
 8004bb6:	d105      	bne.n	8004bc4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004bb8:	4a10      	ldr	r2, [pc, #64]	; (8004bfc <lcdUpdate+0x9c>)
 8004bba:	2105      	movs	r1, #5
 8004bbc:	2002      	movs	r0, #2
 8004bbe:	f7fb fcd1 	bl	8000564 <lcd_print>
}
 8004bc2:	e017      	b.n	8004bf4 <lcdUpdate+0x94>
	} else if(y==6) {
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	2b06      	cmp	r3, #6
 8004bc8:	d105      	bne.n	8004bd6 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004bca:	4a0c      	ldr	r2, [pc, #48]	; (8004bfc <lcdUpdate+0x9c>)
 8004bcc:	2106      	movs	r1, #6
 8004bce:	2002      	movs	r0, #2
 8004bd0:	f7fb fcc8 	bl	8000564 <lcd_print>
}
 8004bd4:	e00e      	b.n	8004bf4 <lcdUpdate+0x94>
	} else if (y==7) {
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	2b07      	cmp	r3, #7
 8004bda:	d10b      	bne.n	8004bf4 <lcdUpdate+0x94>
		lcd_clear();
 8004bdc:	f7fb fcee 	bl	80005bc <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8004be0:	4a07      	ldr	r2, [pc, #28]	; (8004c00 <lcdUpdate+0xa0>)
 8004be2:	2101      	movs	r1, #1
 8004be4:	2001      	movs	r0, #1
 8004be6:	f7fb fcbd 	bl	8000564 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8004bea:	4a06      	ldr	r2, [pc, #24]	; (8004c04 <lcdUpdate+0xa4>)
 8004bec:	2101      	movs	r1, #1
 8004bee:	2002      	movs	r0, #2
 8004bf0:	f7fb fcb8 	bl	8000564 <lcd_print>
}
 8004bf4:	bf00      	nop
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	0800c050 	.word	0x0800c050
 8004c00:	0800c984 	.word	0x0800c984
 8004c04:	0800c998 	.word	0x0800c998

08004c08 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d11d      	bne.n	8004c54 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8004c18:	4b62      	ldr	r3, [pc, #392]	; (8004da4 <hataKoduLcdGoster+0x19c>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d105      	bne.n	8004c2c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8004c20:	4a61      	ldr	r2, [pc, #388]	; (8004da8 <hataKoduLcdGoster+0x1a0>)
 8004c22:	2101      	movs	r1, #1
 8004c24:	2001      	movs	r0, #1
 8004c26:	f7fb fc9d 	bl	8000564 <lcd_print>
 8004c2a:	e008      	b.n	8004c3e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8004c2c:	4b5d      	ldr	r3, [pc, #372]	; (8004da4 <hataKoduLcdGoster+0x19c>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d104      	bne.n	8004c3e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004c34:	4a5d      	ldr	r2, [pc, #372]	; (8004dac <hataKoduLcdGoster+0x1a4>)
 8004c36:	2101      	movs	r1, #1
 8004c38:	2001      	movs	r0, #1
 8004c3a:	f7fb fc93 	bl	8000564 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8004c3e:	4a5c      	ldr	r2, [pc, #368]	; (8004db0 <hataKoduLcdGoster+0x1a8>)
 8004c40:	2101      	movs	r1, #1
 8004c42:	2002      	movs	r0, #2
 8004c44:	f7fb fc8e 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8004c48:	4a5a      	ldr	r2, [pc, #360]	; (8004db4 <hataKoduLcdGoster+0x1ac>)
 8004c4a:	2107      	movs	r1, #7
 8004c4c:	2002      	movs	r0, #2
 8004c4e:	f7fb fc89 	bl	8000564 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8004c52:	e0a3      	b.n	8004d9c <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d11d      	bne.n	8004c96 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8004c5a:	4b52      	ldr	r3, [pc, #328]	; (8004da4 <hataKoduLcdGoster+0x19c>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d105      	bne.n	8004c6e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8004c62:	4a51      	ldr	r2, [pc, #324]	; (8004da8 <hataKoduLcdGoster+0x1a0>)
 8004c64:	2101      	movs	r1, #1
 8004c66:	2001      	movs	r0, #1
 8004c68:	f7fb fc7c 	bl	8000564 <lcd_print>
 8004c6c:	e008      	b.n	8004c80 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8004c6e:	4b4d      	ldr	r3, [pc, #308]	; (8004da4 <hataKoduLcdGoster+0x19c>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d104      	bne.n	8004c80 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004c76:	4a4d      	ldr	r2, [pc, #308]	; (8004dac <hataKoduLcdGoster+0x1a4>)
 8004c78:	2101      	movs	r1, #1
 8004c7a:	2001      	movs	r0, #1
 8004c7c:	f7fb fc72 	bl	8000564 <lcd_print>
		lcd_print(2, 2, "2");
 8004c80:	4a4d      	ldr	r2, [pc, #308]	; (8004db8 <hataKoduLcdGoster+0x1b0>)
 8004c82:	2102      	movs	r1, #2
 8004c84:	2002      	movs	r0, #2
 8004c86:	f7fb fc6d 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8004c8a:	4a4a      	ldr	r2, [pc, #296]	; (8004db4 <hataKoduLcdGoster+0x1ac>)
 8004c8c:	2107      	movs	r1, #7
 8004c8e:	2002      	movs	r0, #2
 8004c90:	f7fb fc68 	bl	8000564 <lcd_print>
}
 8004c94:	e082      	b.n	8004d9c <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d11d      	bne.n	8004cd8 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8004c9c:	4b41      	ldr	r3, [pc, #260]	; (8004da4 <hataKoduLcdGoster+0x19c>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d105      	bne.n	8004cb0 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8004ca4:	4a40      	ldr	r2, [pc, #256]	; (8004da8 <hataKoduLcdGoster+0x1a0>)
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	2001      	movs	r0, #1
 8004caa:	f7fb fc5b 	bl	8000564 <lcd_print>
 8004cae:	e008      	b.n	8004cc2 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8004cb0:	4b3c      	ldr	r3, [pc, #240]	; (8004da4 <hataKoduLcdGoster+0x19c>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d104      	bne.n	8004cc2 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004cb8:	4a3c      	ldr	r2, [pc, #240]	; (8004dac <hataKoduLcdGoster+0x1a4>)
 8004cba:	2101      	movs	r1, #1
 8004cbc:	2001      	movs	r0, #1
 8004cbe:	f7fb fc51 	bl	8000564 <lcd_print>
		lcd_print(2, 3, "3");
 8004cc2:	4a3e      	ldr	r2, [pc, #248]	; (8004dbc <hataKoduLcdGoster+0x1b4>)
 8004cc4:	2103      	movs	r1, #3
 8004cc6:	2002      	movs	r0, #2
 8004cc8:	f7fb fc4c 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8004ccc:	4a39      	ldr	r2, [pc, #228]	; (8004db4 <hataKoduLcdGoster+0x1ac>)
 8004cce:	2107      	movs	r1, #7
 8004cd0:	2002      	movs	r0, #2
 8004cd2:	f7fb fc47 	bl	8000564 <lcd_print>
}
 8004cd6:	e061      	b.n	8004d9c <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d11d      	bne.n	8004d1a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8004cde:	4b31      	ldr	r3, [pc, #196]	; (8004da4 <hataKoduLcdGoster+0x19c>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d105      	bne.n	8004cf2 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8004ce6:	4a30      	ldr	r2, [pc, #192]	; (8004da8 <hataKoduLcdGoster+0x1a0>)
 8004ce8:	2101      	movs	r1, #1
 8004cea:	2001      	movs	r0, #1
 8004cec:	f7fb fc3a 	bl	8000564 <lcd_print>
 8004cf0:	e008      	b.n	8004d04 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8004cf2:	4b2c      	ldr	r3, [pc, #176]	; (8004da4 <hataKoduLcdGoster+0x19c>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d104      	bne.n	8004d04 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004cfa:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <hataKoduLcdGoster+0x1a4>)
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	2001      	movs	r0, #1
 8004d00:	f7fb fc30 	bl	8000564 <lcd_print>
		lcd_print(2, 4, "4");
 8004d04:	4a2e      	ldr	r2, [pc, #184]	; (8004dc0 <hataKoduLcdGoster+0x1b8>)
 8004d06:	2104      	movs	r1, #4
 8004d08:	2002      	movs	r0, #2
 8004d0a:	f7fb fc2b 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8004d0e:	4a29      	ldr	r2, [pc, #164]	; (8004db4 <hataKoduLcdGoster+0x1ac>)
 8004d10:	2107      	movs	r1, #7
 8004d12:	2002      	movs	r0, #2
 8004d14:	f7fb fc26 	bl	8000564 <lcd_print>
}
 8004d18:	e040      	b.n	8004d9c <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	2b05      	cmp	r3, #5
 8004d1e:	d11d      	bne.n	8004d5c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8004d20:	4b20      	ldr	r3, [pc, #128]	; (8004da4 <hataKoduLcdGoster+0x19c>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d105      	bne.n	8004d34 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8004d28:	4a1f      	ldr	r2, [pc, #124]	; (8004da8 <hataKoduLcdGoster+0x1a0>)
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	f7fb fc19 	bl	8000564 <lcd_print>
 8004d32:	e008      	b.n	8004d46 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8004d34:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <hataKoduLcdGoster+0x19c>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d104      	bne.n	8004d46 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004d3c:	4a1b      	ldr	r2, [pc, #108]	; (8004dac <hataKoduLcdGoster+0x1a4>)
 8004d3e:	2101      	movs	r1, #1
 8004d40:	2001      	movs	r0, #1
 8004d42:	f7fb fc0f 	bl	8000564 <lcd_print>
		lcd_print(2, 5, "5");
 8004d46:	4a1f      	ldr	r2, [pc, #124]	; (8004dc4 <hataKoduLcdGoster+0x1bc>)
 8004d48:	2105      	movs	r1, #5
 8004d4a:	2002      	movs	r0, #2
 8004d4c:	f7fb fc0a 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8004d50:	4a18      	ldr	r2, [pc, #96]	; (8004db4 <hataKoduLcdGoster+0x1ac>)
 8004d52:	2107      	movs	r1, #7
 8004d54:	2002      	movs	r0, #2
 8004d56:	f7fb fc05 	bl	8000564 <lcd_print>
}
 8004d5a:	e01f      	b.n	8004d9c <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	2b06      	cmp	r3, #6
 8004d60:	d11c      	bne.n	8004d9c <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <hataKoduLcdGoster+0x19c>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d105      	bne.n	8004d76 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8004d6a:	4a0f      	ldr	r2, [pc, #60]	; (8004da8 <hataKoduLcdGoster+0x1a0>)
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	2001      	movs	r0, #1
 8004d70:	f7fb fbf8 	bl	8000564 <lcd_print>
 8004d74:	e008      	b.n	8004d88 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <hataKoduLcdGoster+0x19c>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d104      	bne.n	8004d88 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004d7e:	4a0b      	ldr	r2, [pc, #44]	; (8004dac <hataKoduLcdGoster+0x1a4>)
 8004d80:	2101      	movs	r1, #1
 8004d82:	2001      	movs	r0, #1
 8004d84:	f7fb fbee 	bl	8000564 <lcd_print>
		lcd_print(2, 6, "6");
 8004d88:	4a0f      	ldr	r2, [pc, #60]	; (8004dc8 <hataKoduLcdGoster+0x1c0>)
 8004d8a:	2106      	movs	r1, #6
 8004d8c:	2002      	movs	r0, #2
 8004d8e:	f7fb fbe9 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8004d92:	4a08      	ldr	r2, [pc, #32]	; (8004db4 <hataKoduLcdGoster+0x1ac>)
 8004d94:	2107      	movs	r1, #7
 8004d96:	2002      	movs	r0, #2
 8004d98:	f7fb fbe4 	bl	8000564 <lcd_print>
}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	200002d1 	.word	0x200002d1
 8004da8:	0800c9ac 	.word	0x0800c9ac
 8004dac:	0800c9c0 	.word	0x0800c9c0
 8004db0:	0800bd94 	.word	0x0800bd94
 8004db4:	0800c9d4 	.word	0x0800c9d4
 8004db8:	0800bd98 	.word	0x0800bd98
 8004dbc:	0800bd9c 	.word	0x0800bd9c
 8004dc0:	0800bda0 	.word	0x0800bda0
 8004dc4:	0800bda4 	.word	0x0800bda4
 8004dc8:	0800bda8 	.word	0x0800bda8

08004dcc <eepromKontrol>:
	HAL_Delay(500);
	lcd_clear();
	HAL_Delay(500);
}

void eepromKontrol(int type) {
 8004dcc:	b5b0      	push	{r4, r5, r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af04      	add	r7, sp, #16
 8004dd2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004dd4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004dd8:	9302      	str	r3, [sp, #8]
 8004dda:	236e      	movs	r3, #110	; 0x6e
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	4b9c      	ldr	r3, [pc, #624]	; (8005050 <eepromKontrol+0x284>)
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	236e      	movs	r3, #110	; 0x6e
 8004de4:	2200      	movs	r2, #0
 8004de6:	21a0      	movs	r1, #160	; 0xa0
 8004de8:	489a      	ldr	r0, [pc, #616]	; (8005054 <eepromKontrol+0x288>)
 8004dea:	f004 fb01 	bl	80093f0 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8004dee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004df2:	f003 f979 	bl	80080e8 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8004df6:	4b96      	ldr	r3, [pc, #600]	; (8005050 <eepromKontrol+0x284>)
 8004df8:	78da      	ldrb	r2, [r3, #3]
 8004dfa:	4b97      	ldr	r3, [pc, #604]	; (8005058 <eepromKontrol+0x28c>)
 8004dfc:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8004dfe:	4b94      	ldr	r3, [pc, #592]	; (8005050 <eepromKontrol+0x284>)
 8004e00:	785a      	ldrb	r2, [r3, #1]
 8004e02:	4b96      	ldr	r3, [pc, #600]	; (800505c <eepromKontrol+0x290>)
 8004e04:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8004e06:	4b92      	ldr	r3, [pc, #584]	; (8005050 <eepromKontrol+0x284>)
 8004e08:	789a      	ldrb	r2, [r3, #2]
 8004e0a:	4b95      	ldr	r3, [pc, #596]	; (8005060 <eepromKontrol+0x294>)
 8004e0c:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8004e0e:	4b90      	ldr	r3, [pc, #576]	; (8005050 <eepromKontrol+0x284>)
 8004e10:	791a      	ldrb	r2, [r3, #4]
 8004e12:	4b94      	ldr	r3, [pc, #592]	; (8005064 <eepromKontrol+0x298>)
 8004e14:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8004e16:	4b8e      	ldr	r3, [pc, #568]	; (8005050 <eepromKontrol+0x284>)
 8004e18:	795a      	ldrb	r2, [r3, #5]
 8004e1a:	4b93      	ldr	r3, [pc, #588]	; (8005068 <eepromKontrol+0x29c>)
 8004e1c:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8004e1e:	4b8c      	ldr	r3, [pc, #560]	; (8005050 <eepromKontrol+0x284>)
 8004e20:	799a      	ldrb	r2, [r3, #6]
 8004e22:	4b92      	ldr	r3, [pc, #584]	; (800506c <eepromKontrol+0x2a0>)
 8004e24:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8004e26:	4b8a      	ldr	r3, [pc, #552]	; (8005050 <eepromKontrol+0x284>)
 8004e28:	79da      	ldrb	r2, [r3, #7]
 8004e2a:	4b91      	ldr	r3, [pc, #580]	; (8005070 <eepromKontrol+0x2a4>)
 8004e2c:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8004e2e:	4b88      	ldr	r3, [pc, #544]	; (8005050 <eepromKontrol+0x284>)
 8004e30:	7a1a      	ldrb	r2, [r3, #8]
 8004e32:	4b90      	ldr	r3, [pc, #576]	; (8005074 <eepromKontrol+0x2a8>)
 8004e34:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8004e36:	4b86      	ldr	r3, [pc, #536]	; (8005050 <eepromKontrol+0x284>)
 8004e38:	7a5a      	ldrb	r2, [r3, #9]
 8004e3a:	4b8f      	ldr	r3, [pc, #572]	; (8005078 <eepromKontrol+0x2ac>)
 8004e3c:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8004e3e:	4b84      	ldr	r3, [pc, #528]	; (8005050 <eepromKontrol+0x284>)
 8004e40:	7a9a      	ldrb	r2, [r3, #10]
 8004e42:	4b8e      	ldr	r3, [pc, #568]	; (800507c <eepromKontrol+0x2b0>)
 8004e44:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8004e46:	4b82      	ldr	r3, [pc, #520]	; (8005050 <eepromKontrol+0x284>)
 8004e48:	7ada      	ldrb	r2, [r3, #11]
 8004e4a:	4b8d      	ldr	r3, [pc, #564]	; (8005080 <eepromKontrol+0x2b4>)
 8004e4c:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8004e4e:	4b80      	ldr	r3, [pc, #512]	; (8005050 <eepromKontrol+0x284>)
 8004e50:	7b1a      	ldrb	r2, [r3, #12]
 8004e52:	4b8c      	ldr	r3, [pc, #560]	; (8005084 <eepromKontrol+0x2b8>)
 8004e54:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8004e56:	4b7e      	ldr	r3, [pc, #504]	; (8005050 <eepromKontrol+0x284>)
 8004e58:	7b5a      	ldrb	r2, [r3, #13]
 8004e5a:	4b8b      	ldr	r3, [pc, #556]	; (8005088 <eepromKontrol+0x2bc>)
 8004e5c:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8004e5e:	4b7c      	ldr	r3, [pc, #496]	; (8005050 <eepromKontrol+0x284>)
 8004e60:	7b9a      	ldrb	r2, [r3, #14]
 8004e62:	4b8a      	ldr	r3, [pc, #552]	; (800508c <eepromKontrol+0x2c0>)
 8004e64:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8004e66:	4b7a      	ldr	r3, [pc, #488]	; (8005050 <eepromKontrol+0x284>)
 8004e68:	7bda      	ldrb	r2, [r3, #15]
 8004e6a:	4b89      	ldr	r3, [pc, #548]	; (8005090 <eepromKontrol+0x2c4>)
 8004e6c:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8004e6e:	4b78      	ldr	r3, [pc, #480]	; (8005050 <eepromKontrol+0x284>)
 8004e70:	7c1a      	ldrb	r2, [r3, #16]
 8004e72:	4b88      	ldr	r3, [pc, #544]	; (8005094 <eepromKontrol+0x2c8>)
 8004e74:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8004e76:	4b76      	ldr	r3, [pc, #472]	; (8005050 <eepromKontrol+0x284>)
 8004e78:	7c5a      	ldrb	r2, [r3, #17]
 8004e7a:	4b87      	ldr	r3, [pc, #540]	; (8005098 <eepromKontrol+0x2cc>)
 8004e7c:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8004e7e:	4b74      	ldr	r3, [pc, #464]	; (8005050 <eepromKontrol+0x284>)
 8004e80:	7c9a      	ldrb	r2, [r3, #18]
 8004e82:	4b86      	ldr	r3, [pc, #536]	; (800509c <eepromKontrol+0x2d0>)
 8004e84:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8004e86:	4b72      	ldr	r3, [pc, #456]	; (8005050 <eepromKontrol+0x284>)
 8004e88:	7cda      	ldrb	r2, [r3, #19]
 8004e8a:	4b85      	ldr	r3, [pc, #532]	; (80050a0 <eepromKontrol+0x2d4>)
 8004e8c:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8004e8e:	4b70      	ldr	r3, [pc, #448]	; (8005050 <eepromKontrol+0x284>)
 8004e90:	7d1a      	ldrb	r2, [r3, #20]
 8004e92:	4b84      	ldr	r3, [pc, #528]	; (80050a4 <eepromKontrol+0x2d8>)
 8004e94:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8004e96:	4b6e      	ldr	r3, [pc, #440]	; (8005050 <eepromKontrol+0x284>)
 8004e98:	7d5a      	ldrb	r2, [r3, #21]
 8004e9a:	4b83      	ldr	r3, [pc, #524]	; (80050a8 <eepromKontrol+0x2dc>)
 8004e9c:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8004e9e:	4b6c      	ldr	r3, [pc, #432]	; (8005050 <eepromKontrol+0x284>)
 8004ea0:	7d9a      	ldrb	r2, [r3, #22]
 8004ea2:	4b82      	ldr	r3, [pc, #520]	; (80050ac <eepromKontrol+0x2e0>)
 8004ea4:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8004ea6:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <eepromKontrol+0x284>)
 8004ea8:	7dda      	ldrb	r2, [r3, #23]
 8004eaa:	4b81      	ldr	r3, [pc, #516]	; (80050b0 <eepromKontrol+0x2e4>)
 8004eac:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8004eae:	4b68      	ldr	r3, [pc, #416]	; (8005050 <eepromKontrol+0x284>)
 8004eb0:	7e1a      	ldrb	r2, [r3, #24]
 8004eb2:	4b80      	ldr	r3, [pc, #512]	; (80050b4 <eepromKontrol+0x2e8>)
 8004eb4:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8004eb6:	4b66      	ldr	r3, [pc, #408]	; (8005050 <eepromKontrol+0x284>)
 8004eb8:	7e5a      	ldrb	r2, [r3, #25]
 8004eba:	4b7f      	ldr	r3, [pc, #508]	; (80050b8 <eepromKontrol+0x2ec>)
 8004ebc:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8004ebe:	4b64      	ldr	r3, [pc, #400]	; (8005050 <eepromKontrol+0x284>)
 8004ec0:	7e9a      	ldrb	r2, [r3, #26]
 8004ec2:	4b7e      	ldr	r3, [pc, #504]	; (80050bc <eepromKontrol+0x2f0>)
 8004ec4:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8004ec6:	4b62      	ldr	r3, [pc, #392]	; (8005050 <eepromKontrol+0x284>)
 8004ec8:	7eda      	ldrb	r2, [r3, #27]
 8004eca:	4b7d      	ldr	r3, [pc, #500]	; (80050c0 <eepromKontrol+0x2f4>)
 8004ecc:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8004ece:	4b60      	ldr	r3, [pc, #384]	; (8005050 <eepromKontrol+0x284>)
 8004ed0:	7f1a      	ldrb	r2, [r3, #28]
 8004ed2:	4b7c      	ldr	r3, [pc, #496]	; (80050c4 <eepromKontrol+0x2f8>)
 8004ed4:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8004ed6:	4b5e      	ldr	r3, [pc, #376]	; (8005050 <eepromKontrol+0x284>)
 8004ed8:	7f5a      	ldrb	r2, [r3, #29]
 8004eda:	4b7b      	ldr	r3, [pc, #492]	; (80050c8 <eepromKontrol+0x2fc>)
 8004edc:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8004ede:	4b5c      	ldr	r3, [pc, #368]	; (8005050 <eepromKontrol+0x284>)
 8004ee0:	7f9a      	ldrb	r2, [r3, #30]
 8004ee2:	4b7a      	ldr	r3, [pc, #488]	; (80050cc <eepromKontrol+0x300>)
 8004ee4:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8004ee6:	4b5a      	ldr	r3, [pc, #360]	; (8005050 <eepromKontrol+0x284>)
 8004ee8:	7fda      	ldrb	r2, [r3, #31]
 8004eea:	4b79      	ldr	r3, [pc, #484]	; (80050d0 <eepromKontrol+0x304>)
 8004eec:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8004eee:	4b58      	ldr	r3, [pc, #352]	; (8005050 <eepromKontrol+0x284>)
 8004ef0:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004ef4:	4b77      	ldr	r3, [pc, #476]	; (80050d4 <eepromKontrol+0x308>)
 8004ef6:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8004ef8:	4b55      	ldr	r3, [pc, #340]	; (8005050 <eepromKontrol+0x284>)
 8004efa:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004efe:	4b76      	ldr	r3, [pc, #472]	; (80050d8 <eepromKontrol+0x30c>)
 8004f00:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8004f02:	4b53      	ldr	r3, [pc, #332]	; (8005050 <eepromKontrol+0x284>)
 8004f04:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004f08:	4b74      	ldr	r3, [pc, #464]	; (80050dc <eepromKontrol+0x310>)
 8004f0a:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8004f0c:	4b50      	ldr	r3, [pc, #320]	; (8005050 <eepromKontrol+0x284>)
 8004f0e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004f12:	4b73      	ldr	r3, [pc, #460]	; (80050e0 <eepromKontrol+0x314>)
 8004f14:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8004f16:	4b4e      	ldr	r3, [pc, #312]	; (8005050 <eepromKontrol+0x284>)
 8004f18:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004f1c:	4b71      	ldr	r3, [pc, #452]	; (80050e4 <eepromKontrol+0x318>)
 8004f1e:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8004f20:	4b4b      	ldr	r3, [pc, #300]	; (8005050 <eepromKontrol+0x284>)
 8004f22:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004f26:	4b70      	ldr	r3, [pc, #448]	; (80050e8 <eepromKontrol+0x31c>)
 8004f28:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8004f2a:	4b49      	ldr	r3, [pc, #292]	; (8005050 <eepromKontrol+0x284>)
 8004f2c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004f30:	4b6e      	ldr	r3, [pc, #440]	; (80050ec <eepromKontrol+0x320>)
 8004f32:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8004f34:	4b46      	ldr	r3, [pc, #280]	; (8005050 <eepromKontrol+0x284>)
 8004f36:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004f3a:	4b6d      	ldr	r3, [pc, #436]	; (80050f0 <eepromKontrol+0x324>)
 8004f3c:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8004f3e:	4b44      	ldr	r3, [pc, #272]	; (8005050 <eepromKontrol+0x284>)
 8004f40:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004f44:	4b6b      	ldr	r3, [pc, #428]	; (80050f4 <eepromKontrol+0x328>)
 8004f46:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8004f48:	4b41      	ldr	r3, [pc, #260]	; (8005050 <eepromKontrol+0x284>)
 8004f4a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004f4e:	4b6a      	ldr	r3, [pc, #424]	; (80050f8 <eepromKontrol+0x32c>)
 8004f50:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8004f52:	4b3f      	ldr	r3, [pc, #252]	; (8005050 <eepromKontrol+0x284>)
 8004f54:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004f58:	4b68      	ldr	r3, [pc, #416]	; (80050fc <eepromKontrol+0x330>)
 8004f5a:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8004f5c:	4b3c      	ldr	r3, [pc, #240]	; (8005050 <eepromKontrol+0x284>)
 8004f5e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8004f62:	4b67      	ldr	r3, [pc, #412]	; (8005100 <eepromKontrol+0x334>)
 8004f64:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8004f66:	4b3a      	ldr	r3, [pc, #232]	; (8005050 <eepromKontrol+0x284>)
 8004f68:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004f6c:	4b65      	ldr	r3, [pc, #404]	; (8005104 <eepromKontrol+0x338>)
 8004f6e:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8004f70:	4b37      	ldr	r3, [pc, #220]	; (8005050 <eepromKontrol+0x284>)
 8004f72:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004f76:	4b64      	ldr	r3, [pc, #400]	; (8005108 <eepromKontrol+0x33c>)
 8004f78:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8004f7a:	4b35      	ldr	r3, [pc, #212]	; (8005050 <eepromKontrol+0x284>)
 8004f7c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8004f80:	4b62      	ldr	r3, [pc, #392]	; (800510c <eepromKontrol+0x340>)
 8004f82:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8004f84:	4b32      	ldr	r3, [pc, #200]	; (8005050 <eepromKontrol+0x284>)
 8004f86:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004f8a:	4b61      	ldr	r3, [pc, #388]	; (8005110 <eepromKontrol+0x344>)
 8004f8c:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 8004f8e:	4b51      	ldr	r3, [pc, #324]	; (80050d4 <eepromKontrol+0x308>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b09      	cmp	r3, #9
 8004f94:	d902      	bls.n	8004f9c <eepromKontrol+0x1d0>
	    calismaSayisi10000=0;
 8004f96:	4b4f      	ldr	r3, [pc, #316]	; (80050d4 <eepromKontrol+0x308>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8004f9c:	4b4c      	ldr	r3, [pc, #304]	; (80050d0 <eepromKontrol+0x304>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b09      	cmp	r3, #9
 8004fa2:	d902      	bls.n	8004faa <eepromKontrol+0x1de>
	    calismaSayisi1000=0;
 8004fa4:	4b4a      	ldr	r3, [pc, #296]	; (80050d0 <eepromKontrol+0x304>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8004faa:	4b48      	ldr	r3, [pc, #288]	; (80050cc <eepromKontrol+0x300>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b09      	cmp	r3, #9
 8004fb0:	d902      	bls.n	8004fb8 <eepromKontrol+0x1ec>
	    calismaSayisi100=0;
 8004fb2:	4b46      	ldr	r3, [pc, #280]	; (80050cc <eepromKontrol+0x300>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8004fb8:	4b43      	ldr	r3, [pc, #268]	; (80050c8 <eepromKontrol+0x2fc>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b09      	cmp	r3, #9
 8004fbe:	d902      	bls.n	8004fc6 <eepromKontrol+0x1fa>
	    calismaSayisi10=0;
 8004fc0:	4b41      	ldr	r3, [pc, #260]	; (80050c8 <eepromKontrol+0x2fc>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8004fc6:	4b3f      	ldr	r3, [pc, #252]	; (80050c4 <eepromKontrol+0x2f8>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b09      	cmp	r3, #9
 8004fcc:	d902      	bls.n	8004fd4 <eepromKontrol+0x208>
	    calismaSayisi1=0;
 8004fce:	4b3d      	ldr	r3, [pc, #244]	; (80050c4 <eepromKontrol+0x2f8>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8004fd4:	4b21      	ldr	r3, [pc, #132]	; (800505c <eepromKontrol+0x290>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d902      	bls.n	8004fe2 <eepromKontrol+0x216>
	    calismaSekli=0;
 8004fdc:	4b1f      	ldr	r3, [pc, #124]	; (800505c <eepromKontrol+0x290>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8004fe2:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <eepromKontrol+0x294>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d902      	bls.n	8004ff0 <eepromKontrol+0x224>
	    emniyetCercevesi=1;
 8004fea:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <eepromKontrol+0x294>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8004ff0:	4b1c      	ldr	r3, [pc, #112]	; (8005064 <eepromKontrol+0x298>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d902      	bls.n	8004ffe <eepromKontrol+0x232>
	    yavaslamaLimit=0;
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	; (8005064 <eepromKontrol+0x298>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8004ffe:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <eepromKontrol+0x29c>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d902      	bls.n	800500c <eepromKontrol+0x240>
	    altLimit=1;
 8005006:	4b18      	ldr	r3, [pc, #96]	; (8005068 <eepromKontrol+0x29c>)
 8005008:	2201      	movs	r2, #1
 800500a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800500c:	4b17      	ldr	r3, [pc, #92]	; (800506c <eepromKontrol+0x2a0>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d902      	bls.n	800501a <eepromKontrol+0x24e>
	    basincSalteri=1;
 8005014:	4b15      	ldr	r3, [pc, #84]	; (800506c <eepromKontrol+0x2a0>)
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800501a:	4b15      	ldr	r3, [pc, #84]	; (8005070 <eepromKontrol+0x2a4>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b03      	cmp	r3, #3
 8005020:	d902      	bls.n	8005028 <eepromKontrol+0x25c>
	    kapiSecimleri=3;
 8005022:	4b13      	ldr	r3, [pc, #76]	; (8005070 <eepromKontrol+0x2a4>)
 8005024:	2203      	movs	r2, #3
 8005026:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005028:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <eepromKontrol+0x31c>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d902      	bls.n	8005036 <eepromKontrol+0x26a>
	    kapiAcTipi=0;
 8005030:	4b2d      	ldr	r3, [pc, #180]	; (80050e8 <eepromKontrol+0x31c>)
 8005032:	2200      	movs	r2, #0
 8005034:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005036:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <eepromKontrol+0x2a8>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d902      	bls.n	8005044 <eepromKontrol+0x278>
	    kapi1Tip=1;
 800503e:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <eepromKontrol+0x2a8>)
 8005040:	2201      	movs	r2, #1
 8005042:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <eepromKontrol+0x2ac>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b05      	cmp	r3, #5
 800504a:	d966      	bls.n	800511a <eepromKontrol+0x34e>
 800504c:	e062      	b.n	8005114 <eepromKontrol+0x348>
 800504e:	bf00      	nop
 8005050:	200001e0 	.word	0x200001e0
 8005054:	200000fc 	.word	0x200000fc
 8005058:	2000024e 	.word	0x2000024e
 800505c:	200002b1 	.word	0x200002b1
 8005060:	200002b4 	.word	0x200002b4
 8005064:	200002b5 	.word	0x200002b5
 8005068:	200002b6 	.word	0x200002b6
 800506c:	200002b7 	.word	0x200002b7
 8005070:	200002b8 	.word	0x200002b8
 8005074:	200002b9 	.word	0x200002b9
 8005078:	200002c9 	.word	0x200002c9
 800507c:	200002ba 	.word	0x200002ba
 8005080:	200002ca 	.word	0x200002ca
 8005084:	200002bb 	.word	0x200002bb
 8005088:	200002cb 	.word	0x200002cb
 800508c:	200002be 	.word	0x200002be
 8005090:	200002bf 	.word	0x200002bf
 8005094:	200002c0 	.word	0x200002c0
 8005098:	200002c1 	.word	0x200002c1
 800509c:	200002c2 	.word	0x200002c2
 80050a0:	200002c3 	.word	0x200002c3
 80050a4:	200002c4 	.word	0x200002c4
 80050a8:	200002c5 	.word	0x200002c5
 80050ac:	200002c6 	.word	0x200002c6
 80050b0:	200002c7 	.word	0x200002c7
 80050b4:	200002c8 	.word	0x200002c8
 80050b8:	200002cc 	.word	0x200002cc
 80050bc:	200002ce 	.word	0x200002ce
 80050c0:	200002ac 	.word	0x200002ac
 80050c4:	200002ad 	.word	0x200002ad
 80050c8:	200002ae 	.word	0x200002ae
 80050cc:	200000a4 	.word	0x200000a4
 80050d0:	200000a5 	.word	0x200000a5
 80050d4:	200002af 	.word	0x200002af
 80050d8:	200002d1 	.word	0x200002d1
 80050dc:	200002cf 	.word	0x200002cf
 80050e0:	200002bd 	.word	0x200002bd
 80050e4:	200002d0 	.word	0x200002d0
 80050e8:	200002bc 	.word	0x200002bc
 80050ec:	200002d2 	.word	0x200002d2
 80050f0:	200002d3 	.word	0x200002d3
 80050f4:	200002d4 	.word	0x200002d4
 80050f8:	200002d5 	.word	0x200002d5
 80050fc:	200002d6 	.word	0x200002d6
 8005100:	200002d7 	.word	0x200002d7
 8005104:	200002d8 	.word	0x200002d8
 8005108:	200002d9 	.word	0x200002d9
 800510c:	200002da 	.word	0x200002da
 8005110:	200002db 	.word	0x200002db
	    kapi1AcSure=5;
 8005114:	4b60      	ldr	r3, [pc, #384]	; (8005298 <eepromKontrol+0x4cc>)
 8005116:	2205      	movs	r2, #5
 8005118:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800511a:	4b60      	ldr	r3, [pc, #384]	; (800529c <eepromKontrol+0x4d0>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d902      	bls.n	8005128 <eepromKontrol+0x35c>
	    kapi2Tip=1;
 8005122:	4b5e      	ldr	r3, [pc, #376]	; (800529c <eepromKontrol+0x4d0>)
 8005124:	2201      	movs	r2, #1
 8005126:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005128:	4b5d      	ldr	r3, [pc, #372]	; (80052a0 <eepromKontrol+0x4d4>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b05      	cmp	r3, #5
 800512e:	d902      	bls.n	8005136 <eepromKontrol+0x36a>
	    kapi2AcSure=5;
 8005130:	4b5b      	ldr	r3, [pc, #364]	; (80052a0 <eepromKontrol+0x4d4>)
 8005132:	2205      	movs	r2, #5
 8005134:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005136:	4b5b      	ldr	r3, [pc, #364]	; (80052a4 <eepromKontrol+0x4d8>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d902      	bls.n	8005144 <eepromKontrol+0x378>
	    kapitablaTip=1;
 800513e:	4b59      	ldr	r3, [pc, #356]	; (80052a4 <eepromKontrol+0x4d8>)
 8005140:	2201      	movs	r2, #1
 8005142:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005144:	4b58      	ldr	r3, [pc, #352]	; (80052a8 <eepromKontrol+0x4dc>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d902      	bls.n	8005152 <eepromKontrol+0x386>
	    kapiTablaAcKonum=2;
 800514c:	4b56      	ldr	r3, [pc, #344]	; (80052a8 <eepromKontrol+0x4dc>)
 800514e:	2202      	movs	r2, #2
 8005150:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005152:	4b56      	ldr	r3, [pc, #344]	; (80052ac <eepromKontrol+0x4e0>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b05      	cmp	r3, #5
 8005158:	d902      	bls.n	8005160 <eepromKontrol+0x394>
	    kapiTablaAcSure=5;
 800515a:	4b54      	ldr	r3, [pc, #336]	; (80052ac <eepromKontrol+0x4e0>)
 800515c:	2205      	movs	r2, #5
 800515e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005160:	4b53      	ldr	r3, [pc, #332]	; (80052b0 <eepromKontrol+0x4e4>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d902      	bls.n	800516e <eepromKontrol+0x3a2>
	    yukariYavasLimit=0;
 8005168:	4b51      	ldr	r3, [pc, #324]	; (80052b0 <eepromKontrol+0x4e4>)
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 800516e:	4b51      	ldr	r3, [pc, #324]	; (80052b4 <eepromKontrol+0x4e8>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d902      	bls.n	800517c <eepromKontrol+0x3b0>
	    devirmeYuruyusSecim=0;
 8005176:	4b4f      	ldr	r3, [pc, #316]	; (80052b4 <eepromKontrol+0x4e8>)
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 800517c:	4b4e      	ldr	r3, [pc, #312]	; (80052b8 <eepromKontrol+0x4ec>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d902      	bls.n	800518a <eepromKontrol+0x3be>
	    devirmeYukariIleriLimit=1;
 8005184:	4b4c      	ldr	r3, [pc, #304]	; (80052b8 <eepromKontrol+0x4ec>)
 8005186:	2201      	movs	r2, #1
 8005188:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 800518a:	4b4c      	ldr	r3, [pc, #304]	; (80052bc <eepromKontrol+0x4f0>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d902      	bls.n	8005198 <eepromKontrol+0x3cc>
	    devirmeAsagiGeriLimit=1;
 8005192:	4b4a      	ldr	r3, [pc, #296]	; (80052bc <eepromKontrol+0x4f0>)
 8005194:	2201      	movs	r2, #1
 8005196:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005198:	4b49      	ldr	r3, [pc, #292]	; (80052c0 <eepromKontrol+0x4f4>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d902      	bls.n	80051a6 <eepromKontrol+0x3da>
	    devirmeSilindirTipi=0;
 80051a0:	4b47      	ldr	r3, [pc, #284]	; (80052c0 <eepromKontrol+0x4f4>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80051a6:	4b47      	ldr	r3, [pc, #284]	; (80052c4 <eepromKontrol+0x4f8>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d902      	bls.n	80051b4 <eepromKontrol+0x3e8>
	    platformSilindirTipi=0;
 80051ae:	4b45      	ldr	r3, [pc, #276]	; (80052c4 <eepromKontrol+0x4f8>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80051b4:	4b44      	ldr	r3, [pc, #272]	; (80052c8 <eepromKontrol+0x4fc>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b05      	cmp	r3, #5
 80051ba:	d902      	bls.n	80051c2 <eepromKontrol+0x3f6>
	    yukariValfTmr=0;
 80051bc:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <eepromKontrol+0x4fc>)
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80051c2:	4b42      	ldr	r3, [pc, #264]	; (80052cc <eepromKontrol+0x500>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b05      	cmp	r3, #5
 80051c8:	d902      	bls.n	80051d0 <eepromKontrol+0x404>
	    asagiValfTmr=0;
 80051ca:	4b40      	ldr	r3, [pc, #256]	; (80052cc <eepromKontrol+0x500>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80051d0:	4b3f      	ldr	r3, [pc, #252]	; (80052d0 <eepromKontrol+0x504>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b05      	cmp	r3, #5
 80051d6:	d902      	bls.n	80051de <eepromKontrol+0x412>
	    devirmeYukariIleriTmr=0;
 80051d8:	4b3d      	ldr	r3, [pc, #244]	; (80052d0 <eepromKontrol+0x504>)
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80051de:	4b3d      	ldr	r3, [pc, #244]	; (80052d4 <eepromKontrol+0x508>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b05      	cmp	r3, #5
 80051e4:	d902      	bls.n	80051ec <eepromKontrol+0x420>
	    devirmeAsagiGeriTmr=0;
 80051e6:	4b3b      	ldr	r3, [pc, #236]	; (80052d4 <eepromKontrol+0x508>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80051ec:	4b3a      	ldr	r3, [pc, #232]	; (80052d8 <eepromKontrol+0x50c>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2bb4      	cmp	r3, #180	; 0xb4
 80051f2:	d902      	bls.n	80051fa <eepromKontrol+0x42e>
	    makineCalismaTmr=60;
 80051f4:	4b38      	ldr	r3, [pc, #224]	; (80052d8 <eepromKontrol+0x50c>)
 80051f6:	223c      	movs	r2, #60	; 0x3c
 80051f8:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80051fa:	4b38      	ldr	r3, [pc, #224]	; (80052dc <eepromKontrol+0x510>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d902      	bls.n	8005208 <eepromKontrol+0x43c>
	    buzzer=0;
 8005202:	4b36      	ldr	r3, [pc, #216]	; (80052dc <eepromKontrol+0x510>)
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005208:	4b35      	ldr	r3, [pc, #212]	; (80052e0 <eepromKontrol+0x514>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d902      	bls.n	8005216 <eepromKontrol+0x44a>
	    demoMode=0;
 8005210:	4b33      	ldr	r3, [pc, #204]	; (80052e0 <eepromKontrol+0x514>)
 8005212:	2200      	movs	r2, #0
 8005214:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005216:	4b33      	ldr	r3, [pc, #204]	; (80052e4 <eepromKontrol+0x518>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d902      	bls.n	8005224 <eepromKontrol+0x458>
	    calismaSayModu=0;
 800521e:	4b31      	ldr	r3, [pc, #196]	; (80052e4 <eepromKontrol+0x518>)
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005224:	4b30      	ldr	r3, [pc, #192]	; (80052e8 <eepromKontrol+0x51c>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d902      	bls.n	8005232 <eepromKontrol+0x466>
	    dilSecim=0;
 800522c:	4b2e      	ldr	r3, [pc, #184]	; (80052e8 <eepromKontrol+0x51c>)
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005232:	4b2e      	ldr	r3, [pc, #184]	; (80052ec <eepromKontrol+0x520>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d902      	bls.n	8005240 <eepromKontrol+0x474>
		iotMode=0;
 800523a:	4b2c      	ldr	r3, [pc, #176]	; (80052ec <eepromKontrol+0x520>)
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 8005240:	4b2b      	ldr	r3, [pc, #172]	; (80052f0 <eepromKontrol+0x524>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	4b2b      	ldr	r3, [pc, #172]	; (80052f4 <eepromKontrol+0x528>)
 8005248:	441a      	add	r2, r3
 800524a:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <eepromKontrol+0x52c>)
 800524c:	6810      	ldr	r0, [r2, #0]
 800524e:	6851      	ldr	r1, [r2, #4]
 8005250:	6892      	ldr	r2, [r2, #8]
 8005252:	c307      	stmia	r3!, {r0, r1, r2}
	memcpy(wifiSSID, (char *)&eepromData[ssidStartPos], 20);
 8005254:	4b29      	ldr	r3, [pc, #164]	; (80052fc <eepromKontrol+0x530>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	4b26      	ldr	r3, [pc, #152]	; (80052f4 <eepromKontrol+0x528>)
 800525c:	4413      	add	r3, r2
 800525e:	4a28      	ldr	r2, [pc, #160]	; (8005300 <eepromKontrol+0x534>)
 8005260:	4614      	mov	r4, r2
 8005262:	461d      	mov	r5, r3
 8005264:	6828      	ldr	r0, [r5, #0]
 8005266:	6869      	ldr	r1, [r5, #4]
 8005268:	68aa      	ldr	r2, [r5, #8]
 800526a:	68eb      	ldr	r3, [r5, #12]
 800526c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800526e:	6928      	ldr	r0, [r5, #16]
 8005270:	6020      	str	r0, [r4, #0]
	memcpy(wifiPass, (char *)&eepromData[passStartPos], 20);
 8005272:	4b24      	ldr	r3, [pc, #144]	; (8005304 <eepromKontrol+0x538>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	4b1e      	ldr	r3, [pc, #120]	; (80052f4 <eepromKontrol+0x528>)
 800527a:	4413      	add	r3, r2
 800527c:	4a22      	ldr	r2, [pc, #136]	; (8005308 <eepromKontrol+0x53c>)
 800527e:	4614      	mov	r4, r2
 8005280:	461d      	mov	r5, r3
 8005282:	6828      	ldr	r0, [r5, #0]
 8005284:	6869      	ldr	r1, [r5, #4]
 8005286:	68aa      	ldr	r2, [r5, #8]
 8005288:	68eb      	ldr	r3, [r5, #12]
 800528a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800528c:	6928      	ldr	r0, [r5, #16]
 800528e:	6020      	str	r0, [r4, #0]

	if(iotMode == 1 && type == 1) {
		//convertAndSendData();
	}
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bdb0      	pop	{r4, r5, r7, pc}
 8005298:	200002c9 	.word	0x200002c9
 800529c:	200002ba 	.word	0x200002ba
 80052a0:	200002ca 	.word	0x200002ca
 80052a4:	200002bb 	.word	0x200002bb
 80052a8:	200002bd 	.word	0x200002bd
 80052ac:	200002cb 	.word	0x200002cb
 80052b0:	200002be 	.word	0x200002be
 80052b4:	200002bf 	.word	0x200002bf
 80052b8:	200002c0 	.word	0x200002c0
 80052bc:	200002c1 	.word	0x200002c1
 80052c0:	200002c2 	.word	0x200002c2
 80052c4:	200002c3 	.word	0x200002c3
 80052c8:	200002c4 	.word	0x200002c4
 80052cc:	200002c5 	.word	0x200002c5
 80052d0:	200002c6 	.word	0x200002c6
 80052d4:	200002c7 	.word	0x200002c7
 80052d8:	200002c8 	.word	0x200002c8
 80052dc:	200002cc 	.word	0x200002cc
 80052e0:	200002ce 	.word	0x200002ce
 80052e4:	200002d0 	.word	0x200002d0
 80052e8:	200002d1 	.word	0x200002d1
 80052ec:	200002cf 	.word	0x200002cf
 80052f0:	200000a1 	.word	0x200000a1
 80052f4:	200001e0 	.word	0x200001e0
 80052f8:	20000278 	.word	0x20000278
 80052fc:	200000a2 	.word	0x200000a2
 8005300:	20000284 	.word	0x20000284
 8005304:	200000a3 	.word	0x200000a3
 8005308:	20000298 	.word	0x20000298

0800530c <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 800530c:	b590      	push	{r4, r7, lr}
 800530e:	b089      	sub	sp, #36	; 0x24
 8005310:	af04      	add	r7, sp, #16
 8005312:	4603      	mov	r3, r0
 8005314:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005316:	4b26      	ldr	r3, [pc, #152]	; (80053b0 <hata2EEPROM+0xa4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	1e5a      	subs	r2, r3, #1
 800531c:	4b25      	ldr	r3, [pc, #148]	; (80053b4 <hata2EEPROM+0xa8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4413      	add	r3, r2
 8005322:	4a25      	ldr	r2, [pc, #148]	; (80053b8 <hata2EEPROM+0xac>)
 8005324:	5cd3      	ldrb	r3, [r2, r3]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 800532a:	f000 f849 	bl	80053c0 <eepromDataFillWithEmpty>
		goto veriEkleme;
 800532e:	e000      	b.n	8005332 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005330:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	e012      	b.n	800535e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005338:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <hata2EEPROM+0xa8>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4413      	add	r3, r2
 8005340:	4a1d      	ldr	r2, [pc, #116]	; (80053b8 <hata2EEPROM+0xac>)
 8005342:	5cd3      	ldrb	r3, [r2, r3]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d107      	bne.n	8005358 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005348:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <hata2EEPROM+0xa8>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	4919      	ldr	r1, [pc, #100]	; (80053b8 <hata2EEPROM+0xac>)
 8005352:	79fa      	ldrb	r2, [r7, #7]
 8005354:	54ca      	strb	r2, [r1, r3]
					break;
 8005356:	e007      	b.n	8005368 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3301      	adds	r3, #1
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	4b14      	ldr	r3, [pc, #80]	; (80053b0 <hata2EEPROM+0xa4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	429a      	cmp	r2, r3
 8005366:	dbe7      	blt.n	8005338 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8005368:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <hata2EEPROM+0xa8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	b299      	uxth	r1, r3
 800536e:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <hata2EEPROM+0xa4>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	b298      	uxth	r0, r3
 8005374:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <hata2EEPROM+0xa8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a0f      	ldr	r2, [pc, #60]	; (80053b8 <hata2EEPROM+0xac>)
 800537a:	4413      	add	r3, r2
 800537c:	4a0c      	ldr	r2, [pc, #48]	; (80053b0 <hata2EEPROM+0xa4>)
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	b292      	uxth	r2, r2
 8005382:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8005386:	9402      	str	r4, [sp, #8]
 8005388:	9201      	str	r2, [sp, #4]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	4603      	mov	r3, r0
 800538e:	460a      	mov	r2, r1
 8005390:	21a0      	movs	r1, #160	; 0xa0
 8005392:	480a      	ldr	r0, [pc, #40]	; (80053bc <hata2EEPROM+0xb0>)
 8005394:	f003 ff32 	bl	80091fc <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8005398:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800539c:	f002 fea4 	bl	80080e8 <HAL_Delay>
	eepromKontrol(1);
 80053a0:	2001      	movs	r0, #1
 80053a2:	f7ff fd13 	bl	8004dcc <eepromKontrol>
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd90      	pop	{r4, r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20000028 	.word	0x20000028
 80053b4:	2000002c 	.word	0x2000002c
 80053b8:	200001e0 	.word	0x200001e0
 80053bc:	200000fc 	.word	0x200000fc

080053c0 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 80053c6:	2300      	movs	r3, #0
 80053c8:	607b      	str	r3, [r7, #4]
 80053ca:	e009      	b.n	80053e0 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 80053cc:	4a0a      	ldr	r2, [pc, #40]	; (80053f8 <eepromDataFillWithEmpty+0x38>)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d4:	4a09      	ldr	r2, [pc, #36]	; (80053fc <eepromDataFillWithEmpty+0x3c>)
 80053d6:	2100      	movs	r1, #0
 80053d8:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3301      	adds	r3, #1
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	4b07      	ldr	r3, [pc, #28]	; (8005400 <eepromDataFillWithEmpty+0x40>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	dbf0      	blt.n	80053cc <eepromDataFillWithEmpty+0xc>
	}
}
 80053ea:	bf00      	nop
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000000 	.word	0x20000000
 80053fc:	200001e0 	.word	0x200001e0
 8005400:	20000028 	.word	0x20000028

08005404 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
	timer1=millis;
 8005408:	4b47      	ldr	r3, [pc, #284]	; (8005528 <bekle+0x124>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a47      	ldr	r2, [pc, #284]	; (800552c <bekle+0x128>)
 800540e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005410:	e002      	b.n	8005418 <bekle+0x14>
    	butonKontrol = 1;
 8005412:	4b47      	ldr	r3, [pc, #284]	; (8005530 <bekle+0x12c>)
 8005414:	2201      	movs	r2, #1
 8005416:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005418:	2101      	movs	r1, #1
 800541a:	4846      	ldr	r0, [pc, #280]	; (8005534 <bekle+0x130>)
 800541c:	f003 fc34 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005420:	4603      	mov	r3, r0
 8005422:	2b01      	cmp	r3, #1
 8005424:	d109      	bne.n	800543a <bekle+0x36>
 8005426:	4b40      	ldr	r3, [pc, #256]	; (8005528 <bekle+0x124>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b40      	ldr	r3, [pc, #256]	; (800552c <bekle+0x128>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d0ef      	beq.n	8005412 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005432:	e002      	b.n	800543a <bekle+0x36>
    	butonKontrol = 1;
 8005434:	4b3e      	ldr	r3, [pc, #248]	; (8005530 <bekle+0x12c>)
 8005436:	2201      	movs	r2, #1
 8005438:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800543a:	2108      	movs	r1, #8
 800543c:	483e      	ldr	r0, [pc, #248]	; (8005538 <bekle+0x134>)
 800543e:	f003 fc23 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005442:	4603      	mov	r3, r0
 8005444:	2b01      	cmp	r3, #1
 8005446:	d109      	bne.n	800545c <bekle+0x58>
 8005448:	4b37      	ldr	r3, [pc, #220]	; (8005528 <bekle+0x124>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	4b37      	ldr	r3, [pc, #220]	; (800552c <bekle+0x128>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d0ef      	beq.n	8005434 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005454:	e002      	b.n	800545c <bekle+0x58>
    	butonKontrol = 1;
 8005456:	4b36      	ldr	r3, [pc, #216]	; (8005530 <bekle+0x12c>)
 8005458:	2201      	movs	r2, #1
 800545a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800545c:	2102      	movs	r1, #2
 800545e:	4835      	ldr	r0, [pc, #212]	; (8005534 <bekle+0x130>)
 8005460:	f003 fc12 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005464:	4603      	mov	r3, r0
 8005466:	2b01      	cmp	r3, #1
 8005468:	d109      	bne.n	800547e <bekle+0x7a>
 800546a:	4b2f      	ldr	r3, [pc, #188]	; (8005528 <bekle+0x124>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4b2f      	ldr	r3, [pc, #188]	; (800552c <bekle+0x128>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d0ef      	beq.n	8005456 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005476:	e002      	b.n	800547e <bekle+0x7a>
    	butonKontrol = 1;
 8005478:	4b2d      	ldr	r3, [pc, #180]	; (8005530 <bekle+0x12c>)
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800547e:	2104      	movs	r1, #4
 8005480:	482c      	ldr	r0, [pc, #176]	; (8005534 <bekle+0x130>)
 8005482:	f003 fc01 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005486:	4603      	mov	r3, r0
 8005488:	2b01      	cmp	r3, #1
 800548a:	d109      	bne.n	80054a0 <bekle+0x9c>
 800548c:	4b26      	ldr	r3, [pc, #152]	; (8005528 <bekle+0x124>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	4b26      	ldr	r3, [pc, #152]	; (800552c <bekle+0x128>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d0ef      	beq.n	8005478 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005498:	e002      	b.n	80054a0 <bekle+0x9c>
    	butonKontrol = 1;
 800549a:	4b25      	ldr	r3, [pc, #148]	; (8005530 <bekle+0x12c>)
 800549c:	2201      	movs	r2, #1
 800549e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80054a0:	2108      	movs	r1, #8
 80054a2:	4824      	ldr	r0, [pc, #144]	; (8005534 <bekle+0x130>)
 80054a4:	f003 fbf0 	bl	8008c88 <HAL_GPIO_ReadPin>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d109      	bne.n	80054c2 <bekle+0xbe>
 80054ae:	4b1e      	ldr	r3, [pc, #120]	; (8005528 <bekle+0x124>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4b1e      	ldr	r3, [pc, #120]	; (800552c <bekle+0x128>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d0ef      	beq.n	800549a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80054ba:	e002      	b.n	80054c2 <bekle+0xbe>
    	butonKontrol = 1;
 80054bc:	4b1c      	ldr	r3, [pc, #112]	; (8005530 <bekle+0x12c>)
 80054be:	2201      	movs	r2, #1
 80054c0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80054c2:	2180      	movs	r1, #128	; 0x80
 80054c4:	481c      	ldr	r0, [pc, #112]	; (8005538 <bekle+0x134>)
 80054c6:	f003 fbdf 	bl	8008c88 <HAL_GPIO_ReadPin>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d109      	bne.n	80054e4 <bekle+0xe0>
 80054d0:	4b15      	ldr	r3, [pc, #84]	; (8005528 <bekle+0x124>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4b15      	ldr	r3, [pc, #84]	; (800552c <bekle+0x128>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d0ef      	beq.n	80054bc <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80054dc:	e002      	b.n	80054e4 <bekle+0xe0>
    	butonKontrol = 1;
 80054de:	4b14      	ldr	r3, [pc, #80]	; (8005530 <bekle+0x12c>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80054e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054e8:	4813      	ldr	r0, [pc, #76]	; (8005538 <bekle+0x134>)
 80054ea:	f003 fbcd 	bl	8008c88 <HAL_GPIO_ReadPin>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d109      	bne.n	8005508 <bekle+0x104>
 80054f4:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <bekle+0x124>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4b0c      	ldr	r3, [pc, #48]	; (800552c <bekle+0x128>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d0ee      	beq.n	80054de <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005500:	e002      	b.n	8005508 <bekle+0x104>
    	butonKontrol = 1;
 8005502:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <bekle+0x12c>)
 8005504:	2201      	movs	r2, #1
 8005506:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800550c:	480a      	ldr	r0, [pc, #40]	; (8005538 <bekle+0x134>)
 800550e:	f003 fbbb 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d105      	bne.n	8005524 <bekle+0x120>
 8005518:	4b03      	ldr	r3, [pc, #12]	; (8005528 <bekle+0x124>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	4b03      	ldr	r3, [pc, #12]	; (800552c <bekle+0x128>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d0ee      	beq.n	8005502 <bekle+0xfe>
    }

}
 8005524:	bf00      	nop
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20000258 	.word	0x20000258
 800552c:	20000260 	.word	0x20000260
 8005530:	200002df 	.word	0x200002df
 8005534:	40010800 	.word	0x40010800
 8005538:	40011000 	.word	0x40011000

0800553c <i2cTest>:

void i2cTest() {
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8005542:	463b      	mov	r3, r7
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	605a      	str	r2, [r3, #4]
 800554a:	609a      	str	r2, [r3, #8]
 800554c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 800554e:	4b50      	ldr	r3, [pc, #320]	; (8005690 <i2cTest+0x154>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	4b4e      	ldr	r3, [pc, #312]	; (8005690 <i2cTest+0x154>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0201 	bic.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 800555e:	484c      	ldr	r0, [pc, #304]	; (8005690 <i2cTest+0x154>)
 8005560:	f003 fd1e 	bl	8008fa0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005564:	23c0      	movs	r3, #192	; 0xc0
 8005566:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8005568:	2311      	movs	r3, #17
 800556a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800556c:	2301      	movs	r3, #1
 800556e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005570:	2303      	movs	r3, #3
 8005572:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005574:	463b      	mov	r3, r7
 8005576:	4619      	mov	r1, r3
 8005578:	4846      	ldr	r0, [pc, #280]	; (8005694 <i2cTest+0x158>)
 800557a:	f003 f925 	bl	80087c8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800557e:	2201      	movs	r2, #1
 8005580:	2140      	movs	r1, #64	; 0x40
 8005582:	4844      	ldr	r0, [pc, #272]	; (8005694 <i2cTest+0x158>)
 8005584:	f003 fb97 	bl	8008cb6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8005588:	2201      	movs	r2, #1
 800558a:	2180      	movs	r1, #128	; 0x80
 800558c:	4841      	ldr	r0, [pc, #260]	; (8005694 <i2cTest+0x158>)
 800558e:	f003 fb92 	bl	8008cb6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8005592:	200a      	movs	r0, #10
 8005594:	f002 fda8 	bl	80080e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8005598:	bf00      	nop
 800559a:	2140      	movs	r1, #64	; 0x40
 800559c:	483d      	ldr	r0, [pc, #244]	; (8005694 <i2cTest+0x158>)
 800559e:	f003 fb73 	bl	8008c88 <HAL_GPIO_ReadPin>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d006      	beq.n	80055b6 <i2cTest+0x7a>
 80055a8:	2180      	movs	r1, #128	; 0x80
 80055aa:	483a      	ldr	r0, [pc, #232]	; (8005694 <i2cTest+0x158>)
 80055ac:	f003 fb6c 	bl	8008c88 <HAL_GPIO_ReadPin>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d1f1      	bne.n	800559a <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80055b6:	2200      	movs	r2, #0
 80055b8:	2180      	movs	r1, #128	; 0x80
 80055ba:	4836      	ldr	r0, [pc, #216]	; (8005694 <i2cTest+0x158>)
 80055bc:	f003 fb7b 	bl	8008cb6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 80055c0:	200a      	movs	r0, #10
 80055c2:	f002 fd91 	bl	80080e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 80055c6:	bf00      	nop
 80055c8:	2180      	movs	r1, #128	; 0x80
 80055ca:	4832      	ldr	r0, [pc, #200]	; (8005694 <i2cTest+0x158>)
 80055cc:	f003 fb5c 	bl	8008c88 <HAL_GPIO_ReadPin>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d0f8      	beq.n	80055c8 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80055d6:	2200      	movs	r2, #0
 80055d8:	2140      	movs	r1, #64	; 0x40
 80055da:	482e      	ldr	r0, [pc, #184]	; (8005694 <i2cTest+0x158>)
 80055dc:	f003 fb6b 	bl	8008cb6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80055e0:	200a      	movs	r0, #10
 80055e2:	f002 fd81 	bl	80080e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80055e6:	bf00      	nop
 80055e8:	2140      	movs	r1, #64	; 0x40
 80055ea:	482a      	ldr	r0, [pc, #168]	; (8005694 <i2cTest+0x158>)
 80055ec:	f003 fb4c 	bl	8008c88 <HAL_GPIO_ReadPin>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d0f8      	beq.n	80055e8 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80055f6:	2201      	movs	r2, #1
 80055f8:	2140      	movs	r1, #64	; 0x40
 80055fa:	4826      	ldr	r0, [pc, #152]	; (8005694 <i2cTest+0x158>)
 80055fc:	f003 fb5b 	bl	8008cb6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005600:	200a      	movs	r0, #10
 8005602:	f002 fd71 	bl	80080e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8005606:	bf00      	nop
 8005608:	2140      	movs	r1, #64	; 0x40
 800560a:	4822      	ldr	r0, [pc, #136]	; (8005694 <i2cTest+0x158>)
 800560c:	f003 fb3c 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005610:	4603      	mov	r3, r0
 8005612:	2b01      	cmp	r3, #1
 8005614:	d1f8      	bne.n	8005608 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8005616:	2201      	movs	r2, #1
 8005618:	2180      	movs	r1, #128	; 0x80
 800561a:	481e      	ldr	r0, [pc, #120]	; (8005694 <i2cTest+0x158>)
 800561c:	f003 fb4b 	bl	8008cb6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005620:	200a      	movs	r0, #10
 8005622:	f002 fd61 	bl	80080e8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8005626:	bf00      	nop
 8005628:	2180      	movs	r1, #128	; 0x80
 800562a:	481a      	ldr	r0, [pc, #104]	; (8005694 <i2cTest+0x158>)
 800562c:	f003 fb2c 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005630:	4603      	mov	r3, r0
 8005632:	2b01      	cmp	r3, #1
 8005634:	d1f8      	bne.n	8005628 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005636:	23c0      	movs	r3, #192	; 0xc0
 8005638:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800563a:	2312      	movs	r3, #18
 800563c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800563e:	2301      	movs	r3, #1
 8005640:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005642:	2303      	movs	r3, #3
 8005644:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005646:	463b      	mov	r3, r7
 8005648:	4619      	mov	r1, r3
 800564a:	4812      	ldr	r0, [pc, #72]	; (8005694 <i2cTest+0x158>)
 800564c:	f003 f8bc 	bl	80087c8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8005650:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <i2cTest+0x154>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <i2cTest+0x154>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800565e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <i2cTest+0x154>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <i2cTest+0x154>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800566e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8005670:	4b07      	ldr	r3, [pc, #28]	; (8005690 <i2cTest+0x154>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4b06      	ldr	r3, [pc, #24]	; (8005690 <i2cTest+0x154>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8005680:	4803      	ldr	r0, [pc, #12]	; (8005690 <i2cTest+0x154>)
 8005682:	f003 fb49 	bl	8008d18 <HAL_I2C_Init>
}
 8005686:	bf00      	nop
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	200000fc 	.word	0x200000fc
 8005694:	40010c00 	.word	0x40010c00

08005698 <checkLCDBacklight>:

void checkLCDBacklight() {
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 800569c:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <checkLCDBacklight+0x34>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <checkLCDBacklight+0x38>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	1ad2      	subs	r2, r2, r3
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <checkLCDBacklight+0x3c>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	4619      	mov	r1, r3
 80056ac:	460b      	mov	r3, r1
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d303      	bcc.n	80056c0 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 80056b8:	2000      	movs	r0, #0
 80056ba:	f7fa ff9f 	bl	80005fc <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80056be:	e002      	b.n	80056c6 <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 80056c0:	2001      	movs	r0, #1
 80056c2:	f7fa ff9b 	bl	80005fc <lcd_backlight>
}
 80056c6:	bf00      	nop
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000258 	.word	0x20000258
 80056d0:	20000274 	.word	0x20000274
 80056d4:	20000030 	.word	0x20000030

080056d8 <checkBasincSalteri>:

void checkBasincSalteri() {
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80056dc:	4b13      	ldr	r3, [pc, #76]	; (800572c <checkBasincSalteri+0x54>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d102      	bne.n	80056ea <checkBasincSalteri+0x12>
		basincVar=1;
 80056e4:	4b12      	ldr	r3, [pc, #72]	; (8005730 <checkBasincSalteri+0x58>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80056ea:	4b10      	ldr	r3, [pc, #64]	; (800572c <checkBasincSalteri+0x54>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d119      	bne.n	8005726 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80056f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056f6:	480f      	ldr	r0, [pc, #60]	; (8005734 <checkBasincSalteri+0x5c>)
 80056f8:	f003 fac6 	bl	8008c88 <HAL_GPIO_ReadPin>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10a      	bne.n	8005718 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8005702:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <checkBasincSalteri+0x60>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4b0d      	ldr	r3, [pc, #52]	; (800573c <checkBasincSalteri+0x64>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d90a      	bls.n	8005726 <checkBasincSalteri+0x4e>
				basincVar=1;
 8005710:	4b07      	ldr	r3, [pc, #28]	; (8005730 <checkBasincSalteri+0x58>)
 8005712:	2201      	movs	r2, #1
 8005714:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8005716:	e006      	b.n	8005726 <checkBasincSalteri+0x4e>
			timer5=millis;
 8005718:	4b07      	ldr	r3, [pc, #28]	; (8005738 <checkBasincSalteri+0x60>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a07      	ldr	r2, [pc, #28]	; (800573c <checkBasincSalteri+0x64>)
 800571e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8005720:	4b03      	ldr	r3, [pc, #12]	; (8005730 <checkBasincSalteri+0x58>)
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
}
 8005726:	bf00      	nop
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	200002b7 	.word	0x200002b7
 8005730:	200002b3 	.word	0x200002b3
 8005734:	40011000 	.word	0x40011000
 8005738:	20000258 	.word	0x20000258
 800573c:	20000270 	.word	0x20000270

08005740 <checkBasGonder>:

void checkBasGonder() {
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005744:	4b1b      	ldr	r3, [pc, #108]	; (80057b4 <checkBasGonder+0x74>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d10b      	bne.n	8005764 <checkBasGonder+0x24>
 800574c:	4b1a      	ldr	r3, [pc, #104]	; (80057b8 <checkBasGonder+0x78>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d007      	beq.n	8005764 <checkBasGonder+0x24>
 8005754:	4b19      	ldr	r3, [pc, #100]	; (80057bc <checkBasGonder+0x7c>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d103      	bne.n	8005764 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 800575c:	4b18      	ldr	r3, [pc, #96]	; (80057c0 <checkBasGonder+0x80>)
 800575e:	2201      	movs	r2, #1
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	e009      	b.n	8005778 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8005764:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <checkBasGonder+0x78>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f083 0301 	eor.w	r3, r3, #1
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8005772:	4b13      	ldr	r3, [pc, #76]	; (80057c0 <checkBasGonder+0x80>)
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005778:	4b0e      	ldr	r3, [pc, #56]	; (80057b4 <checkBasGonder+0x74>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d10b      	bne.n	8005798 <checkBasGonder+0x58>
 8005780:	4b10      	ldr	r3, [pc, #64]	; (80057c4 <checkBasGonder+0x84>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d007      	beq.n	8005798 <checkBasGonder+0x58>
 8005788:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <checkBasGonder+0x7c>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d103      	bne.n	8005798 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8005790:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <checkBasGonder+0x88>)
 8005792:	2201      	movs	r2, #1
 8005794:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8005796:	e009      	b.n	80057ac <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8005798:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <checkBasGonder+0x84>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	f083 0301 	eor.w	r3, r3, #1
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80057a6:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <checkBasGonder+0x88>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	701a      	strb	r2, [r3, #0]
}
 80057ac:	bf00      	nop
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr
 80057b4:	200002b1 	.word	0x200002b1
 80057b8:	200002e5 	.word	0x200002e5
 80057bc:	200002bf 	.word	0x200002bf
 80057c0:	200002ec 	.word	0x200002ec
 80057c4:	200002e8 	.word	0x200002e8
 80057c8:	200002ed 	.word	0x200002ed

080057cc <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80057d0:	4b24      	ldr	r3, [pc, #144]	; (8005864 <checkKapiSecimleri+0x98>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80057d8:	4b23      	ldr	r3, [pc, #140]	; (8005868 <checkKapiSecimleri+0x9c>)
 80057da:	2201      	movs	r2, #1
 80057dc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80057de:	4b21      	ldr	r3, [pc, #132]	; (8005864 <checkKapiSecimleri+0x98>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d10e      	bne.n	8005804 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80057e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057ea:	4820      	ldr	r0, [pc, #128]	; (800586c <checkKapiSecimleri+0xa0>)
 80057ec:	f003 fa4c 	bl	8008c88 <HAL_GPIO_ReadPin>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80057f6:	4b1c      	ldr	r3, [pc, #112]	; (8005868 <checkKapiSecimleri+0x9c>)
 80057f8:	2201      	movs	r2, #1
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	e002      	b.n	8005804 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80057fe:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <checkKapiSecimleri+0x9c>)
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8005804:	4b17      	ldr	r3, [pc, #92]	; (8005864 <checkKapiSecimleri+0x98>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d10e      	bne.n	800582a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 800580c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005810:	4816      	ldr	r0, [pc, #88]	; (800586c <checkKapiSecimleri+0xa0>)
 8005812:	f003 fa39 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d103      	bne.n	8005824 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 800581c:	4b12      	ldr	r3, [pc, #72]	; (8005868 <checkKapiSecimleri+0x9c>)
 800581e:	2201      	movs	r2, #1
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	e002      	b.n	800582a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8005824:	4b10      	ldr	r3, [pc, #64]	; (8005868 <checkKapiSecimleri+0x9c>)
 8005826:	2200      	movs	r2, #0
 8005828:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800582a:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <checkKapiSecimleri+0x98>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b03      	cmp	r3, #3
 8005830:	d116      	bne.n	8005860 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8005832:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005836:	480d      	ldr	r0, [pc, #52]	; (800586c <checkKapiSecimleri+0xa0>)
 8005838:	f003 fa26 	bl	8008c88 <HAL_GPIO_ReadPin>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10b      	bne.n	800585a <checkKapiSecimleri+0x8e>
 8005842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005846:	4809      	ldr	r0, [pc, #36]	; (800586c <checkKapiSecimleri+0xa0>)
 8005848:	f003 fa1e 	bl	8008c88 <HAL_GPIO_ReadPin>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d103      	bne.n	800585a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <checkKapiSecimleri+0x9c>)
 8005854:	2201      	movs	r2, #1
 8005856:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8005858:	e002      	b.n	8005860 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800585a:	4b03      	ldr	r3, [pc, #12]	; (8005868 <checkKapiSecimleri+0x9c>)
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
}
 8005860:	bf00      	nop
 8005862:	bd80      	pop	{r7, pc}
 8005864:	200002b8 	.word	0x200002b8
 8005868:	20000303 	.word	0x20000303
 800586c:	40010800 	.word	0x40010800

08005870 <checkAktifCalisma>:

void checkAktifCalisma() {
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005874:	4b62      	ldr	r3, [pc, #392]	; (8005a00 <checkAktifCalisma+0x190>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	f041 8332 	bne.w	8006ee2 <checkAktifCalisma+0x1672>
 800587e:	4b61      	ldr	r3, [pc, #388]	; (8005a04 <checkAktifCalisma+0x194>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f041 832d 	bne.w	8006ee2 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8005888:	4b5f      	ldr	r3, [pc, #380]	; (8005a08 <checkAktifCalisma+0x198>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d11a      	bne.n	80058c6 <checkAktifCalisma+0x56>
 8005890:	4b5e      	ldr	r3, [pc, #376]	; (8005a0c <checkAktifCalisma+0x19c>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d116      	bne.n	80058c6 <checkAktifCalisma+0x56>
 8005898:	4b5d      	ldr	r3, [pc, #372]	; (8005a10 <checkAktifCalisma+0x1a0>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <checkAktifCalisma+0x46>
 80058a0:	4b5c      	ldr	r3, [pc, #368]	; (8005a14 <checkAktifCalisma+0x1a4>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	f083 0301 	eor.w	r3, r3, #1
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <checkAktifCalisma+0x46>
 80058ae:	4b5a      	ldr	r3, [pc, #360]	; (8005a18 <checkAktifCalisma+0x1a8>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d007      	beq.n	80058c6 <checkAktifCalisma+0x56>
 80058b6:	4b59      	ldr	r3, [pc, #356]	; (8005a1c <checkAktifCalisma+0x1ac>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d018      	beq.n	80058f0 <checkAktifCalisma+0x80>
 80058be:	4b58      	ldr	r3, [pc, #352]	; (8005a20 <checkAktifCalisma+0x1b0>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d114      	bne.n	80058f0 <checkAktifCalisma+0x80>
 80058c6:	4b57      	ldr	r3, [pc, #348]	; (8005a24 <checkAktifCalisma+0x1b4>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d010      	beq.n	80058f0 <checkAktifCalisma+0x80>
 80058ce:	4b56      	ldr	r3, [pc, #344]	; (8005a28 <checkAktifCalisma+0x1b8>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00c      	beq.n	80058f0 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80058d6:	2201      	movs	r2, #1
 80058d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058dc:	4853      	ldr	r0, [pc, #332]	; (8005a2c <checkAktifCalisma+0x1bc>)
 80058de:	f003 f9ea 	bl	8008cb6 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 80058e2:	4b53      	ldr	r3, [pc, #332]	; (8005a30 <checkAktifCalisma+0x1c0>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80058e8:	4b52      	ldr	r3, [pc, #328]	; (8005a34 <checkAktifCalisma+0x1c4>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	e008      	b.n	8005902 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80058f0:	2200      	movs	r2, #0
 80058f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058f6:	484d      	ldr	r0, [pc, #308]	; (8005a2c <checkAktifCalisma+0x1bc>)
 80058f8:	f003 f9dd 	bl	8008cb6 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80058fc:	4b4c      	ldr	r3, [pc, #304]	; (8005a30 <checkAktifCalisma+0x1c0>)
 80058fe:	2200      	movs	r2, #0
 8005900:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8005902:	4b40      	ldr	r3, [pc, #256]	; (8005a04 <checkAktifCalisma+0x194>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d160      	bne.n	80059cc <checkAktifCalisma+0x15c>
 800590a:	4b46      	ldr	r3, [pc, #280]	; (8005a24 <checkAktifCalisma+0x1b4>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d05c      	beq.n	80059cc <checkAktifCalisma+0x15c>
 8005912:	4b45      	ldr	r3, [pc, #276]	; (8005a28 <checkAktifCalisma+0x1b8>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d058      	beq.n	80059cc <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800591a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800591e:	4843      	ldr	r0, [pc, #268]	; (8005a2c <checkAktifCalisma+0x1bc>)
 8005920:	f003 f9b2 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <checkAktifCalisma+0xc2>
 800592a:	4b43      	ldr	r3, [pc, #268]	; (8005a38 <checkAktifCalisma+0x1c8>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d04c      	beq.n	80059cc <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005932:	2102      	movs	r1, #2
 8005934:	4841      	ldr	r0, [pc, #260]	; (8005a3c <checkAktifCalisma+0x1cc>)
 8005936:	f003 f9a7 	bl	8008c88 <HAL_GPIO_ReadPin>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d145      	bne.n	80059cc <checkAktifCalisma+0x15c>
				&& (basincVar)
 8005940:	4b3f      	ldr	r3, [pc, #252]	; (8005a40 <checkAktifCalisma+0x1d0>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d041      	beq.n	80059cc <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005948:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800594c:	4837      	ldr	r0, [pc, #220]	; (8005a2c <checkAktifCalisma+0x1bc>)
 800594e:	f003 f99b 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005952:	4603      	mov	r3, r0
 8005954:	2b01      	cmp	r3, #1
 8005956:	d10e      	bne.n	8005976 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800595c:	4833      	ldr	r0, [pc, #204]	; (8005a2c <checkAktifCalisma+0x1bc>)
 800595e:	f003 f993 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005962:	4603      	mov	r3, r0
 8005964:	2b01      	cmp	r3, #1
 8005966:	d106      	bne.n	8005976 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005968:	2140      	movs	r1, #64	; 0x40
 800596a:	4834      	ldr	r0, [pc, #208]	; (8005a3c <checkAktifCalisma+0x1cc>)
 800596c:	f003 f98c 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005970:	4603      	mov	r3, r0
 8005972:	2b01      	cmp	r3, #1
 8005974:	d003      	beq.n	800597e <checkAktifCalisma+0x10e>
 8005976:	4b24      	ldr	r3, [pc, #144]	; (8005a08 <checkAktifCalisma+0x198>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d026      	beq.n	80059cc <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 800597e:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <checkAktifCalisma+0x1a0>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	f083 0301 	eor.w	r3, r3, #1
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01f      	beq.n	80059cc <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 800598c:	4b1f      	ldr	r3, [pc, #124]	; (8005a0c <checkAktifCalisma+0x19c>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	f083 0301 	eor.w	r3, r3, #1
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d018      	beq.n	80059cc <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800599a:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <checkAktifCalisma+0x1ac>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f083 0301 	eor.w	r3, r3, #1
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d011      	beq.n	80059cc <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 80059a8:	4b26      	ldr	r3, [pc, #152]	; (8005a44 <checkAktifCalisma+0x1d4>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	f083 0301 	eor.w	r3, r3, #1
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 80059b6:	4b24      	ldr	r3, [pc, #144]	; (8005a48 <checkAktifCalisma+0x1d8>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	f083 0301 	eor.w	r3, r3, #1
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 80059c4:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <checkAktifCalisma+0x198>)
 80059c6:	2201      	movs	r2, #1
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	e002      	b.n	80059d2 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80059cc:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <checkAktifCalisma+0x198>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80059d2:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <checkAktifCalisma+0x198>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d03a      	beq.n	8005a50 <checkAktifCalisma+0x1e0>
 80059da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059de:	4817      	ldr	r0, [pc, #92]	; (8005a3c <checkAktifCalisma+0x1cc>)
 80059e0:	f003 f952 	bl	8008c88 <HAL_GPIO_ReadPin>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d132      	bne.n	8005a50 <checkAktifCalisma+0x1e0>
 80059ea:	4b18      	ldr	r3, [pc, #96]	; (8005a4c <checkAktifCalisma+0x1dc>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d02e      	beq.n	8005a50 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80059f2:	2201      	movs	r2, #1
 80059f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80059f8:	480c      	ldr	r0, [pc, #48]	; (8005a2c <checkAktifCalisma+0x1bc>)
 80059fa:	f003 f95c 	bl	8008cb6 <HAL_GPIO_WritePin>
 80059fe:	e02d      	b.n	8005a5c <checkAktifCalisma+0x1ec>
 8005a00:	200002ce 	.word	0x200002ce
 8005a04:	200002cd 	.word	0x200002cd
 8005a08:	200002e5 	.word	0x200002e5
 8005a0c:	200002e6 	.word	0x200002e6
 8005a10:	200002e8 	.word	0x200002e8
 8005a14:	200002e0 	.word	0x200002e0
 8005a18:	200002c3 	.word	0x200002c3
 8005a1c:	200002e7 	.word	0x200002e7
 8005a20:	200002c2 	.word	0x200002c2
 8005a24:	20000302 	.word	0x20000302
 8005a28:	20000303 	.word	0x20000303
 8005a2c:	40010c00 	.word	0x40010c00
 8005a30:	20000304 	.word	0x20000304
 8005a34:	200002ef 	.word	0x200002ef
 8005a38:	200002ec 	.word	0x200002ec
 8005a3c:	40011000 	.word	0x40011000
 8005a40:	200002b3 	.word	0x200002b3
 8005a44:	200002ea 	.word	0x200002ea
 8005a48:	200002eb 	.word	0x200002eb
 8005a4c:	200002be 	.word	0x200002be
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005a50:	2200      	movs	r2, #0
 8005a52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a56:	4860      	ldr	r0, [pc, #384]	; (8005bd8 <checkAktifCalisma+0x368>)
 8005a58:	f003 f92d 	bl	8008cb6 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005a5c:	4b5f      	ldr	r3, [pc, #380]	; (8005bdc <checkAktifCalisma+0x36c>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d013      	beq.n	8005a8c <checkAktifCalisma+0x21c>
 8005a64:	4b5e      	ldr	r3, [pc, #376]	; (8005be0 <checkAktifCalisma+0x370>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d007      	beq.n	8005a7c <checkAktifCalisma+0x20c>
 8005a6c:	4b5c      	ldr	r3, [pc, #368]	; (8005be0 <checkAktifCalisma+0x370>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d003      	beq.n	8005a7c <checkAktifCalisma+0x20c>
 8005a74:	4b5b      	ldr	r3, [pc, #364]	; (8005be4 <checkAktifCalisma+0x374>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d107      	bne.n	8005a8c <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	2104      	movs	r1, #4
 8005a80:	4855      	ldr	r0, [pc, #340]	; (8005bd8 <checkAktifCalisma+0x368>)
 8005a82:	f003 f918 	bl	8008cb6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8005a86:	4b58      	ldr	r3, [pc, #352]	; (8005be8 <checkAktifCalisma+0x378>)
 8005a88:	2201      	movs	r2, #1
 8005a8a:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005a8c:	4b56      	ldr	r3, [pc, #344]	; (8005be8 <checkAktifCalisma+0x378>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d02f      	beq.n	8005af4 <checkAktifCalisma+0x284>
 8005a94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a98:	484f      	ldr	r0, [pc, #316]	; (8005bd8 <checkAktifCalisma+0x368>)
 8005a9a:	f003 f8f5 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d106      	bne.n	8005ab2 <checkAktifCalisma+0x242>
 8005aa4:	4b51      	ldr	r3, [pc, #324]	; (8005bec <checkAktifCalisma+0x37c>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	f083 0301 	eor.w	r3, r3, #1
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <checkAktifCalisma+0x250>
 8005ab2:	2102      	movs	r1, #2
 8005ab4:	484e      	ldr	r0, [pc, #312]	; (8005bf0 <checkAktifCalisma+0x380>)
 8005ab6:	f003 f8e7 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d119      	bne.n	8005af4 <checkAktifCalisma+0x284>
 8005ac0:	4b4c      	ldr	r3, [pc, #304]	; (8005bf4 <checkAktifCalisma+0x384>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d015      	beq.n	8005af4 <checkAktifCalisma+0x284>
 8005ac8:	4b4b      	ldr	r3, [pc, #300]	; (8005bf8 <checkAktifCalisma+0x388>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d011      	beq.n	8005af4 <checkAktifCalisma+0x284>
 8005ad0:	4b4a      	ldr	r3, [pc, #296]	; (8005bfc <checkAktifCalisma+0x38c>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00d      	beq.n	8005af4 <checkAktifCalisma+0x284>
 8005ad8:	4b49      	ldr	r3, [pc, #292]	; (8005c00 <checkAktifCalisma+0x390>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	f083 0301 	eor.w	r3, r3, #1
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d006      	beq.n	8005af4 <checkAktifCalisma+0x284>
			timer2=millis;
 8005ae6:	4b47      	ldr	r3, [pc, #284]	; (8005c04 <checkAktifCalisma+0x394>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a47      	ldr	r2, [pc, #284]	; (8005c08 <checkAktifCalisma+0x398>)
 8005aec:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005aee:	4b44      	ldr	r3, [pc, #272]	; (8005c00 <checkAktifCalisma+0x390>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005af4:	4b43      	ldr	r3, [pc, #268]	; (8005c04 <checkAktifCalisma+0x394>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	4b43      	ldr	r3, [pc, #268]	; (8005c08 <checkAktifCalisma+0x398>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	4a43      	ldr	r2, [pc, #268]	; (8005c0c <checkAktifCalisma+0x39c>)
 8005b00:	7812      	ldrb	r2, [r2, #0]
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d303      	bcc.n	8005b0e <checkAktifCalisma+0x29e>
 8005b06:	4b3e      	ldr	r3, [pc, #248]	; (8005c00 <checkAktifCalisma+0x390>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d111      	bne.n	8005b32 <checkAktifCalisma+0x2c2>
 8005b0e:	4b39      	ldr	r3, [pc, #228]	; (8005bf4 <checkAktifCalisma+0x384>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	f083 0301 	eor.w	r3, r3, #1
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <checkAktifCalisma+0x2c2>
 8005b1c:	4b36      	ldr	r3, [pc, #216]	; (8005bf8 <checkAktifCalisma+0x388>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	f083 0301 	eor.w	r3, r3, #1
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d103      	bne.n	8005b32 <checkAktifCalisma+0x2c2>
 8005b2a:	4b34      	ldr	r3, [pc, #208]	; (8005bfc <checkAktifCalisma+0x38c>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005b32:	2200      	movs	r2, #0
 8005b34:	2104      	movs	r1, #4
 8005b36:	4828      	ldr	r0, [pc, #160]	; (8005bd8 <checkAktifCalisma+0x368>)
 8005b38:	f003 f8bd 	bl	8008cb6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005b3c:	4b2a      	ldr	r3, [pc, #168]	; (8005be8 <checkAktifCalisma+0x378>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005b42:	4b2f      	ldr	r3, [pc, #188]	; (8005c00 <checkAktifCalisma+0x390>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005b48:	4b31      	ldr	r3, [pc, #196]	; (8005c10 <checkAktifCalisma+0x3a0>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d102      	bne.n	8005b56 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005b50:	4b30      	ldr	r3, [pc, #192]	; (8005c14 <checkAktifCalisma+0x3a4>)
 8005b52:	2201      	movs	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005b56:	4b2e      	ldr	r3, [pc, #184]	; (8005c10 <checkAktifCalisma+0x3a0>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d116      	bne.n	8005b8c <checkAktifCalisma+0x31c>
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	; (8005c18 <checkAktifCalisma+0x3a8>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d112      	bne.n	8005b8c <checkAktifCalisma+0x31c>
 8005b66:	2101      	movs	r1, #1
 8005b68:	4821      	ldr	r0, [pc, #132]	; (8005bf0 <checkAktifCalisma+0x380>)
 8005b6a:	f003 f88d 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10b      	bne.n	8005b8c <checkAktifCalisma+0x31c>
 8005b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b78:	4817      	ldr	r0, [pc, #92]	; (8005bd8 <checkAktifCalisma+0x368>)
 8005b7a:	f003 f885 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005b84:	4b23      	ldr	r3, [pc, #140]	; (8005c14 <checkAktifCalisma+0x3a4>)
 8005b86:	2201      	movs	r2, #1
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	e011      	b.n	8005bb0 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005b8c:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <checkAktifCalisma+0x3a0>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d10d      	bne.n	8005bb0 <checkAktifCalisma+0x340>
 8005b94:	2101      	movs	r1, #1
 8005b96:	4816      	ldr	r0, [pc, #88]	; (8005bf0 <checkAktifCalisma+0x380>)
 8005b98:	f003 f876 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d106      	bne.n	8005bb0 <checkAktifCalisma+0x340>
 8005ba2:	4b1d      	ldr	r3, [pc, #116]	; (8005c18 <checkAktifCalisma+0x3a8>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d102      	bne.n	8005bb0 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005baa:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <checkAktifCalisma+0x3a4>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005bb0:	4b17      	ldr	r3, [pc, #92]	; (8005c10 <checkAktifCalisma+0x3a0>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d134      	bne.n	8005c22 <checkAktifCalisma+0x3b2>
 8005bb8:	4b17      	ldr	r3, [pc, #92]	; (8005c18 <checkAktifCalisma+0x3a8>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d130      	bne.n	8005c22 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	480b      	ldr	r0, [pc, #44]	; (8005bf0 <checkAktifCalisma+0x380>)
 8005bc4:	f003 f860 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d126      	bne.n	8005c1c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005bce:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <checkAktifCalisma+0x3a4>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	e025      	b.n	8005c22 <checkAktifCalisma+0x3b2>
 8005bd6:	bf00      	nop
 8005bd8:	40010c00 	.word	0x40010c00
 8005bdc:	200002e5 	.word	0x200002e5
 8005be0:	200002bf 	.word	0x200002bf
 8005be4:	200002c3 	.word	0x200002c3
 8005be8:	200002e9 	.word	0x200002e9
 8005bec:	200002ec 	.word	0x200002ec
 8005bf0:	40011000 	.word	0x40011000
 8005bf4:	20000302 	.word	0x20000302
 8005bf8:	20000303 	.word	0x20000303
 8005bfc:	200002b3 	.word	0x200002b3
 8005c00:	200002e1 	.word	0x200002e1
 8005c04:	20000258 	.word	0x20000258
 8005c08:	20000264 	.word	0x20000264
 8005c0c:	200002c4 	.word	0x200002c4
 8005c10:	200002b4 	.word	0x200002b4
 8005c14:	20000307 	.word	0x20000307
 8005c18:	200002b1 	.word	0x200002b1
			} else {
				cerceveVar=0;
 8005c1c:	4b7f      	ldr	r3, [pc, #508]	; (8005e1c <checkAktifCalisma+0x5ac>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005c22:	4b7f      	ldr	r3, [pc, #508]	; (8005e20 <checkAktifCalisma+0x5b0>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d17c      	bne.n	8005d24 <checkAktifCalisma+0x4b4>
 8005c2a:	4b7e      	ldr	r3, [pc, #504]	; (8005e24 <checkAktifCalisma+0x5b4>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d078      	beq.n	8005d24 <checkAktifCalisma+0x4b4>
 8005c32:	4b7d      	ldr	r3, [pc, #500]	; (8005e28 <checkAktifCalisma+0x5b8>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d074      	beq.n	8005d24 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005c3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c3e:	487b      	ldr	r0, [pc, #492]	; (8005e2c <checkAktifCalisma+0x5bc>)
 8005c40:	f003 f822 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <checkAktifCalisma+0x3e2>
 8005c4a:	4b79      	ldr	r3, [pc, #484]	; (8005e30 <checkAktifCalisma+0x5c0>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d068      	beq.n	8005d24 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005c52:	4b72      	ldr	r3, [pc, #456]	; (8005e1c <checkAktifCalisma+0x5ac>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d064      	beq.n	8005d24 <checkAktifCalisma+0x4b4>
 8005c5a:	4b76      	ldr	r3, [pc, #472]	; (8005e34 <checkAktifCalisma+0x5c4>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	f083 0301 	eor.w	r3, r3, #1
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d05d      	beq.n	8005d24 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005c68:	2104      	movs	r1, #4
 8005c6a:	4873      	ldr	r0, [pc, #460]	; (8005e38 <checkAktifCalisma+0x5c8>)
 8005c6c:	f003 f80c 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <checkAktifCalisma+0x40e>
 8005c76:	4b71      	ldr	r3, [pc, #452]	; (8005e3c <checkAktifCalisma+0x5cc>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d152      	bne.n	8005d24 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c82:	486a      	ldr	r0, [pc, #424]	; (8005e2c <checkAktifCalisma+0x5bc>)
 8005c84:	f003 f800 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d10e      	bne.n	8005cac <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c92:	4866      	ldr	r0, [pc, #408]	; (8005e2c <checkAktifCalisma+0x5bc>)
 8005c94:	f002 fff8 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d106      	bne.n	8005cac <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005c9e:	2140      	movs	r1, #64	; 0x40
 8005ca0:	4865      	ldr	r0, [pc, #404]	; (8005e38 <checkAktifCalisma+0x5c8>)
 8005ca2:	f002 fff1 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d003      	beq.n	8005cb4 <checkAktifCalisma+0x444>
 8005cac:	4b64      	ldr	r3, [pc, #400]	; (8005e40 <checkAktifCalisma+0x5d0>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d037      	beq.n	8005d24 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005cb4:	4b63      	ldr	r3, [pc, #396]	; (8005e44 <checkAktifCalisma+0x5d4>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	f083 0301 	eor.w	r3, r3, #1
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d030      	beq.n	8005d24 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005cc2:	4b61      	ldr	r3, [pc, #388]	; (8005e48 <checkAktifCalisma+0x5d8>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	f083 0301 	eor.w	r3, r3, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d029      	beq.n	8005d24 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005cd0:	4b5e      	ldr	r3, [pc, #376]	; (8005e4c <checkAktifCalisma+0x5dc>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f083 0301 	eor.w	r3, r3, #1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d022      	beq.n	8005d24 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005cde:	4b5c      	ldr	r3, [pc, #368]	; (8005e50 <checkAktifCalisma+0x5e0>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f083 0301 	eor.w	r3, r3, #1
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01b      	beq.n	8005d24 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005cec:	4b59      	ldr	r3, [pc, #356]	; (8005e54 <checkAktifCalisma+0x5e4>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	f083 0301 	eor.w	r3, r3, #1
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d014      	beq.n	8005d24 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005cfa:	4b57      	ldr	r3, [pc, #348]	; (8005e58 <checkAktifCalisma+0x5e8>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	f083 0301 	eor.w	r3, r3, #1
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00d      	beq.n	8005d24 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005d08:	2201      	movs	r2, #1
 8005d0a:	2102      	movs	r1, #2
 8005d0c:	4847      	ldr	r0, [pc, #284]	; (8005e2c <checkAktifCalisma+0x5bc>)
 8005d0e:	f002 ffd2 	bl	8008cb6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005d12:	4b4b      	ldr	r3, [pc, #300]	; (8005e40 <checkAktifCalisma+0x5d0>)
 8005d14:	2201      	movs	r2, #1
 8005d16:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005d18:	4b50      	ldr	r3, [pc, #320]	; (8005e5c <checkAktifCalisma+0x5ec>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8005d1e:	4b50      	ldr	r3, [pc, #320]	; (8005e60 <checkAktifCalisma+0x5f0>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005d24:	4b46      	ldr	r3, [pc, #280]	; (8005e40 <checkAktifCalisma+0x5d0>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d033      	beq.n	8005d94 <checkAktifCalisma+0x524>
 8005d2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d30:	483e      	ldr	r0, [pc, #248]	; (8005e2c <checkAktifCalisma+0x5bc>)
 8005d32:	f002 ffa9 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d106      	bne.n	8005d4a <checkAktifCalisma+0x4da>
 8005d3c:	4b3c      	ldr	r3, [pc, #240]	; (8005e30 <checkAktifCalisma+0x5c0>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	f083 0301 	eor.w	r3, r3, #1
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10a      	bne.n	8005d60 <checkAktifCalisma+0x4f0>
 8005d4a:	2104      	movs	r1, #4
 8005d4c:	483a      	ldr	r0, [pc, #232]	; (8005e38 <checkAktifCalisma+0x5c8>)
 8005d4e:	f002 ff9b 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d11d      	bne.n	8005d94 <checkAktifCalisma+0x524>
 8005d58:	4b38      	ldr	r3, [pc, #224]	; (8005e3c <checkAktifCalisma+0x5cc>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d019      	beq.n	8005d94 <checkAktifCalisma+0x524>
 8005d60:	4b30      	ldr	r3, [pc, #192]	; (8005e24 <checkAktifCalisma+0x5b4>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d015      	beq.n	8005d94 <checkAktifCalisma+0x524>
 8005d68:	4b2f      	ldr	r3, [pc, #188]	; (8005e28 <checkAktifCalisma+0x5b8>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d011      	beq.n	8005d94 <checkAktifCalisma+0x524>
 8005d70:	4b2a      	ldr	r3, [pc, #168]	; (8005e1c <checkAktifCalisma+0x5ac>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00d      	beq.n	8005d94 <checkAktifCalisma+0x524>
 8005d78:	4b3a      	ldr	r3, [pc, #232]	; (8005e64 <checkAktifCalisma+0x5f4>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	f083 0301 	eor.w	r3, r3, #1
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d006      	beq.n	8005d94 <checkAktifCalisma+0x524>
			timer2=millis;
 8005d86:	4b38      	ldr	r3, [pc, #224]	; (8005e68 <checkAktifCalisma+0x5f8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a38      	ldr	r2, [pc, #224]	; (8005e6c <checkAktifCalisma+0x5fc>)
 8005d8c:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005d8e:	4b35      	ldr	r3, [pc, #212]	; (8005e64 <checkAktifCalisma+0x5f4>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005d94:	4b34      	ldr	r3, [pc, #208]	; (8005e68 <checkAktifCalisma+0x5f8>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4b34      	ldr	r3, [pc, #208]	; (8005e6c <checkAktifCalisma+0x5fc>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	4a34      	ldr	r2, [pc, #208]	; (8005e70 <checkAktifCalisma+0x600>)
 8005da0:	7812      	ldrb	r2, [r2, #0]
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d303      	bcc.n	8005dae <checkAktifCalisma+0x53e>
 8005da6:	4b2f      	ldr	r3, [pc, #188]	; (8005e64 <checkAktifCalisma+0x5f4>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d114      	bne.n	8005dd8 <checkAktifCalisma+0x568>
 8005dae:	4b1d      	ldr	r3, [pc, #116]	; (8005e24 <checkAktifCalisma+0x5b4>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	f083 0301 	eor.w	r3, r3, #1
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10d      	bne.n	8005dd8 <checkAktifCalisma+0x568>
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <checkAktifCalisma+0x5b8>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	f083 0301 	eor.w	r3, r3, #1
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <checkAktifCalisma+0x568>
 8005dca:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <checkAktifCalisma+0x5ac>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	f083 0301 	eor.w	r3, r3, #1
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2102      	movs	r1, #2
 8005ddc:	4813      	ldr	r0, [pc, #76]	; (8005e2c <checkAktifCalisma+0x5bc>)
 8005dde:	f002 ff6a 	bl	8008cb6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005de2:	4b17      	ldr	r3, [pc, #92]	; (8005e40 <checkAktifCalisma+0x5d0>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005de8:	4b1e      	ldr	r3, [pc, #120]	; (8005e64 <checkAktifCalisma+0x5f4>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005dee:	4b14      	ldr	r3, [pc, #80]	; (8005e40 <checkAktifCalisma+0x5d0>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d040      	beq.n	8005e78 <checkAktifCalisma+0x608>
 8005df6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005dfa:	480f      	ldr	r0, [pc, #60]	; (8005e38 <checkAktifCalisma+0x5c8>)
 8005dfc:	f002 ff44 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d138      	bne.n	8005e78 <checkAktifCalisma+0x608>
 8005e06:	4b1b      	ldr	r3, [pc, #108]	; (8005e74 <checkAktifCalisma+0x604>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d034      	beq.n	8005e78 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005e0e:	2201      	movs	r2, #1
 8005e10:	2101      	movs	r1, #1
 8005e12:	4806      	ldr	r0, [pc, #24]	; (8005e2c <checkAktifCalisma+0x5bc>)
 8005e14:	f002 ff4f 	bl	8008cb6 <HAL_GPIO_WritePin>
 8005e18:	e033      	b.n	8005e82 <checkAktifCalisma+0x612>
 8005e1a:	bf00      	nop
 8005e1c:	20000307 	.word	0x20000307
 8005e20:	200002cd 	.word	0x200002cd
 8005e24:	20000302 	.word	0x20000302
 8005e28:	20000303 	.word	0x20000303
 8005e2c:	40010c00 	.word	0x40010c00
 8005e30:	200002ed 	.word	0x200002ed
 8005e34:	20000301 	.word	0x20000301
 8005e38:	40011000 	.word	0x40011000
 8005e3c:	200002b6 	.word	0x200002b6
 8005e40:	200002e8 	.word	0x200002e8
 8005e44:	200002e5 	.word	0x200002e5
 8005e48:	200002e9 	.word	0x200002e9
 8005e4c:	200002e6 	.word	0x200002e6
 8005e50:	200002e7 	.word	0x200002e7
 8005e54:	200002ea 	.word	0x200002ea
 8005e58:	200002eb 	.word	0x200002eb
 8005e5c:	200002f0 	.word	0x200002f0
 8005e60:	20000311 	.word	0x20000311
 8005e64:	200002e0 	.word	0x200002e0
 8005e68:	20000258 	.word	0x20000258
 8005e6c:	20000264 	.word	0x20000264
 8005e70:	200002c5 	.word	0x200002c5
 8005e74:	200002b5 	.word	0x200002b5
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	4836      	ldr	r0, [pc, #216]	; (8005f58 <checkAktifCalisma+0x6e8>)
 8005e7e:	f002 ff1a 	bl	8008cb6 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005e82:	4b36      	ldr	r3, [pc, #216]	; (8005f5c <checkAktifCalisma+0x6ec>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f040 8080 	bne.w	8005f8c <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005e8c:	4b34      	ldr	r3, [pc, #208]	; (8005f60 <checkAktifCalisma+0x6f0>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d003      	beq.n	8005e9c <checkAktifCalisma+0x62c>
 8005e94:	4b32      	ldr	r3, [pc, #200]	; (8005f60 <checkAktifCalisma+0x6f0>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d177      	bne.n	8005f8c <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005e9c:	4b31      	ldr	r3, [pc, #196]	; (8005f64 <checkAktifCalisma+0x6f4>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d073      	beq.n	8005f8c <checkAktifCalisma+0x71c>
 8005ea4:	4b30      	ldr	r3, [pc, #192]	; (8005f68 <checkAktifCalisma+0x6f8>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d06f      	beq.n	8005f8c <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005eac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005eb0:	4829      	ldr	r0, [pc, #164]	; (8005f58 <checkAktifCalisma+0x6e8>)
 8005eb2:	f002 fee9 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d167      	bne.n	8005f8c <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005ebc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ec0:	482a      	ldr	r0, [pc, #168]	; (8005f6c <checkAktifCalisma+0x6fc>)
 8005ec2:	f002 fee1 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <checkAktifCalisma+0x664>
 8005ecc:	4b28      	ldr	r3, [pc, #160]	; (8005f70 <checkAktifCalisma+0x700>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d15b      	bne.n	8005f8c <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005ed4:	2140      	movs	r1, #64	; 0x40
 8005ed6:	4825      	ldr	r0, [pc, #148]	; (8005f6c <checkAktifCalisma+0x6fc>)
 8005ed8:	f002 fed6 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d10f      	bne.n	8005f02 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005ee2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ee6:	481c      	ldr	r0, [pc, #112]	; (8005f58 <checkAktifCalisma+0x6e8>)
 8005ee8:	f002 fece 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d107      	bne.n	8005f02 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005ef2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ef6:	4818      	ldr	r0, [pc, #96]	; (8005f58 <checkAktifCalisma+0x6e8>)
 8005ef8:	f002 fec6 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d003      	beq.n	8005f0a <checkAktifCalisma+0x69a>
 8005f02:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <checkAktifCalisma+0x704>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d040      	beq.n	8005f8c <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005f0a:	4b1b      	ldr	r3, [pc, #108]	; (8005f78 <checkAktifCalisma+0x708>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	f083 0301 	eor.w	r3, r3, #1
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d039      	beq.n	8005f8c <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005f18:	4b18      	ldr	r3, [pc, #96]	; (8005f7c <checkAktifCalisma+0x70c>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	f083 0301 	eor.w	r3, r3, #1
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d032      	beq.n	8005f8c <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005f26:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <checkAktifCalisma+0x710>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	f083 0301 	eor.w	r3, r3, #1
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d02b      	beq.n	8005f8c <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005f34:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <checkAktifCalisma+0x714>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	f083 0301 	eor.w	r3, r3, #1
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d024      	beq.n	8005f8c <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005f42:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <checkAktifCalisma+0x718>)
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	f083 0301 	eor.w	r3, r3, #1
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01d      	beq.n	8005f8c <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005f50:	4b08      	ldr	r3, [pc, #32]	; (8005f74 <checkAktifCalisma+0x704>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	e01c      	b.n	8005f92 <checkAktifCalisma+0x722>
 8005f58:	40010c00 	.word	0x40010c00
 8005f5c:	200002cd 	.word	0x200002cd
 8005f60:	200002bf 	.word	0x200002bf
 8005f64:	20000302 	.word	0x20000302
 8005f68:	20000303 	.word	0x20000303
 8005f6c:	40011000 	.word	0x40011000
 8005f70:	200002c0 	.word	0x200002c0
 8005f74:	200002e6 	.word	0x200002e6
 8005f78:	200002e5 	.word	0x200002e5
 8005f7c:	200002e9 	.word	0x200002e9
 8005f80:	200002e8 	.word	0x200002e8
 8005f84:	200002e7 	.word	0x200002e7
 8005f88:	200002eb 	.word	0x200002eb
		} else {
			devmotoryukaricalisiyor=0;
 8005f8c:	4b64      	ldr	r3, [pc, #400]	; (8006120 <checkAktifCalisma+0x8b0>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005f92:	4b63      	ldr	r3, [pc, #396]	; (8006120 <checkAktifCalisma+0x8b0>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	2120      	movs	r1, #32
 8005f9e:	4861      	ldr	r0, [pc, #388]	; (8006124 <checkAktifCalisma+0x8b4>)
 8005fa0:	f002 fe89 	bl	8008cb6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005fa4:	4b60      	ldr	r3, [pc, #384]	; (8006128 <checkAktifCalisma+0x8b8>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005faa:	4b5f      	ldr	r3, [pc, #380]	; (8006128 <checkAktifCalisma+0x8b8>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d025      	beq.n	8005ffe <checkAktifCalisma+0x78e>
 8005fb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fb6:	485d      	ldr	r0, [pc, #372]	; (800612c <checkAktifCalisma+0x8bc>)
 8005fb8:	f002 fe66 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d007      	beq.n	8005fd2 <checkAktifCalisma+0x762>
 8005fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005fc6:	4857      	ldr	r0, [pc, #348]	; (8006124 <checkAktifCalisma+0x8b4>)
 8005fc8:	f002 fe5e 	bl	8008c88 <HAL_GPIO_ReadPin>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d115      	bne.n	8005ffe <checkAktifCalisma+0x78e>
 8005fd2:	4b57      	ldr	r3, [pc, #348]	; (8006130 <checkAktifCalisma+0x8c0>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d011      	beq.n	8005ffe <checkAktifCalisma+0x78e>
 8005fda:	4b56      	ldr	r3, [pc, #344]	; (8006134 <checkAktifCalisma+0x8c4>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00d      	beq.n	8005ffe <checkAktifCalisma+0x78e>
 8005fe2:	4b55      	ldr	r3, [pc, #340]	; (8006138 <checkAktifCalisma+0x8c8>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	f083 0301 	eor.w	r3, r3, #1
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d006      	beq.n	8005ffe <checkAktifCalisma+0x78e>
			timer2=millis;
 8005ff0:	4b52      	ldr	r3, [pc, #328]	; (800613c <checkAktifCalisma+0x8cc>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a52      	ldr	r2, [pc, #328]	; (8006140 <checkAktifCalisma+0x8d0>)
 8005ff6:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005ff8:	4b4f      	ldr	r3, [pc, #316]	; (8006138 <checkAktifCalisma+0x8c8>)
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005ffe:	4b4f      	ldr	r3, [pc, #316]	; (800613c <checkAktifCalisma+0x8cc>)
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b4f      	ldr	r3, [pc, #316]	; (8006140 <checkAktifCalisma+0x8d0>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	4a4e      	ldr	r2, [pc, #312]	; (8006144 <checkAktifCalisma+0x8d4>)
 800600a:	7812      	ldrb	r2, [r2, #0]
 800600c:	4293      	cmp	r3, r2
 800600e:	d303      	bcc.n	8006018 <checkAktifCalisma+0x7a8>
 8006010:	4b49      	ldr	r3, [pc, #292]	; (8006138 <checkAktifCalisma+0x8c8>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10d      	bne.n	8006034 <checkAktifCalisma+0x7c4>
 8006018:	4b45      	ldr	r3, [pc, #276]	; (8006130 <checkAktifCalisma+0x8c0>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	f083 0301 	eor.w	r3, r3, #1
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <checkAktifCalisma+0x7c4>
 8006026:	4b43      	ldr	r3, [pc, #268]	; (8006134 <checkAktifCalisma+0x8c4>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	f083 0301 	eor.w	r3, r3, #1
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006034:	2200      	movs	r2, #0
 8006036:	2120      	movs	r1, #32
 8006038:	483a      	ldr	r0, [pc, #232]	; (8006124 <checkAktifCalisma+0x8b4>)
 800603a:	f002 fe3c 	bl	8008cb6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800603e:	4b3a      	ldr	r3, [pc, #232]	; (8006128 <checkAktifCalisma+0x8b8>)
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006044:	4b3c      	ldr	r3, [pc, #240]	; (8006138 <checkAktifCalisma+0x8c8>)
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800604a:	4b3f      	ldr	r3, [pc, #252]	; (8006148 <checkAktifCalisma+0x8d8>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	f040 8088 	bne.w	8006164 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006054:	4b3d      	ldr	r3, [pc, #244]	; (800614c <checkAktifCalisma+0x8dc>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d003      	beq.n	8006064 <checkAktifCalisma+0x7f4>
 800605c:	4b3b      	ldr	r3, [pc, #236]	; (800614c <checkAktifCalisma+0x8dc>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b02      	cmp	r3, #2
 8006062:	d17f      	bne.n	8006164 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006064:	4b32      	ldr	r3, [pc, #200]	; (8006130 <checkAktifCalisma+0x8c0>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d07b      	beq.n	8006164 <checkAktifCalisma+0x8f4>
 800606c:	4b31      	ldr	r3, [pc, #196]	; (8006134 <checkAktifCalisma+0x8c4>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d077      	beq.n	8006164 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006074:	2140      	movs	r1, #64	; 0x40
 8006076:	482b      	ldr	r0, [pc, #172]	; (8006124 <checkAktifCalisma+0x8b4>)
 8006078:	f002 fe06 	bl	8008c88 <HAL_GPIO_ReadPin>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d170      	bne.n	8006164 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006082:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006086:	4827      	ldr	r0, [pc, #156]	; (8006124 <checkAktifCalisma+0x8b4>)
 8006088:	f002 fdfe 	bl	8008c88 <HAL_GPIO_ReadPin>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <checkAktifCalisma+0x82a>
 8006092:	4b2f      	ldr	r3, [pc, #188]	; (8006150 <checkAktifCalisma+0x8e0>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d164      	bne.n	8006164 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800609a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800609e:	4823      	ldr	r0, [pc, #140]	; (800612c <checkAktifCalisma+0x8bc>)
 80060a0:	f002 fdf2 	bl	8008c88 <HAL_GPIO_ReadPin>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d10f      	bne.n	80060ca <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80060aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060ae:	481f      	ldr	r0, [pc, #124]	; (800612c <checkAktifCalisma+0x8bc>)
 80060b0:	f002 fdea 	bl	8008c88 <HAL_GPIO_ReadPin>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d107      	bne.n	80060ca <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80060ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060be:	481b      	ldr	r0, [pc, #108]	; (800612c <checkAktifCalisma+0x8bc>)
 80060c0:	f002 fde2 	bl	8008c88 <HAL_GPIO_ReadPin>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d003      	beq.n	80060d2 <checkAktifCalisma+0x862>
 80060ca:	4b22      	ldr	r3, [pc, #136]	; (8006154 <checkAktifCalisma+0x8e4>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d048      	beq.n	8006164 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80060d2:	4b21      	ldr	r3, [pc, #132]	; (8006158 <checkAktifCalisma+0x8e8>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	f083 0301 	eor.w	r3, r3, #1
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d041      	beq.n	8006164 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80060e0:	4b1e      	ldr	r3, [pc, #120]	; (800615c <checkAktifCalisma+0x8ec>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	f083 0301 	eor.w	r3, r3, #1
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d03a      	beq.n	8006164 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80060ee:	4b1c      	ldr	r3, [pc, #112]	; (8006160 <checkAktifCalisma+0x8f0>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	f083 0301 	eor.w	r3, r3, #1
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d033      	beq.n	8006164 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <checkAktifCalisma+0x8b8>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	f083 0301 	eor.w	r3, r3, #1
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d02c      	beq.n	8006164 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800610a:	4b05      	ldr	r3, [pc, #20]	; (8006120 <checkAktifCalisma+0x8b0>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	f083 0301 	eor.w	r3, r3, #1
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d025      	beq.n	8006164 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006118:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <checkAktifCalisma+0x8e4>)
 800611a:	2201      	movs	r2, #1
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	e024      	b.n	800616a <checkAktifCalisma+0x8fa>
 8006120:	200002e6 	.word	0x200002e6
 8006124:	40011000 	.word	0x40011000
 8006128:	200002ea 	.word	0x200002ea
 800612c:	40010c00 	.word	0x40010c00
 8006130:	20000302 	.word	0x20000302
 8006134:	20000303 	.word	0x20000303
 8006138:	200002e2 	.word	0x200002e2
 800613c:	20000258 	.word	0x20000258
 8006140:	20000264 	.word	0x20000264
 8006144:	200002c6 	.word	0x200002c6
 8006148:	200002cd 	.word	0x200002cd
 800614c:	200002bf 	.word	0x200002bf
 8006150:	200002c1 	.word	0x200002c1
 8006154:	200002e7 	.word	0x200002e7
 8006158:	200002e5 	.word	0x200002e5
 800615c:	200002e9 	.word	0x200002e9
 8006160:	200002e8 	.word	0x200002e8
		} else {
			devmotorasagicalisiyor=0;
 8006164:	4b96      	ldr	r3, [pc, #600]	; (80063c0 <checkAktifCalisma+0xb50>)
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800616a:	4b95      	ldr	r3, [pc, #596]	; (80063c0 <checkAktifCalisma+0xb50>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006172:	2201      	movs	r2, #1
 8006174:	2110      	movs	r1, #16
 8006176:	4893      	ldr	r0, [pc, #588]	; (80063c4 <checkAktifCalisma+0xb54>)
 8006178:	f002 fd9d 	bl	8008cb6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 800617c:	4b92      	ldr	r3, [pc, #584]	; (80063c8 <checkAktifCalisma+0xb58>)
 800617e:	2201      	movs	r2, #1
 8006180:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006182:	4b91      	ldr	r3, [pc, #580]	; (80063c8 <checkAktifCalisma+0xb58>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d024      	beq.n	80061d4 <checkAktifCalisma+0x964>
 800618a:	2140      	movs	r1, #64	; 0x40
 800618c:	488d      	ldr	r0, [pc, #564]	; (80063c4 <checkAktifCalisma+0xb54>)
 800618e:	f002 fd7b 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006192:	4603      	mov	r3, r0
 8006194:	2b01      	cmp	r3, #1
 8006196:	d007      	beq.n	80061a8 <checkAktifCalisma+0x938>
 8006198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800619c:	4889      	ldr	r0, [pc, #548]	; (80063c4 <checkAktifCalisma+0xb54>)
 800619e:	f002 fd73 	bl	8008c88 <HAL_GPIO_ReadPin>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d115      	bne.n	80061d4 <checkAktifCalisma+0x964>
 80061a8:	4b88      	ldr	r3, [pc, #544]	; (80063cc <checkAktifCalisma+0xb5c>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d011      	beq.n	80061d4 <checkAktifCalisma+0x964>
 80061b0:	4b87      	ldr	r3, [pc, #540]	; (80063d0 <checkAktifCalisma+0xb60>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00d      	beq.n	80061d4 <checkAktifCalisma+0x964>
 80061b8:	4b86      	ldr	r3, [pc, #536]	; (80063d4 <checkAktifCalisma+0xb64>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	f083 0301 	eor.w	r3, r3, #1
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d006      	beq.n	80061d4 <checkAktifCalisma+0x964>
			timer2=millis;
 80061c6:	4b84      	ldr	r3, [pc, #528]	; (80063d8 <checkAktifCalisma+0xb68>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a84      	ldr	r2, [pc, #528]	; (80063dc <checkAktifCalisma+0xb6c>)
 80061cc:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80061ce:	4b81      	ldr	r3, [pc, #516]	; (80063d4 <checkAktifCalisma+0xb64>)
 80061d0:	2201      	movs	r2, #1
 80061d2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80061d4:	4b80      	ldr	r3, [pc, #512]	; (80063d8 <checkAktifCalisma+0xb68>)
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	4b80      	ldr	r3, [pc, #512]	; (80063dc <checkAktifCalisma+0xb6c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	4a80      	ldr	r2, [pc, #512]	; (80063e0 <checkAktifCalisma+0xb70>)
 80061e0:	7812      	ldrb	r2, [r2, #0]
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d303      	bcc.n	80061ee <checkAktifCalisma+0x97e>
 80061e6:	4b7b      	ldr	r3, [pc, #492]	; (80063d4 <checkAktifCalisma+0xb64>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10d      	bne.n	800620a <checkAktifCalisma+0x99a>
 80061ee:	4b77      	ldr	r3, [pc, #476]	; (80063cc <checkAktifCalisma+0xb5c>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	f083 0301 	eor.w	r3, r3, #1
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d106      	bne.n	800620a <checkAktifCalisma+0x99a>
 80061fc:	4b74      	ldr	r3, [pc, #464]	; (80063d0 <checkAktifCalisma+0xb60>)
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	f083 0301 	eor.w	r3, r3, #1
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800620a:	2200      	movs	r2, #0
 800620c:	2110      	movs	r1, #16
 800620e:	486d      	ldr	r0, [pc, #436]	; (80063c4 <checkAktifCalisma+0xb54>)
 8006210:	f002 fd51 	bl	8008cb6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006214:	4b6c      	ldr	r3, [pc, #432]	; (80063c8 <checkAktifCalisma+0xb58>)
 8006216:	2200      	movs	r2, #0
 8006218:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800621a:	4b6e      	ldr	r3, [pc, #440]	; (80063d4 <checkAktifCalisma+0xb64>)
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006220:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006224:	486f      	ldr	r0, [pc, #444]	; (80063e4 <checkAktifCalisma+0xb74>)
 8006226:	f002 fd2f 	bl	8008c88 <HAL_GPIO_ReadPin>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d120      	bne.n	8006272 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006230:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006234:	486b      	ldr	r0, [pc, #428]	; (80063e4 <checkAktifCalisma+0xb74>)
 8006236:	f002 fd27 	bl	8008c88 <HAL_GPIO_ReadPin>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d118      	bne.n	8006272 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006240:	2104      	movs	r1, #4
 8006242:	4868      	ldr	r0, [pc, #416]	; (80063e4 <checkAktifCalisma+0xb74>)
 8006244:	f002 fd20 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d111      	bne.n	8006272 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800624e:	2102      	movs	r1, #2
 8006250:	4864      	ldr	r0, [pc, #400]	; (80063e4 <checkAktifCalisma+0xb74>)
 8006252:	f002 fd19 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 800625c:	2101      	movs	r1, #1
 800625e:	4861      	ldr	r0, [pc, #388]	; (80063e4 <checkAktifCalisma+0xb74>)
 8006260:	f002 fd12 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d103      	bne.n	8006272 <checkAktifCalisma+0xa02>
			makineStop=1;
 800626a:	4b5f      	ldr	r3, [pc, #380]	; (80063e8 <checkAktifCalisma+0xb78>)
 800626c:	2201      	movs	r2, #1
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	e002      	b.n	8006278 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006272:	4b5d      	ldr	r3, [pc, #372]	; (80063e8 <checkAktifCalisma+0xb78>)
 8006274:	2200      	movs	r2, #0
 8006276:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006278:	4b5c      	ldr	r3, [pc, #368]	; (80063ec <checkAktifCalisma+0xb7c>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d144      	bne.n	800630a <checkAktifCalisma+0xa9a>
 8006280:	4b5b      	ldr	r3, [pc, #364]	; (80063f0 <checkAktifCalisma+0xb80>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d003      	beq.n	8006290 <checkAktifCalisma+0xa20>
 8006288:	4b59      	ldr	r3, [pc, #356]	; (80063f0 <checkAktifCalisma+0xb80>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b03      	cmp	r3, #3
 800628e:	d13c      	bne.n	800630a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006290:	2180      	movs	r1, #128	; 0x80
 8006292:	484c      	ldr	r0, [pc, #304]	; (80063c4 <checkAktifCalisma+0xb54>)
 8006294:	f002 fcf8 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <checkAktifCalisma+0xa36>
 800629e:	4b55      	ldr	r3, [pc, #340]	; (80063f4 <checkAktifCalisma+0xb84>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00b      	beq.n	80062be <checkAktifCalisma+0xa4e>
 80062a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062aa:	484e      	ldr	r0, [pc, #312]	; (80063e4 <checkAktifCalisma+0xb74>)
 80062ac:	f002 fcec 	bl	8008c88 <HAL_GPIO_ReadPin>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d129      	bne.n	800630a <checkAktifCalisma+0xa9a>
 80062b6:	4b4f      	ldr	r3, [pc, #316]	; (80063f4 <checkAktifCalisma+0xb84>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d125      	bne.n	800630a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80062be:	2104      	movs	r1, #4
 80062c0:	4840      	ldr	r0, [pc, #256]	; (80063c4 <checkAktifCalisma+0xb54>)
 80062c2:	f002 fce1 	bl	8008c88 <HAL_GPIO_ReadPin>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d003      	beq.n	80062d4 <checkAktifCalisma+0xa64>
 80062cc:	4b4a      	ldr	r3, [pc, #296]	; (80063f8 <checkAktifCalisma+0xb88>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d11a      	bne.n	800630a <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80062d4:	2102      	movs	r1, #2
 80062d6:	483b      	ldr	r0, [pc, #236]	; (80063c4 <checkAktifCalisma+0xb54>)
 80062d8:	f002 fcd6 	bl	8008c88 <HAL_GPIO_ReadPin>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d113      	bne.n	800630a <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80062e2:	4b46      	ldr	r3, [pc, #280]	; (80063fc <checkAktifCalisma+0xb8c>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	f083 0301 	eor.w	r3, r3, #1
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00c      	beq.n	800630a <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80062f0:	4b3d      	ldr	r3, [pc, #244]	; (80063e8 <checkAktifCalisma+0xb78>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d008      	beq.n	800630a <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80062f8:	4b41      	ldr	r3, [pc, #260]	; (8006400 <checkAktifCalisma+0xb90>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80062fe:	4b36      	ldr	r3, [pc, #216]	; (80063d8 <checkAktifCalisma+0xb68>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a40      	ldr	r2, [pc, #256]	; (8006404 <checkAktifCalisma+0xb94>)
 8006304:	6013      	str	r3, [r2, #0]
			bekle();
 8006306:	f7ff f87d 	bl	8005404 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800630a:	4b33      	ldr	r3, [pc, #204]	; (80063d8 <checkAktifCalisma+0xb68>)
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	4b3d      	ldr	r3, [pc, #244]	; (8006404 <checkAktifCalisma+0xb94>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	4a3c      	ldr	r2, [pc, #240]	; (8006408 <checkAktifCalisma+0xb98>)
 8006316:	7812      	ldrb	r2, [r2, #0]
 8006318:	4293      	cmp	r3, r2
 800631a:	d211      	bcs.n	8006340 <checkAktifCalisma+0xad0>
 800631c:	2104      	movs	r1, #4
 800631e:	4829      	ldr	r0, [pc, #164]	; (80063c4 <checkAktifCalisma+0xb54>)
 8006320:	f002 fcb2 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <checkAktifCalisma+0xad0>
 800632a:	4b33      	ldr	r3, [pc, #204]	; (80063f8 <checkAktifCalisma+0xb88>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d006      	beq.n	8006340 <checkAktifCalisma+0xad0>
 8006332:	4b2d      	ldr	r3, [pc, #180]	; (80063e8 <checkAktifCalisma+0xb78>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	f083 0301 	eor.w	r3, r3, #1
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006340:	4b2f      	ldr	r3, [pc, #188]	; (8006400 <checkAktifCalisma+0xb90>)
 8006342:	2200      	movs	r2, #0
 8006344:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006346:	4b29      	ldr	r3, [pc, #164]	; (80063ec <checkAktifCalisma+0xb7c>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d160      	bne.n	8006410 <checkAktifCalisma+0xba0>
 800634e:	4b28      	ldr	r3, [pc, #160]	; (80063f0 <checkAktifCalisma+0xb80>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d003      	beq.n	800635e <checkAktifCalisma+0xaee>
 8006356:	4b26      	ldr	r3, [pc, #152]	; (80063f0 <checkAktifCalisma+0xb80>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b03      	cmp	r3, #3
 800635c:	d158      	bne.n	8006410 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800635e:	2104      	movs	r1, #4
 8006360:	4818      	ldr	r0, [pc, #96]	; (80063c4 <checkAktifCalisma+0xb54>)
 8006362:	f002 fc91 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006366:	4603      	mov	r3, r0
 8006368:	2b01      	cmp	r3, #1
 800636a:	d003      	beq.n	8006374 <checkAktifCalisma+0xb04>
 800636c:	4b22      	ldr	r3, [pc, #136]	; (80063f8 <checkAktifCalisma+0xb88>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d14d      	bne.n	8006410 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006374:	2102      	movs	r1, #2
 8006376:	4813      	ldr	r0, [pc, #76]	; (80063c4 <checkAktifCalisma+0xb54>)
 8006378:	f002 fc86 	bl	8008c88 <HAL_GPIO_ReadPin>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d146      	bne.n	8006410 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006382:	2180      	movs	r1, #128	; 0x80
 8006384:	480f      	ldr	r0, [pc, #60]	; (80063c4 <checkAktifCalisma+0xb54>)
 8006386:	f002 fc7f 	bl	8008c88 <HAL_GPIO_ReadPin>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d103      	bne.n	8006398 <checkAktifCalisma+0xb28>
 8006390:	4b18      	ldr	r3, [pc, #96]	; (80063f4 <checkAktifCalisma+0xb84>)
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <checkAktifCalisma+0xb40>
 8006398:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800639c:	4811      	ldr	r0, [pc, #68]	; (80063e4 <checkAktifCalisma+0xb74>)
 800639e:	f002 fc73 	bl	8008c88 <HAL_GPIO_ReadPin>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d133      	bne.n	8006410 <checkAktifCalisma+0xba0>
 80063a8:	4b12      	ldr	r3, [pc, #72]	; (80063f4 <checkAktifCalisma+0xb84>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d12f      	bne.n	8006410 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 80063b0:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <checkAktifCalisma+0xb78>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d02b      	beq.n	8006410 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 80063b8:	4b14      	ldr	r3, [pc, #80]	; (800640c <checkAktifCalisma+0xb9c>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	e02a      	b.n	8006416 <checkAktifCalisma+0xba6>
 80063c0:	200002e7 	.word	0x200002e7
 80063c4:	40011000 	.word	0x40011000
 80063c8:	200002eb 	.word	0x200002eb
 80063cc:	20000302 	.word	0x20000302
 80063d0:	20000303 	.word	0x20000303
 80063d4:	200002e3 	.word	0x200002e3
 80063d8:	20000258 	.word	0x20000258
 80063dc:	20000264 	.word	0x20000264
 80063e0:	200002c6 	.word	0x200002c6
 80063e4:	40010c00 	.word	0x40010c00
 80063e8:	200002f2 	.word	0x200002f2
 80063ec:	200002b9 	.word	0x200002b9
 80063f0:	200002b8 	.word	0x200002b8
 80063f4:	200002bc 	.word	0x200002bc
 80063f8:	200002b6 	.word	0x200002b6
 80063fc:	200002df 	.word	0x200002df
 8006400:	200002f3 	.word	0x200002f3
 8006404:	2000025c 	.word	0x2000025c
 8006408:	200002c9 	.word	0x200002c9
 800640c:	200002f4 	.word	0x200002f4
		} else {
			kapi1butonkontrol=0;
 8006410:	4b8b      	ldr	r3, [pc, #556]	; (8006640 <checkAktifCalisma+0xdd0>)
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006416:	4b8b      	ldr	r3, [pc, #556]	; (8006644 <checkAktifCalisma+0xdd4>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d121      	bne.n	8006462 <checkAktifCalisma+0xbf2>
 800641e:	4b8a      	ldr	r3, [pc, #552]	; (8006648 <checkAktifCalisma+0xdd8>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d003      	beq.n	800642e <checkAktifCalisma+0xbbe>
 8006426:	4b88      	ldr	r3, [pc, #544]	; (8006648 <checkAktifCalisma+0xdd8>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b03      	cmp	r3, #3
 800642c:	d119      	bne.n	8006462 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800642e:	2104      	movs	r1, #4
 8006430:	4886      	ldr	r0, [pc, #536]	; (800664c <checkAktifCalisma+0xddc>)
 8006432:	f002 fc29 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006436:	4603      	mov	r3, r0
 8006438:	2b01      	cmp	r3, #1
 800643a:	d003      	beq.n	8006444 <checkAktifCalisma+0xbd4>
 800643c:	4b84      	ldr	r3, [pc, #528]	; (8006650 <checkAktifCalisma+0xde0>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10e      	bne.n	8006462 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006444:	2102      	movs	r1, #2
 8006446:	4881      	ldr	r0, [pc, #516]	; (800664c <checkAktifCalisma+0xddc>)
 8006448:	f002 fc1e 	bl	8008c88 <HAL_GPIO_ReadPin>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d107      	bne.n	8006462 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8006452:	4b80      	ldr	r3, [pc, #512]	; (8006654 <checkAktifCalisma+0xde4>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800645a:	4b7f      	ldr	r3, [pc, #508]	; (8006658 <checkAktifCalisma+0xde8>)
 800645c:	2201      	movs	r2, #1
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	e002      	b.n	8006468 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8006462:	4b7d      	ldr	r3, [pc, #500]	; (8006658 <checkAktifCalisma+0xde8>)
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006468:	4b75      	ldr	r3, [pc, #468]	; (8006640 <checkAktifCalisma+0xdd0>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d107      	bne.n	8006480 <checkAktifCalisma+0xc10>
 8006470:	4b79      	ldr	r3, [pc, #484]	; (8006658 <checkAktifCalisma+0xde8>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d103      	bne.n	8006480 <checkAktifCalisma+0xc10>
 8006478:	4b78      	ldr	r3, [pc, #480]	; (800665c <checkAktifCalisma+0xdec>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d005      	beq.n	800648c <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006480:	2201      	movs	r2, #1
 8006482:	2180      	movs	r1, #128	; 0x80
 8006484:	4876      	ldr	r0, [pc, #472]	; (8006660 <checkAktifCalisma+0xdf0>)
 8006486:	f002 fc16 	bl	8008cb6 <HAL_GPIO_WritePin>
 800648a:	e004      	b.n	8006496 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800648c:	2200      	movs	r2, #0
 800648e:	2180      	movs	r1, #128	; 0x80
 8006490:	4873      	ldr	r0, [pc, #460]	; (8006660 <checkAktifCalisma+0xdf0>)
 8006492:	f002 fc10 	bl	8008cb6 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006496:	4b73      	ldr	r3, [pc, #460]	; (8006664 <checkAktifCalisma+0xdf4>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d141      	bne.n	8006522 <checkAktifCalisma+0xcb2>
 800649e:	4b6a      	ldr	r3, [pc, #424]	; (8006648 <checkAktifCalisma+0xdd8>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d003      	beq.n	80064ae <checkAktifCalisma+0xc3e>
 80064a6:	4b68      	ldr	r3, [pc, #416]	; (8006648 <checkAktifCalisma+0xdd8>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d139      	bne.n	8006522 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80064ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064b2:	4866      	ldr	r0, [pc, #408]	; (800664c <checkAktifCalisma+0xddc>)
 80064b4:	f002 fbe8 	bl	8008c88 <HAL_GPIO_ReadPin>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d103      	bne.n	80064c6 <checkAktifCalisma+0xc56>
 80064be:	4b6a      	ldr	r3, [pc, #424]	; (8006668 <checkAktifCalisma+0xdf8>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00b      	beq.n	80064de <checkAktifCalisma+0xc6e>
 80064c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064ca:	4868      	ldr	r0, [pc, #416]	; (800666c <checkAktifCalisma+0xdfc>)
 80064cc:	f002 fbdc 	bl	8008c88 <HAL_GPIO_ReadPin>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d125      	bne.n	8006522 <checkAktifCalisma+0xcb2>
 80064d6:	4b64      	ldr	r3, [pc, #400]	; (8006668 <checkAktifCalisma+0xdf8>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d121      	bne.n	8006522 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80064de:	2102      	movs	r1, #2
 80064e0:	485a      	ldr	r0, [pc, #360]	; (800664c <checkAktifCalisma+0xddc>)
 80064e2:	f002 fbd1 	bl	8008c88 <HAL_GPIO_ReadPin>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d11a      	bne.n	8006522 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80064ec:	2104      	movs	r1, #4
 80064ee:	4857      	ldr	r0, [pc, #348]	; (800664c <checkAktifCalisma+0xddc>)
 80064f0:	f002 fbca 	bl	8008c88 <HAL_GPIO_ReadPin>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d113      	bne.n	8006522 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80064fa:	4b56      	ldr	r3, [pc, #344]	; (8006654 <checkAktifCalisma+0xde4>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00f      	beq.n	8006522 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8006502:	4b5b      	ldr	r3, [pc, #364]	; (8006670 <checkAktifCalisma+0xe00>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	f083 0301 	eor.w	r3, r3, #1
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8006510:	4b58      	ldr	r3, [pc, #352]	; (8006674 <checkAktifCalisma+0xe04>)
 8006512:	2201      	movs	r2, #1
 8006514:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006516:	4b58      	ldr	r3, [pc, #352]	; (8006678 <checkAktifCalisma+0xe08>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a58      	ldr	r2, [pc, #352]	; (800667c <checkAktifCalisma+0xe0c>)
 800651c:	6013      	str	r3, [r2, #0]
			bekle();
 800651e:	f7fe ff71 	bl	8005404 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8006522:	4b55      	ldr	r3, [pc, #340]	; (8006678 <checkAktifCalisma+0xe08>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4b55      	ldr	r3, [pc, #340]	; (800667c <checkAktifCalisma+0xe0c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	4a54      	ldr	r2, [pc, #336]	; (8006680 <checkAktifCalisma+0xe10>)
 800652e:	7812      	ldrb	r2, [r2, #0]
 8006530:	4293      	cmp	r3, r2
 8006532:	d20d      	bcs.n	8006550 <checkAktifCalisma+0xce0>
 8006534:	2102      	movs	r1, #2
 8006536:	4845      	ldr	r0, [pc, #276]	; (800664c <checkAktifCalisma+0xddc>)
 8006538:	f002 fba6 	bl	8008c88 <HAL_GPIO_ReadPin>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d006      	beq.n	8006550 <checkAktifCalisma+0xce0>
 8006542:	4b44      	ldr	r3, [pc, #272]	; (8006654 <checkAktifCalisma+0xde4>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	f083 0301 	eor.w	r3, r3, #1
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8006550:	4b48      	ldr	r3, [pc, #288]	; (8006674 <checkAktifCalisma+0xe04>)
 8006552:	2200      	movs	r2, #0
 8006554:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006556:	4b43      	ldr	r3, [pc, #268]	; (8006664 <checkAktifCalisma+0xdf4>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d135      	bne.n	80065ca <checkAktifCalisma+0xd5a>
 800655e:	4b3a      	ldr	r3, [pc, #232]	; (8006648 <checkAktifCalisma+0xdd8>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d003      	beq.n	800656e <checkAktifCalisma+0xcfe>
 8006566:	4b38      	ldr	r3, [pc, #224]	; (8006648 <checkAktifCalisma+0xdd8>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b03      	cmp	r3, #3
 800656c:	d12d      	bne.n	80065ca <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800656e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006572:	4836      	ldr	r0, [pc, #216]	; (800664c <checkAktifCalisma+0xddc>)
 8006574:	f002 fb88 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d103      	bne.n	8006586 <checkAktifCalisma+0xd16>
 800657e:	4b3a      	ldr	r3, [pc, #232]	; (8006668 <checkAktifCalisma+0xdf8>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00b      	beq.n	800659e <checkAktifCalisma+0xd2e>
 8006586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800658a:	4838      	ldr	r0, [pc, #224]	; (800666c <checkAktifCalisma+0xdfc>)
 800658c:	f002 fb7c 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d119      	bne.n	80065ca <checkAktifCalisma+0xd5a>
 8006596:	4b34      	ldr	r3, [pc, #208]	; (8006668 <checkAktifCalisma+0xdf8>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d115      	bne.n	80065ca <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800659e:	2102      	movs	r1, #2
 80065a0:	482a      	ldr	r0, [pc, #168]	; (800664c <checkAktifCalisma+0xddc>)
 80065a2:	f002 fb71 	bl	8008c88 <HAL_GPIO_ReadPin>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d10e      	bne.n	80065ca <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80065ac:	2104      	movs	r1, #4
 80065ae:	4827      	ldr	r0, [pc, #156]	; (800664c <checkAktifCalisma+0xddc>)
 80065b0:	f002 fb6a 	bl	8008c88 <HAL_GPIO_ReadPin>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d107      	bne.n	80065ca <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 80065ba:	4b26      	ldr	r3, [pc, #152]	; (8006654 <checkAktifCalisma+0xde4>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 80065c2:	4b30      	ldr	r3, [pc, #192]	; (8006684 <checkAktifCalisma+0xe14>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	e002      	b.n	80065d0 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80065ca:	4b2e      	ldr	r3, [pc, #184]	; (8006684 <checkAktifCalisma+0xe14>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80065d0:	4b24      	ldr	r3, [pc, #144]	; (8006664 <checkAktifCalisma+0xdf4>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d11d      	bne.n	8006614 <checkAktifCalisma+0xda4>
 80065d8:	4b1b      	ldr	r3, [pc, #108]	; (8006648 <checkAktifCalisma+0xdd8>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d003      	beq.n	80065e8 <checkAktifCalisma+0xd78>
 80065e0:	4b19      	ldr	r3, [pc, #100]	; (8006648 <checkAktifCalisma+0xdd8>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d115      	bne.n	8006614 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065e8:	2102      	movs	r1, #2
 80065ea:	4818      	ldr	r0, [pc, #96]	; (800664c <checkAktifCalisma+0xddc>)
 80065ec:	f002 fb4c 	bl	8008c88 <HAL_GPIO_ReadPin>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d10e      	bne.n	8006614 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80065f6:	2104      	movs	r1, #4
 80065f8:	4814      	ldr	r0, [pc, #80]	; (800664c <checkAktifCalisma+0xddc>)
 80065fa:	f002 fb45 	bl	8008c88 <HAL_GPIO_ReadPin>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d107      	bne.n	8006614 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8006604:	4b13      	ldr	r3, [pc, #76]	; (8006654 <checkAktifCalisma+0xde4>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 800660c:	4b1e      	ldr	r3, [pc, #120]	; (8006688 <checkAktifCalisma+0xe18>)
 800660e:	2201      	movs	r2, #1
 8006610:	701a      	strb	r2, [r3, #0]
 8006612:	e002      	b.n	800661a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8006614:	4b1c      	ldr	r3, [pc, #112]	; (8006688 <checkAktifCalisma+0xe18>)
 8006616:	2200      	movs	r2, #0
 8006618:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800661a:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <checkAktifCalisma+0xe14>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d107      	bne.n	8006632 <checkAktifCalisma+0xdc2>
 8006622:	4b19      	ldr	r3, [pc, #100]	; (8006688 <checkAktifCalisma+0xe18>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d103      	bne.n	8006632 <checkAktifCalisma+0xdc2>
 800662a:	4b12      	ldr	r3, [pc, #72]	; (8006674 <checkAktifCalisma+0xe04>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d02c      	beq.n	800668c <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006632:	2201      	movs	r2, #1
 8006634:	2140      	movs	r1, #64	; 0x40
 8006636:	480a      	ldr	r0, [pc, #40]	; (8006660 <checkAktifCalisma+0xdf0>)
 8006638:	f002 fb3d 	bl	8008cb6 <HAL_GPIO_WritePin>
 800663c:	e02b      	b.n	8006696 <checkAktifCalisma+0xe26>
 800663e:	bf00      	nop
 8006640:	200002f4 	.word	0x200002f4
 8006644:	200002b9 	.word	0x200002b9
 8006648:	200002b8 	.word	0x200002b8
 800664c:	40011000 	.word	0x40011000
 8006650:	200002b6 	.word	0x200002b6
 8006654:	200002f2 	.word	0x200002f2
 8006658:	200002f5 	.word	0x200002f5
 800665c:	200002f3 	.word	0x200002f3
 8006660:	40010800 	.word	0x40010800
 8006664:	200002ba 	.word	0x200002ba
 8006668:	200002bc 	.word	0x200002bc
 800666c:	40010c00 	.word	0x40010c00
 8006670:	200002df 	.word	0x200002df
 8006674:	200002f6 	.word	0x200002f6
 8006678:	20000258 	.word	0x20000258
 800667c:	2000025c 	.word	0x2000025c
 8006680:	200002ca 	.word	0x200002ca
 8006684:	200002f7 	.word	0x200002f7
 8006688:	200002f8 	.word	0x200002f8
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800668c:	2200      	movs	r2, #0
 800668e:	2140      	movs	r1, #64	; 0x40
 8006690:	488d      	ldr	r0, [pc, #564]	; (80068c8 <checkAktifCalisma+0x1058>)
 8006692:	f002 fb10 	bl	8008cb6 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8006696:	4b8d      	ldr	r3, [pc, #564]	; (80068cc <checkAktifCalisma+0x105c>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <checkAktifCalisma+0xe36>
 800669e:	4b8b      	ldr	r3, [pc, #556]	; (80068cc <checkAktifCalisma+0x105c>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d115      	bne.n	80066d2 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80066a6:	2104      	movs	r1, #4
 80066a8:	4889      	ldr	r0, [pc, #548]	; (80068d0 <checkAktifCalisma+0x1060>)
 80066aa:	f002 faed 	bl	8008c88 <HAL_GPIO_ReadPin>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d003      	beq.n	80066bc <checkAktifCalisma+0xe4c>
 80066b4:	4b87      	ldr	r3, [pc, #540]	; (80068d4 <checkAktifCalisma+0x1064>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80066bc:	2102      	movs	r1, #2
 80066be:	4884      	ldr	r0, [pc, #528]	; (80068d0 <checkAktifCalisma+0x1060>)
 80066c0:	f002 fae2 	bl	8008c88 <HAL_GPIO_ReadPin>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d103      	bne.n	80066d2 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 80066ca:	4b83      	ldr	r3, [pc, #524]	; (80068d8 <checkAktifCalisma+0x1068>)
 80066cc:	2201      	movs	r2, #1
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	e002      	b.n	80066d8 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 80066d2:	4b81      	ldr	r3, [pc, #516]	; (80068d8 <checkAktifCalisma+0x1068>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80066d8:	4b7c      	ldr	r3, [pc, #496]	; (80068cc <checkAktifCalisma+0x105c>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d003      	beq.n	80066e8 <checkAktifCalisma+0xe78>
 80066e0:	4b7a      	ldr	r3, [pc, #488]	; (80068cc <checkAktifCalisma+0x105c>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d111      	bne.n	800670c <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80066e8:	2102      	movs	r1, #2
 80066ea:	4879      	ldr	r0, [pc, #484]	; (80068d0 <checkAktifCalisma+0x1060>)
 80066ec:	f002 facc 	bl	8008c88 <HAL_GPIO_ReadPin>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d10a      	bne.n	800670c <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80066f6:	2104      	movs	r1, #4
 80066f8:	4875      	ldr	r0, [pc, #468]	; (80068d0 <checkAktifCalisma+0x1060>)
 80066fa:	f002 fac5 	bl	8008c88 <HAL_GPIO_ReadPin>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d103      	bne.n	800670c <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8006704:	4b75      	ldr	r3, [pc, #468]	; (80068dc <checkAktifCalisma+0x106c>)
 8006706:	2201      	movs	r2, #1
 8006708:	701a      	strb	r2, [r3, #0]
 800670a:	e002      	b.n	8006712 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 800670c:	4b73      	ldr	r3, [pc, #460]	; (80068dc <checkAktifCalisma+0x106c>)
 800670e:	2200      	movs	r2, #0
 8006710:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8006712:	4b71      	ldr	r3, [pc, #452]	; (80068d8 <checkAktifCalisma+0x1068>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00f      	beq.n	800673a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 800671a:	4b71      	ldr	r3, [pc, #452]	; (80068e0 <checkAktifCalisma+0x1070>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d10b      	bne.n	800673a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8006722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006726:	486f      	ldr	r0, [pc, #444]	; (80068e4 <checkAktifCalisma+0x1074>)
 8006728:	f002 faae 	bl	8008c88 <HAL_GPIO_ReadPin>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d103      	bne.n	800673a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8006732:	4b6d      	ldr	r3, [pc, #436]	; (80068e8 <checkAktifCalisma+0x1078>)
 8006734:	2201      	movs	r2, #1
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	e002      	b.n	8006740 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 800673a:	4b6b      	ldr	r3, [pc, #428]	; (80068e8 <checkAktifCalisma+0x1078>)
 800673c:	2200      	movs	r2, #0
 800673e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8006740:	4b66      	ldr	r3, [pc, #408]	; (80068dc <checkAktifCalisma+0x106c>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00f      	beq.n	8006768 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8006748:	4b65      	ldr	r3, [pc, #404]	; (80068e0 <checkAktifCalisma+0x1070>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d10b      	bne.n	8006768 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8006750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006754:	4863      	ldr	r0, [pc, #396]	; (80068e4 <checkAktifCalisma+0x1074>)
 8006756:	f002 fa97 	bl	8008c88 <HAL_GPIO_ReadPin>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d103      	bne.n	8006768 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8006760:	4b62      	ldr	r3, [pc, #392]	; (80068ec <checkAktifCalisma+0x107c>)
 8006762:	2201      	movs	r2, #1
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	e002      	b.n	800676e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8006768:	4b60      	ldr	r3, [pc, #384]	; (80068ec <checkAktifCalisma+0x107c>)
 800676a:	2200      	movs	r2, #0
 800676c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800676e:	4b60      	ldr	r3, [pc, #384]	; (80068f0 <checkAktifCalisma+0x1080>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d137      	bne.n	80067e6 <checkAktifCalisma+0xf76>
 8006776:	4b5f      	ldr	r3, [pc, #380]	; (80068f4 <checkAktifCalisma+0x1084>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d003      	beq.n	8006786 <checkAktifCalisma+0xf16>
 800677e:	4b5d      	ldr	r3, [pc, #372]	; (80068f4 <checkAktifCalisma+0x1084>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b03      	cmp	r3, #3
 8006784:	d12f      	bne.n	80067e6 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006786:	4b54      	ldr	r3, [pc, #336]	; (80068d8 <checkAktifCalisma+0x1068>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d103      	bne.n	8006796 <checkAktifCalisma+0xf26>
 800678e:	4b53      	ldr	r3, [pc, #332]	; (80068dc <checkAktifCalisma+0x106c>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d027      	beq.n	80067e6 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800679a:	484d      	ldr	r0, [pc, #308]	; (80068d0 <checkAktifCalisma+0x1060>)
 800679c:	f002 fa74 	bl	8008c88 <HAL_GPIO_ReadPin>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d103      	bne.n	80067ae <checkAktifCalisma+0xf3e>
 80067a6:	4b4e      	ldr	r3, [pc, #312]	; (80068e0 <checkAktifCalisma+0x1070>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d007      	beq.n	80067be <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80067ae:	4b4e      	ldr	r3, [pc, #312]	; (80068e8 <checkAktifCalisma+0x1078>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <checkAktifCalisma+0xf4e>
 80067b6:	4b4d      	ldr	r3, [pc, #308]	; (80068ec <checkAktifCalisma+0x107c>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d013      	beq.n	80067e6 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 80067be:	4b4e      	ldr	r3, [pc, #312]	; (80068f8 <checkAktifCalisma+0x1088>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00f      	beq.n	80067e6 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 80067c6:	4b4d      	ldr	r3, [pc, #308]	; (80068fc <checkAktifCalisma+0x108c>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	f083 0301 	eor.w	r3, r3, #1
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d008      	beq.n	80067e6 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 80067d4:	4b4a      	ldr	r3, [pc, #296]	; (8006900 <checkAktifCalisma+0x1090>)
 80067d6:	2201      	movs	r2, #1
 80067d8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80067da:	4b4a      	ldr	r3, [pc, #296]	; (8006904 <checkAktifCalisma+0x1094>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a4a      	ldr	r2, [pc, #296]	; (8006908 <checkAktifCalisma+0x1098>)
 80067e0:	6013      	str	r3, [r2, #0]
			bekle();
 80067e2:	f7fe fe0f 	bl	8005404 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80067e6:	4b47      	ldr	r3, [pc, #284]	; (8006904 <checkAktifCalisma+0x1094>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	4b47      	ldr	r3, [pc, #284]	; (8006908 <checkAktifCalisma+0x1098>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	4a46      	ldr	r2, [pc, #280]	; (800690c <checkAktifCalisma+0x109c>)
 80067f2:	7812      	ldrb	r2, [r2, #0]
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d214      	bcs.n	8006822 <checkAktifCalisma+0xfb2>
 80067f8:	4b37      	ldr	r3, [pc, #220]	; (80068d8 <checkAktifCalisma+0x1068>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	f083 0301 	eor.w	r3, r3, #1
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d006      	beq.n	8006814 <checkAktifCalisma+0xfa4>
 8006806:	4b35      	ldr	r3, [pc, #212]	; (80068dc <checkAktifCalisma+0x106c>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	f083 0301 	eor.w	r3, r3, #1
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d106      	bne.n	8006822 <checkAktifCalisma+0xfb2>
 8006814:	4b38      	ldr	r3, [pc, #224]	; (80068f8 <checkAktifCalisma+0x1088>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	f083 0301 	eor.w	r3, r3, #1
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8006822:	4b37      	ldr	r3, [pc, #220]	; (8006900 <checkAktifCalisma+0x1090>)
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006828:	4b31      	ldr	r3, [pc, #196]	; (80068f0 <checkAktifCalisma+0x1080>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d12b      	bne.n	8006888 <checkAktifCalisma+0x1018>
 8006830:	4b30      	ldr	r3, [pc, #192]	; (80068f4 <checkAktifCalisma+0x1084>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b02      	cmp	r3, #2
 8006836:	d003      	beq.n	8006840 <checkAktifCalisma+0xfd0>
 8006838:	4b2e      	ldr	r3, [pc, #184]	; (80068f4 <checkAktifCalisma+0x1084>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b03      	cmp	r3, #3
 800683e:	d123      	bne.n	8006888 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006840:	4b25      	ldr	r3, [pc, #148]	; (80068d8 <checkAktifCalisma+0x1068>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d103      	bne.n	8006850 <checkAktifCalisma+0xfe0>
 8006848:	4b24      	ldr	r3, [pc, #144]	; (80068dc <checkAktifCalisma+0x106c>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01b      	beq.n	8006888 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006850:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006854:	481e      	ldr	r0, [pc, #120]	; (80068d0 <checkAktifCalisma+0x1060>)
 8006856:	f002 fa17 	bl	8008c88 <HAL_GPIO_ReadPin>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d103      	bne.n	8006868 <checkAktifCalisma+0xff8>
 8006860:	4b1f      	ldr	r3, [pc, #124]	; (80068e0 <checkAktifCalisma+0x1070>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d007      	beq.n	8006878 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006868:	4b1f      	ldr	r3, [pc, #124]	; (80068e8 <checkAktifCalisma+0x1078>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d103      	bne.n	8006878 <checkAktifCalisma+0x1008>
 8006870:	4b1e      	ldr	r3, [pc, #120]	; (80068ec <checkAktifCalisma+0x107c>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8006878:	4b1f      	ldr	r3, [pc, #124]	; (80068f8 <checkAktifCalisma+0x1088>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8006880:	4b23      	ldr	r3, [pc, #140]	; (8006910 <checkAktifCalisma+0x10a0>)
 8006882:	2201      	movs	r2, #1
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	e002      	b.n	800688e <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8006888:	4b21      	ldr	r3, [pc, #132]	; (8006910 <checkAktifCalisma+0x10a0>)
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800688e:	4b18      	ldr	r3, [pc, #96]	; (80068f0 <checkAktifCalisma+0x1080>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b02      	cmp	r3, #2
 8006894:	d140      	bne.n	8006918 <checkAktifCalisma+0x10a8>
 8006896:	4b17      	ldr	r3, [pc, #92]	; (80068f4 <checkAktifCalisma+0x1084>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b02      	cmp	r3, #2
 800689c:	d003      	beq.n	80068a6 <checkAktifCalisma+0x1036>
 800689e:	4b15      	ldr	r3, [pc, #84]	; (80068f4 <checkAktifCalisma+0x1084>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d138      	bne.n	8006918 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <checkAktifCalisma+0x1068>)
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d103      	bne.n	80068b6 <checkAktifCalisma+0x1046>
 80068ae:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <checkAktifCalisma+0x106c>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d030      	beq.n	8006918 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 80068b6:	4b10      	ldr	r3, [pc, #64]	; (80068f8 <checkAktifCalisma+0x1088>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d02c      	beq.n	8006918 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 80068be:	4b15      	ldr	r3, [pc, #84]	; (8006914 <checkAktifCalisma+0x10a4>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	e02b      	b.n	800691e <checkAktifCalisma+0x10ae>
 80068c6:	bf00      	nop
 80068c8:	40010800 	.word	0x40010800
 80068cc:	200002bd 	.word	0x200002bd
 80068d0:	40011000 	.word	0x40011000
 80068d4:	200002b6 	.word	0x200002b6
 80068d8:	200002fc 	.word	0x200002fc
 80068dc:	200002fd 	.word	0x200002fd
 80068e0:	200002bc 	.word	0x200002bc
 80068e4:	40010c00 	.word	0x40010c00
 80068e8:	2000030c 	.word	0x2000030c
 80068ec:	2000030d 	.word	0x2000030d
 80068f0:	200002bb 	.word	0x200002bb
 80068f4:	200002b8 	.word	0x200002b8
 80068f8:	200002f2 	.word	0x200002f2
 80068fc:	200002df 	.word	0x200002df
 8006900:	200002f9 	.word	0x200002f9
 8006904:	20000258 	.word	0x20000258
 8006908:	2000025c 	.word	0x2000025c
 800690c:	200002cb 	.word	0x200002cb
 8006910:	200002fa 	.word	0x200002fa
 8006914:	200002fb 	.word	0x200002fb
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8006918:	4b89      	ldr	r3, [pc, #548]	; (8006b40 <checkAktifCalisma+0x12d0>)
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800691e:	4b89      	ldr	r3, [pc, #548]	; (8006b44 <checkAktifCalisma+0x12d4>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d107      	bne.n	8006936 <checkAktifCalisma+0x10c6>
 8006926:	4b88      	ldr	r3, [pc, #544]	; (8006b48 <checkAktifCalisma+0x12d8>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d103      	bne.n	8006936 <checkAktifCalisma+0x10c6>
 800692e:	4b84      	ldr	r3, [pc, #528]	; (8006b40 <checkAktifCalisma+0x12d0>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006936:	2201      	movs	r2, #1
 8006938:	2120      	movs	r1, #32
 800693a:	4884      	ldr	r0, [pc, #528]	; (8006b4c <checkAktifCalisma+0x12dc>)
 800693c:	f002 f9bb 	bl	8008cb6 <HAL_GPIO_WritePin>
 8006940:	e004      	b.n	800694c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006942:	2200      	movs	r2, #0
 8006944:	2120      	movs	r1, #32
 8006946:	4881      	ldr	r0, [pc, #516]	; (8006b4c <checkAktifCalisma+0x12dc>)
 8006948:	f002 f9b5 	bl	8008cb6 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800694c:	4b80      	ldr	r3, [pc, #512]	; (8006b50 <checkAktifCalisma+0x12e0>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00e      	beq.n	8006972 <checkAktifCalisma+0x1102>
 8006954:	2102      	movs	r1, #2
 8006956:	487f      	ldr	r0, [pc, #508]	; (8006b54 <checkAktifCalisma+0x12e4>)
 8006958:	f002 f996 	bl	8008c88 <HAL_GPIO_ReadPin>
 800695c:	4603      	mov	r3, r0
 800695e:	2b01      	cmp	r3, #1
 8006960:	d107      	bne.n	8006972 <checkAktifCalisma+0x1102>
 8006962:	4b7d      	ldr	r3, [pc, #500]	; (8006b58 <checkAktifCalisma+0x12e8>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d103      	bne.n	8006972 <checkAktifCalisma+0x1102>
 800696a:	4b7c      	ldr	r3, [pc, #496]	; (8006b5c <checkAktifCalisma+0x12ec>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d112      	bne.n	8006998 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006972:	4b7b      	ldr	r3, [pc, #492]	; (8006b60 <checkAktifCalisma+0x12f0>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d066      	beq.n	8006a48 <checkAktifCalisma+0x11d8>
 800697a:	2104      	movs	r1, #4
 800697c:	4875      	ldr	r0, [pc, #468]	; (8006b54 <checkAktifCalisma+0x12e4>)
 800697e:	f002 f983 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006982:	4603      	mov	r3, r0
 8006984:	2b01      	cmp	r3, #1
 8006986:	d15f      	bne.n	8006a48 <checkAktifCalisma+0x11d8>
 8006988:	4b73      	ldr	r3, [pc, #460]	; (8006b58 <checkAktifCalisma+0x12e8>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d05b      	beq.n	8006a48 <checkAktifCalisma+0x11d8>
 8006990:	4b72      	ldr	r3, [pc, #456]	; (8006b5c <checkAktifCalisma+0x12ec>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d057      	beq.n	8006a48 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8006998:	4b72      	ldr	r3, [pc, #456]	; (8006b64 <checkAktifCalisma+0x12f4>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	3301      	adds	r3, #1
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	4b70      	ldr	r3, [pc, #448]	; (8006b64 <checkAktifCalisma+0x12f4>)
 80069a2:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 80069a4:	4b6f      	ldr	r3, [pc, #444]	; (8006b64 <checkAktifCalisma+0x12f4>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b09      	cmp	r3, #9
 80069aa:	d908      	bls.n	80069be <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 80069ac:	4b6d      	ldr	r3, [pc, #436]	; (8006b64 <checkAktifCalisma+0x12f4>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 80069b2:	4b6d      	ldr	r3, [pc, #436]	; (8006b68 <checkAktifCalisma+0x12f8>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	4b6b      	ldr	r3, [pc, #428]	; (8006b68 <checkAktifCalisma+0x12f8>)
 80069bc:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 80069be:	4b6a      	ldr	r3, [pc, #424]	; (8006b68 <checkAktifCalisma+0x12f8>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	2b09      	cmp	r3, #9
 80069c4:	d908      	bls.n	80069d8 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 80069c6:	4b68      	ldr	r3, [pc, #416]	; (8006b68 <checkAktifCalisma+0x12f8>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80069cc:	4b67      	ldr	r3, [pc, #412]	; (8006b6c <checkAktifCalisma+0x12fc>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	3301      	adds	r3, #1
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	4b65      	ldr	r3, [pc, #404]	; (8006b6c <checkAktifCalisma+0x12fc>)
 80069d6:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80069d8:	4b64      	ldr	r3, [pc, #400]	; (8006b6c <checkAktifCalisma+0x12fc>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b09      	cmp	r3, #9
 80069de:	d908      	bls.n	80069f2 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80069e0:	4b62      	ldr	r3, [pc, #392]	; (8006b6c <checkAktifCalisma+0x12fc>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80069e6:	4b62      	ldr	r3, [pc, #392]	; (8006b70 <checkAktifCalisma+0x1300>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	3301      	adds	r3, #1
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	4b60      	ldr	r3, [pc, #384]	; (8006b70 <checkAktifCalisma+0x1300>)
 80069f0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80069f2:	4b5f      	ldr	r3, [pc, #380]	; (8006b70 <checkAktifCalisma+0x1300>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b09      	cmp	r3, #9
 80069f8:	d908      	bls.n	8006a0c <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80069fa:	4b5d      	ldr	r3, [pc, #372]	; (8006b70 <checkAktifCalisma+0x1300>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8006a00:	4b5c      	ldr	r3, [pc, #368]	; (8006b74 <checkAktifCalisma+0x1304>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	3301      	adds	r3, #1
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	4b5a      	ldr	r3, [pc, #360]	; (8006b74 <checkAktifCalisma+0x1304>)
 8006a0a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006a0c:	4b59      	ldr	r3, [pc, #356]	; (8006b74 <checkAktifCalisma+0x1304>)
 8006a0e:	781a      	ldrb	r2, [r3, #0]
 8006a10:	4b59      	ldr	r3, [pc, #356]	; (8006b78 <checkAktifCalisma+0x1308>)
 8006a12:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006a16:	4b56      	ldr	r3, [pc, #344]	; (8006b70 <checkAktifCalisma+0x1300>)
 8006a18:	781a      	ldrb	r2, [r3, #0]
 8006a1a:	4b57      	ldr	r3, [pc, #348]	; (8006b78 <checkAktifCalisma+0x1308>)
 8006a1c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006a1e:	4b53      	ldr	r3, [pc, #332]	; (8006b6c <checkAktifCalisma+0x12fc>)
 8006a20:	781a      	ldrb	r2, [r3, #0]
 8006a22:	4b55      	ldr	r3, [pc, #340]	; (8006b78 <checkAktifCalisma+0x1308>)
 8006a24:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006a26:	4b50      	ldr	r3, [pc, #320]	; (8006b68 <checkAktifCalisma+0x12f8>)
 8006a28:	781a      	ldrb	r2, [r3, #0]
 8006a2a:	4b53      	ldr	r3, [pc, #332]	; (8006b78 <checkAktifCalisma+0x1308>)
 8006a2c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006a2e:	4b4d      	ldr	r3, [pc, #308]	; (8006b64 <checkAktifCalisma+0x12f4>)
 8006a30:	781a      	ldrb	r2, [r3, #0]
 8006a32:	4b51      	ldr	r3, [pc, #324]	; (8006b78 <checkAktifCalisma+0x1308>)
 8006a34:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8006a36:	4b51      	ldr	r3, [pc, #324]	; (8006b7c <checkAktifCalisma+0x130c>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006a3c:	4b44      	ldr	r3, [pc, #272]	; (8006b50 <checkAktifCalisma+0x12e0>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8006a42:	4b47      	ldr	r3, [pc, #284]	; (8006b60 <checkAktifCalisma+0x12f0>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006a48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a4c:	484c      	ldr	r0, [pc, #304]	; (8006b80 <checkAktifCalisma+0x1310>)
 8006a4e:	f002 f91b 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d016      	beq.n	8006a86 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006a58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a5c:	4848      	ldr	r0, [pc, #288]	; (8006b80 <checkAktifCalisma+0x1310>)
 8006a5e:	f002 f913 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00e      	beq.n	8006a86 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a6c:	4844      	ldr	r0, [pc, #272]	; (8006b80 <checkAktifCalisma+0x1310>)
 8006a6e:	f002 f90b 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d006      	beq.n	8006a86 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006a78:	2140      	movs	r1, #64	; 0x40
 8006a7a:	4836      	ldr	r0, [pc, #216]	; (8006b54 <checkAktifCalisma+0x12e4>)
 8006a7c:	f002 f904 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <checkAktifCalisma+0x121e>
			startBasili=1;
 8006a86:	4b3f      	ldr	r3, [pc, #252]	; (8006b84 <checkAktifCalisma+0x1314>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	e002      	b.n	8006a94 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006a8e:	4b3d      	ldr	r3, [pc, #244]	; (8006b84 <checkAktifCalisma+0x1314>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006a94:	4b3b      	ldr	r3, [pc, #236]	; (8006b84 <checkAktifCalisma+0x1314>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d014      	beq.n	8006ac6 <checkAktifCalisma+0x1256>
 8006a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006aa0:	4837      	ldr	r0, [pc, #220]	; (8006b80 <checkAktifCalisma+0x1310>)
 8006aa2:	f002 f8f1 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d10c      	bne.n	8006ac6 <checkAktifCalisma+0x1256>
			hataVar=1;
 8006aac:	4b36      	ldr	r3, [pc, #216]	; (8006b88 <checkAktifCalisma+0x1318>)
 8006aae:	2201      	movs	r2, #1
 8006ab0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8006ab2:	2001      	movs	r0, #1
 8006ab4:	f7fe f8a8 	bl	8004c08 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006ab8:	2001      	movs	r0, #1
 8006aba:	f7fe fc27 	bl	800530c <hata2EEPROM>
			acilstophatasi=1;
 8006abe:	4b33      	ldr	r3, [pc, #204]	; (8006b8c <checkAktifCalisma+0x131c>)
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	e018      	b.n	8006af8 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006ac6:	4b31      	ldr	r3, [pc, #196]	; (8006b8c <checkAktifCalisma+0x131c>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d014      	beq.n	8006af8 <checkAktifCalisma+0x1288>
 8006ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ad2:	482b      	ldr	r0, [pc, #172]	; (8006b80 <checkAktifCalisma+0x1310>)
 8006ad4:	f002 f8d8 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10c      	bne.n	8006af8 <checkAktifCalisma+0x1288>
 8006ade:	4b29      	ldr	r3, [pc, #164]	; (8006b84 <checkAktifCalisma+0x1314>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	f083 0301 	eor.w	r3, r3, #1
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8006aec:	4b27      	ldr	r3, [pc, #156]	; (8006b8c <checkAktifCalisma+0x131c>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006af2:	2001      	movs	r0, #1
 8006af4:	f7fe f834 	bl	8004b60 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006af8:	4b25      	ldr	r3, [pc, #148]	; (8006b90 <checkAktifCalisma+0x1320>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	f083 0301 	eor.w	r3, r3, #1
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d04c      	beq.n	8006ba0 <checkAktifCalisma+0x1330>
 8006b06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b0a:	481d      	ldr	r0, [pc, #116]	; (8006b80 <checkAktifCalisma+0x1310>)
 8006b0c:	f002 f8bc 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <checkAktifCalisma+0x12ae>
 8006b16:	4b1f      	ldr	r3, [pc, #124]	; (8006b94 <checkAktifCalisma+0x1324>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d040      	beq.n	8006ba0 <checkAktifCalisma+0x1330>
 8006b1e:	4b1e      	ldr	r3, [pc, #120]	; (8006b98 <checkAktifCalisma+0x1328>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d13c      	bne.n	8006ba0 <checkAktifCalisma+0x1330>
			hataVar=1;
 8006b26:	4b18      	ldr	r3, [pc, #96]	; (8006b88 <checkAktifCalisma+0x1318>)
 8006b28:	2201      	movs	r2, #1
 8006b2a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006b2c:	2002      	movs	r0, #2
 8006b2e:	f7fe f86b 	bl	8004c08 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006b32:	2002      	movs	r0, #2
 8006b34:	f7fe fbea 	bl	800530c <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8006b38:	4b18      	ldr	r3, [pc, #96]	; (8006b9c <checkAktifCalisma+0x132c>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	e047      	b.n	8006bd0 <checkAktifCalisma+0x1360>
 8006b40:	200002fb 	.word	0x200002fb
 8006b44:	200002fa 	.word	0x200002fa
 8006b48:	200002f9 	.word	0x200002f9
 8006b4c:	40010800 	.word	0x40010800
 8006b50:	200002ef 	.word	0x200002ef
 8006b54:	40011000 	.word	0x40011000
 8006b58:	200002b6 	.word	0x200002b6
 8006b5c:	200002f2 	.word	0x200002f2
 8006b60:	200002f0 	.word	0x200002f0
 8006b64:	200002ad 	.word	0x200002ad
 8006b68:	200002ae 	.word	0x200002ae
 8006b6c:	200000a4 	.word	0x200000a4
 8006b70:	200000a5 	.word	0x200000a5
 8006b74:	200002af 	.word	0x200002af
 8006b78:	200001e0 	.word	0x200001e0
 8006b7c:	200002dc 	.word	0x200002dc
 8006b80:	40010c00 	.word	0x40010c00
 8006b84:	200002fe 	.word	0x200002fe
 8006b88:	20000305 	.word	0x20000305
 8006b8c:	20000300 	.word	0x20000300
 8006b90:	20000307 	.word	0x20000307
 8006b94:	20000311 	.word	0x20000311
 8006b98:	200002b4 	.word	0x200002b4
 8006b9c:	20000301 	.word	0x20000301
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006ba0:	4b97      	ldr	r3, [pc, #604]	; (8006e00 <checkAktifCalisma+0x1590>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d013      	beq.n	8006bd0 <checkAktifCalisma+0x1360>
 8006ba8:	4b96      	ldr	r3, [pc, #600]	; (8006e04 <checkAktifCalisma+0x1594>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00f      	beq.n	8006bd0 <checkAktifCalisma+0x1360>
 8006bb0:	4b95      	ldr	r3, [pc, #596]	; (8006e08 <checkAktifCalisma+0x1598>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	f083 0301 	eor.w	r3, r3, #1
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d008      	beq.n	8006bd0 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8006bbe:	4b90      	ldr	r3, [pc, #576]	; (8006e00 <checkAktifCalisma+0x1590>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006bc4:	4b91      	ldr	r3, [pc, #580]	; (8006e0c <checkAktifCalisma+0x159c>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006bca:	2002      	movs	r0, #2
 8006bcc:	f7fd ffc8 	bl	8004b60 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006bd0:	4b8f      	ldr	r3, [pc, #572]	; (8006e10 <checkAktifCalisma+0x15a0>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d11c      	bne.n	8006c12 <checkAktifCalisma+0x13a2>
 8006bd8:	4b8e      	ldr	r3, [pc, #568]	; (8006e14 <checkAktifCalisma+0x15a4>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d118      	bne.n	8006c12 <checkAktifCalisma+0x13a2>
 8006be0:	4b8d      	ldr	r3, [pc, #564]	; (8006e18 <checkAktifCalisma+0x15a8>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d014      	beq.n	8006c12 <checkAktifCalisma+0x13a2>
 8006be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bec:	488b      	ldr	r0, [pc, #556]	; (8006e1c <checkAktifCalisma+0x15ac>)
 8006bee:	f002 f84b 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d10c      	bne.n	8006c12 <checkAktifCalisma+0x13a2>
			hataVar=1;
 8006bf8:	4b89      	ldr	r3, [pc, #548]	; (8006e20 <checkAktifCalisma+0x15b0>)
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8006bfe:	2003      	movs	r0, #3
 8006c00:	f7fe f802 	bl	8004c08 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006c04:	2003      	movs	r0, #3
 8006c06:	f7fe fb81 	bl	800530c <hata2EEPROM>
			basinchatasi=1;
 8006c0a:	4b86      	ldr	r3, [pc, #536]	; (8006e24 <checkAktifCalisma+0x15b4>)
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	e015      	b.n	8006c3e <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006c12:	4b84      	ldr	r3, [pc, #528]	; (8006e24 <checkAktifCalisma+0x15b4>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d011      	beq.n	8006c3e <checkAktifCalisma+0x13ce>
 8006c1a:	4b7d      	ldr	r3, [pc, #500]	; (8006e10 <checkAktifCalisma+0x15a0>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d10d      	bne.n	8006c3e <checkAktifCalisma+0x13ce>
 8006c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c26:	4880      	ldr	r0, [pc, #512]	; (8006e28 <checkAktifCalisma+0x15b8>)
 8006c28:	f002 f82e 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d105      	bne.n	8006c3e <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8006c32:	4b7c      	ldr	r3, [pc, #496]	; (8006e24 <checkAktifCalisma+0x15b4>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006c38:	2003      	movs	r0, #3
 8006c3a:	f7fd ff91 	bl	8004b60 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006c3e:	4b7b      	ldr	r3, [pc, #492]	; (8006e2c <checkAktifCalisma+0x15bc>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d103      	bne.n	8006c4e <checkAktifCalisma+0x13de>
 8006c46:	4b7a      	ldr	r3, [pc, #488]	; (8006e30 <checkAktifCalisma+0x15c0>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d01c      	beq.n	8006c88 <checkAktifCalisma+0x1418>
 8006c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c52:	4878      	ldr	r0, [pc, #480]	; (8006e34 <checkAktifCalisma+0x15c4>)
 8006c54:	f002 f818 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d114      	bne.n	8006c88 <checkAktifCalisma+0x1418>
 8006c5e:	4b76      	ldr	r3, [pc, #472]	; (8006e38 <checkAktifCalisma+0x15c8>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d003      	beq.n	8006c6e <checkAktifCalisma+0x13fe>
 8006c66:	4b74      	ldr	r3, [pc, #464]	; (8006e38 <checkAktifCalisma+0x15c8>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d10c      	bne.n	8006c88 <checkAktifCalisma+0x1418>
			hataVar=1;
 8006c6e:	4b6c      	ldr	r3, [pc, #432]	; (8006e20 <checkAktifCalisma+0x15b0>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006c74:	2004      	movs	r0, #4
 8006c76:	f7fd ffc7 	bl	8004c08 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006c7a:	2004      	movs	r0, #4
 8006c7c:	f7fe fb46 	bl	800530c <hata2EEPROM>
			katkapisivicihatasi=1;
 8006c80:	4b6e      	ldr	r3, [pc, #440]	; (8006e3c <checkAktifCalisma+0x15cc>)
 8006c82:	2201      	movs	r2, #1
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	e01f      	b.n	8006cc8 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006c88:	4b6c      	ldr	r3, [pc, #432]	; (8006e3c <checkAktifCalisma+0x15cc>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01b      	beq.n	8006cc8 <checkAktifCalisma+0x1458>
 8006c90:	4b6b      	ldr	r3, [pc, #428]	; (8006e40 <checkAktifCalisma+0x15d0>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d017      	beq.n	8006cc8 <checkAktifCalisma+0x1458>
 8006c98:	4b64      	ldr	r3, [pc, #400]	; (8006e2c <checkAktifCalisma+0x15bc>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f083 0301 	eor.w	r3, r3, #1
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d010      	beq.n	8006cc8 <checkAktifCalisma+0x1458>
 8006ca6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006caa:	4862      	ldr	r0, [pc, #392]	; (8006e34 <checkAktifCalisma+0x15c4>)
 8006cac:	f001 ffec 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d108      	bne.n	8006cc8 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 8006cb6:	4b61      	ldr	r3, [pc, #388]	; (8006e3c <checkAktifCalisma+0x15cc>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006cbc:	4b5c      	ldr	r3, [pc, #368]	; (8006e30 <checkAktifCalisma+0x15c0>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006cc2:	2004      	movs	r0, #4
 8006cc4:	f7fd ff4c 	bl	8004b60 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006cc8:	4b58      	ldr	r3, [pc, #352]	; (8006e2c <checkAktifCalisma+0x15bc>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d103      	bne.n	8006cd8 <checkAktifCalisma+0x1468>
 8006cd0:	4b5c      	ldr	r3, [pc, #368]	; (8006e44 <checkAktifCalisma+0x15d4>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01c      	beq.n	8006d12 <checkAktifCalisma+0x14a2>
 8006cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006cdc:	4855      	ldr	r0, [pc, #340]	; (8006e34 <checkAktifCalisma+0x15c4>)
 8006cde:	f001 ffd3 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d114      	bne.n	8006d12 <checkAktifCalisma+0x14a2>
 8006ce8:	4b53      	ldr	r3, [pc, #332]	; (8006e38 <checkAktifCalisma+0x15c8>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d003      	beq.n	8006cf8 <checkAktifCalisma+0x1488>
 8006cf0:	4b51      	ldr	r3, [pc, #324]	; (8006e38 <checkAktifCalisma+0x15c8>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d10c      	bne.n	8006d12 <checkAktifCalisma+0x14a2>
			hataVar=1;
 8006cf8:	4b49      	ldr	r3, [pc, #292]	; (8006e20 <checkAktifCalisma+0x15b0>)
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006cfe:	2005      	movs	r0, #5
 8006d00:	f7fd ff82 	bl	8004c08 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006d04:	2005      	movs	r0, #5
 8006d06:	f7fe fb01 	bl	800530c <hata2EEPROM>
			tablakapisivicihatasi=1;
 8006d0a:	4b4f      	ldr	r3, [pc, #316]	; (8006e48 <checkAktifCalisma+0x15d8>)
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	701a      	strb	r2, [r3, #0]
 8006d10:	e023      	b.n	8006d5a <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006d12:	4b4d      	ldr	r3, [pc, #308]	; (8006e48 <checkAktifCalisma+0x15d8>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d01f      	beq.n	8006d5a <checkAktifCalisma+0x14ea>
 8006d1a:	4b49      	ldr	r3, [pc, #292]	; (8006e40 <checkAktifCalisma+0x15d0>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d01b      	beq.n	8006d5a <checkAktifCalisma+0x14ea>
 8006d22:	4b42      	ldr	r3, [pc, #264]	; (8006e2c <checkAktifCalisma+0x15bc>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	f083 0301 	eor.w	r3, r3, #1
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d014      	beq.n	8006d5a <checkAktifCalisma+0x14ea>
 8006d30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d34:	483f      	ldr	r0, [pc, #252]	; (8006e34 <checkAktifCalisma+0x15c4>)
 8006d36:	f001 ffa7 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10c      	bne.n	8006d5a <checkAktifCalisma+0x14ea>
 8006d40:	4b3f      	ldr	r3, [pc, #252]	; (8006e40 <checkAktifCalisma+0x15d0>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d008      	beq.n	8006d5a <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8006d48:	4b3f      	ldr	r3, [pc, #252]	; (8006e48 <checkAktifCalisma+0x15d8>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006d4e:	4b3d      	ldr	r3, [pc, #244]	; (8006e44 <checkAktifCalisma+0x15d4>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006d54:	2005      	movs	r0, #5
 8006d56:	f7fd ff03 	bl	8004b60 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006d5a:	4b2f      	ldr	r3, [pc, #188]	; (8006e18 <checkAktifCalisma+0x15a8>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d107      	bne.n	8006d72 <checkAktifCalisma+0x1502>
 8006d62:	4b29      	ldr	r3, [pc, #164]	; (8006e08 <checkAktifCalisma+0x1598>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d103      	bne.n	8006d72 <checkAktifCalisma+0x1502>
 8006d6a:	4b38      	ldr	r3, [pc, #224]	; (8006e4c <checkAktifCalisma+0x15dc>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d014      	beq.n	8006d9c <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8006d72:	4b37      	ldr	r3, [pc, #220]	; (8006e50 <checkAktifCalisma+0x15e0>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4b37      	ldr	r3, [pc, #220]	; (8006e54 <checkAktifCalisma+0x15e4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	4a36      	ldr	r2, [pc, #216]	; (8006e58 <checkAktifCalisma+0x15e8>)
 8006d7e:	7812      	ldrb	r2, [r2, #0]
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d30b      	bcc.n	8006d9c <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8006d84:	4b26      	ldr	r3, [pc, #152]	; (8006e20 <checkAktifCalisma+0x15b0>)
 8006d86:	2201      	movs	r2, #1
 8006d88:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006d8a:	2006      	movs	r0, #6
 8006d8c:	f7fd ff3c 	bl	8004c08 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006d90:	2006      	movs	r0, #6
 8006d92:	f7fe fabb 	bl	800530c <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8006d96:	4b31      	ldr	r3, [pc, #196]	; (8006e5c <checkAktifCalisma+0x15ec>)
 8006d98:	2201      	movs	r2, #1
 8006d9a:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006d9c:	4b2f      	ldr	r3, [pc, #188]	; (8006e5c <checkAktifCalisma+0x15ec>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d013      	beq.n	8006dcc <checkAktifCalisma+0x155c>
 8006da4:	2108      	movs	r1, #8
 8006da6:	4823      	ldr	r0, [pc, #140]	; (8006e34 <checkAktifCalisma+0x15c4>)
 8006da8:	f001 ff6e 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00c      	beq.n	8006dcc <checkAktifCalisma+0x155c>
 8006db2:	4b1e      	ldr	r3, [pc, #120]	; (8006e2c <checkAktifCalisma+0x15bc>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	f083 0301 	eor.w	r3, r3, #1
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8006dc0:	4b26      	ldr	r3, [pc, #152]	; (8006e5c <checkAktifCalisma+0x15ec>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006dc6:	2006      	movs	r0, #6
 8006dc8:	f7fd feca 	bl	8004b60 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006dcc:	4b24      	ldr	r3, [pc, #144]	; (8006e60 <checkAktifCalisma+0x15f0>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10b      	bne.n	8006dec <checkAktifCalisma+0x157c>
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <checkAktifCalisma+0x1598>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d107      	bne.n	8006dec <checkAktifCalisma+0x157c>
 8006ddc:	4b21      	ldr	r3, [pc, #132]	; (8006e64 <checkAktifCalisma+0x15f4>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d103      	bne.n	8006dec <checkAktifCalisma+0x157c>
 8006de4:	4b19      	ldr	r3, [pc, #100]	; (8006e4c <checkAktifCalisma+0x15dc>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d03f      	beq.n	8006e6c <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8006dec:	4b1e      	ldr	r3, [pc, #120]	; (8006e68 <checkAktifCalisma+0x15f8>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006df2:	4b0f      	ldr	r3, [pc, #60]	; (8006e30 <checkAktifCalisma+0x15c0>)
 8006df4:	2201      	movs	r2, #1
 8006df6:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006df8:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <checkAktifCalisma+0x15d4>)
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	701a      	strb	r2, [r3, #0]
 8006dfe:	e03c      	b.n	8006e7a <checkAktifCalisma+0x160a>
 8006e00:	20000301 	.word	0x20000301
 8006e04:	20000307 	.word	0x20000307
 8006e08:	200002e8 	.word	0x200002e8
 8006e0c:	20000311 	.word	0x20000311
 8006e10:	200002b3 	.word	0x200002b3
 8006e14:	200002b7 	.word	0x200002b7
 8006e18:	20000304 	.word	0x20000304
 8006e1c:	40011000 	.word	0x40011000
 8006e20:	20000305 	.word	0x20000305
 8006e24:	2000030e 	.word	0x2000030e
 8006e28:	40010c00 	.word	0x40010c00
 8006e2c:	200002fe 	.word	0x200002fe
 8006e30:	20000312 	.word	0x20000312
 8006e34:	40010800 	.word	0x40010800
 8006e38:	200002b8 	.word	0x200002b8
 8006e3c:	2000030f 	.word	0x2000030f
 8006e40:	200002f2 	.word	0x200002f2
 8006e44:	20000313 	.word	0x20000313
 8006e48:	20000310 	.word	0x20000310
 8006e4c:	200002e7 	.word	0x200002e7
 8006e50:	20000258 	.word	0x20000258
 8006e54:	2000026c 	.word	0x2000026c
 8006e58:	200002c8 	.word	0x200002c8
 8006e5c:	200002ff 	.word	0x200002ff
 8006e60:	200002e5 	.word	0x200002e5
 8006e64:	200002e6 	.word	0x200002e6
 8006e68:	20000306 	.word	0x20000306
		} else {
			makineCalisiyor=1;
 8006e6c:	4b1e      	ldr	r3, [pc, #120]	; (8006ee8 <checkAktifCalisma+0x1678>)
 8006e6e:	2201      	movs	r2, #1
 8006e70:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006e72:	4b1e      	ldr	r3, [pc, #120]	; (8006eec <checkAktifCalisma+0x167c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a1e      	ldr	r2, [pc, #120]	; (8006ef0 <checkAktifCalisma+0x1680>)
 8006e78:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006e7a:	4b1e      	ldr	r3, [pc, #120]	; (8006ef4 <checkAktifCalisma+0x1684>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d02f      	beq.n	8006ee2 <checkAktifCalisma+0x1672>
 8006e82:	4b1d      	ldr	r3, [pc, #116]	; (8006ef8 <checkAktifCalisma+0x1688>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	f083 0301 	eor.w	r3, r3, #1
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d028      	beq.n	8006ee2 <checkAktifCalisma+0x1672>
 8006e90:	4b1a      	ldr	r3, [pc, #104]	; (8006efc <checkAktifCalisma+0x168c>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f083 0301 	eor.w	r3, r3, #1
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d021      	beq.n	8006ee2 <checkAktifCalisma+0x1672>
 8006e9e:	4b18      	ldr	r3, [pc, #96]	; (8006f00 <checkAktifCalisma+0x1690>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	f083 0301 	eor.w	r3, r3, #1
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01a      	beq.n	8006ee2 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006eac:	4b15      	ldr	r3, [pc, #84]	; (8006f04 <checkAktifCalisma+0x1694>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	f083 0301 	eor.w	r3, r3, #1
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d013      	beq.n	8006ee2 <checkAktifCalisma+0x1672>
 8006eba:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <checkAktifCalisma+0x1698>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	f083 0301 	eor.w	r3, r3, #1
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00c      	beq.n	8006ee2 <checkAktifCalisma+0x1672>
 8006ec8:	4b10      	ldr	r3, [pc, #64]	; (8006f0c <checkAktifCalisma+0x169c>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	f083 0301 	eor.w	r3, r3, #1
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d005      	beq.n	8006ee2 <checkAktifCalisma+0x1672>
			hataVar=0;
 8006ed6:	4b07      	ldr	r3, [pc, #28]	; (8006ef4 <checkAktifCalisma+0x1684>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006edc:	2007      	movs	r0, #7
 8006ede:	f7fd fe3f 	bl	8004b60 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006ee2:	bf00      	nop
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20000306 	.word	0x20000306
 8006eec:	20000258 	.word	0x20000258
 8006ef0:	2000026c 	.word	0x2000026c
 8006ef4:	20000305 	.word	0x20000305
 8006ef8:	20000300 	.word	0x20000300
 8006efc:	20000301 	.word	0x20000301
 8006f00:	2000030e 	.word	0x2000030e
 8006f04:	2000030f 	.word	0x2000030f
 8006f08:	20000310 	.word	0x20000310
 8006f0c:	200002ff 	.word	0x200002ff

08006f10 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006f14:	4b8b      	ldr	r3, [pc, #556]	; (8007144 <checkDemoModCalisma+0x234>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	f040 8229 	bne.w	8007370 <checkDemoModCalisma+0x460>
 8006f1e:	4b8a      	ldr	r3, [pc, #552]	; (8007148 <checkDemoModCalisma+0x238>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 8224 	beq.w	8007370 <checkDemoModCalisma+0x460>
 8006f28:	4b88      	ldr	r3, [pc, #544]	; (800714c <checkDemoModCalisma+0x23c>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 821f 	bne.w	8007370 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006f32:	2102      	movs	r1, #2
 8006f34:	4886      	ldr	r0, [pc, #536]	; (8007150 <checkDemoModCalisma+0x240>)
 8006f36:	f001 fea7 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d11d      	bne.n	8006f7c <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006f40:	4b84      	ldr	r3, [pc, #528]	; (8007154 <checkDemoModCalisma+0x244>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	f083 0301 	eor.w	r3, r3, #1
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d016      	beq.n	8006f7c <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006f4e:	4b82      	ldr	r3, [pc, #520]	; (8007158 <checkDemoModCalisma+0x248>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	f083 0301 	eor.w	r3, r3, #1
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00f      	beq.n	8006f7c <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006f5c:	4b7f      	ldr	r3, [pc, #508]	; (800715c <checkDemoModCalisma+0x24c>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	f083 0301 	eor.w	r3, r3, #1
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d008      	beq.n	8006f7c <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	2104      	movs	r1, #4
 8006f6e:	487c      	ldr	r0, [pc, #496]	; (8007160 <checkDemoModCalisma+0x250>)
 8006f70:	f001 fea1 	bl	8008cb6 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006f74:	4b7b      	ldr	r3, [pc, #492]	; (8007164 <checkDemoModCalisma+0x254>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	e00e      	b.n	8006f9a <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006f7c:	2102      	movs	r1, #2
 8006f7e:	4874      	ldr	r0, [pc, #464]	; (8007150 <checkDemoModCalisma+0x240>)
 8006f80:	f001 fe82 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d107      	bne.n	8006f9a <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2104      	movs	r1, #4
 8006f8e:	4874      	ldr	r0, [pc, #464]	; (8007160 <checkDemoModCalisma+0x250>)
 8006f90:	f001 fe91 	bl	8008cb6 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006f94:	4b73      	ldr	r3, [pc, #460]	; (8007164 <checkDemoModCalisma+0x254>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006f9a:	4b72      	ldr	r3, [pc, #456]	; (8007164 <checkDemoModCalisma+0x254>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10b      	bne.n	8006fba <checkDemoModCalisma+0xaa>
 8006fa2:	4b6d      	ldr	r3, [pc, #436]	; (8007158 <checkDemoModCalisma+0x248>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d107      	bne.n	8006fba <checkDemoModCalisma+0xaa>
 8006faa:	4b6c      	ldr	r3, [pc, #432]	; (800715c <checkDemoModCalisma+0x24c>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d103      	bne.n	8006fba <checkDemoModCalisma+0xaa>
 8006fb2:	4b68      	ldr	r3, [pc, #416]	; (8007154 <checkDemoModCalisma+0x244>)
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00c      	beq.n	8006fd4 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006fc0:	4867      	ldr	r0, [pc, #412]	; (8007160 <checkDemoModCalisma+0x250>)
 8006fc2:	f001 fe78 	bl	8008cb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006fcc:	4864      	ldr	r0, [pc, #400]	; (8007160 <checkDemoModCalisma+0x250>)
 8006fce:	f001 fe72 	bl	8008cb6 <HAL_GPIO_WritePin>
 8006fd2:	e00b      	b.n	8006fec <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006fda:	4861      	ldr	r0, [pc, #388]	; (8007160 <checkDemoModCalisma+0x250>)
 8006fdc:	f001 fe6b 	bl	8008cb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006fe6:	485e      	ldr	r0, [pc, #376]	; (8007160 <checkDemoModCalisma+0x250>)
 8006fe8:	f001 fe65 	bl	8008cb6 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006fec:	2102      	movs	r1, #2
 8006fee:	4858      	ldr	r0, [pc, #352]	; (8007150 <checkDemoModCalisma+0x240>)
 8006ff0:	f001 fe4a 	bl	8008c88 <HAL_GPIO_ReadPin>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d10d      	bne.n	8007016 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ffe:	4854      	ldr	r0, [pc, #336]	; (8007150 <checkDemoModCalisma+0x240>)
 8007000:	f001 fe42 	bl	8008c88 <HAL_GPIO_ReadPin>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d105      	bne.n	8007016 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 800700a:	4b56      	ldr	r3, [pc, #344]	; (8007164 <checkDemoModCalisma+0x254>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	f083 0301 	eor.w	r3, r3, #1
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007016:	2102      	movs	r1, #2
 8007018:	484d      	ldr	r0, [pc, #308]	; (8007150 <checkDemoModCalisma+0x240>)
 800701a:	f001 fe35 	bl	8008c88 <HAL_GPIO_ReadPin>
 800701e:	4603      	mov	r3, r0
 8007020:	2b01      	cmp	r3, #1
 8007022:	d125      	bne.n	8007070 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007024:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007028:	4849      	ldr	r0, [pc, #292]	; (8007150 <checkDemoModCalisma+0x240>)
 800702a:	f001 fe2d 	bl	8008c88 <HAL_GPIO_ReadPin>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d11d      	bne.n	8007070 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007034:	4b4b      	ldr	r3, [pc, #300]	; (8007164 <checkDemoModCalisma+0x254>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	f083 0301 	eor.w	r3, r3, #1
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d016      	beq.n	8007070 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007042:	4b44      	ldr	r3, [pc, #272]	; (8007154 <checkDemoModCalisma+0x244>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	f083 0301 	eor.w	r3, r3, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00f      	beq.n	8007070 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007050:	4b42      	ldr	r3, [pc, #264]	; (800715c <checkDemoModCalisma+0x24c>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	f083 0301 	eor.w	r3, r3, #1
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d008      	beq.n	8007070 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800705e:	2201      	movs	r2, #1
 8007060:	2120      	movs	r1, #32
 8007062:	483b      	ldr	r0, [pc, #236]	; (8007150 <checkDemoModCalisma+0x240>)
 8007064:	f001 fe27 	bl	8008cb6 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007068:	4b3b      	ldr	r3, [pc, #236]	; (8007158 <checkDemoModCalisma+0x248>)
 800706a:	2201      	movs	r2, #1
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	e007      	b.n	8007080 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007070:	2200      	movs	r2, #0
 8007072:	2120      	movs	r1, #32
 8007074:	4836      	ldr	r0, [pc, #216]	; (8007150 <checkDemoModCalisma+0x240>)
 8007076:	f001 fe1e 	bl	8008cb6 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800707a:	4b37      	ldr	r3, [pc, #220]	; (8007158 <checkDemoModCalisma+0x248>)
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007080:	2102      	movs	r1, #2
 8007082:	4833      	ldr	r0, [pc, #204]	; (8007150 <checkDemoModCalisma+0x240>)
 8007084:	f001 fe00 	bl	8008c88 <HAL_GPIO_ReadPin>
 8007088:	4603      	mov	r3, r0
 800708a:	2b01      	cmp	r3, #1
 800708c:	d125      	bne.n	80070da <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800708e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007092:	482f      	ldr	r0, [pc, #188]	; (8007150 <checkDemoModCalisma+0x240>)
 8007094:	f001 fdf8 	bl	8008c88 <HAL_GPIO_ReadPin>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d11d      	bne.n	80070da <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800709e:	4b31      	ldr	r3, [pc, #196]	; (8007164 <checkDemoModCalisma+0x254>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	f083 0301 	eor.w	r3, r3, #1
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d016      	beq.n	80070da <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80070ac:	4b2a      	ldr	r3, [pc, #168]	; (8007158 <checkDemoModCalisma+0x248>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	f083 0301 	eor.w	r3, r3, #1
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00f      	beq.n	80070da <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80070ba:	4b26      	ldr	r3, [pc, #152]	; (8007154 <checkDemoModCalisma+0x244>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	f083 0301 	eor.w	r3, r3, #1
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80070c8:	2201      	movs	r2, #1
 80070ca:	2110      	movs	r1, #16
 80070cc:	4820      	ldr	r0, [pc, #128]	; (8007150 <checkDemoModCalisma+0x240>)
 80070ce:	f001 fdf2 	bl	8008cb6 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80070d2:	4b22      	ldr	r3, [pc, #136]	; (800715c <checkDemoModCalisma+0x24c>)
 80070d4:	2201      	movs	r2, #1
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	e007      	b.n	80070ea <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80070da:	2200      	movs	r2, #0
 80070dc:	2110      	movs	r1, #16
 80070de:	481c      	ldr	r0, [pc, #112]	; (8007150 <checkDemoModCalisma+0x240>)
 80070e0:	f001 fde9 	bl	8008cb6 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80070e4:	4b1d      	ldr	r3, [pc, #116]	; (800715c <checkDemoModCalisma+0x24c>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80070ea:	2104      	movs	r1, #4
 80070ec:	4818      	ldr	r0, [pc, #96]	; (8007150 <checkDemoModCalisma+0x240>)
 80070ee:	f001 fdcb 	bl	8008c88 <HAL_GPIO_ReadPin>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d139      	bne.n	800716c <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80070f8:	4b1a      	ldr	r3, [pc, #104]	; (8007164 <checkDemoModCalisma+0x254>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	f083 0301 	eor.w	r3, r3, #1
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d032      	beq.n	800716c <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007106:	4b15      	ldr	r3, [pc, #84]	; (800715c <checkDemoModCalisma+0x24c>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	f083 0301 	eor.w	r3, r3, #1
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d02b      	beq.n	800716c <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007114:	4b10      	ldr	r3, [pc, #64]	; (8007158 <checkDemoModCalisma+0x248>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	f083 0301 	eor.w	r3, r3, #1
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d024      	beq.n	800716c <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007122:	2201      	movs	r2, #1
 8007124:	2102      	movs	r1, #2
 8007126:	480e      	ldr	r0, [pc, #56]	; (8007160 <checkDemoModCalisma+0x250>)
 8007128:	f001 fdc5 	bl	8008cb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800712c:	2201      	movs	r2, #1
 800712e:	2101      	movs	r1, #1
 8007130:	480b      	ldr	r0, [pc, #44]	; (8007160 <checkDemoModCalisma+0x250>)
 8007132:	f001 fdc0 	bl	8008cb6 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007136:	4b07      	ldr	r3, [pc, #28]	; (8007154 <checkDemoModCalisma+0x244>)
 8007138:	2201      	movs	r2, #1
 800713a:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 800713c:	4b0a      	ldr	r3, [pc, #40]	; (8007168 <checkDemoModCalisma+0x258>)
 800713e:	2201      	movs	r2, #1
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	e027      	b.n	8007194 <checkDemoModCalisma+0x284>
 8007144:	200002ce 	.word	0x200002ce
 8007148:	20000302 	.word	0x20000302
 800714c:	200002cd 	.word	0x200002cd
 8007150:	40011000 	.word	0x40011000
 8007154:	20000309 	.word	0x20000309
 8007158:	2000030a 	.word	0x2000030a
 800715c:	2000030b 	.word	0x2000030b
 8007160:	40010c00 	.word	0x40010c00
 8007164:	20000308 	.word	0x20000308
 8007168:	200002ee 	.word	0x200002ee
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 800716c:	2104      	movs	r1, #4
 800716e:	48a0      	ldr	r0, [pc, #640]	; (80073f0 <checkDemoModCalisma+0x4e0>)
 8007170:	f001 fd8a 	bl	8008c88 <HAL_GPIO_ReadPin>
 8007174:	4603      	mov	r3, r0
 8007176:	2b01      	cmp	r3, #1
 8007178:	d10c      	bne.n	8007194 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800717a:	2200      	movs	r2, #0
 800717c:	2102      	movs	r1, #2
 800717e:	489d      	ldr	r0, [pc, #628]	; (80073f4 <checkDemoModCalisma+0x4e4>)
 8007180:	f001 fd99 	bl	8008cb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007184:	2200      	movs	r2, #0
 8007186:	2101      	movs	r1, #1
 8007188:	489a      	ldr	r0, [pc, #616]	; (80073f4 <checkDemoModCalisma+0x4e4>)
 800718a:	f001 fd94 	bl	8008cb6 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800718e:	4b9a      	ldr	r3, [pc, #616]	; (80073f8 <checkDemoModCalisma+0x4e8>)
 8007190:	2200      	movs	r2, #0
 8007192:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007194:	2104      	movs	r1, #4
 8007196:	4896      	ldr	r0, [pc, #600]	; (80073f0 <checkDemoModCalisma+0x4e0>)
 8007198:	f001 fd76 	bl	8008c88 <HAL_GPIO_ReadPin>
 800719c:	4603      	mov	r3, r0
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d10d      	bne.n	80071be <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80071a2:	2201      	movs	r2, #1
 80071a4:	2180      	movs	r1, #128	; 0x80
 80071a6:	4895      	ldr	r0, [pc, #596]	; (80073fc <checkDemoModCalisma+0x4ec>)
 80071a8:	f001 fd85 	bl	8008cb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80071ac:	2201      	movs	r2, #1
 80071ae:	2120      	movs	r1, #32
 80071b0:	4892      	ldr	r0, [pc, #584]	; (80073fc <checkDemoModCalisma+0x4ec>)
 80071b2:	f001 fd80 	bl	8008cb6 <HAL_GPIO_WritePin>
			timer3 = millis;
 80071b6:	4b92      	ldr	r3, [pc, #584]	; (8007400 <checkDemoModCalisma+0x4f0>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a92      	ldr	r2, [pc, #584]	; (8007404 <checkDemoModCalisma+0x4f4>)
 80071bc:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80071be:	4b90      	ldr	r3, [pc, #576]	; (8007400 <checkDemoModCalisma+0x4f0>)
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4b90      	ldr	r3, [pc, #576]	; (8007404 <checkDemoModCalisma+0x4f4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d909      	bls.n	80071e0 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80071cc:	2200      	movs	r2, #0
 80071ce:	2180      	movs	r1, #128	; 0x80
 80071d0:	488a      	ldr	r0, [pc, #552]	; (80073fc <checkDemoModCalisma+0x4ec>)
 80071d2:	f001 fd70 	bl	8008cb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80071d6:	2200      	movs	r2, #0
 80071d8:	2120      	movs	r1, #32
 80071da:	4888      	ldr	r0, [pc, #544]	; (80073fc <checkDemoModCalisma+0x4ec>)
 80071dc:	f001 fd6b 	bl	8008cb6 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80071e0:	2102      	movs	r1, #2
 80071e2:	4883      	ldr	r0, [pc, #524]	; (80073f0 <checkDemoModCalisma+0x4e0>)
 80071e4:	f001 fd50 	bl	8008c88 <HAL_GPIO_ReadPin>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d108      	bne.n	8007200 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80071ee:	2201      	movs	r2, #1
 80071f0:	2140      	movs	r1, #64	; 0x40
 80071f2:	4882      	ldr	r0, [pc, #520]	; (80073fc <checkDemoModCalisma+0x4ec>)
 80071f4:	f001 fd5f 	bl	8008cb6 <HAL_GPIO_WritePin>
			timer3 = millis;
 80071f8:	4b81      	ldr	r3, [pc, #516]	; (8007400 <checkDemoModCalisma+0x4f0>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a81      	ldr	r2, [pc, #516]	; (8007404 <checkDemoModCalisma+0x4f4>)
 80071fe:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007200:	4b7f      	ldr	r3, [pc, #508]	; (8007400 <checkDemoModCalisma+0x4f0>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	4b7f      	ldr	r3, [pc, #508]	; (8007404 <checkDemoModCalisma+0x4f4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b04      	cmp	r3, #4
 800720c:	d904      	bls.n	8007218 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800720e:	2200      	movs	r2, #0
 8007210:	2140      	movs	r1, #64	; 0x40
 8007212:	487a      	ldr	r0, [pc, #488]	; (80073fc <checkDemoModCalisma+0x4ec>)
 8007214:	f001 fd4f 	bl	8008cb6 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007218:	4b7b      	ldr	r3, [pc, #492]	; (8007408 <checkDemoModCalisma+0x4f8>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d058      	beq.n	80072d2 <checkDemoModCalisma+0x3c2>
 8007220:	4b7a      	ldr	r3, [pc, #488]	; (800740c <checkDemoModCalisma+0x4fc>)
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d054      	beq.n	80072d2 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007228:	4b79      	ldr	r3, [pc, #484]	; (8007410 <checkDemoModCalisma+0x500>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	3301      	adds	r3, #1
 800722e:	b2da      	uxtb	r2, r3
 8007230:	4b77      	ldr	r3, [pc, #476]	; (8007410 <checkDemoModCalisma+0x500>)
 8007232:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007234:	4b76      	ldr	r3, [pc, #472]	; (8007410 <checkDemoModCalisma+0x500>)
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b09      	cmp	r3, #9
 800723a:	d908      	bls.n	800724e <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 800723c:	4b74      	ldr	r3, [pc, #464]	; (8007410 <checkDemoModCalisma+0x500>)
 800723e:	2200      	movs	r2, #0
 8007240:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007242:	4b74      	ldr	r3, [pc, #464]	; (8007414 <checkDemoModCalisma+0x504>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	3301      	adds	r3, #1
 8007248:	b2da      	uxtb	r2, r3
 800724a:	4b72      	ldr	r3, [pc, #456]	; (8007414 <checkDemoModCalisma+0x504>)
 800724c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 800724e:	4b71      	ldr	r3, [pc, #452]	; (8007414 <checkDemoModCalisma+0x504>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	2b09      	cmp	r3, #9
 8007254:	d908      	bls.n	8007268 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007256:	4b6f      	ldr	r3, [pc, #444]	; (8007414 <checkDemoModCalisma+0x504>)
 8007258:	2200      	movs	r2, #0
 800725a:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 800725c:	4b6e      	ldr	r3, [pc, #440]	; (8007418 <checkDemoModCalisma+0x508>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	3301      	adds	r3, #1
 8007262:	b2da      	uxtb	r2, r3
 8007264:	4b6c      	ldr	r3, [pc, #432]	; (8007418 <checkDemoModCalisma+0x508>)
 8007266:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007268:	4b6b      	ldr	r3, [pc, #428]	; (8007418 <checkDemoModCalisma+0x508>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b09      	cmp	r3, #9
 800726e:	d908      	bls.n	8007282 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007270:	4b69      	ldr	r3, [pc, #420]	; (8007418 <checkDemoModCalisma+0x508>)
 8007272:	2200      	movs	r2, #0
 8007274:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007276:	4b69      	ldr	r3, [pc, #420]	; (800741c <checkDemoModCalisma+0x50c>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	3301      	adds	r3, #1
 800727c:	b2da      	uxtb	r2, r3
 800727e:	4b67      	ldr	r3, [pc, #412]	; (800741c <checkDemoModCalisma+0x50c>)
 8007280:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007282:	4b66      	ldr	r3, [pc, #408]	; (800741c <checkDemoModCalisma+0x50c>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b09      	cmp	r3, #9
 8007288:	d908      	bls.n	800729c <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800728a:	4b64      	ldr	r3, [pc, #400]	; (800741c <checkDemoModCalisma+0x50c>)
 800728c:	2200      	movs	r2, #0
 800728e:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007290:	4b63      	ldr	r3, [pc, #396]	; (8007420 <checkDemoModCalisma+0x510>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	3301      	adds	r3, #1
 8007296:	b2da      	uxtb	r2, r3
 8007298:	4b61      	ldr	r3, [pc, #388]	; (8007420 <checkDemoModCalisma+0x510>)
 800729a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800729c:	4b60      	ldr	r3, [pc, #384]	; (8007420 <checkDemoModCalisma+0x510>)
 800729e:	781a      	ldrb	r2, [r3, #0]
 80072a0:	4b60      	ldr	r3, [pc, #384]	; (8007424 <checkDemoModCalisma+0x514>)
 80072a2:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80072a6:	4b5d      	ldr	r3, [pc, #372]	; (800741c <checkDemoModCalisma+0x50c>)
 80072a8:	781a      	ldrb	r2, [r3, #0]
 80072aa:	4b5e      	ldr	r3, [pc, #376]	; (8007424 <checkDemoModCalisma+0x514>)
 80072ac:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80072ae:	4b5a      	ldr	r3, [pc, #360]	; (8007418 <checkDemoModCalisma+0x508>)
 80072b0:	781a      	ldrb	r2, [r3, #0]
 80072b2:	4b5c      	ldr	r3, [pc, #368]	; (8007424 <checkDemoModCalisma+0x514>)
 80072b4:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80072b6:	4b57      	ldr	r3, [pc, #348]	; (8007414 <checkDemoModCalisma+0x504>)
 80072b8:	781a      	ldrb	r2, [r3, #0]
 80072ba:	4b5a      	ldr	r3, [pc, #360]	; (8007424 <checkDemoModCalisma+0x514>)
 80072bc:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80072be:	4b54      	ldr	r3, [pc, #336]	; (8007410 <checkDemoModCalisma+0x500>)
 80072c0:	781a      	ldrb	r2, [r3, #0]
 80072c2:	4b58      	ldr	r3, [pc, #352]	; (8007424 <checkDemoModCalisma+0x514>)
 80072c4:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80072c6:	4b58      	ldr	r3, [pc, #352]	; (8007428 <checkDemoModCalisma+0x518>)
 80072c8:	2201      	movs	r2, #1
 80072ca:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80072cc:	4b4f      	ldr	r3, [pc, #316]	; (800740c <checkDemoModCalisma+0x4fc>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80072d2:	4b56      	ldr	r3, [pc, #344]	; (800742c <checkDemoModCalisma+0x51c>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f040 8087 	bne.w	80073ea <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80072dc:	4a54      	ldr	r2, [pc, #336]	; (8007430 <checkDemoModCalisma+0x520>)
 80072de:	2101      	movs	r1, #1
 80072e0:	2002      	movs	r0, #2
 80072e2:	f7f9 f93f 	bl	8000564 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80072e6:	4a53      	ldr	r2, [pc, #332]	; (8007434 <checkDemoModCalisma+0x524>)
 80072e8:	2101      	movs	r1, #1
 80072ea:	2001      	movs	r0, #1
 80072ec:	f7f9 f93a 	bl	8000564 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80072f0:	4b4b      	ldr	r3, [pc, #300]	; (8007420 <checkDemoModCalisma+0x510>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	220a      	movs	r2, #10
 80072f6:	4950      	ldr	r1, [pc, #320]	; (8007438 <checkDemoModCalisma+0x528>)
 80072f8:	4618      	mov	r0, r3
 80072fa:	f004 fcbb 	bl	800bc74 <itoa>
			lcd_print(2,12,snum);
 80072fe:	4a4e      	ldr	r2, [pc, #312]	; (8007438 <checkDemoModCalisma+0x528>)
 8007300:	210c      	movs	r1, #12
 8007302:	2002      	movs	r0, #2
 8007304:	f7f9 f92e 	bl	8000564 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007308:	4b44      	ldr	r3, [pc, #272]	; (800741c <checkDemoModCalisma+0x50c>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	220a      	movs	r2, #10
 800730e:	494a      	ldr	r1, [pc, #296]	; (8007438 <checkDemoModCalisma+0x528>)
 8007310:	4618      	mov	r0, r3
 8007312:	f004 fcaf 	bl	800bc74 <itoa>
			lcd_print(2,13,snum);
 8007316:	4a48      	ldr	r2, [pc, #288]	; (8007438 <checkDemoModCalisma+0x528>)
 8007318:	210d      	movs	r1, #13
 800731a:	2002      	movs	r0, #2
 800731c:	f7f9 f922 	bl	8000564 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007320:	4b3d      	ldr	r3, [pc, #244]	; (8007418 <checkDemoModCalisma+0x508>)
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	220a      	movs	r2, #10
 8007326:	4944      	ldr	r1, [pc, #272]	; (8007438 <checkDemoModCalisma+0x528>)
 8007328:	4618      	mov	r0, r3
 800732a:	f004 fca3 	bl	800bc74 <itoa>
			lcd_print(2,14,snum);
 800732e:	4a42      	ldr	r2, [pc, #264]	; (8007438 <checkDemoModCalisma+0x528>)
 8007330:	210e      	movs	r1, #14
 8007332:	2002      	movs	r0, #2
 8007334:	f7f9 f916 	bl	8000564 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007338:	4b36      	ldr	r3, [pc, #216]	; (8007414 <checkDemoModCalisma+0x504>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	220a      	movs	r2, #10
 800733e:	493e      	ldr	r1, [pc, #248]	; (8007438 <checkDemoModCalisma+0x528>)
 8007340:	4618      	mov	r0, r3
 8007342:	f004 fc97 	bl	800bc74 <itoa>
			lcd_print(2,15,snum);
 8007346:	4a3c      	ldr	r2, [pc, #240]	; (8007438 <checkDemoModCalisma+0x528>)
 8007348:	210f      	movs	r1, #15
 800734a:	2002      	movs	r0, #2
 800734c:	f7f9 f90a 	bl	8000564 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007350:	4b2f      	ldr	r3, [pc, #188]	; (8007410 <checkDemoModCalisma+0x500>)
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	220a      	movs	r2, #10
 8007356:	4938      	ldr	r1, [pc, #224]	; (8007438 <checkDemoModCalisma+0x528>)
 8007358:	4618      	mov	r0, r3
 800735a:	f004 fc8b 	bl	800bc74 <itoa>
			lcd_print(2,16,snum);
 800735e:	4a36      	ldr	r2, [pc, #216]	; (8007438 <checkDemoModCalisma+0x528>)
 8007360:	2110      	movs	r1, #16
 8007362:	2002      	movs	r0, #2
 8007364:	f7f9 f8fe 	bl	8000564 <lcd_print>
			mesajYazildi=1;
 8007368:	4b34      	ldr	r3, [pc, #208]	; (800743c <checkDemoModCalisma+0x52c>)
 800736a:	2201      	movs	r2, #1
 800736c:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800736e:	e03c      	b.n	80073ea <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007370:	4b33      	ldr	r3, [pc, #204]	; (8007440 <checkDemoModCalisma+0x530>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d003      	beq.n	8007380 <checkDemoModCalisma+0x470>
 8007378:	4b2c      	ldr	r3, [pc, #176]	; (800742c <checkDemoModCalisma+0x51c>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d134      	bne.n	80073ea <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007380:	2200      	movs	r2, #0
 8007382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007386:	481b      	ldr	r0, [pc, #108]	; (80073f4 <checkDemoModCalisma+0x4e4>)
 8007388:	f001 fc95 	bl	8008cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800738c:	2200      	movs	r2, #0
 800738e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007392:	4818      	ldr	r0, [pc, #96]	; (80073f4 <checkDemoModCalisma+0x4e4>)
 8007394:	f001 fc8f 	bl	8008cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007398:	2200      	movs	r2, #0
 800739a:	2104      	movs	r1, #4
 800739c:	4815      	ldr	r0, [pc, #84]	; (80073f4 <checkDemoModCalisma+0x4e4>)
 800739e:	f001 fc8a 	bl	8008cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80073a2:	2200      	movs	r2, #0
 80073a4:	2102      	movs	r1, #2
 80073a6:	4813      	ldr	r0, [pc, #76]	; (80073f4 <checkDemoModCalisma+0x4e4>)
 80073a8:	f001 fc85 	bl	8008cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80073ac:	2200      	movs	r2, #0
 80073ae:	2101      	movs	r1, #1
 80073b0:	4810      	ldr	r0, [pc, #64]	; (80073f4 <checkDemoModCalisma+0x4e4>)
 80073b2:	f001 fc80 	bl	8008cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80073b6:	2200      	movs	r2, #0
 80073b8:	2120      	movs	r1, #32
 80073ba:	480d      	ldr	r0, [pc, #52]	; (80073f0 <checkDemoModCalisma+0x4e0>)
 80073bc:	f001 fc7b 	bl	8008cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80073c0:	2200      	movs	r2, #0
 80073c2:	2110      	movs	r1, #16
 80073c4:	480a      	ldr	r0, [pc, #40]	; (80073f0 <checkDemoModCalisma+0x4e0>)
 80073c6:	f001 fc76 	bl	8008cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80073ca:	2200      	movs	r2, #0
 80073cc:	2180      	movs	r1, #128	; 0x80
 80073ce:	480b      	ldr	r0, [pc, #44]	; (80073fc <checkDemoModCalisma+0x4ec>)
 80073d0:	f001 fc71 	bl	8008cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80073d4:	2200      	movs	r2, #0
 80073d6:	2140      	movs	r1, #64	; 0x40
 80073d8:	4808      	ldr	r0, [pc, #32]	; (80073fc <checkDemoModCalisma+0x4ec>)
 80073da:	f001 fc6c 	bl	8008cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80073de:	2200      	movs	r2, #0
 80073e0:	2120      	movs	r1, #32
 80073e2:	4806      	ldr	r0, [pc, #24]	; (80073fc <checkDemoModCalisma+0x4ec>)
 80073e4:	f001 fc67 	bl	8008cb6 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80073e8:	e7ff      	b.n	80073ea <checkDemoModCalisma+0x4da>
 80073ea:	bf00      	nop
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	40011000 	.word	0x40011000
 80073f4:	40010c00 	.word	0x40010c00
 80073f8:	20000309 	.word	0x20000309
 80073fc:	40010800 	.word	0x40010800
 8007400:	20000258 	.word	0x20000258
 8007404:	20000268 	.word	0x20000268
 8007408:	20000308 	.word	0x20000308
 800740c:	200002ee 	.word	0x200002ee
 8007410:	200002ad 	.word	0x200002ad
 8007414:	200002ae 	.word	0x200002ae
 8007418:	200000a4 	.word	0x200000a4
 800741c:	200000a5 	.word	0x200000a5
 8007420:	200002af 	.word	0x200002af
 8007424:	200001e0 	.word	0x200001e0
 8007428:	200002dc 	.word	0x200002dc
 800742c:	200002cd 	.word	0x200002cd
 8007430:	0800c9fc 	.word	0x0800c9fc
 8007434:	0800ca08 	.word	0x0800ca08
 8007438:	20000250 	.word	0x20000250
 800743c:	200002e4 	.word	0x200002e4
 8007440:	200002ce 	.word	0x200002ce

08007444 <mainLoop>:
	char* result = malloc(strlen(combinedString) + 1);
	strcpy(result, combinedString);
	return result;
}

void mainLoop() {
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800744a:	f7fe f925 	bl	8005698 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800744e:	2101      	movs	r1, #1
 8007450:	48ad      	ldr	r0, [pc, #692]	; (8007708 <mainLoop+0x2c4>)
 8007452:	f001 fc19 	bl	8008c88 <HAL_GPIO_ReadPin>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d136      	bne.n	80074ca <mainLoop+0x86>
 800745c:	2108      	movs	r1, #8
 800745e:	48ab      	ldr	r0, [pc, #684]	; (800770c <mainLoop+0x2c8>)
 8007460:	f001 fc12 	bl	8008c88 <HAL_GPIO_ReadPin>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d12f      	bne.n	80074ca <mainLoop+0x86>
 800746a:	2102      	movs	r1, #2
 800746c:	48a6      	ldr	r0, [pc, #664]	; (8007708 <mainLoop+0x2c4>)
 800746e:	f001 fc0b 	bl	8008c88 <HAL_GPIO_ReadPin>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d128      	bne.n	80074ca <mainLoop+0x86>
 8007478:	2104      	movs	r1, #4
 800747a:	48a3      	ldr	r0, [pc, #652]	; (8007708 <mainLoop+0x2c4>)
 800747c:	f001 fc04 	bl	8008c88 <HAL_GPIO_ReadPin>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d121      	bne.n	80074ca <mainLoop+0x86>
 8007486:	2108      	movs	r1, #8
 8007488:	489f      	ldr	r0, [pc, #636]	; (8007708 <mainLoop+0x2c4>)
 800748a:	f001 fbfd 	bl	8008c88 <HAL_GPIO_ReadPin>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d11a      	bne.n	80074ca <mainLoop+0x86>
 8007494:	2180      	movs	r1, #128	; 0x80
 8007496:	489d      	ldr	r0, [pc, #628]	; (800770c <mainLoop+0x2c8>)
 8007498:	f001 fbf6 	bl	8008c88 <HAL_GPIO_ReadPin>
 800749c:	4603      	mov	r3, r0
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d113      	bne.n	80074ca <mainLoop+0x86>
 80074a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80074a6:	4899      	ldr	r0, [pc, #612]	; (800770c <mainLoop+0x2c8>)
 80074a8:	f001 fbee 	bl	8008c88 <HAL_GPIO_ReadPin>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d10b      	bne.n	80074ca <mainLoop+0x86>
 80074b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074b6:	4895      	ldr	r0, [pc, #596]	; (800770c <mainLoop+0x2c8>)
 80074b8:	f001 fbe6 	bl	8008c88 <HAL_GPIO_ReadPin>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d103      	bne.n	80074ca <mainLoop+0x86>
			butonKontrol=0;
 80074c2:	4b93      	ldr	r3, [pc, #588]	; (8007710 <mainLoop+0x2cc>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	701a      	strb	r2, [r3, #0]
 80074c8:	e003      	b.n	80074d2 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80074ca:	4b92      	ldr	r3, [pc, #584]	; (8007714 <mainLoop+0x2d0>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a92      	ldr	r2, [pc, #584]	; (8007718 <mainLoop+0x2d4>)
 80074d0:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80074d2:	4b92      	ldr	r3, [pc, #584]	; (800771c <mainLoop+0x2d8>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d03a      	beq.n	8007550 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80074da:	bf00      	nop
 80074dc:	4890      	ldr	r0, [pc, #576]	; (8007720 <mainLoop+0x2dc>)
 80074de:	f002 f9fc 	bl	80098da <HAL_I2C_GetError>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	d0f9      	beq.n	80074dc <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80074e8:	bf00      	nop
 80074ea:	488d      	ldr	r0, [pc, #564]	; (8007720 <mainLoop+0x2dc>)
 80074ec:	f002 f9e8 	bl	80098c0 <HAL_I2C_GetState>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d1f9      	bne.n	80074ea <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80074f6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80074fa:	9302      	str	r3, [sp, #8]
 80074fc:	236e      	movs	r3, #110	; 0x6e
 80074fe:	9301      	str	r3, [sp, #4]
 8007500:	4b88      	ldr	r3, [pc, #544]	; (8007724 <mainLoop+0x2e0>)
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	236e      	movs	r3, #110	; 0x6e
 8007506:	2200      	movs	r2, #0
 8007508:	21a0      	movs	r1, #160	; 0xa0
 800750a:	4885      	ldr	r0, [pc, #532]	; (8007720 <mainLoop+0x2dc>)
 800750c:	f001 fe76 	bl	80091fc <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8007510:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007514:	f000 fde8 	bl	80080e8 <HAL_Delay>

		  hafizaYaz=0;
 8007518:	4b80      	ldr	r3, [pc, #512]	; (800771c <mainLoop+0x2d8>)
 800751a:	2200      	movs	r2, #0
 800751c:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 800751e:	4b82      	ldr	r3, [pc, #520]	; (8007728 <mainLoop+0x2e4>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d105      	bne.n	8007532 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8007526:	4a81      	ldr	r2, [pc, #516]	; (800772c <mainLoop+0x2e8>)
 8007528:	2101      	movs	r1, #1
 800752a:	2002      	movs	r0, #2
 800752c:	f7f9 f81a 	bl	8000564 <lcd_print>
 8007530:	e008      	b.n	8007544 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8007532:	4b7d      	ldr	r3, [pc, #500]	; (8007728 <mainLoop+0x2e4>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d104      	bne.n	8007544 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 800753a:	4a7d      	ldr	r2, [pc, #500]	; (8007730 <mainLoop+0x2ec>)
 800753c:	2101      	movs	r1, #1
 800753e:	2002      	movs	r0, #2
 8007540:	f7f9 f810 	bl	8000564 <lcd_print>
		  }

		  HAL_Delay(1000);
 8007544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007548:	f000 fdce 	bl	80080e8 <HAL_Delay>
		  lcd_clear();
 800754c:	f7f9 f836 	bl	80005bc <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8007550:	4b78      	ldr	r3, [pc, #480]	; (8007734 <mainLoop+0x2f0>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	f083 0301 	eor.w	r3, r3, #1
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d06e      	beq.n	800763c <mainLoop+0x1f8>
 800755e:	4870      	ldr	r0, [pc, #448]	; (8007720 <mainLoop+0x2dc>)
 8007560:	f002 f9ae 	bl	80098c0 <HAL_I2C_GetState>
 8007564:	4603      	mov	r3, r0
 8007566:	2b20      	cmp	r3, #32
 8007568:	d168      	bne.n	800763c <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 800756a:	4b73      	ldr	r3, [pc, #460]	; (8007738 <mainLoop+0x2f4>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	f083 0301 	eor.w	r3, r3, #1
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d044      	beq.n	8007602 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8007578:	4a70      	ldr	r2, [pc, #448]	; (800773c <mainLoop+0x2f8>)
 800757a:	2101      	movs	r1, #1
 800757c:	2001      	movs	r0, #1
 800757e:	f7f8 fff1 	bl	8000564 <lcd_print>
			  if(dilSecim==0) {
 8007582:	4b69      	ldr	r3, [pc, #420]	; (8007728 <mainLoop+0x2e4>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d105      	bne.n	8007596 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 800758a:	4a6d      	ldr	r2, [pc, #436]	; (8007740 <mainLoop+0x2fc>)
 800758c:	2101      	movs	r1, #1
 800758e:	2002      	movs	r0, #2
 8007590:	f7f8 ffe8 	bl	8000564 <lcd_print>
 8007594:	e008      	b.n	80075a8 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8007596:	4b64      	ldr	r3, [pc, #400]	; (8007728 <mainLoop+0x2e4>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d104      	bne.n	80075a8 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 800759e:	4a69      	ldr	r2, [pc, #420]	; (8007744 <mainLoop+0x300>)
 80075a0:	2101      	movs	r1, #1
 80075a2:	2002      	movs	r0, #2
 80075a4:	f7f8 ffde 	bl	8000564 <lcd_print>
			  }
			  HAL_Delay(1000);
 80075a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075ac:	f000 fd9c 	bl	80080e8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80075b0:	bf00      	nop
 80075b2:	485b      	ldr	r0, [pc, #364]	; (8007720 <mainLoop+0x2dc>)
 80075b4:	f002 f991 	bl	80098da <HAL_I2C_GetError>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	d0f9      	beq.n	80075b2 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80075be:	e003      	b.n	80075c8 <mainLoop+0x184>
				  HAL_Delay(1000);
 80075c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075c4:	f000 fd90 	bl	80080e8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80075c8:	4855      	ldr	r0, [pc, #340]	; (8007720 <mainLoop+0x2dc>)
 80075ca:	f002 f979 	bl	80098c0 <HAL_I2C_GetState>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b20      	cmp	r3, #32
 80075d2:	d1f5      	bne.n	80075c0 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 80075d4:	4b54      	ldr	r3, [pc, #336]	; (8007728 <mainLoop+0x2e4>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d105      	bne.n	80075e8 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 80075dc:	4a5a      	ldr	r2, [pc, #360]	; (8007748 <mainLoop+0x304>)
 80075de:	2101      	movs	r1, #1
 80075e0:	2002      	movs	r0, #2
 80075e2:	f7f8 ffbf 	bl	8000564 <lcd_print>
 80075e6:	e008      	b.n	80075fa <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 80075e8:	4b4f      	ldr	r3, [pc, #316]	; (8007728 <mainLoop+0x2e4>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d104      	bne.n	80075fa <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 80075f0:	4a56      	ldr	r2, [pc, #344]	; (800774c <mainLoop+0x308>)
 80075f2:	2101      	movs	r1, #1
 80075f4:	2002      	movs	r0, #2
 80075f6:	f7f8 ffb5 	bl	8000564 <lcd_print>
			  }

			  ilkOkuma=1;
 80075fa:	4b4f      	ldr	r3, [pc, #316]	; (8007738 <mainLoop+0x2f4>)
 80075fc:	2201      	movs	r2, #1
 80075fe:	701a      	strb	r2, [r3, #0]
 8007600:	e014      	b.n	800762c <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8007602:	4b49      	ldr	r3, [pc, #292]	; (8007728 <mainLoop+0x2e4>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d105      	bne.n	8007616 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 800760a:	4a51      	ldr	r2, [pc, #324]	; (8007750 <mainLoop+0x30c>)
 800760c:	2101      	movs	r1, #1
 800760e:	2002      	movs	r0, #2
 8007610:	f7f8 ffa8 	bl	8000564 <lcd_print>
 8007614:	e008      	b.n	8007628 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8007616:	4b44      	ldr	r3, [pc, #272]	; (8007728 <mainLoop+0x2e4>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d104      	bne.n	8007628 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 800761e:	4a4d      	ldr	r2, [pc, #308]	; (8007754 <mainLoop+0x310>)
 8007620:	2101      	movs	r1, #1
 8007622:	2002      	movs	r0, #2
 8007624:	f7f8 ff9e 	bl	8000564 <lcd_print>
			  }
			  lcd_clear();
 8007628:	f7f8 ffc8 	bl	80005bc <lcd_clear>
		  }

		  lcd_clear();
 800762c:	f7f8 ffc6 	bl	80005bc <lcd_clear>

		  eepromKontrol(1);
 8007630:	2001      	movs	r0, #1
 8007632:	f7fd fbcb 	bl	8004dcc <eepromKontrol>
		  hafizaOku=1;
 8007636:	4b3f      	ldr	r3, [pc, #252]	; (8007734 <mainLoop+0x2f0>)
 8007638:	2201      	movs	r2, #1
 800763a:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 800763c:	4b46      	ldr	r3, [pc, #280]	; (8007758 <mainLoop+0x314>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d11c      	bne.n	800767e <mainLoop+0x23a>
 8007644:	4b45      	ldr	r3, [pc, #276]	; (800775c <mainLoop+0x318>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	f083 0301 	eor.w	r3, r3, #1
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d015      	beq.n	800767e <mainLoop+0x23a>
 8007652:	4b43      	ldr	r3, [pc, #268]	; (8007760 <mainLoop+0x31c>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d111      	bne.n	800767e <mainLoop+0x23a>
			lcd_clear();
 800765a:	f7f8 ffaf 	bl	80005bc <lcd_clear>
			HAL_Delay(10);
 800765e:	200a      	movs	r0, #10
 8007660:	f000 fd42 	bl	80080e8 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8007664:	4a3f      	ldr	r2, [pc, #252]	; (8007764 <mainLoop+0x320>)
 8007666:	2101      	movs	r1, #1
 8007668:	2001      	movs	r0, #1
 800766a:	f7f8 ff7b 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 800766e:	4a3e      	ldr	r2, [pc, #248]	; (8007768 <mainLoop+0x324>)
 8007670:	2101      	movs	r1, #1
 8007672:	2002      	movs	r0, #2
 8007674:	f7f8 ff76 	bl	8000564 <lcd_print>
			mesajYazildi=1;
 8007678:	4b38      	ldr	r3, [pc, #224]	; (800775c <mainLoop+0x318>)
 800767a:	2201      	movs	r2, #1
 800767c:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 800767e:	4b36      	ldr	r3, [pc, #216]	; (8007758 <mainLoop+0x314>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d112      	bne.n	80076ac <mainLoop+0x268>
 8007686:	2102      	movs	r1, #2
 8007688:	481f      	ldr	r0, [pc, #124]	; (8007708 <mainLoop+0x2c4>)
 800768a:	f001 fafd 	bl	8008c88 <HAL_GPIO_ReadPin>
 800768e:	4603      	mov	r3, r0
 8007690:	2b01      	cmp	r3, #1
 8007692:	d10b      	bne.n	80076ac <mainLoop+0x268>
 8007694:	2104      	movs	r1, #4
 8007696:	481c      	ldr	r0, [pc, #112]	; (8007708 <mainLoop+0x2c4>)
 8007698:	f001 faf6 	bl	8008c88 <HAL_GPIO_ReadPin>
 800769c:	4603      	mov	r3, r0
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d104      	bne.n	80076ac <mainLoop+0x268>
			menuGiris=1;
 80076a2:	4b2d      	ldr	r3, [pc, #180]	; (8007758 <mainLoop+0x314>)
 80076a4:	2201      	movs	r2, #1
 80076a6:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80076a8:	f7f8 ff88 	bl	80005bc <lcd_clear>
		}

		if(menuGiris==1) {
 80076ac:	4b2a      	ldr	r3, [pc, #168]	; (8007758 <mainLoop+0x314>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d102      	bne.n	80076ba <mainLoop+0x276>
			menu(&hi2c1);
 80076b4:	481a      	ldr	r0, [pc, #104]	; (8007720 <mainLoop+0x2dc>)
 80076b6:	f7f9 ff01 	bl	80014bc <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80076ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80076be:	4813      	ldr	r0, [pc, #76]	; (800770c <mainLoop+0x2c8>)
 80076c0:	f001 fb11 	bl	8008ce6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80076c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80076c8:	4828      	ldr	r0, [pc, #160]	; (800776c <mainLoop+0x328>)
 80076ca:	f001 fadd 	bl	8008c88 <HAL_GPIO_ReadPin>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10a      	bne.n	80076ea <mainLoop+0x2a6>
 80076d4:	4b26      	ldr	r3, [pc, #152]	; (8007770 <mainLoop+0x32c>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	f083 0301 	eor.w	r3, r3, #1
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <mainLoop+0x2a6>
			stopVar=1;
 80076e2:	4b24      	ldr	r3, [pc, #144]	; (8007774 <mainLoop+0x330>)
 80076e4:	2201      	movs	r2, #1
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	e002      	b.n	80076f0 <mainLoop+0x2ac>
		} else {
			stopVar=0;
 80076ea:	4b22      	ldr	r3, [pc, #136]	; (8007774 <mainLoop+0x330>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80076f0:	f7fd fff2 	bl	80056d8 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80076f4:	f7fe f824 	bl	8005740 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80076f8:	f7fe f868 	bl	80057cc <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80076fc:	f7fe f8b8 	bl	8005870 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8007700:	f7ff fc06 	bl	8006f10 <checkDemoModCalisma>
		checkLCDBacklight();
 8007704:	e6a1      	b.n	800744a <mainLoop+0x6>
 8007706:	bf00      	nop
 8007708:	40010800 	.word	0x40010800
 800770c:	40011000 	.word	0x40011000
 8007710:	200002df 	.word	0x200002df
 8007714:	20000258 	.word	0x20000258
 8007718:	20000274 	.word	0x20000274
 800771c:	200002dc 	.word	0x200002dc
 8007720:	200000fc 	.word	0x200000fc
 8007724:	200001e0 	.word	0x200001e0
 8007728:	200002d1 	.word	0x200002d1
 800772c:	0800ca20 	.word	0x0800ca20
 8007730:	0800ca34 	.word	0x0800ca34
 8007734:	200002dd 	.word	0x200002dd
 8007738:	200002de 	.word	0x200002de
 800773c:	0800ca48 	.word	0x0800ca48
 8007740:	0800ca5c 	.word	0x0800ca5c
 8007744:	0800ca70 	.word	0x0800ca70
 8007748:	0800ca84 	.word	0x0800ca84
 800774c:	0800ca98 	.word	0x0800ca98
 8007750:	0800caac 	.word	0x0800caac
 8007754:	0800cac0 	.word	0x0800cac0
 8007758:	200002cd 	.word	0x200002cd
 800775c:	200002e4 	.word	0x200002e4
 8007760:	200002ce 	.word	0x200002ce
 8007764:	0800c984 	.word	0x0800c984
 8007768:	0800c998 	.word	0x0800c998
 800776c:	40010c00 	.word	0x40010c00
 8007770:	20000305 	.word	0x20000305
 8007774:	20000302 	.word	0x20000302

08007778 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007780:	4b04      	ldr	r3, [pc, #16]	; (8007794 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3301      	adds	r3, #1
 8007786:	4a03      	ldr	r2, [pc, #12]	; (8007794 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007788:	6013      	str	r3, [r2, #0]
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	bc80      	pop	{r7}
 8007792:	4770      	bx	lr
 8007794:	20000258 	.word	0x20000258

08007798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800779c:	f000 fc42 	bl	8008024 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80077a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80077a4:	f000 fca0 	bl	80080e8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80077a8:	f000 f8a8 	bl	80078fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80077ac:	f000 f9ca 	bl	8007b44 <MX_GPIO_Init>
  MX_CAN_Init();
 80077b0:	f000 f8ea 	bl	8007988 <MX_CAN_Init>
  MX_I2C1_Init();
 80077b4:	f000 f91c 	bl	80079f0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80077b8:	f000 f948 	bl	8007a4c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80077bc:	f000 f998 	bl	8007af0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80077c0:	2201      	movs	r2, #1
 80077c2:	2140      	movs	r1, #64	; 0x40
 80077c4:	4843      	ldr	r0, [pc, #268]	; (80078d4 <main+0x13c>)
 80077c6:	f001 fa76 	bl	8008cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80077ca:	2201      	movs	r2, #1
 80077cc:	2180      	movs	r1, #128	; 0x80
 80077ce:	4841      	ldr	r0, [pc, #260]	; (80078d4 <main+0x13c>)
 80077d0:	f001 fa71 	bl	8008cb6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80077d4:	200a      	movs	r0, #10
 80077d6:	f000 fc87 	bl	80080e8 <HAL_Delay>
  lcd_init();
 80077da:	f7f8 fe91 	bl	8000500 <lcd_init>
  HAL_Delay(10);
 80077de:	200a      	movs	r0, #10
 80077e0:	f000 fc82 	bl	80080e8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80077e4:	483c      	ldr	r0, [pc, #240]	; (80078d8 <main+0x140>)
 80077e6:	f003 f919 	bl	800aa1c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80077ea:	bf00      	nop
 80077ec:	483b      	ldr	r0, [pc, #236]	; (80078dc <main+0x144>)
 80077ee:	f002 f874 	bl	80098da <HAL_I2C_GetError>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d0f9      	beq.n	80077ec <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80077f8:	bf00      	nop
 80077fa:	4838      	ldr	r0, [pc, #224]	; (80078dc <main+0x144>)
 80077fc:	f002 f860 	bl	80098c0 <HAL_I2C_GetState>
 8007800:	4603      	mov	r3, r0
 8007802:	2b20      	cmp	r3, #32
 8007804:	d1f9      	bne.n	80077fa <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007806:	2200      	movs	r2, #0
 8007808:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800780c:	4831      	ldr	r0, [pc, #196]	; (80078d4 <main+0x13c>)
 800780e:	f001 fa52 	bl	8008cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007812:	2200      	movs	r2, #0
 8007814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007818:	482e      	ldr	r0, [pc, #184]	; (80078d4 <main+0x13c>)
 800781a:	f001 fa4c 	bl	8008cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800781e:	2200      	movs	r2, #0
 8007820:	2104      	movs	r1, #4
 8007822:	482c      	ldr	r0, [pc, #176]	; (80078d4 <main+0x13c>)
 8007824:	f001 fa47 	bl	8008cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007828:	2200      	movs	r2, #0
 800782a:	2102      	movs	r1, #2
 800782c:	4829      	ldr	r0, [pc, #164]	; (80078d4 <main+0x13c>)
 800782e:	f001 fa42 	bl	8008cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007832:	2200      	movs	r2, #0
 8007834:	2101      	movs	r1, #1
 8007836:	4827      	ldr	r0, [pc, #156]	; (80078d4 <main+0x13c>)
 8007838:	f001 fa3d 	bl	8008cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800783c:	2200      	movs	r2, #0
 800783e:	2120      	movs	r1, #32
 8007840:	4827      	ldr	r0, [pc, #156]	; (80078e0 <main+0x148>)
 8007842:	f001 fa38 	bl	8008cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007846:	2200      	movs	r2, #0
 8007848:	2110      	movs	r1, #16
 800784a:	4825      	ldr	r0, [pc, #148]	; (80078e0 <main+0x148>)
 800784c:	f001 fa33 	bl	8008cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007850:	2200      	movs	r2, #0
 8007852:	2180      	movs	r1, #128	; 0x80
 8007854:	4823      	ldr	r0, [pc, #140]	; (80078e4 <main+0x14c>)
 8007856:	f001 fa2e 	bl	8008cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800785a:	2200      	movs	r2, #0
 800785c:	2140      	movs	r1, #64	; 0x40
 800785e:	4821      	ldr	r0, [pc, #132]	; (80078e4 <main+0x14c>)
 8007860:	f001 fa29 	bl	8008cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007864:	2200      	movs	r2, #0
 8007866:	2120      	movs	r1, #32
 8007868:	481e      	ldr	r0, [pc, #120]	; (80078e4 <main+0x14c>)
 800786a:	f001 fa24 	bl	8008cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800786e:	2200      	movs	r2, #0
 8007870:	2110      	movs	r1, #16
 8007872:	481c      	ldr	r0, [pc, #112]	; (80078e4 <main+0x14c>)
 8007874:	f001 fa1f 	bl	8008cb6 <HAL_GPIO_WritePin>

  i2cTest();
 8007878:	f7fd fe60 	bl	800553c <i2cTest>
  HAL_Delay(100);
 800787c:	2064      	movs	r0, #100	; 0x64
 800787e:	f000 fc33 	bl	80080e8 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007882:	4a19      	ldr	r2, [pc, #100]	; (80078e8 <main+0x150>)
 8007884:	2101      	movs	r1, #1
 8007886:	2001      	movs	r0, #1
 8007888:	f7f8 fe6c 	bl	8000564 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 800788c:	4a17      	ldr	r2, [pc, #92]	; (80078ec <main+0x154>)
 800788e:	2101      	movs	r1, #1
 8007890:	2002      	movs	r0, #2
 8007892:	f7f8 fe67 	bl	8000564 <lcd_print>
  HAL_Delay(1000);
 8007896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800789a:	f000 fc25 	bl	80080e8 <HAL_Delay>
  lcd_clear();
 800789e:	f7f8 fe8d 	bl	80005bc <lcd_clear>

  eepromKontrol(0);
 80078a2:	2000      	movs	r0, #0
 80078a4:	f7fd fa92 	bl	8004dcc <eepromKontrol>
  HAL_Delay(200);
 80078a8:	20c8      	movs	r0, #200	; 0xc8
 80078aa:	f000 fc1d 	bl	80080e8 <HAL_Delay>

  lcd_clear();
 80078ae:	f7f8 fe85 	bl	80005bc <lcd_clear>
  HAL_Delay(200);
 80078b2:	20c8      	movs	r0, #200	; 0xc8
 80078b4:	f000 fc18 	bl	80080e8 <HAL_Delay>

  backLightTimer = millis;
 80078b8:	4b0d      	ldr	r3, [pc, #52]	; (80078f0 <main+0x158>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a0d      	ldr	r2, [pc, #52]	; (80078f4 <main+0x15c>)
 80078be:	6013      	str	r3, [r2, #0]

  //ESP8266_Init(&huart1, "H.İ.D.", "asdasd0099123");

  if(machineID[11] == '\0') {
 80078c0:	4b0d      	ldr	r3, [pc, #52]	; (80078f8 <main+0x160>)
 80078c2:	7adb      	ldrb	r3, [r3, #11]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d102      	bne.n	80078ce <main+0x136>
	  takeMachineID(0);
 80078c8:	2000      	movs	r0, #0
 80078ca:	f7f9 f85b 	bl	8000984 <takeMachineID>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80078ce:	f7ff fdb9 	bl	8007444 <mainLoop>
 80078d2:	e7fc      	b.n	80078ce <main+0x136>
 80078d4:	40010c00 	.word	0x40010c00
 80078d8:	20000150 	.word	0x20000150
 80078dc:	200000fc 	.word	0x200000fc
 80078e0:	40011000 	.word	0x40011000
 80078e4:	40010800 	.word	0x40010800
 80078e8:	0800cad4 	.word	0x0800cad4
 80078ec:	0800cae8 	.word	0x0800cae8
 80078f0:	20000258 	.word	0x20000258
 80078f4:	20000274 	.word	0x20000274
 80078f8:	20000278 	.word	0x20000278

080078fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b090      	sub	sp, #64	; 0x40
 8007900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007902:	f107 0318 	add.w	r3, r7, #24
 8007906:	2228      	movs	r2, #40	; 0x28
 8007908:	2100      	movs	r1, #0
 800790a:	4618      	mov	r0, r3
 800790c:	f004 f9f6 	bl	800bcfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007910:	1d3b      	adds	r3, r7, #4
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	605a      	str	r2, [r3, #4]
 8007918:	609a      	str	r2, [r3, #8]
 800791a:	60da      	str	r2, [r3, #12]
 800791c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800791e:	2301      	movs	r3, #1
 8007920:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007926:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007928:	2300      	movs	r3, #0
 800792a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800792c:	2301      	movs	r3, #1
 800792e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007930:	2302      	movs	r3, #2
 8007932:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007938:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800793a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800793e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007940:	f107 0318 	add.w	r3, r7, #24
 8007944:	4618      	mov	r0, r3
 8007946:	f002 fc09 	bl	800a15c <HAL_RCC_OscConfig>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007950:	f000 f9a2 	bl	8007c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007954:	230f      	movs	r3, #15
 8007956:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007958:	2302      	movs	r3, #2
 800795a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007966:	2300      	movs	r3, #0
 8007968:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800796a:	1d3b      	adds	r3, r7, #4
 800796c:	2102      	movs	r1, #2
 800796e:	4618      	mov	r0, r3
 8007970:	f002 fe76 	bl	800a660 <HAL_RCC_ClockConfig>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800797a:	f000 f98d 	bl	8007c98 <Error_Handler>
  }
}
 800797e:	bf00      	nop
 8007980:	3740      	adds	r7, #64	; 0x40
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800798c:	4b16      	ldr	r3, [pc, #88]	; (80079e8 <MX_CAN_Init+0x60>)
 800798e:	4a17      	ldr	r2, [pc, #92]	; (80079ec <MX_CAN_Init+0x64>)
 8007990:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007992:	4b15      	ldr	r3, [pc, #84]	; (80079e8 <MX_CAN_Init+0x60>)
 8007994:	2210      	movs	r2, #16
 8007996:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007998:	4b13      	ldr	r3, [pc, #76]	; (80079e8 <MX_CAN_Init+0x60>)
 800799a:	2200      	movs	r2, #0
 800799c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800799e:	4b12      	ldr	r3, [pc, #72]	; (80079e8 <MX_CAN_Init+0x60>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80079a4:	4b10      	ldr	r3, [pc, #64]	; (80079e8 <MX_CAN_Init+0x60>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80079aa:	4b0f      	ldr	r3, [pc, #60]	; (80079e8 <MX_CAN_Init+0x60>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80079b0:	4b0d      	ldr	r3, [pc, #52]	; (80079e8 <MX_CAN_Init+0x60>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80079b6:	4b0c      	ldr	r3, [pc, #48]	; (80079e8 <MX_CAN_Init+0x60>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80079bc:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <MX_CAN_Init+0x60>)
 80079be:	2200      	movs	r2, #0
 80079c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80079c2:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <MX_CAN_Init+0x60>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80079c8:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <MX_CAN_Init+0x60>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80079ce:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <MX_CAN_Init+0x60>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80079d4:	4804      	ldr	r0, [pc, #16]	; (80079e8 <MX_CAN_Init+0x60>)
 80079d6:	f000 fbab 	bl	8008130 <HAL_CAN_Init>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80079e0:	f000 f95a 	bl	8007c98 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80079e4:	bf00      	nop
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	200000d4 	.word	0x200000d4
 80079ec:	40006400 	.word	0x40006400

080079f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80079f4:	4b12      	ldr	r3, [pc, #72]	; (8007a40 <MX_I2C1_Init+0x50>)
 80079f6:	4a13      	ldr	r2, [pc, #76]	; (8007a44 <MX_I2C1_Init+0x54>)
 80079f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80079fa:	4b11      	ldr	r3, [pc, #68]	; (8007a40 <MX_I2C1_Init+0x50>)
 80079fc:	4a12      	ldr	r2, [pc, #72]	; (8007a48 <MX_I2C1_Init+0x58>)
 80079fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007a00:	4b0f      	ldr	r3, [pc, #60]	; (8007a40 <MX_I2C1_Init+0x50>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007a06:	4b0e      	ldr	r3, [pc, #56]	; (8007a40 <MX_I2C1_Init+0x50>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007a0c:	4b0c      	ldr	r3, [pc, #48]	; (8007a40 <MX_I2C1_Init+0x50>)
 8007a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007a14:	4b0a      	ldr	r3, [pc, #40]	; (8007a40 <MX_I2C1_Init+0x50>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007a1a:	4b09      	ldr	r3, [pc, #36]	; (8007a40 <MX_I2C1_Init+0x50>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007a20:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <MX_I2C1_Init+0x50>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007a26:	4b06      	ldr	r3, [pc, #24]	; (8007a40 <MX_I2C1_Init+0x50>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007a2c:	4804      	ldr	r0, [pc, #16]	; (8007a40 <MX_I2C1_Init+0x50>)
 8007a2e:	f001 f973 	bl	8008d18 <HAL_I2C_Init>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007a38:	f000 f92e 	bl	8007c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007a3c:	bf00      	nop
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	200000fc 	.word	0x200000fc
 8007a44:	40005400 	.word	0x40005400
 8007a48:	00061a80 	.word	0x00061a80

08007a4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007a52:	f107 0308 	add.w	r3, r7, #8
 8007a56:	2200      	movs	r2, #0
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	605a      	str	r2, [r3, #4]
 8007a5c:	609a      	str	r2, [r3, #8]
 8007a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a60:	463b      	mov	r3, r7
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007a68:	4b1f      	ldr	r3, [pc, #124]	; (8007ae8 <MX_TIM1_Init+0x9c>)
 8007a6a:	4a20      	ldr	r2, [pc, #128]	; (8007aec <MX_TIM1_Init+0xa0>)
 8007a6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007a6e:	4b1e      	ldr	r3, [pc, #120]	; (8007ae8 <MX_TIM1_Init+0x9c>)
 8007a70:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007a74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a76:	4b1c      	ldr	r3, [pc, #112]	; (8007ae8 <MX_TIM1_Init+0x9c>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007a7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ae8 <MX_TIM1_Init+0x9c>)
 8007a7e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007a82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a84:	4b18      	ldr	r3, [pc, #96]	; (8007ae8 <MX_TIM1_Init+0x9c>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007a8a:	4b17      	ldr	r3, [pc, #92]	; (8007ae8 <MX_TIM1_Init+0x9c>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a90:	4b15      	ldr	r3, [pc, #84]	; (8007ae8 <MX_TIM1_Init+0x9c>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007a96:	4814      	ldr	r0, [pc, #80]	; (8007ae8 <MX_TIM1_Init+0x9c>)
 8007a98:	f002 ff70 	bl	800a97c <HAL_TIM_Base_Init>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007aa2:	f000 f8f9 	bl	8007c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007aaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007aac:	f107 0308 	add.w	r3, r7, #8
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	480d      	ldr	r0, [pc, #52]	; (8007ae8 <MX_TIM1_Init+0x9c>)
 8007ab4:	f003 f91a 	bl	800acec <HAL_TIM_ConfigClockSource>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007abe:	f000 f8eb 	bl	8007c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007aca:	463b      	mov	r3, r7
 8007acc:	4619      	mov	r1, r3
 8007ace:	4806      	ldr	r0, [pc, #24]	; (8007ae8 <MX_TIM1_Init+0x9c>)
 8007ad0:	f003 fb08 	bl	800b0e4 <HAL_TIMEx_MasterConfigSynchronization>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007ada:	f000 f8dd 	bl	8007c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007ade:	bf00      	nop
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000150 	.word	0x20000150
 8007aec:	40012c00 	.word	0x40012c00

08007af0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007af4:	4b11      	ldr	r3, [pc, #68]	; (8007b3c <MX_USART1_UART_Init+0x4c>)
 8007af6:	4a12      	ldr	r2, [pc, #72]	; (8007b40 <MX_USART1_UART_Init+0x50>)
 8007af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007afa:	4b10      	ldr	r3, [pc, #64]	; (8007b3c <MX_USART1_UART_Init+0x4c>)
 8007afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007b02:	4b0e      	ldr	r3, [pc, #56]	; (8007b3c <MX_USART1_UART_Init+0x4c>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007b08:	4b0c      	ldr	r3, [pc, #48]	; (8007b3c <MX_USART1_UART_Init+0x4c>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007b0e:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <MX_USART1_UART_Init+0x4c>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007b14:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <MX_USART1_UART_Init+0x4c>)
 8007b16:	220c      	movs	r2, #12
 8007b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b1a:	4b08      	ldr	r3, [pc, #32]	; (8007b3c <MX_USART1_UART_Init+0x4c>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b20:	4b06      	ldr	r3, [pc, #24]	; (8007b3c <MX_USART1_UART_Init+0x4c>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007b26:	4805      	ldr	r0, [pc, #20]	; (8007b3c <MX_USART1_UART_Init+0x4c>)
 8007b28:	f003 fb5a 	bl	800b1e0 <HAL_UART_Init>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007b32:	f000 f8b1 	bl	8007c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007b36:	bf00      	nop
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000198 	.word	0x20000198
 8007b40:	40013800 	.word	0x40013800

08007b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b4a:	f107 0310 	add.w	r3, r7, #16
 8007b4e:	2200      	movs	r2, #0
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	605a      	str	r2, [r3, #4]
 8007b54:	609a      	str	r2, [r3, #8]
 8007b56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b58:	4b4b      	ldr	r3, [pc, #300]	; (8007c88 <MX_GPIO_Init+0x144>)
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	4a4a      	ldr	r2, [pc, #296]	; (8007c88 <MX_GPIO_Init+0x144>)
 8007b5e:	f043 0310 	orr.w	r3, r3, #16
 8007b62:	6193      	str	r3, [r2, #24]
 8007b64:	4b48      	ldr	r3, [pc, #288]	; (8007c88 <MX_GPIO_Init+0x144>)
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b70:	4b45      	ldr	r3, [pc, #276]	; (8007c88 <MX_GPIO_Init+0x144>)
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	4a44      	ldr	r2, [pc, #272]	; (8007c88 <MX_GPIO_Init+0x144>)
 8007b76:	f043 0320 	orr.w	r3, r3, #32
 8007b7a:	6193      	str	r3, [r2, #24]
 8007b7c:	4b42      	ldr	r3, [pc, #264]	; (8007c88 <MX_GPIO_Init+0x144>)
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	60bb      	str	r3, [r7, #8]
 8007b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b88:	4b3f      	ldr	r3, [pc, #252]	; (8007c88 <MX_GPIO_Init+0x144>)
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	4a3e      	ldr	r2, [pc, #248]	; (8007c88 <MX_GPIO_Init+0x144>)
 8007b8e:	f043 0304 	orr.w	r3, r3, #4
 8007b92:	6193      	str	r3, [r2, #24]
 8007b94:	4b3c      	ldr	r3, [pc, #240]	; (8007c88 <MX_GPIO_Init+0x144>)
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	607b      	str	r3, [r7, #4]
 8007b9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ba0:	4b39      	ldr	r3, [pc, #228]	; (8007c88 <MX_GPIO_Init+0x144>)
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	4a38      	ldr	r2, [pc, #224]	; (8007c88 <MX_GPIO_Init+0x144>)
 8007ba6:	f043 0308 	orr.w	r3, r3, #8
 8007baa:	6193      	str	r3, [r2, #24]
 8007bac:	4b36      	ldr	r3, [pc, #216]	; (8007c88 <MX_GPIO_Init+0x144>)
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	603b      	str	r3, [r7, #0]
 8007bb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007bb8:	2200      	movs	r2, #0
 8007bba:	21f0      	movs	r1, #240	; 0xf0
 8007bbc:	4833      	ldr	r0, [pc, #204]	; (8007c8c <MX_GPIO_Init+0x148>)
 8007bbe:	f001 f87a 	bl	8008cb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f241 0130 	movw	r1, #4144	; 0x1030
 8007bc8:	4831      	ldr	r0, [pc, #196]	; (8007c90 <MX_GPIO_Init+0x14c>)
 8007bca:	f001 f874 	bl	8008cb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f640 4107 	movw	r1, #3079	; 0xc07
 8007bd4:	482f      	ldr	r0, [pc, #188]	; (8007c94 <MX_GPIO_Init+0x150>)
 8007bd6:	f001 f86e 	bl	8008cb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007bda:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007bde:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007be0:	2300      	movs	r3, #0
 8007be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007be8:	f107 0310 	add.w	r3, r7, #16
 8007bec:	4619      	mov	r1, r3
 8007bee:	4828      	ldr	r0, [pc, #160]	; (8007c90 <MX_GPIO_Init+0x14c>)
 8007bf0:	f000 fdea 	bl	80087c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007bf4:	f248 130f 	movw	r3, #33039	; 0x810f
 8007bf8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c02:	f107 0310 	add.w	r3, r7, #16
 8007c06:	4619      	mov	r1, r3
 8007c08:	4820      	ldr	r0, [pc, #128]	; (8007c8c <MX_GPIO_Init+0x148>)
 8007c0a:	f000 fddd 	bl	80087c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007c0e:	23f0      	movs	r3, #240	; 0xf0
 8007c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c12:	2301      	movs	r3, #1
 8007c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c1e:	f107 0310 	add.w	r3, r7, #16
 8007c22:	4619      	mov	r1, r3
 8007c24:	4819      	ldr	r0, [pc, #100]	; (8007c8c <MX_GPIO_Init+0x148>)
 8007c26:	f000 fdcf 	bl	80087c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007c2a:	f241 0330 	movw	r3, #4144	; 0x1030
 8007c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c30:	2301      	movs	r3, #1
 8007c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c34:	2300      	movs	r3, #0
 8007c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c38:	2302      	movs	r3, #2
 8007c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c3c:	f107 0310 	add.w	r3, r7, #16
 8007c40:	4619      	mov	r1, r3
 8007c42:	4813      	ldr	r0, [pc, #76]	; (8007c90 <MX_GPIO_Init+0x14c>)
 8007c44:	f000 fdc0 	bl	80087c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007c48:	f640 4307 	movw	r3, #3079	; 0xc07
 8007c4c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c52:	2300      	movs	r3, #0
 8007c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c56:	2302      	movs	r3, #2
 8007c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c5a:	f107 0310 	add.w	r3, r7, #16
 8007c5e:	4619      	mov	r1, r3
 8007c60:	480c      	ldr	r0, [pc, #48]	; (8007c94 <MX_GPIO_Init+0x150>)
 8007c62:	f000 fdb1 	bl	80087c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8007c66:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c74:	f107 0310 	add.w	r3, r7, #16
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4806      	ldr	r0, [pc, #24]	; (8007c94 <MX_GPIO_Init+0x150>)
 8007c7c:	f000 fda4 	bl	80087c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007c80:	bf00      	nop
 8007c82:	3720      	adds	r7, #32
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	40021000 	.word	0x40021000
 8007c8c:	40010800 	.word	0x40010800
 8007c90:	40011000 	.word	0x40011000
 8007c94:	40010c00 	.word	0x40010c00

08007c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007c9c:	bf00      	nop
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bc80      	pop	{r7}
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007caa:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <HAL_MspInit+0x5c>)
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	4a14      	ldr	r2, [pc, #80]	; (8007d00 <HAL_MspInit+0x5c>)
 8007cb0:	f043 0301 	orr.w	r3, r3, #1
 8007cb4:	6193      	str	r3, [r2, #24]
 8007cb6:	4b12      	ldr	r3, [pc, #72]	; (8007d00 <HAL_MspInit+0x5c>)
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	60bb      	str	r3, [r7, #8]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007cc2:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <HAL_MspInit+0x5c>)
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	4a0e      	ldr	r2, [pc, #56]	; (8007d00 <HAL_MspInit+0x5c>)
 8007cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ccc:	61d3      	str	r3, [r2, #28]
 8007cce:	4b0c      	ldr	r3, [pc, #48]	; (8007d00 <HAL_MspInit+0x5c>)
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cd6:	607b      	str	r3, [r7, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007cda:	4b0a      	ldr	r3, [pc, #40]	; (8007d04 <HAL_MspInit+0x60>)
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	4a04      	ldr	r2, [pc, #16]	; (8007d04 <HAL_MspInit+0x60>)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007cf6:	bf00      	nop
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bc80      	pop	{r7}
 8007cfe:	4770      	bx	lr
 8007d00:	40021000 	.word	0x40021000
 8007d04:	40010000 	.word	0x40010000

08007d08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d10:	f107 0310 	add.w	r3, r7, #16
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	605a      	str	r2, [r3, #4]
 8007d1a:	609a      	str	r2, [r3, #8]
 8007d1c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a1c      	ldr	r2, [pc, #112]	; (8007d94 <HAL_CAN_MspInit+0x8c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d131      	bne.n	8007d8c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007d28:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <HAL_CAN_MspInit+0x90>)
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	4a1a      	ldr	r2, [pc, #104]	; (8007d98 <HAL_CAN_MspInit+0x90>)
 8007d2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d32:	61d3      	str	r3, [r2, #28]
 8007d34:	4b18      	ldr	r3, [pc, #96]	; (8007d98 <HAL_CAN_MspInit+0x90>)
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d40:	4b15      	ldr	r3, [pc, #84]	; (8007d98 <HAL_CAN_MspInit+0x90>)
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	4a14      	ldr	r2, [pc, #80]	; (8007d98 <HAL_CAN_MspInit+0x90>)
 8007d46:	f043 0304 	orr.w	r3, r3, #4
 8007d4a:	6193      	str	r3, [r2, #24]
 8007d4c:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <HAL_CAN_MspInit+0x90>)
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	60bb      	str	r3, [r7, #8]
 8007d56:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007d58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d66:	f107 0310 	add.w	r3, r7, #16
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	480b      	ldr	r0, [pc, #44]	; (8007d9c <HAL_CAN_MspInit+0x94>)
 8007d6e:	f000 fd2b 	bl	80087c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d78:	2302      	movs	r3, #2
 8007d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d80:	f107 0310 	add.w	r3, r7, #16
 8007d84:	4619      	mov	r1, r3
 8007d86:	4805      	ldr	r0, [pc, #20]	; (8007d9c <HAL_CAN_MspInit+0x94>)
 8007d88:	f000 fd1e 	bl	80087c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007d8c:	bf00      	nop
 8007d8e:	3720      	adds	r7, #32
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	40006400 	.word	0x40006400
 8007d98:	40021000 	.word	0x40021000
 8007d9c:	40010800 	.word	0x40010800

08007da0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007da8:	f107 0310 	add.w	r3, r7, #16
 8007dac:	2200      	movs	r2, #0
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	605a      	str	r2, [r3, #4]
 8007db2:	609a      	str	r2, [r3, #8]
 8007db4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a15      	ldr	r2, [pc, #84]	; (8007e10 <HAL_I2C_MspInit+0x70>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d123      	bne.n	8007e08 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007dc0:	4b14      	ldr	r3, [pc, #80]	; (8007e14 <HAL_I2C_MspInit+0x74>)
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	4a13      	ldr	r2, [pc, #76]	; (8007e14 <HAL_I2C_MspInit+0x74>)
 8007dc6:	f043 0308 	orr.w	r3, r3, #8
 8007dca:	6193      	str	r3, [r2, #24]
 8007dcc:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <HAL_I2C_MspInit+0x74>)
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	f003 0308 	and.w	r3, r3, #8
 8007dd4:	60fb      	str	r3, [r7, #12]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007dd8:	23c0      	movs	r3, #192	; 0xc0
 8007dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ddc:	2312      	movs	r3, #18
 8007dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007de0:	2303      	movs	r3, #3
 8007de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007de4:	f107 0310 	add.w	r3, r7, #16
 8007de8:	4619      	mov	r1, r3
 8007dea:	480b      	ldr	r0, [pc, #44]	; (8007e18 <HAL_I2C_MspInit+0x78>)
 8007dec:	f000 fcec 	bl	80087c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007df0:	4b08      	ldr	r3, [pc, #32]	; (8007e14 <HAL_I2C_MspInit+0x74>)
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	4a07      	ldr	r2, [pc, #28]	; (8007e14 <HAL_I2C_MspInit+0x74>)
 8007df6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007dfa:	61d3      	str	r3, [r2, #28]
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <HAL_I2C_MspInit+0x74>)
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e04:	60bb      	str	r3, [r7, #8]
 8007e06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007e08:	bf00      	nop
 8007e0a:	3720      	adds	r7, #32
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	40005400 	.word	0x40005400
 8007e14:	40021000 	.word	0x40021000
 8007e18:	40010c00 	.word	0x40010c00

08007e1c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a0a      	ldr	r2, [pc, #40]	; (8007e54 <HAL_I2C_MspDeInit+0x38>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d10d      	bne.n	8007e4a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007e2e:	4b0a      	ldr	r3, [pc, #40]	; (8007e58 <HAL_I2C_MspDeInit+0x3c>)
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	4a09      	ldr	r2, [pc, #36]	; (8007e58 <HAL_I2C_MspDeInit+0x3c>)
 8007e34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e38:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8007e3a:	2140      	movs	r1, #64	; 0x40
 8007e3c:	4807      	ldr	r0, [pc, #28]	; (8007e5c <HAL_I2C_MspDeInit+0x40>)
 8007e3e:	f000 fe57 	bl	8008af0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8007e42:	2180      	movs	r1, #128	; 0x80
 8007e44:	4805      	ldr	r0, [pc, #20]	; (8007e5c <HAL_I2C_MspDeInit+0x40>)
 8007e46:	f000 fe53 	bl	8008af0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	40005400 	.word	0x40005400
 8007e58:	40021000 	.word	0x40021000
 8007e5c:	40010c00 	.word	0x40010c00

08007e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a0d      	ldr	r2, [pc, #52]	; (8007ea4 <HAL_TIM_Base_MspInit+0x44>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d113      	bne.n	8007e9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007e72:	4b0d      	ldr	r3, [pc, #52]	; (8007ea8 <HAL_TIM_Base_MspInit+0x48>)
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	4a0c      	ldr	r2, [pc, #48]	; (8007ea8 <HAL_TIM_Base_MspInit+0x48>)
 8007e78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e7c:	6193      	str	r3, [r2, #24]
 8007e7e:	4b0a      	ldr	r3, [pc, #40]	; (8007ea8 <HAL_TIM_Base_MspInit+0x48>)
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	2019      	movs	r0, #25
 8007e90:	f000 fb21 	bl	80084d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007e94:	2019      	movs	r0, #25
 8007e96:	f000 fb3a 	bl	800850e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8007e9a:	bf00      	nop
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	40012c00 	.word	0x40012c00
 8007ea8:	40021000 	.word	0x40021000

08007eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007eb4:	f107 0310 	add.w	r3, r7, #16
 8007eb8:	2200      	movs	r2, #0
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	605a      	str	r2, [r3, #4]
 8007ebe:	609a      	str	r2, [r3, #8]
 8007ec0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a20      	ldr	r2, [pc, #128]	; (8007f48 <HAL_UART_MspInit+0x9c>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d139      	bne.n	8007f40 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007ecc:	4b1f      	ldr	r3, [pc, #124]	; (8007f4c <HAL_UART_MspInit+0xa0>)
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	4a1e      	ldr	r2, [pc, #120]	; (8007f4c <HAL_UART_MspInit+0xa0>)
 8007ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ed6:	6193      	str	r3, [r2, #24]
 8007ed8:	4b1c      	ldr	r3, [pc, #112]	; (8007f4c <HAL_UART_MspInit+0xa0>)
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ee0:	60fb      	str	r3, [r7, #12]
 8007ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ee4:	4b19      	ldr	r3, [pc, #100]	; (8007f4c <HAL_UART_MspInit+0xa0>)
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	4a18      	ldr	r2, [pc, #96]	; (8007f4c <HAL_UART_MspInit+0xa0>)
 8007eea:	f043 0304 	orr.w	r3, r3, #4
 8007eee:	6193      	str	r3, [r2, #24]
 8007ef0:	4b16      	ldr	r3, [pc, #88]	; (8007f4c <HAL_UART_MspInit+0xa0>)
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	60bb      	str	r3, [r7, #8]
 8007efa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f02:	2302      	movs	r3, #2
 8007f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f06:	2303      	movs	r3, #3
 8007f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f0a:	f107 0310 	add.w	r3, r7, #16
 8007f0e:	4619      	mov	r1, r3
 8007f10:	480f      	ldr	r0, [pc, #60]	; (8007f50 <HAL_UART_MspInit+0xa4>)
 8007f12:	f000 fc59 	bl	80087c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f20:	2300      	movs	r3, #0
 8007f22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f24:	f107 0310 	add.w	r3, r7, #16
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4809      	ldr	r0, [pc, #36]	; (8007f50 <HAL_UART_MspInit+0xa4>)
 8007f2c:	f000 fc4c 	bl	80087c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007f30:	2200      	movs	r2, #0
 8007f32:	2100      	movs	r1, #0
 8007f34:	2025      	movs	r0, #37	; 0x25
 8007f36:	f000 face 	bl	80084d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007f3a:	2025      	movs	r0, #37	; 0x25
 8007f3c:	f000 fae7 	bl	800850e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007f40:	bf00      	nop
 8007f42:	3720      	adds	r7, #32
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	40013800 	.word	0x40013800
 8007f4c:	40021000 	.word	0x40021000
 8007f50:	40010800 	.word	0x40010800

08007f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007f54:	b480      	push	{r7}
 8007f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007f58:	e7fe      	b.n	8007f58 <NMI_Handler+0x4>

08007f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007f5e:	e7fe      	b.n	8007f5e <HardFault_Handler+0x4>

08007f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007f60:	b480      	push	{r7}
 8007f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007f64:	e7fe      	b.n	8007f64 <MemManage_Handler+0x4>

08007f66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007f66:	b480      	push	{r7}
 8007f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007f6a:	e7fe      	b.n	8007f6a <BusFault_Handler+0x4>

08007f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007f70:	e7fe      	b.n	8007f70 <UsageFault_Handler+0x4>

08007f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007f72:	b480      	push	{r7}
 8007f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007f76:	bf00      	nop
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bc80      	pop	{r7}
 8007f7c:	4770      	bx	lr

08007f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007f82:	bf00      	nop
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bc80      	pop	{r7}
 8007f88:	4770      	bx	lr

08007f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007f8e:	bf00      	nop
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bc80      	pop	{r7}
 8007f94:	4770      	bx	lr

08007f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007f9a:	f000 f889 	bl	80080b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007f9e:	bf00      	nop
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007fa8:	4802      	ldr	r0, [pc, #8]	; (8007fb4 <TIM1_UP_IRQHandler+0x10>)
 8007faa:	f002 fd97 	bl	800aadc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8007fae:	bf00      	nop
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000150 	.word	0x20000150

08007fb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007fbc:	4802      	ldr	r0, [pc, #8]	; (8007fc8 <USART1_IRQHandler+0x10>)
 8007fbe:	f003 f95f 	bl	800b280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007fc2:	bf00      	nop
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000198 	.word	0x20000198

08007fcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007fd0:	bf00      	nop
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bc80      	pop	{r7}
 8007fd6:	4770      	bx	lr

08007fd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007fd8:	480c      	ldr	r0, [pc, #48]	; (800800c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007fda:	490d      	ldr	r1, [pc, #52]	; (8008010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007fdc:	4a0d      	ldr	r2, [pc, #52]	; (8008014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007fe0:	e002      	b.n	8007fe8 <LoopCopyDataInit>

08007fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007fe6:	3304      	adds	r3, #4

08007fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007fec:	d3f9      	bcc.n	8007fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007fee:	4a0a      	ldr	r2, [pc, #40]	; (8008018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007ff0:	4c0a      	ldr	r4, [pc, #40]	; (800801c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007ff4:	e001      	b.n	8007ffa <LoopFillZerobss>

08007ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ff8:	3204      	adds	r2, #4

08007ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ffc:	d3fb      	bcc.n	8007ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007ffe:	f7ff ffe5 	bl	8007fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008002:	f003 fe83 	bl	800bd0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008006:	f7ff fbc7 	bl	8007798 <main>
  bx lr
 800800a:	4770      	bx	lr
  ldr r0, =_sdata
 800800c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008010:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8008014:	0800cb54 	.word	0x0800cb54
  ldr r2, =_sbss
 8008018:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 800801c:	20000318 	.word	0x20000318

08008020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008020:	e7fe      	b.n	8008020 <ADC1_2_IRQHandler>
	...

08008024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008028:	4b08      	ldr	r3, [pc, #32]	; (800804c <HAL_Init+0x28>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a07      	ldr	r2, [pc, #28]	; (800804c <HAL_Init+0x28>)
 800802e:	f043 0310 	orr.w	r3, r3, #16
 8008032:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008034:	2003      	movs	r0, #3
 8008036:	f000 fa43 	bl	80084c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800803a:	200f      	movs	r0, #15
 800803c:	f000 f808 	bl	8008050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008040:	f7ff fe30 	bl	8007ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	40022000 	.word	0x40022000

08008050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008058:	4b12      	ldr	r3, [pc, #72]	; (80080a4 <HAL_InitTick+0x54>)
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <HAL_InitTick+0x58>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	4619      	mov	r1, r3
 8008062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008066:	fbb3 f3f1 	udiv	r3, r3, r1
 800806a:	fbb2 f3f3 	udiv	r3, r2, r3
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fa5b 	bl	800852a <HAL_SYSTICK_Config>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e00e      	b.n	800809c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b0f      	cmp	r3, #15
 8008082:	d80a      	bhi.n	800809a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008084:	2200      	movs	r2, #0
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800808c:	f000 fa23 	bl	80084d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008090:	4a06      	ldr	r2, [pc, #24]	; (80080ac <HAL_InitTick+0x5c>)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	e000      	b.n	800809c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	200000a8 	.word	0x200000a8
 80080a8:	200000b0 	.word	0x200000b0
 80080ac:	200000ac 	.word	0x200000ac

080080b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80080b0:	b480      	push	{r7}
 80080b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80080b4:	4b05      	ldr	r3, [pc, #20]	; (80080cc <HAL_IncTick+0x1c>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	461a      	mov	r2, r3
 80080ba:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <HAL_IncTick+0x20>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4413      	add	r3, r2
 80080c0:	4a03      	ldr	r2, [pc, #12]	; (80080d0 <HAL_IncTick+0x20>)
 80080c2:	6013      	str	r3, [r2, #0]
}
 80080c4:	bf00      	nop
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bc80      	pop	{r7}
 80080ca:	4770      	bx	lr
 80080cc:	200000b0 	.word	0x200000b0
 80080d0:	20000314 	.word	0x20000314

080080d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80080d4:	b480      	push	{r7}
 80080d6:	af00      	add	r7, sp, #0
  return uwTick;
 80080d8:	4b02      	ldr	r3, [pc, #8]	; (80080e4 <HAL_GetTick+0x10>)
 80080da:	681b      	ldr	r3, [r3, #0]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	4770      	bx	lr
 80080e4:	20000314 	.word	0x20000314

080080e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80080f0:	f7ff fff0 	bl	80080d4 <HAL_GetTick>
 80080f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008100:	d005      	beq.n	800810e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008102:	4b0a      	ldr	r3, [pc, #40]	; (800812c <HAL_Delay+0x44>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4413      	add	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800810e:	bf00      	nop
 8008110:	f7ff ffe0 	bl	80080d4 <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	429a      	cmp	r2, r3
 800811e:	d8f7      	bhi.n	8008110 <HAL_Delay+0x28>
  {
  }
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	200000b0 	.word	0x200000b0

08008130 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e0ed      	b.n	800831e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d102      	bne.n	8008154 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff fdda 	bl	8007d08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0201 	orr.w	r2, r2, #1
 8008162:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008164:	f7ff ffb6 	bl	80080d4 <HAL_GetTick>
 8008168:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800816a:	e012      	b.n	8008192 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800816c:	f7ff ffb2 	bl	80080d4 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b0a      	cmp	r3, #10
 8008178:	d90b      	bls.n	8008192 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2205      	movs	r2, #5
 800818a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e0c5      	b.n	800831e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	2b00      	cmp	r3, #0
 800819e:	d0e5      	beq.n	800816c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 0202 	bic.w	r2, r2, #2
 80081ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80081b0:	f7ff ff90 	bl	80080d4 <HAL_GetTick>
 80081b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80081b6:	e012      	b.n	80081de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80081b8:	f7ff ff8c 	bl	80080d4 <HAL_GetTick>
 80081bc:	4602      	mov	r2, r0
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	2b0a      	cmp	r3, #10
 80081c4:	d90b      	bls.n	80081de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2205      	movs	r2, #5
 80081d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e09f      	b.n	800831e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e5      	bne.n	80081b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	7e1b      	ldrb	r3, [r3, #24]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d108      	bne.n	8008206 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	e007      	b.n	8008216 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008214:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	7e5b      	ldrb	r3, [r3, #25]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d108      	bne.n	8008230 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	e007      	b.n	8008240 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800823e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	7e9b      	ldrb	r3, [r3, #26]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d108      	bne.n	800825a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f042 0220 	orr.w	r2, r2, #32
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	e007      	b.n	800826a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0220 	bic.w	r2, r2, #32
 8008268:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	7edb      	ldrb	r3, [r3, #27]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d108      	bne.n	8008284 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0210 	bic.w	r2, r2, #16
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	e007      	b.n	8008294 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0210 	orr.w	r2, r2, #16
 8008292:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	7f1b      	ldrb	r3, [r3, #28]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d108      	bne.n	80082ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f042 0208 	orr.w	r2, r2, #8
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	e007      	b.n	80082be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0208 	bic.w	r2, r2, #8
 80082bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	7f5b      	ldrb	r3, [r3, #29]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d108      	bne.n	80082d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f042 0204 	orr.w	r2, r2, #4
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	e007      	b.n	80082e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0204 	bic.w	r2, r2, #4
 80082e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	431a      	orrs	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	ea42 0103 	orr.w	r1, r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	1e5a      	subs	r2, r3, #1
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <__NVIC_SetPriorityGrouping>:
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f003 0307 	and.w	r3, r3, #7
 8008336:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008338:	4b0c      	ldr	r3, [pc, #48]	; (800836c <__NVIC_SetPriorityGrouping+0x44>)
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008344:	4013      	ands	r3, r2
 8008346:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800835a:	4a04      	ldr	r2, [pc, #16]	; (800836c <__NVIC_SetPriorityGrouping+0x44>)
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	60d3      	str	r3, [r2, #12]
}
 8008360:	bf00      	nop
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	bc80      	pop	{r7}
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	e000ed00 	.word	0xe000ed00

08008370 <__NVIC_GetPriorityGrouping>:
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008374:	4b04      	ldr	r3, [pc, #16]	; (8008388 <__NVIC_GetPriorityGrouping+0x18>)
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	0a1b      	lsrs	r3, r3, #8
 800837a:	f003 0307 	and.w	r3, r3, #7
}
 800837e:	4618      	mov	r0, r3
 8008380:	46bd      	mov	sp, r7
 8008382:	bc80      	pop	{r7}
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	e000ed00 	.word	0xe000ed00

0800838c <__NVIC_EnableIRQ>:
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800839a:	2b00      	cmp	r3, #0
 800839c:	db0b      	blt.n	80083b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	f003 021f 	and.w	r2, r3, #31
 80083a4:	4906      	ldr	r1, [pc, #24]	; (80083c0 <__NVIC_EnableIRQ+0x34>)
 80083a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083aa:	095b      	lsrs	r3, r3, #5
 80083ac:	2001      	movs	r0, #1
 80083ae:	fa00 f202 	lsl.w	r2, r0, r2
 80083b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bc80      	pop	{r7}
 80083be:	4770      	bx	lr
 80083c0:	e000e100 	.word	0xe000e100

080083c4 <__NVIC_SetPriority>:
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	6039      	str	r1, [r7, #0]
 80083ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	db0a      	blt.n	80083ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	490c      	ldr	r1, [pc, #48]	; (8008410 <__NVIC_SetPriority+0x4c>)
 80083de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083e2:	0112      	lsls	r2, r2, #4
 80083e4:	b2d2      	uxtb	r2, r2
 80083e6:	440b      	add	r3, r1
 80083e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80083ec:	e00a      	b.n	8008404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	4908      	ldr	r1, [pc, #32]	; (8008414 <__NVIC_SetPriority+0x50>)
 80083f4:	79fb      	ldrb	r3, [r7, #7]
 80083f6:	f003 030f 	and.w	r3, r3, #15
 80083fa:	3b04      	subs	r3, #4
 80083fc:	0112      	lsls	r2, r2, #4
 80083fe:	b2d2      	uxtb	r2, r2
 8008400:	440b      	add	r3, r1
 8008402:	761a      	strb	r2, [r3, #24]
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	bc80      	pop	{r7}
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	e000e100 	.word	0xe000e100
 8008414:	e000ed00 	.word	0xe000ed00

08008418 <NVIC_EncodePriority>:
{
 8008418:	b480      	push	{r7}
 800841a:	b089      	sub	sp, #36	; 0x24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f003 0307 	and.w	r3, r3, #7
 800842a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	f1c3 0307 	rsb	r3, r3, #7
 8008432:	2b04      	cmp	r3, #4
 8008434:	bf28      	it	cs
 8008436:	2304      	movcs	r3, #4
 8008438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	3304      	adds	r3, #4
 800843e:	2b06      	cmp	r3, #6
 8008440:	d902      	bls.n	8008448 <NVIC_EncodePriority+0x30>
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	3b03      	subs	r3, #3
 8008446:	e000      	b.n	800844a <NVIC_EncodePriority+0x32>
 8008448:	2300      	movs	r3, #0
 800844a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800844c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	fa02 f303 	lsl.w	r3, r2, r3
 8008456:	43da      	mvns	r2, r3
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	401a      	ands	r2, r3
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008460:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	fa01 f303 	lsl.w	r3, r1, r3
 800846a:	43d9      	mvns	r1, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008470:	4313      	orrs	r3, r2
}
 8008472:	4618      	mov	r0, r3
 8008474:	3724      	adds	r7, #36	; 0x24
 8008476:	46bd      	mov	sp, r7
 8008478:	bc80      	pop	{r7}
 800847a:	4770      	bx	lr

0800847c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3b01      	subs	r3, #1
 8008488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800848c:	d301      	bcc.n	8008492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800848e:	2301      	movs	r3, #1
 8008490:	e00f      	b.n	80084b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008492:	4a0a      	ldr	r2, [pc, #40]	; (80084bc <SysTick_Config+0x40>)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3b01      	subs	r3, #1
 8008498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800849a:	210f      	movs	r1, #15
 800849c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084a0:	f7ff ff90 	bl	80083c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084a4:	4b05      	ldr	r3, [pc, #20]	; (80084bc <SysTick_Config+0x40>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084aa:	4b04      	ldr	r3, [pc, #16]	; (80084bc <SysTick_Config+0x40>)
 80084ac:	2207      	movs	r2, #7
 80084ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	e000e010 	.word	0xe000e010

080084c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff ff2d 	bl	8008328 <__NVIC_SetPriorityGrouping>
}
 80084ce:	bf00      	nop
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b086      	sub	sp, #24
 80084da:	af00      	add	r7, sp, #0
 80084dc:	4603      	mov	r3, r0
 80084de:	60b9      	str	r1, [r7, #8]
 80084e0:	607a      	str	r2, [r7, #4]
 80084e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80084e8:	f7ff ff42 	bl	8008370 <__NVIC_GetPriorityGrouping>
 80084ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	68b9      	ldr	r1, [r7, #8]
 80084f2:	6978      	ldr	r0, [r7, #20]
 80084f4:	f7ff ff90 	bl	8008418 <NVIC_EncodePriority>
 80084f8:	4602      	mov	r2, r0
 80084fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084fe:	4611      	mov	r1, r2
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff ff5f 	bl	80083c4 <__NVIC_SetPriority>
}
 8008506:	bf00      	nop
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	4603      	mov	r3, r0
 8008516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800851c:	4618      	mov	r0, r3
 800851e:	f7ff ff35 	bl	800838c <__NVIC_EnableIRQ>
}
 8008522:	bf00      	nop
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff ffa2 	bl	800847c <SysTick_Config>
 8008538:	4603      	mov	r3, r0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008542:	b480      	push	{r7}
 8008544:	b085      	sub	sp, #20
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008554:	b2db      	uxtb	r3, r3
 8008556:	2b02      	cmp	r3, #2
 8008558:	d008      	beq.n	800856c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2204      	movs	r2, #4
 800855e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e020      	b.n	80085ae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 020e 	bic.w	r2, r2, #14
 800857a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0201 	bic.w	r2, r2, #1
 800858a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008594:	2101      	movs	r1, #1
 8008596:	fa01 f202 	lsl.w	r2, r1, r2
 800859a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bc80      	pop	{r7}
 80085b6:	4770      	bx	lr

080085b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d005      	beq.n	80085dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2204      	movs	r2, #4
 80085d4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	73fb      	strb	r3, [r7, #15]
 80085da:	e0d6      	b.n	800878a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 020e 	bic.w	r2, r2, #14
 80085ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0201 	bic.w	r2, r2, #1
 80085fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	4b64      	ldr	r3, [pc, #400]	; (8008794 <HAL_DMA_Abort_IT+0x1dc>)
 8008604:	429a      	cmp	r2, r3
 8008606:	d958      	bls.n	80086ba <HAL_DMA_Abort_IT+0x102>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a62      	ldr	r2, [pc, #392]	; (8008798 <HAL_DMA_Abort_IT+0x1e0>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d04f      	beq.n	80086b2 <HAL_DMA_Abort_IT+0xfa>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a61      	ldr	r2, [pc, #388]	; (800879c <HAL_DMA_Abort_IT+0x1e4>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d048      	beq.n	80086ae <HAL_DMA_Abort_IT+0xf6>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a5f      	ldr	r2, [pc, #380]	; (80087a0 <HAL_DMA_Abort_IT+0x1e8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d040      	beq.n	80086a8 <HAL_DMA_Abort_IT+0xf0>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a5e      	ldr	r2, [pc, #376]	; (80087a4 <HAL_DMA_Abort_IT+0x1ec>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d038      	beq.n	80086a2 <HAL_DMA_Abort_IT+0xea>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a5c      	ldr	r2, [pc, #368]	; (80087a8 <HAL_DMA_Abort_IT+0x1f0>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d030      	beq.n	800869c <HAL_DMA_Abort_IT+0xe4>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a5b      	ldr	r2, [pc, #364]	; (80087ac <HAL_DMA_Abort_IT+0x1f4>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d028      	beq.n	8008696 <HAL_DMA_Abort_IT+0xde>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a52      	ldr	r2, [pc, #328]	; (8008794 <HAL_DMA_Abort_IT+0x1dc>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d020      	beq.n	8008690 <HAL_DMA_Abort_IT+0xd8>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a57      	ldr	r2, [pc, #348]	; (80087b0 <HAL_DMA_Abort_IT+0x1f8>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d019      	beq.n	800868c <HAL_DMA_Abort_IT+0xd4>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a55      	ldr	r2, [pc, #340]	; (80087b4 <HAL_DMA_Abort_IT+0x1fc>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d012      	beq.n	8008688 <HAL_DMA_Abort_IT+0xd0>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a54      	ldr	r2, [pc, #336]	; (80087b8 <HAL_DMA_Abort_IT+0x200>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d00a      	beq.n	8008682 <HAL_DMA_Abort_IT+0xca>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a52      	ldr	r2, [pc, #328]	; (80087bc <HAL_DMA_Abort_IT+0x204>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d102      	bne.n	800867c <HAL_DMA_Abort_IT+0xc4>
 8008676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800867a:	e01b      	b.n	80086b4 <HAL_DMA_Abort_IT+0xfc>
 800867c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008680:	e018      	b.n	80086b4 <HAL_DMA_Abort_IT+0xfc>
 8008682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008686:	e015      	b.n	80086b4 <HAL_DMA_Abort_IT+0xfc>
 8008688:	2310      	movs	r3, #16
 800868a:	e013      	b.n	80086b4 <HAL_DMA_Abort_IT+0xfc>
 800868c:	2301      	movs	r3, #1
 800868e:	e011      	b.n	80086b4 <HAL_DMA_Abort_IT+0xfc>
 8008690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008694:	e00e      	b.n	80086b4 <HAL_DMA_Abort_IT+0xfc>
 8008696:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800869a:	e00b      	b.n	80086b4 <HAL_DMA_Abort_IT+0xfc>
 800869c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086a0:	e008      	b.n	80086b4 <HAL_DMA_Abort_IT+0xfc>
 80086a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086a6:	e005      	b.n	80086b4 <HAL_DMA_Abort_IT+0xfc>
 80086a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086ac:	e002      	b.n	80086b4 <HAL_DMA_Abort_IT+0xfc>
 80086ae:	2310      	movs	r3, #16
 80086b0:	e000      	b.n	80086b4 <HAL_DMA_Abort_IT+0xfc>
 80086b2:	2301      	movs	r3, #1
 80086b4:	4a42      	ldr	r2, [pc, #264]	; (80087c0 <HAL_DMA_Abort_IT+0x208>)
 80086b6:	6053      	str	r3, [r2, #4]
 80086b8:	e057      	b.n	800876a <HAL_DMA_Abort_IT+0x1b2>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a36      	ldr	r2, [pc, #216]	; (8008798 <HAL_DMA_Abort_IT+0x1e0>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d04f      	beq.n	8008764 <HAL_DMA_Abort_IT+0x1ac>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a34      	ldr	r2, [pc, #208]	; (800879c <HAL_DMA_Abort_IT+0x1e4>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d048      	beq.n	8008760 <HAL_DMA_Abort_IT+0x1a8>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a33      	ldr	r2, [pc, #204]	; (80087a0 <HAL_DMA_Abort_IT+0x1e8>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d040      	beq.n	800875a <HAL_DMA_Abort_IT+0x1a2>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a31      	ldr	r2, [pc, #196]	; (80087a4 <HAL_DMA_Abort_IT+0x1ec>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d038      	beq.n	8008754 <HAL_DMA_Abort_IT+0x19c>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a30      	ldr	r2, [pc, #192]	; (80087a8 <HAL_DMA_Abort_IT+0x1f0>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d030      	beq.n	800874e <HAL_DMA_Abort_IT+0x196>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a2e      	ldr	r2, [pc, #184]	; (80087ac <HAL_DMA_Abort_IT+0x1f4>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d028      	beq.n	8008748 <HAL_DMA_Abort_IT+0x190>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a26      	ldr	r2, [pc, #152]	; (8008794 <HAL_DMA_Abort_IT+0x1dc>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d020      	beq.n	8008742 <HAL_DMA_Abort_IT+0x18a>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a2a      	ldr	r2, [pc, #168]	; (80087b0 <HAL_DMA_Abort_IT+0x1f8>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d019      	beq.n	800873e <HAL_DMA_Abort_IT+0x186>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a29      	ldr	r2, [pc, #164]	; (80087b4 <HAL_DMA_Abort_IT+0x1fc>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d012      	beq.n	800873a <HAL_DMA_Abort_IT+0x182>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a27      	ldr	r2, [pc, #156]	; (80087b8 <HAL_DMA_Abort_IT+0x200>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00a      	beq.n	8008734 <HAL_DMA_Abort_IT+0x17c>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a26      	ldr	r2, [pc, #152]	; (80087bc <HAL_DMA_Abort_IT+0x204>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d102      	bne.n	800872e <HAL_DMA_Abort_IT+0x176>
 8008728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800872c:	e01b      	b.n	8008766 <HAL_DMA_Abort_IT+0x1ae>
 800872e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008732:	e018      	b.n	8008766 <HAL_DMA_Abort_IT+0x1ae>
 8008734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008738:	e015      	b.n	8008766 <HAL_DMA_Abort_IT+0x1ae>
 800873a:	2310      	movs	r3, #16
 800873c:	e013      	b.n	8008766 <HAL_DMA_Abort_IT+0x1ae>
 800873e:	2301      	movs	r3, #1
 8008740:	e011      	b.n	8008766 <HAL_DMA_Abort_IT+0x1ae>
 8008742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008746:	e00e      	b.n	8008766 <HAL_DMA_Abort_IT+0x1ae>
 8008748:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800874c:	e00b      	b.n	8008766 <HAL_DMA_Abort_IT+0x1ae>
 800874e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008752:	e008      	b.n	8008766 <HAL_DMA_Abort_IT+0x1ae>
 8008754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008758:	e005      	b.n	8008766 <HAL_DMA_Abort_IT+0x1ae>
 800875a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800875e:	e002      	b.n	8008766 <HAL_DMA_Abort_IT+0x1ae>
 8008760:	2310      	movs	r3, #16
 8008762:	e000      	b.n	8008766 <HAL_DMA_Abort_IT+0x1ae>
 8008764:	2301      	movs	r3, #1
 8008766:	4a17      	ldr	r2, [pc, #92]	; (80087c4 <HAL_DMA_Abort_IT+0x20c>)
 8008768:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800877e:	2b00      	cmp	r3, #0
 8008780:	d003      	beq.n	800878a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	4798      	blx	r3
    } 
  }
  return status;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	40020080 	.word	0x40020080
 8008798:	40020008 	.word	0x40020008
 800879c:	4002001c 	.word	0x4002001c
 80087a0:	40020030 	.word	0x40020030
 80087a4:	40020044 	.word	0x40020044
 80087a8:	40020058 	.word	0x40020058
 80087ac:	4002006c 	.word	0x4002006c
 80087b0:	40020408 	.word	0x40020408
 80087b4:	4002041c 	.word	0x4002041c
 80087b8:	40020430 	.word	0x40020430
 80087bc:	40020444 	.word	0x40020444
 80087c0:	40020400 	.word	0x40020400
 80087c4:	40020000 	.word	0x40020000

080087c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b08b      	sub	sp, #44	; 0x2c
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80087d2:	2300      	movs	r3, #0
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80087d6:	2300      	movs	r3, #0
 80087d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80087da:	e179      	b.n	8008ad0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80087dc:	2201      	movs	r2, #1
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	fa02 f303 	lsl.w	r3, r2, r3
 80087e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69fa      	ldr	r2, [r7, #28]
 80087ec:	4013      	ands	r3, r2
 80087ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	f040 8168 	bne.w	8008aca <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	4a96      	ldr	r2, [pc, #600]	; (8008a58 <HAL_GPIO_Init+0x290>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d05e      	beq.n	80088c2 <HAL_GPIO_Init+0xfa>
 8008804:	4a94      	ldr	r2, [pc, #592]	; (8008a58 <HAL_GPIO_Init+0x290>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d875      	bhi.n	80088f6 <HAL_GPIO_Init+0x12e>
 800880a:	4a94      	ldr	r2, [pc, #592]	; (8008a5c <HAL_GPIO_Init+0x294>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d058      	beq.n	80088c2 <HAL_GPIO_Init+0xfa>
 8008810:	4a92      	ldr	r2, [pc, #584]	; (8008a5c <HAL_GPIO_Init+0x294>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d86f      	bhi.n	80088f6 <HAL_GPIO_Init+0x12e>
 8008816:	4a92      	ldr	r2, [pc, #584]	; (8008a60 <HAL_GPIO_Init+0x298>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d052      	beq.n	80088c2 <HAL_GPIO_Init+0xfa>
 800881c:	4a90      	ldr	r2, [pc, #576]	; (8008a60 <HAL_GPIO_Init+0x298>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d869      	bhi.n	80088f6 <HAL_GPIO_Init+0x12e>
 8008822:	4a90      	ldr	r2, [pc, #576]	; (8008a64 <HAL_GPIO_Init+0x29c>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d04c      	beq.n	80088c2 <HAL_GPIO_Init+0xfa>
 8008828:	4a8e      	ldr	r2, [pc, #568]	; (8008a64 <HAL_GPIO_Init+0x29c>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d863      	bhi.n	80088f6 <HAL_GPIO_Init+0x12e>
 800882e:	4a8e      	ldr	r2, [pc, #568]	; (8008a68 <HAL_GPIO_Init+0x2a0>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d046      	beq.n	80088c2 <HAL_GPIO_Init+0xfa>
 8008834:	4a8c      	ldr	r2, [pc, #560]	; (8008a68 <HAL_GPIO_Init+0x2a0>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d85d      	bhi.n	80088f6 <HAL_GPIO_Init+0x12e>
 800883a:	2b12      	cmp	r3, #18
 800883c:	d82a      	bhi.n	8008894 <HAL_GPIO_Init+0xcc>
 800883e:	2b12      	cmp	r3, #18
 8008840:	d859      	bhi.n	80088f6 <HAL_GPIO_Init+0x12e>
 8008842:	a201      	add	r2, pc, #4	; (adr r2, 8008848 <HAL_GPIO_Init+0x80>)
 8008844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008848:	080088c3 	.word	0x080088c3
 800884c:	0800889d 	.word	0x0800889d
 8008850:	080088af 	.word	0x080088af
 8008854:	080088f1 	.word	0x080088f1
 8008858:	080088f7 	.word	0x080088f7
 800885c:	080088f7 	.word	0x080088f7
 8008860:	080088f7 	.word	0x080088f7
 8008864:	080088f7 	.word	0x080088f7
 8008868:	080088f7 	.word	0x080088f7
 800886c:	080088f7 	.word	0x080088f7
 8008870:	080088f7 	.word	0x080088f7
 8008874:	080088f7 	.word	0x080088f7
 8008878:	080088f7 	.word	0x080088f7
 800887c:	080088f7 	.word	0x080088f7
 8008880:	080088f7 	.word	0x080088f7
 8008884:	080088f7 	.word	0x080088f7
 8008888:	080088f7 	.word	0x080088f7
 800888c:	080088a5 	.word	0x080088a5
 8008890:	080088b9 	.word	0x080088b9
 8008894:	4a75      	ldr	r2, [pc, #468]	; (8008a6c <HAL_GPIO_Init+0x2a4>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d013      	beq.n	80088c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800889a:	e02c      	b.n	80088f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	623b      	str	r3, [r7, #32]
          break;
 80088a2:	e029      	b.n	80088f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	3304      	adds	r3, #4
 80088aa:	623b      	str	r3, [r7, #32]
          break;
 80088ac:	e024      	b.n	80088f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	3308      	adds	r3, #8
 80088b4:	623b      	str	r3, [r7, #32]
          break;
 80088b6:	e01f      	b.n	80088f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	330c      	adds	r3, #12
 80088be:	623b      	str	r3, [r7, #32]
          break;
 80088c0:	e01a      	b.n	80088f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d102      	bne.n	80088d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80088ca:	2304      	movs	r3, #4
 80088cc:	623b      	str	r3, [r7, #32]
          break;
 80088ce:	e013      	b.n	80088f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d105      	bne.n	80088e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80088d8:	2308      	movs	r3, #8
 80088da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	69fa      	ldr	r2, [r7, #28]
 80088e0:	611a      	str	r2, [r3, #16]
          break;
 80088e2:	e009      	b.n	80088f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80088e4:	2308      	movs	r3, #8
 80088e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	69fa      	ldr	r2, [r7, #28]
 80088ec:	615a      	str	r2, [r3, #20]
          break;
 80088ee:	e003      	b.n	80088f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80088f0:	2300      	movs	r3, #0
 80088f2:	623b      	str	r3, [r7, #32]
          break;
 80088f4:	e000      	b.n	80088f8 <HAL_GPIO_Init+0x130>
          break;
 80088f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	2bff      	cmp	r3, #255	; 0xff
 80088fc:	d801      	bhi.n	8008902 <HAL_GPIO_Init+0x13a>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	e001      	b.n	8008906 <HAL_GPIO_Init+0x13e>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3304      	adds	r3, #4
 8008906:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	2bff      	cmp	r3, #255	; 0xff
 800890c:	d802      	bhi.n	8008914 <HAL_GPIO_Init+0x14c>
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	e002      	b.n	800891a <HAL_GPIO_Init+0x152>
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	3b08      	subs	r3, #8
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	210f      	movs	r1, #15
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	fa01 f303 	lsl.w	r3, r1, r3
 8008928:	43db      	mvns	r3, r3
 800892a:	401a      	ands	r2, r3
 800892c:	6a39      	ldr	r1, [r7, #32]
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	fa01 f303 	lsl.w	r3, r1, r3
 8008934:	431a      	orrs	r2, r3
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 80c1 	beq.w	8008aca <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008948:	4b49      	ldr	r3, [pc, #292]	; (8008a70 <HAL_GPIO_Init+0x2a8>)
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	4a48      	ldr	r2, [pc, #288]	; (8008a70 <HAL_GPIO_Init+0x2a8>)
 800894e:	f043 0301 	orr.w	r3, r3, #1
 8008952:	6193      	str	r3, [r2, #24]
 8008954:	4b46      	ldr	r3, [pc, #280]	; (8008a70 <HAL_GPIO_Init+0x2a8>)
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	60bb      	str	r3, [r7, #8]
 800895e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008960:	4a44      	ldr	r2, [pc, #272]	; (8008a74 <HAL_GPIO_Init+0x2ac>)
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	089b      	lsrs	r3, r3, #2
 8008966:	3302      	adds	r3, #2
 8008968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800896c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	f003 0303 	and.w	r3, r3, #3
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	220f      	movs	r2, #15
 8008978:	fa02 f303 	lsl.w	r3, r2, r3
 800897c:	43db      	mvns	r3, r3
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4013      	ands	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a3c      	ldr	r2, [pc, #240]	; (8008a78 <HAL_GPIO_Init+0x2b0>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d01f      	beq.n	80089cc <HAL_GPIO_Init+0x204>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a3b      	ldr	r2, [pc, #236]	; (8008a7c <HAL_GPIO_Init+0x2b4>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d019      	beq.n	80089c8 <HAL_GPIO_Init+0x200>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a3a      	ldr	r2, [pc, #232]	; (8008a80 <HAL_GPIO_Init+0x2b8>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d013      	beq.n	80089c4 <HAL_GPIO_Init+0x1fc>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a39      	ldr	r2, [pc, #228]	; (8008a84 <HAL_GPIO_Init+0x2bc>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00d      	beq.n	80089c0 <HAL_GPIO_Init+0x1f8>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a38      	ldr	r2, [pc, #224]	; (8008a88 <HAL_GPIO_Init+0x2c0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d007      	beq.n	80089bc <HAL_GPIO_Init+0x1f4>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a37      	ldr	r2, [pc, #220]	; (8008a8c <HAL_GPIO_Init+0x2c4>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d101      	bne.n	80089b8 <HAL_GPIO_Init+0x1f0>
 80089b4:	2305      	movs	r3, #5
 80089b6:	e00a      	b.n	80089ce <HAL_GPIO_Init+0x206>
 80089b8:	2306      	movs	r3, #6
 80089ba:	e008      	b.n	80089ce <HAL_GPIO_Init+0x206>
 80089bc:	2304      	movs	r3, #4
 80089be:	e006      	b.n	80089ce <HAL_GPIO_Init+0x206>
 80089c0:	2303      	movs	r3, #3
 80089c2:	e004      	b.n	80089ce <HAL_GPIO_Init+0x206>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e002      	b.n	80089ce <HAL_GPIO_Init+0x206>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e000      	b.n	80089ce <HAL_GPIO_Init+0x206>
 80089cc:	2300      	movs	r3, #0
 80089ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d0:	f002 0203 	and.w	r2, r2, #3
 80089d4:	0092      	lsls	r2, r2, #2
 80089d6:	4093      	lsls	r3, r2
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	4313      	orrs	r3, r2
 80089dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80089de:	4925      	ldr	r1, [pc, #148]	; (8008a74 <HAL_GPIO_Init+0x2ac>)
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	089b      	lsrs	r3, r3, #2
 80089e4:	3302      	adds	r3, #2
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d006      	beq.n	8008a06 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80089f8:	4b25      	ldr	r3, [pc, #148]	; (8008a90 <HAL_GPIO_Init+0x2c8>)
 80089fa:	689a      	ldr	r2, [r3, #8]
 80089fc:	4924      	ldr	r1, [pc, #144]	; (8008a90 <HAL_GPIO_Init+0x2c8>)
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	608b      	str	r3, [r1, #8]
 8008a04:	e006      	b.n	8008a14 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008a06:	4b22      	ldr	r3, [pc, #136]	; (8008a90 <HAL_GPIO_Init+0x2c8>)
 8008a08:	689a      	ldr	r2, [r3, #8]
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	43db      	mvns	r3, r3
 8008a0e:	4920      	ldr	r1, [pc, #128]	; (8008a90 <HAL_GPIO_Init+0x2c8>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d006      	beq.n	8008a2e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008a20:	4b1b      	ldr	r3, [pc, #108]	; (8008a90 <HAL_GPIO_Init+0x2c8>)
 8008a22:	68da      	ldr	r2, [r3, #12]
 8008a24:	491a      	ldr	r1, [pc, #104]	; (8008a90 <HAL_GPIO_Init+0x2c8>)
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	60cb      	str	r3, [r1, #12]
 8008a2c:	e006      	b.n	8008a3c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008a2e:	4b18      	ldr	r3, [pc, #96]	; (8008a90 <HAL_GPIO_Init+0x2c8>)
 8008a30:	68da      	ldr	r2, [r3, #12]
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	43db      	mvns	r3, r3
 8008a36:	4916      	ldr	r1, [pc, #88]	; (8008a90 <HAL_GPIO_Init+0x2c8>)
 8008a38:	4013      	ands	r3, r2
 8008a3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d025      	beq.n	8008a94 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008a48:	4b11      	ldr	r3, [pc, #68]	; (8008a90 <HAL_GPIO_Init+0x2c8>)
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	4910      	ldr	r1, [pc, #64]	; (8008a90 <HAL_GPIO_Init+0x2c8>)
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	604b      	str	r3, [r1, #4]
 8008a54:	e025      	b.n	8008aa2 <HAL_GPIO_Init+0x2da>
 8008a56:	bf00      	nop
 8008a58:	10320000 	.word	0x10320000
 8008a5c:	10310000 	.word	0x10310000
 8008a60:	10220000 	.word	0x10220000
 8008a64:	10210000 	.word	0x10210000
 8008a68:	10120000 	.word	0x10120000
 8008a6c:	10110000 	.word	0x10110000
 8008a70:	40021000 	.word	0x40021000
 8008a74:	40010000 	.word	0x40010000
 8008a78:	40010800 	.word	0x40010800
 8008a7c:	40010c00 	.word	0x40010c00
 8008a80:	40011000 	.word	0x40011000
 8008a84:	40011400 	.word	0x40011400
 8008a88:	40011800 	.word	0x40011800
 8008a8c:	40011c00 	.word	0x40011c00
 8008a90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008a94:	4b15      	ldr	r3, [pc, #84]	; (8008aec <HAL_GPIO_Init+0x324>)
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	43db      	mvns	r3, r3
 8008a9c:	4913      	ldr	r1, [pc, #76]	; (8008aec <HAL_GPIO_Init+0x324>)
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d006      	beq.n	8008abc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008aae:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <HAL_GPIO_Init+0x324>)
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	490e      	ldr	r1, [pc, #56]	; (8008aec <HAL_GPIO_Init+0x324>)
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	600b      	str	r3, [r1, #0]
 8008aba:	e006      	b.n	8008aca <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008abc:	4b0b      	ldr	r3, [pc, #44]	; (8008aec <HAL_GPIO_Init+0x324>)
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	43db      	mvns	r3, r3
 8008ac4:	4909      	ldr	r1, [pc, #36]	; (8008aec <HAL_GPIO_Init+0x324>)
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	3301      	adds	r3, #1
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f47f ae7e 	bne.w	80087dc <HAL_GPIO_Init+0x14>
  }
}
 8008ae0:	bf00      	nop
 8008ae2:	bf00      	nop
 8008ae4:	372c      	adds	r7, #44	; 0x2c
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bc80      	pop	{r7}
 8008aea:	4770      	bx	lr
 8008aec:	40010400 	.word	0x40010400

08008af0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b089      	sub	sp, #36	; 0x24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008afa:	2300      	movs	r3, #0
 8008afc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008afe:	e0a6      	b.n	8008c4e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008b00:	2201      	movs	r2, #1
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	fa02 f303 	lsl.w	r3, r2, r3
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 8099 	beq.w	8008c48 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008b16:	4a54      	ldr	r2, [pc, #336]	; (8008c68 <HAL_GPIO_DeInit+0x178>)
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	089b      	lsrs	r3, r3, #2
 8008b1c:	3302      	adds	r3, #2
 8008b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b22:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	f003 0303 	and.w	r3, r3, #3
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	220f      	movs	r2, #15
 8008b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	4013      	ands	r3, r2
 8008b36:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a4c      	ldr	r2, [pc, #304]	; (8008c6c <HAL_GPIO_DeInit+0x17c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d01f      	beq.n	8008b80 <HAL_GPIO_DeInit+0x90>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a4b      	ldr	r2, [pc, #300]	; (8008c70 <HAL_GPIO_DeInit+0x180>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d019      	beq.n	8008b7c <HAL_GPIO_DeInit+0x8c>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a4a      	ldr	r2, [pc, #296]	; (8008c74 <HAL_GPIO_DeInit+0x184>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d013      	beq.n	8008b78 <HAL_GPIO_DeInit+0x88>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a49      	ldr	r2, [pc, #292]	; (8008c78 <HAL_GPIO_DeInit+0x188>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d00d      	beq.n	8008b74 <HAL_GPIO_DeInit+0x84>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a48      	ldr	r2, [pc, #288]	; (8008c7c <HAL_GPIO_DeInit+0x18c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d007      	beq.n	8008b70 <HAL_GPIO_DeInit+0x80>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a47      	ldr	r2, [pc, #284]	; (8008c80 <HAL_GPIO_DeInit+0x190>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d101      	bne.n	8008b6c <HAL_GPIO_DeInit+0x7c>
 8008b68:	2305      	movs	r3, #5
 8008b6a:	e00a      	b.n	8008b82 <HAL_GPIO_DeInit+0x92>
 8008b6c:	2306      	movs	r3, #6
 8008b6e:	e008      	b.n	8008b82 <HAL_GPIO_DeInit+0x92>
 8008b70:	2304      	movs	r3, #4
 8008b72:	e006      	b.n	8008b82 <HAL_GPIO_DeInit+0x92>
 8008b74:	2303      	movs	r3, #3
 8008b76:	e004      	b.n	8008b82 <HAL_GPIO_DeInit+0x92>
 8008b78:	2302      	movs	r3, #2
 8008b7a:	e002      	b.n	8008b82 <HAL_GPIO_DeInit+0x92>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e000      	b.n	8008b82 <HAL_GPIO_DeInit+0x92>
 8008b80:	2300      	movs	r3, #0
 8008b82:	69fa      	ldr	r2, [r7, #28]
 8008b84:	f002 0203 	and.w	r2, r2, #3
 8008b88:	0092      	lsls	r2, r2, #2
 8008b8a:	4093      	lsls	r3, r2
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d132      	bne.n	8008bf8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008b92:	4b3c      	ldr	r3, [pc, #240]	; (8008c84 <HAL_GPIO_DeInit+0x194>)
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	43db      	mvns	r3, r3
 8008b9a:	493a      	ldr	r1, [pc, #232]	; (8008c84 <HAL_GPIO_DeInit+0x194>)
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008ba0:	4b38      	ldr	r3, [pc, #224]	; (8008c84 <HAL_GPIO_DeInit+0x194>)
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	43db      	mvns	r3, r3
 8008ba8:	4936      	ldr	r1, [pc, #216]	; (8008c84 <HAL_GPIO_DeInit+0x194>)
 8008baa:	4013      	ands	r3, r2
 8008bac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008bae:	4b35      	ldr	r3, [pc, #212]	; (8008c84 <HAL_GPIO_DeInit+0x194>)
 8008bb0:	68da      	ldr	r2, [r3, #12]
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	43db      	mvns	r3, r3
 8008bb6:	4933      	ldr	r1, [pc, #204]	; (8008c84 <HAL_GPIO_DeInit+0x194>)
 8008bb8:	4013      	ands	r3, r2
 8008bba:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008bbc:	4b31      	ldr	r3, [pc, #196]	; (8008c84 <HAL_GPIO_DeInit+0x194>)
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	492f      	ldr	r1, [pc, #188]	; (8008c84 <HAL_GPIO_DeInit+0x194>)
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	f003 0303 	and.w	r3, r3, #3
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	220f      	movs	r2, #15
 8008bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8008bda:	4a23      	ldr	r2, [pc, #140]	; (8008c68 <HAL_GPIO_DeInit+0x178>)
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	089b      	lsrs	r3, r3, #2
 8008be0:	3302      	adds	r3, #2
 8008be2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	43da      	mvns	r2, r3
 8008bea:	481f      	ldr	r0, [pc, #124]	; (8008c68 <HAL_GPIO_DeInit+0x178>)
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	089b      	lsrs	r3, r3, #2
 8008bf0:	400a      	ands	r2, r1
 8008bf2:	3302      	adds	r3, #2
 8008bf4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	2bff      	cmp	r3, #255	; 0xff
 8008bfc:	d801      	bhi.n	8008c02 <HAL_GPIO_DeInit+0x112>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	e001      	b.n	8008c06 <HAL_GPIO_DeInit+0x116>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	3304      	adds	r3, #4
 8008c06:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	2bff      	cmp	r3, #255	; 0xff
 8008c0c:	d802      	bhi.n	8008c14 <HAL_GPIO_DeInit+0x124>
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	e002      	b.n	8008c1a <HAL_GPIO_DeInit+0x12a>
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	3b08      	subs	r3, #8
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	210f      	movs	r1, #15
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	fa01 f303 	lsl.w	r3, r1, r3
 8008c28:	43db      	mvns	r3, r3
 8008c2a:	401a      	ands	r2, r3
 8008c2c:	2104      	movs	r1, #4
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	fa01 f303 	lsl.w	r3, r1, r3
 8008c34:	431a      	orrs	r2, r3
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68da      	ldr	r2, [r3, #12]
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	43db      	mvns	r3, r3
 8008c42:	401a      	ands	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	fa22 f303 	lsr.w	r3, r2, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f47f af52 	bne.w	8008b00 <HAL_GPIO_DeInit+0x10>
  }
}
 8008c5c:	bf00      	nop
 8008c5e:	bf00      	nop
 8008c60:	3724      	adds	r7, #36	; 0x24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bc80      	pop	{r7}
 8008c66:	4770      	bx	lr
 8008c68:	40010000 	.word	0x40010000
 8008c6c:	40010800 	.word	0x40010800
 8008c70:	40010c00 	.word	0x40010c00
 8008c74:	40011000 	.word	0x40011000
 8008c78:	40011400 	.word	0x40011400
 8008c7c:	40011800 	.word	0x40011800
 8008c80:	40011c00 	.word	0x40011c00
 8008c84:	40010400 	.word	0x40010400

08008c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	689a      	ldr	r2, [r3, #8]
 8008c98:	887b      	ldrh	r3, [r7, #2]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	73fb      	strb	r3, [r7, #15]
 8008ca4:	e001      	b.n	8008caa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bc80      	pop	{r7}
 8008cb4:	4770      	bx	lr

08008cb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	807b      	strh	r3, [r7, #2]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008cc6:	787b      	ldrb	r3, [r7, #1]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ccc:	887a      	ldrh	r2, [r7, #2]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008cd2:	e003      	b.n	8008cdc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008cd4:	887b      	ldrh	r3, [r7, #2]
 8008cd6:	041a      	lsls	r2, r3, #16
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	611a      	str	r2, [r3, #16]
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bc80      	pop	{r7}
 8008ce4:	4770      	bx	lr

08008ce6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b085      	sub	sp, #20
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008cf8:	887a      	ldrh	r2, [r7, #2]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	041a      	lsls	r2, r3, #16
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	43d9      	mvns	r1, r3
 8008d04:	887b      	ldrh	r3, [r7, #2]
 8008d06:	400b      	ands	r3, r1
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	611a      	str	r2, [r3, #16]
}
 8008d0e:	bf00      	nop
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bc80      	pop	{r7}
 8008d16:	4770      	bx	lr

08008d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e12b      	b.n	8008f82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d106      	bne.n	8008d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7ff f82e 	bl	8007da0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2224      	movs	r2, #36	; 0x24
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f022 0201 	bic.w	r2, r2, #1
 8008d5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008d7c:	f001 fdb8 	bl	800a8f0 <HAL_RCC_GetPCLK1Freq>
 8008d80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	4a81      	ldr	r2, [pc, #516]	; (8008f8c <HAL_I2C_Init+0x274>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d807      	bhi.n	8008d9c <HAL_I2C_Init+0x84>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4a80      	ldr	r2, [pc, #512]	; (8008f90 <HAL_I2C_Init+0x278>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	bf94      	ite	ls
 8008d94:	2301      	movls	r3, #1
 8008d96:	2300      	movhi	r3, #0
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	e006      	b.n	8008daa <HAL_I2C_Init+0x92>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4a7d      	ldr	r2, [pc, #500]	; (8008f94 <HAL_I2C_Init+0x27c>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	bf94      	ite	ls
 8008da4:	2301      	movls	r3, #1
 8008da6:	2300      	movhi	r3, #0
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e0e7      	b.n	8008f82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	4a78      	ldr	r2, [pc, #480]	; (8008f98 <HAL_I2C_Init+0x280>)
 8008db6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dba:	0c9b      	lsrs	r3, r3, #18
 8008dbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	4a6a      	ldr	r2, [pc, #424]	; (8008f8c <HAL_I2C_Init+0x274>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d802      	bhi.n	8008dec <HAL_I2C_Init+0xd4>
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	3301      	adds	r3, #1
 8008dea:	e009      	b.n	8008e00 <HAL_I2C_Init+0xe8>
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008df2:	fb02 f303 	mul.w	r3, r2, r3
 8008df6:	4a69      	ldr	r2, [pc, #420]	; (8008f9c <HAL_I2C_Init+0x284>)
 8008df8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfc:	099b      	lsrs	r3, r3, #6
 8008dfe:	3301      	adds	r3, #1
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	6812      	ldr	r2, [r2, #0]
 8008e04:	430b      	orrs	r3, r1
 8008e06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	69db      	ldr	r3, [r3, #28]
 8008e0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008e12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	495c      	ldr	r1, [pc, #368]	; (8008f8c <HAL_I2C_Init+0x274>)
 8008e1c:	428b      	cmp	r3, r1
 8008e1e:	d819      	bhi.n	8008e54 <HAL_I2C_Init+0x13c>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	1e59      	subs	r1, r3, #1
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e2e:	1c59      	adds	r1, r3, #1
 8008e30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008e34:	400b      	ands	r3, r1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <HAL_I2C_Init+0x138>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	1e59      	subs	r1, r3, #1
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e48:	3301      	adds	r3, #1
 8008e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e4e:	e051      	b.n	8008ef4 <HAL_I2C_Init+0x1dc>
 8008e50:	2304      	movs	r3, #4
 8008e52:	e04f      	b.n	8008ef4 <HAL_I2C_Init+0x1dc>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d111      	bne.n	8008e80 <HAL_I2C_Init+0x168>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	1e58      	subs	r0, r3, #1
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6859      	ldr	r1, [r3, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	440b      	add	r3, r1
 8008e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e6e:	3301      	adds	r3, #1
 8008e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	bf0c      	ite	eq
 8008e78:	2301      	moveq	r3, #1
 8008e7a:	2300      	movne	r3, #0
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	e012      	b.n	8008ea6 <HAL_I2C_Init+0x18e>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	1e58      	subs	r0, r3, #1
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6859      	ldr	r1, [r3, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	440b      	add	r3, r1
 8008e8e:	0099      	lsls	r1, r3, #2
 8008e90:	440b      	add	r3, r1
 8008e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e96:	3301      	adds	r3, #1
 8008e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bf0c      	ite	eq
 8008ea0:	2301      	moveq	r3, #1
 8008ea2:	2300      	movne	r3, #0
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <HAL_I2C_Init+0x196>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e022      	b.n	8008ef4 <HAL_I2C_Init+0x1dc>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10e      	bne.n	8008ed4 <HAL_I2C_Init+0x1bc>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	1e58      	subs	r0, r3, #1
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6859      	ldr	r1, [r3, #4]
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	440b      	add	r3, r1
 8008ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ec8:	3301      	adds	r3, #1
 8008eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed2:	e00f      	b.n	8008ef4 <HAL_I2C_Init+0x1dc>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	1e58      	subs	r0, r3, #1
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6859      	ldr	r1, [r3, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	440b      	add	r3, r1
 8008ee2:	0099      	lsls	r1, r3, #2
 8008ee4:	440b      	add	r3, r1
 8008ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008eea:	3301      	adds	r3, #1
 8008eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	6809      	ldr	r1, [r1, #0]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	69da      	ldr	r2, [r3, #28]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008f22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	6911      	ldr	r1, [r2, #16]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	68d2      	ldr	r2, [r2, #12]
 8008f2e:	4311      	orrs	r1, r2
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	6812      	ldr	r2, [r2, #0]
 8008f34:	430b      	orrs	r3, r1
 8008f36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	695a      	ldr	r2, [r3, #20]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0201 	orr.w	r2, r2, #1
 8008f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	000186a0 	.word	0x000186a0
 8008f90:	001e847f 	.word	0x001e847f
 8008f94:	003d08ff 	.word	0x003d08ff
 8008f98:	431bde83 	.word	0x431bde83
 8008f9c:	10624dd3 	.word	0x10624dd3

08008fa0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e021      	b.n	8008ff6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2224      	movs	r2, #36	; 0x24
 8008fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f022 0201 	bic.w	r2, r2, #1
 8008fc8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7fe ff26 	bl	8007e1c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
	...

08009000 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af02      	add	r7, sp, #8
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	607a      	str	r2, [r7, #4]
 800900a:	461a      	mov	r2, r3
 800900c:	460b      	mov	r3, r1
 800900e:	817b      	strh	r3, [r7, #10]
 8009010:	4613      	mov	r3, r2
 8009012:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009014:	f7ff f85e 	bl	80080d4 <HAL_GetTick>
 8009018:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b20      	cmp	r3, #32
 8009024:	f040 80e0 	bne.w	80091e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	2319      	movs	r3, #25
 800902e:	2201      	movs	r2, #1
 8009030:	4970      	ldr	r1, [pc, #448]	; (80091f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f000 fe5c 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800903e:	2302      	movs	r3, #2
 8009040:	e0d3      	b.n	80091ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009048:	2b01      	cmp	r3, #1
 800904a:	d101      	bne.n	8009050 <HAL_I2C_Master_Transmit+0x50>
 800904c:	2302      	movs	r3, #2
 800904e:	e0cc      	b.n	80091ea <HAL_I2C_Master_Transmit+0x1ea>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	2b01      	cmp	r3, #1
 8009064:	d007      	beq.n	8009076 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f042 0201 	orr.w	r2, r2, #1
 8009074:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009084:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2221      	movs	r2, #33	; 0x21
 800908a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2210      	movs	r2, #16
 8009092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	893a      	ldrh	r2, [r7, #8]
 80090a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	4a50      	ldr	r2, [pc, #320]	; (80091f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80090b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80090b8:	8979      	ldrh	r1, [r7, #10]
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	6a3a      	ldr	r2, [r7, #32]
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 fc16 	bl	80098f0 <I2C_MasterRequestWrite>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e08d      	b.n	80091ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090ce:	2300      	movs	r3, #0
 80090d0:	613b      	str	r3, [r7, #16]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	613b      	str	r3, [r7, #16]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	613b      	str	r3, [r7, #16]
 80090e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80090e4:	e066      	b.n	80091b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	6a39      	ldr	r1, [r7, #32]
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f000 ff1a 	bl	8009f24 <I2C_WaitOnTXEFlagUntilTimeout>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00d      	beq.n	8009112 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fa:	2b04      	cmp	r3, #4
 80090fc:	d107      	bne.n	800910e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800910c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e06b      	b.n	80091ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009116:	781a      	ldrb	r2, [r3, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800912c:	b29b      	uxth	r3, r3
 800912e:	3b01      	subs	r3, #1
 8009130:	b29a      	uxth	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800913a:	3b01      	subs	r3, #1
 800913c:	b29a      	uxth	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	695b      	ldr	r3, [r3, #20]
 8009148:	f003 0304 	and.w	r3, r3, #4
 800914c:	2b04      	cmp	r3, #4
 800914e:	d11b      	bne.n	8009188 <HAL_I2C_Master_Transmit+0x188>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009154:	2b00      	cmp	r3, #0
 8009156:	d017      	beq.n	8009188 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	781a      	ldrb	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009172:	b29b      	uxth	r3, r3
 8009174:	3b01      	subs	r3, #1
 8009176:	b29a      	uxth	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009180:	3b01      	subs	r3, #1
 8009182:	b29a      	uxth	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	6a39      	ldr	r1, [r7, #32]
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 ff11 	bl	8009fb4 <I2C_WaitOnBTFFlagUntilTimeout>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00d      	beq.n	80091b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	2b04      	cmp	r3, #4
 800919e:	d107      	bne.n	80091b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e01a      	b.n	80091ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d194      	bne.n	80090e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2220      	movs	r2, #32
 80091d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	e000      	b.n	80091ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80091e8:	2302      	movs	r3, #2
  }
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3718      	adds	r7, #24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	00100002 	.word	0x00100002
 80091f8:	ffff0000 	.word	0xffff0000

080091fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af02      	add	r7, sp, #8
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	4608      	mov	r0, r1
 8009206:	4611      	mov	r1, r2
 8009208:	461a      	mov	r2, r3
 800920a:	4603      	mov	r3, r0
 800920c:	817b      	strh	r3, [r7, #10]
 800920e:	460b      	mov	r3, r1
 8009210:	813b      	strh	r3, [r7, #8]
 8009212:	4613      	mov	r3, r2
 8009214:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009216:	f7fe ff5d 	bl	80080d4 <HAL_GetTick>
 800921a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b20      	cmp	r3, #32
 8009226:	f040 80d9 	bne.w	80093dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	2319      	movs	r3, #25
 8009230:	2201      	movs	r2, #1
 8009232:	496d      	ldr	r1, [pc, #436]	; (80093e8 <HAL_I2C_Mem_Write+0x1ec>)
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 fd5b 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009240:	2302      	movs	r3, #2
 8009242:	e0cc      	b.n	80093de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800924a:	2b01      	cmp	r3, #1
 800924c:	d101      	bne.n	8009252 <HAL_I2C_Mem_Write+0x56>
 800924e:	2302      	movs	r3, #2
 8009250:	e0c5      	b.n	80093de <HAL_I2C_Mem_Write+0x1e2>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0301 	and.w	r3, r3, #1
 8009264:	2b01      	cmp	r3, #1
 8009266:	d007      	beq.n	8009278 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0201 	orr.w	r2, r2, #1
 8009276:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009286:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2221      	movs	r2, #33	; 0x21
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2240      	movs	r2, #64	; 0x40
 8009294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6a3a      	ldr	r2, [r7, #32]
 80092a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80092a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	4a4d      	ldr	r2, [pc, #308]	; (80093ec <HAL_I2C_Mem_Write+0x1f0>)
 80092b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092ba:	88f8      	ldrh	r0, [r7, #6]
 80092bc:	893a      	ldrh	r2, [r7, #8]
 80092be:	8979      	ldrh	r1, [r7, #10]
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	4603      	mov	r3, r0
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 fb92 	bl	80099f4 <I2C_RequestMemoryWrite>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d052      	beq.n	800937c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e081      	b.n	80093de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 fe20 	bl	8009f24 <I2C_WaitOnTXEFlagUntilTimeout>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00d      	beq.n	8009306 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d107      	bne.n	8009302 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009300:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e06b      	b.n	80093de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930a:	781a      	ldrb	r2, [r3, #0]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009316:	1c5a      	adds	r2, r3, #1
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009320:	3b01      	subs	r3, #1
 8009322:	b29a      	uxth	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800932c:	b29b      	uxth	r3, r3
 800932e:	3b01      	subs	r3, #1
 8009330:	b29a      	uxth	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	f003 0304 	and.w	r3, r3, #4
 8009340:	2b04      	cmp	r3, #4
 8009342:	d11b      	bne.n	800937c <HAL_I2C_Mem_Write+0x180>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009348:	2b00      	cmp	r3, #0
 800934a:	d017      	beq.n	800937c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	781a      	ldrb	r2, [r3, #0]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009366:	3b01      	subs	r3, #1
 8009368:	b29a      	uxth	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009372:	b29b      	uxth	r3, r3
 8009374:	3b01      	subs	r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1aa      	bne.n	80092da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 fe13 	bl	8009fb4 <I2C_WaitOnBTFFlagUntilTimeout>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00d      	beq.n	80093b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009398:	2b04      	cmp	r3, #4
 800939a:	d107      	bne.n	80093ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e016      	b.n	80093de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2220      	movs	r2, #32
 80093c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	e000      	b.n	80093de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80093dc:	2302      	movs	r3, #2
  }
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	00100002 	.word	0x00100002
 80093ec:	ffff0000 	.word	0xffff0000

080093f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08c      	sub	sp, #48	; 0x30
 80093f4:	af02      	add	r7, sp, #8
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	4608      	mov	r0, r1
 80093fa:	4611      	mov	r1, r2
 80093fc:	461a      	mov	r2, r3
 80093fe:	4603      	mov	r3, r0
 8009400:	817b      	strh	r3, [r7, #10]
 8009402:	460b      	mov	r3, r1
 8009404:	813b      	strh	r3, [r7, #8]
 8009406:	4613      	mov	r3, r2
 8009408:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800940a:	2300      	movs	r3, #0
 800940c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800940e:	f7fe fe61 	bl	80080d4 <HAL_GetTick>
 8009412:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800941a:	b2db      	uxtb	r3, r3
 800941c:	2b20      	cmp	r3, #32
 800941e:	f040 8244 	bne.w	80098aa <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	2319      	movs	r3, #25
 8009428:	2201      	movs	r2, #1
 800942a:	4982      	ldr	r1, [pc, #520]	; (8009634 <HAL_I2C_Mem_Read+0x244>)
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 fc5f 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d001      	beq.n	800943c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009438:	2302      	movs	r3, #2
 800943a:	e237      	b.n	80098ac <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009442:	2b01      	cmp	r3, #1
 8009444:	d101      	bne.n	800944a <HAL_I2C_Mem_Read+0x5a>
 8009446:	2302      	movs	r3, #2
 8009448:	e230      	b.n	80098ac <HAL_I2C_Mem_Read+0x4bc>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	2b01      	cmp	r3, #1
 800945e:	d007      	beq.n	8009470 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f042 0201 	orr.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800947e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2222      	movs	r2, #34	; 0x22
 8009484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2240      	movs	r2, #64	; 0x40
 800948c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800949a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80094a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4a62      	ldr	r2, [pc, #392]	; (8009638 <HAL_I2C_Mem_Read+0x248>)
 80094b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80094b2:	88f8      	ldrh	r0, [r7, #6]
 80094b4:	893a      	ldrh	r2, [r7, #8]
 80094b6:	8979      	ldrh	r1, [r7, #10]
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	9301      	str	r3, [sp, #4]
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	4603      	mov	r3, r0
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 fb2c 	bl	8009b20 <I2C_RequestMemoryRead>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e1ec      	b.n	80098ac <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d113      	bne.n	8009502 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094da:	2300      	movs	r3, #0
 80094dc:	61fb      	str	r3, [r7, #28]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	61fb      	str	r3, [r7, #28]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	61fb      	str	r3, [r7, #28]
 80094ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	e1c0      	b.n	8009884 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009506:	2b01      	cmp	r3, #1
 8009508:	d11e      	bne.n	8009548 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009518:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800951a:	b672      	cpsid	i
}
 800951c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800951e:	2300      	movs	r3, #0
 8009520:	61bb      	str	r3, [r7, #24]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	61bb      	str	r3, [r7, #24]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	61bb      	str	r3, [r7, #24]
 8009532:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009542:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009544:	b662      	cpsie	i
}
 8009546:	e035      	b.n	80095b4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800954c:	2b02      	cmp	r3, #2
 800954e:	d11e      	bne.n	800958e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800955e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009560:	b672      	cpsid	i
}
 8009562:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009564:	2300      	movs	r3, #0
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	617b      	str	r3, [r7, #20]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009588:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800958a:	b662      	cpsie	i
}
 800958c:	e012      	b.n	80095b4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800959c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800959e:	2300      	movs	r3, #0
 80095a0:	613b      	str	r3, [r7, #16]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	695b      	ldr	r3, [r3, #20]
 80095a8:	613b      	str	r3, [r7, #16]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	613b      	str	r3, [r7, #16]
 80095b2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80095b4:	e166      	b.n	8009884 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	f200 811f 	bhi.w	80097fe <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d123      	bne.n	8009610 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 fd39 	bl	800a044 <I2C_WaitOnRXNEFlagUntilTimeout>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e167      	b.n	80098ac <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	691a      	ldr	r2, [r3, #16]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	b2d2      	uxtb	r2, r2
 80095e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f8:	3b01      	subs	r3, #1
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009604:	b29b      	uxth	r3, r3
 8009606:	3b01      	subs	r3, #1
 8009608:	b29a      	uxth	r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800960e:	e139      	b.n	8009884 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009614:	2b02      	cmp	r3, #2
 8009616:	d152      	bne.n	80096be <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961e:	2200      	movs	r2, #0
 8009620:	4906      	ldr	r1, [pc, #24]	; (800963c <HAL_I2C_Mem_Read+0x24c>)
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f000 fb64 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d008      	beq.n	8009640 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e13c      	b.n	80098ac <HAL_I2C_Mem_Read+0x4bc>
 8009632:	bf00      	nop
 8009634:	00100002 	.word	0x00100002
 8009638:	ffff0000 	.word	0xffff0000
 800963c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009640:	b672      	cpsid	i
}
 8009642:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009652:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	691a      	ldr	r2, [r3, #16]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965e:	b2d2      	uxtb	r2, r2
 8009660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009666:	1c5a      	adds	r2, r3, #1
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009670:	3b01      	subs	r3, #1
 8009672:	b29a      	uxth	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800967c:	b29b      	uxth	r3, r3
 800967e:	3b01      	subs	r3, #1
 8009680:	b29a      	uxth	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009686:	b662      	cpsie	i
}
 8009688:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	691a      	ldr	r2, [r3, #16]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009694:	b2d2      	uxtb	r2, r2
 8009696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a6:	3b01      	subs	r3, #1
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	3b01      	subs	r3, #1
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096bc:	e0e2      	b.n	8009884 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c4:	2200      	movs	r2, #0
 80096c6:	497b      	ldr	r1, [pc, #492]	; (80098b4 <HAL_I2C_Mem_Read+0x4c4>)
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 fb11 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e0e9      	b.n	80098ac <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80096e8:	b672      	cpsid	i
}
 80096ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	691a      	ldr	r2, [r3, #16]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f6:	b2d2      	uxtb	r2, r2
 80096f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009708:	3b01      	subs	r3, #1
 800970a:	b29a      	uxth	r2, r3
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009714:	b29b      	uxth	r3, r3
 8009716:	3b01      	subs	r3, #1
 8009718:	b29a      	uxth	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800971e:	4b66      	ldr	r3, [pc, #408]	; (80098b8 <HAL_I2C_Mem_Read+0x4c8>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	08db      	lsrs	r3, r3, #3
 8009724:	4a65      	ldr	r2, [pc, #404]	; (80098bc <HAL_I2C_Mem_Read+0x4cc>)
 8009726:	fba2 2303 	umull	r2, r3, r2, r3
 800972a:	0a1a      	lsrs	r2, r3, #8
 800972c:	4613      	mov	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	00da      	lsls	r2, r3, #3
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	3b01      	subs	r3, #1
 800973c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800973e:	6a3b      	ldr	r3, [r7, #32]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d118      	bne.n	8009776 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2220      	movs	r2, #32
 800974e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975e:	f043 0220 	orr.w	r2, r3, #32
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009766:	b662      	cpsie	i
}
 8009768:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e09a      	b.n	80098ac <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	f003 0304 	and.w	r3, r3, #4
 8009780:	2b04      	cmp	r3, #4
 8009782:	d1d9      	bne.n	8009738 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	691a      	ldr	r2, [r3, #16]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	b2d2      	uxtb	r2, r2
 80097a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b0:	3b01      	subs	r3, #1
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097bc:	b29b      	uxth	r3, r3
 80097be:	3b01      	subs	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80097c6:	b662      	cpsie	i
}
 80097c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	691a      	ldr	r2, [r3, #16]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	b2d2      	uxtb	r2, r2
 80097d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	1c5a      	adds	r2, r3, #1
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097e6:	3b01      	subs	r3, #1
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	3b01      	subs	r3, #1
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097fc:	e042      	b.n	8009884 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009800:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 fc1e 	bl	800a044 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e04c      	b.n	80098ac <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	691a      	ldr	r2, [r3, #16]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981c:	b2d2      	uxtb	r2, r2
 800981e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009824:	1c5a      	adds	r2, r3, #1
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800982e:	3b01      	subs	r3, #1
 8009830:	b29a      	uxth	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800983a:	b29b      	uxth	r3, r3
 800983c:	3b01      	subs	r3, #1
 800983e:	b29a      	uxth	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	f003 0304 	and.w	r3, r3, #4
 800984e:	2b04      	cmp	r3, #4
 8009850:	d118      	bne.n	8009884 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	691a      	ldr	r2, [r3, #16]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985c:	b2d2      	uxtb	r2, r2
 800985e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800986e:	3b01      	subs	r3, #1
 8009870:	b29a      	uxth	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800987a:	b29b      	uxth	r3, r3
 800987c:	3b01      	subs	r3, #1
 800987e:	b29a      	uxth	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009888:	2b00      	cmp	r3, #0
 800988a:	f47f ae94 	bne.w	80095b6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2220      	movs	r2, #32
 8009892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	e000      	b.n	80098ac <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80098aa:	2302      	movs	r3, #2
  }
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3728      	adds	r7, #40	; 0x28
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	00010004 	.word	0x00010004
 80098b8:	200000a8 	.word	0x200000a8
 80098bc:	14f8b589 	.word	0x14f8b589

080098c0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ce:	b2db      	uxtb	r3, r3
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bc80      	pop	{r7}
 80098d8:	4770      	bx	lr

080098da <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80098da:	b480      	push	{r7}
 80098dc:	b083      	sub	sp, #12
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	370c      	adds	r7, #12
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bc80      	pop	{r7}
 80098ee:	4770      	bx	lr

080098f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b088      	sub	sp, #32
 80098f4:	af02      	add	r7, sp, #8
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	607a      	str	r2, [r7, #4]
 80098fa:	603b      	str	r3, [r7, #0]
 80098fc:	460b      	mov	r3, r1
 80098fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009904:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	2b08      	cmp	r3, #8
 800990a:	d006      	beq.n	800991a <I2C_MasterRequestWrite+0x2a>
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d003      	beq.n	800991a <I2C_MasterRequestWrite+0x2a>
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009918:	d108      	bne.n	800992c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	e00b      	b.n	8009944 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009930:	2b12      	cmp	r3, #18
 8009932:	d107      	bne.n	8009944 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009942:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 f9cd 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00d      	beq.n	8009978 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800996a:	d103      	bne.n	8009974 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009974:	2303      	movs	r3, #3
 8009976:	e035      	b.n	80099e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009980:	d108      	bne.n	8009994 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009982:	897b      	ldrh	r3, [r7, #10]
 8009984:	b2db      	uxtb	r3, r3
 8009986:	461a      	mov	r2, r3
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009990:	611a      	str	r2, [r3, #16]
 8009992:	e01b      	b.n	80099cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009994:	897b      	ldrh	r3, [r7, #10]
 8009996:	11db      	asrs	r3, r3, #7
 8009998:	b2db      	uxtb	r3, r3
 800999a:	f003 0306 	and.w	r3, r3, #6
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	f063 030f 	orn	r3, r3, #15
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	490e      	ldr	r1, [pc, #56]	; (80099ec <I2C_MasterRequestWrite+0xfc>)
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 fa16 	bl	8009de4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e010      	b.n	80099e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80099c2:	897b      	ldrh	r3, [r7, #10]
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	4907      	ldr	r1, [pc, #28]	; (80099f0 <I2C_MasterRequestWrite+0x100>)
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 fa06 	bl	8009de4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e000      	b.n	80099e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3718      	adds	r7, #24
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	00010008 	.word	0x00010008
 80099f0:	00010002 	.word	0x00010002

080099f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af02      	add	r7, sp, #8
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	4608      	mov	r0, r1
 80099fe:	4611      	mov	r1, r2
 8009a00:	461a      	mov	r2, r3
 8009a02:	4603      	mov	r3, r0
 8009a04:	817b      	strh	r3, [r7, #10]
 8009a06:	460b      	mov	r3, r1
 8009a08:	813b      	strh	r3, [r7, #8]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	9300      	str	r3, [sp, #0]
 8009a22:	6a3b      	ldr	r3, [r7, #32]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 f960 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00d      	beq.n	8009a52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a44:	d103      	bne.n	8009a4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e05f      	b.n	8009b12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a52:	897b      	ldrh	r3, [r7, #10]
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	461a      	mov	r2, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	6a3a      	ldr	r2, [r7, #32]
 8009a66:	492d      	ldr	r1, [pc, #180]	; (8009b1c <I2C_RequestMemoryWrite+0x128>)
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f000 f9bb 	bl	8009de4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e04c      	b.n	8009b12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a78:	2300      	movs	r3, #0
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	617b      	str	r3, [r7, #20]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	617b      	str	r3, [r7, #20]
 8009a8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a90:	6a39      	ldr	r1, [r7, #32]
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 fa46 	bl	8009f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00d      	beq.n	8009aba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa2:	2b04      	cmp	r3, #4
 8009aa4:	d107      	bne.n	8009ab6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ab4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e02b      	b.n	8009b12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009aba:	88fb      	ldrh	r3, [r7, #6]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d105      	bne.n	8009acc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ac0:	893b      	ldrh	r3, [r7, #8]
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	611a      	str	r2, [r3, #16]
 8009aca:	e021      	b.n	8009b10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009acc:	893b      	ldrh	r3, [r7, #8]
 8009ace:	0a1b      	lsrs	r3, r3, #8
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009adc:	6a39      	ldr	r1, [r7, #32]
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 fa20 	bl	8009f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00d      	beq.n	8009b06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aee:	2b04      	cmp	r3, #4
 8009af0:	d107      	bne.n	8009b02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e005      	b.n	8009b12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b06:	893b      	ldrh	r3, [r7, #8]
 8009b08:	b2da      	uxtb	r2, r3
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	00010002 	.word	0x00010002

08009b20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b088      	sub	sp, #32
 8009b24:	af02      	add	r7, sp, #8
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	4608      	mov	r0, r1
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	4603      	mov	r3, r0
 8009b30:	817b      	strh	r3, [r7, #10]
 8009b32:	460b      	mov	r3, r1
 8009b34:	813b      	strh	r3, [r7, #8]
 8009b36:	4613      	mov	r3, r2
 8009b38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f000 f8c2 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00d      	beq.n	8009b8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b80:	d103      	bne.n	8009b8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e0aa      	b.n	8009ce4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b8e:	897b      	ldrh	r3, [r7, #10]
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	461a      	mov	r2, r3
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba0:	6a3a      	ldr	r2, [r7, #32]
 8009ba2:	4952      	ldr	r1, [pc, #328]	; (8009cec <I2C_RequestMemoryRead+0x1cc>)
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f000 f91d 	bl	8009de4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e097      	b.n	8009ce4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	617b      	str	r3, [r7, #20]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	617b      	str	r3, [r7, #20]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bcc:	6a39      	ldr	r1, [r7, #32]
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f000 f9a8 	bl	8009f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00d      	beq.n	8009bf6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	d107      	bne.n	8009bf2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e076      	b.n	8009ce4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009bf6:	88fb      	ldrh	r3, [r7, #6]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d105      	bne.n	8009c08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009bfc:	893b      	ldrh	r3, [r7, #8]
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	611a      	str	r2, [r3, #16]
 8009c06:	e021      	b.n	8009c4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009c08:	893b      	ldrh	r3, [r7, #8]
 8009c0a:	0a1b      	lsrs	r3, r3, #8
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c18:	6a39      	ldr	r1, [r7, #32]
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f000 f982 	bl	8009f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00d      	beq.n	8009c42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2a:	2b04      	cmp	r3, #4
 8009c2c:	d107      	bne.n	8009c3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e050      	b.n	8009ce4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009c42:	893b      	ldrh	r3, [r7, #8]
 8009c44:	b2da      	uxtb	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c4e:	6a39      	ldr	r1, [r7, #32]
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f000 f967 	bl	8009f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00d      	beq.n	8009c78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c60:	2b04      	cmp	r3, #4
 8009c62:	d107      	bne.n	8009c74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e035      	b.n	8009ce4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f000 f82b 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00d      	beq.n	8009cbc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cae:	d103      	bne.n	8009cb8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e013      	b.n	8009ce4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009cbc:	897b      	ldrh	r3, [r7, #10]
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	f043 0301 	orr.w	r3, r3, #1
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cce:	6a3a      	ldr	r2, [r7, #32]
 8009cd0:	4906      	ldr	r1, [pc, #24]	; (8009cec <I2C_RequestMemoryRead+0x1cc>)
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f000 f886 	bl	8009de4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e000      	b.n	8009ce4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	00010002 	.word	0x00010002

08009cf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	603b      	str	r3, [r7, #0]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d00:	e048      	b.n	8009d94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d08:	d044      	beq.n	8009d94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d0a:	f7fe f9e3 	bl	80080d4 <HAL_GetTick>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d302      	bcc.n	8009d20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d139      	bne.n	8009d94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	0c1b      	lsrs	r3, r3, #16
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d10d      	bne.n	8009d46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	695b      	ldr	r3, [r3, #20]
 8009d30:	43da      	mvns	r2, r3
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	4013      	ands	r3, r2
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	bf0c      	ite	eq
 8009d3c:	2301      	moveq	r3, #1
 8009d3e:	2300      	movne	r3, #0
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	461a      	mov	r2, r3
 8009d44:	e00c      	b.n	8009d60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	43da      	mvns	r2, r3
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	4013      	ands	r3, r2
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	bf0c      	ite	eq
 8009d58:	2301      	moveq	r3, #1
 8009d5a:	2300      	movne	r3, #0
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	461a      	mov	r2, r3
 8009d60:	79fb      	ldrb	r3, [r7, #7]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d116      	bne.n	8009d94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2220      	movs	r2, #32
 8009d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d80:	f043 0220 	orr.w	r2, r3, #32
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e023      	b.n	8009ddc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	0c1b      	lsrs	r3, r3, #16
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d10d      	bne.n	8009dba <I2C_WaitOnFlagUntilTimeout+0xca>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	695b      	ldr	r3, [r3, #20]
 8009da4:	43da      	mvns	r2, r3
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	4013      	ands	r3, r2
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	bf0c      	ite	eq
 8009db0:	2301      	moveq	r3, #1
 8009db2:	2300      	movne	r3, #0
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	461a      	mov	r2, r3
 8009db8:	e00c      	b.n	8009dd4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	43da      	mvns	r2, r3
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	bf0c      	ite	eq
 8009dcc:	2301      	moveq	r3, #1
 8009dce:	2300      	movne	r3, #0
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d093      	beq.n	8009d02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009df2:	e071      	b.n	8009ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e02:	d123      	bne.n	8009e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2220      	movs	r2, #32
 8009e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e38:	f043 0204 	orr.w	r2, r3, #4
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e067      	b.n	8009f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e52:	d041      	beq.n	8009ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e54:	f7fe f93e 	bl	80080d4 <HAL_GetTick>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d302      	bcc.n	8009e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d136      	bne.n	8009ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	0c1b      	lsrs	r3, r3, #16
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d10c      	bne.n	8009e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	43da      	mvns	r2, r3
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	4013      	ands	r3, r2
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bf14      	ite	ne
 8009e86:	2301      	movne	r3, #1
 8009e88:	2300      	moveq	r3, #0
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	e00b      	b.n	8009ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	43da      	mvns	r2, r3
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4013      	ands	r3, r2
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	bf14      	ite	ne
 8009ea0:	2301      	movne	r3, #1
 8009ea2:	2300      	moveq	r3, #0
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d016      	beq.n	8009ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2220      	movs	r2, #32
 8009eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec4:	f043 0220 	orr.w	r2, r3, #32
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e021      	b.n	8009f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	0c1b      	lsrs	r3, r3, #16
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d10c      	bne.n	8009efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	43da      	mvns	r2, r3
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	4013      	ands	r3, r2
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	bf14      	ite	ne
 8009ef4:	2301      	movne	r3, #1
 8009ef6:	2300      	moveq	r3, #0
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	e00b      	b.n	8009f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	43da      	mvns	r2, r3
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	4013      	ands	r3, r2
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	bf14      	ite	ne
 8009f0e:	2301      	movne	r3, #1
 8009f10:	2300      	moveq	r3, #0
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f47f af6d 	bne.w	8009df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f30:	e034      	b.n	8009f9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 f8e3 	bl	800a0fe <I2C_IsAcknowledgeFailed>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e034      	b.n	8009fac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f48:	d028      	beq.n	8009f9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f4a:	f7fe f8c3 	bl	80080d4 <HAL_GetTick>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d302      	bcc.n	8009f60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d11d      	bne.n	8009f9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f6a:	2b80      	cmp	r3, #128	; 0x80
 8009f6c:	d016      	beq.n	8009f9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2220      	movs	r2, #32
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f88:	f043 0220 	orr.w	r2, r3, #32
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e007      	b.n	8009fac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	695b      	ldr	r3, [r3, #20]
 8009fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa6:	2b80      	cmp	r3, #128	; 0x80
 8009fa8:	d1c3      	bne.n	8009f32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009fc0:	e034      	b.n	800a02c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f000 f89b 	bl	800a0fe <I2C_IsAcknowledgeFailed>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e034      	b.n	800a03c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fd8:	d028      	beq.n	800a02c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fda:	f7fe f87b 	bl	80080d4 <HAL_GetTick>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d302      	bcc.n	8009ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d11d      	bne.n	800a02c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	f003 0304 	and.w	r3, r3, #4
 8009ffa:	2b04      	cmp	r3, #4
 8009ffc:	d016      	beq.n	800a02c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2220      	movs	r2, #32
 800a008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a018:	f043 0220 	orr.w	r2, r3, #32
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e007      	b.n	800a03c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	f003 0304 	and.w	r3, r3, #4
 800a036:	2b04      	cmp	r3, #4
 800a038:	d1c3      	bne.n	8009fc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a050:	e049      	b.n	800a0e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	f003 0310 	and.w	r3, r3, #16
 800a05c:	2b10      	cmp	r3, #16
 800a05e:	d119      	bne.n	800a094 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f06f 0210 	mvn.w	r2, #16
 800a068:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2220      	movs	r2, #32
 800a074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e030      	b.n	800a0f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a094:	f7fe f81e 	bl	80080d4 <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d302      	bcc.n	800a0aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d11d      	bne.n	800a0e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	695b      	ldr	r3, [r3, #20]
 800a0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b4:	2b40      	cmp	r3, #64	; 0x40
 800a0b6:	d016      	beq.n	800a0e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d2:	f043 0220 	orr.w	r2, r3, #32
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e007      	b.n	800a0f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f0:	2b40      	cmp	r3, #64	; 0x40
 800a0f2:	d1ae      	bne.n	800a052 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b083      	sub	sp, #12
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a114:	d11b      	bne.n	800a14e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a11e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2220      	movs	r2, #32
 800a12a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13a:	f043 0204 	orr.w	r2, r3, #4
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e000      	b.n	800a150 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	bc80      	pop	{r7}
 800a158:	4770      	bx	lr
	...

0800a15c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e272      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 8087 	beq.w	800a28a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a17c:	4b92      	ldr	r3, [pc, #584]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	f003 030c 	and.w	r3, r3, #12
 800a184:	2b04      	cmp	r3, #4
 800a186:	d00c      	beq.n	800a1a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a188:	4b8f      	ldr	r3, [pc, #572]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	f003 030c 	and.w	r3, r3, #12
 800a190:	2b08      	cmp	r3, #8
 800a192:	d112      	bne.n	800a1ba <HAL_RCC_OscConfig+0x5e>
 800a194:	4b8c      	ldr	r3, [pc, #560]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a19c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1a0:	d10b      	bne.n	800a1ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1a2:	4b89      	ldr	r3, [pc, #548]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d06c      	beq.n	800a288 <HAL_RCC_OscConfig+0x12c>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d168      	bne.n	800a288 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e24c      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c2:	d106      	bne.n	800a1d2 <HAL_RCC_OscConfig+0x76>
 800a1c4:	4b80      	ldr	r3, [pc, #512]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a7f      	ldr	r2, [pc, #508]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a1ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	e02e      	b.n	800a230 <HAL_RCC_OscConfig+0xd4>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10c      	bne.n	800a1f4 <HAL_RCC_OscConfig+0x98>
 800a1da:	4b7b      	ldr	r3, [pc, #492]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a7a      	ldr	r2, [pc, #488]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a1e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1e4:	6013      	str	r3, [r2, #0]
 800a1e6:	4b78      	ldr	r3, [pc, #480]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a77      	ldr	r2, [pc, #476]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a1ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1f0:	6013      	str	r3, [r2, #0]
 800a1f2:	e01d      	b.n	800a230 <HAL_RCC_OscConfig+0xd4>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a1fc:	d10c      	bne.n	800a218 <HAL_RCC_OscConfig+0xbc>
 800a1fe:	4b72      	ldr	r3, [pc, #456]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a71      	ldr	r2, [pc, #452]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	4b6f      	ldr	r3, [pc, #444]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a6e      	ldr	r2, [pc, #440]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a214:	6013      	str	r3, [r2, #0]
 800a216:	e00b      	b.n	800a230 <HAL_RCC_OscConfig+0xd4>
 800a218:	4b6b      	ldr	r3, [pc, #428]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a6a      	ldr	r2, [pc, #424]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a21e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a222:	6013      	str	r3, [r2, #0]
 800a224:	4b68      	ldr	r3, [pc, #416]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a67      	ldr	r2, [pc, #412]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a22a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a22e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d013      	beq.n	800a260 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a238:	f7fd ff4c 	bl	80080d4 <HAL_GetTick>
 800a23c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a23e:	e008      	b.n	800a252 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a240:	f7fd ff48 	bl	80080d4 <HAL_GetTick>
 800a244:	4602      	mov	r2, r0
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	2b64      	cmp	r3, #100	; 0x64
 800a24c:	d901      	bls.n	800a252 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e200      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a252:	4b5d      	ldr	r3, [pc, #372]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d0f0      	beq.n	800a240 <HAL_RCC_OscConfig+0xe4>
 800a25e:	e014      	b.n	800a28a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a260:	f7fd ff38 	bl	80080d4 <HAL_GetTick>
 800a264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a266:	e008      	b.n	800a27a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a268:	f7fd ff34 	bl	80080d4 <HAL_GetTick>
 800a26c:	4602      	mov	r2, r0
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	2b64      	cmp	r3, #100	; 0x64
 800a274:	d901      	bls.n	800a27a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a276:	2303      	movs	r3, #3
 800a278:	e1ec      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a27a:	4b53      	ldr	r3, [pc, #332]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1f0      	bne.n	800a268 <HAL_RCC_OscConfig+0x10c>
 800a286:	e000      	b.n	800a28a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 0302 	and.w	r3, r3, #2
 800a292:	2b00      	cmp	r3, #0
 800a294:	d063      	beq.n	800a35e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a296:	4b4c      	ldr	r3, [pc, #304]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f003 030c 	and.w	r3, r3, #12
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00b      	beq.n	800a2ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a2a2:	4b49      	ldr	r3, [pc, #292]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	f003 030c 	and.w	r3, r3, #12
 800a2aa:	2b08      	cmp	r3, #8
 800a2ac:	d11c      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x18c>
 800a2ae:	4b46      	ldr	r3, [pc, #280]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d116      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2ba:	4b43      	ldr	r3, [pc, #268]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 0302 	and.w	r3, r3, #2
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d005      	beq.n	800a2d2 <HAL_RCC_OscConfig+0x176>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d001      	beq.n	800a2d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e1c0      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2d2:	4b3d      	ldr	r3, [pc, #244]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	695b      	ldr	r3, [r3, #20]
 800a2de:	00db      	lsls	r3, r3, #3
 800a2e0:	4939      	ldr	r1, [pc, #228]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2e6:	e03a      	b.n	800a35e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d020      	beq.n	800a332 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a2f0:	4b36      	ldr	r3, [pc, #216]	; (800a3cc <HAL_RCC_OscConfig+0x270>)
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2f6:	f7fd feed 	bl	80080d4 <HAL_GetTick>
 800a2fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2fc:	e008      	b.n	800a310 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2fe:	f7fd fee9 	bl	80080d4 <HAL_GetTick>
 800a302:	4602      	mov	r2, r0
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d901      	bls.n	800a310 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e1a1      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a310:	4b2d      	ldr	r3, [pc, #180]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 0302 	and.w	r3, r3, #2
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d0f0      	beq.n	800a2fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a31c:	4b2a      	ldr	r3, [pc, #168]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	4927      	ldr	r1, [pc, #156]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a32c:	4313      	orrs	r3, r2
 800a32e:	600b      	str	r3, [r1, #0]
 800a330:	e015      	b.n	800a35e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a332:	4b26      	ldr	r3, [pc, #152]	; (800a3cc <HAL_RCC_OscConfig+0x270>)
 800a334:	2200      	movs	r2, #0
 800a336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a338:	f7fd fecc 	bl	80080d4 <HAL_GetTick>
 800a33c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a33e:	e008      	b.n	800a352 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a340:	f7fd fec8 	bl	80080d4 <HAL_GetTick>
 800a344:	4602      	mov	r2, r0
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d901      	bls.n	800a352 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a34e:	2303      	movs	r3, #3
 800a350:	e180      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a352:	4b1d      	ldr	r3, [pc, #116]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 0302 	and.w	r3, r3, #2
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1f0      	bne.n	800a340 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0308 	and.w	r3, r3, #8
 800a366:	2b00      	cmp	r3, #0
 800a368:	d03a      	beq.n	800a3e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d019      	beq.n	800a3a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a372:	4b17      	ldr	r3, [pc, #92]	; (800a3d0 <HAL_RCC_OscConfig+0x274>)
 800a374:	2201      	movs	r2, #1
 800a376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a378:	f7fd feac 	bl	80080d4 <HAL_GetTick>
 800a37c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a37e:	e008      	b.n	800a392 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a380:	f7fd fea8 	bl	80080d4 <HAL_GetTick>
 800a384:	4602      	mov	r2, r0
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d901      	bls.n	800a392 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	e160      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a392:	4b0d      	ldr	r3, [pc, #52]	; (800a3c8 <HAL_RCC_OscConfig+0x26c>)
 800a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a396:	f003 0302 	and.w	r3, r3, #2
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0f0      	beq.n	800a380 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a39e:	2001      	movs	r0, #1
 800a3a0:	f000 face 	bl	800a940 <RCC_Delay>
 800a3a4:	e01c      	b.n	800a3e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3a6:	4b0a      	ldr	r3, [pc, #40]	; (800a3d0 <HAL_RCC_OscConfig+0x274>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3ac:	f7fd fe92 	bl	80080d4 <HAL_GetTick>
 800a3b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3b2:	e00f      	b.n	800a3d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3b4:	f7fd fe8e 	bl	80080d4 <HAL_GetTick>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d908      	bls.n	800a3d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e146      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
 800a3c6:	bf00      	nop
 800a3c8:	40021000 	.word	0x40021000
 800a3cc:	42420000 	.word	0x42420000
 800a3d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3d4:	4b92      	ldr	r3, [pc, #584]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d8:	f003 0302 	and.w	r3, r3, #2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1e9      	bne.n	800a3b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 0304 	and.w	r3, r3, #4
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 80a6 	beq.w	800a53a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3f2:	4b8b      	ldr	r3, [pc, #556]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a3f4:	69db      	ldr	r3, [r3, #28]
 800a3f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10d      	bne.n	800a41a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3fe:	4b88      	ldr	r3, [pc, #544]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a400:	69db      	ldr	r3, [r3, #28]
 800a402:	4a87      	ldr	r2, [pc, #540]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a408:	61d3      	str	r3, [r2, #28]
 800a40a:	4b85      	ldr	r3, [pc, #532]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a40c:	69db      	ldr	r3, [r3, #28]
 800a40e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a412:	60bb      	str	r3, [r7, #8]
 800a414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a416:	2301      	movs	r3, #1
 800a418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a41a:	4b82      	ldr	r3, [pc, #520]	; (800a624 <HAL_RCC_OscConfig+0x4c8>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a422:	2b00      	cmp	r3, #0
 800a424:	d118      	bne.n	800a458 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a426:	4b7f      	ldr	r3, [pc, #508]	; (800a624 <HAL_RCC_OscConfig+0x4c8>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a7e      	ldr	r2, [pc, #504]	; (800a624 <HAL_RCC_OscConfig+0x4c8>)
 800a42c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a432:	f7fd fe4f 	bl	80080d4 <HAL_GetTick>
 800a436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a438:	e008      	b.n	800a44c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a43a:	f7fd fe4b 	bl	80080d4 <HAL_GetTick>
 800a43e:	4602      	mov	r2, r0
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	2b64      	cmp	r3, #100	; 0x64
 800a446:	d901      	bls.n	800a44c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e103      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a44c:	4b75      	ldr	r3, [pc, #468]	; (800a624 <HAL_RCC_OscConfig+0x4c8>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a454:	2b00      	cmp	r3, #0
 800a456:	d0f0      	beq.n	800a43a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d106      	bne.n	800a46e <HAL_RCC_OscConfig+0x312>
 800a460:	4b6f      	ldr	r3, [pc, #444]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	4a6e      	ldr	r2, [pc, #440]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a466:	f043 0301 	orr.w	r3, r3, #1
 800a46a:	6213      	str	r3, [r2, #32]
 800a46c:	e02d      	b.n	800a4ca <HAL_RCC_OscConfig+0x36e>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10c      	bne.n	800a490 <HAL_RCC_OscConfig+0x334>
 800a476:	4b6a      	ldr	r3, [pc, #424]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a478:	6a1b      	ldr	r3, [r3, #32]
 800a47a:	4a69      	ldr	r2, [pc, #420]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a47c:	f023 0301 	bic.w	r3, r3, #1
 800a480:	6213      	str	r3, [r2, #32]
 800a482:	4b67      	ldr	r3, [pc, #412]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	4a66      	ldr	r2, [pc, #408]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a488:	f023 0304 	bic.w	r3, r3, #4
 800a48c:	6213      	str	r3, [r2, #32]
 800a48e:	e01c      	b.n	800a4ca <HAL_RCC_OscConfig+0x36e>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	2b05      	cmp	r3, #5
 800a496:	d10c      	bne.n	800a4b2 <HAL_RCC_OscConfig+0x356>
 800a498:	4b61      	ldr	r3, [pc, #388]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	4a60      	ldr	r2, [pc, #384]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a49e:	f043 0304 	orr.w	r3, r3, #4
 800a4a2:	6213      	str	r3, [r2, #32]
 800a4a4:	4b5e      	ldr	r3, [pc, #376]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a4a6:	6a1b      	ldr	r3, [r3, #32]
 800a4a8:	4a5d      	ldr	r2, [pc, #372]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a4aa:	f043 0301 	orr.w	r3, r3, #1
 800a4ae:	6213      	str	r3, [r2, #32]
 800a4b0:	e00b      	b.n	800a4ca <HAL_RCC_OscConfig+0x36e>
 800a4b2:	4b5b      	ldr	r3, [pc, #364]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a4b4:	6a1b      	ldr	r3, [r3, #32]
 800a4b6:	4a5a      	ldr	r2, [pc, #360]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a4b8:	f023 0301 	bic.w	r3, r3, #1
 800a4bc:	6213      	str	r3, [r2, #32]
 800a4be:	4b58      	ldr	r3, [pc, #352]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a4c0:	6a1b      	ldr	r3, [r3, #32]
 800a4c2:	4a57      	ldr	r2, [pc, #348]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a4c4:	f023 0304 	bic.w	r3, r3, #4
 800a4c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d015      	beq.n	800a4fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4d2:	f7fd fdff 	bl	80080d4 <HAL_GetTick>
 800a4d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4d8:	e00a      	b.n	800a4f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4da:	f7fd fdfb 	bl	80080d4 <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d901      	bls.n	800a4f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	e0b1      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4f0:	4b4b      	ldr	r3, [pc, #300]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a4f2:	6a1b      	ldr	r3, [r3, #32]
 800a4f4:	f003 0302 	and.w	r3, r3, #2
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0ee      	beq.n	800a4da <HAL_RCC_OscConfig+0x37e>
 800a4fc:	e014      	b.n	800a528 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4fe:	f7fd fde9 	bl	80080d4 <HAL_GetTick>
 800a502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a504:	e00a      	b.n	800a51c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a506:	f7fd fde5 	bl	80080d4 <HAL_GetTick>
 800a50a:	4602      	mov	r2, r0
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	f241 3288 	movw	r2, #5000	; 0x1388
 800a514:	4293      	cmp	r3, r2
 800a516:	d901      	bls.n	800a51c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a518:	2303      	movs	r3, #3
 800a51a:	e09b      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a51c:	4b40      	ldr	r3, [pc, #256]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a51e:	6a1b      	ldr	r3, [r3, #32]
 800a520:	f003 0302 	and.w	r3, r3, #2
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1ee      	bne.n	800a506 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d105      	bne.n	800a53a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a52e:	4b3c      	ldr	r3, [pc, #240]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a530:	69db      	ldr	r3, [r3, #28]
 800a532:	4a3b      	ldr	r2, [pc, #236]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a538:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f000 8087 	beq.w	800a652 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a544:	4b36      	ldr	r3, [pc, #216]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	f003 030c 	and.w	r3, r3, #12
 800a54c:	2b08      	cmp	r3, #8
 800a54e:	d061      	beq.n	800a614 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	69db      	ldr	r3, [r3, #28]
 800a554:	2b02      	cmp	r3, #2
 800a556:	d146      	bne.n	800a5e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a558:	4b33      	ldr	r3, [pc, #204]	; (800a628 <HAL_RCC_OscConfig+0x4cc>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a55e:	f7fd fdb9 	bl	80080d4 <HAL_GetTick>
 800a562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a564:	e008      	b.n	800a578 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a566:	f7fd fdb5 	bl	80080d4 <HAL_GetTick>
 800a56a:	4602      	mov	r2, r0
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	2b02      	cmp	r3, #2
 800a572:	d901      	bls.n	800a578 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a574:	2303      	movs	r3, #3
 800a576:	e06d      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a578:	4b29      	ldr	r3, [pc, #164]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1f0      	bne.n	800a566 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a1b      	ldr	r3, [r3, #32]
 800a588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a58c:	d108      	bne.n	800a5a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a58e:	4b24      	ldr	r3, [pc, #144]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	4921      	ldr	r1, [pc, #132]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a59c:	4313      	orrs	r3, r2
 800a59e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a5a0:	4b1f      	ldr	r3, [pc, #124]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a19      	ldr	r1, [r3, #32]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b0:	430b      	orrs	r3, r1
 800a5b2:	491b      	ldr	r1, [pc, #108]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5b8:	4b1b      	ldr	r3, [pc, #108]	; (800a628 <HAL_RCC_OscConfig+0x4cc>)
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5be:	f7fd fd89 	bl	80080d4 <HAL_GetTick>
 800a5c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a5c4:	e008      	b.n	800a5d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5c6:	f7fd fd85 	bl	80080d4 <HAL_GetTick>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d901      	bls.n	800a5d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	e03d      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a5d8:	4b11      	ldr	r3, [pc, #68]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d0f0      	beq.n	800a5c6 <HAL_RCC_OscConfig+0x46a>
 800a5e4:	e035      	b.n	800a652 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5e6:	4b10      	ldr	r3, [pc, #64]	; (800a628 <HAL_RCC_OscConfig+0x4cc>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5ec:	f7fd fd72 	bl	80080d4 <HAL_GetTick>
 800a5f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a5f2:	e008      	b.n	800a606 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5f4:	f7fd fd6e 	bl	80080d4 <HAL_GetTick>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d901      	bls.n	800a606 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e026      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a606:	4b06      	ldr	r3, [pc, #24]	; (800a620 <HAL_RCC_OscConfig+0x4c4>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1f0      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x498>
 800a612:	e01e      	b.n	800a652 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	69db      	ldr	r3, [r3, #28]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d107      	bne.n	800a62c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e019      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
 800a620:	40021000 	.word	0x40021000
 800a624:	40007000 	.word	0x40007000
 800a628:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a62c:	4b0b      	ldr	r3, [pc, #44]	; (800a65c <HAL_RCC_OscConfig+0x500>)
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d106      	bne.n	800a64e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d001      	beq.n	800a652 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e000      	b.n	800a654 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3718      	adds	r7, #24
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	40021000 	.word	0x40021000

0800a660 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e0d0      	b.n	800a816 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a674:	4b6a      	ldr	r3, [pc, #424]	; (800a820 <HAL_RCC_ClockConfig+0x1c0>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d910      	bls.n	800a6a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a682:	4b67      	ldr	r3, [pc, #412]	; (800a820 <HAL_RCC_ClockConfig+0x1c0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f023 0207 	bic.w	r2, r3, #7
 800a68a:	4965      	ldr	r1, [pc, #404]	; (800a820 <HAL_RCC_ClockConfig+0x1c0>)
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	4313      	orrs	r3, r2
 800a690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a692:	4b63      	ldr	r3, [pc, #396]	; (800a820 <HAL_RCC_ClockConfig+0x1c0>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0307 	and.w	r3, r3, #7
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d001      	beq.n	800a6a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e0b8      	b.n	800a816 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d020      	beq.n	800a6f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d005      	beq.n	800a6c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a6bc:	4b59      	ldr	r3, [pc, #356]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	4a58      	ldr	r2, [pc, #352]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a6c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a6c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 0308 	and.w	r3, r3, #8
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d005      	beq.n	800a6e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a6d4:	4b53      	ldr	r3, [pc, #332]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	4a52      	ldr	r2, [pc, #328]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a6da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a6de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6e0:	4b50      	ldr	r3, [pc, #320]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	494d      	ldr	r1, [pc, #308]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d040      	beq.n	800a780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d107      	bne.n	800a716 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a706:	4b47      	ldr	r3, [pc, #284]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d115      	bne.n	800a73e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e07f      	b.n	800a816 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d107      	bne.n	800a72e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a71e:	4b41      	ldr	r3, [pc, #260]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a726:	2b00      	cmp	r3, #0
 800a728:	d109      	bne.n	800a73e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e073      	b.n	800a816 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a72e:	4b3d      	ldr	r3, [pc, #244]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 0302 	and.w	r3, r3, #2
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e06b      	b.n	800a816 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a73e:	4b39      	ldr	r3, [pc, #228]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f023 0203 	bic.w	r2, r3, #3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	4936      	ldr	r1, [pc, #216]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a74c:	4313      	orrs	r3, r2
 800a74e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a750:	f7fd fcc0 	bl	80080d4 <HAL_GetTick>
 800a754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a756:	e00a      	b.n	800a76e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a758:	f7fd fcbc 	bl	80080d4 <HAL_GetTick>
 800a75c:	4602      	mov	r2, r0
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	f241 3288 	movw	r2, #5000	; 0x1388
 800a766:	4293      	cmp	r3, r2
 800a768:	d901      	bls.n	800a76e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a76a:	2303      	movs	r3, #3
 800a76c:	e053      	b.n	800a816 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a76e:	4b2d      	ldr	r3, [pc, #180]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	f003 020c 	and.w	r2, r3, #12
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d1eb      	bne.n	800a758 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a780:	4b27      	ldr	r3, [pc, #156]	; (800a820 <HAL_RCC_ClockConfig+0x1c0>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 0307 	and.w	r3, r3, #7
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d210      	bcs.n	800a7b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a78e:	4b24      	ldr	r3, [pc, #144]	; (800a820 <HAL_RCC_ClockConfig+0x1c0>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f023 0207 	bic.w	r2, r3, #7
 800a796:	4922      	ldr	r1, [pc, #136]	; (800a820 <HAL_RCC_ClockConfig+0x1c0>)
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a79e:	4b20      	ldr	r3, [pc, #128]	; (800a820 <HAL_RCC_ClockConfig+0x1c0>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d001      	beq.n	800a7b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e032      	b.n	800a816 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 0304 	and.w	r3, r3, #4
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d008      	beq.n	800a7ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7bc:	4b19      	ldr	r3, [pc, #100]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	4916      	ldr	r1, [pc, #88]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 0308 	and.w	r3, r3, #8
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d009      	beq.n	800a7ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a7da:	4b12      	ldr	r3, [pc, #72]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	490e      	ldr	r1, [pc, #56]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a7ee:	f000 f821 	bl	800a834 <HAL_RCC_GetSysClockFreq>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	4b0b      	ldr	r3, [pc, #44]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	091b      	lsrs	r3, r3, #4
 800a7fa:	f003 030f 	and.w	r3, r3, #15
 800a7fe:	490a      	ldr	r1, [pc, #40]	; (800a828 <HAL_RCC_ClockConfig+0x1c8>)
 800a800:	5ccb      	ldrb	r3, [r1, r3]
 800a802:	fa22 f303 	lsr.w	r3, r2, r3
 800a806:	4a09      	ldr	r2, [pc, #36]	; (800a82c <HAL_RCC_ClockConfig+0x1cc>)
 800a808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a80a:	4b09      	ldr	r3, [pc, #36]	; (800a830 <HAL_RCC_ClockConfig+0x1d0>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fd fc1e 	bl	8008050 <HAL_InitTick>

  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	40022000 	.word	0x40022000
 800a824:	40021000 	.word	0x40021000
 800a828:	0800cafc 	.word	0x0800cafc
 800a82c:	200000a8 	.word	0x200000a8
 800a830:	200000ac 	.word	0x200000ac

0800a834 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	60fb      	str	r3, [r7, #12]
 800a83e:	2300      	movs	r3, #0
 800a840:	60bb      	str	r3, [r7, #8]
 800a842:	2300      	movs	r3, #0
 800a844:	617b      	str	r3, [r7, #20]
 800a846:	2300      	movs	r3, #0
 800a848:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a84a:	2300      	movs	r3, #0
 800a84c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a84e:	4b1e      	ldr	r3, [pc, #120]	; (800a8c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f003 030c 	and.w	r3, r3, #12
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	d002      	beq.n	800a864 <HAL_RCC_GetSysClockFreq+0x30>
 800a85e:	2b08      	cmp	r3, #8
 800a860:	d003      	beq.n	800a86a <HAL_RCC_GetSysClockFreq+0x36>
 800a862:	e027      	b.n	800a8b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a864:	4b19      	ldr	r3, [pc, #100]	; (800a8cc <HAL_RCC_GetSysClockFreq+0x98>)
 800a866:	613b      	str	r3, [r7, #16]
      break;
 800a868:	e027      	b.n	800a8ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	0c9b      	lsrs	r3, r3, #18
 800a86e:	f003 030f 	and.w	r3, r3, #15
 800a872:	4a17      	ldr	r2, [pc, #92]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a874:	5cd3      	ldrb	r3, [r2, r3]
 800a876:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d010      	beq.n	800a8a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a882:	4b11      	ldr	r3, [pc, #68]	; (800a8c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	0c5b      	lsrs	r3, r3, #17
 800a888:	f003 0301 	and.w	r3, r3, #1
 800a88c:	4a11      	ldr	r2, [pc, #68]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a88e:	5cd3      	ldrb	r3, [r2, r3]
 800a890:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a0d      	ldr	r2, [pc, #52]	; (800a8cc <HAL_RCC_GetSysClockFreq+0x98>)
 800a896:	fb03 f202 	mul.w	r2, r3, r2
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a0:	617b      	str	r3, [r7, #20]
 800a8a2:	e004      	b.n	800a8ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a0c      	ldr	r2, [pc, #48]	; (800a8d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a8a8:	fb02 f303 	mul.w	r3, r2, r3
 800a8ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	613b      	str	r3, [r7, #16]
      break;
 800a8b2:	e002      	b.n	800a8ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a8b4:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <HAL_RCC_GetSysClockFreq+0x98>)
 800a8b6:	613b      	str	r3, [r7, #16]
      break;
 800a8b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a8ba:	693b      	ldr	r3, [r7, #16]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	371c      	adds	r7, #28
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bc80      	pop	{r7}
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	40021000 	.word	0x40021000
 800a8cc:	007a1200 	.word	0x007a1200
 800a8d0:	0800cb14 	.word	0x0800cb14
 800a8d4:	0800cb24 	.word	0x0800cb24
 800a8d8:	003d0900 	.word	0x003d0900

0800a8dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a8e0:	4b02      	ldr	r3, [pc, #8]	; (800a8ec <HAL_RCC_GetHCLKFreq+0x10>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bc80      	pop	{r7}
 800a8ea:	4770      	bx	lr
 800a8ec:	200000a8 	.word	0x200000a8

0800a8f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a8f4:	f7ff fff2 	bl	800a8dc <HAL_RCC_GetHCLKFreq>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	4b05      	ldr	r3, [pc, #20]	; (800a910 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	0a1b      	lsrs	r3, r3, #8
 800a900:	f003 0307 	and.w	r3, r3, #7
 800a904:	4903      	ldr	r1, [pc, #12]	; (800a914 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a906:	5ccb      	ldrb	r3, [r1, r3]
 800a908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	40021000 	.word	0x40021000
 800a914:	0800cb0c 	.word	0x0800cb0c

0800a918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a91c:	f7ff ffde 	bl	800a8dc <HAL_RCC_GetHCLKFreq>
 800a920:	4602      	mov	r2, r0
 800a922:	4b05      	ldr	r3, [pc, #20]	; (800a938 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	0adb      	lsrs	r3, r3, #11
 800a928:	f003 0307 	and.w	r3, r3, #7
 800a92c:	4903      	ldr	r1, [pc, #12]	; (800a93c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a92e:	5ccb      	ldrb	r3, [r1, r3]
 800a930:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a934:	4618      	mov	r0, r3
 800a936:	bd80      	pop	{r7, pc}
 800a938:	40021000 	.word	0x40021000
 800a93c:	0800cb0c 	.word	0x0800cb0c

0800a940 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a948:	4b0a      	ldr	r3, [pc, #40]	; (800a974 <RCC_Delay+0x34>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a0a      	ldr	r2, [pc, #40]	; (800a978 <RCC_Delay+0x38>)
 800a94e:	fba2 2303 	umull	r2, r3, r2, r3
 800a952:	0a5b      	lsrs	r3, r3, #9
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	fb02 f303 	mul.w	r3, r2, r3
 800a95a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a95c:	bf00      	nop
  }
  while (Delay --);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	1e5a      	subs	r2, r3, #1
 800a962:	60fa      	str	r2, [r7, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1f9      	bne.n	800a95c <RCC_Delay+0x1c>
}
 800a968:	bf00      	nop
 800a96a:	bf00      	nop
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	bc80      	pop	{r7}
 800a972:	4770      	bx	lr
 800a974:	200000a8 	.word	0x200000a8
 800a978:	10624dd3 	.word	0x10624dd3

0800a97c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d101      	bne.n	800a98e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e041      	b.n	800aa12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d106      	bne.n	800a9a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7fd fa5c 	bl	8007e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	f000 fa82 	bl	800aec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
	...

0800aa1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d001      	beq.n	800aa34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e044      	b.n	800aabe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2202      	movs	r2, #2
 800aa38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68da      	ldr	r2, [r3, #12]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f042 0201 	orr.w	r2, r2, #1
 800aa4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a1d      	ldr	r2, [pc, #116]	; (800aac8 <HAL_TIM_Base_Start_IT+0xac>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d018      	beq.n	800aa88 <HAL_TIM_Base_Start_IT+0x6c>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a1c      	ldr	r2, [pc, #112]	; (800aacc <HAL_TIM_Base_Start_IT+0xb0>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d013      	beq.n	800aa88 <HAL_TIM_Base_Start_IT+0x6c>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa68:	d00e      	beq.n	800aa88 <HAL_TIM_Base_Start_IT+0x6c>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a18      	ldr	r2, [pc, #96]	; (800aad0 <HAL_TIM_Base_Start_IT+0xb4>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d009      	beq.n	800aa88 <HAL_TIM_Base_Start_IT+0x6c>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a16      	ldr	r2, [pc, #88]	; (800aad4 <HAL_TIM_Base_Start_IT+0xb8>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d004      	beq.n	800aa88 <HAL_TIM_Base_Start_IT+0x6c>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a15      	ldr	r2, [pc, #84]	; (800aad8 <HAL_TIM_Base_Start_IT+0xbc>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d111      	bne.n	800aaac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	f003 0307 	and.w	r3, r3, #7
 800aa92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b06      	cmp	r3, #6
 800aa98:	d010      	beq.n	800aabc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f042 0201 	orr.w	r2, r2, #1
 800aaa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaaa:	e007      	b.n	800aabc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f042 0201 	orr.w	r2, r2, #1
 800aaba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bc80      	pop	{r7}
 800aac6:	4770      	bx	lr
 800aac8:	40012c00 	.word	0x40012c00
 800aacc:	40013400 	.word	0x40013400
 800aad0:	40000400 	.word	0x40000400
 800aad4:	40000800 	.word	0x40000800
 800aad8:	40000c00 	.word	0x40000c00

0800aadc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d122      	bne.n	800ab38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	f003 0302 	and.w	r3, r3, #2
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	d11b      	bne.n	800ab38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f06f 0202 	mvn.w	r2, #2
 800ab08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	f003 0303 	and.w	r3, r3, #3
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 f9b4 	bl	800ae8c <HAL_TIM_IC_CaptureCallback>
 800ab24:	e005      	b.n	800ab32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f9a7 	bl	800ae7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f9b6 	bl	800ae9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	f003 0304 	and.w	r3, r3, #4
 800ab42:	2b04      	cmp	r3, #4
 800ab44:	d122      	bne.n	800ab8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	f003 0304 	and.w	r3, r3, #4
 800ab50:	2b04      	cmp	r3, #4
 800ab52:	d11b      	bne.n	800ab8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f06f 0204 	mvn.w	r2, #4
 800ab5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2202      	movs	r2, #2
 800ab62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d003      	beq.n	800ab7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 f98a 	bl	800ae8c <HAL_TIM_IC_CaptureCallback>
 800ab78:	e005      	b.n	800ab86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f97d 	bl	800ae7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f98c 	bl	800ae9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	f003 0308 	and.w	r3, r3, #8
 800ab96:	2b08      	cmp	r3, #8
 800ab98:	d122      	bne.n	800abe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	f003 0308 	and.w	r3, r3, #8
 800aba4:	2b08      	cmp	r3, #8
 800aba6:	d11b      	bne.n	800abe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f06f 0208 	mvn.w	r2, #8
 800abb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2204      	movs	r2, #4
 800abb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	f003 0303 	and.w	r3, r3, #3
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d003      	beq.n	800abce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 f960 	bl	800ae8c <HAL_TIM_IC_CaptureCallback>
 800abcc:	e005      	b.n	800abda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 f953 	bl	800ae7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f962 	bl	800ae9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	f003 0310 	and.w	r3, r3, #16
 800abea:	2b10      	cmp	r3, #16
 800abec:	d122      	bne.n	800ac34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	f003 0310 	and.w	r3, r3, #16
 800abf8:	2b10      	cmp	r3, #16
 800abfa:	d11b      	bne.n	800ac34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f06f 0210 	mvn.w	r2, #16
 800ac04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2208      	movs	r2, #8
 800ac0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	69db      	ldr	r3, [r3, #28]
 800ac12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d003      	beq.n	800ac22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 f936 	bl	800ae8c <HAL_TIM_IC_CaptureCallback>
 800ac20:	e005      	b.n	800ac2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f929 	bl	800ae7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 f938 	bl	800ae9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d10e      	bne.n	800ac60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	f003 0301 	and.w	r3, r3, #1
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d107      	bne.n	800ac60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f06f 0201 	mvn.w	r2, #1
 800ac58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7fc fd8c 	bl	8007778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac6a:	2b80      	cmp	r3, #128	; 0x80
 800ac6c:	d10e      	bne.n	800ac8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac78:	2b80      	cmp	r3, #128	; 0x80
 800ac7a:	d107      	bne.n	800ac8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 faa1 	bl	800b1ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac96:	2b40      	cmp	r3, #64	; 0x40
 800ac98:	d10e      	bne.n	800acb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca4:	2b40      	cmp	r3, #64	; 0x40
 800aca6:	d107      	bne.n	800acb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800acb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 f8fc 	bl	800aeb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	f003 0320 	and.w	r3, r3, #32
 800acc2:	2b20      	cmp	r3, #32
 800acc4:	d10e      	bne.n	800ace4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	f003 0320 	and.w	r3, r3, #32
 800acd0:	2b20      	cmp	r3, #32
 800acd2:	d107      	bne.n	800ace4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f06f 0220 	mvn.w	r2, #32
 800acdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fa6c 	bl	800b1bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ace4:	bf00      	nop
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d101      	bne.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c>
 800ad04:	2302      	movs	r3, #2
 800ad06:	e0b4      	b.n	800ae72 <HAL_TIM_ConfigClockSource+0x186>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2202      	movs	r2, #2
 800ad14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ad26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68ba      	ldr	r2, [r7, #8]
 800ad36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad40:	d03e      	beq.n	800adc0 <HAL_TIM_ConfigClockSource+0xd4>
 800ad42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad46:	f200 8087 	bhi.w	800ae58 <HAL_TIM_ConfigClockSource+0x16c>
 800ad4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad4e:	f000 8086 	beq.w	800ae5e <HAL_TIM_ConfigClockSource+0x172>
 800ad52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad56:	d87f      	bhi.n	800ae58 <HAL_TIM_ConfigClockSource+0x16c>
 800ad58:	2b70      	cmp	r3, #112	; 0x70
 800ad5a:	d01a      	beq.n	800ad92 <HAL_TIM_ConfigClockSource+0xa6>
 800ad5c:	2b70      	cmp	r3, #112	; 0x70
 800ad5e:	d87b      	bhi.n	800ae58 <HAL_TIM_ConfigClockSource+0x16c>
 800ad60:	2b60      	cmp	r3, #96	; 0x60
 800ad62:	d050      	beq.n	800ae06 <HAL_TIM_ConfigClockSource+0x11a>
 800ad64:	2b60      	cmp	r3, #96	; 0x60
 800ad66:	d877      	bhi.n	800ae58 <HAL_TIM_ConfigClockSource+0x16c>
 800ad68:	2b50      	cmp	r3, #80	; 0x50
 800ad6a:	d03c      	beq.n	800ade6 <HAL_TIM_ConfigClockSource+0xfa>
 800ad6c:	2b50      	cmp	r3, #80	; 0x50
 800ad6e:	d873      	bhi.n	800ae58 <HAL_TIM_ConfigClockSource+0x16c>
 800ad70:	2b40      	cmp	r3, #64	; 0x40
 800ad72:	d058      	beq.n	800ae26 <HAL_TIM_ConfigClockSource+0x13a>
 800ad74:	2b40      	cmp	r3, #64	; 0x40
 800ad76:	d86f      	bhi.n	800ae58 <HAL_TIM_ConfigClockSource+0x16c>
 800ad78:	2b30      	cmp	r3, #48	; 0x30
 800ad7a:	d064      	beq.n	800ae46 <HAL_TIM_ConfigClockSource+0x15a>
 800ad7c:	2b30      	cmp	r3, #48	; 0x30
 800ad7e:	d86b      	bhi.n	800ae58 <HAL_TIM_ConfigClockSource+0x16c>
 800ad80:	2b20      	cmp	r3, #32
 800ad82:	d060      	beq.n	800ae46 <HAL_TIM_ConfigClockSource+0x15a>
 800ad84:	2b20      	cmp	r3, #32
 800ad86:	d867      	bhi.n	800ae58 <HAL_TIM_ConfigClockSource+0x16c>
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d05c      	beq.n	800ae46 <HAL_TIM_ConfigClockSource+0x15a>
 800ad8c:	2b10      	cmp	r3, #16
 800ad8e:	d05a      	beq.n	800ae46 <HAL_TIM_ConfigClockSource+0x15a>
 800ad90:	e062      	b.n	800ae58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ada2:	f000 f980 	bl	800b0a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800adb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68ba      	ldr	r2, [r7, #8]
 800adbc:	609a      	str	r2, [r3, #8]
      break;
 800adbe:	e04f      	b.n	800ae60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800add0:	f000 f969 	bl	800b0a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	689a      	ldr	r2, [r3, #8]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ade2:	609a      	str	r2, [r3, #8]
      break;
 800ade4:	e03c      	b.n	800ae60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800adf2:	461a      	mov	r2, r3
 800adf4:	f000 f8e0 	bl	800afb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2150      	movs	r1, #80	; 0x50
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 f937 	bl	800b072 <TIM_ITRx_SetConfig>
      break;
 800ae04:	e02c      	b.n	800ae60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae12:	461a      	mov	r2, r3
 800ae14:	f000 f8fe 	bl	800b014 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2160      	movs	r1, #96	; 0x60
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 f927 	bl	800b072 <TIM_ITRx_SetConfig>
      break;
 800ae24:	e01c      	b.n	800ae60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae32:	461a      	mov	r2, r3
 800ae34:	f000 f8c0 	bl	800afb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2140      	movs	r1, #64	; 0x40
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 f917 	bl	800b072 <TIM_ITRx_SetConfig>
      break;
 800ae44:	e00c      	b.n	800ae60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	4610      	mov	r0, r2
 800ae52:	f000 f90e 	bl	800b072 <TIM_ITRx_SetConfig>
      break;
 800ae56:	e003      	b.n	800ae60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae5c:	e000      	b.n	800ae60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ae5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b083      	sub	sp, #12
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae82:	bf00      	nop
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bc80      	pop	{r7}
 800ae8a:	4770      	bx	lr

0800ae8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bc80      	pop	{r7}
 800ae9c:	4770      	bx	lr

0800ae9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae9e:	b480      	push	{r7}
 800aea0:	b083      	sub	sp, #12
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aea6:	bf00      	nop
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bc80      	pop	{r7}
 800aeae:	4770      	bx	lr

0800aeb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bc80      	pop	{r7}
 800aec0:	4770      	bx	lr
	...

0800aec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a33      	ldr	r2, [pc, #204]	; (800afa4 <TIM_Base_SetConfig+0xe0>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d013      	beq.n	800af04 <TIM_Base_SetConfig+0x40>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a32      	ldr	r2, [pc, #200]	; (800afa8 <TIM_Base_SetConfig+0xe4>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d00f      	beq.n	800af04 <TIM_Base_SetConfig+0x40>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeea:	d00b      	beq.n	800af04 <TIM_Base_SetConfig+0x40>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a2f      	ldr	r2, [pc, #188]	; (800afac <TIM_Base_SetConfig+0xe8>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d007      	beq.n	800af04 <TIM_Base_SetConfig+0x40>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a2e      	ldr	r2, [pc, #184]	; (800afb0 <TIM_Base_SetConfig+0xec>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d003      	beq.n	800af04 <TIM_Base_SetConfig+0x40>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a2d      	ldr	r2, [pc, #180]	; (800afb4 <TIM_Base_SetConfig+0xf0>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d108      	bne.n	800af16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	4313      	orrs	r3, r2
 800af14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a22      	ldr	r2, [pc, #136]	; (800afa4 <TIM_Base_SetConfig+0xe0>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d013      	beq.n	800af46 <TIM_Base_SetConfig+0x82>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a21      	ldr	r2, [pc, #132]	; (800afa8 <TIM_Base_SetConfig+0xe4>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d00f      	beq.n	800af46 <TIM_Base_SetConfig+0x82>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af2c:	d00b      	beq.n	800af46 <TIM_Base_SetConfig+0x82>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a1e      	ldr	r2, [pc, #120]	; (800afac <TIM_Base_SetConfig+0xe8>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d007      	beq.n	800af46 <TIM_Base_SetConfig+0x82>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a1d      	ldr	r2, [pc, #116]	; (800afb0 <TIM_Base_SetConfig+0xec>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d003      	beq.n	800af46 <TIM_Base_SetConfig+0x82>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a1c      	ldr	r2, [pc, #112]	; (800afb4 <TIM_Base_SetConfig+0xf0>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d108      	bne.n	800af58 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	4313      	orrs	r3, r2
 800af56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	695b      	ldr	r3, [r3, #20]
 800af62:	4313      	orrs	r3, r2
 800af64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	689a      	ldr	r2, [r3, #8]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a09      	ldr	r2, [pc, #36]	; (800afa4 <TIM_Base_SetConfig+0xe0>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d003      	beq.n	800af8c <TIM_Base_SetConfig+0xc8>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a08      	ldr	r2, [pc, #32]	; (800afa8 <TIM_Base_SetConfig+0xe4>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d103      	bne.n	800af94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	691a      	ldr	r2, [r3, #16]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	615a      	str	r2, [r3, #20]
}
 800af9a:	bf00      	nop
 800af9c:	3714      	adds	r7, #20
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bc80      	pop	{r7}
 800afa2:	4770      	bx	lr
 800afa4:	40012c00 	.word	0x40012c00
 800afa8:	40013400 	.word	0x40013400
 800afac:	40000400 	.word	0x40000400
 800afb0:	40000800 	.word	0x40000800
 800afb4:	40000c00 	.word	0x40000c00

0800afb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afb8:	b480      	push	{r7}
 800afba:	b087      	sub	sp, #28
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6a1b      	ldr	r3, [r3, #32]
 800afc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6a1b      	ldr	r3, [r3, #32]
 800afce:	f023 0201 	bic.w	r2, r3, #1
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	011b      	lsls	r3, r3, #4
 800afe8:	693a      	ldr	r2, [r7, #16]
 800afea:	4313      	orrs	r3, r2
 800afec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	f023 030a 	bic.w	r3, r3, #10
 800aff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	4313      	orrs	r3, r2
 800affc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	693a      	ldr	r2, [r7, #16]
 800b002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	621a      	str	r2, [r3, #32]
}
 800b00a:	bf00      	nop
 800b00c:	371c      	adds	r7, #28
 800b00e:	46bd      	mov	sp, r7
 800b010:	bc80      	pop	{r7}
 800b012:	4770      	bx	lr

0800b014 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b014:	b480      	push	{r7}
 800b016:	b087      	sub	sp, #28
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6a1b      	ldr	r3, [r3, #32]
 800b024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6a1b      	ldr	r3, [r3, #32]
 800b02a:	f023 0210 	bic.w	r2, r3, #16
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	699b      	ldr	r3, [r3, #24]
 800b036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b03e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	031b      	lsls	r3, r3, #12
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	4313      	orrs	r3, r2
 800b048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b050:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	011b      	lsls	r3, r3, #4
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	4313      	orrs	r3, r2
 800b05a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	697a      	ldr	r2, [r7, #20]
 800b066:	621a      	str	r2, [r3, #32]
}
 800b068:	bf00      	nop
 800b06a:	371c      	adds	r7, #28
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bc80      	pop	{r7}
 800b070:	4770      	bx	lr

0800b072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b072:	b480      	push	{r7}
 800b074:	b085      	sub	sp, #20
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	4313      	orrs	r3, r2
 800b090:	f043 0307 	orr.w	r3, r3, #7
 800b094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	609a      	str	r2, [r3, #8]
}
 800b09c:	bf00      	nop
 800b09e:	3714      	adds	r7, #20
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bc80      	pop	{r7}
 800b0a4:	4770      	bx	lr

0800b0a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	b087      	sub	sp, #28
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	60f8      	str	r0, [r7, #12]
 800b0ae:	60b9      	str	r1, [r7, #8]
 800b0b0:	607a      	str	r2, [r7, #4]
 800b0b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	021a      	lsls	r2, r3, #8
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	431a      	orrs	r2, r3
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	697a      	ldr	r2, [r7, #20]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	609a      	str	r2, [r3, #8]
}
 800b0da:	bf00      	nop
 800b0dc:	371c      	adds	r7, #28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bc80      	pop	{r7}
 800b0e2:	4770      	bx	lr

0800b0e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d101      	bne.n	800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e050      	b.n	800b19e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2202      	movs	r2, #2
 800b108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a1b      	ldr	r2, [pc, #108]	; (800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d018      	beq.n	800b172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a19      	ldr	r2, [pc, #100]	; (800b1ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d013      	beq.n	800b172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b152:	d00e      	beq.n	800b172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a15      	ldr	r2, [pc, #84]	; (800b1b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d009      	beq.n	800b172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a14      	ldr	r2, [pc, #80]	; (800b1b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d004      	beq.n	800b172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a12      	ldr	r2, [pc, #72]	; (800b1b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d10c      	bne.n	800b18c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	68ba      	ldr	r2, [r7, #8]
 800b180:	4313      	orrs	r3, r2
 800b182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3714      	adds	r7, #20
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bc80      	pop	{r7}
 800b1a6:	4770      	bx	lr
 800b1a8:	40012c00 	.word	0x40012c00
 800b1ac:	40013400 	.word	0x40013400
 800b1b0:	40000400 	.word	0x40000400
 800b1b4:	40000800 	.word	0x40000800
 800b1b8:	40000c00 	.word	0x40000c00

0800b1bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bc80      	pop	{r7}
 800b1cc:	4770      	bx	lr

0800b1ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b083      	sub	sp, #12
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1d6:	bf00      	nop
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bc80      	pop	{r7}
 800b1de:	4770      	bx	lr

0800b1e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e042      	b.n	800b278 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d106      	bne.n	800b20c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7fc fe50 	bl	8007eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2224      	movs	r2, #36	; 0x24
 800b210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	68da      	ldr	r2, [r3, #12]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 fc7f 	bl	800bb28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	691a      	ldr	r2, [r3, #16]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	695a      	ldr	r2, [r3, #20]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68da      	ldr	r2, [r3, #12]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2220      	movs	r2, #32
 800b264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2220      	movs	r2, #32
 800b26c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b0ba      	sub	sp, #232	; 0xe8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b2b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2b6:	f003 030f 	and.w	r3, r3, #15
 800b2ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b2be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10f      	bne.n	800b2e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ca:	f003 0320 	and.w	r3, r3, #32
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d009      	beq.n	800b2e6 <HAL_UART_IRQHandler+0x66>
 800b2d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2d6:	f003 0320 	and.w	r3, r3, #32
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d003      	beq.n	800b2e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 fb63 	bl	800b9aa <UART_Receive_IT>
      return;
 800b2e4:	e25b      	b.n	800b79e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b2e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f000 80de 	beq.w	800b4ac <HAL_UART_IRQHandler+0x22c>
 800b2f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2f4:	f003 0301 	and.w	r3, r3, #1
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d106      	bne.n	800b30a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b300:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b304:	2b00      	cmp	r3, #0
 800b306:	f000 80d1 	beq.w	800b4ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b30a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b30e:	f003 0301 	and.w	r3, r3, #1
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00b      	beq.n	800b32e <HAL_UART_IRQHandler+0xae>
 800b316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b31a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d005      	beq.n	800b32e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b326:	f043 0201 	orr.w	r2, r3, #1
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b32e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b332:	f003 0304 	and.w	r3, r3, #4
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00b      	beq.n	800b352 <HAL_UART_IRQHandler+0xd2>
 800b33a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b33e:	f003 0301 	and.w	r3, r3, #1
 800b342:	2b00      	cmp	r3, #0
 800b344:	d005      	beq.n	800b352 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b34a:	f043 0202 	orr.w	r2, r3, #2
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b356:	f003 0302 	and.w	r3, r3, #2
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00b      	beq.n	800b376 <HAL_UART_IRQHandler+0xf6>
 800b35e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b362:	f003 0301 	and.w	r3, r3, #1
 800b366:	2b00      	cmp	r3, #0
 800b368:	d005      	beq.n	800b376 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b36e:	f043 0204 	orr.w	r2, r3, #4
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b37a:	f003 0308 	and.w	r3, r3, #8
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d011      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x126>
 800b382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b386:	f003 0320 	and.w	r3, r3, #32
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d105      	bne.n	800b39a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b38e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b392:	f003 0301 	and.w	r3, r3, #1
 800b396:	2b00      	cmp	r3, #0
 800b398:	d005      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b39e:	f043 0208 	orr.w	r2, r3, #8
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f000 81f2 	beq.w	800b794 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b3b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3b4:	f003 0320 	and.w	r3, r3, #32
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d008      	beq.n	800b3ce <HAL_UART_IRQHandler+0x14e>
 800b3bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3c0:	f003 0320 	and.w	r3, r3, #32
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d002      	beq.n	800b3ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 faee 	bl	800b9aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	695b      	ldr	r3, [r3, #20]
 800b3d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	bf14      	ite	ne
 800b3dc:	2301      	movne	r3, #1
 800b3de:	2300      	moveq	r3, #0
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ea:	f003 0308 	and.w	r3, r3, #8
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d103      	bne.n	800b3fa <HAL_UART_IRQHandler+0x17a>
 800b3f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d04f      	beq.n	800b49a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f9f8 	bl	800b7f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	695b      	ldr	r3, [r3, #20]
 800b406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d041      	beq.n	800b492 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	3314      	adds	r3, #20
 800b414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b41c:	e853 3f00 	ldrex	r3, [r3]
 800b420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b42c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	3314      	adds	r3, #20
 800b436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b43a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b43e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b44a:	e841 2300 	strex	r3, r2, [r1]
 800b44e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1d9      	bne.n	800b40e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d013      	beq.n	800b48a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b466:	4a7e      	ldr	r2, [pc, #504]	; (800b660 <HAL_UART_IRQHandler+0x3e0>)
 800b468:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fd f8a2 	bl	80085b8 <HAL_DMA_Abort_IT>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d016      	beq.n	800b4a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b484:	4610      	mov	r0, r2
 800b486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b488:	e00e      	b.n	800b4a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f99c 	bl	800b7c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b490:	e00a      	b.n	800b4a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 f998 	bl	800b7c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b498:	e006      	b.n	800b4a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 f994 	bl	800b7c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b4a6:	e175      	b.n	800b794 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4a8:	bf00      	nop
    return;
 800b4aa:	e173      	b.n	800b794 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	f040 814f 	bne.w	800b754 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b4b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4ba:	f003 0310 	and.w	r3, r3, #16
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f000 8148 	beq.w	800b754 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4c8:	f003 0310 	and.w	r3, r3, #16
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f000 8141 	beq.w	800b754 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60bb      	str	r3, [r7, #8]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	60bb      	str	r3, [r7, #8]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	60bb      	str	r3, [r7, #8]
 800b4e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	695b      	ldr	r3, [r3, #20]
 800b4ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f000 80b6 	beq.w	800b664 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b504:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f000 8145 	beq.w	800b798 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b516:	429a      	cmp	r2, r3
 800b518:	f080 813e 	bcs.w	800b798 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b522:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	2b20      	cmp	r3, #32
 800b52c:	f000 8088 	beq.w	800b640 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	330c      	adds	r3, #12
 800b536:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b53e:	e853 3f00 	ldrex	r3, [r3]
 800b542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b546:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b54a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b54e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	330c      	adds	r3, #12
 800b558:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b55c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b560:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b564:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b568:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b56c:	e841 2300 	strex	r3, r2, [r1]
 800b570:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b574:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1d9      	bne.n	800b530 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	3314      	adds	r3, #20
 800b582:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b586:	e853 3f00 	ldrex	r3, [r3]
 800b58a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b58c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b58e:	f023 0301 	bic.w	r3, r3, #1
 800b592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	3314      	adds	r3, #20
 800b59c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b5a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b5a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b5a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b5ac:	e841 2300 	strex	r3, r2, [r1]
 800b5b0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b5b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1e1      	bne.n	800b57c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3314      	adds	r3, #20
 800b5be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5c2:	e853 3f00 	ldrex	r3, [r3]
 800b5c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b5c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	3314      	adds	r3, #20
 800b5d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b5dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b5de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b5e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b5e4:	e841 2300 	strex	r3, r2, [r1]
 800b5e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b5ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1e3      	bne.n	800b5b8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2220      	movs	r2, #32
 800b5f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	330c      	adds	r3, #12
 800b604:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b608:	e853 3f00 	ldrex	r3, [r3]
 800b60c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b60e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b610:	f023 0310 	bic.w	r3, r3, #16
 800b614:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	330c      	adds	r3, #12
 800b61e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b622:	65ba      	str	r2, [r7, #88]	; 0x58
 800b624:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b626:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b628:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b62a:	e841 2300 	strex	r3, r2, [r1]
 800b62e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1e3      	bne.n	800b5fe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7fc ff81 	bl	8008542 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2202      	movs	r2, #2
 800b644:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b64e:	b29b      	uxth	r3, r3
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	b29b      	uxth	r3, r3
 800b654:	4619      	mov	r1, r3
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f8bf 	bl	800b7da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b65c:	e09c      	b.n	800b798 <HAL_UART_IRQHandler+0x518>
 800b65e:	bf00      	nop
 800b660:	0800b8b5 	.word	0x0800b8b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b678:	b29b      	uxth	r3, r3
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f000 808e 	beq.w	800b79c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b684:	2b00      	cmp	r3, #0
 800b686:	f000 8089 	beq.w	800b79c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	330c      	adds	r3, #12
 800b690:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b694:	e853 3f00 	ldrex	r3, [r3]
 800b698:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b69c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b6a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	330c      	adds	r3, #12
 800b6aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b6ae:	647a      	str	r2, [r7, #68]	; 0x44
 800b6b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b6b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6b6:	e841 2300 	strex	r3, r2, [r1]
 800b6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1e3      	bne.n	800b68a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3314      	adds	r3, #20
 800b6c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6cc:	e853 3f00 	ldrex	r3, [r3]
 800b6d0:	623b      	str	r3, [r7, #32]
   return(result);
 800b6d2:	6a3b      	ldr	r3, [r7, #32]
 800b6d4:	f023 0301 	bic.w	r3, r3, #1
 800b6d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	3314      	adds	r3, #20
 800b6e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b6e6:	633a      	str	r2, [r7, #48]	; 0x30
 800b6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ee:	e841 2300 	strex	r3, r2, [r1]
 800b6f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1e3      	bne.n	800b6c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2220      	movs	r2, #32
 800b6fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	330c      	adds	r3, #12
 800b70e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	e853 3f00 	ldrex	r3, [r3]
 800b716:	60fb      	str	r3, [r7, #12]
   return(result);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f023 0310 	bic.w	r3, r3, #16
 800b71e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	330c      	adds	r3, #12
 800b728:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b72c:	61fa      	str	r2, [r7, #28]
 800b72e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b730:	69b9      	ldr	r1, [r7, #24]
 800b732:	69fa      	ldr	r2, [r7, #28]
 800b734:	e841 2300 	strex	r3, r2, [r1]
 800b738:	617b      	str	r3, [r7, #20]
   return(result);
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1e3      	bne.n	800b708 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2202      	movs	r2, #2
 800b744:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b746:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f844 	bl	800b7da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b752:	e023      	b.n	800b79c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d009      	beq.n	800b774 <HAL_UART_IRQHandler+0x4f4>
 800b760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d003      	beq.n	800b774 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f8b5 	bl	800b8dc <UART_Transmit_IT>
    return;
 800b772:	e014      	b.n	800b79e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00e      	beq.n	800b79e <HAL_UART_IRQHandler+0x51e>
 800b780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d008      	beq.n	800b79e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 f8f4 	bl	800b97a <UART_EndTransmit_IT>
    return;
 800b792:	e004      	b.n	800b79e <HAL_UART_IRQHandler+0x51e>
    return;
 800b794:	bf00      	nop
 800b796:	e002      	b.n	800b79e <HAL_UART_IRQHandler+0x51e>
      return;
 800b798:	bf00      	nop
 800b79a:	e000      	b.n	800b79e <HAL_UART_IRQHandler+0x51e>
      return;
 800b79c:	bf00      	nop
  }
}
 800b79e:	37e8      	adds	r7, #232	; 0xe8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bc80      	pop	{r7}
 800b7b4:	4770      	bx	lr

0800b7b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b083      	sub	sp, #12
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b7be:	bf00      	nop
 800b7c0:	370c      	adds	r7, #12
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bc80      	pop	{r7}
 800b7c6:	4770      	bx	lr

0800b7c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bc80      	pop	{r7}
 800b7d8:	4770      	bx	lr

0800b7da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b083      	sub	sp, #12
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7e6:	bf00      	nop
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bc80      	pop	{r7}
 800b7ee:	4770      	bx	lr

0800b7f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b095      	sub	sp, #84	; 0x54
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	330c      	adds	r3, #12
 800b7fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b802:	e853 3f00 	ldrex	r3, [r3]
 800b806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b80e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	330c      	adds	r3, #12
 800b816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b818:	643a      	str	r2, [r7, #64]	; 0x40
 800b81a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b81e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b820:	e841 2300 	strex	r3, r2, [r1]
 800b824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1e5      	bne.n	800b7f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3314      	adds	r3, #20
 800b832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b834:	6a3b      	ldr	r3, [r7, #32]
 800b836:	e853 3f00 	ldrex	r3, [r3]
 800b83a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	f023 0301 	bic.w	r3, r3, #1
 800b842:	64bb      	str	r3, [r7, #72]	; 0x48
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3314      	adds	r3, #20
 800b84a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b84c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b84e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b854:	e841 2300 	strex	r3, r2, [r1]
 800b858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e5      	bne.n	800b82c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b864:	2b01      	cmp	r3, #1
 800b866:	d119      	bne.n	800b89c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	330c      	adds	r3, #12
 800b86e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	e853 3f00 	ldrex	r3, [r3]
 800b876:	60bb      	str	r3, [r7, #8]
   return(result);
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	f023 0310 	bic.w	r3, r3, #16
 800b87e:	647b      	str	r3, [r7, #68]	; 0x44
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	330c      	adds	r3, #12
 800b886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b888:	61ba      	str	r2, [r7, #24]
 800b88a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88c:	6979      	ldr	r1, [r7, #20]
 800b88e:	69ba      	ldr	r2, [r7, #24]
 800b890:	e841 2300 	strex	r3, r2, [r1]
 800b894:	613b      	str	r3, [r7, #16]
   return(result);
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1e5      	bne.n	800b868 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2220      	movs	r2, #32
 800b8a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b8aa:	bf00      	nop
 800b8ac:	3754      	adds	r7, #84	; 0x54
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bc80      	pop	{r7}
 800b8b2:	4770      	bx	lr

0800b8b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f7ff ff7a 	bl	800b7c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8d4:	bf00      	nop
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b21      	cmp	r3, #33	; 0x21
 800b8ee:	d13e      	bne.n	800b96e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8f8:	d114      	bne.n	800b924 <UART_Transmit_IT+0x48>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d110      	bne.n	800b924 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	881b      	ldrh	r3, [r3, #0]
 800b90c:	461a      	mov	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b916:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a1b      	ldr	r3, [r3, #32]
 800b91c:	1c9a      	adds	r2, r3, #2
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	621a      	str	r2, [r3, #32]
 800b922:	e008      	b.n	800b936 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6a1b      	ldr	r3, [r3, #32]
 800b928:	1c59      	adds	r1, r3, #1
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	6211      	str	r1, [r2, #32]
 800b92e:	781a      	ldrb	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	3b01      	subs	r3, #1
 800b93e:	b29b      	uxth	r3, r3
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	4619      	mov	r1, r3
 800b944:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b946:	2b00      	cmp	r3, #0
 800b948:	d10f      	bne.n	800b96a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68da      	ldr	r2, [r3, #12]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b958:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68da      	ldr	r2, [r3, #12]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b968:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b96a:	2300      	movs	r3, #0
 800b96c:	e000      	b.n	800b970 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b96e:	2302      	movs	r3, #2
  }
}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	bc80      	pop	{r7}
 800b978:	4770      	bx	lr

0800b97a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b082      	sub	sp, #8
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68da      	ldr	r2, [r3, #12]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b990:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2220      	movs	r2, #32
 800b996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7ff ff02 	bl	800b7a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b08c      	sub	sp, #48	; 0x30
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b22      	cmp	r3, #34	; 0x22
 800b9bc:	f040 80ae 	bne.w	800bb1c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9c8:	d117      	bne.n	800b9fa <UART_Receive_IT+0x50>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d113      	bne.n	800b9fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f2:	1c9a      	adds	r2, r3, #2
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	629a      	str	r2, [r3, #40]	; 0x28
 800b9f8:	e026      	b.n	800ba48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ba00:	2300      	movs	r3, #0
 800ba02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba0c:	d007      	beq.n	800ba1e <UART_Receive_IT+0x74>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10a      	bne.n	800ba2c <UART_Receive_IT+0x82>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d106      	bne.n	800ba2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	b2da      	uxtb	r2, r3
 800ba26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba28:	701a      	strb	r2, [r3, #0]
 800ba2a:	e008      	b.n	800ba3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	4619      	mov	r1, r3
 800ba56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d15d      	bne.n	800bb18 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68da      	ldr	r2, [r3, #12]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f022 0220 	bic.w	r2, r2, #32
 800ba6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68da      	ldr	r2, [r3, #12]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	695a      	ldr	r2, [r3, #20]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f022 0201 	bic.w	r2, r2, #1
 800ba8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2220      	movs	r2, #32
 800ba90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d135      	bne.n	800bb0e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	330c      	adds	r3, #12
 800baae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	e853 3f00 	ldrex	r3, [r3]
 800bab6:	613b      	str	r3, [r7, #16]
   return(result);
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	f023 0310 	bic.w	r3, r3, #16
 800babe:	627b      	str	r3, [r7, #36]	; 0x24
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	330c      	adds	r3, #12
 800bac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bac8:	623a      	str	r2, [r7, #32]
 800baca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bacc:	69f9      	ldr	r1, [r7, #28]
 800bace:	6a3a      	ldr	r2, [r7, #32]
 800bad0:	e841 2300 	strex	r3, r2, [r1]
 800bad4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1e5      	bne.n	800baa8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f003 0310 	and.w	r3, r3, #16
 800bae6:	2b10      	cmp	r3, #16
 800bae8:	d10a      	bne.n	800bb00 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800baea:	2300      	movs	r3, #0
 800baec:	60fb      	str	r3, [r7, #12]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	60fb      	str	r3, [r7, #12]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	60fb      	str	r3, [r7, #12]
 800bafe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bb04:	4619      	mov	r1, r3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7ff fe67 	bl	800b7da <HAL_UARTEx_RxEventCallback>
 800bb0c:	e002      	b.n	800bb14 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7ff fe51 	bl	800b7b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	e002      	b.n	800bb1e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	e000      	b.n	800bb1e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bb1c:	2302      	movs	r3, #2
  }
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3730      	adds	r7, #48	; 0x30
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
	...

0800bb28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	68da      	ldr	r2, [r3, #12]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	430a      	orrs	r2, r1
 800bb44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	689a      	ldr	r2, [r3, #8]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	695b      	ldr	r3, [r3, #20]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800bb62:	f023 030c 	bic.w	r3, r3, #12
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	6812      	ldr	r2, [r2, #0]
 800bb6a:	68b9      	ldr	r1, [r7, #8]
 800bb6c:	430b      	orrs	r3, r1
 800bb6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	699a      	ldr	r2, [r3, #24]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	430a      	orrs	r2, r1
 800bb84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a2c      	ldr	r2, [pc, #176]	; (800bc3c <UART_SetConfig+0x114>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d103      	bne.n	800bb98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bb90:	f7fe fec2 	bl	800a918 <HAL_RCC_GetPCLK2Freq>
 800bb94:	60f8      	str	r0, [r7, #12]
 800bb96:	e002      	b.n	800bb9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bb98:	f7fe feaa 	bl	800a8f0 <HAL_RCC_GetPCLK1Freq>
 800bb9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	4613      	mov	r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	4413      	add	r3, r2
 800bba6:	009a      	lsls	r2, r3, #2
 800bba8:	441a      	add	r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbb4:	4a22      	ldr	r2, [pc, #136]	; (800bc40 <UART_SetConfig+0x118>)
 800bbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbba:	095b      	lsrs	r3, r3, #5
 800bbbc:	0119      	lsls	r1, r3, #4
 800bbbe:	68fa      	ldr	r2, [r7, #12]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	4413      	add	r3, r2
 800bbc6:	009a      	lsls	r2, r3, #2
 800bbc8:	441a      	add	r2, r3
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	fbb2 f2f3 	udiv	r2, r2, r3
 800bbd4:	4b1a      	ldr	r3, [pc, #104]	; (800bc40 <UART_SetConfig+0x118>)
 800bbd6:	fba3 0302 	umull	r0, r3, r3, r2
 800bbda:	095b      	lsrs	r3, r3, #5
 800bbdc:	2064      	movs	r0, #100	; 0x64
 800bbde:	fb00 f303 	mul.w	r3, r0, r3
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	011b      	lsls	r3, r3, #4
 800bbe6:	3332      	adds	r3, #50	; 0x32
 800bbe8:	4a15      	ldr	r2, [pc, #84]	; (800bc40 <UART_SetConfig+0x118>)
 800bbea:	fba2 2303 	umull	r2, r3, r2, r3
 800bbee:	095b      	lsrs	r3, r3, #5
 800bbf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbf4:	4419      	add	r1, r3
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	4413      	add	r3, r2
 800bbfe:	009a      	lsls	r2, r3, #2
 800bc00:	441a      	add	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	fbb2 f2f3 	udiv	r2, r2, r3
 800bc0c:	4b0c      	ldr	r3, [pc, #48]	; (800bc40 <UART_SetConfig+0x118>)
 800bc0e:	fba3 0302 	umull	r0, r3, r3, r2
 800bc12:	095b      	lsrs	r3, r3, #5
 800bc14:	2064      	movs	r0, #100	; 0x64
 800bc16:	fb00 f303 	mul.w	r3, r0, r3
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	011b      	lsls	r3, r3, #4
 800bc1e:	3332      	adds	r3, #50	; 0x32
 800bc20:	4a07      	ldr	r2, [pc, #28]	; (800bc40 <UART_SetConfig+0x118>)
 800bc22:	fba2 2303 	umull	r2, r3, r2, r3
 800bc26:	095b      	lsrs	r3, r3, #5
 800bc28:	f003 020f 	and.w	r2, r3, #15
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	440a      	add	r2, r1
 800bc32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bc34:	bf00      	nop
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	40013800 	.word	0x40013800
 800bc40:	51eb851f 	.word	0x51eb851f

0800bc44 <__itoa>:
 800bc44:	1e93      	subs	r3, r2, #2
 800bc46:	2b22      	cmp	r3, #34	; 0x22
 800bc48:	b510      	push	{r4, lr}
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	d904      	bls.n	800bc58 <__itoa+0x14>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	461c      	mov	r4, r3
 800bc52:	700b      	strb	r3, [r1, #0]
 800bc54:	4620      	mov	r0, r4
 800bc56:	bd10      	pop	{r4, pc}
 800bc58:	2a0a      	cmp	r2, #10
 800bc5a:	d109      	bne.n	800bc70 <__itoa+0x2c>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	da07      	bge.n	800bc70 <__itoa+0x2c>
 800bc60:	232d      	movs	r3, #45	; 0x2d
 800bc62:	700b      	strb	r3, [r1, #0]
 800bc64:	2101      	movs	r1, #1
 800bc66:	4240      	negs	r0, r0
 800bc68:	4421      	add	r1, r4
 800bc6a:	f000 f805 	bl	800bc78 <__utoa>
 800bc6e:	e7f1      	b.n	800bc54 <__itoa+0x10>
 800bc70:	2100      	movs	r1, #0
 800bc72:	e7f9      	b.n	800bc68 <__itoa+0x24>

0800bc74 <itoa>:
 800bc74:	f7ff bfe6 	b.w	800bc44 <__itoa>

0800bc78 <__utoa>:
 800bc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc7a:	b08b      	sub	sp, #44	; 0x2c
 800bc7c:	4605      	mov	r5, r0
 800bc7e:	460b      	mov	r3, r1
 800bc80:	466e      	mov	r6, sp
 800bc82:	4c1d      	ldr	r4, [pc, #116]	; (800bcf8 <__utoa+0x80>)
 800bc84:	f104 0c20 	add.w	ip, r4, #32
 800bc88:	4637      	mov	r7, r6
 800bc8a:	6820      	ldr	r0, [r4, #0]
 800bc8c:	6861      	ldr	r1, [r4, #4]
 800bc8e:	3408      	adds	r4, #8
 800bc90:	c703      	stmia	r7!, {r0, r1}
 800bc92:	4564      	cmp	r4, ip
 800bc94:	463e      	mov	r6, r7
 800bc96:	d1f7      	bne.n	800bc88 <__utoa+0x10>
 800bc98:	7921      	ldrb	r1, [r4, #4]
 800bc9a:	6820      	ldr	r0, [r4, #0]
 800bc9c:	7139      	strb	r1, [r7, #4]
 800bc9e:	1e91      	subs	r1, r2, #2
 800bca0:	2922      	cmp	r1, #34	; 0x22
 800bca2:	6038      	str	r0, [r7, #0]
 800bca4:	f04f 0100 	mov.w	r1, #0
 800bca8:	d904      	bls.n	800bcb4 <__utoa+0x3c>
 800bcaa:	7019      	strb	r1, [r3, #0]
 800bcac:	460b      	mov	r3, r1
 800bcae:	4618      	mov	r0, r3
 800bcb0:	b00b      	add	sp, #44	; 0x2c
 800bcb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcb4:	1e58      	subs	r0, r3, #1
 800bcb6:	4684      	mov	ip, r0
 800bcb8:	fbb5 f7f2 	udiv	r7, r5, r2
 800bcbc:	fb02 5617 	mls	r6, r2, r7, r5
 800bcc0:	3628      	adds	r6, #40	; 0x28
 800bcc2:	446e      	add	r6, sp
 800bcc4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bcc8:	460c      	mov	r4, r1
 800bcca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bcce:	462e      	mov	r6, r5
 800bcd0:	42b2      	cmp	r2, r6
 800bcd2:	463d      	mov	r5, r7
 800bcd4:	f101 0101 	add.w	r1, r1, #1
 800bcd8:	d9ee      	bls.n	800bcb8 <__utoa+0x40>
 800bcda:	2200      	movs	r2, #0
 800bcdc:	545a      	strb	r2, [r3, r1]
 800bcde:	1919      	adds	r1, r3, r4
 800bce0:	1aa5      	subs	r5, r4, r2
 800bce2:	42aa      	cmp	r2, r5
 800bce4:	dae3      	bge.n	800bcae <__utoa+0x36>
 800bce6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bcea:	780e      	ldrb	r6, [r1, #0]
 800bcec:	3201      	adds	r2, #1
 800bcee:	7006      	strb	r6, [r0, #0]
 800bcf0:	f801 5901 	strb.w	r5, [r1], #-1
 800bcf4:	e7f4      	b.n	800bce0 <__utoa+0x68>
 800bcf6:	bf00      	nop
 800bcf8:	0800cb26 	.word	0x0800cb26

0800bcfc <memset>:
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	4402      	add	r2, r0
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d100      	bne.n	800bd06 <memset+0xa>
 800bd04:	4770      	bx	lr
 800bd06:	f803 1b01 	strb.w	r1, [r3], #1
 800bd0a:	e7f9      	b.n	800bd00 <memset+0x4>

0800bd0c <__libc_init_array>:
 800bd0c:	b570      	push	{r4, r5, r6, lr}
 800bd0e:	2600      	movs	r6, #0
 800bd10:	4d0c      	ldr	r5, [pc, #48]	; (800bd44 <__libc_init_array+0x38>)
 800bd12:	4c0d      	ldr	r4, [pc, #52]	; (800bd48 <__libc_init_array+0x3c>)
 800bd14:	1b64      	subs	r4, r4, r5
 800bd16:	10a4      	asrs	r4, r4, #2
 800bd18:	42a6      	cmp	r6, r4
 800bd1a:	d109      	bne.n	800bd30 <__libc_init_array+0x24>
 800bd1c:	f000 f828 	bl	800bd70 <_init>
 800bd20:	2600      	movs	r6, #0
 800bd22:	4d0a      	ldr	r5, [pc, #40]	; (800bd4c <__libc_init_array+0x40>)
 800bd24:	4c0a      	ldr	r4, [pc, #40]	; (800bd50 <__libc_init_array+0x44>)
 800bd26:	1b64      	subs	r4, r4, r5
 800bd28:	10a4      	asrs	r4, r4, #2
 800bd2a:	42a6      	cmp	r6, r4
 800bd2c:	d105      	bne.n	800bd3a <__libc_init_array+0x2e>
 800bd2e:	bd70      	pop	{r4, r5, r6, pc}
 800bd30:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd34:	4798      	blx	r3
 800bd36:	3601      	adds	r6, #1
 800bd38:	e7ee      	b.n	800bd18 <__libc_init_array+0xc>
 800bd3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd3e:	4798      	blx	r3
 800bd40:	3601      	adds	r6, #1
 800bd42:	e7f2      	b.n	800bd2a <__libc_init_array+0x1e>
 800bd44:	0800cb4c 	.word	0x0800cb4c
 800bd48:	0800cb4c 	.word	0x0800cb4c
 800bd4c:	0800cb4c 	.word	0x0800cb4c
 800bd50:	0800cb50 	.word	0x0800cb50

0800bd54 <memcpy>:
 800bd54:	440a      	add	r2, r1
 800bd56:	4291      	cmp	r1, r2
 800bd58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bd5c:	d100      	bne.n	800bd60 <memcpy+0xc>
 800bd5e:	4770      	bx	lr
 800bd60:	b510      	push	{r4, lr}
 800bd62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd66:	4291      	cmp	r1, r2
 800bd68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd6c:	d1f9      	bne.n	800bd62 <memcpy+0xe>
 800bd6e:	bd10      	pop	{r4, pc}

0800bd70 <_init>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	bf00      	nop
 800bd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd76:	bc08      	pop	{r3}
 800bd78:	469e      	mov	lr, r3
 800bd7a:	4770      	bx	lr

0800bd7c <_fini>:
 800bd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7e:	bf00      	nop
 800bd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd82:	bc08      	pop	{r3}
 800bd84:	469e      	mov	lr, r3
 800bd86:	4770      	bx	lr
