
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc7c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001014  0800ce60  0800ce60  0001ce60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de74  0800de74  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800de74  0800de74  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de74  0800de74  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de74  0800de74  0001de74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de78  0800de78  0001de78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800de7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  200000fc  0800df78  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  0800df78  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001661c  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034a0  00000000  00000000  00036784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00039c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e7b  00000000  00000000  0003aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6ba  00000000  00000000  0003bd2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb54  00000000  00000000  000583e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee5c  00000000  00000000  00074f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005214  00000000  00000000  00113d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00118fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ce48 	.word	0x0800ce48

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800ce48 	.word	0x0800ce48

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fc6c 	bl	8009b2c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fae4 	bl	8008824 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	20000374 	.word	0x20000374
 80004c0:	200001c5 	.word	0x200001c5
 80004c4:	200001ed 	.word	0x200001ed
 80004c8:	200001f0 	.word	0x200001f0
 80004cc:	200001f1 	.word	0x200001f1
 80004d0:	200001f2 	.word	0x200001f2
 80004d4:	200001f3 	.word	0x200001f3
 80004d8:	200001f4 	.word	0x200001f4
 80004dc:	200001f5 	.word	0x200001f5
 80004e0:	20000205 	.word	0x20000205
 80004e4:	200001f6 	.word	0x200001f6
 80004e8:	20000206 	.word	0x20000206
 80004ec:	200001f7 	.word	0x200001f7
 80004f0:	20000207 	.word	0x20000207
 80004f4:	200001fa 	.word	0x200001fa
 80004f8:	200001fb 	.word	0x200001fb
 80004fc:	200001fc 	.word	0x200001fc
 8000500:	200001fd 	.word	0x200001fd
 8000504:	200001fe 	.word	0x200001fe
 8000508:	200001ff 	.word	0x200001ff
 800050c:	20000200 	.word	0x20000200
 8000510:	20000201 	.word	0x20000201
 8000514:	20000202 	.word	0x20000202
 8000518:	20000203 	.word	0x20000203
 800051c:	20000204 	.word	0x20000204
 8000520:	20000208 	.word	0x20000208
 8000524:	2000020a 	.word	0x2000020a
 8000528:	200001e8 	.word	0x200001e8
 800052c:	200001e9 	.word	0x200001e9
 8000530:	200001ea 	.word	0x200001ea
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200001eb 	.word	0x200001eb
 8000540:	2000020d 	.word	0x2000020d
 8000544:	2000020b 	.word	0x2000020b
 8000548:	200001f9 	.word	0x200001f9
 800054c:	2000020c 	.word	0x2000020c
 8000550:	200001f8 	.word	0x200001f8
 8000554:	2000020e 	.word	0x2000020e
 8000558:	2000020f 	.word	0x2000020f
 800055c:	20000210 	.word	0x20000210
 8000560:	20000211 	.word	0x20000211
 8000564:	20000212 	.word	0x20000212
 8000568:	20000213 	.word	0x20000213
 800056c:	20000214 	.word	0x20000214
 8000570:	20000215 	.word	0x20000215
 8000574:	20000216 	.word	0x20000216
 8000578:	20000217 	.word	0x20000217
 800057c:	200001c4 	.word	0x200001c4
	}

	if(kapi1AcSure>5) {
 8000580:	4b57      	ldr	r3, [pc, #348]	; (80006e0 <eepromKontrol+0x4ac>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b55      	ldr	r3, [pc, #340]	; (80006e0 <eepromKontrol+0x4ac>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b55      	ldr	r3, [pc, #340]	; (80006e4 <eepromKontrol+0x4b0>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b53      	ldr	r3, [pc, #332]	; (80006e4 <eepromKontrol+0x4b0>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b52      	ldr	r3, [pc, #328]	; (80006e8 <eepromKontrol+0x4b4>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b50      	ldr	r3, [pc, #320]	; (80006e8 <eepromKontrol+0x4b4>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b50      	ldr	r3, [pc, #320]	; (80006ec <eepromKontrol+0x4b8>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4e      	ldr	r3, [pc, #312]	; (80006ec <eepromKontrol+0x4b8>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4d      	ldr	r3, [pc, #308]	; (80006f0 <eepromKontrol+0x4bc>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4b      	ldr	r3, [pc, #300]	; (80006f0 <eepromKontrol+0x4bc>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4b      	ldr	r3, [pc, #300]	; (80006f4 <eepromKontrol+0x4c0>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b49      	ldr	r3, [pc, #292]	; (80006f4 <eepromKontrol+0x4c0>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b48      	ldr	r3, [pc, #288]	; (80006f8 <eepromKontrol+0x4c4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <eepromKontrol+0x4c4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b46      	ldr	r3, [pc, #280]	; (80006fc <eepromKontrol+0x4c8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b44      	ldr	r3, [pc, #272]	; (80006fc <eepromKontrol+0x4c8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <eepromKontrol+0x4cc>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b41      	ldr	r3, [pc, #260]	; (8000700 <eepromKontrol+0x4cc>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b41      	ldr	r3, [pc, #260]	; (8000704 <eepromKontrol+0x4d0>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <eepromKontrol+0x4d0>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3e      	ldr	r3, [pc, #248]	; (8000708 <eepromKontrol+0x4d4>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3c      	ldr	r3, [pc, #240]	; (8000708 <eepromKontrol+0x4d4>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3c      	ldr	r3, [pc, #240]	; (800070c <eepromKontrol+0x4d8>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3a      	ldr	r3, [pc, #232]	; (800070c <eepromKontrol+0x4d8>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <eepromKontrol+0x4dc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b37      	ldr	r3, [pc, #220]	; (8000710 <eepromKontrol+0x4dc>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <eepromKontrol+0x4e0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <eepromKontrol+0x4e0>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b34      	ldr	r3, [pc, #208]	; (8000718 <eepromKontrol+0x4e4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b32      	ldr	r3, [pc, #200]	; (8000718 <eepromKontrol+0x4e4>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <eepromKontrol+0x4e8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <eepromKontrol+0x4e8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <eepromKontrol+0x4ec>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <eepromKontrol+0x4ec>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <eepromKontrol+0x4f0>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <eepromKontrol+0x4f0>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <eepromKontrol+0x4f4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <eepromKontrol+0x4f4>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <eepromKontrol+0x4f8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <eepromKontrol+0x4f8>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <eepromKontrol+0x4fc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <eepromKontrol+0x4fc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <eepromKontrol+0x500>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <eepromKontrol+0x500>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f83f 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	; 0xfa
 80006bc:	f008 f8b2 	bl	8008824 <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f839 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	; 0xfa
 80006c8:	f008 f8ac 	bl	8008824 <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f833 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	; 0xfa
 80006d4:	f008 f8a6 	bl	8008824 <HAL_Delay>
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000205 	.word	0x20000205
 80006e4:	200001f6 	.word	0x200001f6
 80006e8:	20000206 	.word	0x20000206
 80006ec:	200001f7 	.word	0x200001f7
 80006f0:	200001f9 	.word	0x200001f9
 80006f4:	20000207 	.word	0x20000207
 80006f8:	200001fa 	.word	0x200001fa
 80006fc:	200001fb 	.word	0x200001fb
 8000700:	200001fc 	.word	0x200001fc
 8000704:	200001fd 	.word	0x200001fd
 8000708:	200001fe 	.word	0x200001fe
 800070c:	200001ff 	.word	0x200001ff
 8000710:	20000200 	.word	0x20000200
 8000714:	20000201 	.word	0x20000201
 8000718:	20000202 	.word	0x20000202
 800071c:	20000203 	.word	0x20000203
 8000720:	20000204 	.word	0x20000204
 8000724:	20000208 	.word	0x20000208
 8000728:	2000020a 	.word	0x2000020a
 800072c:	2000020c 	.word	0x2000020c
 8000730:	2000020d 	.word	0x2000020d
 8000734:	2000020b 	.word	0x2000020b

08000738 <convertArrays>:

void convertArrays(int state) {
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	; 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d120      	bne.n	8000788 <convertArrays+0x50>
		int eepromVal = idStartPos;
 8000746:	4b3b      	ldr	r3, [pc, #236]	; (8000834 <convertArrays+0xfc>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<machineIDCharacterLimit; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
 8000750:	e016      	b.n	8000780 <convertArrays+0x48>
			machineID[i] = idCharactersArray[eepromData[eepromVal]];
 8000752:	4a39      	ldr	r2, [pc, #228]	; (8000838 <convertArrays+0x100>)
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b37      	ldr	r3, [pc, #220]	; (800083c <convertArrays+0x104>)
 800075e:	5c99      	ldrb	r1, [r3, r2]
 8000760:	4a37      	ldr	r2, [pc, #220]	; (8000840 <convertArrays+0x108>)
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	4413      	add	r3, r2
 8000766:	460a      	mov	r2, r1
 8000768:	701a      	strb	r2, [r3, #0]
			machineID[i + 1] = '\0';
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	3301      	adds	r3, #1
 800076e:	4a34      	ldr	r2, [pc, #208]	; (8000840 <convertArrays+0x108>)
 8000770:	2100      	movs	r1, #0
 8000772:	54d1      	strb	r1, [r2, r3]

			eepromVal++;
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	3301      	adds	r3, #1
 8000778:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	3301      	adds	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	2b0b      	cmp	r3, #11
 8000784:	dde5      	ble.n	8000752 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000786:	e04f      	b.n	8000828 <convertArrays+0xf0>
	} else if(state == 2) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d126      	bne.n	80007dc <convertArrays+0xa4>
		int eepromVal = ssidStartPos;
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <convertArrays+0x10c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	e01c      	b.n	80007d4 <convertArrays+0x9c>
			if(eepromData[eepromVal] != 0) {
 800079a:	4a27      	ldr	r2, [pc, #156]	; (8000838 <convertArrays+0x100>)
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d013      	beq.n	80007ce <convertArrays+0x96>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a6:	4a24      	ldr	r2, [pc, #144]	; (8000838 <convertArrays+0x100>)
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <convertArrays+0x110>)
 80007b2:	5c99      	ldrb	r1, [r3, r2]
 80007b4:	4a25      	ldr	r2, [pc, #148]	; (800084c <convertArrays+0x114>)
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	4413      	add	r3, r2
 80007ba:	460a      	mov	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]
				wifiSSID[i + 1] = '\0';
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	3301      	adds	r3, #1
 80007c2:	4a22      	ldr	r2, [pc, #136]	; (800084c <convertArrays+0x114>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	54d1      	strb	r1, [r2, r3]
				eepromVal++;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3301      	adds	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	3301      	adds	r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	2b13      	cmp	r3, #19
 80007d8:	dddf      	ble.n	800079a <convertArrays+0x62>
}
 80007da:	e025      	b.n	8000828 <convertArrays+0xf0>
		int eepromVal = passStartPos;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <convertArrays+0x118>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	e01c      	b.n	8000822 <convertArrays+0xea>
			if(eepromData[eepromVal] != 0) {
 80007e8:	4a13      	ldr	r2, [pc, #76]	; (8000838 <convertArrays+0x100>)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d013      	beq.n	800081c <convertArrays+0xe4>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007f4:	4a10      	ldr	r2, [pc, #64]	; (8000838 <convertArrays+0x100>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <convertArrays+0x110>)
 8000800:	5c99      	ldrb	r1, [r3, r2]
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <convertArrays+0x11c>)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	4413      	add	r3, r2
 8000808:	460a      	mov	r2, r1
 800080a:	701a      	strb	r2, [r3, #0]
				wifiPass[i + 1] = '\0';
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	3301      	adds	r3, #1
 8000810:	4a10      	ldr	r2, [pc, #64]	; (8000854 <convertArrays+0x11c>)
 8000812:	2100      	movs	r1, #0
 8000814:	54d1      	strb	r1, [r2, r3]
				eepromVal++;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3301      	adds	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	3301      	adds	r3, #1
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	2b13      	cmp	r3, #19
 8000826:	dddf      	ble.n	80007e8 <convertArrays+0xb0>
}
 8000828:	bf00      	nop
 800082a:	3724      	adds	r7, #36	; 0x24
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000004 	.word	0x20000004
 8000838:	20000118 	.word	0x20000118
 800083c:	20000010 	.word	0x20000010
 8000840:	20000190 	.word	0x20000190
 8000844:	20000008 	.word	0x20000008
 8000848:	2000001c 	.word	0x2000001c
 800084c:	2000019c 	.word	0x2000019c
 8000850:	2000000c 	.word	0x2000000c
 8000854:	200001b0 	.word	0x200001b0

08000858 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b09f      	sub	sp, #124	; 0x7c
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000864:	4948      	ldr	r1, [pc, #288]	; (8000988 <ESP8266_Init+0x130>)
 8000866:	4849      	ldr	r0, [pc, #292]	; (800098c <ESP8266_Init+0x134>)
 8000868:	f00b fed0 	bl	800c60c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800086c:	4847      	ldr	r0, [pc, #284]	; (800098c <ESP8266_Init+0x134>)
 800086e:	f7ff fcd9 	bl	8000224 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	b29b      	uxth	r3, r3
 8000876:	461a      	mov	r2, r3
 8000878:	4944      	ldr	r1, [pc, #272]	; (800098c <ESP8266_Init+0x134>)
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f00b f89e 	bl	800b9bc <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000884:	f007 ffce 	bl	8008824 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000888:	4941      	ldr	r1, [pc, #260]	; (8000990 <ESP8266_Init+0x138>)
 800088a:	4840      	ldr	r0, [pc, #256]	; (800098c <ESP8266_Init+0x134>)
 800088c:	f00b febe 	bl	800c60c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000890:	483e      	ldr	r0, [pc, #248]	; (800098c <ESP8266_Init+0x134>)
 8000892:	f7ff fcc7 	bl	8000224 <strlen>
 8000896:	4603      	mov	r3, r0
 8000898:	b29b      	uxth	r3, r3
 800089a:	461a      	mov	r2, r3
 800089c:	493b      	ldr	r1, [pc, #236]	; (800098c <ESP8266_Init+0x134>)
 800089e:	68f8      	ldr	r0, [r7, #12]
 80008a0:	f00b f88c 	bl	800b9bc <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80008a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a8:	f007 ffbc 	bl	8008824 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 80008ac:	4939      	ldr	r1, [pc, #228]	; (8000994 <ESP8266_Init+0x13c>)
 80008ae:	4837      	ldr	r0, [pc, #220]	; (800098c <ESP8266_Init+0x134>)
 80008b0:	f00b feac 	bl	800c60c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008b4:	4835      	ldr	r0, [pc, #212]	; (800098c <ESP8266_Init+0x134>)
 80008b6:	f7ff fcb5 	bl	8000224 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29b      	uxth	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	4932      	ldr	r1, [pc, #200]	; (800098c <ESP8266_Init+0x134>)
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f00b f87a 	bl	800b9bc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008cc:	f007 ffaa 	bl	8008824 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80008d0:	4931      	ldr	r1, [pc, #196]	; (8000998 <ESP8266_Init+0x140>)
 80008d2:	482e      	ldr	r0, [pc, #184]	; (800098c <ESP8266_Init+0x134>)
 80008d4:	f00b fe9a 	bl	800c60c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008d8:	482c      	ldr	r0, [pc, #176]	; (800098c <ESP8266_Init+0x134>)
 80008da:	f7ff fca3 	bl	8000224 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	461a      	mov	r2, r3
 80008e4:	4929      	ldr	r1, [pc, #164]	; (800098c <ESP8266_Init+0x134>)
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f00b f868 	bl	800b9bc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008f0:	f007 ff98 	bl	8008824 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4a28      	ldr	r2, [pc, #160]	; (800099c <ESP8266_Init+0x144>)
 80008fa:	461c      	mov	r4, r3
 80008fc:	4613      	mov	r3, r2
 80008fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000900:	c407      	stmia	r4!, {r0, r1, r2}
 8000902:	8023      	strh	r3, [r4, #0]
 8000904:	3402      	adds	r4, #2
 8000906:	0c1b      	lsrs	r3, r3, #16
 8000908:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	68b9      	ldr	r1, [r7, #8]
 8000910:	4618      	mov	r0, r3
 8000912:	f00b fea3 	bl	800c65c <strcat>
	strcat(str, "\",\"");
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fc82 	bl	8000224 <strlen>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4413      	add	r3, r2
 800092a:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <ESP8266_Init+0x148>)
 800092c:	6810      	ldr	r0, [r2, #0]
 800092e:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	4618      	mov	r0, r3
 8000938:	f00b fe90 	bl	800c65c <strcat>
	strcat(str, "\"\r\n");
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fc6f 	bl	8000224 <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4413      	add	r3, r2
 8000950:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <ESP8266_Init+0x14c>)
 8000952:	6810      	ldr	r0, [r2, #0]
 8000954:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	461a      	mov	r2, r3
 800095c:	4912      	ldr	r1, [pc, #72]	; (80009a8 <ESP8266_Init+0x150>)
 800095e:	480b      	ldr	r0, [pc, #44]	; (800098c <ESP8266_Init+0x134>)
 8000960:	f00b fe54 	bl	800c60c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000964:	4809      	ldr	r0, [pc, #36]	; (800098c <ESP8266_Init+0x134>)
 8000966:	f7ff fc5d 	bl	8000224 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	b29b      	uxth	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <ESP8266_Init+0x134>)
 8000972:	68f8      	ldr	r0, [r7, #12]
 8000974:	f00b f822 	bl	800b9bc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000978:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800097c:	f007 ff52 	bl	8008824 <HAL_Delay>
}
 8000980:	bf00      	nop
 8000982:	377c      	adds	r7, #124	; 0x7c
 8000984:	46bd      	mov	sp, r7
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	0800ce60 	.word	0x0800ce60
 800098c:	20000250 	.word	0x20000250
 8000990:	0800ce70 	.word	0x0800ce70
 8000994:	0800ce7c 	.word	0x0800ce7c
 8000998:	0800ce84 	.word	0x0800ce84
 800099c:	0800ce94 	.word	0x0800ce94
 80009a0:	0800cea4 	.word	0x0800cea4
 80009a4:	0800cea8 	.word	0x0800cea8
 80009a8:	0800ceac 	.word	0x0800ceac

080009ac <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b0c9      	sub	sp, #292	; 0x124
 80009b0:	af04      	add	r7, sp, #16
 80009b2:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80009b6:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80009ba:	6020      	str	r0, [r4, #0]
 80009bc:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80009c0:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 80009c4:	6001      	str	r1, [r0, #0]
 80009c6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80009ca:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80009ce:	600a      	str	r2, [r1, #0]
 80009d0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009d4:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80009d8:	6013      	str	r3, [r2, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009da:	4a36      	ldr	r2, [pc, #216]	; (8000ab4 <sendMachineData+0x108>)
 80009dc:	4936      	ldr	r1, [pc, #216]	; (8000ab8 <sendMachineData+0x10c>)
 80009de:	4837      	ldr	r0, [pc, #220]	; (8000abc <sendMachineData+0x110>)
 80009e0:	f00b fe14 	bl	800c60c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009e4:	4835      	ldr	r0, [pc, #212]	; (8000abc <sendMachineData+0x110>)
 80009e6:	f7ff fc1d 	bl	8000224 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009f6:	4931      	ldr	r1, [pc, #196]	; (8000abc <sendMachineData+0x110>)
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	f00a ffdf 	bl	800b9bc <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80009fe:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a02:	f007 ff0f 	bl	8008824 <HAL_Delay>

	sprintf(local_txA,
 8000a06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a0e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a12:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000a16:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000a1a:	4929      	ldr	r1, [pc, #164]	; (8000ac0 <sendMachineData+0x114>)
 8000a1c:	9102      	str	r1, [sp, #8]
 8000a1e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8000a22:	9101      	str	r1, [sp, #4]
 8000a24:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000a28:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000a2c:	6809      	ldr	r1, [r1, #0]
 8000a2e:	9100      	str	r1, [sp, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6812      	ldr	r2, [r2, #0]
 8000a34:	4923      	ldr	r1, [pc, #140]	; (8000ac4 <sendMachineData+0x118>)
 8000a36:	f00b fde9 	bl	800c60c <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fbf0 	bl	8000224 <strlen>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000a52:	491d      	ldr	r1, [pc, #116]	; (8000ac8 <sendMachineData+0x11c>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00b fdd9 	bl	800c60c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fbe0 	bl	8000224 <strlen>
 8000a64:	4603      	mov	r3, r0
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	f107 0110 	add.w	r1, r7, #16
 8000a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	f00a ffa1 	bl	800b9bc <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a7a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a7e:	f007 fed1 	bl	8008824 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fbcc 	bl	8000224 <strlen>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	f00a ff8d 	bl	800b9bc <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000aa2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000aa6:	f007 febd 	bl	8008824 <HAL_Delay>
}
 8000aaa:	bf00      	nop
 8000aac:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	0800ceb0 	.word	0x0800ceb0
 8000ab8:	0800cec0 	.word	0x0800cec0
 8000abc:	20000250 	.word	0x20000250
 8000ac0:	0800cf54 	.word	0x0800cf54
 8000ac4:	0800cee0 	.word	0x0800cee0
 8000ac8:	0800cf68 	.word	0x0800cf68

08000acc <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b089      	sub	sp, #36	; 0x24
 8000ad0:	af04      	add	r7, sp, #16
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <hata2EEPROM+0xa4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	1e5a      	subs	r2, r3, #1
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <hata2EEPROM+0xa8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <hata2EEPROM+0xac>)
 8000ae4:	5cd3      	ldrb	r3, [r2, r3]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000aea:	f000 f92b 	bl	8000d44 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000aee:	e000      	b.n	8000af2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000af0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	e012      	b.n	8000b1e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <hata2EEPROM+0xa8>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <hata2EEPROM+0xac>)
 8000b02:	5cd3      	ldrb	r3, [r2, r3]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d107      	bne.n	8000b18 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <hata2EEPROM+0xa8>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4919      	ldr	r1, [pc, #100]	; (8000b78 <hata2EEPROM+0xac>)
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	54ca      	strb	r2, [r1, r3]
					break;
 8000b16:	e007      	b.n	8000b28 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <hata2EEPROM+0xa4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbe7      	blt.n	8000af8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <hata2EEPROM+0xa8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	b299      	uxth	r1, r3
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <hata2EEPROM+0xa4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	b298      	uxth	r0, r3
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <hata2EEPROM+0xa8>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <hata2EEPROM+0xac>)
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <hata2EEPROM+0xa4>)
 8000b3e:	6812      	ldr	r2, [r2, #0]
 8000b40:	b292      	uxth	r2, r2
 8000b42:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000b46:	9402      	str	r4, [sp, #8]
 8000b48:	9201      	str	r2, [sp, #4]
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	460a      	mov	r2, r1
 8000b50:	21a0      	movs	r1, #160	; 0xa0
 8000b52:	480a      	ldr	r0, [pc, #40]	; (8000b7c <hata2EEPROM+0xb0>)
 8000b54:	f008 fef0 	bl	8009938 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5c:	f007 fe62 	bl	8008824 <HAL_Delay>
	eepromKontrol(1);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff fb67 	bl	8000234 <eepromKontrol>
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd90      	pop	{r4, r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000098 	.word	0x20000098
 8000b74:	2000009c 	.word	0x2000009c
 8000b78:	20000118 	.word	0x20000118
 8000b7c:	20000374 	.word	0x20000374

08000b80 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d11d      	bne.n	8000bcc <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b90:	4b62      	ldr	r3, [pc, #392]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b98:	4a61      	ldr	r2, [pc, #388]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f007 f8eb 	bl	8007d78 <lcd_print>
 8000ba2:	e008      	b.n	8000bb6 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000ba4:	4b5d      	ldr	r3, [pc, #372]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d104      	bne.n	8000bb6 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000bac:	4a5d      	ldr	r2, [pc, #372]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f007 f8e1 	bl	8007d78 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000bb6:	4a5c      	ldr	r2, [pc, #368]	; (8000d28 <hataKoduLcdGoster+0x1a8>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f007 f8dc 	bl	8007d78 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bc0:	4a5a      	ldr	r2, [pc, #360]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000bc2:	2107      	movs	r1, #7
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f007 f8d7 	bl	8007d78 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000bca:	e0a3      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d11d      	bne.n	8000c0e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000bd2:	4b52      	ldr	r3, [pc, #328]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d105      	bne.n	8000be6 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000bda:	4a51      	ldr	r2, [pc, #324]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000bdc:	2101      	movs	r1, #1
 8000bde:	2001      	movs	r0, #1
 8000be0:	f007 f8ca 	bl	8007d78 <lcd_print>
 8000be4:	e008      	b.n	8000bf8 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000be6:	4b4d      	ldr	r3, [pc, #308]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d104      	bne.n	8000bf8 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000bee:	4a4d      	ldr	r2, [pc, #308]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f007 f8c0 	bl	8007d78 <lcd_print>
		lcd_print(2, 2, "2");
 8000bf8:	4a4d      	ldr	r2, [pc, #308]	; (8000d30 <hataKoduLcdGoster+0x1b0>)
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f007 f8bb 	bl	8007d78 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c02:	4a4a      	ldr	r2, [pc, #296]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000c04:	2107      	movs	r1, #7
 8000c06:	2002      	movs	r0, #2
 8000c08:	f007 f8b6 	bl	8007d78 <lcd_print>
}
 8000c0c:	e082      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d11d      	bne.n	8000c50 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000c14:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d105      	bne.n	8000c28 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000c1c:	4a40      	ldr	r2, [pc, #256]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	2001      	movs	r0, #1
 8000c22:	f007 f8a9 	bl	8007d78 <lcd_print>
 8000c26:	e008      	b.n	8000c3a <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000c28:	4b3c      	ldr	r3, [pc, #240]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d104      	bne.n	8000c3a <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000c30:	4a3c      	ldr	r2, [pc, #240]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000c32:	2101      	movs	r1, #1
 8000c34:	2001      	movs	r0, #1
 8000c36:	f007 f89f 	bl	8007d78 <lcd_print>
		lcd_print(2, 3, "3");
 8000c3a:	4a3e      	ldr	r2, [pc, #248]	; (8000d34 <hataKoduLcdGoster+0x1b4>)
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	2002      	movs	r0, #2
 8000c40:	f007 f89a 	bl	8007d78 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c44:	4a39      	ldr	r2, [pc, #228]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000c46:	2107      	movs	r1, #7
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f007 f895 	bl	8007d78 <lcd_print>
}
 8000c4e:	e061      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	d11d      	bne.n	8000c92 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000c56:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d105      	bne.n	8000c6a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000c5e:	4a30      	ldr	r2, [pc, #192]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000c60:	2101      	movs	r1, #1
 8000c62:	2001      	movs	r0, #1
 8000c64:	f007 f888 	bl	8007d78 <lcd_print>
 8000c68:	e008      	b.n	8000c7c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d104      	bne.n	8000c7c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c72:	4a2c      	ldr	r2, [pc, #176]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	2001      	movs	r0, #1
 8000c78:	f007 f87e 	bl	8007d78 <lcd_print>
		lcd_print(2, 4, "4");
 8000c7c:	4a2e      	ldr	r2, [pc, #184]	; (8000d38 <hataKoduLcdGoster+0x1b8>)
 8000c7e:	2104      	movs	r1, #4
 8000c80:	2002      	movs	r0, #2
 8000c82:	f007 f879 	bl	8007d78 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c86:	4a29      	ldr	r2, [pc, #164]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000c88:	2107      	movs	r1, #7
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f007 f874 	bl	8007d78 <lcd_print>
}
 8000c90:	e040      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b05      	cmp	r3, #5
 8000c96:	d11d      	bne.n	8000cd4 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d105      	bne.n	8000cac <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000ca0:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f007 f867 	bl	8007d78 <lcd_print>
 8000caa:	e008      	b.n	8000cbe <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d104      	bne.n	8000cbe <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f007 f85d 	bl	8007d78 <lcd_print>
		lcd_print(2, 5, "5");
 8000cbe:	4a1f      	ldr	r2, [pc, #124]	; (8000d3c <hataKoduLcdGoster+0x1bc>)
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f007 f858 	bl	8007d78 <lcd_print>
		lcd_print(2, 7, "          ");
 8000cc8:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000cca:	2107      	movs	r1, #7
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f007 f853 	bl	8007d78 <lcd_print>
}
 8000cd2:	e01f      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d11c      	bne.n	8000d14 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d105      	bne.n	8000cee <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f007 f846 	bl	8007d78 <lcd_print>
 8000cec:	e008      	b.n	8000d00 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d104      	bne.n	8000d00 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f007 f83c 	bl	8007d78 <lcd_print>
		lcd_print(2, 6, "6");
 8000d00:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <hataKoduLcdGoster+0x1c0>)
 8000d02:	2106      	movs	r1, #6
 8000d04:	2002      	movs	r0, #2
 8000d06:	f007 f837 	bl	8007d78 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000d0c:	2107      	movs	r1, #7
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f007 f832 	bl	8007d78 <lcd_print>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000020d 	.word	0x2000020d
 8000d20:	0800cff4 	.word	0x0800cff4
 8000d24:	0800d004 	.word	0x0800d004
 8000d28:	0800d014 	.word	0x0800d014
 8000d2c:	0800d018 	.word	0x0800d018
 8000d30:	0800d024 	.word	0x0800d024
 8000d34:	0800d028 	.word	0x0800d028
 8000d38:	0800d02c 	.word	0x0800d02c
 8000d3c:	0800d030 	.word	0x0800d030
 8000d40:	0800d034 	.word	0x0800d034

08000d44 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	e009      	b.n	8000d64 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <eepromDataFillWithEmpty+0x38>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <eepromDataFillWithEmpty+0x3c>)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3301      	adds	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <eepromDataFillWithEmpty+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	dbf0      	blt.n	8000d50 <eepromDataFillWithEmpty+0xc>
	}
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000070 	.word	0x20000070
 8000d80:	20000118 	.word	0x20000118
 8000d84:	20000098 	.word	0x20000098

08000d88 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d9a:	4b50      	ldr	r3, [pc, #320]	; (8000edc <i2cTest+0x154>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b4e      	ldr	r3, [pc, #312]	; (8000edc <i2cTest+0x154>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0201 	bic.w	r2, r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000daa:	484c      	ldr	r0, [pc, #304]	; (8000edc <i2cTest+0x154>)
 8000dac:	f008 fc96 	bl	80096dc <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db0:	23c0      	movs	r3, #192	; 0xc0
 8000db2:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000db4:	2311      	movs	r3, #17
 8000db6:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4846      	ldr	r0, [pc, #280]	; (8000ee0 <i2cTest+0x158>)
 8000dc6:	f008 f89d 	bl	8008f04 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	4844      	ldr	r0, [pc, #272]	; (8000ee0 <i2cTest+0x158>)
 8000dd0:	f008 fb0f 	bl	80093f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	4841      	ldr	r0, [pc, #260]	; (8000ee0 <i2cTest+0x158>)
 8000dda:	f008 fb0a 	bl	80093f2 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000dde:	200a      	movs	r0, #10
 8000de0:	f007 fd20 	bl	8008824 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000de4:	bf00      	nop
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	483d      	ldr	r0, [pc, #244]	; (8000ee0 <i2cTest+0x158>)
 8000dea:	f008 faeb 	bl	80093c4 <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d006      	beq.n	8000e02 <i2cTest+0x7a>
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	483a      	ldr	r0, [pc, #232]	; (8000ee0 <i2cTest+0x158>)
 8000df8:	f008 fae4 	bl	80093c4 <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d1f1      	bne.n	8000de6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	4836      	ldr	r0, [pc, #216]	; (8000ee0 <i2cTest+0x158>)
 8000e08:	f008 faf3 	bl	80093f2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f007 fd09 	bl	8008824 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000e12:	bf00      	nop
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	4832      	ldr	r0, [pc, #200]	; (8000ee0 <i2cTest+0x158>)
 8000e18:	f008 fad4 	bl	80093c4 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d0f8      	beq.n	8000e14 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2140      	movs	r1, #64	; 0x40
 8000e26:	482e      	ldr	r0, [pc, #184]	; (8000ee0 <i2cTest+0x158>)
 8000e28:	f008 fae3 	bl	80093f2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	f007 fcf9 	bl	8008824 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000e32:	bf00      	nop
 8000e34:	2140      	movs	r1, #64	; 0x40
 8000e36:	482a      	ldr	r0, [pc, #168]	; (8000ee0 <i2cTest+0x158>)
 8000e38:	f008 fac4 	bl	80093c4 <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d0f8      	beq.n	8000e34 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2140      	movs	r1, #64	; 0x40
 8000e46:	4826      	ldr	r0, [pc, #152]	; (8000ee0 <i2cTest+0x158>)
 8000e48:	f008 fad3 	bl	80093f2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e4c:	200a      	movs	r0, #10
 8000e4e:	f007 fce9 	bl	8008824 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000e52:	bf00      	nop
 8000e54:	2140      	movs	r1, #64	; 0x40
 8000e56:	4822      	ldr	r0, [pc, #136]	; (8000ee0 <i2cTest+0x158>)
 8000e58:	f008 fab4 	bl	80093c4 <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d1f8      	bne.n	8000e54 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <i2cTest+0x158>)
 8000e68:	f008 fac3 	bl	80093f2 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f007 fcd9 	bl	8008824 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e72:	bf00      	nop
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	481a      	ldr	r0, [pc, #104]	; (8000ee0 <i2cTest+0x158>)
 8000e78:	f008 faa4 	bl	80093c4 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d1f8      	bne.n	8000e74 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e86:	2312      	movs	r3, #18
 8000e88:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e92:	463b      	mov	r3, r7
 8000e94:	4619      	mov	r1, r3
 8000e96:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <i2cTest+0x158>)
 8000e98:	f008 f834 	bl	8008f04 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <i2cTest+0x154>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <i2cTest+0x154>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eaa:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <i2cTest+0x154>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <i2cTest+0x154>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000eba:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <i2cTest+0x154>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <i2cTest+0x154>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0201 	orr.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <i2cTest+0x154>)
 8000ece:	f008 fac1 	bl	8009454 <HAL_I2C_Init>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000374 	.word	0x20000374
 8000ee0:	40010c00 	.word	0x40010c00

08000ee4 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000eee:	20c8      	movs	r0, #200	; 0xc8
 8000ef0:	f007 fc98 	bl	8008824 <HAL_Delay>
	lcd_clear();
 8000ef4:	f006 ff6c 	bl	8007dd0 <lcd_clear>
	if(type == 1 && page == 0) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d13e      	bne.n	8000f7c <printTemplate+0x98>
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d13b      	bne.n	8000f7c <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000f04:	4a81      	ldr	r2, [pc, #516]	; (800110c <printTemplate+0x228>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f006 ff35 	bl	8007d78 <lcd_print>
		lcd_print(2, 3, "0");
 8000f0e:	4a80      	ldr	r2, [pc, #512]	; (8001110 <printTemplate+0x22c>)
 8000f10:	2103      	movs	r1, #3
 8000f12:	2002      	movs	r0, #2
 8000f14:	f006 ff30 	bl	8007d78 <lcd_print>
		lcd_print(2, 4, "1");
 8000f18:	4a7e      	ldr	r2, [pc, #504]	; (8001114 <printTemplate+0x230>)
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f006 ff2b 	bl	8007d78 <lcd_print>
		lcd_print(2, 5, "2");
 8000f22:	4a7d      	ldr	r2, [pc, #500]	; (8001118 <printTemplate+0x234>)
 8000f24:	2105      	movs	r1, #5
 8000f26:	2002      	movs	r0, #2
 8000f28:	f006 ff26 	bl	8007d78 <lcd_print>
		lcd_print(2, 6, "3");
 8000f2c:	4a7b      	ldr	r2, [pc, #492]	; (800111c <printTemplate+0x238>)
 8000f2e:	2106      	movs	r1, #6
 8000f30:	2002      	movs	r0, #2
 8000f32:	f006 ff21 	bl	8007d78 <lcd_print>
		lcd_print(2, 7, "4");
 8000f36:	4a7a      	ldr	r2, [pc, #488]	; (8001120 <printTemplate+0x23c>)
 8000f38:	2107      	movs	r1, #7
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f006 ff1c 	bl	8007d78 <lcd_print>
		lcd_print(2, 10, "5");
 8000f40:	4a78      	ldr	r2, [pc, #480]	; (8001124 <printTemplate+0x240>)
 8000f42:	210a      	movs	r1, #10
 8000f44:	2002      	movs	r0, #2
 8000f46:	f006 ff17 	bl	8007d78 <lcd_print>
		lcd_print(2, 11, "6");
 8000f4a:	4a77      	ldr	r2, [pc, #476]	; (8001128 <printTemplate+0x244>)
 8000f4c:	210b      	movs	r1, #11
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f006 ff12 	bl	8007d78 <lcd_print>
		lcd_print(2, 12, "7");
 8000f54:	4a75      	ldr	r2, [pc, #468]	; (800112c <printTemplate+0x248>)
 8000f56:	210c      	movs	r1, #12
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f006 ff0d 	bl	8007d78 <lcd_print>
		lcd_print(2, 13, "8");
 8000f5e:	4a74      	ldr	r2, [pc, #464]	; (8001130 <printTemplate+0x24c>)
 8000f60:	210d      	movs	r1, #13
 8000f62:	2002      	movs	r0, #2
 8000f64:	f006 ff08 	bl	8007d78 <lcd_print>
		lcd_print(2, 14, "9");
 8000f68:	4a72      	ldr	r2, [pc, #456]	; (8001134 <printTemplate+0x250>)
 8000f6a:	210e      	movs	r1, #14
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f006 ff03 	bl	8007d78 <lcd_print>
		//lcd_print(1, 5, machineID);
		lcd_gotoxy(2, 3);
 8000f72:	2103      	movs	r1, #3
 8000f74:	2002      	movs	r0, #2
 8000f76:	f006 fee0 	bl	8007d3a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			//lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f7a:	e0c2      	b.n	8001102 <printTemplate+0x21e>
	} else if(type == 2) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d15e      	bne.n	8001040 <printTemplate+0x15c>
		if(page == 1) {
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d10f      	bne.n	8000fa8 <printTemplate+0xc4>
			lcd_clear();
 8000f88:	f006 ff22 	bl	8007dd0 <lcd_clear>
			HAL_Delay(100);
 8000f8c:	2064      	movs	r0, #100	; 0x64
 8000f8e:	f007 fc49 	bl	8008824 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f92:	4a69      	ldr	r2, [pc, #420]	; (8001138 <printTemplate+0x254>)
 8000f94:	2101      	movs	r1, #1
 8000f96:	2001      	movs	r0, #1
 8000f98:	f006 feee 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f9c:	4a67      	ldr	r2, [pc, #412]	; (800113c <printTemplate+0x258>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f006 fee9 	bl	8007d78 <lcd_print>
}
 8000fa6:	e0ac      	b.n	8001102 <printTemplate+0x21e>
		} else if(page == 2) {
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d10f      	bne.n	8000fce <printTemplate+0xea>
			lcd_clear();
 8000fae:	f006 ff0f 	bl	8007dd0 <lcd_clear>
			HAL_Delay(100);
 8000fb2:	2064      	movs	r0, #100	; 0x64
 8000fb4:	f007 fc36 	bl	8008824 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fb8:	4a5f      	ldr	r2, [pc, #380]	; (8001138 <printTemplate+0x254>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f006 fedb 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fc2:	4a5f      	ldr	r2, [pc, #380]	; (8001140 <printTemplate+0x25c>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f006 fed6 	bl	8007d78 <lcd_print>
}
 8000fcc:	e099      	b.n	8001102 <printTemplate+0x21e>
		} else if(page == 3) {
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d10f      	bne.n	8000ff4 <printTemplate+0x110>
			lcd_clear();
 8000fd4:	f006 fefc 	bl	8007dd0 <lcd_clear>
			HAL_Delay(100);
 8000fd8:	2064      	movs	r0, #100	; 0x64
 8000fda:	f007 fc23 	bl	8008824 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fde:	4a56      	ldr	r2, [pc, #344]	; (8001138 <printTemplate+0x254>)
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f006 fec8 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000fe8:	4a56      	ldr	r2, [pc, #344]	; (8001144 <printTemplate+0x260>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	2002      	movs	r0, #2
 8000fee:	f006 fec3 	bl	8007d78 <lcd_print>
}
 8000ff2:	e086      	b.n	8001102 <printTemplate+0x21e>
		} else if(page == 4) {
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d10f      	bne.n	800101a <printTemplate+0x136>
			lcd_clear();
 8000ffa:	f006 fee9 	bl	8007dd0 <lcd_clear>
			HAL_Delay(100);
 8000ffe:	2064      	movs	r0, #100	; 0x64
 8001000:	f007 fc10 	bl	8008824 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001004:	4a4c      	ldr	r2, [pc, #304]	; (8001138 <printTemplate+0x254>)
 8001006:	2101      	movs	r1, #1
 8001008:	2001      	movs	r0, #1
 800100a:	f006 feb5 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 800100e:	4a4e      	ldr	r2, [pc, #312]	; (8001148 <printTemplate+0x264>)
 8001010:	2101      	movs	r1, #1
 8001012:	2002      	movs	r0, #2
 8001014:	f006 feb0 	bl	8007d78 <lcd_print>
}
 8001018:	e073      	b.n	8001102 <printTemplate+0x21e>
		} else if(page == 5) {
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b05      	cmp	r3, #5
 800101e:	d170      	bne.n	8001102 <printTemplate+0x21e>
			lcd_clear();
 8001020:	f006 fed6 	bl	8007dd0 <lcd_clear>
			HAL_Delay(100);
 8001024:	2064      	movs	r0, #100	; 0x64
 8001026:	f007 fbfd 	bl	8008824 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800102a:	4a43      	ldr	r2, [pc, #268]	; (8001138 <printTemplate+0x254>)
 800102c:	2101      	movs	r1, #1
 800102e:	2001      	movs	r0, #1
 8001030:	f006 fea2 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001034:	4a45      	ldr	r2, [pc, #276]	; (800114c <printTemplate+0x268>)
 8001036:	2101      	movs	r1, #1
 8001038:	2002      	movs	r0, #2
 800103a:	f006 fe9d 	bl	8007d78 <lcd_print>
}
 800103e:	e060      	b.n	8001102 <printTemplate+0x21e>
	} else if(type == 3) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b03      	cmp	r3, #3
 8001044:	d15d      	bne.n	8001102 <printTemplate+0x21e>
		if(page == 1) {
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d10f      	bne.n	800106c <printTemplate+0x188>
			lcd_clear();
 800104c:	f006 fec0 	bl	8007dd0 <lcd_clear>
			HAL_Delay(100);
 8001050:	2064      	movs	r0, #100	; 0x64
 8001052:	f007 fbe7 	bl	8008824 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001056:	4a3e      	ldr	r2, [pc, #248]	; (8001150 <printTemplate+0x26c>)
 8001058:	2101      	movs	r1, #1
 800105a:	2001      	movs	r0, #1
 800105c:	f006 fe8c 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001060:	4a36      	ldr	r2, [pc, #216]	; (800113c <printTemplate+0x258>)
 8001062:	2101      	movs	r1, #1
 8001064:	2002      	movs	r0, #2
 8001066:	f006 fe87 	bl	8007d78 <lcd_print>
}
 800106a:	e04a      	b.n	8001102 <printTemplate+0x21e>
		} else if(page == 2) {
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d10f      	bne.n	8001092 <printTemplate+0x1ae>
			lcd_clear();
 8001072:	f006 fead 	bl	8007dd0 <lcd_clear>
			HAL_Delay(100);
 8001076:	2064      	movs	r0, #100	; 0x64
 8001078:	f007 fbd4 	bl	8008824 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800107c:	4a34      	ldr	r2, [pc, #208]	; (8001150 <printTemplate+0x26c>)
 800107e:	2101      	movs	r1, #1
 8001080:	2001      	movs	r0, #1
 8001082:	f006 fe79 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001086:	4a2e      	ldr	r2, [pc, #184]	; (8001140 <printTemplate+0x25c>)
 8001088:	2101      	movs	r1, #1
 800108a:	2002      	movs	r0, #2
 800108c:	f006 fe74 	bl	8007d78 <lcd_print>
}
 8001090:	e037      	b.n	8001102 <printTemplate+0x21e>
		} else if(page == 3) {
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b03      	cmp	r3, #3
 8001096:	d10f      	bne.n	80010b8 <printTemplate+0x1d4>
			lcd_clear();
 8001098:	f006 fe9a 	bl	8007dd0 <lcd_clear>
			HAL_Delay(100);
 800109c:	2064      	movs	r0, #100	; 0x64
 800109e:	f007 fbc1 	bl	8008824 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010a2:	4a2b      	ldr	r2, [pc, #172]	; (8001150 <printTemplate+0x26c>)
 80010a4:	2101      	movs	r1, #1
 80010a6:	2001      	movs	r0, #1
 80010a8:	f006 fe66 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80010ac:	4a25      	ldr	r2, [pc, #148]	; (8001144 <printTemplate+0x260>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	2002      	movs	r0, #2
 80010b2:	f006 fe61 	bl	8007d78 <lcd_print>
}
 80010b6:	e024      	b.n	8001102 <printTemplate+0x21e>
		} else if(page == 4) {
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d10f      	bne.n	80010de <printTemplate+0x1fa>
			lcd_clear();
 80010be:	f006 fe87 	bl	8007dd0 <lcd_clear>
			HAL_Delay(100);
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f007 fbae 	bl	8008824 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010c8:	4a21      	ldr	r2, [pc, #132]	; (8001150 <printTemplate+0x26c>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	2001      	movs	r0, #1
 80010ce:	f006 fe53 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <printTemplate+0x264>)
 80010d4:	2101      	movs	r1, #1
 80010d6:	2002      	movs	r0, #2
 80010d8:	f006 fe4e 	bl	8007d78 <lcd_print>
}
 80010dc:	e011      	b.n	8001102 <printTemplate+0x21e>
		} else if(page == 5) {
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2b05      	cmp	r3, #5
 80010e2:	d10e      	bne.n	8001102 <printTemplate+0x21e>
			lcd_clear();
 80010e4:	f006 fe74 	bl	8007dd0 <lcd_clear>
			HAL_Delay(100);
 80010e8:	2064      	movs	r0, #100	; 0x64
 80010ea:	f007 fb9b 	bl	8008824 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010ee:	4a18      	ldr	r2, [pc, #96]	; (8001150 <printTemplate+0x26c>)
 80010f0:	2101      	movs	r1, #1
 80010f2:	2001      	movs	r0, #1
 80010f4:	f006 fe40 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <printTemplate+0x268>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	2002      	movs	r0, #2
 80010fe:	f006 fe3b 	bl	8007d78 <lcd_print>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	0800d038 	.word	0x0800d038
 8001110:	0800d040 	.word	0x0800d040
 8001114:	0800d044 	.word	0x0800d044
 8001118:	0800d048 	.word	0x0800d048
 800111c:	0800d04c 	.word	0x0800d04c
 8001120:	0800d050 	.word	0x0800d050
 8001124:	0800d054 	.word	0x0800d054
 8001128:	0800d058 	.word	0x0800d058
 800112c:	0800d05c 	.word	0x0800d05c
 8001130:	0800d060 	.word	0x0800d060
 8001134:	0800d064 	.word	0x0800d064
 8001138:	0800d068 	.word	0x0800d068
 800113c:	0800d070 	.word	0x0800d070
 8001140:	0800d084 	.word	0x0800d084
 8001144:	0800d098 	.word	0x0800d098
 8001148:	0800d0ac 	.word	0x0800d0ac
 800114c:	0800d0c0 	.word	0x0800d0c0
 8001150:	0800d0d4 	.word	0x0800d0d4

08001154 <checkSlideVal>:

int checkSlideVal(int state) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d111      	bne.n	8001186 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001162:	2101      	movs	r1, #1
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <checkSlideVal+0x60>)
 8001166:	f008 f92d 	bl	80093c4 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b01      	cmp	r3, #1
 800116e:	d101      	bne.n	8001174 <checkSlideVal+0x20>
			return 34;
 8001170:	2322      	movs	r3, #34	; 0x22
 8001172:	e01b      	b.n	80011ac <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001174:	2108      	movs	r1, #8
 8001176:	4810      	ldr	r0, [pc, #64]	; (80011b8 <checkSlideVal+0x64>)
 8001178:	f008 f924 	bl	80093c4 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b01      	cmp	r3, #1
 8001180:	d113      	bne.n	80011aa <checkSlideVal+0x56>
			return 32;
 8001182:	2320      	movs	r3, #32
 8001184:	e012      	b.n	80011ac <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001186:	2101      	movs	r1, #1
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <checkSlideVal+0x60>)
 800118a:	f008 f91b 	bl	80093c4 <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <checkSlideVal+0x44>
			return 35;
 8001194:	2323      	movs	r3, #35	; 0x23
 8001196:	e009      	b.n	80011ac <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001198:	2108      	movs	r1, #8
 800119a:	4807      	ldr	r0, [pc, #28]	; (80011b8 <checkSlideVal+0x64>)
 800119c:	f008 f912 	bl	80093c4 <HAL_GPIO_ReadPin>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d101      	bne.n	80011aa <checkSlideVal+0x56>
			return 33;
 80011a6:	2321      	movs	r3, #33	; 0x21
 80011a8:	e000      	b.n	80011ac <checkSlideVal+0x58>
		}
	}
	return 0;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40010800 	.word	0x40010800
 80011b8:	40011000 	.word	0x40011000

080011bc <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff f82a 	bl	8000224 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 80011d8:	e08a      	b.n	80012f0 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 80011da:	6838      	ldr	r0, [r7, #0]
 80011dc:	f7ff ffba 	bl	8001154 <checkSlideVal>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	dd07      	ble.n	80011f6 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 80011e6:	6838      	ldr	r0, [r7, #0]
 80011e8:	f7ff ffb4 	bl	8001154 <checkSlideVal>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b44      	ldr	r3, [pc, #272]	; (8001304 <slideText+0x148>)
 80011f2:	701a      	strb	r2, [r3, #0]
			break;
 80011f4:	e081      	b.n	80012fa <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
 80011fa:	e075      	b.n	80012e8 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80011fc:	6838      	ldr	r0, [r7, #0]
 80011fe:	f7ff ffa9 	bl	8001154 <checkSlideVal>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	dd09      	ble.n	800121c <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001208:	6838      	ldr	r0, [r7, #0]
 800120a:	f7ff ffa3 	bl	8001154 <checkSlideVal>
 800120e:	4603      	mov	r3, r0
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <slideText+0x148>)
 8001214:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800121a:	e069      	b.n	80012f0 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	4413      	add	r3, r2
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	e029      	b.n	800127a <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001226:	6838      	ldr	r0, [r7, #0]
 8001228:	f7ff ff94 	bl	8001154 <checkSlideVal>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	dd0b      	ble.n	800124a <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8001232:	6838      	ldr	r0, [r7, #0]
 8001234:	f7ff ff8e 	bl	8001154 <checkSlideVal>
 8001238:	4603      	mov	r3, r0
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b31      	ldr	r3, [pc, #196]	; (8001304 <slideText+0x148>)
 800123e:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001248:	e01d      	b.n	8001286 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	b2d8      	uxtb	r0, r3
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	b2d9      	uxtb	r1, r3
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	461a      	mov	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	f006 fd9a 	bl	8007da2 <lcd_print_char>
				HAL_Delay(30);
 800126e:	201e      	movs	r0, #30
 8001270:	f007 fad8 	bl	8008824 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	3301      	adds	r3, #1
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	7dfa      	ldrb	r2, [r7, #23]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4413      	add	r3, r2
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	429a      	cmp	r2, r3
 8001284:	dbcf      	blt.n	8001226 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	3b01      	subs	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	e023      	b.n	80012d6 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800128e:	6838      	ldr	r0, [r7, #0]
 8001290:	f7ff ff60 	bl	8001154 <checkSlideVal>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	dd0b      	ble.n	80012b2 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 800129a:	6838      	ldr	r0, [r7, #0]
 800129c:	f7ff ff5a 	bl	8001154 <checkSlideVal>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <slideText+0x148>)
 80012a6:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80012b0:	e017      	b.n	80012e2 <slideText+0x126>
				}
			     if(j >= startPos) {
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	db0a      	blt.n	80012d0 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	b2d1      	uxtb	r1, r2
 80012c2:	2220      	movs	r2, #32
 80012c4:	4618      	mov	r0, r3
 80012c6:	f006 fd6c 	bl	8007da2 <lcd_print_char>
			    	 HAL_Delay(30);
 80012ca:	201e      	movs	r0, #30
 80012cc:	f007 faaa 	bl	8008824 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	7dfa      	ldrb	r2, [r7, #23]
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	429a      	cmp	r2, r3
 80012e0:	dad5      	bge.n	800128e <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	3301      	adds	r3, #1
 80012e6:	623b      	str	r3, [r7, #32]
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	6a3a      	ldr	r2, [r7, #32]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	db85      	blt.n	80011fc <slideText+0x40>
	while(mainLoopVal == 1) {
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	f43f af71 	beq.w	80011da <slideText+0x1e>
			     }
			}
		}
	}
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	; 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200001ec 	.word	0x200001ec

08001308 <printCredentials>:

void printCredentials(int type) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d119      	bne.n	800134a <printCredentials+0x42>
		//machine id yazdır
		if(dilSecim == 0) {
 8001316:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <printCredentials+0xf8>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <printCredentials+0x22>
			lcd_print(1, 1, "MAKINE ID       ");
 800131e:	4a39      	ldr	r2, [pc, #228]	; (8001404 <printCredentials+0xfc>)
 8001320:	2101      	movs	r1, #1
 8001322:	2001      	movs	r0, #1
 8001324:	f006 fd28 	bl	8007d78 <lcd_print>
 8001328:	e004      	b.n	8001334 <printCredentials+0x2c>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 800132a:	4a37      	ldr	r2, [pc, #220]	; (8001408 <printCredentials+0x100>)
 800132c:	2101      	movs	r1, #1
 800132e:	2001      	movs	r0, #1
 8001330:	f006 fd22 	bl	8007d78 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 8001334:	4a35      	ldr	r2, [pc, #212]	; (800140c <printCredentials+0x104>)
 8001336:	2101      	movs	r1, #1
 8001338:	2002      	movs	r0, #2
 800133a:	f006 fd1d 	bl	8007d78 <lcd_print>
		lcd_print(2, 13, "    ");
 800133e:	4a34      	ldr	r2, [pc, #208]	; (8001410 <printCredentials+0x108>)
 8001340:	210d      	movs	r1, #13
 8001342:	2002      	movs	r0, #2
 8001344:	f006 fd18 	bl	8007d78 <lcd_print>

			//Eğer pass 16'dan büyükse buraya ekle
			slideText(wifiPass, 1, 2, 1);
		}
	}
}
 8001348:	e055      	b.n	80013f6 <printCredentials+0xee>
	} else if(type == 2) {
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d129      	bne.n	80013a4 <printCredentials+0x9c>
		int ssidLength = strlen(wifiSSID);
 8001350:	4830      	ldr	r0, [pc, #192]	; (8001414 <printCredentials+0x10c>)
 8001352:	f7fe ff67 	bl	8000224 <strlen>
 8001356:	4603      	mov	r3, r0
 8001358:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI SSID       ");
 800135a:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <printCredentials+0x110>)
 800135c:	2101      	movs	r1, #1
 800135e:	2001      	movs	r0, #1
 8001360:	f006 fd0a 	bl	8007d78 <lcd_print>
		if(ssidLength == 16) {
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b10      	cmp	r3, #16
 8001368:	d105      	bne.n	8001376 <printCredentials+0x6e>
			lcd_print(2, 1, wifiSSID);
 800136a:	4a2a      	ldr	r2, [pc, #168]	; (8001414 <printCredentials+0x10c>)
 800136c:	2101      	movs	r1, #1
 800136e:	2002      	movs	r0, #2
 8001370:	f006 fd02 	bl	8007d78 <lcd_print>
}
 8001374:	e03f      	b.n	80013f6 <printCredentials+0xee>
		} else if(ssidLength < 16) {
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	dc0a      	bgt.n	8001392 <printCredentials+0x8a>
			lcd_print(2, 1, "                ");
 800137c:	4a27      	ldr	r2, [pc, #156]	; (800141c <printCredentials+0x114>)
 800137e:	2101      	movs	r1, #1
 8001380:	2002      	movs	r0, #2
 8001382:	f006 fcf9 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 8001386:	4a23      	ldr	r2, [pc, #140]	; (8001414 <printCredentials+0x10c>)
 8001388:	2101      	movs	r1, #1
 800138a:	2002      	movs	r0, #2
 800138c:	f006 fcf4 	bl	8007d78 <lcd_print>
}
 8001390:	e031      	b.n	80013f6 <printCredentials+0xee>
			int lcdVal = 1;
 8001392:	2301      	movs	r3, #1
 8001394:	60bb      	str	r3, [r7, #8]
			slideText(wifiSSID, 1, 2, 0);
 8001396:	2300      	movs	r3, #0
 8001398:	2202      	movs	r2, #2
 800139a:	2101      	movs	r1, #1
 800139c:	481d      	ldr	r0, [pc, #116]	; (8001414 <printCredentials+0x10c>)
 800139e:	f7ff ff0d 	bl	80011bc <slideText>
}
 80013a2:	e028      	b.n	80013f6 <printCredentials+0xee>
		int passLength = strlen(wifiPass);
 80013a4:	481e      	ldr	r0, [pc, #120]	; (8001420 <printCredentials+0x118>)
 80013a6:	f7fe ff3d 	bl	8000224 <strlen>
 80013aa:	4603      	mov	r3, r0
 80013ac:	617b      	str	r3, [r7, #20]
		lcd_print(1, 1, "WIFI PASS       ");
 80013ae:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <printCredentials+0x11c>)
 80013b0:	2101      	movs	r1, #1
 80013b2:	2001      	movs	r0, #1
 80013b4:	f006 fce0 	bl	8007d78 <lcd_print>
		if(passLength == 16) {
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2b10      	cmp	r3, #16
 80013bc:	d105      	bne.n	80013ca <printCredentials+0xc2>
			lcd_print(2, 1, wifiPass);
 80013be:	4a18      	ldr	r2, [pc, #96]	; (8001420 <printCredentials+0x118>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	2002      	movs	r0, #2
 80013c4:	f006 fcd8 	bl	8007d78 <lcd_print>
}
 80013c8:	e015      	b.n	80013f6 <printCredentials+0xee>
		} else if(passLength < 16) {
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	dc0a      	bgt.n	80013e6 <printCredentials+0xde>
			lcd_print(2, 1, "                ");
 80013d0:	4a12      	ldr	r2, [pc, #72]	; (800141c <printCredentials+0x114>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	2002      	movs	r0, #2
 80013d6:	f006 fccf 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, wifiPass);
 80013da:	4a11      	ldr	r2, [pc, #68]	; (8001420 <printCredentials+0x118>)
 80013dc:	2101      	movs	r1, #1
 80013de:	2002      	movs	r0, #2
 80013e0:	f006 fcca 	bl	8007d78 <lcd_print>
}
 80013e4:	e007      	b.n	80013f6 <printCredentials+0xee>
			int lcdVal = 1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
			slideText(wifiPass, 1, 2, 1);
 80013ea:	2301      	movs	r3, #1
 80013ec:	2202      	movs	r2, #2
 80013ee:	2101      	movs	r1, #1
 80013f0:	480b      	ldr	r0, [pc, #44]	; (8001420 <printCredentials+0x118>)
 80013f2:	f7ff fee3 	bl	80011bc <slideText>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000020d 	.word	0x2000020d
 8001404:	0800d0dc 	.word	0x0800d0dc
 8001408:	0800d0f0 	.word	0x0800d0f0
 800140c:	20000190 	.word	0x20000190
 8001410:	0800d104 	.word	0x0800d104
 8001414:	2000019c 	.word	0x2000019c
 8001418:	0800d10c 	.word	0x0800d10c
 800141c:	0800d120 	.word	0x0800d120
 8001420:	200001b0 	.word	0x200001b0
 8001424:	0800d134 	.word	0x0800d134

08001428 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800142c:	f3bf 8f4f 	dsb	sy
}
 8001430:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <__NVIC_SystemReset+0x24>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800143a:	4904      	ldr	r1, [pc, #16]	; (800144c <__NVIC_SystemReset+0x24>)
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <__NVIC_SystemReset+0x28>)
 800143e:	4313      	orrs	r3, r2
 8001440:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001442:	f3bf 8f4f 	dsb	sy
}
 8001446:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <__NVIC_SystemReset+0x20>
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	05fa0004 	.word	0x05fa0004

08001454 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800145a:	2101      	movs	r1, #1
 800145c:	488e      	ldr	r0, [pc, #568]	; (8001698 <menu+0x244>)
 800145e:	f007 ffb1 	bl	80093c4 <HAL_GPIO_ReadPin>
 8001462:	4603      	mov	r3, r0
 8001464:	2b01      	cmp	r3, #1
 8001466:	f040 808e 	bne.w	8001586 <menu+0x132>
 800146a:	4b8c      	ldr	r3, [pc, #560]	; (800169c <menu+0x248>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	f083 0301 	eor.w	r3, r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 8086 	beq.w	8001586 <menu+0x132>
		menuSayac = menuSayac+1;
 800147a:	4b89      	ldr	r3, [pc, #548]	; (80016a0 <menu+0x24c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b87      	ldr	r3, [pc, #540]	; (80016a0 <menu+0x24c>)
 8001484:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001486:	4b86      	ldr	r3, [pc, #536]	; (80016a0 <menu+0x24c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b24      	cmp	r3, #36	; 0x24
 800148c:	d102      	bne.n	8001494 <menu+0x40>
			menuSayac = 1;
 800148e:	4b84      	ldr	r3, [pc, #528]	; (80016a0 <menu+0x24c>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001494:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <menu+0x24c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b12      	cmp	r3, #18
 800149a:	d106      	bne.n	80014aa <menu+0x56>
 800149c:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <menu+0x250>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <menu+0x56>
			menuSayac = 21;
 80014a4:	4b7e      	ldr	r3, [pc, #504]	; (80016a0 <menu+0x24c>)
 80014a6:	2215      	movs	r2, #21
 80014a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <menu+0x24c>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d106      	bne.n	80014c0 <menu+0x6c>
 80014b2:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <menu+0x254>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <menu+0x6c>
			menuSayac = 16;
 80014ba:	4b79      	ldr	r3, [pc, #484]	; (80016a0 <menu+0x24c>)
 80014bc:	2210      	movs	r2, #16
 80014be:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80014c0:	4b77      	ldr	r3, [pc, #476]	; (80016a0 <menu+0x24c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b0d      	cmp	r3, #13
 80014c6:	d106      	bne.n	80014d6 <menu+0x82>
 80014c8:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <menu+0x254>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d102      	bne.n	80014d6 <menu+0x82>
			menuSayac = 16;
 80014d0:	4b73      	ldr	r3, [pc, #460]	; (80016a0 <menu+0x24c>)
 80014d2:	2210      	movs	r2, #16
 80014d4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80014d6:	4b72      	ldr	r3, [pc, #456]	; (80016a0 <menu+0x24c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b09      	cmp	r3, #9
 80014dc:	d106      	bne.n	80014ec <menu+0x98>
 80014de:	4b72      	ldr	r3, [pc, #456]	; (80016a8 <menu+0x254>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d102      	bne.n	80014ec <menu+0x98>
			menuSayac = 13;
 80014e6:	4b6e      	ldr	r3, [pc, #440]	; (80016a0 <menu+0x24c>)
 80014e8:	220d      	movs	r2, #13
 80014ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80014ec:	4b6c      	ldr	r3, [pc, #432]	; (80016a0 <menu+0x24c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b0a      	cmp	r3, #10
 80014f2:	d10a      	bne.n	800150a <menu+0xb6>
 80014f4:	4b6d      	ldr	r3, [pc, #436]	; (80016ac <menu+0x258>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d003      	beq.n	8001504 <menu+0xb0>
 80014fc:	4b6b      	ldr	r3, [pc, #428]	; (80016ac <menu+0x258>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d102      	bne.n	800150a <menu+0xb6>
			menuSayac = 11;
 8001504:	4b66      	ldr	r3, [pc, #408]	; (80016a0 <menu+0x24c>)
 8001506:	220b      	movs	r2, #11
 8001508:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800150a:	4b65      	ldr	r3, [pc, #404]	; (80016a0 <menu+0x24c>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b0c      	cmp	r3, #12
 8001510:	d10e      	bne.n	8001530 <menu+0xdc>
 8001512:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <menu+0x25c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d003      	beq.n	8001522 <menu+0xce>
 800151a:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <menu+0x25c>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d106      	bne.n	8001530 <menu+0xdc>
 8001522:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <menu+0x254>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d102      	bne.n	8001530 <menu+0xdc>
			menuSayac = 16;
 800152a:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <menu+0x24c>)
 800152c:	2210      	movs	r2, #16
 800152e:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001530:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <menu+0x24c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	d10e      	bne.n	8001556 <menu+0x102>
 8001538:	4b5d      	ldr	r3, [pc, #372]	; (80016b0 <menu+0x25c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d003      	beq.n	8001548 <menu+0xf4>
 8001540:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <menu+0x25c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d106      	bne.n	8001556 <menu+0x102>
 8001548:	4b57      	ldr	r3, [pc, #348]	; (80016a8 <menu+0x254>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b03      	cmp	r3, #3
 800154e:	d102      	bne.n	8001556 <menu+0x102>
			menuSayac = 13;
 8001550:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <menu+0x24c>)
 8001552:	220d      	movs	r2, #13
 8001554:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001556:	4b52      	ldr	r3, [pc, #328]	; (80016a0 <menu+0x24c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	d106      	bne.n	800156c <menu+0x118>
 800155e:	4b55      	ldr	r3, [pc, #340]	; (80016b4 <menu+0x260>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d102      	bne.n	800156c <menu+0x118>
			menuSayac = 16;
 8001566:	4b4e      	ldr	r3, [pc, #312]	; (80016a0 <menu+0x24c>)
 8001568:	2210      	movs	r2, #16
 800156a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800156c:	4b4c      	ldr	r3, [pc, #304]	; (80016a0 <menu+0x24c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b18      	cmp	r3, #24
 8001572:	d106      	bne.n	8001582 <menu+0x12e>
 8001574:	4b4b      	ldr	r3, [pc, #300]	; (80016a4 <menu+0x250>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <menu+0x12e>
			menuSayac = 26;
 800157c:	4b48      	ldr	r3, [pc, #288]	; (80016a0 <menu+0x24c>)
 800157e:	221a      	movs	r2, #26
 8001580:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001582:	f003 fac3 	bl	8004b0c <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001586:	2108      	movs	r1, #8
 8001588:	484b      	ldr	r0, [pc, #300]	; (80016b8 <menu+0x264>)
 800158a:	f007 ff1b 	bl	80093c4 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	2b01      	cmp	r3, #1
 8001592:	d175      	bne.n	8001680 <menu+0x22c>
 8001594:	4b41      	ldr	r3, [pc, #260]	; (800169c <menu+0x248>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	f083 0301 	eor.w	r3, r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d06e      	beq.n	8001680 <menu+0x22c>
		if (menuSayac <= 1) {
 80015a2:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <menu+0x24c>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d802      	bhi.n	80015b0 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80015aa:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <menu+0x24c>)
 80015ac:	2224      	movs	r2, #36	; 0x24
 80015ae:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80015b0:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <menu+0x24c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <menu+0x24c>)
 80015ba:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80015bc:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <menu+0x24c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b14      	cmp	r3, #20
 80015c2:	d106      	bne.n	80015d2 <menu+0x17e>
 80015c4:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <menu+0x250>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <menu+0x17e>
			menuSayac = 17;
 80015cc:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <menu+0x24c>)
 80015ce:	2211      	movs	r2, #17
 80015d0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80015d2:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <menu+0x24c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b0f      	cmp	r3, #15
 80015d8:	d106      	bne.n	80015e8 <menu+0x194>
 80015da:	4b33      	ldr	r3, [pc, #204]	; (80016a8 <menu+0x254>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <menu+0x194>
			menuSayac = 7;
 80015e2:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <menu+0x24c>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <menu+0x24c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d106      	bne.n	80015fe <menu+0x1aa>
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <menu+0x254>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d102      	bne.n	80015fe <menu+0x1aa>
			menuSayac = 12;
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <menu+0x24c>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80015fe:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <menu+0x24c>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b0c      	cmp	r3, #12
 8001604:	d106      	bne.n	8001614 <menu+0x1c0>
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <menu+0x254>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d102      	bne.n	8001614 <menu+0x1c0>
			menuSayac = 8;
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <menu+0x24c>)
 8001610:	2208      	movs	r2, #8
 8001612:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <menu+0x24c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b0a      	cmp	r3, #10
 800161a:	d10a      	bne.n	8001632 <menu+0x1de>
 800161c:	4b23      	ldr	r3, [pc, #140]	; (80016ac <menu+0x258>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d003      	beq.n	800162c <menu+0x1d8>
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <menu+0x258>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d102      	bne.n	8001632 <menu+0x1de>
			menuSayac = 9;
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <menu+0x24c>)
 800162e:	2209      	movs	r2, #9
 8001630:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <menu+0x24c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b0c      	cmp	r3, #12
 8001638:	d10a      	bne.n	8001650 <menu+0x1fc>
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <menu+0x25c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d003      	beq.n	800164a <menu+0x1f6>
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <menu+0x25c>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d102      	bne.n	8001650 <menu+0x1fc>
			menuSayac = 11;
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <menu+0x24c>)
 800164c:	220b      	movs	r2, #11
 800164e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <menu+0x24c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d106      	bne.n	8001666 <menu+0x212>
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <menu+0x260>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d102      	bne.n	8001666 <menu+0x212>
			menuSayac = 14;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <menu+0x24c>)
 8001662:	220e      	movs	r2, #14
 8001664:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <menu+0x24c>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b19      	cmp	r3, #25
 800166c:	d106      	bne.n	800167c <menu+0x228>
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <menu+0x250>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <menu+0x228>
			menuSayac = 23;
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <menu+0x24c>)
 8001678:	2217      	movs	r2, #23
 800167a:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800167c:	f003 fa46 	bl	8004b0c <bekle>
	}

	if (menuSayac == 0) {
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <menu+0x24c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d133      	bne.n	80016f0 <menu+0x29c>
		if(dilSecim == 0) {
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <menu+0x268>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d121      	bne.n	80016d4 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <menu+0x26c>)
 8001692:	2101      	movs	r1, #1
 8001694:	2001      	movs	r0, #1
 8001696:	e015      	b.n	80016c4 <menu+0x270>
 8001698:	40010800 	.word	0x40010800
 800169c:	2000021b 	.word	0x2000021b
 80016a0:	200001ec 	.word	0x200001ec
 80016a4:	200001fb 	.word	0x200001fb
 80016a8:	200001f4 	.word	0x200001f4
 80016ac:	200001f5 	.word	0x200001f5
 80016b0:	200001f6 	.word	0x200001f6
 80016b4:	200001f7 	.word	0x200001f7
 80016b8:	40011000 	.word	0x40011000
 80016bc:	2000020d 	.word	0x2000020d
 80016c0:	0800d148 	.word	0x0800d148
 80016c4:	f006 fb58 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80016c8:	4a94      	ldr	r2, [pc, #592]	; (800191c <menu+0x4c8>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	2002      	movs	r0, #2
 80016ce:	f006 fb53 	bl	8007d78 <lcd_print>
 80016d2:	e00d      	b.n	80016f0 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80016d4:	4b92      	ldr	r3, [pc, #584]	; (8001920 <menu+0x4cc>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d109      	bne.n	80016f0 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80016dc:	4a91      	ldr	r2, [pc, #580]	; (8001924 <menu+0x4d0>)
 80016de:	2101      	movs	r1, #1
 80016e0:	2001      	movs	r0, #1
 80016e2:	f006 fb49 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80016e6:	4a90      	ldr	r2, [pc, #576]	; (8001928 <menu+0x4d4>)
 80016e8:	2101      	movs	r1, #1
 80016ea:	2002      	movs	r0, #2
 80016ec:	f006 fb44 	bl	8007d78 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80016f0:	4b8e      	ldr	r3, [pc, #568]	; (800192c <menu+0x4d8>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	f040 82b5 	bne.w	8001c64 <menu+0x810>
		if(dilSecim == 0) {
 80016fa:	4b89      	ldr	r3, [pc, #548]	; (8001920 <menu+0x4cc>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d105      	bne.n	800170e <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001702:	4a8b      	ldr	r2, [pc, #556]	; (8001930 <menu+0x4dc>)
 8001704:	2101      	movs	r1, #1
 8001706:	2001      	movs	r0, #1
 8001708:	f006 fb36 	bl	8007d78 <lcd_print>
 800170c:	e008      	b.n	8001720 <menu+0x2cc>
		} else if(dilSecim == 1) {
 800170e:	4b84      	ldr	r3, [pc, #528]	; (8001920 <menu+0x4cc>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d104      	bne.n	8001720 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001716:	4a87      	ldr	r2, [pc, #540]	; (8001934 <menu+0x4e0>)
 8001718:	2101      	movs	r1, #1
 800171a:	2001      	movs	r0, #1
 800171c:	f006 fb2c 	bl	8007d78 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001720:	4b85      	ldr	r3, [pc, #532]	; (8001938 <menu+0x4e4>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d123      	bne.n	8001770 <menu+0x31c>
			if(dilSecim == 0) {
 8001728:	4b7d      	ldr	r3, [pc, #500]	; (8001920 <menu+0x4cc>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d105      	bne.n	800173c <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001730:	4a82      	ldr	r2, [pc, #520]	; (800193c <menu+0x4e8>)
 8001732:	2101      	movs	r1, #1
 8001734:	2002      	movs	r0, #2
 8001736:	f006 fb1f 	bl	8007d78 <lcd_print>
 800173a:	e008      	b.n	800174e <menu+0x2fa>

			} else if(dilSecim == 1) {
 800173c:	4b78      	ldr	r3, [pc, #480]	; (8001920 <menu+0x4cc>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d104      	bne.n	800174e <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001744:	4a7e      	ldr	r2, [pc, #504]	; (8001940 <menu+0x4ec>)
 8001746:	2101      	movs	r1, #1
 8001748:	2002      	movs	r0, #2
 800174a:	f006 fb15 	bl	8007d78 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800174e:	4a7d      	ldr	r2, [pc, #500]	; (8001944 <menu+0x4f0>)
 8001750:	210f      	movs	r1, #15
 8001752:	2002      	movs	r0, #2
 8001754:	f006 fb10 	bl	8007d78 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001758:	4b7b      	ldr	r3, [pc, #492]	; (8001948 <menu+0x4f4>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	220a      	movs	r2, #10
 800175e:	497b      	ldr	r1, [pc, #492]	; (800194c <menu+0x4f8>)
 8001760:	4618      	mov	r0, r3
 8001762:	f00a fe5b 	bl	800c41c <itoa>
			lcd_print(2, 14, snum);
 8001766:	4a79      	ldr	r2, [pc, #484]	; (800194c <menu+0x4f8>)
 8001768:	210e      	movs	r1, #14
 800176a:	2002      	movs	r0, #2
 800176c:	f006 fb04 	bl	8007d78 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001770:	4b71      	ldr	r3, [pc, #452]	; (8001938 <menu+0x4e4>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d123      	bne.n	80017c0 <menu+0x36c>
			if(dilSecim == 0) {
 8001778:	4b69      	ldr	r3, [pc, #420]	; (8001920 <menu+0x4cc>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d105      	bne.n	800178c <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001780:	4a73      	ldr	r2, [pc, #460]	; (8001950 <menu+0x4fc>)
 8001782:	2101      	movs	r1, #1
 8001784:	2002      	movs	r0, #2
 8001786:	f006 faf7 	bl	8007d78 <lcd_print>
 800178a:	e008      	b.n	800179e <menu+0x34a>
			} else if(dilSecim == 1) {
 800178c:	4b64      	ldr	r3, [pc, #400]	; (8001920 <menu+0x4cc>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d104      	bne.n	800179e <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001794:	4a6f      	ldr	r2, [pc, #444]	; (8001954 <menu+0x500>)
 8001796:	2101      	movs	r1, #1
 8001798:	2002      	movs	r0, #2
 800179a:	f006 faed 	bl	8007d78 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800179e:	4a6e      	ldr	r2, [pc, #440]	; (8001958 <menu+0x504>)
 80017a0:	210f      	movs	r1, #15
 80017a2:	2002      	movs	r0, #2
 80017a4:	f006 fae8 	bl	8007d78 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80017a8:	4b6c      	ldr	r3, [pc, #432]	; (800195c <menu+0x508>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	220a      	movs	r2, #10
 80017ae:	4967      	ldr	r1, [pc, #412]	; (800194c <menu+0x4f8>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00a fe33 	bl	800c41c <itoa>
			lcd_print(2, 14, snum);
 80017b6:	4a65      	ldr	r2, [pc, #404]	; (800194c <menu+0x4f8>)
 80017b8:	210e      	movs	r1, #14
 80017ba:	2002      	movs	r0, #2
 80017bc:	f006 fadc 	bl	8007d78 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80017c0:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <menu+0x4e4>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d123      	bne.n	8001810 <menu+0x3bc>
			if(dilSecim == 0) {
 80017c8:	4b55      	ldr	r3, [pc, #340]	; (8001920 <menu+0x4cc>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80017d0:	4a63      	ldr	r2, [pc, #396]	; (8001960 <menu+0x50c>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	2002      	movs	r0, #2
 80017d6:	f006 facf 	bl	8007d78 <lcd_print>
 80017da:	e008      	b.n	80017ee <menu+0x39a>
			} else if(dilSecim == 1) {
 80017dc:	4b50      	ldr	r3, [pc, #320]	; (8001920 <menu+0x4cc>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d104      	bne.n	80017ee <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80017e4:	4a5f      	ldr	r2, [pc, #380]	; (8001964 <menu+0x510>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	2002      	movs	r0, #2
 80017ea:	f006 fac5 	bl	8007d78 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017ee:	4a5a      	ldr	r2, [pc, #360]	; (8001958 <menu+0x504>)
 80017f0:	210f      	movs	r1, #15
 80017f2:	2002      	movs	r0, #2
 80017f4:	f006 fac0 	bl	8007d78 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80017f8:	4b5b      	ldr	r3, [pc, #364]	; (8001968 <menu+0x514>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	220a      	movs	r2, #10
 80017fe:	4953      	ldr	r1, [pc, #332]	; (800194c <menu+0x4f8>)
 8001800:	4618      	mov	r0, r3
 8001802:	f00a fe0b 	bl	800c41c <itoa>
			lcd_print(2, 14, snum);
 8001806:	4a51      	ldr	r2, [pc, #324]	; (800194c <menu+0x4f8>)
 8001808:	210e      	movs	r1, #14
 800180a:	2002      	movs	r0, #2
 800180c:	f006 fab4 	bl	8007d78 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001810:	4b49      	ldr	r3, [pc, #292]	; (8001938 <menu+0x4e4>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d123      	bne.n	8001860 <menu+0x40c>
			if(dilSecim == 0) {
 8001818:	4b41      	ldr	r3, [pc, #260]	; (8001920 <menu+0x4cc>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d105      	bne.n	800182c <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001820:	4a52      	ldr	r2, [pc, #328]	; (800196c <menu+0x518>)
 8001822:	2101      	movs	r1, #1
 8001824:	2002      	movs	r0, #2
 8001826:	f006 faa7 	bl	8007d78 <lcd_print>
 800182a:	e008      	b.n	800183e <menu+0x3ea>
			} else if(dilSecim == 1) {
 800182c:	4b3c      	ldr	r3, [pc, #240]	; (8001920 <menu+0x4cc>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d104      	bne.n	800183e <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001834:	4a4e      	ldr	r2, [pc, #312]	; (8001970 <menu+0x51c>)
 8001836:	2101      	movs	r1, #1
 8001838:	2002      	movs	r0, #2
 800183a:	f006 fa9d 	bl	8007d78 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800183e:	4a46      	ldr	r2, [pc, #280]	; (8001958 <menu+0x504>)
 8001840:	210f      	movs	r1, #15
 8001842:	2002      	movs	r0, #2
 8001844:	f006 fa98 	bl	8007d78 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001848:	4b4a      	ldr	r3, [pc, #296]	; (8001974 <menu+0x520>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	220a      	movs	r2, #10
 800184e:	493f      	ldr	r1, [pc, #252]	; (800194c <menu+0x4f8>)
 8001850:	4618      	mov	r0, r3
 8001852:	f00a fde3 	bl	800c41c <itoa>
			lcd_print(2, 14, snum);
 8001856:	4a3d      	ldr	r2, [pc, #244]	; (800194c <menu+0x4f8>)
 8001858:	210e      	movs	r1, #14
 800185a:	2002      	movs	r0, #2
 800185c:	f006 fa8c 	bl	8007d78 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <menu+0x4e4>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b04      	cmp	r3, #4
 8001866:	d123      	bne.n	80018b0 <menu+0x45c>
			if(dilSecim == 0) {
 8001868:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <menu+0x4cc>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d105      	bne.n	800187c <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001870:	4a41      	ldr	r2, [pc, #260]	; (8001978 <menu+0x524>)
 8001872:	2101      	movs	r1, #1
 8001874:	2002      	movs	r0, #2
 8001876:	f006 fa7f 	bl	8007d78 <lcd_print>
 800187a:	e008      	b.n	800188e <menu+0x43a>
			} else if(dilSecim == 1) {
 800187c:	4b28      	ldr	r3, [pc, #160]	; (8001920 <menu+0x4cc>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d104      	bne.n	800188e <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001884:	4a3d      	ldr	r2, [pc, #244]	; (800197c <menu+0x528>)
 8001886:	2101      	movs	r1, #1
 8001888:	2002      	movs	r0, #2
 800188a:	f006 fa75 	bl	8007d78 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800188e:	4a32      	ldr	r2, [pc, #200]	; (8001958 <menu+0x504>)
 8001890:	210f      	movs	r1, #15
 8001892:	2002      	movs	r0, #2
 8001894:	f006 fa70 	bl	8007d78 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001898:	4b39      	ldr	r3, [pc, #228]	; (8001980 <menu+0x52c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	220a      	movs	r2, #10
 800189e:	492b      	ldr	r1, [pc, #172]	; (800194c <menu+0x4f8>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00a fdbb 	bl	800c41c <itoa>
			lcd_print(2, 14, snum);
 80018a6:	4a29      	ldr	r2, [pc, #164]	; (800194c <menu+0x4f8>)
 80018a8:	210e      	movs	r1, #14
 80018aa:	2002      	movs	r0, #2
 80018ac:	f006 fa64 	bl	8007d78 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <menu+0x4e4>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b05      	cmp	r3, #5
 80018b6:	d123      	bne.n	8001900 <menu+0x4ac>
			if(dilSecim == 0) {
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <menu+0x4cc>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d105      	bne.n	80018cc <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80018c0:	4a30      	ldr	r2, [pc, #192]	; (8001984 <menu+0x530>)
 80018c2:	2101      	movs	r1, #1
 80018c4:	2002      	movs	r0, #2
 80018c6:	f006 fa57 	bl	8007d78 <lcd_print>
 80018ca:	e008      	b.n	80018de <menu+0x48a>
			} else if(dilSecim == 1) {
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <menu+0x4cc>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d104      	bne.n	80018de <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 80018d4:	4a2c      	ldr	r2, [pc, #176]	; (8001988 <menu+0x534>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	2002      	movs	r0, #2
 80018da:	f006 fa4d 	bl	8007d78 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018de:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <menu+0x504>)
 80018e0:	210f      	movs	r1, #15
 80018e2:	2002      	movs	r0, #2
 80018e4:	f006 fa48 	bl	8007d78 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <menu+0x538>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	220a      	movs	r2, #10
 80018ee:	4917      	ldr	r1, [pc, #92]	; (800194c <menu+0x4f8>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f00a fd93 	bl	800c41c <itoa>
			lcd_print(2, 14, snum);
 80018f6:	4a15      	ldr	r2, [pc, #84]	; (800194c <menu+0x4f8>)
 80018f8:	210e      	movs	r1, #14
 80018fa:	2002      	movs	r0, #2
 80018fc:	f006 fa3c 	bl	8007d78 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <menu+0x4e4>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b06      	cmp	r3, #6
 8001906:	d15f      	bne.n	80019c8 <menu+0x574>
			if(dilSecim == 0) {
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <menu+0x4cc>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d141      	bne.n	8001994 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001910:	4a1f      	ldr	r2, [pc, #124]	; (8001990 <menu+0x53c>)
 8001912:	2101      	movs	r1, #1
 8001914:	2002      	movs	r0, #2
 8001916:	f006 fa2f 	bl	8007d78 <lcd_print>
 800191a:	e044      	b.n	80019a6 <menu+0x552>
 800191c:	0800d15c 	.word	0x0800d15c
 8001920:	2000020d 	.word	0x2000020d
 8001924:	0800d170 	.word	0x0800d170
 8001928:	0800d184 	.word	0x0800d184
 800192c:	200001ec 	.word	0x200001ec
 8001930:	0800d198 	.word	0x0800d198
 8001934:	0800d1ac 	.word	0x0800d1ac
 8001938:	200001ee 	.word	0x200001ee
 800193c:	0800d1c0 	.word	0x0800d1c0
 8001940:	0800d1d0 	.word	0x0800d1d0
 8001944:	0800d1e0 	.word	0x0800d1e0
 8001948:	2000020e 	.word	0x2000020e
 800194c:	20000188 	.word	0x20000188
 8001950:	0800d1e4 	.word	0x0800d1e4
 8001954:	0800d1f4 	.word	0x0800d1f4
 8001958:	0800d204 	.word	0x0800d204
 800195c:	2000020f 	.word	0x2000020f
 8001960:	0800d208 	.word	0x0800d208
 8001964:	0800d218 	.word	0x0800d218
 8001968:	20000210 	.word	0x20000210
 800196c:	0800d228 	.word	0x0800d228
 8001970:	0800d238 	.word	0x0800d238
 8001974:	20000211 	.word	0x20000211
 8001978:	0800d248 	.word	0x0800d248
 800197c:	0800d258 	.word	0x0800d258
 8001980:	20000212 	.word	0x20000212
 8001984:	0800d268 	.word	0x0800d268
 8001988:	0800d278 	.word	0x0800d278
 800198c:	20000213 	.word	0x20000213
 8001990:	0800d288 	.word	0x0800d288
			} else if(dilSecim == 1) {
 8001994:	4b4f      	ldr	r3, [pc, #316]	; (8001ad4 <menu+0x680>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d104      	bne.n	80019a6 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 800199c:	4a4e      	ldr	r2, [pc, #312]	; (8001ad8 <menu+0x684>)
 800199e:	2101      	movs	r1, #1
 80019a0:	2002      	movs	r0, #2
 80019a2:	f006 f9e9 	bl	8007d78 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019a6:	4a4d      	ldr	r2, [pc, #308]	; (8001adc <menu+0x688>)
 80019a8:	210f      	movs	r1, #15
 80019aa:	2002      	movs	r0, #2
 80019ac:	f006 f9e4 	bl	8007d78 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80019b0:	4b4b      	ldr	r3, [pc, #300]	; (8001ae0 <menu+0x68c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	220a      	movs	r2, #10
 80019b6:	494b      	ldr	r1, [pc, #300]	; (8001ae4 <menu+0x690>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f00a fd2f 	bl	800c41c <itoa>
			lcd_print(2, 14, snum);
 80019be:	4a49      	ldr	r2, [pc, #292]	; (8001ae4 <menu+0x690>)
 80019c0:	210e      	movs	r1, #14
 80019c2:	2002      	movs	r0, #2
 80019c4:	f006 f9d8 	bl	8007d78 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80019c8:	4b47      	ldr	r3, [pc, #284]	; (8001ae8 <menu+0x694>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b07      	cmp	r3, #7
 80019ce:	d123      	bne.n	8001a18 <menu+0x5c4>
			if(dilSecim == 0) {
 80019d0:	4b40      	ldr	r3, [pc, #256]	; (8001ad4 <menu+0x680>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80019d8:	4a44      	ldr	r2, [pc, #272]	; (8001aec <menu+0x698>)
 80019da:	2101      	movs	r1, #1
 80019dc:	2002      	movs	r0, #2
 80019de:	f006 f9cb 	bl	8007d78 <lcd_print>
 80019e2:	e008      	b.n	80019f6 <menu+0x5a2>
			} else if(dilSecim == 1) {
 80019e4:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <menu+0x680>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d104      	bne.n	80019f6 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 80019ec:	4a40      	ldr	r2, [pc, #256]	; (8001af0 <menu+0x69c>)
 80019ee:	2101      	movs	r1, #1
 80019f0:	2002      	movs	r0, #2
 80019f2:	f006 f9c1 	bl	8007d78 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019f6:	4a39      	ldr	r2, [pc, #228]	; (8001adc <menu+0x688>)
 80019f8:	210f      	movs	r1, #15
 80019fa:	2002      	movs	r0, #2
 80019fc:	f006 f9bc 	bl	8007d78 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001a00:	4b3c      	ldr	r3, [pc, #240]	; (8001af4 <menu+0x6a0>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	220a      	movs	r2, #10
 8001a06:	4937      	ldr	r1, [pc, #220]	; (8001ae4 <menu+0x690>)
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00a fd07 	bl	800c41c <itoa>
			lcd_print(2, 14, snum);
 8001a0e:	4a35      	ldr	r2, [pc, #212]	; (8001ae4 <menu+0x690>)
 8001a10:	210e      	movs	r1, #14
 8001a12:	2002      	movs	r0, #2
 8001a14:	f006 f9b0 	bl	8007d78 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001a18:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <menu+0x694>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d123      	bne.n	8001a68 <menu+0x614>
			if(dilSecim == 0) {
 8001a20:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <menu+0x680>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001a28:	4a33      	ldr	r2, [pc, #204]	; (8001af8 <menu+0x6a4>)
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f006 f9a3 	bl	8007d78 <lcd_print>
 8001a32:	e008      	b.n	8001a46 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001a34:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <menu+0x680>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d104      	bne.n	8001a46 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001a3c:	4a2f      	ldr	r2, [pc, #188]	; (8001afc <menu+0x6a8>)
 8001a3e:	2101      	movs	r1, #1
 8001a40:	2002      	movs	r0, #2
 8001a42:	f006 f999 	bl	8007d78 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a46:	4a25      	ldr	r2, [pc, #148]	; (8001adc <menu+0x688>)
 8001a48:	210f      	movs	r1, #15
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f006 f994 	bl	8007d78 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001a50:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <menu+0x6ac>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	220a      	movs	r2, #10
 8001a56:	4923      	ldr	r1, [pc, #140]	; (8001ae4 <menu+0x690>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00a fcdf 	bl	800c41c <itoa>
			lcd_print(2, 14, snum);
 8001a5e:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <menu+0x690>)
 8001a60:	210e      	movs	r1, #14
 8001a62:	2002      	movs	r0, #2
 8001a64:	f006 f988 	bl	8007d78 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <menu+0x694>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b09      	cmp	r3, #9
 8001a6e:	d123      	bne.n	8001ab8 <menu+0x664>
			if(dilSecim == 0) {
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <menu+0x680>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001a78:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <menu+0x6b0>)
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	f006 f97b 	bl	8007d78 <lcd_print>
 8001a82:	e008      	b.n	8001a96 <menu+0x642>
			} else if(dilSecim == 1) {
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <menu+0x680>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d104      	bne.n	8001a96 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <menu+0x6b4>)
 8001a8e:	2101      	movs	r1, #1
 8001a90:	2002      	movs	r0, #2
 8001a92:	f006 f971 	bl	8007d78 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001a96:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <menu+0x6b8>)
 8001a98:	2110      	movs	r1, #16
 8001a9a:	2002      	movs	r0, #2
 8001a9c:	f006 f96c 	bl	8007d78 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <menu+0x6bc>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	220a      	movs	r2, #10
 8001aa6:	490f      	ldr	r1, [pc, #60]	; (8001ae4 <menu+0x690>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00a fcb7 	bl	800c41c <itoa>
			lcd_print(2, 15, snum);
 8001aae:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <menu+0x690>)
 8001ab0:	210f      	movs	r1, #15
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f006 f960 	bl	8007d78 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <menu+0x694>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b0a      	cmp	r3, #10
 8001abe:	d134      	bne.n	8001b2a <menu+0x6d6>
			if(dilSecim == 0) {
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <menu+0x680>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d127      	bne.n	8001b18 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001ac8:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <menu+0x6c0>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	2002      	movs	r0, #2
 8001ace:	f006 f953 	bl	8007d78 <lcd_print>
 8001ad2:	e02a      	b.n	8001b2a <menu+0x6d6>
 8001ad4:	2000020d 	.word	0x2000020d
 8001ad8:	0800d298 	.word	0x0800d298
 8001adc:	0800d204 	.word	0x0800d204
 8001ae0:	20000214 	.word	0x20000214
 8001ae4:	20000188 	.word	0x20000188
 8001ae8:	200001ee 	.word	0x200001ee
 8001aec:	0800d2a8 	.word	0x0800d2a8
 8001af0:	0800d2b8 	.word	0x0800d2b8
 8001af4:	20000215 	.word	0x20000215
 8001af8:	0800d2c8 	.word	0x0800d2c8
 8001afc:	0800d2d8 	.word	0x0800d2d8
 8001b00:	20000216 	.word	0x20000216
 8001b04:	0800d2e8 	.word	0x0800d2e8
 8001b08:	0800d2f8 	.word	0x0800d2f8
 8001b0c:	0800d308 	.word	0x0800d308
 8001b10:	20000217 	.word	0x20000217
 8001b14:	0800d30c 	.word	0x0800d30c
			} else if(dilSecim == 1) {
 8001b18:	4b82      	ldr	r3, [pc, #520]	; (8001d24 <menu+0x8d0>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d104      	bne.n	8001b2a <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001b20:	4a81      	ldr	r2, [pc, #516]	; (8001d28 <menu+0x8d4>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	2002      	movs	r0, #2
 8001b26:	f006 f927 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	487f      	ldr	r0, [pc, #508]	; (8001d2c <menu+0x8d8>)
 8001b2e:	f007 fc49 	bl	80093c4 <HAL_GPIO_ReadPin>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d119      	bne.n	8001b6c <menu+0x718>
 8001b38:	4b7d      	ldr	r3, [pc, #500]	; (8001d30 <menu+0x8dc>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	f083 0301 	eor.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d012      	beq.n	8001b6c <menu+0x718>
 8001b46:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <menu+0x8e0>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10e      	bne.n	8001b6c <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001b4e:	4b7a      	ldr	r3, [pc, #488]	; (8001d38 <menu+0x8e4>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b78      	ldr	r3, [pc, #480]	; (8001d38 <menu+0x8e4>)
 8001b58:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001b5a:	4b77      	ldr	r3, [pc, #476]	; (8001d38 <menu+0x8e4>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b0a      	cmp	r3, #10
 8001b60:	d902      	bls.n	8001b68 <menu+0x714>
				hataGostermeSirasi = 0;
 8001b62:	4b75      	ldr	r3, [pc, #468]	; (8001d38 <menu+0x8e4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b68:	f002 ffd0 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	486f      	ldr	r0, [pc, #444]	; (8001d2c <menu+0x8d8>)
 8001b70:	f007 fc28 	bl	80093c4 <HAL_GPIO_ReadPin>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d119      	bne.n	8001bae <menu+0x75a>
 8001b7a:	4b6d      	ldr	r3, [pc, #436]	; (8001d30 <menu+0x8dc>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	f083 0301 	eor.w	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d012      	beq.n	8001bae <menu+0x75a>
 8001b88:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <menu+0x8e0>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10e      	bne.n	8001bae <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001b90:	4b69      	ldr	r3, [pc, #420]	; (8001d38 <menu+0x8e4>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b67      	ldr	r3, [pc, #412]	; (8001d38 <menu+0x8e4>)
 8001b9a:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001b9c:	4b66      	ldr	r3, [pc, #408]	; (8001d38 <menu+0x8e4>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b0b      	cmp	r3, #11
 8001ba2:	d902      	bls.n	8001baa <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001ba4:	4b64      	ldr	r3, [pc, #400]	; (8001d38 <menu+0x8e4>)
 8001ba6:	220a      	movs	r2, #10
 8001ba8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001baa:	f002 ffaf 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001bae:	2108      	movs	r1, #8
 8001bb0:	485e      	ldr	r0, [pc, #376]	; (8001d2c <menu+0x8d8>)
 8001bb2:	f007 fc07 	bl	80093c4 <HAL_GPIO_ReadPin>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d153      	bne.n	8001c64 <menu+0x810>
 8001bbc:	4b5c      	ldr	r3, [pc, #368]	; (8001d30 <menu+0x8dc>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	f083 0301 	eor.w	r3, r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d04c      	beq.n	8001c64 <menu+0x810>
 8001bca:	4b5b      	ldr	r3, [pc, #364]	; (8001d38 <menu+0x8e4>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b0a      	cmp	r3, #10
 8001bd0:	d148      	bne.n	8001c64 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001bd2:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <menu+0x8e8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	4b59      	ldr	r3, [pc, #356]	; (8001d40 <menu+0x8ec>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001be0:	4b58      	ldr	r3, [pc, #352]	; (8001d44 <menu+0x8f0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	4b56      	ldr	r3, [pc, #344]	; (8001d40 <menu+0x8ec>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001bee:	4b56      	ldr	r3, [pc, #344]	; (8001d48 <menu+0x8f4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
 8001bf4:	4b52      	ldr	r3, [pc, #328]	; (8001d40 <menu+0x8ec>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <menu+0x8f8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	4b4f      	ldr	r3, [pc, #316]	; (8001d40 <menu+0x8ec>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001c0a:	4b51      	ldr	r3, [pc, #324]	; (8001d50 <menu+0x8fc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	4b4b      	ldr	r3, [pc, #300]	; (8001d40 <menu+0x8ec>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001c18:	4b4e      	ldr	r3, [pc, #312]	; (8001d54 <menu+0x900>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	4b48      	ldr	r3, [pc, #288]	; (8001d40 <menu+0x8ec>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001c26:	4b4c      	ldr	r3, [pc, #304]	; (8001d58 <menu+0x904>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <menu+0x8ec>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001c34:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <menu+0x908>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <menu+0x8ec>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001c42:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <menu+0x90c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <menu+0x8ec>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001c50:	4b44      	ldr	r3, [pc, #272]	; (8001d64 <menu+0x910>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	4b3a      	ldr	r3, [pc, #232]	; (8001d40 <menu+0x8ec>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001c5e:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <menu+0x914>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001c64:	4b41      	ldr	r3, [pc, #260]	; (8001d6c <menu+0x918>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	f040 80fc 	bne.w	8001e66 <menu+0xa12>
		if(dilSecim == 0) {
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <menu+0x8d0>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001c76:	4a3e      	ldr	r2, [pc, #248]	; (8001d70 <menu+0x91c>)
 8001c78:	2101      	movs	r1, #1
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f006 f87c 	bl	8007d78 <lcd_print>
 8001c80:	e008      	b.n	8001c94 <menu+0x840>
		} else if(dilSecim == 1) {
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <menu+0x8d0>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d104      	bne.n	8001c94 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001c8a:	4a3a      	ldr	r2, [pc, #232]	; (8001d74 <menu+0x920>)
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f006 f872 	bl	8007d78 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <menu+0x8e0>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d003      	beq.n	8001ca4 <menu+0x850>
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <menu+0x8e0>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d112      	bne.n	8001cca <menu+0x876>
			if(dilSecim == 0) {
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <menu+0x8d0>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001cac:	4a32      	ldr	r2, [pc, #200]	; (8001d78 <menu+0x924>)
 8001cae:	2101      	movs	r1, #1
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	f006 f861 	bl	8007d78 <lcd_print>
 8001cb6:	e008      	b.n	8001cca <menu+0x876>
			} else if(dilSecim == 1) {
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <menu+0x8d0>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d104      	bne.n	8001cca <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001cc0:	4a2e      	ldr	r2, [pc, #184]	; (8001d7c <menu+0x928>)
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2002      	movs	r0, #2
 8001cc6:	f006 f857 	bl	8007d78 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <menu+0x92c>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d116      	bne.n	8001d00 <menu+0x8ac>
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <menu+0x8e0>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d112      	bne.n	8001d00 <menu+0x8ac>
			if(dilSecim == 0) {
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <menu+0x8d0>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001ce2:	4a28      	ldr	r2, [pc, #160]	; (8001d84 <menu+0x930>)
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	f006 f846 	bl	8007d78 <lcd_print>
 8001cec:	e008      	b.n	8001d00 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <menu+0x8d0>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d104      	bne.n	8001d00 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001cf6:	4a24      	ldr	r2, [pc, #144]	; (8001d88 <menu+0x934>)
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	f006 f83c 	bl	8007d78 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <menu+0x92c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d14c      	bne.n	8001da2 <menu+0x94e>
 8001d08:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <menu+0x8e0>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d148      	bne.n	8001da2 <menu+0x94e>
			if(dilSecim == 0) {
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <menu+0x8d0>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d13b      	bne.n	8001d90 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001d18:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <menu+0x938>)
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f006 f82b 	bl	8007d78 <lcd_print>
 8001d22:	e03e      	b.n	8001da2 <menu+0x94e>
 8001d24:	2000020d 	.word	0x2000020d
 8001d28:	0800d320 	.word	0x0800d320
 8001d2c:	40010800 	.word	0x40010800
 8001d30:	2000021b 	.word	0x2000021b
 8001d34:	200001fb 	.word	0x200001fb
 8001d38:	200001ee 	.word	0x200001ee
 8001d3c:	2000020e 	.word	0x2000020e
 8001d40:	20000118 	.word	0x20000118
 8001d44:	2000020f 	.word	0x2000020f
 8001d48:	20000210 	.word	0x20000210
 8001d4c:	20000211 	.word	0x20000211
 8001d50:	20000212 	.word	0x20000212
 8001d54:	20000213 	.word	0x20000213
 8001d58:	20000214 	.word	0x20000214
 8001d5c:	20000215 	.word	0x20000215
 8001d60:	20000216 	.word	0x20000216
 8001d64:	20000217 	.word	0x20000217
 8001d68:	20000218 	.word	0x20000218
 8001d6c:	200001ec 	.word	0x200001ec
 8001d70:	0800d334 	.word	0x0800d334
 8001d74:	0800d348 	.word	0x0800d348
 8001d78:	0800d35c 	.word	0x0800d35c
 8001d7c:	0800d370 	.word	0x0800d370
 8001d80:	200001ed 	.word	0x200001ed
 8001d84:	0800d384 	.word	0x0800d384
 8001d88:	0800d394 	.word	0x0800d394
 8001d8c:	0800d3a4 	.word	0x0800d3a4
			} else if(dilSecim == 1) {
 8001d90:	4b98      	ldr	r3, [pc, #608]	; (8001ff4 <menu+0xba0>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d104      	bne.n	8001da2 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001d98:	4a97      	ldr	r2, [pc, #604]	; (8001ff8 <menu+0xba4>)
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f005 ffeb 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001da2:	2102      	movs	r1, #2
 8001da4:	4895      	ldr	r0, [pc, #596]	; (8001ffc <menu+0xba8>)
 8001da6:	f007 fb0d 	bl	80093c4 <HAL_GPIO_ReadPin>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d119      	bne.n	8001de4 <menu+0x990>
 8001db0:	4b93      	ldr	r3, [pc, #588]	; (8002000 <menu+0xbac>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	f083 0301 	eor.w	r3, r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d012      	beq.n	8001de4 <menu+0x990>
 8001dbe:	4b91      	ldr	r3, [pc, #580]	; (8002004 <menu+0xbb0>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10e      	bne.n	8001de4 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001dc6:	4b90      	ldr	r3, [pc, #576]	; (8002008 <menu+0xbb4>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b8e      	ldr	r3, [pc, #568]	; (8002008 <menu+0xbb4>)
 8001dd0:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001dd2:	4b8d      	ldr	r3, [pc, #564]	; (8002008 <menu+0xbb4>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d902      	bls.n	8001de0 <menu+0x98c>
				calismaSekli = 0;
 8001dda:	4b8b      	ldr	r3, [pc, #556]	; (8002008 <menu+0xbb4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001de0:	f002 fe94 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001de4:	2104      	movs	r1, #4
 8001de6:	4885      	ldr	r0, [pc, #532]	; (8001ffc <menu+0xba8>)
 8001de8:	f007 faec 	bl	80093c4 <HAL_GPIO_ReadPin>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d119      	bne.n	8001e26 <menu+0x9d2>
 8001df2:	4b83      	ldr	r3, [pc, #524]	; (8002000 <menu+0xbac>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	f083 0301 	eor.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d012      	beq.n	8001e26 <menu+0x9d2>
 8001e00:	4b80      	ldr	r3, [pc, #512]	; (8002004 <menu+0xbb0>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10e      	bne.n	8001e26 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001e08:	4b7f      	ldr	r3, [pc, #508]	; (8002008 <menu+0xbb4>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b7d      	ldr	r3, [pc, #500]	; (8002008 <menu+0xbb4>)
 8001e12:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001e14:	4b7c      	ldr	r3, [pc, #496]	; (8002008 <menu+0xbb4>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <menu+0x9ce>
	    		calismaSekli = 1;
 8001e1c:	4b7a      	ldr	r3, [pc, #488]	; (8002008 <menu+0xbb4>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e22:	f002 fe73 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e26:	2108      	movs	r1, #8
 8001e28:	4874      	ldr	r0, [pc, #464]	; (8001ffc <menu+0xba8>)
 8001e2a:	f007 facb 	bl	80093c4 <HAL_GPIO_ReadPin>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d118      	bne.n	8001e66 <menu+0xa12>
 8001e34:	4b72      	ldr	r3, [pc, #456]	; (8002000 <menu+0xbac>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	f083 0301 	eor.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d011      	beq.n	8001e66 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001e42:	4b71      	ldr	r3, [pc, #452]	; (8002008 <menu+0xbb4>)
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	4b71      	ldr	r3, [pc, #452]	; (800200c <menu+0xbb8>)
 8001e48:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001e4a:	4b6f      	ldr	r3, [pc, #444]	; (8002008 <menu+0xbb4>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d106      	bne.n	8001e60 <menu+0xa0c>
				altLimit = 1;
 8001e52:	4b6f      	ldr	r3, [pc, #444]	; (8002010 <menu+0xbbc>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001e58:	4b6d      	ldr	r3, [pc, #436]	; (8002010 <menu+0xbbc>)
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	4b6b      	ldr	r3, [pc, #428]	; (800200c <menu+0xbb8>)
 8001e5e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001e60:	4b6c      	ldr	r3, [pc, #432]	; (8002014 <menu+0xbc0>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001e66:	4b6c      	ldr	r3, [pc, #432]	; (8002018 <menu+0xbc4>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	f040 8083 	bne.w	8001f76 <menu+0xb22>
		if(dilSecim == 0) {
 8001e70:	4b60      	ldr	r3, [pc, #384]	; (8001ff4 <menu+0xba0>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001e78:	4a68      	ldr	r2, [pc, #416]	; (800201c <menu+0xbc8>)
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f005 ff7b 	bl	8007d78 <lcd_print>
 8001e82:	e008      	b.n	8001e96 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001e84:	4b5b      	ldr	r3, [pc, #364]	; (8001ff4 <menu+0xba0>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d104      	bne.n	8001e96 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001e8c:	4a64      	ldr	r2, [pc, #400]	; (8002020 <menu+0xbcc>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2001      	movs	r0, #1
 8001e92:	f005 ff71 	bl	8007d78 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <menu+0xbd0>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d113      	bne.n	8001ec6 <menu+0xa72>
			if(dilSecim == 0) {
 8001e9e:	4b55      	ldr	r3, [pc, #340]	; (8001ff4 <menu+0xba0>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001ea6:	4a60      	ldr	r2, [pc, #384]	; (8002028 <menu+0xbd4>)
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f005 ff64 	bl	8007d78 <lcd_print>
 8001eb0:	e012      	b.n	8001ed8 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001eb2:	4b50      	ldr	r3, [pc, #320]	; (8001ff4 <menu+0xba0>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d10e      	bne.n	8001ed8 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001eba:	4a5c      	ldr	r2, [pc, #368]	; (800202c <menu+0xbd8>)
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	2002      	movs	r0, #2
 8001ec0:	f005 ff5a 	bl	8007d78 <lcd_print>
 8001ec4:	e008      	b.n	8001ed8 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001ec6:	4b57      	ldr	r3, [pc, #348]	; (8002024 <menu+0xbd0>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d104      	bne.n	8001ed8 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001ece:	4a58      	ldr	r2, [pc, #352]	; (8002030 <menu+0xbdc>)
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f005 ff50 	bl	8007d78 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4848      	ldr	r0, [pc, #288]	; (8001ffc <menu+0xba8>)
 8001edc:	f007 fa72 	bl	80093c4 <HAL_GPIO_ReadPin>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d115      	bne.n	8001f12 <menu+0xabe>
 8001ee6:	4b46      	ldr	r3, [pc, #280]	; (8002000 <menu+0xbac>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	f083 0301 	eor.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00e      	beq.n	8001f12 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001ef4:	4b4b      	ldr	r3, [pc, #300]	; (8002024 <menu+0xbd0>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b49      	ldr	r3, [pc, #292]	; (8002024 <menu+0xbd0>)
 8001efe:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001f00:	4b48      	ldr	r3, [pc, #288]	; (8002024 <menu+0xbd0>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d902      	bls.n	8001f0e <menu+0xaba>
				emniyetCercevesi = 0;
 8001f08:	4b46      	ldr	r3, [pc, #280]	; (8002024 <menu+0xbd0>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f0e:	f002 fdfd 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f12:	2104      	movs	r1, #4
 8001f14:	4839      	ldr	r0, [pc, #228]	; (8001ffc <menu+0xba8>)
 8001f16:	f007 fa55 	bl	80093c4 <HAL_GPIO_ReadPin>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d115      	bne.n	8001f4c <menu+0xaf8>
 8001f20:	4b37      	ldr	r3, [pc, #220]	; (8002000 <menu+0xbac>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	f083 0301 	eor.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00e      	beq.n	8001f4c <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <menu+0xbd0>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <menu+0xbd0>)
 8001f38:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <menu+0xbd0>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001f42:	4b38      	ldr	r3, [pc, #224]	; (8002024 <menu+0xbd0>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f48:	f002 fde0 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001f4c:	2108      	movs	r1, #8
 8001f4e:	482b      	ldr	r0, [pc, #172]	; (8001ffc <menu+0xba8>)
 8001f50:	f007 fa38 	bl	80093c4 <HAL_GPIO_ReadPin>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d10d      	bne.n	8001f76 <menu+0xb22>
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <menu+0xbac>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	f083 0301 	eor.w	r3, r3, #1
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d006      	beq.n	8001f76 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001f68:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <menu+0xbd0>)
 8001f6a:	781a      	ldrb	r2, [r3, #0]
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <menu+0xbb8>)
 8001f6e:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <menu+0xbc0>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001f76:	4b28      	ldr	r3, [pc, #160]	; (8002018 <menu+0xbc4>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	f040 80ba 	bne.w	80020f4 <menu+0xca0>
		if(dilSecim == 0) {
 8001f80:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <menu+0xba0>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001f88:	4a2a      	ldr	r2, [pc, #168]	; (8002034 <menu+0xbe0>)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f005 fef3 	bl	8007d78 <lcd_print>
 8001f92:	e008      	b.n	8001fa6 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001f94:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <menu+0xba0>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d104      	bne.n	8001fa6 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001f9c:	4a26      	ldr	r2, [pc, #152]	; (8002038 <menu+0xbe4>)
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f005 fee9 	bl	8007d78 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001fa6:	4b25      	ldr	r3, [pc, #148]	; (800203c <menu+0xbe8>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d113      	bne.n	8001fd6 <menu+0xb82>
			if(dilSecim == 0) {
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <menu+0xba0>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001fb6:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <menu+0xbd4>)
 8001fb8:	2101      	movs	r1, #1
 8001fba:	2002      	movs	r0, #2
 8001fbc:	f005 fedc 	bl	8007d78 <lcd_print>
 8001fc0:	e049      	b.n	8002056 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <menu+0xba0>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d145      	bne.n	8002056 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001fca:	4a18      	ldr	r2, [pc, #96]	; (800202c <menu+0xbd8>)
 8001fcc:	2101      	movs	r1, #1
 8001fce:	2002      	movs	r0, #2
 8001fd0:	f005 fed2 	bl	8007d78 <lcd_print>
 8001fd4:	e03f      	b.n	8002056 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001fd6:	4b19      	ldr	r3, [pc, #100]	; (800203c <menu+0xbe8>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d13b      	bne.n	8002056 <menu+0xc02>
			if(dilSecim == 0) {
 8001fde:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <menu+0xba0>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d12e      	bne.n	8002044 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001fe6:	4a16      	ldr	r2, [pc, #88]	; (8002040 <menu+0xbec>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	2002      	movs	r0, #2
 8001fec:	f005 fec4 	bl	8007d78 <lcd_print>
 8001ff0:	e031      	b.n	8002056 <menu+0xc02>
 8001ff2:	bf00      	nop
 8001ff4:	2000020d 	.word	0x2000020d
 8001ff8:	0800d3b4 	.word	0x0800d3b4
 8001ffc:	40010800 	.word	0x40010800
 8002000:	2000021b 	.word	0x2000021b
 8002004:	200001fb 	.word	0x200001fb
 8002008:	200001ed 	.word	0x200001ed
 800200c:	20000118 	.word	0x20000118
 8002010:	200001f2 	.word	0x200001f2
 8002014:	20000218 	.word	0x20000218
 8002018:	200001ec 	.word	0x200001ec
 800201c:	0800d3c4 	.word	0x0800d3c4
 8002020:	0800d3d8 	.word	0x0800d3d8
 8002024:	200001f0 	.word	0x200001f0
 8002028:	0800d3ec 	.word	0x0800d3ec
 800202c:	0800d400 	.word	0x0800d400
 8002030:	0800d414 	.word	0x0800d414
 8002034:	0800d424 	.word	0x0800d424
 8002038:	0800d438 	.word	0x0800d438
 800203c:	200001f1 	.word	0x200001f1
 8002040:	0800d44c 	.word	0x0800d44c
			} else if(dilSecim == 1) {
 8002044:	4b92      	ldr	r3, [pc, #584]	; (8002290 <menu+0xe3c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d104      	bne.n	8002056 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 800204c:	4a91      	ldr	r2, [pc, #580]	; (8002294 <menu+0xe40>)
 800204e:	2101      	movs	r1, #1
 8002050:	2002      	movs	r0, #2
 8002052:	f005 fe91 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002056:	2102      	movs	r1, #2
 8002058:	488f      	ldr	r0, [pc, #572]	; (8002298 <menu+0xe44>)
 800205a:	f007 f9b3 	bl	80093c4 <HAL_GPIO_ReadPin>
 800205e:	4603      	mov	r3, r0
 8002060:	2b01      	cmp	r3, #1
 8002062:	d115      	bne.n	8002090 <menu+0xc3c>
 8002064:	4b8d      	ldr	r3, [pc, #564]	; (800229c <menu+0xe48>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	f083 0301 	eor.w	r3, r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00e      	beq.n	8002090 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002072:	4b8b      	ldr	r3, [pc, #556]	; (80022a0 <menu+0xe4c>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4b89      	ldr	r3, [pc, #548]	; (80022a0 <menu+0xe4c>)
 800207c:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 800207e:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <menu+0xe4c>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d902      	bls.n	800208c <menu+0xc38>
				yavaslamaLimit = 0;
 8002086:	4b86      	ldr	r3, [pc, #536]	; (80022a0 <menu+0xe4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800208c:	f002 fd3e 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002090:	2104      	movs	r1, #4
 8002092:	4881      	ldr	r0, [pc, #516]	; (8002298 <menu+0xe44>)
 8002094:	f007 f996 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002098:	4603      	mov	r3, r0
 800209a:	2b01      	cmp	r3, #1
 800209c:	d115      	bne.n	80020ca <menu+0xc76>
 800209e:	4b7f      	ldr	r3, [pc, #508]	; (800229c <menu+0xe48>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	f083 0301 	eor.w	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00e      	beq.n	80020ca <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 80020ac:	4b7c      	ldr	r3, [pc, #496]	; (80022a0 <menu+0xe4c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	4b7a      	ldr	r3, [pc, #488]	; (80022a0 <menu+0xe4c>)
 80020b6:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80020b8:	4b79      	ldr	r3, [pc, #484]	; (80022a0 <menu+0xe4c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <menu+0xc72>
		   		yavaslamaLimit = 1;
 80020c0:	4b77      	ldr	r3, [pc, #476]	; (80022a0 <menu+0xe4c>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020c6:	f002 fd21 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020ca:	2108      	movs	r1, #8
 80020cc:	4872      	ldr	r0, [pc, #456]	; (8002298 <menu+0xe44>)
 80020ce:	f007 f979 	bl	80093c4 <HAL_GPIO_ReadPin>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d10d      	bne.n	80020f4 <menu+0xca0>
 80020d8:	4b70      	ldr	r3, [pc, #448]	; (800229c <menu+0xe48>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	f083 0301 	eor.w	r3, r3, #1
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 80020e6:	4b6e      	ldr	r3, [pc, #440]	; (80022a0 <menu+0xe4c>)
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	4b6e      	ldr	r3, [pc, #440]	; (80022a4 <menu+0xe50>)
 80020ec:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80020ee:	4b6e      	ldr	r3, [pc, #440]	; (80022a8 <menu+0xe54>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80020f4:	4b6d      	ldr	r3, [pc, #436]	; (80022ac <menu+0xe58>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b05      	cmp	r3, #5
 80020fa:	f040 80b9 	bne.w	8002270 <menu+0xe1c>
		if(dilSecim == 0) {
 80020fe:	4b64      	ldr	r3, [pc, #400]	; (8002290 <menu+0xe3c>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d105      	bne.n	8002112 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002106:	4a6a      	ldr	r2, [pc, #424]	; (80022b0 <menu+0xe5c>)
 8002108:	2101      	movs	r1, #1
 800210a:	2001      	movs	r0, #1
 800210c:	f005 fe34 	bl	8007d78 <lcd_print>
 8002110:	e008      	b.n	8002124 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8002112:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <menu+0xe3c>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d104      	bne.n	8002124 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800211a:	4a66      	ldr	r2, [pc, #408]	; (80022b4 <menu+0xe60>)
 800211c:	2101      	movs	r1, #1
 800211e:	2001      	movs	r0, #1
 8002120:	f005 fe2a 	bl	8007d78 <lcd_print>
		}

		if(altLimit == 0) {
 8002124:	4b64      	ldr	r3, [pc, #400]	; (80022b8 <menu+0xe64>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d113      	bne.n	8002154 <menu+0xd00>
			if(dilSecim == 0) {
 800212c:	4b58      	ldr	r3, [pc, #352]	; (8002290 <menu+0xe3c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002134:	4a61      	ldr	r2, [pc, #388]	; (80022bc <menu+0xe68>)
 8002136:	2101      	movs	r1, #1
 8002138:	2002      	movs	r0, #2
 800213a:	f005 fe1d 	bl	8007d78 <lcd_print>
 800213e:	e020      	b.n	8002182 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <menu+0xe3c>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d11c      	bne.n	8002182 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8002148:	4a5d      	ldr	r2, [pc, #372]	; (80022c0 <menu+0xe6c>)
 800214a:	2101      	movs	r1, #1
 800214c:	2002      	movs	r0, #2
 800214e:	f005 fe13 	bl	8007d78 <lcd_print>
 8002152:	e016      	b.n	8002182 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8002154:	4b58      	ldr	r3, [pc, #352]	; (80022b8 <menu+0xe64>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d112      	bne.n	8002182 <menu+0xd2e>
			if(dilSecim == 0){
 800215c:	4b4c      	ldr	r3, [pc, #304]	; (8002290 <menu+0xe3c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002164:	4a57      	ldr	r2, [pc, #348]	; (80022c4 <menu+0xe70>)
 8002166:	2101      	movs	r1, #1
 8002168:	2002      	movs	r0, #2
 800216a:	f005 fe05 	bl	8007d78 <lcd_print>
 800216e:	e008      	b.n	8002182 <menu+0xd2e>
			} else if(dilSecim == 1){
 8002170:	4b47      	ldr	r3, [pc, #284]	; (8002290 <menu+0xe3c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d104      	bne.n	8002182 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002178:	4a46      	ldr	r2, [pc, #280]	; (8002294 <menu+0xe40>)
 800217a:	2101      	movs	r1, #1
 800217c:	2002      	movs	r0, #2
 800217e:	f005 fdfb 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002182:	2102      	movs	r1, #2
 8002184:	4844      	ldr	r0, [pc, #272]	; (8002298 <menu+0xe44>)
 8002186:	f007 f91d 	bl	80093c4 <HAL_GPIO_ReadPin>
 800218a:	4603      	mov	r3, r0
 800218c:	2b01      	cmp	r3, #1
 800218e:	d119      	bne.n	80021c4 <menu+0xd70>
 8002190:	4b42      	ldr	r3, [pc, #264]	; (800229c <menu+0xe48>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	f083 0301 	eor.w	r3, r3, #1
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d012      	beq.n	80021c4 <menu+0xd70>
 800219e:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <menu+0xe74>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10e      	bne.n	80021c4 <menu+0xd70>
			altLimit = altLimit + 1;
 80021a6:	4b44      	ldr	r3, [pc, #272]	; (80022b8 <menu+0xe64>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	3301      	adds	r3, #1
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <menu+0xe64>)
 80021b0:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80021b2:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <menu+0xe64>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d902      	bls.n	80021c0 <menu+0xd6c>
				altLimit = 0;
 80021ba:	4b3f      	ldr	r3, [pc, #252]	; (80022b8 <menu+0xe64>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021c0:	f002 fca4 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80021c4:	2104      	movs	r1, #4
 80021c6:	4834      	ldr	r0, [pc, #208]	; (8002298 <menu+0xe44>)
 80021c8:	f007 f8fc 	bl	80093c4 <HAL_GPIO_ReadPin>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d119      	bne.n	8002206 <menu+0xdb2>
 80021d2:	4b32      	ldr	r3, [pc, #200]	; (800229c <menu+0xe48>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	f083 0301 	eor.w	r3, r3, #1
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d012      	beq.n	8002206 <menu+0xdb2>
 80021e0:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <menu+0xe74>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10e      	bne.n	8002206 <menu+0xdb2>
			altLimit = altLimit - 1;
 80021e8:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <menu+0xe64>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <menu+0xe64>)
 80021f2:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80021f4:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <menu+0xe64>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <menu+0xdae>
		   		altLimit = 1;
 80021fc:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <menu+0xe64>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002202:	f002 fc83 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002206:	2108      	movs	r1, #8
 8002208:	4823      	ldr	r0, [pc, #140]	; (8002298 <menu+0xe44>)
 800220a:	f007 f8db 	bl	80093c4 <HAL_GPIO_ReadPin>
 800220e:	4603      	mov	r3, r0
 8002210:	2b01      	cmp	r3, #1
 8002212:	d12d      	bne.n	8002270 <menu+0xe1c>
 8002214:	4b21      	ldr	r3, [pc, #132]	; (800229c <menu+0xe48>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	f083 0301 	eor.w	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d026      	beq.n	8002270 <menu+0xe1c>
			eepromData[5] = altLimit;
 8002222:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <menu+0xe64>)
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <menu+0xe50>)
 8002228:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800222a:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <menu+0xe64>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d110      	bne.n	8002254 <menu+0xe00>
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <menu+0xe78>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <menu+0xdee>
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <menu+0xe78>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d108      	bne.n	8002254 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <menu+0xe78>)
 8002244:	2203      	movs	r2, #3
 8002246:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002248:	4b20      	ldr	r3, [pc, #128]	; (80022cc <menu+0xe78>)
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <menu+0xe50>)
 800224e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002252:	e00a      	b.n	800226a <menu+0xe16>
			} else if(altLimit == 0) {
 8002254:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <menu+0xe64>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d106      	bne.n	800226a <menu+0xe16>
				platformSilindirTipi = 0;
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <menu+0xe7c>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <menu+0xe7c>)
 8002264:	781a      	ldrb	r2, [r3, #0]
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <menu+0xe50>)
 8002268:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <menu+0xe54>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002270:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <menu+0xe58>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b06      	cmp	r3, #6
 8002276:	f040 80b6 	bne.w	80023e6 <menu+0xf92>
		if(dilSecim == 0) {
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <menu+0xe3c>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d12a      	bne.n	80022d8 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002282:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <menu+0xe80>)
 8002284:	2101      	movs	r1, #1
 8002286:	2001      	movs	r0, #1
 8002288:	f005 fd76 	bl	8007d78 <lcd_print>
 800228c:	e02d      	b.n	80022ea <menu+0xe96>
 800228e:	bf00      	nop
 8002290:	2000020d 	.word	0x2000020d
 8002294:	0800d460 	.word	0x0800d460
 8002298:	40010800 	.word	0x40010800
 800229c:	2000021b 	.word	0x2000021b
 80022a0:	200001f1 	.word	0x200001f1
 80022a4:	20000118 	.word	0x20000118
 80022a8:	20000218 	.word	0x20000218
 80022ac:	200001ec 	.word	0x200001ec
 80022b0:	0800d474 	.word	0x0800d474
 80022b4:	0800d488 	.word	0x0800d488
 80022b8:	200001f2 	.word	0x200001f2
 80022bc:	0800d3ec 	.word	0x0800d3ec
 80022c0:	0800d400 	.word	0x0800d400
 80022c4:	0800d44c 	.word	0x0800d44c
 80022c8:	200001ed 	.word	0x200001ed
 80022cc:	200001f9 	.word	0x200001f9
 80022d0:	200001ff 	.word	0x200001ff
 80022d4:	0800d49c 	.word	0x0800d49c
		} else if(dilSecim == 1){
 80022d8:	4b7a      	ldr	r3, [pc, #488]	; (80024c4 <menu+0x1070>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d104      	bne.n	80022ea <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80022e0:	4a79      	ldr	r2, [pc, #484]	; (80024c8 <menu+0x1074>)
 80022e2:	2101      	movs	r1, #1
 80022e4:	2001      	movs	r0, #1
 80022e6:	f005 fd47 	bl	8007d78 <lcd_print>
		}
		if(basincSalteri == 0){
 80022ea:	4b78      	ldr	r3, [pc, #480]	; (80024cc <menu+0x1078>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d113      	bne.n	800231a <menu+0xec6>
			if(dilSecim == 0) {
 80022f2:	4b74      	ldr	r3, [pc, #464]	; (80024c4 <menu+0x1070>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80022fa:	4a75      	ldr	r2, [pc, #468]	; (80024d0 <menu+0x107c>)
 80022fc:	2101      	movs	r1, #1
 80022fe:	2002      	movs	r0, #2
 8002300:	f005 fd3a 	bl	8007d78 <lcd_print>
 8002304:	e020      	b.n	8002348 <menu+0xef4>
			} else if(dilSecim == 1){
 8002306:	4b6f      	ldr	r3, [pc, #444]	; (80024c4 <menu+0x1070>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d11c      	bne.n	8002348 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800230e:	4a71      	ldr	r2, [pc, #452]	; (80024d4 <menu+0x1080>)
 8002310:	2101      	movs	r1, #1
 8002312:	2002      	movs	r0, #2
 8002314:	f005 fd30 	bl	8007d78 <lcd_print>
 8002318:	e016      	b.n	8002348 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800231a:	4b6c      	ldr	r3, [pc, #432]	; (80024cc <menu+0x1078>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d112      	bne.n	8002348 <menu+0xef4>
			if(dilSecim == 0) {
 8002322:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <menu+0x1070>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800232a:	4a6b      	ldr	r2, [pc, #428]	; (80024d8 <menu+0x1084>)
 800232c:	2101      	movs	r1, #1
 800232e:	2002      	movs	r0, #2
 8002330:	f005 fd22 	bl	8007d78 <lcd_print>
 8002334:	e008      	b.n	8002348 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002336:	4b63      	ldr	r3, [pc, #396]	; (80024c4 <menu+0x1070>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d104      	bne.n	8002348 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800233e:	4a67      	ldr	r2, [pc, #412]	; (80024dc <menu+0x1088>)
 8002340:	2101      	movs	r1, #1
 8002342:	2002      	movs	r0, #2
 8002344:	f005 fd18 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002348:	2102      	movs	r1, #2
 800234a:	4865      	ldr	r0, [pc, #404]	; (80024e0 <menu+0x108c>)
 800234c:	f007 f83a 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002350:	4603      	mov	r3, r0
 8002352:	2b01      	cmp	r3, #1
 8002354:	d115      	bne.n	8002382 <menu+0xf2e>
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <menu+0x1090>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	f083 0301 	eor.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00e      	beq.n	8002382 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002364:	4b59      	ldr	r3, [pc, #356]	; (80024cc <menu+0x1078>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	b2da      	uxtb	r2, r3
 800236c:	4b57      	ldr	r3, [pc, #348]	; (80024cc <menu+0x1078>)
 800236e:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002370:	4b56      	ldr	r3, [pc, #344]	; (80024cc <menu+0x1078>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d902      	bls.n	800237e <menu+0xf2a>
				basincSalteri = 0;
 8002378:	4b54      	ldr	r3, [pc, #336]	; (80024cc <menu+0x1078>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800237e:	f002 fbc5 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002382:	2104      	movs	r1, #4
 8002384:	4856      	ldr	r0, [pc, #344]	; (80024e0 <menu+0x108c>)
 8002386:	f007 f81d 	bl	80093c4 <HAL_GPIO_ReadPin>
 800238a:	4603      	mov	r3, r0
 800238c:	2b01      	cmp	r3, #1
 800238e:	d115      	bne.n	80023bc <menu+0xf68>
 8002390:	4b54      	ldr	r3, [pc, #336]	; (80024e4 <menu+0x1090>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f083 0301 	eor.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00e      	beq.n	80023bc <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800239e:	4b4b      	ldr	r3, [pc, #300]	; (80024cc <menu+0x1078>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b49      	ldr	r3, [pc, #292]	; (80024cc <menu+0x1078>)
 80023a8:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80023aa:	4b48      	ldr	r3, [pc, #288]	; (80024cc <menu+0x1078>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <menu+0xf64>
		   		basincSalteri = 1;
 80023b2:	4b46      	ldr	r3, [pc, #280]	; (80024cc <menu+0x1078>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023b8:	f002 fba8 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023bc:	2108      	movs	r1, #8
 80023be:	4848      	ldr	r0, [pc, #288]	; (80024e0 <menu+0x108c>)
 80023c0:	f007 f800 	bl	80093c4 <HAL_GPIO_ReadPin>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d10d      	bne.n	80023e6 <menu+0xf92>
 80023ca:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <menu+0x1090>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	f083 0301 	eor.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <menu+0xf92>
			eepromData[6] = basincSalteri;
 80023d8:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <menu+0x1078>)
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	4b42      	ldr	r3, [pc, #264]	; (80024e8 <menu+0x1094>)
 80023de:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80023e0:	4b42      	ldr	r3, [pc, #264]	; (80024ec <menu+0x1098>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80023e6:	4b42      	ldr	r3, [pc, #264]	; (80024f0 <menu+0x109c>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b07      	cmp	r3, #7
 80023ec:	f040 80f5 	bne.w	80025da <menu+0x1186>
		if(dilSecim == 0) {
 80023f0:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <menu+0x1070>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d105      	bne.n	8002404 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80023f8:	4a3e      	ldr	r2, [pc, #248]	; (80024f4 <menu+0x10a0>)
 80023fa:	2101      	movs	r1, #1
 80023fc:	2001      	movs	r0, #1
 80023fe:	f005 fcbb 	bl	8007d78 <lcd_print>
 8002402:	e008      	b.n	8002416 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002404:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <menu+0x1070>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d104      	bne.n	8002416 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 800240c:	4a3a      	ldr	r2, [pc, #232]	; (80024f8 <menu+0x10a4>)
 800240e:	2101      	movs	r1, #1
 8002410:	2001      	movs	r0, #1
 8002412:	f005 fcb1 	bl	8007d78 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <menu+0x10a8>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d113      	bne.n	8002446 <menu+0xff2>
			if(dilSecim == 0) {
 800241e:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <menu+0x1070>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d105      	bne.n	8002432 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002426:	4a2a      	ldr	r2, [pc, #168]	; (80024d0 <menu+0x107c>)
 8002428:	2101      	movs	r1, #1
 800242a:	2002      	movs	r0, #2
 800242c:	f005 fca4 	bl	8007d78 <lcd_print>
 8002430:	e079      	b.n	8002526 <menu+0x10d2>
			} else if(dilSecim == 1){
 8002432:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <menu+0x1070>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d175      	bne.n	8002526 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800243a:	4a26      	ldr	r2, [pc, #152]	; (80024d4 <menu+0x1080>)
 800243c:	2101      	movs	r1, #1
 800243e:	2002      	movs	r0, #2
 8002440:	f005 fc9a 	bl	8007d78 <lcd_print>
 8002444:	e06f      	b.n	8002526 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002446:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <menu+0x10a8>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d113      	bne.n	8002476 <menu+0x1022>
			if(dilSecim == 0) {
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <menu+0x1070>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002456:	4a2a      	ldr	r2, [pc, #168]	; (8002500 <menu+0x10ac>)
 8002458:	2101      	movs	r1, #1
 800245a:	2002      	movs	r0, #2
 800245c:	f005 fc8c 	bl	8007d78 <lcd_print>
 8002460:	e061      	b.n	8002526 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <menu+0x1070>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d15d      	bne.n	8002526 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800246a:	4a26      	ldr	r2, [pc, #152]	; (8002504 <menu+0x10b0>)
 800246c:	2101      	movs	r1, #1
 800246e:	2002      	movs	r0, #2
 8002470:	f005 fc82 	bl	8007d78 <lcd_print>
 8002474:	e057      	b.n	8002526 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002476:	4b21      	ldr	r3, [pc, #132]	; (80024fc <menu+0x10a8>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d113      	bne.n	80024a6 <menu+0x1052>
			if(dilSecim == 0) {
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <menu+0x1070>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002486:	4a20      	ldr	r2, [pc, #128]	; (8002508 <menu+0x10b4>)
 8002488:	2101      	movs	r1, #1
 800248a:	2002      	movs	r0, #2
 800248c:	f005 fc74 	bl	8007d78 <lcd_print>
 8002490:	e049      	b.n	8002526 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002492:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <menu+0x1070>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d145      	bne.n	8002526 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800249a:	4a1c      	ldr	r2, [pc, #112]	; (800250c <menu+0x10b8>)
 800249c:	2101      	movs	r1, #1
 800249e:	2002      	movs	r0, #2
 80024a0:	f005 fc6a 	bl	8007d78 <lcd_print>
 80024a4:	e03f      	b.n	8002526 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <menu+0x10a8>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d13b      	bne.n	8002526 <menu+0x10d2>
			if(dilSecim == 0) {
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <menu+0x1070>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d12e      	bne.n	8002514 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80024b6:	4a16      	ldr	r2, [pc, #88]	; (8002510 <menu+0x10bc>)
 80024b8:	2101      	movs	r1, #1
 80024ba:	2002      	movs	r0, #2
 80024bc:	f005 fc5c 	bl	8007d78 <lcd_print>
 80024c0:	e031      	b.n	8002526 <menu+0x10d2>
 80024c2:	bf00      	nop
 80024c4:	2000020d 	.word	0x2000020d
 80024c8:	0800d4ac 	.word	0x0800d4ac
 80024cc:	200001f3 	.word	0x200001f3
 80024d0:	0800d3ec 	.word	0x0800d3ec
 80024d4:	0800d400 	.word	0x0800d400
 80024d8:	0800d44c 	.word	0x0800d44c
 80024dc:	0800d460 	.word	0x0800d460
 80024e0:	40010800 	.word	0x40010800
 80024e4:	2000021b 	.word	0x2000021b
 80024e8:	20000118 	.word	0x20000118
 80024ec:	20000218 	.word	0x20000218
 80024f0:	200001ec 	.word	0x200001ec
 80024f4:	0800d4bc 	.word	0x0800d4bc
 80024f8:	0800d4d0 	.word	0x0800d4d0
 80024fc:	200001f4 	.word	0x200001f4
 8002500:	0800d4e4 	.word	0x0800d4e4
 8002504:	0800d4f8 	.word	0x0800d4f8
 8002508:	0800d50c 	.word	0x0800d50c
 800250c:	0800d520 	.word	0x0800d520
 8002510:	0800d534 	.word	0x0800d534
			} else if(dilSecim == 1){
 8002514:	4b99      	ldr	r3, [pc, #612]	; (800277c <menu+0x1328>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d104      	bne.n	8002526 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 800251c:	4a98      	ldr	r2, [pc, #608]	; (8002780 <menu+0x132c>)
 800251e:	2101      	movs	r1, #1
 8002520:	2002      	movs	r0, #2
 8002522:	f005 fc29 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002526:	2102      	movs	r1, #2
 8002528:	4896      	ldr	r0, [pc, #600]	; (8002784 <menu+0x1330>)
 800252a:	f006 ff4b 	bl	80093c4 <HAL_GPIO_ReadPin>
 800252e:	4603      	mov	r3, r0
 8002530:	2b01      	cmp	r3, #1
 8002532:	d115      	bne.n	8002560 <menu+0x110c>
 8002534:	4b94      	ldr	r3, [pc, #592]	; (8002788 <menu+0x1334>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	f083 0301 	eor.w	r3, r3, #1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00e      	beq.n	8002560 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002542:	4b92      	ldr	r3, [pc, #584]	; (800278c <menu+0x1338>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	3301      	adds	r3, #1
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4b90      	ldr	r3, [pc, #576]	; (800278c <menu+0x1338>)
 800254c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800254e:	4b8f      	ldr	r3, [pc, #572]	; (800278c <menu+0x1338>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d902      	bls.n	800255c <menu+0x1108>
				kapiSecimleri = 0;
 8002556:	4b8d      	ldr	r3, [pc, #564]	; (800278c <menu+0x1338>)
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800255c:	f002 fad6 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002560:	2104      	movs	r1, #4
 8002562:	4888      	ldr	r0, [pc, #544]	; (8002784 <menu+0x1330>)
 8002564:	f006 ff2e 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002568:	4603      	mov	r3, r0
 800256a:	2b01      	cmp	r3, #1
 800256c:	d115      	bne.n	800259a <menu+0x1146>
 800256e:	4b86      	ldr	r3, [pc, #536]	; (8002788 <menu+0x1334>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	f083 0301 	eor.w	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00e      	beq.n	800259a <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 800257c:	4b83      	ldr	r3, [pc, #524]	; (800278c <menu+0x1338>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	3b01      	subs	r3, #1
 8002582:	b2da      	uxtb	r2, r3
 8002584:	4b81      	ldr	r3, [pc, #516]	; (800278c <menu+0x1338>)
 8002586:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002588:	4b80      	ldr	r3, [pc, #512]	; (800278c <menu+0x1338>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d902      	bls.n	8002596 <menu+0x1142>
		   		kapiSecimleri = 3;
 8002590:	4b7e      	ldr	r3, [pc, #504]	; (800278c <menu+0x1338>)
 8002592:	2203      	movs	r2, #3
 8002594:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002596:	f002 fab9 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800259a:	2108      	movs	r1, #8
 800259c:	4879      	ldr	r0, [pc, #484]	; (8002784 <menu+0x1330>)
 800259e:	f006 ff11 	bl	80093c4 <HAL_GPIO_ReadPin>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d118      	bne.n	80025da <menu+0x1186>
 80025a8:	4b77      	ldr	r3, [pc, #476]	; (8002788 <menu+0x1334>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f083 0301 	eor.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d011      	beq.n	80025da <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80025b6:	4b75      	ldr	r3, [pc, #468]	; (800278c <menu+0x1338>)
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	4b75      	ldr	r3, [pc, #468]	; (8002790 <menu+0x133c>)
 80025bc:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80025be:	4b73      	ldr	r3, [pc, #460]	; (800278c <menu+0x1338>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d006      	beq.n	80025d4 <menu+0x1180>
				altLimit = 1;
 80025c6:	4b73      	ldr	r3, [pc, #460]	; (8002794 <menu+0x1340>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80025cc:	4b71      	ldr	r3, [pc, #452]	; (8002794 <menu+0x1340>)
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	4b6f      	ldr	r3, [pc, #444]	; (8002790 <menu+0x133c>)
 80025d2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80025d4:	4b70      	ldr	r3, [pc, #448]	; (8002798 <menu+0x1344>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80025da:	4b70      	ldr	r3, [pc, #448]	; (800279c <menu+0x1348>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b08      	cmp	r3, #8
 80025e0:	f040 8092 	bne.w	8002708 <menu+0x12b4>
		if(dilSecim == 0) {
 80025e4:	4b65      	ldr	r3, [pc, #404]	; (800277c <menu+0x1328>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d105      	bne.n	80025f8 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80025ec:	4a6c      	ldr	r2, [pc, #432]	; (80027a0 <menu+0x134c>)
 80025ee:	2101      	movs	r1, #1
 80025f0:	2001      	movs	r0, #1
 80025f2:	f005 fbc1 	bl	8007d78 <lcd_print>
 80025f6:	e008      	b.n	800260a <menu+0x11b6>
		} else if(dilSecim == 1) {
 80025f8:	4b60      	ldr	r3, [pc, #384]	; (800277c <menu+0x1328>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d104      	bne.n	800260a <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002600:	4a68      	ldr	r2, [pc, #416]	; (80027a4 <menu+0x1350>)
 8002602:	2101      	movs	r1, #1
 8002604:	2001      	movs	r0, #1
 8002606:	f005 fbb7 	bl	8007d78 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800260a:	4b67      	ldr	r3, [pc, #412]	; (80027a8 <menu+0x1354>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d113      	bne.n	800263a <menu+0x11e6>
			if(dilSecim == 0) {
 8002612:	4b5a      	ldr	r3, [pc, #360]	; (800277c <menu+0x1328>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d105      	bne.n	8002626 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800261a:	4a64      	ldr	r2, [pc, #400]	; (80027ac <menu+0x1358>)
 800261c:	2101      	movs	r1, #1
 800261e:	2002      	movs	r0, #2
 8002620:	f005 fbaa 	bl	8007d78 <lcd_print>
 8002624:	e020      	b.n	8002668 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002626:	4b55      	ldr	r3, [pc, #340]	; (800277c <menu+0x1328>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d11c      	bne.n	8002668 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800262e:	4a60      	ldr	r2, [pc, #384]	; (80027b0 <menu+0x135c>)
 8002630:	2101      	movs	r1, #1
 8002632:	2002      	movs	r0, #2
 8002634:	f005 fba0 	bl	8007d78 <lcd_print>
 8002638:	e016      	b.n	8002668 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800263a:	4b5b      	ldr	r3, [pc, #364]	; (80027a8 <menu+0x1354>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d112      	bne.n	8002668 <menu+0x1214>
			if(dilSecim == 0){
 8002642:	4b4e      	ldr	r3, [pc, #312]	; (800277c <menu+0x1328>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d105      	bne.n	8002656 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800264a:	4a5a      	ldr	r2, [pc, #360]	; (80027b4 <menu+0x1360>)
 800264c:	2101      	movs	r1, #1
 800264e:	2002      	movs	r0, #2
 8002650:	f005 fb92 	bl	8007d78 <lcd_print>
 8002654:	e008      	b.n	8002668 <menu+0x1214>
			} else if(dilSecim == 1){
 8002656:	4b49      	ldr	r3, [pc, #292]	; (800277c <menu+0x1328>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d104      	bne.n	8002668 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800265e:	4a56      	ldr	r2, [pc, #344]	; (80027b8 <menu+0x1364>)
 8002660:	2101      	movs	r1, #1
 8002662:	2002      	movs	r0, #2
 8002664:	f005 fb88 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002668:	2102      	movs	r1, #2
 800266a:	4846      	ldr	r0, [pc, #280]	; (8002784 <menu+0x1330>)
 800266c:	f006 feaa 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002670:	4603      	mov	r3, r0
 8002672:	2b01      	cmp	r3, #1
 8002674:	d115      	bne.n	80026a2 <menu+0x124e>
 8002676:	4b44      	ldr	r3, [pc, #272]	; (8002788 <menu+0x1334>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	f083 0301 	eor.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00e      	beq.n	80026a2 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002684:	4b48      	ldr	r3, [pc, #288]	; (80027a8 <menu+0x1354>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b46      	ldr	r3, [pc, #280]	; (80027a8 <menu+0x1354>)
 800268e:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002690:	4b45      	ldr	r3, [pc, #276]	; (80027a8 <menu+0x1354>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d902      	bls.n	800269e <menu+0x124a>
				kapiAcTipi = 0;
 8002698:	4b43      	ldr	r3, [pc, #268]	; (80027a8 <menu+0x1354>)
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800269e:	f002 fa35 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026a2:	2104      	movs	r1, #4
 80026a4:	4837      	ldr	r0, [pc, #220]	; (8002784 <menu+0x1330>)
 80026a6:	f006 fe8d 	bl	80093c4 <HAL_GPIO_ReadPin>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d115      	bne.n	80026dc <menu+0x1288>
 80026b0:	4b35      	ldr	r3, [pc, #212]	; (8002788 <menu+0x1334>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f083 0301 	eor.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00e      	beq.n	80026dc <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80026be:	4b3a      	ldr	r3, [pc, #232]	; (80027a8 <menu+0x1354>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <menu+0x1354>)
 80026c8:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80026ca:	4b37      	ldr	r3, [pc, #220]	; (80027a8 <menu+0x1354>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <menu+0x1284>
		   		kapiAcTipi = 1;
 80026d2:	4b35      	ldr	r3, [pc, #212]	; (80027a8 <menu+0x1354>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026d8:	f002 fa18 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026dc:	2108      	movs	r1, #8
 80026de:	4829      	ldr	r0, [pc, #164]	; (8002784 <menu+0x1330>)
 80026e0:	f006 fe70 	bl	80093c4 <HAL_GPIO_ReadPin>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d10e      	bne.n	8002708 <menu+0x12b4>
 80026ea:	4b27      	ldr	r3, [pc, #156]	; (8002788 <menu+0x1334>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	f083 0301 	eor.w	r3, r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <menu+0x1354>)
 80026fa:	781a      	ldrb	r2, [r3, #0]
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <menu+0x133c>)
 80026fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002702:	4b25      	ldr	r3, [pc, #148]	; (8002798 <menu+0x1344>)
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002708:	4b24      	ldr	r3, [pc, #144]	; (800279c <menu+0x1348>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b09      	cmp	r3, #9
 800270e:	f040 80b9 	bne.w	8002884 <menu+0x1430>
		if(dilSecim == 0){
 8002712:	4b1a      	ldr	r3, [pc, #104]	; (800277c <menu+0x1328>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800271a:	4a28      	ldr	r2, [pc, #160]	; (80027bc <menu+0x1368>)
 800271c:	2101      	movs	r1, #1
 800271e:	2001      	movs	r0, #1
 8002720:	f005 fb2a 	bl	8007d78 <lcd_print>
 8002724:	e008      	b.n	8002738 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <menu+0x1328>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d104      	bne.n	8002738 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800272e:	4a24      	ldr	r2, [pc, #144]	; (80027c0 <menu+0x136c>)
 8002730:	2101      	movs	r1, #1
 8002732:	2001      	movs	r0, #1
 8002734:	f005 fb20 	bl	8007d78 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <menu+0x1370>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002740:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <menu+0x1374>)
 8002742:	2101      	movs	r1, #1
 8002744:	2002      	movs	r0, #2
 8002746:	f005 fb17 	bl	8007d78 <lcd_print>
 800274a:	e04c      	b.n	80027e6 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <menu+0x1370>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d13f      	bne.n	80027d4 <menu+0x1380>
			if(dilSecim == 0){
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <menu+0x1328>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 800275c:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <menu+0x1378>)
 800275e:	2101      	movs	r1, #1
 8002760:	2002      	movs	r0, #2
 8002762:	f005 fb09 	bl	8007d78 <lcd_print>
 8002766:	e03e      	b.n	80027e6 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <menu+0x1328>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d13a      	bne.n	80027e6 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002770:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <menu+0x137c>)
 8002772:	2101      	movs	r1, #1
 8002774:	2002      	movs	r0, #2
 8002776:	f005 faff 	bl	8007d78 <lcd_print>
 800277a:	e034      	b.n	80027e6 <menu+0x1392>
 800277c:	2000020d 	.word	0x2000020d
 8002780:	0800d548 	.word	0x0800d548
 8002784:	40010800 	.word	0x40010800
 8002788:	2000021b 	.word	0x2000021b
 800278c:	200001f4 	.word	0x200001f4
 8002790:	20000118 	.word	0x20000118
 8002794:	200001f2 	.word	0x200001f2
 8002798:	20000218 	.word	0x20000218
 800279c:	200001ec 	.word	0x200001ec
 80027a0:	0800d55c 	.word	0x0800d55c
 80027a4:	0800d570 	.word	0x0800d570
 80027a8:	200001f8 	.word	0x200001f8
 80027ac:	0800d584 	.word	0x0800d584
 80027b0:	0800d594 	.word	0x0800d594
 80027b4:	0800d5a4 	.word	0x0800d5a4
 80027b8:	0800d5b8 	.word	0x0800d5b8
 80027bc:	0800d5cc 	.word	0x0800d5cc
 80027c0:	0800d5e0 	.word	0x0800d5e0
 80027c4:	200001f5 	.word	0x200001f5
 80027c8:	0800d5f4 	.word	0x0800d5f4
 80027cc:	0800d608 	.word	0x0800d608
 80027d0:	0800d618 	.word	0x0800d618
			}
		} else if(kapi1Tip == 2) {
 80027d4:	4b8a      	ldr	r3, [pc, #552]	; (8002a00 <menu+0x15ac>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d104      	bne.n	80027e6 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 80027dc:	4a89      	ldr	r2, [pc, #548]	; (8002a04 <menu+0x15b0>)
 80027de:	2101      	movs	r1, #1
 80027e0:	2002      	movs	r0, #2
 80027e2:	f005 fac9 	bl	8007d78 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027e6:	2102      	movs	r1, #2
 80027e8:	4887      	ldr	r0, [pc, #540]	; (8002a08 <menu+0x15b4>)
 80027ea:	f006 fdeb 	bl	80093c4 <HAL_GPIO_ReadPin>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d115      	bne.n	8002820 <menu+0x13cc>
 80027f4:	4b85      	ldr	r3, [pc, #532]	; (8002a0c <menu+0x15b8>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	f083 0301 	eor.w	r3, r3, #1
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00e      	beq.n	8002820 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002802:	4b7f      	ldr	r3, [pc, #508]	; (8002a00 <menu+0x15ac>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	3301      	adds	r3, #1
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4b7d      	ldr	r3, [pc, #500]	; (8002a00 <menu+0x15ac>)
 800280c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800280e:	4b7c      	ldr	r3, [pc, #496]	; (8002a00 <menu+0x15ac>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d902      	bls.n	800281c <menu+0x13c8>
				kapi1Tip = 0;
 8002816:	4b7a      	ldr	r3, [pc, #488]	; (8002a00 <menu+0x15ac>)
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800281c:	f002 f976 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002820:	2104      	movs	r1, #4
 8002822:	4879      	ldr	r0, [pc, #484]	; (8002a08 <menu+0x15b4>)
 8002824:	f006 fdce 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002828:	4603      	mov	r3, r0
 800282a:	2b01      	cmp	r3, #1
 800282c:	d115      	bne.n	800285a <menu+0x1406>
 800282e:	4b77      	ldr	r3, [pc, #476]	; (8002a0c <menu+0x15b8>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	f083 0301 	eor.w	r3, r3, #1
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00e      	beq.n	800285a <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 800283c:	4b70      	ldr	r3, [pc, #448]	; (8002a00 <menu+0x15ac>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	3b01      	subs	r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	4b6e      	ldr	r3, [pc, #440]	; (8002a00 <menu+0x15ac>)
 8002846:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002848:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <menu+0x15ac>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d902      	bls.n	8002856 <menu+0x1402>
		   		kapi1Tip = 2;
 8002850:	4b6b      	ldr	r3, [pc, #428]	; (8002a00 <menu+0x15ac>)
 8002852:	2202      	movs	r2, #2
 8002854:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002856:	f002 f959 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800285a:	2108      	movs	r1, #8
 800285c:	486a      	ldr	r0, [pc, #424]	; (8002a08 <menu+0x15b4>)
 800285e:	f006 fdb1 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002862:	4603      	mov	r3, r0
 8002864:	2b01      	cmp	r3, #1
 8002866:	d10d      	bne.n	8002884 <menu+0x1430>
 8002868:	4b68      	ldr	r3, [pc, #416]	; (8002a0c <menu+0x15b8>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	f083 0301 	eor.w	r3, r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d006      	beq.n	8002884 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002876:	4b62      	ldr	r3, [pc, #392]	; (8002a00 <menu+0x15ac>)
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <menu+0x15bc>)
 800287c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800287e:	4b65      	ldr	r3, [pc, #404]	; (8002a14 <menu+0x15c0>)
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002884:	4b64      	ldr	r3, [pc, #400]	; (8002a18 <menu+0x15c4>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b0a      	cmp	r3, #10
 800288a:	d17f      	bne.n	800298c <menu+0x1538>
		if(dilSecim == 0) {
 800288c:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <menu+0x15c8>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002894:	4a62      	ldr	r2, [pc, #392]	; (8002a20 <menu+0x15cc>)
 8002896:	2101      	movs	r1, #1
 8002898:	2001      	movs	r0, #1
 800289a:	f005 fa6d 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800289e:	4a61      	ldr	r2, [pc, #388]	; (8002a24 <menu+0x15d0>)
 80028a0:	2101      	movs	r1, #1
 80028a2:	2002      	movs	r0, #2
 80028a4:	f005 fa68 	bl	8007d78 <lcd_print>
 80028a8:	e00d      	b.n	80028c6 <menu+0x1472>
		} else if(dilSecim == 1) {
 80028aa:	4b5c      	ldr	r3, [pc, #368]	; (8002a1c <menu+0x15c8>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d109      	bne.n	80028c6 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80028b2:	4a5d      	ldr	r2, [pc, #372]	; (8002a28 <menu+0x15d4>)
 80028b4:	2101      	movs	r1, #1
 80028b6:	2001      	movs	r0, #1
 80028b8:	f005 fa5e 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80028bc:	4a5b      	ldr	r2, [pc, #364]	; (8002a2c <menu+0x15d8>)
 80028be:	2101      	movs	r1, #1
 80028c0:	2002      	movs	r0, #2
 80028c2:	f005 fa59 	bl	8007d78 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80028c6:	4b5a      	ldr	r3, [pc, #360]	; (8002a30 <menu+0x15dc>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	220a      	movs	r2, #10
 80028cc:	4959      	ldr	r1, [pc, #356]	; (8002a34 <menu+0x15e0>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f009 fda4 	bl	800c41c <itoa>
		lcd_print(2,16,snum);
 80028d4:	4a57      	ldr	r2, [pc, #348]	; (8002a34 <menu+0x15e0>)
 80028d6:	2110      	movs	r1, #16
 80028d8:	2002      	movs	r0, #2
 80028da:	f005 fa4d 	bl	8007d78 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80028de:	2102      	movs	r1, #2
 80028e0:	4849      	ldr	r0, [pc, #292]	; (8002a08 <menu+0x15b4>)
 80028e2:	f006 fd6f 	bl	80093c4 <HAL_GPIO_ReadPin>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d119      	bne.n	8002920 <menu+0x14cc>
 80028ec:	4b47      	ldr	r3, [pc, #284]	; (8002a0c <menu+0x15b8>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	f083 0301 	eor.w	r3, r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d012      	beq.n	8002920 <menu+0x14cc>
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <menu+0x15ac>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10e      	bne.n	8002920 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002902:	4b4b      	ldr	r3, [pc, #300]	; (8002a30 <menu+0x15dc>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	3301      	adds	r3, #1
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <menu+0x15dc>)
 800290c:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800290e:	4b48      	ldr	r3, [pc, #288]	; (8002a30 <menu+0x15dc>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b05      	cmp	r3, #5
 8002914:	d902      	bls.n	800291c <menu+0x14c8>
				kapi1AcSure = 0;
 8002916:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <menu+0x15dc>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800291c:	f002 f8f6 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002920:	2104      	movs	r1, #4
 8002922:	4839      	ldr	r0, [pc, #228]	; (8002a08 <menu+0x15b4>)
 8002924:	f006 fd4e 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002928:	4603      	mov	r3, r0
 800292a:	2b01      	cmp	r3, #1
 800292c:	d119      	bne.n	8002962 <menu+0x150e>
 800292e:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <menu+0x15b8>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	f083 0301 	eor.w	r3, r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d012      	beq.n	8002962 <menu+0x150e>
 800293c:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <menu+0x15ac>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10e      	bne.n	8002962 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002944:	4b3a      	ldr	r3, [pc, #232]	; (8002a30 <menu+0x15dc>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3b01      	subs	r3, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <menu+0x15dc>)
 800294e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002950:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <menu+0x15dc>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b06      	cmp	r3, #6
 8002956:	d902      	bls.n	800295e <menu+0x150a>
		   		kapi1AcSure = 5;
 8002958:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <menu+0x15dc>)
 800295a:	2205      	movs	r2, #5
 800295c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800295e:	f002 f8d5 	bl	8004b0c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002962:	2108      	movs	r1, #8
 8002964:	4828      	ldr	r0, [pc, #160]	; (8002a08 <menu+0x15b4>)
 8002966:	f006 fd2d 	bl	80093c4 <HAL_GPIO_ReadPin>
 800296a:	4603      	mov	r3, r0
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10d      	bne.n	800298c <menu+0x1538>
 8002970:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <menu+0x15b8>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	f083 0301 	eor.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d006      	beq.n	800298c <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 800297e:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <menu+0x15dc>)
 8002980:	781a      	ldrb	r2, [r3, #0]
 8002982:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <menu+0x15bc>)
 8002984:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002986:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <menu+0x15c0>)
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 800298c:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <menu+0x15c4>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b0b      	cmp	r3, #11
 8002992:	f040 80b5 	bne.w	8002b00 <menu+0x16ac>
		if(dilSecim == 0) {
 8002996:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <menu+0x15c8>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d105      	bne.n	80029aa <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 800299e:	4a26      	ldr	r2, [pc, #152]	; (8002a38 <menu+0x15e4>)
 80029a0:	2101      	movs	r1, #1
 80029a2:	2001      	movs	r0, #1
 80029a4:	f005 f9e8 	bl	8007d78 <lcd_print>
 80029a8:	e008      	b.n	80029bc <menu+0x1568>
		} else if(dilSecim == 1) {
 80029aa:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <menu+0x15c8>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d104      	bne.n	80029bc <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80029b2:	4a22      	ldr	r2, [pc, #136]	; (8002a3c <menu+0x15e8>)
 80029b4:	2101      	movs	r1, #1
 80029b6:	2001      	movs	r0, #1
 80029b8:	f005 f9de 	bl	8007d78 <lcd_print>
		}

		if(kapi2Tip == 0) {
 80029bc:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <menu+0x15ec>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 80029c4:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <menu+0x15f0>)
 80029c6:	2101      	movs	r1, #1
 80029c8:	2002      	movs	r0, #2
 80029ca:	f005 f9d5 	bl	8007d78 <lcd_print>
 80029ce:	e048      	b.n	8002a62 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <menu+0x15ec>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d13b      	bne.n	8002a50 <menu+0x15fc>
			if(dilSecim == 0) {
 80029d8:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <menu+0x15c8>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d105      	bne.n	80029ec <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 80029e0:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <menu+0x15f4>)
 80029e2:	2101      	movs	r1, #1
 80029e4:	2002      	movs	r0, #2
 80029e6:	f005 f9c7 	bl	8007d78 <lcd_print>
 80029ea:	e03a      	b.n	8002a62 <menu+0x160e>
			} else if(dilSecim == 1) {
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <menu+0x15c8>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d136      	bne.n	8002a62 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80029f4:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <menu+0x15f8>)
 80029f6:	2101      	movs	r1, #1
 80029f8:	2002      	movs	r0, #2
 80029fa:	f005 f9bd 	bl	8007d78 <lcd_print>
 80029fe:	e030      	b.n	8002a62 <menu+0x160e>
 8002a00:	200001f5 	.word	0x200001f5
 8002a04:	0800d62c 	.word	0x0800d62c
 8002a08:	40010800 	.word	0x40010800
 8002a0c:	2000021b 	.word	0x2000021b
 8002a10:	20000118 	.word	0x20000118
 8002a14:	20000218 	.word	0x20000218
 8002a18:	200001ec 	.word	0x200001ec
 8002a1c:	2000020d 	.word	0x2000020d
 8002a20:	0800d63c 	.word	0x0800d63c
 8002a24:	0800d650 	.word	0x0800d650
 8002a28:	0800d660 	.word	0x0800d660
 8002a2c:	0800d674 	.word	0x0800d674
 8002a30:	20000205 	.word	0x20000205
 8002a34:	20000188 	.word	0x20000188
 8002a38:	0800d684 	.word	0x0800d684
 8002a3c:	0800d698 	.word	0x0800d698
 8002a40:	200001f6 	.word	0x200001f6
 8002a44:	0800d5f4 	.word	0x0800d5f4
 8002a48:	0800d608 	.word	0x0800d608
 8002a4c:	0800d618 	.word	0x0800d618
			}
		} else if(kapi2Tip == 2) {
 8002a50:	4b8a      	ldr	r3, [pc, #552]	; (8002c7c <menu+0x1828>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d104      	bne.n	8002a62 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002a58:	4a89      	ldr	r2, [pc, #548]	; (8002c80 <menu+0x182c>)
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	2002      	movs	r0, #2
 8002a5e:	f005 f98b 	bl	8007d78 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a62:	2102      	movs	r1, #2
 8002a64:	4887      	ldr	r0, [pc, #540]	; (8002c84 <menu+0x1830>)
 8002a66:	f006 fcad 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d115      	bne.n	8002a9c <menu+0x1648>
 8002a70:	4b85      	ldr	r3, [pc, #532]	; (8002c88 <menu+0x1834>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	f083 0301 	eor.w	r3, r3, #1
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00e      	beq.n	8002a9c <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002a7e:	4b7f      	ldr	r3, [pc, #508]	; (8002c7c <menu+0x1828>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	3301      	adds	r3, #1
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4b7d      	ldr	r3, [pc, #500]	; (8002c7c <menu+0x1828>)
 8002a88:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002a8a:	4b7c      	ldr	r3, [pc, #496]	; (8002c7c <menu+0x1828>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d902      	bls.n	8002a98 <menu+0x1644>
				kapi2Tip = 0;
 8002a92:	4b7a      	ldr	r3, [pc, #488]	; (8002c7c <menu+0x1828>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a98:	f002 f838 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a9c:	2104      	movs	r1, #4
 8002a9e:	4879      	ldr	r0, [pc, #484]	; (8002c84 <menu+0x1830>)
 8002aa0:	f006 fc90 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d115      	bne.n	8002ad6 <menu+0x1682>
 8002aaa:	4b77      	ldr	r3, [pc, #476]	; (8002c88 <menu+0x1834>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	f083 0301 	eor.w	r3, r3, #1
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00e      	beq.n	8002ad6 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002ab8:	4b70      	ldr	r3, [pc, #448]	; (8002c7c <menu+0x1828>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	4b6e      	ldr	r3, [pc, #440]	; (8002c7c <menu+0x1828>)
 8002ac2:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002ac4:	4b6d      	ldr	r3, [pc, #436]	; (8002c7c <menu+0x1828>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d902      	bls.n	8002ad2 <menu+0x167e>
		   		kapi2Tip = 2;
 8002acc:	4b6b      	ldr	r3, [pc, #428]	; (8002c7c <menu+0x1828>)
 8002ace:	2202      	movs	r2, #2
 8002ad0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ad2:	f002 f81b 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad6:	2108      	movs	r1, #8
 8002ad8:	486a      	ldr	r0, [pc, #424]	; (8002c84 <menu+0x1830>)
 8002ada:	f006 fc73 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10d      	bne.n	8002b00 <menu+0x16ac>
 8002ae4:	4b68      	ldr	r3, [pc, #416]	; (8002c88 <menu+0x1834>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	f083 0301 	eor.w	r3, r3, #1
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002af2:	4b62      	ldr	r3, [pc, #392]	; (8002c7c <menu+0x1828>)
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	4b65      	ldr	r3, [pc, #404]	; (8002c8c <menu+0x1838>)
 8002af8:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002afa:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <menu+0x183c>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002b00:	4b64      	ldr	r3, [pc, #400]	; (8002c94 <menu+0x1840>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	d17f      	bne.n	8002c08 <menu+0x17b4>
		if(dilSecim == 0) {
 8002b08:	4b63      	ldr	r3, [pc, #396]	; (8002c98 <menu+0x1844>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10a      	bne.n	8002b26 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002b10:	4a62      	ldr	r2, [pc, #392]	; (8002c9c <menu+0x1848>)
 8002b12:	2101      	movs	r1, #1
 8002b14:	2001      	movs	r0, #1
 8002b16:	f005 f92f 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002b1a:	4a61      	ldr	r2, [pc, #388]	; (8002ca0 <menu+0x184c>)
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	2002      	movs	r0, #2
 8002b20:	f005 f92a 	bl	8007d78 <lcd_print>
 8002b24:	e00d      	b.n	8002b42 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002b26:	4b5c      	ldr	r3, [pc, #368]	; (8002c98 <menu+0x1844>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d109      	bne.n	8002b42 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002b2e:	4a5d      	ldr	r2, [pc, #372]	; (8002ca4 <menu+0x1850>)
 8002b30:	2101      	movs	r1, #1
 8002b32:	2001      	movs	r0, #1
 8002b34:	f005 f920 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002b38:	4a5b      	ldr	r2, [pc, #364]	; (8002ca8 <menu+0x1854>)
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	2002      	movs	r0, #2
 8002b3e:	f005 f91b 	bl	8007d78 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002b42:	4b5a      	ldr	r3, [pc, #360]	; (8002cac <menu+0x1858>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	220a      	movs	r2, #10
 8002b48:	4959      	ldr	r1, [pc, #356]	; (8002cb0 <menu+0x185c>)
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f009 fc66 	bl	800c41c <itoa>
		lcd_print(2,16,snum);
 8002b50:	4a57      	ldr	r2, [pc, #348]	; (8002cb0 <menu+0x185c>)
 8002b52:	2110      	movs	r1, #16
 8002b54:	2002      	movs	r0, #2
 8002b56:	f005 f90f 	bl	8007d78 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	4849      	ldr	r0, [pc, #292]	; (8002c84 <menu+0x1830>)
 8002b5e:	f006 fc31 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d119      	bne.n	8002b9c <menu+0x1748>
 8002b68:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <menu+0x1834>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	f083 0301 	eor.w	r3, r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d012      	beq.n	8002b9c <menu+0x1748>
 8002b76:	4b41      	ldr	r3, [pc, #260]	; (8002c7c <menu+0x1828>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10e      	bne.n	8002b9c <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002b7e:	4b4b      	ldr	r3, [pc, #300]	; (8002cac <menu+0x1858>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	3301      	adds	r3, #1
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4b49      	ldr	r3, [pc, #292]	; (8002cac <menu+0x1858>)
 8002b88:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002b8a:	4b48      	ldr	r3, [pc, #288]	; (8002cac <menu+0x1858>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d902      	bls.n	8002b98 <menu+0x1744>
				kapi2AcSure = 0;
 8002b92:	4b46      	ldr	r3, [pc, #280]	; (8002cac <menu+0x1858>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b98:	f001 ffb8 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	4839      	ldr	r0, [pc, #228]	; (8002c84 <menu+0x1830>)
 8002ba0:	f006 fc10 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d119      	bne.n	8002bde <menu+0x178a>
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <menu+0x1834>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	f083 0301 	eor.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d012      	beq.n	8002bde <menu+0x178a>
 8002bb8:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <menu+0x1828>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10e      	bne.n	8002bde <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002bc0:	4b3a      	ldr	r3, [pc, #232]	; (8002cac <menu+0x1858>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	4b38      	ldr	r3, [pc, #224]	; (8002cac <menu+0x1858>)
 8002bca:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002bcc:	4b37      	ldr	r3, [pc, #220]	; (8002cac <menu+0x1858>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b06      	cmp	r3, #6
 8002bd2:	d902      	bls.n	8002bda <menu+0x1786>
		   		kapi2AcSure = 5;
 8002bd4:	4b35      	ldr	r3, [pc, #212]	; (8002cac <menu+0x1858>)
 8002bd6:	2205      	movs	r2, #5
 8002bd8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bda:	f001 ff97 	bl	8004b0c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bde:	2108      	movs	r1, #8
 8002be0:	4828      	ldr	r0, [pc, #160]	; (8002c84 <menu+0x1830>)
 8002be2:	f006 fbef 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d10d      	bne.n	8002c08 <menu+0x17b4>
 8002bec:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <menu+0x1834>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	f083 0301 	eor.w	r3, r3, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002bfa:	4b2c      	ldr	r3, [pc, #176]	; (8002cac <menu+0x1858>)
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <menu+0x1838>)
 8002c00:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002c02:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <menu+0x183c>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002c08:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <menu+0x1840>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b0d      	cmp	r3, #13
 8002c0e:	f040 80b5 	bne.w	8002d7c <menu+0x1928>
		if(dilSecim == 0) {
 8002c12:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <menu+0x1844>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002c1a:	4a26      	ldr	r2, [pc, #152]	; (8002cb4 <menu+0x1860>)
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f005 f8aa 	bl	8007d78 <lcd_print>
 8002c24:	e008      	b.n	8002c38 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002c26:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <menu+0x1844>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d104      	bne.n	8002c38 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002c2e:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <menu+0x1864>)
 8002c30:	2101      	movs	r1, #1
 8002c32:	2001      	movs	r0, #1
 8002c34:	f005 f8a0 	bl	8007d78 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002c38:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <menu+0x1868>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002c40:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <menu+0x186c>)
 8002c42:	2101      	movs	r1, #1
 8002c44:	2002      	movs	r0, #2
 8002c46:	f005 f897 	bl	8007d78 <lcd_print>
 8002c4a:	e048      	b.n	8002cde <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <menu+0x1868>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d13b      	bne.n	8002ccc <menu+0x1878>
			if(dilSecim == 0) {
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <menu+0x1844>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002c5c:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <menu+0x1870>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	2002      	movs	r0, #2
 8002c62:	f005 f889 	bl	8007d78 <lcd_print>
 8002c66:	e03a      	b.n	8002cde <menu+0x188a>
			} else if(dilSecim == 1) {
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <menu+0x1844>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d136      	bne.n	8002cde <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002c70:	4a15      	ldr	r2, [pc, #84]	; (8002cc8 <menu+0x1874>)
 8002c72:	2101      	movs	r1, #1
 8002c74:	2002      	movs	r0, #2
 8002c76:	f005 f87f 	bl	8007d78 <lcd_print>
 8002c7a:	e030      	b.n	8002cde <menu+0x188a>
 8002c7c:	200001f6 	.word	0x200001f6
 8002c80:	0800d62c 	.word	0x0800d62c
 8002c84:	40010800 	.word	0x40010800
 8002c88:	2000021b 	.word	0x2000021b
 8002c8c:	20000118 	.word	0x20000118
 8002c90:	20000218 	.word	0x20000218
 8002c94:	200001ec 	.word	0x200001ec
 8002c98:	2000020d 	.word	0x2000020d
 8002c9c:	0800d6ac 	.word	0x0800d6ac
 8002ca0:	0800d650 	.word	0x0800d650
 8002ca4:	0800d6c0 	.word	0x0800d6c0
 8002ca8:	0800d674 	.word	0x0800d674
 8002cac:	20000206 	.word	0x20000206
 8002cb0:	20000188 	.word	0x20000188
 8002cb4:	0800d6d4 	.word	0x0800d6d4
 8002cb8:	0800d6e8 	.word	0x0800d6e8
 8002cbc:	200001f7 	.word	0x200001f7
 8002cc0:	0800d5f4 	.word	0x0800d5f4
 8002cc4:	0800d608 	.word	0x0800d608
 8002cc8:	0800d618 	.word	0x0800d618
			}
		} else if(kapitablaTip == 2) {
 8002ccc:	4b5b      	ldr	r3, [pc, #364]	; (8002e3c <menu+0x19e8>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d104      	bne.n	8002cde <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002cd4:	4a5a      	ldr	r2, [pc, #360]	; (8002e40 <menu+0x19ec>)
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2002      	movs	r0, #2
 8002cda:	f005 f84d 	bl	8007d78 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cde:	2102      	movs	r1, #2
 8002ce0:	4858      	ldr	r0, [pc, #352]	; (8002e44 <menu+0x19f0>)
 8002ce2:	f006 fb6f 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d115      	bne.n	8002d18 <menu+0x18c4>
 8002cec:	4b56      	ldr	r3, [pc, #344]	; (8002e48 <menu+0x19f4>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	f083 0301 	eor.w	r3, r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00e      	beq.n	8002d18 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002cfa:	4b50      	ldr	r3, [pc, #320]	; (8002e3c <menu+0x19e8>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4b4e      	ldr	r3, [pc, #312]	; (8002e3c <menu+0x19e8>)
 8002d04:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002d06:	4b4d      	ldr	r3, [pc, #308]	; (8002e3c <menu+0x19e8>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d902      	bls.n	8002d14 <menu+0x18c0>
				kapitablaTip = 0;
 8002d0e:	4b4b      	ldr	r3, [pc, #300]	; (8002e3c <menu+0x19e8>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d14:	f001 fefa 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d18:	2104      	movs	r1, #4
 8002d1a:	484a      	ldr	r0, [pc, #296]	; (8002e44 <menu+0x19f0>)
 8002d1c:	f006 fb52 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d115      	bne.n	8002d52 <menu+0x18fe>
 8002d26:	4b48      	ldr	r3, [pc, #288]	; (8002e48 <menu+0x19f4>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	f083 0301 	eor.w	r3, r3, #1
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00e      	beq.n	8002d52 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002d34:	4b41      	ldr	r3, [pc, #260]	; (8002e3c <menu+0x19e8>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	4b3f      	ldr	r3, [pc, #252]	; (8002e3c <menu+0x19e8>)
 8002d3e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002d40:	4b3e      	ldr	r3, [pc, #248]	; (8002e3c <menu+0x19e8>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d902      	bls.n	8002d4e <menu+0x18fa>
		   		kapitablaTip = 2;
 8002d48:	4b3c      	ldr	r3, [pc, #240]	; (8002e3c <menu+0x19e8>)
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d4e:	f001 fedd 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d52:	2108      	movs	r1, #8
 8002d54:	483b      	ldr	r0, [pc, #236]	; (8002e44 <menu+0x19f0>)
 8002d56:	f006 fb35 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d10d      	bne.n	8002d7c <menu+0x1928>
 8002d60:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <menu+0x19f4>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	f083 0301 	eor.w	r3, r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d006      	beq.n	8002d7c <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002d6e:	4b33      	ldr	r3, [pc, #204]	; (8002e3c <menu+0x19e8>)
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <menu+0x19f8>)
 8002d74:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002d76:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <menu+0x19fc>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002d7c:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <menu+0x1a00>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b0e      	cmp	r3, #14
 8002d82:	f040 80f2 	bne.w	8002f6a <menu+0x1b16>
		if(dilSecim == 0) {
 8002d86:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <menu+0x1a04>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002d8e:	4a33      	ldr	r2, [pc, #204]	; (8002e5c <menu+0x1a08>)
 8002d90:	2101      	movs	r1, #1
 8002d92:	2001      	movs	r0, #1
 8002d94:	f004 fff0 	bl	8007d78 <lcd_print>
 8002d98:	e008      	b.n	8002dac <menu+0x1958>
		} else if(dilSecim == 1) {
 8002d9a:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <menu+0x1a04>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d104      	bne.n	8002dac <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002da2:	4a2f      	ldr	r2, [pc, #188]	; (8002e60 <menu+0x1a0c>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	2001      	movs	r0, #1
 8002da8:	f004 ffe6 	bl	8007d78 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002dac:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <menu+0x1a10>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d113      	bne.n	8002ddc <menu+0x1988>
			if(dilSecim == 0){
 8002db4:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <menu+0x1a04>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d105      	bne.n	8002dc8 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002dbc:	4a2a      	ldr	r2, [pc, #168]	; (8002e68 <menu+0x1a14>)
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f004 ffd9 	bl	8007d78 <lcd_print>
 8002dc6:	e071      	b.n	8002eac <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002dc8:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <menu+0x1a04>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d16d      	bne.n	8002eac <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002dd0:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <menu+0x1a18>)
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	2002      	movs	r0, #2
 8002dd6:	f004 ffcf 	bl	8007d78 <lcd_print>
 8002dda:	e067      	b.n	8002eac <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <menu+0x1a10>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d112      	bne.n	8002e0a <menu+0x19b6>
			if(dilSecim == 0){
 8002de4:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <menu+0x1a04>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d104      	bne.n	8002df6 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002dec:	4a20      	ldr	r2, [pc, #128]	; (8002e70 <menu+0x1a1c>)
 8002dee:	2101      	movs	r1, #1
 8002df0:	2002      	movs	r0, #2
 8002df2:	f004 ffc1 	bl	8007d78 <lcd_print>
			}
			if(dilSecim == 1){
 8002df6:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <menu+0x1a04>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d156      	bne.n	8002eac <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002dfe:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <menu+0x1a20>)
 8002e00:	2101      	movs	r1, #1
 8002e02:	2002      	movs	r0, #2
 8002e04:	f004 ffb8 	bl	8007d78 <lcd_print>
 8002e08:	e050      	b.n	8002eac <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <menu+0x1a10>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d136      	bne.n	8002e80 <menu+0x1a2c>
			if(dilSecim == 0){
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <menu+0x1a04>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d105      	bne.n	8002e26 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002e1a:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <menu+0x1a24>)
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	2002      	movs	r0, #2
 8002e20:	f004 ffaa 	bl	8007d78 <lcd_print>
 8002e24:	e042      	b.n	8002eac <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <menu+0x1a04>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d13e      	bne.n	8002eac <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <menu+0x1a28>)
 8002e30:	2101      	movs	r1, #1
 8002e32:	2002      	movs	r0, #2
 8002e34:	f004 ffa0 	bl	8007d78 <lcd_print>
 8002e38:	e038      	b.n	8002eac <menu+0x1a58>
 8002e3a:	bf00      	nop
 8002e3c:	200001f7 	.word	0x200001f7
 8002e40:	0800d62c 	.word	0x0800d62c
 8002e44:	40010800 	.word	0x40010800
 8002e48:	2000021b 	.word	0x2000021b
 8002e4c:	20000118 	.word	0x20000118
 8002e50:	20000218 	.word	0x20000218
 8002e54:	200001ec 	.word	0x200001ec
 8002e58:	2000020d 	.word	0x2000020d
 8002e5c:	0800d6fc 	.word	0x0800d6fc
 8002e60:	0800d710 	.word	0x0800d710
 8002e64:	200001f9 	.word	0x200001f9
 8002e68:	0800d724 	.word	0x0800d724
 8002e6c:	0800d734 	.word	0x0800d734
 8002e70:	0800d744 	.word	0x0800d744
 8002e74:	0800d754 	.word	0x0800d754
 8002e78:	0800d764 	.word	0x0800d764
 8002e7c:	0800d778 	.word	0x0800d778
			}
		} else if(kapiTablaAcKonum == 3) {
 8002e80:	4b9b      	ldr	r3, [pc, #620]	; (80030f0 <menu+0x1c9c>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d111      	bne.n	8002eac <menu+0x1a58>
			if(dilSecim == 0) {
 8002e88:	4b9a      	ldr	r3, [pc, #616]	; (80030f4 <menu+0x1ca0>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d104      	bne.n	8002e9a <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002e90:	4a99      	ldr	r2, [pc, #612]	; (80030f8 <menu+0x1ca4>)
 8002e92:	2101      	movs	r1, #1
 8002e94:	2002      	movs	r0, #2
 8002e96:	f004 ff6f 	bl	8007d78 <lcd_print>
			}
			if(dilSecim == 1) {
 8002e9a:	4b96      	ldr	r3, [pc, #600]	; (80030f4 <menu+0x1ca0>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d104      	bne.n	8002eac <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002ea2:	4a96      	ldr	r2, [pc, #600]	; (80030fc <menu+0x1ca8>)
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	2002      	movs	r0, #2
 8002ea8:	f004 ff66 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eac:	2102      	movs	r1, #2
 8002eae:	4894      	ldr	r0, [pc, #592]	; (8003100 <menu+0x1cac>)
 8002eb0:	f006 fa88 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d115      	bne.n	8002ee6 <menu+0x1a92>
 8002eba:	4b92      	ldr	r3, [pc, #584]	; (8003104 <menu+0x1cb0>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	f083 0301 	eor.w	r3, r3, #1
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002ec8:	4b89      	ldr	r3, [pc, #548]	; (80030f0 <menu+0x1c9c>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	4b87      	ldr	r3, [pc, #540]	; (80030f0 <menu+0x1c9c>)
 8002ed2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002ed4:	4b86      	ldr	r3, [pc, #536]	; (80030f0 <menu+0x1c9c>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d902      	bls.n	8002ee2 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002edc:	4b84      	ldr	r3, [pc, #528]	; (80030f0 <menu+0x1c9c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ee2:	f001 fe13 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ee6:	2104      	movs	r1, #4
 8002ee8:	4885      	ldr	r0, [pc, #532]	; (8003100 <menu+0x1cac>)
 8002eea:	f006 fa6b 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d115      	bne.n	8002f20 <menu+0x1acc>
 8002ef4:	4b83      	ldr	r3, [pc, #524]	; (8003104 <menu+0x1cb0>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	f083 0301 	eor.w	r3, r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00e      	beq.n	8002f20 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002f02:	4b7b      	ldr	r3, [pc, #492]	; (80030f0 <menu+0x1c9c>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4b79      	ldr	r3, [pc, #484]	; (80030f0 <menu+0x1c9c>)
 8002f0c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002f0e:	4b78      	ldr	r3, [pc, #480]	; (80030f0 <menu+0x1c9c>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d902      	bls.n	8002f1c <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002f16:	4b76      	ldr	r3, [pc, #472]	; (80030f0 <menu+0x1c9c>)
 8002f18:	2202      	movs	r2, #2
 8002f1a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f1c:	f001 fdf6 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f20:	2108      	movs	r1, #8
 8002f22:	4877      	ldr	r0, [pc, #476]	; (8003100 <menu+0x1cac>)
 8002f24:	f006 fa4e 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d11d      	bne.n	8002f6a <menu+0x1b16>
 8002f2e:	4b75      	ldr	r3, [pc, #468]	; (8003104 <menu+0x1cb0>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	f083 0301 	eor.w	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d016      	beq.n	8002f6a <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002f3c:	4b6c      	ldr	r3, [pc, #432]	; (80030f0 <menu+0x1c9c>)
 8002f3e:	781a      	ldrb	r2, [r3, #0]
 8002f40:	4b71      	ldr	r3, [pc, #452]	; (8003108 <menu+0x1cb4>)
 8002f42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002f46:	4b6a      	ldr	r3, [pc, #424]	; (80030f0 <menu+0x1c9c>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <menu+0x1b02>
 8002f4e:	4b68      	ldr	r3, [pc, #416]	; (80030f0 <menu+0x1c9c>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d106      	bne.n	8002f64 <menu+0x1b10>
				altLimit = 1;
 8002f56:	4b6d      	ldr	r3, [pc, #436]	; (800310c <menu+0x1cb8>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002f5c:	4b6b      	ldr	r3, [pc, #428]	; (800310c <menu+0x1cb8>)
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	4b69      	ldr	r3, [pc, #420]	; (8003108 <menu+0x1cb4>)
 8002f62:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002f64:	4b6a      	ldr	r3, [pc, #424]	; (8003110 <menu+0x1cbc>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002f6a:	4b6a      	ldr	r3, [pc, #424]	; (8003114 <menu+0x1cc0>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	d17f      	bne.n	8003072 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002f72:	4b60      	ldr	r3, [pc, #384]	; (80030f4 <menu+0x1ca0>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002f7a:	4a67      	ldr	r2, [pc, #412]	; (8003118 <menu+0x1cc4>)
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f004 fefa 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002f84:	4a65      	ldr	r2, [pc, #404]	; (800311c <menu+0x1cc8>)
 8002f86:	2101      	movs	r1, #1
 8002f88:	2002      	movs	r0, #2
 8002f8a:	f004 fef5 	bl	8007d78 <lcd_print>
 8002f8e:	e00d      	b.n	8002fac <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002f90:	4b58      	ldr	r3, [pc, #352]	; (80030f4 <menu+0x1ca0>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d109      	bne.n	8002fac <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002f98:	4a61      	ldr	r2, [pc, #388]	; (8003120 <menu+0x1ccc>)
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	f004 feeb 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002fa2:	4a60      	ldr	r2, [pc, #384]	; (8003124 <menu+0x1cd0>)
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	2002      	movs	r0, #2
 8002fa8:	f004 fee6 	bl	8007d78 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002fac:	4b5e      	ldr	r3, [pc, #376]	; (8003128 <menu+0x1cd4>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	220a      	movs	r2, #10
 8002fb2:	495e      	ldr	r1, [pc, #376]	; (800312c <menu+0x1cd8>)
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f009 fa31 	bl	800c41c <itoa>
		lcd_print(2,16,snum);
 8002fba:	4a5c      	ldr	r2, [pc, #368]	; (800312c <menu+0x1cd8>)
 8002fbc:	2110      	movs	r1, #16
 8002fbe:	2002      	movs	r0, #2
 8002fc0:	f004 feda 	bl	8007d78 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002fc4:	2102      	movs	r1, #2
 8002fc6:	484e      	ldr	r0, [pc, #312]	; (8003100 <menu+0x1cac>)
 8002fc8:	f006 f9fc 	bl	80093c4 <HAL_GPIO_ReadPin>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d119      	bne.n	8003006 <menu+0x1bb2>
 8002fd2:	4b4c      	ldr	r3, [pc, #304]	; (8003104 <menu+0x1cb0>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	f083 0301 	eor.w	r3, r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d012      	beq.n	8003006 <menu+0x1bb2>
 8002fe0:	4b53      	ldr	r3, [pc, #332]	; (8003130 <menu+0x1cdc>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10e      	bne.n	8003006 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002fe8:	4b4f      	ldr	r3, [pc, #316]	; (8003128 <menu+0x1cd4>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	4b4d      	ldr	r3, [pc, #308]	; (8003128 <menu+0x1cd4>)
 8002ff2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002ff4:	4b4c      	ldr	r3, [pc, #304]	; (8003128 <menu+0x1cd4>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d902      	bls.n	8003002 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002ffc:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <menu+0x1cd4>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003002:	f001 fd83 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003006:	2104      	movs	r1, #4
 8003008:	483d      	ldr	r0, [pc, #244]	; (8003100 <menu+0x1cac>)
 800300a:	f006 f9db 	bl	80093c4 <HAL_GPIO_ReadPin>
 800300e:	4603      	mov	r3, r0
 8003010:	2b01      	cmp	r3, #1
 8003012:	d119      	bne.n	8003048 <menu+0x1bf4>
 8003014:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <menu+0x1cb0>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	f083 0301 	eor.w	r3, r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d012      	beq.n	8003048 <menu+0x1bf4>
 8003022:	4b43      	ldr	r3, [pc, #268]	; (8003130 <menu+0x1cdc>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10e      	bne.n	8003048 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800302a:	4b3f      	ldr	r3, [pc, #252]	; (8003128 <menu+0x1cd4>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	3b01      	subs	r3, #1
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4b3d      	ldr	r3, [pc, #244]	; (8003128 <menu+0x1cd4>)
 8003034:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003036:	4b3c      	ldr	r3, [pc, #240]	; (8003128 <menu+0x1cd4>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b06      	cmp	r3, #6
 800303c:	d902      	bls.n	8003044 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800303e:	4b3a      	ldr	r3, [pc, #232]	; (8003128 <menu+0x1cd4>)
 8003040:	2205      	movs	r2, #5
 8003042:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003044:	f001 fd62 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003048:	2108      	movs	r1, #8
 800304a:	482d      	ldr	r0, [pc, #180]	; (8003100 <menu+0x1cac>)
 800304c:	f006 f9ba 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003050:	4603      	mov	r3, r0
 8003052:	2b01      	cmp	r3, #1
 8003054:	d10d      	bne.n	8003072 <menu+0x1c1e>
 8003056:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <menu+0x1cb0>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	f083 0301 	eor.w	r3, r3, #1
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d006      	beq.n	8003072 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8003064:	4b30      	ldr	r3, [pc, #192]	; (8003128 <menu+0x1cd4>)
 8003066:	781a      	ldrb	r2, [r3, #0]
 8003068:	4b27      	ldr	r3, [pc, #156]	; (8003108 <menu+0x1cb4>)
 800306a:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 800306c:	4b28      	ldr	r3, [pc, #160]	; (8003110 <menu+0x1cbc>)
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8003072:	4b28      	ldr	r3, [pc, #160]	; (8003114 <menu+0x1cc0>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b10      	cmp	r3, #16
 8003078:	f040 80bc 	bne.w	80031f4 <menu+0x1da0>
		if(dilSecim == 0) {
 800307c:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <menu+0x1ca0>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d105      	bne.n	8003090 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003084:	4a2b      	ldr	r2, [pc, #172]	; (8003134 <menu+0x1ce0>)
 8003086:	2101      	movs	r1, #1
 8003088:	2001      	movs	r0, #1
 800308a:	f004 fe75 	bl	8007d78 <lcd_print>
 800308e:	e008      	b.n	80030a2 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8003090:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <menu+0x1ca0>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d104      	bne.n	80030a2 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003098:	4a27      	ldr	r2, [pc, #156]	; (8003138 <menu+0x1ce4>)
 800309a:	2101      	movs	r1, #1
 800309c:	2001      	movs	r0, #1
 800309e:	f004 fe6b 	bl	8007d78 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80030a2:	4b26      	ldr	r3, [pc, #152]	; (800313c <menu+0x1ce8>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d113      	bne.n	80030d2 <menu+0x1c7e>
			if(dilSecim == 0) {
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <menu+0x1ca0>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 80030b2:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <menu+0x1ca4>)
 80030b4:	2101      	movs	r1, #1
 80030b6:	2002      	movs	r0, #2
 80030b8:	f004 fe5e 	bl	8007d78 <lcd_print>
 80030bc:	e04b      	b.n	8003156 <menu+0x1d02>
			} else if(dilSecim == 1) {
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <menu+0x1ca0>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d147      	bne.n	8003156 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 80030c6:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <menu+0x1ca8>)
 80030c8:	2101      	movs	r1, #1
 80030ca:	2002      	movs	r0, #2
 80030cc:	f004 fe54 	bl	8007d78 <lcd_print>
 80030d0:	e041      	b.n	8003156 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 80030d2:	4b1a      	ldr	r3, [pc, #104]	; (800313c <menu+0x1ce8>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d13d      	bne.n	8003156 <menu+0x1d02>
			if(dilSecim == 0) {
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <menu+0x1ca0>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d130      	bne.n	8003144 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 80030e2:	4a17      	ldr	r2, [pc, #92]	; (8003140 <menu+0x1cec>)
 80030e4:	2101      	movs	r1, #1
 80030e6:	2002      	movs	r0, #2
 80030e8:	f004 fe46 	bl	8007d78 <lcd_print>
 80030ec:	e033      	b.n	8003156 <menu+0x1d02>
 80030ee:	bf00      	nop
 80030f0:	200001f9 	.word	0x200001f9
 80030f4:	2000020d 	.word	0x2000020d
 80030f8:	0800d3ec 	.word	0x0800d3ec
 80030fc:	0800d400 	.word	0x0800d400
 8003100:	40010800 	.word	0x40010800
 8003104:	2000021b 	.word	0x2000021b
 8003108:	20000118 	.word	0x20000118
 800310c:	200001f2 	.word	0x200001f2
 8003110:	20000218 	.word	0x20000218
 8003114:	200001ec 	.word	0x200001ec
 8003118:	0800d78c 	.word	0x0800d78c
 800311c:	0800d650 	.word	0x0800d650
 8003120:	0800d7a0 	.word	0x0800d7a0
 8003124:	0800d674 	.word	0x0800d674
 8003128:	20000207 	.word	0x20000207
 800312c:	20000188 	.word	0x20000188
 8003130:	200001f7 	.word	0x200001f7
 8003134:	0800d7b4 	.word	0x0800d7b4
 8003138:	0800d7c8 	.word	0x0800d7c8
 800313c:	200001fa 	.word	0x200001fa
 8003140:	0800d44c 	.word	0x0800d44c
			} else if(dilSecim == 1) {
 8003144:	4b99      	ldr	r3, [pc, #612]	; (80033ac <menu+0x1f58>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d104      	bne.n	8003156 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 800314c:	4a98      	ldr	r2, [pc, #608]	; (80033b0 <menu+0x1f5c>)
 800314e:	2101      	movs	r1, #1
 8003150:	2002      	movs	r0, #2
 8003152:	f004 fe11 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003156:	2102      	movs	r1, #2
 8003158:	4896      	ldr	r0, [pc, #600]	; (80033b4 <menu+0x1f60>)
 800315a:	f006 f933 	bl	80093c4 <HAL_GPIO_ReadPin>
 800315e:	4603      	mov	r3, r0
 8003160:	2b01      	cmp	r3, #1
 8003162:	d115      	bne.n	8003190 <menu+0x1d3c>
 8003164:	4b94      	ldr	r3, [pc, #592]	; (80033b8 <menu+0x1f64>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	f083 0301 	eor.w	r3, r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00e      	beq.n	8003190 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8003172:	4b92      	ldr	r3, [pc, #584]	; (80033bc <menu+0x1f68>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	3301      	adds	r3, #1
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4b90      	ldr	r3, [pc, #576]	; (80033bc <menu+0x1f68>)
 800317c:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800317e:	4b8f      	ldr	r3, [pc, #572]	; (80033bc <menu+0x1f68>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d902      	bls.n	800318c <menu+0x1d38>
				yukariYavasLimit = 0;
 8003186:	4b8d      	ldr	r3, [pc, #564]	; (80033bc <menu+0x1f68>)
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800318c:	f001 fcbe 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003190:	2104      	movs	r1, #4
 8003192:	4888      	ldr	r0, [pc, #544]	; (80033b4 <menu+0x1f60>)
 8003194:	f006 f916 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003198:	4603      	mov	r3, r0
 800319a:	2b01      	cmp	r3, #1
 800319c:	d115      	bne.n	80031ca <menu+0x1d76>
 800319e:	4b86      	ldr	r3, [pc, #536]	; (80033b8 <menu+0x1f64>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	f083 0301 	eor.w	r3, r3, #1
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00e      	beq.n	80031ca <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80031ac:	4b83      	ldr	r3, [pc, #524]	; (80033bc <menu+0x1f68>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	4b81      	ldr	r3, [pc, #516]	; (80033bc <menu+0x1f68>)
 80031b6:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80031b8:	4b80      	ldr	r3, [pc, #512]	; (80033bc <menu+0x1f68>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80031c0:	4b7e      	ldr	r3, [pc, #504]	; (80033bc <menu+0x1f68>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031c6:	f001 fca1 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ca:	2108      	movs	r1, #8
 80031cc:	4879      	ldr	r0, [pc, #484]	; (80033b4 <menu+0x1f60>)
 80031ce:	f006 f8f9 	bl	80093c4 <HAL_GPIO_ReadPin>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d10d      	bne.n	80031f4 <menu+0x1da0>
 80031d8:	4b77      	ldr	r3, [pc, #476]	; (80033b8 <menu+0x1f64>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	f083 0301 	eor.w	r3, r3, #1
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d006      	beq.n	80031f4 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80031e6:	4b75      	ldr	r3, [pc, #468]	; (80033bc <menu+0x1f68>)
 80031e8:	781a      	ldrb	r2, [r3, #0]
 80031ea:	4b75      	ldr	r3, [pc, #468]	; (80033c0 <menu+0x1f6c>)
 80031ec:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80031ee:	4b75      	ldr	r3, [pc, #468]	; (80033c4 <menu+0x1f70>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80031f4:	4b74      	ldr	r3, [pc, #464]	; (80033c8 <menu+0x1f74>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b11      	cmp	r3, #17
 80031fa:	f040 80c3 	bne.w	8003384 <menu+0x1f30>
		if(dilSecim == 0) {
 80031fe:	4b6b      	ldr	r3, [pc, #428]	; (80033ac <menu+0x1f58>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003206:	4a71      	ldr	r2, [pc, #452]	; (80033cc <menu+0x1f78>)
 8003208:	2101      	movs	r1, #1
 800320a:	2001      	movs	r0, #1
 800320c:	f004 fdb4 	bl	8007d78 <lcd_print>
 8003210:	e008      	b.n	8003224 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8003212:	4b66      	ldr	r3, [pc, #408]	; (80033ac <menu+0x1f58>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d104      	bne.n	8003224 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800321a:	4a6d      	ldr	r2, [pc, #436]	; (80033d0 <menu+0x1f7c>)
 800321c:	2101      	movs	r1, #1
 800321e:	2001      	movs	r0, #1
 8003220:	f004 fdaa 	bl	8007d78 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003224:	4b6b      	ldr	r3, [pc, #428]	; (80033d4 <menu+0x1f80>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d113      	bne.n	8003254 <menu+0x1e00>
			if(dilSecim == 0){
 800322c:	4b5f      	ldr	r3, [pc, #380]	; (80033ac <menu+0x1f58>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d105      	bne.n	8003240 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003234:	4a68      	ldr	r2, [pc, #416]	; (80033d8 <menu+0x1f84>)
 8003236:	2101      	movs	r1, #1
 8003238:	2002      	movs	r0, #2
 800323a:	f004 fd9d 	bl	8007d78 <lcd_print>
 800323e:	e038      	b.n	80032b2 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003240:	4b5a      	ldr	r3, [pc, #360]	; (80033ac <menu+0x1f58>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d134      	bne.n	80032b2 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003248:	4a64      	ldr	r2, [pc, #400]	; (80033dc <menu+0x1f88>)
 800324a:	2101      	movs	r1, #1
 800324c:	2002      	movs	r0, #2
 800324e:	f004 fd93 	bl	8007d78 <lcd_print>
 8003252:	e02e      	b.n	80032b2 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003254:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <menu+0x1f80>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d113      	bne.n	8003284 <menu+0x1e30>
			if(dilSecim == 0){
 800325c:	4b53      	ldr	r3, [pc, #332]	; (80033ac <menu+0x1f58>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003264:	4a5e      	ldr	r2, [pc, #376]	; (80033e0 <menu+0x1f8c>)
 8003266:	2101      	movs	r1, #1
 8003268:	2002      	movs	r0, #2
 800326a:	f004 fd85 	bl	8007d78 <lcd_print>
 800326e:	e020      	b.n	80032b2 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003270:	4b4e      	ldr	r3, [pc, #312]	; (80033ac <menu+0x1f58>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d11c      	bne.n	80032b2 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003278:	4a5a      	ldr	r2, [pc, #360]	; (80033e4 <menu+0x1f90>)
 800327a:	2101      	movs	r1, #1
 800327c:	2002      	movs	r0, #2
 800327e:	f004 fd7b 	bl	8007d78 <lcd_print>
 8003282:	e016      	b.n	80032b2 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003284:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <menu+0x1f80>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d112      	bne.n	80032b2 <menu+0x1e5e>
			if(dilSecim == 0) {
 800328c:	4b47      	ldr	r3, [pc, #284]	; (80033ac <menu+0x1f58>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d105      	bne.n	80032a0 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003294:	4a54      	ldr	r2, [pc, #336]	; (80033e8 <menu+0x1f94>)
 8003296:	2101      	movs	r1, #1
 8003298:	2002      	movs	r0, #2
 800329a:	f004 fd6d 	bl	8007d78 <lcd_print>
 800329e:	e008      	b.n	80032b2 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80032a0:	4b42      	ldr	r3, [pc, #264]	; (80033ac <menu+0x1f58>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d104      	bne.n	80032b2 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80032a8:	4a50      	ldr	r2, [pc, #320]	; (80033ec <menu+0x1f98>)
 80032aa:	2101      	movs	r1, #1
 80032ac:	2002      	movs	r0, #2
 80032ae:	f004 fd63 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032b2:	2102      	movs	r1, #2
 80032b4:	483f      	ldr	r0, [pc, #252]	; (80033b4 <menu+0x1f60>)
 80032b6:	f006 f885 	bl	80093c4 <HAL_GPIO_ReadPin>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d115      	bne.n	80032ec <menu+0x1e98>
 80032c0:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <menu+0x1f64>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	f083 0301 	eor.w	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00e      	beq.n	80032ec <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80032ce:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <menu+0x1f80>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4b3f      	ldr	r3, [pc, #252]	; (80033d4 <menu+0x1f80>)
 80032d8:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80032da:	4b3e      	ldr	r3, [pc, #248]	; (80033d4 <menu+0x1f80>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d902      	bls.n	80032e8 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80032e2:	4b3c      	ldr	r3, [pc, #240]	; (80033d4 <menu+0x1f80>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032e8:	f001 fc10 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ec:	2104      	movs	r1, #4
 80032ee:	4831      	ldr	r0, [pc, #196]	; (80033b4 <menu+0x1f60>)
 80032f0:	f006 f868 	bl	80093c4 <HAL_GPIO_ReadPin>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d115      	bne.n	8003326 <menu+0x1ed2>
 80032fa:	4b2f      	ldr	r3, [pc, #188]	; (80033b8 <menu+0x1f64>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	f083 0301 	eor.w	r3, r3, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003308:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <menu+0x1f80>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	3b01      	subs	r3, #1
 800330e:	b2da      	uxtb	r2, r3
 8003310:	4b30      	ldr	r3, [pc, #192]	; (80033d4 <menu+0x1f80>)
 8003312:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003314:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <menu+0x1f80>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d902      	bls.n	8003322 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 800331c:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <menu+0x1f80>)
 800331e:	2202      	movs	r2, #2
 8003320:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003322:	f001 fbf3 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003326:	2108      	movs	r1, #8
 8003328:	4822      	ldr	r0, [pc, #136]	; (80033b4 <menu+0x1f60>)
 800332a:	f006 f84b 	bl	80093c4 <HAL_GPIO_ReadPin>
 800332e:	4603      	mov	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d127      	bne.n	8003384 <menu+0x1f30>
 8003334:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <menu+0x1f64>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	f083 0301 	eor.w	r3, r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d020      	beq.n	8003384 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <menu+0x1f80>)
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <menu+0x1f6c>)
 8003348:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800334a:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <menu+0x1f80>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d003      	beq.n	800335a <menu+0x1f06>
 8003352:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <menu+0x1f80>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d106      	bne.n	8003368 <menu+0x1f14>
				calismaSekli = 0;
 800335a:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <menu+0x1f9c>)
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003360:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <menu+0x1f9c>)
 8003362:	781a      	ldrb	r2, [r3, #0]
 8003364:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <menu+0x1f6c>)
 8003366:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003368:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <menu+0x1f80>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d106      	bne.n	800337e <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003370:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <menu+0x1fa0>)
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003376:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <menu+0x1fa0>)
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <menu+0x1f6c>)
 800337c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <menu+0x1f70>)
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003384:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <menu+0x1f74>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b12      	cmp	r3, #18
 800338a:	f040 80d5 	bne.w	8003538 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800338e:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <menu+0x1f80>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d13c      	bne.n	8003410 <menu+0x1fbc>
			if(dilSecim == 0) {
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <menu+0x1f58>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d12e      	bne.n	80033fc <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800339e:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <menu+0x1fa4>)
 80033a0:	2101      	movs	r1, #1
 80033a2:	2001      	movs	r0, #1
 80033a4:	f004 fce8 	bl	8007d78 <lcd_print>
 80033a8:	e048      	b.n	800343c <menu+0x1fe8>
 80033aa:	bf00      	nop
 80033ac:	2000020d 	.word	0x2000020d
 80033b0:	0800d460 	.word	0x0800d460
 80033b4:	40010800 	.word	0x40010800
 80033b8:	2000021b 	.word	0x2000021b
 80033bc:	200001fa 	.word	0x200001fa
 80033c0:	20000118 	.word	0x20000118
 80033c4:	20000218 	.word	0x20000218
 80033c8:	200001ec 	.word	0x200001ec
 80033cc:	0800d7dc 	.word	0x0800d7dc
 80033d0:	0800d7f0 	.word	0x0800d7f0
 80033d4:	200001fb 	.word	0x200001fb
 80033d8:	0800d804 	.word	0x0800d804
 80033dc:	0800d814 	.word	0x0800d814
 80033e0:	0800d824 	.word	0x0800d824
 80033e4:	0800d834 	.word	0x0800d834
 80033e8:	0800d3ec 	.word	0x0800d3ec
 80033ec:	0800d400 	.word	0x0800d400
 80033f0:	200001ed 	.word	0x200001ed
 80033f4:	200001fe 	.word	0x200001fe
 80033f8:	0800d844 	.word	0x0800d844
			} else if(dilSecim == 1) {
 80033fc:	4b7b      	ldr	r3, [pc, #492]	; (80035ec <menu+0x2198>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d11b      	bne.n	800343c <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003404:	4a7a      	ldr	r2, [pc, #488]	; (80035f0 <menu+0x219c>)
 8003406:	2101      	movs	r1, #1
 8003408:	2001      	movs	r0, #1
 800340a:	f004 fcb5 	bl	8007d78 <lcd_print>
 800340e:	e015      	b.n	800343c <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003410:	4b78      	ldr	r3, [pc, #480]	; (80035f4 <menu+0x21a0>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d111      	bne.n	800343c <menu+0x1fe8>
			if(dilSecim == 0){
 8003418:	4b74      	ldr	r3, [pc, #464]	; (80035ec <menu+0x2198>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003420:	4a75      	ldr	r2, [pc, #468]	; (80035f8 <menu+0x21a4>)
 8003422:	2101      	movs	r1, #1
 8003424:	2001      	movs	r0, #1
 8003426:	f004 fca7 	bl	8007d78 <lcd_print>
			}
			if(dilSecim == 1){
 800342a:	4b70      	ldr	r3, [pc, #448]	; (80035ec <menu+0x2198>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d104      	bne.n	800343c <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003432:	4a72      	ldr	r2, [pc, #456]	; (80035fc <menu+0x21a8>)
 8003434:	2101      	movs	r1, #1
 8003436:	2001      	movs	r0, #1
 8003438:	f004 fc9e 	bl	8007d78 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 800343c:	4b70      	ldr	r3, [pc, #448]	; (8003600 <menu+0x21ac>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d113      	bne.n	800346c <menu+0x2018>
			if(dilSecim == 0) {
 8003444:	4b69      	ldr	r3, [pc, #420]	; (80035ec <menu+0x2198>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 800344c:	4a6d      	ldr	r2, [pc, #436]	; (8003604 <menu+0x21b0>)
 800344e:	2101      	movs	r1, #1
 8003450:	2002      	movs	r0, #2
 8003452:	f004 fc91 	bl	8007d78 <lcd_print>
 8003456:	e020      	b.n	800349a <menu+0x2046>
			} else if(dilSecim == 1){
 8003458:	4b64      	ldr	r3, [pc, #400]	; (80035ec <menu+0x2198>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d11c      	bne.n	800349a <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003460:	4a69      	ldr	r2, [pc, #420]	; (8003608 <menu+0x21b4>)
 8003462:	2101      	movs	r1, #1
 8003464:	2002      	movs	r0, #2
 8003466:	f004 fc87 	bl	8007d78 <lcd_print>
 800346a:	e016      	b.n	800349a <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 800346c:	4b64      	ldr	r3, [pc, #400]	; (8003600 <menu+0x21ac>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d112      	bne.n	800349a <menu+0x2046>
			if(dilSecim == 0){
 8003474:	4b5d      	ldr	r3, [pc, #372]	; (80035ec <menu+0x2198>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d105      	bne.n	8003488 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 800347c:	4a63      	ldr	r2, [pc, #396]	; (800360c <menu+0x21b8>)
 800347e:	2101      	movs	r1, #1
 8003480:	2002      	movs	r0, #2
 8003482:	f004 fc79 	bl	8007d78 <lcd_print>
 8003486:	e008      	b.n	800349a <menu+0x2046>
			} else if(dilSecim == 1){
 8003488:	4b58      	ldr	r3, [pc, #352]	; (80035ec <menu+0x2198>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d104      	bne.n	800349a <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003490:	4a5f      	ldr	r2, [pc, #380]	; (8003610 <menu+0x21bc>)
 8003492:	2101      	movs	r1, #1
 8003494:	2002      	movs	r0, #2
 8003496:	f004 fc6f 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800349a:	2102      	movs	r1, #2
 800349c:	485d      	ldr	r0, [pc, #372]	; (8003614 <menu+0x21c0>)
 800349e:	f005 ff91 	bl	80093c4 <HAL_GPIO_ReadPin>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d115      	bne.n	80034d4 <menu+0x2080>
 80034a8:	4b5b      	ldr	r3, [pc, #364]	; (8003618 <menu+0x21c4>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	f083 0301 	eor.w	r3, r3, #1
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00e      	beq.n	80034d4 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80034b6:	4b52      	ldr	r3, [pc, #328]	; (8003600 <menu+0x21ac>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	3301      	adds	r3, #1
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4b50      	ldr	r3, [pc, #320]	; (8003600 <menu+0x21ac>)
 80034c0:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80034c2:	4b4f      	ldr	r3, [pc, #316]	; (8003600 <menu+0x21ac>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d902      	bls.n	80034d0 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80034ca:	4b4d      	ldr	r3, [pc, #308]	; (8003600 <menu+0x21ac>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034d0:	f001 fb1c 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034d4:	2104      	movs	r1, #4
 80034d6:	484f      	ldr	r0, [pc, #316]	; (8003614 <menu+0x21c0>)
 80034d8:	f005 ff74 	bl	80093c4 <HAL_GPIO_ReadPin>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d115      	bne.n	800350e <menu+0x20ba>
 80034e2:	4b4d      	ldr	r3, [pc, #308]	; (8003618 <menu+0x21c4>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	f083 0301 	eor.w	r3, r3, #1
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00e      	beq.n	800350e <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80034f0:	4b43      	ldr	r3, [pc, #268]	; (8003600 <menu+0x21ac>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	4b41      	ldr	r3, [pc, #260]	; (8003600 <menu+0x21ac>)
 80034fa:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80034fc:	4b40      	ldr	r3, [pc, #256]	; (8003600 <menu+0x21ac>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003504:	4b3e      	ldr	r3, [pc, #248]	; (8003600 <menu+0x21ac>)
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800350a:	f001 faff 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800350e:	2108      	movs	r1, #8
 8003510:	4840      	ldr	r0, [pc, #256]	; (8003614 <menu+0x21c0>)
 8003512:	f005 ff57 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003516:	4603      	mov	r3, r0
 8003518:	2b01      	cmp	r3, #1
 800351a:	d10d      	bne.n	8003538 <menu+0x20e4>
 800351c:	4b3e      	ldr	r3, [pc, #248]	; (8003618 <menu+0x21c4>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	f083 0301 	eor.w	r3, r3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d006      	beq.n	8003538 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800352a:	4b35      	ldr	r3, [pc, #212]	; (8003600 <menu+0x21ac>)
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	4b3b      	ldr	r3, [pc, #236]	; (800361c <menu+0x21c8>)
 8003530:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003532:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <menu+0x21cc>)
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003538:	4b3a      	ldr	r3, [pc, #232]	; (8003624 <menu+0x21d0>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b13      	cmp	r3, #19
 800353e:	f040 80d5 	bne.w	80036ec <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003542:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <menu+0x21a0>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d113      	bne.n	8003572 <menu+0x211e>
			if(dilSecim == 0) {
 800354a:	4b28      	ldr	r3, [pc, #160]	; (80035ec <menu+0x2198>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d105      	bne.n	800355e <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003552:	4a35      	ldr	r2, [pc, #212]	; (8003628 <menu+0x21d4>)
 8003554:	2101      	movs	r1, #1
 8003556:	2001      	movs	r0, #1
 8003558:	f004 fc0e 	bl	8007d78 <lcd_print>
 800355c:	e01f      	b.n	800359e <menu+0x214a>
			} else if(dilSecim == 1) {
 800355e:	4b23      	ldr	r3, [pc, #140]	; (80035ec <menu+0x2198>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d11b      	bne.n	800359e <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003566:	4a31      	ldr	r2, [pc, #196]	; (800362c <menu+0x21d8>)
 8003568:	2101      	movs	r1, #1
 800356a:	2001      	movs	r0, #1
 800356c:	f004 fc04 	bl	8007d78 <lcd_print>
 8003570:	e015      	b.n	800359e <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003572:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <menu+0x21a0>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d111      	bne.n	800359e <menu+0x214a>
			if(dilSecim == 0) {
 800357a:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <menu+0x2198>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d104      	bne.n	800358c <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003582:	4a2b      	ldr	r2, [pc, #172]	; (8003630 <menu+0x21dc>)
 8003584:	2101      	movs	r1, #1
 8003586:	2001      	movs	r0, #1
 8003588:	f004 fbf6 	bl	8007d78 <lcd_print>
			}
			if(dilSecim == 1) {
 800358c:	4b17      	ldr	r3, [pc, #92]	; (80035ec <menu+0x2198>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d104      	bne.n	800359e <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003594:	4a27      	ldr	r2, [pc, #156]	; (8003634 <menu+0x21e0>)
 8003596:	2101      	movs	r1, #1
 8003598:	2001      	movs	r0, #1
 800359a:	f004 fbed 	bl	8007d78 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800359e:	4b26      	ldr	r3, [pc, #152]	; (8003638 <menu+0x21e4>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d113      	bne.n	80035ce <menu+0x217a>
			if(dilSecim == 0) {
 80035a6:	4b11      	ldr	r3, [pc, #68]	; (80035ec <menu+0x2198>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d105      	bne.n	80035ba <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80035ae:	4a15      	ldr	r2, [pc, #84]	; (8003604 <menu+0x21b0>)
 80035b0:	2101      	movs	r1, #1
 80035b2:	2002      	movs	r0, #2
 80035b4:	f004 fbe0 	bl	8007d78 <lcd_print>
 80035b8:	e049      	b.n	800364e <menu+0x21fa>
			} else if(dilSecim == 1) {
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <menu+0x2198>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d145      	bne.n	800364e <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80035c2:	4a11      	ldr	r2, [pc, #68]	; (8003608 <menu+0x21b4>)
 80035c4:	2101      	movs	r1, #1
 80035c6:	2002      	movs	r0, #2
 80035c8:	f004 fbd6 	bl	8007d78 <lcd_print>
 80035cc:	e03f      	b.n	800364e <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80035ce:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <menu+0x21e4>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d13b      	bne.n	800364e <menu+0x21fa>
			if(dilSecim == 0) {
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <menu+0x2198>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d12e      	bne.n	800363c <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80035de:	4a0b      	ldr	r2, [pc, #44]	; (800360c <menu+0x21b8>)
 80035e0:	2101      	movs	r1, #1
 80035e2:	2002      	movs	r0, #2
 80035e4:	f004 fbc8 	bl	8007d78 <lcd_print>
 80035e8:	e031      	b.n	800364e <menu+0x21fa>
 80035ea:	bf00      	nop
 80035ec:	2000020d 	.word	0x2000020d
 80035f0:	0800d858 	.word	0x0800d858
 80035f4:	200001fb 	.word	0x200001fb
 80035f8:	0800d868 	.word	0x0800d868
 80035fc:	0800d87c 	.word	0x0800d87c
 8003600:	200001fc 	.word	0x200001fc
 8003604:	0800d3ec 	.word	0x0800d3ec
 8003608:	0800d400 	.word	0x0800d400
 800360c:	0800d44c 	.word	0x0800d44c
 8003610:	0800d460 	.word	0x0800d460
 8003614:	40010800 	.word	0x40010800
 8003618:	2000021b 	.word	0x2000021b
 800361c:	20000118 	.word	0x20000118
 8003620:	20000218 	.word	0x20000218
 8003624:	200001ec 	.word	0x200001ec
 8003628:	0800d890 	.word	0x0800d890
 800362c:	0800d8a4 	.word	0x0800d8a4
 8003630:	0800d8b8 	.word	0x0800d8b8
 8003634:	0800d8cc 	.word	0x0800d8cc
 8003638:	200001fd 	.word	0x200001fd
			} else if(dilSecim == 1) {
 800363c:	4b90      	ldr	r3, [pc, #576]	; (8003880 <menu+0x242c>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d104      	bne.n	800364e <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003644:	4a8f      	ldr	r2, [pc, #572]	; (8003884 <menu+0x2430>)
 8003646:	2101      	movs	r1, #1
 8003648:	2002      	movs	r0, #2
 800364a:	f004 fb95 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800364e:	2102      	movs	r1, #2
 8003650:	488d      	ldr	r0, [pc, #564]	; (8003888 <menu+0x2434>)
 8003652:	f005 feb7 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003656:	4603      	mov	r3, r0
 8003658:	2b01      	cmp	r3, #1
 800365a:	d115      	bne.n	8003688 <menu+0x2234>
 800365c:	4b8b      	ldr	r3, [pc, #556]	; (800388c <menu+0x2438>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	f083 0301 	eor.w	r3, r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00e      	beq.n	8003688 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800366a:	4b89      	ldr	r3, [pc, #548]	; (8003890 <menu+0x243c>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	3301      	adds	r3, #1
 8003670:	b2da      	uxtb	r2, r3
 8003672:	4b87      	ldr	r3, [pc, #540]	; (8003890 <menu+0x243c>)
 8003674:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003676:	4b86      	ldr	r3, [pc, #536]	; (8003890 <menu+0x243c>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d902      	bls.n	8003684 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800367e:	4b84      	ldr	r3, [pc, #528]	; (8003890 <menu+0x243c>)
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003684:	f001 fa42 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003688:	2104      	movs	r1, #4
 800368a:	487f      	ldr	r0, [pc, #508]	; (8003888 <menu+0x2434>)
 800368c:	f005 fe9a 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003690:	4603      	mov	r3, r0
 8003692:	2b01      	cmp	r3, #1
 8003694:	d115      	bne.n	80036c2 <menu+0x226e>
 8003696:	4b7d      	ldr	r3, [pc, #500]	; (800388c <menu+0x2438>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	f083 0301 	eor.w	r3, r3, #1
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00e      	beq.n	80036c2 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80036a4:	4b7a      	ldr	r3, [pc, #488]	; (8003890 <menu+0x243c>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	4b78      	ldr	r3, [pc, #480]	; (8003890 <menu+0x243c>)
 80036ae:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80036b0:	4b77      	ldr	r3, [pc, #476]	; (8003890 <menu+0x243c>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80036b8:	4b75      	ldr	r3, [pc, #468]	; (8003890 <menu+0x243c>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036be:	f001 fa25 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036c2:	2108      	movs	r1, #8
 80036c4:	4870      	ldr	r0, [pc, #448]	; (8003888 <menu+0x2434>)
 80036c6:	f005 fe7d 	bl	80093c4 <HAL_GPIO_ReadPin>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d10d      	bne.n	80036ec <menu+0x2298>
 80036d0:	4b6e      	ldr	r3, [pc, #440]	; (800388c <menu+0x2438>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	f083 0301 	eor.w	r3, r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d006      	beq.n	80036ec <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 80036de:	4b6c      	ldr	r3, [pc, #432]	; (8003890 <menu+0x243c>)
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	4b6c      	ldr	r3, [pc, #432]	; (8003894 <menu+0x2440>)
 80036e4:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80036e6:	4b6c      	ldr	r3, [pc, #432]	; (8003898 <menu+0x2444>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80036ec:	4b6b      	ldr	r3, [pc, #428]	; (800389c <menu+0x2448>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b14      	cmp	r3, #20
 80036f2:	f040 80b5 	bne.w	8003860 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80036f6:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <menu+0x244c>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d113      	bne.n	8003726 <menu+0x22d2>
			if(dilSecim == 0) {
 80036fe:	4b60      	ldr	r3, [pc, #384]	; (8003880 <menu+0x242c>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d105      	bne.n	8003712 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003706:	4a67      	ldr	r2, [pc, #412]	; (80038a4 <menu+0x2450>)
 8003708:	2101      	movs	r1, #1
 800370a:	2001      	movs	r0, #1
 800370c:	f004 fb34 	bl	8007d78 <lcd_print>
 8003710:	e020      	b.n	8003754 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003712:	4b5b      	ldr	r3, [pc, #364]	; (8003880 <menu+0x242c>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d11c      	bne.n	8003754 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800371a:	4a63      	ldr	r2, [pc, #396]	; (80038a8 <menu+0x2454>)
 800371c:	2101      	movs	r1, #1
 800371e:	2001      	movs	r0, #1
 8003720:	f004 fb2a 	bl	8007d78 <lcd_print>
 8003724:	e016      	b.n	8003754 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003726:	4b5e      	ldr	r3, [pc, #376]	; (80038a0 <menu+0x244c>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d112      	bne.n	8003754 <menu+0x2300>
			if(dilSecim == 0) {
 800372e:	4b54      	ldr	r3, [pc, #336]	; (8003880 <menu+0x242c>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d105      	bne.n	8003742 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003736:	4a5d      	ldr	r2, [pc, #372]	; (80038ac <menu+0x2458>)
 8003738:	2101      	movs	r1, #1
 800373a:	2001      	movs	r0, #1
 800373c:	f004 fb1c 	bl	8007d78 <lcd_print>
 8003740:	e008      	b.n	8003754 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003742:	4b4f      	ldr	r3, [pc, #316]	; (8003880 <menu+0x242c>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d104      	bne.n	8003754 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800374a:	4a59      	ldr	r2, [pc, #356]	; (80038b0 <menu+0x245c>)
 800374c:	2101      	movs	r1, #1
 800374e:	2001      	movs	r0, #1
 8003750:	f004 fb12 	bl	8007d78 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003754:	4b57      	ldr	r3, [pc, #348]	; (80038b4 <menu+0x2460>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d113      	bne.n	8003784 <menu+0x2330>
			if(dilSecim == 0) {
 800375c:	4b48      	ldr	r3, [pc, #288]	; (8003880 <menu+0x242c>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003764:	4a54      	ldr	r2, [pc, #336]	; (80038b8 <menu+0x2464>)
 8003766:	2101      	movs	r1, #1
 8003768:	2002      	movs	r0, #2
 800376a:	f004 fb05 	bl	8007d78 <lcd_print>
 800376e:	e020      	b.n	80037b2 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003770:	4b43      	ldr	r3, [pc, #268]	; (8003880 <menu+0x242c>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d11c      	bne.n	80037b2 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003778:	4a50      	ldr	r2, [pc, #320]	; (80038bc <menu+0x2468>)
 800377a:	2101      	movs	r1, #1
 800377c:	2002      	movs	r0, #2
 800377e:	f004 fafb 	bl	8007d78 <lcd_print>
 8003782:	e016      	b.n	80037b2 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003784:	4b4b      	ldr	r3, [pc, #300]	; (80038b4 <menu+0x2460>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d112      	bne.n	80037b2 <menu+0x235e>
			if(dilSecim == 0) {
 800378c:	4b3c      	ldr	r3, [pc, #240]	; (8003880 <menu+0x242c>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d105      	bne.n	80037a0 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003794:	4a4a      	ldr	r2, [pc, #296]	; (80038c0 <menu+0x246c>)
 8003796:	2101      	movs	r1, #1
 8003798:	2002      	movs	r0, #2
 800379a:	f004 faed 	bl	8007d78 <lcd_print>
 800379e:	e008      	b.n	80037b2 <menu+0x235e>
			} else if(dilSecim == 1) {
 80037a0:	4b37      	ldr	r3, [pc, #220]	; (8003880 <menu+0x242c>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d104      	bne.n	80037b2 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80037a8:	4a46      	ldr	r2, [pc, #280]	; (80038c4 <menu+0x2470>)
 80037aa:	2101      	movs	r1, #1
 80037ac:	2002      	movs	r0, #2
 80037ae:	f004 fae3 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80037b2:	2102      	movs	r1, #2
 80037b4:	4834      	ldr	r0, [pc, #208]	; (8003888 <menu+0x2434>)
 80037b6:	f005 fe05 	bl	80093c4 <HAL_GPIO_ReadPin>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d119      	bne.n	80037f4 <menu+0x23a0>
 80037c0:	4b32      	ldr	r3, [pc, #200]	; (800388c <menu+0x2438>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	f083 0301 	eor.w	r3, r3, #1
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d012      	beq.n	80037f4 <menu+0x23a0>
 80037ce:	4b34      	ldr	r3, [pc, #208]	; (80038a0 <menu+0x244c>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d10e      	bne.n	80037f4 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80037d6:	4b37      	ldr	r3, [pc, #220]	; (80038b4 <menu+0x2460>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	3301      	adds	r3, #1
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4b35      	ldr	r3, [pc, #212]	; (80038b4 <menu+0x2460>)
 80037e0:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80037e2:	4b34      	ldr	r3, [pc, #208]	; (80038b4 <menu+0x2460>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d902      	bls.n	80037f0 <menu+0x239c>
				devirmeSilindirTipi = 0;
 80037ea:	4b32      	ldr	r3, [pc, #200]	; (80038b4 <menu+0x2460>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037f0:	f001 f98c 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80037f4:	2104      	movs	r1, #4
 80037f6:	4824      	ldr	r0, [pc, #144]	; (8003888 <menu+0x2434>)
 80037f8:	f005 fde4 	bl	80093c4 <HAL_GPIO_ReadPin>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d119      	bne.n	8003836 <menu+0x23e2>
 8003802:	4b22      	ldr	r3, [pc, #136]	; (800388c <menu+0x2438>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	f083 0301 	eor.w	r3, r3, #1
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d012      	beq.n	8003836 <menu+0x23e2>
 8003810:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <menu+0x244c>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d10e      	bne.n	8003836 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003818:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <menu+0x2460>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	3b01      	subs	r3, #1
 800381e:	b2da      	uxtb	r2, r3
 8003820:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <menu+0x2460>)
 8003822:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003824:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <menu+0x2460>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 800382c:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <menu+0x2460>)
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003832:	f001 f96b 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003836:	2108      	movs	r1, #8
 8003838:	4813      	ldr	r0, [pc, #76]	; (8003888 <menu+0x2434>)
 800383a:	f005 fdc3 	bl	80093c4 <HAL_GPIO_ReadPin>
 800383e:	4603      	mov	r3, r0
 8003840:	2b01      	cmp	r3, #1
 8003842:	d10d      	bne.n	8003860 <menu+0x240c>
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <menu+0x2438>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	f083 0301 	eor.w	r3, r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d006      	beq.n	8003860 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003852:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <menu+0x2460>)
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <menu+0x2440>)
 8003858:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800385a:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <menu+0x2444>)
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003860:	4b0e      	ldr	r3, [pc, #56]	; (800389c <menu+0x2448>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b15      	cmp	r3, #21
 8003866:	f040 80c2 	bne.w	80039ee <menu+0x259a>
		if(dilSecim == 0) {
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <menu+0x242c>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d12c      	bne.n	80038cc <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003872:	4a15      	ldr	r2, [pc, #84]	; (80038c8 <menu+0x2474>)
 8003874:	2101      	movs	r1, #1
 8003876:	2001      	movs	r0, #1
 8003878:	f004 fa7e 	bl	8007d78 <lcd_print>
 800387c:	e02f      	b.n	80038de <menu+0x248a>
 800387e:	bf00      	nop
 8003880:	2000020d 	.word	0x2000020d
 8003884:	0800d460 	.word	0x0800d460
 8003888:	40010800 	.word	0x40010800
 800388c:	2000021b 	.word	0x2000021b
 8003890:	200001fd 	.word	0x200001fd
 8003894:	20000118 	.word	0x20000118
 8003898:	20000218 	.word	0x20000218
 800389c:	200001ec 	.word	0x200001ec
 80038a0:	200001fb 	.word	0x200001fb
 80038a4:	0800d8e0 	.word	0x0800d8e0
 80038a8:	0800d8f4 	.word	0x0800d8f4
 80038ac:	0800d908 	.word	0x0800d908
 80038b0:	0800d91c 	.word	0x0800d91c
 80038b4:	200001fe 	.word	0x200001fe
 80038b8:	0800d930 	.word	0x0800d930
 80038bc:	0800d944 	.word	0x0800d944
 80038c0:	0800d954 	.word	0x0800d954
 80038c4:	0800d968 	.word	0x0800d968
 80038c8:	0800d978 	.word	0x0800d978
		} else if(dilSecim == 1) {
 80038cc:	4b9c      	ldr	r3, [pc, #624]	; (8003b40 <menu+0x26ec>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d104      	bne.n	80038de <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80038d4:	4a9b      	ldr	r2, [pc, #620]	; (8003b44 <menu+0x26f0>)
 80038d6:	2101      	movs	r1, #1
 80038d8:	2001      	movs	r0, #1
 80038da:	f004 fa4d 	bl	8007d78 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80038de:	4b9a      	ldr	r3, [pc, #616]	; (8003b48 <menu+0x26f4>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d112      	bne.n	800390c <menu+0x24b8>
			if(dilSecim == 0) {
 80038e6:	4b96      	ldr	r3, [pc, #600]	; (8003b40 <menu+0x26ec>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d104      	bne.n	80038f8 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80038ee:	4a97      	ldr	r2, [pc, #604]	; (8003b4c <menu+0x26f8>)
 80038f0:	2101      	movs	r1, #1
 80038f2:	2002      	movs	r0, #2
 80038f4:	f004 fa40 	bl	8007d78 <lcd_print>
			}
			if(dilSecim == 1) {
 80038f8:	4b91      	ldr	r3, [pc, #580]	; (8003b40 <menu+0x26ec>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d11c      	bne.n	800393a <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003900:	4a93      	ldr	r2, [pc, #588]	; (8003b50 <menu+0x26fc>)
 8003902:	2101      	movs	r1, #1
 8003904:	2002      	movs	r0, #2
 8003906:	f004 fa37 	bl	8007d78 <lcd_print>
 800390a:	e016      	b.n	800393a <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 800390c:	4b8e      	ldr	r3, [pc, #568]	; (8003b48 <menu+0x26f4>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d112      	bne.n	800393a <menu+0x24e6>
			if(dilSecim == 0) {
 8003914:	4b8a      	ldr	r3, [pc, #552]	; (8003b40 <menu+0x26ec>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d105      	bne.n	8003928 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 800391c:	4a8d      	ldr	r2, [pc, #564]	; (8003b54 <menu+0x2700>)
 800391e:	2101      	movs	r1, #1
 8003920:	2002      	movs	r0, #2
 8003922:	f004 fa29 	bl	8007d78 <lcd_print>
 8003926:	e008      	b.n	800393a <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003928:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <menu+0x26ec>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d104      	bne.n	800393a <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003930:	4a89      	ldr	r2, [pc, #548]	; (8003b58 <menu+0x2704>)
 8003932:	2101      	movs	r1, #1
 8003934:	2002      	movs	r0, #2
 8003936:	f004 fa1f 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800393a:	2102      	movs	r1, #2
 800393c:	4887      	ldr	r0, [pc, #540]	; (8003b5c <menu+0x2708>)
 800393e:	f005 fd41 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003942:	4603      	mov	r3, r0
 8003944:	2b01      	cmp	r3, #1
 8003946:	d115      	bne.n	8003974 <menu+0x2520>
 8003948:	4b85      	ldr	r3, [pc, #532]	; (8003b60 <menu+0x270c>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	f083 0301 	eor.w	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00e      	beq.n	8003974 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003956:	4b7c      	ldr	r3, [pc, #496]	; (8003b48 <menu+0x26f4>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	3301      	adds	r3, #1
 800395c:	b2da      	uxtb	r2, r3
 800395e:	4b7a      	ldr	r3, [pc, #488]	; (8003b48 <menu+0x26f4>)
 8003960:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003962:	4b79      	ldr	r3, [pc, #484]	; (8003b48 <menu+0x26f4>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d902      	bls.n	8003970 <menu+0x251c>
				platformSilindirTipi = 0;
 800396a:	4b77      	ldr	r3, [pc, #476]	; (8003b48 <menu+0x26f4>)
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003970:	f001 f8cc 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003974:	2104      	movs	r1, #4
 8003976:	4879      	ldr	r0, [pc, #484]	; (8003b5c <menu+0x2708>)
 8003978:	f005 fd24 	bl	80093c4 <HAL_GPIO_ReadPin>
 800397c:	4603      	mov	r3, r0
 800397e:	2b01      	cmp	r3, #1
 8003980:	d115      	bne.n	80039ae <menu+0x255a>
 8003982:	4b77      	ldr	r3, [pc, #476]	; (8003b60 <menu+0x270c>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	f083 0301 	eor.w	r3, r3, #1
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00e      	beq.n	80039ae <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003990:	4b6d      	ldr	r3, [pc, #436]	; (8003b48 <menu+0x26f4>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	3b01      	subs	r3, #1
 8003996:	b2da      	uxtb	r2, r3
 8003998:	4b6b      	ldr	r3, [pc, #428]	; (8003b48 <menu+0x26f4>)
 800399a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 800399c:	4b6a      	ldr	r3, [pc, #424]	; (8003b48 <menu+0x26f4>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <menu+0x2556>
		   		platformSilindirTipi = 1;
 80039a4:	4b68      	ldr	r3, [pc, #416]	; (8003b48 <menu+0x26f4>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039aa:	f001 f8af 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039ae:	2108      	movs	r1, #8
 80039b0:	486a      	ldr	r0, [pc, #424]	; (8003b5c <menu+0x2708>)
 80039b2:	f005 fd07 	bl	80093c4 <HAL_GPIO_ReadPin>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d118      	bne.n	80039ee <menu+0x259a>
 80039bc:	4b68      	ldr	r3, [pc, #416]	; (8003b60 <menu+0x270c>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	f083 0301 	eor.w	r3, r3, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d011      	beq.n	80039ee <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 80039ca:	4b5f      	ldr	r3, [pc, #380]	; (8003b48 <menu+0x26f4>)
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	4b65      	ldr	r3, [pc, #404]	; (8003b64 <menu+0x2710>)
 80039d0:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80039d2:	4b5d      	ldr	r3, [pc, #372]	; (8003b48 <menu+0x26f4>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d106      	bne.n	80039e8 <menu+0x2594>
				altLimit = 1;
 80039da:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <menu+0x2714>)
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80039e0:	4b61      	ldr	r3, [pc, #388]	; (8003b68 <menu+0x2714>)
 80039e2:	781a      	ldrb	r2, [r3, #0]
 80039e4:	4b5f      	ldr	r3, [pc, #380]	; (8003b64 <menu+0x2710>)
 80039e6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80039e8:	4b60      	ldr	r3, [pc, #384]	; (8003b6c <menu+0x2718>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80039ee:	4b60      	ldr	r3, [pc, #384]	; (8003b70 <menu+0x271c>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b16      	cmp	r3, #22
 80039f4:	f040 8081 	bne.w	8003afa <menu+0x26a6>
		if(dilSecim == 0) {
 80039f8:	4b51      	ldr	r3, [pc, #324]	; (8003b40 <menu+0x26ec>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d105      	bne.n	8003a0c <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003a00:	4a5c      	ldr	r2, [pc, #368]	; (8003b74 <menu+0x2720>)
 8003a02:	2101      	movs	r1, #1
 8003a04:	2001      	movs	r0, #1
 8003a06:	f004 f9b7 	bl	8007d78 <lcd_print>
 8003a0a:	e008      	b.n	8003a1e <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003a0c:	4b4c      	ldr	r3, [pc, #304]	; (8003b40 <menu+0x26ec>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d104      	bne.n	8003a1e <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003a14:	4a58      	ldr	r2, [pc, #352]	; (8003b78 <menu+0x2724>)
 8003a16:	2101      	movs	r1, #1
 8003a18:	2001      	movs	r0, #1
 8003a1a:	f004 f9ad 	bl	8007d78 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a1e:	4b48      	ldr	r3, [pc, #288]	; (8003b40 <menu+0x26ec>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a26:	4a55      	ldr	r2, [pc, #340]	; (8003b7c <menu+0x2728>)
 8003a28:	2101      	movs	r1, #1
 8003a2a:	2002      	movs	r0, #2
 8003a2c:	f004 f9a4 	bl	8007d78 <lcd_print>
 8003a30:	e008      	b.n	8003a44 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003a32:	4b43      	ldr	r3, [pc, #268]	; (8003b40 <menu+0x26ec>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d104      	bne.n	8003a44 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003a3a:	4a51      	ldr	r2, [pc, #324]	; (8003b80 <menu+0x272c>)
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	2002      	movs	r0, #2
 8003a40:	f004 f99a 	bl	8007d78 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003a44:	4b4f      	ldr	r3, [pc, #316]	; (8003b84 <menu+0x2730>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	220a      	movs	r2, #10
 8003a4a:	494f      	ldr	r1, [pc, #316]	; (8003b88 <menu+0x2734>)
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f008 fce5 	bl	800c41c <itoa>
		lcd_print(2,16,snum);
 8003a52:	4a4d      	ldr	r2, [pc, #308]	; (8003b88 <menu+0x2734>)
 8003a54:	2110      	movs	r1, #16
 8003a56:	2002      	movs	r0, #2
 8003a58:	f004 f98e 	bl	8007d78 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	483f      	ldr	r0, [pc, #252]	; (8003b5c <menu+0x2708>)
 8003a60:	f005 fcb0 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d115      	bne.n	8003a96 <menu+0x2642>
 8003a6a:	4b3d      	ldr	r3, [pc, #244]	; (8003b60 <menu+0x270c>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	f083 0301 	eor.w	r3, r3, #1
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00e      	beq.n	8003a96 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003a78:	4b42      	ldr	r3, [pc, #264]	; (8003b84 <menu+0x2730>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	4b40      	ldr	r3, [pc, #256]	; (8003b84 <menu+0x2730>)
 8003a82:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003a84:	4b3f      	ldr	r3, [pc, #252]	; (8003b84 <menu+0x2730>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d902      	bls.n	8003a92 <menu+0x263e>
				yukariValfTmr = 0;
 8003a8c:	4b3d      	ldr	r3, [pc, #244]	; (8003b84 <menu+0x2730>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a92:	f001 f83b 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a96:	2104      	movs	r1, #4
 8003a98:	4830      	ldr	r0, [pc, #192]	; (8003b5c <menu+0x2708>)
 8003a9a:	f005 fc93 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d115      	bne.n	8003ad0 <menu+0x267c>
 8003aa4:	4b2e      	ldr	r3, [pc, #184]	; (8003b60 <menu+0x270c>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	f083 0301 	eor.w	r3, r3, #1
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00e      	beq.n	8003ad0 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003ab2:	4b34      	ldr	r3, [pc, #208]	; (8003b84 <menu+0x2730>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	4b32      	ldr	r3, [pc, #200]	; (8003b84 <menu+0x2730>)
 8003abc:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003abe:	4b31      	ldr	r3, [pc, #196]	; (8003b84 <menu+0x2730>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	d902      	bls.n	8003acc <menu+0x2678>
		   		yukariValfTmr = 5;
 8003ac6:	4b2f      	ldr	r3, [pc, #188]	; (8003b84 <menu+0x2730>)
 8003ac8:	2205      	movs	r2, #5
 8003aca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003acc:	f001 f81e 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ad0:	2108      	movs	r1, #8
 8003ad2:	4822      	ldr	r0, [pc, #136]	; (8003b5c <menu+0x2708>)
 8003ad4:	f005 fc76 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d10d      	bne.n	8003afa <menu+0x26a6>
 8003ade:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <menu+0x270c>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	f083 0301 	eor.w	r3, r3, #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d006      	beq.n	8003afa <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003aec:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <menu+0x2730>)
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <menu+0x2710>)
 8003af2:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003af4:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <menu+0x2718>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003afa:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <menu+0x271c>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b17      	cmp	r3, #23
 8003b00:	f040 80ac 	bne.w	8003c5c <menu+0x2808>
		if(dilSecim == 0) {
 8003b04:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <menu+0x26ec>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003b0c:	4a1f      	ldr	r2, [pc, #124]	; (8003b8c <menu+0x2738>)
 8003b0e:	2101      	movs	r1, #1
 8003b10:	2001      	movs	r0, #1
 8003b12:	f004 f931 	bl	8007d78 <lcd_print>
 8003b16:	e008      	b.n	8003b2a <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <menu+0x26ec>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d104      	bne.n	8003b2a <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003b20:	4a1b      	ldr	r2, [pc, #108]	; (8003b90 <menu+0x273c>)
 8003b22:	2101      	movs	r1, #1
 8003b24:	2001      	movs	r0, #1
 8003b26:	f004 f927 	bl	8007d78 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <menu+0x26ec>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d130      	bne.n	8003b94 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b32:	4a12      	ldr	r2, [pc, #72]	; (8003b7c <menu+0x2728>)
 8003b34:	2101      	movs	r1, #1
 8003b36:	2002      	movs	r0, #2
 8003b38:	f004 f91e 	bl	8007d78 <lcd_print>
 8003b3c:	e033      	b.n	8003ba6 <menu+0x2752>
 8003b3e:	bf00      	nop
 8003b40:	2000020d 	.word	0x2000020d
 8003b44:	0800d98c 	.word	0x0800d98c
 8003b48:	200001ff 	.word	0x200001ff
 8003b4c:	0800d930 	.word	0x0800d930
 8003b50:	0800d944 	.word	0x0800d944
 8003b54:	0800d954 	.word	0x0800d954
 8003b58:	0800d968 	.word	0x0800d968
 8003b5c:	40010800 	.word	0x40010800
 8003b60:	2000021b 	.word	0x2000021b
 8003b64:	20000118 	.word	0x20000118
 8003b68:	200001f2 	.word	0x200001f2
 8003b6c:	20000218 	.word	0x20000218
 8003b70:	200001ec 	.word	0x200001ec
 8003b74:	0800d99c 	.word	0x0800d99c
 8003b78:	0800d9b0 	.word	0x0800d9b0
 8003b7c:	0800d650 	.word	0x0800d650
 8003b80:	0800d9c4 	.word	0x0800d9c4
 8003b84:	20000200 	.word	0x20000200
 8003b88:	20000188 	.word	0x20000188
 8003b8c:	0800d9d4 	.word	0x0800d9d4
 8003b90:	0800d9e8 	.word	0x0800d9e8
			} else if(dilSecim == 1) {
 8003b94:	4b98      	ldr	r3, [pc, #608]	; (8003df8 <menu+0x29a4>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d104      	bne.n	8003ba6 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003b9c:	4a97      	ldr	r2, [pc, #604]	; (8003dfc <menu+0x29a8>)
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	2002      	movs	r0, #2
 8003ba2:	f004 f8e9 	bl	8007d78 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003ba6:	4b96      	ldr	r3, [pc, #600]	; (8003e00 <menu+0x29ac>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	220a      	movs	r2, #10
 8003bac:	4995      	ldr	r1, [pc, #596]	; (8003e04 <menu+0x29b0>)
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f008 fc34 	bl	800c41c <itoa>
		lcd_print(2,16,snum);
 8003bb4:	4a93      	ldr	r2, [pc, #588]	; (8003e04 <menu+0x29b0>)
 8003bb6:	2110      	movs	r1, #16
 8003bb8:	2002      	movs	r0, #2
 8003bba:	f004 f8dd 	bl	8007d78 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	4891      	ldr	r0, [pc, #580]	; (8003e08 <menu+0x29b4>)
 8003bc2:	f005 fbff 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d115      	bne.n	8003bf8 <menu+0x27a4>
 8003bcc:	4b8f      	ldr	r3, [pc, #572]	; (8003e0c <menu+0x29b8>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	f083 0301 	eor.w	r3, r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00e      	beq.n	8003bf8 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003bda:	4b89      	ldr	r3, [pc, #548]	; (8003e00 <menu+0x29ac>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	4b87      	ldr	r3, [pc, #540]	; (8003e00 <menu+0x29ac>)
 8003be4:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003be6:	4b86      	ldr	r3, [pc, #536]	; (8003e00 <menu+0x29ac>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b05      	cmp	r3, #5
 8003bec:	d902      	bls.n	8003bf4 <menu+0x27a0>
				asagiValfTmr = 0;
 8003bee:	4b84      	ldr	r3, [pc, #528]	; (8003e00 <menu+0x29ac>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003bf4:	f000 ff8a 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bf8:	2104      	movs	r1, #4
 8003bfa:	4883      	ldr	r0, [pc, #524]	; (8003e08 <menu+0x29b4>)
 8003bfc:	f005 fbe2 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d115      	bne.n	8003c32 <menu+0x27de>
 8003c06:	4b81      	ldr	r3, [pc, #516]	; (8003e0c <menu+0x29b8>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	f083 0301 	eor.w	r3, r3, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00e      	beq.n	8003c32 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003c14:	4b7a      	ldr	r3, [pc, #488]	; (8003e00 <menu+0x29ac>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	4b78      	ldr	r3, [pc, #480]	; (8003e00 <menu+0x29ac>)
 8003c1e:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003c20:	4b77      	ldr	r3, [pc, #476]	; (8003e00 <menu+0x29ac>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b06      	cmp	r3, #6
 8003c26:	d902      	bls.n	8003c2e <menu+0x27da>
		   		asagiValfTmr = 5;
 8003c28:	4b75      	ldr	r3, [pc, #468]	; (8003e00 <menu+0x29ac>)
 8003c2a:	2205      	movs	r2, #5
 8003c2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c2e:	f000 ff6d 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c32:	2108      	movs	r1, #8
 8003c34:	4874      	ldr	r0, [pc, #464]	; (8003e08 <menu+0x29b4>)
 8003c36:	f005 fbc5 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d10d      	bne.n	8003c5c <menu+0x2808>
 8003c40:	4b72      	ldr	r3, [pc, #456]	; (8003e0c <menu+0x29b8>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	f083 0301 	eor.w	r3, r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d006      	beq.n	8003c5c <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003c4e:	4b6c      	ldr	r3, [pc, #432]	; (8003e00 <menu+0x29ac>)
 8003c50:	781a      	ldrb	r2, [r3, #0]
 8003c52:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <menu+0x29bc>)
 8003c54:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003c56:	4b6f      	ldr	r3, [pc, #444]	; (8003e14 <menu+0x29c0>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003c5c:	4b6e      	ldr	r3, [pc, #440]	; (8003e18 <menu+0x29c4>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b18      	cmp	r3, #24
 8003c62:	f040 809d 	bne.w	8003da0 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003c66:	4b6d      	ldr	r3, [pc, #436]	; (8003e1c <menu+0x29c8>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d113      	bne.n	8003c96 <menu+0x2842>
			if(dilSecim == 0) {
 8003c6e:	4b62      	ldr	r3, [pc, #392]	; (8003df8 <menu+0x29a4>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d105      	bne.n	8003c82 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003c76:	4a6a      	ldr	r2, [pc, #424]	; (8003e20 <menu+0x29cc>)
 8003c78:	2101      	movs	r1, #1
 8003c7a:	2001      	movs	r0, #1
 8003c7c:	f004 f87c 	bl	8007d78 <lcd_print>
 8003c80:	e020      	b.n	8003cc4 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003c82:	4b5d      	ldr	r3, [pc, #372]	; (8003df8 <menu+0x29a4>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d11c      	bne.n	8003cc4 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003c8a:	4a66      	ldr	r2, [pc, #408]	; (8003e24 <menu+0x29d0>)
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	2001      	movs	r0, #1
 8003c90:	f004 f872 	bl	8007d78 <lcd_print>
 8003c94:	e016      	b.n	8003cc4 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003c96:	4b61      	ldr	r3, [pc, #388]	; (8003e1c <menu+0x29c8>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d112      	bne.n	8003cc4 <menu+0x2870>
			if(dilSecim == 0) {
 8003c9e:	4b56      	ldr	r3, [pc, #344]	; (8003df8 <menu+0x29a4>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003ca6:	4a60      	ldr	r2, [pc, #384]	; (8003e28 <menu+0x29d4>)
 8003ca8:	2101      	movs	r1, #1
 8003caa:	2001      	movs	r0, #1
 8003cac:	f004 f864 	bl	8007d78 <lcd_print>
 8003cb0:	e008      	b.n	8003cc4 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003cb2:	4b51      	ldr	r3, [pc, #324]	; (8003df8 <menu+0x29a4>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d104      	bne.n	8003cc4 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003cba:	4a5c      	ldr	r2, [pc, #368]	; (8003e2c <menu+0x29d8>)
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	f004 f85a 	bl	8007d78 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003cc4:	4b4c      	ldr	r3, [pc, #304]	; (8003df8 <menu+0x29a4>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d105      	bne.n	8003cd8 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ccc:	4a58      	ldr	r2, [pc, #352]	; (8003e30 <menu+0x29dc>)
 8003cce:	2101      	movs	r1, #1
 8003cd0:	2002      	movs	r0, #2
 8003cd2:	f004 f851 	bl	8007d78 <lcd_print>
 8003cd6:	e008      	b.n	8003cea <menu+0x2896>
			} else if(dilSecim == 1) {
 8003cd8:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <menu+0x29a4>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d104      	bne.n	8003cea <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003ce0:	4a46      	ldr	r2, [pc, #280]	; (8003dfc <menu+0x29a8>)
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	2002      	movs	r0, #2
 8003ce6:	f004 f847 	bl	8007d78 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003cea:	4b52      	ldr	r3, [pc, #328]	; (8003e34 <menu+0x29e0>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	220a      	movs	r2, #10
 8003cf0:	4944      	ldr	r1, [pc, #272]	; (8003e04 <menu+0x29b0>)
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f008 fb92 	bl	800c41c <itoa>
		lcd_print(2, 16, snum);
 8003cf8:	4a42      	ldr	r2, [pc, #264]	; (8003e04 <menu+0x29b0>)
 8003cfa:	2110      	movs	r1, #16
 8003cfc:	2002      	movs	r0, #2
 8003cfe:	f004 f83b 	bl	8007d78 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d02:	2102      	movs	r1, #2
 8003d04:	4840      	ldr	r0, [pc, #256]	; (8003e08 <menu+0x29b4>)
 8003d06:	f005 fb5d 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d115      	bne.n	8003d3c <menu+0x28e8>
 8003d10:	4b3e      	ldr	r3, [pc, #248]	; (8003e0c <menu+0x29b8>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	f083 0301 	eor.w	r3, r3, #1
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00e      	beq.n	8003d3c <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003d1e:	4b45      	ldr	r3, [pc, #276]	; (8003e34 <menu+0x29e0>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	3301      	adds	r3, #1
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	4b43      	ldr	r3, [pc, #268]	; (8003e34 <menu+0x29e0>)
 8003d28:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003d2a:	4b42      	ldr	r3, [pc, #264]	; (8003e34 <menu+0x29e0>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b05      	cmp	r3, #5
 8003d30:	d902      	bls.n	8003d38 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003d32:	4b40      	ldr	r3, [pc, #256]	; (8003e34 <menu+0x29e0>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d38:	f000 fee8 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d3c:	2104      	movs	r1, #4
 8003d3e:	4832      	ldr	r0, [pc, #200]	; (8003e08 <menu+0x29b4>)
 8003d40:	f005 fb40 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d115      	bne.n	8003d76 <menu+0x2922>
 8003d4a:	4b30      	ldr	r3, [pc, #192]	; (8003e0c <menu+0x29b8>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	f083 0301 	eor.w	r3, r3, #1
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00e      	beq.n	8003d76 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003d58:	4b36      	ldr	r3, [pc, #216]	; (8003e34 <menu+0x29e0>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <menu+0x29e0>)
 8003d62:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003d64:	4b33      	ldr	r3, [pc, #204]	; (8003e34 <menu+0x29e0>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b06      	cmp	r3, #6
 8003d6a:	d902      	bls.n	8003d72 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003d6c:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <menu+0x29e0>)
 8003d6e:	2205      	movs	r2, #5
 8003d70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d72:	f000 fecb 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d76:	2108      	movs	r1, #8
 8003d78:	4823      	ldr	r0, [pc, #140]	; (8003e08 <menu+0x29b4>)
 8003d7a:	f005 fb23 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d10d      	bne.n	8003da0 <menu+0x294c>
 8003d84:	4b21      	ldr	r3, [pc, #132]	; (8003e0c <menu+0x29b8>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	f083 0301 	eor.w	r3, r3, #1
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d006      	beq.n	8003da0 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <menu+0x29e0>)
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <menu+0x29bc>)
 8003d98:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003d9a:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <menu+0x29c0>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <menu+0x29c4>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b19      	cmp	r3, #25
 8003da6:	f040 80c4 	bne.w	8003f32 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003daa:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <menu+0x29c8>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d113      	bne.n	8003dda <menu+0x2986>
			if(dilSecim == 0) {
 8003db2:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <menu+0x29a4>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003dba:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <menu+0x29e4>)
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	2001      	movs	r0, #1
 8003dc0:	f003 ffda 	bl	8007d78 <lcd_print>
 8003dc4:	e047      	b.n	8003e56 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <menu+0x29a4>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d143      	bne.n	8003e56 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003dce:	4a1b      	ldr	r2, [pc, #108]	; (8003e3c <menu+0x29e8>)
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	f003 ffd0 	bl	8007d78 <lcd_print>
 8003dd8:	e03d      	b.n	8003e56 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <menu+0x29c8>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d139      	bne.n	8003e56 <menu+0x2a02>
			if(dilSecim == 0) {
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <menu+0x29a4>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d12c      	bne.n	8003e44 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003dea:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <menu+0x29ec>)
 8003dec:	2101      	movs	r1, #1
 8003dee:	2001      	movs	r0, #1
 8003df0:	f003 ffc2 	bl	8007d78 <lcd_print>
 8003df4:	e02f      	b.n	8003e56 <menu+0x2a02>
 8003df6:	bf00      	nop
 8003df8:	2000020d 	.word	0x2000020d
 8003dfc:	0800d9c4 	.word	0x0800d9c4
 8003e00:	20000201 	.word	0x20000201
 8003e04:	20000188 	.word	0x20000188
 8003e08:	40010800 	.word	0x40010800
 8003e0c:	2000021b 	.word	0x2000021b
 8003e10:	20000118 	.word	0x20000118
 8003e14:	20000218 	.word	0x20000218
 8003e18:	200001ec 	.word	0x200001ec
 8003e1c:	200001fb 	.word	0x200001fb
 8003e20:	0800d9fc 	.word	0x0800d9fc
 8003e24:	0800da10 	.word	0x0800da10
 8003e28:	0800da24 	.word	0x0800da24
 8003e2c:	0800da38 	.word	0x0800da38
 8003e30:	0800d650 	.word	0x0800d650
 8003e34:	20000202 	.word	0x20000202
 8003e38:	0800da4c 	.word	0x0800da4c
 8003e3c:	0800da60 	.word	0x0800da60
 8003e40:	0800da74 	.word	0x0800da74
			} else if(dilSecim == 1) {
 8003e44:	4b73      	ldr	r3, [pc, #460]	; (8004014 <menu+0x2bc0>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d104      	bne.n	8003e56 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003e4c:	4a72      	ldr	r2, [pc, #456]	; (8004018 <menu+0x2bc4>)
 8003e4e:	2101      	movs	r1, #1
 8003e50:	2001      	movs	r0, #1
 8003e52:	f003 ff91 	bl	8007d78 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003e56:	4b6f      	ldr	r3, [pc, #444]	; (8004014 <menu+0x2bc0>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d105      	bne.n	8003e6a <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e5e:	4a6f      	ldr	r2, [pc, #444]	; (800401c <menu+0x2bc8>)
 8003e60:	2101      	movs	r1, #1
 8003e62:	2002      	movs	r0, #2
 8003e64:	f003 ff88 	bl	8007d78 <lcd_print>
 8003e68:	e008      	b.n	8003e7c <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003e6a:	4b6a      	ldr	r3, [pc, #424]	; (8004014 <menu+0x2bc0>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d104      	bne.n	8003e7c <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003e72:	4a6b      	ldr	r2, [pc, #428]	; (8004020 <menu+0x2bcc>)
 8003e74:	2101      	movs	r1, #1
 8003e76:	2002      	movs	r0, #2
 8003e78:	f003 ff7e 	bl	8007d78 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003e7c:	4b69      	ldr	r3, [pc, #420]	; (8004024 <menu+0x2bd0>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	220a      	movs	r2, #10
 8003e82:	4969      	ldr	r1, [pc, #420]	; (8004028 <menu+0x2bd4>)
 8003e84:	4618      	mov	r0, r3
 8003e86:	f008 fac9 	bl	800c41c <itoa>
		lcd_print(2,16,snum);
 8003e8a:	4a67      	ldr	r2, [pc, #412]	; (8004028 <menu+0x2bd4>)
 8003e8c:	2110      	movs	r1, #16
 8003e8e:	2002      	movs	r0, #2
 8003e90:	f003 ff72 	bl	8007d78 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e94:	2102      	movs	r1, #2
 8003e96:	4865      	ldr	r0, [pc, #404]	; (800402c <menu+0x2bd8>)
 8003e98:	f005 fa94 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d115      	bne.n	8003ece <menu+0x2a7a>
 8003ea2:	4b63      	ldr	r3, [pc, #396]	; (8004030 <menu+0x2bdc>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	f083 0301 	eor.w	r3, r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00e      	beq.n	8003ece <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003eb0:	4b5c      	ldr	r3, [pc, #368]	; (8004024 <menu+0x2bd0>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	4b5a      	ldr	r3, [pc, #360]	; (8004024 <menu+0x2bd0>)
 8003eba:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003ebc:	4b59      	ldr	r3, [pc, #356]	; (8004024 <menu+0x2bd0>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	d902      	bls.n	8003eca <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003ec4:	4b57      	ldr	r3, [pc, #348]	; (8004024 <menu+0x2bd0>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003eca:	f000 fe1f 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ece:	2104      	movs	r1, #4
 8003ed0:	4856      	ldr	r0, [pc, #344]	; (800402c <menu+0x2bd8>)
 8003ed2:	f005 fa77 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d115      	bne.n	8003f08 <menu+0x2ab4>
 8003edc:	4b54      	ldr	r3, [pc, #336]	; (8004030 <menu+0x2bdc>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	f083 0301 	eor.w	r3, r3, #1
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00e      	beq.n	8003f08 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003eea:	4b4e      	ldr	r3, [pc, #312]	; (8004024 <menu+0x2bd0>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	4b4c      	ldr	r3, [pc, #304]	; (8004024 <menu+0x2bd0>)
 8003ef4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003ef6:	4b4b      	ldr	r3, [pc, #300]	; (8004024 <menu+0x2bd0>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b06      	cmp	r3, #6
 8003efc:	d902      	bls.n	8003f04 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003efe:	4b49      	ldr	r3, [pc, #292]	; (8004024 <menu+0x2bd0>)
 8003f00:	2205      	movs	r2, #5
 8003f02:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f04:	f000 fe02 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f08:	2108      	movs	r1, #8
 8003f0a:	4848      	ldr	r0, [pc, #288]	; (800402c <menu+0x2bd8>)
 8003f0c:	f005 fa5a 	bl	80093c4 <HAL_GPIO_ReadPin>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d10d      	bne.n	8003f32 <menu+0x2ade>
 8003f16:	4b46      	ldr	r3, [pc, #280]	; (8004030 <menu+0x2bdc>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	f083 0301 	eor.w	r3, r3, #1
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d006      	beq.n	8003f32 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003f24:	4b3f      	ldr	r3, [pc, #252]	; (8004024 <menu+0x2bd0>)
 8003f26:	781a      	ldrb	r2, [r3, #0]
 8003f28:	4b42      	ldr	r3, [pc, #264]	; (8004034 <menu+0x2be0>)
 8003f2a:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003f2c:	4b42      	ldr	r3, [pc, #264]	; (8004038 <menu+0x2be4>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003f32:	4b42      	ldr	r3, [pc, #264]	; (800403c <menu+0x2be8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b1a      	cmp	r3, #26
 8003f38:	f040 80ec 	bne.w	8004114 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003f3c:	4b35      	ldr	r3, [pc, #212]	; (8004014 <menu+0x2bc0>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d105      	bne.n	8003f50 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003f44:	4a3e      	ldr	r2, [pc, #248]	; (8004040 <menu+0x2bec>)
 8003f46:	2101      	movs	r1, #1
 8003f48:	2001      	movs	r0, #1
 8003f4a:	f003 ff15 	bl	8007d78 <lcd_print>
 8003f4e:	e008      	b.n	8003f62 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003f50:	4b30      	ldr	r3, [pc, #192]	; (8004014 <menu+0x2bc0>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d104      	bne.n	8003f62 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003f58:	4a3a      	ldr	r2, [pc, #232]	; (8004044 <menu+0x2bf0>)
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	f003 ff0b 	bl	8007d78 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003f62:	4b39      	ldr	r3, [pc, #228]	; (8004048 <menu+0x2bf4>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b63      	cmp	r3, #99	; 0x63
 8003f68:	d91e      	bls.n	8003fa8 <menu+0x2b54>
			if(dilSecim == 0) {
 8003f6a:	4b2a      	ldr	r3, [pc, #168]	; (8004014 <menu+0x2bc0>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d104      	bne.n	8003f7c <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f72:	4a2a      	ldr	r2, [pc, #168]	; (800401c <menu+0x2bc8>)
 8003f74:	2101      	movs	r1, #1
 8003f76:	2002      	movs	r0, #2
 8003f78:	f003 fefe 	bl	8007d78 <lcd_print>
			}
			if(dilSecim == 1) {
 8003f7c:	4b25      	ldr	r3, [pc, #148]	; (8004014 <menu+0x2bc0>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d104      	bne.n	8003f8e <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003f84:	4a26      	ldr	r2, [pc, #152]	; (8004020 <menu+0x2bcc>)
 8003f86:	2101      	movs	r1, #1
 8003f88:	2002      	movs	r0, #2
 8003f8a:	f003 fef5 	bl	8007d78 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f8e:	4b2e      	ldr	r3, [pc, #184]	; (8004048 <menu+0x2bf4>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	220a      	movs	r2, #10
 8003f94:	4924      	ldr	r1, [pc, #144]	; (8004028 <menu+0x2bd4>)
 8003f96:	4618      	mov	r0, r3
 8003f98:	f008 fa40 	bl	800c41c <itoa>
			lcd_print(2,14,snum);
 8003f9c:	4a22      	ldr	r2, [pc, #136]	; (8004028 <menu+0x2bd4>)
 8003f9e:	210e      	movs	r1, #14
 8003fa0:	2002      	movs	r0, #2
 8003fa2:	f003 fee9 	bl	8007d78 <lcd_print>
 8003fa6:	e066      	b.n	8004076 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003fa8:	4b27      	ldr	r3, [pc, #156]	; (8004048 <menu+0x2bf4>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b09      	cmp	r3, #9
 8003fae:	d923      	bls.n	8003ff8 <menu+0x2ba4>
 8003fb0:	4b25      	ldr	r3, [pc, #148]	; (8004048 <menu+0x2bf4>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b63      	cmp	r3, #99	; 0x63
 8003fb6:	d81f      	bhi.n	8003ff8 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003fb8:	4b16      	ldr	r3, [pc, #88]	; (8004014 <menu+0x2bc0>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fc0:	4a16      	ldr	r2, [pc, #88]	; (800401c <menu+0x2bc8>)
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	2002      	movs	r0, #2
 8003fc6:	f003 fed7 	bl	8007d78 <lcd_print>
 8003fca:	e008      	b.n	8003fde <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <menu+0x2bc0>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d104      	bne.n	8003fde <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003fd4:	4a12      	ldr	r2, [pc, #72]	; (8004020 <menu+0x2bcc>)
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	2002      	movs	r0, #2
 8003fda:	f003 fecd 	bl	8007d78 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003fde:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <menu+0x2bf4>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	220a      	movs	r2, #10
 8003fe4:	4910      	ldr	r1, [pc, #64]	; (8004028 <menu+0x2bd4>)
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f008 fa18 	bl	800c41c <itoa>
			lcd_print(2, 15, snum);
 8003fec:	4a0e      	ldr	r2, [pc, #56]	; (8004028 <menu+0x2bd4>)
 8003fee:	210f      	movs	r1, #15
 8003ff0:	2002      	movs	r0, #2
 8003ff2:	f003 fec1 	bl	8007d78 <lcd_print>
 8003ff6:	e03e      	b.n	8004076 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003ff8:	4b13      	ldr	r3, [pc, #76]	; (8004048 <menu+0x2bf4>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b09      	cmp	r3, #9
 8003ffe:	d83a      	bhi.n	8004076 <menu+0x2c22>
			if(dilSecim == 0) {
 8004000:	4b04      	ldr	r3, [pc, #16]	; (8004014 <menu+0x2bc0>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d121      	bne.n	800404c <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8004008:	4a04      	ldr	r2, [pc, #16]	; (800401c <menu+0x2bc8>)
 800400a:	2101      	movs	r1, #1
 800400c:	2002      	movs	r0, #2
 800400e:	f003 feb3 	bl	8007d78 <lcd_print>
 8004012:	e024      	b.n	800405e <menu+0x2c0a>
 8004014:	2000020d 	.word	0x2000020d
 8004018:	0800da88 	.word	0x0800da88
 800401c:	0800d650 	.word	0x0800d650
 8004020:	0800d9c4 	.word	0x0800d9c4
 8004024:	20000203 	.word	0x20000203
 8004028:	20000188 	.word	0x20000188
 800402c:	40010800 	.word	0x40010800
 8004030:	2000021b 	.word	0x2000021b
 8004034:	20000118 	.word	0x20000118
 8004038:	20000218 	.word	0x20000218
 800403c:	200001ec 	.word	0x200001ec
 8004040:	0800da9c 	.word	0x0800da9c
 8004044:	0800dab0 	.word	0x0800dab0
 8004048:	20000204 	.word	0x20000204
			} else if(dilSecim == 1) {
 800404c:	4b8f      	ldr	r3, [pc, #572]	; (800428c <menu+0x2e38>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d104      	bne.n	800405e <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8004054:	4a8e      	ldr	r2, [pc, #568]	; (8004290 <menu+0x2e3c>)
 8004056:	2101      	movs	r1, #1
 8004058:	2002      	movs	r0, #2
 800405a:	f003 fe8d 	bl	8007d78 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800405e:	4b8d      	ldr	r3, [pc, #564]	; (8004294 <menu+0x2e40>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	220a      	movs	r2, #10
 8004064:	498c      	ldr	r1, [pc, #560]	; (8004298 <menu+0x2e44>)
 8004066:	4618      	mov	r0, r3
 8004068:	f008 f9d8 	bl	800c41c <itoa>
			lcd_print(2, 16, snum);
 800406c:	4a8a      	ldr	r2, [pc, #552]	; (8004298 <menu+0x2e44>)
 800406e:	2110      	movs	r1, #16
 8004070:	2002      	movs	r0, #2
 8004072:	f003 fe81 	bl	8007d78 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004076:	2102      	movs	r1, #2
 8004078:	4888      	ldr	r0, [pc, #544]	; (800429c <menu+0x2e48>)
 800407a:	f005 f9a3 	bl	80093c4 <HAL_GPIO_ReadPin>
 800407e:	4603      	mov	r3, r0
 8004080:	2b01      	cmp	r3, #1
 8004082:	d115      	bne.n	80040b0 <menu+0x2c5c>
 8004084:	4b86      	ldr	r3, [pc, #536]	; (80042a0 <menu+0x2e4c>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	f083 0301 	eor.w	r3, r3, #1
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00e      	beq.n	80040b0 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8004092:	4b80      	ldr	r3, [pc, #512]	; (8004294 <menu+0x2e40>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	3301      	adds	r3, #1
 8004098:	b2da      	uxtb	r2, r3
 800409a:	4b7e      	ldr	r3, [pc, #504]	; (8004294 <menu+0x2e40>)
 800409c:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800409e:	4b7d      	ldr	r3, [pc, #500]	; (8004294 <menu+0x2e40>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2bb4      	cmp	r3, #180	; 0xb4
 80040a4:	d902      	bls.n	80040ac <menu+0x2c58>
				makineCalismaTmr = 0;
 80040a6:	4b7b      	ldr	r3, [pc, #492]	; (8004294 <menu+0x2e40>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040ac:	f000 fd2e 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040b0:	2104      	movs	r1, #4
 80040b2:	487a      	ldr	r0, [pc, #488]	; (800429c <menu+0x2e48>)
 80040b4:	f005 f986 	bl	80093c4 <HAL_GPIO_ReadPin>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d115      	bne.n	80040ea <menu+0x2c96>
 80040be:	4b78      	ldr	r3, [pc, #480]	; (80042a0 <menu+0x2e4c>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	f083 0301 	eor.w	r3, r3, #1
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00e      	beq.n	80040ea <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 80040cc:	4b71      	ldr	r3, [pc, #452]	; (8004294 <menu+0x2e40>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	4b6f      	ldr	r3, [pc, #444]	; (8004294 <menu+0x2e40>)
 80040d6:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80040d8:	4b6e      	ldr	r3, [pc, #440]	; (8004294 <menu+0x2e40>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2bb5      	cmp	r3, #181	; 0xb5
 80040de:	d902      	bls.n	80040e6 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 80040e0:	4b6c      	ldr	r3, [pc, #432]	; (8004294 <menu+0x2e40>)
 80040e2:	22b4      	movs	r2, #180	; 0xb4
 80040e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80040e6:	f000 fd11 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80040ea:	2108      	movs	r1, #8
 80040ec:	486b      	ldr	r0, [pc, #428]	; (800429c <menu+0x2e48>)
 80040ee:	f005 f969 	bl	80093c4 <HAL_GPIO_ReadPin>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d10d      	bne.n	8004114 <menu+0x2cc0>
 80040f8:	4b69      	ldr	r3, [pc, #420]	; (80042a0 <menu+0x2e4c>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	f083 0301 	eor.w	r3, r3, #1
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d006      	beq.n	8004114 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004106:	4b63      	ldr	r3, [pc, #396]	; (8004294 <menu+0x2e40>)
 8004108:	781a      	ldrb	r2, [r3, #0]
 800410a:	4b66      	ldr	r3, [pc, #408]	; (80042a4 <menu+0x2e50>)
 800410c:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800410e:	4b66      	ldr	r3, [pc, #408]	; (80042a8 <menu+0x2e54>)
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004114:	4b65      	ldr	r3, [pc, #404]	; (80042ac <menu+0x2e58>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b1b      	cmp	r3, #27
 800411a:	f040 8083 	bne.w	8004224 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800411e:	4a64      	ldr	r2, [pc, #400]	; (80042b0 <menu+0x2e5c>)
 8004120:	2101      	movs	r1, #1
 8004122:	2001      	movs	r0, #1
 8004124:	f003 fe28 	bl	8007d78 <lcd_print>

		if(buzzer == 0) {
 8004128:	4b62      	ldr	r3, [pc, #392]	; (80042b4 <menu+0x2e60>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d113      	bne.n	8004158 <menu+0x2d04>
			if(dilSecim == 0) {
 8004130:	4b56      	ldr	r3, [pc, #344]	; (800428c <menu+0x2e38>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d105      	bne.n	8004144 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004138:	4a5f      	ldr	r2, [pc, #380]	; (80042b8 <menu+0x2e64>)
 800413a:	2101      	movs	r1, #1
 800413c:	2002      	movs	r0, #2
 800413e:	f003 fe1b 	bl	8007d78 <lcd_print>
 8004142:	e020      	b.n	8004186 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004144:	4b51      	ldr	r3, [pc, #324]	; (800428c <menu+0x2e38>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d11c      	bne.n	8004186 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 800414c:	4a5b      	ldr	r2, [pc, #364]	; (80042bc <menu+0x2e68>)
 800414e:	2101      	movs	r1, #1
 8004150:	2002      	movs	r0, #2
 8004152:	f003 fe11 	bl	8007d78 <lcd_print>
 8004156:	e016      	b.n	8004186 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8004158:	4b56      	ldr	r3, [pc, #344]	; (80042b4 <menu+0x2e60>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d112      	bne.n	8004186 <menu+0x2d32>
			if(dilSecim == 0) {
 8004160:	4b4a      	ldr	r3, [pc, #296]	; (800428c <menu+0x2e38>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004168:	4a55      	ldr	r2, [pc, #340]	; (80042c0 <menu+0x2e6c>)
 800416a:	2101      	movs	r1, #1
 800416c:	2002      	movs	r0, #2
 800416e:	f003 fe03 	bl	8007d78 <lcd_print>
 8004172:	e008      	b.n	8004186 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004174:	4b45      	ldr	r3, [pc, #276]	; (800428c <menu+0x2e38>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d104      	bne.n	8004186 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 800417c:	4a51      	ldr	r2, [pc, #324]	; (80042c4 <menu+0x2e70>)
 800417e:	2101      	movs	r1, #1
 8004180:	2002      	movs	r0, #2
 8004182:	f003 fdf9 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004186:	2102      	movs	r1, #2
 8004188:	4844      	ldr	r0, [pc, #272]	; (800429c <menu+0x2e48>)
 800418a:	f005 f91b 	bl	80093c4 <HAL_GPIO_ReadPin>
 800418e:	4603      	mov	r3, r0
 8004190:	2b01      	cmp	r3, #1
 8004192:	d115      	bne.n	80041c0 <menu+0x2d6c>
 8004194:	4b42      	ldr	r3, [pc, #264]	; (80042a0 <menu+0x2e4c>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	f083 0301 	eor.w	r3, r3, #1
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00e      	beq.n	80041c0 <menu+0x2d6c>
			buzzer = buzzer + 1;
 80041a2:	4b44      	ldr	r3, [pc, #272]	; (80042b4 <menu+0x2e60>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	3301      	adds	r3, #1
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	4b42      	ldr	r3, [pc, #264]	; (80042b4 <menu+0x2e60>)
 80041ac:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80041ae:	4b41      	ldr	r3, [pc, #260]	; (80042b4 <menu+0x2e60>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d902      	bls.n	80041bc <menu+0x2d68>
				buzzer = 0;
 80041b6:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <menu+0x2e60>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80041bc:	f000 fca6 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80041c0:	2104      	movs	r1, #4
 80041c2:	4836      	ldr	r0, [pc, #216]	; (800429c <menu+0x2e48>)
 80041c4:	f005 f8fe 	bl	80093c4 <HAL_GPIO_ReadPin>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d115      	bne.n	80041fa <menu+0x2da6>
 80041ce:	4b34      	ldr	r3, [pc, #208]	; (80042a0 <menu+0x2e4c>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	f083 0301 	eor.w	r3, r3, #1
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00e      	beq.n	80041fa <menu+0x2da6>
			buzzer = buzzer - 1;
 80041dc:	4b35      	ldr	r3, [pc, #212]	; (80042b4 <menu+0x2e60>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	4b33      	ldr	r3, [pc, #204]	; (80042b4 <menu+0x2e60>)
 80041e6:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <menu+0x2e60>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <menu+0x2da2>
		   		buzzer = 1;
 80041f0:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <menu+0x2e60>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80041f6:	f000 fc89 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80041fa:	2108      	movs	r1, #8
 80041fc:	4827      	ldr	r0, [pc, #156]	; (800429c <menu+0x2e48>)
 80041fe:	f005 f8e1 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004202:	4603      	mov	r3, r0
 8004204:	2b01      	cmp	r3, #1
 8004206:	d10d      	bne.n	8004224 <menu+0x2dd0>
 8004208:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <menu+0x2e4c>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	f083 0301 	eor.w	r3, r3, #1
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d006      	beq.n	8004224 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004216:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <menu+0x2e60>)
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <menu+0x2e50>)
 800421c:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800421e:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <menu+0x2e54>)
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004224:	4b21      	ldr	r3, [pc, #132]	; (80042ac <menu+0x2e58>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b1c      	cmp	r3, #28
 800422a:	f040 80ab 	bne.w	8004384 <menu+0x2f30>
		calismaSayModu = 0;
 800422e:	4b26      	ldr	r3, [pc, #152]	; (80042c8 <menu+0x2e74>)
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004234:	4a25      	ldr	r2, [pc, #148]	; (80042cc <menu+0x2e78>)
 8004236:	2101      	movs	r1, #1
 8004238:	2001      	movs	r0, #1
 800423a:	f003 fd9d 	bl	8007d78 <lcd_print>

		if(demoMode == 0) {
 800423e:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <menu+0x2e7c>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d113      	bne.n	800426e <menu+0x2e1a>
			if(dilSecim == 0) {
 8004246:	4b11      	ldr	r3, [pc, #68]	; (800428c <menu+0x2e38>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d105      	bne.n	800425a <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800424e:	4a1a      	ldr	r2, [pc, #104]	; (80042b8 <menu+0x2e64>)
 8004250:	2101      	movs	r1, #1
 8004252:	2002      	movs	r0, #2
 8004254:	f003 fd90 	bl	8007d78 <lcd_print>
 8004258:	e045      	b.n	80042e6 <menu+0x2e92>
			} else if(dilSecim == 1) {
 800425a:	4b0c      	ldr	r3, [pc, #48]	; (800428c <menu+0x2e38>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d141      	bne.n	80042e6 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <menu+0x2e68>)
 8004264:	2101      	movs	r1, #1
 8004266:	2002      	movs	r0, #2
 8004268:	f003 fd86 	bl	8007d78 <lcd_print>
 800426c:	e03b      	b.n	80042e6 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800426e:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <menu+0x2e7c>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d137      	bne.n	80042e6 <menu+0x2e92>
			if(dilSecim == 0){
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <menu+0x2e38>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d12a      	bne.n	80042d4 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800427e:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <menu+0x2e6c>)
 8004280:	2101      	movs	r1, #1
 8004282:	2002      	movs	r0, #2
 8004284:	f003 fd78 	bl	8007d78 <lcd_print>
 8004288:	e02d      	b.n	80042e6 <menu+0x2e92>
 800428a:	bf00      	nop
 800428c:	2000020d 	.word	0x2000020d
 8004290:	0800d9c4 	.word	0x0800d9c4
 8004294:	20000204 	.word	0x20000204
 8004298:	20000188 	.word	0x20000188
 800429c:	40010800 	.word	0x40010800
 80042a0:	2000021b 	.word	0x2000021b
 80042a4:	20000118 	.word	0x20000118
 80042a8:	20000218 	.word	0x20000218
 80042ac:	200001ec 	.word	0x200001ec
 80042b0:	0800dac4 	.word	0x0800dac4
 80042b4:	20000208 	.word	0x20000208
 80042b8:	0800d3ec 	.word	0x0800d3ec
 80042bc:	0800d400 	.word	0x0800d400
 80042c0:	0800d44c 	.word	0x0800d44c
 80042c4:	0800d460 	.word	0x0800d460
 80042c8:	2000020c 	.word	0x2000020c
 80042cc:	0800dad8 	.word	0x0800dad8
 80042d0:	2000020a 	.word	0x2000020a
			} else if(dilSecim == 1) {
 80042d4:	4b71      	ldr	r3, [pc, #452]	; (800449c <menu+0x3048>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d104      	bne.n	80042e6 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80042dc:	4a70      	ldr	r2, [pc, #448]	; (80044a0 <menu+0x304c>)
 80042de:	2101      	movs	r1, #1
 80042e0:	2002      	movs	r0, #2
 80042e2:	f003 fd49 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80042e6:	2102      	movs	r1, #2
 80042e8:	486e      	ldr	r0, [pc, #440]	; (80044a4 <menu+0x3050>)
 80042ea:	f005 f86b 	bl	80093c4 <HAL_GPIO_ReadPin>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d115      	bne.n	8004320 <menu+0x2ecc>
 80042f4:	4b6c      	ldr	r3, [pc, #432]	; (80044a8 <menu+0x3054>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	f083 0301 	eor.w	r3, r3, #1
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00e      	beq.n	8004320 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004302:	4b6a      	ldr	r3, [pc, #424]	; (80044ac <menu+0x3058>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	3301      	adds	r3, #1
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4b68      	ldr	r3, [pc, #416]	; (80044ac <menu+0x3058>)
 800430c:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800430e:	4b67      	ldr	r3, [pc, #412]	; (80044ac <menu+0x3058>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d902      	bls.n	800431c <menu+0x2ec8>
				demoMode = 0;
 8004316:	4b65      	ldr	r3, [pc, #404]	; (80044ac <menu+0x3058>)
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800431c:	f000 fbf6 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004320:	2104      	movs	r1, #4
 8004322:	4860      	ldr	r0, [pc, #384]	; (80044a4 <menu+0x3050>)
 8004324:	f005 f84e 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004328:	4603      	mov	r3, r0
 800432a:	2b01      	cmp	r3, #1
 800432c:	d115      	bne.n	800435a <menu+0x2f06>
 800432e:	4b5e      	ldr	r3, [pc, #376]	; (80044a8 <menu+0x3054>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	f083 0301 	eor.w	r3, r3, #1
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00e      	beq.n	800435a <menu+0x2f06>
			demoMode = demoMode - 1;
 800433c:	4b5b      	ldr	r3, [pc, #364]	; (80044ac <menu+0x3058>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	3b01      	subs	r3, #1
 8004342:	b2da      	uxtb	r2, r3
 8004344:	4b59      	ldr	r3, [pc, #356]	; (80044ac <menu+0x3058>)
 8004346:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004348:	4b58      	ldr	r3, [pc, #352]	; (80044ac <menu+0x3058>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <menu+0x2f02>
		   		demoMode = 1;
 8004350:	4b56      	ldr	r3, [pc, #344]	; (80044ac <menu+0x3058>)
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004356:	f000 fbd9 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800435a:	2108      	movs	r1, #8
 800435c:	4851      	ldr	r0, [pc, #324]	; (80044a4 <menu+0x3050>)
 800435e:	f005 f831 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004362:	4603      	mov	r3, r0
 8004364:	2b01      	cmp	r3, #1
 8004366:	d10d      	bne.n	8004384 <menu+0x2f30>
 8004368:	4b4f      	ldr	r3, [pc, #316]	; (80044a8 <menu+0x3054>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	f083 0301 	eor.w	r3, r3, #1
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004376:	4b4d      	ldr	r3, [pc, #308]	; (80044ac <menu+0x3058>)
 8004378:	781a      	ldrb	r2, [r3, #0]
 800437a:	4b4d      	ldr	r3, [pc, #308]	; (80044b0 <menu+0x305c>)
 800437c:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800437e:	4b4d      	ldr	r3, [pc, #308]	; (80044b4 <menu+0x3060>)
 8004380:	2201      	movs	r2, #1
 8004382:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004384:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <menu+0x3064>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b1d      	cmp	r3, #29
 800438a:	f040 8132 	bne.w	80045f2 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800438e:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <menu+0x3068>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d113      	bne.n	80043be <menu+0x2f6a>
 8004396:	4b4a      	ldr	r3, [pc, #296]	; (80044c0 <menu+0x306c>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <menu+0x2f6a>
 800439e:	4b49      	ldr	r3, [pc, #292]	; (80044c4 <menu+0x3070>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10b      	bne.n	80043be <menu+0x2f6a>
 80043a6:	4b48      	ldr	r3, [pc, #288]	; (80044c8 <menu+0x3074>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d107      	bne.n	80043be <menu+0x2f6a>
 80043ae:	4b47      	ldr	r3, [pc, #284]	; (80044cc <menu+0x3078>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <menu+0x2f6a>
			calismaSayisiYar = 0;
 80043b6:	4b46      	ldr	r3, [pc, #280]	; (80044d0 <menu+0x307c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
 80043bc:	e002      	b.n	80043c4 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80043be:	4b44      	ldr	r3, [pc, #272]	; (80044d0 <menu+0x307c>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80043c4:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <menu+0x3080>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d154      	bne.n	8004476 <menu+0x3022>
			if(dilSecim == 0) {
 80043cc:	4b33      	ldr	r3, [pc, #204]	; (800449c <menu+0x3048>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80043d4:	4a40      	ldr	r2, [pc, #256]	; (80044d8 <menu+0x3084>)
 80043d6:	2101      	movs	r1, #1
 80043d8:	2001      	movs	r0, #1
 80043da:	f003 fccd 	bl	8007d78 <lcd_print>
 80043de:	e008      	b.n	80043f2 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80043e0:	4b2e      	ldr	r3, [pc, #184]	; (800449c <menu+0x3048>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d104      	bne.n	80043f2 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80043e8:	4a3c      	ldr	r2, [pc, #240]	; (80044dc <menu+0x3088>)
 80043ea:	2101      	movs	r1, #1
 80043ec:	2001      	movs	r0, #1
 80043ee:	f003 fcc3 	bl	8007d78 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80043f2:	4b36      	ldr	r3, [pc, #216]	; (80044cc <menu+0x3078>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	220a      	movs	r2, #10
 80043f8:	4939      	ldr	r1, [pc, #228]	; (80044e0 <menu+0x308c>)
 80043fa:	4618      	mov	r0, r3
 80043fc:	f008 f80e 	bl	800c41c <itoa>
			lcd_print(2, 12, snum);
 8004400:	4a37      	ldr	r2, [pc, #220]	; (80044e0 <menu+0x308c>)
 8004402:	210c      	movs	r1, #12
 8004404:	2002      	movs	r0, #2
 8004406:	f003 fcb7 	bl	8007d78 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800440a:	4b2f      	ldr	r3, [pc, #188]	; (80044c8 <menu+0x3074>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	220a      	movs	r2, #10
 8004410:	4933      	ldr	r1, [pc, #204]	; (80044e0 <menu+0x308c>)
 8004412:	4618      	mov	r0, r3
 8004414:	f008 f802 	bl	800c41c <itoa>
			lcd_print(2, 13, snum);
 8004418:	4a31      	ldr	r2, [pc, #196]	; (80044e0 <menu+0x308c>)
 800441a:	210d      	movs	r1, #13
 800441c:	2002      	movs	r0, #2
 800441e:	f003 fcab 	bl	8007d78 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004422:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <menu+0x3070>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	220a      	movs	r2, #10
 8004428:	492d      	ldr	r1, [pc, #180]	; (80044e0 <menu+0x308c>)
 800442a:	4618      	mov	r0, r3
 800442c:	f007 fff6 	bl	800c41c <itoa>
			lcd_print(2, 14, snum);
 8004430:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <menu+0x308c>)
 8004432:	210e      	movs	r1, #14
 8004434:	2002      	movs	r0, #2
 8004436:	f003 fc9f 	bl	8007d78 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800443a:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <menu+0x306c>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	220a      	movs	r2, #10
 8004440:	4927      	ldr	r1, [pc, #156]	; (80044e0 <menu+0x308c>)
 8004442:	4618      	mov	r0, r3
 8004444:	f007 ffea 	bl	800c41c <itoa>
			lcd_print(2, 15, snum);
 8004448:	4a25      	ldr	r2, [pc, #148]	; (80044e0 <menu+0x308c>)
 800444a:	210f      	movs	r1, #15
 800444c:	2002      	movs	r0, #2
 800444e:	f003 fc93 	bl	8007d78 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004452:	4b1a      	ldr	r3, [pc, #104]	; (80044bc <menu+0x3068>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	220a      	movs	r2, #10
 8004458:	4921      	ldr	r1, [pc, #132]	; (80044e0 <menu+0x308c>)
 800445a:	4618      	mov	r0, r3
 800445c:	f007 ffde 	bl	800c41c <itoa>
			lcd_print(2, 16, snum);
 8004460:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <menu+0x308c>)
 8004462:	2110      	movs	r1, #16
 8004464:	2002      	movs	r0, #2
 8004466:	f003 fc87 	bl	8007d78 <lcd_print>

			lcd_print(2, 1, "           ");
 800446a:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <menu+0x3090>)
 800446c:	2101      	movs	r1, #1
 800446e:	2002      	movs	r0, #2
 8004470:	f003 fc82 	bl	8007d78 <lcd_print>
 8004474:	e048      	b.n	8004508 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004476:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <menu+0x3080>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d144      	bne.n	8004508 <menu+0x30b4>
			if(dilSecim == 0) {
 800447e:	4b07      	ldr	r3, [pc, #28]	; (800449c <menu+0x3048>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d132      	bne.n	80044ec <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004486:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <menu+0x3084>)
 8004488:	2101      	movs	r1, #1
 800448a:	2001      	movs	r0, #1
 800448c:	f003 fc74 	bl	8007d78 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004490:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <menu+0x3094>)
 8004492:	2101      	movs	r1, #1
 8004494:	2002      	movs	r0, #2
 8004496:	f003 fc6f 	bl	8007d78 <lcd_print>
 800449a:	e035      	b.n	8004508 <menu+0x30b4>
 800449c:	2000020d 	.word	0x2000020d
 80044a0:	0800d460 	.word	0x0800d460
 80044a4:	40010800 	.word	0x40010800
 80044a8:	2000021b 	.word	0x2000021b
 80044ac:	2000020a 	.word	0x2000020a
 80044b0:	20000118 	.word	0x20000118
 80044b4:	20000218 	.word	0x20000218
 80044b8:	200001ec 	.word	0x200001ec
 80044bc:	200001e9 	.word	0x200001e9
 80044c0:	200001ea 	.word	0x200001ea
 80044c4:	20000000 	.word	0x20000000
 80044c8:	20000001 	.word	0x20000001
 80044cc:	200001eb 	.word	0x200001eb
 80044d0:	2000022d 	.word	0x2000022d
 80044d4:	2000020c 	.word	0x2000020c
 80044d8:	0800dae8 	.word	0x0800dae8
 80044dc:	0800dafc 	.word	0x0800dafc
 80044e0:	20000188 	.word	0x20000188
 80044e4:	0800db10 	.word	0x0800db10
 80044e8:	0800db1c 	.word	0x0800db1c
			} else if(dilSecim == 1) {
 80044ec:	4b94      	ldr	r3, [pc, #592]	; (8004740 <menu+0x32ec>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d109      	bne.n	8004508 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80044f4:	4a93      	ldr	r2, [pc, #588]	; (8004744 <menu+0x32f0>)
 80044f6:	2101      	movs	r1, #1
 80044f8:	2001      	movs	r0, #1
 80044fa:	f003 fc3d 	bl	8007d78 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80044fe:	4a92      	ldr	r2, [pc, #584]	; (8004748 <menu+0x32f4>)
 8004500:	2101      	movs	r1, #1
 8004502:	2002      	movs	r0, #2
 8004504:	f003 fc38 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004508:	2102      	movs	r1, #2
 800450a:	4890      	ldr	r0, [pc, #576]	; (800474c <menu+0x32f8>)
 800450c:	f004 ff5a 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004510:	4603      	mov	r3, r0
 8004512:	2b01      	cmp	r3, #1
 8004514:	d119      	bne.n	800454a <menu+0x30f6>
 8004516:	4b8e      	ldr	r3, [pc, #568]	; (8004750 <menu+0x32fc>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	f083 0301 	eor.w	r3, r3, #1
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d012      	beq.n	800454a <menu+0x30f6>
 8004524:	4b8b      	ldr	r3, [pc, #556]	; (8004754 <menu+0x3300>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00e      	beq.n	800454a <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 800452c:	4b8a      	ldr	r3, [pc, #552]	; (8004758 <menu+0x3304>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	3301      	adds	r3, #1
 8004532:	b2da      	uxtb	r2, r3
 8004534:	4b88      	ldr	r3, [pc, #544]	; (8004758 <menu+0x3304>)
 8004536:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004538:	4b87      	ldr	r3, [pc, #540]	; (8004758 <menu+0x3304>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d902      	bls.n	8004546 <menu+0x30f2>
				calismaSayModu = 0;
 8004540:	4b85      	ldr	r3, [pc, #532]	; (8004758 <menu+0x3304>)
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004546:	f000 fae1 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800454a:	2104      	movs	r1, #4
 800454c:	487f      	ldr	r0, [pc, #508]	; (800474c <menu+0x32f8>)
 800454e:	f004 ff39 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004552:	4603      	mov	r3, r0
 8004554:	2b01      	cmp	r3, #1
 8004556:	d119      	bne.n	800458c <menu+0x3138>
 8004558:	4b7d      	ldr	r3, [pc, #500]	; (8004750 <menu+0x32fc>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	f083 0301 	eor.w	r3, r3, #1
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d012      	beq.n	800458c <menu+0x3138>
 8004566:	4b7b      	ldr	r3, [pc, #492]	; (8004754 <menu+0x3300>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00e      	beq.n	800458c <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800456e:	4b7a      	ldr	r3, [pc, #488]	; (8004758 <menu+0x3304>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	3b01      	subs	r3, #1
 8004574:	b2da      	uxtb	r2, r3
 8004576:	4b78      	ldr	r3, [pc, #480]	; (8004758 <menu+0x3304>)
 8004578:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800457a:	4b77      	ldr	r3, [pc, #476]	; (8004758 <menu+0x3304>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <menu+0x3134>
		   		calismaSayModu = 1;
 8004582:	4b75      	ldr	r3, [pc, #468]	; (8004758 <menu+0x3304>)
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004588:	f000 fac0 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800458c:	2108      	movs	r1, #8
 800458e:	486f      	ldr	r0, [pc, #444]	; (800474c <menu+0x32f8>)
 8004590:	f004 ff18 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004594:	4603      	mov	r3, r0
 8004596:	2b01      	cmp	r3, #1
 8004598:	d12b      	bne.n	80045f2 <menu+0x319e>
 800459a:	4b6d      	ldr	r3, [pc, #436]	; (8004750 <menu+0x32fc>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	f083 0301 	eor.w	r3, r3, #1
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d024      	beq.n	80045f2 <menu+0x319e>
			eepromData[32] = 0;
 80045a8:	4b6c      	ldr	r3, [pc, #432]	; (800475c <menu+0x3308>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80045b0:	4b6a      	ldr	r3, [pc, #424]	; (800475c <menu+0x3308>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80045b6:	4b69      	ldr	r3, [pc, #420]	; (800475c <menu+0x3308>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80045bc:	4b67      	ldr	r3, [pc, #412]	; (800475c <menu+0x3308>)
 80045be:	2200      	movs	r2, #0
 80045c0:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80045c2:	4b66      	ldr	r3, [pc, #408]	; (800475c <menu+0x3308>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80045c8:	4b65      	ldr	r3, [pc, #404]	; (8004760 <menu+0x330c>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80045ce:	4b65      	ldr	r3, [pc, #404]	; (8004764 <menu+0x3310>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80045d4:	4b64      	ldr	r3, [pc, #400]	; (8004768 <menu+0x3314>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80045da:	4b64      	ldr	r3, [pc, #400]	; (800476c <menu+0x3318>)
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80045e0:	4b63      	ldr	r3, [pc, #396]	; (8004770 <menu+0x331c>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80045e6:	4b5c      	ldr	r3, [pc, #368]	; (8004758 <menu+0x3304>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80045ec:	4b61      	ldr	r3, [pc, #388]	; (8004774 <menu+0x3320>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80045f2:	4b61      	ldr	r3, [pc, #388]	; (8004778 <menu+0x3324>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b1e      	cmp	r3, #30
 80045f8:	d16f      	bne.n	80046da <menu+0x3286>
		calismaSayModu = 0;
 80045fa:	4b57      	ldr	r3, [pc, #348]	; (8004758 <menu+0x3304>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004600:	4b4f      	ldr	r3, [pc, #316]	; (8004740 <menu+0x32ec>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004608:	4a5c      	ldr	r2, [pc, #368]	; (800477c <menu+0x3328>)
 800460a:	2101      	movs	r1, #1
 800460c:	2001      	movs	r0, #1
 800460e:	f003 fbb3 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004612:	4a5b      	ldr	r2, [pc, #364]	; (8004780 <menu+0x332c>)
 8004614:	2101      	movs	r1, #1
 8004616:	2002      	movs	r0, #2
 8004618:	f003 fbae 	bl	8007d78 <lcd_print>
 800461c:	e00d      	b.n	800463a <menu+0x31e6>
		} else if(dilSecim == 1) {
 800461e:	4b48      	ldr	r3, [pc, #288]	; (8004740 <menu+0x32ec>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d109      	bne.n	800463a <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004626:	4a57      	ldr	r2, [pc, #348]	; (8004784 <menu+0x3330>)
 8004628:	2101      	movs	r1, #1
 800462a:	2001      	movs	r0, #1
 800462c:	f003 fba4 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004630:	4a55      	ldr	r2, [pc, #340]	; (8004788 <menu+0x3334>)
 8004632:	2101      	movs	r1, #1
 8004634:	2002      	movs	r0, #2
 8004636:	f003 fb9f 	bl	8007d78 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800463a:	2102      	movs	r1, #2
 800463c:	4843      	ldr	r0, [pc, #268]	; (800474c <menu+0x32f8>)
 800463e:	f004 fec1 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004642:	4603      	mov	r3, r0
 8004644:	2b01      	cmp	r3, #1
 8004646:	d115      	bne.n	8004674 <menu+0x3220>
 8004648:	4b41      	ldr	r3, [pc, #260]	; (8004750 <menu+0x32fc>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	f083 0301 	eor.w	r3, r3, #1
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00e      	beq.n	8004674 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004656:	4b3a      	ldr	r3, [pc, #232]	; (8004740 <menu+0x32ec>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	3301      	adds	r3, #1
 800465c:	b2da      	uxtb	r2, r3
 800465e:	4b38      	ldr	r3, [pc, #224]	; (8004740 <menu+0x32ec>)
 8004660:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004662:	4b37      	ldr	r3, [pc, #220]	; (8004740 <menu+0x32ec>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d902      	bls.n	8004670 <menu+0x321c>
				dilSecim = 0;
 800466a:	4b35      	ldr	r3, [pc, #212]	; (8004740 <menu+0x32ec>)
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004670:	f000 fa4c 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004674:	2104      	movs	r1, #4
 8004676:	4835      	ldr	r0, [pc, #212]	; (800474c <menu+0x32f8>)
 8004678:	f004 fea4 	bl	80093c4 <HAL_GPIO_ReadPin>
 800467c:	4603      	mov	r3, r0
 800467e:	2b01      	cmp	r3, #1
 8004680:	d115      	bne.n	80046ae <menu+0x325a>
 8004682:	4b33      	ldr	r3, [pc, #204]	; (8004750 <menu+0x32fc>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	f083 0301 	eor.w	r3, r3, #1
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00e      	beq.n	80046ae <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004690:	4b2b      	ldr	r3, [pc, #172]	; (8004740 <menu+0x32ec>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	3b01      	subs	r3, #1
 8004696:	b2da      	uxtb	r2, r3
 8004698:	4b29      	ldr	r3, [pc, #164]	; (8004740 <menu+0x32ec>)
 800469a:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800469c:	4b28      	ldr	r3, [pc, #160]	; (8004740 <menu+0x32ec>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <menu+0x3256>
		   		dilSecim = 1;
 80046a4:	4b26      	ldr	r3, [pc, #152]	; (8004740 <menu+0x32ec>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80046aa:	f000 fa2f 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046ae:	2108      	movs	r1, #8
 80046b0:	4826      	ldr	r0, [pc, #152]	; (800474c <menu+0x32f8>)
 80046b2:	f004 fe87 	bl	80093c4 <HAL_GPIO_ReadPin>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d10e      	bne.n	80046da <menu+0x3286>
 80046bc:	4b24      	ldr	r3, [pc, #144]	; (8004750 <menu+0x32fc>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	f083 0301 	eor.w	r3, r3, #1
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <menu+0x3286>
			eepromData[33] = dilSecim;
 80046ca:	4b1d      	ldr	r3, [pc, #116]	; (8004740 <menu+0x32ec>)
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	4b23      	ldr	r3, [pc, #140]	; (800475c <menu+0x3308>)
 80046d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80046d4:	4b27      	ldr	r3, [pc, #156]	; (8004774 <menu+0x3320>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80046da:	4b27      	ldr	r3, [pc, #156]	; (8004778 <menu+0x3324>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b1f      	cmp	r3, #31
 80046e0:	f040 80b7 	bne.w	8004852 <menu+0x33fe>
		calismaSayModu = 0;
 80046e4:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <menu+0x3304>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80046ea:	4a28      	ldr	r2, [pc, #160]	; (800478c <menu+0x3338>)
 80046ec:	2101      	movs	r1, #1
 80046ee:	2001      	movs	r0, #1
 80046f0:	f003 fb42 	bl	8007d78 <lcd_print>

		if(iotMode == 0) {
 80046f4:	4b26      	ldr	r3, [pc, #152]	; (8004790 <menu+0x333c>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d113      	bne.n	8004724 <menu+0x32d0>
			if(dilSecim == 0) {
 80046fc:	4b10      	ldr	r3, [pc, #64]	; (8004740 <menu+0x32ec>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004704:	4a23      	ldr	r2, [pc, #140]	; (8004794 <menu+0x3340>)
 8004706:	2101      	movs	r1, #1
 8004708:	2002      	movs	r0, #2
 800470a:	f003 fb35 	bl	8007d78 <lcd_print>
 800470e:	e050      	b.n	80047b2 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <menu+0x32ec>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d14c      	bne.n	80047b2 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004718:	4a1f      	ldr	r2, [pc, #124]	; (8004798 <menu+0x3344>)
 800471a:	2101      	movs	r1, #1
 800471c:	2002      	movs	r0, #2
 800471e:	f003 fb2b 	bl	8007d78 <lcd_print>
 8004722:	e046      	b.n	80047b2 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004724:	4b1a      	ldr	r3, [pc, #104]	; (8004790 <menu+0x333c>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d142      	bne.n	80047b2 <menu+0x335e>
			if(dilSecim == 0) {
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <menu+0x32ec>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d135      	bne.n	80047a0 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004734:	4a19      	ldr	r2, [pc, #100]	; (800479c <menu+0x3348>)
 8004736:	2101      	movs	r1, #1
 8004738:	2002      	movs	r0, #2
 800473a:	f003 fb1d 	bl	8007d78 <lcd_print>
 800473e:	e038      	b.n	80047b2 <menu+0x335e>
 8004740:	2000020d 	.word	0x2000020d
 8004744:	0800dafc 	.word	0x0800dafc
 8004748:	0800db30 	.word	0x0800db30
 800474c:	40010800 	.word	0x40010800
 8004750:	2000021b 	.word	0x2000021b
 8004754:	2000022d 	.word	0x2000022d
 8004758:	2000020c 	.word	0x2000020c
 800475c:	20000118 	.word	0x20000118
 8004760:	200001eb 	.word	0x200001eb
 8004764:	20000001 	.word	0x20000001
 8004768:	20000000 	.word	0x20000000
 800476c:	200001ea 	.word	0x200001ea
 8004770:	200001e9 	.word	0x200001e9
 8004774:	20000218 	.word	0x20000218
 8004778:	200001ec 	.word	0x200001ec
 800477c:	0800db44 	.word	0x0800db44
 8004780:	0800db58 	.word	0x0800db58
 8004784:	0800db6c 	.word	0x0800db6c
 8004788:	0800db80 	.word	0x0800db80
 800478c:	0800db94 	.word	0x0800db94
 8004790:	2000020b 	.word	0x2000020b
 8004794:	0800d3ec 	.word	0x0800d3ec
 8004798:	0800d400 	.word	0x0800d400
 800479c:	0800d44c 	.word	0x0800d44c
			} else if(dilSecim == 1) {
 80047a0:	4ba1      	ldr	r3, [pc, #644]	; (8004a28 <menu+0x35d4>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d104      	bne.n	80047b2 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80047a8:	4aa0      	ldr	r2, [pc, #640]	; (8004a2c <menu+0x35d8>)
 80047aa:	2101      	movs	r1, #1
 80047ac:	2002      	movs	r0, #2
 80047ae:	f003 fae3 	bl	8007d78 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80047b2:	2102      	movs	r1, #2
 80047b4:	489e      	ldr	r0, [pc, #632]	; (8004a30 <menu+0x35dc>)
 80047b6:	f004 fe05 	bl	80093c4 <HAL_GPIO_ReadPin>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d115      	bne.n	80047ec <menu+0x3398>
 80047c0:	4b9c      	ldr	r3, [pc, #624]	; (8004a34 <menu+0x35e0>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	f083 0301 	eor.w	r3, r3, #1
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00e      	beq.n	80047ec <menu+0x3398>
			iotMode = iotMode + 1;
 80047ce:	4b9a      	ldr	r3, [pc, #616]	; (8004a38 <menu+0x35e4>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	3301      	adds	r3, #1
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	4b98      	ldr	r3, [pc, #608]	; (8004a38 <menu+0x35e4>)
 80047d8:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80047da:	4b97      	ldr	r3, [pc, #604]	; (8004a38 <menu+0x35e4>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d902      	bls.n	80047e8 <menu+0x3394>
				iotMode = 0;
 80047e2:	4b95      	ldr	r3, [pc, #596]	; (8004a38 <menu+0x35e4>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80047e8:	f000 f990 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047ec:	2104      	movs	r1, #4
 80047ee:	4890      	ldr	r0, [pc, #576]	; (8004a30 <menu+0x35dc>)
 80047f0:	f004 fde8 	bl	80093c4 <HAL_GPIO_ReadPin>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d115      	bne.n	8004826 <menu+0x33d2>
 80047fa:	4b8e      	ldr	r3, [pc, #568]	; (8004a34 <menu+0x35e0>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	f083 0301 	eor.w	r3, r3, #1
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00e      	beq.n	8004826 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004808:	4b8b      	ldr	r3, [pc, #556]	; (8004a38 <menu+0x35e4>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	3b01      	subs	r3, #1
 800480e:	b2da      	uxtb	r2, r3
 8004810:	4b89      	ldr	r3, [pc, #548]	; (8004a38 <menu+0x35e4>)
 8004812:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004814:	4b88      	ldr	r3, [pc, #544]	; (8004a38 <menu+0x35e4>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <menu+0x33ce>
		   		iotMode = 1;
 800481c:	4b86      	ldr	r3, [pc, #536]	; (8004a38 <menu+0x35e4>)
 800481e:	2201      	movs	r2, #1
 8004820:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004822:	f000 f973 	bl	8004b0c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004826:	2108      	movs	r1, #8
 8004828:	4881      	ldr	r0, [pc, #516]	; (8004a30 <menu+0x35dc>)
 800482a:	f004 fdcb 	bl	80093c4 <HAL_GPIO_ReadPin>
 800482e:	4603      	mov	r3, r0
 8004830:	2b01      	cmp	r3, #1
 8004832:	d10e      	bne.n	8004852 <menu+0x33fe>
 8004834:	4b7f      	ldr	r3, [pc, #508]	; (8004a34 <menu+0x35e0>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	f083 0301 	eor.w	r3, r3, #1
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004842:	4b7d      	ldr	r3, [pc, #500]	; (8004a38 <menu+0x35e4>)
 8004844:	781a      	ldrb	r2, [r3, #0]
 8004846:	4b7d      	ldr	r3, [pc, #500]	; (8004a3c <menu+0x35e8>)
 8004848:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 800484c:	4b7c      	ldr	r3, [pc, #496]	; (8004a40 <menu+0x35ec>)
 800484e:	2201      	movs	r2, #1
 8004850:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004852:	4b7c      	ldr	r3, [pc, #496]	; (8004a44 <menu+0x35f0>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b20      	cmp	r3, #32
 8004858:	d12b      	bne.n	80048b2 <menu+0x345e>
		calismaSayModu = 0;
 800485a:	4b7b      	ldr	r3, [pc, #492]	; (8004a48 <menu+0x35f4>)
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8004860:	2001      	movs	r0, #1
 8004862:	f7fb ff69 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 8004866:	2032      	movs	r0, #50	; 0x32
 8004868:	f003 ffdc 	bl	8008824 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 800486c:	2001      	movs	r0, #1
 800486e:	f7fc fd4b 	bl	8001308 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004872:	2102      	movs	r1, #2
 8004874:	486e      	ldr	r0, [pc, #440]	; (8004a30 <menu+0x35dc>)
 8004876:	f004 fda5 	bl	80093c4 <HAL_GPIO_ReadPin>
 800487a:	4603      	mov	r3, r0
 800487c:	2b01      	cmp	r3, #1
 800487e:	d118      	bne.n	80048b2 <menu+0x345e>
 8004880:	2104      	movs	r1, #4
 8004882:	486b      	ldr	r0, [pc, #428]	; (8004a30 <menu+0x35dc>)
 8004884:	f004 fd9e 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d111      	bne.n	80048b2 <menu+0x345e>
 800488e:	4b69      	ldr	r3, [pc, #420]	; (8004a34 <menu+0x35e0>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	f083 0301 	eor.w	r3, r3, #1
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <menu+0x345e>
			takeMachineID();
 800489c:	f002 fa80 	bl	8006da0 <takeMachineID>

			convertArrays(1);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f7fb ff49 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 80048a6:	2032      	movs	r0, #50	; 0x32
 80048a8:	f003 ffbc 	bl	8008824 <HAL_Delay>

			printCredentials(1); //ekrana machine id yazdır
 80048ac:	2001      	movs	r0, #1
 80048ae:	f7fc fd2b 	bl	8001308 <printCredentials>
		}
	}

	if (menuSayac == 33) {
 80048b2:	4b64      	ldr	r3, [pc, #400]	; (8004a44 <menu+0x35f0>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b21      	cmp	r3, #33	; 0x21
 80048b8:	d12e      	bne.n	8004918 <menu+0x34c4>
		calismaSayModu = 0;
 80048ba:	4b63      	ldr	r3, [pc, #396]	; (8004a48 <menu+0x35f4>)
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 80048c0:	2001      	movs	r0, #1
 80048c2:	f003 faa5 	bl	8007e10 <lcd_backlight>

		convertArrays(2);
 80048c6:	2002      	movs	r0, #2
 80048c8:	f7fb ff36 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 80048cc:	2032      	movs	r0, #50	; 0x32
 80048ce:	f003 ffa9 	bl	8008824 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 80048d2:	2002      	movs	r0, #2
 80048d4:	f7fc fd18 	bl	8001308 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048d8:	2102      	movs	r1, #2
 80048da:	4855      	ldr	r0, [pc, #340]	; (8004a30 <menu+0x35dc>)
 80048dc:	f004 fd72 	bl	80093c4 <HAL_GPIO_ReadPin>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d118      	bne.n	8004918 <menu+0x34c4>
 80048e6:	2104      	movs	r1, #4
 80048e8:	4851      	ldr	r0, [pc, #324]	; (8004a30 <menu+0x35dc>)
 80048ea:	f004 fd6b 	bl	80093c4 <HAL_GPIO_ReadPin>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d111      	bne.n	8004918 <menu+0x34c4>
 80048f4:	4b4f      	ldr	r3, [pc, #316]	; (8004a34 <menu+0x35e0>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	f083 0301 	eor.w	r3, r3, #1
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <menu+0x34c4>
			takeWifiSSID();
 8004902:	f002 fbe5 	bl	80070d0 <takeWifiSSID>

			convertArrays(2);
 8004906:	2002      	movs	r0, #2
 8004908:	f7fb ff16 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 800490c:	2032      	movs	r0, #50	; 0x32
 800490e:	f003 ff89 	bl	8008824 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8004912:	2002      	movs	r0, #2
 8004914:	f7fc fcf8 	bl	8001308 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8004918:	4b4a      	ldr	r3, [pc, #296]	; (8004a44 <menu+0x35f0>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b22      	cmp	r3, #34	; 0x22
 800491e:	d12e      	bne.n	800497e <menu+0x352a>
		calismaSayModu = 0;
 8004920:	4b49      	ldr	r3, [pc, #292]	; (8004a48 <menu+0x35f4>)
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8004926:	2001      	movs	r0, #1
 8004928:	f003 fa72 	bl	8007e10 <lcd_backlight>

		convertArrays(3);
 800492c:	2003      	movs	r0, #3
 800492e:	f7fb ff03 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 8004932:	2032      	movs	r0, #50	; 0x32
 8004934:	f003 ff76 	bl	8008824 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8004938:	2003      	movs	r0, #3
 800493a:	f7fc fce5 	bl	8001308 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800493e:	2102      	movs	r1, #2
 8004940:	483b      	ldr	r0, [pc, #236]	; (8004a30 <menu+0x35dc>)
 8004942:	f004 fd3f 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004946:	4603      	mov	r3, r0
 8004948:	2b01      	cmp	r3, #1
 800494a:	d118      	bne.n	800497e <menu+0x352a>
 800494c:	2104      	movs	r1, #4
 800494e:	4838      	ldr	r0, [pc, #224]	; (8004a30 <menu+0x35dc>)
 8004950:	f004 fd38 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004954:	4603      	mov	r3, r0
 8004956:	2b01      	cmp	r3, #1
 8004958:	d111      	bne.n	800497e <menu+0x352a>
 800495a:	4b36      	ldr	r3, [pc, #216]	; (8004a34 <menu+0x35e0>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	f083 0301 	eor.w	r3, r3, #1
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <menu+0x352a>
			takeWifiPass();
 8004968:	f002 fd2a 	bl	80073c0 <takeWifiPass>

			convertArrays(3);
 800496c:	2003      	movs	r0, #3
 800496e:	f7fb fee3 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 8004972:	2032      	movs	r0, #50	; 0x32
 8004974:	f003 ff56 	bl	8008824 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8004978:	2003      	movs	r0, #3
 800497a:	f7fc fcc5 	bl	8001308 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 800497e:	4b31      	ldr	r3, [pc, #196]	; (8004a44 <menu+0x35f0>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b23      	cmp	r3, #35	; 0x23
 8004984:	d14d      	bne.n	8004a22 <menu+0x35ce>
		if(dilSecim == 0) {
 8004986:	4b28      	ldr	r3, [pc, #160]	; (8004a28 <menu+0x35d4>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <menu+0x3550>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800498e:	4a2f      	ldr	r2, [pc, #188]	; (8004a4c <menu+0x35f8>)
 8004990:	2101      	movs	r1, #1
 8004992:	2001      	movs	r0, #1
 8004994:	f003 f9f0 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004998:	4a2d      	ldr	r2, [pc, #180]	; (8004a50 <menu+0x35fc>)
 800499a:	2101      	movs	r1, #1
 800499c:	2002      	movs	r0, #2
 800499e:	f003 f9eb 	bl	8007d78 <lcd_print>
 80049a2:	e00d      	b.n	80049c0 <menu+0x356c>
		} else if(dilSecim == 1) {
 80049a4:	4b20      	ldr	r3, [pc, #128]	; (8004a28 <menu+0x35d4>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d109      	bne.n	80049c0 <menu+0x356c>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80049ac:	4a29      	ldr	r2, [pc, #164]	; (8004a54 <menu+0x3600>)
 80049ae:	2101      	movs	r1, #1
 80049b0:	2001      	movs	r0, #1
 80049b2:	f003 f9e1 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80049b6:	4a28      	ldr	r2, [pc, #160]	; (8004a58 <menu+0x3604>)
 80049b8:	2101      	movs	r1, #1
 80049ba:	2002      	movs	r0, #2
 80049bc:	f003 f9dc 	bl	8007d78 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80049c0:	2108      	movs	r1, #8
 80049c2:	481b      	ldr	r0, [pc, #108]	; (8004a30 <menu+0x35dc>)
 80049c4:	f004 fcfe 	bl	80093c4 <HAL_GPIO_ReadPin>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d129      	bne.n	8004a22 <menu+0x35ce>
			menuGiris = 0;
 80049ce:	4b23      	ldr	r3, [pc, #140]	; (8004a5c <menu+0x3608>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80049d4:	bf00      	nop
 80049d6:	4822      	ldr	r0, [pc, #136]	; (8004a60 <menu+0x360c>)
 80049d8:	f005 fb1d 	bl	800a016 <HAL_I2C_GetError>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d0f9      	beq.n	80049d6 <menu+0x3582>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80049e2:	bf00      	nop
 80049e4:	481e      	ldr	r0, [pc, #120]	; (8004a60 <menu+0x360c>)
 80049e6:	f005 fb09 	bl	8009ffc <HAL_I2C_GetState>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d1f9      	bne.n	80049e4 <menu+0x3590>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80049f0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80049f4:	9302      	str	r3, [sp, #8]
 80049f6:	236e      	movs	r3, #110	; 0x6e
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <menu+0x35e8>)
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	236e      	movs	r3, #110	; 0x6e
 8004a00:	2200      	movs	r2, #0
 8004a02:	21a0      	movs	r1, #160	; 0xa0
 8004a04:	4816      	ldr	r0, [pc, #88]	; (8004a60 <menu+0x360c>)
 8004a06:	f004 ff97 	bl	8009938 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004a0a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004a0e:	f003 ff09 	bl	8008824 <HAL_Delay>

			lcd_clear();
 8004a12:	f003 f9dd 	bl	8007dd0 <lcd_clear>
			HAL_Delay(500);
 8004a16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a1a:	f003 ff03 	bl	8008824 <HAL_Delay>
			NVIC_SystemReset();
 8004a1e:	f7fc fd03 	bl	8001428 <__NVIC_SystemReset>
		}
	}
}
 8004a22:	bf00      	nop
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	2000020d 	.word	0x2000020d
 8004a2c:	0800d460 	.word	0x0800d460
 8004a30:	40010800 	.word	0x40010800
 8004a34:	2000021b 	.word	0x2000021b
 8004a38:	2000020b 	.word	0x2000020b
 8004a3c:	20000118 	.word	0x20000118
 8004a40:	20000218 	.word	0x20000218
 8004a44:	200001ec 	.word	0x200001ec
 8004a48:	2000020c 	.word	0x2000020c
 8004a4c:	0800dba8 	.word	0x0800dba8
 8004a50:	0800dbbc 	.word	0x0800dbbc
 8004a54:	0800dbd0 	.word	0x0800dbd0
 8004a58:	0800dbe4 	.word	0x0800dbe4
 8004a5c:	20000209 	.word	0x20000209
 8004a60:	20000374 	.word	0x20000374

08004a64 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d105      	bne.n	8004a80 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004a74:	4a22      	ldr	r2, [pc, #136]	; (8004b00 <lcdUpdate+0x9c>)
 8004a76:	2101      	movs	r1, #1
 8004a78:	2002      	movs	r0, #2
 8004a7a:	f003 f97d 	bl	8007d78 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004a7e:	e03b      	b.n	8004af8 <lcdUpdate+0x94>
	} else if(y==2) {
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d105      	bne.n	8004a92 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004a86:	4a1e      	ldr	r2, [pc, #120]	; (8004b00 <lcdUpdate+0x9c>)
 8004a88:	2102      	movs	r1, #2
 8004a8a:	2002      	movs	r0, #2
 8004a8c:	f003 f974 	bl	8007d78 <lcd_print>
}
 8004a90:	e032      	b.n	8004af8 <lcdUpdate+0x94>
	} else if(y==3) {
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d105      	bne.n	8004aa4 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004a98:	4a19      	ldr	r2, [pc, #100]	; (8004b00 <lcdUpdate+0x9c>)
 8004a9a:	2103      	movs	r1, #3
 8004a9c:	2002      	movs	r0, #2
 8004a9e:	f003 f96b 	bl	8007d78 <lcd_print>
}
 8004aa2:	e029      	b.n	8004af8 <lcdUpdate+0x94>
	} else if(y==4) {
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d105      	bne.n	8004ab6 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004aaa:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <lcdUpdate+0x9c>)
 8004aac:	2104      	movs	r1, #4
 8004aae:	2002      	movs	r0, #2
 8004ab0:	f003 f962 	bl	8007d78 <lcd_print>
}
 8004ab4:	e020      	b.n	8004af8 <lcdUpdate+0x94>
	} else if(y==5) {
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	2b05      	cmp	r3, #5
 8004aba:	d105      	bne.n	8004ac8 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004abc:	4a10      	ldr	r2, [pc, #64]	; (8004b00 <lcdUpdate+0x9c>)
 8004abe:	2105      	movs	r1, #5
 8004ac0:	2002      	movs	r0, #2
 8004ac2:	f003 f959 	bl	8007d78 <lcd_print>
}
 8004ac6:	e017      	b.n	8004af8 <lcdUpdate+0x94>
	} else if(y==6) {
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	2b06      	cmp	r3, #6
 8004acc:	d105      	bne.n	8004ada <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004ace:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <lcdUpdate+0x9c>)
 8004ad0:	2106      	movs	r1, #6
 8004ad2:	2002      	movs	r0, #2
 8004ad4:	f003 f950 	bl	8007d78 <lcd_print>
}
 8004ad8:	e00e      	b.n	8004af8 <lcdUpdate+0x94>
	} else if (y==7) {
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	2b07      	cmp	r3, #7
 8004ade:	d10b      	bne.n	8004af8 <lcdUpdate+0x94>
		lcd_clear();
 8004ae0:	f003 f976 	bl	8007dd0 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004ae4:	4a07      	ldr	r2, [pc, #28]	; (8004b04 <lcdUpdate+0xa0>)
 8004ae6:	2104      	movs	r1, #4
 8004ae8:	2001      	movs	r0, #1
 8004aea:	f003 f945 	bl	8007d78 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004aee:	4a06      	ldr	r2, [pc, #24]	; (8004b08 <lcdUpdate+0xa4>)
 8004af0:	2106      	movs	r1, #6
 8004af2:	2002      	movs	r0, #2
 8004af4:	f003 f940 	bl	8007d78 <lcd_print>
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	0800dbf8 	.word	0x0800dbf8
 8004b04:	0800dbfc 	.word	0x0800dbfc
 8004b08:	0800dc04 	.word	0x0800dc04

08004b0c <bekle>:

void bekle() {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
	timer1=millis;
 8004b10:	4b47      	ldr	r3, [pc, #284]	; (8004c30 <bekle+0x124>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a47      	ldr	r2, [pc, #284]	; (8004c34 <bekle+0x128>)
 8004b16:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b18:	e002      	b.n	8004b20 <bekle+0x14>
    	butonKontrol = 1;
 8004b1a:	4b47      	ldr	r3, [pc, #284]	; (8004c38 <bekle+0x12c>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b20:	2101      	movs	r1, #1
 8004b22:	4846      	ldr	r0, [pc, #280]	; (8004c3c <bekle+0x130>)
 8004b24:	f004 fc4e 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d109      	bne.n	8004b42 <bekle+0x36>
 8004b2e:	4b40      	ldr	r3, [pc, #256]	; (8004c30 <bekle+0x124>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b40      	ldr	r3, [pc, #256]	; (8004c34 <bekle+0x128>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d0ef      	beq.n	8004b1a <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b3a:	e002      	b.n	8004b42 <bekle+0x36>
    	butonKontrol = 1;
 8004b3c:	4b3e      	ldr	r3, [pc, #248]	; (8004c38 <bekle+0x12c>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b42:	2108      	movs	r1, #8
 8004b44:	483e      	ldr	r0, [pc, #248]	; (8004c40 <bekle+0x134>)
 8004b46:	f004 fc3d 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d109      	bne.n	8004b64 <bekle+0x58>
 8004b50:	4b37      	ldr	r3, [pc, #220]	; (8004c30 <bekle+0x124>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	4b37      	ldr	r3, [pc, #220]	; (8004c34 <bekle+0x128>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d0ef      	beq.n	8004b3c <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b5c:	e002      	b.n	8004b64 <bekle+0x58>
    	butonKontrol = 1;
 8004b5e:	4b36      	ldr	r3, [pc, #216]	; (8004c38 <bekle+0x12c>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b64:	2102      	movs	r1, #2
 8004b66:	4835      	ldr	r0, [pc, #212]	; (8004c3c <bekle+0x130>)
 8004b68:	f004 fc2c 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d109      	bne.n	8004b86 <bekle+0x7a>
 8004b72:	4b2f      	ldr	r3, [pc, #188]	; (8004c30 <bekle+0x124>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b2f      	ldr	r3, [pc, #188]	; (8004c34 <bekle+0x128>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d0ef      	beq.n	8004b5e <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b7e:	e002      	b.n	8004b86 <bekle+0x7a>
    	butonKontrol = 1;
 8004b80:	4b2d      	ldr	r3, [pc, #180]	; (8004c38 <bekle+0x12c>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b86:	2104      	movs	r1, #4
 8004b88:	482c      	ldr	r0, [pc, #176]	; (8004c3c <bekle+0x130>)
 8004b8a:	f004 fc1b 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d109      	bne.n	8004ba8 <bekle+0x9c>
 8004b94:	4b26      	ldr	r3, [pc, #152]	; (8004c30 <bekle+0x124>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <bekle+0x128>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d0ef      	beq.n	8004b80 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ba0:	e002      	b.n	8004ba8 <bekle+0x9c>
    	butonKontrol = 1;
 8004ba2:	4b25      	ldr	r3, [pc, #148]	; (8004c38 <bekle+0x12c>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ba8:	2108      	movs	r1, #8
 8004baa:	4824      	ldr	r0, [pc, #144]	; (8004c3c <bekle+0x130>)
 8004bac:	f004 fc0a 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d109      	bne.n	8004bca <bekle+0xbe>
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	; (8004c30 <bekle+0x124>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <bekle+0x128>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d0ef      	beq.n	8004ba2 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bc2:	e002      	b.n	8004bca <bekle+0xbe>
    	butonKontrol = 1;
 8004bc4:	4b1c      	ldr	r3, [pc, #112]	; (8004c38 <bekle+0x12c>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bca:	2180      	movs	r1, #128	; 0x80
 8004bcc:	481c      	ldr	r0, [pc, #112]	; (8004c40 <bekle+0x134>)
 8004bce:	f004 fbf9 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d109      	bne.n	8004bec <bekle+0xe0>
 8004bd8:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <bekle+0x124>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <bekle+0x128>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d0ef      	beq.n	8004bc4 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004be4:	e002      	b.n	8004bec <bekle+0xe0>
    	butonKontrol = 1;
 8004be6:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <bekle+0x12c>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bf0:	4813      	ldr	r0, [pc, #76]	; (8004c40 <bekle+0x134>)
 8004bf2:	f004 fbe7 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d109      	bne.n	8004c10 <bekle+0x104>
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <bekle+0x124>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <bekle+0x128>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d0ee      	beq.n	8004be6 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c08:	e002      	b.n	8004c10 <bekle+0x104>
    	butonKontrol = 1;
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <bekle+0x12c>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c14:	480a      	ldr	r0, [pc, #40]	; (8004c40 <bekle+0x134>)
 8004c16:	f004 fbd5 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d105      	bne.n	8004c2c <bekle+0x120>
 8004c20:	4b03      	ldr	r3, [pc, #12]	; (8004c30 <bekle+0x124>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <bekle+0x128>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d0ee      	beq.n	8004c0a <bekle+0xfe>
    }

}
 8004c2c:	bf00      	nop
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	200001c8 	.word	0x200001c8
 8004c34:	200001d0 	.word	0x200001d0
 8004c38:	2000021b 	.word	0x2000021b
 8004c3c:	40010800 	.word	0x40010800
 8004c40:	40011000 	.word	0x40011000

08004c44 <buttonCheck>:

uint8_t buttonCheck(void) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004c48:	2101      	movs	r1, #1
 8004c4a:	4815      	ldr	r0, [pc, #84]	; (8004ca0 <buttonCheck+0x5c>)
 8004c4c:	f004 fbba 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d01b      	beq.n	8004c8e <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8004c56:	2108      	movs	r1, #8
 8004c58:	4812      	ldr	r0, [pc, #72]	; (8004ca4 <buttonCheck+0x60>)
 8004c5a:	f004 fbb3 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d014      	beq.n	8004c8e <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004c64:	2102      	movs	r1, #2
 8004c66:	480e      	ldr	r0, [pc, #56]	; (8004ca0 <buttonCheck+0x5c>)
 8004c68:	f004 fbac 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d00d      	beq.n	8004c8e <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8004c72:	2104      	movs	r1, #4
 8004c74:	480a      	ldr	r0, [pc, #40]	; (8004ca0 <buttonCheck+0x5c>)
 8004c76:	f004 fba5 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d006      	beq.n	8004c8e <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8004c80:	2108      	movs	r1, #8
 8004c82:	4807      	ldr	r0, [pc, #28]	; (8004ca0 <buttonCheck+0x5c>)
 8004c84:	f004 fb9e 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d104      	bne.n	8004c98 <buttonCheck+0x54>
		backLightTimer = 0;
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <buttonCheck+0x64>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
		return 1;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <buttonCheck+0x56>
	}
	return 0;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40010800 	.word	0x40010800
 8004ca4:	40011000 	.word	0x40011000
 8004ca8:	200001e4 	.word	0x200001e4

08004cac <checkLCDBacklight>:

void checkLCDBacklight() {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004cb0:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <checkLCDBacklight+0x24>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <checkLCDBacklight+0x28>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b3b      	cmp	r3, #59	; 0x3b
 8004cbc:	d903      	bls.n	8004cc6 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f003 f8a6 	bl	8007e10 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004cc4:	e002      	b.n	8004ccc <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	f003 f8a2 	bl	8007e10 <lcd_backlight>
}
 8004ccc:	bf00      	nop
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	200001c8 	.word	0x200001c8
 8004cd4:	200001e4 	.word	0x200001e4

08004cd8 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004cdc:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <checkBasincSalteri+0x54>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d102      	bne.n	8004cea <checkBasincSalteri+0x12>
		basincVar=1;
 8004ce4:	4b12      	ldr	r3, [pc, #72]	; (8004d30 <checkBasincSalteri+0x58>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004cea:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <checkBasincSalteri+0x54>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d119      	bne.n	8004d26 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004cf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cf6:	480f      	ldr	r0, [pc, #60]	; (8004d34 <checkBasincSalteri+0x5c>)
 8004cf8:	f004 fb64 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004d02:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <checkBasincSalteri+0x60>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <checkBasincSalteri+0x64>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d90a      	bls.n	8004d26 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004d10:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <checkBasincSalteri+0x58>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004d16:	e006      	b.n	8004d26 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004d18:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <checkBasincSalteri+0x60>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a07      	ldr	r2, [pc, #28]	; (8004d3c <checkBasincSalteri+0x64>)
 8004d1e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004d20:	4b03      	ldr	r3, [pc, #12]	; (8004d30 <checkBasincSalteri+0x58>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]
}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	200001f3 	.word	0x200001f3
 8004d30:	200001ef 	.word	0x200001ef
 8004d34:	40011000 	.word	0x40011000
 8004d38:	200001c8 	.word	0x200001c8
 8004d3c:	200001e0 	.word	0x200001e0

08004d40 <checkBasGonder>:

void checkBasGonder() {
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004d44:	4b1b      	ldr	r3, [pc, #108]	; (8004db4 <checkBasGonder+0x74>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d10b      	bne.n	8004d64 <checkBasGonder+0x24>
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <checkBasGonder+0x78>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <checkBasGonder+0x24>
 8004d54:	4b19      	ldr	r3, [pc, #100]	; (8004dbc <checkBasGonder+0x7c>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004d5c:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <checkBasGonder+0x80>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e009      	b.n	8004d78 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004d64:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <checkBasGonder+0x78>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	f083 0301 	eor.w	r3, r3, #1
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004d72:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <checkBasGonder+0x80>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004d78:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <checkBasGonder+0x74>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d10b      	bne.n	8004d98 <checkBasGonder+0x58>
 8004d80:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <checkBasGonder+0x84>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <checkBasGonder+0x58>
 8004d88:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <checkBasGonder+0x7c>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d103      	bne.n	8004d98 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004d90:	4b0d      	ldr	r3, [pc, #52]	; (8004dc8 <checkBasGonder+0x88>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004d96:	e009      	b.n	8004dac <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004d98:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <checkBasGonder+0x84>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	f083 0301 	eor.w	r3, r3, #1
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004da6:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <checkBasGonder+0x88>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]
}
 8004dac:	bf00      	nop
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr
 8004db4:	200001ed 	.word	0x200001ed
 8004db8:	20000221 	.word	0x20000221
 8004dbc:	200001fb 	.word	0x200001fb
 8004dc0:	20000228 	.word	0x20000228
 8004dc4:	20000224 	.word	0x20000224
 8004dc8:	20000229 	.word	0x20000229

08004dcc <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004dd0:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <checkKapiSecimleri+0x98>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d102      	bne.n	8004dde <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004dd8:	4b23      	ldr	r3, [pc, #140]	; (8004e68 <checkKapiSecimleri+0x9c>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004dde:	4b21      	ldr	r3, [pc, #132]	; (8004e64 <checkKapiSecimleri+0x98>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d10e      	bne.n	8004e04 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004de6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dea:	4820      	ldr	r0, [pc, #128]	; (8004e6c <checkKapiSecimleri+0xa0>)
 8004dec:	f004 faea 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d103      	bne.n	8004dfe <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004df6:	4b1c      	ldr	r3, [pc, #112]	; (8004e68 <checkKapiSecimleri+0x9c>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
 8004dfc:	e002      	b.n	8004e04 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004dfe:	4b1a      	ldr	r3, [pc, #104]	; (8004e68 <checkKapiSecimleri+0x9c>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004e04:	4b17      	ldr	r3, [pc, #92]	; (8004e64 <checkKapiSecimleri+0x98>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d10e      	bne.n	8004e2a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e10:	4816      	ldr	r0, [pc, #88]	; (8004e6c <checkKapiSecimleri+0xa0>)
 8004e12:	f004 fad7 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d103      	bne.n	8004e24 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004e1c:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <checkKapiSecimleri+0x9c>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	e002      	b.n	8004e2a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004e24:	4b10      	ldr	r3, [pc, #64]	; (8004e68 <checkKapiSecimleri+0x9c>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004e2a:	4b0e      	ldr	r3, [pc, #56]	; (8004e64 <checkKapiSecimleri+0x98>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d116      	bne.n	8004e60 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004e32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e36:	480d      	ldr	r0, [pc, #52]	; (8004e6c <checkKapiSecimleri+0xa0>)
 8004e38:	f004 fac4 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10b      	bne.n	8004e5a <checkKapiSecimleri+0x8e>
 8004e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e46:	4809      	ldr	r0, [pc, #36]	; (8004e6c <checkKapiSecimleri+0xa0>)
 8004e48:	f004 fabc 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d103      	bne.n	8004e5a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <checkKapiSecimleri+0x9c>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004e58:	e002      	b.n	8004e60 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004e5a:	4b03      	ldr	r3, [pc, #12]	; (8004e68 <checkKapiSecimleri+0x9c>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
}
 8004e60:	bf00      	nop
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	200001f4 	.word	0x200001f4
 8004e68:	2000023f 	.word	0x2000023f
 8004e6c:	40010800 	.word	0x40010800

08004e70 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004e74:	4b62      	ldr	r3, [pc, #392]	; (8005000 <checkAktifCalisma+0x190>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f041 833e 	bne.w	80064fa <checkAktifCalisma+0x168a>
 8004e7e:	4b61      	ldr	r3, [pc, #388]	; (8005004 <checkAktifCalisma+0x194>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f041 8339 	bne.w	80064fa <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004e88:	4b5f      	ldr	r3, [pc, #380]	; (8005008 <checkAktifCalisma+0x198>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d11a      	bne.n	8004ec6 <checkAktifCalisma+0x56>
 8004e90:	4b5e      	ldr	r3, [pc, #376]	; (800500c <checkAktifCalisma+0x19c>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d116      	bne.n	8004ec6 <checkAktifCalisma+0x56>
 8004e98:	4b5d      	ldr	r3, [pc, #372]	; (8005010 <checkAktifCalisma+0x1a0>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <checkAktifCalisma+0x46>
 8004ea0:	4b5c      	ldr	r3, [pc, #368]	; (8005014 <checkAktifCalisma+0x1a4>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	f083 0301 	eor.w	r3, r3, #1
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <checkAktifCalisma+0x46>
 8004eae:	4b5a      	ldr	r3, [pc, #360]	; (8005018 <checkAktifCalisma+0x1a8>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d007      	beq.n	8004ec6 <checkAktifCalisma+0x56>
 8004eb6:	4b59      	ldr	r3, [pc, #356]	; (800501c <checkAktifCalisma+0x1ac>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d018      	beq.n	8004ef0 <checkAktifCalisma+0x80>
 8004ebe:	4b58      	ldr	r3, [pc, #352]	; (8005020 <checkAktifCalisma+0x1b0>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d114      	bne.n	8004ef0 <checkAktifCalisma+0x80>
 8004ec6:	4b57      	ldr	r3, [pc, #348]	; (8005024 <checkAktifCalisma+0x1b4>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d010      	beq.n	8004ef0 <checkAktifCalisma+0x80>
 8004ece:	4b56      	ldr	r3, [pc, #344]	; (8005028 <checkAktifCalisma+0x1b8>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00c      	beq.n	8004ef0 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004edc:	4853      	ldr	r0, [pc, #332]	; (800502c <checkAktifCalisma+0x1bc>)
 8004ede:	f004 fa88 	bl	80093f2 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004ee2:	4b53      	ldr	r3, [pc, #332]	; (8005030 <checkAktifCalisma+0x1c0>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004ee8:	4b52      	ldr	r3, [pc, #328]	; (8005034 <checkAktifCalisma+0x1c4>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	e008      	b.n	8004f02 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ef6:	484d      	ldr	r0, [pc, #308]	; (800502c <checkAktifCalisma+0x1bc>)
 8004ef8:	f004 fa7b 	bl	80093f2 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004efc:	4b4c      	ldr	r3, [pc, #304]	; (8005030 <checkAktifCalisma+0x1c0>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004f02:	4b40      	ldr	r3, [pc, #256]	; (8005004 <checkAktifCalisma+0x194>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d160      	bne.n	8004fcc <checkAktifCalisma+0x15c>
 8004f0a:	4b46      	ldr	r3, [pc, #280]	; (8005024 <checkAktifCalisma+0x1b4>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d05c      	beq.n	8004fcc <checkAktifCalisma+0x15c>
 8004f12:	4b45      	ldr	r3, [pc, #276]	; (8005028 <checkAktifCalisma+0x1b8>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d058      	beq.n	8004fcc <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f1e:	4843      	ldr	r0, [pc, #268]	; (800502c <checkAktifCalisma+0x1bc>)
 8004f20:	f004 fa50 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <checkAktifCalisma+0xc2>
 8004f2a:	4b43      	ldr	r3, [pc, #268]	; (8005038 <checkAktifCalisma+0x1c8>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d04c      	beq.n	8004fcc <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004f32:	2102      	movs	r1, #2
 8004f34:	4841      	ldr	r0, [pc, #260]	; (800503c <checkAktifCalisma+0x1cc>)
 8004f36:	f004 fa45 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d145      	bne.n	8004fcc <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004f40:	4b3f      	ldr	r3, [pc, #252]	; (8005040 <checkAktifCalisma+0x1d0>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d041      	beq.n	8004fcc <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004f48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f4c:	4837      	ldr	r0, [pc, #220]	; (800502c <checkAktifCalisma+0x1bc>)
 8004f4e:	f004 fa39 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d10e      	bne.n	8004f76 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f5c:	4833      	ldr	r0, [pc, #204]	; (800502c <checkAktifCalisma+0x1bc>)
 8004f5e:	f004 fa31 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d106      	bne.n	8004f76 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004f68:	2140      	movs	r1, #64	; 0x40
 8004f6a:	4834      	ldr	r0, [pc, #208]	; (800503c <checkAktifCalisma+0x1cc>)
 8004f6c:	f004 fa2a 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d003      	beq.n	8004f7e <checkAktifCalisma+0x10e>
 8004f76:	4b24      	ldr	r3, [pc, #144]	; (8005008 <checkAktifCalisma+0x198>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d026      	beq.n	8004fcc <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004f7e:	4b24      	ldr	r3, [pc, #144]	; (8005010 <checkAktifCalisma+0x1a0>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	f083 0301 	eor.w	r3, r3, #1
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01f      	beq.n	8004fcc <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004f8c:	4b1f      	ldr	r3, [pc, #124]	; (800500c <checkAktifCalisma+0x19c>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	f083 0301 	eor.w	r3, r3, #1
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d018      	beq.n	8004fcc <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004f9a:	4b20      	ldr	r3, [pc, #128]	; (800501c <checkAktifCalisma+0x1ac>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	f083 0301 	eor.w	r3, r3, #1
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d011      	beq.n	8004fcc <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004fa8:	4b26      	ldr	r3, [pc, #152]	; (8005044 <checkAktifCalisma+0x1d4>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	f083 0301 	eor.w	r3, r3, #1
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004fb6:	4b24      	ldr	r3, [pc, #144]	; (8005048 <checkAktifCalisma+0x1d8>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	f083 0301 	eor.w	r3, r3, #1
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004fc4:	4b10      	ldr	r3, [pc, #64]	; (8005008 <checkAktifCalisma+0x198>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	e002      	b.n	8004fd2 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <checkAktifCalisma+0x198>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	; (8005008 <checkAktifCalisma+0x198>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d03a      	beq.n	8005050 <checkAktifCalisma+0x1e0>
 8004fda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fde:	4817      	ldr	r0, [pc, #92]	; (800503c <checkAktifCalisma+0x1cc>)
 8004fe0:	f004 f9f0 	bl	80093c4 <HAL_GPIO_ReadPin>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d132      	bne.n	8005050 <checkAktifCalisma+0x1e0>
 8004fea:	4b18      	ldr	r3, [pc, #96]	; (800504c <checkAktifCalisma+0x1dc>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d02e      	beq.n	8005050 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ff8:	480c      	ldr	r0, [pc, #48]	; (800502c <checkAktifCalisma+0x1bc>)
 8004ffa:	f004 f9fa 	bl	80093f2 <HAL_GPIO_WritePin>
 8004ffe:	e02d      	b.n	800505c <checkAktifCalisma+0x1ec>
 8005000:	2000020a 	.word	0x2000020a
 8005004:	20000209 	.word	0x20000209
 8005008:	20000221 	.word	0x20000221
 800500c:	20000222 	.word	0x20000222
 8005010:	20000224 	.word	0x20000224
 8005014:	2000021c 	.word	0x2000021c
 8005018:	200001ff 	.word	0x200001ff
 800501c:	20000223 	.word	0x20000223
 8005020:	200001fe 	.word	0x200001fe
 8005024:	2000023e 	.word	0x2000023e
 8005028:	2000023f 	.word	0x2000023f
 800502c:	40010c00 	.word	0x40010c00
 8005030:	20000240 	.word	0x20000240
 8005034:	2000022b 	.word	0x2000022b
 8005038:	20000228 	.word	0x20000228
 800503c:	40011000 	.word	0x40011000
 8005040:	200001ef 	.word	0x200001ef
 8005044:	20000226 	.word	0x20000226
 8005048:	20000227 	.word	0x20000227
 800504c:	200001fa 	.word	0x200001fa
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005050:	2200      	movs	r2, #0
 8005052:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005056:	4860      	ldr	r0, [pc, #384]	; (80051d8 <checkAktifCalisma+0x368>)
 8005058:	f004 f9cb 	bl	80093f2 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800505c:	4b5f      	ldr	r3, [pc, #380]	; (80051dc <checkAktifCalisma+0x36c>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d013      	beq.n	800508c <checkAktifCalisma+0x21c>
 8005064:	4b5e      	ldr	r3, [pc, #376]	; (80051e0 <checkAktifCalisma+0x370>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d007      	beq.n	800507c <checkAktifCalisma+0x20c>
 800506c:	4b5c      	ldr	r3, [pc, #368]	; (80051e0 <checkAktifCalisma+0x370>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d003      	beq.n	800507c <checkAktifCalisma+0x20c>
 8005074:	4b5b      	ldr	r3, [pc, #364]	; (80051e4 <checkAktifCalisma+0x374>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d107      	bne.n	800508c <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800507c:	2201      	movs	r2, #1
 800507e:	2104      	movs	r1, #4
 8005080:	4855      	ldr	r0, [pc, #340]	; (80051d8 <checkAktifCalisma+0x368>)
 8005082:	f004 f9b6 	bl	80093f2 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8005086:	4b58      	ldr	r3, [pc, #352]	; (80051e8 <checkAktifCalisma+0x378>)
 8005088:	2201      	movs	r2, #1
 800508a:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800508c:	4b56      	ldr	r3, [pc, #344]	; (80051e8 <checkAktifCalisma+0x378>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d02f      	beq.n	80050f4 <checkAktifCalisma+0x284>
 8005094:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005098:	484f      	ldr	r0, [pc, #316]	; (80051d8 <checkAktifCalisma+0x368>)
 800509a:	f004 f993 	bl	80093c4 <HAL_GPIO_ReadPin>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d106      	bne.n	80050b2 <checkAktifCalisma+0x242>
 80050a4:	4b51      	ldr	r3, [pc, #324]	; (80051ec <checkAktifCalisma+0x37c>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	f083 0301 	eor.w	r3, r3, #1
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <checkAktifCalisma+0x250>
 80050b2:	2102      	movs	r1, #2
 80050b4:	484e      	ldr	r0, [pc, #312]	; (80051f0 <checkAktifCalisma+0x380>)
 80050b6:	f004 f985 	bl	80093c4 <HAL_GPIO_ReadPin>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d119      	bne.n	80050f4 <checkAktifCalisma+0x284>
 80050c0:	4b4c      	ldr	r3, [pc, #304]	; (80051f4 <checkAktifCalisma+0x384>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d015      	beq.n	80050f4 <checkAktifCalisma+0x284>
 80050c8:	4b4b      	ldr	r3, [pc, #300]	; (80051f8 <checkAktifCalisma+0x388>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d011      	beq.n	80050f4 <checkAktifCalisma+0x284>
 80050d0:	4b4a      	ldr	r3, [pc, #296]	; (80051fc <checkAktifCalisma+0x38c>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00d      	beq.n	80050f4 <checkAktifCalisma+0x284>
 80050d8:	4b49      	ldr	r3, [pc, #292]	; (8005200 <checkAktifCalisma+0x390>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	f083 0301 	eor.w	r3, r3, #1
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d006      	beq.n	80050f4 <checkAktifCalisma+0x284>
			timer2=millis;
 80050e6:	4b47      	ldr	r3, [pc, #284]	; (8005204 <checkAktifCalisma+0x394>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a47      	ldr	r2, [pc, #284]	; (8005208 <checkAktifCalisma+0x398>)
 80050ec:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80050ee:	4b44      	ldr	r3, [pc, #272]	; (8005200 <checkAktifCalisma+0x390>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80050f4:	4b43      	ldr	r3, [pc, #268]	; (8005204 <checkAktifCalisma+0x394>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	4b43      	ldr	r3, [pc, #268]	; (8005208 <checkAktifCalisma+0x398>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	4a43      	ldr	r2, [pc, #268]	; (800520c <checkAktifCalisma+0x39c>)
 8005100:	7812      	ldrb	r2, [r2, #0]
 8005102:	4293      	cmp	r3, r2
 8005104:	d303      	bcc.n	800510e <checkAktifCalisma+0x29e>
 8005106:	4b3e      	ldr	r3, [pc, #248]	; (8005200 <checkAktifCalisma+0x390>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d111      	bne.n	8005132 <checkAktifCalisma+0x2c2>
 800510e:	4b39      	ldr	r3, [pc, #228]	; (80051f4 <checkAktifCalisma+0x384>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	f083 0301 	eor.w	r3, r3, #1
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <checkAktifCalisma+0x2c2>
 800511c:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <checkAktifCalisma+0x388>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	f083 0301 	eor.w	r3, r3, #1
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d103      	bne.n	8005132 <checkAktifCalisma+0x2c2>
 800512a:	4b34      	ldr	r3, [pc, #208]	; (80051fc <checkAktifCalisma+0x38c>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005132:	2200      	movs	r2, #0
 8005134:	2104      	movs	r1, #4
 8005136:	4828      	ldr	r0, [pc, #160]	; (80051d8 <checkAktifCalisma+0x368>)
 8005138:	f004 f95b 	bl	80093f2 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 800513c:	4b2a      	ldr	r3, [pc, #168]	; (80051e8 <checkAktifCalisma+0x378>)
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005142:	4b2f      	ldr	r3, [pc, #188]	; (8005200 <checkAktifCalisma+0x390>)
 8005144:	2200      	movs	r2, #0
 8005146:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005148:	4b31      	ldr	r3, [pc, #196]	; (8005210 <checkAktifCalisma+0x3a0>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d102      	bne.n	8005156 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005150:	4b30      	ldr	r3, [pc, #192]	; (8005214 <checkAktifCalisma+0x3a4>)
 8005152:	2201      	movs	r2, #1
 8005154:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005156:	4b2e      	ldr	r3, [pc, #184]	; (8005210 <checkAktifCalisma+0x3a0>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d116      	bne.n	800518c <checkAktifCalisma+0x31c>
 800515e:	4b2e      	ldr	r3, [pc, #184]	; (8005218 <checkAktifCalisma+0x3a8>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d112      	bne.n	800518c <checkAktifCalisma+0x31c>
 8005166:	2101      	movs	r1, #1
 8005168:	4821      	ldr	r0, [pc, #132]	; (80051f0 <checkAktifCalisma+0x380>)
 800516a:	f004 f92b 	bl	80093c4 <HAL_GPIO_ReadPin>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10b      	bne.n	800518c <checkAktifCalisma+0x31c>
 8005174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005178:	4817      	ldr	r0, [pc, #92]	; (80051d8 <checkAktifCalisma+0x368>)
 800517a:	f004 f923 	bl	80093c4 <HAL_GPIO_ReadPin>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d103      	bne.n	800518c <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005184:	4b23      	ldr	r3, [pc, #140]	; (8005214 <checkAktifCalisma+0x3a4>)
 8005186:	2201      	movs	r2, #1
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	e011      	b.n	80051b0 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800518c:	4b20      	ldr	r3, [pc, #128]	; (8005210 <checkAktifCalisma+0x3a0>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d10d      	bne.n	80051b0 <checkAktifCalisma+0x340>
 8005194:	2101      	movs	r1, #1
 8005196:	4816      	ldr	r0, [pc, #88]	; (80051f0 <checkAktifCalisma+0x380>)
 8005198:	f004 f914 	bl	80093c4 <HAL_GPIO_ReadPin>
 800519c:	4603      	mov	r3, r0
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d106      	bne.n	80051b0 <checkAktifCalisma+0x340>
 80051a2:	4b1d      	ldr	r3, [pc, #116]	; (8005218 <checkAktifCalisma+0x3a8>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d102      	bne.n	80051b0 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80051aa:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <checkAktifCalisma+0x3a4>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80051b0:	4b17      	ldr	r3, [pc, #92]	; (8005210 <checkAktifCalisma+0x3a0>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d134      	bne.n	8005222 <checkAktifCalisma+0x3b2>
 80051b8:	4b17      	ldr	r3, [pc, #92]	; (8005218 <checkAktifCalisma+0x3a8>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d130      	bne.n	8005222 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80051c0:	2101      	movs	r1, #1
 80051c2:	480b      	ldr	r0, [pc, #44]	; (80051f0 <checkAktifCalisma+0x380>)
 80051c4:	f004 f8fe 	bl	80093c4 <HAL_GPIO_ReadPin>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d126      	bne.n	800521c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80051ce:	4b11      	ldr	r3, [pc, #68]	; (8005214 <checkAktifCalisma+0x3a4>)
 80051d0:	2201      	movs	r2, #1
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	e025      	b.n	8005222 <checkAktifCalisma+0x3b2>
 80051d6:	bf00      	nop
 80051d8:	40010c00 	.word	0x40010c00
 80051dc:	20000221 	.word	0x20000221
 80051e0:	200001fb 	.word	0x200001fb
 80051e4:	200001ff 	.word	0x200001ff
 80051e8:	20000225 	.word	0x20000225
 80051ec:	20000228 	.word	0x20000228
 80051f0:	40011000 	.word	0x40011000
 80051f4:	2000023e 	.word	0x2000023e
 80051f8:	2000023f 	.word	0x2000023f
 80051fc:	200001ef 	.word	0x200001ef
 8005200:	2000021d 	.word	0x2000021d
 8005204:	200001c8 	.word	0x200001c8
 8005208:	200001d4 	.word	0x200001d4
 800520c:	20000200 	.word	0x20000200
 8005210:	200001f0 	.word	0x200001f0
 8005214:	20000243 	.word	0x20000243
 8005218:	200001ed 	.word	0x200001ed
			} else {
				cerceveVar=0;
 800521c:	4b7f      	ldr	r3, [pc, #508]	; (800541c <checkAktifCalisma+0x5ac>)
 800521e:	2200      	movs	r2, #0
 8005220:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005222:	4b7f      	ldr	r3, [pc, #508]	; (8005420 <checkAktifCalisma+0x5b0>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d17c      	bne.n	8005324 <checkAktifCalisma+0x4b4>
 800522a:	4b7e      	ldr	r3, [pc, #504]	; (8005424 <checkAktifCalisma+0x5b4>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d078      	beq.n	8005324 <checkAktifCalisma+0x4b4>
 8005232:	4b7d      	ldr	r3, [pc, #500]	; (8005428 <checkAktifCalisma+0x5b8>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d074      	beq.n	8005324 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800523a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800523e:	487b      	ldr	r0, [pc, #492]	; (800542c <checkAktifCalisma+0x5bc>)
 8005240:	f004 f8c0 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <checkAktifCalisma+0x3e2>
 800524a:	4b79      	ldr	r3, [pc, #484]	; (8005430 <checkAktifCalisma+0x5c0>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d068      	beq.n	8005324 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005252:	4b72      	ldr	r3, [pc, #456]	; (800541c <checkAktifCalisma+0x5ac>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d064      	beq.n	8005324 <checkAktifCalisma+0x4b4>
 800525a:	4b76      	ldr	r3, [pc, #472]	; (8005434 <checkAktifCalisma+0x5c4>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	f083 0301 	eor.w	r3, r3, #1
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d05d      	beq.n	8005324 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005268:	2104      	movs	r1, #4
 800526a:	4873      	ldr	r0, [pc, #460]	; (8005438 <checkAktifCalisma+0x5c8>)
 800526c:	f004 f8aa 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <checkAktifCalisma+0x40e>
 8005276:	4b71      	ldr	r3, [pc, #452]	; (800543c <checkAktifCalisma+0x5cc>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d152      	bne.n	8005324 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800527e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005282:	486a      	ldr	r0, [pc, #424]	; (800542c <checkAktifCalisma+0x5bc>)
 8005284:	f004 f89e 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005288:	4603      	mov	r3, r0
 800528a:	2b01      	cmp	r3, #1
 800528c:	d10e      	bne.n	80052ac <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800528e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005292:	4866      	ldr	r0, [pc, #408]	; (800542c <checkAktifCalisma+0x5bc>)
 8005294:	f004 f896 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005298:	4603      	mov	r3, r0
 800529a:	2b01      	cmp	r3, #1
 800529c:	d106      	bne.n	80052ac <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800529e:	2140      	movs	r1, #64	; 0x40
 80052a0:	4865      	ldr	r0, [pc, #404]	; (8005438 <checkAktifCalisma+0x5c8>)
 80052a2:	f004 f88f 	bl	80093c4 <HAL_GPIO_ReadPin>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d003      	beq.n	80052b4 <checkAktifCalisma+0x444>
 80052ac:	4b64      	ldr	r3, [pc, #400]	; (8005440 <checkAktifCalisma+0x5d0>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d037      	beq.n	8005324 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80052b4:	4b63      	ldr	r3, [pc, #396]	; (8005444 <checkAktifCalisma+0x5d4>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	f083 0301 	eor.w	r3, r3, #1
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d030      	beq.n	8005324 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80052c2:	4b61      	ldr	r3, [pc, #388]	; (8005448 <checkAktifCalisma+0x5d8>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	f083 0301 	eor.w	r3, r3, #1
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d029      	beq.n	8005324 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80052d0:	4b5e      	ldr	r3, [pc, #376]	; (800544c <checkAktifCalisma+0x5dc>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	f083 0301 	eor.w	r3, r3, #1
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d022      	beq.n	8005324 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80052de:	4b5c      	ldr	r3, [pc, #368]	; (8005450 <checkAktifCalisma+0x5e0>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	f083 0301 	eor.w	r3, r3, #1
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01b      	beq.n	8005324 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80052ec:	4b59      	ldr	r3, [pc, #356]	; (8005454 <checkAktifCalisma+0x5e4>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	f083 0301 	eor.w	r3, r3, #1
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d014      	beq.n	8005324 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80052fa:	4b57      	ldr	r3, [pc, #348]	; (8005458 <checkAktifCalisma+0x5e8>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	f083 0301 	eor.w	r3, r3, #1
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00d      	beq.n	8005324 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005308:	2201      	movs	r2, #1
 800530a:	2102      	movs	r1, #2
 800530c:	4847      	ldr	r0, [pc, #284]	; (800542c <checkAktifCalisma+0x5bc>)
 800530e:	f004 f870 	bl	80093f2 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005312:	4b4b      	ldr	r3, [pc, #300]	; (8005440 <checkAktifCalisma+0x5d0>)
 8005314:	2201      	movs	r2, #1
 8005316:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005318:	4b50      	ldr	r3, [pc, #320]	; (800545c <checkAktifCalisma+0x5ec>)
 800531a:	2201      	movs	r2, #1
 800531c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800531e:	4b50      	ldr	r3, [pc, #320]	; (8005460 <checkAktifCalisma+0x5f0>)
 8005320:	2201      	movs	r2, #1
 8005322:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005324:	4b46      	ldr	r3, [pc, #280]	; (8005440 <checkAktifCalisma+0x5d0>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d033      	beq.n	8005394 <checkAktifCalisma+0x524>
 800532c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005330:	483e      	ldr	r0, [pc, #248]	; (800542c <checkAktifCalisma+0x5bc>)
 8005332:	f004 f847 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005336:	4603      	mov	r3, r0
 8005338:	2b01      	cmp	r3, #1
 800533a:	d106      	bne.n	800534a <checkAktifCalisma+0x4da>
 800533c:	4b3c      	ldr	r3, [pc, #240]	; (8005430 <checkAktifCalisma+0x5c0>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	f083 0301 	eor.w	r3, r3, #1
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <checkAktifCalisma+0x4f0>
 800534a:	2104      	movs	r1, #4
 800534c:	483a      	ldr	r0, [pc, #232]	; (8005438 <checkAktifCalisma+0x5c8>)
 800534e:	f004 f839 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005352:	4603      	mov	r3, r0
 8005354:	2b01      	cmp	r3, #1
 8005356:	d11d      	bne.n	8005394 <checkAktifCalisma+0x524>
 8005358:	4b38      	ldr	r3, [pc, #224]	; (800543c <checkAktifCalisma+0x5cc>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d019      	beq.n	8005394 <checkAktifCalisma+0x524>
 8005360:	4b30      	ldr	r3, [pc, #192]	; (8005424 <checkAktifCalisma+0x5b4>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d015      	beq.n	8005394 <checkAktifCalisma+0x524>
 8005368:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <checkAktifCalisma+0x5b8>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d011      	beq.n	8005394 <checkAktifCalisma+0x524>
 8005370:	4b2a      	ldr	r3, [pc, #168]	; (800541c <checkAktifCalisma+0x5ac>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00d      	beq.n	8005394 <checkAktifCalisma+0x524>
 8005378:	4b3a      	ldr	r3, [pc, #232]	; (8005464 <checkAktifCalisma+0x5f4>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	f083 0301 	eor.w	r3, r3, #1
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d006      	beq.n	8005394 <checkAktifCalisma+0x524>
			timer2=millis;
 8005386:	4b38      	ldr	r3, [pc, #224]	; (8005468 <checkAktifCalisma+0x5f8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a38      	ldr	r2, [pc, #224]	; (800546c <checkAktifCalisma+0x5fc>)
 800538c:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800538e:	4b35      	ldr	r3, [pc, #212]	; (8005464 <checkAktifCalisma+0x5f4>)
 8005390:	2201      	movs	r2, #1
 8005392:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005394:	4b34      	ldr	r3, [pc, #208]	; (8005468 <checkAktifCalisma+0x5f8>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4b34      	ldr	r3, [pc, #208]	; (800546c <checkAktifCalisma+0x5fc>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	4a34      	ldr	r2, [pc, #208]	; (8005470 <checkAktifCalisma+0x600>)
 80053a0:	7812      	ldrb	r2, [r2, #0]
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d303      	bcc.n	80053ae <checkAktifCalisma+0x53e>
 80053a6:	4b2f      	ldr	r3, [pc, #188]	; (8005464 <checkAktifCalisma+0x5f4>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d114      	bne.n	80053d8 <checkAktifCalisma+0x568>
 80053ae:	4b1d      	ldr	r3, [pc, #116]	; (8005424 <checkAktifCalisma+0x5b4>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	f083 0301 	eor.w	r3, r3, #1
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10d      	bne.n	80053d8 <checkAktifCalisma+0x568>
 80053bc:	4b1a      	ldr	r3, [pc, #104]	; (8005428 <checkAktifCalisma+0x5b8>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	f083 0301 	eor.w	r3, r3, #1
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <checkAktifCalisma+0x568>
 80053ca:	4b14      	ldr	r3, [pc, #80]	; (800541c <checkAktifCalisma+0x5ac>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	f083 0301 	eor.w	r3, r3, #1
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80053d8:	2200      	movs	r2, #0
 80053da:	2102      	movs	r1, #2
 80053dc:	4813      	ldr	r0, [pc, #76]	; (800542c <checkAktifCalisma+0x5bc>)
 80053de:	f004 f808 	bl	80093f2 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80053e2:	4b17      	ldr	r3, [pc, #92]	; (8005440 <checkAktifCalisma+0x5d0>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80053e8:	4b1e      	ldr	r3, [pc, #120]	; (8005464 <checkAktifCalisma+0x5f4>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80053ee:	4b14      	ldr	r3, [pc, #80]	; (8005440 <checkAktifCalisma+0x5d0>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d040      	beq.n	8005478 <checkAktifCalisma+0x608>
 80053f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053fa:	480f      	ldr	r0, [pc, #60]	; (8005438 <checkAktifCalisma+0x5c8>)
 80053fc:	f003 ffe2 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d138      	bne.n	8005478 <checkAktifCalisma+0x608>
 8005406:	4b1b      	ldr	r3, [pc, #108]	; (8005474 <checkAktifCalisma+0x604>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d034      	beq.n	8005478 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800540e:	2201      	movs	r2, #1
 8005410:	2101      	movs	r1, #1
 8005412:	4806      	ldr	r0, [pc, #24]	; (800542c <checkAktifCalisma+0x5bc>)
 8005414:	f003 ffed 	bl	80093f2 <HAL_GPIO_WritePin>
 8005418:	e033      	b.n	8005482 <checkAktifCalisma+0x612>
 800541a:	bf00      	nop
 800541c:	20000243 	.word	0x20000243
 8005420:	20000209 	.word	0x20000209
 8005424:	2000023e 	.word	0x2000023e
 8005428:	2000023f 	.word	0x2000023f
 800542c:	40010c00 	.word	0x40010c00
 8005430:	20000229 	.word	0x20000229
 8005434:	2000023d 	.word	0x2000023d
 8005438:	40011000 	.word	0x40011000
 800543c:	200001f2 	.word	0x200001f2
 8005440:	20000224 	.word	0x20000224
 8005444:	20000221 	.word	0x20000221
 8005448:	20000225 	.word	0x20000225
 800544c:	20000222 	.word	0x20000222
 8005450:	20000223 	.word	0x20000223
 8005454:	20000226 	.word	0x20000226
 8005458:	20000227 	.word	0x20000227
 800545c:	2000022c 	.word	0x2000022c
 8005460:	2000024d 	.word	0x2000024d
 8005464:	2000021c 	.word	0x2000021c
 8005468:	200001c8 	.word	0x200001c8
 800546c:	200001d4 	.word	0x200001d4
 8005470:	20000201 	.word	0x20000201
 8005474:	200001f1 	.word	0x200001f1
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005478:	2200      	movs	r2, #0
 800547a:	2101      	movs	r1, #1
 800547c:	4836      	ldr	r0, [pc, #216]	; (8005558 <checkAktifCalisma+0x6e8>)
 800547e:	f003 ffb8 	bl	80093f2 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005482:	4b36      	ldr	r3, [pc, #216]	; (800555c <checkAktifCalisma+0x6ec>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	f040 8080 	bne.w	800558c <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800548c:	4b34      	ldr	r3, [pc, #208]	; (8005560 <checkAktifCalisma+0x6f0>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d003      	beq.n	800549c <checkAktifCalisma+0x62c>
 8005494:	4b32      	ldr	r3, [pc, #200]	; (8005560 <checkAktifCalisma+0x6f0>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d177      	bne.n	800558c <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 800549c:	4b31      	ldr	r3, [pc, #196]	; (8005564 <checkAktifCalisma+0x6f4>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d073      	beq.n	800558c <checkAktifCalisma+0x71c>
 80054a4:	4b30      	ldr	r3, [pc, #192]	; (8005568 <checkAktifCalisma+0x6f8>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d06f      	beq.n	800558c <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80054ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054b0:	4829      	ldr	r0, [pc, #164]	; (8005558 <checkAktifCalisma+0x6e8>)
 80054b2:	f003 ff87 	bl	80093c4 <HAL_GPIO_ReadPin>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d167      	bne.n	800558c <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80054bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054c0:	482a      	ldr	r0, [pc, #168]	; (800556c <checkAktifCalisma+0x6fc>)
 80054c2:	f003 ff7f 	bl	80093c4 <HAL_GPIO_ReadPin>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <checkAktifCalisma+0x664>
 80054cc:	4b28      	ldr	r3, [pc, #160]	; (8005570 <checkAktifCalisma+0x700>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d15b      	bne.n	800558c <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80054d4:	2140      	movs	r1, #64	; 0x40
 80054d6:	4825      	ldr	r0, [pc, #148]	; (800556c <checkAktifCalisma+0x6fc>)
 80054d8:	f003 ff74 	bl	80093c4 <HAL_GPIO_ReadPin>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d10f      	bne.n	8005502 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80054e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054e6:	481c      	ldr	r0, [pc, #112]	; (8005558 <checkAktifCalisma+0x6e8>)
 80054e8:	f003 ff6c 	bl	80093c4 <HAL_GPIO_ReadPin>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d107      	bne.n	8005502 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80054f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054f6:	4818      	ldr	r0, [pc, #96]	; (8005558 <checkAktifCalisma+0x6e8>)
 80054f8:	f003 ff64 	bl	80093c4 <HAL_GPIO_ReadPin>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d003      	beq.n	800550a <checkAktifCalisma+0x69a>
 8005502:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <checkAktifCalisma+0x704>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d040      	beq.n	800558c <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800550a:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <checkAktifCalisma+0x708>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	f083 0301 	eor.w	r3, r3, #1
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d039      	beq.n	800558c <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005518:	4b18      	ldr	r3, [pc, #96]	; (800557c <checkAktifCalisma+0x70c>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	f083 0301 	eor.w	r3, r3, #1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d032      	beq.n	800558c <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005526:	4b16      	ldr	r3, [pc, #88]	; (8005580 <checkAktifCalisma+0x710>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	f083 0301 	eor.w	r3, r3, #1
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d02b      	beq.n	800558c <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005534:	4b13      	ldr	r3, [pc, #76]	; (8005584 <checkAktifCalisma+0x714>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	f083 0301 	eor.w	r3, r3, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d024      	beq.n	800558c <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <checkAktifCalisma+0x718>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	f083 0301 	eor.w	r3, r3, #1
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01d      	beq.n	800558c <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005550:	4b08      	ldr	r3, [pc, #32]	; (8005574 <checkAktifCalisma+0x704>)
 8005552:	2201      	movs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	e01c      	b.n	8005592 <checkAktifCalisma+0x722>
 8005558:	40010c00 	.word	0x40010c00
 800555c:	20000209 	.word	0x20000209
 8005560:	200001fb 	.word	0x200001fb
 8005564:	2000023e 	.word	0x2000023e
 8005568:	2000023f 	.word	0x2000023f
 800556c:	40011000 	.word	0x40011000
 8005570:	200001fc 	.word	0x200001fc
 8005574:	20000222 	.word	0x20000222
 8005578:	20000221 	.word	0x20000221
 800557c:	20000225 	.word	0x20000225
 8005580:	20000224 	.word	0x20000224
 8005584:	20000223 	.word	0x20000223
 8005588:	20000227 	.word	0x20000227
		} else {
			devmotoryukaricalisiyor=0;
 800558c:	4b64      	ldr	r3, [pc, #400]	; (8005720 <checkAktifCalisma+0x8b0>)
 800558e:	2200      	movs	r2, #0
 8005590:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005592:	4b63      	ldr	r3, [pc, #396]	; (8005720 <checkAktifCalisma+0x8b0>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800559a:	2201      	movs	r2, #1
 800559c:	2120      	movs	r1, #32
 800559e:	4861      	ldr	r0, [pc, #388]	; (8005724 <checkAktifCalisma+0x8b4>)
 80055a0:	f003 ff27 	bl	80093f2 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80055a4:	4b60      	ldr	r3, [pc, #384]	; (8005728 <checkAktifCalisma+0x8b8>)
 80055a6:	2201      	movs	r2, #1
 80055a8:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80055aa:	4b5f      	ldr	r3, [pc, #380]	; (8005728 <checkAktifCalisma+0x8b8>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d025      	beq.n	80055fe <checkAktifCalisma+0x78e>
 80055b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055b6:	485d      	ldr	r0, [pc, #372]	; (800572c <checkAktifCalisma+0x8bc>)
 80055b8:	f003 ff04 	bl	80093c4 <HAL_GPIO_ReadPin>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d007      	beq.n	80055d2 <checkAktifCalisma+0x762>
 80055c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055c6:	4857      	ldr	r0, [pc, #348]	; (8005724 <checkAktifCalisma+0x8b4>)
 80055c8:	f003 fefc 	bl	80093c4 <HAL_GPIO_ReadPin>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d115      	bne.n	80055fe <checkAktifCalisma+0x78e>
 80055d2:	4b57      	ldr	r3, [pc, #348]	; (8005730 <checkAktifCalisma+0x8c0>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d011      	beq.n	80055fe <checkAktifCalisma+0x78e>
 80055da:	4b56      	ldr	r3, [pc, #344]	; (8005734 <checkAktifCalisma+0x8c4>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00d      	beq.n	80055fe <checkAktifCalisma+0x78e>
 80055e2:	4b55      	ldr	r3, [pc, #340]	; (8005738 <checkAktifCalisma+0x8c8>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	f083 0301 	eor.w	r3, r3, #1
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d006      	beq.n	80055fe <checkAktifCalisma+0x78e>
			timer2=millis;
 80055f0:	4b52      	ldr	r3, [pc, #328]	; (800573c <checkAktifCalisma+0x8cc>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a52      	ldr	r2, [pc, #328]	; (8005740 <checkAktifCalisma+0x8d0>)
 80055f6:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80055f8:	4b4f      	ldr	r3, [pc, #316]	; (8005738 <checkAktifCalisma+0x8c8>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80055fe:	4b4f      	ldr	r3, [pc, #316]	; (800573c <checkAktifCalisma+0x8cc>)
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4b4f      	ldr	r3, [pc, #316]	; (8005740 <checkAktifCalisma+0x8d0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	4a4e      	ldr	r2, [pc, #312]	; (8005744 <checkAktifCalisma+0x8d4>)
 800560a:	7812      	ldrb	r2, [r2, #0]
 800560c:	4293      	cmp	r3, r2
 800560e:	d303      	bcc.n	8005618 <checkAktifCalisma+0x7a8>
 8005610:	4b49      	ldr	r3, [pc, #292]	; (8005738 <checkAktifCalisma+0x8c8>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10d      	bne.n	8005634 <checkAktifCalisma+0x7c4>
 8005618:	4b45      	ldr	r3, [pc, #276]	; (8005730 <checkAktifCalisma+0x8c0>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	f083 0301 	eor.w	r3, r3, #1
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <checkAktifCalisma+0x7c4>
 8005626:	4b43      	ldr	r3, [pc, #268]	; (8005734 <checkAktifCalisma+0x8c4>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	f083 0301 	eor.w	r3, r3, #1
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005634:	2200      	movs	r2, #0
 8005636:	2120      	movs	r1, #32
 8005638:	483a      	ldr	r0, [pc, #232]	; (8005724 <checkAktifCalisma+0x8b4>)
 800563a:	f003 feda 	bl	80093f2 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800563e:	4b3a      	ldr	r3, [pc, #232]	; (8005728 <checkAktifCalisma+0x8b8>)
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005644:	4b3c      	ldr	r3, [pc, #240]	; (8005738 <checkAktifCalisma+0x8c8>)
 8005646:	2200      	movs	r2, #0
 8005648:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800564a:	4b3f      	ldr	r3, [pc, #252]	; (8005748 <checkAktifCalisma+0x8d8>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 8088 	bne.w	8005764 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005654:	4b3d      	ldr	r3, [pc, #244]	; (800574c <checkAktifCalisma+0x8dc>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d003      	beq.n	8005664 <checkAktifCalisma+0x7f4>
 800565c:	4b3b      	ldr	r3, [pc, #236]	; (800574c <checkAktifCalisma+0x8dc>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d17f      	bne.n	8005764 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005664:	4b32      	ldr	r3, [pc, #200]	; (8005730 <checkAktifCalisma+0x8c0>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d07b      	beq.n	8005764 <checkAktifCalisma+0x8f4>
 800566c:	4b31      	ldr	r3, [pc, #196]	; (8005734 <checkAktifCalisma+0x8c4>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d077      	beq.n	8005764 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005674:	2140      	movs	r1, #64	; 0x40
 8005676:	482b      	ldr	r0, [pc, #172]	; (8005724 <checkAktifCalisma+0x8b4>)
 8005678:	f003 fea4 	bl	80093c4 <HAL_GPIO_ReadPin>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d170      	bne.n	8005764 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005686:	4827      	ldr	r0, [pc, #156]	; (8005724 <checkAktifCalisma+0x8b4>)
 8005688:	f003 fe9c 	bl	80093c4 <HAL_GPIO_ReadPin>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <checkAktifCalisma+0x82a>
 8005692:	4b2f      	ldr	r3, [pc, #188]	; (8005750 <checkAktifCalisma+0x8e0>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d164      	bne.n	8005764 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800569a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800569e:	4823      	ldr	r0, [pc, #140]	; (800572c <checkAktifCalisma+0x8bc>)
 80056a0:	f003 fe90 	bl	80093c4 <HAL_GPIO_ReadPin>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d10f      	bne.n	80056ca <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80056aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056ae:	481f      	ldr	r0, [pc, #124]	; (800572c <checkAktifCalisma+0x8bc>)
 80056b0:	f003 fe88 	bl	80093c4 <HAL_GPIO_ReadPin>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d107      	bne.n	80056ca <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80056ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056be:	481b      	ldr	r0, [pc, #108]	; (800572c <checkAktifCalisma+0x8bc>)
 80056c0:	f003 fe80 	bl	80093c4 <HAL_GPIO_ReadPin>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d003      	beq.n	80056d2 <checkAktifCalisma+0x862>
 80056ca:	4b22      	ldr	r3, [pc, #136]	; (8005754 <checkAktifCalisma+0x8e4>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d048      	beq.n	8005764 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80056d2:	4b21      	ldr	r3, [pc, #132]	; (8005758 <checkAktifCalisma+0x8e8>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	f083 0301 	eor.w	r3, r3, #1
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d041      	beq.n	8005764 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80056e0:	4b1e      	ldr	r3, [pc, #120]	; (800575c <checkAktifCalisma+0x8ec>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	f083 0301 	eor.w	r3, r3, #1
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d03a      	beq.n	8005764 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80056ee:	4b1c      	ldr	r3, [pc, #112]	; (8005760 <checkAktifCalisma+0x8f0>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	f083 0301 	eor.w	r3, r3, #1
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d033      	beq.n	8005764 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80056fc:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <checkAktifCalisma+0x8b8>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	f083 0301 	eor.w	r3, r3, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d02c      	beq.n	8005764 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <checkAktifCalisma+0x8b0>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	f083 0301 	eor.w	r3, r3, #1
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d025      	beq.n	8005764 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005718:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <checkAktifCalisma+0x8e4>)
 800571a:	2201      	movs	r2, #1
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	e024      	b.n	800576a <checkAktifCalisma+0x8fa>
 8005720:	20000222 	.word	0x20000222
 8005724:	40011000 	.word	0x40011000
 8005728:	20000226 	.word	0x20000226
 800572c:	40010c00 	.word	0x40010c00
 8005730:	2000023e 	.word	0x2000023e
 8005734:	2000023f 	.word	0x2000023f
 8005738:	2000021e 	.word	0x2000021e
 800573c:	200001c8 	.word	0x200001c8
 8005740:	200001d4 	.word	0x200001d4
 8005744:	20000202 	.word	0x20000202
 8005748:	20000209 	.word	0x20000209
 800574c:	200001fb 	.word	0x200001fb
 8005750:	200001fd 	.word	0x200001fd
 8005754:	20000223 	.word	0x20000223
 8005758:	20000221 	.word	0x20000221
 800575c:	20000225 	.word	0x20000225
 8005760:	20000224 	.word	0x20000224
		} else {
			devmotorasagicalisiyor=0;
 8005764:	4b96      	ldr	r3, [pc, #600]	; (80059c0 <checkAktifCalisma+0xb50>)
 8005766:	2200      	movs	r2, #0
 8005768:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800576a:	4b95      	ldr	r3, [pc, #596]	; (80059c0 <checkAktifCalisma+0xb50>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d007      	beq.n	8005782 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005772:	2201      	movs	r2, #1
 8005774:	2110      	movs	r1, #16
 8005776:	4893      	ldr	r0, [pc, #588]	; (80059c4 <checkAktifCalisma+0xb54>)
 8005778:	f003 fe3b 	bl	80093f2 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 800577c:	4b92      	ldr	r3, [pc, #584]	; (80059c8 <checkAktifCalisma+0xb58>)
 800577e:	2201      	movs	r2, #1
 8005780:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005782:	4b91      	ldr	r3, [pc, #580]	; (80059c8 <checkAktifCalisma+0xb58>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d024      	beq.n	80057d4 <checkAktifCalisma+0x964>
 800578a:	2140      	movs	r1, #64	; 0x40
 800578c:	488d      	ldr	r0, [pc, #564]	; (80059c4 <checkAktifCalisma+0xb54>)
 800578e:	f003 fe19 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005792:	4603      	mov	r3, r0
 8005794:	2b01      	cmp	r3, #1
 8005796:	d007      	beq.n	80057a8 <checkAktifCalisma+0x938>
 8005798:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800579c:	4889      	ldr	r0, [pc, #548]	; (80059c4 <checkAktifCalisma+0xb54>)
 800579e:	f003 fe11 	bl	80093c4 <HAL_GPIO_ReadPin>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d115      	bne.n	80057d4 <checkAktifCalisma+0x964>
 80057a8:	4b88      	ldr	r3, [pc, #544]	; (80059cc <checkAktifCalisma+0xb5c>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d011      	beq.n	80057d4 <checkAktifCalisma+0x964>
 80057b0:	4b87      	ldr	r3, [pc, #540]	; (80059d0 <checkAktifCalisma+0xb60>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00d      	beq.n	80057d4 <checkAktifCalisma+0x964>
 80057b8:	4b86      	ldr	r3, [pc, #536]	; (80059d4 <checkAktifCalisma+0xb64>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f083 0301 	eor.w	r3, r3, #1
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d006      	beq.n	80057d4 <checkAktifCalisma+0x964>
			timer2=millis;
 80057c6:	4b84      	ldr	r3, [pc, #528]	; (80059d8 <checkAktifCalisma+0xb68>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a84      	ldr	r2, [pc, #528]	; (80059dc <checkAktifCalisma+0xb6c>)
 80057cc:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80057ce:	4b81      	ldr	r3, [pc, #516]	; (80059d4 <checkAktifCalisma+0xb64>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80057d4:	4b80      	ldr	r3, [pc, #512]	; (80059d8 <checkAktifCalisma+0xb68>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	4b80      	ldr	r3, [pc, #512]	; (80059dc <checkAktifCalisma+0xb6c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	4a80      	ldr	r2, [pc, #512]	; (80059e0 <checkAktifCalisma+0xb70>)
 80057e0:	7812      	ldrb	r2, [r2, #0]
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d303      	bcc.n	80057ee <checkAktifCalisma+0x97e>
 80057e6:	4b7b      	ldr	r3, [pc, #492]	; (80059d4 <checkAktifCalisma+0xb64>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10d      	bne.n	800580a <checkAktifCalisma+0x99a>
 80057ee:	4b77      	ldr	r3, [pc, #476]	; (80059cc <checkAktifCalisma+0xb5c>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	f083 0301 	eor.w	r3, r3, #1
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d106      	bne.n	800580a <checkAktifCalisma+0x99a>
 80057fc:	4b74      	ldr	r3, [pc, #464]	; (80059d0 <checkAktifCalisma+0xb60>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	f083 0301 	eor.w	r3, r3, #1
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800580a:	2200      	movs	r2, #0
 800580c:	2110      	movs	r1, #16
 800580e:	486d      	ldr	r0, [pc, #436]	; (80059c4 <checkAktifCalisma+0xb54>)
 8005810:	f003 fdef 	bl	80093f2 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005814:	4b6c      	ldr	r3, [pc, #432]	; (80059c8 <checkAktifCalisma+0xb58>)
 8005816:	2200      	movs	r2, #0
 8005818:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800581a:	4b6e      	ldr	r3, [pc, #440]	; (80059d4 <checkAktifCalisma+0xb64>)
 800581c:	2200      	movs	r2, #0
 800581e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005820:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005824:	486f      	ldr	r0, [pc, #444]	; (80059e4 <checkAktifCalisma+0xb74>)
 8005826:	f003 fdcd 	bl	80093c4 <HAL_GPIO_ReadPin>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d120      	bne.n	8005872 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005830:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005834:	486b      	ldr	r0, [pc, #428]	; (80059e4 <checkAktifCalisma+0xb74>)
 8005836:	f003 fdc5 	bl	80093c4 <HAL_GPIO_ReadPin>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d118      	bne.n	8005872 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005840:	2104      	movs	r1, #4
 8005842:	4868      	ldr	r0, [pc, #416]	; (80059e4 <checkAktifCalisma+0xb74>)
 8005844:	f003 fdbe 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d111      	bne.n	8005872 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800584e:	2102      	movs	r1, #2
 8005850:	4864      	ldr	r0, [pc, #400]	; (80059e4 <checkAktifCalisma+0xb74>)
 8005852:	f003 fdb7 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 800585c:	2101      	movs	r1, #1
 800585e:	4861      	ldr	r0, [pc, #388]	; (80059e4 <checkAktifCalisma+0xb74>)
 8005860:	f003 fdb0 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d103      	bne.n	8005872 <checkAktifCalisma+0xa02>
			makineStop=1;
 800586a:	4b5f      	ldr	r3, [pc, #380]	; (80059e8 <checkAktifCalisma+0xb78>)
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	e002      	b.n	8005878 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8005872:	4b5d      	ldr	r3, [pc, #372]	; (80059e8 <checkAktifCalisma+0xb78>)
 8005874:	2200      	movs	r2, #0
 8005876:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005878:	4b5c      	ldr	r3, [pc, #368]	; (80059ec <checkAktifCalisma+0xb7c>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d144      	bne.n	800590a <checkAktifCalisma+0xa9a>
 8005880:	4b5b      	ldr	r3, [pc, #364]	; (80059f0 <checkAktifCalisma+0xb80>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d003      	beq.n	8005890 <checkAktifCalisma+0xa20>
 8005888:	4b59      	ldr	r3, [pc, #356]	; (80059f0 <checkAktifCalisma+0xb80>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b03      	cmp	r3, #3
 800588e:	d13c      	bne.n	800590a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005890:	2180      	movs	r1, #128	; 0x80
 8005892:	484c      	ldr	r0, [pc, #304]	; (80059c4 <checkAktifCalisma+0xb54>)
 8005894:	f003 fd96 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d103      	bne.n	80058a6 <checkAktifCalisma+0xa36>
 800589e:	4b55      	ldr	r3, [pc, #340]	; (80059f4 <checkAktifCalisma+0xb84>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <checkAktifCalisma+0xa4e>
 80058a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058aa:	484e      	ldr	r0, [pc, #312]	; (80059e4 <checkAktifCalisma+0xb74>)
 80058ac:	f003 fd8a 	bl	80093c4 <HAL_GPIO_ReadPin>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d129      	bne.n	800590a <checkAktifCalisma+0xa9a>
 80058b6:	4b4f      	ldr	r3, [pc, #316]	; (80059f4 <checkAktifCalisma+0xb84>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d125      	bne.n	800590a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80058be:	2104      	movs	r1, #4
 80058c0:	4840      	ldr	r0, [pc, #256]	; (80059c4 <checkAktifCalisma+0xb54>)
 80058c2:	f003 fd7f 	bl	80093c4 <HAL_GPIO_ReadPin>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d003      	beq.n	80058d4 <checkAktifCalisma+0xa64>
 80058cc:	4b4a      	ldr	r3, [pc, #296]	; (80059f8 <checkAktifCalisma+0xb88>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d11a      	bne.n	800590a <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058d4:	2102      	movs	r1, #2
 80058d6:	483b      	ldr	r0, [pc, #236]	; (80059c4 <checkAktifCalisma+0xb54>)
 80058d8:	f003 fd74 	bl	80093c4 <HAL_GPIO_ReadPin>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d113      	bne.n	800590a <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80058e2:	4b46      	ldr	r3, [pc, #280]	; (80059fc <checkAktifCalisma+0xb8c>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	f083 0301 	eor.w	r3, r3, #1
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00c      	beq.n	800590a <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80058f0:	4b3d      	ldr	r3, [pc, #244]	; (80059e8 <checkAktifCalisma+0xb78>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80058f8:	4b41      	ldr	r3, [pc, #260]	; (8005a00 <checkAktifCalisma+0xb90>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80058fe:	4b36      	ldr	r3, [pc, #216]	; (80059d8 <checkAktifCalisma+0xb68>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a40      	ldr	r2, [pc, #256]	; (8005a04 <checkAktifCalisma+0xb94>)
 8005904:	6013      	str	r3, [r2, #0]
			bekle();
 8005906:	f7ff f901 	bl	8004b0c <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800590a:	4b33      	ldr	r3, [pc, #204]	; (80059d8 <checkAktifCalisma+0xb68>)
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b3d      	ldr	r3, [pc, #244]	; (8005a04 <checkAktifCalisma+0xb94>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	4a3c      	ldr	r2, [pc, #240]	; (8005a08 <checkAktifCalisma+0xb98>)
 8005916:	7812      	ldrb	r2, [r2, #0]
 8005918:	4293      	cmp	r3, r2
 800591a:	d211      	bcs.n	8005940 <checkAktifCalisma+0xad0>
 800591c:	2104      	movs	r1, #4
 800591e:	4829      	ldr	r0, [pc, #164]	; (80059c4 <checkAktifCalisma+0xb54>)
 8005920:	f003 fd50 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <checkAktifCalisma+0xad0>
 800592a:	4b33      	ldr	r3, [pc, #204]	; (80059f8 <checkAktifCalisma+0xb88>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d006      	beq.n	8005940 <checkAktifCalisma+0xad0>
 8005932:	4b2d      	ldr	r3, [pc, #180]	; (80059e8 <checkAktifCalisma+0xb78>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	f083 0301 	eor.w	r3, r3, #1
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005940:	4b2f      	ldr	r3, [pc, #188]	; (8005a00 <checkAktifCalisma+0xb90>)
 8005942:	2200      	movs	r2, #0
 8005944:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005946:	4b29      	ldr	r3, [pc, #164]	; (80059ec <checkAktifCalisma+0xb7c>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d160      	bne.n	8005a10 <checkAktifCalisma+0xba0>
 800594e:	4b28      	ldr	r3, [pc, #160]	; (80059f0 <checkAktifCalisma+0xb80>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d003      	beq.n	800595e <checkAktifCalisma+0xaee>
 8005956:	4b26      	ldr	r3, [pc, #152]	; (80059f0 <checkAktifCalisma+0xb80>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b03      	cmp	r3, #3
 800595c:	d158      	bne.n	8005a10 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800595e:	2104      	movs	r1, #4
 8005960:	4818      	ldr	r0, [pc, #96]	; (80059c4 <checkAktifCalisma+0xb54>)
 8005962:	f003 fd2f 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005966:	4603      	mov	r3, r0
 8005968:	2b01      	cmp	r3, #1
 800596a:	d003      	beq.n	8005974 <checkAktifCalisma+0xb04>
 800596c:	4b22      	ldr	r3, [pc, #136]	; (80059f8 <checkAktifCalisma+0xb88>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d14d      	bne.n	8005a10 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005974:	2102      	movs	r1, #2
 8005976:	4813      	ldr	r0, [pc, #76]	; (80059c4 <checkAktifCalisma+0xb54>)
 8005978:	f003 fd24 	bl	80093c4 <HAL_GPIO_ReadPin>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d146      	bne.n	8005a10 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005982:	2180      	movs	r1, #128	; 0x80
 8005984:	480f      	ldr	r0, [pc, #60]	; (80059c4 <checkAktifCalisma+0xb54>)
 8005986:	f003 fd1d 	bl	80093c4 <HAL_GPIO_ReadPin>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d103      	bne.n	8005998 <checkAktifCalisma+0xb28>
 8005990:	4b18      	ldr	r3, [pc, #96]	; (80059f4 <checkAktifCalisma+0xb84>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00b      	beq.n	80059b0 <checkAktifCalisma+0xb40>
 8005998:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800599c:	4811      	ldr	r0, [pc, #68]	; (80059e4 <checkAktifCalisma+0xb74>)
 800599e:	f003 fd11 	bl	80093c4 <HAL_GPIO_ReadPin>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d133      	bne.n	8005a10 <checkAktifCalisma+0xba0>
 80059a8:	4b12      	ldr	r3, [pc, #72]	; (80059f4 <checkAktifCalisma+0xb84>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d12f      	bne.n	8005a10 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 80059b0:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <checkAktifCalisma+0xb78>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d02b      	beq.n	8005a10 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 80059b8:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <checkAktifCalisma+0xb9c>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	e02a      	b.n	8005a16 <checkAktifCalisma+0xba6>
 80059c0:	20000223 	.word	0x20000223
 80059c4:	40011000 	.word	0x40011000
 80059c8:	20000227 	.word	0x20000227
 80059cc:	2000023e 	.word	0x2000023e
 80059d0:	2000023f 	.word	0x2000023f
 80059d4:	2000021f 	.word	0x2000021f
 80059d8:	200001c8 	.word	0x200001c8
 80059dc:	200001d4 	.word	0x200001d4
 80059e0:	20000202 	.word	0x20000202
 80059e4:	40010c00 	.word	0x40010c00
 80059e8:	2000022e 	.word	0x2000022e
 80059ec:	200001f5 	.word	0x200001f5
 80059f0:	200001f4 	.word	0x200001f4
 80059f4:	200001f8 	.word	0x200001f8
 80059f8:	200001f2 	.word	0x200001f2
 80059fc:	2000021b 	.word	0x2000021b
 8005a00:	2000022f 	.word	0x2000022f
 8005a04:	200001cc 	.word	0x200001cc
 8005a08:	20000205 	.word	0x20000205
 8005a0c:	20000230 	.word	0x20000230
		} else {
			kapi1butonkontrol=0;
 8005a10:	4b8b      	ldr	r3, [pc, #556]	; (8005c40 <checkAktifCalisma+0xdd0>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a16:	4b8b      	ldr	r3, [pc, #556]	; (8005c44 <checkAktifCalisma+0xdd4>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d121      	bne.n	8005a62 <checkAktifCalisma+0xbf2>
 8005a1e:	4b8a      	ldr	r3, [pc, #552]	; (8005c48 <checkAktifCalisma+0xdd8>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d003      	beq.n	8005a2e <checkAktifCalisma+0xbbe>
 8005a26:	4b88      	ldr	r3, [pc, #544]	; (8005c48 <checkAktifCalisma+0xdd8>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d119      	bne.n	8005a62 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a2e:	2104      	movs	r1, #4
 8005a30:	4886      	ldr	r0, [pc, #536]	; (8005c4c <checkAktifCalisma+0xddc>)
 8005a32:	f003 fcc7 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d003      	beq.n	8005a44 <checkAktifCalisma+0xbd4>
 8005a3c:	4b84      	ldr	r3, [pc, #528]	; (8005c50 <checkAktifCalisma+0xde0>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10e      	bne.n	8005a62 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a44:	2102      	movs	r1, #2
 8005a46:	4881      	ldr	r0, [pc, #516]	; (8005c4c <checkAktifCalisma+0xddc>)
 8005a48:	f003 fcbc 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d107      	bne.n	8005a62 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005a52:	4b80      	ldr	r3, [pc, #512]	; (8005c54 <checkAktifCalisma+0xde4>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005a5a:	4b7f      	ldr	r3, [pc, #508]	; (8005c58 <checkAktifCalisma+0xde8>)
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	e002      	b.n	8005a68 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005a62:	4b7d      	ldr	r3, [pc, #500]	; (8005c58 <checkAktifCalisma+0xde8>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005a68:	4b75      	ldr	r3, [pc, #468]	; (8005c40 <checkAktifCalisma+0xdd0>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d107      	bne.n	8005a80 <checkAktifCalisma+0xc10>
 8005a70:	4b79      	ldr	r3, [pc, #484]	; (8005c58 <checkAktifCalisma+0xde8>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d103      	bne.n	8005a80 <checkAktifCalisma+0xc10>
 8005a78:	4b78      	ldr	r3, [pc, #480]	; (8005c5c <checkAktifCalisma+0xdec>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005a80:	2201      	movs	r2, #1
 8005a82:	2180      	movs	r1, #128	; 0x80
 8005a84:	4876      	ldr	r0, [pc, #472]	; (8005c60 <checkAktifCalisma+0xdf0>)
 8005a86:	f003 fcb4 	bl	80093f2 <HAL_GPIO_WritePin>
 8005a8a:	e004      	b.n	8005a96 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2180      	movs	r1, #128	; 0x80
 8005a90:	4873      	ldr	r0, [pc, #460]	; (8005c60 <checkAktifCalisma+0xdf0>)
 8005a92:	f003 fcae 	bl	80093f2 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a96:	4b73      	ldr	r3, [pc, #460]	; (8005c64 <checkAktifCalisma+0xdf4>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d141      	bne.n	8005b22 <checkAktifCalisma+0xcb2>
 8005a9e:	4b6a      	ldr	r3, [pc, #424]	; (8005c48 <checkAktifCalisma+0xdd8>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d003      	beq.n	8005aae <checkAktifCalisma+0xc3e>
 8005aa6:	4b68      	ldr	r3, [pc, #416]	; (8005c48 <checkAktifCalisma+0xdd8>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d139      	bne.n	8005b22 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ab2:	4866      	ldr	r0, [pc, #408]	; (8005c4c <checkAktifCalisma+0xddc>)
 8005ab4:	f003 fc86 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d103      	bne.n	8005ac6 <checkAktifCalisma+0xc56>
 8005abe:	4b6a      	ldr	r3, [pc, #424]	; (8005c68 <checkAktifCalisma+0xdf8>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00b      	beq.n	8005ade <checkAktifCalisma+0xc6e>
 8005ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005aca:	4868      	ldr	r0, [pc, #416]	; (8005c6c <checkAktifCalisma+0xdfc>)
 8005acc:	f003 fc7a 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d125      	bne.n	8005b22 <checkAktifCalisma+0xcb2>
 8005ad6:	4b64      	ldr	r3, [pc, #400]	; (8005c68 <checkAktifCalisma+0xdf8>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d121      	bne.n	8005b22 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ade:	2102      	movs	r1, #2
 8005ae0:	485a      	ldr	r0, [pc, #360]	; (8005c4c <checkAktifCalisma+0xddc>)
 8005ae2:	f003 fc6f 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d11a      	bne.n	8005b22 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005aec:	2104      	movs	r1, #4
 8005aee:	4857      	ldr	r0, [pc, #348]	; (8005c4c <checkAktifCalisma+0xddc>)
 8005af0:	f003 fc68 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d113      	bne.n	8005b22 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005afa:	4b56      	ldr	r3, [pc, #344]	; (8005c54 <checkAktifCalisma+0xde4>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00f      	beq.n	8005b22 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005b02:	4b5b      	ldr	r3, [pc, #364]	; (8005c70 <checkAktifCalisma+0xe00>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	f083 0301 	eor.w	r3, r3, #1
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d008      	beq.n	8005b22 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005b10:	4b58      	ldr	r3, [pc, #352]	; (8005c74 <checkAktifCalisma+0xe04>)
 8005b12:	2201      	movs	r2, #1
 8005b14:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005b16:	4b58      	ldr	r3, [pc, #352]	; (8005c78 <checkAktifCalisma+0xe08>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a58      	ldr	r2, [pc, #352]	; (8005c7c <checkAktifCalisma+0xe0c>)
 8005b1c:	6013      	str	r3, [r2, #0]
			bekle();
 8005b1e:	f7fe fff5 	bl	8004b0c <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005b22:	4b55      	ldr	r3, [pc, #340]	; (8005c78 <checkAktifCalisma+0xe08>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b55      	ldr	r3, [pc, #340]	; (8005c7c <checkAktifCalisma+0xe0c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	4a54      	ldr	r2, [pc, #336]	; (8005c80 <checkAktifCalisma+0xe10>)
 8005b2e:	7812      	ldrb	r2, [r2, #0]
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d20d      	bcs.n	8005b50 <checkAktifCalisma+0xce0>
 8005b34:	2102      	movs	r1, #2
 8005b36:	4845      	ldr	r0, [pc, #276]	; (8005c4c <checkAktifCalisma+0xddc>)
 8005b38:	f003 fc44 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d006      	beq.n	8005b50 <checkAktifCalisma+0xce0>
 8005b42:	4b44      	ldr	r3, [pc, #272]	; (8005c54 <checkAktifCalisma+0xde4>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	f083 0301 	eor.w	r3, r3, #1
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005b50:	4b48      	ldr	r3, [pc, #288]	; (8005c74 <checkAktifCalisma+0xe04>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b56:	4b43      	ldr	r3, [pc, #268]	; (8005c64 <checkAktifCalisma+0xdf4>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d135      	bne.n	8005bca <checkAktifCalisma+0xd5a>
 8005b5e:	4b3a      	ldr	r3, [pc, #232]	; (8005c48 <checkAktifCalisma+0xdd8>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d003      	beq.n	8005b6e <checkAktifCalisma+0xcfe>
 8005b66:	4b38      	ldr	r3, [pc, #224]	; (8005c48 <checkAktifCalisma+0xdd8>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d12d      	bne.n	8005bca <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b72:	4836      	ldr	r0, [pc, #216]	; (8005c4c <checkAktifCalisma+0xddc>)
 8005b74:	f003 fc26 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d103      	bne.n	8005b86 <checkAktifCalisma+0xd16>
 8005b7e:	4b3a      	ldr	r3, [pc, #232]	; (8005c68 <checkAktifCalisma+0xdf8>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00b      	beq.n	8005b9e <checkAktifCalisma+0xd2e>
 8005b86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b8a:	4838      	ldr	r0, [pc, #224]	; (8005c6c <checkAktifCalisma+0xdfc>)
 8005b8c:	f003 fc1a 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d119      	bne.n	8005bca <checkAktifCalisma+0xd5a>
 8005b96:	4b34      	ldr	r3, [pc, #208]	; (8005c68 <checkAktifCalisma+0xdf8>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d115      	bne.n	8005bca <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b9e:	2102      	movs	r1, #2
 8005ba0:	482a      	ldr	r0, [pc, #168]	; (8005c4c <checkAktifCalisma+0xddc>)
 8005ba2:	f003 fc0f 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d10e      	bne.n	8005bca <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005bac:	2104      	movs	r1, #4
 8005bae:	4827      	ldr	r0, [pc, #156]	; (8005c4c <checkAktifCalisma+0xddc>)
 8005bb0:	f003 fc08 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d107      	bne.n	8005bca <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005bba:	4b26      	ldr	r3, [pc, #152]	; (8005c54 <checkAktifCalisma+0xde4>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005bc2:	4b30      	ldr	r3, [pc, #192]	; (8005c84 <checkAktifCalisma+0xe14>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	e002      	b.n	8005bd0 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005bca:	4b2e      	ldr	r3, [pc, #184]	; (8005c84 <checkAktifCalisma+0xe14>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005bd0:	4b24      	ldr	r3, [pc, #144]	; (8005c64 <checkAktifCalisma+0xdf4>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d11d      	bne.n	8005c14 <checkAktifCalisma+0xda4>
 8005bd8:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <checkAktifCalisma+0xdd8>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d003      	beq.n	8005be8 <checkAktifCalisma+0xd78>
 8005be0:	4b19      	ldr	r3, [pc, #100]	; (8005c48 <checkAktifCalisma+0xdd8>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d115      	bne.n	8005c14 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005be8:	2102      	movs	r1, #2
 8005bea:	4818      	ldr	r0, [pc, #96]	; (8005c4c <checkAktifCalisma+0xddc>)
 8005bec:	f003 fbea 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d10e      	bne.n	8005c14 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005bf6:	2104      	movs	r1, #4
 8005bf8:	4814      	ldr	r0, [pc, #80]	; (8005c4c <checkAktifCalisma+0xddc>)
 8005bfa:	f003 fbe3 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d107      	bne.n	8005c14 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005c04:	4b13      	ldr	r3, [pc, #76]	; (8005c54 <checkAktifCalisma+0xde4>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005c0c:	4b1e      	ldr	r3, [pc, #120]	; (8005c88 <checkAktifCalisma+0xe18>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e002      	b.n	8005c1a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005c14:	4b1c      	ldr	r3, [pc, #112]	; (8005c88 <checkAktifCalisma+0xe18>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005c1a:	4b1a      	ldr	r3, [pc, #104]	; (8005c84 <checkAktifCalisma+0xe14>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d107      	bne.n	8005c32 <checkAktifCalisma+0xdc2>
 8005c22:	4b19      	ldr	r3, [pc, #100]	; (8005c88 <checkAktifCalisma+0xe18>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d103      	bne.n	8005c32 <checkAktifCalisma+0xdc2>
 8005c2a:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <checkAktifCalisma+0xe04>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d02c      	beq.n	8005c8c <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005c32:	2201      	movs	r2, #1
 8005c34:	2140      	movs	r1, #64	; 0x40
 8005c36:	480a      	ldr	r0, [pc, #40]	; (8005c60 <checkAktifCalisma+0xdf0>)
 8005c38:	f003 fbdb 	bl	80093f2 <HAL_GPIO_WritePin>
 8005c3c:	e02b      	b.n	8005c96 <checkAktifCalisma+0xe26>
 8005c3e:	bf00      	nop
 8005c40:	20000230 	.word	0x20000230
 8005c44:	200001f5 	.word	0x200001f5
 8005c48:	200001f4 	.word	0x200001f4
 8005c4c:	40011000 	.word	0x40011000
 8005c50:	200001f2 	.word	0x200001f2
 8005c54:	2000022e 	.word	0x2000022e
 8005c58:	20000231 	.word	0x20000231
 8005c5c:	2000022f 	.word	0x2000022f
 8005c60:	40010800 	.word	0x40010800
 8005c64:	200001f6 	.word	0x200001f6
 8005c68:	200001f8 	.word	0x200001f8
 8005c6c:	40010c00 	.word	0x40010c00
 8005c70:	2000021b 	.word	0x2000021b
 8005c74:	20000232 	.word	0x20000232
 8005c78:	200001c8 	.word	0x200001c8
 8005c7c:	200001cc 	.word	0x200001cc
 8005c80:	20000206 	.word	0x20000206
 8005c84:	20000233 	.word	0x20000233
 8005c88:	20000234 	.word	0x20000234
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2140      	movs	r1, #64	; 0x40
 8005c90:	488d      	ldr	r0, [pc, #564]	; (8005ec8 <checkAktifCalisma+0x1058>)
 8005c92:	f003 fbae 	bl	80093f2 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005c96:	4b8d      	ldr	r3, [pc, #564]	; (8005ecc <checkAktifCalisma+0x105c>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <checkAktifCalisma+0xe36>
 8005c9e:	4b8b      	ldr	r3, [pc, #556]	; (8005ecc <checkAktifCalisma+0x105c>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d115      	bne.n	8005cd2 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005ca6:	2104      	movs	r1, #4
 8005ca8:	4889      	ldr	r0, [pc, #548]	; (8005ed0 <checkAktifCalisma+0x1060>)
 8005caa:	f003 fb8b 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d003      	beq.n	8005cbc <checkAktifCalisma+0xe4c>
 8005cb4:	4b87      	ldr	r3, [pc, #540]	; (8005ed4 <checkAktifCalisma+0x1064>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005cbc:	2102      	movs	r1, #2
 8005cbe:	4884      	ldr	r0, [pc, #528]	; (8005ed0 <checkAktifCalisma+0x1060>)
 8005cc0:	f003 fb80 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d103      	bne.n	8005cd2 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005cca:	4b83      	ldr	r3, [pc, #524]	; (8005ed8 <checkAktifCalisma+0x1068>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	e002      	b.n	8005cd8 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005cd2:	4b81      	ldr	r3, [pc, #516]	; (8005ed8 <checkAktifCalisma+0x1068>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005cd8:	4b7c      	ldr	r3, [pc, #496]	; (8005ecc <checkAktifCalisma+0x105c>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d003      	beq.n	8005ce8 <checkAktifCalisma+0xe78>
 8005ce0:	4b7a      	ldr	r3, [pc, #488]	; (8005ecc <checkAktifCalisma+0x105c>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d111      	bne.n	8005d0c <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ce8:	2102      	movs	r1, #2
 8005cea:	4879      	ldr	r0, [pc, #484]	; (8005ed0 <checkAktifCalisma+0x1060>)
 8005cec:	f003 fb6a 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d10a      	bne.n	8005d0c <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005cf6:	2104      	movs	r1, #4
 8005cf8:	4875      	ldr	r0, [pc, #468]	; (8005ed0 <checkAktifCalisma+0x1060>)
 8005cfa:	f003 fb63 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d103      	bne.n	8005d0c <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005d04:	4b75      	ldr	r3, [pc, #468]	; (8005edc <checkAktifCalisma+0x106c>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	e002      	b.n	8005d12 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005d0c:	4b73      	ldr	r3, [pc, #460]	; (8005edc <checkAktifCalisma+0x106c>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005d12:	4b71      	ldr	r3, [pc, #452]	; (8005ed8 <checkAktifCalisma+0x1068>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00f      	beq.n	8005d3a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005d1a:	4b71      	ldr	r3, [pc, #452]	; (8005ee0 <checkAktifCalisma+0x1070>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d10b      	bne.n	8005d3a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005d22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d26:	486f      	ldr	r0, [pc, #444]	; (8005ee4 <checkAktifCalisma+0x1074>)
 8005d28:	f003 fb4c 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d103      	bne.n	8005d3a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005d32:	4b6d      	ldr	r3, [pc, #436]	; (8005ee8 <checkAktifCalisma+0x1078>)
 8005d34:	2201      	movs	r2, #1
 8005d36:	701a      	strb	r2, [r3, #0]
 8005d38:	e002      	b.n	8005d40 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005d3a:	4b6b      	ldr	r3, [pc, #428]	; (8005ee8 <checkAktifCalisma+0x1078>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005d40:	4b66      	ldr	r3, [pc, #408]	; (8005edc <checkAktifCalisma+0x106c>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00f      	beq.n	8005d68 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005d48:	4b65      	ldr	r3, [pc, #404]	; (8005ee0 <checkAktifCalisma+0x1070>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10b      	bne.n	8005d68 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005d50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d54:	4863      	ldr	r0, [pc, #396]	; (8005ee4 <checkAktifCalisma+0x1074>)
 8005d56:	f003 fb35 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d103      	bne.n	8005d68 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005d60:	4b62      	ldr	r3, [pc, #392]	; (8005eec <checkAktifCalisma+0x107c>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	e002      	b.n	8005d6e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005d68:	4b60      	ldr	r3, [pc, #384]	; (8005eec <checkAktifCalisma+0x107c>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d6e:	4b60      	ldr	r3, [pc, #384]	; (8005ef0 <checkAktifCalisma+0x1080>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d137      	bne.n	8005de6 <checkAktifCalisma+0xf76>
 8005d76:	4b5f      	ldr	r3, [pc, #380]	; (8005ef4 <checkAktifCalisma+0x1084>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d003      	beq.n	8005d86 <checkAktifCalisma+0xf16>
 8005d7e:	4b5d      	ldr	r3, [pc, #372]	; (8005ef4 <checkAktifCalisma+0x1084>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d12f      	bne.n	8005de6 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d86:	4b54      	ldr	r3, [pc, #336]	; (8005ed8 <checkAktifCalisma+0x1068>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d103      	bne.n	8005d96 <checkAktifCalisma+0xf26>
 8005d8e:	4b53      	ldr	r3, [pc, #332]	; (8005edc <checkAktifCalisma+0x106c>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d027      	beq.n	8005de6 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d9a:	484d      	ldr	r0, [pc, #308]	; (8005ed0 <checkAktifCalisma+0x1060>)
 8005d9c:	f003 fb12 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d103      	bne.n	8005dae <checkAktifCalisma+0xf3e>
 8005da6:	4b4e      	ldr	r3, [pc, #312]	; (8005ee0 <checkAktifCalisma+0x1070>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005dae:	4b4e      	ldr	r3, [pc, #312]	; (8005ee8 <checkAktifCalisma+0x1078>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <checkAktifCalisma+0xf4e>
 8005db6:	4b4d      	ldr	r3, [pc, #308]	; (8005eec <checkAktifCalisma+0x107c>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d013      	beq.n	8005de6 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005dbe:	4b4e      	ldr	r3, [pc, #312]	; (8005ef8 <checkAktifCalisma+0x1088>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00f      	beq.n	8005de6 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005dc6:	4b4d      	ldr	r3, [pc, #308]	; (8005efc <checkAktifCalisma+0x108c>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	f083 0301 	eor.w	r3, r3, #1
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d008      	beq.n	8005de6 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005dd4:	4b4a      	ldr	r3, [pc, #296]	; (8005f00 <checkAktifCalisma+0x1090>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005dda:	4b4a      	ldr	r3, [pc, #296]	; (8005f04 <checkAktifCalisma+0x1094>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a4a      	ldr	r2, [pc, #296]	; (8005f08 <checkAktifCalisma+0x1098>)
 8005de0:	6013      	str	r3, [r2, #0]
			bekle();
 8005de2:	f7fe fe93 	bl	8004b0c <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005de6:	4b47      	ldr	r3, [pc, #284]	; (8005f04 <checkAktifCalisma+0x1094>)
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	4b47      	ldr	r3, [pc, #284]	; (8005f08 <checkAktifCalisma+0x1098>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	4a46      	ldr	r2, [pc, #280]	; (8005f0c <checkAktifCalisma+0x109c>)
 8005df2:	7812      	ldrb	r2, [r2, #0]
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d214      	bcs.n	8005e22 <checkAktifCalisma+0xfb2>
 8005df8:	4b37      	ldr	r3, [pc, #220]	; (8005ed8 <checkAktifCalisma+0x1068>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	f083 0301 	eor.w	r3, r3, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d006      	beq.n	8005e14 <checkAktifCalisma+0xfa4>
 8005e06:	4b35      	ldr	r3, [pc, #212]	; (8005edc <checkAktifCalisma+0x106c>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	f083 0301 	eor.w	r3, r3, #1
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d106      	bne.n	8005e22 <checkAktifCalisma+0xfb2>
 8005e14:	4b38      	ldr	r3, [pc, #224]	; (8005ef8 <checkAktifCalisma+0x1088>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	f083 0301 	eor.w	r3, r3, #1
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005e22:	4b37      	ldr	r3, [pc, #220]	; (8005f00 <checkAktifCalisma+0x1090>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e28:	4b31      	ldr	r3, [pc, #196]	; (8005ef0 <checkAktifCalisma+0x1080>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d12b      	bne.n	8005e88 <checkAktifCalisma+0x1018>
 8005e30:	4b30      	ldr	r3, [pc, #192]	; (8005ef4 <checkAktifCalisma+0x1084>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d003      	beq.n	8005e40 <checkAktifCalisma+0xfd0>
 8005e38:	4b2e      	ldr	r3, [pc, #184]	; (8005ef4 <checkAktifCalisma+0x1084>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d123      	bne.n	8005e88 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e40:	4b25      	ldr	r3, [pc, #148]	; (8005ed8 <checkAktifCalisma+0x1068>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d103      	bne.n	8005e50 <checkAktifCalisma+0xfe0>
 8005e48:	4b24      	ldr	r3, [pc, #144]	; (8005edc <checkAktifCalisma+0x106c>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01b      	beq.n	8005e88 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005e50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e54:	481e      	ldr	r0, [pc, #120]	; (8005ed0 <checkAktifCalisma+0x1060>)
 8005e56:	f003 fab5 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d103      	bne.n	8005e68 <checkAktifCalisma+0xff8>
 8005e60:	4b1f      	ldr	r3, [pc, #124]	; (8005ee0 <checkAktifCalisma+0x1070>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d007      	beq.n	8005e78 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005e68:	4b1f      	ldr	r3, [pc, #124]	; (8005ee8 <checkAktifCalisma+0x1078>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d103      	bne.n	8005e78 <checkAktifCalisma+0x1008>
 8005e70:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <checkAktifCalisma+0x107c>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005e78:	4b1f      	ldr	r3, [pc, #124]	; (8005ef8 <checkAktifCalisma+0x1088>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005e80:	4b23      	ldr	r3, [pc, #140]	; (8005f10 <checkAktifCalisma+0x10a0>)
 8005e82:	2201      	movs	r2, #1
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	e002      	b.n	8005e8e <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005e88:	4b21      	ldr	r3, [pc, #132]	; (8005f10 <checkAktifCalisma+0x10a0>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e8e:	4b18      	ldr	r3, [pc, #96]	; (8005ef0 <checkAktifCalisma+0x1080>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d140      	bne.n	8005f18 <checkAktifCalisma+0x10a8>
 8005e96:	4b17      	ldr	r3, [pc, #92]	; (8005ef4 <checkAktifCalisma+0x1084>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d003      	beq.n	8005ea6 <checkAktifCalisma+0x1036>
 8005e9e:	4b15      	ldr	r3, [pc, #84]	; (8005ef4 <checkAktifCalisma+0x1084>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d138      	bne.n	8005f18 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <checkAktifCalisma+0x1068>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <checkAktifCalisma+0x1046>
 8005eae:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <checkAktifCalisma+0x106c>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d030      	beq.n	8005f18 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005eb6:	4b10      	ldr	r3, [pc, #64]	; (8005ef8 <checkAktifCalisma+0x1088>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d02c      	beq.n	8005f18 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005ebe:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <checkAktifCalisma+0x10a4>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	701a      	strb	r2, [r3, #0]
 8005ec4:	e02b      	b.n	8005f1e <checkAktifCalisma+0x10ae>
 8005ec6:	bf00      	nop
 8005ec8:	40010800 	.word	0x40010800
 8005ecc:	200001f9 	.word	0x200001f9
 8005ed0:	40011000 	.word	0x40011000
 8005ed4:	200001f2 	.word	0x200001f2
 8005ed8:	20000238 	.word	0x20000238
 8005edc:	20000239 	.word	0x20000239
 8005ee0:	200001f8 	.word	0x200001f8
 8005ee4:	40010c00 	.word	0x40010c00
 8005ee8:	20000248 	.word	0x20000248
 8005eec:	20000249 	.word	0x20000249
 8005ef0:	200001f7 	.word	0x200001f7
 8005ef4:	200001f4 	.word	0x200001f4
 8005ef8:	2000022e 	.word	0x2000022e
 8005efc:	2000021b 	.word	0x2000021b
 8005f00:	20000235 	.word	0x20000235
 8005f04:	200001c8 	.word	0x200001c8
 8005f08:	200001cc 	.word	0x200001cc
 8005f0c:	20000207 	.word	0x20000207
 8005f10:	20000236 	.word	0x20000236
 8005f14:	20000237 	.word	0x20000237
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005f18:	4b8b      	ldr	r3, [pc, #556]	; (8006148 <checkAktifCalisma+0x12d8>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005f1e:	4b8b      	ldr	r3, [pc, #556]	; (800614c <checkAktifCalisma+0x12dc>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d107      	bne.n	8005f36 <checkAktifCalisma+0x10c6>
 8005f26:	4b8a      	ldr	r3, [pc, #552]	; (8006150 <checkAktifCalisma+0x12e0>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d103      	bne.n	8005f36 <checkAktifCalisma+0x10c6>
 8005f2e:	4b86      	ldr	r3, [pc, #536]	; (8006148 <checkAktifCalisma+0x12d8>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d005      	beq.n	8005f42 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005f36:	2201      	movs	r2, #1
 8005f38:	2120      	movs	r1, #32
 8005f3a:	4886      	ldr	r0, [pc, #536]	; (8006154 <checkAktifCalisma+0x12e4>)
 8005f3c:	f003 fa59 	bl	80093f2 <HAL_GPIO_WritePin>
 8005f40:	e004      	b.n	8005f4c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005f42:	2200      	movs	r2, #0
 8005f44:	2120      	movs	r1, #32
 8005f46:	4883      	ldr	r0, [pc, #524]	; (8006154 <checkAktifCalisma+0x12e4>)
 8005f48:	f003 fa53 	bl	80093f2 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005f4c:	4b82      	ldr	r3, [pc, #520]	; (8006158 <checkAktifCalisma+0x12e8>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00e      	beq.n	8005f72 <checkAktifCalisma+0x1102>
 8005f54:	2102      	movs	r1, #2
 8005f56:	4881      	ldr	r0, [pc, #516]	; (800615c <checkAktifCalisma+0x12ec>)
 8005f58:	f003 fa34 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d107      	bne.n	8005f72 <checkAktifCalisma+0x1102>
 8005f62:	4b7f      	ldr	r3, [pc, #508]	; (8006160 <checkAktifCalisma+0x12f0>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d103      	bne.n	8005f72 <checkAktifCalisma+0x1102>
 8005f6a:	4b7e      	ldr	r3, [pc, #504]	; (8006164 <checkAktifCalisma+0x12f4>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d112      	bne.n	8005f98 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005f72:	4b7d      	ldr	r3, [pc, #500]	; (8006168 <checkAktifCalisma+0x12f8>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d066      	beq.n	8006048 <checkAktifCalisma+0x11d8>
 8005f7a:	2104      	movs	r1, #4
 8005f7c:	4877      	ldr	r0, [pc, #476]	; (800615c <checkAktifCalisma+0x12ec>)
 8005f7e:	f003 fa21 	bl	80093c4 <HAL_GPIO_ReadPin>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d15f      	bne.n	8006048 <checkAktifCalisma+0x11d8>
 8005f88:	4b75      	ldr	r3, [pc, #468]	; (8006160 <checkAktifCalisma+0x12f0>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d05b      	beq.n	8006048 <checkAktifCalisma+0x11d8>
 8005f90:	4b74      	ldr	r3, [pc, #464]	; (8006164 <checkAktifCalisma+0x12f4>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d057      	beq.n	8006048 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005f98:	4b74      	ldr	r3, [pc, #464]	; (800616c <checkAktifCalisma+0x12fc>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	4b72      	ldr	r3, [pc, #456]	; (800616c <checkAktifCalisma+0x12fc>)
 8005fa2:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005fa4:	4b71      	ldr	r3, [pc, #452]	; (800616c <checkAktifCalisma+0x12fc>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b09      	cmp	r3, #9
 8005faa:	d908      	bls.n	8005fbe <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005fac:	4b6f      	ldr	r3, [pc, #444]	; (800616c <checkAktifCalisma+0x12fc>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005fb2:	4b6f      	ldr	r3, [pc, #444]	; (8006170 <checkAktifCalisma+0x1300>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	4b6d      	ldr	r3, [pc, #436]	; (8006170 <checkAktifCalisma+0x1300>)
 8005fbc:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005fbe:	4b6c      	ldr	r3, [pc, #432]	; (8006170 <checkAktifCalisma+0x1300>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	2b09      	cmp	r3, #9
 8005fc4:	d908      	bls.n	8005fd8 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005fc6:	4b6a      	ldr	r3, [pc, #424]	; (8006170 <checkAktifCalisma+0x1300>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005fcc:	4b69      	ldr	r3, [pc, #420]	; (8006174 <checkAktifCalisma+0x1304>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	4b67      	ldr	r3, [pc, #412]	; (8006174 <checkAktifCalisma+0x1304>)
 8005fd6:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005fd8:	4b66      	ldr	r3, [pc, #408]	; (8006174 <checkAktifCalisma+0x1304>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b09      	cmp	r3, #9
 8005fde:	d908      	bls.n	8005ff2 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005fe0:	4b64      	ldr	r3, [pc, #400]	; (8006174 <checkAktifCalisma+0x1304>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005fe6:	4b64      	ldr	r3, [pc, #400]	; (8006178 <checkAktifCalisma+0x1308>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	3301      	adds	r3, #1
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	4b62      	ldr	r3, [pc, #392]	; (8006178 <checkAktifCalisma+0x1308>)
 8005ff0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005ff2:	4b61      	ldr	r3, [pc, #388]	; (8006178 <checkAktifCalisma+0x1308>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b09      	cmp	r3, #9
 8005ff8:	d908      	bls.n	800600c <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005ffa:	4b5f      	ldr	r3, [pc, #380]	; (8006178 <checkAktifCalisma+0x1308>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8006000:	4b5e      	ldr	r3, [pc, #376]	; (800617c <checkAktifCalisma+0x130c>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	b2da      	uxtb	r2, r3
 8006008:	4b5c      	ldr	r3, [pc, #368]	; (800617c <checkAktifCalisma+0x130c>)
 800600a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800600c:	4b5b      	ldr	r3, [pc, #364]	; (800617c <checkAktifCalisma+0x130c>)
 800600e:	781a      	ldrb	r2, [r3, #0]
 8006010:	4b5b      	ldr	r3, [pc, #364]	; (8006180 <checkAktifCalisma+0x1310>)
 8006012:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006016:	4b58      	ldr	r3, [pc, #352]	; (8006178 <checkAktifCalisma+0x1308>)
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	4b59      	ldr	r3, [pc, #356]	; (8006180 <checkAktifCalisma+0x1310>)
 800601c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800601e:	4b55      	ldr	r3, [pc, #340]	; (8006174 <checkAktifCalisma+0x1304>)
 8006020:	781a      	ldrb	r2, [r3, #0]
 8006022:	4b57      	ldr	r3, [pc, #348]	; (8006180 <checkAktifCalisma+0x1310>)
 8006024:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006026:	4b52      	ldr	r3, [pc, #328]	; (8006170 <checkAktifCalisma+0x1300>)
 8006028:	781a      	ldrb	r2, [r3, #0]
 800602a:	4b55      	ldr	r3, [pc, #340]	; (8006180 <checkAktifCalisma+0x1310>)
 800602c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800602e:	4b4f      	ldr	r3, [pc, #316]	; (800616c <checkAktifCalisma+0x12fc>)
 8006030:	781a      	ldrb	r2, [r3, #0]
 8006032:	4b53      	ldr	r3, [pc, #332]	; (8006180 <checkAktifCalisma+0x1310>)
 8006034:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8006036:	4b53      	ldr	r3, [pc, #332]	; (8006184 <checkAktifCalisma+0x1314>)
 8006038:	2201      	movs	r2, #1
 800603a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 800603c:	4b46      	ldr	r3, [pc, #280]	; (8006158 <checkAktifCalisma+0x12e8>)
 800603e:	2200      	movs	r2, #0
 8006040:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8006042:	4b49      	ldr	r3, [pc, #292]	; (8006168 <checkAktifCalisma+0x12f8>)
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006048:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800604c:	484e      	ldr	r0, [pc, #312]	; (8006188 <checkAktifCalisma+0x1318>)
 800604e:	f003 f9b9 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d016      	beq.n	8006086 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006058:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800605c:	484a      	ldr	r0, [pc, #296]	; (8006188 <checkAktifCalisma+0x1318>)
 800605e:	f003 f9b1 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00e      	beq.n	8006086 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800606c:	4846      	ldr	r0, [pc, #280]	; (8006188 <checkAktifCalisma+0x1318>)
 800606e:	f003 f9a9 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d006      	beq.n	8006086 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006078:	2140      	movs	r1, #64	; 0x40
 800607a:	4838      	ldr	r0, [pc, #224]	; (800615c <checkAktifCalisma+0x12ec>)
 800607c:	f003 f9a2 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d103      	bne.n	800608e <checkAktifCalisma+0x121e>
			startBasili=1;
 8006086:	4b41      	ldr	r3, [pc, #260]	; (800618c <checkAktifCalisma+0x131c>)
 8006088:	2201      	movs	r2, #1
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	e002      	b.n	8006094 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800608e:	4b3f      	ldr	r3, [pc, #252]	; (800618c <checkAktifCalisma+0x131c>)
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006094:	4b3d      	ldr	r3, [pc, #244]	; (800618c <checkAktifCalisma+0x131c>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d016      	beq.n	80060ca <checkAktifCalisma+0x125a>
 800609c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060a0:	4839      	ldr	r0, [pc, #228]	; (8006188 <checkAktifCalisma+0x1318>)
 80060a2:	f003 f98f 	bl	80093c4 <HAL_GPIO_ReadPin>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d10e      	bne.n	80060ca <checkAktifCalisma+0x125a>
			hataVar=1;
 80060ac:	4b38      	ldr	r3, [pc, #224]	; (8006190 <checkAktifCalisma+0x1320>)
 80060ae:	2201      	movs	r2, #1
 80060b0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 80060b2:	2001      	movs	r0, #1
 80060b4:	f7fa fd64 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(1);
 80060b8:	2001      	movs	r0, #1
 80060ba:	f7fa fd07 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 80060be:	f001 fc1b 	bl	80078f8 <convertAndSendData>
			acilstophatasi=1;
 80060c2:	4b34      	ldr	r3, [pc, #208]	; (8006194 <checkAktifCalisma+0x1324>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	e018      	b.n	80060fc <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80060ca:	4b32      	ldr	r3, [pc, #200]	; (8006194 <checkAktifCalisma+0x1324>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d014      	beq.n	80060fc <checkAktifCalisma+0x128c>
 80060d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060d6:	482c      	ldr	r0, [pc, #176]	; (8006188 <checkAktifCalisma+0x1318>)
 80060d8:	f003 f974 	bl	80093c4 <HAL_GPIO_ReadPin>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10c      	bne.n	80060fc <checkAktifCalisma+0x128c>
 80060e2:	4b2a      	ldr	r3, [pc, #168]	; (800618c <checkAktifCalisma+0x131c>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	f083 0301 	eor.w	r3, r3, #1
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 80060f0:	4b28      	ldr	r3, [pc, #160]	; (8006194 <checkAktifCalisma+0x1324>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80060f6:	2001      	movs	r0, #1
 80060f8:	f7fe fcb4 	bl	8004a64 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80060fc:	4b26      	ldr	r3, [pc, #152]	; (8006198 <checkAktifCalisma+0x1328>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	f083 0301 	eor.w	r3, r3, #1
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d04e      	beq.n	80061a8 <checkAktifCalisma+0x1338>
 800610a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800610e:	481e      	ldr	r0, [pc, #120]	; (8006188 <checkAktifCalisma+0x1318>)
 8006110:	f003 f958 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <checkAktifCalisma+0x12b2>
 800611a:	4b20      	ldr	r3, [pc, #128]	; (800619c <checkAktifCalisma+0x132c>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d042      	beq.n	80061a8 <checkAktifCalisma+0x1338>
 8006122:	4b1f      	ldr	r3, [pc, #124]	; (80061a0 <checkAktifCalisma+0x1330>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d13e      	bne.n	80061a8 <checkAktifCalisma+0x1338>
			hataVar=1;
 800612a:	4b19      	ldr	r3, [pc, #100]	; (8006190 <checkAktifCalisma+0x1320>)
 800612c:	2201      	movs	r2, #1
 800612e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006130:	2002      	movs	r0, #2
 8006132:	f7fa fd25 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006136:	2002      	movs	r0, #2
 8006138:	f7fa fcc8 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 800613c:	f001 fbdc 	bl	80078f8 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006140:	4b18      	ldr	r3, [pc, #96]	; (80061a4 <checkAktifCalisma+0x1334>)
 8006142:	2201      	movs	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	e047      	b.n	80061d8 <checkAktifCalisma+0x1368>
 8006148:	20000237 	.word	0x20000237
 800614c:	20000236 	.word	0x20000236
 8006150:	20000235 	.word	0x20000235
 8006154:	40010800 	.word	0x40010800
 8006158:	2000022b 	.word	0x2000022b
 800615c:	40011000 	.word	0x40011000
 8006160:	200001f2 	.word	0x200001f2
 8006164:	2000022e 	.word	0x2000022e
 8006168:	2000022c 	.word	0x2000022c
 800616c:	200001e9 	.word	0x200001e9
 8006170:	200001ea 	.word	0x200001ea
 8006174:	20000000 	.word	0x20000000
 8006178:	20000001 	.word	0x20000001
 800617c:	200001eb 	.word	0x200001eb
 8006180:	20000118 	.word	0x20000118
 8006184:	20000218 	.word	0x20000218
 8006188:	40010c00 	.word	0x40010c00
 800618c:	2000023a 	.word	0x2000023a
 8006190:	20000241 	.word	0x20000241
 8006194:	2000023c 	.word	0x2000023c
 8006198:	20000243 	.word	0x20000243
 800619c:	2000024d 	.word	0x2000024d
 80061a0:	200001f0 	.word	0x200001f0
 80061a4:	2000023d 	.word	0x2000023d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80061a8:	4b9b      	ldr	r3, [pc, #620]	; (8006418 <checkAktifCalisma+0x15a8>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d013      	beq.n	80061d8 <checkAktifCalisma+0x1368>
 80061b0:	4b9a      	ldr	r3, [pc, #616]	; (800641c <checkAktifCalisma+0x15ac>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00f      	beq.n	80061d8 <checkAktifCalisma+0x1368>
 80061b8:	4b99      	ldr	r3, [pc, #612]	; (8006420 <checkAktifCalisma+0x15b0>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	f083 0301 	eor.w	r3, r3, #1
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d008      	beq.n	80061d8 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 80061c6:	4b94      	ldr	r3, [pc, #592]	; (8006418 <checkAktifCalisma+0x15a8>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80061cc:	4b95      	ldr	r3, [pc, #596]	; (8006424 <checkAktifCalisma+0x15b4>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80061d2:	2002      	movs	r0, #2
 80061d4:	f7fe fc46 	bl	8004a64 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80061d8:	4b93      	ldr	r3, [pc, #588]	; (8006428 <checkAktifCalisma+0x15b8>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d11e      	bne.n	800621e <checkAktifCalisma+0x13ae>
 80061e0:	4b92      	ldr	r3, [pc, #584]	; (800642c <checkAktifCalisma+0x15bc>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d11a      	bne.n	800621e <checkAktifCalisma+0x13ae>
 80061e8:	4b91      	ldr	r3, [pc, #580]	; (8006430 <checkAktifCalisma+0x15c0>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d016      	beq.n	800621e <checkAktifCalisma+0x13ae>
 80061f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061f4:	488f      	ldr	r0, [pc, #572]	; (8006434 <checkAktifCalisma+0x15c4>)
 80061f6:	f003 f8e5 	bl	80093c4 <HAL_GPIO_ReadPin>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d10e      	bne.n	800621e <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006200:	4b8d      	ldr	r3, [pc, #564]	; (8006438 <checkAktifCalisma+0x15c8>)
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8006206:	2003      	movs	r0, #3
 8006208:	f7fa fcba 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(3);
 800620c:	2003      	movs	r0, #3
 800620e:	f7fa fc5d 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 8006212:	f001 fb71 	bl	80078f8 <convertAndSendData>
			basinchatasi=1;
 8006216:	4b89      	ldr	r3, [pc, #548]	; (800643c <checkAktifCalisma+0x15cc>)
 8006218:	2201      	movs	r2, #1
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	e015      	b.n	800624a <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800621e:	4b87      	ldr	r3, [pc, #540]	; (800643c <checkAktifCalisma+0x15cc>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d011      	beq.n	800624a <checkAktifCalisma+0x13da>
 8006226:	4b80      	ldr	r3, [pc, #512]	; (8006428 <checkAktifCalisma+0x15b8>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d10d      	bne.n	800624a <checkAktifCalisma+0x13da>
 800622e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006232:	4883      	ldr	r0, [pc, #524]	; (8006440 <checkAktifCalisma+0x15d0>)
 8006234:	f003 f8c6 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006238:	4603      	mov	r3, r0
 800623a:	2b01      	cmp	r3, #1
 800623c:	d105      	bne.n	800624a <checkAktifCalisma+0x13da>
			basinchatasi=0;
 800623e:	4b7f      	ldr	r3, [pc, #508]	; (800643c <checkAktifCalisma+0x15cc>)
 8006240:	2200      	movs	r2, #0
 8006242:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006244:	2003      	movs	r0, #3
 8006246:	f7fe fc0d 	bl	8004a64 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800624a:	4b7e      	ldr	r3, [pc, #504]	; (8006444 <checkAktifCalisma+0x15d4>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d103      	bne.n	800625a <checkAktifCalisma+0x13ea>
 8006252:	4b7d      	ldr	r3, [pc, #500]	; (8006448 <checkAktifCalisma+0x15d8>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d01e      	beq.n	8006298 <checkAktifCalisma+0x1428>
 800625a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800625e:	487b      	ldr	r0, [pc, #492]	; (800644c <checkAktifCalisma+0x15dc>)
 8006260:	f003 f8b0 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006264:	4603      	mov	r3, r0
 8006266:	2b01      	cmp	r3, #1
 8006268:	d116      	bne.n	8006298 <checkAktifCalisma+0x1428>
 800626a:	4b79      	ldr	r3, [pc, #484]	; (8006450 <checkAktifCalisma+0x15e0>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d003      	beq.n	800627a <checkAktifCalisma+0x140a>
 8006272:	4b77      	ldr	r3, [pc, #476]	; (8006450 <checkAktifCalisma+0x15e0>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b03      	cmp	r3, #3
 8006278:	d10e      	bne.n	8006298 <checkAktifCalisma+0x1428>
			hataVar=1;
 800627a:	4b6f      	ldr	r3, [pc, #444]	; (8006438 <checkAktifCalisma+0x15c8>)
 800627c:	2201      	movs	r2, #1
 800627e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006280:	2004      	movs	r0, #4
 8006282:	f7fa fc7d 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006286:	2004      	movs	r0, #4
 8006288:	f7fa fc20 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 800628c:	f001 fb34 	bl	80078f8 <convertAndSendData>
			katkapisivicihatasi=1;
 8006290:	4b70      	ldr	r3, [pc, #448]	; (8006454 <checkAktifCalisma+0x15e4>)
 8006292:	2201      	movs	r2, #1
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	e01f      	b.n	80062d8 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006298:	4b6e      	ldr	r3, [pc, #440]	; (8006454 <checkAktifCalisma+0x15e4>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d01b      	beq.n	80062d8 <checkAktifCalisma+0x1468>
 80062a0:	4b6d      	ldr	r3, [pc, #436]	; (8006458 <checkAktifCalisma+0x15e8>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d017      	beq.n	80062d8 <checkAktifCalisma+0x1468>
 80062a8:	4b66      	ldr	r3, [pc, #408]	; (8006444 <checkAktifCalisma+0x15d4>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	f083 0301 	eor.w	r3, r3, #1
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d010      	beq.n	80062d8 <checkAktifCalisma+0x1468>
 80062b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062ba:	4864      	ldr	r0, [pc, #400]	; (800644c <checkAktifCalisma+0x15dc>)
 80062bc:	f003 f882 	bl	80093c4 <HAL_GPIO_ReadPin>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d108      	bne.n	80062d8 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 80062c6:	4b63      	ldr	r3, [pc, #396]	; (8006454 <checkAktifCalisma+0x15e4>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80062cc:	4b5e      	ldr	r3, [pc, #376]	; (8006448 <checkAktifCalisma+0x15d8>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80062d2:	2004      	movs	r0, #4
 80062d4:	f7fe fbc6 	bl	8004a64 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80062d8:	4b5a      	ldr	r3, [pc, #360]	; (8006444 <checkAktifCalisma+0x15d4>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d103      	bne.n	80062e8 <checkAktifCalisma+0x1478>
 80062e0:	4b5e      	ldr	r3, [pc, #376]	; (800645c <checkAktifCalisma+0x15ec>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01e      	beq.n	8006326 <checkAktifCalisma+0x14b6>
 80062e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062ec:	4857      	ldr	r0, [pc, #348]	; (800644c <checkAktifCalisma+0x15dc>)
 80062ee:	f003 f869 	bl	80093c4 <HAL_GPIO_ReadPin>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d116      	bne.n	8006326 <checkAktifCalisma+0x14b6>
 80062f8:	4b55      	ldr	r3, [pc, #340]	; (8006450 <checkAktifCalisma+0x15e0>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d003      	beq.n	8006308 <checkAktifCalisma+0x1498>
 8006300:	4b53      	ldr	r3, [pc, #332]	; (8006450 <checkAktifCalisma+0x15e0>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b03      	cmp	r3, #3
 8006306:	d10e      	bne.n	8006326 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006308:	4b4b      	ldr	r3, [pc, #300]	; (8006438 <checkAktifCalisma+0x15c8>)
 800630a:	2201      	movs	r2, #1
 800630c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800630e:	2005      	movs	r0, #5
 8006310:	f7fa fc36 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006314:	2005      	movs	r0, #5
 8006316:	f7fa fbd9 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 800631a:	f001 faed 	bl	80078f8 <convertAndSendData>
			tablakapisivicihatasi=1;
 800631e:	4b50      	ldr	r3, [pc, #320]	; (8006460 <checkAktifCalisma+0x15f0>)
 8006320:	2201      	movs	r2, #1
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	e023      	b.n	800636e <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006326:	4b4e      	ldr	r3, [pc, #312]	; (8006460 <checkAktifCalisma+0x15f0>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d01f      	beq.n	800636e <checkAktifCalisma+0x14fe>
 800632e:	4b4a      	ldr	r3, [pc, #296]	; (8006458 <checkAktifCalisma+0x15e8>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01b      	beq.n	800636e <checkAktifCalisma+0x14fe>
 8006336:	4b43      	ldr	r3, [pc, #268]	; (8006444 <checkAktifCalisma+0x15d4>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	f083 0301 	eor.w	r3, r3, #1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d014      	beq.n	800636e <checkAktifCalisma+0x14fe>
 8006344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006348:	4840      	ldr	r0, [pc, #256]	; (800644c <checkAktifCalisma+0x15dc>)
 800634a:	f003 f83b 	bl	80093c4 <HAL_GPIO_ReadPin>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10c      	bne.n	800636e <checkAktifCalisma+0x14fe>
 8006354:	4b40      	ldr	r3, [pc, #256]	; (8006458 <checkAktifCalisma+0x15e8>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 800635c:	4b40      	ldr	r3, [pc, #256]	; (8006460 <checkAktifCalisma+0x15f0>)
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006362:	4b3e      	ldr	r3, [pc, #248]	; (800645c <checkAktifCalisma+0x15ec>)
 8006364:	2200      	movs	r2, #0
 8006366:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006368:	2005      	movs	r0, #5
 800636a:	f7fe fb7b 	bl	8004a64 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800636e:	4b30      	ldr	r3, [pc, #192]	; (8006430 <checkAktifCalisma+0x15c0>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d107      	bne.n	8006386 <checkAktifCalisma+0x1516>
 8006376:	4b2a      	ldr	r3, [pc, #168]	; (8006420 <checkAktifCalisma+0x15b0>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d103      	bne.n	8006386 <checkAktifCalisma+0x1516>
 800637e:	4b39      	ldr	r3, [pc, #228]	; (8006464 <checkAktifCalisma+0x15f4>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d016      	beq.n	80063b4 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8006386:	4b38      	ldr	r3, [pc, #224]	; (8006468 <checkAktifCalisma+0x15f8>)
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	4b38      	ldr	r3, [pc, #224]	; (800646c <checkAktifCalisma+0x15fc>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	4a37      	ldr	r2, [pc, #220]	; (8006470 <checkAktifCalisma+0x1600>)
 8006392:	7812      	ldrb	r2, [r2, #0]
 8006394:	4293      	cmp	r3, r2
 8006396:	d30d      	bcc.n	80063b4 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006398:	4b27      	ldr	r3, [pc, #156]	; (8006438 <checkAktifCalisma+0x15c8>)
 800639a:	2201      	movs	r2, #1
 800639c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800639e:	2006      	movs	r0, #6
 80063a0:	f7fa fbee 	bl	8000b80 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80063a4:	2006      	movs	r0, #6
 80063a6:	f7fa fb91 	bl	8000acc <hata2EEPROM>
			  	convertAndSendData();
 80063aa:	f001 faa5 	bl	80078f8 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 80063ae:	4b31      	ldr	r3, [pc, #196]	; (8006474 <checkAktifCalisma+0x1604>)
 80063b0:	2201      	movs	r2, #1
 80063b2:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80063b4:	4b2f      	ldr	r3, [pc, #188]	; (8006474 <checkAktifCalisma+0x1604>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d013      	beq.n	80063e4 <checkAktifCalisma+0x1574>
 80063bc:	2108      	movs	r1, #8
 80063be:	4823      	ldr	r0, [pc, #140]	; (800644c <checkAktifCalisma+0x15dc>)
 80063c0:	f003 f800 	bl	80093c4 <HAL_GPIO_ReadPin>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00c      	beq.n	80063e4 <checkAktifCalisma+0x1574>
 80063ca:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <checkAktifCalisma+0x15d4>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	f083 0301 	eor.w	r3, r3, #1
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d005      	beq.n	80063e4 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80063d8:	4b26      	ldr	r3, [pc, #152]	; (8006474 <checkAktifCalisma+0x1604>)
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80063de:	2006      	movs	r0, #6
 80063e0:	f7fe fb40 	bl	8004a64 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80063e4:	4b24      	ldr	r3, [pc, #144]	; (8006478 <checkAktifCalisma+0x1608>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10b      	bne.n	8006404 <checkAktifCalisma+0x1594>
 80063ec:	4b0c      	ldr	r3, [pc, #48]	; (8006420 <checkAktifCalisma+0x15b0>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d107      	bne.n	8006404 <checkAktifCalisma+0x1594>
 80063f4:	4b21      	ldr	r3, [pc, #132]	; (800647c <checkAktifCalisma+0x160c>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d103      	bne.n	8006404 <checkAktifCalisma+0x1594>
 80063fc:	4b19      	ldr	r3, [pc, #100]	; (8006464 <checkAktifCalisma+0x15f4>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d03f      	beq.n	8006484 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006404:	4b1e      	ldr	r3, [pc, #120]	; (8006480 <checkAktifCalisma+0x1610>)
 8006406:	2200      	movs	r2, #0
 8006408:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800640a:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <checkAktifCalisma+0x15d8>)
 800640c:	2201      	movs	r2, #1
 800640e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006410:	4b12      	ldr	r3, [pc, #72]	; (800645c <checkAktifCalisma+0x15ec>)
 8006412:	2201      	movs	r2, #1
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	e03c      	b.n	8006492 <checkAktifCalisma+0x1622>
 8006418:	2000023d 	.word	0x2000023d
 800641c:	20000243 	.word	0x20000243
 8006420:	20000224 	.word	0x20000224
 8006424:	2000024d 	.word	0x2000024d
 8006428:	200001ef 	.word	0x200001ef
 800642c:	200001f3 	.word	0x200001f3
 8006430:	20000240 	.word	0x20000240
 8006434:	40011000 	.word	0x40011000
 8006438:	20000241 	.word	0x20000241
 800643c:	2000024a 	.word	0x2000024a
 8006440:	40010c00 	.word	0x40010c00
 8006444:	2000023a 	.word	0x2000023a
 8006448:	2000024e 	.word	0x2000024e
 800644c:	40010800 	.word	0x40010800
 8006450:	200001f4 	.word	0x200001f4
 8006454:	2000024b 	.word	0x2000024b
 8006458:	2000022e 	.word	0x2000022e
 800645c:	2000024f 	.word	0x2000024f
 8006460:	2000024c 	.word	0x2000024c
 8006464:	20000223 	.word	0x20000223
 8006468:	200001c8 	.word	0x200001c8
 800646c:	200001dc 	.word	0x200001dc
 8006470:	20000204 	.word	0x20000204
 8006474:	2000023b 	.word	0x2000023b
 8006478:	20000221 	.word	0x20000221
 800647c:	20000222 	.word	0x20000222
 8006480:	20000242 	.word	0x20000242
		} else {
			makineCalisiyor=1;
 8006484:	4b1e      	ldr	r3, [pc, #120]	; (8006500 <checkAktifCalisma+0x1690>)
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800648a:	4b1e      	ldr	r3, [pc, #120]	; (8006504 <checkAktifCalisma+0x1694>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1e      	ldr	r2, [pc, #120]	; (8006508 <checkAktifCalisma+0x1698>)
 8006490:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006492:	4b1e      	ldr	r3, [pc, #120]	; (800650c <checkAktifCalisma+0x169c>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d02f      	beq.n	80064fa <checkAktifCalisma+0x168a>
 800649a:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <checkAktifCalisma+0x16a0>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	f083 0301 	eor.w	r3, r3, #1
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d028      	beq.n	80064fa <checkAktifCalisma+0x168a>
 80064a8:	4b1a      	ldr	r3, [pc, #104]	; (8006514 <checkAktifCalisma+0x16a4>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	f083 0301 	eor.w	r3, r3, #1
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d021      	beq.n	80064fa <checkAktifCalisma+0x168a>
 80064b6:	4b18      	ldr	r3, [pc, #96]	; (8006518 <checkAktifCalisma+0x16a8>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	f083 0301 	eor.w	r3, r3, #1
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d01a      	beq.n	80064fa <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80064c4:	4b15      	ldr	r3, [pc, #84]	; (800651c <checkAktifCalisma+0x16ac>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	f083 0301 	eor.w	r3, r3, #1
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d013      	beq.n	80064fa <checkAktifCalisma+0x168a>
 80064d2:	4b13      	ldr	r3, [pc, #76]	; (8006520 <checkAktifCalisma+0x16b0>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	f083 0301 	eor.w	r3, r3, #1
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00c      	beq.n	80064fa <checkAktifCalisma+0x168a>
 80064e0:	4b10      	ldr	r3, [pc, #64]	; (8006524 <checkAktifCalisma+0x16b4>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	f083 0301 	eor.w	r3, r3, #1
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <checkAktifCalisma+0x168a>
			hataVar=0;
 80064ee:	4b07      	ldr	r3, [pc, #28]	; (800650c <checkAktifCalisma+0x169c>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80064f4:	2007      	movs	r0, #7
 80064f6:	f7fe fab5 	bl	8004a64 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80064fa:	bf00      	nop
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000242 	.word	0x20000242
 8006504:	200001c8 	.word	0x200001c8
 8006508:	200001dc 	.word	0x200001dc
 800650c:	20000241 	.word	0x20000241
 8006510:	2000023c 	.word	0x2000023c
 8006514:	2000023d 	.word	0x2000023d
 8006518:	2000024a 	.word	0x2000024a
 800651c:	2000024b 	.word	0x2000024b
 8006520:	2000024c 	.word	0x2000024c
 8006524:	2000023b 	.word	0x2000023b

08006528 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 800652c:	4b8b      	ldr	r3, [pc, #556]	; (800675c <checkDemoModCalisma+0x234>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	2b01      	cmp	r3, #1
 8006532:	f040 8229 	bne.w	8006988 <checkDemoModCalisma+0x460>
 8006536:	4b8a      	ldr	r3, [pc, #552]	; (8006760 <checkDemoModCalisma+0x238>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 8224 	beq.w	8006988 <checkDemoModCalisma+0x460>
 8006540:	4b88      	ldr	r3, [pc, #544]	; (8006764 <checkDemoModCalisma+0x23c>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f040 821f 	bne.w	8006988 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800654a:	2102      	movs	r1, #2
 800654c:	4886      	ldr	r0, [pc, #536]	; (8006768 <checkDemoModCalisma+0x240>)
 800654e:	f002 ff39 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d11d      	bne.n	8006594 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006558:	4b84      	ldr	r3, [pc, #528]	; (800676c <checkDemoModCalisma+0x244>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	f083 0301 	eor.w	r3, r3, #1
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d016      	beq.n	8006594 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006566:	4b82      	ldr	r3, [pc, #520]	; (8006770 <checkDemoModCalisma+0x248>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	f083 0301 	eor.w	r3, r3, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00f      	beq.n	8006594 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006574:	4b7f      	ldr	r3, [pc, #508]	; (8006774 <checkDemoModCalisma+0x24c>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	f083 0301 	eor.w	r3, r3, #1
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d008      	beq.n	8006594 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006582:	2201      	movs	r2, #1
 8006584:	2104      	movs	r1, #4
 8006586:	487c      	ldr	r0, [pc, #496]	; (8006778 <checkDemoModCalisma+0x250>)
 8006588:	f002 ff33 	bl	80093f2 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 800658c:	4b7b      	ldr	r3, [pc, #492]	; (800677c <checkDemoModCalisma+0x254>)
 800658e:	2201      	movs	r2, #1
 8006590:	701a      	strb	r2, [r3, #0]
 8006592:	e00e      	b.n	80065b2 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006594:	2102      	movs	r1, #2
 8006596:	4874      	ldr	r0, [pc, #464]	; (8006768 <checkDemoModCalisma+0x240>)
 8006598:	f002 ff14 	bl	80093c4 <HAL_GPIO_ReadPin>
 800659c:	4603      	mov	r3, r0
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d107      	bne.n	80065b2 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80065a2:	2200      	movs	r2, #0
 80065a4:	2104      	movs	r1, #4
 80065a6:	4874      	ldr	r0, [pc, #464]	; (8006778 <checkDemoModCalisma+0x250>)
 80065a8:	f002 ff23 	bl	80093f2 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80065ac:	4b73      	ldr	r3, [pc, #460]	; (800677c <checkDemoModCalisma+0x254>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80065b2:	4b72      	ldr	r3, [pc, #456]	; (800677c <checkDemoModCalisma+0x254>)
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10b      	bne.n	80065d2 <checkDemoModCalisma+0xaa>
 80065ba:	4b6d      	ldr	r3, [pc, #436]	; (8006770 <checkDemoModCalisma+0x248>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d107      	bne.n	80065d2 <checkDemoModCalisma+0xaa>
 80065c2:	4b6c      	ldr	r3, [pc, #432]	; (8006774 <checkDemoModCalisma+0x24c>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d103      	bne.n	80065d2 <checkDemoModCalisma+0xaa>
 80065ca:	4b68      	ldr	r3, [pc, #416]	; (800676c <checkDemoModCalisma+0x244>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00c      	beq.n	80065ec <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80065d2:	2201      	movs	r2, #1
 80065d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065d8:	4867      	ldr	r0, [pc, #412]	; (8006778 <checkDemoModCalisma+0x250>)
 80065da:	f002 ff0a 	bl	80093f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80065de:	2201      	movs	r2, #1
 80065e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065e4:	4864      	ldr	r0, [pc, #400]	; (8006778 <checkDemoModCalisma+0x250>)
 80065e6:	f002 ff04 	bl	80093f2 <HAL_GPIO_WritePin>
 80065ea:	e00b      	b.n	8006604 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80065ec:	2200      	movs	r2, #0
 80065ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065f2:	4861      	ldr	r0, [pc, #388]	; (8006778 <checkDemoModCalisma+0x250>)
 80065f4:	f002 fefd 	bl	80093f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80065f8:	2200      	movs	r2, #0
 80065fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065fe:	485e      	ldr	r0, [pc, #376]	; (8006778 <checkDemoModCalisma+0x250>)
 8006600:	f002 fef7 	bl	80093f2 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006604:	2102      	movs	r1, #2
 8006606:	4858      	ldr	r0, [pc, #352]	; (8006768 <checkDemoModCalisma+0x240>)
 8006608:	f002 fedc 	bl	80093c4 <HAL_GPIO_ReadPin>
 800660c:	4603      	mov	r3, r0
 800660e:	2b01      	cmp	r3, #1
 8006610:	d10d      	bne.n	800662e <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006616:	4854      	ldr	r0, [pc, #336]	; (8006768 <checkDemoModCalisma+0x240>)
 8006618:	f002 fed4 	bl	80093c4 <HAL_GPIO_ReadPin>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d105      	bne.n	800662e <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006622:	4b56      	ldr	r3, [pc, #344]	; (800677c <checkDemoModCalisma+0x254>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	f083 0301 	eor.w	r3, r3, #1
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800662e:	2102      	movs	r1, #2
 8006630:	484d      	ldr	r0, [pc, #308]	; (8006768 <checkDemoModCalisma+0x240>)
 8006632:	f002 fec7 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006636:	4603      	mov	r3, r0
 8006638:	2b01      	cmp	r3, #1
 800663a:	d125      	bne.n	8006688 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800663c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006640:	4849      	ldr	r0, [pc, #292]	; (8006768 <checkDemoModCalisma+0x240>)
 8006642:	f002 febf 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d11d      	bne.n	8006688 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 800664c:	4b4b      	ldr	r3, [pc, #300]	; (800677c <checkDemoModCalisma+0x254>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	f083 0301 	eor.w	r3, r3, #1
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d016      	beq.n	8006688 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800665a:	4b44      	ldr	r3, [pc, #272]	; (800676c <checkDemoModCalisma+0x244>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	f083 0301 	eor.w	r3, r3, #1
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00f      	beq.n	8006688 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006668:	4b42      	ldr	r3, [pc, #264]	; (8006774 <checkDemoModCalisma+0x24c>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	f083 0301 	eor.w	r3, r3, #1
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d008      	beq.n	8006688 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006676:	2201      	movs	r2, #1
 8006678:	2120      	movs	r1, #32
 800667a:	483b      	ldr	r0, [pc, #236]	; (8006768 <checkDemoModCalisma+0x240>)
 800667c:	f002 feb9 	bl	80093f2 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006680:	4b3b      	ldr	r3, [pc, #236]	; (8006770 <checkDemoModCalisma+0x248>)
 8006682:	2201      	movs	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	e007      	b.n	8006698 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006688:	2200      	movs	r2, #0
 800668a:	2120      	movs	r1, #32
 800668c:	4836      	ldr	r0, [pc, #216]	; (8006768 <checkDemoModCalisma+0x240>)
 800668e:	f002 feb0 	bl	80093f2 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006692:	4b37      	ldr	r3, [pc, #220]	; (8006770 <checkDemoModCalisma+0x248>)
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006698:	2102      	movs	r1, #2
 800669a:	4833      	ldr	r0, [pc, #204]	; (8006768 <checkDemoModCalisma+0x240>)
 800669c:	f002 fe92 	bl	80093c4 <HAL_GPIO_ReadPin>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d125      	bne.n	80066f2 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80066a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066aa:	482f      	ldr	r0, [pc, #188]	; (8006768 <checkDemoModCalisma+0x240>)
 80066ac:	f002 fe8a 	bl	80093c4 <HAL_GPIO_ReadPin>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d11d      	bne.n	80066f2 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80066b6:	4b31      	ldr	r3, [pc, #196]	; (800677c <checkDemoModCalisma+0x254>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	f083 0301 	eor.w	r3, r3, #1
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d016      	beq.n	80066f2 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80066c4:	4b2a      	ldr	r3, [pc, #168]	; (8006770 <checkDemoModCalisma+0x248>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	f083 0301 	eor.w	r3, r3, #1
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00f      	beq.n	80066f2 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80066d2:	4b26      	ldr	r3, [pc, #152]	; (800676c <checkDemoModCalisma+0x244>)
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	f083 0301 	eor.w	r3, r3, #1
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d008      	beq.n	80066f2 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80066e0:	2201      	movs	r2, #1
 80066e2:	2110      	movs	r1, #16
 80066e4:	4820      	ldr	r0, [pc, #128]	; (8006768 <checkDemoModCalisma+0x240>)
 80066e6:	f002 fe84 	bl	80093f2 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80066ea:	4b22      	ldr	r3, [pc, #136]	; (8006774 <checkDemoModCalisma+0x24c>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	e007      	b.n	8006702 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80066f2:	2200      	movs	r2, #0
 80066f4:	2110      	movs	r1, #16
 80066f6:	481c      	ldr	r0, [pc, #112]	; (8006768 <checkDemoModCalisma+0x240>)
 80066f8:	f002 fe7b 	bl	80093f2 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80066fc:	4b1d      	ldr	r3, [pc, #116]	; (8006774 <checkDemoModCalisma+0x24c>)
 80066fe:	2200      	movs	r2, #0
 8006700:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006702:	2104      	movs	r1, #4
 8006704:	4818      	ldr	r0, [pc, #96]	; (8006768 <checkDemoModCalisma+0x240>)
 8006706:	f002 fe5d 	bl	80093c4 <HAL_GPIO_ReadPin>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d139      	bne.n	8006784 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006710:	4b1a      	ldr	r3, [pc, #104]	; (800677c <checkDemoModCalisma+0x254>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	f083 0301 	eor.w	r3, r3, #1
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d032      	beq.n	8006784 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800671e:	4b15      	ldr	r3, [pc, #84]	; (8006774 <checkDemoModCalisma+0x24c>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	f083 0301 	eor.w	r3, r3, #1
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d02b      	beq.n	8006784 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 800672c:	4b10      	ldr	r3, [pc, #64]	; (8006770 <checkDemoModCalisma+0x248>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	f083 0301 	eor.w	r3, r3, #1
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d024      	beq.n	8006784 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800673a:	2201      	movs	r2, #1
 800673c:	2102      	movs	r1, #2
 800673e:	480e      	ldr	r0, [pc, #56]	; (8006778 <checkDemoModCalisma+0x250>)
 8006740:	f002 fe57 	bl	80093f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006744:	2201      	movs	r2, #1
 8006746:	2101      	movs	r1, #1
 8006748:	480b      	ldr	r0, [pc, #44]	; (8006778 <checkDemoModCalisma+0x250>)
 800674a:	f002 fe52 	bl	80093f2 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800674e:	4b07      	ldr	r3, [pc, #28]	; (800676c <checkDemoModCalisma+0x244>)
 8006750:	2201      	movs	r2, #1
 8006752:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006754:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <checkDemoModCalisma+0x258>)
 8006756:	2201      	movs	r2, #1
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	e027      	b.n	80067ac <checkDemoModCalisma+0x284>
 800675c:	2000020a 	.word	0x2000020a
 8006760:	2000023e 	.word	0x2000023e
 8006764:	20000209 	.word	0x20000209
 8006768:	40011000 	.word	0x40011000
 800676c:	20000245 	.word	0x20000245
 8006770:	20000246 	.word	0x20000246
 8006774:	20000247 	.word	0x20000247
 8006778:	40010c00 	.word	0x40010c00
 800677c:	20000244 	.word	0x20000244
 8006780:	2000022a 	.word	0x2000022a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006784:	2104      	movs	r1, #4
 8006786:	48a0      	ldr	r0, [pc, #640]	; (8006a08 <checkDemoModCalisma+0x4e0>)
 8006788:	f002 fe1c 	bl	80093c4 <HAL_GPIO_ReadPin>
 800678c:	4603      	mov	r3, r0
 800678e:	2b01      	cmp	r3, #1
 8006790:	d10c      	bne.n	80067ac <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006792:	2200      	movs	r2, #0
 8006794:	2102      	movs	r1, #2
 8006796:	489d      	ldr	r0, [pc, #628]	; (8006a0c <checkDemoModCalisma+0x4e4>)
 8006798:	f002 fe2b 	bl	80093f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800679c:	2200      	movs	r2, #0
 800679e:	2101      	movs	r1, #1
 80067a0:	489a      	ldr	r0, [pc, #616]	; (8006a0c <checkDemoModCalisma+0x4e4>)
 80067a2:	f002 fe26 	bl	80093f2 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80067a6:	4b9a      	ldr	r3, [pc, #616]	; (8006a10 <checkDemoModCalisma+0x4e8>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80067ac:	2104      	movs	r1, #4
 80067ae:	4896      	ldr	r0, [pc, #600]	; (8006a08 <checkDemoModCalisma+0x4e0>)
 80067b0:	f002 fe08 	bl	80093c4 <HAL_GPIO_ReadPin>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d10d      	bne.n	80067d6 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80067ba:	2201      	movs	r2, #1
 80067bc:	2180      	movs	r1, #128	; 0x80
 80067be:	4895      	ldr	r0, [pc, #596]	; (8006a14 <checkDemoModCalisma+0x4ec>)
 80067c0:	f002 fe17 	bl	80093f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80067c4:	2201      	movs	r2, #1
 80067c6:	2120      	movs	r1, #32
 80067c8:	4892      	ldr	r0, [pc, #584]	; (8006a14 <checkDemoModCalisma+0x4ec>)
 80067ca:	f002 fe12 	bl	80093f2 <HAL_GPIO_WritePin>
			timer3 = millis;
 80067ce:	4b92      	ldr	r3, [pc, #584]	; (8006a18 <checkDemoModCalisma+0x4f0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a92      	ldr	r2, [pc, #584]	; (8006a1c <checkDemoModCalisma+0x4f4>)
 80067d4:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80067d6:	4b90      	ldr	r3, [pc, #576]	; (8006a18 <checkDemoModCalisma+0x4f0>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	4b90      	ldr	r3, [pc, #576]	; (8006a1c <checkDemoModCalisma+0x4f4>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d909      	bls.n	80067f8 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80067e4:	2200      	movs	r2, #0
 80067e6:	2180      	movs	r1, #128	; 0x80
 80067e8:	488a      	ldr	r0, [pc, #552]	; (8006a14 <checkDemoModCalisma+0x4ec>)
 80067ea:	f002 fe02 	bl	80093f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80067ee:	2200      	movs	r2, #0
 80067f0:	2120      	movs	r1, #32
 80067f2:	4888      	ldr	r0, [pc, #544]	; (8006a14 <checkDemoModCalisma+0x4ec>)
 80067f4:	f002 fdfd 	bl	80093f2 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80067f8:	2102      	movs	r1, #2
 80067fa:	4883      	ldr	r0, [pc, #524]	; (8006a08 <checkDemoModCalisma+0x4e0>)
 80067fc:	f002 fde2 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006800:	4603      	mov	r3, r0
 8006802:	2b01      	cmp	r3, #1
 8006804:	d108      	bne.n	8006818 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006806:	2201      	movs	r2, #1
 8006808:	2140      	movs	r1, #64	; 0x40
 800680a:	4882      	ldr	r0, [pc, #520]	; (8006a14 <checkDemoModCalisma+0x4ec>)
 800680c:	f002 fdf1 	bl	80093f2 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006810:	4b81      	ldr	r3, [pc, #516]	; (8006a18 <checkDemoModCalisma+0x4f0>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a81      	ldr	r2, [pc, #516]	; (8006a1c <checkDemoModCalisma+0x4f4>)
 8006816:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006818:	4b7f      	ldr	r3, [pc, #508]	; (8006a18 <checkDemoModCalisma+0x4f0>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	4b7f      	ldr	r3, [pc, #508]	; (8006a1c <checkDemoModCalisma+0x4f4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b04      	cmp	r3, #4
 8006824:	d904      	bls.n	8006830 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006826:	2200      	movs	r2, #0
 8006828:	2140      	movs	r1, #64	; 0x40
 800682a:	487a      	ldr	r0, [pc, #488]	; (8006a14 <checkDemoModCalisma+0x4ec>)
 800682c:	f002 fde1 	bl	80093f2 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006830:	4b7b      	ldr	r3, [pc, #492]	; (8006a20 <checkDemoModCalisma+0x4f8>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d058      	beq.n	80068ea <checkDemoModCalisma+0x3c2>
 8006838:	4b7a      	ldr	r3, [pc, #488]	; (8006a24 <checkDemoModCalisma+0x4fc>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d054      	beq.n	80068ea <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006840:	4b79      	ldr	r3, [pc, #484]	; (8006a28 <checkDemoModCalisma+0x500>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	3301      	adds	r3, #1
 8006846:	b2da      	uxtb	r2, r3
 8006848:	4b77      	ldr	r3, [pc, #476]	; (8006a28 <checkDemoModCalisma+0x500>)
 800684a:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 800684c:	4b76      	ldr	r3, [pc, #472]	; (8006a28 <checkDemoModCalisma+0x500>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b09      	cmp	r3, #9
 8006852:	d908      	bls.n	8006866 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006854:	4b74      	ldr	r3, [pc, #464]	; (8006a28 <checkDemoModCalisma+0x500>)
 8006856:	2200      	movs	r2, #0
 8006858:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800685a:	4b74      	ldr	r3, [pc, #464]	; (8006a2c <checkDemoModCalisma+0x504>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	3301      	adds	r3, #1
 8006860:	b2da      	uxtb	r2, r3
 8006862:	4b72      	ldr	r3, [pc, #456]	; (8006a2c <checkDemoModCalisma+0x504>)
 8006864:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006866:	4b71      	ldr	r3, [pc, #452]	; (8006a2c <checkDemoModCalisma+0x504>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b09      	cmp	r3, #9
 800686c:	d908      	bls.n	8006880 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800686e:	4b6f      	ldr	r3, [pc, #444]	; (8006a2c <checkDemoModCalisma+0x504>)
 8006870:	2200      	movs	r2, #0
 8006872:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006874:	4b6e      	ldr	r3, [pc, #440]	; (8006a30 <checkDemoModCalisma+0x508>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	b2da      	uxtb	r2, r3
 800687c:	4b6c      	ldr	r3, [pc, #432]	; (8006a30 <checkDemoModCalisma+0x508>)
 800687e:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006880:	4b6b      	ldr	r3, [pc, #428]	; (8006a30 <checkDemoModCalisma+0x508>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b09      	cmp	r3, #9
 8006886:	d908      	bls.n	800689a <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006888:	4b69      	ldr	r3, [pc, #420]	; (8006a30 <checkDemoModCalisma+0x508>)
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800688e:	4b69      	ldr	r3, [pc, #420]	; (8006a34 <checkDemoModCalisma+0x50c>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	3301      	adds	r3, #1
 8006894:	b2da      	uxtb	r2, r3
 8006896:	4b67      	ldr	r3, [pc, #412]	; (8006a34 <checkDemoModCalisma+0x50c>)
 8006898:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800689a:	4b66      	ldr	r3, [pc, #408]	; (8006a34 <checkDemoModCalisma+0x50c>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b09      	cmp	r3, #9
 80068a0:	d908      	bls.n	80068b4 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80068a2:	4b64      	ldr	r3, [pc, #400]	; (8006a34 <checkDemoModCalisma+0x50c>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80068a8:	4b63      	ldr	r3, [pc, #396]	; (8006a38 <checkDemoModCalisma+0x510>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	3301      	adds	r3, #1
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	4b61      	ldr	r3, [pc, #388]	; (8006a38 <checkDemoModCalisma+0x510>)
 80068b2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80068b4:	4b60      	ldr	r3, [pc, #384]	; (8006a38 <checkDemoModCalisma+0x510>)
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	4b60      	ldr	r3, [pc, #384]	; (8006a3c <checkDemoModCalisma+0x514>)
 80068ba:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80068be:	4b5d      	ldr	r3, [pc, #372]	; (8006a34 <checkDemoModCalisma+0x50c>)
 80068c0:	781a      	ldrb	r2, [r3, #0]
 80068c2:	4b5e      	ldr	r3, [pc, #376]	; (8006a3c <checkDemoModCalisma+0x514>)
 80068c4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80068c6:	4b5a      	ldr	r3, [pc, #360]	; (8006a30 <checkDemoModCalisma+0x508>)
 80068c8:	781a      	ldrb	r2, [r3, #0]
 80068ca:	4b5c      	ldr	r3, [pc, #368]	; (8006a3c <checkDemoModCalisma+0x514>)
 80068cc:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80068ce:	4b57      	ldr	r3, [pc, #348]	; (8006a2c <checkDemoModCalisma+0x504>)
 80068d0:	781a      	ldrb	r2, [r3, #0]
 80068d2:	4b5a      	ldr	r3, [pc, #360]	; (8006a3c <checkDemoModCalisma+0x514>)
 80068d4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80068d6:	4b54      	ldr	r3, [pc, #336]	; (8006a28 <checkDemoModCalisma+0x500>)
 80068d8:	781a      	ldrb	r2, [r3, #0]
 80068da:	4b58      	ldr	r3, [pc, #352]	; (8006a3c <checkDemoModCalisma+0x514>)
 80068dc:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80068de:	4b58      	ldr	r3, [pc, #352]	; (8006a40 <checkDemoModCalisma+0x518>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80068e4:	4b4f      	ldr	r3, [pc, #316]	; (8006a24 <checkDemoModCalisma+0x4fc>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80068ea:	4b56      	ldr	r3, [pc, #344]	; (8006a44 <checkDemoModCalisma+0x51c>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f040 8087 	bne.w	8006a02 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80068f4:	4a54      	ldr	r2, [pc, #336]	; (8006a48 <checkDemoModCalisma+0x520>)
 80068f6:	2101      	movs	r1, #1
 80068f8:	2002      	movs	r0, #2
 80068fa:	f001 fa3d 	bl	8007d78 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80068fe:	4a53      	ldr	r2, [pc, #332]	; (8006a4c <checkDemoModCalisma+0x524>)
 8006900:	2101      	movs	r1, #1
 8006902:	2001      	movs	r0, #1
 8006904:	f001 fa38 	bl	8007d78 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006908:	4b4b      	ldr	r3, [pc, #300]	; (8006a38 <checkDemoModCalisma+0x510>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	220a      	movs	r2, #10
 800690e:	4950      	ldr	r1, [pc, #320]	; (8006a50 <checkDemoModCalisma+0x528>)
 8006910:	4618      	mov	r0, r3
 8006912:	f005 fd83 	bl	800c41c <itoa>
			lcd_print(2,12,snum);
 8006916:	4a4e      	ldr	r2, [pc, #312]	; (8006a50 <checkDemoModCalisma+0x528>)
 8006918:	210c      	movs	r1, #12
 800691a:	2002      	movs	r0, #2
 800691c:	f001 fa2c 	bl	8007d78 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006920:	4b44      	ldr	r3, [pc, #272]	; (8006a34 <checkDemoModCalisma+0x50c>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	220a      	movs	r2, #10
 8006926:	494a      	ldr	r1, [pc, #296]	; (8006a50 <checkDemoModCalisma+0x528>)
 8006928:	4618      	mov	r0, r3
 800692a:	f005 fd77 	bl	800c41c <itoa>
			lcd_print(2,13,snum);
 800692e:	4a48      	ldr	r2, [pc, #288]	; (8006a50 <checkDemoModCalisma+0x528>)
 8006930:	210d      	movs	r1, #13
 8006932:	2002      	movs	r0, #2
 8006934:	f001 fa20 	bl	8007d78 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006938:	4b3d      	ldr	r3, [pc, #244]	; (8006a30 <checkDemoModCalisma+0x508>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	220a      	movs	r2, #10
 800693e:	4944      	ldr	r1, [pc, #272]	; (8006a50 <checkDemoModCalisma+0x528>)
 8006940:	4618      	mov	r0, r3
 8006942:	f005 fd6b 	bl	800c41c <itoa>
			lcd_print(2,14,snum);
 8006946:	4a42      	ldr	r2, [pc, #264]	; (8006a50 <checkDemoModCalisma+0x528>)
 8006948:	210e      	movs	r1, #14
 800694a:	2002      	movs	r0, #2
 800694c:	f001 fa14 	bl	8007d78 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006950:	4b36      	ldr	r3, [pc, #216]	; (8006a2c <checkDemoModCalisma+0x504>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	220a      	movs	r2, #10
 8006956:	493e      	ldr	r1, [pc, #248]	; (8006a50 <checkDemoModCalisma+0x528>)
 8006958:	4618      	mov	r0, r3
 800695a:	f005 fd5f 	bl	800c41c <itoa>
			lcd_print(2,15,snum);
 800695e:	4a3c      	ldr	r2, [pc, #240]	; (8006a50 <checkDemoModCalisma+0x528>)
 8006960:	210f      	movs	r1, #15
 8006962:	2002      	movs	r0, #2
 8006964:	f001 fa08 	bl	8007d78 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006968:	4b2f      	ldr	r3, [pc, #188]	; (8006a28 <checkDemoModCalisma+0x500>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	220a      	movs	r2, #10
 800696e:	4938      	ldr	r1, [pc, #224]	; (8006a50 <checkDemoModCalisma+0x528>)
 8006970:	4618      	mov	r0, r3
 8006972:	f005 fd53 	bl	800c41c <itoa>
			lcd_print(2,16,snum);
 8006976:	4a36      	ldr	r2, [pc, #216]	; (8006a50 <checkDemoModCalisma+0x528>)
 8006978:	2110      	movs	r1, #16
 800697a:	2002      	movs	r0, #2
 800697c:	f001 f9fc 	bl	8007d78 <lcd_print>
			mesajYazildi=1;
 8006980:	4b34      	ldr	r3, [pc, #208]	; (8006a54 <checkDemoModCalisma+0x52c>)
 8006982:	2201      	movs	r2, #1
 8006984:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006986:	e03c      	b.n	8006a02 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006988:	4b33      	ldr	r3, [pc, #204]	; (8006a58 <checkDemoModCalisma+0x530>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d003      	beq.n	8006998 <checkDemoModCalisma+0x470>
 8006990:	4b2c      	ldr	r3, [pc, #176]	; (8006a44 <checkDemoModCalisma+0x51c>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d134      	bne.n	8006a02 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006998:	2200      	movs	r2, #0
 800699a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800699e:	481b      	ldr	r0, [pc, #108]	; (8006a0c <checkDemoModCalisma+0x4e4>)
 80069a0:	f002 fd27 	bl	80093f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80069a4:	2200      	movs	r2, #0
 80069a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80069aa:	4818      	ldr	r0, [pc, #96]	; (8006a0c <checkDemoModCalisma+0x4e4>)
 80069ac:	f002 fd21 	bl	80093f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80069b0:	2200      	movs	r2, #0
 80069b2:	2104      	movs	r1, #4
 80069b4:	4815      	ldr	r0, [pc, #84]	; (8006a0c <checkDemoModCalisma+0x4e4>)
 80069b6:	f002 fd1c 	bl	80093f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80069ba:	2200      	movs	r2, #0
 80069bc:	2102      	movs	r1, #2
 80069be:	4813      	ldr	r0, [pc, #76]	; (8006a0c <checkDemoModCalisma+0x4e4>)
 80069c0:	f002 fd17 	bl	80093f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80069c4:	2200      	movs	r2, #0
 80069c6:	2101      	movs	r1, #1
 80069c8:	4810      	ldr	r0, [pc, #64]	; (8006a0c <checkDemoModCalisma+0x4e4>)
 80069ca:	f002 fd12 	bl	80093f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80069ce:	2200      	movs	r2, #0
 80069d0:	2120      	movs	r1, #32
 80069d2:	480d      	ldr	r0, [pc, #52]	; (8006a08 <checkDemoModCalisma+0x4e0>)
 80069d4:	f002 fd0d 	bl	80093f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80069d8:	2200      	movs	r2, #0
 80069da:	2110      	movs	r1, #16
 80069dc:	480a      	ldr	r0, [pc, #40]	; (8006a08 <checkDemoModCalisma+0x4e0>)
 80069de:	f002 fd08 	bl	80093f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80069e2:	2200      	movs	r2, #0
 80069e4:	2180      	movs	r1, #128	; 0x80
 80069e6:	480b      	ldr	r0, [pc, #44]	; (8006a14 <checkDemoModCalisma+0x4ec>)
 80069e8:	f002 fd03 	bl	80093f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80069ec:	2200      	movs	r2, #0
 80069ee:	2140      	movs	r1, #64	; 0x40
 80069f0:	4808      	ldr	r0, [pc, #32]	; (8006a14 <checkDemoModCalisma+0x4ec>)
 80069f2:	f002 fcfe 	bl	80093f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80069f6:	2200      	movs	r2, #0
 80069f8:	2120      	movs	r1, #32
 80069fa:	4806      	ldr	r0, [pc, #24]	; (8006a14 <checkDemoModCalisma+0x4ec>)
 80069fc:	f002 fcf9 	bl	80093f2 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006a00:	e7ff      	b.n	8006a02 <checkDemoModCalisma+0x4da>
 8006a02:	bf00      	nop
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	40011000 	.word	0x40011000
 8006a0c:	40010c00 	.word	0x40010c00
 8006a10:	20000245 	.word	0x20000245
 8006a14:	40010800 	.word	0x40010800
 8006a18:	200001c8 	.word	0x200001c8
 8006a1c:	200001d8 	.word	0x200001d8
 8006a20:	20000244 	.word	0x20000244
 8006a24:	2000022a 	.word	0x2000022a
 8006a28:	200001e9 	.word	0x200001e9
 8006a2c:	200001ea 	.word	0x200001ea
 8006a30:	20000000 	.word	0x20000000
 8006a34:	20000001 	.word	0x20000001
 8006a38:	200001eb 	.word	0x200001eb
 8006a3c:	20000118 	.word	0x20000118
 8006a40:	20000218 	.word	0x20000218
 8006a44:	20000209 	.word	0x20000209
 8006a48:	0800dc08 	.word	0x0800dc08
 8006a4c:	0800dc14 	.word	0x0800dc14
 8006a50:	20000188 	.word	0x20000188
 8006a54:	20000220 	.word	0x20000220
 8006a58:	2000020a 	.word	0x2000020a

08006a5c <mainLoop>:

void mainLoop() {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006a62:	f7fe f923 	bl	8004cac <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006a66:	2101      	movs	r1, #1
 8006a68:	48a9      	ldr	r0, [pc, #676]	; (8006d10 <mainLoop+0x2b4>)
 8006a6a:	f002 fcab 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d136      	bne.n	8006ae2 <mainLoop+0x86>
 8006a74:	2108      	movs	r1, #8
 8006a76:	48a7      	ldr	r0, [pc, #668]	; (8006d14 <mainLoop+0x2b8>)
 8006a78:	f002 fca4 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d12f      	bne.n	8006ae2 <mainLoop+0x86>
 8006a82:	2102      	movs	r1, #2
 8006a84:	48a2      	ldr	r0, [pc, #648]	; (8006d10 <mainLoop+0x2b4>)
 8006a86:	f002 fc9d 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d128      	bne.n	8006ae2 <mainLoop+0x86>
 8006a90:	2104      	movs	r1, #4
 8006a92:	489f      	ldr	r0, [pc, #636]	; (8006d10 <mainLoop+0x2b4>)
 8006a94:	f002 fc96 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d121      	bne.n	8006ae2 <mainLoop+0x86>
 8006a9e:	2108      	movs	r1, #8
 8006aa0:	489b      	ldr	r0, [pc, #620]	; (8006d10 <mainLoop+0x2b4>)
 8006aa2:	f002 fc8f 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d11a      	bne.n	8006ae2 <mainLoop+0x86>
 8006aac:	2180      	movs	r1, #128	; 0x80
 8006aae:	4899      	ldr	r0, [pc, #612]	; (8006d14 <mainLoop+0x2b8>)
 8006ab0:	f002 fc88 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d113      	bne.n	8006ae2 <mainLoop+0x86>
 8006aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006abe:	4895      	ldr	r0, [pc, #596]	; (8006d14 <mainLoop+0x2b8>)
 8006ac0:	f002 fc80 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d10b      	bne.n	8006ae2 <mainLoop+0x86>
 8006aca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ace:	4891      	ldr	r0, [pc, #580]	; (8006d14 <mainLoop+0x2b8>)
 8006ad0:	f002 fc78 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d103      	bne.n	8006ae2 <mainLoop+0x86>
			butonKontrol=0;
 8006ada:	4b8f      	ldr	r3, [pc, #572]	; (8006d18 <mainLoop+0x2bc>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	e003      	b.n	8006aea <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006ae2:	4b8e      	ldr	r3, [pc, #568]	; (8006d1c <mainLoop+0x2c0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a8e      	ldr	r2, [pc, #568]	; (8006d20 <mainLoop+0x2c4>)
 8006ae8:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() != 1) {
 8006aea:	f7fe f8ab 	bl	8004c44 <buttonCheck>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d003      	beq.n	8006afc <mainLoop+0xa0>
			backLightTimer = millis;
 8006af4:	4b89      	ldr	r3, [pc, #548]	; (8006d1c <mainLoop+0x2c0>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a89      	ldr	r2, [pc, #548]	; (8006d20 <mainLoop+0x2c4>)
 8006afa:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006afc:	4b89      	ldr	r3, [pc, #548]	; (8006d24 <mainLoop+0x2c8>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d03a      	beq.n	8006b7a <mainLoop+0x11e>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b04:	bf00      	nop
 8006b06:	4888      	ldr	r0, [pc, #544]	; (8006d28 <mainLoop+0x2cc>)
 8006b08:	f003 fa85 	bl	800a016 <HAL_I2C_GetError>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d0f9      	beq.n	8006b06 <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006b12:	bf00      	nop
 8006b14:	4884      	ldr	r0, [pc, #528]	; (8006d28 <mainLoop+0x2cc>)
 8006b16:	f003 fa71 	bl	8009ffc <HAL_I2C_GetState>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d1f9      	bne.n	8006b14 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006b20:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006b24:	9302      	str	r3, [sp, #8]
 8006b26:	236e      	movs	r3, #110	; 0x6e
 8006b28:	9301      	str	r3, [sp, #4]
 8006b2a:	4b80      	ldr	r3, [pc, #512]	; (8006d2c <mainLoop+0x2d0>)
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	236e      	movs	r3, #110	; 0x6e
 8006b30:	2200      	movs	r2, #0
 8006b32:	21a0      	movs	r1, #160	; 0xa0
 8006b34:	487c      	ldr	r0, [pc, #496]	; (8006d28 <mainLoop+0x2cc>)
 8006b36:	f002 feff 	bl	8009938 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006b3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b3e:	f001 fe71 	bl	8008824 <HAL_Delay>

		  hafizaYaz=0;
 8006b42:	4b78      	ldr	r3, [pc, #480]	; (8006d24 <mainLoop+0x2c8>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006b48:	4b79      	ldr	r3, [pc, #484]	; (8006d30 <mainLoop+0x2d4>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d105      	bne.n	8006b5c <mainLoop+0x100>
			  lcd_print(2,1,"Data yazildi    ");
 8006b50:	4a78      	ldr	r2, [pc, #480]	; (8006d34 <mainLoop+0x2d8>)
 8006b52:	2101      	movs	r1, #1
 8006b54:	2002      	movs	r0, #2
 8006b56:	f001 f90f 	bl	8007d78 <lcd_print>
 8006b5a:	e008      	b.n	8006b6e <mainLoop+0x112>
		  } else if(dilSecim==1) {
 8006b5c:	4b74      	ldr	r3, [pc, #464]	; (8006d30 <mainLoop+0x2d4>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d104      	bne.n	8006b6e <mainLoop+0x112>
			  lcd_print(2,1,"Data Wrote      ");
 8006b64:	4a74      	ldr	r2, [pc, #464]	; (8006d38 <mainLoop+0x2dc>)
 8006b66:	2101      	movs	r1, #1
 8006b68:	2002      	movs	r0, #2
 8006b6a:	f001 f905 	bl	8007d78 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006b6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b72:	f001 fe57 	bl	8008824 <HAL_Delay>
		  lcd_clear();
 8006b76:	f001 f92b 	bl	8007dd0 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006b7a:	4b70      	ldr	r3, [pc, #448]	; (8006d3c <mainLoop+0x2e0>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	f083 0301 	eor.w	r3, r3, #1
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d06d      	beq.n	8006c64 <mainLoop+0x208>
 8006b88:	4867      	ldr	r0, [pc, #412]	; (8006d28 <mainLoop+0x2cc>)
 8006b8a:	f003 fa37 	bl	8009ffc <HAL_I2C_GetState>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d167      	bne.n	8006c64 <mainLoop+0x208>
		  if(ilkOkuma==0) {
 8006b94:	4b6a      	ldr	r3, [pc, #424]	; (8006d40 <mainLoop+0x2e4>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f083 0301 	eor.w	r3, r3, #1
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d044      	beq.n	8006c2c <mainLoop+0x1d0>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006ba2:	4a68      	ldr	r2, [pc, #416]	; (8006d44 <mainLoop+0x2e8>)
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	f001 f8e6 	bl	8007d78 <lcd_print>
			  if(dilSecim==0) {
 8006bac:	4b60      	ldr	r3, [pc, #384]	; (8006d30 <mainLoop+0x2d4>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <mainLoop+0x164>
				  lcd_print(2,1,"Data Okunuyor...");
 8006bb4:	4a64      	ldr	r2, [pc, #400]	; (8006d48 <mainLoop+0x2ec>)
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	2002      	movs	r0, #2
 8006bba:	f001 f8dd 	bl	8007d78 <lcd_print>
 8006bbe:	e008      	b.n	8006bd2 <mainLoop+0x176>
			  } else if(dilSecim==1) {
 8006bc0:	4b5b      	ldr	r3, [pc, #364]	; (8006d30 <mainLoop+0x2d4>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d104      	bne.n	8006bd2 <mainLoop+0x176>
				  lcd_print(2,1,"Data Reading... ");
 8006bc8:	4a60      	ldr	r2, [pc, #384]	; (8006d4c <mainLoop+0x2f0>)
 8006bca:	2101      	movs	r1, #1
 8006bcc:	2002      	movs	r0, #2
 8006bce:	f001 f8d3 	bl	8007d78 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006bd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bd6:	f001 fe25 	bl	8008824 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006bda:	bf00      	nop
 8006bdc:	4852      	ldr	r0, [pc, #328]	; (8006d28 <mainLoop+0x2cc>)
 8006bde:	f003 fa1a 	bl	800a016 <HAL_I2C_GetError>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d0f9      	beq.n	8006bdc <mainLoop+0x180>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006be8:	e003      	b.n	8006bf2 <mainLoop+0x196>
				  HAL_Delay(1000);
 8006bea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bee:	f001 fe19 	bl	8008824 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006bf2:	484d      	ldr	r0, [pc, #308]	; (8006d28 <mainLoop+0x2cc>)
 8006bf4:	f003 fa02 	bl	8009ffc <HAL_I2C_GetState>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	d1f5      	bne.n	8006bea <mainLoop+0x18e>
			  }

			  if(dilSecim==0) {
 8006bfe:	4b4c      	ldr	r3, [pc, #304]	; (8006d30 <mainLoop+0x2d4>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d105      	bne.n	8006c12 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Okundu.    ");
 8006c06:	4a52      	ldr	r2, [pc, #328]	; (8006d50 <mainLoop+0x2f4>)
 8006c08:	2101      	movs	r1, #1
 8006c0a:	2002      	movs	r0, #2
 8006c0c:	f001 f8b4 	bl	8007d78 <lcd_print>
 8006c10:	e008      	b.n	8006c24 <mainLoop+0x1c8>
			  } else if(dilSecim==1) {
 8006c12:	4b47      	ldr	r3, [pc, #284]	; (8006d30 <mainLoop+0x2d4>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d104      	bne.n	8006c24 <mainLoop+0x1c8>
				  lcd_print(2,1,"Data Read.      ");
 8006c1a:	4a4e      	ldr	r2, [pc, #312]	; (8006d54 <mainLoop+0x2f8>)
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	2002      	movs	r0, #2
 8006c20:	f001 f8aa 	bl	8007d78 <lcd_print>
			  }

			  ilkOkuma=1;
 8006c24:	4b46      	ldr	r3, [pc, #280]	; (8006d40 <mainLoop+0x2e4>)
 8006c26:	2201      	movs	r2, #1
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	e014      	b.n	8006c56 <mainLoop+0x1fa>
		  } else {
			  if(dilSecim==0) {
 8006c2c:	4b40      	ldr	r3, [pc, #256]	; (8006d30 <mainLoop+0x2d4>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d105      	bne.n	8006c40 <mainLoop+0x1e4>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006c34:	4a48      	ldr	r2, [pc, #288]	; (8006d58 <mainLoop+0x2fc>)
 8006c36:	2101      	movs	r1, #1
 8006c38:	2002      	movs	r0, #2
 8006c3a:	f001 f89d 	bl	8007d78 <lcd_print>
 8006c3e:	e008      	b.n	8006c52 <mainLoop+0x1f6>
			  } else if(dilSecim==1) {
 8006c40:	4b3b      	ldr	r3, [pc, #236]	; (8006d30 <mainLoop+0x2d4>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d104      	bne.n	8006c52 <mainLoop+0x1f6>
				  lcd_print(2,1,"Value Saved     ");
 8006c48:	4a44      	ldr	r2, [pc, #272]	; (8006d5c <mainLoop+0x300>)
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	2002      	movs	r0, #2
 8006c4e:	f001 f893 	bl	8007d78 <lcd_print>
			  }
			  lcd_clear();
 8006c52:	f001 f8bd 	bl	8007dd0 <lcd_clear>
		  }

		  lcd_clear();
 8006c56:	f001 f8bb 	bl	8007dd0 <lcd_clear>

		  eepromKontrol();
 8006c5a:	f7f9 faeb 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006c5e:	4b37      	ldr	r3, [pc, #220]	; (8006d3c <mainLoop+0x2e0>)
 8006c60:	2201      	movs	r2, #1
 8006c62:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006c64:	4b3e      	ldr	r3, [pc, #248]	; (8006d60 <mainLoop+0x304>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d11c      	bne.n	8006ca6 <mainLoop+0x24a>
 8006c6c:	4b3d      	ldr	r3, [pc, #244]	; (8006d64 <mainLoop+0x308>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	f083 0301 	eor.w	r3, r3, #1
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d015      	beq.n	8006ca6 <mainLoop+0x24a>
 8006c7a:	4b3b      	ldr	r3, [pc, #236]	; (8006d68 <mainLoop+0x30c>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d111      	bne.n	8006ca6 <mainLoop+0x24a>
			lcd_clear();
 8006c82:	f001 f8a5 	bl	8007dd0 <lcd_clear>
			HAL_Delay(10);
 8006c86:	200a      	movs	r0, #10
 8006c88:	f001 fdcc 	bl	8008824 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006c8c:	4a37      	ldr	r2, [pc, #220]	; (8006d6c <mainLoop+0x310>)
 8006c8e:	2101      	movs	r1, #1
 8006c90:	2001      	movs	r0, #1
 8006c92:	f001 f871 	bl	8007d78 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006c96:	4a36      	ldr	r2, [pc, #216]	; (8006d70 <mainLoop+0x314>)
 8006c98:	2101      	movs	r1, #1
 8006c9a:	2002      	movs	r0, #2
 8006c9c:	f001 f86c 	bl	8007d78 <lcd_print>
			mesajYazildi=1;
 8006ca0:	4b30      	ldr	r3, [pc, #192]	; (8006d64 <mainLoop+0x308>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006ca6:	4b2e      	ldr	r3, [pc, #184]	; (8006d60 <mainLoop+0x304>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d112      	bne.n	8006cd4 <mainLoop+0x278>
 8006cae:	2102      	movs	r1, #2
 8006cb0:	4817      	ldr	r0, [pc, #92]	; (8006d10 <mainLoop+0x2b4>)
 8006cb2:	f002 fb87 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d10b      	bne.n	8006cd4 <mainLoop+0x278>
 8006cbc:	2104      	movs	r1, #4
 8006cbe:	4814      	ldr	r0, [pc, #80]	; (8006d10 <mainLoop+0x2b4>)
 8006cc0:	f002 fb80 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d104      	bne.n	8006cd4 <mainLoop+0x278>
			menuGiris=1;
 8006cca:	4b25      	ldr	r3, [pc, #148]	; (8006d60 <mainLoop+0x304>)
 8006ccc:	2201      	movs	r2, #1
 8006cce:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006cd0:	f001 f87e 	bl	8007dd0 <lcd_clear>
		}

		if(menuGiris==1) {
 8006cd4:	4b22      	ldr	r3, [pc, #136]	; (8006d60 <mainLoop+0x304>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <mainLoop+0x284>
			menu();
 8006cdc:	f7fa fbba 	bl	8001454 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ce4:	480b      	ldr	r0, [pc, #44]	; (8006d14 <mainLoop+0x2b8>)
 8006ce6:	f002 fb9c 	bl	8009422 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006cea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006cee:	4821      	ldr	r0, [pc, #132]	; (8006d74 <mainLoop+0x318>)
 8006cf0:	f002 fb68 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d142      	bne.n	8006d80 <mainLoop+0x324>
 8006cfa:	4b1f      	ldr	r3, [pc, #124]	; (8006d78 <mainLoop+0x31c>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	f083 0301 	eor.w	r3, r3, #1
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d03b      	beq.n	8006d80 <mainLoop+0x324>
			stopVar=1;
 8006d08:	4b1c      	ldr	r3, [pc, #112]	; (8006d7c <mainLoop+0x320>)
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	e03a      	b.n	8006d86 <mainLoop+0x32a>
 8006d10:	40010800 	.word	0x40010800
 8006d14:	40011000 	.word	0x40011000
 8006d18:	2000021b 	.word	0x2000021b
 8006d1c:	200001c8 	.word	0x200001c8
 8006d20:	200001e4 	.word	0x200001e4
 8006d24:	20000218 	.word	0x20000218
 8006d28:	20000374 	.word	0x20000374
 8006d2c:	20000118 	.word	0x20000118
 8006d30:	2000020d 	.word	0x2000020d
 8006d34:	0800dc28 	.word	0x0800dc28
 8006d38:	0800dc3c 	.word	0x0800dc3c
 8006d3c:	20000219 	.word	0x20000219
 8006d40:	2000021a 	.word	0x2000021a
 8006d44:	0800dc50 	.word	0x0800dc50
 8006d48:	0800dc64 	.word	0x0800dc64
 8006d4c:	0800dc78 	.word	0x0800dc78
 8006d50:	0800dc8c 	.word	0x0800dc8c
 8006d54:	0800dca0 	.word	0x0800dca0
 8006d58:	0800dcb4 	.word	0x0800dcb4
 8006d5c:	0800dcc8 	.word	0x0800dcc8
 8006d60:	20000209 	.word	0x20000209
 8006d64:	20000220 	.word	0x20000220
 8006d68:	2000020a 	.word	0x2000020a
 8006d6c:	0800dcdc 	.word	0x0800dcdc
 8006d70:	0800dcf0 	.word	0x0800dcf0
 8006d74:	40010c00 	.word	0x40010c00
 8006d78:	20000241 	.word	0x20000241
 8006d7c:	2000023e 	.word	0x2000023e
		} else {
			stopVar=0;
 8006d80:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <mainLoop+0x340>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006d86:	f7fd ffa7 	bl	8004cd8 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006d8a:	f7fd ffd9 	bl	8004d40 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006d8e:	f7fe f81d 	bl	8004dcc <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006d92:	f7fe f86d 	bl	8004e70 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006d96:	f7ff fbc7 	bl	8006528 <checkDemoModCalisma>
		checkLCDBacklight();
 8006d9a:	e662      	b.n	8006a62 <mainLoop+0x6>
 8006d9c:	2000023e 	.word	0x2000023e

08006da0 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8006da6:	2001      	movs	r0, #1
 8006da8:	f001 f844 	bl	8007e34 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8006dac:	220c      	movs	r2, #12
 8006dae:	2100      	movs	r1, #0
 8006db0:	48a5      	ldr	r0, [pc, #660]	; (8007048 <takeMachineID+0x2a8>)
 8006db2:	f005 fc4b 	bl	800c64c <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006db6:	2305      	movs	r3, #5
 8006db8:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006dba:	2303      	movs	r3, #3
 8006dbc:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006dc2:	4ba2      	ldr	r3, [pc, #648]	; (800704c <takeMachineID+0x2ac>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8006dc8:	2100      	movs	r1, #0
 8006dca:	2001      	movs	r0, #1
 8006dcc:	f7fa f88a 	bl	8000ee4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006dd0:	2108      	movs	r1, #8
 8006dd2:	489f      	ldr	r0, [pc, #636]	; (8007050 <takeMachineID+0x2b0>)
 8006dd4:	f002 faf6 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d13c      	bne.n	8006e58 <takeMachineID+0xb8>
        	lcd_cursor(0);
 8006dde:	2000      	movs	r0, #0
 8006de0:	f001 f828 	bl	8007e34 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8006de4:	f000 fe0a 	bl	80079fc <checkEEPROM4ID>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d022      	beq.n	8006e34 <takeMachineID+0x94>
        		itoa(strlen(machineID), snum, 10);
 8006dee:	4896      	ldr	r0, [pc, #600]	; (8007048 <takeMachineID+0x2a8>)
 8006df0:	f7f9 fa18 	bl	8000224 <strlen>
 8006df4:	4603      	mov	r3, r0
 8006df6:	220a      	movs	r2, #10
 8006df8:	4996      	ldr	r1, [pc, #600]	; (8007054 <takeMachineID+0x2b4>)
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f005 fb0e 	bl	800c41c <itoa>
        		lcd_print(1, 1, snum);
 8006e00:	4a94      	ldr	r2, [pc, #592]	; (8007054 <takeMachineID+0x2b4>)
 8006e02:	2101      	movs	r1, #1
 8006e04:	2001      	movs	r0, #1
 8006e06:	f000 ffb7 	bl	8007d78 <lcd_print>
        		HAL_Delay(2500);
 8006e0a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006e0e:	f001 fd09 	bl	8008824 <HAL_Delay>
        		lcd_clear();
 8006e12:	f000 ffdd 	bl	8007dd0 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006e16:	4a90      	ldr	r2, [pc, #576]	; (8007058 <takeMachineID+0x2b8>)
 8006e18:	2101      	movs	r1, #1
 8006e1a:	2001      	movs	r0, #1
 8006e1c:	f000 ffac 	bl	8007d78 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006e20:	4a8e      	ldr	r2, [pc, #568]	; (800705c <takeMachineID+0x2bc>)
 8006e22:	2101      	movs	r1, #1
 8006e24:	2002      	movs	r0, #2
 8006e26:	f000 ffa7 	bl	8007d78 <lcd_print>
        		HAL_Delay(1200);
 8006e2a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006e2e:	f001 fcf9 	bl	8008824 <HAL_Delay>
        		goto mainSection;
 8006e32:	e7b8      	b.n	8006da6 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006e34:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e38:	9302      	str	r3, [sp, #8]
 8006e3a:	236e      	movs	r3, #110	; 0x6e
 8006e3c:	9301      	str	r3, [sp, #4]
 8006e3e:	4b88      	ldr	r3, [pc, #544]	; (8007060 <takeMachineID+0x2c0>)
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	236e      	movs	r3, #110	; 0x6e
 8006e44:	2200      	movs	r2, #0
 8006e46:	21a0      	movs	r1, #160	; 0xa0
 8006e48:	4886      	ldr	r0, [pc, #536]	; (8007064 <takeMachineID+0x2c4>)
 8006e4a:	f002 fd75 	bl	8009938 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006e4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e52:	f001 fce7 	bl	8008824 <HAL_Delay>

            	break;
 8006e56:	e135      	b.n	80070c4 <takeMachineID+0x324>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006e58:	2101      	movs	r1, #1
 8006e5a:	487d      	ldr	r0, [pc, #500]	; (8007050 <takeMachineID+0x2b0>)
 8006e5c:	f002 fab2 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d111      	bne.n	8006e8a <takeMachineID+0xea>
        	if(cursorPosition == 7) {
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b07      	cmp	r3, #7
 8006e6a:	d102      	bne.n	8006e72 <takeMachineID+0xd2>
        		cursorPosition = 10;
 8006e6c:	230a      	movs	r3, #10
 8006e6e:	60bb      	str	r3, [r7, #8]
 8006e70:	e008      	b.n	8006e84 <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2b0e      	cmp	r3, #14
 8006e76:	d102      	bne.n	8006e7e <takeMachineID+0xde>
                cursorPosition = 3;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	60bb      	str	r3, [r7, #8]
 8006e7c:	e002      	b.n	8006e84 <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	3301      	adds	r3, #1
 8006e82:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006e84:	2096      	movs	r0, #150	; 0x96
 8006e86:	f001 fccd 	bl	8008824 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006e8a:	2108      	movs	r1, #8
 8006e8c:	4876      	ldr	r0, [pc, #472]	; (8007068 <takeMachineID+0x2c8>)
 8006e8e:	f002 fa99 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d111      	bne.n	8006ebc <takeMachineID+0x11c>
            if (cursorPosition == 3) {
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d102      	bne.n	8006ea4 <takeMachineID+0x104>
                cursorPosition = 14;
 8006e9e:	230e      	movs	r3, #14
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	e008      	b.n	8006eb6 <takeMachineID+0x116>
            } else if(cursorPosition == 10) {
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b0a      	cmp	r3, #10
 8006ea8:	d102      	bne.n	8006eb0 <takeMachineID+0x110>
            	cursorPosition = 7;
 8006eaa:	2307      	movs	r3, #7
 8006eac:	60bb      	str	r3, [r7, #8]
 8006eae:	e002      	b.n	8006eb6 <takeMachineID+0x116>
            } else {
            	cursorPosition--;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8006eb6:	20fa      	movs	r0, #250	; 0xfa
 8006eb8:	f001 fcb4 	bl	8008824 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006ebc:	2102      	movs	r1, #2
 8006ebe:	4864      	ldr	r0, [pc, #400]	; (8007050 <takeMachineID+0x2b0>)
 8006ec0:	f002 fa80 	bl	80093c4 <HAL_GPIO_ReadPin>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	f040 80a1 	bne.w	800700e <takeMachineID+0x26e>
        	if(cursorPosition == 3) {
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d10a      	bne.n	8006ee8 <takeMachineID+0x148>
        		machineID[arrayPos] = '0';
 8006ed2:	4a5d      	ldr	r2, [pc, #372]	; (8007048 <takeMachineID+0x2a8>)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	2230      	movs	r2, #48	; 0x30
 8006eda:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006edc:	4a60      	ldr	r2, [pc, #384]	; (8007060 <takeMachineID+0x2c0>)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	e07c      	b.n	8006fe2 <takeMachineID+0x242>
        	} else if(cursorPosition == 4) {
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d10a      	bne.n	8006f04 <takeMachineID+0x164>
        		machineID[arrayPos] = '1';
 8006eee:	4a56      	ldr	r2, [pc, #344]	; (8007048 <takeMachineID+0x2a8>)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	2231      	movs	r2, #49	; 0x31
 8006ef6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006ef8:	4a59      	ldr	r2, [pc, #356]	; (8007060 <takeMachineID+0x2c0>)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	4413      	add	r3, r2
 8006efe:	2201      	movs	r2, #1
 8006f00:	701a      	strb	r2, [r3, #0]
 8006f02:	e06e      	b.n	8006fe2 <takeMachineID+0x242>
        	} else if(cursorPosition == 5) {
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b05      	cmp	r3, #5
 8006f08:	d10a      	bne.n	8006f20 <takeMachineID+0x180>
        		machineID[arrayPos] = '2';
 8006f0a:	4a4f      	ldr	r2, [pc, #316]	; (8007048 <takeMachineID+0x2a8>)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4413      	add	r3, r2
 8006f10:	2232      	movs	r2, #50	; 0x32
 8006f12:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006f14:	4a52      	ldr	r2, [pc, #328]	; (8007060 <takeMachineID+0x2c0>)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	4413      	add	r3, r2
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	e060      	b.n	8006fe2 <takeMachineID+0x242>
        	} else if(cursorPosition == 6) {
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b06      	cmp	r3, #6
 8006f24:	d10a      	bne.n	8006f3c <takeMachineID+0x19c>
        		machineID[arrayPos] = '3';
 8006f26:	4a48      	ldr	r2, [pc, #288]	; (8007048 <takeMachineID+0x2a8>)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	2233      	movs	r2, #51	; 0x33
 8006f2e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006f30:	4a4b      	ldr	r2, [pc, #300]	; (8007060 <takeMachineID+0x2c0>)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	4413      	add	r3, r2
 8006f36:	2203      	movs	r2, #3
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	e052      	b.n	8006fe2 <takeMachineID+0x242>
        	} else if(cursorPosition == 7) {
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b07      	cmp	r3, #7
 8006f40:	d10a      	bne.n	8006f58 <takeMachineID+0x1b8>
        		machineID[arrayPos] = '4';
 8006f42:	4a41      	ldr	r2, [pc, #260]	; (8007048 <takeMachineID+0x2a8>)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4413      	add	r3, r2
 8006f48:	2234      	movs	r2, #52	; 0x34
 8006f4a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006f4c:	4a44      	ldr	r2, [pc, #272]	; (8007060 <takeMachineID+0x2c0>)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	4413      	add	r3, r2
 8006f52:	2204      	movs	r2, #4
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	e044      	b.n	8006fe2 <takeMachineID+0x242>
        	} else if(cursorPosition == 10) {
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b0a      	cmp	r3, #10
 8006f5c:	d10a      	bne.n	8006f74 <takeMachineID+0x1d4>
        		machineID[arrayPos] = '5';
 8006f5e:	4a3a      	ldr	r2, [pc, #232]	; (8007048 <takeMachineID+0x2a8>)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4413      	add	r3, r2
 8006f64:	2235      	movs	r2, #53	; 0x35
 8006f66:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006f68:	4a3d      	ldr	r2, [pc, #244]	; (8007060 <takeMachineID+0x2c0>)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	2205      	movs	r2, #5
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	e036      	b.n	8006fe2 <takeMachineID+0x242>
        	} else if(cursorPosition == 11) {
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2b0b      	cmp	r3, #11
 8006f78:	d10a      	bne.n	8006f90 <takeMachineID+0x1f0>
        		machineID[arrayPos] = '6';
 8006f7a:	4a33      	ldr	r2, [pc, #204]	; (8007048 <takeMachineID+0x2a8>)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4413      	add	r3, r2
 8006f80:	2236      	movs	r2, #54	; 0x36
 8006f82:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006f84:	4a36      	ldr	r2, [pc, #216]	; (8007060 <takeMachineID+0x2c0>)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	4413      	add	r3, r2
 8006f8a:	2206      	movs	r2, #6
 8006f8c:	701a      	strb	r2, [r3, #0]
 8006f8e:	e028      	b.n	8006fe2 <takeMachineID+0x242>
        	} else if(cursorPosition == 12) {
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b0c      	cmp	r3, #12
 8006f94:	d10a      	bne.n	8006fac <takeMachineID+0x20c>
        		machineID[arrayPos] = '7';
 8006f96:	4a2c      	ldr	r2, [pc, #176]	; (8007048 <takeMachineID+0x2a8>)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	2237      	movs	r2, #55	; 0x37
 8006f9e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006fa0:	4a2f      	ldr	r2, [pc, #188]	; (8007060 <takeMachineID+0x2c0>)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	2207      	movs	r2, #7
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	e01a      	b.n	8006fe2 <takeMachineID+0x242>
        	} else if(cursorPosition == 13) {
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b0d      	cmp	r3, #13
 8006fb0:	d10a      	bne.n	8006fc8 <takeMachineID+0x228>
        		machineID[arrayPos] = '8';
 8006fb2:	4a25      	ldr	r2, [pc, #148]	; (8007048 <takeMachineID+0x2a8>)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	2238      	movs	r2, #56	; 0x38
 8006fba:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8006fbc:	4a28      	ldr	r2, [pc, #160]	; (8007060 <takeMachineID+0x2c0>)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	2208      	movs	r2, #8
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e00c      	b.n	8006fe2 <takeMachineID+0x242>
        	} else if(cursorPosition == 14) {
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b0e      	cmp	r3, #14
 8006fcc:	d109      	bne.n	8006fe2 <takeMachineID+0x242>
        		machineID[arrayPos] = '9';
 8006fce:	4a1e      	ldr	r2, [pc, #120]	; (8007048 <takeMachineID+0x2a8>)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	2239      	movs	r2, #57	; 0x39
 8006fd6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8006fd8:	4a21      	ldr	r2, [pc, #132]	; (8007060 <takeMachineID+0x2c0>)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	4413      	add	r3, r2
 8006fde:	2209      	movs	r2, #9
 8006fe0:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	b2d9      	uxtb	r1, r3
 8006fe6:	4a18      	ldr	r2, [pc, #96]	; (8007048 <takeMachineID+0x2a8>)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4413      	add	r3, r2
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	f000 fed6 	bl	8007da2 <lcd_print_char>

        	writeLoc++;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3301      	adds	r3, #1
 8007000:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	3301      	adds	r3, #1
 8007006:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8007008:	2096      	movs	r0, #150	; 0x96
 800700a:	f001 fc0b 	bl	8008824 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800700e:	2104      	movs	r1, #4
 8007010:	480f      	ldr	r0, [pc, #60]	; (8007050 <takeMachineID+0x2b0>)
 8007012:	f002 f9d7 	bl	80093c4 <HAL_GPIO_ReadPin>
 8007016:	4603      	mov	r3, r0
 8007018:	2b01      	cmp	r3, #1
 800701a:	d14c      	bne.n	80070b6 <takeMachineID+0x316>
            if(strlen(machineID) >= 1) {
 800701c:	4b0a      	ldr	r3, [pc, #40]	; (8007048 <takeMachineID+0x2a8>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d045      	beq.n	80070b0 <takeMachineID+0x310>
                machineID[arrayPos] = '\0';
 8007024:	4a08      	ldr	r2, [pc, #32]	; (8007048 <takeMachineID+0x2a8>)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4413      	add	r3, r2
 800702a:	2200      	movs	r2, #0
 800702c:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 800702e:	4a0c      	ldr	r2, [pc, #48]	; (8007060 <takeMachineID+0x2c0>)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	4413      	add	r3, r2
 8007034:	2200      	movs	r2, #0
 8007036:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b05      	cmp	r3, #5
 800703c:	dd16      	ble.n	800706c <takeMachineID+0x2cc>
                	writeLoc--;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3b01      	subs	r3, #1
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	e017      	b.n	8007076 <takeMachineID+0x2d6>
 8007046:	bf00      	nop
 8007048:	20000190 	.word	0x20000190
 800704c:	20000004 	.word	0x20000004
 8007050:	40010800 	.word	0x40010800
 8007054:	20000188 	.word	0x20000188
 8007058:	0800dd04 	.word	0x0800dd04
 800705c:	0800dd18 	.word	0x0800dd18
 8007060:	20000118 	.word	0x20000118
 8007064:	20000374 	.word	0x20000374
 8007068:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b04      	cmp	r3, #4
 8007070:	dc01      	bgt.n	8007076 <takeMachineID+0x2d6>
                	writeLoc = 5;
 8007072:	2305      	movs	r3, #5
 8007074:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	dd06      	ble.n	800708a <takeMachineID+0x2ea>
                	arrayPos--;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3b01      	subs	r3, #1
 8007080:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	3b01      	subs	r3, #1
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	e007      	b.n	800709a <takeMachineID+0x2fa>
                } else if(arrayPos < 0) {
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	da04      	bge.n	800709a <takeMachineID+0x2fa>
                	arrayPos = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007094:	4b0d      	ldr	r3, [pc, #52]	; (80070cc <takeMachineID+0x32c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	3304      	adds	r3, #4
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	4619      	mov	r1, r3
 80070a4:	2001      	movs	r0, #1
 80070a6:	f000 fe9d 	bl	8007de4 <lcd_delete_char>
                HAL_Delay(50);
 80070aa:	2032      	movs	r0, #50	; 0x32
 80070ac:	f001 fbba 	bl	8008824 <HAL_Delay>
            }

            HAL_Delay(150);
 80070b0:	2096      	movs	r0, #150	; 0x96
 80070b2:	f001 fbb7 	bl	8008824 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	4619      	mov	r1, r3
 80070bc:	2002      	movs	r0, #2
 80070be:	f000 fe3c 	bl	8007d3a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80070c2:	e685      	b.n	8006dd0 <takeMachineID+0x30>
    }
}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20000004 	.word	0x20000004

080070d0 <takeWifiSSID>:

void takeWifiSSID() {
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08a      	sub	sp, #40	; 0x28
 80070d4:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 80070d6:	2001      	movs	r0, #1
 80070d8:	f000 feac 	bl	8007e34 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80070dc:	2214      	movs	r2, #20
 80070de:	2100      	movs	r1, #0
 80070e0:	489c      	ldr	r0, [pc, #624]	; (8007354 <takeWifiSSID+0x284>)
 80070e2:	f005 fab3 	bl	800c64c <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80070e6:	2301      	movs	r3, #1
 80070e8:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80070ea:	2307      	movs	r3, #7
 80070ec:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80070ee:	2301      	movs	r3, #1
 80070f0:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80070f2:	2300      	movs	r3, #0
 80070f4:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80070f6:	4b98      	ldr	r3, [pc, #608]	; (8007358 <takeWifiSSID+0x288>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80070fc:	2101      	movs	r1, #1
 80070fe:	2002      	movs	r0, #2
 8007100:	f7f9 fef0 	bl	8000ee4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007104:	2108      	movs	r1, #8
 8007106:	4895      	ldr	r0, [pc, #596]	; (800735c <takeWifiSSID+0x28c>)
 8007108:	f002 f95c 	bl	80093c4 <HAL_GPIO_ReadPin>
 800710c:	4603      	mov	r3, r0
 800710e:	2b01      	cmp	r3, #1
 8007110:	d12b      	bne.n	800716a <takeWifiSSID+0x9a>
            lcd_cursor(0);
 8007112:	2000      	movs	r0, #0
 8007114:	f000 fe8e 	bl	8007e34 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8007118:	488e      	ldr	r0, [pc, #568]	; (8007354 <takeWifiSSID+0x284>)
 800711a:	f7f9 f883 	bl	8000224 <strlen>
 800711e:	4603      	mov	r3, r0
 8007120:	2b14      	cmp	r3, #20
 8007122:	d910      	bls.n	8007146 <takeWifiSSID+0x76>
                lcd_clear();
 8007124:	f000 fe54 	bl	8007dd0 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007128:	4a8d      	ldr	r2, [pc, #564]	; (8007360 <takeWifiSSID+0x290>)
 800712a:	2101      	movs	r1, #1
 800712c:	2001      	movs	r0, #1
 800712e:	f000 fe23 	bl	8007d78 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007132:	4a8c      	ldr	r2, [pc, #560]	; (8007364 <takeWifiSSID+0x294>)
 8007134:	2101      	movs	r1, #1
 8007136:	2002      	movs	r0, #2
 8007138:	f000 fe1e 	bl	8007d78 <lcd_print>
                HAL_Delay(1250);
 800713c:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007140:	f001 fb70 	bl	8008824 <HAL_Delay>
                goto mainSSIDSection;
 8007144:	e7c7      	b.n	80070d6 <takeWifiSSID+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007146:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800714a:	9302      	str	r3, [sp, #8]
 800714c:	236e      	movs	r3, #110	; 0x6e
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	4b85      	ldr	r3, [pc, #532]	; (8007368 <takeWifiSSID+0x298>)
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	236e      	movs	r3, #110	; 0x6e
 8007156:	2200      	movs	r2, #0
 8007158:	21a0      	movs	r1, #160	; 0xa0
 800715a:	4884      	ldr	r0, [pc, #528]	; (800736c <takeWifiSSID+0x29c>)
 800715c:	f002 fbec 	bl	8009938 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007164:	f001 fb5e 	bl	8008824 <HAL_Delay>

            	break;
 8007168:	e123      	b.n	80073b2 <takeWifiSSID+0x2e2>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800716a:	2101      	movs	r1, #1
 800716c:	487b      	ldr	r0, [pc, #492]	; (800735c <takeWifiSSID+0x28c>)
 800716e:	f002 f929 	bl	80093c4 <HAL_GPIO_ReadPin>
 8007172:	4603      	mov	r3, r0
 8007174:	2b01      	cmp	r3, #1
 8007176:	d14d      	bne.n	8007214 <takeWifiSSID+0x144>
        	if(cursorPosition > 80) {
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b50      	cmp	r3, #80	; 0x50
 800717c:	dd01      	ble.n	8007182 <takeWifiSSID+0xb2>
        		cursorPosition = 1;
 800717e:	2301      	movs	r3, #1
 8007180:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b10      	cmp	r3, #16
 8007186:	d13f      	bne.n	8007208 <takeWifiSSID+0x138>
            	if(page == 1) {
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d109      	bne.n	80071a2 <takeWifiSSID+0xd2>
            		cursorPosition = 1;
 800718e:	2301      	movs	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
            		page++;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	3301      	adds	r3, #1
 8007196:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007198:	2102      	movs	r1, #2
 800719a:	2002      	movs	r0, #2
 800719c:	f7f9 fea2 	bl	8000ee4 <printTemplate>
 80071a0:	e035      	b.n	800720e <takeWifiSSID+0x13e>
            	} else if(page == 2) {
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d109      	bne.n	80071bc <takeWifiSSID+0xec>
            		cursorPosition = 1;
 80071a8:	2301      	movs	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]
            		page++;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	3301      	adds	r3, #1
 80071b0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80071b2:	2103      	movs	r1, #3
 80071b4:	2002      	movs	r0, #2
 80071b6:	f7f9 fe95 	bl	8000ee4 <printTemplate>
 80071ba:	e028      	b.n	800720e <takeWifiSSID+0x13e>
            	} else if(page == 3) {
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d109      	bne.n	80071d6 <takeWifiSSID+0x106>
            		cursorPosition = 1;
 80071c2:	2301      	movs	r3, #1
 80071c4:	60fb      	str	r3, [r7, #12]
            		page++;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	3301      	adds	r3, #1
 80071ca:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 80071cc:	2104      	movs	r1, #4
 80071ce:	2002      	movs	r0, #2
 80071d0:	f7f9 fe88 	bl	8000ee4 <printTemplate>
 80071d4:	e01b      	b.n	800720e <takeWifiSSID+0x13e>
            	} else if(page == 4) {
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d109      	bne.n	80071f0 <takeWifiSSID+0x120>
            		cursorPosition = 1;
 80071dc:	2301      	movs	r3, #1
 80071de:	60fb      	str	r3, [r7, #12]
            		page++;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	3301      	adds	r3, #1
 80071e4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80071e6:	2105      	movs	r1, #5
 80071e8:	2002      	movs	r0, #2
 80071ea:	f7f9 fe7b 	bl	8000ee4 <printTemplate>
 80071ee:	e00e      	b.n	800720e <takeWifiSSID+0x13e>
            	} else if(page == 5) {
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b05      	cmp	r3, #5
 80071f4:	d10b      	bne.n	800720e <takeWifiSSID+0x13e>
            		cursorPosition = 1;
 80071f6:	2301      	movs	r3, #1
 80071f8:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80071fa:	2301      	movs	r3, #1
 80071fc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80071fe:	2101      	movs	r1, #1
 8007200:	2002      	movs	r0, #2
 8007202:	f7f9 fe6f 	bl	8000ee4 <printTemplate>
 8007206:	e002      	b.n	800720e <takeWifiSSID+0x13e>
            	}
            } else {
            	cursorPosition++;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3301      	adds	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800720e:	2096      	movs	r0, #150	; 0x96
 8007210:	f001 fb08 	bl	8008824 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007214:	2108      	movs	r1, #8
 8007216:	4856      	ldr	r0, [pc, #344]	; (8007370 <takeWifiSSID+0x2a0>)
 8007218:	f002 f8d4 	bl	80093c4 <HAL_GPIO_ReadPin>
 800721c:	4603      	mov	r3, r0
 800721e:	2b01      	cmp	r3, #1
 8007220:	d149      	bne.n	80072b6 <takeWifiSSID+0x1e6>
        	if(cursorPosition < 1) {
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	dc01      	bgt.n	800722c <takeWifiSSID+0x15c>
        		cursorPosition = 80;
 8007228:	2350      	movs	r3, #80	; 0x50
 800722a:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d13b      	bne.n	80072aa <takeWifiSSID+0x1da>
            	if(page == 1) {
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d108      	bne.n	800724a <takeWifiSSID+0x17a>
            		cursorPosition = 16;
 8007238:	2310      	movs	r3, #16
 800723a:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800723c:	2305      	movs	r3, #5
 800723e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007240:	2105      	movs	r1, #5
 8007242:	2002      	movs	r0, #2
 8007244:	f7f9 fe4e 	bl	8000ee4 <printTemplate>
 8007248:	e032      	b.n	80072b0 <takeWifiSSID+0x1e0>
            	} else if(page == 2) {
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d108      	bne.n	8007262 <takeWifiSSID+0x192>
            		cursorPosition = 16;
 8007250:	2310      	movs	r3, #16
 8007252:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007254:	2301      	movs	r3, #1
 8007256:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007258:	2101      	movs	r1, #1
 800725a:	2002      	movs	r0, #2
 800725c:	f7f9 fe42 	bl	8000ee4 <printTemplate>
 8007260:	e026      	b.n	80072b0 <takeWifiSSID+0x1e0>
            	} else if(page == 3) {
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b03      	cmp	r3, #3
 8007266:	d108      	bne.n	800727a <takeWifiSSID+0x1aa>
            		cursorPosition = 16;
 8007268:	2310      	movs	r3, #16
 800726a:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800726c:	2302      	movs	r3, #2
 800726e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007270:	2102      	movs	r1, #2
 8007272:	2002      	movs	r0, #2
 8007274:	f7f9 fe36 	bl	8000ee4 <printTemplate>
 8007278:	e01a      	b.n	80072b0 <takeWifiSSID+0x1e0>
            	} else if(page == 4) {
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b04      	cmp	r3, #4
 800727e:	d108      	bne.n	8007292 <takeWifiSSID+0x1c2>
            		cursorPosition = 16;
 8007280:	2310      	movs	r3, #16
 8007282:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007284:	2303      	movs	r3, #3
 8007286:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007288:	2103      	movs	r1, #3
 800728a:	2002      	movs	r0, #2
 800728c:	f7f9 fe2a 	bl	8000ee4 <printTemplate>
 8007290:	e00e      	b.n	80072b0 <takeWifiSSID+0x1e0>
            	} else if(page == 5) {
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b05      	cmp	r3, #5
 8007296:	d10b      	bne.n	80072b0 <takeWifiSSID+0x1e0>
            		cursorPosition = 16;
 8007298:	2310      	movs	r3, #16
 800729a:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800729c:	2304      	movs	r3, #4
 800729e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 80072a0:	2104      	movs	r1, #4
 80072a2:	2002      	movs	r0, #2
 80072a4:	f7f9 fe1e 	bl	8000ee4 <printTemplate>
 80072a8:	e002      	b.n	80072b0 <takeWifiSSID+0x1e0>
            	}
            } else {
            	cursorPosition--;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80072b0:	2096      	movs	r0, #150	; 0x96
 80072b2:	f001 fab7 	bl	8008824 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80072b6:	2102      	movs	r1, #2
 80072b8:	4828      	ldr	r0, [pc, #160]	; (800735c <takeWifiSSID+0x28c>)
 80072ba:	f002 f883 	bl	80093c4 <HAL_GPIO_ReadPin>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d121      	bne.n	8007308 <takeWifiSSID+0x238>
            eepromData[eepromVal] = cursorPosition;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	b2d9      	uxtb	r1, r3
 80072c8:	4a27      	ldr	r2, [pc, #156]	; (8007368 <takeWifiSSID+0x298>)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	460a      	mov	r2, r1
 80072d0:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	b2d9      	uxtb	r1, r3
 80072d6:	4a27      	ldr	r2, [pc, #156]	; (8007374 <takeWifiSSID+0x2a4>)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	2001      	movs	r0, #1
 80072e2:	f000 fd5e 	bl	8007da2 <lcd_print_char>

            writeLoc++;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	3301      	adds	r3, #1
 80072ea:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	3301      	adds	r3, #1
 80072f0:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3301      	adds	r3, #1
 80072f6:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80072f8:	4a1b      	ldr	r2, [pc, #108]	; (8007368 <takeWifiSSID+0x298>)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4413      	add	r3, r2
 80072fe:	2200      	movs	r2, #0
 8007300:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007302:	2096      	movs	r0, #150	; 0x96
 8007304:	f001 fa8e 	bl	8008824 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007308:	2104      	movs	r1, #4
 800730a:	4814      	ldr	r0, [pc, #80]	; (800735c <takeWifiSSID+0x28c>)
 800730c:	f002 f85a 	bl	80093c4 <HAL_GPIO_ReadPin>
 8007310:	4603      	mov	r3, r0
 8007312:	2b01      	cmp	r3, #1
 8007314:	d146      	bne.n	80073a4 <takeWifiSSID+0x2d4>
        	if(strlen(wifiSSID) >= 1) {
 8007316:	4b0f      	ldr	r3, [pc, #60]	; (8007354 <takeWifiSSID+0x284>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d03f      	beq.n	800739e <takeWifiSSID+0x2ce>
        		eepromData[eepromVal] = '\0';
 800731e:	4a12      	ldr	r2, [pc, #72]	; (8007368 <takeWifiSSID+0x298>)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4413      	add	r3, r2
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	2b07      	cmp	r3, #7
 800732c:	dd03      	ble.n	8007336 <takeWifiSSID+0x266>
        			writeLoc--;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	3b01      	subs	r3, #1
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	e004      	b.n	8007340 <takeWifiSSID+0x270>
        		} else if(writeLoc < 7) {
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	2b06      	cmp	r3, #6
 800733a:	dc01      	bgt.n	8007340 <takeWifiSSID+0x270>
        			writeLoc = 7;
 800733c:	2307      	movs	r3, #7
 800733e:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	dd18      	ble.n	8007378 <takeWifiSSID+0x2a8>
        			arrayPosition--;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	3b01      	subs	r3, #1
 800734a:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3b01      	subs	r3, #1
 8007350:	607b      	str	r3, [r7, #4]
 8007352:	e019      	b.n	8007388 <takeWifiSSID+0x2b8>
 8007354:	2000019c 	.word	0x2000019c
 8007358:	20000008 	.word	0x20000008
 800735c:	40010800 	.word	0x40010800
 8007360:	0800dd2c 	.word	0x0800dd2c
 8007364:	0800dd40 	.word	0x0800dd40
 8007368:	20000118 	.word	0x20000118
 800736c:	20000374 	.word	0x20000374
 8007370:	40011000 	.word	0x40011000
 8007374:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	da04      	bge.n	8007388 <takeWifiSSID+0x2b8>
        			arrayPosition = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007382:	4b0e      	ldr	r3, [pc, #56]	; (80073bc <takeWifiSSID+0x2ec>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	b2db      	uxtb	r3, r3
 800738c:	3306      	adds	r3, #6
 800738e:	b2db      	uxtb	r3, r3
 8007390:	4619      	mov	r1, r3
 8007392:	2001      	movs	r0, #1
 8007394:	f000 fd26 	bl	8007de4 <lcd_delete_char>
        		HAL_Delay(50);
 8007398:	2032      	movs	r0, #50	; 0x32
 800739a:	f001 fa43 	bl	8008824 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800739e:	2096      	movs	r0, #150	; 0x96
 80073a0:	f001 fa40 	bl	8008824 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	4619      	mov	r1, r3
 80073aa:	2002      	movs	r0, #2
 80073ac:	f000 fcc5 	bl	8007d3a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80073b0:	e6a8      	b.n	8007104 <takeWifiSSID+0x34>
    }
}
 80073b2:	bf00      	nop
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000008 	.word	0x20000008

080073c0 <takeWifiPass>:

void takeWifiPass() {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08a      	sub	sp, #40	; 0x28
 80073c4:	af04      	add	r7, sp, #16
	mainPassSection:

    lcd_cursor(1);
 80073c6:	2001      	movs	r0, #1
 80073c8:	f000 fd34 	bl	8007e34 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 80073cc:	2214      	movs	r2, #20
 80073ce:	2100      	movs	r1, #0
 80073d0:	489c      	ldr	r0, [pc, #624]	; (8007644 <takeWifiPass+0x284>)
 80073d2:	f005 f93b 	bl	800c64c <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80073d6:	2301      	movs	r3, #1
 80073d8:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80073da:	2307      	movs	r3, #7
 80073dc:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80073de:	2301      	movs	r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80073e2:	2300      	movs	r3, #0
 80073e4:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80073e6:	4b98      	ldr	r3, [pc, #608]	; (8007648 <takeWifiPass+0x288>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 80073ec:	2101      	movs	r1, #1
 80073ee:	2003      	movs	r0, #3
 80073f0:	f7f9 fd78 	bl	8000ee4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80073f4:	2108      	movs	r1, #8
 80073f6:	4895      	ldr	r0, [pc, #596]	; (800764c <takeWifiPass+0x28c>)
 80073f8:	f001 ffe4 	bl	80093c4 <HAL_GPIO_ReadPin>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d12b      	bne.n	800745a <takeWifiPass+0x9a>
            lcd_cursor(0);
 8007402:	2000      	movs	r0, #0
 8007404:	f000 fd16 	bl	8007e34 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8007408:	4891      	ldr	r0, [pc, #580]	; (8007650 <takeWifiPass+0x290>)
 800740a:	f7f8 ff0b 	bl	8000224 <strlen>
 800740e:	4603      	mov	r3, r0
 8007410:	2b14      	cmp	r3, #20
 8007412:	d910      	bls.n	8007436 <takeWifiPass+0x76>
                lcd_clear();
 8007414:	f000 fcdc 	bl	8007dd0 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007418:	4a8e      	ldr	r2, [pc, #568]	; (8007654 <takeWifiPass+0x294>)
 800741a:	2101      	movs	r1, #1
 800741c:	2001      	movs	r0, #1
 800741e:	f000 fcab 	bl	8007d78 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007422:	4a8d      	ldr	r2, [pc, #564]	; (8007658 <takeWifiPass+0x298>)
 8007424:	2101      	movs	r1, #1
 8007426:	2002      	movs	r0, #2
 8007428:	f000 fca6 	bl	8007d78 <lcd_print>
                HAL_Delay(1250);
 800742c:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007430:	f001 f9f8 	bl	8008824 <HAL_Delay>
                goto mainPassSection;
 8007434:	e7c7      	b.n	80073c6 <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007436:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800743a:	9302      	str	r3, [sp, #8]
 800743c:	236e      	movs	r3, #110	; 0x6e
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	4b86      	ldr	r3, [pc, #536]	; (800765c <takeWifiPass+0x29c>)
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	236e      	movs	r3, #110	; 0x6e
 8007446:	2200      	movs	r2, #0
 8007448:	21a0      	movs	r1, #160	; 0xa0
 800744a:	4885      	ldr	r0, [pc, #532]	; (8007660 <takeWifiPass+0x2a0>)
 800744c:	f002 fa74 	bl	8009938 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007450:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007454:	f001 f9e6 	bl	8008824 <HAL_Delay>

            	break;
 8007458:	e125      	b.n	80076a6 <takeWifiPass+0x2e6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800745a:	2101      	movs	r1, #1
 800745c:	487b      	ldr	r0, [pc, #492]	; (800764c <takeWifiPass+0x28c>)
 800745e:	f001 ffb1 	bl	80093c4 <HAL_GPIO_ReadPin>
 8007462:	4603      	mov	r3, r0
 8007464:	2b01      	cmp	r3, #1
 8007466:	d14d      	bne.n	8007504 <takeWifiPass+0x144>
        	if(cursorPosition > 80) {
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b50      	cmp	r3, #80	; 0x50
 800746c:	dd01      	ble.n	8007472 <takeWifiPass+0xb2>
        		cursorPosition = 1;
 800746e:	2301      	movs	r3, #1
 8007470:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b10      	cmp	r3, #16
 8007476:	d13f      	bne.n	80074f8 <takeWifiPass+0x138>
            	if(page == 1) {
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d109      	bne.n	8007492 <takeWifiPass+0xd2>
            		cursorPosition = 1;
 800747e:	2301      	movs	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
            		page++;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	3301      	adds	r3, #1
 8007486:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007488:	2102      	movs	r1, #2
 800748a:	2003      	movs	r0, #3
 800748c:	f7f9 fd2a 	bl	8000ee4 <printTemplate>
 8007490:	e035      	b.n	80074fe <takeWifiPass+0x13e>
            	} else if(page == 2) {
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2b02      	cmp	r3, #2
 8007496:	d109      	bne.n	80074ac <takeWifiPass+0xec>
            		cursorPosition = 1;
 8007498:	2301      	movs	r3, #1
 800749a:	60fb      	str	r3, [r7, #12]
            		page++;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	3301      	adds	r3, #1
 80074a0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80074a2:	2103      	movs	r1, #3
 80074a4:	2003      	movs	r0, #3
 80074a6:	f7f9 fd1d 	bl	8000ee4 <printTemplate>
 80074aa:	e028      	b.n	80074fe <takeWifiPass+0x13e>
            	} else if(page == 3) {
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d109      	bne.n	80074c6 <takeWifiPass+0x106>
            		cursorPosition = 1;
 80074b2:	2301      	movs	r3, #1
 80074b4:	60fb      	str	r3, [r7, #12]
            		page++;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	3301      	adds	r3, #1
 80074ba:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80074bc:	2104      	movs	r1, #4
 80074be:	2003      	movs	r0, #3
 80074c0:	f7f9 fd10 	bl	8000ee4 <printTemplate>
 80074c4:	e01b      	b.n	80074fe <takeWifiPass+0x13e>
            	} else if(page == 4) {
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b04      	cmp	r3, #4
 80074ca:	d109      	bne.n	80074e0 <takeWifiPass+0x120>
            		cursorPosition = 1;
 80074cc:	2301      	movs	r3, #1
 80074ce:	60fb      	str	r3, [r7, #12]
            		page++;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	3301      	adds	r3, #1
 80074d4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80074d6:	2105      	movs	r1, #5
 80074d8:	2003      	movs	r0, #3
 80074da:	f7f9 fd03 	bl	8000ee4 <printTemplate>
 80074de:	e00e      	b.n	80074fe <takeWifiPass+0x13e>
            	} else if(page == 5) {
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	2b05      	cmp	r3, #5
 80074e4:	d10b      	bne.n	80074fe <takeWifiPass+0x13e>
            		cursorPosition = 1;
 80074e6:	2301      	movs	r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80074ea:	2301      	movs	r3, #1
 80074ec:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80074ee:	2101      	movs	r1, #1
 80074f0:	2003      	movs	r0, #3
 80074f2:	f7f9 fcf7 	bl	8000ee4 <printTemplate>
 80074f6:	e002      	b.n	80074fe <takeWifiPass+0x13e>
            	}
            } else {
            	cursorPosition++;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	3301      	adds	r3, #1
 80074fc:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80074fe:	2096      	movs	r0, #150	; 0x96
 8007500:	f001 f990 	bl	8008824 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007504:	2108      	movs	r1, #8
 8007506:	4857      	ldr	r0, [pc, #348]	; (8007664 <takeWifiPass+0x2a4>)
 8007508:	f001 ff5c 	bl	80093c4 <HAL_GPIO_ReadPin>
 800750c:	4603      	mov	r3, r0
 800750e:	2b01      	cmp	r3, #1
 8007510:	d149      	bne.n	80075a6 <takeWifiPass+0x1e6>
        	if(cursorPosition < 1) {
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dc01      	bgt.n	800751c <takeWifiPass+0x15c>
        		cursorPosition = 80;
 8007518:	2350      	movs	r3, #80	; 0x50
 800751a:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d13b      	bne.n	800759a <takeWifiPass+0x1da>
            	if(page == 1) {
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d108      	bne.n	800753a <takeWifiPass+0x17a>
            		cursorPosition = 16;
 8007528:	2310      	movs	r3, #16
 800752a:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800752c:	2305      	movs	r3, #5
 800752e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007530:	2105      	movs	r1, #5
 8007532:	2003      	movs	r0, #3
 8007534:	f7f9 fcd6 	bl	8000ee4 <printTemplate>
 8007538:	e032      	b.n	80075a0 <takeWifiPass+0x1e0>
            	} else if(page == 2) {
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b02      	cmp	r3, #2
 800753e:	d108      	bne.n	8007552 <takeWifiPass+0x192>
            		cursorPosition = 16;
 8007540:	2310      	movs	r3, #16
 8007542:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007544:	2301      	movs	r3, #1
 8007546:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007548:	2101      	movs	r1, #1
 800754a:	2003      	movs	r0, #3
 800754c:	f7f9 fcca 	bl	8000ee4 <printTemplate>
 8007550:	e026      	b.n	80075a0 <takeWifiPass+0x1e0>
            	} else if(page == 3) {
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2b03      	cmp	r3, #3
 8007556:	d108      	bne.n	800756a <takeWifiPass+0x1aa>
            		cursorPosition = 16;
 8007558:	2310      	movs	r3, #16
 800755a:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800755c:	2302      	movs	r3, #2
 800755e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007560:	2102      	movs	r1, #2
 8007562:	2003      	movs	r0, #3
 8007564:	f7f9 fcbe 	bl	8000ee4 <printTemplate>
 8007568:	e01a      	b.n	80075a0 <takeWifiPass+0x1e0>
            	} else if(page == 4) {
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b04      	cmp	r3, #4
 800756e:	d108      	bne.n	8007582 <takeWifiPass+0x1c2>
            		cursorPosition = 16;
 8007570:	2310      	movs	r3, #16
 8007572:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007574:	2303      	movs	r3, #3
 8007576:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007578:	2103      	movs	r1, #3
 800757a:	2003      	movs	r0, #3
 800757c:	f7f9 fcb2 	bl	8000ee4 <printTemplate>
 8007580:	e00e      	b.n	80075a0 <takeWifiPass+0x1e0>
            	} else if(page == 5) {
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b05      	cmp	r3, #5
 8007586:	d10b      	bne.n	80075a0 <takeWifiPass+0x1e0>
            		cursorPosition = 16;
 8007588:	2310      	movs	r3, #16
 800758a:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800758c:	2304      	movs	r3, #4
 800758e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007590:	2104      	movs	r1, #4
 8007592:	2003      	movs	r0, #3
 8007594:	f7f9 fca6 	bl	8000ee4 <printTemplate>
 8007598:	e002      	b.n	80075a0 <takeWifiPass+0x1e0>
            	}
            } else {
            	cursorPosition--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3b01      	subs	r3, #1
 800759e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80075a0:	2096      	movs	r0, #150	; 0x96
 80075a2:	f001 f93f 	bl	8008824 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80075a6:	2102      	movs	r1, #2
 80075a8:	4828      	ldr	r0, [pc, #160]	; (800764c <takeWifiPass+0x28c>)
 80075aa:	f001 ff0b 	bl	80093c4 <HAL_GPIO_ReadPin>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d121      	bne.n	80075f8 <takeWifiPass+0x238>
            eepromData[eepromVal] = cursorPosition;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	b2d9      	uxtb	r1, r3
 80075b8:	4a28      	ldr	r2, [pc, #160]	; (800765c <takeWifiPass+0x29c>)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4413      	add	r3, r2
 80075be:	460a      	mov	r2, r1
 80075c0:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	b2d9      	uxtb	r1, r3
 80075c6:	4a28      	ldr	r2, [pc, #160]	; (8007668 <takeWifiPass+0x2a8>)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4413      	add	r3, r2
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	2001      	movs	r0, #1
 80075d2:	f000 fbe6 	bl	8007da2 <lcd_print_char>

            writeLoc++;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	3301      	adds	r3, #1
 80075da:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	3301      	adds	r3, #1
 80075e0:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3301      	adds	r3, #1
 80075e6:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80075e8:	4a1c      	ldr	r2, [pc, #112]	; (800765c <takeWifiPass+0x29c>)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4413      	add	r3, r2
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80075f2:	2096      	movs	r0, #150	; 0x96
 80075f4:	f001 f916 	bl	8008824 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80075f8:	2104      	movs	r1, #4
 80075fa:	4814      	ldr	r0, [pc, #80]	; (800764c <takeWifiPass+0x28c>)
 80075fc:	f001 fee2 	bl	80093c4 <HAL_GPIO_ReadPin>
 8007600:	4603      	mov	r3, r0
 8007602:	2b01      	cmp	r3, #1
 8007604:	d148      	bne.n	8007698 <takeWifiPass+0x2d8>
        	if(strlen(wifiSSID) >= 1) {
 8007606:	4b12      	ldr	r3, [pc, #72]	; (8007650 <takeWifiPass+0x290>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d041      	beq.n	8007692 <takeWifiPass+0x2d2>
        		eepromData[eepromVal] = '\0';
 800760e:	4a13      	ldr	r2, [pc, #76]	; (800765c <takeWifiPass+0x29c>)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4413      	add	r3, r2
 8007614:	2200      	movs	r2, #0
 8007616:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	2b07      	cmp	r3, #7
 800761c:	dd03      	ble.n	8007626 <takeWifiPass+0x266>
        			writeLoc--;
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	3b01      	subs	r3, #1
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	e004      	b.n	8007630 <takeWifiPass+0x270>
        		} else if(writeLoc < 7) {
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	2b06      	cmp	r3, #6
 800762a:	dc01      	bgt.n	8007630 <takeWifiPass+0x270>
        			writeLoc = 7;
 800762c:	2307      	movs	r3, #7
 800762e:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	dd1a      	ble.n	800766c <takeWifiPass+0x2ac>
        			arrayPosition--;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	3b01      	subs	r3, #1
 800763a:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3b01      	subs	r3, #1
 8007640:	607b      	str	r3, [r7, #4]
 8007642:	e01b      	b.n	800767c <takeWifiPass+0x2bc>
 8007644:	200001b0 	.word	0x200001b0
 8007648:	2000000c 	.word	0x2000000c
 800764c:	40010800 	.word	0x40010800
 8007650:	2000019c 	.word	0x2000019c
 8007654:	0800dd2c 	.word	0x0800dd2c
 8007658:	0800dd40 	.word	0x0800dd40
 800765c:	20000118 	.word	0x20000118
 8007660:	20000374 	.word	0x20000374
 8007664:	40011000 	.word	0x40011000
 8007668:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	da04      	bge.n	800767c <takeWifiPass+0x2bc>
        			arrayPosition = 0;
 8007672:	2300      	movs	r3, #0
 8007674:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8007676:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <takeWifiPass+0x2f0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	b2db      	uxtb	r3, r3
 8007680:	3306      	adds	r3, #6
 8007682:	b2db      	uxtb	r3, r3
 8007684:	4619      	mov	r1, r3
 8007686:	2001      	movs	r0, #1
 8007688:	f000 fbac 	bl	8007de4 <lcd_delete_char>
        		HAL_Delay(50);
 800768c:	2032      	movs	r0, #50	; 0x32
 800768e:	f001 f8c9 	bl	8008824 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007692:	2096      	movs	r0, #150	; 0x96
 8007694:	f001 f8c6 	bl	8008824 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	b2db      	uxtb	r3, r3
 800769c:	4619      	mov	r1, r3
 800769e:	2002      	movs	r0, #2
 80076a0:	f000 fb4b 	bl	8007d3a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80076a4:	e6a6      	b.n	80073f4 <takeWifiPass+0x34>
    }
}
 80076a6:	bf00      	nop
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	2000000c 	.word	0x2000000c

080076b4 <mergeData>:

char* mergeData() {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b09c      	sub	sp, #112	; 0x70
 80076b8:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 80076ba:	2300      	movs	r3, #0
 80076bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076c2:	2228      	movs	r2, #40	; 0x28
 80076c4:	2100      	movs	r1, #0
 80076c6:	4618      	mov	r0, r3
 80076c8:	f004 ffc0 	bl	800c64c <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80076cc:	4b67      	ldr	r3, [pc, #412]	; (800786c <mergeData+0x1b8>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	713b      	strb	r3, [r7, #4]
 80076d2:	4b67      	ldr	r3, [pc, #412]	; (8007870 <mergeData+0x1bc>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	717b      	strb	r3, [r7, #5]
 80076d8:	4b66      	ldr	r3, [pc, #408]	; (8007874 <mergeData+0x1c0>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	71bb      	strb	r3, [r7, #6]
 80076de:	4b66      	ldr	r3, [pc, #408]	; (8007878 <mergeData+0x1c4>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	71fb      	strb	r3, [r7, #7]
 80076e4:	4b65      	ldr	r3, [pc, #404]	; (800787c <mergeData+0x1c8>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	723b      	strb	r3, [r7, #8]
 80076ea:	4b65      	ldr	r3, [pc, #404]	; (8007880 <mergeData+0x1cc>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	727b      	strb	r3, [r7, #9]
 80076f0:	4b64      	ldr	r3, [pc, #400]	; (8007884 <mergeData+0x1d0>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	72bb      	strb	r3, [r7, #10]
 80076f6:	4b64      	ldr	r3, [pc, #400]	; (8007888 <mergeData+0x1d4>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	72fb      	strb	r3, [r7, #11]
 80076fc:	4b63      	ldr	r3, [pc, #396]	; (800788c <mergeData+0x1d8>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	733b      	strb	r3, [r7, #12]
 8007702:	4b63      	ldr	r3, [pc, #396]	; (8007890 <mergeData+0x1dc>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	737b      	strb	r3, [r7, #13]
 8007708:	4b62      	ldr	r3, [pc, #392]	; (8007894 <mergeData+0x1e0>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	73bb      	strb	r3, [r7, #14]
 800770e:	4b62      	ldr	r3, [pc, #392]	; (8007898 <mergeData+0x1e4>)
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	73fb      	strb	r3, [r7, #15]
 8007714:	4b61      	ldr	r3, [pc, #388]	; (800789c <mergeData+0x1e8>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	743b      	strb	r3, [r7, #16]
 800771a:	4b61      	ldr	r3, [pc, #388]	; (80078a0 <mergeData+0x1ec>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	747b      	strb	r3, [r7, #17]
 8007720:	4b60      	ldr	r3, [pc, #384]	; (80078a4 <mergeData+0x1f0>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	74bb      	strb	r3, [r7, #18]
 8007726:	4b60      	ldr	r3, [pc, #384]	; (80078a8 <mergeData+0x1f4>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	74fb      	strb	r3, [r7, #19]
 800772c:	4b5f      	ldr	r3, [pc, #380]	; (80078ac <mergeData+0x1f8>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	753b      	strb	r3, [r7, #20]
 8007732:	4b5f      	ldr	r3, [pc, #380]	; (80078b0 <mergeData+0x1fc>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	757b      	strb	r3, [r7, #21]
 8007738:	4b5e      	ldr	r3, [pc, #376]	; (80078b4 <mergeData+0x200>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	75bb      	strb	r3, [r7, #22]
 800773e:	4b5e      	ldr	r3, [pc, #376]	; (80078b8 <mergeData+0x204>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	75fb      	strb	r3, [r7, #23]
 8007744:	4b5d      	ldr	r3, [pc, #372]	; (80078bc <mergeData+0x208>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	763b      	strb	r3, [r7, #24]
 800774a:	4b5d      	ldr	r3, [pc, #372]	; (80078c0 <mergeData+0x20c>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	767b      	strb	r3, [r7, #25]
 8007750:	4b5c      	ldr	r3, [pc, #368]	; (80078c4 <mergeData+0x210>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	76bb      	strb	r3, [r7, #26]
 8007756:	4b5c      	ldr	r3, [pc, #368]	; (80078c8 <mergeData+0x214>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	76fb      	strb	r3, [r7, #27]
 800775c:	4b5b      	ldr	r3, [pc, #364]	; (80078cc <mergeData+0x218>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	773b      	strb	r3, [r7, #28]
 8007762:	4b5b      	ldr	r3, [pc, #364]	; (80078d0 <mergeData+0x21c>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	777b      	strb	r3, [r7, #29]
 8007768:	4b5a      	ldr	r3, [pc, #360]	; (80078d4 <mergeData+0x220>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	77bb      	strb	r3, [r7, #30]
 800776e:	4b5a      	ldr	r3, [pc, #360]	; (80078d8 <mergeData+0x224>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	77fb      	strb	r3, [r7, #31]
 8007774:	4b59      	ldr	r3, [pc, #356]	; (80078dc <mergeData+0x228>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	f887 3020 	strb.w	r3, [r7, #32]
 800777c:	4b58      	ldr	r3, [pc, #352]	; (80078e0 <mergeData+0x22c>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007784:	4b57      	ldr	r3, [pc, #348]	; (80078e4 <mergeData+0x230>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800778c:	4b56      	ldr	r3, [pc, #344]	; (80078e8 <mergeData+0x234>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007794:	4b55      	ldr	r3, [pc, #340]	; (80078ec <mergeData+0x238>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 800779c:	4b54      	ldr	r3, [pc, #336]	; (80078f0 <mergeData+0x23c>)
 800779e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80077a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 80077a6:	4b52      	ldr	r3, [pc, #328]	; (80078f0 <mergeData+0x23c>)
 80077a8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80077ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 80077b0:	4b4f      	ldr	r3, [pc, #316]	; (80078f0 <mergeData+0x23c>)
 80077b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80077b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 80077ba:	4b4d      	ldr	r3, [pc, #308]	; (80078f0 <mergeData+0x23c>)
 80077bc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80077c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 80077c4:	4b4a      	ldr	r3, [pc, #296]	; (80078f0 <mergeData+0x23c>)
 80077c6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80077ca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 80077ce:	4b48      	ldr	r3, [pc, #288]	; (80078f0 <mergeData+0x23c>)
 80077d0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80077d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 80077d8:	4b45      	ldr	r3, [pc, #276]	; (80078f0 <mergeData+0x23c>)
 80077da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80077de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 80077e2:	4b43      	ldr	r3, [pc, #268]	; (80078f0 <mergeData+0x23c>)
 80077e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80077e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 80077ec:	4b40      	ldr	r3, [pc, #256]	; (80078f0 <mergeData+0x23c>)
 80077ee:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80077f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 80077f6:	4b3e      	ldr	r3, [pc, #248]	; (80078f0 <mergeData+0x23c>)
 80077f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80077fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007800:	2306      	movs	r3, #6
 8007802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007806:	2300      	movs	r3, #0
 8007808:	66fb      	str	r3, [r7, #108]	; 0x6c
 800780a:	e015      	b.n	8007838 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 800780c:	1d3a      	adds	r2, r7, #4
 800780e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007810:	4413      	add	r3, r2
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800781a:	4936      	ldr	r1, [pc, #216]	; (80078f4 <mergeData+0x240>)
 800781c:	4618      	mov	r0, r3
 800781e:	f004 fef5 	bl	800c60c <siprintf>
	    strcat(combinedString, temp);
 8007822:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007826:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800782a:	4611      	mov	r1, r2
 800782c:	4618      	mov	r0, r3
 800782e:	f004 ff15 	bl	800c65c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007834:	3301      	adds	r3, #1
 8007836:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800783a:	2b2b      	cmp	r3, #43	; 0x2b
 800783c:	d9e6      	bls.n	800780c <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800783e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007842:	4618      	mov	r0, r3
 8007844:	f7f8 fcee 	bl	8000224 <strlen>
 8007848:	4603      	mov	r3, r0
 800784a:	3301      	adds	r3, #1
 800784c:	4618      	mov	r0, r3
 800784e:	f004 fde7 	bl	800c420 <malloc>
 8007852:	4603      	mov	r3, r0
 8007854:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 8007856:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800785a:	4619      	mov	r1, r3
 800785c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800785e:	f004 ff49 	bl	800c6f4 <strcpy>
	return result;
 8007862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8007864:	4618      	mov	r0, r3
 8007866:	3770      	adds	r7, #112	; 0x70
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	200001fb 	.word	0x200001fb
 8007870:	200001ed 	.word	0x200001ed
 8007874:	200001f0 	.word	0x200001f0
 8007878:	200001f1 	.word	0x200001f1
 800787c:	200001f2 	.word	0x200001f2
 8007880:	200001f9 	.word	0x200001f9
 8007884:	200001f3 	.word	0x200001f3
 8007888:	200001f4 	.word	0x200001f4
 800788c:	200001f8 	.word	0x200001f8
 8007890:	200001f5 	.word	0x200001f5
 8007894:	20000205 	.word	0x20000205
 8007898:	200001f6 	.word	0x200001f6
 800789c:	20000206 	.word	0x20000206
 80078a0:	200001f7 	.word	0x200001f7
 80078a4:	20000207 	.word	0x20000207
 80078a8:	200001fa 	.word	0x200001fa
 80078ac:	200001fc 	.word	0x200001fc
 80078b0:	200001fd 	.word	0x200001fd
 80078b4:	200001fe 	.word	0x200001fe
 80078b8:	200001ff 	.word	0x200001ff
 80078bc:	20000200 	.word	0x20000200
 80078c0:	20000201 	.word	0x20000201
 80078c4:	20000202 	.word	0x20000202
 80078c8:	20000203 	.word	0x20000203
 80078cc:	20000204 	.word	0x20000204
 80078d0:	20000208 	.word	0x20000208
 80078d4:	2000020a 	.word	0x2000020a
 80078d8:	200001e9 	.word	0x200001e9
 80078dc:	200001ea 	.word	0x200001ea
 80078e0:	20000000 	.word	0x20000000
 80078e4:	20000001 	.word	0x20000001
 80078e8:	200001eb 	.word	0x200001eb
 80078ec:	2000020d 	.word	0x2000020d
 80078f0:	20000118 	.word	0x20000118
 80078f4:	0800dd54 	.word	0x0800dd54

080078f8 <convertAndSendData>:

void convertAndSendData() {
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af02      	add	r7, sp, #8
	if(dilSecim == 0) {
 80078fe:	4b1b      	ldr	r3, [pc, #108]	; (800796c <convertAndSendData+0x74>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10a      	bne.n	800791c <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007906:	4a1a      	ldr	r2, [pc, #104]	; (8007970 <convertAndSendData+0x78>)
 8007908:	2101      	movs	r1, #1
 800790a:	2001      	movs	r0, #1
 800790c:	f000 fa34 	bl	8007d78 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007910:	4a18      	ldr	r2, [pc, #96]	; (8007974 <convertAndSendData+0x7c>)
 8007912:	2101      	movs	r1, #1
 8007914:	2002      	movs	r0, #2
 8007916:	f000 fa2f 	bl	8007d78 <lcd_print>
 800791a:	e009      	b.n	8007930 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 800791c:	4a16      	ldr	r2, [pc, #88]	; (8007978 <convertAndSendData+0x80>)
 800791e:	2101      	movs	r1, #1
 8007920:	2001      	movs	r0, #1
 8007922:	f000 fa29 	bl	8007d78 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007926:	4a15      	ldr	r2, [pc, #84]	; (800797c <convertAndSendData+0x84>)
 8007928:	2101      	movs	r1, #1
 800792a:	2002      	movs	r0, #2
 800792c:	f000 fa24 	bl	8007d78 <lcd_print>
	}

	lcd_print(1, 1, machineID);
 8007930:	4a13      	ldr	r2, [pc, #76]	; (8007980 <convertAndSendData+0x88>)
 8007932:	2101      	movs	r1, #1
 8007934:	2001      	movs	r0, #1
 8007936:	f000 fa1f 	bl	8007d78 <lcd_print>
	lcd_print(2, 1, wifiSSID);
 800793a:	4a12      	ldr	r2, [pc, #72]	; (8007984 <convertAndSendData+0x8c>)
 800793c:	2101      	movs	r1, #1
 800793e:	2002      	movs	r0, #2
 8007940:	f000 fa1a 	bl	8007d78 <lcd_print>
	sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8007944:	f7ff feb6 	bl	80076b4 <mergeData>
 8007948:	4603      	mov	r3, r0
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	4b0e      	ldr	r3, [pc, #56]	; (8007988 <convertAndSendData+0x90>)
 800794e:	4a0d      	ldr	r2, [pc, #52]	; (8007984 <convertAndSendData+0x8c>)
 8007950:	490b      	ldr	r1, [pc, #44]	; (8007980 <convertAndSendData+0x88>)
 8007952:	480e      	ldr	r0, [pc, #56]	; (800798c <convertAndSendData+0x94>)
 8007954:	f7f9 f82a 	bl	80009ac <sendMachineData>

	HAL_Delay(500);
 8007958:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800795c:	f000 ff62 	bl	8008824 <HAL_Delay>
	lcd_clear();
 8007960:	f000 fa36 	bl	8007dd0 <lcd_clear>
}
 8007964:	bf00      	nop
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	2000020d 	.word	0x2000020d
 8007970:	0800dd58 	.word	0x0800dd58
 8007974:	0800dd6c 	.word	0x0800dd6c
 8007978:	0800dd80 	.word	0x0800dd80
 800797c:	0800dd94 	.word	0x0800dd94
 8007980:	20000190 	.word	0x20000190
 8007984:	2000019c 	.word	0x2000019c
 8007988:	200001b0 	.word	0x200001b0
 800798c:	20000410 	.word	0x20000410

08007990 <iotSetup>:

void iotSetup() {
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007994:	4b13      	ldr	r3, [pc, #76]	; (80079e4 <iotSetup+0x54>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d016      	beq.n	80079ca <iotSetup+0x3a>
		if(checkEEPROM4ID() != 1) {
 800799c:	f000 f82e 	bl	80079fc <checkEEPROM4ID>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d001      	beq.n	80079aa <iotSetup+0x1a>
			takeMachineID();
 80079a6:	f7ff f9fb 	bl	8006da0 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 80079aa:	480f      	ldr	r0, [pc, #60]	; (80079e8 <iotSetup+0x58>)
 80079ac:	f7f8 fc3a 	bl	8000224 <strlen>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d801      	bhi.n	80079ba <iotSetup+0x2a>
			takeWifiSSID();
 80079b6:	f7ff fb8b 	bl	80070d0 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 80079ba:	480c      	ldr	r0, [pc, #48]	; (80079ec <iotSetup+0x5c>)
 80079bc:	f7f8 fc32 	bl	8000224 <strlen>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d801      	bhi.n	80079ca <iotSetup+0x3a>
			takeWifiPass();
 80079c6:	f7ff fcfb 	bl	80073c0 <takeWifiPass>
			HAL_Delay(200);
			goto takeIDSection;
		}
	}*/

	ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 80079ca:	4a09      	ldr	r2, [pc, #36]	; (80079f0 <iotSetup+0x60>)
 80079cc:	4909      	ldr	r1, [pc, #36]	; (80079f4 <iotSetup+0x64>)
 80079ce:	480a      	ldr	r0, [pc, #40]	; (80079f8 <iotSetup+0x68>)
 80079d0:	f7f8 ff42 	bl	8000858 <ESP8266_Init>
	HAL_Delay(500);
 80079d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079d8:	f000 ff24 	bl	8008824 <HAL_Delay>
	convertAndSendData();
 80079dc:	f7ff ff8c 	bl	80078f8 <convertAndSendData>
}
 80079e0:	bf00      	nop
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	2000020b 	.word	0x2000020b
 80079e8:	2000019c 	.word	0x2000019c
 80079ec:	200001b0 	.word	0x200001b0
 80079f0:	0800dda8 	.word	0x0800dda8
 80079f4:	0800ddc0 	.word	0x0800ddc0
 80079f8:	20000410 	.word	0x20000410

080079fc <checkEEPROM4ID>:

int checkEEPROM4ID() {
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8007a02:	4b0f      	ldr	r3, [pc, #60]	; (8007a40 <checkEEPROM4ID+0x44>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	607b      	str	r3, [r7, #4]
 8007a10:	e00d      	b.n	8007a2e <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8007a12:	4a0c      	ldr	r2, [pc, #48]	; (8007a44 <checkEEPROM4ID+0x48>)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4413      	add	r3, r2
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <checkEEPROM4ID+0x26>
			returnVal = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3301      	adds	r3, #1
 8007a26:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	607b      	str	r3, [r7, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b0b      	cmp	r3, #11
 8007a32:	ddee      	ble.n	8007a12 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8007a34:	68bb      	ldr	r3, [r7, #8]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bc80      	pop	{r7}
 8007a3e:	4770      	bx	lr
 8007a40:	20000004 	.word	0x20000004
 8007a44:	20000118 	.word	0x20000118

08007a48 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af02      	add	r7, sp, #8
 8007a4e:	4603      	mov	r3, r0
 8007a50:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	f023 030f 	bic.w	r3, r3, #15
 8007a58:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	011b      	lsls	r3, r3, #4
 8007a5e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007a60:	7b7b      	ldrb	r3, [r7, #13]
 8007a62:	f043 030c 	orr.w	r3, r3, #12
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007a6a:	7b7b      	ldrb	r3, [r7, #13]
 8007a6c:	f043 0308 	orr.w	r3, r3, #8
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007a74:	7b3b      	ldrb	r3, [r7, #12]
 8007a76:	f043 030c 	orr.w	r3, r3, #12
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007a7e:	7b3b      	ldrb	r3, [r7, #12]
 8007a80:	f043 0308 	orr.w	r3, r3, #8
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a88:	bf00      	nop
 8007a8a:	4825      	ldr	r0, [pc, #148]	; (8007b20 <lcd_send_cmd+0xd8>)
 8007a8c:	f002 fac3 	bl	800a016 <HAL_I2C_GetError>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d0f9      	beq.n	8007a8a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a96:	bf00      	nop
 8007a98:	4821      	ldr	r0, [pc, #132]	; (8007b20 <lcd_send_cmd+0xd8>)
 8007a9a:	f002 faaf 	bl	8009ffc <HAL_I2C_GetState>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b20      	cmp	r3, #32
 8007aa2:	d1f9      	bne.n	8007a98 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007aa4:	4b1f      	ldr	r3, [pc, #124]	; (8007b24 <lcd_send_cmd+0xdc>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d116      	bne.n	8007ada <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007aac:	2300      	movs	r3, #0
 8007aae:	73fb      	strb	r3, [r7, #15]
 8007ab0:	e00f      	b.n	8007ad2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	3310      	adds	r3, #16
 8007ab6:	443b      	add	r3, r7
 8007ab8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	f022 0208 	bic.w	r2, r2, #8
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	3310      	adds	r3, #16
 8007ac6:	443b      	add	r3, r7
 8007ac8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	73fb      	strb	r3, [r7, #15]
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d9ec      	bls.n	8007ab2 <lcd_send_cmd+0x6a>
 8007ad8:	e015      	b.n	8007b06 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007ada:	2300      	movs	r3, #0
 8007adc:	73bb      	strb	r3, [r7, #14]
 8007ade:	e00f      	b.n	8007b00 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	3310      	adds	r3, #16
 8007ae4:	443b      	add	r3, r7
 8007ae6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
 8007aec:	f042 0208 	orr.w	r2, r2, #8
 8007af0:	b2d2      	uxtb	r2, r2
 8007af2:	3310      	adds	r3, #16
 8007af4:	443b      	add	r3, r7
 8007af6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	3301      	adds	r3, #1
 8007afe:	73bb      	strb	r3, [r7, #14]
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d9ec      	bls.n	8007ae0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007b06:	f107 0208 	add.w	r2, r7, #8
 8007b0a:	2364      	movs	r3, #100	; 0x64
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	2304      	movs	r3, #4
 8007b10:	214e      	movs	r1, #78	; 0x4e
 8007b12:	4803      	ldr	r0, [pc, #12]	; (8007b20 <lcd_send_cmd+0xd8>)
 8007b14:	f001 fe12 	bl	800973c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007b18:	bf00      	nop
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20000374 	.word	0x20000374
 8007b24:	2000034a 	.word	0x2000034a

08007b28 <lcd_send_data>:

void lcd_send_data (char data) {
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af02      	add	r7, sp, #8
 8007b2e:	4603      	mov	r3, r0
 8007b30:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	f023 030f 	bic.w	r3, r3, #15
 8007b38:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007b40:	7b7b      	ldrb	r3, [r7, #13]
 8007b42:	f043 030d 	orr.w	r3, r3, #13
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007b4a:	7b7b      	ldrb	r3, [r7, #13]
 8007b4c:	f043 0309 	orr.w	r3, r3, #9
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007b54:	7b3b      	ldrb	r3, [r7, #12]
 8007b56:	f043 030d 	orr.w	r3, r3, #13
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007b5e:	7b3b      	ldrb	r3, [r7, #12]
 8007b60:	f043 0309 	orr.w	r3, r3, #9
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b68:	bf00      	nop
 8007b6a:	4825      	ldr	r0, [pc, #148]	; (8007c00 <lcd_send_data+0xd8>)
 8007b6c:	f002 fa53 	bl	800a016 <HAL_I2C_GetError>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d0f9      	beq.n	8007b6a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b76:	bf00      	nop
 8007b78:	4821      	ldr	r0, [pc, #132]	; (8007c00 <lcd_send_data+0xd8>)
 8007b7a:	f002 fa3f 	bl	8009ffc <HAL_I2C_GetState>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b20      	cmp	r3, #32
 8007b82:	d1f9      	bne.n	8007b78 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007b84:	4b1f      	ldr	r3, [pc, #124]	; (8007c04 <lcd_send_data+0xdc>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d116      	bne.n	8007bba <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	73fb      	strb	r3, [r7, #15]
 8007b90:	e00f      	b.n	8007bb2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
 8007b94:	3310      	adds	r3, #16
 8007b96:	443b      	add	r3, r7
 8007b98:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	f022 0208 	bic.w	r2, r2, #8
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	3310      	adds	r3, #16
 8007ba6:	443b      	add	r3, r7
 8007ba8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	73fb      	strb	r3, [r7, #15]
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d9ec      	bls.n	8007b92 <lcd_send_data+0x6a>
 8007bb8:	e015      	b.n	8007be6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73bb      	strb	r3, [r7, #14]
 8007bbe:	e00f      	b.n	8007be0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	3310      	adds	r3, #16
 8007bc4:	443b      	add	r3, r7
 8007bc6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	f042 0208 	orr.w	r2, r2, #8
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	3310      	adds	r3, #16
 8007bd4:	443b      	add	r3, r7
 8007bd6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	73bb      	strb	r3, [r7, #14]
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d9ec      	bls.n	8007bc0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007be6:	f107 0208 	add.w	r2, r7, #8
 8007bea:	2364      	movs	r3, #100	; 0x64
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	2304      	movs	r3, #4
 8007bf0:	214e      	movs	r1, #78	; 0x4e
 8007bf2:	4803      	ldr	r0, [pc, #12]	; (8007c00 <lcd_send_data+0xd8>)
 8007bf4:	f001 fda2 	bl	800973c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20000374 	.word	0x20000374
 8007c04:	2000034a 	.word	0x2000034a

08007c08 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007c10:	e006      	b.n	8007c20 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	1c5a      	adds	r2, r3, #1
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff ff84 	bl	8007b28 <lcd_send_data>
	while (*str) {
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1f4      	bne.n	8007c12 <lcd_send_string+0xa>
	}
}
 8007c28:	bf00      	nop
 8007c2a:	bf00      	nop
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af02      	add	r7, sp, #8
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	f023 030f 	bic.w	r3, r3, #15
 8007c44:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	011b      	lsls	r3, r3, #4
 8007c4a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007c4c:	7b7b      	ldrb	r3, [r7, #13]
 8007c4e:	f043 030d 	orr.w	r3, r3, #13
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007c56:	7b7b      	ldrb	r3, [r7, #13]
 8007c58:	f043 0309 	orr.w	r3, r3, #9
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007c60:	7b3b      	ldrb	r3, [r7, #12]
 8007c62:	f043 030d 	orr.w	r3, r3, #13
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007c6a:	7b3b      	ldrb	r3, [r7, #12]
 8007c6c:	f043 0309 	orr.w	r3, r3, #9
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c74:	bf00      	nop
 8007c76:	4825      	ldr	r0, [pc, #148]	; (8007d0c <lcd_send_char+0xd8>)
 8007c78:	f002 f9cd 	bl	800a016 <HAL_I2C_GetError>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d0f9      	beq.n	8007c76 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007c82:	bf00      	nop
 8007c84:	4821      	ldr	r0, [pc, #132]	; (8007d0c <lcd_send_char+0xd8>)
 8007c86:	f002 f9b9 	bl	8009ffc <HAL_I2C_GetState>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	d1f9      	bne.n	8007c84 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007c90:	4b1f      	ldr	r3, [pc, #124]	; (8007d10 <lcd_send_char+0xdc>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d116      	bne.n	8007cc6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]
 8007c9c:	e00f      	b.n	8007cbe <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	3310      	adds	r3, #16
 8007ca2:	443b      	add	r3, r7
 8007ca4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
 8007caa:	f022 0208 	bic.w	r2, r2, #8
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	3310      	adds	r3, #16
 8007cb2:	443b      	add	r3, r7
 8007cb4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	73fb      	strb	r3, [r7, #15]
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	d9ec      	bls.n	8007c9e <lcd_send_char+0x6a>
 8007cc4:	e015      	b.n	8007cf2 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73bb      	strb	r3, [r7, #14]
 8007cca:	e00f      	b.n	8007cec <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	3310      	adds	r3, #16
 8007cd0:	443b      	add	r3, r7
 8007cd2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	f042 0208 	orr.w	r2, r2, #8
 8007cdc:	b2d2      	uxtb	r2, r2
 8007cde:	3310      	adds	r3, #16
 8007ce0:	443b      	add	r3, r7
 8007ce2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007ce6:	7bbb      	ldrb	r3, [r7, #14]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	73bb      	strb	r3, [r7, #14]
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d9ec      	bls.n	8007ccc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007cf2:	f107 0208 	add.w	r2, r7, #8
 8007cf6:	2364      	movs	r3, #100	; 0x64
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	2304      	movs	r3, #4
 8007cfc:	214e      	movs	r1, #78	; 0x4e
 8007cfe:	4803      	ldr	r0, [pc, #12]	; (8007d0c <lcd_send_char+0xd8>)
 8007d00:	f001 fd1c 	bl	800973c <HAL_I2C_Master_Transmit>
}
 8007d04:	bf00      	nop
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	20000374 	.word	0x20000374
 8007d10:	2000034a 	.word	0x2000034a

08007d14 <lcd_init>:

void lcd_init (void) {
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007d18:	2002      	movs	r0, #2
 8007d1a:	f7ff fe95 	bl	8007a48 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007d1e:	2028      	movs	r0, #40	; 0x28
 8007d20:	f7ff fe92 	bl	8007a48 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007d24:	200c      	movs	r0, #12
 8007d26:	f7ff fe8f 	bl	8007a48 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007d2a:	2080      	movs	r0, #128	; 0x80
 8007d2c:	f7ff fe8c 	bl	8007a48 <lcd_send_cmd>
	lcd_backlight(1);
 8007d30:	2001      	movs	r0, #1
 8007d32:	f000 f86d 	bl	8007e10 <lcd_backlight>
}
 8007d36:	bf00      	nop
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b082      	sub	sp, #8
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	4603      	mov	r3, r0
 8007d42:	460a      	mov	r2, r1
 8007d44:	71fb      	strb	r3, [r7, #7]
 8007d46:	4613      	mov	r3, r2
 8007d48:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d106      	bne.n	8007d5e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007d50:	79bb      	ldrb	r3, [r7, #6]
 8007d52:	337f      	adds	r3, #127	; 0x7f
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff fe76 	bl	8007a48 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007d5c:	e008      	b.n	8007d70 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d105      	bne.n	8007d70 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007d64:	79bb      	ldrb	r3, [r7, #6]
 8007d66:	3b41      	subs	r3, #65	; 0x41
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff fe6c 	bl	8007a48 <lcd_send_cmd>
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	603a      	str	r2, [r7, #0]
 8007d82:	71fb      	strb	r3, [r7, #7]
 8007d84:	460b      	mov	r3, r1
 8007d86:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007d88:	79ba      	ldrb	r2, [r7, #6]
 8007d8a:	79fb      	ldrb	r3, [r7, #7]
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff ffd3 	bl	8007d3a <lcd_gotoxy>
	lcd_send_string(str);
 8007d94:	6838      	ldr	r0, [r7, #0]
 8007d96:	f7ff ff37 	bl	8007c08 <lcd_send_string>
}
 8007d9a:	bf00      	nop
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	4603      	mov	r3, r0
 8007daa:	71fb      	strb	r3, [r7, #7]
 8007dac:	460b      	mov	r3, r1
 8007dae:	71bb      	strb	r3, [r7, #6]
 8007db0:	4613      	mov	r3, r2
 8007db2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007db4:	79ba      	ldrb	r2, [r7, #6]
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	4611      	mov	r1, r2
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7ff ffbd 	bl	8007d3a <lcd_gotoxy>
    lcd_send_char(ch);
 8007dc0:	797b      	ldrb	r3, [r7, #5]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7ff ff36 	bl	8007c34 <lcd_send_char>
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <lcd_clear>:

void lcd_clear(void) {
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007dd4:	2001      	movs	r0, #1
 8007dd6:	f7ff fe37 	bl	8007a48 <lcd_send_cmd>
    HAL_Delay(2);
 8007dda:	2002      	movs	r0, #2
 8007ddc:	f000 fd22 	bl	8008824 <HAL_Delay>
}
 8007de0:	bf00      	nop
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	4603      	mov	r3, r0
 8007dec:	460a      	mov	r2, r1
 8007dee:	71fb      	strb	r3, [r7, #7]
 8007df0:	4613      	mov	r3, r2
 8007df2:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007df4:	79ba      	ldrb	r2, [r7, #6]
 8007df6:	79fb      	ldrb	r3, [r7, #7]
 8007df8:	4611      	mov	r1, r2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7ff ff9d 	bl	8007d3a <lcd_gotoxy>

    lcd_send_char(' ');
 8007e00:	2020      	movs	r0, #32
 8007e02:	f7ff ff17 	bl	8007c34 <lcd_send_char>
}
 8007e06:	bf00      	nop
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
	...

08007e10 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007e1a:	4a05      	ldr	r2, [pc, #20]	; (8007e30 <lcd_backlight+0x20>)
 8007e1c:	79fb      	ldrb	r3, [r7, #7]
 8007e1e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007e20:	2000      	movs	r0, #0
 8007e22:	f7ff fe11 	bl	8007a48 <lcd_send_cmd>
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	2000034a 	.word	0x2000034a

08007e34 <lcd_cursor>:

void lcd_cursor(int state) {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d106      	bne.n	8007e50 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007e42:	200e      	movs	r0, #14
 8007e44:	f7ff fe00 	bl	8007a48 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007e48:	200f      	movs	r0, #15
 8007e4a:	f7ff fdfd 	bl	8007a48 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007e4e:	e002      	b.n	8007e56 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007e50:	200c      	movs	r0, #12
 8007e52:	f7ff fdf9 	bl	8007a48 <lcd_send_cmd>
}
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007e68:	4b04      	ldr	r3, [pc, #16]	; (8007e7c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	4a03      	ldr	r2, [pc, #12]	; (8007e7c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e70:	6013      	str	r3, [r2, #0]
}
 8007e72:	bf00      	nop
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bc80      	pop	{r7}
 8007e7a:	4770      	bx	lr
 8007e7c:	200001c8 	.word	0x200001c8

08007e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e84:	f000 fc6c 	bl	8008760 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007e88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e8c:	f000 fcca 	bl	8008824 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e90:	f000 f89c 	bl	8007fcc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e94:	f000 f9be 	bl	8008214 <MX_GPIO_Init>
  MX_CAN_Init();
 8007e98:	f000 f8de 	bl	8008058 <MX_CAN_Init>
  MX_I2C1_Init();
 8007e9c:	f000 f910 	bl	80080c0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007ea0:	f000 f93c 	bl	800811c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007ea4:	f000 f98c 	bl	80081c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	2140      	movs	r1, #64	; 0x40
 8007eac:	483e      	ldr	r0, [pc, #248]	; (8007fa8 <main+0x128>)
 8007eae:	f001 faa0 	bl	80093f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	2180      	movs	r1, #128	; 0x80
 8007eb6:	483c      	ldr	r0, [pc, #240]	; (8007fa8 <main+0x128>)
 8007eb8:	f001 fa9b 	bl	80093f2 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007ebc:	200a      	movs	r0, #10
 8007ebe:	f000 fcb1 	bl	8008824 <HAL_Delay>
  lcd_init();
 8007ec2:	f7ff ff27 	bl	8007d14 <lcd_init>
  HAL_Delay(10);
 8007ec6:	200a      	movs	r0, #10
 8007ec8:	f000 fcac 	bl	8008824 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007ecc:	4837      	ldr	r0, [pc, #220]	; (8007fac <main+0x12c>)
 8007ece:	f003 f943 	bl	800b158 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ed2:	bf00      	nop
 8007ed4:	4836      	ldr	r0, [pc, #216]	; (8007fb0 <main+0x130>)
 8007ed6:	f002 f89e 	bl	800a016 <HAL_I2C_GetError>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b04      	cmp	r3, #4
 8007ede:	d0f9      	beq.n	8007ed4 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ee0:	bf00      	nop
 8007ee2:	4833      	ldr	r0, [pc, #204]	; (8007fb0 <main+0x130>)
 8007ee4:	f002 f88a 	bl	8009ffc <HAL_I2C_GetState>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b20      	cmp	r3, #32
 8007eec:	d1f9      	bne.n	8007ee2 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ef4:	482c      	ldr	r0, [pc, #176]	; (8007fa8 <main+0x128>)
 8007ef6:	f001 fa7c 	bl	80093f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007efa:	2200      	movs	r2, #0
 8007efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f00:	4829      	ldr	r0, [pc, #164]	; (8007fa8 <main+0x128>)
 8007f02:	f001 fa76 	bl	80093f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007f06:	2200      	movs	r2, #0
 8007f08:	2104      	movs	r1, #4
 8007f0a:	4827      	ldr	r0, [pc, #156]	; (8007fa8 <main+0x128>)
 8007f0c:	f001 fa71 	bl	80093f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007f10:	2200      	movs	r2, #0
 8007f12:	2102      	movs	r1, #2
 8007f14:	4824      	ldr	r0, [pc, #144]	; (8007fa8 <main+0x128>)
 8007f16:	f001 fa6c 	bl	80093f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	4822      	ldr	r0, [pc, #136]	; (8007fa8 <main+0x128>)
 8007f20:	f001 fa67 	bl	80093f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007f24:	2200      	movs	r2, #0
 8007f26:	2120      	movs	r1, #32
 8007f28:	4822      	ldr	r0, [pc, #136]	; (8007fb4 <main+0x134>)
 8007f2a:	f001 fa62 	bl	80093f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2110      	movs	r1, #16
 8007f32:	4820      	ldr	r0, [pc, #128]	; (8007fb4 <main+0x134>)
 8007f34:	f001 fa5d 	bl	80093f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2180      	movs	r1, #128	; 0x80
 8007f3c:	481e      	ldr	r0, [pc, #120]	; (8007fb8 <main+0x138>)
 8007f3e:	f001 fa58 	bl	80093f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f42:	2200      	movs	r2, #0
 8007f44:	2140      	movs	r1, #64	; 0x40
 8007f46:	481c      	ldr	r0, [pc, #112]	; (8007fb8 <main+0x138>)
 8007f48:	f001 fa53 	bl	80093f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2120      	movs	r1, #32
 8007f50:	4819      	ldr	r0, [pc, #100]	; (8007fb8 <main+0x138>)
 8007f52:	f001 fa4e 	bl	80093f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007f56:	2200      	movs	r2, #0
 8007f58:	2110      	movs	r1, #16
 8007f5a:	4817      	ldr	r0, [pc, #92]	; (8007fb8 <main+0x138>)
 8007f5c:	f001 fa49 	bl	80093f2 <HAL_GPIO_WritePin>

  i2cTest();
 8007f60:	f7f8 ff12 	bl	8000d88 <i2cTest>
  HAL_Delay(100);
 8007f64:	2064      	movs	r0, #100	; 0x64
 8007f66:	f000 fc5d 	bl	8008824 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007f6a:	4a14      	ldr	r2, [pc, #80]	; (8007fbc <main+0x13c>)
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	2001      	movs	r0, #1
 8007f70:	f7ff ff02 	bl	8007d78 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007f74:	4a12      	ldr	r2, [pc, #72]	; (8007fc0 <main+0x140>)
 8007f76:	2101      	movs	r1, #1
 8007f78:	2002      	movs	r0, #2
 8007f7a:	f7ff fefd 	bl	8007d78 <lcd_print>
  HAL_Delay(1000);
 8007f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f82:	f000 fc4f 	bl	8008824 <HAL_Delay>
  lcd_clear();
 8007f86:	f7ff ff23 	bl	8007dd0 <lcd_clear>

  eepromKontrol();
 8007f8a:	f7f8 f953 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007f8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f92:	f000 fc47 	bl	8008824 <HAL_Delay>

  backLightTimer = millis;
 8007f96:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <main+0x144>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a0b      	ldr	r2, [pc, #44]	; (8007fc8 <main+0x148>)
 8007f9c:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007f9e:	f7ff fcf7 	bl	8007990 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007fa2:	f7fe fd5b 	bl	8006a5c <mainLoop>
 8007fa6:	e7fc      	b.n	8007fa2 <main+0x122>
 8007fa8:	40010c00 	.word	0x40010c00
 8007fac:	200003c8 	.word	0x200003c8
 8007fb0:	20000374 	.word	0x20000374
 8007fb4:	40011000 	.word	0x40011000
 8007fb8:	40010800 	.word	0x40010800
 8007fbc:	0800ddc8 	.word	0x0800ddc8
 8007fc0:	0800dddc 	.word	0x0800dddc
 8007fc4:	200001c8 	.word	0x200001c8
 8007fc8:	200001e4 	.word	0x200001e4

08007fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b090      	sub	sp, #64	; 0x40
 8007fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007fd2:	f107 0318 	add.w	r3, r7, #24
 8007fd6:	2228      	movs	r2, #40	; 0x28
 8007fd8:	2100      	movs	r1, #0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f004 fb36 	bl	800c64c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007fe0:	1d3b      	adds	r3, r7, #4
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	605a      	str	r2, [r3, #4]
 8007fe8:	609a      	str	r2, [r3, #8]
 8007fea:	60da      	str	r2, [r3, #12]
 8007fec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ff6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008000:	2302      	movs	r3, #2
 8008002:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008008:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800800a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008010:	f107 0318 	add.w	r3, r7, #24
 8008014:	4618      	mov	r0, r3
 8008016:	f002 fc3f 	bl	800a898 <HAL_RCC_OscConfig>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008020:	f000 f9a2 	bl	8008368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008024:	230f      	movs	r3, #15
 8008026:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008028:	2302      	movs	r3, #2
 800802a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008034:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008036:	2300      	movs	r3, #0
 8008038:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800803a:	1d3b      	adds	r3, r7, #4
 800803c:	2102      	movs	r1, #2
 800803e:	4618      	mov	r0, r3
 8008040:	f002 feac 	bl	800ad9c <HAL_RCC_ClockConfig>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800804a:	f000 f98d 	bl	8008368 <Error_Handler>
  }
}
 800804e:	bf00      	nop
 8008050:	3740      	adds	r7, #64	; 0x40
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800805c:	4b16      	ldr	r3, [pc, #88]	; (80080b8 <MX_CAN_Init+0x60>)
 800805e:	4a17      	ldr	r2, [pc, #92]	; (80080bc <MX_CAN_Init+0x64>)
 8008060:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008062:	4b15      	ldr	r3, [pc, #84]	; (80080b8 <MX_CAN_Init+0x60>)
 8008064:	2210      	movs	r2, #16
 8008066:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008068:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <MX_CAN_Init+0x60>)
 800806a:	2200      	movs	r2, #0
 800806c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800806e:	4b12      	ldr	r3, [pc, #72]	; (80080b8 <MX_CAN_Init+0x60>)
 8008070:	2200      	movs	r2, #0
 8008072:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008074:	4b10      	ldr	r3, [pc, #64]	; (80080b8 <MX_CAN_Init+0x60>)
 8008076:	2200      	movs	r2, #0
 8008078:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800807a:	4b0f      	ldr	r3, [pc, #60]	; (80080b8 <MX_CAN_Init+0x60>)
 800807c:	2200      	movs	r2, #0
 800807e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008080:	4b0d      	ldr	r3, [pc, #52]	; (80080b8 <MX_CAN_Init+0x60>)
 8008082:	2200      	movs	r2, #0
 8008084:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008086:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <MX_CAN_Init+0x60>)
 8008088:	2200      	movs	r2, #0
 800808a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800808c:	4b0a      	ldr	r3, [pc, #40]	; (80080b8 <MX_CAN_Init+0x60>)
 800808e:	2200      	movs	r2, #0
 8008090:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008092:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <MX_CAN_Init+0x60>)
 8008094:	2200      	movs	r2, #0
 8008096:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008098:	4b07      	ldr	r3, [pc, #28]	; (80080b8 <MX_CAN_Init+0x60>)
 800809a:	2200      	movs	r2, #0
 800809c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800809e:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <MX_CAN_Init+0x60>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80080a4:	4804      	ldr	r0, [pc, #16]	; (80080b8 <MX_CAN_Init+0x60>)
 80080a6:	f000 fbe1 	bl	800886c <HAL_CAN_Init>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80080b0:	f000 f95a 	bl	8008368 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80080b4:	bf00      	nop
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	2000034c 	.word	0x2000034c
 80080bc:	40006400 	.word	0x40006400

080080c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80080c4:	4b12      	ldr	r3, [pc, #72]	; (8008110 <MX_I2C1_Init+0x50>)
 80080c6:	4a13      	ldr	r2, [pc, #76]	; (8008114 <MX_I2C1_Init+0x54>)
 80080c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80080ca:	4b11      	ldr	r3, [pc, #68]	; (8008110 <MX_I2C1_Init+0x50>)
 80080cc:	4a12      	ldr	r2, [pc, #72]	; (8008118 <MX_I2C1_Init+0x58>)
 80080ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80080d0:	4b0f      	ldr	r3, [pc, #60]	; (8008110 <MX_I2C1_Init+0x50>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80080d6:	4b0e      	ldr	r3, [pc, #56]	; (8008110 <MX_I2C1_Init+0x50>)
 80080d8:	2200      	movs	r2, #0
 80080da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80080dc:	4b0c      	ldr	r3, [pc, #48]	; (8008110 <MX_I2C1_Init+0x50>)
 80080de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80080e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80080e4:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <MX_I2C1_Init+0x50>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80080ea:	4b09      	ldr	r3, [pc, #36]	; (8008110 <MX_I2C1_Init+0x50>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <MX_I2C1_Init+0x50>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80080f6:	4b06      	ldr	r3, [pc, #24]	; (8008110 <MX_I2C1_Init+0x50>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80080fc:	4804      	ldr	r0, [pc, #16]	; (8008110 <MX_I2C1_Init+0x50>)
 80080fe:	f001 f9a9 	bl	8009454 <HAL_I2C_Init>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008108:	f000 f92e 	bl	8008368 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800810c:	bf00      	nop
 800810e:	bd80      	pop	{r7, pc}
 8008110:	20000374 	.word	0x20000374
 8008114:	40005400 	.word	0x40005400
 8008118:	00061a80 	.word	0x00061a80

0800811c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008122:	f107 0308 	add.w	r3, r7, #8
 8008126:	2200      	movs	r2, #0
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	605a      	str	r2, [r3, #4]
 800812c:	609a      	str	r2, [r3, #8]
 800812e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008130:	463b      	mov	r3, r7
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008138:	4b1f      	ldr	r3, [pc, #124]	; (80081b8 <MX_TIM1_Init+0x9c>)
 800813a:	4a20      	ldr	r2, [pc, #128]	; (80081bc <MX_TIM1_Init+0xa0>)
 800813c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800813e:	4b1e      	ldr	r3, [pc, #120]	; (80081b8 <MX_TIM1_Init+0x9c>)
 8008140:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008144:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008146:	4b1c      	ldr	r3, [pc, #112]	; (80081b8 <MX_TIM1_Init+0x9c>)
 8008148:	2200      	movs	r2, #0
 800814a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800814c:	4b1a      	ldr	r3, [pc, #104]	; (80081b8 <MX_TIM1_Init+0x9c>)
 800814e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008152:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008154:	4b18      	ldr	r3, [pc, #96]	; (80081b8 <MX_TIM1_Init+0x9c>)
 8008156:	2200      	movs	r2, #0
 8008158:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800815a:	4b17      	ldr	r3, [pc, #92]	; (80081b8 <MX_TIM1_Init+0x9c>)
 800815c:	2200      	movs	r2, #0
 800815e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008160:	4b15      	ldr	r3, [pc, #84]	; (80081b8 <MX_TIM1_Init+0x9c>)
 8008162:	2200      	movs	r2, #0
 8008164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008166:	4814      	ldr	r0, [pc, #80]	; (80081b8 <MX_TIM1_Init+0x9c>)
 8008168:	f002 ffa6 	bl	800b0b8 <HAL_TIM_Base_Init>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008172:	f000 f8f9 	bl	8008368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800817a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800817c:	f107 0308 	add.w	r3, r7, #8
 8008180:	4619      	mov	r1, r3
 8008182:	480d      	ldr	r0, [pc, #52]	; (80081b8 <MX_TIM1_Init+0x9c>)
 8008184:	f003 f950 	bl	800b428 <HAL_TIM_ConfigClockSource>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800818e:	f000 f8eb 	bl	8008368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008192:	2300      	movs	r3, #0
 8008194:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008196:	2300      	movs	r3, #0
 8008198:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800819a:	463b      	mov	r3, r7
 800819c:	4619      	mov	r1, r3
 800819e:	4806      	ldr	r0, [pc, #24]	; (80081b8 <MX_TIM1_Init+0x9c>)
 80081a0:	f003 fb3e 	bl	800b820 <HAL_TIMEx_MasterConfigSynchronization>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80081aa:	f000 f8dd 	bl	8008368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80081ae:	bf00      	nop
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	200003c8 	.word	0x200003c8
 80081bc:	40012c00 	.word	0x40012c00

080081c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80081c4:	4b11      	ldr	r3, [pc, #68]	; (800820c <MX_USART1_UART_Init+0x4c>)
 80081c6:	4a12      	ldr	r2, [pc, #72]	; (8008210 <MX_USART1_UART_Init+0x50>)
 80081c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80081ca:	4b10      	ldr	r3, [pc, #64]	; (800820c <MX_USART1_UART_Init+0x4c>)
 80081cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80081d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80081d2:	4b0e      	ldr	r3, [pc, #56]	; (800820c <MX_USART1_UART_Init+0x4c>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80081d8:	4b0c      	ldr	r3, [pc, #48]	; (800820c <MX_USART1_UART_Init+0x4c>)
 80081da:	2200      	movs	r2, #0
 80081dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80081de:	4b0b      	ldr	r3, [pc, #44]	; (800820c <MX_USART1_UART_Init+0x4c>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80081e4:	4b09      	ldr	r3, [pc, #36]	; (800820c <MX_USART1_UART_Init+0x4c>)
 80081e6:	220c      	movs	r2, #12
 80081e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081ea:	4b08      	ldr	r3, [pc, #32]	; (800820c <MX_USART1_UART_Init+0x4c>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80081f0:	4b06      	ldr	r3, [pc, #24]	; (800820c <MX_USART1_UART_Init+0x4c>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80081f6:	4805      	ldr	r0, [pc, #20]	; (800820c <MX_USART1_UART_Init+0x4c>)
 80081f8:	f003 fb90 	bl	800b91c <HAL_UART_Init>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008202:	f000 f8b1 	bl	8008368 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008206:	bf00      	nop
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20000410 	.word	0x20000410
 8008210:	40013800 	.word	0x40013800

08008214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800821a:	f107 0310 	add.w	r3, r7, #16
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	605a      	str	r2, [r3, #4]
 8008224:	609a      	str	r2, [r3, #8]
 8008226:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008228:	4b4b      	ldr	r3, [pc, #300]	; (8008358 <MX_GPIO_Init+0x144>)
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	4a4a      	ldr	r2, [pc, #296]	; (8008358 <MX_GPIO_Init+0x144>)
 800822e:	f043 0310 	orr.w	r3, r3, #16
 8008232:	6193      	str	r3, [r2, #24]
 8008234:	4b48      	ldr	r3, [pc, #288]	; (8008358 <MX_GPIO_Init+0x144>)
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008240:	4b45      	ldr	r3, [pc, #276]	; (8008358 <MX_GPIO_Init+0x144>)
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	4a44      	ldr	r2, [pc, #272]	; (8008358 <MX_GPIO_Init+0x144>)
 8008246:	f043 0320 	orr.w	r3, r3, #32
 800824a:	6193      	str	r3, [r2, #24]
 800824c:	4b42      	ldr	r3, [pc, #264]	; (8008358 <MX_GPIO_Init+0x144>)
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	f003 0320 	and.w	r3, r3, #32
 8008254:	60bb      	str	r3, [r7, #8]
 8008256:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008258:	4b3f      	ldr	r3, [pc, #252]	; (8008358 <MX_GPIO_Init+0x144>)
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	4a3e      	ldr	r2, [pc, #248]	; (8008358 <MX_GPIO_Init+0x144>)
 800825e:	f043 0304 	orr.w	r3, r3, #4
 8008262:	6193      	str	r3, [r2, #24]
 8008264:	4b3c      	ldr	r3, [pc, #240]	; (8008358 <MX_GPIO_Init+0x144>)
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	f003 0304 	and.w	r3, r3, #4
 800826c:	607b      	str	r3, [r7, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008270:	4b39      	ldr	r3, [pc, #228]	; (8008358 <MX_GPIO_Init+0x144>)
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	4a38      	ldr	r2, [pc, #224]	; (8008358 <MX_GPIO_Init+0x144>)
 8008276:	f043 0308 	orr.w	r3, r3, #8
 800827a:	6193      	str	r3, [r2, #24]
 800827c:	4b36      	ldr	r3, [pc, #216]	; (8008358 <MX_GPIO_Init+0x144>)
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	f003 0308 	and.w	r3, r3, #8
 8008284:	603b      	str	r3, [r7, #0]
 8008286:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008288:	2200      	movs	r2, #0
 800828a:	21f0      	movs	r1, #240	; 0xf0
 800828c:	4833      	ldr	r0, [pc, #204]	; (800835c <MX_GPIO_Init+0x148>)
 800828e:	f001 f8b0 	bl	80093f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008292:	2200      	movs	r2, #0
 8008294:	f241 0130 	movw	r1, #4144	; 0x1030
 8008298:	4831      	ldr	r0, [pc, #196]	; (8008360 <MX_GPIO_Init+0x14c>)
 800829a:	f001 f8aa 	bl	80093f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800829e:	2200      	movs	r2, #0
 80082a0:	f640 4107 	movw	r1, #3079	; 0xc07
 80082a4:	482f      	ldr	r0, [pc, #188]	; (8008364 <MX_GPIO_Init+0x150>)
 80082a6:	f001 f8a4 	bl	80093f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80082aa:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80082ae:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082b0:	2300      	movs	r3, #0
 80082b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b4:	2300      	movs	r3, #0
 80082b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082b8:	f107 0310 	add.w	r3, r7, #16
 80082bc:	4619      	mov	r1, r3
 80082be:	4828      	ldr	r0, [pc, #160]	; (8008360 <MX_GPIO_Init+0x14c>)
 80082c0:	f000 fe20 	bl	8008f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80082c4:	f248 130f 	movw	r3, #33039	; 0x810f
 80082c8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082ca:	2300      	movs	r3, #0
 80082cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082d2:	f107 0310 	add.w	r3, r7, #16
 80082d6:	4619      	mov	r1, r3
 80082d8:	4820      	ldr	r0, [pc, #128]	; (800835c <MX_GPIO_Init+0x148>)
 80082da:	f000 fe13 	bl	8008f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80082de:	23f0      	movs	r3, #240	; 0xf0
 80082e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082e2:	2301      	movs	r3, #1
 80082e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082ea:	2302      	movs	r3, #2
 80082ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ee:	f107 0310 	add.w	r3, r7, #16
 80082f2:	4619      	mov	r1, r3
 80082f4:	4819      	ldr	r0, [pc, #100]	; (800835c <MX_GPIO_Init+0x148>)
 80082f6:	f000 fe05 	bl	8008f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80082fa:	f241 0330 	movw	r3, #4144	; 0x1030
 80082fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008300:	2301      	movs	r3, #1
 8008302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008304:	2300      	movs	r3, #0
 8008306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008308:	2302      	movs	r3, #2
 800830a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800830c:	f107 0310 	add.w	r3, r7, #16
 8008310:	4619      	mov	r1, r3
 8008312:	4813      	ldr	r0, [pc, #76]	; (8008360 <MX_GPIO_Init+0x14c>)
 8008314:	f000 fdf6 	bl	8008f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008318:	f640 4307 	movw	r3, #3079	; 0xc07
 800831c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800831e:	2301      	movs	r3, #1
 8008320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008322:	2300      	movs	r3, #0
 8008324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008326:	2302      	movs	r3, #2
 8008328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800832a:	f107 0310 	add.w	r3, r7, #16
 800832e:	4619      	mov	r1, r3
 8008330:	480c      	ldr	r0, [pc, #48]	; (8008364 <MX_GPIO_Init+0x150>)
 8008332:	f000 fde7 	bl	8008f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008336:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800833a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800833c:	2300      	movs	r3, #0
 800833e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008340:	2300      	movs	r3, #0
 8008342:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008344:	f107 0310 	add.w	r3, r7, #16
 8008348:	4619      	mov	r1, r3
 800834a:	4806      	ldr	r0, [pc, #24]	; (8008364 <MX_GPIO_Init+0x150>)
 800834c:	f000 fdda 	bl	8008f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008350:	bf00      	nop
 8008352:	3720      	adds	r7, #32
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	40021000 	.word	0x40021000
 800835c:	40010800 	.word	0x40010800
 8008360:	40011000 	.word	0x40011000
 8008364:	40010c00 	.word	0x40010c00

08008368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008368:	b480      	push	{r7}
 800836a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800836c:	bf00      	nop
 800836e:	46bd      	mov	sp, r7
 8008370:	bc80      	pop	{r7}
 8008372:	4770      	bx	lr

08008374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800837a:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <HAL_MspInit+0x5c>)
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	4a14      	ldr	r2, [pc, #80]	; (80083d0 <HAL_MspInit+0x5c>)
 8008380:	f043 0301 	orr.w	r3, r3, #1
 8008384:	6193      	str	r3, [r2, #24]
 8008386:	4b12      	ldr	r3, [pc, #72]	; (80083d0 <HAL_MspInit+0x5c>)
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	60bb      	str	r3, [r7, #8]
 8008390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008392:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <HAL_MspInit+0x5c>)
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	4a0e      	ldr	r2, [pc, #56]	; (80083d0 <HAL_MspInit+0x5c>)
 8008398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800839c:	61d3      	str	r3, [r2, #28]
 800839e:	4b0c      	ldr	r3, [pc, #48]	; (80083d0 <HAL_MspInit+0x5c>)
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083a6:	607b      	str	r3, [r7, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80083aa:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <HAL_MspInit+0x60>)
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	4a04      	ldr	r2, [pc, #16]	; (80083d4 <HAL_MspInit+0x60>)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083c6:	bf00      	nop
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr
 80083d0:	40021000 	.word	0x40021000
 80083d4:	40010000 	.word	0x40010000

080083d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e0:	f107 0310 	add.w	r3, r7, #16
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	605a      	str	r2, [r3, #4]
 80083ea:	609a      	str	r2, [r3, #8]
 80083ec:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a1c      	ldr	r2, [pc, #112]	; (8008464 <HAL_CAN_MspInit+0x8c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d131      	bne.n	800845c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80083f8:	4b1b      	ldr	r3, [pc, #108]	; (8008468 <HAL_CAN_MspInit+0x90>)
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	4a1a      	ldr	r2, [pc, #104]	; (8008468 <HAL_CAN_MspInit+0x90>)
 80083fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008402:	61d3      	str	r3, [r2, #28]
 8008404:	4b18      	ldr	r3, [pc, #96]	; (8008468 <HAL_CAN_MspInit+0x90>)
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008410:	4b15      	ldr	r3, [pc, #84]	; (8008468 <HAL_CAN_MspInit+0x90>)
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	4a14      	ldr	r2, [pc, #80]	; (8008468 <HAL_CAN_MspInit+0x90>)
 8008416:	f043 0304 	orr.w	r3, r3, #4
 800841a:	6193      	str	r3, [r2, #24]
 800841c:	4b12      	ldr	r3, [pc, #72]	; (8008468 <HAL_CAN_MspInit+0x90>)
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	60bb      	str	r3, [r7, #8]
 8008426:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008428:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800842c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800842e:	2300      	movs	r3, #0
 8008430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008432:	2300      	movs	r3, #0
 8008434:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008436:	f107 0310 	add.w	r3, r7, #16
 800843a:	4619      	mov	r1, r3
 800843c:	480b      	ldr	r0, [pc, #44]	; (800846c <HAL_CAN_MspInit+0x94>)
 800843e:	f000 fd61 	bl	8008f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008448:	2302      	movs	r3, #2
 800844a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800844c:	2303      	movs	r3, #3
 800844e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008450:	f107 0310 	add.w	r3, r7, #16
 8008454:	4619      	mov	r1, r3
 8008456:	4805      	ldr	r0, [pc, #20]	; (800846c <HAL_CAN_MspInit+0x94>)
 8008458:	f000 fd54 	bl	8008f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800845c:	bf00      	nop
 800845e:	3720      	adds	r7, #32
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	40006400 	.word	0x40006400
 8008468:	40021000 	.word	0x40021000
 800846c:	40010800 	.word	0x40010800

08008470 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b088      	sub	sp, #32
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008478:	f107 0310 	add.w	r3, r7, #16
 800847c:	2200      	movs	r2, #0
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	605a      	str	r2, [r3, #4]
 8008482:	609a      	str	r2, [r3, #8]
 8008484:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a15      	ldr	r2, [pc, #84]	; (80084e0 <HAL_I2C_MspInit+0x70>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d123      	bne.n	80084d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008490:	4b14      	ldr	r3, [pc, #80]	; (80084e4 <HAL_I2C_MspInit+0x74>)
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	4a13      	ldr	r2, [pc, #76]	; (80084e4 <HAL_I2C_MspInit+0x74>)
 8008496:	f043 0308 	orr.w	r3, r3, #8
 800849a:	6193      	str	r3, [r2, #24]
 800849c:	4b11      	ldr	r3, [pc, #68]	; (80084e4 <HAL_I2C_MspInit+0x74>)
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	f003 0308 	and.w	r3, r3, #8
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80084a8:	23c0      	movs	r3, #192	; 0xc0
 80084aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80084ac:	2312      	movs	r3, #18
 80084ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084b0:	2303      	movs	r3, #3
 80084b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084b4:	f107 0310 	add.w	r3, r7, #16
 80084b8:	4619      	mov	r1, r3
 80084ba:	480b      	ldr	r0, [pc, #44]	; (80084e8 <HAL_I2C_MspInit+0x78>)
 80084bc:	f000 fd22 	bl	8008f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80084c0:	4b08      	ldr	r3, [pc, #32]	; (80084e4 <HAL_I2C_MspInit+0x74>)
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	4a07      	ldr	r2, [pc, #28]	; (80084e4 <HAL_I2C_MspInit+0x74>)
 80084c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084ca:	61d3      	str	r3, [r2, #28]
 80084cc:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <HAL_I2C_MspInit+0x74>)
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084d4:	60bb      	str	r3, [r7, #8]
 80084d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80084d8:	bf00      	nop
 80084da:	3720      	adds	r7, #32
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	40005400 	.word	0x40005400
 80084e4:	40021000 	.word	0x40021000
 80084e8:	40010c00 	.word	0x40010c00

080084ec <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a0a      	ldr	r2, [pc, #40]	; (8008524 <HAL_I2C_MspDeInit+0x38>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d10d      	bne.n	800851a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80084fe:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <HAL_I2C_MspDeInit+0x3c>)
 8008500:	69db      	ldr	r3, [r3, #28]
 8008502:	4a09      	ldr	r2, [pc, #36]	; (8008528 <HAL_I2C_MspDeInit+0x3c>)
 8008504:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008508:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800850a:	2140      	movs	r1, #64	; 0x40
 800850c:	4807      	ldr	r0, [pc, #28]	; (800852c <HAL_I2C_MspDeInit+0x40>)
 800850e:	f000 fe8d 	bl	800922c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008512:	2180      	movs	r1, #128	; 0x80
 8008514:	4805      	ldr	r0, [pc, #20]	; (800852c <HAL_I2C_MspDeInit+0x40>)
 8008516:	f000 fe89 	bl	800922c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	40005400 	.word	0x40005400
 8008528:	40021000 	.word	0x40021000
 800852c:	40010c00 	.word	0x40010c00

08008530 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a0d      	ldr	r2, [pc, #52]	; (8008574 <HAL_TIM_Base_MspInit+0x44>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d113      	bne.n	800856a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008542:	4b0d      	ldr	r3, [pc, #52]	; (8008578 <HAL_TIM_Base_MspInit+0x48>)
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	4a0c      	ldr	r2, [pc, #48]	; (8008578 <HAL_TIM_Base_MspInit+0x48>)
 8008548:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800854c:	6193      	str	r3, [r2, #24]
 800854e:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <HAL_TIM_Base_MspInit+0x48>)
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800855a:	2200      	movs	r2, #0
 800855c:	2100      	movs	r1, #0
 800855e:	2019      	movs	r0, #25
 8008560:	f000 fb57 	bl	8008c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008564:	2019      	movs	r0, #25
 8008566:	f000 fb70 	bl	8008c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	40012c00 	.word	0x40012c00
 8008578:	40021000 	.word	0x40021000

0800857c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008584:	f107 0310 	add.w	r3, r7, #16
 8008588:	2200      	movs	r2, #0
 800858a:	601a      	str	r2, [r3, #0]
 800858c:	605a      	str	r2, [r3, #4]
 800858e:	609a      	str	r2, [r3, #8]
 8008590:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a20      	ldr	r2, [pc, #128]	; (8008618 <HAL_UART_MspInit+0x9c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d139      	bne.n	8008610 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800859c:	4b1f      	ldr	r3, [pc, #124]	; (800861c <HAL_UART_MspInit+0xa0>)
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	4a1e      	ldr	r2, [pc, #120]	; (800861c <HAL_UART_MspInit+0xa0>)
 80085a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085a6:	6193      	str	r3, [r2, #24]
 80085a8:	4b1c      	ldr	r3, [pc, #112]	; (800861c <HAL_UART_MspInit+0xa0>)
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085b0:	60fb      	str	r3, [r7, #12]
 80085b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085b4:	4b19      	ldr	r3, [pc, #100]	; (800861c <HAL_UART_MspInit+0xa0>)
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	4a18      	ldr	r2, [pc, #96]	; (800861c <HAL_UART_MspInit+0xa0>)
 80085ba:	f043 0304 	orr.w	r3, r3, #4
 80085be:	6193      	str	r3, [r2, #24]
 80085c0:	4b16      	ldr	r3, [pc, #88]	; (800861c <HAL_UART_MspInit+0xa0>)
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	60bb      	str	r3, [r7, #8]
 80085ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80085cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085d2:	2302      	movs	r3, #2
 80085d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085d6:	2303      	movs	r3, #3
 80085d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085da:	f107 0310 	add.w	r3, r7, #16
 80085de:	4619      	mov	r1, r3
 80085e0:	480f      	ldr	r0, [pc, #60]	; (8008620 <HAL_UART_MspInit+0xa4>)
 80085e2:	f000 fc8f 	bl	8008f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80085e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085ec:	2300      	movs	r3, #0
 80085ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085f4:	f107 0310 	add.w	r3, r7, #16
 80085f8:	4619      	mov	r1, r3
 80085fa:	4809      	ldr	r0, [pc, #36]	; (8008620 <HAL_UART_MspInit+0xa4>)
 80085fc:	f000 fc82 	bl	8008f04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008600:	2200      	movs	r2, #0
 8008602:	2100      	movs	r1, #0
 8008604:	2025      	movs	r0, #37	; 0x25
 8008606:	f000 fb04 	bl	8008c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800860a:	2025      	movs	r0, #37	; 0x25
 800860c:	f000 fb1d 	bl	8008c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008610:	bf00      	nop
 8008612:	3720      	adds	r7, #32
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40013800 	.word	0x40013800
 800861c:	40021000 	.word	0x40021000
 8008620:	40010800 	.word	0x40010800

08008624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008628:	e7fe      	b.n	8008628 <NMI_Handler+0x4>

0800862a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800862a:	b480      	push	{r7}
 800862c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800862e:	e7fe      	b.n	800862e <HardFault_Handler+0x4>

08008630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008634:	e7fe      	b.n	8008634 <MemManage_Handler+0x4>

08008636 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008636:	b480      	push	{r7}
 8008638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800863a:	e7fe      	b.n	800863a <BusFault_Handler+0x4>

0800863c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008640:	e7fe      	b.n	8008640 <UsageFault_Handler+0x4>

08008642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008642:	b480      	push	{r7}
 8008644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008646:	bf00      	nop
 8008648:	46bd      	mov	sp, r7
 800864a:	bc80      	pop	{r7}
 800864c:	4770      	bx	lr

0800864e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800864e:	b480      	push	{r7}
 8008650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008652:	bf00      	nop
 8008654:	46bd      	mov	sp, r7
 8008656:	bc80      	pop	{r7}
 8008658:	4770      	bx	lr

0800865a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800865a:	b480      	push	{r7}
 800865c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800865e:	bf00      	nop
 8008660:	46bd      	mov	sp, r7
 8008662:	bc80      	pop	{r7}
 8008664:	4770      	bx	lr

08008666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800866a:	f000 f8bf 	bl	80087ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800866e:	bf00      	nop
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008678:	4802      	ldr	r0, [pc, #8]	; (8008684 <TIM1_UP_IRQHandler+0x10>)
 800867a:	f002 fdcd 	bl	800b218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800867e:	bf00      	nop
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	200003c8 	.word	0x200003c8

08008688 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800868c:	4802      	ldr	r0, [pc, #8]	; (8008698 <USART1_IRQHandler+0x10>)
 800868e:	f003 f9cb 	bl	800ba28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008692:	bf00      	nop
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20000410 	.word	0x20000410

0800869c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80086a4:	4a14      	ldr	r2, [pc, #80]	; (80086f8 <_sbrk+0x5c>)
 80086a6:	4b15      	ldr	r3, [pc, #84]	; (80086fc <_sbrk+0x60>)
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80086b0:	4b13      	ldr	r3, [pc, #76]	; (8008700 <_sbrk+0x64>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d102      	bne.n	80086be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80086b8:	4b11      	ldr	r3, [pc, #68]	; (8008700 <_sbrk+0x64>)
 80086ba:	4a12      	ldr	r2, [pc, #72]	; (8008704 <_sbrk+0x68>)
 80086bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80086be:	4b10      	ldr	r3, [pc, #64]	; (8008700 <_sbrk+0x64>)
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4413      	add	r3, r2
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d207      	bcs.n	80086dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80086cc:	f003 ffe6 	bl	800c69c <__errno>
 80086d0:	4603      	mov	r3, r0
 80086d2:	220c      	movs	r2, #12
 80086d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80086d6:	f04f 33ff 	mov.w	r3, #4294967295
 80086da:	e009      	b.n	80086f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80086dc:	4b08      	ldr	r3, [pc, #32]	; (8008700 <_sbrk+0x64>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80086e2:	4b07      	ldr	r3, [pc, #28]	; (8008700 <_sbrk+0x64>)
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4413      	add	r3, r2
 80086ea:	4a05      	ldr	r2, [pc, #20]	; (8008700 <_sbrk+0x64>)
 80086ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80086ee:	68fb      	ldr	r3, [r7, #12]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	2000c000 	.word	0x2000c000
 80086fc:	00000400 	.word	0x00000400
 8008700:	20000458 	.word	0x20000458
 8008704:	200005a8 	.word	0x200005a8

08008708 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008708:	b480      	push	{r7}
 800870a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800870c:	bf00      	nop
 800870e:	46bd      	mov	sp, r7
 8008710:	bc80      	pop	{r7}
 8008712:	4770      	bx	lr

08008714 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008714:	480c      	ldr	r0, [pc, #48]	; (8008748 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008716:	490d      	ldr	r1, [pc, #52]	; (800874c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008718:	4a0d      	ldr	r2, [pc, #52]	; (8008750 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800871a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800871c:	e002      	b.n	8008724 <LoopCopyDataInit>

0800871e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800871e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008722:	3304      	adds	r3, #4

08008724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008728:	d3f9      	bcc.n	800871e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800872a:	4a0a      	ldr	r2, [pc, #40]	; (8008754 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800872c:	4c0a      	ldr	r4, [pc, #40]	; (8008758 <LoopFillZerobss+0x22>)
  movs r3, #0
 800872e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008730:	e001      	b.n	8008736 <LoopFillZerobss>

08008732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008734:	3204      	adds	r2, #4

08008736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008738:	d3fb      	bcc.n	8008732 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800873a:	f7ff ffe5 	bl	8008708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800873e:	f003 ffb3 	bl	800c6a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008742:	f7ff fb9d 	bl	8007e80 <main>
  bx lr
 8008746:	4770      	bx	lr
  ldr r0, =_sdata
 8008748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800874c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8008750:	0800de7c 	.word	0x0800de7c
  ldr r2, =_sbss
 8008754:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8008758:	200005a8 	.word	0x200005a8

0800875c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800875c:	e7fe      	b.n	800875c <ADC1_2_IRQHandler>
	...

08008760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008764:	4b08      	ldr	r3, [pc, #32]	; (8008788 <HAL_Init+0x28>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a07      	ldr	r2, [pc, #28]	; (8008788 <HAL_Init+0x28>)
 800876a:	f043 0310 	orr.w	r3, r3, #16
 800876e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008770:	2003      	movs	r0, #3
 8008772:	f000 fa43 	bl	8008bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008776:	200f      	movs	r0, #15
 8008778:	f000 f808 	bl	800878c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800877c:	f7ff fdfa 	bl	8008374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	40022000 	.word	0x40022000

0800878c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008794:	4b12      	ldr	r3, [pc, #72]	; (80087e0 <HAL_InitTick+0x54>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	4b12      	ldr	r3, [pc, #72]	; (80087e4 <HAL_InitTick+0x58>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	4619      	mov	r1, r3
 800879e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80087a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fa5b 	bl	8008c66 <HAL_SYSTICK_Config>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e00e      	b.n	80087d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b0f      	cmp	r3, #15
 80087be:	d80a      	bhi.n	80087d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80087c0:	2200      	movs	r2, #0
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	f04f 30ff 	mov.w	r0, #4294967295
 80087c8:	f000 fa23 	bl	8008c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80087cc:	4a06      	ldr	r2, [pc, #24]	; (80087e8 <HAL_InitTick+0x5c>)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e000      	b.n	80087d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	200000a0 	.word	0x200000a0
 80087e4:	200000a8 	.word	0x200000a8
 80087e8:	200000a4 	.word	0x200000a4

080087ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087f0:	4b05      	ldr	r3, [pc, #20]	; (8008808 <HAL_IncTick+0x1c>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	4b05      	ldr	r3, [pc, #20]	; (800880c <HAL_IncTick+0x20>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4413      	add	r3, r2
 80087fc:	4a03      	ldr	r2, [pc, #12]	; (800880c <HAL_IncTick+0x20>)
 80087fe:	6013      	str	r3, [r2, #0]
}
 8008800:	bf00      	nop
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr
 8008808:	200000a8 	.word	0x200000a8
 800880c:	2000045c 	.word	0x2000045c

08008810 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008810:	b480      	push	{r7}
 8008812:	af00      	add	r7, sp, #0
  return uwTick;
 8008814:	4b02      	ldr	r3, [pc, #8]	; (8008820 <HAL_GetTick+0x10>)
 8008816:	681b      	ldr	r3, [r3, #0]
}
 8008818:	4618      	mov	r0, r3
 800881a:	46bd      	mov	sp, r7
 800881c:	bc80      	pop	{r7}
 800881e:	4770      	bx	lr
 8008820:	2000045c 	.word	0x2000045c

08008824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800882c:	f7ff fff0 	bl	8008810 <HAL_GetTick>
 8008830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883c:	d005      	beq.n	800884a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800883e:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <HAL_Delay+0x44>)
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4413      	add	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800884a:	bf00      	nop
 800884c:	f7ff ffe0 	bl	8008810 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	429a      	cmp	r2, r3
 800885a:	d8f7      	bhi.n	800884c <HAL_Delay+0x28>
  {
  }
}
 800885c:	bf00      	nop
 800885e:	bf00      	nop
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	200000a8 	.word	0x200000a8

0800886c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e0ed      	b.n	8008a5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d102      	bne.n	8008890 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7ff fda4 	bl	80083d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0201 	orr.w	r2, r2, #1
 800889e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088a0:	f7ff ffb6 	bl	8008810 <HAL_GetTick>
 80088a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088a6:	e012      	b.n	80088ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80088a8:	f7ff ffb2 	bl	8008810 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	2b0a      	cmp	r3, #10
 80088b4:	d90b      	bls.n	80088ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2205      	movs	r2, #5
 80088c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e0c5      	b.n	8008a5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0e5      	beq.n	80088a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 0202 	bic.w	r2, r2, #2
 80088ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088ec:	f7ff ff90 	bl	8008810 <HAL_GetTick>
 80088f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80088f2:	e012      	b.n	800891a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80088f4:	f7ff ff8c 	bl	8008810 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	2b0a      	cmp	r3, #10
 8008900:	d90b      	bls.n	800891a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2205      	movs	r2, #5
 8008912:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e09f      	b.n	8008a5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f003 0302 	and.w	r3, r3, #2
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e5      	bne.n	80088f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	7e1b      	ldrb	r3, [r3, #24]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d108      	bne.n	8008942 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	e007      	b.n	8008952 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008950:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	7e5b      	ldrb	r3, [r3, #25]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d108      	bne.n	800896c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	e007      	b.n	800897c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800897a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	7e9b      	ldrb	r3, [r3, #26]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d108      	bne.n	8008996 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f042 0220 	orr.w	r2, r2, #32
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	e007      	b.n	80089a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0220 	bic.w	r2, r2, #32
 80089a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	7edb      	ldrb	r3, [r3, #27]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d108      	bne.n	80089c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f022 0210 	bic.w	r2, r2, #16
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	e007      	b.n	80089d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f042 0210 	orr.w	r2, r2, #16
 80089ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	7f1b      	ldrb	r3, [r3, #28]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d108      	bne.n	80089ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0208 	orr.w	r2, r2, #8
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	e007      	b.n	80089fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f022 0208 	bic.w	r2, r2, #8
 80089f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	7f5b      	ldrb	r3, [r3, #29]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d108      	bne.n	8008a14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f042 0204 	orr.w	r2, r2, #4
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	e007      	b.n	8008a24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0204 	bic.w	r2, r2, #4
 8008a22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689a      	ldr	r2, [r3, #8]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	431a      	orrs	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	695b      	ldr	r3, [r3, #20]
 8008a38:	ea42 0103 	orr.w	r1, r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	1e5a      	subs	r2, r3, #1
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
	...

08008a64 <__NVIC_SetPriorityGrouping>:
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f003 0307 	and.w	r3, r3, #7
 8008a72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a74:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a80:	4013      	ands	r3, r2
 8008a82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a96:	4a04      	ldr	r2, [pc, #16]	; (8008aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	60d3      	str	r3, [r2, #12]
}
 8008a9c:	bf00      	nop
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bc80      	pop	{r7}
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	e000ed00 	.word	0xe000ed00

08008aac <__NVIC_GetPriorityGrouping>:
{
 8008aac:	b480      	push	{r7}
 8008aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ab0:	4b04      	ldr	r3, [pc, #16]	; (8008ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	0a1b      	lsrs	r3, r3, #8
 8008ab6:	f003 0307 	and.w	r3, r3, #7
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bc80      	pop	{r7}
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	e000ed00 	.word	0xe000ed00

08008ac8 <__NVIC_EnableIRQ>:
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	db0b      	blt.n	8008af2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	f003 021f 	and.w	r2, r3, #31
 8008ae0:	4906      	ldr	r1, [pc, #24]	; (8008afc <__NVIC_EnableIRQ+0x34>)
 8008ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ae6:	095b      	lsrs	r3, r3, #5
 8008ae8:	2001      	movs	r0, #1
 8008aea:	fa00 f202 	lsl.w	r2, r0, r2
 8008aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bc80      	pop	{r7}
 8008afa:	4770      	bx	lr
 8008afc:	e000e100 	.word	0xe000e100

08008b00 <__NVIC_SetPriority>:
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	4603      	mov	r3, r0
 8008b08:	6039      	str	r1, [r7, #0]
 8008b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	db0a      	blt.n	8008b2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	490c      	ldr	r1, [pc, #48]	; (8008b4c <__NVIC_SetPriority+0x4c>)
 8008b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b1e:	0112      	lsls	r2, r2, #4
 8008b20:	b2d2      	uxtb	r2, r2
 8008b22:	440b      	add	r3, r1
 8008b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b28:	e00a      	b.n	8008b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	4908      	ldr	r1, [pc, #32]	; (8008b50 <__NVIC_SetPriority+0x50>)
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	3b04      	subs	r3, #4
 8008b38:	0112      	lsls	r2, r2, #4
 8008b3a:	b2d2      	uxtb	r2, r2
 8008b3c:	440b      	add	r3, r1
 8008b3e:	761a      	strb	r2, [r3, #24]
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bc80      	pop	{r7}
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	e000e100 	.word	0xe000e100
 8008b50:	e000ed00 	.word	0xe000ed00

08008b54 <NVIC_EncodePriority>:
{
 8008b54:	b480      	push	{r7}
 8008b56:	b089      	sub	sp, #36	; 0x24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f003 0307 	and.w	r3, r3, #7
 8008b66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	f1c3 0307 	rsb	r3, r3, #7
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	bf28      	it	cs
 8008b72:	2304      	movcs	r3, #4
 8008b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	3304      	adds	r3, #4
 8008b7a:	2b06      	cmp	r3, #6
 8008b7c:	d902      	bls.n	8008b84 <NVIC_EncodePriority+0x30>
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	3b03      	subs	r3, #3
 8008b82:	e000      	b.n	8008b86 <NVIC_EncodePriority+0x32>
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b88:	f04f 32ff 	mov.w	r2, #4294967295
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b92:	43da      	mvns	r2, r3
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	401a      	ands	r2, r3
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba6:	43d9      	mvns	r1, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bac:	4313      	orrs	r3, r2
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3724      	adds	r7, #36	; 0x24
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bc80      	pop	{r7}
 8008bb6:	4770      	bx	lr

08008bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008bc8:	d301      	bcc.n	8008bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e00f      	b.n	8008bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008bce:	4a0a      	ldr	r2, [pc, #40]	; (8008bf8 <SysTick_Config+0x40>)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008bd6:	210f      	movs	r1, #15
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	f7ff ff90 	bl	8008b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008be0:	4b05      	ldr	r3, [pc, #20]	; (8008bf8 <SysTick_Config+0x40>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008be6:	4b04      	ldr	r3, [pc, #16]	; (8008bf8 <SysTick_Config+0x40>)
 8008be8:	2207      	movs	r2, #7
 8008bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	e000e010 	.word	0xe000e010

08008bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff ff2d 	bl	8008a64 <__NVIC_SetPriorityGrouping>
}
 8008c0a:	bf00      	nop
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b086      	sub	sp, #24
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	4603      	mov	r3, r0
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	607a      	str	r2, [r7, #4]
 8008c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c20:	2300      	movs	r3, #0
 8008c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c24:	f7ff ff42 	bl	8008aac <__NVIC_GetPriorityGrouping>
 8008c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	68b9      	ldr	r1, [r7, #8]
 8008c2e:	6978      	ldr	r0, [r7, #20]
 8008c30:	f7ff ff90 	bl	8008b54 <NVIC_EncodePriority>
 8008c34:	4602      	mov	r2, r0
 8008c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c3a:	4611      	mov	r1, r2
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7ff ff5f 	bl	8008b00 <__NVIC_SetPriority>
}
 8008c42:	bf00      	nop
 8008c44:	3718      	adds	r7, #24
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b082      	sub	sp, #8
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	4603      	mov	r3, r0
 8008c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7ff ff35 	bl	8008ac8 <__NVIC_EnableIRQ>
}
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7ff ffa2 	bl	8008bb8 <SysTick_Config>
 8008c74:	4603      	mov	r3, r0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b085      	sub	sp, #20
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d008      	beq.n	8008ca8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2204      	movs	r2, #4
 8008c9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e020      	b.n	8008cea <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f022 020e 	bic.w	r2, r2, #14
 8008cb6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0201 	bic.w	r2, r2, #1
 8008cc6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd0:	2101      	movs	r1, #1
 8008cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8008cd6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bc80      	pop	{r7}
 8008cf2:	4770      	bx	lr

08008cf4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d005      	beq.n	8008d18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2204      	movs	r2, #4
 8008d10:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	73fb      	strb	r3, [r7, #15]
 8008d16:	e0d6      	b.n	8008ec6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f022 020e 	bic.w	r2, r2, #14
 8008d26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f022 0201 	bic.w	r2, r2, #1
 8008d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	4b64      	ldr	r3, [pc, #400]	; (8008ed0 <HAL_DMA_Abort_IT+0x1dc>)
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d958      	bls.n	8008df6 <HAL_DMA_Abort_IT+0x102>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a62      	ldr	r2, [pc, #392]	; (8008ed4 <HAL_DMA_Abort_IT+0x1e0>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d04f      	beq.n	8008dee <HAL_DMA_Abort_IT+0xfa>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a61      	ldr	r2, [pc, #388]	; (8008ed8 <HAL_DMA_Abort_IT+0x1e4>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d048      	beq.n	8008dea <HAL_DMA_Abort_IT+0xf6>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a5f      	ldr	r2, [pc, #380]	; (8008edc <HAL_DMA_Abort_IT+0x1e8>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d040      	beq.n	8008de4 <HAL_DMA_Abort_IT+0xf0>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a5e      	ldr	r2, [pc, #376]	; (8008ee0 <HAL_DMA_Abort_IT+0x1ec>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d038      	beq.n	8008dde <HAL_DMA_Abort_IT+0xea>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a5c      	ldr	r2, [pc, #368]	; (8008ee4 <HAL_DMA_Abort_IT+0x1f0>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d030      	beq.n	8008dd8 <HAL_DMA_Abort_IT+0xe4>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a5b      	ldr	r2, [pc, #364]	; (8008ee8 <HAL_DMA_Abort_IT+0x1f4>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d028      	beq.n	8008dd2 <HAL_DMA_Abort_IT+0xde>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a52      	ldr	r2, [pc, #328]	; (8008ed0 <HAL_DMA_Abort_IT+0x1dc>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d020      	beq.n	8008dcc <HAL_DMA_Abort_IT+0xd8>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a57      	ldr	r2, [pc, #348]	; (8008eec <HAL_DMA_Abort_IT+0x1f8>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d019      	beq.n	8008dc8 <HAL_DMA_Abort_IT+0xd4>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a55      	ldr	r2, [pc, #340]	; (8008ef0 <HAL_DMA_Abort_IT+0x1fc>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d012      	beq.n	8008dc4 <HAL_DMA_Abort_IT+0xd0>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a54      	ldr	r2, [pc, #336]	; (8008ef4 <HAL_DMA_Abort_IT+0x200>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d00a      	beq.n	8008dbe <HAL_DMA_Abort_IT+0xca>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a52      	ldr	r2, [pc, #328]	; (8008ef8 <HAL_DMA_Abort_IT+0x204>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d102      	bne.n	8008db8 <HAL_DMA_Abort_IT+0xc4>
 8008db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db6:	e01b      	b.n	8008df0 <HAL_DMA_Abort_IT+0xfc>
 8008db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dbc:	e018      	b.n	8008df0 <HAL_DMA_Abort_IT+0xfc>
 8008dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dc2:	e015      	b.n	8008df0 <HAL_DMA_Abort_IT+0xfc>
 8008dc4:	2310      	movs	r3, #16
 8008dc6:	e013      	b.n	8008df0 <HAL_DMA_Abort_IT+0xfc>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e011      	b.n	8008df0 <HAL_DMA_Abort_IT+0xfc>
 8008dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008dd0:	e00e      	b.n	8008df0 <HAL_DMA_Abort_IT+0xfc>
 8008dd2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008dd6:	e00b      	b.n	8008df0 <HAL_DMA_Abort_IT+0xfc>
 8008dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ddc:	e008      	b.n	8008df0 <HAL_DMA_Abort_IT+0xfc>
 8008dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008de2:	e005      	b.n	8008df0 <HAL_DMA_Abort_IT+0xfc>
 8008de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008de8:	e002      	b.n	8008df0 <HAL_DMA_Abort_IT+0xfc>
 8008dea:	2310      	movs	r3, #16
 8008dec:	e000      	b.n	8008df0 <HAL_DMA_Abort_IT+0xfc>
 8008dee:	2301      	movs	r3, #1
 8008df0:	4a42      	ldr	r2, [pc, #264]	; (8008efc <HAL_DMA_Abort_IT+0x208>)
 8008df2:	6053      	str	r3, [r2, #4]
 8008df4:	e057      	b.n	8008ea6 <HAL_DMA_Abort_IT+0x1b2>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a36      	ldr	r2, [pc, #216]	; (8008ed4 <HAL_DMA_Abort_IT+0x1e0>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d04f      	beq.n	8008ea0 <HAL_DMA_Abort_IT+0x1ac>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a34      	ldr	r2, [pc, #208]	; (8008ed8 <HAL_DMA_Abort_IT+0x1e4>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d048      	beq.n	8008e9c <HAL_DMA_Abort_IT+0x1a8>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a33      	ldr	r2, [pc, #204]	; (8008edc <HAL_DMA_Abort_IT+0x1e8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d040      	beq.n	8008e96 <HAL_DMA_Abort_IT+0x1a2>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a31      	ldr	r2, [pc, #196]	; (8008ee0 <HAL_DMA_Abort_IT+0x1ec>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d038      	beq.n	8008e90 <HAL_DMA_Abort_IT+0x19c>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a30      	ldr	r2, [pc, #192]	; (8008ee4 <HAL_DMA_Abort_IT+0x1f0>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d030      	beq.n	8008e8a <HAL_DMA_Abort_IT+0x196>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a2e      	ldr	r2, [pc, #184]	; (8008ee8 <HAL_DMA_Abort_IT+0x1f4>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d028      	beq.n	8008e84 <HAL_DMA_Abort_IT+0x190>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a26      	ldr	r2, [pc, #152]	; (8008ed0 <HAL_DMA_Abort_IT+0x1dc>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d020      	beq.n	8008e7e <HAL_DMA_Abort_IT+0x18a>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a2a      	ldr	r2, [pc, #168]	; (8008eec <HAL_DMA_Abort_IT+0x1f8>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d019      	beq.n	8008e7a <HAL_DMA_Abort_IT+0x186>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a29      	ldr	r2, [pc, #164]	; (8008ef0 <HAL_DMA_Abort_IT+0x1fc>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d012      	beq.n	8008e76 <HAL_DMA_Abort_IT+0x182>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a27      	ldr	r2, [pc, #156]	; (8008ef4 <HAL_DMA_Abort_IT+0x200>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d00a      	beq.n	8008e70 <HAL_DMA_Abort_IT+0x17c>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a26      	ldr	r2, [pc, #152]	; (8008ef8 <HAL_DMA_Abort_IT+0x204>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d102      	bne.n	8008e6a <HAL_DMA_Abort_IT+0x176>
 8008e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e68:	e01b      	b.n	8008ea2 <HAL_DMA_Abort_IT+0x1ae>
 8008e6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e6e:	e018      	b.n	8008ea2 <HAL_DMA_Abort_IT+0x1ae>
 8008e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e74:	e015      	b.n	8008ea2 <HAL_DMA_Abort_IT+0x1ae>
 8008e76:	2310      	movs	r3, #16
 8008e78:	e013      	b.n	8008ea2 <HAL_DMA_Abort_IT+0x1ae>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e011      	b.n	8008ea2 <HAL_DMA_Abort_IT+0x1ae>
 8008e7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e82:	e00e      	b.n	8008ea2 <HAL_DMA_Abort_IT+0x1ae>
 8008e84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e88:	e00b      	b.n	8008ea2 <HAL_DMA_Abort_IT+0x1ae>
 8008e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e8e:	e008      	b.n	8008ea2 <HAL_DMA_Abort_IT+0x1ae>
 8008e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e94:	e005      	b.n	8008ea2 <HAL_DMA_Abort_IT+0x1ae>
 8008e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e9a:	e002      	b.n	8008ea2 <HAL_DMA_Abort_IT+0x1ae>
 8008e9c:	2310      	movs	r3, #16
 8008e9e:	e000      	b.n	8008ea2 <HAL_DMA_Abort_IT+0x1ae>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	4a17      	ldr	r2, [pc, #92]	; (8008f00 <HAL_DMA_Abort_IT+0x20c>)
 8008ea4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d003      	beq.n	8008ec6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	4798      	blx	r3
    } 
  }
  return status;
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	40020080 	.word	0x40020080
 8008ed4:	40020008 	.word	0x40020008
 8008ed8:	4002001c 	.word	0x4002001c
 8008edc:	40020030 	.word	0x40020030
 8008ee0:	40020044 	.word	0x40020044
 8008ee4:	40020058 	.word	0x40020058
 8008ee8:	4002006c 	.word	0x4002006c
 8008eec:	40020408 	.word	0x40020408
 8008ef0:	4002041c 	.word	0x4002041c
 8008ef4:	40020430 	.word	0x40020430
 8008ef8:	40020444 	.word	0x40020444
 8008efc:	40020400 	.word	0x40020400
 8008f00:	40020000 	.word	0x40020000

08008f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b08b      	sub	sp, #44	; 0x2c
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008f12:	2300      	movs	r3, #0
 8008f14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f16:	e179      	b.n	800920c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008f18:	2201      	movs	r2, #1
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69fa      	ldr	r2, [r7, #28]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	f040 8168 	bne.w	8009206 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	4a96      	ldr	r2, [pc, #600]	; (8009194 <HAL_GPIO_Init+0x290>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d05e      	beq.n	8008ffe <HAL_GPIO_Init+0xfa>
 8008f40:	4a94      	ldr	r2, [pc, #592]	; (8009194 <HAL_GPIO_Init+0x290>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d875      	bhi.n	8009032 <HAL_GPIO_Init+0x12e>
 8008f46:	4a94      	ldr	r2, [pc, #592]	; (8009198 <HAL_GPIO_Init+0x294>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d058      	beq.n	8008ffe <HAL_GPIO_Init+0xfa>
 8008f4c:	4a92      	ldr	r2, [pc, #584]	; (8009198 <HAL_GPIO_Init+0x294>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d86f      	bhi.n	8009032 <HAL_GPIO_Init+0x12e>
 8008f52:	4a92      	ldr	r2, [pc, #584]	; (800919c <HAL_GPIO_Init+0x298>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d052      	beq.n	8008ffe <HAL_GPIO_Init+0xfa>
 8008f58:	4a90      	ldr	r2, [pc, #576]	; (800919c <HAL_GPIO_Init+0x298>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d869      	bhi.n	8009032 <HAL_GPIO_Init+0x12e>
 8008f5e:	4a90      	ldr	r2, [pc, #576]	; (80091a0 <HAL_GPIO_Init+0x29c>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d04c      	beq.n	8008ffe <HAL_GPIO_Init+0xfa>
 8008f64:	4a8e      	ldr	r2, [pc, #568]	; (80091a0 <HAL_GPIO_Init+0x29c>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d863      	bhi.n	8009032 <HAL_GPIO_Init+0x12e>
 8008f6a:	4a8e      	ldr	r2, [pc, #568]	; (80091a4 <HAL_GPIO_Init+0x2a0>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d046      	beq.n	8008ffe <HAL_GPIO_Init+0xfa>
 8008f70:	4a8c      	ldr	r2, [pc, #560]	; (80091a4 <HAL_GPIO_Init+0x2a0>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d85d      	bhi.n	8009032 <HAL_GPIO_Init+0x12e>
 8008f76:	2b12      	cmp	r3, #18
 8008f78:	d82a      	bhi.n	8008fd0 <HAL_GPIO_Init+0xcc>
 8008f7a:	2b12      	cmp	r3, #18
 8008f7c:	d859      	bhi.n	8009032 <HAL_GPIO_Init+0x12e>
 8008f7e:	a201      	add	r2, pc, #4	; (adr r2, 8008f84 <HAL_GPIO_Init+0x80>)
 8008f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f84:	08008fff 	.word	0x08008fff
 8008f88:	08008fd9 	.word	0x08008fd9
 8008f8c:	08008feb 	.word	0x08008feb
 8008f90:	0800902d 	.word	0x0800902d
 8008f94:	08009033 	.word	0x08009033
 8008f98:	08009033 	.word	0x08009033
 8008f9c:	08009033 	.word	0x08009033
 8008fa0:	08009033 	.word	0x08009033
 8008fa4:	08009033 	.word	0x08009033
 8008fa8:	08009033 	.word	0x08009033
 8008fac:	08009033 	.word	0x08009033
 8008fb0:	08009033 	.word	0x08009033
 8008fb4:	08009033 	.word	0x08009033
 8008fb8:	08009033 	.word	0x08009033
 8008fbc:	08009033 	.word	0x08009033
 8008fc0:	08009033 	.word	0x08009033
 8008fc4:	08009033 	.word	0x08009033
 8008fc8:	08008fe1 	.word	0x08008fe1
 8008fcc:	08008ff5 	.word	0x08008ff5
 8008fd0:	4a75      	ldr	r2, [pc, #468]	; (80091a8 <HAL_GPIO_Init+0x2a4>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d013      	beq.n	8008ffe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008fd6:	e02c      	b.n	8009032 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	623b      	str	r3, [r7, #32]
          break;
 8008fde:	e029      	b.n	8009034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	623b      	str	r3, [r7, #32]
          break;
 8008fe8:	e024      	b.n	8009034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	3308      	adds	r3, #8
 8008ff0:	623b      	str	r3, [r7, #32]
          break;
 8008ff2:	e01f      	b.n	8009034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	330c      	adds	r3, #12
 8008ffa:	623b      	str	r3, [r7, #32]
          break;
 8008ffc:	e01a      	b.n	8009034 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d102      	bne.n	800900c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009006:	2304      	movs	r3, #4
 8009008:	623b      	str	r3, [r7, #32]
          break;
 800900a:	e013      	b.n	8009034 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d105      	bne.n	8009020 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009014:	2308      	movs	r3, #8
 8009016:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	611a      	str	r2, [r3, #16]
          break;
 800901e:	e009      	b.n	8009034 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009020:	2308      	movs	r3, #8
 8009022:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	69fa      	ldr	r2, [r7, #28]
 8009028:	615a      	str	r2, [r3, #20]
          break;
 800902a:	e003      	b.n	8009034 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800902c:	2300      	movs	r3, #0
 800902e:	623b      	str	r3, [r7, #32]
          break;
 8009030:	e000      	b.n	8009034 <HAL_GPIO_Init+0x130>
          break;
 8009032:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	2bff      	cmp	r3, #255	; 0xff
 8009038:	d801      	bhi.n	800903e <HAL_GPIO_Init+0x13a>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	e001      	b.n	8009042 <HAL_GPIO_Init+0x13e>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	3304      	adds	r3, #4
 8009042:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	2bff      	cmp	r3, #255	; 0xff
 8009048:	d802      	bhi.n	8009050 <HAL_GPIO_Init+0x14c>
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	e002      	b.n	8009056 <HAL_GPIO_Init+0x152>
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	3b08      	subs	r3, #8
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	210f      	movs	r1, #15
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	fa01 f303 	lsl.w	r3, r1, r3
 8009064:	43db      	mvns	r3, r3
 8009066:	401a      	ands	r2, r3
 8009068:	6a39      	ldr	r1, [r7, #32]
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	fa01 f303 	lsl.w	r3, r1, r3
 8009070:	431a      	orrs	r2, r3
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800907e:	2b00      	cmp	r3, #0
 8009080:	f000 80c1 	beq.w	8009206 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009084:	4b49      	ldr	r3, [pc, #292]	; (80091ac <HAL_GPIO_Init+0x2a8>)
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	4a48      	ldr	r2, [pc, #288]	; (80091ac <HAL_GPIO_Init+0x2a8>)
 800908a:	f043 0301 	orr.w	r3, r3, #1
 800908e:	6193      	str	r3, [r2, #24]
 8009090:	4b46      	ldr	r3, [pc, #280]	; (80091ac <HAL_GPIO_Init+0x2a8>)
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	60bb      	str	r3, [r7, #8]
 800909a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800909c:	4a44      	ldr	r2, [pc, #272]	; (80091b0 <HAL_GPIO_Init+0x2ac>)
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	089b      	lsrs	r3, r3, #2
 80090a2:	3302      	adds	r3, #2
 80090a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	f003 0303 	and.w	r3, r3, #3
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	220f      	movs	r2, #15
 80090b4:	fa02 f303 	lsl.w	r3, r2, r3
 80090b8:	43db      	mvns	r3, r3
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	4013      	ands	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a3c      	ldr	r2, [pc, #240]	; (80091b4 <HAL_GPIO_Init+0x2b0>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d01f      	beq.n	8009108 <HAL_GPIO_Init+0x204>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a3b      	ldr	r2, [pc, #236]	; (80091b8 <HAL_GPIO_Init+0x2b4>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d019      	beq.n	8009104 <HAL_GPIO_Init+0x200>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a3a      	ldr	r2, [pc, #232]	; (80091bc <HAL_GPIO_Init+0x2b8>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d013      	beq.n	8009100 <HAL_GPIO_Init+0x1fc>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a39      	ldr	r2, [pc, #228]	; (80091c0 <HAL_GPIO_Init+0x2bc>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d00d      	beq.n	80090fc <HAL_GPIO_Init+0x1f8>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a38      	ldr	r2, [pc, #224]	; (80091c4 <HAL_GPIO_Init+0x2c0>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d007      	beq.n	80090f8 <HAL_GPIO_Init+0x1f4>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a37      	ldr	r2, [pc, #220]	; (80091c8 <HAL_GPIO_Init+0x2c4>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d101      	bne.n	80090f4 <HAL_GPIO_Init+0x1f0>
 80090f0:	2305      	movs	r3, #5
 80090f2:	e00a      	b.n	800910a <HAL_GPIO_Init+0x206>
 80090f4:	2306      	movs	r3, #6
 80090f6:	e008      	b.n	800910a <HAL_GPIO_Init+0x206>
 80090f8:	2304      	movs	r3, #4
 80090fa:	e006      	b.n	800910a <HAL_GPIO_Init+0x206>
 80090fc:	2303      	movs	r3, #3
 80090fe:	e004      	b.n	800910a <HAL_GPIO_Init+0x206>
 8009100:	2302      	movs	r3, #2
 8009102:	e002      	b.n	800910a <HAL_GPIO_Init+0x206>
 8009104:	2301      	movs	r3, #1
 8009106:	e000      	b.n	800910a <HAL_GPIO_Init+0x206>
 8009108:	2300      	movs	r3, #0
 800910a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800910c:	f002 0203 	and.w	r2, r2, #3
 8009110:	0092      	lsls	r2, r2, #2
 8009112:	4093      	lsls	r3, r2
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	4313      	orrs	r3, r2
 8009118:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800911a:	4925      	ldr	r1, [pc, #148]	; (80091b0 <HAL_GPIO_Init+0x2ac>)
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	089b      	lsrs	r3, r3, #2
 8009120:	3302      	adds	r3, #2
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d006      	beq.n	8009142 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009134:	4b25      	ldr	r3, [pc, #148]	; (80091cc <HAL_GPIO_Init+0x2c8>)
 8009136:	689a      	ldr	r2, [r3, #8]
 8009138:	4924      	ldr	r1, [pc, #144]	; (80091cc <HAL_GPIO_Init+0x2c8>)
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	4313      	orrs	r3, r2
 800913e:	608b      	str	r3, [r1, #8]
 8009140:	e006      	b.n	8009150 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009142:	4b22      	ldr	r3, [pc, #136]	; (80091cc <HAL_GPIO_Init+0x2c8>)
 8009144:	689a      	ldr	r2, [r3, #8]
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	43db      	mvns	r3, r3
 800914a:	4920      	ldr	r1, [pc, #128]	; (80091cc <HAL_GPIO_Init+0x2c8>)
 800914c:	4013      	ands	r3, r2
 800914e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d006      	beq.n	800916a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800915c:	4b1b      	ldr	r3, [pc, #108]	; (80091cc <HAL_GPIO_Init+0x2c8>)
 800915e:	68da      	ldr	r2, [r3, #12]
 8009160:	491a      	ldr	r1, [pc, #104]	; (80091cc <HAL_GPIO_Init+0x2c8>)
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	4313      	orrs	r3, r2
 8009166:	60cb      	str	r3, [r1, #12]
 8009168:	e006      	b.n	8009178 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800916a:	4b18      	ldr	r3, [pc, #96]	; (80091cc <HAL_GPIO_Init+0x2c8>)
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	43db      	mvns	r3, r3
 8009172:	4916      	ldr	r1, [pc, #88]	; (80091cc <HAL_GPIO_Init+0x2c8>)
 8009174:	4013      	ands	r3, r2
 8009176:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d025      	beq.n	80091d0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009184:	4b11      	ldr	r3, [pc, #68]	; (80091cc <HAL_GPIO_Init+0x2c8>)
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	4910      	ldr	r1, [pc, #64]	; (80091cc <HAL_GPIO_Init+0x2c8>)
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	4313      	orrs	r3, r2
 800918e:	604b      	str	r3, [r1, #4]
 8009190:	e025      	b.n	80091de <HAL_GPIO_Init+0x2da>
 8009192:	bf00      	nop
 8009194:	10320000 	.word	0x10320000
 8009198:	10310000 	.word	0x10310000
 800919c:	10220000 	.word	0x10220000
 80091a0:	10210000 	.word	0x10210000
 80091a4:	10120000 	.word	0x10120000
 80091a8:	10110000 	.word	0x10110000
 80091ac:	40021000 	.word	0x40021000
 80091b0:	40010000 	.word	0x40010000
 80091b4:	40010800 	.word	0x40010800
 80091b8:	40010c00 	.word	0x40010c00
 80091bc:	40011000 	.word	0x40011000
 80091c0:	40011400 	.word	0x40011400
 80091c4:	40011800 	.word	0x40011800
 80091c8:	40011c00 	.word	0x40011c00
 80091cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80091d0:	4b15      	ldr	r3, [pc, #84]	; (8009228 <HAL_GPIO_Init+0x324>)
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	43db      	mvns	r3, r3
 80091d8:	4913      	ldr	r1, [pc, #76]	; (8009228 <HAL_GPIO_Init+0x324>)
 80091da:	4013      	ands	r3, r2
 80091dc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d006      	beq.n	80091f8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80091ea:	4b0f      	ldr	r3, [pc, #60]	; (8009228 <HAL_GPIO_Init+0x324>)
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	490e      	ldr	r1, [pc, #56]	; (8009228 <HAL_GPIO_Init+0x324>)
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	600b      	str	r3, [r1, #0]
 80091f6:	e006      	b.n	8009206 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80091f8:	4b0b      	ldr	r3, [pc, #44]	; (8009228 <HAL_GPIO_Init+0x324>)
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	43db      	mvns	r3, r3
 8009200:	4909      	ldr	r1, [pc, #36]	; (8009228 <HAL_GPIO_Init+0x324>)
 8009202:	4013      	ands	r3, r2
 8009204:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	3301      	adds	r3, #1
 800920a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	fa22 f303 	lsr.w	r3, r2, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	f47f ae7e 	bne.w	8008f18 <HAL_GPIO_Init+0x14>
  }
}
 800921c:	bf00      	nop
 800921e:	bf00      	nop
 8009220:	372c      	adds	r7, #44	; 0x2c
 8009222:	46bd      	mov	sp, r7
 8009224:	bc80      	pop	{r7}
 8009226:	4770      	bx	lr
 8009228:	40010400 	.word	0x40010400

0800922c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800922c:	b480      	push	{r7}
 800922e:	b089      	sub	sp, #36	; 0x24
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009236:	2300      	movs	r3, #0
 8009238:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800923a:	e0a6      	b.n	800938a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800923c:	2201      	movs	r2, #1
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	fa02 f303 	lsl.w	r3, r2, r3
 8009244:	683a      	ldr	r2, [r7, #0]
 8009246:	4013      	ands	r3, r2
 8009248:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 8099 	beq.w	8009384 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009252:	4a54      	ldr	r2, [pc, #336]	; (80093a4 <HAL_GPIO_DeInit+0x178>)
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	089b      	lsrs	r3, r3, #2
 8009258:	3302      	adds	r3, #2
 800925a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800925e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	f003 0303 	and.w	r3, r3, #3
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	220f      	movs	r2, #15
 800926a:	fa02 f303 	lsl.w	r3, r2, r3
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	4013      	ands	r3, r2
 8009272:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a4c      	ldr	r2, [pc, #304]	; (80093a8 <HAL_GPIO_DeInit+0x17c>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d01f      	beq.n	80092bc <HAL_GPIO_DeInit+0x90>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a4b      	ldr	r2, [pc, #300]	; (80093ac <HAL_GPIO_DeInit+0x180>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d019      	beq.n	80092b8 <HAL_GPIO_DeInit+0x8c>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a4a      	ldr	r2, [pc, #296]	; (80093b0 <HAL_GPIO_DeInit+0x184>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d013      	beq.n	80092b4 <HAL_GPIO_DeInit+0x88>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a49      	ldr	r2, [pc, #292]	; (80093b4 <HAL_GPIO_DeInit+0x188>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d00d      	beq.n	80092b0 <HAL_GPIO_DeInit+0x84>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a48      	ldr	r2, [pc, #288]	; (80093b8 <HAL_GPIO_DeInit+0x18c>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d007      	beq.n	80092ac <HAL_GPIO_DeInit+0x80>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a47      	ldr	r2, [pc, #284]	; (80093bc <HAL_GPIO_DeInit+0x190>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d101      	bne.n	80092a8 <HAL_GPIO_DeInit+0x7c>
 80092a4:	2305      	movs	r3, #5
 80092a6:	e00a      	b.n	80092be <HAL_GPIO_DeInit+0x92>
 80092a8:	2306      	movs	r3, #6
 80092aa:	e008      	b.n	80092be <HAL_GPIO_DeInit+0x92>
 80092ac:	2304      	movs	r3, #4
 80092ae:	e006      	b.n	80092be <HAL_GPIO_DeInit+0x92>
 80092b0:	2303      	movs	r3, #3
 80092b2:	e004      	b.n	80092be <HAL_GPIO_DeInit+0x92>
 80092b4:	2302      	movs	r3, #2
 80092b6:	e002      	b.n	80092be <HAL_GPIO_DeInit+0x92>
 80092b8:	2301      	movs	r3, #1
 80092ba:	e000      	b.n	80092be <HAL_GPIO_DeInit+0x92>
 80092bc:	2300      	movs	r3, #0
 80092be:	69fa      	ldr	r2, [r7, #28]
 80092c0:	f002 0203 	and.w	r2, r2, #3
 80092c4:	0092      	lsls	r2, r2, #2
 80092c6:	4093      	lsls	r3, r2
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d132      	bne.n	8009334 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80092ce:	4b3c      	ldr	r3, [pc, #240]	; (80093c0 <HAL_GPIO_DeInit+0x194>)
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	43db      	mvns	r3, r3
 80092d6:	493a      	ldr	r1, [pc, #232]	; (80093c0 <HAL_GPIO_DeInit+0x194>)
 80092d8:	4013      	ands	r3, r2
 80092da:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80092dc:	4b38      	ldr	r3, [pc, #224]	; (80093c0 <HAL_GPIO_DeInit+0x194>)
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	43db      	mvns	r3, r3
 80092e4:	4936      	ldr	r1, [pc, #216]	; (80093c0 <HAL_GPIO_DeInit+0x194>)
 80092e6:	4013      	ands	r3, r2
 80092e8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80092ea:	4b35      	ldr	r3, [pc, #212]	; (80093c0 <HAL_GPIO_DeInit+0x194>)
 80092ec:	68da      	ldr	r2, [r3, #12]
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	43db      	mvns	r3, r3
 80092f2:	4933      	ldr	r1, [pc, #204]	; (80093c0 <HAL_GPIO_DeInit+0x194>)
 80092f4:	4013      	ands	r3, r2
 80092f6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80092f8:	4b31      	ldr	r3, [pc, #196]	; (80093c0 <HAL_GPIO_DeInit+0x194>)
 80092fa:	689a      	ldr	r2, [r3, #8]
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	43db      	mvns	r3, r3
 8009300:	492f      	ldr	r1, [pc, #188]	; (80093c0 <HAL_GPIO_DeInit+0x194>)
 8009302:	4013      	ands	r3, r2
 8009304:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	f003 0303 	and.w	r3, r3, #3
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	220f      	movs	r2, #15
 8009310:	fa02 f303 	lsl.w	r3, r2, r3
 8009314:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009316:	4a23      	ldr	r2, [pc, #140]	; (80093a4 <HAL_GPIO_DeInit+0x178>)
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	089b      	lsrs	r3, r3, #2
 800931c:	3302      	adds	r3, #2
 800931e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	43da      	mvns	r2, r3
 8009326:	481f      	ldr	r0, [pc, #124]	; (80093a4 <HAL_GPIO_DeInit+0x178>)
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	089b      	lsrs	r3, r3, #2
 800932c:	400a      	ands	r2, r1
 800932e:	3302      	adds	r3, #2
 8009330:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	2bff      	cmp	r3, #255	; 0xff
 8009338:	d801      	bhi.n	800933e <HAL_GPIO_DeInit+0x112>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	e001      	b.n	8009342 <HAL_GPIO_DeInit+0x116>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3304      	adds	r3, #4
 8009342:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	2bff      	cmp	r3, #255	; 0xff
 8009348:	d802      	bhi.n	8009350 <HAL_GPIO_DeInit+0x124>
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	e002      	b.n	8009356 <HAL_GPIO_DeInit+0x12a>
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	3b08      	subs	r3, #8
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	210f      	movs	r1, #15
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	fa01 f303 	lsl.w	r3, r1, r3
 8009364:	43db      	mvns	r3, r3
 8009366:	401a      	ands	r2, r3
 8009368:	2104      	movs	r1, #4
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	fa01 f303 	lsl.w	r3, r1, r3
 8009370:	431a      	orrs	r2, r3
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68da      	ldr	r2, [r3, #12]
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	43db      	mvns	r3, r3
 800937e:	401a      	ands	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	3301      	adds	r3, #1
 8009388:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	fa22 f303 	lsr.w	r3, r2, r3
 8009392:	2b00      	cmp	r3, #0
 8009394:	f47f af52 	bne.w	800923c <HAL_GPIO_DeInit+0x10>
  }
}
 8009398:	bf00      	nop
 800939a:	bf00      	nop
 800939c:	3724      	adds	r7, #36	; 0x24
 800939e:	46bd      	mov	sp, r7
 80093a0:	bc80      	pop	{r7}
 80093a2:	4770      	bx	lr
 80093a4:	40010000 	.word	0x40010000
 80093a8:	40010800 	.word	0x40010800
 80093ac:	40010c00 	.word	0x40010c00
 80093b0:	40011000 	.word	0x40011000
 80093b4:	40011400 	.word	0x40011400
 80093b8:	40011800 	.word	0x40011800
 80093bc:	40011c00 	.word	0x40011c00
 80093c0:	40010400 	.word	0x40010400

080093c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	460b      	mov	r3, r1
 80093ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	689a      	ldr	r2, [r3, #8]
 80093d4:	887b      	ldrh	r3, [r7, #2]
 80093d6:	4013      	ands	r3, r2
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d002      	beq.n	80093e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80093dc:	2301      	movs	r3, #1
 80093de:	73fb      	strb	r3, [r7, #15]
 80093e0:	e001      	b.n	80093e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bc80      	pop	{r7}
 80093f0:	4770      	bx	lr

080093f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	460b      	mov	r3, r1
 80093fc:	807b      	strh	r3, [r7, #2]
 80093fe:	4613      	mov	r3, r2
 8009400:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009402:	787b      	ldrb	r3, [r7, #1]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d003      	beq.n	8009410 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009408:	887a      	ldrh	r2, [r7, #2]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800940e:	e003      	b.n	8009418 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009410:	887b      	ldrh	r3, [r7, #2]
 8009412:	041a      	lsls	r2, r3, #16
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	611a      	str	r2, [r3, #16]
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	bc80      	pop	{r7}
 8009420:	4770      	bx	lr

08009422 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009422:	b480      	push	{r7}
 8009424:	b085      	sub	sp, #20
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	460b      	mov	r3, r1
 800942c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009434:	887a      	ldrh	r2, [r7, #2]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	4013      	ands	r3, r2
 800943a:	041a      	lsls	r2, r3, #16
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	43d9      	mvns	r1, r3
 8009440:	887b      	ldrh	r3, [r7, #2]
 8009442:	400b      	ands	r3, r1
 8009444:	431a      	orrs	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	611a      	str	r2, [r3, #16]
}
 800944a:	bf00      	nop
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	bc80      	pop	{r7}
 8009452:	4770      	bx	lr

08009454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e12b      	b.n	80096be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d106      	bne.n	8009480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7fe fff8 	bl	8008470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2224      	movs	r2, #36	; 0x24
 8009484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f022 0201 	bic.w	r2, r2, #1
 8009496:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80094b8:	f001 fdb8 	bl	800b02c <HAL_RCC_GetPCLK1Freq>
 80094bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	4a81      	ldr	r2, [pc, #516]	; (80096c8 <HAL_I2C_Init+0x274>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d807      	bhi.n	80094d8 <HAL_I2C_Init+0x84>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	4a80      	ldr	r2, [pc, #512]	; (80096cc <HAL_I2C_Init+0x278>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	bf94      	ite	ls
 80094d0:	2301      	movls	r3, #1
 80094d2:	2300      	movhi	r3, #0
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	e006      	b.n	80094e6 <HAL_I2C_Init+0x92>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	4a7d      	ldr	r2, [pc, #500]	; (80096d0 <HAL_I2C_Init+0x27c>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	bf94      	ite	ls
 80094e0:	2301      	movls	r3, #1
 80094e2:	2300      	movhi	r3, #0
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e0e7      	b.n	80096be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	4a78      	ldr	r2, [pc, #480]	; (80096d4 <HAL_I2C_Init+0x280>)
 80094f2:	fba2 2303 	umull	r2, r3, r2, r3
 80094f6:	0c9b      	lsrs	r3, r3, #18
 80094f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	430a      	orrs	r2, r1
 800950c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6a1b      	ldr	r3, [r3, #32]
 8009514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	4a6a      	ldr	r2, [pc, #424]	; (80096c8 <HAL_I2C_Init+0x274>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d802      	bhi.n	8009528 <HAL_I2C_Init+0xd4>
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	3301      	adds	r3, #1
 8009526:	e009      	b.n	800953c <HAL_I2C_Init+0xe8>
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800952e:	fb02 f303 	mul.w	r3, r2, r3
 8009532:	4a69      	ldr	r2, [pc, #420]	; (80096d8 <HAL_I2C_Init+0x284>)
 8009534:	fba2 2303 	umull	r2, r3, r2, r3
 8009538:	099b      	lsrs	r3, r3, #6
 800953a:	3301      	adds	r3, #1
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	6812      	ldr	r2, [r2, #0]
 8009540:	430b      	orrs	r3, r1
 8009542:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	69db      	ldr	r3, [r3, #28]
 800954a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800954e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	495c      	ldr	r1, [pc, #368]	; (80096c8 <HAL_I2C_Init+0x274>)
 8009558:	428b      	cmp	r3, r1
 800955a:	d819      	bhi.n	8009590 <HAL_I2C_Init+0x13c>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	1e59      	subs	r1, r3, #1
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	005b      	lsls	r3, r3, #1
 8009566:	fbb1 f3f3 	udiv	r3, r1, r3
 800956a:	1c59      	adds	r1, r3, #1
 800956c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009570:	400b      	ands	r3, r1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00a      	beq.n	800958c <HAL_I2C_Init+0x138>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	1e59      	subs	r1, r3, #1
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	005b      	lsls	r3, r3, #1
 8009580:	fbb1 f3f3 	udiv	r3, r1, r3
 8009584:	3301      	adds	r3, #1
 8009586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800958a:	e051      	b.n	8009630 <HAL_I2C_Init+0x1dc>
 800958c:	2304      	movs	r3, #4
 800958e:	e04f      	b.n	8009630 <HAL_I2C_Init+0x1dc>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d111      	bne.n	80095bc <HAL_I2C_Init+0x168>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	1e58      	subs	r0, r3, #1
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6859      	ldr	r1, [r3, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	005b      	lsls	r3, r3, #1
 80095a4:	440b      	add	r3, r1
 80095a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80095aa:	3301      	adds	r3, #1
 80095ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	bf0c      	ite	eq
 80095b4:	2301      	moveq	r3, #1
 80095b6:	2300      	movne	r3, #0
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	e012      	b.n	80095e2 <HAL_I2C_Init+0x18e>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	1e58      	subs	r0, r3, #1
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6859      	ldr	r1, [r3, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	440b      	add	r3, r1
 80095ca:	0099      	lsls	r1, r3, #2
 80095cc:	440b      	add	r3, r1
 80095ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80095d2:	3301      	adds	r3, #1
 80095d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095d8:	2b00      	cmp	r3, #0
 80095da:	bf0c      	ite	eq
 80095dc:	2301      	moveq	r3, #1
 80095de:	2300      	movne	r3, #0
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <HAL_I2C_Init+0x196>
 80095e6:	2301      	movs	r3, #1
 80095e8:	e022      	b.n	8009630 <HAL_I2C_Init+0x1dc>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10e      	bne.n	8009610 <HAL_I2C_Init+0x1bc>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	1e58      	subs	r0, r3, #1
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6859      	ldr	r1, [r3, #4]
 80095fa:	460b      	mov	r3, r1
 80095fc:	005b      	lsls	r3, r3, #1
 80095fe:	440b      	add	r3, r1
 8009600:	fbb0 f3f3 	udiv	r3, r0, r3
 8009604:	3301      	adds	r3, #1
 8009606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800960a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800960e:	e00f      	b.n	8009630 <HAL_I2C_Init+0x1dc>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	1e58      	subs	r0, r3, #1
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6859      	ldr	r1, [r3, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	440b      	add	r3, r1
 800961e:	0099      	lsls	r1, r3, #2
 8009620:	440b      	add	r3, r1
 8009622:	fbb0 f3f3 	udiv	r3, r0, r3
 8009626:	3301      	adds	r3, #1
 8009628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800962c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009630:	6879      	ldr	r1, [r7, #4]
 8009632:	6809      	ldr	r1, [r1, #0]
 8009634:	4313      	orrs	r3, r2
 8009636:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	69da      	ldr	r2, [r3, #28]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	431a      	orrs	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	430a      	orrs	r2, r1
 8009652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800965e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	6911      	ldr	r1, [r2, #16]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	68d2      	ldr	r2, [r2, #12]
 800966a:	4311      	orrs	r1, r2
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	6812      	ldr	r2, [r2, #0]
 8009670:	430b      	orrs	r3, r1
 8009672:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	695a      	ldr	r2, [r3, #20]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	431a      	orrs	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	430a      	orrs	r2, r1
 800968e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f042 0201 	orr.w	r2, r2, #1
 800969e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2220      	movs	r2, #32
 80096aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	000186a0 	.word	0x000186a0
 80096cc:	001e847f 	.word	0x001e847f
 80096d0:	003d08ff 	.word	0x003d08ff
 80096d4:	431bde83 	.word	0x431bde83
 80096d8:	10624dd3 	.word	0x10624dd3

080096dc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e021      	b.n	8009732 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2224      	movs	r2, #36	; 0x24
 80096f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f022 0201 	bic.w	r2, r2, #1
 8009704:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7fe fef0 	bl	80084ec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
	...

0800973c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b088      	sub	sp, #32
 8009740:	af02      	add	r7, sp, #8
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	607a      	str	r2, [r7, #4]
 8009746:	461a      	mov	r2, r3
 8009748:	460b      	mov	r3, r1
 800974a:	817b      	strh	r3, [r7, #10]
 800974c:	4613      	mov	r3, r2
 800974e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009750:	f7ff f85e 	bl	8008810 <HAL_GetTick>
 8009754:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b20      	cmp	r3, #32
 8009760:	f040 80e0 	bne.w	8009924 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	2319      	movs	r3, #25
 800976a:	2201      	movs	r2, #1
 800976c:	4970      	ldr	r1, [pc, #448]	; (8009930 <HAL_I2C_Master_Transmit+0x1f4>)
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 fe5c 	bl	800a42c <I2C_WaitOnFlagUntilTimeout>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d001      	beq.n	800977e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800977a:	2302      	movs	r3, #2
 800977c:	e0d3      	b.n	8009926 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009784:	2b01      	cmp	r3, #1
 8009786:	d101      	bne.n	800978c <HAL_I2C_Master_Transmit+0x50>
 8009788:	2302      	movs	r3, #2
 800978a:	e0cc      	b.n	8009926 <HAL_I2C_Master_Transmit+0x1ea>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d007      	beq.n	80097b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f042 0201 	orr.w	r2, r2, #1
 80097b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2221      	movs	r2, #33	; 0x21
 80097c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2210      	movs	r2, #16
 80097ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	893a      	ldrh	r2, [r7, #8]
 80097e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	4a50      	ldr	r2, [pc, #320]	; (8009934 <HAL_I2C_Master_Transmit+0x1f8>)
 80097f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80097f4:	8979      	ldrh	r1, [r7, #10]
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	6a3a      	ldr	r2, [r7, #32]
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f000 fc16 	bl	800a02c <I2C_MasterRequestWrite>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e08d      	b.n	8009926 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800980a:	2300      	movs	r3, #0
 800980c:	613b      	str	r3, [r7, #16]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	613b      	str	r3, [r7, #16]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	613b      	str	r3, [r7, #16]
 800981e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009820:	e066      	b.n	80098f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	6a39      	ldr	r1, [r7, #32]
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f000 ff1a 	bl	800a660 <I2C_WaitOnTXEFlagUntilTimeout>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00d      	beq.n	800984e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009836:	2b04      	cmp	r3, #4
 8009838:	d107      	bne.n	800984a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009848:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e06b      	b.n	8009926 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009852:	781a      	ldrb	r2, [r3, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985e:	1c5a      	adds	r2, r3, #1
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009868:	b29b      	uxth	r3, r3
 800986a:	3b01      	subs	r3, #1
 800986c:	b29a      	uxth	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009876:	3b01      	subs	r3, #1
 8009878:	b29a      	uxth	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	f003 0304 	and.w	r3, r3, #4
 8009888:	2b04      	cmp	r3, #4
 800988a:	d11b      	bne.n	80098c4 <HAL_I2C_Master_Transmit+0x188>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009890:	2b00      	cmp	r3, #0
 8009892:	d017      	beq.n	80098c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009898:	781a      	ldrb	r2, [r3, #0]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	1c5a      	adds	r2, r3, #1
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	3b01      	subs	r3, #1
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098bc:	3b01      	subs	r3, #1
 80098be:	b29a      	uxth	r2, r3
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	6a39      	ldr	r1, [r7, #32]
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f000 ff11 	bl	800a6f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00d      	beq.n	80098f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d8:	2b04      	cmp	r3, #4
 80098da:	d107      	bne.n	80098ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e01a      	b.n	8009926 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d194      	bne.n	8009822 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2220      	movs	r2, #32
 800990c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009920:	2300      	movs	r3, #0
 8009922:	e000      	b.n	8009926 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009924:	2302      	movs	r3, #2
  }
}
 8009926:	4618      	mov	r0, r3
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	00100002 	.word	0x00100002
 8009934:	ffff0000 	.word	0xffff0000

08009938 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b088      	sub	sp, #32
 800993c:	af02      	add	r7, sp, #8
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	4608      	mov	r0, r1
 8009942:	4611      	mov	r1, r2
 8009944:	461a      	mov	r2, r3
 8009946:	4603      	mov	r3, r0
 8009948:	817b      	strh	r3, [r7, #10]
 800994a:	460b      	mov	r3, r1
 800994c:	813b      	strh	r3, [r7, #8]
 800994e:	4613      	mov	r3, r2
 8009950:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009952:	f7fe ff5d 	bl	8008810 <HAL_GetTick>
 8009956:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b20      	cmp	r3, #32
 8009962:	f040 80d9 	bne.w	8009b18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	2319      	movs	r3, #25
 800996c:	2201      	movs	r2, #1
 800996e:	496d      	ldr	r1, [pc, #436]	; (8009b24 <HAL_I2C_Mem_Write+0x1ec>)
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 fd5b 	bl	800a42c <I2C_WaitOnFlagUntilTimeout>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800997c:	2302      	movs	r3, #2
 800997e:	e0cc      	b.n	8009b1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009986:	2b01      	cmp	r3, #1
 8009988:	d101      	bne.n	800998e <HAL_I2C_Mem_Write+0x56>
 800998a:	2302      	movs	r3, #2
 800998c:	e0c5      	b.n	8009b1a <HAL_I2C_Mem_Write+0x1e2>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d007      	beq.n	80099b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f042 0201 	orr.w	r2, r2, #1
 80099b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2221      	movs	r2, #33	; 0x21
 80099c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2240      	movs	r2, #64	; 0x40
 80099d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6a3a      	ldr	r2, [r7, #32]
 80099de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80099e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	4a4d      	ldr	r2, [pc, #308]	; (8009b28 <HAL_I2C_Mem_Write+0x1f0>)
 80099f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80099f6:	88f8      	ldrh	r0, [r7, #6]
 80099f8:	893a      	ldrh	r2, [r7, #8]
 80099fa:	8979      	ldrh	r1, [r7, #10]
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	9301      	str	r3, [sp, #4]
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	4603      	mov	r3, r0
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f000 fb92 	bl	800a130 <I2C_RequestMemoryWrite>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d052      	beq.n	8009ab8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e081      	b.n	8009b1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f000 fe20 	bl	800a660 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00d      	beq.n	8009a42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d107      	bne.n	8009a3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e06b      	b.n	8009b1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a46:	781a      	ldrb	r2, [r3, #0]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	f003 0304 	and.w	r3, r3, #4
 8009a7c:	2b04      	cmp	r3, #4
 8009a7e:	d11b      	bne.n	8009ab8 <HAL_I2C_Mem_Write+0x180>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d017      	beq.n	8009ab8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8c:	781a      	ldrb	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1aa      	bne.n	8009a16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f000 fe13 	bl	800a6f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00d      	beq.n	8009aec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	d107      	bne.n	8009ae8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ae6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e016      	b.n	8009b1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2220      	movs	r2, #32
 8009b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	e000      	b.n	8009b1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009b18:	2302      	movs	r3, #2
  }
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	00100002 	.word	0x00100002
 8009b28:	ffff0000 	.word	0xffff0000

08009b2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b08c      	sub	sp, #48	; 0x30
 8009b30:	af02      	add	r7, sp, #8
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	4608      	mov	r0, r1
 8009b36:	4611      	mov	r1, r2
 8009b38:	461a      	mov	r2, r3
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	817b      	strh	r3, [r7, #10]
 8009b3e:	460b      	mov	r3, r1
 8009b40:	813b      	strh	r3, [r7, #8]
 8009b42:	4613      	mov	r3, r2
 8009b44:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b4a:	f7fe fe61 	bl	8008810 <HAL_GetTick>
 8009b4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b20      	cmp	r3, #32
 8009b5a:	f040 8244 	bne.w	8009fe6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	2319      	movs	r3, #25
 8009b64:	2201      	movs	r2, #1
 8009b66:	4982      	ldr	r1, [pc, #520]	; (8009d70 <HAL_I2C_Mem_Read+0x244>)
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 fc5f 	bl	800a42c <I2C_WaitOnFlagUntilTimeout>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009b74:	2302      	movs	r3, #2
 8009b76:	e237      	b.n	8009fe8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d101      	bne.n	8009b86 <HAL_I2C_Mem_Read+0x5a>
 8009b82:	2302      	movs	r3, #2
 8009b84:	e230      	b.n	8009fe8 <HAL_I2C_Mem_Read+0x4bc>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d007      	beq.n	8009bac <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f042 0201 	orr.w	r2, r2, #1
 8009baa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2222      	movs	r2, #34	; 0x22
 8009bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2240      	movs	r2, #64	; 0x40
 8009bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	4a62      	ldr	r2, [pc, #392]	; (8009d74 <HAL_I2C_Mem_Read+0x248>)
 8009bec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009bee:	88f8      	ldrh	r0, [r7, #6]
 8009bf0:	893a      	ldrh	r2, [r7, #8]
 8009bf2:	8979      	ldrh	r1, [r7, #10]
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	9301      	str	r3, [sp, #4]
 8009bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 fb2c 	bl	800a25c <I2C_RequestMemoryRead>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e1ec      	b.n	8009fe8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d113      	bne.n	8009c3e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c16:	2300      	movs	r3, #0
 8009c18:	61fb      	str	r3, [r7, #28]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	61fb      	str	r3, [r7, #28]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	61fb      	str	r3, [r7, #28]
 8009c2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	e1c0      	b.n	8009fc0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d11e      	bne.n	8009c84 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c56:	b672      	cpsid	i
}
 8009c58:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	61bb      	str	r3, [r7, #24]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	61bb      	str	r3, [r7, #24]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	61bb      	str	r3, [r7, #24]
 8009c6e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c80:	b662      	cpsie	i
}
 8009c82:	e035      	b.n	8009cf0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d11e      	bne.n	8009cca <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c9c:	b672      	cpsid	i
}
 8009c9e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	617b      	str	r3, [r7, #20]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	617b      	str	r3, [r7, #20]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	699b      	ldr	r3, [r3, #24]
 8009cb2:	617b      	str	r3, [r7, #20]
 8009cb4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009cc6:	b662      	cpsie	i
}
 8009cc8:	e012      	b.n	8009cf0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009cd8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cda:	2300      	movs	r3, #0
 8009cdc:	613b      	str	r3, [r7, #16]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	695b      	ldr	r3, [r3, #20]
 8009ce4:	613b      	str	r3, [r7, #16]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	613b      	str	r3, [r7, #16]
 8009cee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009cf0:	e166      	b.n	8009fc0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cf6:	2b03      	cmp	r3, #3
 8009cf8:	f200 811f 	bhi.w	8009f3a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d123      	bne.n	8009d4c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f000 fd39 	bl	800a780 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e167      	b.n	8009fe8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	691a      	ldr	r2, [r3, #16]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d22:	b2d2      	uxtb	r2, r2
 8009d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2a:	1c5a      	adds	r2, r3, #1
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d34:	3b01      	subs	r3, #1
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	3b01      	subs	r3, #1
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d4a:	e139      	b.n	8009fc0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d152      	bne.n	8009dfa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	4906      	ldr	r1, [pc, #24]	; (8009d78 <HAL_I2C_Mem_Read+0x24c>)
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f000 fb64 	bl	800a42c <I2C_WaitOnFlagUntilTimeout>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d008      	beq.n	8009d7c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e13c      	b.n	8009fe8 <HAL_I2C_Mem_Read+0x4bc>
 8009d6e:	bf00      	nop
 8009d70:	00100002 	.word	0x00100002
 8009d74:	ffff0000 	.word	0xffff0000
 8009d78:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009d7c:	b672      	cpsid	i
}
 8009d7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	691a      	ldr	r2, [r3, #16]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	b2d2      	uxtb	r2, r2
 8009d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dac:	3b01      	subs	r3, #1
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009dc2:	b662      	cpsie	i
}
 8009dc4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	691a      	ldr	r2, [r3, #16]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	b2d2      	uxtb	r2, r2
 8009dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009de2:	3b01      	subs	r3, #1
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	3b01      	subs	r3, #1
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009df8:	e0e2      	b.n	8009fc0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e00:	2200      	movs	r2, #0
 8009e02:	497b      	ldr	r1, [pc, #492]	; (8009ff0 <HAL_I2C_Mem_Read+0x4c4>)
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f000 fb11 	bl	800a42c <I2C_WaitOnFlagUntilTimeout>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d001      	beq.n	8009e14 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e0e9      	b.n	8009fe8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e24:	b672      	cpsid	i
}
 8009e26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	691a      	ldr	r2, [r3, #16]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e32:	b2d2      	uxtb	r2, r2
 8009e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e44:	3b01      	subs	r3, #1
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009e5a:	4b66      	ldr	r3, [pc, #408]	; (8009ff4 <HAL_I2C_Mem_Read+0x4c8>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	08db      	lsrs	r3, r3, #3
 8009e60:	4a65      	ldr	r2, [pc, #404]	; (8009ff8 <HAL_I2C_Mem_Read+0x4cc>)
 8009e62:	fba2 2303 	umull	r2, r3, r2, r3
 8009e66:	0a1a      	lsrs	r2, r3, #8
 8009e68:	4613      	mov	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	00da      	lsls	r2, r3, #3
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	3b01      	subs	r3, #1
 8009e78:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d118      	bne.n	8009eb2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2220      	movs	r2, #32
 8009e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9a:	f043 0220 	orr.w	r2, r3, #32
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009ea2:	b662      	cpsie	i
}
 8009ea4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e09a      	b.n	8009fe8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	695b      	ldr	r3, [r3, #20]
 8009eb8:	f003 0304 	and.w	r3, r3, #4
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d1d9      	bne.n	8009e74 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ece:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	691a      	ldr	r2, [r3, #16]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eda:	b2d2      	uxtb	r2, r2
 8009edc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee2:	1c5a      	adds	r2, r3, #1
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eec:	3b01      	subs	r3, #1
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	3b01      	subs	r3, #1
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009f02:	b662      	cpsie	i
}
 8009f04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	691a      	ldr	r2, [r3, #16]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f22:	3b01      	subs	r3, #1
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	3b01      	subs	r3, #1
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f38:	e042      	b.n	8009fc0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f000 fc1e 	bl	800a780 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e04c      	b.n	8009fe8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	691a      	ldr	r2, [r3, #16]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f58:	b2d2      	uxtb	r2, r2
 8009f5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	695b      	ldr	r3, [r3, #20]
 8009f86:	f003 0304 	and.w	r3, r3, #4
 8009f8a:	2b04      	cmp	r3, #4
 8009f8c:	d118      	bne.n	8009fc0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	691a      	ldr	r2, [r3, #16]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f98:	b2d2      	uxtb	r2, r2
 8009f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa0:	1c5a      	adds	r2, r3, #1
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009faa:	3b01      	subs	r3, #1
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f47f ae94 	bne.w	8009cf2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	e000      	b.n	8009fe8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009fe6:	2302      	movs	r3, #2
  }
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3728      	adds	r7, #40	; 0x28
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	00010004 	.word	0x00010004
 8009ff4:	200000a0 	.word	0x200000a0
 8009ff8:	14f8b589 	.word	0x14f8b589

08009ffc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a00a:	b2db      	uxtb	r3, r3
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	bc80      	pop	{r7}
 800a014:	4770      	bx	lr

0800a016 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a016:	b480      	push	{r7}
 800a018:	b083      	sub	sp, #12
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a022:	4618      	mov	r0, r3
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	bc80      	pop	{r7}
 800a02a:	4770      	bx	lr

0800a02c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b088      	sub	sp, #32
 800a030:	af02      	add	r7, sp, #8
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	607a      	str	r2, [r7, #4]
 800a036:	603b      	str	r3, [r7, #0]
 800a038:	460b      	mov	r3, r1
 800a03a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a040:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	2b08      	cmp	r3, #8
 800a046:	d006      	beq.n	800a056 <I2C_MasterRequestWrite+0x2a>
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d003      	beq.n	800a056 <I2C_MasterRequestWrite+0x2a>
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a054:	d108      	bne.n	800a068 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a064:	601a      	str	r2, [r3, #0]
 800a066:	e00b      	b.n	800a080 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a06c:	2b12      	cmp	r3, #18
 800a06e:	d107      	bne.n	800a080 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a07e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 f9cd 	bl	800a42c <I2C_WaitOnFlagUntilTimeout>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00d      	beq.n	800a0b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0a6:	d103      	bne.n	800a0b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e035      	b.n	800a120 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0bc:	d108      	bne.n	800a0d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0be:	897b      	ldrh	r3, [r7, #10]
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0cc:	611a      	str	r2, [r3, #16]
 800a0ce:	e01b      	b.n	800a108 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a0d0:	897b      	ldrh	r3, [r7, #10]
 800a0d2:	11db      	asrs	r3, r3, #7
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	f003 0306 	and.w	r3, r3, #6
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	f063 030f 	orn	r3, r3, #15
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	490e      	ldr	r1, [pc, #56]	; (800a128 <I2C_MasterRequestWrite+0xfc>)
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 fa16 	bl	800a520 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e010      	b.n	800a120 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a0fe:	897b      	ldrh	r3, [r7, #10]
 800a100:	b2da      	uxtb	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	4907      	ldr	r1, [pc, #28]	; (800a12c <I2C_MasterRequestWrite+0x100>)
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f000 fa06 	bl	800a520 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e000      	b.n	800a120 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	00010008 	.word	0x00010008
 800a12c:	00010002 	.word	0x00010002

0800a130 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b088      	sub	sp, #32
 800a134:	af02      	add	r7, sp, #8
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	4608      	mov	r0, r1
 800a13a:	4611      	mov	r1, r2
 800a13c:	461a      	mov	r2, r3
 800a13e:	4603      	mov	r3, r0
 800a140:	817b      	strh	r3, [r7, #10]
 800a142:	460b      	mov	r3, r1
 800a144:	813b      	strh	r3, [r7, #8]
 800a146:	4613      	mov	r3, r2
 800a148:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a158:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	2200      	movs	r2, #0
 800a162:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 f960 	bl	800a42c <I2C_WaitOnFlagUntilTimeout>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00d      	beq.n	800a18e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a17c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a180:	d103      	bne.n	800a18a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e05f      	b.n	800a24e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a18e:	897b      	ldrh	r3, [r7, #10]
 800a190:	b2db      	uxtb	r3, r3
 800a192:	461a      	mov	r2, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a19c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a0:	6a3a      	ldr	r2, [r7, #32]
 800a1a2:	492d      	ldr	r1, [pc, #180]	; (800a258 <I2C_RequestMemoryWrite+0x128>)
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f9bb 	bl	800a520 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e04c      	b.n	800a24e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	617b      	str	r3, [r7, #20]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	617b      	str	r3, [r7, #20]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	617b      	str	r3, [r7, #20]
 800a1c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1cc:	6a39      	ldr	r1, [r7, #32]
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 fa46 	bl	800a660 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00d      	beq.n	800a1f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1de:	2b04      	cmp	r3, #4
 800a1e0:	d107      	bne.n	800a1f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e02b      	b.n	800a24e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1f6:	88fb      	ldrh	r3, [r7, #6]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d105      	bne.n	800a208 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1fc:	893b      	ldrh	r3, [r7, #8]
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	611a      	str	r2, [r3, #16]
 800a206:	e021      	b.n	800a24c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a208:	893b      	ldrh	r3, [r7, #8]
 800a20a:	0a1b      	lsrs	r3, r3, #8
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a218:	6a39      	ldr	r1, [r7, #32]
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 fa20 	bl	800a660 <I2C_WaitOnTXEFlagUntilTimeout>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00d      	beq.n	800a242 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22a:	2b04      	cmp	r3, #4
 800a22c:	d107      	bne.n	800a23e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a23c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e005      	b.n	800a24e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a242:	893b      	ldrh	r3, [r7, #8]
 800a244:	b2da      	uxtb	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3718      	adds	r7, #24
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	00010002 	.word	0x00010002

0800a25c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af02      	add	r7, sp, #8
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	4608      	mov	r0, r1
 800a266:	4611      	mov	r1, r2
 800a268:	461a      	mov	r2, r3
 800a26a:	4603      	mov	r3, r0
 800a26c:	817b      	strh	r3, [r7, #10]
 800a26e:	460b      	mov	r3, r1
 800a270:	813b      	strh	r3, [r7, #8]
 800a272:	4613      	mov	r3, r2
 800a274:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a284:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a294:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f000 f8c2 	bl	800a42c <I2C_WaitOnFlagUntilTimeout>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00d      	beq.n	800a2ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2bc:	d103      	bne.n	800a2c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e0aa      	b.n	800a420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a2ca:	897b      	ldrh	r3, [r7, #10]
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a2d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	6a3a      	ldr	r2, [r7, #32]
 800a2de:	4952      	ldr	r1, [pc, #328]	; (800a428 <I2C_RequestMemoryRead+0x1cc>)
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f000 f91d 	bl	800a520 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e097      	b.n	800a420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	617b      	str	r3, [r7, #20]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	617b      	str	r3, [r7, #20]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	617b      	str	r3, [r7, #20]
 800a304:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a308:	6a39      	ldr	r1, [r7, #32]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 f9a8 	bl	800a660 <I2C_WaitOnTXEFlagUntilTimeout>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00d      	beq.n	800a332 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	d107      	bne.n	800a32e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a32c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e076      	b.n	800a420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a332:	88fb      	ldrh	r3, [r7, #6]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d105      	bne.n	800a344 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a338:	893b      	ldrh	r3, [r7, #8]
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	611a      	str	r2, [r3, #16]
 800a342:	e021      	b.n	800a388 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a344:	893b      	ldrh	r3, [r7, #8]
 800a346:	0a1b      	lsrs	r3, r3, #8
 800a348:	b29b      	uxth	r3, r3
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a354:	6a39      	ldr	r1, [r7, #32]
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 f982 	bl	800a660 <I2C_WaitOnTXEFlagUntilTimeout>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00d      	beq.n	800a37e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a366:	2b04      	cmp	r3, #4
 800a368:	d107      	bne.n	800a37a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a378:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e050      	b.n	800a420 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a37e:	893b      	ldrh	r3, [r7, #8]
 800a380:	b2da      	uxtb	r2, r3
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a38a:	6a39      	ldr	r1, [r7, #32]
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 f967 	bl	800a660 <I2C_WaitOnTXEFlagUntilTimeout>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00d      	beq.n	800a3b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	d107      	bne.n	800a3b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e035      	b.n	800a420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f000 f82b 	bl	800a42c <I2C_WaitOnFlagUntilTimeout>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00d      	beq.n	800a3f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3ea:	d103      	bne.n	800a3f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	e013      	b.n	800a420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a3f8:	897b      	ldrh	r3, [r7, #10]
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	f043 0301 	orr.w	r3, r3, #1
 800a400:	b2da      	uxtb	r2, r3
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	6a3a      	ldr	r2, [r7, #32]
 800a40c:	4906      	ldr	r1, [pc, #24]	; (800a428 <I2C_RequestMemoryRead+0x1cc>)
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 f886 	bl	800a520 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e000      	b.n	800a420 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3718      	adds	r7, #24
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	00010002 	.word	0x00010002

0800a42c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	603b      	str	r3, [r7, #0]
 800a438:	4613      	mov	r3, r2
 800a43a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a43c:	e048      	b.n	800a4d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a444:	d044      	beq.n	800a4d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a446:	f7fe f9e3 	bl	8008810 <HAL_GetTick>
 800a44a:	4602      	mov	r2, r0
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	683a      	ldr	r2, [r7, #0]
 800a452:	429a      	cmp	r2, r3
 800a454:	d302      	bcc.n	800a45c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d139      	bne.n	800a4d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	0c1b      	lsrs	r3, r3, #16
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b01      	cmp	r3, #1
 800a464:	d10d      	bne.n	800a482 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	695b      	ldr	r3, [r3, #20]
 800a46c:	43da      	mvns	r2, r3
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	4013      	ands	r3, r2
 800a472:	b29b      	uxth	r3, r3
 800a474:	2b00      	cmp	r3, #0
 800a476:	bf0c      	ite	eq
 800a478:	2301      	moveq	r3, #1
 800a47a:	2300      	movne	r3, #0
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	461a      	mov	r2, r3
 800a480:	e00c      	b.n	800a49c <I2C_WaitOnFlagUntilTimeout+0x70>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	43da      	mvns	r2, r3
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	4013      	ands	r3, r2
 800a48e:	b29b      	uxth	r3, r3
 800a490:	2b00      	cmp	r3, #0
 800a492:	bf0c      	ite	eq
 800a494:	2301      	moveq	r3, #1
 800a496:	2300      	movne	r3, #0
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	461a      	mov	r2, r3
 800a49c:	79fb      	ldrb	r3, [r7, #7]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d116      	bne.n	800a4d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2220      	movs	r2, #32
 800a4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4bc:	f043 0220 	orr.w	r2, r3, #32
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e023      	b.n	800a518 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	0c1b      	lsrs	r3, r3, #16
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d10d      	bne.n	800a4f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	695b      	ldr	r3, [r3, #20]
 800a4e0:	43da      	mvns	r2, r3
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	bf0c      	ite	eq
 800a4ec:	2301      	moveq	r3, #1
 800a4ee:	2300      	movne	r3, #0
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	e00c      	b.n	800a510 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	43da      	mvns	r2, r3
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	4013      	ands	r3, r2
 800a502:	b29b      	uxth	r3, r3
 800a504:	2b00      	cmp	r3, #0
 800a506:	bf0c      	ite	eq
 800a508:	2301      	moveq	r3, #1
 800a50a:	2300      	movne	r3, #0
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	461a      	mov	r2, r3
 800a510:	79fb      	ldrb	r3, [r7, #7]
 800a512:	429a      	cmp	r2, r3
 800a514:	d093      	beq.n	800a43e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a52e:	e071      	b.n	800a614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a53a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a53e:	d123      	bne.n	800a588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a54e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a558:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2220      	movs	r2, #32
 800a564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a574:	f043 0204 	orr.w	r2, r3, #4
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e067      	b.n	800a658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58e:	d041      	beq.n	800a614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a590:	f7fe f93e 	bl	8008810 <HAL_GetTick>
 800a594:	4602      	mov	r2, r0
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d302      	bcc.n	800a5a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d136      	bne.n	800a614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	0c1b      	lsrs	r3, r3, #16
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d10c      	bne.n	800a5ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	43da      	mvns	r2, r3
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	bf14      	ite	ne
 800a5c2:	2301      	movne	r3, #1
 800a5c4:	2300      	moveq	r3, #0
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	e00b      	b.n	800a5e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	43da      	mvns	r2, r3
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	bf14      	ite	ne
 800a5dc:	2301      	movne	r3, #1
 800a5de:	2300      	moveq	r3, #0
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d016      	beq.n	800a614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2220      	movs	r2, #32
 800a5f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a600:	f043 0220 	orr.w	r2, r3, #32
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e021      	b.n	800a658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	0c1b      	lsrs	r3, r3, #16
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d10c      	bne.n	800a638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	695b      	ldr	r3, [r3, #20]
 800a624:	43da      	mvns	r2, r3
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	4013      	ands	r3, r2
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	bf14      	ite	ne
 800a630:	2301      	movne	r3, #1
 800a632:	2300      	moveq	r3, #0
 800a634:	b2db      	uxtb	r3, r3
 800a636:	e00b      	b.n	800a650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	43da      	mvns	r2, r3
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	4013      	ands	r3, r2
 800a644:	b29b      	uxth	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	bf14      	ite	ne
 800a64a:	2301      	movne	r3, #1
 800a64c:	2300      	moveq	r3, #0
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b00      	cmp	r3, #0
 800a652:	f47f af6d 	bne.w	800a530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a66c:	e034      	b.n	800a6d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 f8e3 	bl	800a83a <I2C_IsAcknowledgeFailed>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e034      	b.n	800a6e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a684:	d028      	beq.n	800a6d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a686:	f7fe f8c3 	bl	8008810 <HAL_GetTick>
 800a68a:	4602      	mov	r2, r0
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	1ad3      	subs	r3, r2, r3
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	429a      	cmp	r2, r3
 800a694:	d302      	bcc.n	800a69c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d11d      	bne.n	800a6d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6a6:	2b80      	cmp	r3, #128	; 0x80
 800a6a8:	d016      	beq.n	800a6d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2220      	movs	r2, #32
 800a6b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c4:	f043 0220 	orr.w	r2, r3, #32
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e007      	b.n	800a6e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6e2:	2b80      	cmp	r3, #128	; 0x80
 800a6e4:	d1c3      	bne.n	800a66e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6fc:	e034      	b.n	800a768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f000 f89b 	bl	800a83a <I2C_IsAcknowledgeFailed>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e034      	b.n	800a778 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a714:	d028      	beq.n	800a768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a716:	f7fe f87b 	bl	8008810 <HAL_GetTick>
 800a71a:	4602      	mov	r2, r0
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	429a      	cmp	r2, r3
 800a724:	d302      	bcc.n	800a72c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d11d      	bne.n	800a768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	695b      	ldr	r3, [r3, #20]
 800a732:	f003 0304 	and.w	r3, r3, #4
 800a736:	2b04      	cmp	r3, #4
 800a738:	d016      	beq.n	800a768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2220      	movs	r2, #32
 800a744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a754:	f043 0220 	orr.w	r2, r3, #32
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	e007      	b.n	800a778 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	f003 0304 	and.w	r3, r3, #4
 800a772:	2b04      	cmp	r3, #4
 800a774:	d1c3      	bne.n	800a6fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a78c:	e049      	b.n	800a822 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	695b      	ldr	r3, [r3, #20]
 800a794:	f003 0310 	and.w	r3, r3, #16
 800a798:	2b10      	cmp	r3, #16
 800a79a:	d119      	bne.n	800a7d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f06f 0210 	mvn.w	r2, #16
 800a7a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2220      	movs	r2, #32
 800a7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e030      	b.n	800a832 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7d0:	f7fe f81e 	bl	8008810 <HAL_GetTick>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d302      	bcc.n	800a7e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d11d      	bne.n	800a822 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f0:	2b40      	cmp	r3, #64	; 0x40
 800a7f2:	d016      	beq.n	800a822 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2220      	movs	r2, #32
 800a7fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80e:	f043 0220 	orr.w	r2, r3, #32
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e007      	b.n	800a832 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82c:	2b40      	cmp	r3, #64	; 0x40
 800a82e:	d1ae      	bne.n	800a78e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b083      	sub	sp, #12
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	695b      	ldr	r3, [r3, #20]
 800a848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a84c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a850:	d11b      	bne.n	800a88a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a85a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2220      	movs	r2, #32
 800a866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a876:	f043 0204 	orr.w	r2, r3, #4
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e000      	b.n	800a88c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	bc80      	pop	{r7}
 800a894:	4770      	bx	lr
	...

0800a898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b086      	sub	sp, #24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e272      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 8087 	beq.w	800a9c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a8b8:	4b92      	ldr	r3, [pc, #584]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	f003 030c 	and.w	r3, r3, #12
 800a8c0:	2b04      	cmp	r3, #4
 800a8c2:	d00c      	beq.n	800a8de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a8c4:	4b8f      	ldr	r3, [pc, #572]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	f003 030c 	and.w	r3, r3, #12
 800a8cc:	2b08      	cmp	r3, #8
 800a8ce:	d112      	bne.n	800a8f6 <HAL_RCC_OscConfig+0x5e>
 800a8d0:	4b8c      	ldr	r3, [pc, #560]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8dc:	d10b      	bne.n	800a8f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8de:	4b89      	ldr	r3, [pc, #548]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d06c      	beq.n	800a9c4 <HAL_RCC_OscConfig+0x12c>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d168      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e24c      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8fe:	d106      	bne.n	800a90e <HAL_RCC_OscConfig+0x76>
 800a900:	4b80      	ldr	r3, [pc, #512]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a7f      	ldr	r2, [pc, #508]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a90a:	6013      	str	r3, [r2, #0]
 800a90c:	e02e      	b.n	800a96c <HAL_RCC_OscConfig+0xd4>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10c      	bne.n	800a930 <HAL_RCC_OscConfig+0x98>
 800a916:	4b7b      	ldr	r3, [pc, #492]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a7a      	ldr	r2, [pc, #488]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a91c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a920:	6013      	str	r3, [r2, #0]
 800a922:	4b78      	ldr	r3, [pc, #480]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a77      	ldr	r2, [pc, #476]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a92c:	6013      	str	r3, [r2, #0]
 800a92e:	e01d      	b.n	800a96c <HAL_RCC_OscConfig+0xd4>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a938:	d10c      	bne.n	800a954 <HAL_RCC_OscConfig+0xbc>
 800a93a:	4b72      	ldr	r3, [pc, #456]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a71      	ldr	r2, [pc, #452]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a944:	6013      	str	r3, [r2, #0]
 800a946:	4b6f      	ldr	r3, [pc, #444]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a6e      	ldr	r2, [pc, #440]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a94c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	e00b      	b.n	800a96c <HAL_RCC_OscConfig+0xd4>
 800a954:	4b6b      	ldr	r3, [pc, #428]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a6a      	ldr	r2, [pc, #424]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a95a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a95e:	6013      	str	r3, [r2, #0]
 800a960:	4b68      	ldr	r3, [pc, #416]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a67      	ldr	r2, [pc, #412]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a96a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d013      	beq.n	800a99c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a974:	f7fd ff4c 	bl	8008810 <HAL_GetTick>
 800a978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a97a:	e008      	b.n	800a98e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a97c:	f7fd ff48 	bl	8008810 <HAL_GetTick>
 800a980:	4602      	mov	r2, r0
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	2b64      	cmp	r3, #100	; 0x64
 800a988:	d901      	bls.n	800a98e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e200      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a98e:	4b5d      	ldr	r3, [pc, #372]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d0f0      	beq.n	800a97c <HAL_RCC_OscConfig+0xe4>
 800a99a:	e014      	b.n	800a9c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a99c:	f7fd ff38 	bl	8008810 <HAL_GetTick>
 800a9a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9a2:	e008      	b.n	800a9b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9a4:	f7fd ff34 	bl	8008810 <HAL_GetTick>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	2b64      	cmp	r3, #100	; 0x64
 800a9b0:	d901      	bls.n	800a9b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e1ec      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9b6:	4b53      	ldr	r3, [pc, #332]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d1f0      	bne.n	800a9a4 <HAL_RCC_OscConfig+0x10c>
 800a9c2:	e000      	b.n	800a9c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f003 0302 	and.w	r3, r3, #2
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d063      	beq.n	800aa9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a9d2:	4b4c      	ldr	r3, [pc, #304]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	f003 030c 	and.w	r3, r3, #12
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00b      	beq.n	800a9f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a9de:	4b49      	ldr	r3, [pc, #292]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f003 030c 	and.w	r3, r3, #12
 800a9e6:	2b08      	cmp	r3, #8
 800a9e8:	d11c      	bne.n	800aa24 <HAL_RCC_OscConfig+0x18c>
 800a9ea:	4b46      	ldr	r3, [pc, #280]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d116      	bne.n	800aa24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9f6:	4b43      	ldr	r3, [pc, #268]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 0302 	and.w	r3, r3, #2
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d005      	beq.n	800aa0e <HAL_RCC_OscConfig+0x176>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d001      	beq.n	800aa0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e1c0      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa0e:	4b3d      	ldr	r3, [pc, #244]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	695b      	ldr	r3, [r3, #20]
 800aa1a:	00db      	lsls	r3, r3, #3
 800aa1c:	4939      	ldr	r1, [pc, #228]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa22:	e03a      	b.n	800aa9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d020      	beq.n	800aa6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa2c:	4b36      	ldr	r3, [pc, #216]	; (800ab08 <HAL_RCC_OscConfig+0x270>)
 800aa2e:	2201      	movs	r2, #1
 800aa30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa32:	f7fd feed 	bl	8008810 <HAL_GetTick>
 800aa36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa38:	e008      	b.n	800aa4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa3a:	f7fd fee9 	bl	8008810 <HAL_GetTick>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d901      	bls.n	800aa4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e1a1      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa4c:	4b2d      	ldr	r3, [pc, #180]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 0302 	and.w	r3, r3, #2
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d0f0      	beq.n	800aa3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa58:	4b2a      	ldr	r3, [pc, #168]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	695b      	ldr	r3, [r3, #20]
 800aa64:	00db      	lsls	r3, r3, #3
 800aa66:	4927      	ldr	r1, [pc, #156]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	600b      	str	r3, [r1, #0]
 800aa6c:	e015      	b.n	800aa9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa6e:	4b26      	ldr	r3, [pc, #152]	; (800ab08 <HAL_RCC_OscConfig+0x270>)
 800aa70:	2200      	movs	r2, #0
 800aa72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa74:	f7fd fecc 	bl	8008810 <HAL_GetTick>
 800aa78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa7a:	e008      	b.n	800aa8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa7c:	f7fd fec8 	bl	8008810 <HAL_GetTick>
 800aa80:	4602      	mov	r2, r0
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d901      	bls.n	800aa8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	e180      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa8e:	4b1d      	ldr	r3, [pc, #116]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 0302 	and.w	r3, r3, #2
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1f0      	bne.n	800aa7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 0308 	and.w	r3, r3, #8
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d03a      	beq.n	800ab1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d019      	beq.n	800aae2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aaae:	4b17      	ldr	r3, [pc, #92]	; (800ab0c <HAL_RCC_OscConfig+0x274>)
 800aab0:	2201      	movs	r2, #1
 800aab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aab4:	f7fd feac 	bl	8008810 <HAL_GetTick>
 800aab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aaba:	e008      	b.n	800aace <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aabc:	f7fd fea8 	bl	8008810 <HAL_GetTick>
 800aac0:	4602      	mov	r2, r0
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	1ad3      	subs	r3, r2, r3
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d901      	bls.n	800aace <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aaca:	2303      	movs	r3, #3
 800aacc:	e160      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aace:	4b0d      	ldr	r3, [pc, #52]	; (800ab04 <HAL_RCC_OscConfig+0x26c>)
 800aad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad2:	f003 0302 	and.w	r3, r3, #2
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d0f0      	beq.n	800aabc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aada:	2001      	movs	r0, #1
 800aadc:	f000 face 	bl	800b07c <RCC_Delay>
 800aae0:	e01c      	b.n	800ab1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aae2:	4b0a      	ldr	r3, [pc, #40]	; (800ab0c <HAL_RCC_OscConfig+0x274>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aae8:	f7fd fe92 	bl	8008810 <HAL_GetTick>
 800aaec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aaee:	e00f      	b.n	800ab10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aaf0:	f7fd fe8e 	bl	8008810 <HAL_GetTick>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d908      	bls.n	800ab10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aafe:	2303      	movs	r3, #3
 800ab00:	e146      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
 800ab02:	bf00      	nop
 800ab04:	40021000 	.word	0x40021000
 800ab08:	42420000 	.word	0x42420000
 800ab0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab10:	4b92      	ldr	r3, [pc, #584]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800ab12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab14:	f003 0302 	and.w	r3, r3, #2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1e9      	bne.n	800aaf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 0304 	and.w	r3, r3, #4
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 80a6 	beq.w	800ac76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab2e:	4b8b      	ldr	r3, [pc, #556]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800ab30:	69db      	ldr	r3, [r3, #28]
 800ab32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10d      	bne.n	800ab56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab3a:	4b88      	ldr	r3, [pc, #544]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	4a87      	ldr	r2, [pc, #540]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800ab40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab44:	61d3      	str	r3, [r2, #28]
 800ab46:	4b85      	ldr	r3, [pc, #532]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800ab48:	69db      	ldr	r3, [r3, #28]
 800ab4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab4e:	60bb      	str	r3, [r7, #8]
 800ab50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab52:	2301      	movs	r3, #1
 800ab54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab56:	4b82      	ldr	r3, [pc, #520]	; (800ad60 <HAL_RCC_OscConfig+0x4c8>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d118      	bne.n	800ab94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab62:	4b7f      	ldr	r3, [pc, #508]	; (800ad60 <HAL_RCC_OscConfig+0x4c8>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a7e      	ldr	r2, [pc, #504]	; (800ad60 <HAL_RCC_OscConfig+0x4c8>)
 800ab68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab6e:	f7fd fe4f 	bl	8008810 <HAL_GetTick>
 800ab72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab74:	e008      	b.n	800ab88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab76:	f7fd fe4b 	bl	8008810 <HAL_GetTick>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	2b64      	cmp	r3, #100	; 0x64
 800ab82:	d901      	bls.n	800ab88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e103      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab88:	4b75      	ldr	r3, [pc, #468]	; (800ad60 <HAL_RCC_OscConfig+0x4c8>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d0f0      	beq.n	800ab76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d106      	bne.n	800abaa <HAL_RCC_OscConfig+0x312>
 800ab9c:	4b6f      	ldr	r3, [pc, #444]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800ab9e:	6a1b      	ldr	r3, [r3, #32]
 800aba0:	4a6e      	ldr	r2, [pc, #440]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800aba2:	f043 0301 	orr.w	r3, r3, #1
 800aba6:	6213      	str	r3, [r2, #32]
 800aba8:	e02d      	b.n	800ac06 <HAL_RCC_OscConfig+0x36e>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10c      	bne.n	800abcc <HAL_RCC_OscConfig+0x334>
 800abb2:	4b6a      	ldr	r3, [pc, #424]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	4a69      	ldr	r2, [pc, #420]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800abb8:	f023 0301 	bic.w	r3, r3, #1
 800abbc:	6213      	str	r3, [r2, #32]
 800abbe:	4b67      	ldr	r3, [pc, #412]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	4a66      	ldr	r2, [pc, #408]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800abc4:	f023 0304 	bic.w	r3, r3, #4
 800abc8:	6213      	str	r3, [r2, #32]
 800abca:	e01c      	b.n	800ac06 <HAL_RCC_OscConfig+0x36e>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	2b05      	cmp	r3, #5
 800abd2:	d10c      	bne.n	800abee <HAL_RCC_OscConfig+0x356>
 800abd4:	4b61      	ldr	r3, [pc, #388]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800abd6:	6a1b      	ldr	r3, [r3, #32]
 800abd8:	4a60      	ldr	r2, [pc, #384]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800abda:	f043 0304 	orr.w	r3, r3, #4
 800abde:	6213      	str	r3, [r2, #32]
 800abe0:	4b5e      	ldr	r3, [pc, #376]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800abe2:	6a1b      	ldr	r3, [r3, #32]
 800abe4:	4a5d      	ldr	r2, [pc, #372]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800abe6:	f043 0301 	orr.w	r3, r3, #1
 800abea:	6213      	str	r3, [r2, #32]
 800abec:	e00b      	b.n	800ac06 <HAL_RCC_OscConfig+0x36e>
 800abee:	4b5b      	ldr	r3, [pc, #364]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	4a5a      	ldr	r2, [pc, #360]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800abf4:	f023 0301 	bic.w	r3, r3, #1
 800abf8:	6213      	str	r3, [r2, #32]
 800abfa:	4b58      	ldr	r3, [pc, #352]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800abfc:	6a1b      	ldr	r3, [r3, #32]
 800abfe:	4a57      	ldr	r2, [pc, #348]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800ac00:	f023 0304 	bic.w	r3, r3, #4
 800ac04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d015      	beq.n	800ac3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac0e:	f7fd fdff 	bl	8008810 <HAL_GetTick>
 800ac12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac14:	e00a      	b.n	800ac2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac16:	f7fd fdfb 	bl	8008810 <HAL_GetTick>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d901      	bls.n	800ac2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e0b1      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac2c:	4b4b      	ldr	r3, [pc, #300]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800ac2e:	6a1b      	ldr	r3, [r3, #32]
 800ac30:	f003 0302 	and.w	r3, r3, #2
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d0ee      	beq.n	800ac16 <HAL_RCC_OscConfig+0x37e>
 800ac38:	e014      	b.n	800ac64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac3a:	f7fd fde9 	bl	8008810 <HAL_GetTick>
 800ac3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac40:	e00a      	b.n	800ac58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac42:	f7fd fde5 	bl	8008810 <HAL_GetTick>
 800ac46:	4602      	mov	r2, r0
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d901      	bls.n	800ac58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ac54:	2303      	movs	r3, #3
 800ac56:	e09b      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac58:	4b40      	ldr	r3, [pc, #256]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800ac5a:	6a1b      	ldr	r3, [r3, #32]
 800ac5c:	f003 0302 	and.w	r3, r3, #2
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1ee      	bne.n	800ac42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ac64:	7dfb      	ldrb	r3, [r7, #23]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d105      	bne.n	800ac76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac6a:	4b3c      	ldr	r3, [pc, #240]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800ac6c:	69db      	ldr	r3, [r3, #28]
 800ac6e:	4a3b      	ldr	r2, [pc, #236]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800ac70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	69db      	ldr	r3, [r3, #28]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f000 8087 	beq.w	800ad8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac80:	4b36      	ldr	r3, [pc, #216]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	f003 030c 	and.w	r3, r3, #12
 800ac88:	2b08      	cmp	r3, #8
 800ac8a:	d061      	beq.n	800ad50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	69db      	ldr	r3, [r3, #28]
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d146      	bne.n	800ad22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac94:	4b33      	ldr	r3, [pc, #204]	; (800ad64 <HAL_RCC_OscConfig+0x4cc>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac9a:	f7fd fdb9 	bl	8008810 <HAL_GetTick>
 800ac9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aca0:	e008      	b.n	800acb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aca2:	f7fd fdb5 	bl	8008810 <HAL_GetTick>
 800aca6:	4602      	mov	r2, r0
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	2b02      	cmp	r3, #2
 800acae:	d901      	bls.n	800acb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800acb0:	2303      	movs	r3, #3
 800acb2:	e06d      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acb4:	4b29      	ldr	r3, [pc, #164]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1f0      	bne.n	800aca2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a1b      	ldr	r3, [r3, #32]
 800acc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acc8:	d108      	bne.n	800acdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800acca:	4b24      	ldr	r3, [pc, #144]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	4921      	ldr	r1, [pc, #132]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800acd8:	4313      	orrs	r3, r2
 800acda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800acdc:	4b1f      	ldr	r3, [pc, #124]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6a19      	ldr	r1, [r3, #32]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acec:	430b      	orrs	r3, r1
 800acee:	491b      	ldr	r1, [pc, #108]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800acf0:	4313      	orrs	r3, r2
 800acf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800acf4:	4b1b      	ldr	r3, [pc, #108]	; (800ad64 <HAL_RCC_OscConfig+0x4cc>)
 800acf6:	2201      	movs	r2, #1
 800acf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acfa:	f7fd fd89 	bl	8008810 <HAL_GetTick>
 800acfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad00:	e008      	b.n	800ad14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad02:	f7fd fd85 	bl	8008810 <HAL_GetTick>
 800ad06:	4602      	mov	r2, r0
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d901      	bls.n	800ad14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e03d      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad14:	4b11      	ldr	r3, [pc, #68]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d0f0      	beq.n	800ad02 <HAL_RCC_OscConfig+0x46a>
 800ad20:	e035      	b.n	800ad8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad22:	4b10      	ldr	r3, [pc, #64]	; (800ad64 <HAL_RCC_OscConfig+0x4cc>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad28:	f7fd fd72 	bl	8008810 <HAL_GetTick>
 800ad2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad2e:	e008      	b.n	800ad42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad30:	f7fd fd6e 	bl	8008810 <HAL_GetTick>
 800ad34:	4602      	mov	r2, r0
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d901      	bls.n	800ad42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	e026      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad42:	4b06      	ldr	r3, [pc, #24]	; (800ad5c <HAL_RCC_OscConfig+0x4c4>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1f0      	bne.n	800ad30 <HAL_RCC_OscConfig+0x498>
 800ad4e:	e01e      	b.n	800ad8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	69db      	ldr	r3, [r3, #28]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d107      	bne.n	800ad68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e019      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
 800ad5c:	40021000 	.word	0x40021000
 800ad60:	40007000 	.word	0x40007000
 800ad64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ad68:	4b0b      	ldr	r3, [pc, #44]	; (800ad98 <HAL_RCC_OscConfig+0x500>)
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a1b      	ldr	r3, [r3, #32]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d106      	bne.n	800ad8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d001      	beq.n	800ad8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e000      	b.n	800ad90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	40021000 	.word	0x40021000

0800ad9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d101      	bne.n	800adb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	e0d0      	b.n	800af52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800adb0:	4b6a      	ldr	r3, [pc, #424]	; (800af5c <HAL_RCC_ClockConfig+0x1c0>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 0307 	and.w	r3, r3, #7
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d910      	bls.n	800ade0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adbe:	4b67      	ldr	r3, [pc, #412]	; (800af5c <HAL_RCC_ClockConfig+0x1c0>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f023 0207 	bic.w	r2, r3, #7
 800adc6:	4965      	ldr	r1, [pc, #404]	; (800af5c <HAL_RCC_ClockConfig+0x1c0>)
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	4313      	orrs	r3, r2
 800adcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adce:	4b63      	ldr	r3, [pc, #396]	; (800af5c <HAL_RCC_ClockConfig+0x1c0>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 0307 	and.w	r3, r3, #7
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	429a      	cmp	r2, r3
 800adda:	d001      	beq.n	800ade0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e0b8      	b.n	800af52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 0302 	and.w	r3, r3, #2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d020      	beq.n	800ae2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d005      	beq.n	800ae04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800adf8:	4b59      	ldr	r3, [pc, #356]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	4a58      	ldr	r2, [pc, #352]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800adfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ae02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 0308 	and.w	r3, r3, #8
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d005      	beq.n	800ae1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae10:	4b53      	ldr	r3, [pc, #332]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	4a52      	ldr	r2, [pc, #328]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800ae16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ae1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae1c:	4b50      	ldr	r3, [pc, #320]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	494d      	ldr	r1, [pc, #308]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 0301 	and.w	r3, r3, #1
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d040      	beq.n	800aebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d107      	bne.n	800ae52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae42:	4b47      	ldr	r3, [pc, #284]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d115      	bne.n	800ae7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e07f      	b.n	800af52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d107      	bne.n	800ae6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae5a:	4b41      	ldr	r3, [pc, #260]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d109      	bne.n	800ae7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e073      	b.n	800af52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae6a:	4b3d      	ldr	r3, [pc, #244]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0302 	and.w	r3, r3, #2
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e06b      	b.n	800af52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae7a:	4b39      	ldr	r3, [pc, #228]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	f023 0203 	bic.w	r2, r3, #3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	4936      	ldr	r1, [pc, #216]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae8c:	f7fd fcc0 	bl	8008810 <HAL_GetTick>
 800ae90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae92:	e00a      	b.n	800aeaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae94:	f7fd fcbc 	bl	8008810 <HAL_GetTick>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	1ad3      	subs	r3, r2, r3
 800ae9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d901      	bls.n	800aeaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aea6:	2303      	movs	r3, #3
 800aea8:	e053      	b.n	800af52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aeaa:	4b2d      	ldr	r3, [pc, #180]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	f003 020c 	and.w	r2, r3, #12
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d1eb      	bne.n	800ae94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aebc:	4b27      	ldr	r3, [pc, #156]	; (800af5c <HAL_RCC_ClockConfig+0x1c0>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 0307 	and.w	r3, r3, #7
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d210      	bcs.n	800aeec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeca:	4b24      	ldr	r3, [pc, #144]	; (800af5c <HAL_RCC_ClockConfig+0x1c0>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f023 0207 	bic.w	r2, r3, #7
 800aed2:	4922      	ldr	r1, [pc, #136]	; (800af5c <HAL_RCC_ClockConfig+0x1c0>)
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aeda:	4b20      	ldr	r3, [pc, #128]	; (800af5c <HAL_RCC_ClockConfig+0x1c0>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f003 0307 	and.w	r3, r3, #7
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d001      	beq.n	800aeec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	e032      	b.n	800af52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 0304 	and.w	r3, r3, #4
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d008      	beq.n	800af0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aef8:	4b19      	ldr	r3, [pc, #100]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	4916      	ldr	r1, [pc, #88]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800af06:	4313      	orrs	r3, r2
 800af08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f003 0308 	and.w	r3, r3, #8
 800af12:	2b00      	cmp	r3, #0
 800af14:	d009      	beq.n	800af2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800af16:	4b12      	ldr	r3, [pc, #72]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	691b      	ldr	r3, [r3, #16]
 800af22:	00db      	lsls	r3, r3, #3
 800af24:	490e      	ldr	r1, [pc, #56]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800af26:	4313      	orrs	r3, r2
 800af28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800af2a:	f000 f821 	bl	800af70 <HAL_RCC_GetSysClockFreq>
 800af2e:	4602      	mov	r2, r0
 800af30:	4b0b      	ldr	r3, [pc, #44]	; (800af60 <HAL_RCC_ClockConfig+0x1c4>)
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	091b      	lsrs	r3, r3, #4
 800af36:	f003 030f 	and.w	r3, r3, #15
 800af3a:	490a      	ldr	r1, [pc, #40]	; (800af64 <HAL_RCC_ClockConfig+0x1c8>)
 800af3c:	5ccb      	ldrb	r3, [r1, r3]
 800af3e:	fa22 f303 	lsr.w	r3, r2, r3
 800af42:	4a09      	ldr	r2, [pc, #36]	; (800af68 <HAL_RCC_ClockConfig+0x1cc>)
 800af44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800af46:	4b09      	ldr	r3, [pc, #36]	; (800af6c <HAL_RCC_ClockConfig+0x1d0>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fd fc1e 	bl	800878c <HAL_InitTick>

  return HAL_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	40022000 	.word	0x40022000
 800af60:	40021000 	.word	0x40021000
 800af64:	0800ddf0 	.word	0x0800ddf0
 800af68:	200000a0 	.word	0x200000a0
 800af6c:	200000a4 	.word	0x200000a4

0800af70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af70:	b480      	push	{r7}
 800af72:	b087      	sub	sp, #28
 800af74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800af76:	2300      	movs	r3, #0
 800af78:	60fb      	str	r3, [r7, #12]
 800af7a:	2300      	movs	r3, #0
 800af7c:	60bb      	str	r3, [r7, #8]
 800af7e:	2300      	movs	r3, #0
 800af80:	617b      	str	r3, [r7, #20]
 800af82:	2300      	movs	r3, #0
 800af84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800af86:	2300      	movs	r3, #0
 800af88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800af8a:	4b1e      	ldr	r3, [pc, #120]	; (800b004 <HAL_RCC_GetSysClockFreq+0x94>)
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f003 030c 	and.w	r3, r3, #12
 800af96:	2b04      	cmp	r3, #4
 800af98:	d002      	beq.n	800afa0 <HAL_RCC_GetSysClockFreq+0x30>
 800af9a:	2b08      	cmp	r3, #8
 800af9c:	d003      	beq.n	800afa6 <HAL_RCC_GetSysClockFreq+0x36>
 800af9e:	e027      	b.n	800aff0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800afa0:	4b19      	ldr	r3, [pc, #100]	; (800b008 <HAL_RCC_GetSysClockFreq+0x98>)
 800afa2:	613b      	str	r3, [r7, #16]
      break;
 800afa4:	e027      	b.n	800aff6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	0c9b      	lsrs	r3, r3, #18
 800afaa:	f003 030f 	and.w	r3, r3, #15
 800afae:	4a17      	ldr	r2, [pc, #92]	; (800b00c <HAL_RCC_GetSysClockFreq+0x9c>)
 800afb0:	5cd3      	ldrb	r3, [r2, r3]
 800afb2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d010      	beq.n	800afe0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800afbe:	4b11      	ldr	r3, [pc, #68]	; (800b004 <HAL_RCC_GetSysClockFreq+0x94>)
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	0c5b      	lsrs	r3, r3, #17
 800afc4:	f003 0301 	and.w	r3, r3, #1
 800afc8:	4a11      	ldr	r2, [pc, #68]	; (800b010 <HAL_RCC_GetSysClockFreq+0xa0>)
 800afca:	5cd3      	ldrb	r3, [r2, r3]
 800afcc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a0d      	ldr	r2, [pc, #52]	; (800b008 <HAL_RCC_GetSysClockFreq+0x98>)
 800afd2:	fb03 f202 	mul.w	r2, r3, r2
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800afdc:	617b      	str	r3, [r7, #20]
 800afde:	e004      	b.n	800afea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a0c      	ldr	r2, [pc, #48]	; (800b014 <HAL_RCC_GetSysClockFreq+0xa4>)
 800afe4:	fb02 f303 	mul.w	r3, r2, r3
 800afe8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	613b      	str	r3, [r7, #16]
      break;
 800afee:	e002      	b.n	800aff6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800aff0:	4b05      	ldr	r3, [pc, #20]	; (800b008 <HAL_RCC_GetSysClockFreq+0x98>)
 800aff2:	613b      	str	r3, [r7, #16]
      break;
 800aff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aff6:	693b      	ldr	r3, [r7, #16]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	371c      	adds	r7, #28
 800affc:	46bd      	mov	sp, r7
 800affe:	bc80      	pop	{r7}
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	40021000 	.word	0x40021000
 800b008:	007a1200 	.word	0x007a1200
 800b00c:	0800de08 	.word	0x0800de08
 800b010:	0800de18 	.word	0x0800de18
 800b014:	003d0900 	.word	0x003d0900

0800b018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b018:	b480      	push	{r7}
 800b01a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b01c:	4b02      	ldr	r3, [pc, #8]	; (800b028 <HAL_RCC_GetHCLKFreq+0x10>)
 800b01e:	681b      	ldr	r3, [r3, #0]
}
 800b020:	4618      	mov	r0, r3
 800b022:	46bd      	mov	sp, r7
 800b024:	bc80      	pop	{r7}
 800b026:	4770      	bx	lr
 800b028:	200000a0 	.word	0x200000a0

0800b02c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b030:	f7ff fff2 	bl	800b018 <HAL_RCC_GetHCLKFreq>
 800b034:	4602      	mov	r2, r0
 800b036:	4b05      	ldr	r3, [pc, #20]	; (800b04c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	0a1b      	lsrs	r3, r3, #8
 800b03c:	f003 0307 	and.w	r3, r3, #7
 800b040:	4903      	ldr	r1, [pc, #12]	; (800b050 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b042:	5ccb      	ldrb	r3, [r1, r3]
 800b044:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b048:	4618      	mov	r0, r3
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	40021000 	.word	0x40021000
 800b050:	0800de00 	.word	0x0800de00

0800b054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b058:	f7ff ffde 	bl	800b018 <HAL_RCC_GetHCLKFreq>
 800b05c:	4602      	mov	r2, r0
 800b05e:	4b05      	ldr	r3, [pc, #20]	; (800b074 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	0adb      	lsrs	r3, r3, #11
 800b064:	f003 0307 	and.w	r3, r3, #7
 800b068:	4903      	ldr	r1, [pc, #12]	; (800b078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b06a:	5ccb      	ldrb	r3, [r1, r3]
 800b06c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b070:	4618      	mov	r0, r3
 800b072:	bd80      	pop	{r7, pc}
 800b074:	40021000 	.word	0x40021000
 800b078:	0800de00 	.word	0x0800de00

0800b07c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b084:	4b0a      	ldr	r3, [pc, #40]	; (800b0b0 <RCC_Delay+0x34>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a0a      	ldr	r2, [pc, #40]	; (800b0b4 <RCC_Delay+0x38>)
 800b08a:	fba2 2303 	umull	r2, r3, r2, r3
 800b08e:	0a5b      	lsrs	r3, r3, #9
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	fb02 f303 	mul.w	r3, r2, r3
 800b096:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b098:	bf00      	nop
  }
  while (Delay --);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	1e5a      	subs	r2, r3, #1
 800b09e:	60fa      	str	r2, [r7, #12]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1f9      	bne.n	800b098 <RCC_Delay+0x1c>
}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bc80      	pop	{r7}
 800b0ae:	4770      	bx	lr
 800b0b0:	200000a0 	.word	0x200000a0
 800b0b4:	10624dd3 	.word	0x10624dd3

0800b0b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e041      	b.n	800b14e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d106      	bne.n	800b0e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7fd fa26 	bl	8008530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2202      	movs	r2, #2
 800b0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	f000 fa82 	bl	800b600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d001      	beq.n	800b170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	e044      	b.n	800b1fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2202      	movs	r2, #2
 800b174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68da      	ldr	r2, [r3, #12]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f042 0201 	orr.w	r2, r2, #1
 800b186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a1d      	ldr	r2, [pc, #116]	; (800b204 <HAL_TIM_Base_Start_IT+0xac>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d018      	beq.n	800b1c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a1c      	ldr	r2, [pc, #112]	; (800b208 <HAL_TIM_Base_Start_IT+0xb0>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d013      	beq.n	800b1c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1a4:	d00e      	beq.n	800b1c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a18      	ldr	r2, [pc, #96]	; (800b20c <HAL_TIM_Base_Start_IT+0xb4>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d009      	beq.n	800b1c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a16      	ldr	r2, [pc, #88]	; (800b210 <HAL_TIM_Base_Start_IT+0xb8>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d004      	beq.n	800b1c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a15      	ldr	r2, [pc, #84]	; (800b214 <HAL_TIM_Base_Start_IT+0xbc>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d111      	bne.n	800b1e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	f003 0307 	and.w	r3, r3, #7
 800b1ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b06      	cmp	r3, #6
 800b1d4:	d010      	beq.n	800b1f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f042 0201 	orr.w	r2, r2, #1
 800b1e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1e6:	e007      	b.n	800b1f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f042 0201 	orr.w	r2, r2, #1
 800b1f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3714      	adds	r7, #20
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bc80      	pop	{r7}
 800b202:	4770      	bx	lr
 800b204:	40012c00 	.word	0x40012c00
 800b208:	40013400 	.word	0x40013400
 800b20c:	40000400 	.word	0x40000400
 800b210:	40000800 	.word	0x40000800
 800b214:	40000c00 	.word	0x40000c00

0800b218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	f003 0302 	and.w	r3, r3, #2
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d122      	bne.n	800b274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	f003 0302 	and.w	r3, r3, #2
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d11b      	bne.n	800b274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f06f 0202 	mvn.w	r2, #2
 800b244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	699b      	ldr	r3, [r3, #24]
 800b252:	f003 0303 	and.w	r3, r3, #3
 800b256:	2b00      	cmp	r3, #0
 800b258:	d003      	beq.n	800b262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 f9b4 	bl	800b5c8 <HAL_TIM_IC_CaptureCallback>
 800b260:	e005      	b.n	800b26e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f9a7 	bl	800b5b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 f9b6 	bl	800b5da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	f003 0304 	and.w	r3, r3, #4
 800b27e:	2b04      	cmp	r3, #4
 800b280:	d122      	bne.n	800b2c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	f003 0304 	and.w	r3, r3, #4
 800b28c:	2b04      	cmp	r3, #4
 800b28e:	d11b      	bne.n	800b2c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f06f 0204 	mvn.w	r2, #4
 800b298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2202      	movs	r2, #2
 800b29e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f98a 	bl	800b5c8 <HAL_TIM_IC_CaptureCallback>
 800b2b4:	e005      	b.n	800b2c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f97d 	bl	800b5b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f98c 	bl	800b5da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	f003 0308 	and.w	r3, r3, #8
 800b2d2:	2b08      	cmp	r3, #8
 800b2d4:	d122      	bne.n	800b31c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	f003 0308 	and.w	r3, r3, #8
 800b2e0:	2b08      	cmp	r3, #8
 800b2e2:	d11b      	bne.n	800b31c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f06f 0208 	mvn.w	r2, #8
 800b2ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2204      	movs	r2, #4
 800b2f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	69db      	ldr	r3, [r3, #28]
 800b2fa:	f003 0303 	and.w	r3, r3, #3
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d003      	beq.n	800b30a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f960 	bl	800b5c8 <HAL_TIM_IC_CaptureCallback>
 800b308:	e005      	b.n	800b316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f953 	bl	800b5b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f962 	bl	800b5da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	691b      	ldr	r3, [r3, #16]
 800b322:	f003 0310 	and.w	r3, r3, #16
 800b326:	2b10      	cmp	r3, #16
 800b328:	d122      	bne.n	800b370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	f003 0310 	and.w	r3, r3, #16
 800b334:	2b10      	cmp	r3, #16
 800b336:	d11b      	bne.n	800b370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f06f 0210 	mvn.w	r2, #16
 800b340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2208      	movs	r2, #8
 800b346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	69db      	ldr	r3, [r3, #28]
 800b34e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b352:	2b00      	cmp	r3, #0
 800b354:	d003      	beq.n	800b35e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f936 	bl	800b5c8 <HAL_TIM_IC_CaptureCallback>
 800b35c:	e005      	b.n	800b36a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f929 	bl	800b5b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 f938 	bl	800b5da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	f003 0301 	and.w	r3, r3, #1
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d10e      	bne.n	800b39c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	f003 0301 	and.w	r3, r3, #1
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d107      	bne.n	800b39c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f06f 0201 	mvn.w	r2, #1
 800b394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7fc fd62 	bl	8007e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3a6:	2b80      	cmp	r3, #128	; 0x80
 800b3a8:	d10e      	bne.n	800b3c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3b4:	2b80      	cmp	r3, #128	; 0x80
 800b3b6:	d107      	bne.n	800b3c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b3c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 faa1 	bl	800b90a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d2:	2b40      	cmp	r3, #64	; 0x40
 800b3d4:	d10e      	bne.n	800b3f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e0:	2b40      	cmp	r3, #64	; 0x40
 800b3e2:	d107      	bne.n	800b3f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f8fc 	bl	800b5ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	691b      	ldr	r3, [r3, #16]
 800b3fa:	f003 0320 	and.w	r3, r3, #32
 800b3fe:	2b20      	cmp	r3, #32
 800b400:	d10e      	bne.n	800b420 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	f003 0320 	and.w	r3, r3, #32
 800b40c:	2b20      	cmp	r3, #32
 800b40e:	d107      	bne.n	800b420 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f06f 0220 	mvn.w	r2, #32
 800b418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fa6c 	bl	800b8f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b420:	bf00      	nop
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b432:	2300      	movs	r3, #0
 800b434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d101      	bne.n	800b444 <HAL_TIM_ConfigClockSource+0x1c>
 800b440:	2302      	movs	r3, #2
 800b442:	e0b4      	b.n	800b5ae <HAL_TIM_ConfigClockSource+0x186>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2202      	movs	r2, #2
 800b450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b46a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b47c:	d03e      	beq.n	800b4fc <HAL_TIM_ConfigClockSource+0xd4>
 800b47e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b482:	f200 8087 	bhi.w	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b48a:	f000 8086 	beq.w	800b59a <HAL_TIM_ConfigClockSource+0x172>
 800b48e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b492:	d87f      	bhi.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b494:	2b70      	cmp	r3, #112	; 0x70
 800b496:	d01a      	beq.n	800b4ce <HAL_TIM_ConfigClockSource+0xa6>
 800b498:	2b70      	cmp	r3, #112	; 0x70
 800b49a:	d87b      	bhi.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b49c:	2b60      	cmp	r3, #96	; 0x60
 800b49e:	d050      	beq.n	800b542 <HAL_TIM_ConfigClockSource+0x11a>
 800b4a0:	2b60      	cmp	r3, #96	; 0x60
 800b4a2:	d877      	bhi.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b4a4:	2b50      	cmp	r3, #80	; 0x50
 800b4a6:	d03c      	beq.n	800b522 <HAL_TIM_ConfigClockSource+0xfa>
 800b4a8:	2b50      	cmp	r3, #80	; 0x50
 800b4aa:	d873      	bhi.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b4ac:	2b40      	cmp	r3, #64	; 0x40
 800b4ae:	d058      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0x13a>
 800b4b0:	2b40      	cmp	r3, #64	; 0x40
 800b4b2:	d86f      	bhi.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b4b4:	2b30      	cmp	r3, #48	; 0x30
 800b4b6:	d064      	beq.n	800b582 <HAL_TIM_ConfigClockSource+0x15a>
 800b4b8:	2b30      	cmp	r3, #48	; 0x30
 800b4ba:	d86b      	bhi.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b4bc:	2b20      	cmp	r3, #32
 800b4be:	d060      	beq.n	800b582 <HAL_TIM_ConfigClockSource+0x15a>
 800b4c0:	2b20      	cmp	r3, #32
 800b4c2:	d867      	bhi.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d05c      	beq.n	800b582 <HAL_TIM_ConfigClockSource+0x15a>
 800b4c8:	2b10      	cmp	r3, #16
 800b4ca:	d05a      	beq.n	800b582 <HAL_TIM_ConfigClockSource+0x15a>
 800b4cc:	e062      	b.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4de:	f000 f980 	bl	800b7e2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	609a      	str	r2, [r3, #8]
      break;
 800b4fa:	e04f      	b.n	800b59c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b50c:	f000 f969 	bl	800b7e2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	689a      	ldr	r2, [r3, #8]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b51e:	609a      	str	r2, [r3, #8]
      break;
 800b520:	e03c      	b.n	800b59c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b52e:	461a      	mov	r2, r3
 800b530:	f000 f8e0 	bl	800b6f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2150      	movs	r1, #80	; 0x50
 800b53a:	4618      	mov	r0, r3
 800b53c:	f000 f937 	bl	800b7ae <TIM_ITRx_SetConfig>
      break;
 800b540:	e02c      	b.n	800b59c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b54e:	461a      	mov	r2, r3
 800b550:	f000 f8fe 	bl	800b750 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2160      	movs	r1, #96	; 0x60
 800b55a:	4618      	mov	r0, r3
 800b55c:	f000 f927 	bl	800b7ae <TIM_ITRx_SetConfig>
      break;
 800b560:	e01c      	b.n	800b59c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b56e:	461a      	mov	r2, r3
 800b570:	f000 f8c0 	bl	800b6f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2140      	movs	r1, #64	; 0x40
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 f917 	bl	800b7ae <TIM_ITRx_SetConfig>
      break;
 800b580:	e00c      	b.n	800b59c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4619      	mov	r1, r3
 800b58c:	4610      	mov	r0, r2
 800b58e:	f000 f90e 	bl	800b7ae <TIM_ITRx_SetConfig>
      break;
 800b592:	e003      	b.n	800b59c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	73fb      	strb	r3, [r7, #15]
      break;
 800b598:	e000      	b.n	800b59c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b59a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b083      	sub	sp, #12
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5be:	bf00      	nop
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bc80      	pop	{r7}
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bc80      	pop	{r7}
 800b5d8:	4770      	bx	lr

0800b5da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5da:	b480      	push	{r7}
 800b5dc:	b083      	sub	sp, #12
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5e2:	bf00      	nop
 800b5e4:	370c      	adds	r7, #12
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bc80      	pop	{r7}
 800b5ea:	4770      	bx	lr

0800b5ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bc80      	pop	{r7}
 800b5fc:	4770      	bx	lr
	...

0800b600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a33      	ldr	r2, [pc, #204]	; (800b6e0 <TIM_Base_SetConfig+0xe0>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d013      	beq.n	800b640 <TIM_Base_SetConfig+0x40>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a32      	ldr	r2, [pc, #200]	; (800b6e4 <TIM_Base_SetConfig+0xe4>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d00f      	beq.n	800b640 <TIM_Base_SetConfig+0x40>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b626:	d00b      	beq.n	800b640 <TIM_Base_SetConfig+0x40>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a2f      	ldr	r2, [pc, #188]	; (800b6e8 <TIM_Base_SetConfig+0xe8>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d007      	beq.n	800b640 <TIM_Base_SetConfig+0x40>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4a2e      	ldr	r2, [pc, #184]	; (800b6ec <TIM_Base_SetConfig+0xec>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d003      	beq.n	800b640 <TIM_Base_SetConfig+0x40>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a2d      	ldr	r2, [pc, #180]	; (800b6f0 <TIM_Base_SetConfig+0xf0>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d108      	bne.n	800b652 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	4313      	orrs	r3, r2
 800b650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a22      	ldr	r2, [pc, #136]	; (800b6e0 <TIM_Base_SetConfig+0xe0>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d013      	beq.n	800b682 <TIM_Base_SetConfig+0x82>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a21      	ldr	r2, [pc, #132]	; (800b6e4 <TIM_Base_SetConfig+0xe4>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d00f      	beq.n	800b682 <TIM_Base_SetConfig+0x82>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b668:	d00b      	beq.n	800b682 <TIM_Base_SetConfig+0x82>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a1e      	ldr	r2, [pc, #120]	; (800b6e8 <TIM_Base_SetConfig+0xe8>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d007      	beq.n	800b682 <TIM_Base_SetConfig+0x82>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a1d      	ldr	r2, [pc, #116]	; (800b6ec <TIM_Base_SetConfig+0xec>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d003      	beq.n	800b682 <TIM_Base_SetConfig+0x82>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4a1c      	ldr	r2, [pc, #112]	; (800b6f0 <TIM_Base_SetConfig+0xf0>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d108      	bne.n	800b694 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	4313      	orrs	r3, r2
 800b692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	695b      	ldr	r3, [r3, #20]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	689a      	ldr	r2, [r3, #8]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a09      	ldr	r2, [pc, #36]	; (800b6e0 <TIM_Base_SetConfig+0xe0>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d003      	beq.n	800b6c8 <TIM_Base_SetConfig+0xc8>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a08      	ldr	r2, [pc, #32]	; (800b6e4 <TIM_Base_SetConfig+0xe4>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d103      	bne.n	800b6d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	691a      	ldr	r2, [r3, #16]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	615a      	str	r2, [r3, #20]
}
 800b6d6:	bf00      	nop
 800b6d8:	3714      	adds	r7, #20
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bc80      	pop	{r7}
 800b6de:	4770      	bx	lr
 800b6e0:	40012c00 	.word	0x40012c00
 800b6e4:	40013400 	.word	0x40013400
 800b6e8:	40000400 	.word	0x40000400
 800b6ec:	40000800 	.word	0x40000800
 800b6f0:	40000c00 	.word	0x40000c00

0800b6f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6a1b      	ldr	r3, [r3, #32]
 800b704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6a1b      	ldr	r3, [r3, #32]
 800b70a:	f023 0201 	bic.w	r2, r3, #1
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	699b      	ldr	r3, [r3, #24]
 800b716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b71e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	011b      	lsls	r3, r3, #4
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	4313      	orrs	r3, r2
 800b728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	f023 030a 	bic.w	r3, r3, #10
 800b730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	4313      	orrs	r3, r2
 800b738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	693a      	ldr	r2, [r7, #16]
 800b73e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	621a      	str	r2, [r3, #32]
}
 800b746:	bf00      	nop
 800b748:	371c      	adds	r7, #28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bc80      	pop	{r7}
 800b74e:	4770      	bx	lr

0800b750 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b750:	b480      	push	{r7}
 800b752:	b087      	sub	sp, #28
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6a1b      	ldr	r3, [r3, #32]
 800b760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	f023 0210 	bic.w	r2, r3, #16
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	699b      	ldr	r3, [r3, #24]
 800b772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b77a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	031b      	lsls	r3, r3, #12
 800b780:	693a      	ldr	r2, [r7, #16]
 800b782:	4313      	orrs	r3, r2
 800b784:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b78c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	011b      	lsls	r3, r3, #4
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	4313      	orrs	r3, r2
 800b796:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	693a      	ldr	r2, [r7, #16]
 800b79c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	697a      	ldr	r2, [r7, #20]
 800b7a2:	621a      	str	r2, [r3, #32]
}
 800b7a4:	bf00      	nop
 800b7a6:	371c      	adds	r7, #28
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bc80      	pop	{r7}
 800b7ac:	4770      	bx	lr

0800b7ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b085      	sub	sp, #20
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	f043 0307 	orr.w	r3, r3, #7
 800b7d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	609a      	str	r2, [r3, #8]
}
 800b7d8:	bf00      	nop
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bc80      	pop	{r7}
 800b7e0:	4770      	bx	lr

0800b7e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7e2:	b480      	push	{r7}
 800b7e4:	b087      	sub	sp, #28
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	60f8      	str	r0, [r7, #12]
 800b7ea:	60b9      	str	r1, [r7, #8]
 800b7ec:	607a      	str	r2, [r7, #4]
 800b7ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	021a      	lsls	r2, r3, #8
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	431a      	orrs	r2, r3
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	4313      	orrs	r3, r2
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	697a      	ldr	r2, [r7, #20]
 800b814:	609a      	str	r2, [r3, #8]
}
 800b816:	bf00      	nop
 800b818:	371c      	adds	r7, #28
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bc80      	pop	{r7}
 800b81e:	4770      	bx	lr

0800b820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b830:	2b01      	cmp	r3, #1
 800b832:	d101      	bne.n	800b838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b834:	2302      	movs	r3, #2
 800b836:	e050      	b.n	800b8da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2202      	movs	r2, #2
 800b844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b85e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	4313      	orrs	r3, r2
 800b868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a1b      	ldr	r2, [pc, #108]	; (800b8e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d018      	beq.n	800b8ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a19      	ldr	r2, [pc, #100]	; (800b8e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d013      	beq.n	800b8ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b88e:	d00e      	beq.n	800b8ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a15      	ldr	r2, [pc, #84]	; (800b8ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d009      	beq.n	800b8ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a14      	ldr	r2, [pc, #80]	; (800b8f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d004      	beq.n	800b8ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a12      	ldr	r2, [pc, #72]	; (800b8f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d10c      	bne.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bc80      	pop	{r7}
 800b8e2:	4770      	bx	lr
 800b8e4:	40012c00 	.word	0x40012c00
 800b8e8:	40013400 	.word	0x40013400
 800b8ec:	40000400 	.word	0x40000400
 800b8f0:	40000800 	.word	0x40000800
 800b8f4:	40000c00 	.word	0x40000c00

0800b8f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b900:	bf00      	nop
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	bc80      	pop	{r7}
 800b908:	4770      	bx	lr

0800b90a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b90a:	b480      	push	{r7}
 800b90c:	b083      	sub	sp, #12
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b912:	bf00      	nop
 800b914:	370c      	adds	r7, #12
 800b916:	46bd      	mov	sp, r7
 800b918:	bc80      	pop	{r7}
 800b91a:	4770      	bx	lr

0800b91c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e042      	b.n	800b9b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b00      	cmp	r3, #0
 800b938:	d106      	bne.n	800b948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f7fc fe1a 	bl	800857c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2224      	movs	r2, #36	; 0x24
 800b94c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	68da      	ldr	r2, [r3, #12]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b95e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fcb5 	bl	800c2d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	691a      	ldr	r2, [r3, #16]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	695a      	ldr	r2, [r3, #20]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68da      	ldr	r2, [r3, #12]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2220      	movs	r2, #32
 800b9a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b20      	cmp	r3, #32
 800b9d4:	d121      	bne.n	800ba1a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d002      	beq.n	800b9e2 <HAL_UART_Transmit_IT+0x26>
 800b9dc:	88fb      	ldrh	r3, [r7, #6]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e01a      	b.n	800ba1c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	68ba      	ldr	r2, [r7, #8]
 800b9ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	88fa      	ldrh	r2, [r7, #6]
 800b9f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	88fa      	ldrh	r2, [r7, #6]
 800b9f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2221      	movs	r2, #33	; 0x21
 800ba02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68da      	ldr	r2, [r3, #12]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ba14:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	e000      	b.n	800ba1c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800ba1a:	2302      	movs	r3, #2
  }
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3714      	adds	r7, #20
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bc80      	pop	{r7}
 800ba24:	4770      	bx	lr
	...

0800ba28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b0ba      	sub	sp, #232	; 0xe8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ba54:	2300      	movs	r3, #0
 800ba56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba5e:	f003 030f 	and.w	r3, r3, #15
 800ba62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ba66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d10f      	bne.n	800ba8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba72:	f003 0320 	and.w	r3, r3, #32
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d009      	beq.n	800ba8e <HAL_UART_IRQHandler+0x66>
 800ba7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba7e:	f003 0320 	and.w	r3, r3, #32
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d003      	beq.n	800ba8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 fb63 	bl	800c152 <UART_Receive_IT>
      return;
 800ba8c:	e25b      	b.n	800bf46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ba8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	f000 80de 	beq.w	800bc54 <HAL_UART_IRQHandler+0x22c>
 800ba98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba9c:	f003 0301 	and.w	r3, r3, #1
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d106      	bne.n	800bab2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800baa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baa8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800baac:	2b00      	cmp	r3, #0
 800baae:	f000 80d1 	beq.w	800bc54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bab6:	f003 0301 	and.w	r3, r3, #1
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00b      	beq.n	800bad6 <HAL_UART_IRQHandler+0xae>
 800babe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d005      	beq.n	800bad6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bace:	f043 0201 	orr.w	r2, r3, #1
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bada:	f003 0304 	and.w	r3, r3, #4
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00b      	beq.n	800bafa <HAL_UART_IRQHandler+0xd2>
 800bae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bae6:	f003 0301 	and.w	r3, r3, #1
 800baea:	2b00      	cmp	r3, #0
 800baec:	d005      	beq.n	800bafa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baf2:	f043 0202 	orr.w	r2, r3, #2
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bafa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bafe:	f003 0302 	and.w	r3, r3, #2
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00b      	beq.n	800bb1e <HAL_UART_IRQHandler+0xf6>
 800bb06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb0a:	f003 0301 	and.w	r3, r3, #1
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d005      	beq.n	800bb1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb16:	f043 0204 	orr.w	r2, r3, #4
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bb1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb22:	f003 0308 	and.w	r3, r3, #8
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d011      	beq.n	800bb4e <HAL_UART_IRQHandler+0x126>
 800bb2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb2e:	f003 0320 	and.w	r3, r3, #32
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d105      	bne.n	800bb42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d005      	beq.n	800bb4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb46:	f043 0208 	orr.w	r2, r3, #8
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 81f2 	beq.w	800bf3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb5c:	f003 0320 	and.w	r3, r3, #32
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d008      	beq.n	800bb76 <HAL_UART_IRQHandler+0x14e>
 800bb64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb68:	f003 0320 	and.w	r3, r3, #32
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 faee 	bl	800c152 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	695b      	ldr	r3, [r3, #20]
 800bb7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	bf14      	ite	ne
 800bb84:	2301      	movne	r3, #1
 800bb86:	2300      	moveq	r3, #0
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb92:	f003 0308 	and.w	r3, r3, #8
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d103      	bne.n	800bba2 <HAL_UART_IRQHandler+0x17a>
 800bb9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d04f      	beq.n	800bc42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f9f8 	bl	800bf98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	695b      	ldr	r3, [r3, #20]
 800bbae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d041      	beq.n	800bc3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3314      	adds	r3, #20
 800bbbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbc4:	e853 3f00 	ldrex	r3, [r3]
 800bbc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bbcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bbd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3314      	adds	r3, #20
 800bbde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bbe2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bbe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bbee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bbf2:	e841 2300 	strex	r3, r2, [r1]
 800bbf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bbfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d1d9      	bne.n	800bbb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d013      	beq.n	800bc32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc0e:	4a7e      	ldr	r2, [pc, #504]	; (800be08 <HAL_UART_IRQHandler+0x3e0>)
 800bc10:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fd f86c 	bl	8008cf4 <HAL_DMA_Abort_IT>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d016      	beq.n	800bc50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bc2c:	4610      	mov	r0, r2
 800bc2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc30:	e00e      	b.n	800bc50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 f99c 	bl	800bf70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc38:	e00a      	b.n	800bc50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 f998 	bl	800bf70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc40:	e006      	b.n	800bc50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 f994 	bl	800bf70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bc4e:	e175      	b.n	800bf3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc50:	bf00      	nop
    return;
 800bc52:	e173      	b.n	800bf3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	f040 814f 	bne.w	800befc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bc5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc62:	f003 0310 	and.w	r3, r3, #16
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f000 8148 	beq.w	800befc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc70:	f003 0310 	and.w	r3, r3, #16
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 8141 	beq.w	800befc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	60bb      	str	r3, [r7, #8]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	60bb      	str	r3, [r7, #8]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	60bb      	str	r3, [r7, #8]
 800bc8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f000 80b6 	beq.w	800be0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bcac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f000 8145 	beq.w	800bf40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bcba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	f080 813e 	bcs.w	800bf40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcd0:	699b      	ldr	r3, [r3, #24]
 800bcd2:	2b20      	cmp	r3, #32
 800bcd4:	f000 8088 	beq.w	800bde8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	330c      	adds	r3, #12
 800bcde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bce6:	e853 3f00 	ldrex	r3, [r3]
 800bcea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bcee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bcf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcf6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	330c      	adds	r3, #12
 800bd00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bd04:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bd08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bd10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bd14:	e841 2300 	strex	r3, r2, [r1]
 800bd18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bd1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1d9      	bne.n	800bcd8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	3314      	adds	r3, #20
 800bd2a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd2e:	e853 3f00 	ldrex	r3, [r3]
 800bd32:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd36:	f023 0301 	bic.w	r3, r3, #1
 800bd3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	3314      	adds	r3, #20
 800bd44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bd48:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd4c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd54:	e841 2300 	strex	r3, r2, [r1]
 800bd58:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1e1      	bne.n	800bd24 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	3314      	adds	r3, #20
 800bd66:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd6a:	e853 3f00 	ldrex	r3, [r3]
 800bd6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bd70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3314      	adds	r3, #20
 800bd80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd84:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd8c:	e841 2300 	strex	r3, r2, [r1]
 800bd90:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1e3      	bne.n	800bd60 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2220      	movs	r2, #32
 800bd9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	330c      	adds	r3, #12
 800bdac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdb0:	e853 3f00 	ldrex	r3, [r3]
 800bdb4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bdb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdb8:	f023 0310 	bic.w	r3, r3, #16
 800bdbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	330c      	adds	r3, #12
 800bdc6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bdca:	65ba      	str	r2, [r7, #88]	; 0x58
 800bdcc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bdd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bdd2:	e841 2300 	strex	r3, r2, [r1]
 800bdd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bdd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d1e3      	bne.n	800bda6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fc ff4b 	bl	8008c7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2202      	movs	r2, #2
 800bdec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 f8bf 	bl	800bf82 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be04:	e09c      	b.n	800bf40 <HAL_UART_IRQHandler+0x518>
 800be06:	bf00      	nop
 800be08:	0800c05d 	.word	0x0800c05d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be14:	b29b      	uxth	r3, r3
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be20:	b29b      	uxth	r3, r3
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 808e 	beq.w	800bf44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800be28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f000 8089 	beq.w	800bf44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	330c      	adds	r3, #12
 800be38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3c:	e853 3f00 	ldrex	r3, [r3]
 800be40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	330c      	adds	r3, #12
 800be52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be56:	647a      	str	r2, [r7, #68]	; 0x44
 800be58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be5e:	e841 2300 	strex	r3, r2, [r1]
 800be62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1e3      	bne.n	800be32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3314      	adds	r3, #20
 800be70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be74:	e853 3f00 	ldrex	r3, [r3]
 800be78:	623b      	str	r3, [r7, #32]
   return(result);
 800be7a:	6a3b      	ldr	r3, [r7, #32]
 800be7c:	f023 0301 	bic.w	r3, r3, #1
 800be80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	3314      	adds	r3, #20
 800be8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800be8e:	633a      	str	r2, [r7, #48]	; 0x30
 800be90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be96:	e841 2300 	strex	r3, r2, [r1]
 800be9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1e3      	bne.n	800be6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2220      	movs	r2, #32
 800bea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	330c      	adds	r3, #12
 800beb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	e853 3f00 	ldrex	r3, [r3]
 800bebe:	60fb      	str	r3, [r7, #12]
   return(result);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f023 0310 	bic.w	r3, r3, #16
 800bec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	330c      	adds	r3, #12
 800bed0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bed4:	61fa      	str	r2, [r7, #28]
 800bed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed8:	69b9      	ldr	r1, [r7, #24]
 800beda:	69fa      	ldr	r2, [r7, #28]
 800bedc:	e841 2300 	strex	r3, r2, [r1]
 800bee0:	617b      	str	r3, [r7, #20]
   return(result);
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1e3      	bne.n	800beb0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2202      	movs	r2, #2
 800beec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800beee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bef2:	4619      	mov	r1, r3
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 f844 	bl	800bf82 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800befa:	e023      	b.n	800bf44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800befc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d009      	beq.n	800bf1c <HAL_UART_IRQHandler+0x4f4>
 800bf08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d003      	beq.n	800bf1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 f8b5 	bl	800c084 <UART_Transmit_IT>
    return;
 800bf1a:	e014      	b.n	800bf46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bf1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00e      	beq.n	800bf46 <HAL_UART_IRQHandler+0x51e>
 800bf28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d008      	beq.n	800bf46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 f8f4 	bl	800c122 <UART_EndTransmit_IT>
    return;
 800bf3a:	e004      	b.n	800bf46 <HAL_UART_IRQHandler+0x51e>
    return;
 800bf3c:	bf00      	nop
 800bf3e:	e002      	b.n	800bf46 <HAL_UART_IRQHandler+0x51e>
      return;
 800bf40:	bf00      	nop
 800bf42:	e000      	b.n	800bf46 <HAL_UART_IRQHandler+0x51e>
      return;
 800bf44:	bf00      	nop
  }
}
 800bf46:	37e8      	adds	r7, #232	; 0xe8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bf54:	bf00      	nop
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bc80      	pop	{r7}
 800bf5c:	4770      	bx	lr

0800bf5e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b083      	sub	sp, #12
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bf66:	bf00      	nop
 800bf68:	370c      	adds	r7, #12
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bc80      	pop	{r7}
 800bf6e:	4770      	bx	lr

0800bf70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bf78:	bf00      	nop
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bc80      	pop	{r7}
 800bf80:	4770      	bx	lr

0800bf82 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf82:	b480      	push	{r7}
 800bf84:	b083      	sub	sp, #12
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf8e:	bf00      	nop
 800bf90:	370c      	adds	r7, #12
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bc80      	pop	{r7}
 800bf96:	4770      	bx	lr

0800bf98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b095      	sub	sp, #84	; 0x54
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	330c      	adds	r3, #12
 800bfa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfaa:	e853 3f00 	ldrex	r3, [r3]
 800bfae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	330c      	adds	r3, #12
 800bfbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bfc0:	643a      	str	r2, [r7, #64]	; 0x40
 800bfc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bfc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfc8:	e841 2300 	strex	r3, r2, [r1]
 800bfcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1e5      	bne.n	800bfa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3314      	adds	r3, #20
 800bfda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfdc:	6a3b      	ldr	r3, [r7, #32]
 800bfde:	e853 3f00 	ldrex	r3, [r3]
 800bfe2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	f023 0301 	bic.w	r3, r3, #1
 800bfea:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	3314      	adds	r3, #20
 800bff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bff4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bffc:	e841 2300 	strex	r3, r2, [r1]
 800c000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c004:	2b00      	cmp	r3, #0
 800c006:	d1e5      	bne.n	800bfd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d119      	bne.n	800c044 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	330c      	adds	r3, #12
 800c016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	e853 3f00 	ldrex	r3, [r3]
 800c01e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	f023 0310 	bic.w	r3, r3, #16
 800c026:	647b      	str	r3, [r7, #68]	; 0x44
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	330c      	adds	r3, #12
 800c02e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c030:	61ba      	str	r2, [r7, #24]
 800c032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c034:	6979      	ldr	r1, [r7, #20]
 800c036:	69ba      	ldr	r2, [r7, #24]
 800c038:	e841 2300 	strex	r3, r2, [r1]
 800c03c:	613b      	str	r3, [r7, #16]
   return(result);
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1e5      	bne.n	800c010 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2220      	movs	r2, #32
 800c048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c052:	bf00      	nop
 800c054:	3754      	adds	r7, #84	; 0x54
 800c056:	46bd      	mov	sp, r7
 800c058:	bc80      	pop	{r7}
 800c05a:	4770      	bx	lr

0800c05c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c068:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2200      	movs	r2, #0
 800c06e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2200      	movs	r2, #0
 800c074:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	f7ff ff7a 	bl	800bf70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c07c:	bf00      	nop
 800c07e:	3710      	adds	r7, #16
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b21      	cmp	r3, #33	; 0x21
 800c096:	d13e      	bne.n	800c116 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a0:	d114      	bne.n	800c0cc <UART_Transmit_IT+0x48>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d110      	bne.n	800c0cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a1b      	ldr	r3, [r3, #32]
 800c0c4:	1c9a      	adds	r2, r3, #2
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	621a      	str	r2, [r3, #32]
 800c0ca:	e008      	b.n	800c0de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a1b      	ldr	r3, [r3, #32]
 800c0d0:	1c59      	adds	r1, r3, #1
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	6211      	str	r1, [r2, #32]
 800c0d6:	781a      	ldrb	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	3b01      	subs	r3, #1
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d10f      	bne.n	800c112 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68da      	ldr	r2, [r3, #12]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c100:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68da      	ldr	r2, [r3, #12]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c110:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c112:	2300      	movs	r3, #0
 800c114:	e000      	b.n	800c118 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c116:	2302      	movs	r3, #2
  }
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3714      	adds	r7, #20
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bc80      	pop	{r7}
 800c120:	4770      	bx	lr

0800c122 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b082      	sub	sp, #8
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68da      	ldr	r2, [r3, #12]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c138:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2220      	movs	r2, #32
 800c13e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7ff ff02 	bl	800bf4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c148:	2300      	movs	r3, #0
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b08c      	sub	sp, #48	; 0x30
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c160:	b2db      	uxtb	r3, r3
 800c162:	2b22      	cmp	r3, #34	; 0x22
 800c164:	f040 80ae 	bne.w	800c2c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c170:	d117      	bne.n	800c1a2 <UART_Receive_IT+0x50>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d113      	bne.n	800c1a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c17a:	2300      	movs	r3, #0
 800c17c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c182:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c190:	b29a      	uxth	r2, r3
 800c192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c194:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c19a:	1c9a      	adds	r2, r3, #2
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	629a      	str	r2, [r3, #40]	; 0x28
 800c1a0:	e026      	b.n	800c1f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1b4:	d007      	beq.n	800c1c6 <UART_Receive_IT+0x74>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10a      	bne.n	800c1d4 <UART_Receive_IT+0x82>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	691b      	ldr	r3, [r3, #16]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d106      	bne.n	800c1d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d0:	701a      	strb	r2, [r3, #0]
 800c1d2:	e008      	b.n	800c1e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ea:	1c5a      	adds	r2, r3, #1
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c200:	2b00      	cmp	r3, #0
 800c202:	d15d      	bne.n	800c2c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	68da      	ldr	r2, [r3, #12]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f022 0220 	bic.w	r2, r2, #32
 800c212:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68da      	ldr	r2, [r3, #12]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	695a      	ldr	r2, [r3, #20]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f022 0201 	bic.w	r2, r2, #1
 800c232:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2220      	movs	r2, #32
 800c238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c246:	2b01      	cmp	r3, #1
 800c248:	d135      	bne.n	800c2b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	330c      	adds	r3, #12
 800c256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	e853 3f00 	ldrex	r3, [r3]
 800c25e:	613b      	str	r3, [r7, #16]
   return(result);
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	f023 0310 	bic.w	r3, r3, #16
 800c266:	627b      	str	r3, [r7, #36]	; 0x24
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	330c      	adds	r3, #12
 800c26e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c270:	623a      	str	r2, [r7, #32]
 800c272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c274:	69f9      	ldr	r1, [r7, #28]
 800c276:	6a3a      	ldr	r2, [r7, #32]
 800c278:	e841 2300 	strex	r3, r2, [r1]
 800c27c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d1e5      	bne.n	800c250 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f003 0310 	and.w	r3, r3, #16
 800c28e:	2b10      	cmp	r3, #16
 800c290:	d10a      	bne.n	800c2a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c292:	2300      	movs	r3, #0
 800c294:	60fb      	str	r3, [r7, #12]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	60fb      	str	r3, [r7, #12]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	60fb      	str	r3, [r7, #12]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7ff fe67 	bl	800bf82 <HAL_UARTEx_RxEventCallback>
 800c2b4:	e002      	b.n	800c2bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f7ff fe51 	bl	800bf5e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	e002      	b.n	800c2c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	e000      	b.n	800c2c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c2c4:	2302      	movs	r3, #2
  }
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3730      	adds	r7, #48	; 0x30
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	68da      	ldr	r2, [r3, #12]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	430a      	orrs	r2, r1
 800c2ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	689a      	ldr	r2, [r3, #8]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	431a      	orrs	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	695b      	ldr	r3, [r3, #20]
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c30a:	f023 030c 	bic.w	r3, r3, #12
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	6812      	ldr	r2, [r2, #0]
 800c312:	68b9      	ldr	r1, [r7, #8]
 800c314:	430b      	orrs	r3, r1
 800c316:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	695b      	ldr	r3, [r3, #20]
 800c31e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	699a      	ldr	r2, [r3, #24]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	430a      	orrs	r2, r1
 800c32c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a2c      	ldr	r2, [pc, #176]	; (800c3e4 <UART_SetConfig+0x114>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d103      	bne.n	800c340 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c338:	f7fe fe8c 	bl	800b054 <HAL_RCC_GetPCLK2Freq>
 800c33c:	60f8      	str	r0, [r7, #12]
 800c33e:	e002      	b.n	800c346 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c340:	f7fe fe74 	bl	800b02c <HAL_RCC_GetPCLK1Freq>
 800c344:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	4613      	mov	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4413      	add	r3, r2
 800c34e:	009a      	lsls	r2, r3, #2
 800c350:	441a      	add	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	fbb2 f3f3 	udiv	r3, r2, r3
 800c35c:	4a22      	ldr	r2, [pc, #136]	; (800c3e8 <UART_SetConfig+0x118>)
 800c35e:	fba2 2303 	umull	r2, r3, r2, r3
 800c362:	095b      	lsrs	r3, r3, #5
 800c364:	0119      	lsls	r1, r3, #4
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	4613      	mov	r3, r2
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4413      	add	r3, r2
 800c36e:	009a      	lsls	r2, r3, #2
 800c370:	441a      	add	r2, r3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	fbb2 f2f3 	udiv	r2, r2, r3
 800c37c:	4b1a      	ldr	r3, [pc, #104]	; (800c3e8 <UART_SetConfig+0x118>)
 800c37e:	fba3 0302 	umull	r0, r3, r3, r2
 800c382:	095b      	lsrs	r3, r3, #5
 800c384:	2064      	movs	r0, #100	; 0x64
 800c386:	fb00 f303 	mul.w	r3, r0, r3
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	011b      	lsls	r3, r3, #4
 800c38e:	3332      	adds	r3, #50	; 0x32
 800c390:	4a15      	ldr	r2, [pc, #84]	; (800c3e8 <UART_SetConfig+0x118>)
 800c392:	fba2 2303 	umull	r2, r3, r2, r3
 800c396:	095b      	lsrs	r3, r3, #5
 800c398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c39c:	4419      	add	r1, r3
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	009a      	lsls	r2, r3, #2
 800c3a8:	441a      	add	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c3b4:	4b0c      	ldr	r3, [pc, #48]	; (800c3e8 <UART_SetConfig+0x118>)
 800c3b6:	fba3 0302 	umull	r0, r3, r3, r2
 800c3ba:	095b      	lsrs	r3, r3, #5
 800c3bc:	2064      	movs	r0, #100	; 0x64
 800c3be:	fb00 f303 	mul.w	r3, r0, r3
 800c3c2:	1ad3      	subs	r3, r2, r3
 800c3c4:	011b      	lsls	r3, r3, #4
 800c3c6:	3332      	adds	r3, #50	; 0x32
 800c3c8:	4a07      	ldr	r2, [pc, #28]	; (800c3e8 <UART_SetConfig+0x118>)
 800c3ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ce:	095b      	lsrs	r3, r3, #5
 800c3d0:	f003 020f 	and.w	r2, r3, #15
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	440a      	add	r2, r1
 800c3da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c3dc:	bf00      	nop
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	40013800 	.word	0x40013800
 800c3e8:	51eb851f 	.word	0x51eb851f

0800c3ec <__itoa>:
 800c3ec:	1e93      	subs	r3, r2, #2
 800c3ee:	2b22      	cmp	r3, #34	; 0x22
 800c3f0:	b510      	push	{r4, lr}
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	d904      	bls.n	800c400 <__itoa+0x14>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	461c      	mov	r4, r3
 800c3fa:	700b      	strb	r3, [r1, #0]
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	bd10      	pop	{r4, pc}
 800c400:	2a0a      	cmp	r2, #10
 800c402:	d109      	bne.n	800c418 <__itoa+0x2c>
 800c404:	2800      	cmp	r0, #0
 800c406:	da07      	bge.n	800c418 <__itoa+0x2c>
 800c408:	232d      	movs	r3, #45	; 0x2d
 800c40a:	700b      	strb	r3, [r1, #0]
 800c40c:	2101      	movs	r1, #1
 800c40e:	4240      	negs	r0, r0
 800c410:	4421      	add	r1, r4
 800c412:	f000 f8b9 	bl	800c588 <__utoa>
 800c416:	e7f1      	b.n	800c3fc <__itoa+0x10>
 800c418:	2100      	movs	r1, #0
 800c41a:	e7f9      	b.n	800c410 <__itoa+0x24>

0800c41c <itoa>:
 800c41c:	f7ff bfe6 	b.w	800c3ec <__itoa>

0800c420 <malloc>:
 800c420:	4b02      	ldr	r3, [pc, #8]	; (800c42c <malloc+0xc>)
 800c422:	4601      	mov	r1, r0
 800c424:	6818      	ldr	r0, [r3, #0]
 800c426:	f000 b823 	b.w	800c470 <_malloc_r>
 800c42a:	bf00      	nop
 800c42c:	200000f8 	.word	0x200000f8

0800c430 <sbrk_aligned>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	4e0e      	ldr	r6, [pc, #56]	; (800c46c <sbrk_aligned+0x3c>)
 800c434:	460c      	mov	r4, r1
 800c436:	6831      	ldr	r1, [r6, #0]
 800c438:	4605      	mov	r5, r0
 800c43a:	b911      	cbnz	r1, 800c442 <sbrk_aligned+0x12>
 800c43c:	f000 f91e 	bl	800c67c <_sbrk_r>
 800c440:	6030      	str	r0, [r6, #0]
 800c442:	4621      	mov	r1, r4
 800c444:	4628      	mov	r0, r5
 800c446:	f000 f919 	bl	800c67c <_sbrk_r>
 800c44a:	1c43      	adds	r3, r0, #1
 800c44c:	d00a      	beq.n	800c464 <sbrk_aligned+0x34>
 800c44e:	1cc4      	adds	r4, r0, #3
 800c450:	f024 0403 	bic.w	r4, r4, #3
 800c454:	42a0      	cmp	r0, r4
 800c456:	d007      	beq.n	800c468 <sbrk_aligned+0x38>
 800c458:	1a21      	subs	r1, r4, r0
 800c45a:	4628      	mov	r0, r5
 800c45c:	f000 f90e 	bl	800c67c <_sbrk_r>
 800c460:	3001      	adds	r0, #1
 800c462:	d101      	bne.n	800c468 <sbrk_aligned+0x38>
 800c464:	f04f 34ff 	mov.w	r4, #4294967295
 800c468:	4620      	mov	r0, r4
 800c46a:	bd70      	pop	{r4, r5, r6, pc}
 800c46c:	20000464 	.word	0x20000464

0800c470 <_malloc_r>:
 800c470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c474:	1ccd      	adds	r5, r1, #3
 800c476:	f025 0503 	bic.w	r5, r5, #3
 800c47a:	3508      	adds	r5, #8
 800c47c:	2d0c      	cmp	r5, #12
 800c47e:	bf38      	it	cc
 800c480:	250c      	movcc	r5, #12
 800c482:	2d00      	cmp	r5, #0
 800c484:	4607      	mov	r7, r0
 800c486:	db01      	blt.n	800c48c <_malloc_r+0x1c>
 800c488:	42a9      	cmp	r1, r5
 800c48a:	d905      	bls.n	800c498 <_malloc_r+0x28>
 800c48c:	230c      	movs	r3, #12
 800c48e:	2600      	movs	r6, #0
 800c490:	603b      	str	r3, [r7, #0]
 800c492:	4630      	mov	r0, r6
 800c494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c498:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c56c <_malloc_r+0xfc>
 800c49c:	f000 f868 	bl	800c570 <__malloc_lock>
 800c4a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c4a4:	461c      	mov	r4, r3
 800c4a6:	bb5c      	cbnz	r4, 800c500 <_malloc_r+0x90>
 800c4a8:	4629      	mov	r1, r5
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	f7ff ffc0 	bl	800c430 <sbrk_aligned>
 800c4b0:	1c43      	adds	r3, r0, #1
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	d155      	bne.n	800c562 <_malloc_r+0xf2>
 800c4b6:	f8d8 4000 	ldr.w	r4, [r8]
 800c4ba:	4626      	mov	r6, r4
 800c4bc:	2e00      	cmp	r6, #0
 800c4be:	d145      	bne.n	800c54c <_malloc_r+0xdc>
 800c4c0:	2c00      	cmp	r4, #0
 800c4c2:	d048      	beq.n	800c556 <_malloc_r+0xe6>
 800c4c4:	6823      	ldr	r3, [r4, #0]
 800c4c6:	4631      	mov	r1, r6
 800c4c8:	4638      	mov	r0, r7
 800c4ca:	eb04 0903 	add.w	r9, r4, r3
 800c4ce:	f000 f8d5 	bl	800c67c <_sbrk_r>
 800c4d2:	4581      	cmp	r9, r0
 800c4d4:	d13f      	bne.n	800c556 <_malloc_r+0xe6>
 800c4d6:	6821      	ldr	r1, [r4, #0]
 800c4d8:	4638      	mov	r0, r7
 800c4da:	1a6d      	subs	r5, r5, r1
 800c4dc:	4629      	mov	r1, r5
 800c4de:	f7ff ffa7 	bl	800c430 <sbrk_aligned>
 800c4e2:	3001      	adds	r0, #1
 800c4e4:	d037      	beq.n	800c556 <_malloc_r+0xe6>
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	442b      	add	r3, r5
 800c4ea:	6023      	str	r3, [r4, #0]
 800c4ec:	f8d8 3000 	ldr.w	r3, [r8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d038      	beq.n	800c566 <_malloc_r+0xf6>
 800c4f4:	685a      	ldr	r2, [r3, #4]
 800c4f6:	42a2      	cmp	r2, r4
 800c4f8:	d12b      	bne.n	800c552 <_malloc_r+0xe2>
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	605a      	str	r2, [r3, #4]
 800c4fe:	e00f      	b.n	800c520 <_malloc_r+0xb0>
 800c500:	6822      	ldr	r2, [r4, #0]
 800c502:	1b52      	subs	r2, r2, r5
 800c504:	d41f      	bmi.n	800c546 <_malloc_r+0xd6>
 800c506:	2a0b      	cmp	r2, #11
 800c508:	d917      	bls.n	800c53a <_malloc_r+0xca>
 800c50a:	1961      	adds	r1, r4, r5
 800c50c:	42a3      	cmp	r3, r4
 800c50e:	6025      	str	r5, [r4, #0]
 800c510:	bf18      	it	ne
 800c512:	6059      	strne	r1, [r3, #4]
 800c514:	6863      	ldr	r3, [r4, #4]
 800c516:	bf08      	it	eq
 800c518:	f8c8 1000 	streq.w	r1, [r8]
 800c51c:	5162      	str	r2, [r4, r5]
 800c51e:	604b      	str	r3, [r1, #4]
 800c520:	4638      	mov	r0, r7
 800c522:	f104 060b 	add.w	r6, r4, #11
 800c526:	f000 f829 	bl	800c57c <__malloc_unlock>
 800c52a:	f026 0607 	bic.w	r6, r6, #7
 800c52e:	1d23      	adds	r3, r4, #4
 800c530:	1af2      	subs	r2, r6, r3
 800c532:	d0ae      	beq.n	800c492 <_malloc_r+0x22>
 800c534:	1b9b      	subs	r3, r3, r6
 800c536:	50a3      	str	r3, [r4, r2]
 800c538:	e7ab      	b.n	800c492 <_malloc_r+0x22>
 800c53a:	42a3      	cmp	r3, r4
 800c53c:	6862      	ldr	r2, [r4, #4]
 800c53e:	d1dd      	bne.n	800c4fc <_malloc_r+0x8c>
 800c540:	f8c8 2000 	str.w	r2, [r8]
 800c544:	e7ec      	b.n	800c520 <_malloc_r+0xb0>
 800c546:	4623      	mov	r3, r4
 800c548:	6864      	ldr	r4, [r4, #4]
 800c54a:	e7ac      	b.n	800c4a6 <_malloc_r+0x36>
 800c54c:	4634      	mov	r4, r6
 800c54e:	6876      	ldr	r6, [r6, #4]
 800c550:	e7b4      	b.n	800c4bc <_malloc_r+0x4c>
 800c552:	4613      	mov	r3, r2
 800c554:	e7cc      	b.n	800c4f0 <_malloc_r+0x80>
 800c556:	230c      	movs	r3, #12
 800c558:	4638      	mov	r0, r7
 800c55a:	603b      	str	r3, [r7, #0]
 800c55c:	f000 f80e 	bl	800c57c <__malloc_unlock>
 800c560:	e797      	b.n	800c492 <_malloc_r+0x22>
 800c562:	6025      	str	r5, [r4, #0]
 800c564:	e7dc      	b.n	800c520 <_malloc_r+0xb0>
 800c566:	605b      	str	r3, [r3, #4]
 800c568:	deff      	udf	#255	; 0xff
 800c56a:	bf00      	nop
 800c56c:	20000460 	.word	0x20000460

0800c570 <__malloc_lock>:
 800c570:	4801      	ldr	r0, [pc, #4]	; (800c578 <__malloc_lock+0x8>)
 800c572:	f000 b8bd 	b.w	800c6f0 <__retarget_lock_acquire_recursive>
 800c576:	bf00      	nop
 800c578:	200005a4 	.word	0x200005a4

0800c57c <__malloc_unlock>:
 800c57c:	4801      	ldr	r0, [pc, #4]	; (800c584 <__malloc_unlock+0x8>)
 800c57e:	f000 b8b8 	b.w	800c6f2 <__retarget_lock_release_recursive>
 800c582:	bf00      	nop
 800c584:	200005a4 	.word	0x200005a4

0800c588 <__utoa>:
 800c588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c58a:	b08b      	sub	sp, #44	; 0x2c
 800c58c:	4605      	mov	r5, r0
 800c58e:	460b      	mov	r3, r1
 800c590:	466e      	mov	r6, sp
 800c592:	4c1d      	ldr	r4, [pc, #116]	; (800c608 <__utoa+0x80>)
 800c594:	f104 0c20 	add.w	ip, r4, #32
 800c598:	4637      	mov	r7, r6
 800c59a:	6820      	ldr	r0, [r4, #0]
 800c59c:	6861      	ldr	r1, [r4, #4]
 800c59e:	3408      	adds	r4, #8
 800c5a0:	c703      	stmia	r7!, {r0, r1}
 800c5a2:	4564      	cmp	r4, ip
 800c5a4:	463e      	mov	r6, r7
 800c5a6:	d1f7      	bne.n	800c598 <__utoa+0x10>
 800c5a8:	7921      	ldrb	r1, [r4, #4]
 800c5aa:	6820      	ldr	r0, [r4, #0]
 800c5ac:	7139      	strb	r1, [r7, #4]
 800c5ae:	1e91      	subs	r1, r2, #2
 800c5b0:	2922      	cmp	r1, #34	; 0x22
 800c5b2:	6038      	str	r0, [r7, #0]
 800c5b4:	f04f 0100 	mov.w	r1, #0
 800c5b8:	d904      	bls.n	800c5c4 <__utoa+0x3c>
 800c5ba:	7019      	strb	r1, [r3, #0]
 800c5bc:	460b      	mov	r3, r1
 800c5be:	4618      	mov	r0, r3
 800c5c0:	b00b      	add	sp, #44	; 0x2c
 800c5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5c4:	1e58      	subs	r0, r3, #1
 800c5c6:	4684      	mov	ip, r0
 800c5c8:	fbb5 f7f2 	udiv	r7, r5, r2
 800c5cc:	fb02 5617 	mls	r6, r2, r7, r5
 800c5d0:	3628      	adds	r6, #40	; 0x28
 800c5d2:	446e      	add	r6, sp
 800c5d4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c5d8:	460c      	mov	r4, r1
 800c5da:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c5de:	462e      	mov	r6, r5
 800c5e0:	42b2      	cmp	r2, r6
 800c5e2:	463d      	mov	r5, r7
 800c5e4:	f101 0101 	add.w	r1, r1, #1
 800c5e8:	d9ee      	bls.n	800c5c8 <__utoa+0x40>
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	545a      	strb	r2, [r3, r1]
 800c5ee:	1919      	adds	r1, r3, r4
 800c5f0:	1aa5      	subs	r5, r4, r2
 800c5f2:	42aa      	cmp	r2, r5
 800c5f4:	dae3      	bge.n	800c5be <__utoa+0x36>
 800c5f6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c5fa:	780e      	ldrb	r6, [r1, #0]
 800c5fc:	3201      	adds	r2, #1
 800c5fe:	7006      	strb	r6, [r0, #0]
 800c600:	f801 5901 	strb.w	r5, [r1], #-1
 800c604:	e7f4      	b.n	800c5f0 <__utoa+0x68>
 800c606:	bf00      	nop
 800c608:	0800de1a 	.word	0x0800de1a

0800c60c <siprintf>:
 800c60c:	b40e      	push	{r1, r2, r3}
 800c60e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c612:	b500      	push	{lr}
 800c614:	b09c      	sub	sp, #112	; 0x70
 800c616:	ab1d      	add	r3, sp, #116	; 0x74
 800c618:	9002      	str	r0, [sp, #8]
 800c61a:	9006      	str	r0, [sp, #24]
 800c61c:	9107      	str	r1, [sp, #28]
 800c61e:	9104      	str	r1, [sp, #16]
 800c620:	4808      	ldr	r0, [pc, #32]	; (800c644 <siprintf+0x38>)
 800c622:	4909      	ldr	r1, [pc, #36]	; (800c648 <siprintf+0x3c>)
 800c624:	f853 2b04 	ldr.w	r2, [r3], #4
 800c628:	9105      	str	r1, [sp, #20]
 800c62a:	6800      	ldr	r0, [r0, #0]
 800c62c:	a902      	add	r1, sp, #8
 800c62e:	9301      	str	r3, [sp, #4]
 800c630:	f000 f90a 	bl	800c848 <_svfiprintf_r>
 800c634:	2200      	movs	r2, #0
 800c636:	9b02      	ldr	r3, [sp, #8]
 800c638:	701a      	strb	r2, [r3, #0]
 800c63a:	b01c      	add	sp, #112	; 0x70
 800c63c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c640:	b003      	add	sp, #12
 800c642:	4770      	bx	lr
 800c644:	200000f8 	.word	0x200000f8
 800c648:	ffff0208 	.word	0xffff0208

0800c64c <memset>:
 800c64c:	4603      	mov	r3, r0
 800c64e:	4402      	add	r2, r0
 800c650:	4293      	cmp	r3, r2
 800c652:	d100      	bne.n	800c656 <memset+0xa>
 800c654:	4770      	bx	lr
 800c656:	f803 1b01 	strb.w	r1, [r3], #1
 800c65a:	e7f9      	b.n	800c650 <memset+0x4>

0800c65c <strcat>:
 800c65c:	4602      	mov	r2, r0
 800c65e:	b510      	push	{r4, lr}
 800c660:	7814      	ldrb	r4, [r2, #0]
 800c662:	4613      	mov	r3, r2
 800c664:	3201      	adds	r2, #1
 800c666:	2c00      	cmp	r4, #0
 800c668:	d1fa      	bne.n	800c660 <strcat+0x4>
 800c66a:	3b01      	subs	r3, #1
 800c66c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c670:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c674:	2a00      	cmp	r2, #0
 800c676:	d1f9      	bne.n	800c66c <strcat+0x10>
 800c678:	bd10      	pop	{r4, pc}
	...

0800c67c <_sbrk_r>:
 800c67c:	b538      	push	{r3, r4, r5, lr}
 800c67e:	2300      	movs	r3, #0
 800c680:	4d05      	ldr	r5, [pc, #20]	; (800c698 <_sbrk_r+0x1c>)
 800c682:	4604      	mov	r4, r0
 800c684:	4608      	mov	r0, r1
 800c686:	602b      	str	r3, [r5, #0]
 800c688:	f7fc f808 	bl	800869c <_sbrk>
 800c68c:	1c43      	adds	r3, r0, #1
 800c68e:	d102      	bne.n	800c696 <_sbrk_r+0x1a>
 800c690:	682b      	ldr	r3, [r5, #0]
 800c692:	b103      	cbz	r3, 800c696 <_sbrk_r+0x1a>
 800c694:	6023      	str	r3, [r4, #0]
 800c696:	bd38      	pop	{r3, r4, r5, pc}
 800c698:	200005a0 	.word	0x200005a0

0800c69c <__errno>:
 800c69c:	4b01      	ldr	r3, [pc, #4]	; (800c6a4 <__errno+0x8>)
 800c69e:	6818      	ldr	r0, [r3, #0]
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	200000f8 	.word	0x200000f8

0800c6a8 <__libc_init_array>:
 800c6a8:	b570      	push	{r4, r5, r6, lr}
 800c6aa:	2600      	movs	r6, #0
 800c6ac:	4d0c      	ldr	r5, [pc, #48]	; (800c6e0 <__libc_init_array+0x38>)
 800c6ae:	4c0d      	ldr	r4, [pc, #52]	; (800c6e4 <__libc_init_array+0x3c>)
 800c6b0:	1b64      	subs	r4, r4, r5
 800c6b2:	10a4      	asrs	r4, r4, #2
 800c6b4:	42a6      	cmp	r6, r4
 800c6b6:	d109      	bne.n	800c6cc <__libc_init_array+0x24>
 800c6b8:	f000 fbc6 	bl	800ce48 <_init>
 800c6bc:	2600      	movs	r6, #0
 800c6be:	4d0a      	ldr	r5, [pc, #40]	; (800c6e8 <__libc_init_array+0x40>)
 800c6c0:	4c0a      	ldr	r4, [pc, #40]	; (800c6ec <__libc_init_array+0x44>)
 800c6c2:	1b64      	subs	r4, r4, r5
 800c6c4:	10a4      	asrs	r4, r4, #2
 800c6c6:	42a6      	cmp	r6, r4
 800c6c8:	d105      	bne.n	800c6d6 <__libc_init_array+0x2e>
 800c6ca:	bd70      	pop	{r4, r5, r6, pc}
 800c6cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6d0:	4798      	blx	r3
 800c6d2:	3601      	adds	r6, #1
 800c6d4:	e7ee      	b.n	800c6b4 <__libc_init_array+0xc>
 800c6d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6da:	4798      	blx	r3
 800c6dc:	3601      	adds	r6, #1
 800c6de:	e7f2      	b.n	800c6c6 <__libc_init_array+0x1e>
 800c6e0:	0800de74 	.word	0x0800de74
 800c6e4:	0800de74 	.word	0x0800de74
 800c6e8:	0800de74 	.word	0x0800de74
 800c6ec:	0800de78 	.word	0x0800de78

0800c6f0 <__retarget_lock_acquire_recursive>:
 800c6f0:	4770      	bx	lr

0800c6f2 <__retarget_lock_release_recursive>:
 800c6f2:	4770      	bx	lr

0800c6f4 <strcpy>:
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6fa:	f803 2b01 	strb.w	r2, [r3], #1
 800c6fe:	2a00      	cmp	r2, #0
 800c700:	d1f9      	bne.n	800c6f6 <strcpy+0x2>
 800c702:	4770      	bx	lr

0800c704 <_free_r>:
 800c704:	b538      	push	{r3, r4, r5, lr}
 800c706:	4605      	mov	r5, r0
 800c708:	2900      	cmp	r1, #0
 800c70a:	d040      	beq.n	800c78e <_free_r+0x8a>
 800c70c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c710:	1f0c      	subs	r4, r1, #4
 800c712:	2b00      	cmp	r3, #0
 800c714:	bfb8      	it	lt
 800c716:	18e4      	addlt	r4, r4, r3
 800c718:	f7ff ff2a 	bl	800c570 <__malloc_lock>
 800c71c:	4a1c      	ldr	r2, [pc, #112]	; (800c790 <_free_r+0x8c>)
 800c71e:	6813      	ldr	r3, [r2, #0]
 800c720:	b933      	cbnz	r3, 800c730 <_free_r+0x2c>
 800c722:	6063      	str	r3, [r4, #4]
 800c724:	6014      	str	r4, [r2, #0]
 800c726:	4628      	mov	r0, r5
 800c728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c72c:	f7ff bf26 	b.w	800c57c <__malloc_unlock>
 800c730:	42a3      	cmp	r3, r4
 800c732:	d908      	bls.n	800c746 <_free_r+0x42>
 800c734:	6820      	ldr	r0, [r4, #0]
 800c736:	1821      	adds	r1, r4, r0
 800c738:	428b      	cmp	r3, r1
 800c73a:	bf01      	itttt	eq
 800c73c:	6819      	ldreq	r1, [r3, #0]
 800c73e:	685b      	ldreq	r3, [r3, #4]
 800c740:	1809      	addeq	r1, r1, r0
 800c742:	6021      	streq	r1, [r4, #0]
 800c744:	e7ed      	b.n	800c722 <_free_r+0x1e>
 800c746:	461a      	mov	r2, r3
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	b10b      	cbz	r3, 800c750 <_free_r+0x4c>
 800c74c:	42a3      	cmp	r3, r4
 800c74e:	d9fa      	bls.n	800c746 <_free_r+0x42>
 800c750:	6811      	ldr	r1, [r2, #0]
 800c752:	1850      	adds	r0, r2, r1
 800c754:	42a0      	cmp	r0, r4
 800c756:	d10b      	bne.n	800c770 <_free_r+0x6c>
 800c758:	6820      	ldr	r0, [r4, #0]
 800c75a:	4401      	add	r1, r0
 800c75c:	1850      	adds	r0, r2, r1
 800c75e:	4283      	cmp	r3, r0
 800c760:	6011      	str	r1, [r2, #0]
 800c762:	d1e0      	bne.n	800c726 <_free_r+0x22>
 800c764:	6818      	ldr	r0, [r3, #0]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	4408      	add	r0, r1
 800c76a:	6010      	str	r0, [r2, #0]
 800c76c:	6053      	str	r3, [r2, #4]
 800c76e:	e7da      	b.n	800c726 <_free_r+0x22>
 800c770:	d902      	bls.n	800c778 <_free_r+0x74>
 800c772:	230c      	movs	r3, #12
 800c774:	602b      	str	r3, [r5, #0]
 800c776:	e7d6      	b.n	800c726 <_free_r+0x22>
 800c778:	6820      	ldr	r0, [r4, #0]
 800c77a:	1821      	adds	r1, r4, r0
 800c77c:	428b      	cmp	r3, r1
 800c77e:	bf01      	itttt	eq
 800c780:	6819      	ldreq	r1, [r3, #0]
 800c782:	685b      	ldreq	r3, [r3, #4]
 800c784:	1809      	addeq	r1, r1, r0
 800c786:	6021      	streq	r1, [r4, #0]
 800c788:	6063      	str	r3, [r4, #4]
 800c78a:	6054      	str	r4, [r2, #4]
 800c78c:	e7cb      	b.n	800c726 <_free_r+0x22>
 800c78e:	bd38      	pop	{r3, r4, r5, pc}
 800c790:	20000460 	.word	0x20000460

0800c794 <__ssputs_r>:
 800c794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c798:	461f      	mov	r7, r3
 800c79a:	688e      	ldr	r6, [r1, #8]
 800c79c:	4682      	mov	sl, r0
 800c79e:	42be      	cmp	r6, r7
 800c7a0:	460c      	mov	r4, r1
 800c7a2:	4690      	mov	r8, r2
 800c7a4:	680b      	ldr	r3, [r1, #0]
 800c7a6:	d82c      	bhi.n	800c802 <__ssputs_r+0x6e>
 800c7a8:	898a      	ldrh	r2, [r1, #12]
 800c7aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7ae:	d026      	beq.n	800c7fe <__ssputs_r+0x6a>
 800c7b0:	6965      	ldr	r5, [r4, #20]
 800c7b2:	6909      	ldr	r1, [r1, #16]
 800c7b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7b8:	eba3 0901 	sub.w	r9, r3, r1
 800c7bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7c0:	1c7b      	adds	r3, r7, #1
 800c7c2:	444b      	add	r3, r9
 800c7c4:	106d      	asrs	r5, r5, #1
 800c7c6:	429d      	cmp	r5, r3
 800c7c8:	bf38      	it	cc
 800c7ca:	461d      	movcc	r5, r3
 800c7cc:	0553      	lsls	r3, r2, #21
 800c7ce:	d527      	bpl.n	800c820 <__ssputs_r+0x8c>
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	f7ff fe4d 	bl	800c470 <_malloc_r>
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	b360      	cbz	r0, 800c834 <__ssputs_r+0xa0>
 800c7da:	464a      	mov	r2, r9
 800c7dc:	6921      	ldr	r1, [r4, #16]
 800c7de:	f000 faed 	bl	800cdbc <memcpy>
 800c7e2:	89a3      	ldrh	r3, [r4, #12]
 800c7e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7ec:	81a3      	strh	r3, [r4, #12]
 800c7ee:	6126      	str	r6, [r4, #16]
 800c7f0:	444e      	add	r6, r9
 800c7f2:	6026      	str	r6, [r4, #0]
 800c7f4:	463e      	mov	r6, r7
 800c7f6:	6165      	str	r5, [r4, #20]
 800c7f8:	eba5 0509 	sub.w	r5, r5, r9
 800c7fc:	60a5      	str	r5, [r4, #8]
 800c7fe:	42be      	cmp	r6, r7
 800c800:	d900      	bls.n	800c804 <__ssputs_r+0x70>
 800c802:	463e      	mov	r6, r7
 800c804:	4632      	mov	r2, r6
 800c806:	4641      	mov	r1, r8
 800c808:	6820      	ldr	r0, [r4, #0]
 800c80a:	f000 faaf 	bl	800cd6c <memmove>
 800c80e:	2000      	movs	r0, #0
 800c810:	68a3      	ldr	r3, [r4, #8]
 800c812:	1b9b      	subs	r3, r3, r6
 800c814:	60a3      	str	r3, [r4, #8]
 800c816:	6823      	ldr	r3, [r4, #0]
 800c818:	4433      	add	r3, r6
 800c81a:	6023      	str	r3, [r4, #0]
 800c81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c820:	462a      	mov	r2, r5
 800c822:	f000 fad9 	bl	800cdd8 <_realloc_r>
 800c826:	4606      	mov	r6, r0
 800c828:	2800      	cmp	r0, #0
 800c82a:	d1e0      	bne.n	800c7ee <__ssputs_r+0x5a>
 800c82c:	4650      	mov	r0, sl
 800c82e:	6921      	ldr	r1, [r4, #16]
 800c830:	f7ff ff68 	bl	800c704 <_free_r>
 800c834:	230c      	movs	r3, #12
 800c836:	f8ca 3000 	str.w	r3, [sl]
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	f04f 30ff 	mov.w	r0, #4294967295
 800c840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	e7e9      	b.n	800c81c <__ssputs_r+0x88>

0800c848 <_svfiprintf_r>:
 800c848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84c:	4698      	mov	r8, r3
 800c84e:	898b      	ldrh	r3, [r1, #12]
 800c850:	4607      	mov	r7, r0
 800c852:	061b      	lsls	r3, r3, #24
 800c854:	460d      	mov	r5, r1
 800c856:	4614      	mov	r4, r2
 800c858:	b09d      	sub	sp, #116	; 0x74
 800c85a:	d50e      	bpl.n	800c87a <_svfiprintf_r+0x32>
 800c85c:	690b      	ldr	r3, [r1, #16]
 800c85e:	b963      	cbnz	r3, 800c87a <_svfiprintf_r+0x32>
 800c860:	2140      	movs	r1, #64	; 0x40
 800c862:	f7ff fe05 	bl	800c470 <_malloc_r>
 800c866:	6028      	str	r0, [r5, #0]
 800c868:	6128      	str	r0, [r5, #16]
 800c86a:	b920      	cbnz	r0, 800c876 <_svfiprintf_r+0x2e>
 800c86c:	230c      	movs	r3, #12
 800c86e:	603b      	str	r3, [r7, #0]
 800c870:	f04f 30ff 	mov.w	r0, #4294967295
 800c874:	e0d0      	b.n	800ca18 <_svfiprintf_r+0x1d0>
 800c876:	2340      	movs	r3, #64	; 0x40
 800c878:	616b      	str	r3, [r5, #20]
 800c87a:	2300      	movs	r3, #0
 800c87c:	9309      	str	r3, [sp, #36]	; 0x24
 800c87e:	2320      	movs	r3, #32
 800c880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c884:	2330      	movs	r3, #48	; 0x30
 800c886:	f04f 0901 	mov.w	r9, #1
 800c88a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c88e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ca30 <_svfiprintf_r+0x1e8>
 800c892:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c896:	4623      	mov	r3, r4
 800c898:	469a      	mov	sl, r3
 800c89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c89e:	b10a      	cbz	r2, 800c8a4 <_svfiprintf_r+0x5c>
 800c8a0:	2a25      	cmp	r2, #37	; 0x25
 800c8a2:	d1f9      	bne.n	800c898 <_svfiprintf_r+0x50>
 800c8a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c8a8:	d00b      	beq.n	800c8c2 <_svfiprintf_r+0x7a>
 800c8aa:	465b      	mov	r3, fp
 800c8ac:	4622      	mov	r2, r4
 800c8ae:	4629      	mov	r1, r5
 800c8b0:	4638      	mov	r0, r7
 800c8b2:	f7ff ff6f 	bl	800c794 <__ssputs_r>
 800c8b6:	3001      	adds	r0, #1
 800c8b8:	f000 80a9 	beq.w	800ca0e <_svfiprintf_r+0x1c6>
 800c8bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8be:	445a      	add	r2, fp
 800c8c0:	9209      	str	r2, [sp, #36]	; 0x24
 800c8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f000 80a1 	beq.w	800ca0e <_svfiprintf_r+0x1c6>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8d6:	f10a 0a01 	add.w	sl, sl, #1
 800c8da:	9304      	str	r3, [sp, #16]
 800c8dc:	9307      	str	r3, [sp, #28]
 800c8de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8e2:	931a      	str	r3, [sp, #104]	; 0x68
 800c8e4:	4654      	mov	r4, sl
 800c8e6:	2205      	movs	r2, #5
 800c8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8ec:	4850      	ldr	r0, [pc, #320]	; (800ca30 <_svfiprintf_r+0x1e8>)
 800c8ee:	f000 fa57 	bl	800cda0 <memchr>
 800c8f2:	9a04      	ldr	r2, [sp, #16]
 800c8f4:	b9d8      	cbnz	r0, 800c92e <_svfiprintf_r+0xe6>
 800c8f6:	06d0      	lsls	r0, r2, #27
 800c8f8:	bf44      	itt	mi
 800c8fa:	2320      	movmi	r3, #32
 800c8fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c900:	0711      	lsls	r1, r2, #28
 800c902:	bf44      	itt	mi
 800c904:	232b      	movmi	r3, #43	; 0x2b
 800c906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c90a:	f89a 3000 	ldrb.w	r3, [sl]
 800c90e:	2b2a      	cmp	r3, #42	; 0x2a
 800c910:	d015      	beq.n	800c93e <_svfiprintf_r+0xf6>
 800c912:	4654      	mov	r4, sl
 800c914:	2000      	movs	r0, #0
 800c916:	f04f 0c0a 	mov.w	ip, #10
 800c91a:	9a07      	ldr	r2, [sp, #28]
 800c91c:	4621      	mov	r1, r4
 800c91e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c922:	3b30      	subs	r3, #48	; 0x30
 800c924:	2b09      	cmp	r3, #9
 800c926:	d94d      	bls.n	800c9c4 <_svfiprintf_r+0x17c>
 800c928:	b1b0      	cbz	r0, 800c958 <_svfiprintf_r+0x110>
 800c92a:	9207      	str	r2, [sp, #28]
 800c92c:	e014      	b.n	800c958 <_svfiprintf_r+0x110>
 800c92e:	eba0 0308 	sub.w	r3, r0, r8
 800c932:	fa09 f303 	lsl.w	r3, r9, r3
 800c936:	4313      	orrs	r3, r2
 800c938:	46a2      	mov	sl, r4
 800c93a:	9304      	str	r3, [sp, #16]
 800c93c:	e7d2      	b.n	800c8e4 <_svfiprintf_r+0x9c>
 800c93e:	9b03      	ldr	r3, [sp, #12]
 800c940:	1d19      	adds	r1, r3, #4
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	9103      	str	r1, [sp, #12]
 800c946:	2b00      	cmp	r3, #0
 800c948:	bfbb      	ittet	lt
 800c94a:	425b      	neglt	r3, r3
 800c94c:	f042 0202 	orrlt.w	r2, r2, #2
 800c950:	9307      	strge	r3, [sp, #28]
 800c952:	9307      	strlt	r3, [sp, #28]
 800c954:	bfb8      	it	lt
 800c956:	9204      	strlt	r2, [sp, #16]
 800c958:	7823      	ldrb	r3, [r4, #0]
 800c95a:	2b2e      	cmp	r3, #46	; 0x2e
 800c95c:	d10c      	bne.n	800c978 <_svfiprintf_r+0x130>
 800c95e:	7863      	ldrb	r3, [r4, #1]
 800c960:	2b2a      	cmp	r3, #42	; 0x2a
 800c962:	d134      	bne.n	800c9ce <_svfiprintf_r+0x186>
 800c964:	9b03      	ldr	r3, [sp, #12]
 800c966:	3402      	adds	r4, #2
 800c968:	1d1a      	adds	r2, r3, #4
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	9203      	str	r2, [sp, #12]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	bfb8      	it	lt
 800c972:	f04f 33ff 	movlt.w	r3, #4294967295
 800c976:	9305      	str	r3, [sp, #20]
 800c978:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ca34 <_svfiprintf_r+0x1ec>
 800c97c:	2203      	movs	r2, #3
 800c97e:	4650      	mov	r0, sl
 800c980:	7821      	ldrb	r1, [r4, #0]
 800c982:	f000 fa0d 	bl	800cda0 <memchr>
 800c986:	b138      	cbz	r0, 800c998 <_svfiprintf_r+0x150>
 800c988:	2240      	movs	r2, #64	; 0x40
 800c98a:	9b04      	ldr	r3, [sp, #16]
 800c98c:	eba0 000a 	sub.w	r0, r0, sl
 800c990:	4082      	lsls	r2, r0
 800c992:	4313      	orrs	r3, r2
 800c994:	3401      	adds	r4, #1
 800c996:	9304      	str	r3, [sp, #16]
 800c998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c99c:	2206      	movs	r2, #6
 800c99e:	4826      	ldr	r0, [pc, #152]	; (800ca38 <_svfiprintf_r+0x1f0>)
 800c9a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9a4:	f000 f9fc 	bl	800cda0 <memchr>
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	d038      	beq.n	800ca1e <_svfiprintf_r+0x1d6>
 800c9ac:	4b23      	ldr	r3, [pc, #140]	; (800ca3c <_svfiprintf_r+0x1f4>)
 800c9ae:	bb1b      	cbnz	r3, 800c9f8 <_svfiprintf_r+0x1b0>
 800c9b0:	9b03      	ldr	r3, [sp, #12]
 800c9b2:	3307      	adds	r3, #7
 800c9b4:	f023 0307 	bic.w	r3, r3, #7
 800c9b8:	3308      	adds	r3, #8
 800c9ba:	9303      	str	r3, [sp, #12]
 800c9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9be:	4433      	add	r3, r6
 800c9c0:	9309      	str	r3, [sp, #36]	; 0x24
 800c9c2:	e768      	b.n	800c896 <_svfiprintf_r+0x4e>
 800c9c4:	460c      	mov	r4, r1
 800c9c6:	2001      	movs	r0, #1
 800c9c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9cc:	e7a6      	b.n	800c91c <_svfiprintf_r+0xd4>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f04f 0c0a 	mov.w	ip, #10
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	3401      	adds	r4, #1
 800c9d8:	9305      	str	r3, [sp, #20]
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9e0:	3a30      	subs	r2, #48	; 0x30
 800c9e2:	2a09      	cmp	r2, #9
 800c9e4:	d903      	bls.n	800c9ee <_svfiprintf_r+0x1a6>
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d0c6      	beq.n	800c978 <_svfiprintf_r+0x130>
 800c9ea:	9105      	str	r1, [sp, #20]
 800c9ec:	e7c4      	b.n	800c978 <_svfiprintf_r+0x130>
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9f6:	e7f0      	b.n	800c9da <_svfiprintf_r+0x192>
 800c9f8:	ab03      	add	r3, sp, #12
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	462a      	mov	r2, r5
 800c9fe:	4638      	mov	r0, r7
 800ca00:	4b0f      	ldr	r3, [pc, #60]	; (800ca40 <_svfiprintf_r+0x1f8>)
 800ca02:	a904      	add	r1, sp, #16
 800ca04:	f3af 8000 	nop.w
 800ca08:	1c42      	adds	r2, r0, #1
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	d1d6      	bne.n	800c9bc <_svfiprintf_r+0x174>
 800ca0e:	89ab      	ldrh	r3, [r5, #12]
 800ca10:	065b      	lsls	r3, r3, #25
 800ca12:	f53f af2d 	bmi.w	800c870 <_svfiprintf_r+0x28>
 800ca16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca18:	b01d      	add	sp, #116	; 0x74
 800ca1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1e:	ab03      	add	r3, sp, #12
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	462a      	mov	r2, r5
 800ca24:	4638      	mov	r0, r7
 800ca26:	4b06      	ldr	r3, [pc, #24]	; (800ca40 <_svfiprintf_r+0x1f8>)
 800ca28:	a904      	add	r1, sp, #16
 800ca2a:	f000 f87d 	bl	800cb28 <_printf_i>
 800ca2e:	e7eb      	b.n	800ca08 <_svfiprintf_r+0x1c0>
 800ca30:	0800de3f 	.word	0x0800de3f
 800ca34:	0800de45 	.word	0x0800de45
 800ca38:	0800de49 	.word	0x0800de49
 800ca3c:	00000000 	.word	0x00000000
 800ca40:	0800c795 	.word	0x0800c795

0800ca44 <_printf_common>:
 800ca44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca48:	4616      	mov	r6, r2
 800ca4a:	4699      	mov	r9, r3
 800ca4c:	688a      	ldr	r2, [r1, #8]
 800ca4e:	690b      	ldr	r3, [r1, #16]
 800ca50:	4607      	mov	r7, r0
 800ca52:	4293      	cmp	r3, r2
 800ca54:	bfb8      	it	lt
 800ca56:	4613      	movlt	r3, r2
 800ca58:	6033      	str	r3, [r6, #0]
 800ca5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca5e:	460c      	mov	r4, r1
 800ca60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca64:	b10a      	cbz	r2, 800ca6a <_printf_common+0x26>
 800ca66:	3301      	adds	r3, #1
 800ca68:	6033      	str	r3, [r6, #0]
 800ca6a:	6823      	ldr	r3, [r4, #0]
 800ca6c:	0699      	lsls	r1, r3, #26
 800ca6e:	bf42      	ittt	mi
 800ca70:	6833      	ldrmi	r3, [r6, #0]
 800ca72:	3302      	addmi	r3, #2
 800ca74:	6033      	strmi	r3, [r6, #0]
 800ca76:	6825      	ldr	r5, [r4, #0]
 800ca78:	f015 0506 	ands.w	r5, r5, #6
 800ca7c:	d106      	bne.n	800ca8c <_printf_common+0x48>
 800ca7e:	f104 0a19 	add.w	sl, r4, #25
 800ca82:	68e3      	ldr	r3, [r4, #12]
 800ca84:	6832      	ldr	r2, [r6, #0]
 800ca86:	1a9b      	subs	r3, r3, r2
 800ca88:	42ab      	cmp	r3, r5
 800ca8a:	dc2b      	bgt.n	800cae4 <_printf_common+0xa0>
 800ca8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca90:	1e13      	subs	r3, r2, #0
 800ca92:	6822      	ldr	r2, [r4, #0]
 800ca94:	bf18      	it	ne
 800ca96:	2301      	movne	r3, #1
 800ca98:	0692      	lsls	r2, r2, #26
 800ca9a:	d430      	bmi.n	800cafe <_printf_common+0xba>
 800ca9c:	4649      	mov	r1, r9
 800ca9e:	4638      	mov	r0, r7
 800caa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800caa4:	47c0      	blx	r8
 800caa6:	3001      	adds	r0, #1
 800caa8:	d023      	beq.n	800caf2 <_printf_common+0xae>
 800caaa:	6823      	ldr	r3, [r4, #0]
 800caac:	6922      	ldr	r2, [r4, #16]
 800caae:	f003 0306 	and.w	r3, r3, #6
 800cab2:	2b04      	cmp	r3, #4
 800cab4:	bf14      	ite	ne
 800cab6:	2500      	movne	r5, #0
 800cab8:	6833      	ldreq	r3, [r6, #0]
 800caba:	f04f 0600 	mov.w	r6, #0
 800cabe:	bf08      	it	eq
 800cac0:	68e5      	ldreq	r5, [r4, #12]
 800cac2:	f104 041a 	add.w	r4, r4, #26
 800cac6:	bf08      	it	eq
 800cac8:	1aed      	subeq	r5, r5, r3
 800caca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cace:	bf08      	it	eq
 800cad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cad4:	4293      	cmp	r3, r2
 800cad6:	bfc4      	itt	gt
 800cad8:	1a9b      	subgt	r3, r3, r2
 800cada:	18ed      	addgt	r5, r5, r3
 800cadc:	42b5      	cmp	r5, r6
 800cade:	d11a      	bne.n	800cb16 <_printf_common+0xd2>
 800cae0:	2000      	movs	r0, #0
 800cae2:	e008      	b.n	800caf6 <_printf_common+0xb2>
 800cae4:	2301      	movs	r3, #1
 800cae6:	4652      	mov	r2, sl
 800cae8:	4649      	mov	r1, r9
 800caea:	4638      	mov	r0, r7
 800caec:	47c0      	blx	r8
 800caee:	3001      	adds	r0, #1
 800caf0:	d103      	bne.n	800cafa <_printf_common+0xb6>
 800caf2:	f04f 30ff 	mov.w	r0, #4294967295
 800caf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cafa:	3501      	adds	r5, #1
 800cafc:	e7c1      	b.n	800ca82 <_printf_common+0x3e>
 800cafe:	2030      	movs	r0, #48	; 0x30
 800cb00:	18e1      	adds	r1, r4, r3
 800cb02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb06:	1c5a      	adds	r2, r3, #1
 800cb08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb0c:	4422      	add	r2, r4
 800cb0e:	3302      	adds	r3, #2
 800cb10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb14:	e7c2      	b.n	800ca9c <_printf_common+0x58>
 800cb16:	2301      	movs	r3, #1
 800cb18:	4622      	mov	r2, r4
 800cb1a:	4649      	mov	r1, r9
 800cb1c:	4638      	mov	r0, r7
 800cb1e:	47c0      	blx	r8
 800cb20:	3001      	adds	r0, #1
 800cb22:	d0e6      	beq.n	800caf2 <_printf_common+0xae>
 800cb24:	3601      	adds	r6, #1
 800cb26:	e7d9      	b.n	800cadc <_printf_common+0x98>

0800cb28 <_printf_i>:
 800cb28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb2c:	7e0f      	ldrb	r7, [r1, #24]
 800cb2e:	4691      	mov	r9, r2
 800cb30:	2f78      	cmp	r7, #120	; 0x78
 800cb32:	4680      	mov	r8, r0
 800cb34:	460c      	mov	r4, r1
 800cb36:	469a      	mov	sl, r3
 800cb38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb3e:	d807      	bhi.n	800cb50 <_printf_i+0x28>
 800cb40:	2f62      	cmp	r7, #98	; 0x62
 800cb42:	d80a      	bhi.n	800cb5a <_printf_i+0x32>
 800cb44:	2f00      	cmp	r7, #0
 800cb46:	f000 80d5 	beq.w	800ccf4 <_printf_i+0x1cc>
 800cb4a:	2f58      	cmp	r7, #88	; 0x58
 800cb4c:	f000 80c1 	beq.w	800ccd2 <_printf_i+0x1aa>
 800cb50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb58:	e03a      	b.n	800cbd0 <_printf_i+0xa8>
 800cb5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb5e:	2b15      	cmp	r3, #21
 800cb60:	d8f6      	bhi.n	800cb50 <_printf_i+0x28>
 800cb62:	a101      	add	r1, pc, #4	; (adr r1, 800cb68 <_printf_i+0x40>)
 800cb64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb68:	0800cbc1 	.word	0x0800cbc1
 800cb6c:	0800cbd5 	.word	0x0800cbd5
 800cb70:	0800cb51 	.word	0x0800cb51
 800cb74:	0800cb51 	.word	0x0800cb51
 800cb78:	0800cb51 	.word	0x0800cb51
 800cb7c:	0800cb51 	.word	0x0800cb51
 800cb80:	0800cbd5 	.word	0x0800cbd5
 800cb84:	0800cb51 	.word	0x0800cb51
 800cb88:	0800cb51 	.word	0x0800cb51
 800cb8c:	0800cb51 	.word	0x0800cb51
 800cb90:	0800cb51 	.word	0x0800cb51
 800cb94:	0800ccdb 	.word	0x0800ccdb
 800cb98:	0800cc01 	.word	0x0800cc01
 800cb9c:	0800cc95 	.word	0x0800cc95
 800cba0:	0800cb51 	.word	0x0800cb51
 800cba4:	0800cb51 	.word	0x0800cb51
 800cba8:	0800ccfd 	.word	0x0800ccfd
 800cbac:	0800cb51 	.word	0x0800cb51
 800cbb0:	0800cc01 	.word	0x0800cc01
 800cbb4:	0800cb51 	.word	0x0800cb51
 800cbb8:	0800cb51 	.word	0x0800cb51
 800cbbc:	0800cc9d 	.word	0x0800cc9d
 800cbc0:	682b      	ldr	r3, [r5, #0]
 800cbc2:	1d1a      	adds	r2, r3, #4
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	602a      	str	r2, [r5, #0]
 800cbc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e0a0      	b.n	800cd16 <_printf_i+0x1ee>
 800cbd4:	6820      	ldr	r0, [r4, #0]
 800cbd6:	682b      	ldr	r3, [r5, #0]
 800cbd8:	0607      	lsls	r7, r0, #24
 800cbda:	f103 0104 	add.w	r1, r3, #4
 800cbde:	6029      	str	r1, [r5, #0]
 800cbe0:	d501      	bpl.n	800cbe6 <_printf_i+0xbe>
 800cbe2:	681e      	ldr	r6, [r3, #0]
 800cbe4:	e003      	b.n	800cbee <_printf_i+0xc6>
 800cbe6:	0646      	lsls	r6, r0, #25
 800cbe8:	d5fb      	bpl.n	800cbe2 <_printf_i+0xba>
 800cbea:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cbee:	2e00      	cmp	r6, #0
 800cbf0:	da03      	bge.n	800cbfa <_printf_i+0xd2>
 800cbf2:	232d      	movs	r3, #45	; 0x2d
 800cbf4:	4276      	negs	r6, r6
 800cbf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbfa:	230a      	movs	r3, #10
 800cbfc:	4859      	ldr	r0, [pc, #356]	; (800cd64 <_printf_i+0x23c>)
 800cbfe:	e012      	b.n	800cc26 <_printf_i+0xfe>
 800cc00:	682b      	ldr	r3, [r5, #0]
 800cc02:	6820      	ldr	r0, [r4, #0]
 800cc04:	1d19      	adds	r1, r3, #4
 800cc06:	6029      	str	r1, [r5, #0]
 800cc08:	0605      	lsls	r5, r0, #24
 800cc0a:	d501      	bpl.n	800cc10 <_printf_i+0xe8>
 800cc0c:	681e      	ldr	r6, [r3, #0]
 800cc0e:	e002      	b.n	800cc16 <_printf_i+0xee>
 800cc10:	0641      	lsls	r1, r0, #25
 800cc12:	d5fb      	bpl.n	800cc0c <_printf_i+0xe4>
 800cc14:	881e      	ldrh	r6, [r3, #0]
 800cc16:	2f6f      	cmp	r7, #111	; 0x6f
 800cc18:	bf0c      	ite	eq
 800cc1a:	2308      	moveq	r3, #8
 800cc1c:	230a      	movne	r3, #10
 800cc1e:	4851      	ldr	r0, [pc, #324]	; (800cd64 <_printf_i+0x23c>)
 800cc20:	2100      	movs	r1, #0
 800cc22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc26:	6865      	ldr	r5, [r4, #4]
 800cc28:	2d00      	cmp	r5, #0
 800cc2a:	bfa8      	it	ge
 800cc2c:	6821      	ldrge	r1, [r4, #0]
 800cc2e:	60a5      	str	r5, [r4, #8]
 800cc30:	bfa4      	itt	ge
 800cc32:	f021 0104 	bicge.w	r1, r1, #4
 800cc36:	6021      	strge	r1, [r4, #0]
 800cc38:	b90e      	cbnz	r6, 800cc3e <_printf_i+0x116>
 800cc3a:	2d00      	cmp	r5, #0
 800cc3c:	d04b      	beq.n	800ccd6 <_printf_i+0x1ae>
 800cc3e:	4615      	mov	r5, r2
 800cc40:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc44:	fb03 6711 	mls	r7, r3, r1, r6
 800cc48:	5dc7      	ldrb	r7, [r0, r7]
 800cc4a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc4e:	4637      	mov	r7, r6
 800cc50:	42bb      	cmp	r3, r7
 800cc52:	460e      	mov	r6, r1
 800cc54:	d9f4      	bls.n	800cc40 <_printf_i+0x118>
 800cc56:	2b08      	cmp	r3, #8
 800cc58:	d10b      	bne.n	800cc72 <_printf_i+0x14a>
 800cc5a:	6823      	ldr	r3, [r4, #0]
 800cc5c:	07de      	lsls	r6, r3, #31
 800cc5e:	d508      	bpl.n	800cc72 <_printf_i+0x14a>
 800cc60:	6923      	ldr	r3, [r4, #16]
 800cc62:	6861      	ldr	r1, [r4, #4]
 800cc64:	4299      	cmp	r1, r3
 800cc66:	bfde      	ittt	le
 800cc68:	2330      	movle	r3, #48	; 0x30
 800cc6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc72:	1b52      	subs	r2, r2, r5
 800cc74:	6122      	str	r2, [r4, #16]
 800cc76:	464b      	mov	r3, r9
 800cc78:	4621      	mov	r1, r4
 800cc7a:	4640      	mov	r0, r8
 800cc7c:	f8cd a000 	str.w	sl, [sp]
 800cc80:	aa03      	add	r2, sp, #12
 800cc82:	f7ff fedf 	bl	800ca44 <_printf_common>
 800cc86:	3001      	adds	r0, #1
 800cc88:	d14a      	bne.n	800cd20 <_printf_i+0x1f8>
 800cc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8e:	b004      	add	sp, #16
 800cc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc94:	6823      	ldr	r3, [r4, #0]
 800cc96:	f043 0320 	orr.w	r3, r3, #32
 800cc9a:	6023      	str	r3, [r4, #0]
 800cc9c:	2778      	movs	r7, #120	; 0x78
 800cc9e:	4832      	ldr	r0, [pc, #200]	; (800cd68 <_printf_i+0x240>)
 800cca0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cca4:	6823      	ldr	r3, [r4, #0]
 800cca6:	6829      	ldr	r1, [r5, #0]
 800cca8:	061f      	lsls	r7, r3, #24
 800ccaa:	f851 6b04 	ldr.w	r6, [r1], #4
 800ccae:	d402      	bmi.n	800ccb6 <_printf_i+0x18e>
 800ccb0:	065f      	lsls	r7, r3, #25
 800ccb2:	bf48      	it	mi
 800ccb4:	b2b6      	uxthmi	r6, r6
 800ccb6:	07df      	lsls	r7, r3, #31
 800ccb8:	bf48      	it	mi
 800ccba:	f043 0320 	orrmi.w	r3, r3, #32
 800ccbe:	6029      	str	r1, [r5, #0]
 800ccc0:	bf48      	it	mi
 800ccc2:	6023      	strmi	r3, [r4, #0]
 800ccc4:	b91e      	cbnz	r6, 800ccce <_printf_i+0x1a6>
 800ccc6:	6823      	ldr	r3, [r4, #0]
 800ccc8:	f023 0320 	bic.w	r3, r3, #32
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	2310      	movs	r3, #16
 800ccd0:	e7a6      	b.n	800cc20 <_printf_i+0xf8>
 800ccd2:	4824      	ldr	r0, [pc, #144]	; (800cd64 <_printf_i+0x23c>)
 800ccd4:	e7e4      	b.n	800cca0 <_printf_i+0x178>
 800ccd6:	4615      	mov	r5, r2
 800ccd8:	e7bd      	b.n	800cc56 <_printf_i+0x12e>
 800ccda:	682b      	ldr	r3, [r5, #0]
 800ccdc:	6826      	ldr	r6, [r4, #0]
 800ccde:	1d18      	adds	r0, r3, #4
 800cce0:	6961      	ldr	r1, [r4, #20]
 800cce2:	6028      	str	r0, [r5, #0]
 800cce4:	0635      	lsls	r5, r6, #24
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	d501      	bpl.n	800ccee <_printf_i+0x1c6>
 800ccea:	6019      	str	r1, [r3, #0]
 800ccec:	e002      	b.n	800ccf4 <_printf_i+0x1cc>
 800ccee:	0670      	lsls	r0, r6, #25
 800ccf0:	d5fb      	bpl.n	800ccea <_printf_i+0x1c2>
 800ccf2:	8019      	strh	r1, [r3, #0]
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	4615      	mov	r5, r2
 800ccf8:	6123      	str	r3, [r4, #16]
 800ccfa:	e7bc      	b.n	800cc76 <_printf_i+0x14e>
 800ccfc:	682b      	ldr	r3, [r5, #0]
 800ccfe:	2100      	movs	r1, #0
 800cd00:	1d1a      	adds	r2, r3, #4
 800cd02:	602a      	str	r2, [r5, #0]
 800cd04:	681d      	ldr	r5, [r3, #0]
 800cd06:	6862      	ldr	r2, [r4, #4]
 800cd08:	4628      	mov	r0, r5
 800cd0a:	f000 f849 	bl	800cda0 <memchr>
 800cd0e:	b108      	cbz	r0, 800cd14 <_printf_i+0x1ec>
 800cd10:	1b40      	subs	r0, r0, r5
 800cd12:	6060      	str	r0, [r4, #4]
 800cd14:	6863      	ldr	r3, [r4, #4]
 800cd16:	6123      	str	r3, [r4, #16]
 800cd18:	2300      	movs	r3, #0
 800cd1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd1e:	e7aa      	b.n	800cc76 <_printf_i+0x14e>
 800cd20:	462a      	mov	r2, r5
 800cd22:	4649      	mov	r1, r9
 800cd24:	4640      	mov	r0, r8
 800cd26:	6923      	ldr	r3, [r4, #16]
 800cd28:	47d0      	blx	sl
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	d0ad      	beq.n	800cc8a <_printf_i+0x162>
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	079b      	lsls	r3, r3, #30
 800cd32:	d413      	bmi.n	800cd5c <_printf_i+0x234>
 800cd34:	68e0      	ldr	r0, [r4, #12]
 800cd36:	9b03      	ldr	r3, [sp, #12]
 800cd38:	4298      	cmp	r0, r3
 800cd3a:	bfb8      	it	lt
 800cd3c:	4618      	movlt	r0, r3
 800cd3e:	e7a6      	b.n	800cc8e <_printf_i+0x166>
 800cd40:	2301      	movs	r3, #1
 800cd42:	4632      	mov	r2, r6
 800cd44:	4649      	mov	r1, r9
 800cd46:	4640      	mov	r0, r8
 800cd48:	47d0      	blx	sl
 800cd4a:	3001      	adds	r0, #1
 800cd4c:	d09d      	beq.n	800cc8a <_printf_i+0x162>
 800cd4e:	3501      	adds	r5, #1
 800cd50:	68e3      	ldr	r3, [r4, #12]
 800cd52:	9903      	ldr	r1, [sp, #12]
 800cd54:	1a5b      	subs	r3, r3, r1
 800cd56:	42ab      	cmp	r3, r5
 800cd58:	dcf2      	bgt.n	800cd40 <_printf_i+0x218>
 800cd5a:	e7eb      	b.n	800cd34 <_printf_i+0x20c>
 800cd5c:	2500      	movs	r5, #0
 800cd5e:	f104 0619 	add.w	r6, r4, #25
 800cd62:	e7f5      	b.n	800cd50 <_printf_i+0x228>
 800cd64:	0800de50 	.word	0x0800de50
 800cd68:	0800de61 	.word	0x0800de61

0800cd6c <memmove>:
 800cd6c:	4288      	cmp	r0, r1
 800cd6e:	b510      	push	{r4, lr}
 800cd70:	eb01 0402 	add.w	r4, r1, r2
 800cd74:	d902      	bls.n	800cd7c <memmove+0x10>
 800cd76:	4284      	cmp	r4, r0
 800cd78:	4623      	mov	r3, r4
 800cd7a:	d807      	bhi.n	800cd8c <memmove+0x20>
 800cd7c:	1e43      	subs	r3, r0, #1
 800cd7e:	42a1      	cmp	r1, r4
 800cd80:	d008      	beq.n	800cd94 <memmove+0x28>
 800cd82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd8a:	e7f8      	b.n	800cd7e <memmove+0x12>
 800cd8c:	4601      	mov	r1, r0
 800cd8e:	4402      	add	r2, r0
 800cd90:	428a      	cmp	r2, r1
 800cd92:	d100      	bne.n	800cd96 <memmove+0x2a>
 800cd94:	bd10      	pop	{r4, pc}
 800cd96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd9e:	e7f7      	b.n	800cd90 <memmove+0x24>

0800cda0 <memchr>:
 800cda0:	4603      	mov	r3, r0
 800cda2:	b510      	push	{r4, lr}
 800cda4:	b2c9      	uxtb	r1, r1
 800cda6:	4402      	add	r2, r0
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	4618      	mov	r0, r3
 800cdac:	d101      	bne.n	800cdb2 <memchr+0x12>
 800cdae:	2000      	movs	r0, #0
 800cdb0:	e003      	b.n	800cdba <memchr+0x1a>
 800cdb2:	7804      	ldrb	r4, [r0, #0]
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	428c      	cmp	r4, r1
 800cdb8:	d1f6      	bne.n	800cda8 <memchr+0x8>
 800cdba:	bd10      	pop	{r4, pc}

0800cdbc <memcpy>:
 800cdbc:	440a      	add	r2, r1
 800cdbe:	4291      	cmp	r1, r2
 800cdc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdc4:	d100      	bne.n	800cdc8 <memcpy+0xc>
 800cdc6:	4770      	bx	lr
 800cdc8:	b510      	push	{r4, lr}
 800cdca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdce:	4291      	cmp	r1, r2
 800cdd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdd4:	d1f9      	bne.n	800cdca <memcpy+0xe>
 800cdd6:	bd10      	pop	{r4, pc}

0800cdd8 <_realloc_r>:
 800cdd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cddc:	4680      	mov	r8, r0
 800cdde:	4614      	mov	r4, r2
 800cde0:	460e      	mov	r6, r1
 800cde2:	b921      	cbnz	r1, 800cdee <_realloc_r+0x16>
 800cde4:	4611      	mov	r1, r2
 800cde6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdea:	f7ff bb41 	b.w	800c470 <_malloc_r>
 800cdee:	b92a      	cbnz	r2, 800cdfc <_realloc_r+0x24>
 800cdf0:	f7ff fc88 	bl	800c704 <_free_r>
 800cdf4:	4625      	mov	r5, r4
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdfc:	f000 f81b 	bl	800ce36 <_malloc_usable_size_r>
 800ce00:	4284      	cmp	r4, r0
 800ce02:	4607      	mov	r7, r0
 800ce04:	d802      	bhi.n	800ce0c <_realloc_r+0x34>
 800ce06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce0a:	d812      	bhi.n	800ce32 <_realloc_r+0x5a>
 800ce0c:	4621      	mov	r1, r4
 800ce0e:	4640      	mov	r0, r8
 800ce10:	f7ff fb2e 	bl	800c470 <_malloc_r>
 800ce14:	4605      	mov	r5, r0
 800ce16:	2800      	cmp	r0, #0
 800ce18:	d0ed      	beq.n	800cdf6 <_realloc_r+0x1e>
 800ce1a:	42bc      	cmp	r4, r7
 800ce1c:	4622      	mov	r2, r4
 800ce1e:	4631      	mov	r1, r6
 800ce20:	bf28      	it	cs
 800ce22:	463a      	movcs	r2, r7
 800ce24:	f7ff ffca 	bl	800cdbc <memcpy>
 800ce28:	4631      	mov	r1, r6
 800ce2a:	4640      	mov	r0, r8
 800ce2c:	f7ff fc6a 	bl	800c704 <_free_r>
 800ce30:	e7e1      	b.n	800cdf6 <_realloc_r+0x1e>
 800ce32:	4635      	mov	r5, r6
 800ce34:	e7df      	b.n	800cdf6 <_realloc_r+0x1e>

0800ce36 <_malloc_usable_size_r>:
 800ce36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce3a:	1f18      	subs	r0, r3, #4
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	bfbc      	itt	lt
 800ce40:	580b      	ldrlt	r3, [r1, r0]
 800ce42:	18c0      	addlt	r0, r0, r3
 800ce44:	4770      	bx	lr
	...

0800ce48 <_init>:
 800ce48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4a:	bf00      	nop
 800ce4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce4e:	bc08      	pop	{r3}
 800ce50:	469e      	mov	lr, r3
 800ce52:	4770      	bx	lr

0800ce54 <_fini>:
 800ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce56:	bf00      	nop
 800ce58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce5a:	bc08      	pop	{r3}
 800ce5c:	469e      	mov	lr, r3
 800ce5e:	4770      	bx	lr
