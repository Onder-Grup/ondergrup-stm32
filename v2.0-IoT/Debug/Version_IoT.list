
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfe4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010b0  0800d1c8  0800d1c8  0001d1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e278  0800e278  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e278  0800e278  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e278  0800e278  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e278  0800e278  0001e278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e27c  0800e27c  0001e27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800e280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  200000fc  0800e37c  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  0800e37c  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016635  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000349b  00000000  00000000  0003679d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  00039c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e83  00000000  00000000  0003aec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6cd  00000000  00000000  0003bd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c499  00000000  00000000  00058418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee97  00000000  00000000  000748b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005298  00000000  00000000  00113748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001189e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d1b0 	.word	0x0800d1b0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800d1b0 	.word	0x0800d1b0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fd9c 	bl	8009d8c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fc14 	bl	8008a84 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	20000374 	.word	0x20000374
 80004c0:	200001c5 	.word	0x200001c5
 80004c4:	200001ed 	.word	0x200001ed
 80004c8:	200001f0 	.word	0x200001f0
 80004cc:	200001f1 	.word	0x200001f1
 80004d0:	200001f2 	.word	0x200001f2
 80004d4:	200001f3 	.word	0x200001f3
 80004d8:	200001f4 	.word	0x200001f4
 80004dc:	200001f5 	.word	0x200001f5
 80004e0:	20000205 	.word	0x20000205
 80004e4:	200001f6 	.word	0x200001f6
 80004e8:	20000206 	.word	0x20000206
 80004ec:	200001f7 	.word	0x200001f7
 80004f0:	20000207 	.word	0x20000207
 80004f4:	200001fa 	.word	0x200001fa
 80004f8:	200001fb 	.word	0x200001fb
 80004fc:	200001fc 	.word	0x200001fc
 8000500:	200001fd 	.word	0x200001fd
 8000504:	200001fe 	.word	0x200001fe
 8000508:	200001ff 	.word	0x200001ff
 800050c:	20000200 	.word	0x20000200
 8000510:	20000201 	.word	0x20000201
 8000514:	20000202 	.word	0x20000202
 8000518:	20000203 	.word	0x20000203
 800051c:	20000204 	.word	0x20000204
 8000520:	20000208 	.word	0x20000208
 8000524:	2000020a 	.word	0x2000020a
 8000528:	200001e8 	.word	0x200001e8
 800052c:	200001e9 	.word	0x200001e9
 8000530:	200001ea 	.word	0x200001ea
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200001eb 	.word	0x200001eb
 8000540:	2000020d 	.word	0x2000020d
 8000544:	2000020b 	.word	0x2000020b
 8000548:	200001f9 	.word	0x200001f9
 800054c:	2000020c 	.word	0x2000020c
 8000550:	200001f8 	.word	0x200001f8
 8000554:	2000020e 	.word	0x2000020e
 8000558:	2000020f 	.word	0x2000020f
 800055c:	20000210 	.word	0x20000210
 8000560:	20000211 	.word	0x20000211
 8000564:	20000212 	.word	0x20000212
 8000568:	20000213 	.word	0x20000213
 800056c:	20000214 	.word	0x20000214
 8000570:	20000215 	.word	0x20000215
 8000574:	20000216 	.word	0x20000216
 8000578:	20000217 	.word	0x20000217
 800057c:	200001c4 	.word	0x200001c4
	}

	if(kapi1AcSure>5) {
 8000580:	4b57      	ldr	r3, [pc, #348]	; (80006e0 <eepromKontrol+0x4ac>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b55      	ldr	r3, [pc, #340]	; (80006e0 <eepromKontrol+0x4ac>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b55      	ldr	r3, [pc, #340]	; (80006e4 <eepromKontrol+0x4b0>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b53      	ldr	r3, [pc, #332]	; (80006e4 <eepromKontrol+0x4b0>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b52      	ldr	r3, [pc, #328]	; (80006e8 <eepromKontrol+0x4b4>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b50      	ldr	r3, [pc, #320]	; (80006e8 <eepromKontrol+0x4b4>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b50      	ldr	r3, [pc, #320]	; (80006ec <eepromKontrol+0x4b8>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4e      	ldr	r3, [pc, #312]	; (80006ec <eepromKontrol+0x4b8>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4d      	ldr	r3, [pc, #308]	; (80006f0 <eepromKontrol+0x4bc>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4b      	ldr	r3, [pc, #300]	; (80006f0 <eepromKontrol+0x4bc>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4b      	ldr	r3, [pc, #300]	; (80006f4 <eepromKontrol+0x4c0>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b49      	ldr	r3, [pc, #292]	; (80006f4 <eepromKontrol+0x4c0>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b48      	ldr	r3, [pc, #288]	; (80006f8 <eepromKontrol+0x4c4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <eepromKontrol+0x4c4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b46      	ldr	r3, [pc, #280]	; (80006fc <eepromKontrol+0x4c8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b44      	ldr	r3, [pc, #272]	; (80006fc <eepromKontrol+0x4c8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <eepromKontrol+0x4cc>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b41      	ldr	r3, [pc, #260]	; (8000700 <eepromKontrol+0x4cc>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b41      	ldr	r3, [pc, #260]	; (8000704 <eepromKontrol+0x4d0>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <eepromKontrol+0x4d0>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3e      	ldr	r3, [pc, #248]	; (8000708 <eepromKontrol+0x4d4>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3c      	ldr	r3, [pc, #240]	; (8000708 <eepromKontrol+0x4d4>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3c      	ldr	r3, [pc, #240]	; (800070c <eepromKontrol+0x4d8>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3a      	ldr	r3, [pc, #232]	; (800070c <eepromKontrol+0x4d8>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <eepromKontrol+0x4dc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b37      	ldr	r3, [pc, #220]	; (8000710 <eepromKontrol+0x4dc>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <eepromKontrol+0x4e0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <eepromKontrol+0x4e0>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b34      	ldr	r3, [pc, #208]	; (8000718 <eepromKontrol+0x4e4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b32      	ldr	r3, [pc, #200]	; (8000718 <eepromKontrol+0x4e4>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <eepromKontrol+0x4e8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <eepromKontrol+0x4e8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <eepromKontrol+0x4ec>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <eepromKontrol+0x4ec>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <eepromKontrol+0x4f0>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <eepromKontrol+0x4f0>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <eepromKontrol+0x4f4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <eepromKontrol+0x4f4>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <eepromKontrol+0x4f8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <eepromKontrol+0x4f8>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <eepromKontrol+0x4fc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <eepromKontrol+0x4fc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <eepromKontrol+0x500>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <eepromKontrol+0x500>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f83f 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	; 0xfa
 80006bc:	f008 f9e2 	bl	8008a84 <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f839 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	; 0xfa
 80006c8:	f008 f9dc 	bl	8008a84 <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f833 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	; 0xfa
 80006d4:	f008 f9d6 	bl	8008a84 <HAL_Delay>
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000205 	.word	0x20000205
 80006e4:	200001f6 	.word	0x200001f6
 80006e8:	20000206 	.word	0x20000206
 80006ec:	200001f7 	.word	0x200001f7
 80006f0:	200001f9 	.word	0x200001f9
 80006f4:	20000207 	.word	0x20000207
 80006f8:	200001fa 	.word	0x200001fa
 80006fc:	200001fb 	.word	0x200001fb
 8000700:	200001fc 	.word	0x200001fc
 8000704:	200001fd 	.word	0x200001fd
 8000708:	200001fe 	.word	0x200001fe
 800070c:	200001ff 	.word	0x200001ff
 8000710:	20000200 	.word	0x20000200
 8000714:	20000201 	.word	0x20000201
 8000718:	20000202 	.word	0x20000202
 800071c:	20000203 	.word	0x20000203
 8000720:	20000204 	.word	0x20000204
 8000724:	20000208 	.word	0x20000208
 8000728:	2000020a 	.word	0x2000020a
 800072c:	2000020c 	.word	0x2000020c
 8000730:	2000020d 	.word	0x2000020d
 8000734:	2000020b 	.word	0x2000020b

08000738 <convertArrays>:

void convertArrays(int state) {
 8000738:	b480      	push	{r7}
 800073a:	b08b      	sub	sp, #44	; 0x2c
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d11d      	bne.n	8000782 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 8000746:	4b34      	ldr	r3, [pc, #208]	; (8000818 <convertArrays+0xe0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
 8000750:	e013      	b.n	800077a <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 8000752:	4a32      	ldr	r2, [pc, #200]	; (800081c <convertArrays+0xe4>)
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 800075c:	4a30      	ldr	r2, [pc, #192]	; (8000820 <convertArrays+0xe8>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	4413      	add	r3, r2
 8000762:	7819      	ldrb	r1, [r3, #0]
 8000764:	4a2f      	ldr	r2, [pc, #188]	; (8000824 <convertArrays+0xec>)
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	4413      	add	r3, r2
 800076a:	460a      	mov	r2, r1
 800076c:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	3301      	adds	r3, #1
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	3301      	adds	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	2b0b      	cmp	r3, #11
 800077e:	dde8      	ble.n	8000752 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000780:	e045      	b.n	800080e <convertArrays+0xd6>
	} else if(state == 2) {
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b02      	cmp	r3, #2
 8000786:	d121      	bne.n	80007cc <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000788:	4b27      	ldr	r3, [pc, #156]	; (8000828 <convertArrays+0xf0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	e017      	b.n	80007c4 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <convertArrays+0xe4>)
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00e      	beq.n	80007be <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a0:	4a1e      	ldr	r2, [pc, #120]	; (800081c <convertArrays+0xe4>)
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	4413      	add	r3, r2
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <convertArrays+0xf4>)
 80007ac:	5c99      	ldrb	r1, [r3, r2]
 80007ae:	4a20      	ldr	r2, [pc, #128]	; (8000830 <convertArrays+0xf8>)
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	4413      	add	r3, r2
 80007b4:	460a      	mov	r2, r1
 80007b6:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	3301      	adds	r3, #1
 80007bc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	3301      	adds	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	2b13      	cmp	r3, #19
 80007c8:	dde4      	ble.n	8000794 <convertArrays+0x5c>
}
 80007ca:	e020      	b.n	800080e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <convertArrays+0xfc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	e017      	b.n	8000808 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007d8:	4a10      	ldr	r2, [pc, #64]	; (800081c <convertArrays+0xe4>)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d00e      	beq.n	8000802 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <convertArrays+0xe4>)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <convertArrays+0xf4>)
 80007f0:	5c99      	ldrb	r1, [r3, r2]
 80007f2:	4a11      	ldr	r2, [pc, #68]	; (8000838 <convertArrays+0x100>)
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	4413      	add	r3, r2
 80007f8:	460a      	mov	r2, r1
 80007fa:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	3301      	adds	r3, #1
 8000800:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	3301      	adds	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	2b13      	cmp	r3, #19
 800080c:	dde4      	ble.n	80007d8 <convertArrays+0xa0>
}
 800080e:	bf00      	nop
 8000810:	372c      	adds	r7, #44	; 0x2c
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000004 	.word	0x20000004
 800081c:	20000118 	.word	0x20000118
 8000820:	20000010 	.word	0x20000010
 8000824:	20000190 	.word	0x20000190
 8000828:	20000008 	.word	0x20000008
 800082c:	2000001c 	.word	0x2000001c
 8000830:	2000019c 	.word	0x2000019c
 8000834:	2000000c 	.word	0x2000000c
 8000838:	200001b0 	.word	0x200001b0

0800083c <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b09f      	sub	sp, #124	; 0x7c
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000848:	4948      	ldr	r1, [pc, #288]	; (800096c <ESP8266_Init+0x130>)
 800084a:	4849      	ldr	r0, [pc, #292]	; (8000970 <ESP8266_Init+0x134>)
 800084c:	f00c f828 	bl	800c8a0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000850:	4847      	ldr	r0, [pc, #284]	; (8000970 <ESP8266_Init+0x134>)
 8000852:	f7ff fce7 	bl	8000224 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	b29b      	uxth	r3, r3
 800085a:	461a      	mov	r2, r3
 800085c:	4944      	ldr	r1, [pc, #272]	; (8000970 <ESP8266_Init+0x134>)
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f00b f9dc 	bl	800bc1c <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000868:	f008 f90c 	bl	8008a84 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 800086c:	4941      	ldr	r1, [pc, #260]	; (8000974 <ESP8266_Init+0x138>)
 800086e:	4840      	ldr	r0, [pc, #256]	; (8000970 <ESP8266_Init+0x134>)
 8000870:	f00c f816 	bl	800c8a0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000874:	483e      	ldr	r0, [pc, #248]	; (8000970 <ESP8266_Init+0x134>)
 8000876:	f7ff fcd5 	bl	8000224 <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	b29b      	uxth	r3, r3
 800087e:	461a      	mov	r2, r3
 8000880:	493b      	ldr	r1, [pc, #236]	; (8000970 <ESP8266_Init+0x134>)
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f00b f9ca 	bl	800bc1c <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088c:	f008 f8fa 	bl	8008a84 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000890:	4939      	ldr	r1, [pc, #228]	; (8000978 <ESP8266_Init+0x13c>)
 8000892:	4837      	ldr	r0, [pc, #220]	; (8000970 <ESP8266_Init+0x134>)
 8000894:	f00c f804 	bl	800c8a0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000898:	4835      	ldr	r0, [pc, #212]	; (8000970 <ESP8266_Init+0x134>)
 800089a:	f7ff fcc3 	bl	8000224 <strlen>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	461a      	mov	r2, r3
 80008a4:	4932      	ldr	r1, [pc, #200]	; (8000970 <ESP8266_Init+0x134>)
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f00b f9b8 	bl	800bc1c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008b0:	f008 f8e8 	bl	8008a84 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80008b4:	4931      	ldr	r1, [pc, #196]	; (800097c <ESP8266_Init+0x140>)
 80008b6:	482e      	ldr	r0, [pc, #184]	; (8000970 <ESP8266_Init+0x134>)
 80008b8:	f00b fff2 	bl	800c8a0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008bc:	482c      	ldr	r0, [pc, #176]	; (8000970 <ESP8266_Init+0x134>)
 80008be:	f7ff fcb1 	bl	8000224 <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	4929      	ldr	r1, [pc, #164]	; (8000970 <ESP8266_Init+0x134>)
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f00b f9a6 	bl	800bc1c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008d4:	f008 f8d6 	bl	8008a84 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4a28      	ldr	r2, [pc, #160]	; (8000980 <ESP8266_Init+0x144>)
 80008de:	461c      	mov	r4, r3
 80008e0:	4613      	mov	r3, r2
 80008e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008e4:	c407      	stmia	r4!, {r0, r1, r2}
 80008e6:	8023      	strh	r3, [r4, #0]
 80008e8:	3402      	adds	r4, #2
 80008ea:	0c1b      	lsrs	r3, r3, #16
 80008ec:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00c f835 	bl	800c964 <strcat>
	strcat(str, "\",\"");
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fc90 	bl	8000224 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4413      	add	r3, r2
 800090e:	4a1d      	ldr	r2, [pc, #116]	; (8000984 <ESP8266_Init+0x148>)
 8000910:	6810      	ldr	r0, [r2, #0]
 8000912:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	4618      	mov	r0, r3
 800091c:	f00c f822 	bl	800c964 <strcat>
	strcat(str, "\"\r\n");
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fc7d 	bl	8000224 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4413      	add	r3, r2
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <ESP8266_Init+0x14c>)
 8000936:	6810      	ldr	r0, [r2, #0]
 8000938:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	461a      	mov	r2, r3
 8000940:	4912      	ldr	r1, [pc, #72]	; (800098c <ESP8266_Init+0x150>)
 8000942:	480b      	ldr	r0, [pc, #44]	; (8000970 <ESP8266_Init+0x134>)
 8000944:	f00b ffac 	bl	800c8a0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <ESP8266_Init+0x134>)
 800094a:	f7ff fc6b 	bl	8000224 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29b      	uxth	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	4906      	ldr	r1, [pc, #24]	; (8000970 <ESP8266_Init+0x134>)
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f00b f960 	bl	800bc1c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800095c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000960:	f008 f890 	bl	8008a84 <HAL_Delay>
}
 8000964:	bf00      	nop
 8000966:	377c      	adds	r7, #124	; 0x7c
 8000968:	46bd      	mov	sp, r7
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	0800d1c8 	.word	0x0800d1c8
 8000970:	20000250 	.word	0x20000250
 8000974:	0800d1d8 	.word	0x0800d1d8
 8000978:	0800d1e4 	.word	0x0800d1e4
 800097c:	0800d1ec 	.word	0x0800d1ec
 8000980:	0800d1fc 	.word	0x0800d1fc
 8000984:	0800d20c 	.word	0x0800d20c
 8000988:	0800d210 	.word	0x0800d210
 800098c:	0800d214 	.word	0x0800d214

08000990 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8000996:	af04      	add	r7, sp, #16
 8000998:	f507 7414 	add.w	r4, r7, #592	; 0x250
 800099c:	f5a4 7411 	sub.w	r4, r4, #580	; 0x244
 80009a0:	6020      	str	r0, [r4, #0]
 80009a2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80009a6:	f5a0 7012 	sub.w	r0, r0, #584	; 0x248
 80009aa:	6001      	str	r1, [r0, #0]
 80009ac:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80009b0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80009b4:	600a      	str	r2, [r1, #0]
 80009b6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80009ba:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 80009be:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 80009c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80009c4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80009c8:	f107 0014 	add.w	r0, r7, #20
 80009cc:	220c      	movs	r2, #12
 80009ce:	6819      	ldr	r1, [r3, #0]
 80009d0:	f00b ffd7 	bl	800c982 <strncpy>
	subMachineID[12] = '\0';
 80009d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80009d8:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80009dc:	2200      	movs	r2, #0
 80009de:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009e0:	4a35      	ldr	r2, [pc, #212]	; (8000ab8 <sendMachineData+0x128>)
 80009e2:	4936      	ldr	r1, [pc, #216]	; (8000abc <sendMachineData+0x12c>)
 80009e4:	4836      	ldr	r0, [pc, #216]	; (8000ac0 <sendMachineData+0x130>)
 80009e6:	f00b ff5b 	bl	800c8a0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009ea:	4835      	ldr	r0, [pc, #212]	; (8000ac0 <sendMachineData+0x130>)
 80009ec:	f7ff fc1a 	bl	8000224 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80009f8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80009fc:	4930      	ldr	r1, [pc, #192]	; (8000ac0 <sendMachineData+0x130>)
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	f00b f90c 	bl	800bc1c <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a04:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a08:	f008 f83c 	bl	8008a84 <HAL_Delay>

	sprintf(local_txA,
 8000a0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8000a14:	f107 0114 	add.w	r1, r7, #20
 8000a18:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000a1c:	4a29      	ldr	r2, [pc, #164]	; (8000ac4 <sendMachineData+0x134>)
 8000a1e:	9202      	str	r2, [sp, #8]
 8000a20:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8000a24:	9201      	str	r2, [sp, #4]
 8000a26:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8000a2a:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8000a2e:	6812      	ldr	r2, [r2, #0]
 8000a30:	9200      	str	r2, [sp, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	460a      	mov	r2, r1
 8000a36:	4924      	ldr	r1, [pc, #144]	; (8000ac8 <sendMachineData+0x138>)
 8000a38:	f00b ff32 	bl	800c8a0 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fbef 	bl	8000224 <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000a54:	491d      	ldr	r1, [pc, #116]	; (8000acc <sendMachineData+0x13c>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	f00b ff22 	bl	800c8a0 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fbdf 	bl	8000224 <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a72:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000a76:	6818      	ldr	r0, [r3, #0]
 8000a78:	f00b f8d0 	bl	800bc1c <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a7c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a80:	f008 f800 	bl	8008a84 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fbcb 	bl	8000224 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000a96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a9a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	f00b f8bc 	bl	800bc1c <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000aa4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000aa8:	f007 ffec 	bl	8008a84 <HAL_Delay>
}
 8000aac:	bf00      	nop
 8000aae:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd90      	pop	{r4, r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	0800d218 	.word	0x0800d218
 8000abc:	0800d228 	.word	0x0800d228
 8000ac0:	20000250 	.word	0x20000250
 8000ac4:	0800d2bc 	.word	0x0800d2bc
 8000ac8:	0800d248 	.word	0x0800d248
 8000acc:	0800d2d0 	.word	0x0800d2d0

08000ad0 <checkMachineID>:

int checkMachineID(UART_HandleTypeDef *huart1, const char *machineID) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	f6ad 2d18 	subw	sp, sp, #2584	; 0xa18
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000adc:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000ae0:	6018      	str	r0, [r3, #0]
 8000ae2:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000ae6:	f6a3 2318 	subw	r3, r3, #2584	; 0xa18
 8000aea:	6019      	str	r1, [r3, #0]
	int len;

	char bufferRX[2000];

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000aec:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000af0:	f6a3 2318 	subw	r3, r3, #2584	; 0xa18
 8000af4:	f107 000c 	add.w	r0, r7, #12
 8000af8:	220c      	movs	r2, #12
 8000afa:	6819      	ldr	r1, [r3, #0]
 8000afc:	f00b ff41 	bl	800c982 <strncpy>
	subMachineID[12] = '\0';
 8000b00:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b04:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8000b08:	2200      	movs	r2, #0
 8000b0a:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000b0c:	4a3f      	ldr	r2, [pc, #252]	; (8000c0c <checkMachineID+0x13c>)
 8000b0e:	4940      	ldr	r1, [pc, #256]	; (8000c10 <checkMachineID+0x140>)
 8000b10:	4840      	ldr	r0, [pc, #256]	; (8000c14 <checkMachineID+0x144>)
 8000b12:	f00b fec5 	bl	800c8a0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000b16:	483f      	ldr	r0, [pc, #252]	; (8000c14 <checkMachineID+0x144>)
 8000b18:	f7ff fb84 	bl	8000224 <strlen>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b24:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000b28:	493a      	ldr	r1, [pc, #232]	; (8000c14 <checkMachineID+0x144>)
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	f00b f876 	bl	800bc1c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000b30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b34:	f007 ffa6 	bl	8008a84 <HAL_Delay>

	sprintf(local_txA,
 8000b38:	f107 020c 	add.w	r2, r7, #12
 8000b3c:	f507 6002 	add.w	r0, r7, #2080	; 0x820
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <checkMachineID+0x148>)
 8000b42:	4936      	ldr	r1, [pc, #216]	; (8000c1c <checkMachineID+0x14c>)
 8000b44:	f00b feac 	bl	800c8a0 <siprintf>
			"GET /api/machine/checkMachineID?machineID=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, mainServerWithPort);
	len = strlen(local_txA);
 8000b48:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fb69 	bl	8000224 <strlen>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000b58:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 8000b5c:	f8d7 2a14 	ldr.w	r2, [r7, #2580]	; 0xa14
 8000b60:	492f      	ldr	r1, [pc, #188]	; (8000c20 <checkMachineID+0x150>)
 8000b62:	4618      	mov	r0, r3
 8000b64:	f00b fe9c 	bl	800c8a0 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000b68:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fb59 	bl	8000224 <strlen>
 8000b72:	4603      	mov	r3, r0
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	f207 71ec 	addw	r1, r7, #2028	; 0x7ec
 8000b7a:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b7e:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	f00b f84a 	bl	800bc1c <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000b88:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b8c:	f007 ff7a 	bl	8008a84 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000b90:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fb45 	bl	8000224 <strlen>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 8000ba2:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000ba6:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	f00b f836 	bl	800bc1c <HAL_UART_Transmit_IT>
	HAL_Delay(6000);
 8000bb0:	f241 7070 	movw	r0, #6000	; 0x1770
 8000bb4:	f007 ff66 	bl	8008a84 <HAL_Delay>

	HAL_UART_Receive_IT(huart1, (uint8_t*) bufferRX, sizeof(bufferRX));
 8000bb8:	f107 011c 	add.w	r1, r7, #28
 8000bbc:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000bc0:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000bc4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000bc8:	6818      	ldr	r0, [r3, #0]
 8000bca:	f00b f85c 	bl	800bc86 <HAL_UART_Receive_IT>
	HAL_Delay(5000);
 8000bce:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bd2:	f007 ff57 	bl	8008a84 <HAL_Delay>

	if (strstr(bufferRX, "HTTP/1.1 200 OK") || strstr(bufferRX, "HTTP/1.0 200 OK")) {
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4912      	ldr	r1, [pc, #72]	; (8000c24 <checkMachineID+0x154>)
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f00b fee3 	bl	800c9a8 <strstr>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d108      	bne.n	8000bfa <checkMachineID+0x12a>
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	490e      	ldr	r1, [pc, #56]	; (8000c28 <checkMachineID+0x158>)
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f00b feda 	bl	800c9a8 <strstr>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <checkMachineID+0x12e>
	    return 1; // Başarılı yanıt
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e000      	b.n	8000c00 <checkMachineID+0x130>
	}

	return 0; // Yanıt başarısız
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	f607 2718 	addw	r7, r7, #2584	; 0xa18
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	0800d218 	.word	0x0800d218
 8000c10:	0800d228 	.word	0x0800d228
 8000c14:	20000250 	.word	0x20000250
 8000c18:	0800d2bc 	.word	0x0800d2bc
 8000c1c:	0800d2e0 	.word	0x0800d2e0
 8000c20:	0800d2d0 	.word	0x0800d2d0
 8000c24:	0800d324 	.word	0x0800d324
 8000c28:	0800d334 	.word	0x0800d334

08000c2c <hata2EEPROM>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af04      	add	r7, sp, #16
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <hata2EEPROM+0xa0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	1e5a      	subs	r2, r3, #1
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <hata2EEPROM+0xa4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a24      	ldr	r2, [pc, #144]	; (8000cd4 <hata2EEPROM+0xa8>)
 8000c44:	5cd3      	ldrb	r3, [r2, r3]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d002      	beq.n	8000c50 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000c4a:	f000 f929 	bl	8000ea0 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000c4e:	e000      	b.n	8000c52 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000c50:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	e012      	b.n	8000c7e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <hata2EEPROM+0xa4>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <hata2EEPROM+0xa8>)
 8000c62:	5cd3      	ldrb	r3, [r2, r3]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d107      	bne.n	8000c78 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <hata2EEPROM+0xa4>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4918      	ldr	r1, [pc, #96]	; (8000cd4 <hata2EEPROM+0xa8>)
 8000c72:	79fa      	ldrb	r2, [r7, #7]
 8000c74:	54ca      	strb	r2, [r1, r3]
					break;
 8000c76:	e007      	b.n	8000c88 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <hata2EEPROM+0xa0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dbe7      	blt.n	8000c58 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <hata2EEPROM+0xa4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	b299      	uxth	r1, r3
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <hata2EEPROM+0xa0>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	b298      	uxth	r0, r3
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <hata2EEPROM+0xa4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <hata2EEPROM+0xa8>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <hata2EEPROM+0xa0>)
 8000c9e:	6812      	ldr	r2, [r2, #0]
 8000ca0:	b292      	uxth	r2, r2
 8000ca2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000ca6:	9402      	str	r4, [sp, #8]
 8000ca8:	9201      	str	r2, [sp, #4]
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	4603      	mov	r3, r0
 8000cae:	460a      	mov	r2, r1
 8000cb0:	21a0      	movs	r1, #160	; 0xa0
 8000cb2:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <hata2EEPROM+0xac>)
 8000cb4:	f008 ff70 	bl	8009b98 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000cb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cbc:	f007 fee2 	bl	8008a84 <HAL_Delay>
	eepromKontrol();
 8000cc0:	f7ff fab8 	bl	8000234 <eepromKontrol>
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd90      	pop	{r4, r7, pc}
 8000ccc:	20000098 	.word	0x20000098
 8000cd0:	2000009c 	.word	0x2000009c
 8000cd4:	20000118 	.word	0x20000118
 8000cd8:	20000374 	.word	0x20000374

08000cdc <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d11d      	bne.n	8000d28 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000cec:	4b62      	ldr	r3, [pc, #392]	; (8000e78 <hataKoduLcdGoster+0x19c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d105      	bne.n	8000d00 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000cf4:	4a61      	ldr	r2, [pc, #388]	; (8000e7c <hataKoduLcdGoster+0x1a0>)
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f007 f96d 	bl	8007fd8 <lcd_print>
 8000cfe:	e008      	b.n	8000d12 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000d00:	4b5d      	ldr	r3, [pc, #372]	; (8000e78 <hataKoduLcdGoster+0x19c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d104      	bne.n	8000d12 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000d08:	4a5d      	ldr	r2, [pc, #372]	; (8000e80 <hataKoduLcdGoster+0x1a4>)
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f007 f963 	bl	8007fd8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000d12:	4a5c      	ldr	r2, [pc, #368]	; (8000e84 <hataKoduLcdGoster+0x1a8>)
 8000d14:	2101      	movs	r1, #1
 8000d16:	2002      	movs	r0, #2
 8000d18:	f007 f95e 	bl	8007fd8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d1c:	4a5a      	ldr	r2, [pc, #360]	; (8000e88 <hataKoduLcdGoster+0x1ac>)
 8000d1e:	2107      	movs	r1, #7
 8000d20:	2002      	movs	r0, #2
 8000d22:	f007 f959 	bl	8007fd8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000d26:	e0a3      	b.n	8000e70 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d11d      	bne.n	8000d6a <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000d2e:	4b52      	ldr	r3, [pc, #328]	; (8000e78 <hataKoduLcdGoster+0x19c>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d105      	bne.n	8000d42 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000d36:	4a51      	ldr	r2, [pc, #324]	; (8000e7c <hataKoduLcdGoster+0x1a0>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f007 f94c 	bl	8007fd8 <lcd_print>
 8000d40:	e008      	b.n	8000d54 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000d42:	4b4d      	ldr	r3, [pc, #308]	; (8000e78 <hataKoduLcdGoster+0x19c>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d104      	bne.n	8000d54 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000d4a:	4a4d      	ldr	r2, [pc, #308]	; (8000e80 <hataKoduLcdGoster+0x1a4>)
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f007 f942 	bl	8007fd8 <lcd_print>
		lcd_print(2, 2, "2");
 8000d54:	4a4d      	ldr	r2, [pc, #308]	; (8000e8c <hataKoduLcdGoster+0x1b0>)
 8000d56:	2102      	movs	r1, #2
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f007 f93d 	bl	8007fd8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d5e:	4a4a      	ldr	r2, [pc, #296]	; (8000e88 <hataKoduLcdGoster+0x1ac>)
 8000d60:	2107      	movs	r1, #7
 8000d62:	2002      	movs	r0, #2
 8000d64:	f007 f938 	bl	8007fd8 <lcd_print>
}
 8000d68:	e082      	b.n	8000e70 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d11d      	bne.n	8000dac <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000d70:	4b41      	ldr	r3, [pc, #260]	; (8000e78 <hataKoduLcdGoster+0x19c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d105      	bne.n	8000d84 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000d78:	4a40      	ldr	r2, [pc, #256]	; (8000e7c <hataKoduLcdGoster+0x1a0>)
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f007 f92b 	bl	8007fd8 <lcd_print>
 8000d82:	e008      	b.n	8000d96 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000d84:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <hataKoduLcdGoster+0x19c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d104      	bne.n	8000d96 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000d8c:	4a3c      	ldr	r2, [pc, #240]	; (8000e80 <hataKoduLcdGoster+0x1a4>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	2001      	movs	r0, #1
 8000d92:	f007 f921 	bl	8007fd8 <lcd_print>
		lcd_print(2, 3, "3");
 8000d96:	4a3e      	ldr	r2, [pc, #248]	; (8000e90 <hataKoduLcdGoster+0x1b4>)
 8000d98:	2103      	movs	r1, #3
 8000d9a:	2002      	movs	r0, #2
 8000d9c:	f007 f91c 	bl	8007fd8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000da0:	4a39      	ldr	r2, [pc, #228]	; (8000e88 <hataKoduLcdGoster+0x1ac>)
 8000da2:	2107      	movs	r1, #7
 8000da4:	2002      	movs	r0, #2
 8000da6:	f007 f917 	bl	8007fd8 <lcd_print>
}
 8000daa:	e061      	b.n	8000e70 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	d11d      	bne.n	8000dee <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <hataKoduLcdGoster+0x19c>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d105      	bne.n	8000dc6 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000dba:	4a30      	ldr	r2, [pc, #192]	; (8000e7c <hataKoduLcdGoster+0x1a0>)
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f007 f90a 	bl	8007fd8 <lcd_print>
 8000dc4:	e008      	b.n	8000dd8 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <hataKoduLcdGoster+0x19c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d104      	bne.n	8000dd8 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000dce:	4a2c      	ldr	r2, [pc, #176]	; (8000e80 <hataKoduLcdGoster+0x1a4>)
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f007 f900 	bl	8007fd8 <lcd_print>
		lcd_print(2, 4, "4");
 8000dd8:	4a2e      	ldr	r2, [pc, #184]	; (8000e94 <hataKoduLcdGoster+0x1b8>)
 8000dda:	2104      	movs	r1, #4
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f007 f8fb 	bl	8007fd8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000de2:	4a29      	ldr	r2, [pc, #164]	; (8000e88 <hataKoduLcdGoster+0x1ac>)
 8000de4:	2107      	movs	r1, #7
 8000de6:	2002      	movs	r0, #2
 8000de8:	f007 f8f6 	bl	8007fd8 <lcd_print>
}
 8000dec:	e040      	b.n	8000e70 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b05      	cmp	r3, #5
 8000df2:	d11d      	bne.n	8000e30 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000df4:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <hataKoduLcdGoster+0x19c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d105      	bne.n	8000e08 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000dfc:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <hataKoduLcdGoster+0x1a0>)
 8000dfe:	2101      	movs	r1, #1
 8000e00:	2001      	movs	r0, #1
 8000e02:	f007 f8e9 	bl	8007fd8 <lcd_print>
 8000e06:	e008      	b.n	8000e1a <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <hataKoduLcdGoster+0x19c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d104      	bne.n	8000e1a <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000e10:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <hataKoduLcdGoster+0x1a4>)
 8000e12:	2101      	movs	r1, #1
 8000e14:	2001      	movs	r0, #1
 8000e16:	f007 f8df 	bl	8007fd8 <lcd_print>
		lcd_print(2, 5, "5");
 8000e1a:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <hataKoduLcdGoster+0x1bc>)
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f007 f8da 	bl	8007fd8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e24:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <hataKoduLcdGoster+0x1ac>)
 8000e26:	2107      	movs	r1, #7
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f007 f8d5 	bl	8007fd8 <lcd_print>
}
 8000e2e:	e01f      	b.n	8000e70 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d11c      	bne.n	8000e70 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <hataKoduLcdGoster+0x19c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d105      	bne.n	8000e4a <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000e3e:	4a0f      	ldr	r2, [pc, #60]	; (8000e7c <hataKoduLcdGoster+0x1a0>)
 8000e40:	2101      	movs	r1, #1
 8000e42:	2001      	movs	r0, #1
 8000e44:	f007 f8c8 	bl	8007fd8 <lcd_print>
 8000e48:	e008      	b.n	8000e5c <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <hataKoduLcdGoster+0x19c>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d104      	bne.n	8000e5c <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <hataKoduLcdGoster+0x1a4>)
 8000e54:	2101      	movs	r1, #1
 8000e56:	2001      	movs	r0, #1
 8000e58:	f007 f8be 	bl	8007fd8 <lcd_print>
		lcd_print(2, 6, "6");
 8000e5c:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <hataKoduLcdGoster+0x1c0>)
 8000e5e:	2106      	movs	r1, #6
 8000e60:	2002      	movs	r0, #2
 8000e62:	f007 f8b9 	bl	8007fd8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <hataKoduLcdGoster+0x1ac>)
 8000e68:	2107      	movs	r1, #7
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f007 f8b4 	bl	8007fd8 <lcd_print>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2000020d 	.word	0x2000020d
 8000e7c:	0800d344 	.word	0x0800d344
 8000e80:	0800d354 	.word	0x0800d354
 8000e84:	0800d364 	.word	0x0800d364
 8000e88:	0800d368 	.word	0x0800d368
 8000e8c:	0800d374 	.word	0x0800d374
 8000e90:	0800d378 	.word	0x0800d378
 8000e94:	0800d37c 	.word	0x0800d37c
 8000e98:	0800d380 	.word	0x0800d380
 8000e9c:	0800d384 	.word	0x0800d384

08000ea0 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	e009      	b.n	8000ec0 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <eepromDataFillWithEmpty+0x38>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	4a09      	ldr	r2, [pc, #36]	; (8000edc <eepromDataFillWithEmpty+0x3c>)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <eepromDataFillWithEmpty+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	dbf0      	blt.n	8000eac <eepromDataFillWithEmpty+0xc>
	}
}
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000070 	.word	0x20000070
 8000edc:	20000118 	.word	0x20000118
 8000ee0:	20000098 	.word	0x20000098

08000ee4 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000ef6:	4b50      	ldr	r3, [pc, #320]	; (8001038 <i2cTest+0x154>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b4e      	ldr	r3, [pc, #312]	; (8001038 <i2cTest+0x154>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0201 	bic.w	r2, r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000f06:	484c      	ldr	r0, [pc, #304]	; (8001038 <i2cTest+0x154>)
 8000f08:	f008 fd18 	bl	800993c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f0c:	23c0      	movs	r3, #192	; 0xc0
 8000f0e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000f10:	2311      	movs	r3, #17
 8000f12:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4846      	ldr	r0, [pc, #280]	; (800103c <i2cTest+0x158>)
 8000f22:	f008 f91f 	bl	8009164 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2140      	movs	r1, #64	; 0x40
 8000f2a:	4844      	ldr	r0, [pc, #272]	; (800103c <i2cTest+0x158>)
 8000f2c:	f008 fb91 	bl	8009652 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	4841      	ldr	r0, [pc, #260]	; (800103c <i2cTest+0x158>)
 8000f36:	f008 fb8c 	bl	8009652 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000f3a:	200a      	movs	r0, #10
 8000f3c:	f007 fda2 	bl	8008a84 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000f40:	bf00      	nop
 8000f42:	2140      	movs	r1, #64	; 0x40
 8000f44:	483d      	ldr	r0, [pc, #244]	; (800103c <i2cTest+0x158>)
 8000f46:	f008 fb6d 	bl	8009624 <HAL_GPIO_ReadPin>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d006      	beq.n	8000f5e <i2cTest+0x7a>
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	483a      	ldr	r0, [pc, #232]	; (800103c <i2cTest+0x158>)
 8000f54:	f008 fb66 	bl	8009624 <HAL_GPIO_ReadPin>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d1f1      	bne.n	8000f42 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	4836      	ldr	r0, [pc, #216]	; (800103c <i2cTest+0x158>)
 8000f64:	f008 fb75 	bl	8009652 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000f68:	200a      	movs	r0, #10
 8000f6a:	f007 fd8b 	bl	8008a84 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000f6e:	bf00      	nop
 8000f70:	2180      	movs	r1, #128	; 0x80
 8000f72:	4832      	ldr	r0, [pc, #200]	; (800103c <i2cTest+0x158>)
 8000f74:	f008 fb56 	bl	8009624 <HAL_GPIO_ReadPin>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d0f8      	beq.n	8000f70 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2140      	movs	r1, #64	; 0x40
 8000f82:	482e      	ldr	r0, [pc, #184]	; (800103c <i2cTest+0x158>)
 8000f84:	f008 fb65 	bl	8009652 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f007 fd7b 	bl	8008a84 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000f8e:	bf00      	nop
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	482a      	ldr	r0, [pc, #168]	; (800103c <i2cTest+0x158>)
 8000f94:	f008 fb46 	bl	8009624 <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d0f8      	beq.n	8000f90 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2140      	movs	r1, #64	; 0x40
 8000fa2:	4826      	ldr	r0, [pc, #152]	; (800103c <i2cTest+0x158>)
 8000fa4:	f008 fb55 	bl	8009652 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f007 fd6b 	bl	8008a84 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000fae:	bf00      	nop
 8000fb0:	2140      	movs	r1, #64	; 0x40
 8000fb2:	4822      	ldr	r0, [pc, #136]	; (800103c <i2cTest+0x158>)
 8000fb4:	f008 fb36 	bl	8009624 <HAL_GPIO_ReadPin>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d1f8      	bne.n	8000fb0 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	481e      	ldr	r0, [pc, #120]	; (800103c <i2cTest+0x158>)
 8000fc4:	f008 fb45 	bl	8009652 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000fc8:	200a      	movs	r0, #10
 8000fca:	f007 fd5b 	bl	8008a84 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000fce:	bf00      	nop
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	481a      	ldr	r0, [pc, #104]	; (800103c <i2cTest+0x158>)
 8000fd4:	f008 fb26 	bl	8009624 <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d1f8      	bne.n	8000fd0 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fde:	23c0      	movs	r3, #192	; 0xc0
 8000fe0:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000fe2:	2312      	movs	r3, #18
 8000fe4:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4812      	ldr	r0, [pc, #72]	; (800103c <i2cTest+0x158>)
 8000ff4:	f008 f8b6 	bl	8009164 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <i2cTest+0x154>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <i2cTest+0x154>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001006:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <i2cTest+0x154>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <i2cTest+0x154>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001016:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <i2cTest+0x154>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <i2cTest+0x154>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0201 	orr.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8001028:	4803      	ldr	r0, [pc, #12]	; (8001038 <i2cTest+0x154>)
 800102a:	f008 fb43 	bl	80096b4 <HAL_I2C_Init>
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000374 	.word	0x20000374
 800103c:	40010c00 	.word	0x40010c00

08001040 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 800104a:	20c8      	movs	r0, #200	; 0xc8
 800104c:	f007 fd1a 	bl	8008a84 <HAL_Delay>
	lcd_clear();
 8001050:	f006 ffee 	bl	8008030 <lcd_clear>
	if(type == 1 && page == 0) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d13e      	bne.n	80010d8 <printTemplate+0x98>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d13b      	bne.n	80010d8 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8001060:	4a81      	ldr	r2, [pc, #516]	; (8001268 <printTemplate+0x228>)
 8001062:	2101      	movs	r1, #1
 8001064:	2001      	movs	r0, #1
 8001066:	f006 ffb7 	bl	8007fd8 <lcd_print>
		lcd_print(2, 3, "0");
 800106a:	4a80      	ldr	r2, [pc, #512]	; (800126c <printTemplate+0x22c>)
 800106c:	2103      	movs	r1, #3
 800106e:	2002      	movs	r0, #2
 8001070:	f006 ffb2 	bl	8007fd8 <lcd_print>
		lcd_print(2, 4, "1");
 8001074:	4a7e      	ldr	r2, [pc, #504]	; (8001270 <printTemplate+0x230>)
 8001076:	2104      	movs	r1, #4
 8001078:	2002      	movs	r0, #2
 800107a:	f006 ffad 	bl	8007fd8 <lcd_print>
		lcd_print(2, 5, "2");
 800107e:	4a7d      	ldr	r2, [pc, #500]	; (8001274 <printTemplate+0x234>)
 8001080:	2105      	movs	r1, #5
 8001082:	2002      	movs	r0, #2
 8001084:	f006 ffa8 	bl	8007fd8 <lcd_print>
		lcd_print(2, 6, "3");
 8001088:	4a7b      	ldr	r2, [pc, #492]	; (8001278 <printTemplate+0x238>)
 800108a:	2106      	movs	r1, #6
 800108c:	2002      	movs	r0, #2
 800108e:	f006 ffa3 	bl	8007fd8 <lcd_print>
		lcd_print(2, 7, "4");
 8001092:	4a7a      	ldr	r2, [pc, #488]	; (800127c <printTemplate+0x23c>)
 8001094:	2107      	movs	r1, #7
 8001096:	2002      	movs	r0, #2
 8001098:	f006 ff9e 	bl	8007fd8 <lcd_print>
		lcd_print(2, 10, "5");
 800109c:	4a78      	ldr	r2, [pc, #480]	; (8001280 <printTemplate+0x240>)
 800109e:	210a      	movs	r1, #10
 80010a0:	2002      	movs	r0, #2
 80010a2:	f006 ff99 	bl	8007fd8 <lcd_print>
		lcd_print(2, 11, "6");
 80010a6:	4a77      	ldr	r2, [pc, #476]	; (8001284 <printTemplate+0x244>)
 80010a8:	210b      	movs	r1, #11
 80010aa:	2002      	movs	r0, #2
 80010ac:	f006 ff94 	bl	8007fd8 <lcd_print>
		lcd_print(2, 12, "7");
 80010b0:	4a75      	ldr	r2, [pc, #468]	; (8001288 <printTemplate+0x248>)
 80010b2:	210c      	movs	r1, #12
 80010b4:	2002      	movs	r0, #2
 80010b6:	f006 ff8f 	bl	8007fd8 <lcd_print>
		lcd_print(2, 13, "8");
 80010ba:	4a74      	ldr	r2, [pc, #464]	; (800128c <printTemplate+0x24c>)
 80010bc:	210d      	movs	r1, #13
 80010be:	2002      	movs	r0, #2
 80010c0:	f006 ff8a 	bl	8007fd8 <lcd_print>
		lcd_print(2, 14, "9");
 80010c4:	4a72      	ldr	r2, [pc, #456]	; (8001290 <printTemplate+0x250>)
 80010c6:	210e      	movs	r1, #14
 80010c8:	2002      	movs	r0, #2
 80010ca:	f006 ff85 	bl	8007fd8 <lcd_print>
		lcd_gotoxy(2, 3);
 80010ce:	2103      	movs	r1, #3
 80010d0:	2002      	movs	r0, #2
 80010d2:	f006 ff62 	bl	8007f9a <lcd_gotoxy>
			HAL_Delay(100);
			lcd_print(1, 1, "PASS: ");
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 80010d6:	e0c2      	b.n	800125e <printTemplate+0x21e>
	} else if(type == 2) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d15e      	bne.n	800119c <printTemplate+0x15c>
		if(page == 1) {
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10f      	bne.n	8001104 <printTemplate+0xc4>
			lcd_clear();
 80010e4:	f006 ffa4 	bl	8008030 <lcd_clear>
			HAL_Delay(100);
 80010e8:	2064      	movs	r0, #100	; 0x64
 80010ea:	f007 fccb 	bl	8008a84 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80010ee:	4a69      	ldr	r2, [pc, #420]	; (8001294 <printTemplate+0x254>)
 80010f0:	2101      	movs	r1, #1
 80010f2:	2001      	movs	r0, #1
 80010f4:	f006 ff70 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80010f8:	4a67      	ldr	r2, [pc, #412]	; (8001298 <printTemplate+0x258>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	2002      	movs	r0, #2
 80010fe:	f006 ff6b 	bl	8007fd8 <lcd_print>
}
 8001102:	e0ac      	b.n	800125e <printTemplate+0x21e>
		} else if(page == 2) {
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d10f      	bne.n	800112a <printTemplate+0xea>
			lcd_clear();
 800110a:	f006 ff91 	bl	8008030 <lcd_clear>
			HAL_Delay(100);
 800110e:	2064      	movs	r0, #100	; 0x64
 8001110:	f007 fcb8 	bl	8008a84 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001114:	4a5f      	ldr	r2, [pc, #380]	; (8001294 <printTemplate+0x254>)
 8001116:	2101      	movs	r1, #1
 8001118:	2001      	movs	r0, #1
 800111a:	f006 ff5d 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800111e:	4a5f      	ldr	r2, [pc, #380]	; (800129c <printTemplate+0x25c>)
 8001120:	2101      	movs	r1, #1
 8001122:	2002      	movs	r0, #2
 8001124:	f006 ff58 	bl	8007fd8 <lcd_print>
}
 8001128:	e099      	b.n	800125e <printTemplate+0x21e>
		} else if(page == 3) {
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b03      	cmp	r3, #3
 800112e:	d10f      	bne.n	8001150 <printTemplate+0x110>
			lcd_clear();
 8001130:	f006 ff7e 	bl	8008030 <lcd_clear>
			HAL_Delay(100);
 8001134:	2064      	movs	r0, #100	; 0x64
 8001136:	f007 fca5 	bl	8008a84 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800113a:	4a56      	ldr	r2, [pc, #344]	; (8001294 <printTemplate+0x254>)
 800113c:	2101      	movs	r1, #1
 800113e:	2001      	movs	r0, #1
 8001140:	f006 ff4a 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001144:	4a56      	ldr	r2, [pc, #344]	; (80012a0 <printTemplate+0x260>)
 8001146:	2101      	movs	r1, #1
 8001148:	2002      	movs	r0, #2
 800114a:	f006 ff45 	bl	8007fd8 <lcd_print>
}
 800114e:	e086      	b.n	800125e <printTemplate+0x21e>
		} else if(page == 4) {
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2b04      	cmp	r3, #4
 8001154:	d10f      	bne.n	8001176 <printTemplate+0x136>
			lcd_clear();
 8001156:	f006 ff6b 	bl	8008030 <lcd_clear>
			HAL_Delay(100);
 800115a:	2064      	movs	r0, #100	; 0x64
 800115c:	f007 fc92 	bl	8008a84 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001160:	4a4c      	ldr	r2, [pc, #304]	; (8001294 <printTemplate+0x254>)
 8001162:	2101      	movs	r1, #1
 8001164:	2001      	movs	r0, #1
 8001166:	f006 ff37 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 800116a:	4a4e      	ldr	r2, [pc, #312]	; (80012a4 <printTemplate+0x264>)
 800116c:	2101      	movs	r1, #1
 800116e:	2002      	movs	r0, #2
 8001170:	f006 ff32 	bl	8007fd8 <lcd_print>
}
 8001174:	e073      	b.n	800125e <printTemplate+0x21e>
		} else if(page == 5) {
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	2b05      	cmp	r3, #5
 800117a:	d170      	bne.n	800125e <printTemplate+0x21e>
			lcd_clear();
 800117c:	f006 ff58 	bl	8008030 <lcd_clear>
			HAL_Delay(100);
 8001180:	2064      	movs	r0, #100	; 0x64
 8001182:	f007 fc7f 	bl	8008a84 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001186:	4a43      	ldr	r2, [pc, #268]	; (8001294 <printTemplate+0x254>)
 8001188:	2101      	movs	r1, #1
 800118a:	2001      	movs	r0, #1
 800118c:	f006 ff24 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001190:	4a45      	ldr	r2, [pc, #276]	; (80012a8 <printTemplate+0x268>)
 8001192:	2101      	movs	r1, #1
 8001194:	2002      	movs	r0, #2
 8001196:	f006 ff1f 	bl	8007fd8 <lcd_print>
}
 800119a:	e060      	b.n	800125e <printTemplate+0x21e>
	} else if(type == 3) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d15d      	bne.n	800125e <printTemplate+0x21e>
		if(page == 1) {
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d10f      	bne.n	80011c8 <printTemplate+0x188>
			lcd_clear();
 80011a8:	f006 ff42 	bl	8008030 <lcd_clear>
			HAL_Delay(100);
 80011ac:	2064      	movs	r0, #100	; 0x64
 80011ae:	f007 fc69 	bl	8008a84 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011b2:	4a3e      	ldr	r2, [pc, #248]	; (80012ac <printTemplate+0x26c>)
 80011b4:	2101      	movs	r1, #1
 80011b6:	2001      	movs	r0, #1
 80011b8:	f006 ff0e 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80011bc:	4a36      	ldr	r2, [pc, #216]	; (8001298 <printTemplate+0x258>)
 80011be:	2101      	movs	r1, #1
 80011c0:	2002      	movs	r0, #2
 80011c2:	f006 ff09 	bl	8007fd8 <lcd_print>
}
 80011c6:	e04a      	b.n	800125e <printTemplate+0x21e>
		} else if(page == 2) {
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d10f      	bne.n	80011ee <printTemplate+0x1ae>
			lcd_clear();
 80011ce:	f006 ff2f 	bl	8008030 <lcd_clear>
			HAL_Delay(100);
 80011d2:	2064      	movs	r0, #100	; 0x64
 80011d4:	f007 fc56 	bl	8008a84 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011d8:	4a34      	ldr	r2, [pc, #208]	; (80012ac <printTemplate+0x26c>)
 80011da:	2101      	movs	r1, #1
 80011dc:	2001      	movs	r0, #1
 80011de:	f006 fefb 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80011e2:	4a2e      	ldr	r2, [pc, #184]	; (800129c <printTemplate+0x25c>)
 80011e4:	2101      	movs	r1, #1
 80011e6:	2002      	movs	r0, #2
 80011e8:	f006 fef6 	bl	8007fd8 <lcd_print>
}
 80011ec:	e037      	b.n	800125e <printTemplate+0x21e>
		} else if(page == 3) {
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d10f      	bne.n	8001214 <printTemplate+0x1d4>
			lcd_clear();
 80011f4:	f006 ff1c 	bl	8008030 <lcd_clear>
			HAL_Delay(100);
 80011f8:	2064      	movs	r0, #100	; 0x64
 80011fa:	f007 fc43 	bl	8008a84 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011fe:	4a2b      	ldr	r2, [pc, #172]	; (80012ac <printTemplate+0x26c>)
 8001200:	2101      	movs	r1, #1
 8001202:	2001      	movs	r0, #1
 8001204:	f006 fee8 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001208:	4a25      	ldr	r2, [pc, #148]	; (80012a0 <printTemplate+0x260>)
 800120a:	2101      	movs	r1, #1
 800120c:	2002      	movs	r0, #2
 800120e:	f006 fee3 	bl	8007fd8 <lcd_print>
}
 8001212:	e024      	b.n	800125e <printTemplate+0x21e>
		} else if(page == 4) {
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2b04      	cmp	r3, #4
 8001218:	d10f      	bne.n	800123a <printTemplate+0x1fa>
			lcd_clear();
 800121a:	f006 ff09 	bl	8008030 <lcd_clear>
			HAL_Delay(100);
 800121e:	2064      	movs	r0, #100	; 0x64
 8001220:	f007 fc30 	bl	8008a84 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001224:	4a21      	ldr	r2, [pc, #132]	; (80012ac <printTemplate+0x26c>)
 8001226:	2101      	movs	r1, #1
 8001228:	2001      	movs	r0, #1
 800122a:	f006 fed5 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 800122e:	4a1d      	ldr	r2, [pc, #116]	; (80012a4 <printTemplate+0x264>)
 8001230:	2101      	movs	r1, #1
 8001232:	2002      	movs	r0, #2
 8001234:	f006 fed0 	bl	8007fd8 <lcd_print>
}
 8001238:	e011      	b.n	800125e <printTemplate+0x21e>
		} else if(page == 5) {
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	2b05      	cmp	r3, #5
 800123e:	d10e      	bne.n	800125e <printTemplate+0x21e>
			lcd_clear();
 8001240:	f006 fef6 	bl	8008030 <lcd_clear>
			HAL_Delay(100);
 8001244:	2064      	movs	r0, #100	; 0x64
 8001246:	f007 fc1d 	bl	8008a84 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800124a:	4a18      	ldr	r2, [pc, #96]	; (80012ac <printTemplate+0x26c>)
 800124c:	2101      	movs	r1, #1
 800124e:	2001      	movs	r0, #1
 8001250:	f006 fec2 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <printTemplate+0x268>)
 8001256:	2101      	movs	r1, #1
 8001258:	2002      	movs	r0, #2
 800125a:	f006 febd 	bl	8007fd8 <lcd_print>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	0800d388 	.word	0x0800d388
 800126c:	0800d390 	.word	0x0800d390
 8001270:	0800d394 	.word	0x0800d394
 8001274:	0800d398 	.word	0x0800d398
 8001278:	0800d39c 	.word	0x0800d39c
 800127c:	0800d3a0 	.word	0x0800d3a0
 8001280:	0800d3a4 	.word	0x0800d3a4
 8001284:	0800d3a8 	.word	0x0800d3a8
 8001288:	0800d3ac 	.word	0x0800d3ac
 800128c:	0800d3b0 	.word	0x0800d3b0
 8001290:	0800d3b4 	.word	0x0800d3b4
 8001294:	0800d3b8 	.word	0x0800d3b8
 8001298:	0800d3c0 	.word	0x0800d3c0
 800129c:	0800d3d4 	.word	0x0800d3d4
 80012a0:	0800d3e8 	.word	0x0800d3e8
 80012a4:	0800d3fc 	.word	0x0800d3fc
 80012a8:	0800d410 	.word	0x0800d410
 80012ac:	0800d424 	.word	0x0800d424

080012b0 <checkSlideVal>:

int checkSlideVal(int state) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d111      	bne.n	80012e2 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012be:	2101      	movs	r1, #1
 80012c0:	4813      	ldr	r0, [pc, #76]	; (8001310 <checkSlideVal+0x60>)
 80012c2:	f008 f9af 	bl	8009624 <HAL_GPIO_ReadPin>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <checkSlideVal+0x20>
			return 34;
 80012cc:	2322      	movs	r3, #34	; 0x22
 80012ce:	e01b      	b.n	8001308 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80012d0:	2108      	movs	r1, #8
 80012d2:	4810      	ldr	r0, [pc, #64]	; (8001314 <checkSlideVal+0x64>)
 80012d4:	f008 f9a6 	bl	8009624 <HAL_GPIO_ReadPin>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d113      	bne.n	8001306 <checkSlideVal+0x56>
			return 32;
 80012de:	2320      	movs	r3, #32
 80012e0:	e012      	b.n	8001308 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012e2:	2101      	movs	r1, #1
 80012e4:	480a      	ldr	r0, [pc, #40]	; (8001310 <checkSlideVal+0x60>)
 80012e6:	f008 f99d 	bl	8009624 <HAL_GPIO_ReadPin>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <checkSlideVal+0x44>
			return 35;
 80012f0:	2323      	movs	r3, #35	; 0x23
 80012f2:	e009      	b.n	8001308 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80012f4:	2108      	movs	r1, #8
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <checkSlideVal+0x64>)
 80012f8:	f008 f994 	bl	8009624 <HAL_GPIO_ReadPin>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d101      	bne.n	8001306 <checkSlideVal+0x56>
			return 33;
 8001302:	2321      	movs	r3, #33	; 0x21
 8001304:	e000      	b.n	8001308 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40010800 	.word	0x40010800
 8001314:	40011000 	.word	0x40011000

08001318 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f7fe ff7c 	bl	8000224 <strlen>
 800132c:	4603      	mov	r3, r0
 800132e:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001330:	2301      	movs	r3, #1
 8001332:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001334:	e08a      	b.n	800144c <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001336:	6838      	ldr	r0, [r7, #0]
 8001338:	f7ff ffba 	bl	80012b0 <checkSlideVal>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	dd07      	ble.n	8001352 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f7ff ffb4 	bl	80012b0 <checkSlideVal>
 8001348:	4603      	mov	r3, r0
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b44      	ldr	r3, [pc, #272]	; (8001460 <slideText+0x148>)
 800134e:	701a      	strb	r2, [r3, #0]
			break;
 8001350:	e081      	b.n	8001456 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
 8001356:	e075      	b.n	8001444 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001358:	6838      	ldr	r0, [r7, #0]
 800135a:	f7ff ffa9 	bl	80012b0 <checkSlideVal>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	dd09      	ble.n	8001378 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001364:	6838      	ldr	r0, [r7, #0]
 8001366:	f7ff ffa3 	bl	80012b0 <checkSlideVal>
 800136a:	4603      	mov	r3, r0
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <slideText+0x148>)
 8001370:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001376:	e069      	b.n	800144c <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	4413      	add	r3, r2
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	e029      	b.n	80013d6 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001382:	6838      	ldr	r0, [r7, #0]
 8001384:	f7ff ff94 	bl	80012b0 <checkSlideVal>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	dd0b      	ble.n	80013a6 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800138e:	6838      	ldr	r0, [r7, #0]
 8001390:	f7ff ff8e 	bl	80012b0 <checkSlideVal>
 8001394:	4603      	mov	r3, r0
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b31      	ldr	r3, [pc, #196]	; (8001460 <slideText+0x148>)
 800139a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80013a4:	e01d      	b.n	80013e2 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	b2d8      	uxtb	r0, r3
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	b2d9      	uxtb	r1, r3
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	f006 fe1c 	bl	8008002 <lcd_print_char>
				HAL_Delay(30);
 80013ca:	201e      	movs	r0, #30
 80013cc:	f007 fb5a 	bl	8008a84 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	3301      	adds	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	7dfa      	ldrb	r2, [r7, #23]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4413      	add	r3, r2
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	429a      	cmp	r2, r3
 80013e0:	dbcf      	blt.n	8001382 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	e023      	b.n	8001432 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80013ea:	6838      	ldr	r0, [r7, #0]
 80013ec:	f7ff ff60 	bl	80012b0 <checkSlideVal>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	dd0b      	ble.n	800140e <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80013f6:	6838      	ldr	r0, [r7, #0]
 80013f8:	f7ff ff5a 	bl	80012b0 <checkSlideVal>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <slideText+0x148>)
 8001402:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800140c:	e017      	b.n	800143e <slideText+0x126>
				}
			     if(j >= startPos) {
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	429a      	cmp	r2, r3
 8001414:	db0a      	blt.n	800142c <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	b2d1      	uxtb	r1, r2
 800141e:	2220      	movs	r2, #32
 8001420:	4618      	mov	r0, r3
 8001422:	f006 fdee 	bl	8008002 <lcd_print_char>
			    	 HAL_Delay(30);
 8001426:	201e      	movs	r0, #30
 8001428:	f007 fb2c 	bl	8008a84 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	3b01      	subs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	7dfa      	ldrb	r2, [r7, #23]
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	429a      	cmp	r2, r3
 800143c:	dad5      	bge.n	80013ea <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	3301      	adds	r3, #1
 8001442:	623b      	str	r3, [r7, #32]
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	6a3a      	ldr	r2, [r7, #32]
 8001448:	429a      	cmp	r2, r3
 800144a:	db85      	blt.n	8001358 <slideText+0x40>
	while(mainLoopVal == 1) {
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	2b01      	cmp	r3, #1
 8001450:	f43f af71 	beq.w	8001336 <slideText+0x1e>
			     }
			}
		}
	}
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200001ec 	.word	0x200001ec

08001464 <printCredentials>:

void printCredentials(int type) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d119      	bne.n	80014a6 <printCredentials+0x42>
		//machine id yazdır
		if(dilSecim == 0) {
 8001472:	4b38      	ldr	r3, [pc, #224]	; (8001554 <printCredentials+0xf0>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d105      	bne.n	8001486 <printCredentials+0x22>
			lcd_print(1, 1, "MAKINE ID       ");
 800147a:	4a37      	ldr	r2, [pc, #220]	; (8001558 <printCredentials+0xf4>)
 800147c:	2101      	movs	r1, #1
 800147e:	2001      	movs	r0, #1
 8001480:	f006 fdaa 	bl	8007fd8 <lcd_print>
 8001484:	e004      	b.n	8001490 <printCredentials+0x2c>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8001486:	4a35      	ldr	r2, [pc, #212]	; (800155c <printCredentials+0xf8>)
 8001488:	2101      	movs	r1, #1
 800148a:	2001      	movs	r0, #1
 800148c:	f006 fda4 	bl	8007fd8 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 8001490:	4a33      	ldr	r2, [pc, #204]	; (8001560 <printCredentials+0xfc>)
 8001492:	2101      	movs	r1, #1
 8001494:	2002      	movs	r0, #2
 8001496:	f006 fd9f 	bl	8007fd8 <lcd_print>
		lcd_print(2, 13, "    ");
 800149a:	4a32      	ldr	r2, [pc, #200]	; (8001564 <printCredentials+0x100>)
 800149c:	210d      	movs	r1, #13
 800149e:	2002      	movs	r0, #2
 80014a0:	f006 fd9a 	bl	8007fd8 <lcd_print>
		} else {
			//Eğer pass 16'dan büyükse kayarak yazdır
			slideText(wifiPass, 1, 2, 1);
		}
	}
}
 80014a4:	e051      	b.n	800154a <printCredentials+0xe6>
	} else if(type == 2) {
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d127      	bne.n	80014fc <printCredentials+0x98>
		int ssidLength = strlen(wifiSSID);
 80014ac:	482e      	ldr	r0, [pc, #184]	; (8001568 <printCredentials+0x104>)
 80014ae:	f7fe feb9 	bl	8000224 <strlen>
 80014b2:	4603      	mov	r3, r0
 80014b4:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 80014b6:	4a2d      	ldr	r2, [pc, #180]	; (800156c <printCredentials+0x108>)
 80014b8:	2101      	movs	r1, #1
 80014ba:	2001      	movs	r0, #1
 80014bc:	f006 fd8c 	bl	8007fd8 <lcd_print>
		if(ssidLength == 16) {
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b10      	cmp	r3, #16
 80014c4:	d105      	bne.n	80014d2 <printCredentials+0x6e>
			lcd_print(2, 1, wifiSSID);
 80014c6:	4a28      	ldr	r2, [pc, #160]	; (8001568 <printCredentials+0x104>)
 80014c8:	2101      	movs	r1, #1
 80014ca:	2002      	movs	r0, #2
 80014cc:	f006 fd84 	bl	8007fd8 <lcd_print>
}
 80014d0:	e03b      	b.n	800154a <printCredentials+0xe6>
		} else if(ssidLength < 16) {
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	dc0a      	bgt.n	80014ee <printCredentials+0x8a>
			lcd_print(2, 1, "                ");
 80014d8:	4a25      	ldr	r2, [pc, #148]	; (8001570 <printCredentials+0x10c>)
 80014da:	2101      	movs	r1, #1
 80014dc:	2002      	movs	r0, #2
 80014de:	f006 fd7b 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 80014e2:	4a21      	ldr	r2, [pc, #132]	; (8001568 <printCredentials+0x104>)
 80014e4:	2101      	movs	r1, #1
 80014e6:	2002      	movs	r0, #2
 80014e8:	f006 fd76 	bl	8007fd8 <lcd_print>
}
 80014ec:	e02d      	b.n	800154a <printCredentials+0xe6>
			slideText(wifiSSID, 1, 2, 0);
 80014ee:	2300      	movs	r3, #0
 80014f0:	2202      	movs	r2, #2
 80014f2:	2101      	movs	r1, #1
 80014f4:	481c      	ldr	r0, [pc, #112]	; (8001568 <printCredentials+0x104>)
 80014f6:	f7ff ff0f 	bl	8001318 <slideText>
}
 80014fa:	e026      	b.n	800154a <printCredentials+0xe6>
		int passLength = strlen(wifiPass);
 80014fc:	481d      	ldr	r0, [pc, #116]	; (8001574 <printCredentials+0x110>)
 80014fe:	f7fe fe91 	bl	8000224 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 8001506:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <printCredentials+0x114>)
 8001508:	2101      	movs	r1, #1
 800150a:	2001      	movs	r0, #1
 800150c:	f006 fd64 	bl	8007fd8 <lcd_print>
		if(passLength == 16) {
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b10      	cmp	r3, #16
 8001514:	d105      	bne.n	8001522 <printCredentials+0xbe>
			lcd_print(2, 1, wifiPass);
 8001516:	4a17      	ldr	r2, [pc, #92]	; (8001574 <printCredentials+0x110>)
 8001518:	2101      	movs	r1, #1
 800151a:	2002      	movs	r0, #2
 800151c:	f006 fd5c 	bl	8007fd8 <lcd_print>
}
 8001520:	e013      	b.n	800154a <printCredentials+0xe6>
		} else if(passLength < 16) {
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	dc0a      	bgt.n	800153e <printCredentials+0xda>
			lcd_print(2, 1, "                ");
 8001528:	4a11      	ldr	r2, [pc, #68]	; (8001570 <printCredentials+0x10c>)
 800152a:	2101      	movs	r1, #1
 800152c:	2002      	movs	r0, #2
 800152e:	f006 fd53 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, wifiPass);
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <printCredentials+0x110>)
 8001534:	2101      	movs	r1, #1
 8001536:	2002      	movs	r0, #2
 8001538:	f006 fd4e 	bl	8007fd8 <lcd_print>
}
 800153c:	e005      	b.n	800154a <printCredentials+0xe6>
			slideText(wifiPass, 1, 2, 1);
 800153e:	2301      	movs	r3, #1
 8001540:	2202      	movs	r2, #2
 8001542:	2101      	movs	r1, #1
 8001544:	480b      	ldr	r0, [pc, #44]	; (8001574 <printCredentials+0x110>)
 8001546:	f7ff fee7 	bl	8001318 <slideText>
}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000020d 	.word	0x2000020d
 8001558:	0800d42c 	.word	0x0800d42c
 800155c:	0800d440 	.word	0x0800d440
 8001560:	20000190 	.word	0x20000190
 8001564:	0800d454 	.word	0x0800d454
 8001568:	2000019c 	.word	0x2000019c
 800156c:	0800d45c 	.word	0x0800d45c
 8001570:	0800d470 	.word	0x0800d470
 8001574:	200001b0 	.word	0x200001b0
 8001578:	0800d484 	.word	0x0800d484

0800157c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001580:	f3bf 8f4f 	dsb	sy
}
 8001584:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <__NVIC_SystemReset+0x24>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800158e:	4904      	ldr	r1, [pc, #16]	; (80015a0 <__NVIC_SystemReset+0x24>)
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_SystemReset+0x28>)
 8001592:	4313      	orrs	r3, r2
 8001594:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001596:	f3bf 8f4f 	dsb	sy
}
 800159a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <__NVIC_SystemReset+0x20>
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	05fa0004 	.word	0x05fa0004

080015a8 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015ae:	2101      	movs	r1, #1
 80015b0:	488e      	ldr	r0, [pc, #568]	; (80017ec <menu+0x244>)
 80015b2:	f008 f837 	bl	8009624 <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	f040 808e 	bne.w	80016da <menu+0x132>
 80015be:	4b8c      	ldr	r3, [pc, #560]	; (80017f0 <menu+0x248>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	f083 0301 	eor.w	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 8086 	beq.w	80016da <menu+0x132>
		menuSayac = menuSayac+1;
 80015ce:	4b89      	ldr	r3, [pc, #548]	; (80017f4 <menu+0x24c>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b87      	ldr	r3, [pc, #540]	; (80017f4 <menu+0x24c>)
 80015d8:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80015da:	4b86      	ldr	r3, [pc, #536]	; (80017f4 <menu+0x24c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b24      	cmp	r3, #36	; 0x24
 80015e0:	d102      	bne.n	80015e8 <menu+0x40>
			menuSayac = 1;
 80015e2:	4b84      	ldr	r3, [pc, #528]	; (80017f4 <menu+0x24c>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80015e8:	4b82      	ldr	r3, [pc, #520]	; (80017f4 <menu+0x24c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b12      	cmp	r3, #18
 80015ee:	d106      	bne.n	80015fe <menu+0x56>
 80015f0:	4b81      	ldr	r3, [pc, #516]	; (80017f8 <menu+0x250>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <menu+0x56>
			menuSayac = 21;
 80015f8:	4b7e      	ldr	r3, [pc, #504]	; (80017f4 <menu+0x24c>)
 80015fa:	2215      	movs	r2, #21
 80015fc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80015fe:	4b7d      	ldr	r3, [pc, #500]	; (80017f4 <menu+0x24c>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b08      	cmp	r3, #8
 8001604:	d106      	bne.n	8001614 <menu+0x6c>
 8001606:	4b7d      	ldr	r3, [pc, #500]	; (80017fc <menu+0x254>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <menu+0x6c>
			menuSayac = 16;
 800160e:	4b79      	ldr	r3, [pc, #484]	; (80017f4 <menu+0x24c>)
 8001610:	2210      	movs	r2, #16
 8001612:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001614:	4b77      	ldr	r3, [pc, #476]	; (80017f4 <menu+0x24c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b0d      	cmp	r3, #13
 800161a:	d106      	bne.n	800162a <menu+0x82>
 800161c:	4b77      	ldr	r3, [pc, #476]	; (80017fc <menu+0x254>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d102      	bne.n	800162a <menu+0x82>
			menuSayac = 16;
 8001624:	4b73      	ldr	r3, [pc, #460]	; (80017f4 <menu+0x24c>)
 8001626:	2210      	movs	r2, #16
 8001628:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800162a:	4b72      	ldr	r3, [pc, #456]	; (80017f4 <menu+0x24c>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b09      	cmp	r3, #9
 8001630:	d106      	bne.n	8001640 <menu+0x98>
 8001632:	4b72      	ldr	r3, [pc, #456]	; (80017fc <menu+0x254>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d102      	bne.n	8001640 <menu+0x98>
			menuSayac = 13;
 800163a:	4b6e      	ldr	r3, [pc, #440]	; (80017f4 <menu+0x24c>)
 800163c:	220d      	movs	r2, #13
 800163e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001640:	4b6c      	ldr	r3, [pc, #432]	; (80017f4 <menu+0x24c>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b0a      	cmp	r3, #10
 8001646:	d10a      	bne.n	800165e <menu+0xb6>
 8001648:	4b6d      	ldr	r3, [pc, #436]	; (8001800 <menu+0x258>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d003      	beq.n	8001658 <menu+0xb0>
 8001650:	4b6b      	ldr	r3, [pc, #428]	; (8001800 <menu+0x258>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d102      	bne.n	800165e <menu+0xb6>
			menuSayac = 11;
 8001658:	4b66      	ldr	r3, [pc, #408]	; (80017f4 <menu+0x24c>)
 800165a:	220b      	movs	r2, #11
 800165c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800165e:	4b65      	ldr	r3, [pc, #404]	; (80017f4 <menu+0x24c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d10e      	bne.n	8001684 <menu+0xdc>
 8001666:	4b67      	ldr	r3, [pc, #412]	; (8001804 <menu+0x25c>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d003      	beq.n	8001676 <menu+0xce>
 800166e:	4b65      	ldr	r3, [pc, #404]	; (8001804 <menu+0x25c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d106      	bne.n	8001684 <menu+0xdc>
 8001676:	4b61      	ldr	r3, [pc, #388]	; (80017fc <menu+0x254>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d102      	bne.n	8001684 <menu+0xdc>
			menuSayac = 16;
 800167e:	4b5d      	ldr	r3, [pc, #372]	; (80017f4 <menu+0x24c>)
 8001680:	2210      	movs	r2, #16
 8001682:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001684:	4b5b      	ldr	r3, [pc, #364]	; (80017f4 <menu+0x24c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b0c      	cmp	r3, #12
 800168a:	d10e      	bne.n	80016aa <menu+0x102>
 800168c:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <menu+0x25c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d003      	beq.n	800169c <menu+0xf4>
 8001694:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <menu+0x25c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d106      	bne.n	80016aa <menu+0x102>
 800169c:	4b57      	ldr	r3, [pc, #348]	; (80017fc <menu+0x254>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d102      	bne.n	80016aa <menu+0x102>
			menuSayac = 13;
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <menu+0x24c>)
 80016a6:	220d      	movs	r2, #13
 80016a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016aa:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <menu+0x24c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	d106      	bne.n	80016c0 <menu+0x118>
 80016b2:	4b55      	ldr	r3, [pc, #340]	; (8001808 <menu+0x260>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d102      	bne.n	80016c0 <menu+0x118>
			menuSayac = 16;
 80016ba:	4b4e      	ldr	r3, [pc, #312]	; (80017f4 <menu+0x24c>)
 80016bc:	2210      	movs	r2, #16
 80016be:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80016c0:	4b4c      	ldr	r3, [pc, #304]	; (80017f4 <menu+0x24c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b18      	cmp	r3, #24
 80016c6:	d106      	bne.n	80016d6 <menu+0x12e>
 80016c8:	4b4b      	ldr	r3, [pc, #300]	; (80017f8 <menu+0x250>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <menu+0x12e>
			menuSayac = 26;
 80016d0:	4b48      	ldr	r3, [pc, #288]	; (80017f4 <menu+0x24c>)
 80016d2:	221a      	movs	r2, #26
 80016d4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016d6:	f003 fac3 	bl	8004c60 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016da:	2108      	movs	r1, #8
 80016dc:	484b      	ldr	r0, [pc, #300]	; (800180c <menu+0x264>)
 80016de:	f007 ffa1 	bl	8009624 <HAL_GPIO_ReadPin>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d175      	bne.n	80017d4 <menu+0x22c>
 80016e8:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <menu+0x248>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	f083 0301 	eor.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d06e      	beq.n	80017d4 <menu+0x22c>
		if (menuSayac <= 1) {
 80016f6:	4b3f      	ldr	r3, [pc, #252]	; (80017f4 <menu+0x24c>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d802      	bhi.n	8001704 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80016fe:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <menu+0x24c>)
 8001700:	2224      	movs	r2, #36	; 0x24
 8001702:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001704:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <menu+0x24c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	3b01      	subs	r3, #1
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <menu+0x24c>)
 800170e:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <menu+0x24c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b14      	cmp	r3, #20
 8001716:	d106      	bne.n	8001726 <menu+0x17e>
 8001718:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <menu+0x250>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <menu+0x17e>
			menuSayac = 17;
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <menu+0x24c>)
 8001722:	2211      	movs	r2, #17
 8001724:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001726:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <menu+0x24c>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b0f      	cmp	r3, #15
 800172c:	d106      	bne.n	800173c <menu+0x194>
 800172e:	4b33      	ldr	r3, [pc, #204]	; (80017fc <menu+0x254>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <menu+0x194>
			menuSayac = 7;
 8001736:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <menu+0x24c>)
 8001738:	2207      	movs	r2, #7
 800173a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800173c:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <menu+0x24c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	d106      	bne.n	8001752 <menu+0x1aa>
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <menu+0x254>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d102      	bne.n	8001752 <menu+0x1aa>
			menuSayac = 12;
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <menu+0x24c>)
 800174e:	220c      	movs	r2, #12
 8001750:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001752:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <menu+0x24c>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d106      	bne.n	8001768 <menu+0x1c0>
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <menu+0x254>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d102      	bne.n	8001768 <menu+0x1c0>
			menuSayac = 8;
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <menu+0x24c>)
 8001764:	2208      	movs	r2, #8
 8001766:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <menu+0x24c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b0a      	cmp	r3, #10
 800176e:	d10a      	bne.n	8001786 <menu+0x1de>
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <menu+0x258>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d003      	beq.n	8001780 <menu+0x1d8>
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <menu+0x258>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d102      	bne.n	8001786 <menu+0x1de>
			menuSayac = 9;
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <menu+0x24c>)
 8001782:	2209      	movs	r2, #9
 8001784:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <menu+0x24c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b0c      	cmp	r3, #12
 800178c:	d10a      	bne.n	80017a4 <menu+0x1fc>
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <menu+0x25c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d003      	beq.n	800179e <menu+0x1f6>
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <menu+0x25c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d102      	bne.n	80017a4 <menu+0x1fc>
			menuSayac = 11;
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <menu+0x24c>)
 80017a0:	220b      	movs	r2, #11
 80017a2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <menu+0x24c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d106      	bne.n	80017ba <menu+0x212>
 80017ac:	4b16      	ldr	r3, [pc, #88]	; (8001808 <menu+0x260>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d102      	bne.n	80017ba <menu+0x212>
			menuSayac = 14;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <menu+0x24c>)
 80017b6:	220e      	movs	r2, #14
 80017b8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <menu+0x24c>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b19      	cmp	r3, #25
 80017c0:	d106      	bne.n	80017d0 <menu+0x228>
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <menu+0x250>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <menu+0x228>
			menuSayac = 23;
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <menu+0x24c>)
 80017cc:	2217      	movs	r2, #23
 80017ce:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80017d0:	f003 fa46 	bl	8004c60 <bekle>
	}

	if (menuSayac == 0) {
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <menu+0x24c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d133      	bne.n	8001844 <menu+0x29c>
		if(dilSecim == 0) {
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <menu+0x268>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d121      	bne.n	8001828 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <menu+0x26c>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	2001      	movs	r0, #1
 80017ea:	e015      	b.n	8001818 <menu+0x270>
 80017ec:	40010800 	.word	0x40010800
 80017f0:	2000021b 	.word	0x2000021b
 80017f4:	200001ec 	.word	0x200001ec
 80017f8:	200001fb 	.word	0x200001fb
 80017fc:	200001f4 	.word	0x200001f4
 8001800:	200001f5 	.word	0x200001f5
 8001804:	200001f6 	.word	0x200001f6
 8001808:	200001f7 	.word	0x200001f7
 800180c:	40011000 	.word	0x40011000
 8001810:	2000020d 	.word	0x2000020d
 8001814:	0800d498 	.word	0x0800d498
 8001818:	f006 fbde 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 800181c:	4a94      	ldr	r2, [pc, #592]	; (8001a70 <menu+0x4c8>)
 800181e:	2101      	movs	r1, #1
 8001820:	2002      	movs	r0, #2
 8001822:	f006 fbd9 	bl	8007fd8 <lcd_print>
 8001826:	e00d      	b.n	8001844 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001828:	4b92      	ldr	r3, [pc, #584]	; (8001a74 <menu+0x4cc>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d109      	bne.n	8001844 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001830:	4a91      	ldr	r2, [pc, #580]	; (8001a78 <menu+0x4d0>)
 8001832:	2101      	movs	r1, #1
 8001834:	2001      	movs	r0, #1
 8001836:	f006 fbcf 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800183a:	4a90      	ldr	r2, [pc, #576]	; (8001a7c <menu+0x4d4>)
 800183c:	2101      	movs	r1, #1
 800183e:	2002      	movs	r0, #2
 8001840:	f006 fbca 	bl	8007fd8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001844:	4b8e      	ldr	r3, [pc, #568]	; (8001a80 <menu+0x4d8>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	f040 82b5 	bne.w	8001db8 <menu+0x810>
		if(dilSecim == 0) {
 800184e:	4b89      	ldr	r3, [pc, #548]	; (8001a74 <menu+0x4cc>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001856:	4a8b      	ldr	r2, [pc, #556]	; (8001a84 <menu+0x4dc>)
 8001858:	2101      	movs	r1, #1
 800185a:	2001      	movs	r0, #1
 800185c:	f006 fbbc 	bl	8007fd8 <lcd_print>
 8001860:	e008      	b.n	8001874 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001862:	4b84      	ldr	r3, [pc, #528]	; (8001a74 <menu+0x4cc>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d104      	bne.n	8001874 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800186a:	4a87      	ldr	r2, [pc, #540]	; (8001a88 <menu+0x4e0>)
 800186c:	2101      	movs	r1, #1
 800186e:	2001      	movs	r0, #1
 8001870:	f006 fbb2 	bl	8007fd8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001874:	4b85      	ldr	r3, [pc, #532]	; (8001a8c <menu+0x4e4>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d123      	bne.n	80018c4 <menu+0x31c>
			if(dilSecim == 0) {
 800187c:	4b7d      	ldr	r3, [pc, #500]	; (8001a74 <menu+0x4cc>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d105      	bne.n	8001890 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001884:	4a82      	ldr	r2, [pc, #520]	; (8001a90 <menu+0x4e8>)
 8001886:	2101      	movs	r1, #1
 8001888:	2002      	movs	r0, #2
 800188a:	f006 fba5 	bl	8007fd8 <lcd_print>
 800188e:	e008      	b.n	80018a2 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001890:	4b78      	ldr	r3, [pc, #480]	; (8001a74 <menu+0x4cc>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d104      	bne.n	80018a2 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001898:	4a7e      	ldr	r2, [pc, #504]	; (8001a94 <menu+0x4ec>)
 800189a:	2101      	movs	r1, #1
 800189c:	2002      	movs	r0, #2
 800189e:	f006 fb9b 	bl	8007fd8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80018a2:	4a7d      	ldr	r2, [pc, #500]	; (8001a98 <menu+0x4f0>)
 80018a4:	210f      	movs	r1, #15
 80018a6:	2002      	movs	r0, #2
 80018a8:	f006 fb96 	bl	8007fd8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80018ac:	4b7b      	ldr	r3, [pc, #492]	; (8001a9c <menu+0x4f4>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	220a      	movs	r2, #10
 80018b2:	497b      	ldr	r1, [pc, #492]	; (8001aa0 <menu+0x4f8>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f00a ff3d 	bl	800c734 <itoa>
			lcd_print(2, 14, snum);
 80018ba:	4a79      	ldr	r2, [pc, #484]	; (8001aa0 <menu+0x4f8>)
 80018bc:	210e      	movs	r1, #14
 80018be:	2002      	movs	r0, #2
 80018c0:	f006 fb8a 	bl	8007fd8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80018c4:	4b71      	ldr	r3, [pc, #452]	; (8001a8c <menu+0x4e4>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d123      	bne.n	8001914 <menu+0x36c>
			if(dilSecim == 0) {
 80018cc:	4b69      	ldr	r3, [pc, #420]	; (8001a74 <menu+0x4cc>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d105      	bne.n	80018e0 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80018d4:	4a73      	ldr	r2, [pc, #460]	; (8001aa4 <menu+0x4fc>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	2002      	movs	r0, #2
 80018da:	f006 fb7d 	bl	8007fd8 <lcd_print>
 80018de:	e008      	b.n	80018f2 <menu+0x34a>
			} else if(dilSecim == 1) {
 80018e0:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <menu+0x4cc>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d104      	bne.n	80018f2 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80018e8:	4a6f      	ldr	r2, [pc, #444]	; (8001aa8 <menu+0x500>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	2002      	movs	r0, #2
 80018ee:	f006 fb73 	bl	8007fd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018f2:	4a6e      	ldr	r2, [pc, #440]	; (8001aac <menu+0x504>)
 80018f4:	210f      	movs	r1, #15
 80018f6:	2002      	movs	r0, #2
 80018f8:	f006 fb6e 	bl	8007fd8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80018fc:	4b6c      	ldr	r3, [pc, #432]	; (8001ab0 <menu+0x508>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	220a      	movs	r2, #10
 8001902:	4967      	ldr	r1, [pc, #412]	; (8001aa0 <menu+0x4f8>)
 8001904:	4618      	mov	r0, r3
 8001906:	f00a ff15 	bl	800c734 <itoa>
			lcd_print(2, 14, snum);
 800190a:	4a65      	ldr	r2, [pc, #404]	; (8001aa0 <menu+0x4f8>)
 800190c:	210e      	movs	r1, #14
 800190e:	2002      	movs	r0, #2
 8001910:	f006 fb62 	bl	8007fd8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001914:	4b5d      	ldr	r3, [pc, #372]	; (8001a8c <menu+0x4e4>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d123      	bne.n	8001964 <menu+0x3bc>
			if(dilSecim == 0) {
 800191c:	4b55      	ldr	r3, [pc, #340]	; (8001a74 <menu+0x4cc>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d105      	bne.n	8001930 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001924:	4a63      	ldr	r2, [pc, #396]	; (8001ab4 <menu+0x50c>)
 8001926:	2101      	movs	r1, #1
 8001928:	2002      	movs	r0, #2
 800192a:	f006 fb55 	bl	8007fd8 <lcd_print>
 800192e:	e008      	b.n	8001942 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001930:	4b50      	ldr	r3, [pc, #320]	; (8001a74 <menu+0x4cc>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d104      	bne.n	8001942 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001938:	4a5f      	ldr	r2, [pc, #380]	; (8001ab8 <menu+0x510>)
 800193a:	2101      	movs	r1, #1
 800193c:	2002      	movs	r0, #2
 800193e:	f006 fb4b 	bl	8007fd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001942:	4a5a      	ldr	r2, [pc, #360]	; (8001aac <menu+0x504>)
 8001944:	210f      	movs	r1, #15
 8001946:	2002      	movs	r0, #2
 8001948:	f006 fb46 	bl	8007fd8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800194c:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <menu+0x514>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	220a      	movs	r2, #10
 8001952:	4953      	ldr	r1, [pc, #332]	; (8001aa0 <menu+0x4f8>)
 8001954:	4618      	mov	r0, r3
 8001956:	f00a feed 	bl	800c734 <itoa>
			lcd_print(2, 14, snum);
 800195a:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <menu+0x4f8>)
 800195c:	210e      	movs	r1, #14
 800195e:	2002      	movs	r0, #2
 8001960:	f006 fb3a 	bl	8007fd8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001964:	4b49      	ldr	r3, [pc, #292]	; (8001a8c <menu+0x4e4>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d123      	bne.n	80019b4 <menu+0x40c>
			if(dilSecim == 0) {
 800196c:	4b41      	ldr	r3, [pc, #260]	; (8001a74 <menu+0x4cc>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d105      	bne.n	8001980 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001974:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <menu+0x518>)
 8001976:	2101      	movs	r1, #1
 8001978:	2002      	movs	r0, #2
 800197a:	f006 fb2d 	bl	8007fd8 <lcd_print>
 800197e:	e008      	b.n	8001992 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001980:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <menu+0x4cc>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d104      	bne.n	8001992 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001988:	4a4e      	ldr	r2, [pc, #312]	; (8001ac4 <menu+0x51c>)
 800198a:	2101      	movs	r1, #1
 800198c:	2002      	movs	r0, #2
 800198e:	f006 fb23 	bl	8007fd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001992:	4a46      	ldr	r2, [pc, #280]	; (8001aac <menu+0x504>)
 8001994:	210f      	movs	r1, #15
 8001996:	2002      	movs	r0, #2
 8001998:	f006 fb1e 	bl	8007fd8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800199c:	4b4a      	ldr	r3, [pc, #296]	; (8001ac8 <menu+0x520>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	220a      	movs	r2, #10
 80019a2:	493f      	ldr	r1, [pc, #252]	; (8001aa0 <menu+0x4f8>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00a fec5 	bl	800c734 <itoa>
			lcd_print(2, 14, snum);
 80019aa:	4a3d      	ldr	r2, [pc, #244]	; (8001aa0 <menu+0x4f8>)
 80019ac:	210e      	movs	r1, #14
 80019ae:	2002      	movs	r0, #2
 80019b0:	f006 fb12 	bl	8007fd8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80019b4:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <menu+0x4e4>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d123      	bne.n	8001a04 <menu+0x45c>
			if(dilSecim == 0) {
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <menu+0x4cc>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80019c4:	4a41      	ldr	r2, [pc, #260]	; (8001acc <menu+0x524>)
 80019c6:	2101      	movs	r1, #1
 80019c8:	2002      	movs	r0, #2
 80019ca:	f006 fb05 	bl	8007fd8 <lcd_print>
 80019ce:	e008      	b.n	80019e2 <menu+0x43a>
			} else if(dilSecim == 1) {
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <menu+0x4cc>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d104      	bne.n	80019e2 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80019d8:	4a3d      	ldr	r2, [pc, #244]	; (8001ad0 <menu+0x528>)
 80019da:	2101      	movs	r1, #1
 80019dc:	2002      	movs	r0, #2
 80019de:	f006 fafb 	bl	8007fd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019e2:	4a32      	ldr	r2, [pc, #200]	; (8001aac <menu+0x504>)
 80019e4:	210f      	movs	r1, #15
 80019e6:	2002      	movs	r0, #2
 80019e8:	f006 faf6 	bl	8007fd8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <menu+0x52c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	220a      	movs	r2, #10
 80019f2:	492b      	ldr	r1, [pc, #172]	; (8001aa0 <menu+0x4f8>)
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00a fe9d 	bl	800c734 <itoa>
			lcd_print(2, 14, snum);
 80019fa:	4a29      	ldr	r2, [pc, #164]	; (8001aa0 <menu+0x4f8>)
 80019fc:	210e      	movs	r1, #14
 80019fe:	2002      	movs	r0, #2
 8001a00:	f006 faea 	bl	8007fd8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <menu+0x4e4>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d123      	bne.n	8001a54 <menu+0x4ac>
			if(dilSecim == 0) {
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <menu+0x4cc>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d105      	bne.n	8001a20 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001a14:	4a30      	ldr	r2, [pc, #192]	; (8001ad8 <menu+0x530>)
 8001a16:	2101      	movs	r1, #1
 8001a18:	2002      	movs	r0, #2
 8001a1a:	f006 fadd 	bl	8007fd8 <lcd_print>
 8001a1e:	e008      	b.n	8001a32 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <menu+0x4cc>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d104      	bne.n	8001a32 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001a28:	4a2c      	ldr	r2, [pc, #176]	; (8001adc <menu+0x534>)
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f006 fad3 	bl	8007fd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <menu+0x504>)
 8001a34:	210f      	movs	r1, #15
 8001a36:	2002      	movs	r0, #2
 8001a38:	f006 face 	bl	8007fd8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001a3c:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <menu+0x538>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	220a      	movs	r2, #10
 8001a42:	4917      	ldr	r1, [pc, #92]	; (8001aa0 <menu+0x4f8>)
 8001a44:	4618      	mov	r0, r3
 8001a46:	f00a fe75 	bl	800c734 <itoa>
			lcd_print(2, 14, snum);
 8001a4a:	4a15      	ldr	r2, [pc, #84]	; (8001aa0 <menu+0x4f8>)
 8001a4c:	210e      	movs	r1, #14
 8001a4e:	2002      	movs	r0, #2
 8001a50:	f006 fac2 	bl	8007fd8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <menu+0x4e4>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b06      	cmp	r3, #6
 8001a5a:	d15f      	bne.n	8001b1c <menu+0x574>
			if(dilSecim == 0) {
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <menu+0x4cc>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d141      	bne.n	8001ae8 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001a64:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <menu+0x53c>)
 8001a66:	2101      	movs	r1, #1
 8001a68:	2002      	movs	r0, #2
 8001a6a:	f006 fab5 	bl	8007fd8 <lcd_print>
 8001a6e:	e044      	b.n	8001afa <menu+0x552>
 8001a70:	0800d4ac 	.word	0x0800d4ac
 8001a74:	2000020d 	.word	0x2000020d
 8001a78:	0800d4c0 	.word	0x0800d4c0
 8001a7c:	0800d4d4 	.word	0x0800d4d4
 8001a80:	200001ec 	.word	0x200001ec
 8001a84:	0800d4e8 	.word	0x0800d4e8
 8001a88:	0800d4fc 	.word	0x0800d4fc
 8001a8c:	200001ee 	.word	0x200001ee
 8001a90:	0800d510 	.word	0x0800d510
 8001a94:	0800d520 	.word	0x0800d520
 8001a98:	0800d530 	.word	0x0800d530
 8001a9c:	2000020e 	.word	0x2000020e
 8001aa0:	20000188 	.word	0x20000188
 8001aa4:	0800d534 	.word	0x0800d534
 8001aa8:	0800d544 	.word	0x0800d544
 8001aac:	0800d554 	.word	0x0800d554
 8001ab0:	2000020f 	.word	0x2000020f
 8001ab4:	0800d558 	.word	0x0800d558
 8001ab8:	0800d568 	.word	0x0800d568
 8001abc:	20000210 	.word	0x20000210
 8001ac0:	0800d578 	.word	0x0800d578
 8001ac4:	0800d588 	.word	0x0800d588
 8001ac8:	20000211 	.word	0x20000211
 8001acc:	0800d598 	.word	0x0800d598
 8001ad0:	0800d5a8 	.word	0x0800d5a8
 8001ad4:	20000212 	.word	0x20000212
 8001ad8:	0800d5b8 	.word	0x0800d5b8
 8001adc:	0800d5c8 	.word	0x0800d5c8
 8001ae0:	20000213 	.word	0x20000213
 8001ae4:	0800d5d8 	.word	0x0800d5d8
			} else if(dilSecim == 1) {
 8001ae8:	4b4f      	ldr	r3, [pc, #316]	; (8001c28 <menu+0x680>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d104      	bne.n	8001afa <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001af0:	4a4e      	ldr	r2, [pc, #312]	; (8001c2c <menu+0x684>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	2002      	movs	r0, #2
 8001af6:	f006 fa6f 	bl	8007fd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001afa:	4a4d      	ldr	r2, [pc, #308]	; (8001c30 <menu+0x688>)
 8001afc:	210f      	movs	r1, #15
 8001afe:	2002      	movs	r0, #2
 8001b00:	f006 fa6a 	bl	8007fd8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001b04:	4b4b      	ldr	r3, [pc, #300]	; (8001c34 <menu+0x68c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	220a      	movs	r2, #10
 8001b0a:	494b      	ldr	r1, [pc, #300]	; (8001c38 <menu+0x690>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f00a fe11 	bl	800c734 <itoa>
			lcd_print(2, 14, snum);
 8001b12:	4a49      	ldr	r2, [pc, #292]	; (8001c38 <menu+0x690>)
 8001b14:	210e      	movs	r1, #14
 8001b16:	2002      	movs	r0, #2
 8001b18:	f006 fa5e 	bl	8007fd8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001b1c:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <menu+0x694>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b07      	cmp	r3, #7
 8001b22:	d123      	bne.n	8001b6c <menu+0x5c4>
			if(dilSecim == 0) {
 8001b24:	4b40      	ldr	r3, [pc, #256]	; (8001c28 <menu+0x680>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d105      	bne.n	8001b38 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001b2c:	4a44      	ldr	r2, [pc, #272]	; (8001c40 <menu+0x698>)
 8001b2e:	2101      	movs	r1, #1
 8001b30:	2002      	movs	r0, #2
 8001b32:	f006 fa51 	bl	8007fd8 <lcd_print>
 8001b36:	e008      	b.n	8001b4a <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001b38:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <menu+0x680>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d104      	bne.n	8001b4a <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001b40:	4a40      	ldr	r2, [pc, #256]	; (8001c44 <menu+0x69c>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	2002      	movs	r0, #2
 8001b46:	f006 fa47 	bl	8007fd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b4a:	4a39      	ldr	r2, [pc, #228]	; (8001c30 <menu+0x688>)
 8001b4c:	210f      	movs	r1, #15
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f006 fa42 	bl	8007fd8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001b54:	4b3c      	ldr	r3, [pc, #240]	; (8001c48 <menu+0x6a0>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	220a      	movs	r2, #10
 8001b5a:	4937      	ldr	r1, [pc, #220]	; (8001c38 <menu+0x690>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00a fde9 	bl	800c734 <itoa>
			lcd_print(2, 14, snum);
 8001b62:	4a35      	ldr	r2, [pc, #212]	; (8001c38 <menu+0x690>)
 8001b64:	210e      	movs	r1, #14
 8001b66:	2002      	movs	r0, #2
 8001b68:	f006 fa36 	bl	8007fd8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001b6c:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <menu+0x694>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d123      	bne.n	8001bbc <menu+0x614>
			if(dilSecim == 0) {
 8001b74:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <menu+0x680>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d105      	bne.n	8001b88 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001b7c:	4a33      	ldr	r2, [pc, #204]	; (8001c4c <menu+0x6a4>)
 8001b7e:	2101      	movs	r1, #1
 8001b80:	2002      	movs	r0, #2
 8001b82:	f006 fa29 	bl	8007fd8 <lcd_print>
 8001b86:	e008      	b.n	8001b9a <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001b88:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <menu+0x680>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d104      	bne.n	8001b9a <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001b90:	4a2f      	ldr	r2, [pc, #188]	; (8001c50 <menu+0x6a8>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	2002      	movs	r0, #2
 8001b96:	f006 fa1f 	bl	8007fd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b9a:	4a25      	ldr	r2, [pc, #148]	; (8001c30 <menu+0x688>)
 8001b9c:	210f      	movs	r1, #15
 8001b9e:	2002      	movs	r0, #2
 8001ba0:	f006 fa1a 	bl	8007fd8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <menu+0x6ac>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	220a      	movs	r2, #10
 8001baa:	4923      	ldr	r1, [pc, #140]	; (8001c38 <menu+0x690>)
 8001bac:	4618      	mov	r0, r3
 8001bae:	f00a fdc1 	bl	800c734 <itoa>
			lcd_print(2, 14, snum);
 8001bb2:	4a21      	ldr	r2, [pc, #132]	; (8001c38 <menu+0x690>)
 8001bb4:	210e      	movs	r1, #14
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f006 fa0e 	bl	8007fd8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <menu+0x694>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b09      	cmp	r3, #9
 8001bc2:	d123      	bne.n	8001c0c <menu+0x664>
			if(dilSecim == 0) {
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <menu+0x680>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001bcc:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <menu+0x6b0>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f006 fa01 	bl	8007fd8 <lcd_print>
 8001bd6:	e008      	b.n	8001bea <menu+0x642>
			} else if(dilSecim == 1) {
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <menu+0x680>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d104      	bne.n	8001bea <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001be0:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <menu+0x6b4>)
 8001be2:	2101      	movs	r1, #1
 8001be4:	2002      	movs	r0, #2
 8001be6:	f006 f9f7 	bl	8007fd8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001bea:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <menu+0x6b8>)
 8001bec:	2110      	movs	r1, #16
 8001bee:	2002      	movs	r0, #2
 8001bf0:	f006 f9f2 	bl	8007fd8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <menu+0x6bc>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	220a      	movs	r2, #10
 8001bfa:	490f      	ldr	r1, [pc, #60]	; (8001c38 <menu+0x690>)
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f00a fd99 	bl	800c734 <itoa>
			lcd_print(2, 15, snum);
 8001c02:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <menu+0x690>)
 8001c04:	210f      	movs	r1, #15
 8001c06:	2002      	movs	r0, #2
 8001c08:	f006 f9e6 	bl	8007fd8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <menu+0x694>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b0a      	cmp	r3, #10
 8001c12:	d134      	bne.n	8001c7e <menu+0x6d6>
			if(dilSecim == 0) {
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <menu+0x680>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d127      	bne.n	8001c6c <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001c1c:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <menu+0x6c0>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	2002      	movs	r0, #2
 8001c22:	f006 f9d9 	bl	8007fd8 <lcd_print>
 8001c26:	e02a      	b.n	8001c7e <menu+0x6d6>
 8001c28:	2000020d 	.word	0x2000020d
 8001c2c:	0800d5e8 	.word	0x0800d5e8
 8001c30:	0800d554 	.word	0x0800d554
 8001c34:	20000214 	.word	0x20000214
 8001c38:	20000188 	.word	0x20000188
 8001c3c:	200001ee 	.word	0x200001ee
 8001c40:	0800d5f8 	.word	0x0800d5f8
 8001c44:	0800d608 	.word	0x0800d608
 8001c48:	20000215 	.word	0x20000215
 8001c4c:	0800d618 	.word	0x0800d618
 8001c50:	0800d628 	.word	0x0800d628
 8001c54:	20000216 	.word	0x20000216
 8001c58:	0800d638 	.word	0x0800d638
 8001c5c:	0800d648 	.word	0x0800d648
 8001c60:	0800d658 	.word	0x0800d658
 8001c64:	20000217 	.word	0x20000217
 8001c68:	0800d65c 	.word	0x0800d65c
			} else if(dilSecim == 1) {
 8001c6c:	4b82      	ldr	r3, [pc, #520]	; (8001e78 <menu+0x8d0>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d104      	bne.n	8001c7e <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001c74:	4a81      	ldr	r2, [pc, #516]	; (8001e7c <menu+0x8d4>)
 8001c76:	2101      	movs	r1, #1
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f006 f9ad 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c7e:	2102      	movs	r1, #2
 8001c80:	487f      	ldr	r0, [pc, #508]	; (8001e80 <menu+0x8d8>)
 8001c82:	f007 fccf 	bl	8009624 <HAL_GPIO_ReadPin>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d119      	bne.n	8001cc0 <menu+0x718>
 8001c8c:	4b7d      	ldr	r3, [pc, #500]	; (8001e84 <menu+0x8dc>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	f083 0301 	eor.w	r3, r3, #1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d012      	beq.n	8001cc0 <menu+0x718>
 8001c9a:	4b7b      	ldr	r3, [pc, #492]	; (8001e88 <menu+0x8e0>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10e      	bne.n	8001cc0 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001ca2:	4b7a      	ldr	r3, [pc, #488]	; (8001e8c <menu+0x8e4>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b78      	ldr	r3, [pc, #480]	; (8001e8c <menu+0x8e4>)
 8001cac:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001cae:	4b77      	ldr	r3, [pc, #476]	; (8001e8c <menu+0x8e4>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b0a      	cmp	r3, #10
 8001cb4:	d902      	bls.n	8001cbc <menu+0x714>
				hataGostermeSirasi = 0;
 8001cb6:	4b75      	ldr	r3, [pc, #468]	; (8001e8c <menu+0x8e4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cbc:	f002 ffd0 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cc0:	2104      	movs	r1, #4
 8001cc2:	486f      	ldr	r0, [pc, #444]	; (8001e80 <menu+0x8d8>)
 8001cc4:	f007 fcae 	bl	8009624 <HAL_GPIO_ReadPin>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d119      	bne.n	8001d02 <menu+0x75a>
 8001cce:	4b6d      	ldr	r3, [pc, #436]	; (8001e84 <menu+0x8dc>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f083 0301 	eor.w	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d012      	beq.n	8001d02 <menu+0x75a>
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <menu+0x8e0>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10e      	bne.n	8001d02 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001ce4:	4b69      	ldr	r3, [pc, #420]	; (8001e8c <menu+0x8e4>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	4b67      	ldr	r3, [pc, #412]	; (8001e8c <menu+0x8e4>)
 8001cee:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001cf0:	4b66      	ldr	r3, [pc, #408]	; (8001e8c <menu+0x8e4>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b0b      	cmp	r3, #11
 8001cf6:	d902      	bls.n	8001cfe <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001cf8:	4b64      	ldr	r3, [pc, #400]	; (8001e8c <menu+0x8e4>)
 8001cfa:	220a      	movs	r2, #10
 8001cfc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001cfe:	f002 ffaf 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001d02:	2108      	movs	r1, #8
 8001d04:	485e      	ldr	r0, [pc, #376]	; (8001e80 <menu+0x8d8>)
 8001d06:	f007 fc8d 	bl	8009624 <HAL_GPIO_ReadPin>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d153      	bne.n	8001db8 <menu+0x810>
 8001d10:	4b5c      	ldr	r3, [pc, #368]	; (8001e84 <menu+0x8dc>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	f083 0301 	eor.w	r3, r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d04c      	beq.n	8001db8 <menu+0x810>
 8001d1e:	4b5b      	ldr	r3, [pc, #364]	; (8001e8c <menu+0x8e4>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b0a      	cmp	r3, #10
 8001d24:	d148      	bne.n	8001db8 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001d26:	4b5a      	ldr	r3, [pc, #360]	; (8001e90 <menu+0x8e8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <menu+0x8ec>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001d34:	4b58      	ldr	r3, [pc, #352]	; (8001e98 <menu+0x8f0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	4b56      	ldr	r3, [pc, #344]	; (8001e94 <menu+0x8ec>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001d42:	4b56      	ldr	r3, [pc, #344]	; (8001e9c <menu+0x8f4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	4b52      	ldr	r3, [pc, #328]	; (8001e94 <menu+0x8ec>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001d50:	4b53      	ldr	r3, [pc, #332]	; (8001ea0 <menu+0x8f8>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	4b4f      	ldr	r3, [pc, #316]	; (8001e94 <menu+0x8ec>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001d5e:	4b51      	ldr	r3, [pc, #324]	; (8001ea4 <menu+0x8fc>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <menu+0x8ec>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001d6c:	4b4e      	ldr	r3, [pc, #312]	; (8001ea8 <menu+0x900>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	4b48      	ldr	r3, [pc, #288]	; (8001e94 <menu+0x8ec>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001d7a:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <menu+0x904>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <menu+0x8ec>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001d88:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <menu+0x908>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <menu+0x8ec>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001d96:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <menu+0x90c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <menu+0x8ec>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001da4:	4b44      	ldr	r3, [pc, #272]	; (8001eb8 <menu+0x910>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <menu+0x8ec>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001db2:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <menu+0x914>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001db8:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <menu+0x918>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	f040 80fc 	bne.w	8001fba <menu+0xa12>
		if(dilSecim == 0) {
 8001dc2:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <menu+0x8d0>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001dca:	4a3e      	ldr	r2, [pc, #248]	; (8001ec4 <menu+0x91c>)
 8001dcc:	2101      	movs	r1, #1
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f006 f902 	bl	8007fd8 <lcd_print>
 8001dd4:	e008      	b.n	8001de8 <menu+0x840>
		} else if(dilSecim == 1) {
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <menu+0x8d0>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d104      	bne.n	8001de8 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001dde:	4a3a      	ldr	r2, [pc, #232]	; (8001ec8 <menu+0x920>)
 8001de0:	2101      	movs	r1, #1
 8001de2:	2001      	movs	r0, #1
 8001de4:	f006 f8f8 	bl	8007fd8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <menu+0x8e0>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d003      	beq.n	8001df8 <menu+0x850>
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <menu+0x8e0>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d112      	bne.n	8001e1e <menu+0x876>
			if(dilSecim == 0) {
 8001df8:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <menu+0x8d0>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001e00:	4a32      	ldr	r2, [pc, #200]	; (8001ecc <menu+0x924>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	2002      	movs	r0, #2
 8001e06:	f006 f8e7 	bl	8007fd8 <lcd_print>
 8001e0a:	e008      	b.n	8001e1e <menu+0x876>
			} else if(dilSecim == 1) {
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <menu+0x8d0>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d104      	bne.n	8001e1e <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001e14:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <menu+0x928>)
 8001e16:	2101      	movs	r1, #1
 8001e18:	2002      	movs	r0, #2
 8001e1a:	f006 f8dd 	bl	8007fd8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <menu+0x92c>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <menu+0x8ac>
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <menu+0x8e0>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d112      	bne.n	8001e54 <menu+0x8ac>
			if(dilSecim == 0) {
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <menu+0x8d0>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001e36:	4a28      	ldr	r2, [pc, #160]	; (8001ed8 <menu+0x930>)
 8001e38:	2101      	movs	r1, #1
 8001e3a:	2002      	movs	r0, #2
 8001e3c:	f006 f8cc 	bl	8007fd8 <lcd_print>
 8001e40:	e008      	b.n	8001e54 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <menu+0x8d0>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d104      	bne.n	8001e54 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001e4a:	4a24      	ldr	r2, [pc, #144]	; (8001edc <menu+0x934>)
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	2002      	movs	r0, #2
 8001e50:	f006 f8c2 	bl	8007fd8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <menu+0x92c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d14c      	bne.n	8001ef6 <menu+0x94e>
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <menu+0x8e0>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d148      	bne.n	8001ef6 <menu+0x94e>
			if(dilSecim == 0) {
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <menu+0x8d0>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d13b      	bne.n	8001ee4 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <menu+0x938>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	2002      	movs	r0, #2
 8001e72:	f006 f8b1 	bl	8007fd8 <lcd_print>
 8001e76:	e03e      	b.n	8001ef6 <menu+0x94e>
 8001e78:	2000020d 	.word	0x2000020d
 8001e7c:	0800d670 	.word	0x0800d670
 8001e80:	40010800 	.word	0x40010800
 8001e84:	2000021b 	.word	0x2000021b
 8001e88:	200001fb 	.word	0x200001fb
 8001e8c:	200001ee 	.word	0x200001ee
 8001e90:	2000020e 	.word	0x2000020e
 8001e94:	20000118 	.word	0x20000118
 8001e98:	2000020f 	.word	0x2000020f
 8001e9c:	20000210 	.word	0x20000210
 8001ea0:	20000211 	.word	0x20000211
 8001ea4:	20000212 	.word	0x20000212
 8001ea8:	20000213 	.word	0x20000213
 8001eac:	20000214 	.word	0x20000214
 8001eb0:	20000215 	.word	0x20000215
 8001eb4:	20000216 	.word	0x20000216
 8001eb8:	20000217 	.word	0x20000217
 8001ebc:	20000218 	.word	0x20000218
 8001ec0:	200001ec 	.word	0x200001ec
 8001ec4:	0800d684 	.word	0x0800d684
 8001ec8:	0800d698 	.word	0x0800d698
 8001ecc:	0800d6ac 	.word	0x0800d6ac
 8001ed0:	0800d6c0 	.word	0x0800d6c0
 8001ed4:	200001ed 	.word	0x200001ed
 8001ed8:	0800d6d4 	.word	0x0800d6d4
 8001edc:	0800d6e4 	.word	0x0800d6e4
 8001ee0:	0800d6f4 	.word	0x0800d6f4
			} else if(dilSecim == 1) {
 8001ee4:	4b98      	ldr	r3, [pc, #608]	; (8002148 <menu+0xba0>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d104      	bne.n	8001ef6 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001eec:	4a97      	ldr	r2, [pc, #604]	; (800214c <menu+0xba4>)
 8001eee:	2101      	movs	r1, #1
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f006 f871 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	4895      	ldr	r0, [pc, #596]	; (8002150 <menu+0xba8>)
 8001efa:	f007 fb93 	bl	8009624 <HAL_GPIO_ReadPin>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d119      	bne.n	8001f38 <menu+0x990>
 8001f04:	4b93      	ldr	r3, [pc, #588]	; (8002154 <menu+0xbac>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	f083 0301 	eor.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d012      	beq.n	8001f38 <menu+0x990>
 8001f12:	4b91      	ldr	r3, [pc, #580]	; (8002158 <menu+0xbb0>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10e      	bne.n	8001f38 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001f1a:	4b90      	ldr	r3, [pc, #576]	; (800215c <menu+0xbb4>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b8e      	ldr	r3, [pc, #568]	; (800215c <menu+0xbb4>)
 8001f24:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001f26:	4b8d      	ldr	r3, [pc, #564]	; (800215c <menu+0xbb4>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d902      	bls.n	8001f34 <menu+0x98c>
				calismaSekli = 0;
 8001f2e:	4b8b      	ldr	r3, [pc, #556]	; (800215c <menu+0xbb4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f34:	f002 fe94 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f38:	2104      	movs	r1, #4
 8001f3a:	4885      	ldr	r0, [pc, #532]	; (8002150 <menu+0xba8>)
 8001f3c:	f007 fb72 	bl	8009624 <HAL_GPIO_ReadPin>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d119      	bne.n	8001f7a <menu+0x9d2>
 8001f46:	4b83      	ldr	r3, [pc, #524]	; (8002154 <menu+0xbac>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	f083 0301 	eor.w	r3, r3, #1
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <menu+0x9d2>
 8001f54:	4b80      	ldr	r3, [pc, #512]	; (8002158 <menu+0xbb0>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10e      	bne.n	8001f7a <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001f5c:	4b7f      	ldr	r3, [pc, #508]	; (800215c <menu+0xbb4>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b7d      	ldr	r3, [pc, #500]	; (800215c <menu+0xbb4>)
 8001f66:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001f68:	4b7c      	ldr	r3, [pc, #496]	; (800215c <menu+0xbb4>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <menu+0x9ce>
	    		calismaSekli = 1;
 8001f70:	4b7a      	ldr	r3, [pc, #488]	; (800215c <menu+0xbb4>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001f76:	f002 fe73 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f7a:	2108      	movs	r1, #8
 8001f7c:	4874      	ldr	r0, [pc, #464]	; (8002150 <menu+0xba8>)
 8001f7e:	f007 fb51 	bl	8009624 <HAL_GPIO_ReadPin>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d118      	bne.n	8001fba <menu+0xa12>
 8001f88:	4b72      	ldr	r3, [pc, #456]	; (8002154 <menu+0xbac>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	f083 0301 	eor.w	r3, r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d011      	beq.n	8001fba <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001f96:	4b71      	ldr	r3, [pc, #452]	; (800215c <menu+0xbb4>)
 8001f98:	781a      	ldrb	r2, [r3, #0]
 8001f9a:	4b71      	ldr	r3, [pc, #452]	; (8002160 <menu+0xbb8>)
 8001f9c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001f9e:	4b6f      	ldr	r3, [pc, #444]	; (800215c <menu+0xbb4>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d106      	bne.n	8001fb4 <menu+0xa0c>
				altLimit = 1;
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <menu+0xbbc>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001fac:	4b6d      	ldr	r3, [pc, #436]	; (8002164 <menu+0xbbc>)
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	4b6b      	ldr	r3, [pc, #428]	; (8002160 <menu+0xbb8>)
 8001fb2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001fb4:	4b6c      	ldr	r3, [pc, #432]	; (8002168 <menu+0xbc0>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001fba:	4b6c      	ldr	r3, [pc, #432]	; (800216c <menu+0xbc4>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	f040 8083 	bne.w	80020ca <menu+0xb22>
		if(dilSecim == 0) {
 8001fc4:	4b60      	ldr	r3, [pc, #384]	; (8002148 <menu+0xba0>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001fcc:	4a68      	ldr	r2, [pc, #416]	; (8002170 <menu+0xbc8>)
 8001fce:	2101      	movs	r1, #1
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f006 f801 	bl	8007fd8 <lcd_print>
 8001fd6:	e008      	b.n	8001fea <menu+0xa42>
		} else if(dilSecim == 1) {
 8001fd8:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <menu+0xba0>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d104      	bne.n	8001fea <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001fe0:	4a64      	ldr	r2, [pc, #400]	; (8002174 <menu+0xbcc>)
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f005 fff7 	bl	8007fd8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001fea:	4b63      	ldr	r3, [pc, #396]	; (8002178 <menu+0xbd0>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d113      	bne.n	800201a <menu+0xa72>
			if(dilSecim == 0) {
 8001ff2:	4b55      	ldr	r3, [pc, #340]	; (8002148 <menu+0xba0>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001ffa:	4a60      	ldr	r2, [pc, #384]	; (800217c <menu+0xbd4>)
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	2002      	movs	r0, #2
 8002000:	f005 ffea 	bl	8007fd8 <lcd_print>
 8002004:	e012      	b.n	800202c <menu+0xa84>
			} else if(dilSecim == 1) {
 8002006:	4b50      	ldr	r3, [pc, #320]	; (8002148 <menu+0xba0>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d10e      	bne.n	800202c <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 800200e:	4a5c      	ldr	r2, [pc, #368]	; (8002180 <menu+0xbd8>)
 8002010:	2101      	movs	r1, #1
 8002012:	2002      	movs	r0, #2
 8002014:	f005 ffe0 	bl	8007fd8 <lcd_print>
 8002018:	e008      	b.n	800202c <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 800201a:	4b57      	ldr	r3, [pc, #348]	; (8002178 <menu+0xbd0>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d104      	bne.n	800202c <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8002022:	4a58      	ldr	r2, [pc, #352]	; (8002184 <menu+0xbdc>)
 8002024:	2101      	movs	r1, #1
 8002026:	2002      	movs	r0, #2
 8002028:	f005 ffd6 	bl	8007fd8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800202c:	2102      	movs	r1, #2
 800202e:	4848      	ldr	r0, [pc, #288]	; (8002150 <menu+0xba8>)
 8002030:	f007 faf8 	bl	8009624 <HAL_GPIO_ReadPin>
 8002034:	4603      	mov	r3, r0
 8002036:	2b01      	cmp	r3, #1
 8002038:	d115      	bne.n	8002066 <menu+0xabe>
 800203a:	4b46      	ldr	r3, [pc, #280]	; (8002154 <menu+0xbac>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	f083 0301 	eor.w	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8002048:	4b4b      	ldr	r3, [pc, #300]	; (8002178 <menu+0xbd0>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	3301      	adds	r3, #1
 800204e:	b2da      	uxtb	r2, r3
 8002050:	4b49      	ldr	r3, [pc, #292]	; (8002178 <menu+0xbd0>)
 8002052:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8002054:	4b48      	ldr	r3, [pc, #288]	; (8002178 <menu+0xbd0>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d902      	bls.n	8002062 <menu+0xaba>
				emniyetCercevesi = 0;
 800205c:	4b46      	ldr	r3, [pc, #280]	; (8002178 <menu+0xbd0>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002062:	f002 fdfd 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002066:	2104      	movs	r1, #4
 8002068:	4839      	ldr	r0, [pc, #228]	; (8002150 <menu+0xba8>)
 800206a:	f007 fadb 	bl	8009624 <HAL_GPIO_ReadPin>
 800206e:	4603      	mov	r3, r0
 8002070:	2b01      	cmp	r3, #1
 8002072:	d115      	bne.n	80020a0 <menu+0xaf8>
 8002074:	4b37      	ldr	r3, [pc, #220]	; (8002154 <menu+0xbac>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f083 0301 	eor.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00e      	beq.n	80020a0 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <menu+0xbd0>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	3b01      	subs	r3, #1
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <menu+0xbd0>)
 800208c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 800208e:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <menu+0xbd0>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8002096:	4b38      	ldr	r3, [pc, #224]	; (8002178 <menu+0xbd0>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800209c:	f002 fde0 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80020a0:	2108      	movs	r1, #8
 80020a2:	482b      	ldr	r0, [pc, #172]	; (8002150 <menu+0xba8>)
 80020a4:	f007 fabe 	bl	8009624 <HAL_GPIO_ReadPin>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d10d      	bne.n	80020ca <menu+0xb22>
 80020ae:	4b29      	ldr	r3, [pc, #164]	; (8002154 <menu+0xbac>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	f083 0301 	eor.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 80020bc:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <menu+0xbd0>)
 80020be:	781a      	ldrb	r2, [r3, #0]
 80020c0:	4b27      	ldr	r3, [pc, #156]	; (8002160 <menu+0xbb8>)
 80020c2:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80020c4:	4b28      	ldr	r3, [pc, #160]	; (8002168 <menu+0xbc0>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80020ca:	4b28      	ldr	r3, [pc, #160]	; (800216c <menu+0xbc4>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	f040 80ba 	bne.w	8002248 <menu+0xca0>
		if(dilSecim == 0) {
 80020d4:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <menu+0xba0>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 80020dc:	4a2a      	ldr	r2, [pc, #168]	; (8002188 <menu+0xbe0>)
 80020de:	2101      	movs	r1, #1
 80020e0:	2001      	movs	r0, #1
 80020e2:	f005 ff79 	bl	8007fd8 <lcd_print>
 80020e6:	e008      	b.n	80020fa <menu+0xb52>
		} else if(dilSecim == 1) {
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <menu+0xba0>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d104      	bne.n	80020fa <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 80020f0:	4a26      	ldr	r2, [pc, #152]	; (800218c <menu+0xbe4>)
 80020f2:	2101      	movs	r1, #1
 80020f4:	2001      	movs	r0, #1
 80020f6:	f005 ff6f 	bl	8007fd8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 80020fa:	4b25      	ldr	r3, [pc, #148]	; (8002190 <menu+0xbe8>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d113      	bne.n	800212a <menu+0xb82>
			if(dilSecim == 0) {
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <menu+0xba0>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d105      	bne.n	8002116 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 800210a:	4a1c      	ldr	r2, [pc, #112]	; (800217c <menu+0xbd4>)
 800210c:	2101      	movs	r1, #1
 800210e:	2002      	movs	r0, #2
 8002110:	f005 ff62 	bl	8007fd8 <lcd_print>
 8002114:	e049      	b.n	80021aa <menu+0xc02>
			} else if(dilSecim == 1) {
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <menu+0xba0>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d145      	bne.n	80021aa <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 800211e:	4a18      	ldr	r2, [pc, #96]	; (8002180 <menu+0xbd8>)
 8002120:	2101      	movs	r1, #1
 8002122:	2002      	movs	r0, #2
 8002124:	f005 ff58 	bl	8007fd8 <lcd_print>
 8002128:	e03f      	b.n	80021aa <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 800212a:	4b19      	ldr	r3, [pc, #100]	; (8002190 <menu+0xbe8>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d13b      	bne.n	80021aa <menu+0xc02>
			if(dilSecim == 0) {
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <menu+0xba0>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d12e      	bne.n	8002198 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 800213a:	4a16      	ldr	r2, [pc, #88]	; (8002194 <menu+0xbec>)
 800213c:	2101      	movs	r1, #1
 800213e:	2002      	movs	r0, #2
 8002140:	f005 ff4a 	bl	8007fd8 <lcd_print>
 8002144:	e031      	b.n	80021aa <menu+0xc02>
 8002146:	bf00      	nop
 8002148:	2000020d 	.word	0x2000020d
 800214c:	0800d704 	.word	0x0800d704
 8002150:	40010800 	.word	0x40010800
 8002154:	2000021b 	.word	0x2000021b
 8002158:	200001fb 	.word	0x200001fb
 800215c:	200001ed 	.word	0x200001ed
 8002160:	20000118 	.word	0x20000118
 8002164:	200001f2 	.word	0x200001f2
 8002168:	20000218 	.word	0x20000218
 800216c:	200001ec 	.word	0x200001ec
 8002170:	0800d714 	.word	0x0800d714
 8002174:	0800d728 	.word	0x0800d728
 8002178:	200001f0 	.word	0x200001f0
 800217c:	0800d73c 	.word	0x0800d73c
 8002180:	0800d750 	.word	0x0800d750
 8002184:	0800d764 	.word	0x0800d764
 8002188:	0800d774 	.word	0x0800d774
 800218c:	0800d788 	.word	0x0800d788
 8002190:	200001f1 	.word	0x200001f1
 8002194:	0800d79c 	.word	0x0800d79c
			} else if(dilSecim == 1) {
 8002198:	4b92      	ldr	r3, [pc, #584]	; (80023e4 <menu+0xe3c>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d104      	bne.n	80021aa <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80021a0:	4a91      	ldr	r2, [pc, #580]	; (80023e8 <menu+0xe40>)
 80021a2:	2101      	movs	r1, #1
 80021a4:	2002      	movs	r0, #2
 80021a6:	f005 ff17 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021aa:	2102      	movs	r1, #2
 80021ac:	488f      	ldr	r0, [pc, #572]	; (80023ec <menu+0xe44>)
 80021ae:	f007 fa39 	bl	8009624 <HAL_GPIO_ReadPin>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d115      	bne.n	80021e4 <menu+0xc3c>
 80021b8:	4b8d      	ldr	r3, [pc, #564]	; (80023f0 <menu+0xe48>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	f083 0301 	eor.w	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00e      	beq.n	80021e4 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80021c6:	4b8b      	ldr	r3, [pc, #556]	; (80023f4 <menu+0xe4c>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b89      	ldr	r3, [pc, #548]	; (80023f4 <menu+0xe4c>)
 80021d0:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80021d2:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <menu+0xe4c>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d902      	bls.n	80021e0 <menu+0xc38>
				yavaslamaLimit = 0;
 80021da:	4b86      	ldr	r3, [pc, #536]	; (80023f4 <menu+0xe4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021e0:	f002 fd3e 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021e4:	2104      	movs	r1, #4
 80021e6:	4881      	ldr	r0, [pc, #516]	; (80023ec <menu+0xe44>)
 80021e8:	f007 fa1c 	bl	8009624 <HAL_GPIO_ReadPin>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d115      	bne.n	800221e <menu+0xc76>
 80021f2:	4b7f      	ldr	r3, [pc, #508]	; (80023f0 <menu+0xe48>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	f083 0301 	eor.w	r3, r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00e      	beq.n	800221e <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002200:	4b7c      	ldr	r3, [pc, #496]	; (80023f4 <menu+0xe4c>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	3b01      	subs	r3, #1
 8002206:	b2da      	uxtb	r2, r3
 8002208:	4b7a      	ldr	r3, [pc, #488]	; (80023f4 <menu+0xe4c>)
 800220a:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800220c:	4b79      	ldr	r3, [pc, #484]	; (80023f4 <menu+0xe4c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <menu+0xc72>
		   		yavaslamaLimit = 1;
 8002214:	4b77      	ldr	r3, [pc, #476]	; (80023f4 <menu+0xe4c>)
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800221a:	f002 fd21 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800221e:	2108      	movs	r1, #8
 8002220:	4872      	ldr	r0, [pc, #456]	; (80023ec <menu+0xe44>)
 8002222:	f007 f9ff 	bl	8009624 <HAL_GPIO_ReadPin>
 8002226:	4603      	mov	r3, r0
 8002228:	2b01      	cmp	r3, #1
 800222a:	d10d      	bne.n	8002248 <menu+0xca0>
 800222c:	4b70      	ldr	r3, [pc, #448]	; (80023f0 <menu+0xe48>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	f083 0301 	eor.w	r3, r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 800223a:	4b6e      	ldr	r3, [pc, #440]	; (80023f4 <menu+0xe4c>)
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	4b6e      	ldr	r3, [pc, #440]	; (80023f8 <menu+0xe50>)
 8002240:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002242:	4b6e      	ldr	r3, [pc, #440]	; (80023fc <menu+0xe54>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002248:	4b6d      	ldr	r3, [pc, #436]	; (8002400 <menu+0xe58>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b05      	cmp	r3, #5
 800224e:	f040 80b9 	bne.w	80023c4 <menu+0xe1c>
		if(dilSecim == 0) {
 8002252:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <menu+0xe3c>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d105      	bne.n	8002266 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 800225a:	4a6a      	ldr	r2, [pc, #424]	; (8002404 <menu+0xe5c>)
 800225c:	2101      	movs	r1, #1
 800225e:	2001      	movs	r0, #1
 8002260:	f005 feba 	bl	8007fd8 <lcd_print>
 8002264:	e008      	b.n	8002278 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8002266:	4b5f      	ldr	r3, [pc, #380]	; (80023e4 <menu+0xe3c>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d104      	bne.n	8002278 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800226e:	4a66      	ldr	r2, [pc, #408]	; (8002408 <menu+0xe60>)
 8002270:	2101      	movs	r1, #1
 8002272:	2001      	movs	r0, #1
 8002274:	f005 feb0 	bl	8007fd8 <lcd_print>
		}

		if(altLimit == 0) {
 8002278:	4b64      	ldr	r3, [pc, #400]	; (800240c <menu+0xe64>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d113      	bne.n	80022a8 <menu+0xd00>
			if(dilSecim == 0) {
 8002280:	4b58      	ldr	r3, [pc, #352]	; (80023e4 <menu+0xe3c>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002288:	4a61      	ldr	r2, [pc, #388]	; (8002410 <menu+0xe68>)
 800228a:	2101      	movs	r1, #1
 800228c:	2002      	movs	r0, #2
 800228e:	f005 fea3 	bl	8007fd8 <lcd_print>
 8002292:	e020      	b.n	80022d6 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8002294:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <menu+0xe3c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d11c      	bne.n	80022d6 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 800229c:	4a5d      	ldr	r2, [pc, #372]	; (8002414 <menu+0xe6c>)
 800229e:	2101      	movs	r1, #1
 80022a0:	2002      	movs	r0, #2
 80022a2:	f005 fe99 	bl	8007fd8 <lcd_print>
 80022a6:	e016      	b.n	80022d6 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80022a8:	4b58      	ldr	r3, [pc, #352]	; (800240c <menu+0xe64>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d112      	bne.n	80022d6 <menu+0xd2e>
			if(dilSecim == 0){
 80022b0:	4b4c      	ldr	r3, [pc, #304]	; (80023e4 <menu+0xe3c>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80022b8:	4a57      	ldr	r2, [pc, #348]	; (8002418 <menu+0xe70>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	2002      	movs	r0, #2
 80022be:	f005 fe8b 	bl	8007fd8 <lcd_print>
 80022c2:	e008      	b.n	80022d6 <menu+0xd2e>
			} else if(dilSecim == 1){
 80022c4:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <menu+0xe3c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d104      	bne.n	80022d6 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80022cc:	4a46      	ldr	r2, [pc, #280]	; (80023e8 <menu+0xe40>)
 80022ce:	2101      	movs	r1, #1
 80022d0:	2002      	movs	r0, #2
 80022d2:	f005 fe81 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80022d6:	2102      	movs	r1, #2
 80022d8:	4844      	ldr	r0, [pc, #272]	; (80023ec <menu+0xe44>)
 80022da:	f007 f9a3 	bl	8009624 <HAL_GPIO_ReadPin>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d119      	bne.n	8002318 <menu+0xd70>
 80022e4:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <menu+0xe48>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f083 0301 	eor.w	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d012      	beq.n	8002318 <menu+0xd70>
 80022f2:	4b4a      	ldr	r3, [pc, #296]	; (800241c <menu+0xe74>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10e      	bne.n	8002318 <menu+0xd70>
			altLimit = altLimit + 1;
 80022fa:	4b44      	ldr	r3, [pc, #272]	; (800240c <menu+0xe64>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b42      	ldr	r3, [pc, #264]	; (800240c <menu+0xe64>)
 8002304:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8002306:	4b41      	ldr	r3, [pc, #260]	; (800240c <menu+0xe64>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d902      	bls.n	8002314 <menu+0xd6c>
				altLimit = 0;
 800230e:	4b3f      	ldr	r3, [pc, #252]	; (800240c <menu+0xe64>)
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002314:	f002 fca4 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002318:	2104      	movs	r1, #4
 800231a:	4834      	ldr	r0, [pc, #208]	; (80023ec <menu+0xe44>)
 800231c:	f007 f982 	bl	8009624 <HAL_GPIO_ReadPin>
 8002320:	4603      	mov	r3, r0
 8002322:	2b01      	cmp	r3, #1
 8002324:	d119      	bne.n	800235a <menu+0xdb2>
 8002326:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <menu+0xe48>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	f083 0301 	eor.w	r3, r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d012      	beq.n	800235a <menu+0xdb2>
 8002334:	4b39      	ldr	r3, [pc, #228]	; (800241c <menu+0xe74>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10e      	bne.n	800235a <menu+0xdb2>
			altLimit = altLimit - 1;
 800233c:	4b33      	ldr	r3, [pc, #204]	; (800240c <menu+0xe64>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	3b01      	subs	r3, #1
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b31      	ldr	r3, [pc, #196]	; (800240c <menu+0xe64>)
 8002346:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <menu+0xe64>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <menu+0xdae>
		   		altLimit = 1;
 8002350:	4b2e      	ldr	r3, [pc, #184]	; (800240c <menu+0xe64>)
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002356:	f002 fc83 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800235a:	2108      	movs	r1, #8
 800235c:	4823      	ldr	r0, [pc, #140]	; (80023ec <menu+0xe44>)
 800235e:	f007 f961 	bl	8009624 <HAL_GPIO_ReadPin>
 8002362:	4603      	mov	r3, r0
 8002364:	2b01      	cmp	r3, #1
 8002366:	d12d      	bne.n	80023c4 <menu+0xe1c>
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <menu+0xe48>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	f083 0301 	eor.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d026      	beq.n	80023c4 <menu+0xe1c>
			eepromData[5] = altLimit;
 8002376:	4b25      	ldr	r3, [pc, #148]	; (800240c <menu+0xe64>)
 8002378:	781a      	ldrb	r2, [r3, #0]
 800237a:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <menu+0xe50>)
 800237c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800237e:	4b23      	ldr	r3, [pc, #140]	; (800240c <menu+0xe64>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d110      	bne.n	80023a8 <menu+0xe00>
 8002386:	4b26      	ldr	r3, [pc, #152]	; (8002420 <menu+0xe78>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <menu+0xdee>
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <menu+0xe78>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d108      	bne.n	80023a8 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <menu+0xe78>)
 8002398:	2203      	movs	r2, #3
 800239a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <menu+0xe78>)
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <menu+0xe50>)
 80023a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80023a6:	e00a      	b.n	80023be <menu+0xe16>
			} else if(altLimit == 0) {
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <menu+0xe64>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d106      	bne.n	80023be <menu+0xe16>
				platformSilindirTipi = 0;
 80023b0:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <menu+0xe7c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <menu+0xe7c>)
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <menu+0xe50>)
 80023bc:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <menu+0xe54>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <menu+0xe58>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b06      	cmp	r3, #6
 80023ca:	f040 80b6 	bne.w	800253a <menu+0xf92>
		if(dilSecim == 0) {
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <menu+0xe3c>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d12a      	bne.n	800242c <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80023d6:	4a14      	ldr	r2, [pc, #80]	; (8002428 <menu+0xe80>)
 80023d8:	2101      	movs	r1, #1
 80023da:	2001      	movs	r0, #1
 80023dc:	f005 fdfc 	bl	8007fd8 <lcd_print>
 80023e0:	e02d      	b.n	800243e <menu+0xe96>
 80023e2:	bf00      	nop
 80023e4:	2000020d 	.word	0x2000020d
 80023e8:	0800d7b0 	.word	0x0800d7b0
 80023ec:	40010800 	.word	0x40010800
 80023f0:	2000021b 	.word	0x2000021b
 80023f4:	200001f1 	.word	0x200001f1
 80023f8:	20000118 	.word	0x20000118
 80023fc:	20000218 	.word	0x20000218
 8002400:	200001ec 	.word	0x200001ec
 8002404:	0800d7c4 	.word	0x0800d7c4
 8002408:	0800d7d8 	.word	0x0800d7d8
 800240c:	200001f2 	.word	0x200001f2
 8002410:	0800d73c 	.word	0x0800d73c
 8002414:	0800d750 	.word	0x0800d750
 8002418:	0800d79c 	.word	0x0800d79c
 800241c:	200001ed 	.word	0x200001ed
 8002420:	200001f9 	.word	0x200001f9
 8002424:	200001ff 	.word	0x200001ff
 8002428:	0800d7ec 	.word	0x0800d7ec
		} else if(dilSecim == 1){
 800242c:	4b7a      	ldr	r3, [pc, #488]	; (8002618 <menu+0x1070>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d104      	bne.n	800243e <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002434:	4a79      	ldr	r2, [pc, #484]	; (800261c <menu+0x1074>)
 8002436:	2101      	movs	r1, #1
 8002438:	2001      	movs	r0, #1
 800243a:	f005 fdcd 	bl	8007fd8 <lcd_print>
		}
		if(basincSalteri == 0){
 800243e:	4b78      	ldr	r3, [pc, #480]	; (8002620 <menu+0x1078>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d113      	bne.n	800246e <menu+0xec6>
			if(dilSecim == 0) {
 8002446:	4b74      	ldr	r3, [pc, #464]	; (8002618 <menu+0x1070>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d105      	bne.n	800245a <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 800244e:	4a75      	ldr	r2, [pc, #468]	; (8002624 <menu+0x107c>)
 8002450:	2101      	movs	r1, #1
 8002452:	2002      	movs	r0, #2
 8002454:	f005 fdc0 	bl	8007fd8 <lcd_print>
 8002458:	e020      	b.n	800249c <menu+0xef4>
			} else if(dilSecim == 1){
 800245a:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <menu+0x1070>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d11c      	bne.n	800249c <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8002462:	4a71      	ldr	r2, [pc, #452]	; (8002628 <menu+0x1080>)
 8002464:	2101      	movs	r1, #1
 8002466:	2002      	movs	r0, #2
 8002468:	f005 fdb6 	bl	8007fd8 <lcd_print>
 800246c:	e016      	b.n	800249c <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800246e:	4b6c      	ldr	r3, [pc, #432]	; (8002620 <menu+0x1078>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d112      	bne.n	800249c <menu+0xef4>
			if(dilSecim == 0) {
 8002476:	4b68      	ldr	r3, [pc, #416]	; (8002618 <menu+0x1070>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800247e:	4a6b      	ldr	r2, [pc, #428]	; (800262c <menu+0x1084>)
 8002480:	2101      	movs	r1, #1
 8002482:	2002      	movs	r0, #2
 8002484:	f005 fda8 	bl	8007fd8 <lcd_print>
 8002488:	e008      	b.n	800249c <menu+0xef4>
			} else if(dilSecim == 1) {
 800248a:	4b63      	ldr	r3, [pc, #396]	; (8002618 <menu+0x1070>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d104      	bne.n	800249c <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8002492:	4a67      	ldr	r2, [pc, #412]	; (8002630 <menu+0x1088>)
 8002494:	2101      	movs	r1, #1
 8002496:	2002      	movs	r0, #2
 8002498:	f005 fd9e 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800249c:	2102      	movs	r1, #2
 800249e:	4865      	ldr	r0, [pc, #404]	; (8002634 <menu+0x108c>)
 80024a0:	f007 f8c0 	bl	8009624 <HAL_GPIO_ReadPin>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d115      	bne.n	80024d6 <menu+0xf2e>
 80024aa:	4b63      	ldr	r3, [pc, #396]	; (8002638 <menu+0x1090>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	f083 0301 	eor.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00e      	beq.n	80024d6 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80024b8:	4b59      	ldr	r3, [pc, #356]	; (8002620 <menu+0x1078>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b57      	ldr	r3, [pc, #348]	; (8002620 <menu+0x1078>)
 80024c2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80024c4:	4b56      	ldr	r3, [pc, #344]	; (8002620 <menu+0x1078>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d902      	bls.n	80024d2 <menu+0xf2a>
				basincSalteri = 0;
 80024cc:	4b54      	ldr	r3, [pc, #336]	; (8002620 <menu+0x1078>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024d2:	f002 fbc5 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024d6:	2104      	movs	r1, #4
 80024d8:	4856      	ldr	r0, [pc, #344]	; (8002634 <menu+0x108c>)
 80024da:	f007 f8a3 	bl	8009624 <HAL_GPIO_ReadPin>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d115      	bne.n	8002510 <menu+0xf68>
 80024e4:	4b54      	ldr	r3, [pc, #336]	; (8002638 <menu+0x1090>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	f083 0301 	eor.w	r3, r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00e      	beq.n	8002510 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80024f2:	4b4b      	ldr	r3, [pc, #300]	; (8002620 <menu+0x1078>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b49      	ldr	r3, [pc, #292]	; (8002620 <menu+0x1078>)
 80024fc:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80024fe:	4b48      	ldr	r3, [pc, #288]	; (8002620 <menu+0x1078>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <menu+0xf64>
		   		basincSalteri = 1;
 8002506:	4b46      	ldr	r3, [pc, #280]	; (8002620 <menu+0x1078>)
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800250c:	f002 fba8 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002510:	2108      	movs	r1, #8
 8002512:	4848      	ldr	r0, [pc, #288]	; (8002634 <menu+0x108c>)
 8002514:	f007 f886 	bl	8009624 <HAL_GPIO_ReadPin>
 8002518:	4603      	mov	r3, r0
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10d      	bne.n	800253a <menu+0xf92>
 800251e:	4b46      	ldr	r3, [pc, #280]	; (8002638 <menu+0x1090>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	f083 0301 	eor.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <menu+0xf92>
			eepromData[6] = basincSalteri;
 800252c:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <menu+0x1078>)
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	4b42      	ldr	r3, [pc, #264]	; (800263c <menu+0x1094>)
 8002532:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002534:	4b42      	ldr	r3, [pc, #264]	; (8002640 <menu+0x1098>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800253a:	4b42      	ldr	r3, [pc, #264]	; (8002644 <menu+0x109c>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b07      	cmp	r3, #7
 8002540:	f040 80f5 	bne.w	800272e <menu+0x1186>
		if(dilSecim == 0) {
 8002544:	4b34      	ldr	r3, [pc, #208]	; (8002618 <menu+0x1070>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800254c:	4a3e      	ldr	r2, [pc, #248]	; (8002648 <menu+0x10a0>)
 800254e:	2101      	movs	r1, #1
 8002550:	2001      	movs	r0, #1
 8002552:	f005 fd41 	bl	8007fd8 <lcd_print>
 8002556:	e008      	b.n	800256a <menu+0xfc2>
		} else if(dilSecim == 1){
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <menu+0x1070>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d104      	bne.n	800256a <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002560:	4a3a      	ldr	r2, [pc, #232]	; (800264c <menu+0x10a4>)
 8002562:	2101      	movs	r1, #1
 8002564:	2001      	movs	r0, #1
 8002566:	f005 fd37 	bl	8007fd8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800256a:	4b39      	ldr	r3, [pc, #228]	; (8002650 <menu+0x10a8>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d113      	bne.n	800259a <menu+0xff2>
			if(dilSecim == 0) {
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <menu+0x1070>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800257a:	4a2a      	ldr	r2, [pc, #168]	; (8002624 <menu+0x107c>)
 800257c:	2101      	movs	r1, #1
 800257e:	2002      	movs	r0, #2
 8002580:	f005 fd2a 	bl	8007fd8 <lcd_print>
 8002584:	e079      	b.n	800267a <menu+0x10d2>
			} else if(dilSecim == 1){
 8002586:	4b24      	ldr	r3, [pc, #144]	; (8002618 <menu+0x1070>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d175      	bne.n	800267a <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800258e:	4a26      	ldr	r2, [pc, #152]	; (8002628 <menu+0x1080>)
 8002590:	2101      	movs	r1, #1
 8002592:	2002      	movs	r0, #2
 8002594:	f005 fd20 	bl	8007fd8 <lcd_print>
 8002598:	e06f      	b.n	800267a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800259a:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <menu+0x10a8>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d113      	bne.n	80025ca <menu+0x1022>
			if(dilSecim == 0) {
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <menu+0x1070>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80025aa:	4a2a      	ldr	r2, [pc, #168]	; (8002654 <menu+0x10ac>)
 80025ac:	2101      	movs	r1, #1
 80025ae:	2002      	movs	r0, #2
 80025b0:	f005 fd12 	bl	8007fd8 <lcd_print>
 80025b4:	e061      	b.n	800267a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <menu+0x1070>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d15d      	bne.n	800267a <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80025be:	4a26      	ldr	r2, [pc, #152]	; (8002658 <menu+0x10b0>)
 80025c0:	2101      	movs	r1, #1
 80025c2:	2002      	movs	r0, #2
 80025c4:	f005 fd08 	bl	8007fd8 <lcd_print>
 80025c8:	e057      	b.n	800267a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80025ca:	4b21      	ldr	r3, [pc, #132]	; (8002650 <menu+0x10a8>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d113      	bne.n	80025fa <menu+0x1052>
			if(dilSecim == 0) {
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <menu+0x1070>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80025da:	4a20      	ldr	r2, [pc, #128]	; (800265c <menu+0x10b4>)
 80025dc:	2101      	movs	r1, #1
 80025de:	2002      	movs	r0, #2
 80025e0:	f005 fcfa 	bl	8007fd8 <lcd_print>
 80025e4:	e049      	b.n	800267a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <menu+0x1070>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d145      	bne.n	800267a <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80025ee:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <menu+0x10b8>)
 80025f0:	2101      	movs	r1, #1
 80025f2:	2002      	movs	r0, #2
 80025f4:	f005 fcf0 	bl	8007fd8 <lcd_print>
 80025f8:	e03f      	b.n	800267a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <menu+0x10a8>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d13b      	bne.n	800267a <menu+0x10d2>
			if(dilSecim == 0) {
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <menu+0x1070>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d12e      	bne.n	8002668 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800260a:	4a16      	ldr	r2, [pc, #88]	; (8002664 <menu+0x10bc>)
 800260c:	2101      	movs	r1, #1
 800260e:	2002      	movs	r0, #2
 8002610:	f005 fce2 	bl	8007fd8 <lcd_print>
 8002614:	e031      	b.n	800267a <menu+0x10d2>
 8002616:	bf00      	nop
 8002618:	2000020d 	.word	0x2000020d
 800261c:	0800d7fc 	.word	0x0800d7fc
 8002620:	200001f3 	.word	0x200001f3
 8002624:	0800d73c 	.word	0x0800d73c
 8002628:	0800d750 	.word	0x0800d750
 800262c:	0800d79c 	.word	0x0800d79c
 8002630:	0800d7b0 	.word	0x0800d7b0
 8002634:	40010800 	.word	0x40010800
 8002638:	2000021b 	.word	0x2000021b
 800263c:	20000118 	.word	0x20000118
 8002640:	20000218 	.word	0x20000218
 8002644:	200001ec 	.word	0x200001ec
 8002648:	0800d80c 	.word	0x0800d80c
 800264c:	0800d820 	.word	0x0800d820
 8002650:	200001f4 	.word	0x200001f4
 8002654:	0800d834 	.word	0x0800d834
 8002658:	0800d848 	.word	0x0800d848
 800265c:	0800d85c 	.word	0x0800d85c
 8002660:	0800d870 	.word	0x0800d870
 8002664:	0800d884 	.word	0x0800d884
			} else if(dilSecim == 1){
 8002668:	4b99      	ldr	r3, [pc, #612]	; (80028d0 <menu+0x1328>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d104      	bne.n	800267a <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002670:	4a98      	ldr	r2, [pc, #608]	; (80028d4 <menu+0x132c>)
 8002672:	2101      	movs	r1, #1
 8002674:	2002      	movs	r0, #2
 8002676:	f005 fcaf 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800267a:	2102      	movs	r1, #2
 800267c:	4896      	ldr	r0, [pc, #600]	; (80028d8 <menu+0x1330>)
 800267e:	f006 ffd1 	bl	8009624 <HAL_GPIO_ReadPin>
 8002682:	4603      	mov	r3, r0
 8002684:	2b01      	cmp	r3, #1
 8002686:	d115      	bne.n	80026b4 <menu+0x110c>
 8002688:	4b94      	ldr	r3, [pc, #592]	; (80028dc <menu+0x1334>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	f083 0301 	eor.w	r3, r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00e      	beq.n	80026b4 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002696:	4b92      	ldr	r3, [pc, #584]	; (80028e0 <menu+0x1338>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b90      	ldr	r3, [pc, #576]	; (80028e0 <menu+0x1338>)
 80026a0:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80026a2:	4b8f      	ldr	r3, [pc, #572]	; (80028e0 <menu+0x1338>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d902      	bls.n	80026b0 <menu+0x1108>
				kapiSecimleri = 0;
 80026aa:	4b8d      	ldr	r3, [pc, #564]	; (80028e0 <menu+0x1338>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026b0:	f002 fad6 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026b4:	2104      	movs	r1, #4
 80026b6:	4888      	ldr	r0, [pc, #544]	; (80028d8 <menu+0x1330>)
 80026b8:	f006 ffb4 	bl	8009624 <HAL_GPIO_ReadPin>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d115      	bne.n	80026ee <menu+0x1146>
 80026c2:	4b86      	ldr	r3, [pc, #536]	; (80028dc <menu+0x1334>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	f083 0301 	eor.w	r3, r3, #1
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00e      	beq.n	80026ee <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80026d0:	4b83      	ldr	r3, [pc, #524]	; (80028e0 <menu+0x1338>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	4b81      	ldr	r3, [pc, #516]	; (80028e0 <menu+0x1338>)
 80026da:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80026dc:	4b80      	ldr	r3, [pc, #512]	; (80028e0 <menu+0x1338>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d902      	bls.n	80026ea <menu+0x1142>
		   		kapiSecimleri = 3;
 80026e4:	4b7e      	ldr	r3, [pc, #504]	; (80028e0 <menu+0x1338>)
 80026e6:	2203      	movs	r2, #3
 80026e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026ea:	f002 fab9 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ee:	2108      	movs	r1, #8
 80026f0:	4879      	ldr	r0, [pc, #484]	; (80028d8 <menu+0x1330>)
 80026f2:	f006 ff97 	bl	8009624 <HAL_GPIO_ReadPin>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d118      	bne.n	800272e <menu+0x1186>
 80026fc:	4b77      	ldr	r3, [pc, #476]	; (80028dc <menu+0x1334>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	f083 0301 	eor.w	r3, r3, #1
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d011      	beq.n	800272e <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 800270a:	4b75      	ldr	r3, [pc, #468]	; (80028e0 <menu+0x1338>)
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	4b75      	ldr	r3, [pc, #468]	; (80028e4 <menu+0x133c>)
 8002710:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002712:	4b73      	ldr	r3, [pc, #460]	; (80028e0 <menu+0x1338>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d006      	beq.n	8002728 <menu+0x1180>
				altLimit = 1;
 800271a:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <menu+0x1340>)
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002720:	4b71      	ldr	r3, [pc, #452]	; (80028e8 <menu+0x1340>)
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	4b6f      	ldr	r3, [pc, #444]	; (80028e4 <menu+0x133c>)
 8002726:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002728:	4b70      	ldr	r3, [pc, #448]	; (80028ec <menu+0x1344>)
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800272e:	4b70      	ldr	r3, [pc, #448]	; (80028f0 <menu+0x1348>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b08      	cmp	r3, #8
 8002734:	f040 8092 	bne.w	800285c <menu+0x12b4>
		if(dilSecim == 0) {
 8002738:	4b65      	ldr	r3, [pc, #404]	; (80028d0 <menu+0x1328>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002740:	4a6c      	ldr	r2, [pc, #432]	; (80028f4 <menu+0x134c>)
 8002742:	2101      	movs	r1, #1
 8002744:	2001      	movs	r0, #1
 8002746:	f005 fc47 	bl	8007fd8 <lcd_print>
 800274a:	e008      	b.n	800275e <menu+0x11b6>
		} else if(dilSecim == 1) {
 800274c:	4b60      	ldr	r3, [pc, #384]	; (80028d0 <menu+0x1328>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d104      	bne.n	800275e <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002754:	4a68      	ldr	r2, [pc, #416]	; (80028f8 <menu+0x1350>)
 8002756:	2101      	movs	r1, #1
 8002758:	2001      	movs	r0, #1
 800275a:	f005 fc3d 	bl	8007fd8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800275e:	4b67      	ldr	r3, [pc, #412]	; (80028fc <menu+0x1354>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d113      	bne.n	800278e <menu+0x11e6>
			if(dilSecim == 0) {
 8002766:	4b5a      	ldr	r3, [pc, #360]	; (80028d0 <menu+0x1328>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d105      	bne.n	800277a <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800276e:	4a64      	ldr	r2, [pc, #400]	; (8002900 <menu+0x1358>)
 8002770:	2101      	movs	r1, #1
 8002772:	2002      	movs	r0, #2
 8002774:	f005 fc30 	bl	8007fd8 <lcd_print>
 8002778:	e020      	b.n	80027bc <menu+0x1214>
			} else if(dilSecim == 1) {
 800277a:	4b55      	ldr	r3, [pc, #340]	; (80028d0 <menu+0x1328>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d11c      	bne.n	80027bc <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002782:	4a60      	ldr	r2, [pc, #384]	; (8002904 <menu+0x135c>)
 8002784:	2101      	movs	r1, #1
 8002786:	2002      	movs	r0, #2
 8002788:	f005 fc26 	bl	8007fd8 <lcd_print>
 800278c:	e016      	b.n	80027bc <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800278e:	4b5b      	ldr	r3, [pc, #364]	; (80028fc <menu+0x1354>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d112      	bne.n	80027bc <menu+0x1214>
			if(dilSecim == 0){
 8002796:	4b4e      	ldr	r3, [pc, #312]	; (80028d0 <menu+0x1328>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d105      	bne.n	80027aa <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800279e:	4a5a      	ldr	r2, [pc, #360]	; (8002908 <menu+0x1360>)
 80027a0:	2101      	movs	r1, #1
 80027a2:	2002      	movs	r0, #2
 80027a4:	f005 fc18 	bl	8007fd8 <lcd_print>
 80027a8:	e008      	b.n	80027bc <menu+0x1214>
			} else if(dilSecim == 1){
 80027aa:	4b49      	ldr	r3, [pc, #292]	; (80028d0 <menu+0x1328>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d104      	bne.n	80027bc <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80027b2:	4a56      	ldr	r2, [pc, #344]	; (800290c <menu+0x1364>)
 80027b4:	2101      	movs	r1, #1
 80027b6:	2002      	movs	r0, #2
 80027b8:	f005 fc0e 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027bc:	2102      	movs	r1, #2
 80027be:	4846      	ldr	r0, [pc, #280]	; (80028d8 <menu+0x1330>)
 80027c0:	f006 ff30 	bl	8009624 <HAL_GPIO_ReadPin>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d115      	bne.n	80027f6 <menu+0x124e>
 80027ca:	4b44      	ldr	r3, [pc, #272]	; (80028dc <menu+0x1334>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	f083 0301 	eor.w	r3, r3, #1
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00e      	beq.n	80027f6 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80027d8:	4b48      	ldr	r3, [pc, #288]	; (80028fc <menu+0x1354>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	3301      	adds	r3, #1
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	4b46      	ldr	r3, [pc, #280]	; (80028fc <menu+0x1354>)
 80027e2:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80027e4:	4b45      	ldr	r3, [pc, #276]	; (80028fc <menu+0x1354>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d902      	bls.n	80027f2 <menu+0x124a>
				kapiAcTipi = 0;
 80027ec:	4b43      	ldr	r3, [pc, #268]	; (80028fc <menu+0x1354>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027f2:	f002 fa35 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027f6:	2104      	movs	r1, #4
 80027f8:	4837      	ldr	r0, [pc, #220]	; (80028d8 <menu+0x1330>)
 80027fa:	f006 ff13 	bl	8009624 <HAL_GPIO_ReadPin>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b01      	cmp	r3, #1
 8002802:	d115      	bne.n	8002830 <menu+0x1288>
 8002804:	4b35      	ldr	r3, [pc, #212]	; (80028dc <menu+0x1334>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	f083 0301 	eor.w	r3, r3, #1
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00e      	beq.n	8002830 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002812:	4b3a      	ldr	r3, [pc, #232]	; (80028fc <menu+0x1354>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	3b01      	subs	r3, #1
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4b38      	ldr	r3, [pc, #224]	; (80028fc <menu+0x1354>)
 800281c:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800281e:	4b37      	ldr	r3, [pc, #220]	; (80028fc <menu+0x1354>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <menu+0x1284>
		   		kapiAcTipi = 1;
 8002826:	4b35      	ldr	r3, [pc, #212]	; (80028fc <menu+0x1354>)
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800282c:	f002 fa18 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002830:	2108      	movs	r1, #8
 8002832:	4829      	ldr	r0, [pc, #164]	; (80028d8 <menu+0x1330>)
 8002834:	f006 fef6 	bl	8009624 <HAL_GPIO_ReadPin>
 8002838:	4603      	mov	r3, r0
 800283a:	2b01      	cmp	r3, #1
 800283c:	d10e      	bne.n	800285c <menu+0x12b4>
 800283e:	4b27      	ldr	r3, [pc, #156]	; (80028dc <menu+0x1334>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	f083 0301 	eor.w	r3, r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 800284c:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <menu+0x1354>)
 800284e:	781a      	ldrb	r2, [r3, #0]
 8002850:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <menu+0x133c>)
 8002852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002856:	4b25      	ldr	r3, [pc, #148]	; (80028ec <menu+0x1344>)
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <menu+0x1348>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b09      	cmp	r3, #9
 8002862:	f040 80b9 	bne.w	80029d8 <menu+0x1430>
		if(dilSecim == 0){
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <menu+0x1328>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d105      	bne.n	800287a <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800286e:	4a28      	ldr	r2, [pc, #160]	; (8002910 <menu+0x1368>)
 8002870:	2101      	movs	r1, #1
 8002872:	2001      	movs	r0, #1
 8002874:	f005 fbb0 	bl	8007fd8 <lcd_print>
 8002878:	e008      	b.n	800288c <menu+0x12e4>
		} else if(dilSecim == 1) {
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <menu+0x1328>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d104      	bne.n	800288c <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002882:	4a24      	ldr	r2, [pc, #144]	; (8002914 <menu+0x136c>)
 8002884:	2101      	movs	r1, #1
 8002886:	2001      	movs	r0, #1
 8002888:	f005 fba6 	bl	8007fd8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 800288c:	4b22      	ldr	r3, [pc, #136]	; (8002918 <menu+0x1370>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d105      	bne.n	80028a0 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002894:	4a21      	ldr	r2, [pc, #132]	; (800291c <menu+0x1374>)
 8002896:	2101      	movs	r1, #1
 8002898:	2002      	movs	r0, #2
 800289a:	f005 fb9d 	bl	8007fd8 <lcd_print>
 800289e:	e04c      	b.n	800293a <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <menu+0x1370>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d13f      	bne.n	8002928 <menu+0x1380>
			if(dilSecim == 0){
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <menu+0x1328>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80028b0:	4a1b      	ldr	r2, [pc, #108]	; (8002920 <menu+0x1378>)
 80028b2:	2101      	movs	r1, #1
 80028b4:	2002      	movs	r0, #2
 80028b6:	f005 fb8f 	bl	8007fd8 <lcd_print>
 80028ba:	e03e      	b.n	800293a <menu+0x1392>
			} else if(dilSecim == 1) {
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <menu+0x1328>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d13a      	bne.n	800293a <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80028c4:	4a17      	ldr	r2, [pc, #92]	; (8002924 <menu+0x137c>)
 80028c6:	2101      	movs	r1, #1
 80028c8:	2002      	movs	r0, #2
 80028ca:	f005 fb85 	bl	8007fd8 <lcd_print>
 80028ce:	e034      	b.n	800293a <menu+0x1392>
 80028d0:	2000020d 	.word	0x2000020d
 80028d4:	0800d898 	.word	0x0800d898
 80028d8:	40010800 	.word	0x40010800
 80028dc:	2000021b 	.word	0x2000021b
 80028e0:	200001f4 	.word	0x200001f4
 80028e4:	20000118 	.word	0x20000118
 80028e8:	200001f2 	.word	0x200001f2
 80028ec:	20000218 	.word	0x20000218
 80028f0:	200001ec 	.word	0x200001ec
 80028f4:	0800d8ac 	.word	0x0800d8ac
 80028f8:	0800d8c0 	.word	0x0800d8c0
 80028fc:	200001f8 	.word	0x200001f8
 8002900:	0800d8d4 	.word	0x0800d8d4
 8002904:	0800d8e4 	.word	0x0800d8e4
 8002908:	0800d8f4 	.word	0x0800d8f4
 800290c:	0800d908 	.word	0x0800d908
 8002910:	0800d91c 	.word	0x0800d91c
 8002914:	0800d930 	.word	0x0800d930
 8002918:	200001f5 	.word	0x200001f5
 800291c:	0800d944 	.word	0x0800d944
 8002920:	0800d958 	.word	0x0800d958
 8002924:	0800d968 	.word	0x0800d968
			}
		} else if(kapi1Tip == 2) {
 8002928:	4b8a      	ldr	r3, [pc, #552]	; (8002b54 <menu+0x15ac>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d104      	bne.n	800293a <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002930:	4a89      	ldr	r2, [pc, #548]	; (8002b58 <menu+0x15b0>)
 8002932:	2101      	movs	r1, #1
 8002934:	2002      	movs	r0, #2
 8002936:	f005 fb4f 	bl	8007fd8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800293a:	2102      	movs	r1, #2
 800293c:	4887      	ldr	r0, [pc, #540]	; (8002b5c <menu+0x15b4>)
 800293e:	f006 fe71 	bl	8009624 <HAL_GPIO_ReadPin>
 8002942:	4603      	mov	r3, r0
 8002944:	2b01      	cmp	r3, #1
 8002946:	d115      	bne.n	8002974 <menu+0x13cc>
 8002948:	4b85      	ldr	r3, [pc, #532]	; (8002b60 <menu+0x15b8>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f083 0301 	eor.w	r3, r3, #1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00e      	beq.n	8002974 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002956:	4b7f      	ldr	r3, [pc, #508]	; (8002b54 <menu+0x15ac>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b7d      	ldr	r3, [pc, #500]	; (8002b54 <menu+0x15ac>)
 8002960:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002962:	4b7c      	ldr	r3, [pc, #496]	; (8002b54 <menu+0x15ac>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d902      	bls.n	8002970 <menu+0x13c8>
				kapi1Tip = 0;
 800296a:	4b7a      	ldr	r3, [pc, #488]	; (8002b54 <menu+0x15ac>)
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002970:	f002 f976 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002974:	2104      	movs	r1, #4
 8002976:	4879      	ldr	r0, [pc, #484]	; (8002b5c <menu+0x15b4>)
 8002978:	f006 fe54 	bl	8009624 <HAL_GPIO_ReadPin>
 800297c:	4603      	mov	r3, r0
 800297e:	2b01      	cmp	r3, #1
 8002980:	d115      	bne.n	80029ae <menu+0x1406>
 8002982:	4b77      	ldr	r3, [pc, #476]	; (8002b60 <menu+0x15b8>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	f083 0301 	eor.w	r3, r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00e      	beq.n	80029ae <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002990:	4b70      	ldr	r3, [pc, #448]	; (8002b54 <menu+0x15ac>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	3b01      	subs	r3, #1
 8002996:	b2da      	uxtb	r2, r3
 8002998:	4b6e      	ldr	r3, [pc, #440]	; (8002b54 <menu+0x15ac>)
 800299a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 800299c:	4b6d      	ldr	r3, [pc, #436]	; (8002b54 <menu+0x15ac>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d902      	bls.n	80029aa <menu+0x1402>
		   		kapi1Tip = 2;
 80029a4:	4b6b      	ldr	r3, [pc, #428]	; (8002b54 <menu+0x15ac>)
 80029a6:	2202      	movs	r2, #2
 80029a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029aa:	f002 f959 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ae:	2108      	movs	r1, #8
 80029b0:	486a      	ldr	r0, [pc, #424]	; (8002b5c <menu+0x15b4>)
 80029b2:	f006 fe37 	bl	8009624 <HAL_GPIO_ReadPin>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d10d      	bne.n	80029d8 <menu+0x1430>
 80029bc:	4b68      	ldr	r3, [pc, #416]	; (8002b60 <menu+0x15b8>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	f083 0301 	eor.w	r3, r3, #1
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80029ca:	4b62      	ldr	r3, [pc, #392]	; (8002b54 <menu+0x15ac>)
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	4b65      	ldr	r3, [pc, #404]	; (8002b64 <menu+0x15bc>)
 80029d0:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80029d2:	4b65      	ldr	r3, [pc, #404]	; (8002b68 <menu+0x15c0>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80029d8:	4b64      	ldr	r3, [pc, #400]	; (8002b6c <menu+0x15c4>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b0a      	cmp	r3, #10
 80029de:	d17f      	bne.n	8002ae0 <menu+0x1538>
		if(dilSecim == 0) {
 80029e0:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <menu+0x15c8>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80029e8:	4a62      	ldr	r2, [pc, #392]	; (8002b74 <menu+0x15cc>)
 80029ea:	2101      	movs	r1, #1
 80029ec:	2001      	movs	r0, #1
 80029ee:	f005 faf3 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80029f2:	4a61      	ldr	r2, [pc, #388]	; (8002b78 <menu+0x15d0>)
 80029f4:	2101      	movs	r1, #1
 80029f6:	2002      	movs	r0, #2
 80029f8:	f005 faee 	bl	8007fd8 <lcd_print>
 80029fc:	e00d      	b.n	8002a1a <menu+0x1472>
		} else if(dilSecim == 1) {
 80029fe:	4b5c      	ldr	r3, [pc, #368]	; (8002b70 <menu+0x15c8>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d109      	bne.n	8002a1a <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002a06:	4a5d      	ldr	r2, [pc, #372]	; (8002b7c <menu+0x15d4>)
 8002a08:	2101      	movs	r1, #1
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	f005 fae4 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a10:	4a5b      	ldr	r2, [pc, #364]	; (8002b80 <menu+0x15d8>)
 8002a12:	2101      	movs	r1, #1
 8002a14:	2002      	movs	r0, #2
 8002a16:	f005 fadf 	bl	8007fd8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002a1a:	4b5a      	ldr	r3, [pc, #360]	; (8002b84 <menu+0x15dc>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	220a      	movs	r2, #10
 8002a20:	4959      	ldr	r1, [pc, #356]	; (8002b88 <menu+0x15e0>)
 8002a22:	4618      	mov	r0, r3
 8002a24:	f009 fe86 	bl	800c734 <itoa>
		lcd_print(2,16,snum);
 8002a28:	4a57      	ldr	r2, [pc, #348]	; (8002b88 <menu+0x15e0>)
 8002a2a:	2110      	movs	r1, #16
 8002a2c:	2002      	movs	r0, #2
 8002a2e:	f005 fad3 	bl	8007fd8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a32:	2102      	movs	r1, #2
 8002a34:	4849      	ldr	r0, [pc, #292]	; (8002b5c <menu+0x15b4>)
 8002a36:	f006 fdf5 	bl	8009624 <HAL_GPIO_ReadPin>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d119      	bne.n	8002a74 <menu+0x14cc>
 8002a40:	4b47      	ldr	r3, [pc, #284]	; (8002b60 <menu+0x15b8>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	f083 0301 	eor.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d012      	beq.n	8002a74 <menu+0x14cc>
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <menu+0x15ac>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10e      	bne.n	8002a74 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002a56:	4b4b      	ldr	r3, [pc, #300]	; (8002b84 <menu+0x15dc>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4b49      	ldr	r3, [pc, #292]	; (8002b84 <menu+0x15dc>)
 8002a60:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002a62:	4b48      	ldr	r3, [pc, #288]	; (8002b84 <menu+0x15dc>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	d902      	bls.n	8002a70 <menu+0x14c8>
				kapi1AcSure = 0;
 8002a6a:	4b46      	ldr	r3, [pc, #280]	; (8002b84 <menu+0x15dc>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a70:	f002 f8f6 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a74:	2104      	movs	r1, #4
 8002a76:	4839      	ldr	r0, [pc, #228]	; (8002b5c <menu+0x15b4>)
 8002a78:	f006 fdd4 	bl	8009624 <HAL_GPIO_ReadPin>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d119      	bne.n	8002ab6 <menu+0x150e>
 8002a82:	4b37      	ldr	r3, [pc, #220]	; (8002b60 <menu+0x15b8>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	f083 0301 	eor.w	r3, r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d012      	beq.n	8002ab6 <menu+0x150e>
 8002a90:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <menu+0x15ac>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10e      	bne.n	8002ab6 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002a98:	4b3a      	ldr	r3, [pc, #232]	; (8002b84 <menu+0x15dc>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	4b38      	ldr	r3, [pc, #224]	; (8002b84 <menu+0x15dc>)
 8002aa2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002aa4:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <menu+0x15dc>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b06      	cmp	r3, #6
 8002aaa:	d902      	bls.n	8002ab2 <menu+0x150a>
		   		kapi1AcSure = 5;
 8002aac:	4b35      	ldr	r3, [pc, #212]	; (8002b84 <menu+0x15dc>)
 8002aae:	2205      	movs	r2, #5
 8002ab0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ab2:	f002 f8d5 	bl	8004c60 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ab6:	2108      	movs	r1, #8
 8002ab8:	4828      	ldr	r0, [pc, #160]	; (8002b5c <menu+0x15b4>)
 8002aba:	f006 fdb3 	bl	8009624 <HAL_GPIO_ReadPin>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d10d      	bne.n	8002ae0 <menu+0x1538>
 8002ac4:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <menu+0x15b8>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	f083 0301 	eor.w	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002ad2:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <menu+0x15dc>)
 8002ad4:	781a      	ldrb	r2, [r3, #0]
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <menu+0x15bc>)
 8002ad8:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <menu+0x15c0>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002ae0:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <menu+0x15c4>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b0b      	cmp	r3, #11
 8002ae6:	f040 80b5 	bne.w	8002c54 <menu+0x16ac>
		if(dilSecim == 0) {
 8002aea:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <menu+0x15c8>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d105      	bne.n	8002afe <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002af2:	4a26      	ldr	r2, [pc, #152]	; (8002b8c <menu+0x15e4>)
 8002af4:	2101      	movs	r1, #1
 8002af6:	2001      	movs	r0, #1
 8002af8:	f005 fa6e 	bl	8007fd8 <lcd_print>
 8002afc:	e008      	b.n	8002b10 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002afe:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <menu+0x15c8>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d104      	bne.n	8002b10 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002b06:	4a22      	ldr	r2, [pc, #136]	; (8002b90 <menu+0x15e8>)
 8002b08:	2101      	movs	r1, #1
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f005 fa64 	bl	8007fd8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002b10:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <menu+0x15ec>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d105      	bne.n	8002b24 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002b18:	4a1f      	ldr	r2, [pc, #124]	; (8002b98 <menu+0x15f0>)
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	f005 fa5b 	bl	8007fd8 <lcd_print>
 8002b22:	e048      	b.n	8002bb6 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <menu+0x15ec>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d13b      	bne.n	8002ba4 <menu+0x15fc>
			if(dilSecim == 0) {
 8002b2c:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <menu+0x15c8>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002b34:	4a19      	ldr	r2, [pc, #100]	; (8002b9c <menu+0x15f4>)
 8002b36:	2101      	movs	r1, #1
 8002b38:	2002      	movs	r0, #2
 8002b3a:	f005 fa4d 	bl	8007fd8 <lcd_print>
 8002b3e:	e03a      	b.n	8002bb6 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <menu+0x15c8>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d136      	bne.n	8002bb6 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002b48:	4a15      	ldr	r2, [pc, #84]	; (8002ba0 <menu+0x15f8>)
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	2002      	movs	r0, #2
 8002b4e:	f005 fa43 	bl	8007fd8 <lcd_print>
 8002b52:	e030      	b.n	8002bb6 <menu+0x160e>
 8002b54:	200001f5 	.word	0x200001f5
 8002b58:	0800d97c 	.word	0x0800d97c
 8002b5c:	40010800 	.word	0x40010800
 8002b60:	2000021b 	.word	0x2000021b
 8002b64:	20000118 	.word	0x20000118
 8002b68:	20000218 	.word	0x20000218
 8002b6c:	200001ec 	.word	0x200001ec
 8002b70:	2000020d 	.word	0x2000020d
 8002b74:	0800d98c 	.word	0x0800d98c
 8002b78:	0800d9a0 	.word	0x0800d9a0
 8002b7c:	0800d9b0 	.word	0x0800d9b0
 8002b80:	0800d9c4 	.word	0x0800d9c4
 8002b84:	20000205 	.word	0x20000205
 8002b88:	20000188 	.word	0x20000188
 8002b8c:	0800d9d4 	.word	0x0800d9d4
 8002b90:	0800d9e8 	.word	0x0800d9e8
 8002b94:	200001f6 	.word	0x200001f6
 8002b98:	0800d944 	.word	0x0800d944
 8002b9c:	0800d958 	.word	0x0800d958
 8002ba0:	0800d968 	.word	0x0800d968
			}
		} else if(kapi2Tip == 2) {
 8002ba4:	4b8a      	ldr	r3, [pc, #552]	; (8002dd0 <menu+0x1828>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d104      	bne.n	8002bb6 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002bac:	4a89      	ldr	r2, [pc, #548]	; (8002dd4 <menu+0x182c>)
 8002bae:	2101      	movs	r1, #1
 8002bb0:	2002      	movs	r0, #2
 8002bb2:	f005 fa11 	bl	8007fd8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	4887      	ldr	r0, [pc, #540]	; (8002dd8 <menu+0x1830>)
 8002bba:	f006 fd33 	bl	8009624 <HAL_GPIO_ReadPin>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d115      	bne.n	8002bf0 <menu+0x1648>
 8002bc4:	4b85      	ldr	r3, [pc, #532]	; (8002ddc <menu+0x1834>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	f083 0301 	eor.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00e      	beq.n	8002bf0 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002bd2:	4b7f      	ldr	r3, [pc, #508]	; (8002dd0 <menu+0x1828>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4b7d      	ldr	r3, [pc, #500]	; (8002dd0 <menu+0x1828>)
 8002bdc:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002bde:	4b7c      	ldr	r3, [pc, #496]	; (8002dd0 <menu+0x1828>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d902      	bls.n	8002bec <menu+0x1644>
				kapi2Tip = 0;
 8002be6:	4b7a      	ldr	r3, [pc, #488]	; (8002dd0 <menu+0x1828>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bec:	f002 f838 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bf0:	2104      	movs	r1, #4
 8002bf2:	4879      	ldr	r0, [pc, #484]	; (8002dd8 <menu+0x1830>)
 8002bf4:	f006 fd16 	bl	8009624 <HAL_GPIO_ReadPin>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d115      	bne.n	8002c2a <menu+0x1682>
 8002bfe:	4b77      	ldr	r3, [pc, #476]	; (8002ddc <menu+0x1834>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	f083 0301 	eor.w	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00e      	beq.n	8002c2a <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002c0c:	4b70      	ldr	r3, [pc, #448]	; (8002dd0 <menu+0x1828>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	4b6e      	ldr	r3, [pc, #440]	; (8002dd0 <menu+0x1828>)
 8002c16:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002c18:	4b6d      	ldr	r3, [pc, #436]	; (8002dd0 <menu+0x1828>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d902      	bls.n	8002c26 <menu+0x167e>
		   		kapi2Tip = 2;
 8002c20:	4b6b      	ldr	r3, [pc, #428]	; (8002dd0 <menu+0x1828>)
 8002c22:	2202      	movs	r2, #2
 8002c24:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c26:	f002 f81b 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c2a:	2108      	movs	r1, #8
 8002c2c:	486a      	ldr	r0, [pc, #424]	; (8002dd8 <menu+0x1830>)
 8002c2e:	f006 fcf9 	bl	8009624 <HAL_GPIO_ReadPin>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d10d      	bne.n	8002c54 <menu+0x16ac>
 8002c38:	4b68      	ldr	r3, [pc, #416]	; (8002ddc <menu+0x1834>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	f083 0301 	eor.w	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002c46:	4b62      	ldr	r3, [pc, #392]	; (8002dd0 <menu+0x1828>)
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	4b65      	ldr	r3, [pc, #404]	; (8002de0 <menu+0x1838>)
 8002c4c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002c4e:	4b65      	ldr	r3, [pc, #404]	; (8002de4 <menu+0x183c>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002c54:	4b64      	ldr	r3, [pc, #400]	; (8002de8 <menu+0x1840>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b0c      	cmp	r3, #12
 8002c5a:	d17f      	bne.n	8002d5c <menu+0x17b4>
		if(dilSecim == 0) {
 8002c5c:	4b63      	ldr	r3, [pc, #396]	; (8002dec <menu+0x1844>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002c64:	4a62      	ldr	r2, [pc, #392]	; (8002df0 <menu+0x1848>)
 8002c66:	2101      	movs	r1, #1
 8002c68:	2001      	movs	r0, #1
 8002c6a:	f005 f9b5 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002c6e:	4a61      	ldr	r2, [pc, #388]	; (8002df4 <menu+0x184c>)
 8002c70:	2101      	movs	r1, #1
 8002c72:	2002      	movs	r0, #2
 8002c74:	f005 f9b0 	bl	8007fd8 <lcd_print>
 8002c78:	e00d      	b.n	8002c96 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002c7a:	4b5c      	ldr	r3, [pc, #368]	; (8002dec <menu+0x1844>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d109      	bne.n	8002c96 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002c82:	4a5d      	ldr	r2, [pc, #372]	; (8002df8 <menu+0x1850>)
 8002c84:	2101      	movs	r1, #1
 8002c86:	2001      	movs	r0, #1
 8002c88:	f005 f9a6 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002c8c:	4a5b      	ldr	r2, [pc, #364]	; (8002dfc <menu+0x1854>)
 8002c8e:	2101      	movs	r1, #1
 8002c90:	2002      	movs	r0, #2
 8002c92:	f005 f9a1 	bl	8007fd8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002c96:	4b5a      	ldr	r3, [pc, #360]	; (8002e00 <menu+0x1858>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	220a      	movs	r2, #10
 8002c9c:	4959      	ldr	r1, [pc, #356]	; (8002e04 <menu+0x185c>)
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f009 fd48 	bl	800c734 <itoa>
		lcd_print(2,16,snum);
 8002ca4:	4a57      	ldr	r2, [pc, #348]	; (8002e04 <menu+0x185c>)
 8002ca6:	2110      	movs	r1, #16
 8002ca8:	2002      	movs	r0, #2
 8002caa:	f005 f995 	bl	8007fd8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002cae:	2102      	movs	r1, #2
 8002cb0:	4849      	ldr	r0, [pc, #292]	; (8002dd8 <menu+0x1830>)
 8002cb2:	f006 fcb7 	bl	8009624 <HAL_GPIO_ReadPin>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d119      	bne.n	8002cf0 <menu+0x1748>
 8002cbc:	4b47      	ldr	r3, [pc, #284]	; (8002ddc <menu+0x1834>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	f083 0301 	eor.w	r3, r3, #1
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d012      	beq.n	8002cf0 <menu+0x1748>
 8002cca:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <menu+0x1828>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10e      	bne.n	8002cf0 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002cd2:	4b4b      	ldr	r3, [pc, #300]	; (8002e00 <menu+0x1858>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4b49      	ldr	r3, [pc, #292]	; (8002e00 <menu+0x1858>)
 8002cdc:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002cde:	4b48      	ldr	r3, [pc, #288]	; (8002e00 <menu+0x1858>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d902      	bls.n	8002cec <menu+0x1744>
				kapi2AcSure = 0;
 8002ce6:	4b46      	ldr	r3, [pc, #280]	; (8002e00 <menu+0x1858>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cec:	f001 ffb8 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	4839      	ldr	r0, [pc, #228]	; (8002dd8 <menu+0x1830>)
 8002cf4:	f006 fc96 	bl	8009624 <HAL_GPIO_ReadPin>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d119      	bne.n	8002d32 <menu+0x178a>
 8002cfe:	4b37      	ldr	r3, [pc, #220]	; (8002ddc <menu+0x1834>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	f083 0301 	eor.w	r3, r3, #1
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d012      	beq.n	8002d32 <menu+0x178a>
 8002d0c:	4b30      	ldr	r3, [pc, #192]	; (8002dd0 <menu+0x1828>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10e      	bne.n	8002d32 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002d14:	4b3a      	ldr	r3, [pc, #232]	; (8002e00 <menu+0x1858>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	4b38      	ldr	r3, [pc, #224]	; (8002e00 <menu+0x1858>)
 8002d1e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002d20:	4b37      	ldr	r3, [pc, #220]	; (8002e00 <menu+0x1858>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b06      	cmp	r3, #6
 8002d26:	d902      	bls.n	8002d2e <menu+0x1786>
		   		kapi2AcSure = 5;
 8002d28:	4b35      	ldr	r3, [pc, #212]	; (8002e00 <menu+0x1858>)
 8002d2a:	2205      	movs	r2, #5
 8002d2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d2e:	f001 ff97 	bl	8004c60 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d32:	2108      	movs	r1, #8
 8002d34:	4828      	ldr	r0, [pc, #160]	; (8002dd8 <menu+0x1830>)
 8002d36:	f006 fc75 	bl	8009624 <HAL_GPIO_ReadPin>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d10d      	bne.n	8002d5c <menu+0x17b4>
 8002d40:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <menu+0x1834>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	f083 0301 	eor.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d006      	beq.n	8002d5c <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <menu+0x1858>)
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <menu+0x1838>)
 8002d54:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <menu+0x183c>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002d5c:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <menu+0x1840>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b0d      	cmp	r3, #13
 8002d62:	f040 80b5 	bne.w	8002ed0 <menu+0x1928>
		if(dilSecim == 0) {
 8002d66:	4b21      	ldr	r3, [pc, #132]	; (8002dec <menu+0x1844>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d105      	bne.n	8002d7a <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002d6e:	4a26      	ldr	r2, [pc, #152]	; (8002e08 <menu+0x1860>)
 8002d70:	2101      	movs	r1, #1
 8002d72:	2001      	movs	r0, #1
 8002d74:	f005 f930 	bl	8007fd8 <lcd_print>
 8002d78:	e008      	b.n	8002d8c <menu+0x17e4>
		} else if(dilSecim == 1){
 8002d7a:	4b1c      	ldr	r3, [pc, #112]	; (8002dec <menu+0x1844>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d104      	bne.n	8002d8c <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002d82:	4a22      	ldr	r2, [pc, #136]	; (8002e0c <menu+0x1864>)
 8002d84:	2101      	movs	r1, #1
 8002d86:	2001      	movs	r0, #1
 8002d88:	f005 f926 	bl	8007fd8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002d8c:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <menu+0x1868>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d105      	bne.n	8002da0 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002d94:	4a1f      	ldr	r2, [pc, #124]	; (8002e14 <menu+0x186c>)
 8002d96:	2101      	movs	r1, #1
 8002d98:	2002      	movs	r0, #2
 8002d9a:	f005 f91d 	bl	8007fd8 <lcd_print>
 8002d9e:	e048      	b.n	8002e32 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <menu+0x1868>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d13b      	bne.n	8002e20 <menu+0x1878>
			if(dilSecim == 0) {
 8002da8:	4b10      	ldr	r3, [pc, #64]	; (8002dec <menu+0x1844>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002db0:	4a19      	ldr	r2, [pc, #100]	; (8002e18 <menu+0x1870>)
 8002db2:	2101      	movs	r1, #1
 8002db4:	2002      	movs	r0, #2
 8002db6:	f005 f90f 	bl	8007fd8 <lcd_print>
 8002dba:	e03a      	b.n	8002e32 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <menu+0x1844>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d136      	bne.n	8002e32 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002dc4:	4a15      	ldr	r2, [pc, #84]	; (8002e1c <menu+0x1874>)
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	2002      	movs	r0, #2
 8002dca:	f005 f905 	bl	8007fd8 <lcd_print>
 8002dce:	e030      	b.n	8002e32 <menu+0x188a>
 8002dd0:	200001f6 	.word	0x200001f6
 8002dd4:	0800d97c 	.word	0x0800d97c
 8002dd8:	40010800 	.word	0x40010800
 8002ddc:	2000021b 	.word	0x2000021b
 8002de0:	20000118 	.word	0x20000118
 8002de4:	20000218 	.word	0x20000218
 8002de8:	200001ec 	.word	0x200001ec
 8002dec:	2000020d 	.word	0x2000020d
 8002df0:	0800d9fc 	.word	0x0800d9fc
 8002df4:	0800d9a0 	.word	0x0800d9a0
 8002df8:	0800da10 	.word	0x0800da10
 8002dfc:	0800d9c4 	.word	0x0800d9c4
 8002e00:	20000206 	.word	0x20000206
 8002e04:	20000188 	.word	0x20000188
 8002e08:	0800da24 	.word	0x0800da24
 8002e0c:	0800da38 	.word	0x0800da38
 8002e10:	200001f7 	.word	0x200001f7
 8002e14:	0800d944 	.word	0x0800d944
 8002e18:	0800d958 	.word	0x0800d958
 8002e1c:	0800d968 	.word	0x0800d968
			}
		} else if(kapitablaTip == 2) {
 8002e20:	4b5b      	ldr	r3, [pc, #364]	; (8002f90 <menu+0x19e8>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d104      	bne.n	8002e32 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002e28:	4a5a      	ldr	r2, [pc, #360]	; (8002f94 <menu+0x19ec>)
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	2002      	movs	r0, #2
 8002e2e:	f005 f8d3 	bl	8007fd8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e32:	2102      	movs	r1, #2
 8002e34:	4858      	ldr	r0, [pc, #352]	; (8002f98 <menu+0x19f0>)
 8002e36:	f006 fbf5 	bl	8009624 <HAL_GPIO_ReadPin>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d115      	bne.n	8002e6c <menu+0x18c4>
 8002e40:	4b56      	ldr	r3, [pc, #344]	; (8002f9c <menu+0x19f4>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	f083 0301 	eor.w	r3, r3, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00e      	beq.n	8002e6c <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002e4e:	4b50      	ldr	r3, [pc, #320]	; (8002f90 <menu+0x19e8>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	3301      	adds	r3, #1
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4b4e      	ldr	r3, [pc, #312]	; (8002f90 <menu+0x19e8>)
 8002e58:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002e5a:	4b4d      	ldr	r3, [pc, #308]	; (8002f90 <menu+0x19e8>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d902      	bls.n	8002e68 <menu+0x18c0>
				kapitablaTip = 0;
 8002e62:	4b4b      	ldr	r3, [pc, #300]	; (8002f90 <menu+0x19e8>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e68:	f001 fefa 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e6c:	2104      	movs	r1, #4
 8002e6e:	484a      	ldr	r0, [pc, #296]	; (8002f98 <menu+0x19f0>)
 8002e70:	f006 fbd8 	bl	8009624 <HAL_GPIO_ReadPin>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d115      	bne.n	8002ea6 <menu+0x18fe>
 8002e7a:	4b48      	ldr	r3, [pc, #288]	; (8002f9c <menu+0x19f4>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	f083 0301 	eor.w	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00e      	beq.n	8002ea6 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002e88:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <menu+0x19e8>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <menu+0x19e8>)
 8002e92:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002e94:	4b3e      	ldr	r3, [pc, #248]	; (8002f90 <menu+0x19e8>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d902      	bls.n	8002ea2 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002e9c:	4b3c      	ldr	r3, [pc, #240]	; (8002f90 <menu+0x19e8>)
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ea2:	f001 fedd 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ea6:	2108      	movs	r1, #8
 8002ea8:	483b      	ldr	r0, [pc, #236]	; (8002f98 <menu+0x19f0>)
 8002eaa:	f006 fbbb 	bl	8009624 <HAL_GPIO_ReadPin>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d10d      	bne.n	8002ed0 <menu+0x1928>
 8002eb4:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <menu+0x19f4>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	f083 0301 	eor.w	r3, r3, #1
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d006      	beq.n	8002ed0 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002ec2:	4b33      	ldr	r3, [pc, #204]	; (8002f90 <menu+0x19e8>)
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <menu+0x19f8>)
 8002ec8:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002eca:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <menu+0x19fc>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002ed0:	4b35      	ldr	r3, [pc, #212]	; (8002fa8 <menu+0x1a00>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b0e      	cmp	r3, #14
 8002ed6:	f040 80f2 	bne.w	80030be <menu+0x1b16>
		if(dilSecim == 0) {
 8002eda:	4b34      	ldr	r3, [pc, #208]	; (8002fac <menu+0x1a04>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002ee2:	4a33      	ldr	r2, [pc, #204]	; (8002fb0 <menu+0x1a08>)
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	f005 f876 	bl	8007fd8 <lcd_print>
 8002eec:	e008      	b.n	8002f00 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002eee:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <menu+0x1a04>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d104      	bne.n	8002f00 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002ef6:	4a2f      	ldr	r2, [pc, #188]	; (8002fb4 <menu+0x1a0c>)
 8002ef8:	2101      	movs	r1, #1
 8002efa:	2001      	movs	r0, #1
 8002efc:	f005 f86c 	bl	8007fd8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002f00:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <menu+0x1a10>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d113      	bne.n	8002f30 <menu+0x1988>
			if(dilSecim == 0){
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <menu+0x1a04>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d105      	bne.n	8002f1c <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002f10:	4a2a      	ldr	r2, [pc, #168]	; (8002fbc <menu+0x1a14>)
 8002f12:	2101      	movs	r1, #1
 8002f14:	2002      	movs	r0, #2
 8002f16:	f005 f85f 	bl	8007fd8 <lcd_print>
 8002f1a:	e071      	b.n	8003000 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <menu+0x1a04>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d16d      	bne.n	8003000 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002f24:	4a26      	ldr	r2, [pc, #152]	; (8002fc0 <menu+0x1a18>)
 8002f26:	2101      	movs	r1, #1
 8002f28:	2002      	movs	r0, #2
 8002f2a:	f005 f855 	bl	8007fd8 <lcd_print>
 8002f2e:	e067      	b.n	8003000 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002f30:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <menu+0x1a10>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d112      	bne.n	8002f5e <menu+0x19b6>
			if(dilSecim == 0){
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <menu+0x1a04>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d104      	bne.n	8002f4a <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002f40:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <menu+0x1a1c>)
 8002f42:	2101      	movs	r1, #1
 8002f44:	2002      	movs	r0, #2
 8002f46:	f005 f847 	bl	8007fd8 <lcd_print>
			}
			if(dilSecim == 1){
 8002f4a:	4b18      	ldr	r3, [pc, #96]	; (8002fac <menu+0x1a04>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d156      	bne.n	8003000 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002f52:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <menu+0x1a20>)
 8002f54:	2101      	movs	r1, #1
 8002f56:	2002      	movs	r0, #2
 8002f58:	f005 f83e 	bl	8007fd8 <lcd_print>
 8002f5c:	e050      	b.n	8003000 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <menu+0x1a10>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d136      	bne.n	8002fd4 <menu+0x1a2c>
			if(dilSecim == 0){
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <menu+0x1a04>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d105      	bne.n	8002f7a <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002f6e:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <menu+0x1a24>)
 8002f70:	2101      	movs	r1, #1
 8002f72:	2002      	movs	r0, #2
 8002f74:	f005 f830 	bl	8007fd8 <lcd_print>
 8002f78:	e042      	b.n	8003000 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <menu+0x1a04>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d13e      	bne.n	8003000 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002f82:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <menu+0x1a28>)
 8002f84:	2101      	movs	r1, #1
 8002f86:	2002      	movs	r0, #2
 8002f88:	f005 f826 	bl	8007fd8 <lcd_print>
 8002f8c:	e038      	b.n	8003000 <menu+0x1a58>
 8002f8e:	bf00      	nop
 8002f90:	200001f7 	.word	0x200001f7
 8002f94:	0800d97c 	.word	0x0800d97c
 8002f98:	40010800 	.word	0x40010800
 8002f9c:	2000021b 	.word	0x2000021b
 8002fa0:	20000118 	.word	0x20000118
 8002fa4:	20000218 	.word	0x20000218
 8002fa8:	200001ec 	.word	0x200001ec
 8002fac:	2000020d 	.word	0x2000020d
 8002fb0:	0800da4c 	.word	0x0800da4c
 8002fb4:	0800da60 	.word	0x0800da60
 8002fb8:	200001f9 	.word	0x200001f9
 8002fbc:	0800da74 	.word	0x0800da74
 8002fc0:	0800da84 	.word	0x0800da84
 8002fc4:	0800da94 	.word	0x0800da94
 8002fc8:	0800daa4 	.word	0x0800daa4
 8002fcc:	0800dab4 	.word	0x0800dab4
 8002fd0:	0800dac8 	.word	0x0800dac8
			}
		} else if(kapiTablaAcKonum == 3) {
 8002fd4:	4b9b      	ldr	r3, [pc, #620]	; (8003244 <menu+0x1c9c>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d111      	bne.n	8003000 <menu+0x1a58>
			if(dilSecim == 0) {
 8002fdc:	4b9a      	ldr	r3, [pc, #616]	; (8003248 <menu+0x1ca0>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d104      	bne.n	8002fee <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002fe4:	4a99      	ldr	r2, [pc, #612]	; (800324c <menu+0x1ca4>)
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	2002      	movs	r0, #2
 8002fea:	f004 fff5 	bl	8007fd8 <lcd_print>
			}
			if(dilSecim == 1) {
 8002fee:	4b96      	ldr	r3, [pc, #600]	; (8003248 <menu+0x1ca0>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d104      	bne.n	8003000 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002ff6:	4a96      	ldr	r2, [pc, #600]	; (8003250 <menu+0x1ca8>)
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	2002      	movs	r0, #2
 8002ffc:	f004 ffec 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003000:	2102      	movs	r1, #2
 8003002:	4894      	ldr	r0, [pc, #592]	; (8003254 <menu+0x1cac>)
 8003004:	f006 fb0e 	bl	8009624 <HAL_GPIO_ReadPin>
 8003008:	4603      	mov	r3, r0
 800300a:	2b01      	cmp	r3, #1
 800300c:	d115      	bne.n	800303a <menu+0x1a92>
 800300e:	4b92      	ldr	r3, [pc, #584]	; (8003258 <menu+0x1cb0>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	f083 0301 	eor.w	r3, r3, #1
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00e      	beq.n	800303a <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800301c:	4b89      	ldr	r3, [pc, #548]	; (8003244 <menu+0x1c9c>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	3301      	adds	r3, #1
 8003022:	b2da      	uxtb	r2, r3
 8003024:	4b87      	ldr	r3, [pc, #540]	; (8003244 <menu+0x1c9c>)
 8003026:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8003028:	4b86      	ldr	r3, [pc, #536]	; (8003244 <menu+0x1c9c>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d902      	bls.n	8003036 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8003030:	4b84      	ldr	r3, [pc, #528]	; (8003244 <menu+0x1c9c>)
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003036:	f001 fe13 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800303a:	2104      	movs	r1, #4
 800303c:	4885      	ldr	r0, [pc, #532]	; (8003254 <menu+0x1cac>)
 800303e:	f006 faf1 	bl	8009624 <HAL_GPIO_ReadPin>
 8003042:	4603      	mov	r3, r0
 8003044:	2b01      	cmp	r3, #1
 8003046:	d115      	bne.n	8003074 <menu+0x1acc>
 8003048:	4b83      	ldr	r3, [pc, #524]	; (8003258 <menu+0x1cb0>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	f083 0301 	eor.w	r3, r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00e      	beq.n	8003074 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8003056:	4b7b      	ldr	r3, [pc, #492]	; (8003244 <menu+0x1c9c>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	3b01      	subs	r3, #1
 800305c:	b2da      	uxtb	r2, r3
 800305e:	4b79      	ldr	r3, [pc, #484]	; (8003244 <menu+0x1c9c>)
 8003060:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8003062:	4b78      	ldr	r3, [pc, #480]	; (8003244 <menu+0x1c9c>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d902      	bls.n	8003070 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 800306a:	4b76      	ldr	r3, [pc, #472]	; (8003244 <menu+0x1c9c>)
 800306c:	2202      	movs	r2, #2
 800306e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003070:	f001 fdf6 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003074:	2108      	movs	r1, #8
 8003076:	4877      	ldr	r0, [pc, #476]	; (8003254 <menu+0x1cac>)
 8003078:	f006 fad4 	bl	8009624 <HAL_GPIO_ReadPin>
 800307c:	4603      	mov	r3, r0
 800307e:	2b01      	cmp	r3, #1
 8003080:	d11d      	bne.n	80030be <menu+0x1b16>
 8003082:	4b75      	ldr	r3, [pc, #468]	; (8003258 <menu+0x1cb0>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	f083 0301 	eor.w	r3, r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d016      	beq.n	80030be <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8003090:	4b6c      	ldr	r3, [pc, #432]	; (8003244 <menu+0x1c9c>)
 8003092:	781a      	ldrb	r2, [r3, #0]
 8003094:	4b71      	ldr	r3, [pc, #452]	; (800325c <menu+0x1cb4>)
 8003096:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 800309a:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <menu+0x1c9c>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <menu+0x1b02>
 80030a2:	4b68      	ldr	r3, [pc, #416]	; (8003244 <menu+0x1c9c>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d106      	bne.n	80030b8 <menu+0x1b10>
				altLimit = 1;
 80030aa:	4b6d      	ldr	r3, [pc, #436]	; (8003260 <menu+0x1cb8>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80030b0:	4b6b      	ldr	r3, [pc, #428]	; (8003260 <menu+0x1cb8>)
 80030b2:	781a      	ldrb	r2, [r3, #0]
 80030b4:	4b69      	ldr	r3, [pc, #420]	; (800325c <menu+0x1cb4>)
 80030b6:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80030b8:	4b6a      	ldr	r3, [pc, #424]	; (8003264 <menu+0x1cbc>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80030be:	4b6a      	ldr	r3, [pc, #424]	; (8003268 <menu+0x1cc0>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b0f      	cmp	r3, #15
 80030c4:	d17f      	bne.n	80031c6 <menu+0x1c1e>
		if(dilSecim == 0) {
 80030c6:	4b60      	ldr	r3, [pc, #384]	; (8003248 <menu+0x1ca0>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80030ce:	4a67      	ldr	r2, [pc, #412]	; (800326c <menu+0x1cc4>)
 80030d0:	2101      	movs	r1, #1
 80030d2:	2001      	movs	r0, #1
 80030d4:	f004 ff80 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80030d8:	4a65      	ldr	r2, [pc, #404]	; (8003270 <menu+0x1cc8>)
 80030da:	2101      	movs	r1, #1
 80030dc:	2002      	movs	r0, #2
 80030de:	f004 ff7b 	bl	8007fd8 <lcd_print>
 80030e2:	e00d      	b.n	8003100 <menu+0x1b58>
		} else if(dilSecim == 1) {
 80030e4:	4b58      	ldr	r3, [pc, #352]	; (8003248 <menu+0x1ca0>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d109      	bne.n	8003100 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 80030ec:	4a61      	ldr	r2, [pc, #388]	; (8003274 <menu+0x1ccc>)
 80030ee:	2101      	movs	r1, #1
 80030f0:	2001      	movs	r0, #1
 80030f2:	f004 ff71 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80030f6:	4a60      	ldr	r2, [pc, #384]	; (8003278 <menu+0x1cd0>)
 80030f8:	2101      	movs	r1, #1
 80030fa:	2002      	movs	r0, #2
 80030fc:	f004 ff6c 	bl	8007fd8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003100:	4b5e      	ldr	r3, [pc, #376]	; (800327c <menu+0x1cd4>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	220a      	movs	r2, #10
 8003106:	495e      	ldr	r1, [pc, #376]	; (8003280 <menu+0x1cd8>)
 8003108:	4618      	mov	r0, r3
 800310a:	f009 fb13 	bl	800c734 <itoa>
		lcd_print(2,16,snum);
 800310e:	4a5c      	ldr	r2, [pc, #368]	; (8003280 <menu+0x1cd8>)
 8003110:	2110      	movs	r1, #16
 8003112:	2002      	movs	r0, #2
 8003114:	f004 ff60 	bl	8007fd8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003118:	2102      	movs	r1, #2
 800311a:	484e      	ldr	r0, [pc, #312]	; (8003254 <menu+0x1cac>)
 800311c:	f006 fa82 	bl	8009624 <HAL_GPIO_ReadPin>
 8003120:	4603      	mov	r3, r0
 8003122:	2b01      	cmp	r3, #1
 8003124:	d119      	bne.n	800315a <menu+0x1bb2>
 8003126:	4b4c      	ldr	r3, [pc, #304]	; (8003258 <menu+0x1cb0>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	f083 0301 	eor.w	r3, r3, #1
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d012      	beq.n	800315a <menu+0x1bb2>
 8003134:	4b53      	ldr	r3, [pc, #332]	; (8003284 <menu+0x1cdc>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10e      	bne.n	800315a <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 800313c:	4b4f      	ldr	r3, [pc, #316]	; (800327c <menu+0x1cd4>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	b2da      	uxtb	r2, r3
 8003144:	4b4d      	ldr	r3, [pc, #308]	; (800327c <menu+0x1cd4>)
 8003146:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003148:	4b4c      	ldr	r3, [pc, #304]	; (800327c <menu+0x1cd4>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b05      	cmp	r3, #5
 800314e:	d902      	bls.n	8003156 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8003150:	4b4a      	ldr	r3, [pc, #296]	; (800327c <menu+0x1cd4>)
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003156:	f001 fd83 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800315a:	2104      	movs	r1, #4
 800315c:	483d      	ldr	r0, [pc, #244]	; (8003254 <menu+0x1cac>)
 800315e:	f006 fa61 	bl	8009624 <HAL_GPIO_ReadPin>
 8003162:	4603      	mov	r3, r0
 8003164:	2b01      	cmp	r3, #1
 8003166:	d119      	bne.n	800319c <menu+0x1bf4>
 8003168:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <menu+0x1cb0>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	f083 0301 	eor.w	r3, r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d012      	beq.n	800319c <menu+0x1bf4>
 8003176:	4b43      	ldr	r3, [pc, #268]	; (8003284 <menu+0x1cdc>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10e      	bne.n	800319c <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800317e:	4b3f      	ldr	r3, [pc, #252]	; (800327c <menu+0x1cd4>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	3b01      	subs	r3, #1
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4b3d      	ldr	r3, [pc, #244]	; (800327c <menu+0x1cd4>)
 8003188:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800318a:	4b3c      	ldr	r3, [pc, #240]	; (800327c <menu+0x1cd4>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b06      	cmp	r3, #6
 8003190:	d902      	bls.n	8003198 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8003192:	4b3a      	ldr	r3, [pc, #232]	; (800327c <menu+0x1cd4>)
 8003194:	2205      	movs	r2, #5
 8003196:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003198:	f001 fd62 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800319c:	2108      	movs	r1, #8
 800319e:	482d      	ldr	r0, [pc, #180]	; (8003254 <menu+0x1cac>)
 80031a0:	f006 fa40 	bl	8009624 <HAL_GPIO_ReadPin>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d10d      	bne.n	80031c6 <menu+0x1c1e>
 80031aa:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <menu+0x1cb0>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	f083 0301 	eor.w	r3, r3, #1
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d006      	beq.n	80031c6 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80031b8:	4b30      	ldr	r3, [pc, #192]	; (800327c <menu+0x1cd4>)
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <menu+0x1cb4>)
 80031be:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80031c0:	4b28      	ldr	r3, [pc, #160]	; (8003264 <menu+0x1cbc>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80031c6:	4b28      	ldr	r3, [pc, #160]	; (8003268 <menu+0x1cc0>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b10      	cmp	r3, #16
 80031cc:	f040 80bc 	bne.w	8003348 <menu+0x1da0>
		if(dilSecim == 0) {
 80031d0:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <menu+0x1ca0>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80031d8:	4a2b      	ldr	r2, [pc, #172]	; (8003288 <menu+0x1ce0>)
 80031da:	2101      	movs	r1, #1
 80031dc:	2001      	movs	r0, #1
 80031de:	f004 fefb 	bl	8007fd8 <lcd_print>
 80031e2:	e008      	b.n	80031f6 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 80031e4:	4b18      	ldr	r3, [pc, #96]	; (8003248 <menu+0x1ca0>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d104      	bne.n	80031f6 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80031ec:	4a27      	ldr	r2, [pc, #156]	; (800328c <menu+0x1ce4>)
 80031ee:	2101      	movs	r1, #1
 80031f0:	2001      	movs	r0, #1
 80031f2:	f004 fef1 	bl	8007fd8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80031f6:	4b26      	ldr	r3, [pc, #152]	; (8003290 <menu+0x1ce8>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d113      	bne.n	8003226 <menu+0x1c7e>
			if(dilSecim == 0) {
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <menu+0x1ca0>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8003206:	4a11      	ldr	r2, [pc, #68]	; (800324c <menu+0x1ca4>)
 8003208:	2101      	movs	r1, #1
 800320a:	2002      	movs	r0, #2
 800320c:	f004 fee4 	bl	8007fd8 <lcd_print>
 8003210:	e04b      	b.n	80032aa <menu+0x1d02>
			} else if(dilSecim == 1) {
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <menu+0x1ca0>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d147      	bne.n	80032aa <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 800321a:	4a0d      	ldr	r2, [pc, #52]	; (8003250 <menu+0x1ca8>)
 800321c:	2101      	movs	r1, #1
 800321e:	2002      	movs	r0, #2
 8003220:	f004 feda 	bl	8007fd8 <lcd_print>
 8003224:	e041      	b.n	80032aa <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8003226:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <menu+0x1ce8>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d13d      	bne.n	80032aa <menu+0x1d02>
			if(dilSecim == 0) {
 800322e:	4b06      	ldr	r3, [pc, #24]	; (8003248 <menu+0x1ca0>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d130      	bne.n	8003298 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8003236:	4a17      	ldr	r2, [pc, #92]	; (8003294 <menu+0x1cec>)
 8003238:	2101      	movs	r1, #1
 800323a:	2002      	movs	r0, #2
 800323c:	f004 fecc 	bl	8007fd8 <lcd_print>
 8003240:	e033      	b.n	80032aa <menu+0x1d02>
 8003242:	bf00      	nop
 8003244:	200001f9 	.word	0x200001f9
 8003248:	2000020d 	.word	0x2000020d
 800324c:	0800d73c 	.word	0x0800d73c
 8003250:	0800d750 	.word	0x0800d750
 8003254:	40010800 	.word	0x40010800
 8003258:	2000021b 	.word	0x2000021b
 800325c:	20000118 	.word	0x20000118
 8003260:	200001f2 	.word	0x200001f2
 8003264:	20000218 	.word	0x20000218
 8003268:	200001ec 	.word	0x200001ec
 800326c:	0800dadc 	.word	0x0800dadc
 8003270:	0800d9a0 	.word	0x0800d9a0
 8003274:	0800daf0 	.word	0x0800daf0
 8003278:	0800d9c4 	.word	0x0800d9c4
 800327c:	20000207 	.word	0x20000207
 8003280:	20000188 	.word	0x20000188
 8003284:	200001f7 	.word	0x200001f7
 8003288:	0800db04 	.word	0x0800db04
 800328c:	0800db18 	.word	0x0800db18
 8003290:	200001fa 	.word	0x200001fa
 8003294:	0800d79c 	.word	0x0800d79c
			} else if(dilSecim == 1) {
 8003298:	4b99      	ldr	r3, [pc, #612]	; (8003500 <menu+0x1f58>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d104      	bne.n	80032aa <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80032a0:	4a98      	ldr	r2, [pc, #608]	; (8003504 <menu+0x1f5c>)
 80032a2:	2101      	movs	r1, #1
 80032a4:	2002      	movs	r0, #2
 80032a6:	f004 fe97 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032aa:	2102      	movs	r1, #2
 80032ac:	4896      	ldr	r0, [pc, #600]	; (8003508 <menu+0x1f60>)
 80032ae:	f006 f9b9 	bl	8009624 <HAL_GPIO_ReadPin>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d115      	bne.n	80032e4 <menu+0x1d3c>
 80032b8:	4b94      	ldr	r3, [pc, #592]	; (800350c <menu+0x1f64>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	f083 0301 	eor.w	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00e      	beq.n	80032e4 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80032c6:	4b92      	ldr	r3, [pc, #584]	; (8003510 <menu+0x1f68>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	3301      	adds	r3, #1
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	4b90      	ldr	r3, [pc, #576]	; (8003510 <menu+0x1f68>)
 80032d0:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80032d2:	4b8f      	ldr	r3, [pc, #572]	; (8003510 <menu+0x1f68>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d902      	bls.n	80032e0 <menu+0x1d38>
				yukariYavasLimit = 0;
 80032da:	4b8d      	ldr	r3, [pc, #564]	; (8003510 <menu+0x1f68>)
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032e0:	f001 fcbe 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032e4:	2104      	movs	r1, #4
 80032e6:	4888      	ldr	r0, [pc, #544]	; (8003508 <menu+0x1f60>)
 80032e8:	f006 f99c 	bl	8009624 <HAL_GPIO_ReadPin>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d115      	bne.n	800331e <menu+0x1d76>
 80032f2:	4b86      	ldr	r3, [pc, #536]	; (800350c <menu+0x1f64>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	f083 0301 	eor.w	r3, r3, #1
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003300:	4b83      	ldr	r3, [pc, #524]	; (8003510 <menu+0x1f68>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	3b01      	subs	r3, #1
 8003306:	b2da      	uxtb	r2, r3
 8003308:	4b81      	ldr	r3, [pc, #516]	; (8003510 <menu+0x1f68>)
 800330a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 800330c:	4b80      	ldr	r3, [pc, #512]	; (8003510 <menu+0x1f68>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003314:	4b7e      	ldr	r3, [pc, #504]	; (8003510 <menu+0x1f68>)
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800331a:	f001 fca1 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800331e:	2108      	movs	r1, #8
 8003320:	4879      	ldr	r0, [pc, #484]	; (8003508 <menu+0x1f60>)
 8003322:	f006 f97f 	bl	8009624 <HAL_GPIO_ReadPin>
 8003326:	4603      	mov	r3, r0
 8003328:	2b01      	cmp	r3, #1
 800332a:	d10d      	bne.n	8003348 <menu+0x1da0>
 800332c:	4b77      	ldr	r3, [pc, #476]	; (800350c <menu+0x1f64>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	f083 0301 	eor.w	r3, r3, #1
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d006      	beq.n	8003348 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 800333a:	4b75      	ldr	r3, [pc, #468]	; (8003510 <menu+0x1f68>)
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	4b75      	ldr	r3, [pc, #468]	; (8003514 <menu+0x1f6c>)
 8003340:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003342:	4b75      	ldr	r3, [pc, #468]	; (8003518 <menu+0x1f70>)
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003348:	4b74      	ldr	r3, [pc, #464]	; (800351c <menu+0x1f74>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b11      	cmp	r3, #17
 800334e:	f040 80c3 	bne.w	80034d8 <menu+0x1f30>
		if(dilSecim == 0) {
 8003352:	4b6b      	ldr	r3, [pc, #428]	; (8003500 <menu+0x1f58>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d105      	bne.n	8003366 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800335a:	4a71      	ldr	r2, [pc, #452]	; (8003520 <menu+0x1f78>)
 800335c:	2101      	movs	r1, #1
 800335e:	2001      	movs	r0, #1
 8003360:	f004 fe3a 	bl	8007fd8 <lcd_print>
 8003364:	e008      	b.n	8003378 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8003366:	4b66      	ldr	r3, [pc, #408]	; (8003500 <menu+0x1f58>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d104      	bne.n	8003378 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800336e:	4a6d      	ldr	r2, [pc, #436]	; (8003524 <menu+0x1f7c>)
 8003370:	2101      	movs	r1, #1
 8003372:	2001      	movs	r0, #1
 8003374:	f004 fe30 	bl	8007fd8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003378:	4b6b      	ldr	r3, [pc, #428]	; (8003528 <menu+0x1f80>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d113      	bne.n	80033a8 <menu+0x1e00>
			if(dilSecim == 0){
 8003380:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <menu+0x1f58>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d105      	bne.n	8003394 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003388:	4a68      	ldr	r2, [pc, #416]	; (800352c <menu+0x1f84>)
 800338a:	2101      	movs	r1, #1
 800338c:	2002      	movs	r0, #2
 800338e:	f004 fe23 	bl	8007fd8 <lcd_print>
 8003392:	e038      	b.n	8003406 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003394:	4b5a      	ldr	r3, [pc, #360]	; (8003500 <menu+0x1f58>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d134      	bne.n	8003406 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 800339c:	4a64      	ldr	r2, [pc, #400]	; (8003530 <menu+0x1f88>)
 800339e:	2101      	movs	r1, #1
 80033a0:	2002      	movs	r0, #2
 80033a2:	f004 fe19 	bl	8007fd8 <lcd_print>
 80033a6:	e02e      	b.n	8003406 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80033a8:	4b5f      	ldr	r3, [pc, #380]	; (8003528 <menu+0x1f80>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d113      	bne.n	80033d8 <menu+0x1e30>
			if(dilSecim == 0){
 80033b0:	4b53      	ldr	r3, [pc, #332]	; (8003500 <menu+0x1f58>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d105      	bne.n	80033c4 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80033b8:	4a5e      	ldr	r2, [pc, #376]	; (8003534 <menu+0x1f8c>)
 80033ba:	2101      	movs	r1, #1
 80033bc:	2002      	movs	r0, #2
 80033be:	f004 fe0b 	bl	8007fd8 <lcd_print>
 80033c2:	e020      	b.n	8003406 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80033c4:	4b4e      	ldr	r3, [pc, #312]	; (8003500 <menu+0x1f58>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d11c      	bne.n	8003406 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80033cc:	4a5a      	ldr	r2, [pc, #360]	; (8003538 <menu+0x1f90>)
 80033ce:	2101      	movs	r1, #1
 80033d0:	2002      	movs	r0, #2
 80033d2:	f004 fe01 	bl	8007fd8 <lcd_print>
 80033d6:	e016      	b.n	8003406 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80033d8:	4b53      	ldr	r3, [pc, #332]	; (8003528 <menu+0x1f80>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d112      	bne.n	8003406 <menu+0x1e5e>
			if(dilSecim == 0) {
 80033e0:	4b47      	ldr	r3, [pc, #284]	; (8003500 <menu+0x1f58>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80033e8:	4a54      	ldr	r2, [pc, #336]	; (800353c <menu+0x1f94>)
 80033ea:	2101      	movs	r1, #1
 80033ec:	2002      	movs	r0, #2
 80033ee:	f004 fdf3 	bl	8007fd8 <lcd_print>
 80033f2:	e008      	b.n	8003406 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80033f4:	4b42      	ldr	r3, [pc, #264]	; (8003500 <menu+0x1f58>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d104      	bne.n	8003406 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80033fc:	4a50      	ldr	r2, [pc, #320]	; (8003540 <menu+0x1f98>)
 80033fe:	2101      	movs	r1, #1
 8003400:	2002      	movs	r0, #2
 8003402:	f004 fde9 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003406:	2102      	movs	r1, #2
 8003408:	483f      	ldr	r0, [pc, #252]	; (8003508 <menu+0x1f60>)
 800340a:	f006 f90b 	bl	8009624 <HAL_GPIO_ReadPin>
 800340e:	4603      	mov	r3, r0
 8003410:	2b01      	cmp	r3, #1
 8003412:	d115      	bne.n	8003440 <menu+0x1e98>
 8003414:	4b3d      	ldr	r3, [pc, #244]	; (800350c <menu+0x1f64>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	f083 0301 	eor.w	r3, r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00e      	beq.n	8003440 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003422:	4b41      	ldr	r3, [pc, #260]	; (8003528 <menu+0x1f80>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	3301      	adds	r3, #1
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4b3f      	ldr	r3, [pc, #252]	; (8003528 <menu+0x1f80>)
 800342c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800342e:	4b3e      	ldr	r3, [pc, #248]	; (8003528 <menu+0x1f80>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d902      	bls.n	800343c <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8003436:	4b3c      	ldr	r3, [pc, #240]	; (8003528 <menu+0x1f80>)
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800343c:	f001 fc10 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003440:	2104      	movs	r1, #4
 8003442:	4831      	ldr	r0, [pc, #196]	; (8003508 <menu+0x1f60>)
 8003444:	f006 f8ee 	bl	8009624 <HAL_GPIO_ReadPin>
 8003448:	4603      	mov	r3, r0
 800344a:	2b01      	cmp	r3, #1
 800344c:	d115      	bne.n	800347a <menu+0x1ed2>
 800344e:	4b2f      	ldr	r3, [pc, #188]	; (800350c <menu+0x1f64>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	f083 0301 	eor.w	r3, r3, #1
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00e      	beq.n	800347a <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800345c:	4b32      	ldr	r3, [pc, #200]	; (8003528 <menu+0x1f80>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	3b01      	subs	r3, #1
 8003462:	b2da      	uxtb	r2, r3
 8003464:	4b30      	ldr	r3, [pc, #192]	; (8003528 <menu+0x1f80>)
 8003466:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003468:	4b2f      	ldr	r3, [pc, #188]	; (8003528 <menu+0x1f80>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d902      	bls.n	8003476 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <menu+0x1f80>)
 8003472:	2202      	movs	r2, #2
 8003474:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003476:	f001 fbf3 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800347a:	2108      	movs	r1, #8
 800347c:	4822      	ldr	r0, [pc, #136]	; (8003508 <menu+0x1f60>)
 800347e:	f006 f8d1 	bl	8009624 <HAL_GPIO_ReadPin>
 8003482:	4603      	mov	r3, r0
 8003484:	2b01      	cmp	r3, #1
 8003486:	d127      	bne.n	80034d8 <menu+0x1f30>
 8003488:	4b20      	ldr	r3, [pc, #128]	; (800350c <menu+0x1f64>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f083 0301 	eor.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d020      	beq.n	80034d8 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003496:	4b24      	ldr	r3, [pc, #144]	; (8003528 <menu+0x1f80>)
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <menu+0x1f6c>)
 800349c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800349e:	4b22      	ldr	r3, [pc, #136]	; (8003528 <menu+0x1f80>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d003      	beq.n	80034ae <menu+0x1f06>
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <menu+0x1f80>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d106      	bne.n	80034bc <menu+0x1f14>
				calismaSekli = 0;
 80034ae:	4b25      	ldr	r3, [pc, #148]	; (8003544 <menu+0x1f9c>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80034b4:	4b23      	ldr	r3, [pc, #140]	; (8003544 <menu+0x1f9c>)
 80034b6:	781a      	ldrb	r2, [r3, #0]
 80034b8:	4b16      	ldr	r3, [pc, #88]	; (8003514 <menu+0x1f6c>)
 80034ba:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80034bc:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <menu+0x1f80>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d106      	bne.n	80034d2 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80034c4:	4b20      	ldr	r3, [pc, #128]	; (8003548 <menu+0x1fa0>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <menu+0x1fa0>)
 80034cc:	781a      	ldrb	r2, [r3, #0]
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <menu+0x1f6c>)
 80034d0:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <menu+0x1f70>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80034d8:	4b10      	ldr	r3, [pc, #64]	; (800351c <menu+0x1f74>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b12      	cmp	r3, #18
 80034de:	f040 80d5 	bne.w	800368c <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80034e2:	4b11      	ldr	r3, [pc, #68]	; (8003528 <menu+0x1f80>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d13c      	bne.n	8003564 <menu+0x1fbc>
			if(dilSecim == 0) {
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <menu+0x1f58>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d12e      	bne.n	8003550 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80034f2:	4a16      	ldr	r2, [pc, #88]	; (800354c <menu+0x1fa4>)
 80034f4:	2101      	movs	r1, #1
 80034f6:	2001      	movs	r0, #1
 80034f8:	f004 fd6e 	bl	8007fd8 <lcd_print>
 80034fc:	e048      	b.n	8003590 <menu+0x1fe8>
 80034fe:	bf00      	nop
 8003500:	2000020d 	.word	0x2000020d
 8003504:	0800d7b0 	.word	0x0800d7b0
 8003508:	40010800 	.word	0x40010800
 800350c:	2000021b 	.word	0x2000021b
 8003510:	200001fa 	.word	0x200001fa
 8003514:	20000118 	.word	0x20000118
 8003518:	20000218 	.word	0x20000218
 800351c:	200001ec 	.word	0x200001ec
 8003520:	0800db2c 	.word	0x0800db2c
 8003524:	0800db40 	.word	0x0800db40
 8003528:	200001fb 	.word	0x200001fb
 800352c:	0800db54 	.word	0x0800db54
 8003530:	0800db64 	.word	0x0800db64
 8003534:	0800db74 	.word	0x0800db74
 8003538:	0800db84 	.word	0x0800db84
 800353c:	0800d73c 	.word	0x0800d73c
 8003540:	0800d750 	.word	0x0800d750
 8003544:	200001ed 	.word	0x200001ed
 8003548:	200001fe 	.word	0x200001fe
 800354c:	0800db94 	.word	0x0800db94
			} else if(dilSecim == 1) {
 8003550:	4b7b      	ldr	r3, [pc, #492]	; (8003740 <menu+0x2198>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d11b      	bne.n	8003590 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003558:	4a7a      	ldr	r2, [pc, #488]	; (8003744 <menu+0x219c>)
 800355a:	2101      	movs	r1, #1
 800355c:	2001      	movs	r0, #1
 800355e:	f004 fd3b 	bl	8007fd8 <lcd_print>
 8003562:	e015      	b.n	8003590 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003564:	4b78      	ldr	r3, [pc, #480]	; (8003748 <menu+0x21a0>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d111      	bne.n	8003590 <menu+0x1fe8>
			if(dilSecim == 0){
 800356c:	4b74      	ldr	r3, [pc, #464]	; (8003740 <menu+0x2198>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d104      	bne.n	800357e <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003574:	4a75      	ldr	r2, [pc, #468]	; (800374c <menu+0x21a4>)
 8003576:	2101      	movs	r1, #1
 8003578:	2001      	movs	r0, #1
 800357a:	f004 fd2d 	bl	8007fd8 <lcd_print>
			}
			if(dilSecim == 1){
 800357e:	4b70      	ldr	r3, [pc, #448]	; (8003740 <menu+0x2198>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d104      	bne.n	8003590 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003586:	4a72      	ldr	r2, [pc, #456]	; (8003750 <menu+0x21a8>)
 8003588:	2101      	movs	r1, #1
 800358a:	2001      	movs	r0, #1
 800358c:	f004 fd24 	bl	8007fd8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003590:	4b70      	ldr	r3, [pc, #448]	; (8003754 <menu+0x21ac>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d113      	bne.n	80035c0 <menu+0x2018>
			if(dilSecim == 0) {
 8003598:	4b69      	ldr	r3, [pc, #420]	; (8003740 <menu+0x2198>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d105      	bne.n	80035ac <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80035a0:	4a6d      	ldr	r2, [pc, #436]	; (8003758 <menu+0x21b0>)
 80035a2:	2101      	movs	r1, #1
 80035a4:	2002      	movs	r0, #2
 80035a6:	f004 fd17 	bl	8007fd8 <lcd_print>
 80035aa:	e020      	b.n	80035ee <menu+0x2046>
			} else if(dilSecim == 1){
 80035ac:	4b64      	ldr	r3, [pc, #400]	; (8003740 <menu+0x2198>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d11c      	bne.n	80035ee <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80035b4:	4a69      	ldr	r2, [pc, #420]	; (800375c <menu+0x21b4>)
 80035b6:	2101      	movs	r1, #1
 80035b8:	2002      	movs	r0, #2
 80035ba:	f004 fd0d 	bl	8007fd8 <lcd_print>
 80035be:	e016      	b.n	80035ee <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80035c0:	4b64      	ldr	r3, [pc, #400]	; (8003754 <menu+0x21ac>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d112      	bne.n	80035ee <menu+0x2046>
			if(dilSecim == 0){
 80035c8:	4b5d      	ldr	r3, [pc, #372]	; (8003740 <menu+0x2198>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80035d0:	4a63      	ldr	r2, [pc, #396]	; (8003760 <menu+0x21b8>)
 80035d2:	2101      	movs	r1, #1
 80035d4:	2002      	movs	r0, #2
 80035d6:	f004 fcff 	bl	8007fd8 <lcd_print>
 80035da:	e008      	b.n	80035ee <menu+0x2046>
			} else if(dilSecim == 1){
 80035dc:	4b58      	ldr	r3, [pc, #352]	; (8003740 <menu+0x2198>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d104      	bne.n	80035ee <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80035e4:	4a5f      	ldr	r2, [pc, #380]	; (8003764 <menu+0x21bc>)
 80035e6:	2101      	movs	r1, #1
 80035e8:	2002      	movs	r0, #2
 80035ea:	f004 fcf5 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035ee:	2102      	movs	r1, #2
 80035f0:	485d      	ldr	r0, [pc, #372]	; (8003768 <menu+0x21c0>)
 80035f2:	f006 f817 	bl	8009624 <HAL_GPIO_ReadPin>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d115      	bne.n	8003628 <menu+0x2080>
 80035fc:	4b5b      	ldr	r3, [pc, #364]	; (800376c <menu+0x21c4>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	f083 0301 	eor.w	r3, r3, #1
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00e      	beq.n	8003628 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800360a:	4b52      	ldr	r3, [pc, #328]	; (8003754 <menu+0x21ac>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	3301      	adds	r3, #1
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b50      	ldr	r3, [pc, #320]	; (8003754 <menu+0x21ac>)
 8003614:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003616:	4b4f      	ldr	r3, [pc, #316]	; (8003754 <menu+0x21ac>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d902      	bls.n	8003624 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800361e:	4b4d      	ldr	r3, [pc, #308]	; (8003754 <menu+0x21ac>)
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003624:	f001 fb1c 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003628:	2104      	movs	r1, #4
 800362a:	484f      	ldr	r0, [pc, #316]	; (8003768 <menu+0x21c0>)
 800362c:	f005 fffa 	bl	8009624 <HAL_GPIO_ReadPin>
 8003630:	4603      	mov	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	d115      	bne.n	8003662 <menu+0x20ba>
 8003636:	4b4d      	ldr	r3, [pc, #308]	; (800376c <menu+0x21c4>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	f083 0301 	eor.w	r3, r3, #1
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00e      	beq.n	8003662 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003644:	4b43      	ldr	r3, [pc, #268]	; (8003754 <menu+0x21ac>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	3b01      	subs	r3, #1
 800364a:	b2da      	uxtb	r2, r3
 800364c:	4b41      	ldr	r3, [pc, #260]	; (8003754 <menu+0x21ac>)
 800364e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003650:	4b40      	ldr	r3, [pc, #256]	; (8003754 <menu+0x21ac>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003658:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <menu+0x21ac>)
 800365a:	2201      	movs	r2, #1
 800365c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800365e:	f001 faff 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003662:	2108      	movs	r1, #8
 8003664:	4840      	ldr	r0, [pc, #256]	; (8003768 <menu+0x21c0>)
 8003666:	f005 ffdd 	bl	8009624 <HAL_GPIO_ReadPin>
 800366a:	4603      	mov	r3, r0
 800366c:	2b01      	cmp	r3, #1
 800366e:	d10d      	bne.n	800368c <menu+0x20e4>
 8003670:	4b3e      	ldr	r3, [pc, #248]	; (800376c <menu+0x21c4>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	f083 0301 	eor.w	r3, r3, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d006      	beq.n	800368c <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800367e:	4b35      	ldr	r3, [pc, #212]	; (8003754 <menu+0x21ac>)
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <menu+0x21c8>)
 8003684:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003686:	4b3b      	ldr	r3, [pc, #236]	; (8003774 <menu+0x21cc>)
 8003688:	2201      	movs	r2, #1
 800368a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800368c:	4b3a      	ldr	r3, [pc, #232]	; (8003778 <menu+0x21d0>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b13      	cmp	r3, #19
 8003692:	f040 80d5 	bne.w	8003840 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003696:	4b2c      	ldr	r3, [pc, #176]	; (8003748 <menu+0x21a0>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d113      	bne.n	80036c6 <menu+0x211e>
			if(dilSecim == 0) {
 800369e:	4b28      	ldr	r3, [pc, #160]	; (8003740 <menu+0x2198>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d105      	bne.n	80036b2 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80036a6:	4a35      	ldr	r2, [pc, #212]	; (800377c <menu+0x21d4>)
 80036a8:	2101      	movs	r1, #1
 80036aa:	2001      	movs	r0, #1
 80036ac:	f004 fc94 	bl	8007fd8 <lcd_print>
 80036b0:	e01f      	b.n	80036f2 <menu+0x214a>
			} else if(dilSecim == 1) {
 80036b2:	4b23      	ldr	r3, [pc, #140]	; (8003740 <menu+0x2198>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d11b      	bne.n	80036f2 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80036ba:	4a31      	ldr	r2, [pc, #196]	; (8003780 <menu+0x21d8>)
 80036bc:	2101      	movs	r1, #1
 80036be:	2001      	movs	r0, #1
 80036c0:	f004 fc8a 	bl	8007fd8 <lcd_print>
 80036c4:	e015      	b.n	80036f2 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80036c6:	4b20      	ldr	r3, [pc, #128]	; (8003748 <menu+0x21a0>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d111      	bne.n	80036f2 <menu+0x214a>
			if(dilSecim == 0) {
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <menu+0x2198>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d104      	bne.n	80036e0 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80036d6:	4a2b      	ldr	r2, [pc, #172]	; (8003784 <menu+0x21dc>)
 80036d8:	2101      	movs	r1, #1
 80036da:	2001      	movs	r0, #1
 80036dc:	f004 fc7c 	bl	8007fd8 <lcd_print>
			}
			if(dilSecim == 1) {
 80036e0:	4b17      	ldr	r3, [pc, #92]	; (8003740 <menu+0x2198>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d104      	bne.n	80036f2 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80036e8:	4a27      	ldr	r2, [pc, #156]	; (8003788 <menu+0x21e0>)
 80036ea:	2101      	movs	r1, #1
 80036ec:	2001      	movs	r0, #1
 80036ee:	f004 fc73 	bl	8007fd8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80036f2:	4b26      	ldr	r3, [pc, #152]	; (800378c <menu+0x21e4>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d113      	bne.n	8003722 <menu+0x217a>
			if(dilSecim == 0) {
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <menu+0x2198>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d105      	bne.n	800370e <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8003702:	4a15      	ldr	r2, [pc, #84]	; (8003758 <menu+0x21b0>)
 8003704:	2101      	movs	r1, #1
 8003706:	2002      	movs	r0, #2
 8003708:	f004 fc66 	bl	8007fd8 <lcd_print>
 800370c:	e049      	b.n	80037a2 <menu+0x21fa>
			} else if(dilSecim == 1) {
 800370e:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <menu+0x2198>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d145      	bne.n	80037a2 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003716:	4a11      	ldr	r2, [pc, #68]	; (800375c <menu+0x21b4>)
 8003718:	2101      	movs	r1, #1
 800371a:	2002      	movs	r0, #2
 800371c:	f004 fc5c 	bl	8007fd8 <lcd_print>
 8003720:	e03f      	b.n	80037a2 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003722:	4b1a      	ldr	r3, [pc, #104]	; (800378c <menu+0x21e4>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d13b      	bne.n	80037a2 <menu+0x21fa>
			if(dilSecim == 0) {
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <menu+0x2198>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d12e      	bne.n	8003790 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003732:	4a0b      	ldr	r2, [pc, #44]	; (8003760 <menu+0x21b8>)
 8003734:	2101      	movs	r1, #1
 8003736:	2002      	movs	r0, #2
 8003738:	f004 fc4e 	bl	8007fd8 <lcd_print>
 800373c:	e031      	b.n	80037a2 <menu+0x21fa>
 800373e:	bf00      	nop
 8003740:	2000020d 	.word	0x2000020d
 8003744:	0800dba8 	.word	0x0800dba8
 8003748:	200001fb 	.word	0x200001fb
 800374c:	0800dbb8 	.word	0x0800dbb8
 8003750:	0800dbcc 	.word	0x0800dbcc
 8003754:	200001fc 	.word	0x200001fc
 8003758:	0800d73c 	.word	0x0800d73c
 800375c:	0800d750 	.word	0x0800d750
 8003760:	0800d79c 	.word	0x0800d79c
 8003764:	0800d7b0 	.word	0x0800d7b0
 8003768:	40010800 	.word	0x40010800
 800376c:	2000021b 	.word	0x2000021b
 8003770:	20000118 	.word	0x20000118
 8003774:	20000218 	.word	0x20000218
 8003778:	200001ec 	.word	0x200001ec
 800377c:	0800dbe0 	.word	0x0800dbe0
 8003780:	0800dbf4 	.word	0x0800dbf4
 8003784:	0800dc08 	.word	0x0800dc08
 8003788:	0800dc1c 	.word	0x0800dc1c
 800378c:	200001fd 	.word	0x200001fd
			} else if(dilSecim == 1) {
 8003790:	4b90      	ldr	r3, [pc, #576]	; (80039d4 <menu+0x242c>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d104      	bne.n	80037a2 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003798:	4a8f      	ldr	r2, [pc, #572]	; (80039d8 <menu+0x2430>)
 800379a:	2101      	movs	r1, #1
 800379c:	2002      	movs	r0, #2
 800379e:	f004 fc1b 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037a2:	2102      	movs	r1, #2
 80037a4:	488d      	ldr	r0, [pc, #564]	; (80039dc <menu+0x2434>)
 80037a6:	f005 ff3d 	bl	8009624 <HAL_GPIO_ReadPin>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d115      	bne.n	80037dc <menu+0x2234>
 80037b0:	4b8b      	ldr	r3, [pc, #556]	; (80039e0 <menu+0x2438>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	f083 0301 	eor.w	r3, r3, #1
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00e      	beq.n	80037dc <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80037be:	4b89      	ldr	r3, [pc, #548]	; (80039e4 <menu+0x243c>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	3301      	adds	r3, #1
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4b87      	ldr	r3, [pc, #540]	; (80039e4 <menu+0x243c>)
 80037c8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80037ca:	4b86      	ldr	r3, [pc, #536]	; (80039e4 <menu+0x243c>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d902      	bls.n	80037d8 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80037d2:	4b84      	ldr	r3, [pc, #528]	; (80039e4 <menu+0x243c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037d8:	f001 fa42 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037dc:	2104      	movs	r1, #4
 80037de:	487f      	ldr	r0, [pc, #508]	; (80039dc <menu+0x2434>)
 80037e0:	f005 ff20 	bl	8009624 <HAL_GPIO_ReadPin>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d115      	bne.n	8003816 <menu+0x226e>
 80037ea:	4b7d      	ldr	r3, [pc, #500]	; (80039e0 <menu+0x2438>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	f083 0301 	eor.w	r3, r3, #1
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00e      	beq.n	8003816 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80037f8:	4b7a      	ldr	r3, [pc, #488]	; (80039e4 <menu+0x243c>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	4b78      	ldr	r3, [pc, #480]	; (80039e4 <menu+0x243c>)
 8003802:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003804:	4b77      	ldr	r3, [pc, #476]	; (80039e4 <menu+0x243c>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 800380c:	4b75      	ldr	r3, [pc, #468]	; (80039e4 <menu+0x243c>)
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003812:	f001 fa25 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003816:	2108      	movs	r1, #8
 8003818:	4870      	ldr	r0, [pc, #448]	; (80039dc <menu+0x2434>)
 800381a:	f005 ff03 	bl	8009624 <HAL_GPIO_ReadPin>
 800381e:	4603      	mov	r3, r0
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10d      	bne.n	8003840 <menu+0x2298>
 8003824:	4b6e      	ldr	r3, [pc, #440]	; (80039e0 <menu+0x2438>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	f083 0301 	eor.w	r3, r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d006      	beq.n	8003840 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003832:	4b6c      	ldr	r3, [pc, #432]	; (80039e4 <menu+0x243c>)
 8003834:	781a      	ldrb	r2, [r3, #0]
 8003836:	4b6c      	ldr	r3, [pc, #432]	; (80039e8 <menu+0x2440>)
 8003838:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800383a:	4b6c      	ldr	r3, [pc, #432]	; (80039ec <menu+0x2444>)
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003840:	4b6b      	ldr	r3, [pc, #428]	; (80039f0 <menu+0x2448>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b14      	cmp	r3, #20
 8003846:	f040 80b5 	bne.w	80039b4 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800384a:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <menu+0x244c>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d113      	bne.n	800387a <menu+0x22d2>
			if(dilSecim == 0) {
 8003852:	4b60      	ldr	r3, [pc, #384]	; (80039d4 <menu+0x242c>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800385a:	4a67      	ldr	r2, [pc, #412]	; (80039f8 <menu+0x2450>)
 800385c:	2101      	movs	r1, #1
 800385e:	2001      	movs	r0, #1
 8003860:	f004 fbba 	bl	8007fd8 <lcd_print>
 8003864:	e020      	b.n	80038a8 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003866:	4b5b      	ldr	r3, [pc, #364]	; (80039d4 <menu+0x242c>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d11c      	bne.n	80038a8 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800386e:	4a63      	ldr	r2, [pc, #396]	; (80039fc <menu+0x2454>)
 8003870:	2101      	movs	r1, #1
 8003872:	2001      	movs	r0, #1
 8003874:	f004 fbb0 	bl	8007fd8 <lcd_print>
 8003878:	e016      	b.n	80038a8 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800387a:	4b5e      	ldr	r3, [pc, #376]	; (80039f4 <menu+0x244c>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d112      	bne.n	80038a8 <menu+0x2300>
			if(dilSecim == 0) {
 8003882:	4b54      	ldr	r3, [pc, #336]	; (80039d4 <menu+0x242c>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d105      	bne.n	8003896 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800388a:	4a5d      	ldr	r2, [pc, #372]	; (8003a00 <menu+0x2458>)
 800388c:	2101      	movs	r1, #1
 800388e:	2001      	movs	r0, #1
 8003890:	f004 fba2 	bl	8007fd8 <lcd_print>
 8003894:	e008      	b.n	80038a8 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003896:	4b4f      	ldr	r3, [pc, #316]	; (80039d4 <menu+0x242c>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d104      	bne.n	80038a8 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800389e:	4a59      	ldr	r2, [pc, #356]	; (8003a04 <menu+0x245c>)
 80038a0:	2101      	movs	r1, #1
 80038a2:	2001      	movs	r0, #1
 80038a4:	f004 fb98 	bl	8007fd8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80038a8:	4b57      	ldr	r3, [pc, #348]	; (8003a08 <menu+0x2460>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d113      	bne.n	80038d8 <menu+0x2330>
			if(dilSecim == 0) {
 80038b0:	4b48      	ldr	r3, [pc, #288]	; (80039d4 <menu+0x242c>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80038b8:	4a54      	ldr	r2, [pc, #336]	; (8003a0c <menu+0x2464>)
 80038ba:	2101      	movs	r1, #1
 80038bc:	2002      	movs	r0, #2
 80038be:	f004 fb8b 	bl	8007fd8 <lcd_print>
 80038c2:	e020      	b.n	8003906 <menu+0x235e>
			} else if(dilSecim == 1) {
 80038c4:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <menu+0x242c>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d11c      	bne.n	8003906 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80038cc:	4a50      	ldr	r2, [pc, #320]	; (8003a10 <menu+0x2468>)
 80038ce:	2101      	movs	r1, #1
 80038d0:	2002      	movs	r0, #2
 80038d2:	f004 fb81 	bl	8007fd8 <lcd_print>
 80038d6:	e016      	b.n	8003906 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80038d8:	4b4b      	ldr	r3, [pc, #300]	; (8003a08 <menu+0x2460>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d112      	bne.n	8003906 <menu+0x235e>
			if(dilSecim == 0) {
 80038e0:	4b3c      	ldr	r3, [pc, #240]	; (80039d4 <menu+0x242c>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80038e8:	4a4a      	ldr	r2, [pc, #296]	; (8003a14 <menu+0x246c>)
 80038ea:	2101      	movs	r1, #1
 80038ec:	2002      	movs	r0, #2
 80038ee:	f004 fb73 	bl	8007fd8 <lcd_print>
 80038f2:	e008      	b.n	8003906 <menu+0x235e>
			} else if(dilSecim == 1) {
 80038f4:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <menu+0x242c>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d104      	bne.n	8003906 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80038fc:	4a46      	ldr	r2, [pc, #280]	; (8003a18 <menu+0x2470>)
 80038fe:	2101      	movs	r1, #1
 8003900:	2002      	movs	r0, #2
 8003902:	f004 fb69 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003906:	2102      	movs	r1, #2
 8003908:	4834      	ldr	r0, [pc, #208]	; (80039dc <menu+0x2434>)
 800390a:	f005 fe8b 	bl	8009624 <HAL_GPIO_ReadPin>
 800390e:	4603      	mov	r3, r0
 8003910:	2b01      	cmp	r3, #1
 8003912:	d119      	bne.n	8003948 <menu+0x23a0>
 8003914:	4b32      	ldr	r3, [pc, #200]	; (80039e0 <menu+0x2438>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	f083 0301 	eor.w	r3, r3, #1
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d012      	beq.n	8003948 <menu+0x23a0>
 8003922:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <menu+0x244c>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d10e      	bne.n	8003948 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800392a:	4b37      	ldr	r3, [pc, #220]	; (8003a08 <menu+0x2460>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	3301      	adds	r3, #1
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b35      	ldr	r3, [pc, #212]	; (8003a08 <menu+0x2460>)
 8003934:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003936:	4b34      	ldr	r3, [pc, #208]	; (8003a08 <menu+0x2460>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d902      	bls.n	8003944 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800393e:	4b32      	ldr	r3, [pc, #200]	; (8003a08 <menu+0x2460>)
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003944:	f001 f98c 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003948:	2104      	movs	r1, #4
 800394a:	4824      	ldr	r0, [pc, #144]	; (80039dc <menu+0x2434>)
 800394c:	f005 fe6a 	bl	8009624 <HAL_GPIO_ReadPin>
 8003950:	4603      	mov	r3, r0
 8003952:	2b01      	cmp	r3, #1
 8003954:	d119      	bne.n	800398a <menu+0x23e2>
 8003956:	4b22      	ldr	r3, [pc, #136]	; (80039e0 <menu+0x2438>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	f083 0301 	eor.w	r3, r3, #1
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d012      	beq.n	800398a <menu+0x23e2>
 8003964:	4b23      	ldr	r3, [pc, #140]	; (80039f4 <menu+0x244c>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d10e      	bne.n	800398a <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 800396c:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <menu+0x2460>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	3b01      	subs	r3, #1
 8003972:	b2da      	uxtb	r2, r3
 8003974:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <menu+0x2460>)
 8003976:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003978:	4b23      	ldr	r3, [pc, #140]	; (8003a08 <menu+0x2460>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003980:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <menu+0x2460>)
 8003982:	2201      	movs	r2, #1
 8003984:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003986:	f001 f96b 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800398a:	2108      	movs	r1, #8
 800398c:	4813      	ldr	r0, [pc, #76]	; (80039dc <menu+0x2434>)
 800398e:	f005 fe49 	bl	8009624 <HAL_GPIO_ReadPin>
 8003992:	4603      	mov	r3, r0
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10d      	bne.n	80039b4 <menu+0x240c>
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <menu+0x2438>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	f083 0301 	eor.w	r3, r3, #1
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d006      	beq.n	80039b4 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <menu+0x2460>)
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <menu+0x2440>)
 80039ac:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80039ae:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <menu+0x2444>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <menu+0x2448>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b15      	cmp	r3, #21
 80039ba:	f040 80c2 	bne.w	8003b42 <menu+0x259a>
		if(dilSecim == 0) {
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <menu+0x242c>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d12c      	bne.n	8003a20 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80039c6:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <menu+0x2474>)
 80039c8:	2101      	movs	r1, #1
 80039ca:	2001      	movs	r0, #1
 80039cc:	f004 fb04 	bl	8007fd8 <lcd_print>
 80039d0:	e02f      	b.n	8003a32 <menu+0x248a>
 80039d2:	bf00      	nop
 80039d4:	2000020d 	.word	0x2000020d
 80039d8:	0800d7b0 	.word	0x0800d7b0
 80039dc:	40010800 	.word	0x40010800
 80039e0:	2000021b 	.word	0x2000021b
 80039e4:	200001fd 	.word	0x200001fd
 80039e8:	20000118 	.word	0x20000118
 80039ec:	20000218 	.word	0x20000218
 80039f0:	200001ec 	.word	0x200001ec
 80039f4:	200001fb 	.word	0x200001fb
 80039f8:	0800dc30 	.word	0x0800dc30
 80039fc:	0800dc44 	.word	0x0800dc44
 8003a00:	0800dc58 	.word	0x0800dc58
 8003a04:	0800dc6c 	.word	0x0800dc6c
 8003a08:	200001fe 	.word	0x200001fe
 8003a0c:	0800dc80 	.word	0x0800dc80
 8003a10:	0800dc94 	.word	0x0800dc94
 8003a14:	0800dca4 	.word	0x0800dca4
 8003a18:	0800dcb8 	.word	0x0800dcb8
 8003a1c:	0800dcc8 	.word	0x0800dcc8
		} else if(dilSecim == 1) {
 8003a20:	4b9c      	ldr	r3, [pc, #624]	; (8003c94 <menu+0x26ec>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d104      	bne.n	8003a32 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003a28:	4a9b      	ldr	r2, [pc, #620]	; (8003c98 <menu+0x26f0>)
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f004 fad3 	bl	8007fd8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003a32:	4b9a      	ldr	r3, [pc, #616]	; (8003c9c <menu+0x26f4>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d112      	bne.n	8003a60 <menu+0x24b8>
			if(dilSecim == 0) {
 8003a3a:	4b96      	ldr	r3, [pc, #600]	; (8003c94 <menu+0x26ec>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d104      	bne.n	8003a4c <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003a42:	4a97      	ldr	r2, [pc, #604]	; (8003ca0 <menu+0x26f8>)
 8003a44:	2101      	movs	r1, #1
 8003a46:	2002      	movs	r0, #2
 8003a48:	f004 fac6 	bl	8007fd8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003a4c:	4b91      	ldr	r3, [pc, #580]	; (8003c94 <menu+0x26ec>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d11c      	bne.n	8003a8e <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003a54:	4a93      	ldr	r2, [pc, #588]	; (8003ca4 <menu+0x26fc>)
 8003a56:	2101      	movs	r1, #1
 8003a58:	2002      	movs	r0, #2
 8003a5a:	f004 fabd 	bl	8007fd8 <lcd_print>
 8003a5e:	e016      	b.n	8003a8e <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003a60:	4b8e      	ldr	r3, [pc, #568]	; (8003c9c <menu+0x26f4>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d112      	bne.n	8003a8e <menu+0x24e6>
			if(dilSecim == 0) {
 8003a68:	4b8a      	ldr	r3, [pc, #552]	; (8003c94 <menu+0x26ec>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d105      	bne.n	8003a7c <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003a70:	4a8d      	ldr	r2, [pc, #564]	; (8003ca8 <menu+0x2700>)
 8003a72:	2101      	movs	r1, #1
 8003a74:	2002      	movs	r0, #2
 8003a76:	f004 faaf 	bl	8007fd8 <lcd_print>
 8003a7a:	e008      	b.n	8003a8e <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003a7c:	4b85      	ldr	r3, [pc, #532]	; (8003c94 <menu+0x26ec>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d104      	bne.n	8003a8e <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003a84:	4a89      	ldr	r2, [pc, #548]	; (8003cac <menu+0x2704>)
 8003a86:	2101      	movs	r1, #1
 8003a88:	2002      	movs	r0, #2
 8003a8a:	f004 faa5 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a8e:	2102      	movs	r1, #2
 8003a90:	4887      	ldr	r0, [pc, #540]	; (8003cb0 <menu+0x2708>)
 8003a92:	f005 fdc7 	bl	8009624 <HAL_GPIO_ReadPin>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d115      	bne.n	8003ac8 <menu+0x2520>
 8003a9c:	4b85      	ldr	r3, [pc, #532]	; (8003cb4 <menu+0x270c>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	f083 0301 	eor.w	r3, r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00e      	beq.n	8003ac8 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003aaa:	4b7c      	ldr	r3, [pc, #496]	; (8003c9c <menu+0x26f4>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	4b7a      	ldr	r3, [pc, #488]	; (8003c9c <menu+0x26f4>)
 8003ab4:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003ab6:	4b79      	ldr	r3, [pc, #484]	; (8003c9c <menu+0x26f4>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d902      	bls.n	8003ac4 <menu+0x251c>
				platformSilindirTipi = 0;
 8003abe:	4b77      	ldr	r3, [pc, #476]	; (8003c9c <menu+0x26f4>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ac4:	f001 f8cc 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ac8:	2104      	movs	r1, #4
 8003aca:	4879      	ldr	r0, [pc, #484]	; (8003cb0 <menu+0x2708>)
 8003acc:	f005 fdaa 	bl	8009624 <HAL_GPIO_ReadPin>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d115      	bne.n	8003b02 <menu+0x255a>
 8003ad6:	4b77      	ldr	r3, [pc, #476]	; (8003cb4 <menu+0x270c>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	f083 0301 	eor.w	r3, r3, #1
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00e      	beq.n	8003b02 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003ae4:	4b6d      	ldr	r3, [pc, #436]	; (8003c9c <menu+0x26f4>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	4b6b      	ldr	r3, [pc, #428]	; (8003c9c <menu+0x26f4>)
 8003aee:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003af0:	4b6a      	ldr	r3, [pc, #424]	; (8003c9c <menu+0x26f4>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003af8:	4b68      	ldr	r3, [pc, #416]	; (8003c9c <menu+0x26f4>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003afe:	f001 f8af 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b02:	2108      	movs	r1, #8
 8003b04:	486a      	ldr	r0, [pc, #424]	; (8003cb0 <menu+0x2708>)
 8003b06:	f005 fd8d 	bl	8009624 <HAL_GPIO_ReadPin>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d118      	bne.n	8003b42 <menu+0x259a>
 8003b10:	4b68      	ldr	r3, [pc, #416]	; (8003cb4 <menu+0x270c>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	f083 0301 	eor.w	r3, r3, #1
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d011      	beq.n	8003b42 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003b1e:	4b5f      	ldr	r3, [pc, #380]	; (8003c9c <menu+0x26f4>)
 8003b20:	781a      	ldrb	r2, [r3, #0]
 8003b22:	4b65      	ldr	r3, [pc, #404]	; (8003cb8 <menu+0x2710>)
 8003b24:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003b26:	4b5d      	ldr	r3, [pc, #372]	; (8003c9c <menu+0x26f4>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d106      	bne.n	8003b3c <menu+0x2594>
				altLimit = 1;
 8003b2e:	4b63      	ldr	r3, [pc, #396]	; (8003cbc <menu+0x2714>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003b34:	4b61      	ldr	r3, [pc, #388]	; (8003cbc <menu+0x2714>)
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	4b5f      	ldr	r3, [pc, #380]	; (8003cb8 <menu+0x2710>)
 8003b3a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003b3c:	4b60      	ldr	r3, [pc, #384]	; (8003cc0 <menu+0x2718>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003b42:	4b60      	ldr	r3, [pc, #384]	; (8003cc4 <menu+0x271c>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b16      	cmp	r3, #22
 8003b48:	f040 8081 	bne.w	8003c4e <menu+0x26a6>
		if(dilSecim == 0) {
 8003b4c:	4b51      	ldr	r3, [pc, #324]	; (8003c94 <menu+0x26ec>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003b54:	4a5c      	ldr	r2, [pc, #368]	; (8003cc8 <menu+0x2720>)
 8003b56:	2101      	movs	r1, #1
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f004 fa3d 	bl	8007fd8 <lcd_print>
 8003b5e:	e008      	b.n	8003b72 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003b60:	4b4c      	ldr	r3, [pc, #304]	; (8003c94 <menu+0x26ec>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d104      	bne.n	8003b72 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003b68:	4a58      	ldr	r2, [pc, #352]	; (8003ccc <menu+0x2724>)
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f004 fa33 	bl	8007fd8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b72:	4b48      	ldr	r3, [pc, #288]	; (8003c94 <menu+0x26ec>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d105      	bne.n	8003b86 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b7a:	4a55      	ldr	r2, [pc, #340]	; (8003cd0 <menu+0x2728>)
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	2002      	movs	r0, #2
 8003b80:	f004 fa2a 	bl	8007fd8 <lcd_print>
 8003b84:	e008      	b.n	8003b98 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003b86:	4b43      	ldr	r3, [pc, #268]	; (8003c94 <menu+0x26ec>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d104      	bne.n	8003b98 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003b8e:	4a51      	ldr	r2, [pc, #324]	; (8003cd4 <menu+0x272c>)
 8003b90:	2101      	movs	r1, #1
 8003b92:	2002      	movs	r0, #2
 8003b94:	f004 fa20 	bl	8007fd8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003b98:	4b4f      	ldr	r3, [pc, #316]	; (8003cd8 <menu+0x2730>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	220a      	movs	r2, #10
 8003b9e:	494f      	ldr	r1, [pc, #316]	; (8003cdc <menu+0x2734>)
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f008 fdc7 	bl	800c734 <itoa>
		lcd_print(2,16,snum);
 8003ba6:	4a4d      	ldr	r2, [pc, #308]	; (8003cdc <menu+0x2734>)
 8003ba8:	2110      	movs	r1, #16
 8003baa:	2002      	movs	r0, #2
 8003bac:	f004 fa14 	bl	8007fd8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bb0:	2102      	movs	r1, #2
 8003bb2:	483f      	ldr	r0, [pc, #252]	; (8003cb0 <menu+0x2708>)
 8003bb4:	f005 fd36 	bl	8009624 <HAL_GPIO_ReadPin>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d115      	bne.n	8003bea <menu+0x2642>
 8003bbe:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <menu+0x270c>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	f083 0301 	eor.w	r3, r3, #1
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00e      	beq.n	8003bea <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003bcc:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <menu+0x2730>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	4b40      	ldr	r3, [pc, #256]	; (8003cd8 <menu+0x2730>)
 8003bd6:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003bd8:	4b3f      	ldr	r3, [pc, #252]	; (8003cd8 <menu+0x2730>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b05      	cmp	r3, #5
 8003bde:	d902      	bls.n	8003be6 <menu+0x263e>
				yukariValfTmr = 0;
 8003be0:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <menu+0x2730>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003be6:	f001 f83b 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bea:	2104      	movs	r1, #4
 8003bec:	4830      	ldr	r0, [pc, #192]	; (8003cb0 <menu+0x2708>)
 8003bee:	f005 fd19 	bl	8009624 <HAL_GPIO_ReadPin>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d115      	bne.n	8003c24 <menu+0x267c>
 8003bf8:	4b2e      	ldr	r3, [pc, #184]	; (8003cb4 <menu+0x270c>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	f083 0301 	eor.w	r3, r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00e      	beq.n	8003c24 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003c06:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <menu+0x2730>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b32      	ldr	r3, [pc, #200]	; (8003cd8 <menu+0x2730>)
 8003c10:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003c12:	4b31      	ldr	r3, [pc, #196]	; (8003cd8 <menu+0x2730>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b06      	cmp	r3, #6
 8003c18:	d902      	bls.n	8003c20 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003c1a:	4b2f      	ldr	r3, [pc, #188]	; (8003cd8 <menu+0x2730>)
 8003c1c:	2205      	movs	r2, #5
 8003c1e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c20:	f001 f81e 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c24:	2108      	movs	r1, #8
 8003c26:	4822      	ldr	r0, [pc, #136]	; (8003cb0 <menu+0x2708>)
 8003c28:	f005 fcfc 	bl	8009624 <HAL_GPIO_ReadPin>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d10d      	bne.n	8003c4e <menu+0x26a6>
 8003c32:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <menu+0x270c>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	f083 0301 	eor.w	r3, r3, #1
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d006      	beq.n	8003c4e <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003c40:	4b25      	ldr	r3, [pc, #148]	; (8003cd8 <menu+0x2730>)
 8003c42:	781a      	ldrb	r2, [r3, #0]
 8003c44:	4b1c      	ldr	r3, [pc, #112]	; (8003cb8 <menu+0x2710>)
 8003c46:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003c48:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <menu+0x2718>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003c4e:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <menu+0x271c>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b17      	cmp	r3, #23
 8003c54:	f040 80ac 	bne.w	8003db0 <menu+0x2808>
		if(dilSecim == 0) {
 8003c58:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <menu+0x26ec>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d105      	bne.n	8003c6c <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003c60:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <menu+0x2738>)
 8003c62:	2101      	movs	r1, #1
 8003c64:	2001      	movs	r0, #1
 8003c66:	f004 f9b7 	bl	8007fd8 <lcd_print>
 8003c6a:	e008      	b.n	8003c7e <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <menu+0x26ec>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d104      	bne.n	8003c7e <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003c74:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <menu+0x273c>)
 8003c76:	2101      	movs	r1, #1
 8003c78:	2001      	movs	r0, #1
 8003c7a:	f004 f9ad 	bl	8007fd8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <menu+0x26ec>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d130      	bne.n	8003ce8 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c86:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <menu+0x2728>)
 8003c88:	2101      	movs	r1, #1
 8003c8a:	2002      	movs	r0, #2
 8003c8c:	f004 f9a4 	bl	8007fd8 <lcd_print>
 8003c90:	e033      	b.n	8003cfa <menu+0x2752>
 8003c92:	bf00      	nop
 8003c94:	2000020d 	.word	0x2000020d
 8003c98:	0800dcdc 	.word	0x0800dcdc
 8003c9c:	200001ff 	.word	0x200001ff
 8003ca0:	0800dc80 	.word	0x0800dc80
 8003ca4:	0800dc94 	.word	0x0800dc94
 8003ca8:	0800dca4 	.word	0x0800dca4
 8003cac:	0800dcb8 	.word	0x0800dcb8
 8003cb0:	40010800 	.word	0x40010800
 8003cb4:	2000021b 	.word	0x2000021b
 8003cb8:	20000118 	.word	0x20000118
 8003cbc:	200001f2 	.word	0x200001f2
 8003cc0:	20000218 	.word	0x20000218
 8003cc4:	200001ec 	.word	0x200001ec
 8003cc8:	0800dcec 	.word	0x0800dcec
 8003ccc:	0800dd00 	.word	0x0800dd00
 8003cd0:	0800d9a0 	.word	0x0800d9a0
 8003cd4:	0800dd14 	.word	0x0800dd14
 8003cd8:	20000200 	.word	0x20000200
 8003cdc:	20000188 	.word	0x20000188
 8003ce0:	0800dd24 	.word	0x0800dd24
 8003ce4:	0800dd38 	.word	0x0800dd38
			} else if(dilSecim == 1) {
 8003ce8:	4b98      	ldr	r3, [pc, #608]	; (8003f4c <menu+0x29a4>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d104      	bne.n	8003cfa <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003cf0:	4a97      	ldr	r2, [pc, #604]	; (8003f50 <menu+0x29a8>)
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	2002      	movs	r0, #2
 8003cf6:	f004 f96f 	bl	8007fd8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003cfa:	4b96      	ldr	r3, [pc, #600]	; (8003f54 <menu+0x29ac>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	220a      	movs	r2, #10
 8003d00:	4995      	ldr	r1, [pc, #596]	; (8003f58 <menu+0x29b0>)
 8003d02:	4618      	mov	r0, r3
 8003d04:	f008 fd16 	bl	800c734 <itoa>
		lcd_print(2,16,snum);
 8003d08:	4a93      	ldr	r2, [pc, #588]	; (8003f58 <menu+0x29b0>)
 8003d0a:	2110      	movs	r1, #16
 8003d0c:	2002      	movs	r0, #2
 8003d0e:	f004 f963 	bl	8007fd8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d12:	2102      	movs	r1, #2
 8003d14:	4891      	ldr	r0, [pc, #580]	; (8003f5c <menu+0x29b4>)
 8003d16:	f005 fc85 	bl	8009624 <HAL_GPIO_ReadPin>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d115      	bne.n	8003d4c <menu+0x27a4>
 8003d20:	4b8f      	ldr	r3, [pc, #572]	; (8003f60 <menu+0x29b8>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	f083 0301 	eor.w	r3, r3, #1
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00e      	beq.n	8003d4c <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003d2e:	4b89      	ldr	r3, [pc, #548]	; (8003f54 <menu+0x29ac>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	3301      	adds	r3, #1
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	4b87      	ldr	r3, [pc, #540]	; (8003f54 <menu+0x29ac>)
 8003d38:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003d3a:	4b86      	ldr	r3, [pc, #536]	; (8003f54 <menu+0x29ac>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b05      	cmp	r3, #5
 8003d40:	d902      	bls.n	8003d48 <menu+0x27a0>
				asagiValfTmr = 0;
 8003d42:	4b84      	ldr	r3, [pc, #528]	; (8003f54 <menu+0x29ac>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d48:	f000 ff8a 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d4c:	2104      	movs	r1, #4
 8003d4e:	4883      	ldr	r0, [pc, #524]	; (8003f5c <menu+0x29b4>)
 8003d50:	f005 fc68 	bl	8009624 <HAL_GPIO_ReadPin>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d115      	bne.n	8003d86 <menu+0x27de>
 8003d5a:	4b81      	ldr	r3, [pc, #516]	; (8003f60 <menu+0x29b8>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	f083 0301 	eor.w	r3, r3, #1
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00e      	beq.n	8003d86 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003d68:	4b7a      	ldr	r3, [pc, #488]	; (8003f54 <menu+0x29ac>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	4b78      	ldr	r3, [pc, #480]	; (8003f54 <menu+0x29ac>)
 8003d72:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003d74:	4b77      	ldr	r3, [pc, #476]	; (8003f54 <menu+0x29ac>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b06      	cmp	r3, #6
 8003d7a:	d902      	bls.n	8003d82 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003d7c:	4b75      	ldr	r3, [pc, #468]	; (8003f54 <menu+0x29ac>)
 8003d7e:	2205      	movs	r2, #5
 8003d80:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d82:	f000 ff6d 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d86:	2108      	movs	r1, #8
 8003d88:	4874      	ldr	r0, [pc, #464]	; (8003f5c <menu+0x29b4>)
 8003d8a:	f005 fc4b 	bl	8009624 <HAL_GPIO_ReadPin>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d10d      	bne.n	8003db0 <menu+0x2808>
 8003d94:	4b72      	ldr	r3, [pc, #456]	; (8003f60 <menu+0x29b8>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	f083 0301 	eor.w	r3, r3, #1
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d006      	beq.n	8003db0 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003da2:	4b6c      	ldr	r3, [pc, #432]	; (8003f54 <menu+0x29ac>)
 8003da4:	781a      	ldrb	r2, [r3, #0]
 8003da6:	4b6f      	ldr	r3, [pc, #444]	; (8003f64 <menu+0x29bc>)
 8003da8:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003daa:	4b6f      	ldr	r3, [pc, #444]	; (8003f68 <menu+0x29c0>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003db0:	4b6e      	ldr	r3, [pc, #440]	; (8003f6c <menu+0x29c4>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b18      	cmp	r3, #24
 8003db6:	f040 809d 	bne.w	8003ef4 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003dba:	4b6d      	ldr	r3, [pc, #436]	; (8003f70 <menu+0x29c8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d113      	bne.n	8003dea <menu+0x2842>
			if(dilSecim == 0) {
 8003dc2:	4b62      	ldr	r3, [pc, #392]	; (8003f4c <menu+0x29a4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d105      	bne.n	8003dd6 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003dca:	4a6a      	ldr	r2, [pc, #424]	; (8003f74 <menu+0x29cc>)
 8003dcc:	2101      	movs	r1, #1
 8003dce:	2001      	movs	r0, #1
 8003dd0:	f004 f902 	bl	8007fd8 <lcd_print>
 8003dd4:	e020      	b.n	8003e18 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003dd6:	4b5d      	ldr	r3, [pc, #372]	; (8003f4c <menu+0x29a4>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d11c      	bne.n	8003e18 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003dde:	4a66      	ldr	r2, [pc, #408]	; (8003f78 <menu+0x29d0>)
 8003de0:	2101      	movs	r1, #1
 8003de2:	2001      	movs	r0, #1
 8003de4:	f004 f8f8 	bl	8007fd8 <lcd_print>
 8003de8:	e016      	b.n	8003e18 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003dea:	4b61      	ldr	r3, [pc, #388]	; (8003f70 <menu+0x29c8>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d112      	bne.n	8003e18 <menu+0x2870>
			if(dilSecim == 0) {
 8003df2:	4b56      	ldr	r3, [pc, #344]	; (8003f4c <menu+0x29a4>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d105      	bne.n	8003e06 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003dfa:	4a60      	ldr	r2, [pc, #384]	; (8003f7c <menu+0x29d4>)
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	2001      	movs	r0, #1
 8003e00:	f004 f8ea 	bl	8007fd8 <lcd_print>
 8003e04:	e008      	b.n	8003e18 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003e06:	4b51      	ldr	r3, [pc, #324]	; (8003f4c <menu+0x29a4>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d104      	bne.n	8003e18 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003e0e:	4a5c      	ldr	r2, [pc, #368]	; (8003f80 <menu+0x29d8>)
 8003e10:	2101      	movs	r1, #1
 8003e12:	2001      	movs	r0, #1
 8003e14:	f004 f8e0 	bl	8007fd8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003e18:	4b4c      	ldr	r3, [pc, #304]	; (8003f4c <menu+0x29a4>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d105      	bne.n	8003e2c <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e20:	4a58      	ldr	r2, [pc, #352]	; (8003f84 <menu+0x29dc>)
 8003e22:	2101      	movs	r1, #1
 8003e24:	2002      	movs	r0, #2
 8003e26:	f004 f8d7 	bl	8007fd8 <lcd_print>
 8003e2a:	e008      	b.n	8003e3e <menu+0x2896>
			} else if(dilSecim == 1) {
 8003e2c:	4b47      	ldr	r3, [pc, #284]	; (8003f4c <menu+0x29a4>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d104      	bne.n	8003e3e <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003e34:	4a46      	ldr	r2, [pc, #280]	; (8003f50 <menu+0x29a8>)
 8003e36:	2101      	movs	r1, #1
 8003e38:	2002      	movs	r0, #2
 8003e3a:	f004 f8cd 	bl	8007fd8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003e3e:	4b52      	ldr	r3, [pc, #328]	; (8003f88 <menu+0x29e0>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	220a      	movs	r2, #10
 8003e44:	4944      	ldr	r1, [pc, #272]	; (8003f58 <menu+0x29b0>)
 8003e46:	4618      	mov	r0, r3
 8003e48:	f008 fc74 	bl	800c734 <itoa>
		lcd_print(2, 16, snum);
 8003e4c:	4a42      	ldr	r2, [pc, #264]	; (8003f58 <menu+0x29b0>)
 8003e4e:	2110      	movs	r1, #16
 8003e50:	2002      	movs	r0, #2
 8003e52:	f004 f8c1 	bl	8007fd8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e56:	2102      	movs	r1, #2
 8003e58:	4840      	ldr	r0, [pc, #256]	; (8003f5c <menu+0x29b4>)
 8003e5a:	f005 fbe3 	bl	8009624 <HAL_GPIO_ReadPin>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d115      	bne.n	8003e90 <menu+0x28e8>
 8003e64:	4b3e      	ldr	r3, [pc, #248]	; (8003f60 <menu+0x29b8>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	f083 0301 	eor.w	r3, r3, #1
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00e      	beq.n	8003e90 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003e72:	4b45      	ldr	r3, [pc, #276]	; (8003f88 <menu+0x29e0>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	3301      	adds	r3, #1
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <menu+0x29e0>)
 8003e7c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003e7e:	4b42      	ldr	r3, [pc, #264]	; (8003f88 <menu+0x29e0>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	d902      	bls.n	8003e8c <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003e86:	4b40      	ldr	r3, [pc, #256]	; (8003f88 <menu+0x29e0>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e8c:	f000 fee8 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e90:	2104      	movs	r1, #4
 8003e92:	4832      	ldr	r0, [pc, #200]	; (8003f5c <menu+0x29b4>)
 8003e94:	f005 fbc6 	bl	8009624 <HAL_GPIO_ReadPin>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d115      	bne.n	8003eca <menu+0x2922>
 8003e9e:	4b30      	ldr	r3, [pc, #192]	; (8003f60 <menu+0x29b8>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	f083 0301 	eor.w	r3, r3, #1
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00e      	beq.n	8003eca <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003eac:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <menu+0x29e0>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	4b34      	ldr	r3, [pc, #208]	; (8003f88 <menu+0x29e0>)
 8003eb6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003eb8:	4b33      	ldr	r3, [pc, #204]	; (8003f88 <menu+0x29e0>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b06      	cmp	r3, #6
 8003ebe:	d902      	bls.n	8003ec6 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003ec0:	4b31      	ldr	r3, [pc, #196]	; (8003f88 <menu+0x29e0>)
 8003ec2:	2205      	movs	r2, #5
 8003ec4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ec6:	f000 fecb 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eca:	2108      	movs	r1, #8
 8003ecc:	4823      	ldr	r0, [pc, #140]	; (8003f5c <menu+0x29b4>)
 8003ece:	f005 fba9 	bl	8009624 <HAL_GPIO_ReadPin>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d10d      	bne.n	8003ef4 <menu+0x294c>
 8003ed8:	4b21      	ldr	r3, [pc, #132]	; (8003f60 <menu+0x29b8>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	f083 0301 	eor.w	r3, r3, #1
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d006      	beq.n	8003ef4 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003ee6:	4b28      	ldr	r3, [pc, #160]	; (8003f88 <menu+0x29e0>)
 8003ee8:	781a      	ldrb	r2, [r3, #0]
 8003eea:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <menu+0x29bc>)
 8003eec:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003eee:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <menu+0x29c0>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <menu+0x29c4>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b19      	cmp	r3, #25
 8003efa:	f040 80c4 	bne.w	8004086 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <menu+0x29c8>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d113      	bne.n	8003f2e <menu+0x2986>
			if(dilSecim == 0) {
 8003f06:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <menu+0x29a4>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d105      	bne.n	8003f1a <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003f0e:	4a1f      	ldr	r2, [pc, #124]	; (8003f8c <menu+0x29e4>)
 8003f10:	2101      	movs	r1, #1
 8003f12:	2001      	movs	r0, #1
 8003f14:	f004 f860 	bl	8007fd8 <lcd_print>
 8003f18:	e047      	b.n	8003faa <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <menu+0x29a4>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d143      	bne.n	8003faa <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003f22:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <menu+0x29e8>)
 8003f24:	2101      	movs	r1, #1
 8003f26:	2001      	movs	r0, #1
 8003f28:	f004 f856 	bl	8007fd8 <lcd_print>
 8003f2c:	e03d      	b.n	8003faa <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <menu+0x29c8>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d139      	bne.n	8003faa <menu+0x2a02>
			if(dilSecim == 0) {
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <menu+0x29a4>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d12c      	bne.n	8003f98 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003f3e:	4a15      	ldr	r2, [pc, #84]	; (8003f94 <menu+0x29ec>)
 8003f40:	2101      	movs	r1, #1
 8003f42:	2001      	movs	r0, #1
 8003f44:	f004 f848 	bl	8007fd8 <lcd_print>
 8003f48:	e02f      	b.n	8003faa <menu+0x2a02>
 8003f4a:	bf00      	nop
 8003f4c:	2000020d 	.word	0x2000020d
 8003f50:	0800dd14 	.word	0x0800dd14
 8003f54:	20000201 	.word	0x20000201
 8003f58:	20000188 	.word	0x20000188
 8003f5c:	40010800 	.word	0x40010800
 8003f60:	2000021b 	.word	0x2000021b
 8003f64:	20000118 	.word	0x20000118
 8003f68:	20000218 	.word	0x20000218
 8003f6c:	200001ec 	.word	0x200001ec
 8003f70:	200001fb 	.word	0x200001fb
 8003f74:	0800dd4c 	.word	0x0800dd4c
 8003f78:	0800dd60 	.word	0x0800dd60
 8003f7c:	0800dd74 	.word	0x0800dd74
 8003f80:	0800dd88 	.word	0x0800dd88
 8003f84:	0800d9a0 	.word	0x0800d9a0
 8003f88:	20000202 	.word	0x20000202
 8003f8c:	0800dd9c 	.word	0x0800dd9c
 8003f90:	0800ddb0 	.word	0x0800ddb0
 8003f94:	0800ddc4 	.word	0x0800ddc4
			} else if(dilSecim == 1) {
 8003f98:	4b73      	ldr	r3, [pc, #460]	; (8004168 <menu+0x2bc0>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d104      	bne.n	8003faa <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003fa0:	4a72      	ldr	r2, [pc, #456]	; (800416c <menu+0x2bc4>)
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	f004 f817 	bl	8007fd8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003faa:	4b6f      	ldr	r3, [pc, #444]	; (8004168 <menu+0x2bc0>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d105      	bne.n	8003fbe <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fb2:	4a6f      	ldr	r2, [pc, #444]	; (8004170 <menu+0x2bc8>)
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	2002      	movs	r0, #2
 8003fb8:	f004 f80e 	bl	8007fd8 <lcd_print>
 8003fbc:	e008      	b.n	8003fd0 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003fbe:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <menu+0x2bc0>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d104      	bne.n	8003fd0 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003fc6:	4a6b      	ldr	r2, [pc, #428]	; (8004174 <menu+0x2bcc>)
 8003fc8:	2101      	movs	r1, #1
 8003fca:	2002      	movs	r0, #2
 8003fcc:	f004 f804 	bl	8007fd8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003fd0:	4b69      	ldr	r3, [pc, #420]	; (8004178 <menu+0x2bd0>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	220a      	movs	r2, #10
 8003fd6:	4969      	ldr	r1, [pc, #420]	; (800417c <menu+0x2bd4>)
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f008 fbab 	bl	800c734 <itoa>
		lcd_print(2,16,snum);
 8003fde:	4a67      	ldr	r2, [pc, #412]	; (800417c <menu+0x2bd4>)
 8003fe0:	2110      	movs	r1, #16
 8003fe2:	2002      	movs	r0, #2
 8003fe4:	f003 fff8 	bl	8007fd8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fe8:	2102      	movs	r1, #2
 8003fea:	4865      	ldr	r0, [pc, #404]	; (8004180 <menu+0x2bd8>)
 8003fec:	f005 fb1a 	bl	8009624 <HAL_GPIO_ReadPin>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d115      	bne.n	8004022 <menu+0x2a7a>
 8003ff6:	4b63      	ldr	r3, [pc, #396]	; (8004184 <menu+0x2bdc>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	f083 0301 	eor.w	r3, r3, #1
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00e      	beq.n	8004022 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8004004:	4b5c      	ldr	r3, [pc, #368]	; (8004178 <menu+0x2bd0>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	3301      	adds	r3, #1
 800400a:	b2da      	uxtb	r2, r3
 800400c:	4b5a      	ldr	r3, [pc, #360]	; (8004178 <menu+0x2bd0>)
 800400e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8004010:	4b59      	ldr	r3, [pc, #356]	; (8004178 <menu+0x2bd0>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b05      	cmp	r3, #5
 8004016:	d902      	bls.n	800401e <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8004018:	4b57      	ldr	r3, [pc, #348]	; (8004178 <menu+0x2bd0>)
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800401e:	f000 fe1f 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004022:	2104      	movs	r1, #4
 8004024:	4856      	ldr	r0, [pc, #344]	; (8004180 <menu+0x2bd8>)
 8004026:	f005 fafd 	bl	8009624 <HAL_GPIO_ReadPin>
 800402a:	4603      	mov	r3, r0
 800402c:	2b01      	cmp	r3, #1
 800402e:	d115      	bne.n	800405c <menu+0x2ab4>
 8004030:	4b54      	ldr	r3, [pc, #336]	; (8004184 <menu+0x2bdc>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	f083 0301 	eor.w	r3, r3, #1
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00e      	beq.n	800405c <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 800403e:	4b4e      	ldr	r3, [pc, #312]	; (8004178 <menu+0x2bd0>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	3b01      	subs	r3, #1
 8004044:	b2da      	uxtb	r2, r3
 8004046:	4b4c      	ldr	r3, [pc, #304]	; (8004178 <menu+0x2bd0>)
 8004048:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 800404a:	4b4b      	ldr	r3, [pc, #300]	; (8004178 <menu+0x2bd0>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b06      	cmp	r3, #6
 8004050:	d902      	bls.n	8004058 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8004052:	4b49      	ldr	r3, [pc, #292]	; (8004178 <menu+0x2bd0>)
 8004054:	2205      	movs	r2, #5
 8004056:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004058:	f000 fe02 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800405c:	2108      	movs	r1, #8
 800405e:	4848      	ldr	r0, [pc, #288]	; (8004180 <menu+0x2bd8>)
 8004060:	f005 fae0 	bl	8009624 <HAL_GPIO_ReadPin>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d10d      	bne.n	8004086 <menu+0x2ade>
 800406a:	4b46      	ldr	r3, [pc, #280]	; (8004184 <menu+0x2bdc>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	f083 0301 	eor.w	r3, r3, #1
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d006      	beq.n	8004086 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004078:	4b3f      	ldr	r3, [pc, #252]	; (8004178 <menu+0x2bd0>)
 800407a:	781a      	ldrb	r2, [r3, #0]
 800407c:	4b42      	ldr	r3, [pc, #264]	; (8004188 <menu+0x2be0>)
 800407e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8004080:	4b42      	ldr	r3, [pc, #264]	; (800418c <menu+0x2be4>)
 8004082:	2201      	movs	r2, #1
 8004084:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8004086:	4b42      	ldr	r3, [pc, #264]	; (8004190 <menu+0x2be8>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b1a      	cmp	r3, #26
 800408c:	f040 80ec 	bne.w	8004268 <menu+0x2cc0>
		if(dilSecim == 0) {
 8004090:	4b35      	ldr	r3, [pc, #212]	; (8004168 <menu+0x2bc0>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8004098:	4a3e      	ldr	r2, [pc, #248]	; (8004194 <menu+0x2bec>)
 800409a:	2101      	movs	r1, #1
 800409c:	2001      	movs	r0, #1
 800409e:	f003 ff9b 	bl	8007fd8 <lcd_print>
 80040a2:	e008      	b.n	80040b6 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 80040a4:	4b30      	ldr	r3, [pc, #192]	; (8004168 <menu+0x2bc0>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d104      	bne.n	80040b6 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 80040ac:	4a3a      	ldr	r2, [pc, #232]	; (8004198 <menu+0x2bf0>)
 80040ae:	2101      	movs	r1, #1
 80040b0:	2001      	movs	r0, #1
 80040b2:	f003 ff91 	bl	8007fd8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 80040b6:	4b39      	ldr	r3, [pc, #228]	; (800419c <menu+0x2bf4>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b63      	cmp	r3, #99	; 0x63
 80040bc:	d91e      	bls.n	80040fc <menu+0x2b54>
			if(dilSecim == 0) {
 80040be:	4b2a      	ldr	r3, [pc, #168]	; (8004168 <menu+0x2bc0>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d104      	bne.n	80040d0 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 80040c6:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <menu+0x2bc8>)
 80040c8:	2101      	movs	r1, #1
 80040ca:	2002      	movs	r0, #2
 80040cc:	f003 ff84 	bl	8007fd8 <lcd_print>
			}
			if(dilSecim == 1) {
 80040d0:	4b25      	ldr	r3, [pc, #148]	; (8004168 <menu+0x2bc0>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d104      	bne.n	80040e2 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 80040d8:	4a26      	ldr	r2, [pc, #152]	; (8004174 <menu+0x2bcc>)
 80040da:	2101      	movs	r1, #1
 80040dc:	2002      	movs	r0, #2
 80040de:	f003 ff7b 	bl	8007fd8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80040e2:	4b2e      	ldr	r3, [pc, #184]	; (800419c <menu+0x2bf4>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	220a      	movs	r2, #10
 80040e8:	4924      	ldr	r1, [pc, #144]	; (800417c <menu+0x2bd4>)
 80040ea:	4618      	mov	r0, r3
 80040ec:	f008 fb22 	bl	800c734 <itoa>
			lcd_print(2,14,snum);
 80040f0:	4a22      	ldr	r2, [pc, #136]	; (800417c <menu+0x2bd4>)
 80040f2:	210e      	movs	r1, #14
 80040f4:	2002      	movs	r0, #2
 80040f6:	f003 ff6f 	bl	8007fd8 <lcd_print>
 80040fa:	e066      	b.n	80041ca <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80040fc:	4b27      	ldr	r3, [pc, #156]	; (800419c <menu+0x2bf4>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b09      	cmp	r3, #9
 8004102:	d923      	bls.n	800414c <menu+0x2ba4>
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <menu+0x2bf4>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b63      	cmp	r3, #99	; 0x63
 800410a:	d81f      	bhi.n	800414c <menu+0x2ba4>
			if(dilSecim == 0) {
 800410c:	4b16      	ldr	r3, [pc, #88]	; (8004168 <menu+0x2bc0>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d105      	bne.n	8004120 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8004114:	4a16      	ldr	r2, [pc, #88]	; (8004170 <menu+0x2bc8>)
 8004116:	2101      	movs	r1, #1
 8004118:	2002      	movs	r0, #2
 800411a:	f003 ff5d 	bl	8007fd8 <lcd_print>
 800411e:	e008      	b.n	8004132 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <menu+0x2bc0>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d104      	bne.n	8004132 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8004128:	4a12      	ldr	r2, [pc, #72]	; (8004174 <menu+0x2bcc>)
 800412a:	2101      	movs	r1, #1
 800412c:	2002      	movs	r0, #2
 800412e:	f003 ff53 	bl	8007fd8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004132:	4b1a      	ldr	r3, [pc, #104]	; (800419c <menu+0x2bf4>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	220a      	movs	r2, #10
 8004138:	4910      	ldr	r1, [pc, #64]	; (800417c <menu+0x2bd4>)
 800413a:	4618      	mov	r0, r3
 800413c:	f008 fafa 	bl	800c734 <itoa>
			lcd_print(2, 15, snum);
 8004140:	4a0e      	ldr	r2, [pc, #56]	; (800417c <menu+0x2bd4>)
 8004142:	210f      	movs	r1, #15
 8004144:	2002      	movs	r0, #2
 8004146:	f003 ff47 	bl	8007fd8 <lcd_print>
 800414a:	e03e      	b.n	80041ca <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 800414c:	4b13      	ldr	r3, [pc, #76]	; (800419c <menu+0x2bf4>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b09      	cmp	r3, #9
 8004152:	d83a      	bhi.n	80041ca <menu+0x2c22>
			if(dilSecim == 0) {
 8004154:	4b04      	ldr	r3, [pc, #16]	; (8004168 <menu+0x2bc0>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d121      	bne.n	80041a0 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 800415c:	4a04      	ldr	r2, [pc, #16]	; (8004170 <menu+0x2bc8>)
 800415e:	2101      	movs	r1, #1
 8004160:	2002      	movs	r0, #2
 8004162:	f003 ff39 	bl	8007fd8 <lcd_print>
 8004166:	e024      	b.n	80041b2 <menu+0x2c0a>
 8004168:	2000020d 	.word	0x2000020d
 800416c:	0800ddd8 	.word	0x0800ddd8
 8004170:	0800d9a0 	.word	0x0800d9a0
 8004174:	0800dd14 	.word	0x0800dd14
 8004178:	20000203 	.word	0x20000203
 800417c:	20000188 	.word	0x20000188
 8004180:	40010800 	.word	0x40010800
 8004184:	2000021b 	.word	0x2000021b
 8004188:	20000118 	.word	0x20000118
 800418c:	20000218 	.word	0x20000218
 8004190:	200001ec 	.word	0x200001ec
 8004194:	0800ddec 	.word	0x0800ddec
 8004198:	0800de00 	.word	0x0800de00
 800419c:	20000204 	.word	0x20000204
			} else if(dilSecim == 1) {
 80041a0:	4b8f      	ldr	r3, [pc, #572]	; (80043e0 <menu+0x2e38>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d104      	bne.n	80041b2 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80041a8:	4a8e      	ldr	r2, [pc, #568]	; (80043e4 <menu+0x2e3c>)
 80041aa:	2101      	movs	r1, #1
 80041ac:	2002      	movs	r0, #2
 80041ae:	f003 ff13 	bl	8007fd8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80041b2:	4b8d      	ldr	r3, [pc, #564]	; (80043e8 <menu+0x2e40>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	220a      	movs	r2, #10
 80041b8:	498c      	ldr	r1, [pc, #560]	; (80043ec <menu+0x2e44>)
 80041ba:	4618      	mov	r0, r3
 80041bc:	f008 faba 	bl	800c734 <itoa>
			lcd_print(2, 16, snum);
 80041c0:	4a8a      	ldr	r2, [pc, #552]	; (80043ec <menu+0x2e44>)
 80041c2:	2110      	movs	r1, #16
 80041c4:	2002      	movs	r0, #2
 80041c6:	f003 ff07 	bl	8007fd8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041ca:	2102      	movs	r1, #2
 80041cc:	4888      	ldr	r0, [pc, #544]	; (80043f0 <menu+0x2e48>)
 80041ce:	f005 fa29 	bl	8009624 <HAL_GPIO_ReadPin>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d115      	bne.n	8004204 <menu+0x2c5c>
 80041d8:	4b86      	ldr	r3, [pc, #536]	; (80043f4 <menu+0x2e4c>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	f083 0301 	eor.w	r3, r3, #1
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00e      	beq.n	8004204 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 80041e6:	4b80      	ldr	r3, [pc, #512]	; (80043e8 <menu+0x2e40>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	3301      	adds	r3, #1
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	4b7e      	ldr	r3, [pc, #504]	; (80043e8 <menu+0x2e40>)
 80041f0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80041f2:	4b7d      	ldr	r3, [pc, #500]	; (80043e8 <menu+0x2e40>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2bb4      	cmp	r3, #180	; 0xb4
 80041f8:	d902      	bls.n	8004200 <menu+0x2c58>
				makineCalismaTmr = 0;
 80041fa:	4b7b      	ldr	r3, [pc, #492]	; (80043e8 <menu+0x2e40>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004200:	f000 fd2e 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004204:	2104      	movs	r1, #4
 8004206:	487a      	ldr	r0, [pc, #488]	; (80043f0 <menu+0x2e48>)
 8004208:	f005 fa0c 	bl	8009624 <HAL_GPIO_ReadPin>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	d115      	bne.n	800423e <menu+0x2c96>
 8004212:	4b78      	ldr	r3, [pc, #480]	; (80043f4 <menu+0x2e4c>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	f083 0301 	eor.w	r3, r3, #1
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00e      	beq.n	800423e <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004220:	4b71      	ldr	r3, [pc, #452]	; (80043e8 <menu+0x2e40>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	3b01      	subs	r3, #1
 8004226:	b2da      	uxtb	r2, r3
 8004228:	4b6f      	ldr	r3, [pc, #444]	; (80043e8 <menu+0x2e40>)
 800422a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 800422c:	4b6e      	ldr	r3, [pc, #440]	; (80043e8 <menu+0x2e40>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2bb5      	cmp	r3, #181	; 0xb5
 8004232:	d902      	bls.n	800423a <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8004234:	4b6c      	ldr	r3, [pc, #432]	; (80043e8 <menu+0x2e40>)
 8004236:	22b4      	movs	r2, #180	; 0xb4
 8004238:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800423a:	f000 fd11 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800423e:	2108      	movs	r1, #8
 8004240:	486b      	ldr	r0, [pc, #428]	; (80043f0 <menu+0x2e48>)
 8004242:	f005 f9ef 	bl	8009624 <HAL_GPIO_ReadPin>
 8004246:	4603      	mov	r3, r0
 8004248:	2b01      	cmp	r3, #1
 800424a:	d10d      	bne.n	8004268 <menu+0x2cc0>
 800424c:	4b69      	ldr	r3, [pc, #420]	; (80043f4 <menu+0x2e4c>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	f083 0301 	eor.w	r3, r3, #1
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d006      	beq.n	8004268 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 800425a:	4b63      	ldr	r3, [pc, #396]	; (80043e8 <menu+0x2e40>)
 800425c:	781a      	ldrb	r2, [r3, #0]
 800425e:	4b66      	ldr	r3, [pc, #408]	; (80043f8 <menu+0x2e50>)
 8004260:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8004262:	4b66      	ldr	r3, [pc, #408]	; (80043fc <menu+0x2e54>)
 8004264:	2201      	movs	r2, #1
 8004266:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004268:	4b65      	ldr	r3, [pc, #404]	; (8004400 <menu+0x2e58>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b1b      	cmp	r3, #27
 800426e:	f040 8083 	bne.w	8004378 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8004272:	4a64      	ldr	r2, [pc, #400]	; (8004404 <menu+0x2e5c>)
 8004274:	2101      	movs	r1, #1
 8004276:	2001      	movs	r0, #1
 8004278:	f003 feae 	bl	8007fd8 <lcd_print>

		if(buzzer == 0) {
 800427c:	4b62      	ldr	r3, [pc, #392]	; (8004408 <menu+0x2e60>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d113      	bne.n	80042ac <menu+0x2d04>
			if(dilSecim == 0) {
 8004284:	4b56      	ldr	r3, [pc, #344]	; (80043e0 <menu+0x2e38>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 800428c:	4a5f      	ldr	r2, [pc, #380]	; (800440c <menu+0x2e64>)
 800428e:	2101      	movs	r1, #1
 8004290:	2002      	movs	r0, #2
 8004292:	f003 fea1 	bl	8007fd8 <lcd_print>
 8004296:	e020      	b.n	80042da <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004298:	4b51      	ldr	r3, [pc, #324]	; (80043e0 <menu+0x2e38>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d11c      	bne.n	80042da <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80042a0:	4a5b      	ldr	r2, [pc, #364]	; (8004410 <menu+0x2e68>)
 80042a2:	2101      	movs	r1, #1
 80042a4:	2002      	movs	r0, #2
 80042a6:	f003 fe97 	bl	8007fd8 <lcd_print>
 80042aa:	e016      	b.n	80042da <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80042ac:	4b56      	ldr	r3, [pc, #344]	; (8004408 <menu+0x2e60>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d112      	bne.n	80042da <menu+0x2d32>
			if(dilSecim == 0) {
 80042b4:	4b4a      	ldr	r3, [pc, #296]	; (80043e0 <menu+0x2e38>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80042bc:	4a55      	ldr	r2, [pc, #340]	; (8004414 <menu+0x2e6c>)
 80042be:	2101      	movs	r1, #1
 80042c0:	2002      	movs	r0, #2
 80042c2:	f003 fe89 	bl	8007fd8 <lcd_print>
 80042c6:	e008      	b.n	80042da <menu+0x2d32>
			} else if(dilSecim == 1) {
 80042c8:	4b45      	ldr	r3, [pc, #276]	; (80043e0 <menu+0x2e38>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d104      	bne.n	80042da <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80042d0:	4a51      	ldr	r2, [pc, #324]	; (8004418 <menu+0x2e70>)
 80042d2:	2101      	movs	r1, #1
 80042d4:	2002      	movs	r0, #2
 80042d6:	f003 fe7f 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80042da:	2102      	movs	r1, #2
 80042dc:	4844      	ldr	r0, [pc, #272]	; (80043f0 <menu+0x2e48>)
 80042de:	f005 f9a1 	bl	8009624 <HAL_GPIO_ReadPin>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d115      	bne.n	8004314 <menu+0x2d6c>
 80042e8:	4b42      	ldr	r3, [pc, #264]	; (80043f4 <menu+0x2e4c>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	f083 0301 	eor.w	r3, r3, #1
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00e      	beq.n	8004314 <menu+0x2d6c>
			buzzer = buzzer + 1;
 80042f6:	4b44      	ldr	r3, [pc, #272]	; (8004408 <menu+0x2e60>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	3301      	adds	r3, #1
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	4b42      	ldr	r3, [pc, #264]	; (8004408 <menu+0x2e60>)
 8004300:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8004302:	4b41      	ldr	r3, [pc, #260]	; (8004408 <menu+0x2e60>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d902      	bls.n	8004310 <menu+0x2d68>
				buzzer = 0;
 800430a:	4b3f      	ldr	r3, [pc, #252]	; (8004408 <menu+0x2e60>)
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004310:	f000 fca6 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004314:	2104      	movs	r1, #4
 8004316:	4836      	ldr	r0, [pc, #216]	; (80043f0 <menu+0x2e48>)
 8004318:	f005 f984 	bl	8009624 <HAL_GPIO_ReadPin>
 800431c:	4603      	mov	r3, r0
 800431e:	2b01      	cmp	r3, #1
 8004320:	d115      	bne.n	800434e <menu+0x2da6>
 8004322:	4b34      	ldr	r3, [pc, #208]	; (80043f4 <menu+0x2e4c>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	f083 0301 	eor.w	r3, r3, #1
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00e      	beq.n	800434e <menu+0x2da6>
			buzzer = buzzer - 1;
 8004330:	4b35      	ldr	r3, [pc, #212]	; (8004408 <menu+0x2e60>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	3b01      	subs	r3, #1
 8004336:	b2da      	uxtb	r2, r3
 8004338:	4b33      	ldr	r3, [pc, #204]	; (8004408 <menu+0x2e60>)
 800433a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800433c:	4b32      	ldr	r3, [pc, #200]	; (8004408 <menu+0x2e60>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <menu+0x2da2>
		   		buzzer = 1;
 8004344:	4b30      	ldr	r3, [pc, #192]	; (8004408 <menu+0x2e60>)
 8004346:	2201      	movs	r2, #1
 8004348:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800434a:	f000 fc89 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800434e:	2108      	movs	r1, #8
 8004350:	4827      	ldr	r0, [pc, #156]	; (80043f0 <menu+0x2e48>)
 8004352:	f005 f967 	bl	8009624 <HAL_GPIO_ReadPin>
 8004356:	4603      	mov	r3, r0
 8004358:	2b01      	cmp	r3, #1
 800435a:	d10d      	bne.n	8004378 <menu+0x2dd0>
 800435c:	4b25      	ldr	r3, [pc, #148]	; (80043f4 <menu+0x2e4c>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	f083 0301 	eor.w	r3, r3, #1
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d006      	beq.n	8004378 <menu+0x2dd0>
			eepromData[25] = buzzer;
 800436a:	4b27      	ldr	r3, [pc, #156]	; (8004408 <menu+0x2e60>)
 800436c:	781a      	ldrb	r2, [r3, #0]
 800436e:	4b22      	ldr	r3, [pc, #136]	; (80043f8 <menu+0x2e50>)
 8004370:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8004372:	4b22      	ldr	r3, [pc, #136]	; (80043fc <menu+0x2e54>)
 8004374:	2201      	movs	r2, #1
 8004376:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004378:	4b21      	ldr	r3, [pc, #132]	; (8004400 <menu+0x2e58>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b1c      	cmp	r3, #28
 800437e:	f040 80ab 	bne.w	80044d8 <menu+0x2f30>
		calismaSayModu = 0;
 8004382:	4b26      	ldr	r3, [pc, #152]	; (800441c <menu+0x2e74>)
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004388:	4a25      	ldr	r2, [pc, #148]	; (8004420 <menu+0x2e78>)
 800438a:	2101      	movs	r1, #1
 800438c:	2001      	movs	r0, #1
 800438e:	f003 fe23 	bl	8007fd8 <lcd_print>

		if(demoMode == 0) {
 8004392:	4b24      	ldr	r3, [pc, #144]	; (8004424 <menu+0x2e7c>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d113      	bne.n	80043c2 <menu+0x2e1a>
			if(dilSecim == 0) {
 800439a:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <menu+0x2e38>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80043a2:	4a1a      	ldr	r2, [pc, #104]	; (800440c <menu+0x2e64>)
 80043a4:	2101      	movs	r1, #1
 80043a6:	2002      	movs	r0, #2
 80043a8:	f003 fe16 	bl	8007fd8 <lcd_print>
 80043ac:	e045      	b.n	800443a <menu+0x2e92>
			} else if(dilSecim == 1) {
 80043ae:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <menu+0x2e38>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d141      	bne.n	800443a <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80043b6:	4a16      	ldr	r2, [pc, #88]	; (8004410 <menu+0x2e68>)
 80043b8:	2101      	movs	r1, #1
 80043ba:	2002      	movs	r0, #2
 80043bc:	f003 fe0c 	bl	8007fd8 <lcd_print>
 80043c0:	e03b      	b.n	800443a <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80043c2:	4b18      	ldr	r3, [pc, #96]	; (8004424 <menu+0x2e7c>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d137      	bne.n	800443a <menu+0x2e92>
			if(dilSecim == 0){
 80043ca:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <menu+0x2e38>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d12a      	bne.n	8004428 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80043d2:	4a10      	ldr	r2, [pc, #64]	; (8004414 <menu+0x2e6c>)
 80043d4:	2101      	movs	r1, #1
 80043d6:	2002      	movs	r0, #2
 80043d8:	f003 fdfe 	bl	8007fd8 <lcd_print>
 80043dc:	e02d      	b.n	800443a <menu+0x2e92>
 80043de:	bf00      	nop
 80043e0:	2000020d 	.word	0x2000020d
 80043e4:	0800dd14 	.word	0x0800dd14
 80043e8:	20000204 	.word	0x20000204
 80043ec:	20000188 	.word	0x20000188
 80043f0:	40010800 	.word	0x40010800
 80043f4:	2000021b 	.word	0x2000021b
 80043f8:	20000118 	.word	0x20000118
 80043fc:	20000218 	.word	0x20000218
 8004400:	200001ec 	.word	0x200001ec
 8004404:	0800de14 	.word	0x0800de14
 8004408:	20000208 	.word	0x20000208
 800440c:	0800d73c 	.word	0x0800d73c
 8004410:	0800d750 	.word	0x0800d750
 8004414:	0800d79c 	.word	0x0800d79c
 8004418:	0800d7b0 	.word	0x0800d7b0
 800441c:	2000020c 	.word	0x2000020c
 8004420:	0800de28 	.word	0x0800de28
 8004424:	2000020a 	.word	0x2000020a
			} else if(dilSecim == 1) {
 8004428:	4b71      	ldr	r3, [pc, #452]	; (80045f0 <menu+0x3048>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d104      	bne.n	800443a <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004430:	4a70      	ldr	r2, [pc, #448]	; (80045f4 <menu+0x304c>)
 8004432:	2101      	movs	r1, #1
 8004434:	2002      	movs	r0, #2
 8004436:	f003 fdcf 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800443a:	2102      	movs	r1, #2
 800443c:	486e      	ldr	r0, [pc, #440]	; (80045f8 <menu+0x3050>)
 800443e:	f005 f8f1 	bl	8009624 <HAL_GPIO_ReadPin>
 8004442:	4603      	mov	r3, r0
 8004444:	2b01      	cmp	r3, #1
 8004446:	d115      	bne.n	8004474 <menu+0x2ecc>
 8004448:	4b6c      	ldr	r3, [pc, #432]	; (80045fc <menu+0x3054>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	f083 0301 	eor.w	r3, r3, #1
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00e      	beq.n	8004474 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004456:	4b6a      	ldr	r3, [pc, #424]	; (8004600 <menu+0x3058>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	3301      	adds	r3, #1
 800445c:	b2da      	uxtb	r2, r3
 800445e:	4b68      	ldr	r3, [pc, #416]	; (8004600 <menu+0x3058>)
 8004460:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004462:	4b67      	ldr	r3, [pc, #412]	; (8004600 <menu+0x3058>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d902      	bls.n	8004470 <menu+0x2ec8>
				demoMode = 0;
 800446a:	4b65      	ldr	r3, [pc, #404]	; (8004600 <menu+0x3058>)
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004470:	f000 fbf6 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004474:	2104      	movs	r1, #4
 8004476:	4860      	ldr	r0, [pc, #384]	; (80045f8 <menu+0x3050>)
 8004478:	f005 f8d4 	bl	8009624 <HAL_GPIO_ReadPin>
 800447c:	4603      	mov	r3, r0
 800447e:	2b01      	cmp	r3, #1
 8004480:	d115      	bne.n	80044ae <menu+0x2f06>
 8004482:	4b5e      	ldr	r3, [pc, #376]	; (80045fc <menu+0x3054>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	f083 0301 	eor.w	r3, r3, #1
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00e      	beq.n	80044ae <menu+0x2f06>
			demoMode = demoMode - 1;
 8004490:	4b5b      	ldr	r3, [pc, #364]	; (8004600 <menu+0x3058>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	3b01      	subs	r3, #1
 8004496:	b2da      	uxtb	r2, r3
 8004498:	4b59      	ldr	r3, [pc, #356]	; (8004600 <menu+0x3058>)
 800449a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800449c:	4b58      	ldr	r3, [pc, #352]	; (8004600 <menu+0x3058>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <menu+0x2f02>
		   		demoMode = 1;
 80044a4:	4b56      	ldr	r3, [pc, #344]	; (8004600 <menu+0x3058>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044aa:	f000 fbd9 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044ae:	2108      	movs	r1, #8
 80044b0:	4851      	ldr	r0, [pc, #324]	; (80045f8 <menu+0x3050>)
 80044b2:	f005 f8b7 	bl	8009624 <HAL_GPIO_ReadPin>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d10d      	bne.n	80044d8 <menu+0x2f30>
 80044bc:	4b4f      	ldr	r3, [pc, #316]	; (80045fc <menu+0x3054>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	f083 0301 	eor.w	r3, r3, #1
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d006      	beq.n	80044d8 <menu+0x2f30>
			eepromData[26] = demoMode;
 80044ca:	4b4d      	ldr	r3, [pc, #308]	; (8004600 <menu+0x3058>)
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	4b4d      	ldr	r3, [pc, #308]	; (8004604 <menu+0x305c>)
 80044d0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80044d2:	4b4d      	ldr	r3, [pc, #308]	; (8004608 <menu+0x3060>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80044d8:	4b4c      	ldr	r3, [pc, #304]	; (800460c <menu+0x3064>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b1d      	cmp	r3, #29
 80044de:	f040 8132 	bne.w	8004746 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80044e2:	4b4b      	ldr	r3, [pc, #300]	; (8004610 <menu+0x3068>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d113      	bne.n	8004512 <menu+0x2f6a>
 80044ea:	4b4a      	ldr	r3, [pc, #296]	; (8004614 <menu+0x306c>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10f      	bne.n	8004512 <menu+0x2f6a>
 80044f2:	4b49      	ldr	r3, [pc, #292]	; (8004618 <menu+0x3070>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <menu+0x2f6a>
 80044fa:	4b48      	ldr	r3, [pc, #288]	; (800461c <menu+0x3074>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <menu+0x2f6a>
 8004502:	4b47      	ldr	r3, [pc, #284]	; (8004620 <menu+0x3078>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d103      	bne.n	8004512 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800450a:	4b46      	ldr	r3, [pc, #280]	; (8004624 <menu+0x307c>)
 800450c:	2200      	movs	r2, #0
 800450e:	701a      	strb	r2, [r3, #0]
 8004510:	e002      	b.n	8004518 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004512:	4b44      	ldr	r3, [pc, #272]	; (8004624 <menu+0x307c>)
 8004514:	2201      	movs	r2, #1
 8004516:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004518:	4b43      	ldr	r3, [pc, #268]	; (8004628 <menu+0x3080>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d154      	bne.n	80045ca <menu+0x3022>
			if(dilSecim == 0) {
 8004520:	4b33      	ldr	r3, [pc, #204]	; (80045f0 <menu+0x3048>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004528:	4a40      	ldr	r2, [pc, #256]	; (800462c <menu+0x3084>)
 800452a:	2101      	movs	r1, #1
 800452c:	2001      	movs	r0, #1
 800452e:	f003 fd53 	bl	8007fd8 <lcd_print>
 8004532:	e008      	b.n	8004546 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004534:	4b2e      	ldr	r3, [pc, #184]	; (80045f0 <menu+0x3048>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d104      	bne.n	8004546 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 800453c:	4a3c      	ldr	r2, [pc, #240]	; (8004630 <menu+0x3088>)
 800453e:	2101      	movs	r1, #1
 8004540:	2001      	movs	r0, #1
 8004542:	f003 fd49 	bl	8007fd8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004546:	4b36      	ldr	r3, [pc, #216]	; (8004620 <menu+0x3078>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	220a      	movs	r2, #10
 800454c:	4939      	ldr	r1, [pc, #228]	; (8004634 <menu+0x308c>)
 800454e:	4618      	mov	r0, r3
 8004550:	f008 f8f0 	bl	800c734 <itoa>
			lcd_print(2, 12, snum);
 8004554:	4a37      	ldr	r2, [pc, #220]	; (8004634 <menu+0x308c>)
 8004556:	210c      	movs	r1, #12
 8004558:	2002      	movs	r0, #2
 800455a:	f003 fd3d 	bl	8007fd8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800455e:	4b2f      	ldr	r3, [pc, #188]	; (800461c <menu+0x3074>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	220a      	movs	r2, #10
 8004564:	4933      	ldr	r1, [pc, #204]	; (8004634 <menu+0x308c>)
 8004566:	4618      	mov	r0, r3
 8004568:	f008 f8e4 	bl	800c734 <itoa>
			lcd_print(2, 13, snum);
 800456c:	4a31      	ldr	r2, [pc, #196]	; (8004634 <menu+0x308c>)
 800456e:	210d      	movs	r1, #13
 8004570:	2002      	movs	r0, #2
 8004572:	f003 fd31 	bl	8007fd8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004576:	4b28      	ldr	r3, [pc, #160]	; (8004618 <menu+0x3070>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	220a      	movs	r2, #10
 800457c:	492d      	ldr	r1, [pc, #180]	; (8004634 <menu+0x308c>)
 800457e:	4618      	mov	r0, r3
 8004580:	f008 f8d8 	bl	800c734 <itoa>
			lcd_print(2, 14, snum);
 8004584:	4a2b      	ldr	r2, [pc, #172]	; (8004634 <menu+0x308c>)
 8004586:	210e      	movs	r1, #14
 8004588:	2002      	movs	r0, #2
 800458a:	f003 fd25 	bl	8007fd8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800458e:	4b21      	ldr	r3, [pc, #132]	; (8004614 <menu+0x306c>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	220a      	movs	r2, #10
 8004594:	4927      	ldr	r1, [pc, #156]	; (8004634 <menu+0x308c>)
 8004596:	4618      	mov	r0, r3
 8004598:	f008 f8cc 	bl	800c734 <itoa>
			lcd_print(2, 15, snum);
 800459c:	4a25      	ldr	r2, [pc, #148]	; (8004634 <menu+0x308c>)
 800459e:	210f      	movs	r1, #15
 80045a0:	2002      	movs	r0, #2
 80045a2:	f003 fd19 	bl	8007fd8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80045a6:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <menu+0x3068>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	220a      	movs	r2, #10
 80045ac:	4921      	ldr	r1, [pc, #132]	; (8004634 <menu+0x308c>)
 80045ae:	4618      	mov	r0, r3
 80045b0:	f008 f8c0 	bl	800c734 <itoa>
			lcd_print(2, 16, snum);
 80045b4:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <menu+0x308c>)
 80045b6:	2110      	movs	r1, #16
 80045b8:	2002      	movs	r0, #2
 80045ba:	f003 fd0d 	bl	8007fd8 <lcd_print>

			lcd_print(2, 1, "           ");
 80045be:	4a1e      	ldr	r2, [pc, #120]	; (8004638 <menu+0x3090>)
 80045c0:	2101      	movs	r1, #1
 80045c2:	2002      	movs	r0, #2
 80045c4:	f003 fd08 	bl	8007fd8 <lcd_print>
 80045c8:	e048      	b.n	800465c <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80045ca:	4b17      	ldr	r3, [pc, #92]	; (8004628 <menu+0x3080>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d144      	bne.n	800465c <menu+0x30b4>
			if(dilSecim == 0) {
 80045d2:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <menu+0x3048>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d132      	bne.n	8004640 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80045da:	4a14      	ldr	r2, [pc, #80]	; (800462c <menu+0x3084>)
 80045dc:	2101      	movs	r1, #1
 80045de:	2001      	movs	r0, #1
 80045e0:	f003 fcfa 	bl	8007fd8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80045e4:	4a15      	ldr	r2, [pc, #84]	; (800463c <menu+0x3094>)
 80045e6:	2101      	movs	r1, #1
 80045e8:	2002      	movs	r0, #2
 80045ea:	f003 fcf5 	bl	8007fd8 <lcd_print>
 80045ee:	e035      	b.n	800465c <menu+0x30b4>
 80045f0:	2000020d 	.word	0x2000020d
 80045f4:	0800d7b0 	.word	0x0800d7b0
 80045f8:	40010800 	.word	0x40010800
 80045fc:	2000021b 	.word	0x2000021b
 8004600:	2000020a 	.word	0x2000020a
 8004604:	20000118 	.word	0x20000118
 8004608:	20000218 	.word	0x20000218
 800460c:	200001ec 	.word	0x200001ec
 8004610:	200001e9 	.word	0x200001e9
 8004614:	200001ea 	.word	0x200001ea
 8004618:	20000000 	.word	0x20000000
 800461c:	20000001 	.word	0x20000001
 8004620:	200001eb 	.word	0x200001eb
 8004624:	2000022d 	.word	0x2000022d
 8004628:	2000020c 	.word	0x2000020c
 800462c:	0800de38 	.word	0x0800de38
 8004630:	0800de4c 	.word	0x0800de4c
 8004634:	20000188 	.word	0x20000188
 8004638:	0800de60 	.word	0x0800de60
 800463c:	0800de6c 	.word	0x0800de6c
			} else if(dilSecim == 1) {
 8004640:	4b94      	ldr	r3, [pc, #592]	; (8004894 <menu+0x32ec>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d109      	bne.n	800465c <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004648:	4a93      	ldr	r2, [pc, #588]	; (8004898 <menu+0x32f0>)
 800464a:	2101      	movs	r1, #1
 800464c:	2001      	movs	r0, #1
 800464e:	f003 fcc3 	bl	8007fd8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004652:	4a92      	ldr	r2, [pc, #584]	; (800489c <menu+0x32f4>)
 8004654:	2101      	movs	r1, #1
 8004656:	2002      	movs	r0, #2
 8004658:	f003 fcbe 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800465c:	2102      	movs	r1, #2
 800465e:	4890      	ldr	r0, [pc, #576]	; (80048a0 <menu+0x32f8>)
 8004660:	f004 ffe0 	bl	8009624 <HAL_GPIO_ReadPin>
 8004664:	4603      	mov	r3, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d119      	bne.n	800469e <menu+0x30f6>
 800466a:	4b8e      	ldr	r3, [pc, #568]	; (80048a4 <menu+0x32fc>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	f083 0301 	eor.w	r3, r3, #1
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d012      	beq.n	800469e <menu+0x30f6>
 8004678:	4b8b      	ldr	r3, [pc, #556]	; (80048a8 <menu+0x3300>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00e      	beq.n	800469e <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004680:	4b8a      	ldr	r3, [pc, #552]	; (80048ac <menu+0x3304>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	b2da      	uxtb	r2, r3
 8004688:	4b88      	ldr	r3, [pc, #544]	; (80048ac <menu+0x3304>)
 800468a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800468c:	4b87      	ldr	r3, [pc, #540]	; (80048ac <menu+0x3304>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d902      	bls.n	800469a <menu+0x30f2>
				calismaSayModu = 0;
 8004694:	4b85      	ldr	r3, [pc, #532]	; (80048ac <menu+0x3304>)
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800469a:	f000 fae1 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800469e:	2104      	movs	r1, #4
 80046a0:	487f      	ldr	r0, [pc, #508]	; (80048a0 <menu+0x32f8>)
 80046a2:	f004 ffbf 	bl	8009624 <HAL_GPIO_ReadPin>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d119      	bne.n	80046e0 <menu+0x3138>
 80046ac:	4b7d      	ldr	r3, [pc, #500]	; (80048a4 <menu+0x32fc>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	f083 0301 	eor.w	r3, r3, #1
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d012      	beq.n	80046e0 <menu+0x3138>
 80046ba:	4b7b      	ldr	r3, [pc, #492]	; (80048a8 <menu+0x3300>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00e      	beq.n	80046e0 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80046c2:	4b7a      	ldr	r3, [pc, #488]	; (80048ac <menu+0x3304>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	4b78      	ldr	r3, [pc, #480]	; (80048ac <menu+0x3304>)
 80046cc:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80046ce:	4b77      	ldr	r3, [pc, #476]	; (80048ac <menu+0x3304>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <menu+0x3134>
		   		calismaSayModu = 1;
 80046d6:	4b75      	ldr	r3, [pc, #468]	; (80048ac <menu+0x3304>)
 80046d8:	2201      	movs	r2, #1
 80046da:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80046dc:	f000 fac0 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046e0:	2108      	movs	r1, #8
 80046e2:	486f      	ldr	r0, [pc, #444]	; (80048a0 <menu+0x32f8>)
 80046e4:	f004 ff9e 	bl	8009624 <HAL_GPIO_ReadPin>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d12b      	bne.n	8004746 <menu+0x319e>
 80046ee:	4b6d      	ldr	r3, [pc, #436]	; (80048a4 <menu+0x32fc>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	f083 0301 	eor.w	r3, r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d024      	beq.n	8004746 <menu+0x319e>
			eepromData[32] = 0;
 80046fc:	4b6c      	ldr	r3, [pc, #432]	; (80048b0 <menu+0x3308>)
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004704:	4b6a      	ldr	r3, [pc, #424]	; (80048b0 <menu+0x3308>)
 8004706:	2200      	movs	r2, #0
 8004708:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800470a:	4b69      	ldr	r3, [pc, #420]	; (80048b0 <menu+0x3308>)
 800470c:	2200      	movs	r2, #0
 800470e:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004710:	4b67      	ldr	r3, [pc, #412]	; (80048b0 <menu+0x3308>)
 8004712:	2200      	movs	r2, #0
 8004714:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004716:	4b66      	ldr	r3, [pc, #408]	; (80048b0 <menu+0x3308>)
 8004718:	2200      	movs	r2, #0
 800471a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 800471c:	4b65      	ldr	r3, [pc, #404]	; (80048b4 <menu+0x330c>)
 800471e:	2200      	movs	r2, #0
 8004720:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004722:	4b65      	ldr	r3, [pc, #404]	; (80048b8 <menu+0x3310>)
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004728:	4b64      	ldr	r3, [pc, #400]	; (80048bc <menu+0x3314>)
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800472e:	4b64      	ldr	r3, [pc, #400]	; (80048c0 <menu+0x3318>)
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004734:	4b63      	ldr	r3, [pc, #396]	; (80048c4 <menu+0x331c>)
 8004736:	2200      	movs	r2, #0
 8004738:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800473a:	4b5c      	ldr	r3, [pc, #368]	; (80048ac <menu+0x3304>)
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004740:	4b61      	ldr	r3, [pc, #388]	; (80048c8 <menu+0x3320>)
 8004742:	2201      	movs	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004746:	4b61      	ldr	r3, [pc, #388]	; (80048cc <menu+0x3324>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b1e      	cmp	r3, #30
 800474c:	d16f      	bne.n	800482e <menu+0x3286>
		calismaSayModu = 0;
 800474e:	4b57      	ldr	r3, [pc, #348]	; (80048ac <menu+0x3304>)
 8004750:	2200      	movs	r2, #0
 8004752:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004754:	4b4f      	ldr	r3, [pc, #316]	; (8004894 <menu+0x32ec>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 800475c:	4a5c      	ldr	r2, [pc, #368]	; (80048d0 <menu+0x3328>)
 800475e:	2101      	movs	r1, #1
 8004760:	2001      	movs	r0, #1
 8004762:	f003 fc39 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004766:	4a5b      	ldr	r2, [pc, #364]	; (80048d4 <menu+0x332c>)
 8004768:	2101      	movs	r1, #1
 800476a:	2002      	movs	r0, #2
 800476c:	f003 fc34 	bl	8007fd8 <lcd_print>
 8004770:	e00d      	b.n	800478e <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004772:	4b48      	ldr	r3, [pc, #288]	; (8004894 <menu+0x32ec>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d109      	bne.n	800478e <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800477a:	4a57      	ldr	r2, [pc, #348]	; (80048d8 <menu+0x3330>)
 800477c:	2101      	movs	r1, #1
 800477e:	2001      	movs	r0, #1
 8004780:	f003 fc2a 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004784:	4a55      	ldr	r2, [pc, #340]	; (80048dc <menu+0x3334>)
 8004786:	2101      	movs	r1, #1
 8004788:	2002      	movs	r0, #2
 800478a:	f003 fc25 	bl	8007fd8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800478e:	2102      	movs	r1, #2
 8004790:	4843      	ldr	r0, [pc, #268]	; (80048a0 <menu+0x32f8>)
 8004792:	f004 ff47 	bl	8009624 <HAL_GPIO_ReadPin>
 8004796:	4603      	mov	r3, r0
 8004798:	2b01      	cmp	r3, #1
 800479a:	d115      	bne.n	80047c8 <menu+0x3220>
 800479c:	4b41      	ldr	r3, [pc, #260]	; (80048a4 <menu+0x32fc>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	f083 0301 	eor.w	r3, r3, #1
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00e      	beq.n	80047c8 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80047aa:	4b3a      	ldr	r3, [pc, #232]	; (8004894 <menu+0x32ec>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	3301      	adds	r3, #1
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	4b38      	ldr	r3, [pc, #224]	; (8004894 <menu+0x32ec>)
 80047b4:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80047b6:	4b37      	ldr	r3, [pc, #220]	; (8004894 <menu+0x32ec>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d902      	bls.n	80047c4 <menu+0x321c>
				dilSecim = 0;
 80047be:	4b35      	ldr	r3, [pc, #212]	; (8004894 <menu+0x32ec>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80047c4:	f000 fa4c 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047c8:	2104      	movs	r1, #4
 80047ca:	4835      	ldr	r0, [pc, #212]	; (80048a0 <menu+0x32f8>)
 80047cc:	f004 ff2a 	bl	8009624 <HAL_GPIO_ReadPin>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d115      	bne.n	8004802 <menu+0x325a>
 80047d6:	4b33      	ldr	r3, [pc, #204]	; (80048a4 <menu+0x32fc>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	f083 0301 	eor.w	r3, r3, #1
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00e      	beq.n	8004802 <menu+0x325a>
			dilSecim = dilSecim - 1;
 80047e4:	4b2b      	ldr	r3, [pc, #172]	; (8004894 <menu+0x32ec>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	4b29      	ldr	r3, [pc, #164]	; (8004894 <menu+0x32ec>)
 80047ee:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80047f0:	4b28      	ldr	r3, [pc, #160]	; (8004894 <menu+0x32ec>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <menu+0x3256>
		   		dilSecim = 1;
 80047f8:	4b26      	ldr	r3, [pc, #152]	; (8004894 <menu+0x32ec>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80047fe:	f000 fa2f 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004802:	2108      	movs	r1, #8
 8004804:	4826      	ldr	r0, [pc, #152]	; (80048a0 <menu+0x32f8>)
 8004806:	f004 ff0d 	bl	8009624 <HAL_GPIO_ReadPin>
 800480a:	4603      	mov	r3, r0
 800480c:	2b01      	cmp	r3, #1
 800480e:	d10e      	bne.n	800482e <menu+0x3286>
 8004810:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <menu+0x32fc>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	f083 0301 	eor.w	r3, r3, #1
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <menu+0x3286>
			eepromData[33] = dilSecim;
 800481e:	4b1d      	ldr	r3, [pc, #116]	; (8004894 <menu+0x32ec>)
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	4b23      	ldr	r3, [pc, #140]	; (80048b0 <menu+0x3308>)
 8004824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004828:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <menu+0x3320>)
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800482e:	4b27      	ldr	r3, [pc, #156]	; (80048cc <menu+0x3324>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b1f      	cmp	r3, #31
 8004834:	f040 80b7 	bne.w	80049a6 <menu+0x33fe>
		calismaSayModu = 0;
 8004838:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <menu+0x3304>)
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800483e:	4a28      	ldr	r2, [pc, #160]	; (80048e0 <menu+0x3338>)
 8004840:	2101      	movs	r1, #1
 8004842:	2001      	movs	r0, #1
 8004844:	f003 fbc8 	bl	8007fd8 <lcd_print>

		if(iotMode == 0) {
 8004848:	4b26      	ldr	r3, [pc, #152]	; (80048e4 <menu+0x333c>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d113      	bne.n	8004878 <menu+0x32d0>
			if(dilSecim == 0) {
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <menu+0x32ec>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d105      	bne.n	8004864 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004858:	4a23      	ldr	r2, [pc, #140]	; (80048e8 <menu+0x3340>)
 800485a:	2101      	movs	r1, #1
 800485c:	2002      	movs	r0, #2
 800485e:	f003 fbbb 	bl	8007fd8 <lcd_print>
 8004862:	e050      	b.n	8004906 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <menu+0x32ec>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d14c      	bne.n	8004906 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 800486c:	4a1f      	ldr	r2, [pc, #124]	; (80048ec <menu+0x3344>)
 800486e:	2101      	movs	r1, #1
 8004870:	2002      	movs	r0, #2
 8004872:	f003 fbb1 	bl	8007fd8 <lcd_print>
 8004876:	e046      	b.n	8004906 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004878:	4b1a      	ldr	r3, [pc, #104]	; (80048e4 <menu+0x333c>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d142      	bne.n	8004906 <menu+0x335e>
			if(dilSecim == 0) {
 8004880:	4b04      	ldr	r3, [pc, #16]	; (8004894 <menu+0x32ec>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d135      	bne.n	80048f4 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004888:	4a19      	ldr	r2, [pc, #100]	; (80048f0 <menu+0x3348>)
 800488a:	2101      	movs	r1, #1
 800488c:	2002      	movs	r0, #2
 800488e:	f003 fba3 	bl	8007fd8 <lcd_print>
 8004892:	e038      	b.n	8004906 <menu+0x335e>
 8004894:	2000020d 	.word	0x2000020d
 8004898:	0800de4c 	.word	0x0800de4c
 800489c:	0800de80 	.word	0x0800de80
 80048a0:	40010800 	.word	0x40010800
 80048a4:	2000021b 	.word	0x2000021b
 80048a8:	2000022d 	.word	0x2000022d
 80048ac:	2000020c 	.word	0x2000020c
 80048b0:	20000118 	.word	0x20000118
 80048b4:	200001eb 	.word	0x200001eb
 80048b8:	20000001 	.word	0x20000001
 80048bc:	20000000 	.word	0x20000000
 80048c0:	200001ea 	.word	0x200001ea
 80048c4:	200001e9 	.word	0x200001e9
 80048c8:	20000218 	.word	0x20000218
 80048cc:	200001ec 	.word	0x200001ec
 80048d0:	0800de94 	.word	0x0800de94
 80048d4:	0800dea8 	.word	0x0800dea8
 80048d8:	0800debc 	.word	0x0800debc
 80048dc:	0800ded0 	.word	0x0800ded0
 80048e0:	0800dee4 	.word	0x0800dee4
 80048e4:	2000020b 	.word	0x2000020b
 80048e8:	0800d73c 	.word	0x0800d73c
 80048ec:	0800d750 	.word	0x0800d750
 80048f0:	0800d79c 	.word	0x0800d79c
			} else if(dilSecim == 1) {
 80048f4:	4ba1      	ldr	r3, [pc, #644]	; (8004b7c <menu+0x35d4>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d104      	bne.n	8004906 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80048fc:	4aa0      	ldr	r2, [pc, #640]	; (8004b80 <menu+0x35d8>)
 80048fe:	2101      	movs	r1, #1
 8004900:	2002      	movs	r0, #2
 8004902:	f003 fb69 	bl	8007fd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004906:	2102      	movs	r1, #2
 8004908:	489e      	ldr	r0, [pc, #632]	; (8004b84 <menu+0x35dc>)
 800490a:	f004 fe8b 	bl	8009624 <HAL_GPIO_ReadPin>
 800490e:	4603      	mov	r3, r0
 8004910:	2b01      	cmp	r3, #1
 8004912:	d115      	bne.n	8004940 <menu+0x3398>
 8004914:	4b9c      	ldr	r3, [pc, #624]	; (8004b88 <menu+0x35e0>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	f083 0301 	eor.w	r3, r3, #1
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00e      	beq.n	8004940 <menu+0x3398>
			iotMode = iotMode + 1;
 8004922:	4b9a      	ldr	r3, [pc, #616]	; (8004b8c <menu+0x35e4>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	3301      	adds	r3, #1
 8004928:	b2da      	uxtb	r2, r3
 800492a:	4b98      	ldr	r3, [pc, #608]	; (8004b8c <menu+0x35e4>)
 800492c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800492e:	4b97      	ldr	r3, [pc, #604]	; (8004b8c <menu+0x35e4>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d902      	bls.n	800493c <menu+0x3394>
				iotMode = 0;
 8004936:	4b95      	ldr	r3, [pc, #596]	; (8004b8c <menu+0x35e4>)
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800493c:	f000 f990 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004940:	2104      	movs	r1, #4
 8004942:	4890      	ldr	r0, [pc, #576]	; (8004b84 <menu+0x35dc>)
 8004944:	f004 fe6e 	bl	8009624 <HAL_GPIO_ReadPin>
 8004948:	4603      	mov	r3, r0
 800494a:	2b01      	cmp	r3, #1
 800494c:	d115      	bne.n	800497a <menu+0x33d2>
 800494e:	4b8e      	ldr	r3, [pc, #568]	; (8004b88 <menu+0x35e0>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f083 0301 	eor.w	r3, r3, #1
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00e      	beq.n	800497a <menu+0x33d2>
			iotMode = iotMode - 1;
 800495c:	4b8b      	ldr	r3, [pc, #556]	; (8004b8c <menu+0x35e4>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	3b01      	subs	r3, #1
 8004962:	b2da      	uxtb	r2, r3
 8004964:	4b89      	ldr	r3, [pc, #548]	; (8004b8c <menu+0x35e4>)
 8004966:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004968:	4b88      	ldr	r3, [pc, #544]	; (8004b8c <menu+0x35e4>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <menu+0x33ce>
		   		iotMode = 1;
 8004970:	4b86      	ldr	r3, [pc, #536]	; (8004b8c <menu+0x35e4>)
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004976:	f000 f973 	bl	8004c60 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800497a:	2108      	movs	r1, #8
 800497c:	4881      	ldr	r0, [pc, #516]	; (8004b84 <menu+0x35dc>)
 800497e:	f004 fe51 	bl	8009624 <HAL_GPIO_ReadPin>
 8004982:	4603      	mov	r3, r0
 8004984:	2b01      	cmp	r3, #1
 8004986:	d10e      	bne.n	80049a6 <menu+0x33fe>
 8004988:	4b7f      	ldr	r3, [pc, #508]	; (8004b88 <menu+0x35e0>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	f083 0301 	eor.w	r3, r3, #1
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d007      	beq.n	80049a6 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004996:	4b7d      	ldr	r3, [pc, #500]	; (8004b8c <menu+0x35e4>)
 8004998:	781a      	ldrb	r2, [r3, #0]
 800499a:	4b7d      	ldr	r3, [pc, #500]	; (8004b90 <menu+0x35e8>)
 800499c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80049a0:	4b7c      	ldr	r3, [pc, #496]	; (8004b94 <menu+0x35ec>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80049a6:	4b7c      	ldr	r3, [pc, #496]	; (8004b98 <menu+0x35f0>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d12b      	bne.n	8004a06 <menu+0x345e>
		calismaSayModu = 0;
 80049ae:	4b7b      	ldr	r3, [pc, #492]	; (8004b9c <menu+0x35f4>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 80049b4:	2001      	movs	r0, #1
 80049b6:	f7fb febf 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 80049ba:	2032      	movs	r0, #50	; 0x32
 80049bc:	f004 f862 	bl	8008a84 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 80049c0:	2001      	movs	r0, #1
 80049c2:	f7fc fd4f 	bl	8001464 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049c6:	2102      	movs	r1, #2
 80049c8:	486e      	ldr	r0, [pc, #440]	; (8004b84 <menu+0x35dc>)
 80049ca:	f004 fe2b 	bl	8009624 <HAL_GPIO_ReadPin>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d118      	bne.n	8004a06 <menu+0x345e>
 80049d4:	2104      	movs	r1, #4
 80049d6:	486b      	ldr	r0, [pc, #428]	; (8004b84 <menu+0x35dc>)
 80049d8:	f004 fe24 	bl	8009624 <HAL_GPIO_ReadPin>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d111      	bne.n	8004a06 <menu+0x345e>
 80049e2:	4b69      	ldr	r3, [pc, #420]	; (8004b88 <menu+0x35e0>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	f083 0301 	eor.w	r3, r3, #1
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <menu+0x345e>
			takeMachineID();
 80049f0:	f002 fa80 	bl	8006ef4 <takeMachineID>

			convertArrays(1);
 80049f4:	2001      	movs	r0, #1
 80049f6:	f7fb fe9f 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 80049fa:	2032      	movs	r0, #50	; 0x32
 80049fc:	f004 f842 	bl	8008a84 <HAL_Delay>

			printCredentials(1); //ekrana machine id yazdır
 8004a00:	2001      	movs	r0, #1
 8004a02:	f7fc fd2f 	bl	8001464 <printCredentials>
		}
	}

	if (menuSayac == 33) {
 8004a06:	4b64      	ldr	r3, [pc, #400]	; (8004b98 <menu+0x35f0>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b21      	cmp	r3, #33	; 0x21
 8004a0c:	d12e      	bne.n	8004a6c <menu+0x34c4>
		calismaSayModu = 0;
 8004a0e:	4b63      	ldr	r3, [pc, #396]	; (8004b9c <menu+0x35f4>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8004a14:	2001      	movs	r0, #1
 8004a16:	f003 fb2b 	bl	8008070 <lcd_backlight>

		convertArrays(2);
 8004a1a:	2002      	movs	r0, #2
 8004a1c:	f7fb fe8c 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 8004a20:	2032      	movs	r0, #50	; 0x32
 8004a22:	f004 f82f 	bl	8008a84 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8004a26:	2002      	movs	r0, #2
 8004a28:	f7fc fd1c 	bl	8001464 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a2c:	2102      	movs	r1, #2
 8004a2e:	4855      	ldr	r0, [pc, #340]	; (8004b84 <menu+0x35dc>)
 8004a30:	f004 fdf8 	bl	8009624 <HAL_GPIO_ReadPin>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d118      	bne.n	8004a6c <menu+0x34c4>
 8004a3a:	2104      	movs	r1, #4
 8004a3c:	4851      	ldr	r0, [pc, #324]	; (8004b84 <menu+0x35dc>)
 8004a3e:	f004 fdf1 	bl	8009624 <HAL_GPIO_ReadPin>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d111      	bne.n	8004a6c <menu+0x34c4>
 8004a48:	4b4f      	ldr	r3, [pc, #316]	; (8004b88 <menu+0x35e0>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	f083 0301 	eor.w	r3, r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <menu+0x34c4>
			takeWifiSSID();
 8004a56:	f002 fbe5 	bl	8007224 <takeWifiSSID>

			convertArrays(2);
 8004a5a:	2002      	movs	r0, #2
 8004a5c:	f7fb fe6c 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 8004a60:	2032      	movs	r0, #50	; 0x32
 8004a62:	f004 f80f 	bl	8008a84 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8004a66:	2002      	movs	r0, #2
 8004a68:	f7fc fcfc 	bl	8001464 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8004a6c:	4b4a      	ldr	r3, [pc, #296]	; (8004b98 <menu+0x35f0>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b22      	cmp	r3, #34	; 0x22
 8004a72:	d12e      	bne.n	8004ad2 <menu+0x352a>
		calismaSayModu = 0;
 8004a74:	4b49      	ldr	r3, [pc, #292]	; (8004b9c <menu+0x35f4>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f003 faf8 	bl	8008070 <lcd_backlight>

		convertArrays(3);
 8004a80:	2003      	movs	r0, #3
 8004a82:	f7fb fe59 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 8004a86:	2032      	movs	r0, #50	; 0x32
 8004a88:	f003 fffc 	bl	8008a84 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8004a8c:	2003      	movs	r0, #3
 8004a8e:	f7fc fce9 	bl	8001464 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a92:	2102      	movs	r1, #2
 8004a94:	483b      	ldr	r0, [pc, #236]	; (8004b84 <menu+0x35dc>)
 8004a96:	f004 fdc5 	bl	8009624 <HAL_GPIO_ReadPin>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d118      	bne.n	8004ad2 <menu+0x352a>
 8004aa0:	2104      	movs	r1, #4
 8004aa2:	4838      	ldr	r0, [pc, #224]	; (8004b84 <menu+0x35dc>)
 8004aa4:	f004 fdbe 	bl	8009624 <HAL_GPIO_ReadPin>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d111      	bne.n	8004ad2 <menu+0x352a>
 8004aae:	4b36      	ldr	r3, [pc, #216]	; (8004b88 <menu+0x35e0>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	f083 0301 	eor.w	r3, r3, #1
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <menu+0x352a>
			takeWifiPass();
 8004abc:	f002 fd40 	bl	8007540 <takeWifiPass>

			convertArrays(3);
 8004ac0:	2003      	movs	r0, #3
 8004ac2:	f7fb fe39 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 8004ac6:	2032      	movs	r0, #50	; 0x32
 8004ac8:	f003 ffdc 	bl	8008a84 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8004acc:	2003      	movs	r0, #3
 8004ace:	f7fc fcc9 	bl	8001464 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8004ad2:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <menu+0x35f0>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b23      	cmp	r3, #35	; 0x23
 8004ad8:	d14d      	bne.n	8004b76 <menu+0x35ce>
		if(dilSecim == 0) {
 8004ada:	4b28      	ldr	r3, [pc, #160]	; (8004b7c <menu+0x35d4>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10a      	bne.n	8004af8 <menu+0x3550>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004ae2:	4a2f      	ldr	r2, [pc, #188]	; (8004ba0 <menu+0x35f8>)
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	f003 fa76 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004aec:	4a2d      	ldr	r2, [pc, #180]	; (8004ba4 <menu+0x35fc>)
 8004aee:	2101      	movs	r1, #1
 8004af0:	2002      	movs	r0, #2
 8004af2:	f003 fa71 	bl	8007fd8 <lcd_print>
 8004af6:	e00d      	b.n	8004b14 <menu+0x356c>
		} else if(dilSecim == 1) {
 8004af8:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <menu+0x35d4>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d109      	bne.n	8004b14 <menu+0x356c>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004b00:	4a29      	ldr	r2, [pc, #164]	; (8004ba8 <menu+0x3600>)
 8004b02:	2101      	movs	r1, #1
 8004b04:	2001      	movs	r0, #1
 8004b06:	f003 fa67 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004b0a:	4a28      	ldr	r2, [pc, #160]	; (8004bac <menu+0x3604>)
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	2002      	movs	r0, #2
 8004b10:	f003 fa62 	bl	8007fd8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004b14:	2108      	movs	r1, #8
 8004b16:	481b      	ldr	r0, [pc, #108]	; (8004b84 <menu+0x35dc>)
 8004b18:	f004 fd84 	bl	8009624 <HAL_GPIO_ReadPin>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d129      	bne.n	8004b76 <menu+0x35ce>
			menuGiris = 0;
 8004b22:	4b23      	ldr	r3, [pc, #140]	; (8004bb0 <menu+0x3608>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004b28:	bf00      	nop
 8004b2a:	4822      	ldr	r0, [pc, #136]	; (8004bb4 <menu+0x360c>)
 8004b2c:	f005 fba3 	bl	800a276 <HAL_I2C_GetError>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d0f9      	beq.n	8004b2a <menu+0x3582>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004b36:	bf00      	nop
 8004b38:	481e      	ldr	r0, [pc, #120]	; (8004bb4 <menu+0x360c>)
 8004b3a:	f005 fb8f 	bl	800a25c <HAL_I2C_GetState>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d1f9      	bne.n	8004b38 <menu+0x3590>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004b44:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004b48:	9302      	str	r3, [sp, #8]
 8004b4a:	236e      	movs	r3, #110	; 0x6e
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <menu+0x35e8>)
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	236e      	movs	r3, #110	; 0x6e
 8004b54:	2200      	movs	r2, #0
 8004b56:	21a0      	movs	r1, #160	; 0xa0
 8004b58:	4816      	ldr	r0, [pc, #88]	; (8004bb4 <menu+0x360c>)
 8004b5a:	f005 f81d 	bl	8009b98 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004b5e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004b62:	f003 ff8f 	bl	8008a84 <HAL_Delay>

			lcd_clear();
 8004b66:	f003 fa63 	bl	8008030 <lcd_clear>
			HAL_Delay(500);
 8004b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b6e:	f003 ff89 	bl	8008a84 <HAL_Delay>
			NVIC_SystemReset();
 8004b72:	f7fc fd03 	bl	800157c <__NVIC_SystemReset>
		}
	}
}
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	2000020d 	.word	0x2000020d
 8004b80:	0800d7b0 	.word	0x0800d7b0
 8004b84:	40010800 	.word	0x40010800
 8004b88:	2000021b 	.word	0x2000021b
 8004b8c:	2000020b 	.word	0x2000020b
 8004b90:	20000118 	.word	0x20000118
 8004b94:	20000218 	.word	0x20000218
 8004b98:	200001ec 	.word	0x200001ec
 8004b9c:	2000020c 	.word	0x2000020c
 8004ba0:	0800def8 	.word	0x0800def8
 8004ba4:	0800df0c 	.word	0x0800df0c
 8004ba8:	0800df20 	.word	0x0800df20
 8004bac:	0800df34 	.word	0x0800df34
 8004bb0:	20000209 	.word	0x20000209
 8004bb4:	20000374 	.word	0x20000374

08004bb8 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d105      	bne.n	8004bd4 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004bc8:	4a22      	ldr	r2, [pc, #136]	; (8004c54 <lcdUpdate+0x9c>)
 8004bca:	2101      	movs	r1, #1
 8004bcc:	2002      	movs	r0, #2
 8004bce:	f003 fa03 	bl	8007fd8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004bd2:	e03b      	b.n	8004c4c <lcdUpdate+0x94>
	} else if(y==2) {
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d105      	bne.n	8004be6 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004bda:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <lcdUpdate+0x9c>)
 8004bdc:	2102      	movs	r1, #2
 8004bde:	2002      	movs	r0, #2
 8004be0:	f003 f9fa 	bl	8007fd8 <lcd_print>
}
 8004be4:	e032      	b.n	8004c4c <lcdUpdate+0x94>
	} else if(y==3) {
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d105      	bne.n	8004bf8 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004bec:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <lcdUpdate+0x9c>)
 8004bee:	2103      	movs	r1, #3
 8004bf0:	2002      	movs	r0, #2
 8004bf2:	f003 f9f1 	bl	8007fd8 <lcd_print>
}
 8004bf6:	e029      	b.n	8004c4c <lcdUpdate+0x94>
	} else if(y==4) {
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d105      	bne.n	8004c0a <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004bfe:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <lcdUpdate+0x9c>)
 8004c00:	2104      	movs	r1, #4
 8004c02:	2002      	movs	r0, #2
 8004c04:	f003 f9e8 	bl	8007fd8 <lcd_print>
}
 8004c08:	e020      	b.n	8004c4c <lcdUpdate+0x94>
	} else if(y==5) {
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	2b05      	cmp	r3, #5
 8004c0e:	d105      	bne.n	8004c1c <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004c10:	4a10      	ldr	r2, [pc, #64]	; (8004c54 <lcdUpdate+0x9c>)
 8004c12:	2105      	movs	r1, #5
 8004c14:	2002      	movs	r0, #2
 8004c16:	f003 f9df 	bl	8007fd8 <lcd_print>
}
 8004c1a:	e017      	b.n	8004c4c <lcdUpdate+0x94>
	} else if(y==6) {
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d105      	bne.n	8004c2e <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004c22:	4a0c      	ldr	r2, [pc, #48]	; (8004c54 <lcdUpdate+0x9c>)
 8004c24:	2106      	movs	r1, #6
 8004c26:	2002      	movs	r0, #2
 8004c28:	f003 f9d6 	bl	8007fd8 <lcd_print>
}
 8004c2c:	e00e      	b.n	8004c4c <lcdUpdate+0x94>
	} else if (y==7) {
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	2b07      	cmp	r3, #7
 8004c32:	d10b      	bne.n	8004c4c <lcdUpdate+0x94>
		lcd_clear();
 8004c34:	f003 f9fc 	bl	8008030 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004c38:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <lcdUpdate+0xa0>)
 8004c3a:	2104      	movs	r1, #4
 8004c3c:	2001      	movs	r0, #1
 8004c3e:	f003 f9cb 	bl	8007fd8 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004c42:	4a06      	ldr	r2, [pc, #24]	; (8004c5c <lcdUpdate+0xa4>)
 8004c44:	2106      	movs	r1, #6
 8004c46:	2002      	movs	r0, #2
 8004c48:	f003 f9c6 	bl	8007fd8 <lcd_print>
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	0800df48 	.word	0x0800df48
 8004c58:	0800df4c 	.word	0x0800df4c
 8004c5c:	0800df54 	.word	0x0800df54

08004c60 <bekle>:

void bekle() {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
	timer1=millis;
 8004c64:	4b47      	ldr	r3, [pc, #284]	; (8004d84 <bekle+0x124>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a47      	ldr	r2, [pc, #284]	; (8004d88 <bekle+0x128>)
 8004c6a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c6c:	e002      	b.n	8004c74 <bekle+0x14>
    	butonKontrol = 1;
 8004c6e:	4b47      	ldr	r3, [pc, #284]	; (8004d8c <bekle+0x12c>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c74:	2101      	movs	r1, #1
 8004c76:	4846      	ldr	r0, [pc, #280]	; (8004d90 <bekle+0x130>)
 8004c78:	f004 fcd4 	bl	8009624 <HAL_GPIO_ReadPin>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d109      	bne.n	8004c96 <bekle+0x36>
 8004c82:	4b40      	ldr	r3, [pc, #256]	; (8004d84 <bekle+0x124>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b40      	ldr	r3, [pc, #256]	; (8004d88 <bekle+0x128>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d0ef      	beq.n	8004c6e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c8e:	e002      	b.n	8004c96 <bekle+0x36>
    	butonKontrol = 1;
 8004c90:	4b3e      	ldr	r3, [pc, #248]	; (8004d8c <bekle+0x12c>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c96:	2108      	movs	r1, #8
 8004c98:	483e      	ldr	r0, [pc, #248]	; (8004d94 <bekle+0x134>)
 8004c9a:	f004 fcc3 	bl	8009624 <HAL_GPIO_ReadPin>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d109      	bne.n	8004cb8 <bekle+0x58>
 8004ca4:	4b37      	ldr	r3, [pc, #220]	; (8004d84 <bekle+0x124>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4b37      	ldr	r3, [pc, #220]	; (8004d88 <bekle+0x128>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d0ef      	beq.n	8004c90 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cb0:	e002      	b.n	8004cb8 <bekle+0x58>
    	butonKontrol = 1;
 8004cb2:	4b36      	ldr	r3, [pc, #216]	; (8004d8c <bekle+0x12c>)
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cb8:	2102      	movs	r1, #2
 8004cba:	4835      	ldr	r0, [pc, #212]	; (8004d90 <bekle+0x130>)
 8004cbc:	f004 fcb2 	bl	8009624 <HAL_GPIO_ReadPin>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d109      	bne.n	8004cda <bekle+0x7a>
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <bekle+0x124>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4b2f      	ldr	r3, [pc, #188]	; (8004d88 <bekle+0x128>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d0ef      	beq.n	8004cb2 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cd2:	e002      	b.n	8004cda <bekle+0x7a>
    	butonKontrol = 1;
 8004cd4:	4b2d      	ldr	r3, [pc, #180]	; (8004d8c <bekle+0x12c>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cda:	2104      	movs	r1, #4
 8004cdc:	482c      	ldr	r0, [pc, #176]	; (8004d90 <bekle+0x130>)
 8004cde:	f004 fca1 	bl	8009624 <HAL_GPIO_ReadPin>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d109      	bne.n	8004cfc <bekle+0x9c>
 8004ce8:	4b26      	ldr	r3, [pc, #152]	; (8004d84 <bekle+0x124>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b26      	ldr	r3, [pc, #152]	; (8004d88 <bekle+0x128>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d0ef      	beq.n	8004cd4 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cf4:	e002      	b.n	8004cfc <bekle+0x9c>
    	butonKontrol = 1;
 8004cf6:	4b25      	ldr	r3, [pc, #148]	; (8004d8c <bekle+0x12c>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cfc:	2108      	movs	r1, #8
 8004cfe:	4824      	ldr	r0, [pc, #144]	; (8004d90 <bekle+0x130>)
 8004d00:	f004 fc90 	bl	8009624 <HAL_GPIO_ReadPin>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d109      	bne.n	8004d1e <bekle+0xbe>
 8004d0a:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <bekle+0x124>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b1e      	ldr	r3, [pc, #120]	; (8004d88 <bekle+0x128>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d0ef      	beq.n	8004cf6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d16:	e002      	b.n	8004d1e <bekle+0xbe>
    	butonKontrol = 1;
 8004d18:	4b1c      	ldr	r3, [pc, #112]	; (8004d8c <bekle+0x12c>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d1e:	2180      	movs	r1, #128	; 0x80
 8004d20:	481c      	ldr	r0, [pc, #112]	; (8004d94 <bekle+0x134>)
 8004d22:	f004 fc7f 	bl	8009624 <HAL_GPIO_ReadPin>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d109      	bne.n	8004d40 <bekle+0xe0>
 8004d2c:	4b15      	ldr	r3, [pc, #84]	; (8004d84 <bekle+0x124>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4b15      	ldr	r3, [pc, #84]	; (8004d88 <bekle+0x128>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d0ef      	beq.n	8004d18 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d38:	e002      	b.n	8004d40 <bekle+0xe0>
    	butonKontrol = 1;
 8004d3a:	4b14      	ldr	r3, [pc, #80]	; (8004d8c <bekle+0x12c>)
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d44:	4813      	ldr	r0, [pc, #76]	; (8004d94 <bekle+0x134>)
 8004d46:	f004 fc6d 	bl	8009624 <HAL_GPIO_ReadPin>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d109      	bne.n	8004d64 <bekle+0x104>
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <bekle+0x124>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <bekle+0x128>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d0ee      	beq.n	8004d3a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d5c:	e002      	b.n	8004d64 <bekle+0x104>
    	butonKontrol = 1;
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <bekle+0x12c>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d68:	480a      	ldr	r0, [pc, #40]	; (8004d94 <bekle+0x134>)
 8004d6a:	f004 fc5b 	bl	8009624 <HAL_GPIO_ReadPin>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d105      	bne.n	8004d80 <bekle+0x120>
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <bekle+0x124>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4b03      	ldr	r3, [pc, #12]	; (8004d88 <bekle+0x128>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d0ee      	beq.n	8004d5e <bekle+0xfe>
    }

}
 8004d80:	bf00      	nop
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	200001c8 	.word	0x200001c8
 8004d88:	200001d0 	.word	0x200001d0
 8004d8c:	2000021b 	.word	0x2000021b
 8004d90:	40010800 	.word	0x40010800
 8004d94:	40011000 	.word	0x40011000

08004d98 <buttonCheck>:

uint8_t buttonCheck(void) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	4815      	ldr	r0, [pc, #84]	; (8004df4 <buttonCheck+0x5c>)
 8004da0:	f004 fc40 	bl	8009624 <HAL_GPIO_ReadPin>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d01b      	beq.n	8004de2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8004daa:	2108      	movs	r1, #8
 8004dac:	4812      	ldr	r0, [pc, #72]	; (8004df8 <buttonCheck+0x60>)
 8004dae:	f004 fc39 	bl	8009624 <HAL_GPIO_ReadPin>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d014      	beq.n	8004de2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004db8:	2102      	movs	r1, #2
 8004dba:	480e      	ldr	r0, [pc, #56]	; (8004df4 <buttonCheck+0x5c>)
 8004dbc:	f004 fc32 	bl	8009624 <HAL_GPIO_ReadPin>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d00d      	beq.n	8004de2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8004dc6:	2104      	movs	r1, #4
 8004dc8:	480a      	ldr	r0, [pc, #40]	; (8004df4 <buttonCheck+0x5c>)
 8004dca:	f004 fc2b 	bl	8009624 <HAL_GPIO_ReadPin>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d006      	beq.n	8004de2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8004dd4:	2108      	movs	r1, #8
 8004dd6:	4807      	ldr	r0, [pc, #28]	; (8004df4 <buttonCheck+0x5c>)
 8004dd8:	f004 fc24 	bl	8009624 <HAL_GPIO_ReadPin>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d104      	bne.n	8004dec <buttonCheck+0x54>
		backLightTimer = 0;
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <buttonCheck+0x64>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
		return 1;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <buttonCheck+0x56>
	}
	return 0;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40010800 	.word	0x40010800
 8004df8:	40011000 	.word	0x40011000
 8004dfc:	200001e4 	.word	0x200001e4

08004e00 <checkLCDBacklight>:

void checkLCDBacklight() {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004e04:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <checkLCDBacklight+0x24>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <checkLCDBacklight+0x28>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b3b      	cmp	r3, #59	; 0x3b
 8004e10:	d903      	bls.n	8004e1a <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004e12:	2000      	movs	r0, #0
 8004e14:	f003 f92c 	bl	8008070 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004e18:	e002      	b.n	8004e20 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	f003 f928 	bl	8008070 <lcd_backlight>
}
 8004e20:	bf00      	nop
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	200001c8 	.word	0x200001c8
 8004e28:	200001e4 	.word	0x200001e4

08004e2c <checkBasincSalteri>:

void checkBasincSalteri() {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004e30:	4b13      	ldr	r3, [pc, #76]	; (8004e80 <checkBasincSalteri+0x54>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d102      	bne.n	8004e3e <checkBasincSalteri+0x12>
		basincVar=1;
 8004e38:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <checkBasincSalteri+0x58>)
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004e3e:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <checkBasincSalteri+0x54>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d119      	bne.n	8004e7a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004e46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e4a:	480f      	ldr	r0, [pc, #60]	; (8004e88 <checkBasincSalteri+0x5c>)
 8004e4c:	f004 fbea 	bl	8009624 <HAL_GPIO_ReadPin>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10a      	bne.n	8004e6c <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004e56:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <checkBasincSalteri+0x60>)
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <checkBasincSalteri+0x64>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d90a      	bls.n	8004e7a <checkBasincSalteri+0x4e>
				basincVar=1;
 8004e64:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <checkBasincSalteri+0x58>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004e6a:	e006      	b.n	8004e7a <checkBasincSalteri+0x4e>
			timer5=millis;
 8004e6c:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <checkBasincSalteri+0x60>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a07      	ldr	r2, [pc, #28]	; (8004e90 <checkBasincSalteri+0x64>)
 8004e72:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004e74:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <checkBasincSalteri+0x58>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	701a      	strb	r2, [r3, #0]
}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	200001f3 	.word	0x200001f3
 8004e84:	200001ef 	.word	0x200001ef
 8004e88:	40011000 	.word	0x40011000
 8004e8c:	200001c8 	.word	0x200001c8
 8004e90:	200001e0 	.word	0x200001e0

08004e94 <checkBasGonder>:

void checkBasGonder() {
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004e98:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <checkBasGonder+0x74>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d10b      	bne.n	8004eb8 <checkBasGonder+0x24>
 8004ea0:	4b1a      	ldr	r3, [pc, #104]	; (8004f0c <checkBasGonder+0x78>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d007      	beq.n	8004eb8 <checkBasGonder+0x24>
 8004ea8:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <checkBasGonder+0x7c>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d103      	bne.n	8004eb8 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004eb0:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <checkBasGonder+0x80>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	e009      	b.n	8004ecc <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004eb8:	4b14      	ldr	r3, [pc, #80]	; (8004f0c <checkBasGonder+0x78>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f083 0301 	eor.w	r3, r3, #1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004ec6:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <checkBasGonder+0x80>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	; (8004f08 <checkBasGonder+0x74>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d10b      	bne.n	8004eec <checkBasGonder+0x58>
 8004ed4:	4b10      	ldr	r3, [pc, #64]	; (8004f18 <checkBasGonder+0x84>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <checkBasGonder+0x58>
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <checkBasGonder+0x7c>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d103      	bne.n	8004eec <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004ee4:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <checkBasGonder+0x88>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004eea:	e009      	b.n	8004f00 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004eec:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <checkBasGonder+0x84>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	f083 0301 	eor.w	r3, r3, #1
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004efa:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <checkBasGonder+0x88>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	701a      	strb	r2, [r3, #0]
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	200001ed 	.word	0x200001ed
 8004f0c:	20000221 	.word	0x20000221
 8004f10:	200001fb 	.word	0x200001fb
 8004f14:	20000228 	.word	0x20000228
 8004f18:	20000224 	.word	0x20000224
 8004f1c:	20000229 	.word	0x20000229

08004f20 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004f24:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <checkKapiSecimleri+0x98>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004f2c:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <checkKapiSecimleri+0x9c>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004f32:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <checkKapiSecimleri+0x98>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d10e      	bne.n	8004f58 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f3e:	4820      	ldr	r0, [pc, #128]	; (8004fc0 <checkKapiSecimleri+0xa0>)
 8004f40:	f004 fb70 	bl	8009624 <HAL_GPIO_ReadPin>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d103      	bne.n	8004f52 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <checkKapiSecimleri+0x9c>)
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	e002      	b.n	8004f58 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004f52:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <checkKapiSecimleri+0x9c>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004f58:	4b17      	ldr	r3, [pc, #92]	; (8004fb8 <checkKapiSecimleri+0x98>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d10e      	bne.n	8004f7e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f64:	4816      	ldr	r0, [pc, #88]	; (8004fc0 <checkKapiSecimleri+0xa0>)
 8004f66:	f004 fb5d 	bl	8009624 <HAL_GPIO_ReadPin>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d103      	bne.n	8004f78 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004f70:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <checkKapiSecimleri+0x9c>)
 8004f72:	2201      	movs	r2, #1
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	e002      	b.n	8004f7e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004f78:	4b10      	ldr	r3, [pc, #64]	; (8004fbc <checkKapiSecimleri+0x9c>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004f7e:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <checkKapiSecimleri+0x98>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d116      	bne.n	8004fb4 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004f86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f8a:	480d      	ldr	r0, [pc, #52]	; (8004fc0 <checkKapiSecimleri+0xa0>)
 8004f8c:	f004 fb4a 	bl	8009624 <HAL_GPIO_ReadPin>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <checkKapiSecimleri+0x8e>
 8004f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f9a:	4809      	ldr	r0, [pc, #36]	; (8004fc0 <checkKapiSecimleri+0xa0>)
 8004f9c:	f004 fb42 	bl	8009624 <HAL_GPIO_ReadPin>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d103      	bne.n	8004fae <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004fa6:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <checkKapiSecimleri+0x9c>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004fac:	e002      	b.n	8004fb4 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004fae:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <checkKapiSecimleri+0x9c>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	701a      	strb	r2, [r3, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	200001f4 	.word	0x200001f4
 8004fbc:	2000023f 	.word	0x2000023f
 8004fc0:	40010800 	.word	0x40010800

08004fc4 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004fc8:	4b62      	ldr	r3, [pc, #392]	; (8005154 <checkAktifCalisma+0x190>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f041 833e 	bne.w	800664e <checkAktifCalisma+0x168a>
 8004fd2:	4b61      	ldr	r3, [pc, #388]	; (8005158 <checkAktifCalisma+0x194>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f041 8339 	bne.w	800664e <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004fdc:	4b5f      	ldr	r3, [pc, #380]	; (800515c <checkAktifCalisma+0x198>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d11a      	bne.n	800501a <checkAktifCalisma+0x56>
 8004fe4:	4b5e      	ldr	r3, [pc, #376]	; (8005160 <checkAktifCalisma+0x19c>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d116      	bne.n	800501a <checkAktifCalisma+0x56>
 8004fec:	4b5d      	ldr	r3, [pc, #372]	; (8005164 <checkAktifCalisma+0x1a0>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <checkAktifCalisma+0x46>
 8004ff4:	4b5c      	ldr	r3, [pc, #368]	; (8005168 <checkAktifCalisma+0x1a4>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	f083 0301 	eor.w	r3, r3, #1
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <checkAktifCalisma+0x46>
 8005002:	4b5a      	ldr	r3, [pc, #360]	; (800516c <checkAktifCalisma+0x1a8>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d007      	beq.n	800501a <checkAktifCalisma+0x56>
 800500a:	4b59      	ldr	r3, [pc, #356]	; (8005170 <checkAktifCalisma+0x1ac>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d018      	beq.n	8005044 <checkAktifCalisma+0x80>
 8005012:	4b58      	ldr	r3, [pc, #352]	; (8005174 <checkAktifCalisma+0x1b0>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d114      	bne.n	8005044 <checkAktifCalisma+0x80>
 800501a:	4b57      	ldr	r3, [pc, #348]	; (8005178 <checkAktifCalisma+0x1b4>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d010      	beq.n	8005044 <checkAktifCalisma+0x80>
 8005022:	4b56      	ldr	r3, [pc, #344]	; (800517c <checkAktifCalisma+0x1b8>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00c      	beq.n	8005044 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800502a:	2201      	movs	r2, #1
 800502c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005030:	4853      	ldr	r0, [pc, #332]	; (8005180 <checkAktifCalisma+0x1bc>)
 8005032:	f004 fb0e 	bl	8009652 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8005036:	4b53      	ldr	r3, [pc, #332]	; (8005184 <checkAktifCalisma+0x1c0>)
 8005038:	2201      	movs	r2, #1
 800503a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 800503c:	4b52      	ldr	r3, [pc, #328]	; (8005188 <checkAktifCalisma+0x1c4>)
 800503e:	2201      	movs	r2, #1
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	e008      	b.n	8005056 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005044:	2200      	movs	r2, #0
 8005046:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800504a:	484d      	ldr	r0, [pc, #308]	; (8005180 <checkAktifCalisma+0x1bc>)
 800504c:	f004 fb01 	bl	8009652 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8005050:	4b4c      	ldr	r3, [pc, #304]	; (8005184 <checkAktifCalisma+0x1c0>)
 8005052:	2200      	movs	r2, #0
 8005054:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8005056:	4b40      	ldr	r3, [pc, #256]	; (8005158 <checkAktifCalisma+0x194>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d160      	bne.n	8005120 <checkAktifCalisma+0x15c>
 800505e:	4b46      	ldr	r3, [pc, #280]	; (8005178 <checkAktifCalisma+0x1b4>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d05c      	beq.n	8005120 <checkAktifCalisma+0x15c>
 8005066:	4b45      	ldr	r3, [pc, #276]	; (800517c <checkAktifCalisma+0x1b8>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d058      	beq.n	8005120 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800506e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005072:	4843      	ldr	r0, [pc, #268]	; (8005180 <checkAktifCalisma+0x1bc>)
 8005074:	f004 fad6 	bl	8009624 <HAL_GPIO_ReadPin>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <checkAktifCalisma+0xc2>
 800507e:	4b43      	ldr	r3, [pc, #268]	; (800518c <checkAktifCalisma+0x1c8>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d04c      	beq.n	8005120 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005086:	2102      	movs	r1, #2
 8005088:	4841      	ldr	r0, [pc, #260]	; (8005190 <checkAktifCalisma+0x1cc>)
 800508a:	f004 facb 	bl	8009624 <HAL_GPIO_ReadPin>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d145      	bne.n	8005120 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8005094:	4b3f      	ldr	r3, [pc, #252]	; (8005194 <checkAktifCalisma+0x1d0>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d041      	beq.n	8005120 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 800509c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050a0:	4837      	ldr	r0, [pc, #220]	; (8005180 <checkAktifCalisma+0x1bc>)
 80050a2:	f004 fabf 	bl	8009624 <HAL_GPIO_ReadPin>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d10e      	bne.n	80050ca <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80050ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050b0:	4833      	ldr	r0, [pc, #204]	; (8005180 <checkAktifCalisma+0x1bc>)
 80050b2:	f004 fab7 	bl	8009624 <HAL_GPIO_ReadPin>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d106      	bne.n	80050ca <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80050bc:	2140      	movs	r1, #64	; 0x40
 80050be:	4834      	ldr	r0, [pc, #208]	; (8005190 <checkAktifCalisma+0x1cc>)
 80050c0:	f004 fab0 	bl	8009624 <HAL_GPIO_ReadPin>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d003      	beq.n	80050d2 <checkAktifCalisma+0x10e>
 80050ca:	4b24      	ldr	r3, [pc, #144]	; (800515c <checkAktifCalisma+0x198>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d026      	beq.n	8005120 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 80050d2:	4b24      	ldr	r3, [pc, #144]	; (8005164 <checkAktifCalisma+0x1a0>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	f083 0301 	eor.w	r3, r3, #1
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01f      	beq.n	8005120 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 80050e0:	4b1f      	ldr	r3, [pc, #124]	; (8005160 <checkAktifCalisma+0x19c>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	f083 0301 	eor.w	r3, r3, #1
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d018      	beq.n	8005120 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 80050ee:	4b20      	ldr	r3, [pc, #128]	; (8005170 <checkAktifCalisma+0x1ac>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	f083 0301 	eor.w	r3, r3, #1
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d011      	beq.n	8005120 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 80050fc:	4b26      	ldr	r3, [pc, #152]	; (8005198 <checkAktifCalisma+0x1d4>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f083 0301 	eor.w	r3, r3, #1
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800510a:	4b24      	ldr	r3, [pc, #144]	; (800519c <checkAktifCalisma+0x1d8>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	f083 0301 	eor.w	r3, r3, #1
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8005118:	4b10      	ldr	r3, [pc, #64]	; (800515c <checkAktifCalisma+0x198>)
 800511a:	2201      	movs	r2, #1
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	e002      	b.n	8005126 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8005120:	4b0e      	ldr	r3, [pc, #56]	; (800515c <checkAktifCalisma+0x198>)
 8005122:	2200      	movs	r2, #0
 8005124:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <checkAktifCalisma+0x198>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d03a      	beq.n	80051a4 <checkAktifCalisma+0x1e0>
 800512e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005132:	4817      	ldr	r0, [pc, #92]	; (8005190 <checkAktifCalisma+0x1cc>)
 8005134:	f004 fa76 	bl	8009624 <HAL_GPIO_ReadPin>
 8005138:	4603      	mov	r3, r0
 800513a:	2b01      	cmp	r3, #1
 800513c:	d132      	bne.n	80051a4 <checkAktifCalisma+0x1e0>
 800513e:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <checkAktifCalisma+0x1dc>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d02e      	beq.n	80051a4 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005146:	2201      	movs	r2, #1
 8005148:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800514c:	480c      	ldr	r0, [pc, #48]	; (8005180 <checkAktifCalisma+0x1bc>)
 800514e:	f004 fa80 	bl	8009652 <HAL_GPIO_WritePin>
 8005152:	e02d      	b.n	80051b0 <checkAktifCalisma+0x1ec>
 8005154:	2000020a 	.word	0x2000020a
 8005158:	20000209 	.word	0x20000209
 800515c:	20000221 	.word	0x20000221
 8005160:	20000222 	.word	0x20000222
 8005164:	20000224 	.word	0x20000224
 8005168:	2000021c 	.word	0x2000021c
 800516c:	200001ff 	.word	0x200001ff
 8005170:	20000223 	.word	0x20000223
 8005174:	200001fe 	.word	0x200001fe
 8005178:	2000023e 	.word	0x2000023e
 800517c:	2000023f 	.word	0x2000023f
 8005180:	40010c00 	.word	0x40010c00
 8005184:	20000240 	.word	0x20000240
 8005188:	2000022b 	.word	0x2000022b
 800518c:	20000228 	.word	0x20000228
 8005190:	40011000 	.word	0x40011000
 8005194:	200001ef 	.word	0x200001ef
 8005198:	20000226 	.word	0x20000226
 800519c:	20000227 	.word	0x20000227
 80051a0:	200001fa 	.word	0x200001fa
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80051a4:	2200      	movs	r2, #0
 80051a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80051aa:	4860      	ldr	r0, [pc, #384]	; (800532c <checkAktifCalisma+0x368>)
 80051ac:	f004 fa51 	bl	8009652 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80051b0:	4b5f      	ldr	r3, [pc, #380]	; (8005330 <checkAktifCalisma+0x36c>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d013      	beq.n	80051e0 <checkAktifCalisma+0x21c>
 80051b8:	4b5e      	ldr	r3, [pc, #376]	; (8005334 <checkAktifCalisma+0x370>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d007      	beq.n	80051d0 <checkAktifCalisma+0x20c>
 80051c0:	4b5c      	ldr	r3, [pc, #368]	; (8005334 <checkAktifCalisma+0x370>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d003      	beq.n	80051d0 <checkAktifCalisma+0x20c>
 80051c8:	4b5b      	ldr	r3, [pc, #364]	; (8005338 <checkAktifCalisma+0x374>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80051d0:	2201      	movs	r2, #1
 80051d2:	2104      	movs	r1, #4
 80051d4:	4855      	ldr	r0, [pc, #340]	; (800532c <checkAktifCalisma+0x368>)
 80051d6:	f004 fa3c 	bl	8009652 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 80051da:	4b58      	ldr	r3, [pc, #352]	; (800533c <checkAktifCalisma+0x378>)
 80051dc:	2201      	movs	r2, #1
 80051de:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80051e0:	4b56      	ldr	r3, [pc, #344]	; (800533c <checkAktifCalisma+0x378>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d02f      	beq.n	8005248 <checkAktifCalisma+0x284>
 80051e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051ec:	484f      	ldr	r0, [pc, #316]	; (800532c <checkAktifCalisma+0x368>)
 80051ee:	f004 fa19 	bl	8009624 <HAL_GPIO_ReadPin>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d106      	bne.n	8005206 <checkAktifCalisma+0x242>
 80051f8:	4b51      	ldr	r3, [pc, #324]	; (8005340 <checkAktifCalisma+0x37c>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	f083 0301 	eor.w	r3, r3, #1
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <checkAktifCalisma+0x250>
 8005206:	2102      	movs	r1, #2
 8005208:	484e      	ldr	r0, [pc, #312]	; (8005344 <checkAktifCalisma+0x380>)
 800520a:	f004 fa0b 	bl	8009624 <HAL_GPIO_ReadPin>
 800520e:	4603      	mov	r3, r0
 8005210:	2b01      	cmp	r3, #1
 8005212:	d119      	bne.n	8005248 <checkAktifCalisma+0x284>
 8005214:	4b4c      	ldr	r3, [pc, #304]	; (8005348 <checkAktifCalisma+0x384>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d015      	beq.n	8005248 <checkAktifCalisma+0x284>
 800521c:	4b4b      	ldr	r3, [pc, #300]	; (800534c <checkAktifCalisma+0x388>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d011      	beq.n	8005248 <checkAktifCalisma+0x284>
 8005224:	4b4a      	ldr	r3, [pc, #296]	; (8005350 <checkAktifCalisma+0x38c>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00d      	beq.n	8005248 <checkAktifCalisma+0x284>
 800522c:	4b49      	ldr	r3, [pc, #292]	; (8005354 <checkAktifCalisma+0x390>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	f083 0301 	eor.w	r3, r3, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d006      	beq.n	8005248 <checkAktifCalisma+0x284>
			timer2=millis;
 800523a:	4b47      	ldr	r3, [pc, #284]	; (8005358 <checkAktifCalisma+0x394>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a47      	ldr	r2, [pc, #284]	; (800535c <checkAktifCalisma+0x398>)
 8005240:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005242:	4b44      	ldr	r3, [pc, #272]	; (8005354 <checkAktifCalisma+0x390>)
 8005244:	2201      	movs	r2, #1
 8005246:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005248:	4b43      	ldr	r3, [pc, #268]	; (8005358 <checkAktifCalisma+0x394>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4b43      	ldr	r3, [pc, #268]	; (800535c <checkAktifCalisma+0x398>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	4a43      	ldr	r2, [pc, #268]	; (8005360 <checkAktifCalisma+0x39c>)
 8005254:	7812      	ldrb	r2, [r2, #0]
 8005256:	4293      	cmp	r3, r2
 8005258:	d303      	bcc.n	8005262 <checkAktifCalisma+0x29e>
 800525a:	4b3e      	ldr	r3, [pc, #248]	; (8005354 <checkAktifCalisma+0x390>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d111      	bne.n	8005286 <checkAktifCalisma+0x2c2>
 8005262:	4b39      	ldr	r3, [pc, #228]	; (8005348 <checkAktifCalisma+0x384>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	f083 0301 	eor.w	r3, r3, #1
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <checkAktifCalisma+0x2c2>
 8005270:	4b36      	ldr	r3, [pc, #216]	; (800534c <checkAktifCalisma+0x388>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	f083 0301 	eor.w	r3, r3, #1
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d103      	bne.n	8005286 <checkAktifCalisma+0x2c2>
 800527e:	4b34      	ldr	r3, [pc, #208]	; (8005350 <checkAktifCalisma+0x38c>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005286:	2200      	movs	r2, #0
 8005288:	2104      	movs	r1, #4
 800528a:	4828      	ldr	r0, [pc, #160]	; (800532c <checkAktifCalisma+0x368>)
 800528c:	f004 f9e1 	bl	8009652 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005290:	4b2a      	ldr	r3, [pc, #168]	; (800533c <checkAktifCalisma+0x378>)
 8005292:	2200      	movs	r2, #0
 8005294:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005296:	4b2f      	ldr	r3, [pc, #188]	; (8005354 <checkAktifCalisma+0x390>)
 8005298:	2200      	movs	r2, #0
 800529a:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 800529c:	4b31      	ldr	r3, [pc, #196]	; (8005364 <checkAktifCalisma+0x3a0>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80052a4:	4b30      	ldr	r3, [pc, #192]	; (8005368 <checkAktifCalisma+0x3a4>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80052aa:	4b2e      	ldr	r3, [pc, #184]	; (8005364 <checkAktifCalisma+0x3a0>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d116      	bne.n	80052e0 <checkAktifCalisma+0x31c>
 80052b2:	4b2e      	ldr	r3, [pc, #184]	; (800536c <checkAktifCalisma+0x3a8>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d112      	bne.n	80052e0 <checkAktifCalisma+0x31c>
 80052ba:	2101      	movs	r1, #1
 80052bc:	4821      	ldr	r0, [pc, #132]	; (8005344 <checkAktifCalisma+0x380>)
 80052be:	f004 f9b1 	bl	8009624 <HAL_GPIO_ReadPin>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10b      	bne.n	80052e0 <checkAktifCalisma+0x31c>
 80052c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052cc:	4817      	ldr	r0, [pc, #92]	; (800532c <checkAktifCalisma+0x368>)
 80052ce:	f004 f9a9 	bl	8009624 <HAL_GPIO_ReadPin>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d103      	bne.n	80052e0 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80052d8:	4b23      	ldr	r3, [pc, #140]	; (8005368 <checkAktifCalisma+0x3a4>)
 80052da:	2201      	movs	r2, #1
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	e011      	b.n	8005304 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80052e0:	4b20      	ldr	r3, [pc, #128]	; (8005364 <checkAktifCalisma+0x3a0>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d10d      	bne.n	8005304 <checkAktifCalisma+0x340>
 80052e8:	2101      	movs	r1, #1
 80052ea:	4816      	ldr	r0, [pc, #88]	; (8005344 <checkAktifCalisma+0x380>)
 80052ec:	f004 f99a 	bl	8009624 <HAL_GPIO_ReadPin>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d106      	bne.n	8005304 <checkAktifCalisma+0x340>
 80052f6:	4b1d      	ldr	r3, [pc, #116]	; (800536c <checkAktifCalisma+0x3a8>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d102      	bne.n	8005304 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80052fe:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <checkAktifCalisma+0x3a4>)
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005304:	4b17      	ldr	r3, [pc, #92]	; (8005364 <checkAktifCalisma+0x3a0>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d134      	bne.n	8005376 <checkAktifCalisma+0x3b2>
 800530c:	4b17      	ldr	r3, [pc, #92]	; (800536c <checkAktifCalisma+0x3a8>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d130      	bne.n	8005376 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005314:	2101      	movs	r1, #1
 8005316:	480b      	ldr	r0, [pc, #44]	; (8005344 <checkAktifCalisma+0x380>)
 8005318:	f004 f984 	bl	8009624 <HAL_GPIO_ReadPin>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d126      	bne.n	8005370 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005322:	4b11      	ldr	r3, [pc, #68]	; (8005368 <checkAktifCalisma+0x3a4>)
 8005324:	2201      	movs	r2, #1
 8005326:	701a      	strb	r2, [r3, #0]
 8005328:	e025      	b.n	8005376 <checkAktifCalisma+0x3b2>
 800532a:	bf00      	nop
 800532c:	40010c00 	.word	0x40010c00
 8005330:	20000221 	.word	0x20000221
 8005334:	200001fb 	.word	0x200001fb
 8005338:	200001ff 	.word	0x200001ff
 800533c:	20000225 	.word	0x20000225
 8005340:	20000228 	.word	0x20000228
 8005344:	40011000 	.word	0x40011000
 8005348:	2000023e 	.word	0x2000023e
 800534c:	2000023f 	.word	0x2000023f
 8005350:	200001ef 	.word	0x200001ef
 8005354:	2000021d 	.word	0x2000021d
 8005358:	200001c8 	.word	0x200001c8
 800535c:	200001d4 	.word	0x200001d4
 8005360:	20000200 	.word	0x20000200
 8005364:	200001f0 	.word	0x200001f0
 8005368:	20000243 	.word	0x20000243
 800536c:	200001ed 	.word	0x200001ed
			} else {
				cerceveVar=0;
 8005370:	4b7f      	ldr	r3, [pc, #508]	; (8005570 <checkAktifCalisma+0x5ac>)
 8005372:	2200      	movs	r2, #0
 8005374:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005376:	4b7f      	ldr	r3, [pc, #508]	; (8005574 <checkAktifCalisma+0x5b0>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d17c      	bne.n	8005478 <checkAktifCalisma+0x4b4>
 800537e:	4b7e      	ldr	r3, [pc, #504]	; (8005578 <checkAktifCalisma+0x5b4>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d078      	beq.n	8005478 <checkAktifCalisma+0x4b4>
 8005386:	4b7d      	ldr	r3, [pc, #500]	; (800557c <checkAktifCalisma+0x5b8>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d074      	beq.n	8005478 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800538e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005392:	487b      	ldr	r0, [pc, #492]	; (8005580 <checkAktifCalisma+0x5bc>)
 8005394:	f004 f946 	bl	8009624 <HAL_GPIO_ReadPin>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <checkAktifCalisma+0x3e2>
 800539e:	4b79      	ldr	r3, [pc, #484]	; (8005584 <checkAktifCalisma+0x5c0>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d068      	beq.n	8005478 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80053a6:	4b72      	ldr	r3, [pc, #456]	; (8005570 <checkAktifCalisma+0x5ac>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d064      	beq.n	8005478 <checkAktifCalisma+0x4b4>
 80053ae:	4b76      	ldr	r3, [pc, #472]	; (8005588 <checkAktifCalisma+0x5c4>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	f083 0301 	eor.w	r3, r3, #1
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d05d      	beq.n	8005478 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80053bc:	2104      	movs	r1, #4
 80053be:	4873      	ldr	r0, [pc, #460]	; (800558c <checkAktifCalisma+0x5c8>)
 80053c0:	f004 f930 	bl	8009624 <HAL_GPIO_ReadPin>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <checkAktifCalisma+0x40e>
 80053ca:	4b71      	ldr	r3, [pc, #452]	; (8005590 <checkAktifCalisma+0x5cc>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d152      	bne.n	8005478 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80053d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053d6:	486a      	ldr	r0, [pc, #424]	; (8005580 <checkAktifCalisma+0x5bc>)
 80053d8:	f004 f924 	bl	8009624 <HAL_GPIO_ReadPin>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d10e      	bne.n	8005400 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80053e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053e6:	4866      	ldr	r0, [pc, #408]	; (8005580 <checkAktifCalisma+0x5bc>)
 80053e8:	f004 f91c 	bl	8009624 <HAL_GPIO_ReadPin>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d106      	bne.n	8005400 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80053f2:	2140      	movs	r1, #64	; 0x40
 80053f4:	4865      	ldr	r0, [pc, #404]	; (800558c <checkAktifCalisma+0x5c8>)
 80053f6:	f004 f915 	bl	8009624 <HAL_GPIO_ReadPin>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d003      	beq.n	8005408 <checkAktifCalisma+0x444>
 8005400:	4b64      	ldr	r3, [pc, #400]	; (8005594 <checkAktifCalisma+0x5d0>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d037      	beq.n	8005478 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005408:	4b63      	ldr	r3, [pc, #396]	; (8005598 <checkAktifCalisma+0x5d4>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	f083 0301 	eor.w	r3, r3, #1
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d030      	beq.n	8005478 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005416:	4b61      	ldr	r3, [pc, #388]	; (800559c <checkAktifCalisma+0x5d8>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	f083 0301 	eor.w	r3, r3, #1
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d029      	beq.n	8005478 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005424:	4b5e      	ldr	r3, [pc, #376]	; (80055a0 <checkAktifCalisma+0x5dc>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	f083 0301 	eor.w	r3, r3, #1
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d022      	beq.n	8005478 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005432:	4b5c      	ldr	r3, [pc, #368]	; (80055a4 <checkAktifCalisma+0x5e0>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	f083 0301 	eor.w	r3, r3, #1
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01b      	beq.n	8005478 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005440:	4b59      	ldr	r3, [pc, #356]	; (80055a8 <checkAktifCalisma+0x5e4>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	f083 0301 	eor.w	r3, r3, #1
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d014      	beq.n	8005478 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800544e:	4b57      	ldr	r3, [pc, #348]	; (80055ac <checkAktifCalisma+0x5e8>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	f083 0301 	eor.w	r3, r3, #1
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00d      	beq.n	8005478 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800545c:	2201      	movs	r2, #1
 800545e:	2102      	movs	r1, #2
 8005460:	4847      	ldr	r0, [pc, #284]	; (8005580 <checkAktifCalisma+0x5bc>)
 8005462:	f004 f8f6 	bl	8009652 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005466:	4b4b      	ldr	r3, [pc, #300]	; (8005594 <checkAktifCalisma+0x5d0>)
 8005468:	2201      	movs	r2, #1
 800546a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 800546c:	4b50      	ldr	r3, [pc, #320]	; (80055b0 <checkAktifCalisma+0x5ec>)
 800546e:	2201      	movs	r2, #1
 8005470:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8005472:	4b50      	ldr	r3, [pc, #320]	; (80055b4 <checkAktifCalisma+0x5f0>)
 8005474:	2201      	movs	r2, #1
 8005476:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005478:	4b46      	ldr	r3, [pc, #280]	; (8005594 <checkAktifCalisma+0x5d0>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d033      	beq.n	80054e8 <checkAktifCalisma+0x524>
 8005480:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005484:	483e      	ldr	r0, [pc, #248]	; (8005580 <checkAktifCalisma+0x5bc>)
 8005486:	f004 f8cd 	bl	8009624 <HAL_GPIO_ReadPin>
 800548a:	4603      	mov	r3, r0
 800548c:	2b01      	cmp	r3, #1
 800548e:	d106      	bne.n	800549e <checkAktifCalisma+0x4da>
 8005490:	4b3c      	ldr	r3, [pc, #240]	; (8005584 <checkAktifCalisma+0x5c0>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	f083 0301 	eor.w	r3, r3, #1
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <checkAktifCalisma+0x4f0>
 800549e:	2104      	movs	r1, #4
 80054a0:	483a      	ldr	r0, [pc, #232]	; (800558c <checkAktifCalisma+0x5c8>)
 80054a2:	f004 f8bf 	bl	8009624 <HAL_GPIO_ReadPin>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d11d      	bne.n	80054e8 <checkAktifCalisma+0x524>
 80054ac:	4b38      	ldr	r3, [pc, #224]	; (8005590 <checkAktifCalisma+0x5cc>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d019      	beq.n	80054e8 <checkAktifCalisma+0x524>
 80054b4:	4b30      	ldr	r3, [pc, #192]	; (8005578 <checkAktifCalisma+0x5b4>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d015      	beq.n	80054e8 <checkAktifCalisma+0x524>
 80054bc:	4b2f      	ldr	r3, [pc, #188]	; (800557c <checkAktifCalisma+0x5b8>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d011      	beq.n	80054e8 <checkAktifCalisma+0x524>
 80054c4:	4b2a      	ldr	r3, [pc, #168]	; (8005570 <checkAktifCalisma+0x5ac>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00d      	beq.n	80054e8 <checkAktifCalisma+0x524>
 80054cc:	4b3a      	ldr	r3, [pc, #232]	; (80055b8 <checkAktifCalisma+0x5f4>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	f083 0301 	eor.w	r3, r3, #1
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d006      	beq.n	80054e8 <checkAktifCalisma+0x524>
			timer2=millis;
 80054da:	4b38      	ldr	r3, [pc, #224]	; (80055bc <checkAktifCalisma+0x5f8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a38      	ldr	r2, [pc, #224]	; (80055c0 <checkAktifCalisma+0x5fc>)
 80054e0:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80054e2:	4b35      	ldr	r3, [pc, #212]	; (80055b8 <checkAktifCalisma+0x5f4>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80054e8:	4b34      	ldr	r3, [pc, #208]	; (80055bc <checkAktifCalisma+0x5f8>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b34      	ldr	r3, [pc, #208]	; (80055c0 <checkAktifCalisma+0x5fc>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	4a34      	ldr	r2, [pc, #208]	; (80055c4 <checkAktifCalisma+0x600>)
 80054f4:	7812      	ldrb	r2, [r2, #0]
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d303      	bcc.n	8005502 <checkAktifCalisma+0x53e>
 80054fa:	4b2f      	ldr	r3, [pc, #188]	; (80055b8 <checkAktifCalisma+0x5f4>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d114      	bne.n	800552c <checkAktifCalisma+0x568>
 8005502:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <checkAktifCalisma+0x5b4>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	f083 0301 	eor.w	r3, r3, #1
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10d      	bne.n	800552c <checkAktifCalisma+0x568>
 8005510:	4b1a      	ldr	r3, [pc, #104]	; (800557c <checkAktifCalisma+0x5b8>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	f083 0301 	eor.w	r3, r3, #1
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <checkAktifCalisma+0x568>
 800551e:	4b14      	ldr	r3, [pc, #80]	; (8005570 <checkAktifCalisma+0x5ac>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	f083 0301 	eor.w	r3, r3, #1
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800552c:	2200      	movs	r2, #0
 800552e:	2102      	movs	r1, #2
 8005530:	4813      	ldr	r0, [pc, #76]	; (8005580 <checkAktifCalisma+0x5bc>)
 8005532:	f004 f88e 	bl	8009652 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005536:	4b17      	ldr	r3, [pc, #92]	; (8005594 <checkAktifCalisma+0x5d0>)
 8005538:	2200      	movs	r2, #0
 800553a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 800553c:	4b1e      	ldr	r3, [pc, #120]	; (80055b8 <checkAktifCalisma+0x5f4>)
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005542:	4b14      	ldr	r3, [pc, #80]	; (8005594 <checkAktifCalisma+0x5d0>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d040      	beq.n	80055cc <checkAktifCalisma+0x608>
 800554a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800554e:	480f      	ldr	r0, [pc, #60]	; (800558c <checkAktifCalisma+0x5c8>)
 8005550:	f004 f868 	bl	8009624 <HAL_GPIO_ReadPin>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d138      	bne.n	80055cc <checkAktifCalisma+0x608>
 800555a:	4b1b      	ldr	r3, [pc, #108]	; (80055c8 <checkAktifCalisma+0x604>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d034      	beq.n	80055cc <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005562:	2201      	movs	r2, #1
 8005564:	2101      	movs	r1, #1
 8005566:	4806      	ldr	r0, [pc, #24]	; (8005580 <checkAktifCalisma+0x5bc>)
 8005568:	f004 f873 	bl	8009652 <HAL_GPIO_WritePin>
 800556c:	e033      	b.n	80055d6 <checkAktifCalisma+0x612>
 800556e:	bf00      	nop
 8005570:	20000243 	.word	0x20000243
 8005574:	20000209 	.word	0x20000209
 8005578:	2000023e 	.word	0x2000023e
 800557c:	2000023f 	.word	0x2000023f
 8005580:	40010c00 	.word	0x40010c00
 8005584:	20000229 	.word	0x20000229
 8005588:	2000023d 	.word	0x2000023d
 800558c:	40011000 	.word	0x40011000
 8005590:	200001f2 	.word	0x200001f2
 8005594:	20000224 	.word	0x20000224
 8005598:	20000221 	.word	0x20000221
 800559c:	20000225 	.word	0x20000225
 80055a0:	20000222 	.word	0x20000222
 80055a4:	20000223 	.word	0x20000223
 80055a8:	20000226 	.word	0x20000226
 80055ac:	20000227 	.word	0x20000227
 80055b0:	2000022c 	.word	0x2000022c
 80055b4:	2000024d 	.word	0x2000024d
 80055b8:	2000021c 	.word	0x2000021c
 80055bc:	200001c8 	.word	0x200001c8
 80055c0:	200001d4 	.word	0x200001d4
 80055c4:	20000201 	.word	0x20000201
 80055c8:	200001f1 	.word	0x200001f1
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80055cc:	2200      	movs	r2, #0
 80055ce:	2101      	movs	r1, #1
 80055d0:	4836      	ldr	r0, [pc, #216]	; (80056ac <checkAktifCalisma+0x6e8>)
 80055d2:	f004 f83e 	bl	8009652 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80055d6:	4b36      	ldr	r3, [pc, #216]	; (80056b0 <checkAktifCalisma+0x6ec>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f040 8080 	bne.w	80056e0 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80055e0:	4b34      	ldr	r3, [pc, #208]	; (80056b4 <checkAktifCalisma+0x6f0>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d003      	beq.n	80055f0 <checkAktifCalisma+0x62c>
 80055e8:	4b32      	ldr	r3, [pc, #200]	; (80056b4 <checkAktifCalisma+0x6f0>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d177      	bne.n	80056e0 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80055f0:	4b31      	ldr	r3, [pc, #196]	; (80056b8 <checkAktifCalisma+0x6f4>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d073      	beq.n	80056e0 <checkAktifCalisma+0x71c>
 80055f8:	4b30      	ldr	r3, [pc, #192]	; (80056bc <checkAktifCalisma+0x6f8>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d06f      	beq.n	80056e0 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005604:	4829      	ldr	r0, [pc, #164]	; (80056ac <checkAktifCalisma+0x6e8>)
 8005606:	f004 f80d 	bl	8009624 <HAL_GPIO_ReadPin>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d167      	bne.n	80056e0 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005614:	482a      	ldr	r0, [pc, #168]	; (80056c0 <checkAktifCalisma+0x6fc>)
 8005616:	f004 f805 	bl	8009624 <HAL_GPIO_ReadPin>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <checkAktifCalisma+0x664>
 8005620:	4b28      	ldr	r3, [pc, #160]	; (80056c4 <checkAktifCalisma+0x700>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d15b      	bne.n	80056e0 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005628:	2140      	movs	r1, #64	; 0x40
 800562a:	4825      	ldr	r0, [pc, #148]	; (80056c0 <checkAktifCalisma+0x6fc>)
 800562c:	f003 fffa 	bl	8009624 <HAL_GPIO_ReadPin>
 8005630:	4603      	mov	r3, r0
 8005632:	2b01      	cmp	r3, #1
 8005634:	d10f      	bne.n	8005656 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800563a:	481c      	ldr	r0, [pc, #112]	; (80056ac <checkAktifCalisma+0x6e8>)
 800563c:	f003 fff2 	bl	8009624 <HAL_GPIO_ReadPin>
 8005640:	4603      	mov	r3, r0
 8005642:	2b01      	cmp	r3, #1
 8005644:	d107      	bne.n	8005656 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800564a:	4818      	ldr	r0, [pc, #96]	; (80056ac <checkAktifCalisma+0x6e8>)
 800564c:	f003 ffea 	bl	8009624 <HAL_GPIO_ReadPin>
 8005650:	4603      	mov	r3, r0
 8005652:	2b01      	cmp	r3, #1
 8005654:	d003      	beq.n	800565e <checkAktifCalisma+0x69a>
 8005656:	4b1c      	ldr	r3, [pc, #112]	; (80056c8 <checkAktifCalisma+0x704>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d040      	beq.n	80056e0 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800565e:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <checkAktifCalisma+0x708>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	f083 0301 	eor.w	r3, r3, #1
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d039      	beq.n	80056e0 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 800566c:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <checkAktifCalisma+0x70c>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	f083 0301 	eor.w	r3, r3, #1
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d032      	beq.n	80056e0 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 800567a:	4b16      	ldr	r3, [pc, #88]	; (80056d4 <checkAktifCalisma+0x710>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	f083 0301 	eor.w	r3, r3, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d02b      	beq.n	80056e0 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005688:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <checkAktifCalisma+0x714>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	f083 0301 	eor.w	r3, r3, #1
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d024      	beq.n	80056e0 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005696:	4b11      	ldr	r3, [pc, #68]	; (80056dc <checkAktifCalisma+0x718>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	f083 0301 	eor.w	r3, r3, #1
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01d      	beq.n	80056e0 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80056a4:	4b08      	ldr	r3, [pc, #32]	; (80056c8 <checkAktifCalisma+0x704>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	e01c      	b.n	80056e6 <checkAktifCalisma+0x722>
 80056ac:	40010c00 	.word	0x40010c00
 80056b0:	20000209 	.word	0x20000209
 80056b4:	200001fb 	.word	0x200001fb
 80056b8:	2000023e 	.word	0x2000023e
 80056bc:	2000023f 	.word	0x2000023f
 80056c0:	40011000 	.word	0x40011000
 80056c4:	200001fc 	.word	0x200001fc
 80056c8:	20000222 	.word	0x20000222
 80056cc:	20000221 	.word	0x20000221
 80056d0:	20000225 	.word	0x20000225
 80056d4:	20000224 	.word	0x20000224
 80056d8:	20000223 	.word	0x20000223
 80056dc:	20000227 	.word	0x20000227
		} else {
			devmotoryukaricalisiyor=0;
 80056e0:	4b64      	ldr	r3, [pc, #400]	; (8005874 <checkAktifCalisma+0x8b0>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80056e6:	4b63      	ldr	r3, [pc, #396]	; (8005874 <checkAktifCalisma+0x8b0>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d007      	beq.n	80056fe <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80056ee:	2201      	movs	r2, #1
 80056f0:	2120      	movs	r1, #32
 80056f2:	4861      	ldr	r0, [pc, #388]	; (8005878 <checkAktifCalisma+0x8b4>)
 80056f4:	f003 ffad 	bl	8009652 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80056f8:	4b60      	ldr	r3, [pc, #384]	; (800587c <checkAktifCalisma+0x8b8>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80056fe:	4b5f      	ldr	r3, [pc, #380]	; (800587c <checkAktifCalisma+0x8b8>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d025      	beq.n	8005752 <checkAktifCalisma+0x78e>
 8005706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800570a:	485d      	ldr	r0, [pc, #372]	; (8005880 <checkAktifCalisma+0x8bc>)
 800570c:	f003 ff8a 	bl	8009624 <HAL_GPIO_ReadPin>
 8005710:	4603      	mov	r3, r0
 8005712:	2b01      	cmp	r3, #1
 8005714:	d007      	beq.n	8005726 <checkAktifCalisma+0x762>
 8005716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800571a:	4857      	ldr	r0, [pc, #348]	; (8005878 <checkAktifCalisma+0x8b4>)
 800571c:	f003 ff82 	bl	8009624 <HAL_GPIO_ReadPin>
 8005720:	4603      	mov	r3, r0
 8005722:	2b01      	cmp	r3, #1
 8005724:	d115      	bne.n	8005752 <checkAktifCalisma+0x78e>
 8005726:	4b57      	ldr	r3, [pc, #348]	; (8005884 <checkAktifCalisma+0x8c0>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d011      	beq.n	8005752 <checkAktifCalisma+0x78e>
 800572e:	4b56      	ldr	r3, [pc, #344]	; (8005888 <checkAktifCalisma+0x8c4>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00d      	beq.n	8005752 <checkAktifCalisma+0x78e>
 8005736:	4b55      	ldr	r3, [pc, #340]	; (800588c <checkAktifCalisma+0x8c8>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	f083 0301 	eor.w	r3, r3, #1
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d006      	beq.n	8005752 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005744:	4b52      	ldr	r3, [pc, #328]	; (8005890 <checkAktifCalisma+0x8cc>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a52      	ldr	r2, [pc, #328]	; (8005894 <checkAktifCalisma+0x8d0>)
 800574a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 800574c:	4b4f      	ldr	r3, [pc, #316]	; (800588c <checkAktifCalisma+0x8c8>)
 800574e:	2201      	movs	r2, #1
 8005750:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005752:	4b4f      	ldr	r3, [pc, #316]	; (8005890 <checkAktifCalisma+0x8cc>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4b4f      	ldr	r3, [pc, #316]	; (8005894 <checkAktifCalisma+0x8d0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	4a4e      	ldr	r2, [pc, #312]	; (8005898 <checkAktifCalisma+0x8d4>)
 800575e:	7812      	ldrb	r2, [r2, #0]
 8005760:	4293      	cmp	r3, r2
 8005762:	d303      	bcc.n	800576c <checkAktifCalisma+0x7a8>
 8005764:	4b49      	ldr	r3, [pc, #292]	; (800588c <checkAktifCalisma+0x8c8>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10d      	bne.n	8005788 <checkAktifCalisma+0x7c4>
 800576c:	4b45      	ldr	r3, [pc, #276]	; (8005884 <checkAktifCalisma+0x8c0>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	f083 0301 	eor.w	r3, r3, #1
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <checkAktifCalisma+0x7c4>
 800577a:	4b43      	ldr	r3, [pc, #268]	; (8005888 <checkAktifCalisma+0x8c4>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	f083 0301 	eor.w	r3, r3, #1
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005788:	2200      	movs	r2, #0
 800578a:	2120      	movs	r1, #32
 800578c:	483a      	ldr	r0, [pc, #232]	; (8005878 <checkAktifCalisma+0x8b4>)
 800578e:	f003 ff60 	bl	8009652 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8005792:	4b3a      	ldr	r3, [pc, #232]	; (800587c <checkAktifCalisma+0x8b8>)
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005798:	4b3c      	ldr	r3, [pc, #240]	; (800588c <checkAktifCalisma+0x8c8>)
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800579e:	4b3f      	ldr	r3, [pc, #252]	; (800589c <checkAktifCalisma+0x8d8>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f040 8088 	bne.w	80058b8 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80057a8:	4b3d      	ldr	r3, [pc, #244]	; (80058a0 <checkAktifCalisma+0x8dc>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d003      	beq.n	80057b8 <checkAktifCalisma+0x7f4>
 80057b0:	4b3b      	ldr	r3, [pc, #236]	; (80058a0 <checkAktifCalisma+0x8dc>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d17f      	bne.n	80058b8 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80057b8:	4b32      	ldr	r3, [pc, #200]	; (8005884 <checkAktifCalisma+0x8c0>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d07b      	beq.n	80058b8 <checkAktifCalisma+0x8f4>
 80057c0:	4b31      	ldr	r3, [pc, #196]	; (8005888 <checkAktifCalisma+0x8c4>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d077      	beq.n	80058b8 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80057c8:	2140      	movs	r1, #64	; 0x40
 80057ca:	482b      	ldr	r0, [pc, #172]	; (8005878 <checkAktifCalisma+0x8b4>)
 80057cc:	f003 ff2a 	bl	8009624 <HAL_GPIO_ReadPin>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d170      	bne.n	80058b8 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80057d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057da:	4827      	ldr	r0, [pc, #156]	; (8005878 <checkAktifCalisma+0x8b4>)
 80057dc:	f003 ff22 	bl	8009624 <HAL_GPIO_ReadPin>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <checkAktifCalisma+0x82a>
 80057e6:	4b2f      	ldr	r3, [pc, #188]	; (80058a4 <checkAktifCalisma+0x8e0>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d164      	bne.n	80058b8 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80057ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057f2:	4823      	ldr	r0, [pc, #140]	; (8005880 <checkAktifCalisma+0x8bc>)
 80057f4:	f003 ff16 	bl	8009624 <HAL_GPIO_ReadPin>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10f      	bne.n	800581e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80057fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005802:	481f      	ldr	r0, [pc, #124]	; (8005880 <checkAktifCalisma+0x8bc>)
 8005804:	f003 ff0e 	bl	8009624 <HAL_GPIO_ReadPin>
 8005808:	4603      	mov	r3, r0
 800580a:	2b01      	cmp	r3, #1
 800580c:	d107      	bne.n	800581e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800580e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005812:	481b      	ldr	r0, [pc, #108]	; (8005880 <checkAktifCalisma+0x8bc>)
 8005814:	f003 ff06 	bl	8009624 <HAL_GPIO_ReadPin>
 8005818:	4603      	mov	r3, r0
 800581a:	2b01      	cmp	r3, #1
 800581c:	d003      	beq.n	8005826 <checkAktifCalisma+0x862>
 800581e:	4b22      	ldr	r3, [pc, #136]	; (80058a8 <checkAktifCalisma+0x8e4>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d048      	beq.n	80058b8 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005826:	4b21      	ldr	r3, [pc, #132]	; (80058ac <checkAktifCalisma+0x8e8>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	f083 0301 	eor.w	r3, r3, #1
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d041      	beq.n	80058b8 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005834:	4b1e      	ldr	r3, [pc, #120]	; (80058b0 <checkAktifCalisma+0x8ec>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	f083 0301 	eor.w	r3, r3, #1
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d03a      	beq.n	80058b8 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005842:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <checkAktifCalisma+0x8f0>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	f083 0301 	eor.w	r3, r3, #1
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d033      	beq.n	80058b8 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005850:	4b0a      	ldr	r3, [pc, #40]	; (800587c <checkAktifCalisma+0x8b8>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	f083 0301 	eor.w	r3, r3, #1
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d02c      	beq.n	80058b8 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800585e:	4b05      	ldr	r3, [pc, #20]	; (8005874 <checkAktifCalisma+0x8b0>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	f083 0301 	eor.w	r3, r3, #1
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d025      	beq.n	80058b8 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 800586c:	4b0e      	ldr	r3, [pc, #56]	; (80058a8 <checkAktifCalisma+0x8e4>)
 800586e:	2201      	movs	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	e024      	b.n	80058be <checkAktifCalisma+0x8fa>
 8005874:	20000222 	.word	0x20000222
 8005878:	40011000 	.word	0x40011000
 800587c:	20000226 	.word	0x20000226
 8005880:	40010c00 	.word	0x40010c00
 8005884:	2000023e 	.word	0x2000023e
 8005888:	2000023f 	.word	0x2000023f
 800588c:	2000021e 	.word	0x2000021e
 8005890:	200001c8 	.word	0x200001c8
 8005894:	200001d4 	.word	0x200001d4
 8005898:	20000202 	.word	0x20000202
 800589c:	20000209 	.word	0x20000209
 80058a0:	200001fb 	.word	0x200001fb
 80058a4:	200001fd 	.word	0x200001fd
 80058a8:	20000223 	.word	0x20000223
 80058ac:	20000221 	.word	0x20000221
 80058b0:	20000225 	.word	0x20000225
 80058b4:	20000224 	.word	0x20000224
		} else {
			devmotorasagicalisiyor=0;
 80058b8:	4b96      	ldr	r3, [pc, #600]	; (8005b14 <checkAktifCalisma+0xb50>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80058be:	4b95      	ldr	r3, [pc, #596]	; (8005b14 <checkAktifCalisma+0xb50>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80058c6:	2201      	movs	r2, #1
 80058c8:	2110      	movs	r1, #16
 80058ca:	4893      	ldr	r0, [pc, #588]	; (8005b18 <checkAktifCalisma+0xb54>)
 80058cc:	f003 fec1 	bl	8009652 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80058d0:	4b92      	ldr	r3, [pc, #584]	; (8005b1c <checkAktifCalisma+0xb58>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80058d6:	4b91      	ldr	r3, [pc, #580]	; (8005b1c <checkAktifCalisma+0xb58>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d024      	beq.n	8005928 <checkAktifCalisma+0x964>
 80058de:	2140      	movs	r1, #64	; 0x40
 80058e0:	488d      	ldr	r0, [pc, #564]	; (8005b18 <checkAktifCalisma+0xb54>)
 80058e2:	f003 fe9f 	bl	8009624 <HAL_GPIO_ReadPin>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d007      	beq.n	80058fc <checkAktifCalisma+0x938>
 80058ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058f0:	4889      	ldr	r0, [pc, #548]	; (8005b18 <checkAktifCalisma+0xb54>)
 80058f2:	f003 fe97 	bl	8009624 <HAL_GPIO_ReadPin>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d115      	bne.n	8005928 <checkAktifCalisma+0x964>
 80058fc:	4b88      	ldr	r3, [pc, #544]	; (8005b20 <checkAktifCalisma+0xb5c>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d011      	beq.n	8005928 <checkAktifCalisma+0x964>
 8005904:	4b87      	ldr	r3, [pc, #540]	; (8005b24 <checkAktifCalisma+0xb60>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00d      	beq.n	8005928 <checkAktifCalisma+0x964>
 800590c:	4b86      	ldr	r3, [pc, #536]	; (8005b28 <checkAktifCalisma+0xb64>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	f083 0301 	eor.w	r3, r3, #1
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d006      	beq.n	8005928 <checkAktifCalisma+0x964>
			timer2=millis;
 800591a:	4b84      	ldr	r3, [pc, #528]	; (8005b2c <checkAktifCalisma+0xb68>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a84      	ldr	r2, [pc, #528]	; (8005b30 <checkAktifCalisma+0xb6c>)
 8005920:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005922:	4b81      	ldr	r3, [pc, #516]	; (8005b28 <checkAktifCalisma+0xb64>)
 8005924:	2201      	movs	r2, #1
 8005926:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005928:	4b80      	ldr	r3, [pc, #512]	; (8005b2c <checkAktifCalisma+0xb68>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	4b80      	ldr	r3, [pc, #512]	; (8005b30 <checkAktifCalisma+0xb6c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	4a80      	ldr	r2, [pc, #512]	; (8005b34 <checkAktifCalisma+0xb70>)
 8005934:	7812      	ldrb	r2, [r2, #0]
 8005936:	4293      	cmp	r3, r2
 8005938:	d303      	bcc.n	8005942 <checkAktifCalisma+0x97e>
 800593a:	4b7b      	ldr	r3, [pc, #492]	; (8005b28 <checkAktifCalisma+0xb64>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10d      	bne.n	800595e <checkAktifCalisma+0x99a>
 8005942:	4b77      	ldr	r3, [pc, #476]	; (8005b20 <checkAktifCalisma+0xb5c>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	f083 0301 	eor.w	r3, r3, #1
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d106      	bne.n	800595e <checkAktifCalisma+0x99a>
 8005950:	4b74      	ldr	r3, [pc, #464]	; (8005b24 <checkAktifCalisma+0xb60>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f083 0301 	eor.w	r3, r3, #1
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800595e:	2200      	movs	r2, #0
 8005960:	2110      	movs	r1, #16
 8005962:	486d      	ldr	r0, [pc, #436]	; (8005b18 <checkAktifCalisma+0xb54>)
 8005964:	f003 fe75 	bl	8009652 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005968:	4b6c      	ldr	r3, [pc, #432]	; (8005b1c <checkAktifCalisma+0xb58>)
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800596e:	4b6e      	ldr	r3, [pc, #440]	; (8005b28 <checkAktifCalisma+0xb64>)
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005974:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005978:	486f      	ldr	r0, [pc, #444]	; (8005b38 <checkAktifCalisma+0xb74>)
 800597a:	f003 fe53 	bl	8009624 <HAL_GPIO_ReadPin>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d120      	bne.n	80059c6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005984:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005988:	486b      	ldr	r0, [pc, #428]	; (8005b38 <checkAktifCalisma+0xb74>)
 800598a:	f003 fe4b 	bl	8009624 <HAL_GPIO_ReadPin>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d118      	bne.n	80059c6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005994:	2104      	movs	r1, #4
 8005996:	4868      	ldr	r0, [pc, #416]	; (8005b38 <checkAktifCalisma+0xb74>)
 8005998:	f003 fe44 	bl	8009624 <HAL_GPIO_ReadPin>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d111      	bne.n	80059c6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80059a2:	2102      	movs	r1, #2
 80059a4:	4864      	ldr	r0, [pc, #400]	; (8005b38 <checkAktifCalisma+0xb74>)
 80059a6:	f003 fe3d 	bl	8009624 <HAL_GPIO_ReadPin>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80059b0:	2101      	movs	r1, #1
 80059b2:	4861      	ldr	r0, [pc, #388]	; (8005b38 <checkAktifCalisma+0xb74>)
 80059b4:	f003 fe36 	bl	8009624 <HAL_GPIO_ReadPin>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <checkAktifCalisma+0xa02>
			makineStop=1;
 80059be:	4b5f      	ldr	r3, [pc, #380]	; (8005b3c <checkAktifCalisma+0xb78>)
 80059c0:	2201      	movs	r2, #1
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	e002      	b.n	80059cc <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80059c6:	4b5d      	ldr	r3, [pc, #372]	; (8005b3c <checkAktifCalisma+0xb78>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059cc:	4b5c      	ldr	r3, [pc, #368]	; (8005b40 <checkAktifCalisma+0xb7c>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d144      	bne.n	8005a5e <checkAktifCalisma+0xa9a>
 80059d4:	4b5b      	ldr	r3, [pc, #364]	; (8005b44 <checkAktifCalisma+0xb80>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d003      	beq.n	80059e4 <checkAktifCalisma+0xa20>
 80059dc:	4b59      	ldr	r3, [pc, #356]	; (8005b44 <checkAktifCalisma+0xb80>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d13c      	bne.n	8005a5e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80059e4:	2180      	movs	r1, #128	; 0x80
 80059e6:	484c      	ldr	r0, [pc, #304]	; (8005b18 <checkAktifCalisma+0xb54>)
 80059e8:	f003 fe1c 	bl	8009624 <HAL_GPIO_ReadPin>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d103      	bne.n	80059fa <checkAktifCalisma+0xa36>
 80059f2:	4b55      	ldr	r3, [pc, #340]	; (8005b48 <checkAktifCalisma+0xb84>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <checkAktifCalisma+0xa4e>
 80059fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059fe:	484e      	ldr	r0, [pc, #312]	; (8005b38 <checkAktifCalisma+0xb74>)
 8005a00:	f003 fe10 	bl	8009624 <HAL_GPIO_ReadPin>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d129      	bne.n	8005a5e <checkAktifCalisma+0xa9a>
 8005a0a:	4b4f      	ldr	r3, [pc, #316]	; (8005b48 <checkAktifCalisma+0xb84>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d125      	bne.n	8005a5e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a12:	2104      	movs	r1, #4
 8005a14:	4840      	ldr	r0, [pc, #256]	; (8005b18 <checkAktifCalisma+0xb54>)
 8005a16:	f003 fe05 	bl	8009624 <HAL_GPIO_ReadPin>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d003      	beq.n	8005a28 <checkAktifCalisma+0xa64>
 8005a20:	4b4a      	ldr	r3, [pc, #296]	; (8005b4c <checkAktifCalisma+0xb88>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d11a      	bne.n	8005a5e <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a28:	2102      	movs	r1, #2
 8005a2a:	483b      	ldr	r0, [pc, #236]	; (8005b18 <checkAktifCalisma+0xb54>)
 8005a2c:	f003 fdfa 	bl	8009624 <HAL_GPIO_ReadPin>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d113      	bne.n	8005a5e <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005a36:	4b46      	ldr	r3, [pc, #280]	; (8005b50 <checkAktifCalisma+0xb8c>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	f083 0301 	eor.w	r3, r3, #1
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00c      	beq.n	8005a5e <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005a44:	4b3d      	ldr	r3, [pc, #244]	; (8005b3c <checkAktifCalisma+0xb78>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005a4c:	4b41      	ldr	r3, [pc, #260]	; (8005b54 <checkAktifCalisma+0xb90>)
 8005a4e:	2201      	movs	r2, #1
 8005a50:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005a52:	4b36      	ldr	r3, [pc, #216]	; (8005b2c <checkAktifCalisma+0xb68>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a40      	ldr	r2, [pc, #256]	; (8005b58 <checkAktifCalisma+0xb94>)
 8005a58:	6013      	str	r3, [r2, #0]
			bekle();
 8005a5a:	f7ff f901 	bl	8004c60 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005a5e:	4b33      	ldr	r3, [pc, #204]	; (8005b2c <checkAktifCalisma+0xb68>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b3d      	ldr	r3, [pc, #244]	; (8005b58 <checkAktifCalisma+0xb94>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	4a3c      	ldr	r2, [pc, #240]	; (8005b5c <checkAktifCalisma+0xb98>)
 8005a6a:	7812      	ldrb	r2, [r2, #0]
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d211      	bcs.n	8005a94 <checkAktifCalisma+0xad0>
 8005a70:	2104      	movs	r1, #4
 8005a72:	4829      	ldr	r0, [pc, #164]	; (8005b18 <checkAktifCalisma+0xb54>)
 8005a74:	f003 fdd6 	bl	8009624 <HAL_GPIO_ReadPin>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <checkAktifCalisma+0xad0>
 8005a7e:	4b33      	ldr	r3, [pc, #204]	; (8005b4c <checkAktifCalisma+0xb88>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d006      	beq.n	8005a94 <checkAktifCalisma+0xad0>
 8005a86:	4b2d      	ldr	r3, [pc, #180]	; (8005b3c <checkAktifCalisma+0xb78>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f083 0301 	eor.w	r3, r3, #1
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005a94:	4b2f      	ldr	r3, [pc, #188]	; (8005b54 <checkAktifCalisma+0xb90>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a9a:	4b29      	ldr	r3, [pc, #164]	; (8005b40 <checkAktifCalisma+0xb7c>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d160      	bne.n	8005b64 <checkAktifCalisma+0xba0>
 8005aa2:	4b28      	ldr	r3, [pc, #160]	; (8005b44 <checkAktifCalisma+0xb80>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d003      	beq.n	8005ab2 <checkAktifCalisma+0xaee>
 8005aaa:	4b26      	ldr	r3, [pc, #152]	; (8005b44 <checkAktifCalisma+0xb80>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d158      	bne.n	8005b64 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005ab2:	2104      	movs	r1, #4
 8005ab4:	4818      	ldr	r0, [pc, #96]	; (8005b18 <checkAktifCalisma+0xb54>)
 8005ab6:	f003 fdb5 	bl	8009624 <HAL_GPIO_ReadPin>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d003      	beq.n	8005ac8 <checkAktifCalisma+0xb04>
 8005ac0:	4b22      	ldr	r3, [pc, #136]	; (8005b4c <checkAktifCalisma+0xb88>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d14d      	bne.n	8005b64 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005ac8:	2102      	movs	r1, #2
 8005aca:	4813      	ldr	r0, [pc, #76]	; (8005b18 <checkAktifCalisma+0xb54>)
 8005acc:	f003 fdaa 	bl	8009624 <HAL_GPIO_ReadPin>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d146      	bne.n	8005b64 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005ad6:	2180      	movs	r1, #128	; 0x80
 8005ad8:	480f      	ldr	r0, [pc, #60]	; (8005b18 <checkAktifCalisma+0xb54>)
 8005ada:	f003 fda3 	bl	8009624 <HAL_GPIO_ReadPin>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d103      	bne.n	8005aec <checkAktifCalisma+0xb28>
 8005ae4:	4b18      	ldr	r3, [pc, #96]	; (8005b48 <checkAktifCalisma+0xb84>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00b      	beq.n	8005b04 <checkAktifCalisma+0xb40>
 8005aec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005af0:	4811      	ldr	r0, [pc, #68]	; (8005b38 <checkAktifCalisma+0xb74>)
 8005af2:	f003 fd97 	bl	8009624 <HAL_GPIO_ReadPin>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d133      	bne.n	8005b64 <checkAktifCalisma+0xba0>
 8005afc:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <checkAktifCalisma+0xb84>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d12f      	bne.n	8005b64 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005b04:	4b0d      	ldr	r3, [pc, #52]	; (8005b3c <checkAktifCalisma+0xb78>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d02b      	beq.n	8005b64 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005b0c:	4b14      	ldr	r3, [pc, #80]	; (8005b60 <checkAktifCalisma+0xb9c>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	e02a      	b.n	8005b6a <checkAktifCalisma+0xba6>
 8005b14:	20000223 	.word	0x20000223
 8005b18:	40011000 	.word	0x40011000
 8005b1c:	20000227 	.word	0x20000227
 8005b20:	2000023e 	.word	0x2000023e
 8005b24:	2000023f 	.word	0x2000023f
 8005b28:	2000021f 	.word	0x2000021f
 8005b2c:	200001c8 	.word	0x200001c8
 8005b30:	200001d4 	.word	0x200001d4
 8005b34:	20000202 	.word	0x20000202
 8005b38:	40010c00 	.word	0x40010c00
 8005b3c:	2000022e 	.word	0x2000022e
 8005b40:	200001f5 	.word	0x200001f5
 8005b44:	200001f4 	.word	0x200001f4
 8005b48:	200001f8 	.word	0x200001f8
 8005b4c:	200001f2 	.word	0x200001f2
 8005b50:	2000021b 	.word	0x2000021b
 8005b54:	2000022f 	.word	0x2000022f
 8005b58:	200001cc 	.word	0x200001cc
 8005b5c:	20000205 	.word	0x20000205
 8005b60:	20000230 	.word	0x20000230
		} else {
			kapi1butonkontrol=0;
 8005b64:	4b8b      	ldr	r3, [pc, #556]	; (8005d94 <checkAktifCalisma+0xdd0>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b6a:	4b8b      	ldr	r3, [pc, #556]	; (8005d98 <checkAktifCalisma+0xdd4>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d121      	bne.n	8005bb6 <checkAktifCalisma+0xbf2>
 8005b72:	4b8a      	ldr	r3, [pc, #552]	; (8005d9c <checkAktifCalisma+0xdd8>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d003      	beq.n	8005b82 <checkAktifCalisma+0xbbe>
 8005b7a:	4b88      	ldr	r3, [pc, #544]	; (8005d9c <checkAktifCalisma+0xdd8>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d119      	bne.n	8005bb6 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005b82:	2104      	movs	r1, #4
 8005b84:	4886      	ldr	r0, [pc, #536]	; (8005da0 <checkAktifCalisma+0xddc>)
 8005b86:	f003 fd4d 	bl	8009624 <HAL_GPIO_ReadPin>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d003      	beq.n	8005b98 <checkAktifCalisma+0xbd4>
 8005b90:	4b84      	ldr	r3, [pc, #528]	; (8005da4 <checkAktifCalisma+0xde0>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10e      	bne.n	8005bb6 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005b98:	2102      	movs	r1, #2
 8005b9a:	4881      	ldr	r0, [pc, #516]	; (8005da0 <checkAktifCalisma+0xddc>)
 8005b9c:	f003 fd42 	bl	8009624 <HAL_GPIO_ReadPin>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d107      	bne.n	8005bb6 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005ba6:	4b80      	ldr	r3, [pc, #512]	; (8005da8 <checkAktifCalisma+0xde4>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005bae:	4b7f      	ldr	r3, [pc, #508]	; (8005dac <checkAktifCalisma+0xde8>)
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	701a      	strb	r2, [r3, #0]
 8005bb4:	e002      	b.n	8005bbc <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005bb6:	4b7d      	ldr	r3, [pc, #500]	; (8005dac <checkAktifCalisma+0xde8>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005bbc:	4b75      	ldr	r3, [pc, #468]	; (8005d94 <checkAktifCalisma+0xdd0>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d107      	bne.n	8005bd4 <checkAktifCalisma+0xc10>
 8005bc4:	4b79      	ldr	r3, [pc, #484]	; (8005dac <checkAktifCalisma+0xde8>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d103      	bne.n	8005bd4 <checkAktifCalisma+0xc10>
 8005bcc:	4b78      	ldr	r3, [pc, #480]	; (8005db0 <checkAktifCalisma+0xdec>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	2180      	movs	r1, #128	; 0x80
 8005bd8:	4876      	ldr	r0, [pc, #472]	; (8005db4 <checkAktifCalisma+0xdf0>)
 8005bda:	f003 fd3a 	bl	8009652 <HAL_GPIO_WritePin>
 8005bde:	e004      	b.n	8005bea <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005be0:	2200      	movs	r2, #0
 8005be2:	2180      	movs	r1, #128	; 0x80
 8005be4:	4873      	ldr	r0, [pc, #460]	; (8005db4 <checkAktifCalisma+0xdf0>)
 8005be6:	f003 fd34 	bl	8009652 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005bea:	4b73      	ldr	r3, [pc, #460]	; (8005db8 <checkAktifCalisma+0xdf4>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d141      	bne.n	8005c76 <checkAktifCalisma+0xcb2>
 8005bf2:	4b6a      	ldr	r3, [pc, #424]	; (8005d9c <checkAktifCalisma+0xdd8>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d003      	beq.n	8005c02 <checkAktifCalisma+0xc3e>
 8005bfa:	4b68      	ldr	r3, [pc, #416]	; (8005d9c <checkAktifCalisma+0xdd8>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d139      	bne.n	8005c76 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c06:	4866      	ldr	r0, [pc, #408]	; (8005da0 <checkAktifCalisma+0xddc>)
 8005c08:	f003 fd0c 	bl	8009624 <HAL_GPIO_ReadPin>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d103      	bne.n	8005c1a <checkAktifCalisma+0xc56>
 8005c12:	4b6a      	ldr	r3, [pc, #424]	; (8005dbc <checkAktifCalisma+0xdf8>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <checkAktifCalisma+0xc6e>
 8005c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c1e:	4868      	ldr	r0, [pc, #416]	; (8005dc0 <checkAktifCalisma+0xdfc>)
 8005c20:	f003 fd00 	bl	8009624 <HAL_GPIO_ReadPin>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d125      	bne.n	8005c76 <checkAktifCalisma+0xcb2>
 8005c2a:	4b64      	ldr	r3, [pc, #400]	; (8005dbc <checkAktifCalisma+0xdf8>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d121      	bne.n	8005c76 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c32:	2102      	movs	r1, #2
 8005c34:	485a      	ldr	r0, [pc, #360]	; (8005da0 <checkAktifCalisma+0xddc>)
 8005c36:	f003 fcf5 	bl	8009624 <HAL_GPIO_ReadPin>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d11a      	bne.n	8005c76 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005c40:	2104      	movs	r1, #4
 8005c42:	4857      	ldr	r0, [pc, #348]	; (8005da0 <checkAktifCalisma+0xddc>)
 8005c44:	f003 fcee 	bl	8009624 <HAL_GPIO_ReadPin>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d113      	bne.n	8005c76 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005c4e:	4b56      	ldr	r3, [pc, #344]	; (8005da8 <checkAktifCalisma+0xde4>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00f      	beq.n	8005c76 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005c56:	4b5b      	ldr	r3, [pc, #364]	; (8005dc4 <checkAktifCalisma+0xe00>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	f083 0301 	eor.w	r3, r3, #1
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005c64:	4b58      	ldr	r3, [pc, #352]	; (8005dc8 <checkAktifCalisma+0xe04>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005c6a:	4b58      	ldr	r3, [pc, #352]	; (8005dcc <checkAktifCalisma+0xe08>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a58      	ldr	r2, [pc, #352]	; (8005dd0 <checkAktifCalisma+0xe0c>)
 8005c70:	6013      	str	r3, [r2, #0]
			bekle();
 8005c72:	f7fe fff5 	bl	8004c60 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005c76:	4b55      	ldr	r3, [pc, #340]	; (8005dcc <checkAktifCalisma+0xe08>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4b55      	ldr	r3, [pc, #340]	; (8005dd0 <checkAktifCalisma+0xe0c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	4a54      	ldr	r2, [pc, #336]	; (8005dd4 <checkAktifCalisma+0xe10>)
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d20d      	bcs.n	8005ca4 <checkAktifCalisma+0xce0>
 8005c88:	2102      	movs	r1, #2
 8005c8a:	4845      	ldr	r0, [pc, #276]	; (8005da0 <checkAktifCalisma+0xddc>)
 8005c8c:	f003 fcca 	bl	8009624 <HAL_GPIO_ReadPin>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d006      	beq.n	8005ca4 <checkAktifCalisma+0xce0>
 8005c96:	4b44      	ldr	r3, [pc, #272]	; (8005da8 <checkAktifCalisma+0xde4>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	f083 0301 	eor.w	r3, r3, #1
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005ca4:	4b48      	ldr	r3, [pc, #288]	; (8005dc8 <checkAktifCalisma+0xe04>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005caa:	4b43      	ldr	r3, [pc, #268]	; (8005db8 <checkAktifCalisma+0xdf4>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d135      	bne.n	8005d1e <checkAktifCalisma+0xd5a>
 8005cb2:	4b3a      	ldr	r3, [pc, #232]	; (8005d9c <checkAktifCalisma+0xdd8>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d003      	beq.n	8005cc2 <checkAktifCalisma+0xcfe>
 8005cba:	4b38      	ldr	r3, [pc, #224]	; (8005d9c <checkAktifCalisma+0xdd8>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d12d      	bne.n	8005d1e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005cc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cc6:	4836      	ldr	r0, [pc, #216]	; (8005da0 <checkAktifCalisma+0xddc>)
 8005cc8:	f003 fcac 	bl	8009624 <HAL_GPIO_ReadPin>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <checkAktifCalisma+0xd16>
 8005cd2:	4b3a      	ldr	r3, [pc, #232]	; (8005dbc <checkAktifCalisma+0xdf8>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00b      	beq.n	8005cf2 <checkAktifCalisma+0xd2e>
 8005cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cde:	4838      	ldr	r0, [pc, #224]	; (8005dc0 <checkAktifCalisma+0xdfc>)
 8005ce0:	f003 fca0 	bl	8009624 <HAL_GPIO_ReadPin>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d119      	bne.n	8005d1e <checkAktifCalisma+0xd5a>
 8005cea:	4b34      	ldr	r3, [pc, #208]	; (8005dbc <checkAktifCalisma+0xdf8>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d115      	bne.n	8005d1e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005cf2:	2102      	movs	r1, #2
 8005cf4:	482a      	ldr	r0, [pc, #168]	; (8005da0 <checkAktifCalisma+0xddc>)
 8005cf6:	f003 fc95 	bl	8009624 <HAL_GPIO_ReadPin>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d10e      	bne.n	8005d1e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005d00:	2104      	movs	r1, #4
 8005d02:	4827      	ldr	r0, [pc, #156]	; (8005da0 <checkAktifCalisma+0xddc>)
 8005d04:	f003 fc8e 	bl	8009624 <HAL_GPIO_ReadPin>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d107      	bne.n	8005d1e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005d0e:	4b26      	ldr	r3, [pc, #152]	; (8005da8 <checkAktifCalisma+0xde4>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005d16:	4b30      	ldr	r3, [pc, #192]	; (8005dd8 <checkAktifCalisma+0xe14>)
 8005d18:	2201      	movs	r2, #1
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	e002      	b.n	8005d24 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005d1e:	4b2e      	ldr	r3, [pc, #184]	; (8005dd8 <checkAktifCalisma+0xe14>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005d24:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <checkAktifCalisma+0xdf4>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d11d      	bne.n	8005d68 <checkAktifCalisma+0xda4>
 8005d2c:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <checkAktifCalisma+0xdd8>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d003      	beq.n	8005d3c <checkAktifCalisma+0xd78>
 8005d34:	4b19      	ldr	r3, [pc, #100]	; (8005d9c <checkAktifCalisma+0xdd8>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d115      	bne.n	8005d68 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	4818      	ldr	r0, [pc, #96]	; (8005da0 <checkAktifCalisma+0xddc>)
 8005d40:	f003 fc70 	bl	8009624 <HAL_GPIO_ReadPin>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d10e      	bne.n	8005d68 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005d4a:	2104      	movs	r1, #4
 8005d4c:	4814      	ldr	r0, [pc, #80]	; (8005da0 <checkAktifCalisma+0xddc>)
 8005d4e:	f003 fc69 	bl	8009624 <HAL_GPIO_ReadPin>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d107      	bne.n	8005d68 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005d58:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <checkAktifCalisma+0xde4>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005d60:	4b1e      	ldr	r3, [pc, #120]	; (8005ddc <checkAktifCalisma+0xe18>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	e002      	b.n	8005d6e <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005d68:	4b1c      	ldr	r3, [pc, #112]	; (8005ddc <checkAktifCalisma+0xe18>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <checkAktifCalisma+0xe14>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d107      	bne.n	8005d86 <checkAktifCalisma+0xdc2>
 8005d76:	4b19      	ldr	r3, [pc, #100]	; (8005ddc <checkAktifCalisma+0xe18>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <checkAktifCalisma+0xdc2>
 8005d7e:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <checkAktifCalisma+0xe04>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d02c      	beq.n	8005de0 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005d86:	2201      	movs	r2, #1
 8005d88:	2140      	movs	r1, #64	; 0x40
 8005d8a:	480a      	ldr	r0, [pc, #40]	; (8005db4 <checkAktifCalisma+0xdf0>)
 8005d8c:	f003 fc61 	bl	8009652 <HAL_GPIO_WritePin>
 8005d90:	e02b      	b.n	8005dea <checkAktifCalisma+0xe26>
 8005d92:	bf00      	nop
 8005d94:	20000230 	.word	0x20000230
 8005d98:	200001f5 	.word	0x200001f5
 8005d9c:	200001f4 	.word	0x200001f4
 8005da0:	40011000 	.word	0x40011000
 8005da4:	200001f2 	.word	0x200001f2
 8005da8:	2000022e 	.word	0x2000022e
 8005dac:	20000231 	.word	0x20000231
 8005db0:	2000022f 	.word	0x2000022f
 8005db4:	40010800 	.word	0x40010800
 8005db8:	200001f6 	.word	0x200001f6
 8005dbc:	200001f8 	.word	0x200001f8
 8005dc0:	40010c00 	.word	0x40010c00
 8005dc4:	2000021b 	.word	0x2000021b
 8005dc8:	20000232 	.word	0x20000232
 8005dcc:	200001c8 	.word	0x200001c8
 8005dd0:	200001cc 	.word	0x200001cc
 8005dd4:	20000206 	.word	0x20000206
 8005dd8:	20000233 	.word	0x20000233
 8005ddc:	20000234 	.word	0x20000234
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005de0:	2200      	movs	r2, #0
 8005de2:	2140      	movs	r1, #64	; 0x40
 8005de4:	488d      	ldr	r0, [pc, #564]	; (800601c <checkAktifCalisma+0x1058>)
 8005de6:	f003 fc34 	bl	8009652 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005dea:	4b8d      	ldr	r3, [pc, #564]	; (8006020 <checkAktifCalisma+0x105c>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <checkAktifCalisma+0xe36>
 8005df2:	4b8b      	ldr	r3, [pc, #556]	; (8006020 <checkAktifCalisma+0x105c>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d115      	bne.n	8005e26 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005dfa:	2104      	movs	r1, #4
 8005dfc:	4889      	ldr	r0, [pc, #548]	; (8006024 <checkAktifCalisma+0x1060>)
 8005dfe:	f003 fc11 	bl	8009624 <HAL_GPIO_ReadPin>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d003      	beq.n	8005e10 <checkAktifCalisma+0xe4c>
 8005e08:	4b87      	ldr	r3, [pc, #540]	; (8006028 <checkAktifCalisma+0x1064>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005e10:	2102      	movs	r1, #2
 8005e12:	4884      	ldr	r0, [pc, #528]	; (8006024 <checkAktifCalisma+0x1060>)
 8005e14:	f003 fc06 	bl	8009624 <HAL_GPIO_ReadPin>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d103      	bne.n	8005e26 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005e1e:	4b83      	ldr	r3, [pc, #524]	; (800602c <checkAktifCalisma+0x1068>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	e002      	b.n	8005e2c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005e26:	4b81      	ldr	r3, [pc, #516]	; (800602c <checkAktifCalisma+0x1068>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005e2c:	4b7c      	ldr	r3, [pc, #496]	; (8006020 <checkAktifCalisma+0x105c>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d003      	beq.n	8005e3c <checkAktifCalisma+0xe78>
 8005e34:	4b7a      	ldr	r3, [pc, #488]	; (8006020 <checkAktifCalisma+0x105c>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d111      	bne.n	8005e60 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005e3c:	2102      	movs	r1, #2
 8005e3e:	4879      	ldr	r0, [pc, #484]	; (8006024 <checkAktifCalisma+0x1060>)
 8005e40:	f003 fbf0 	bl	8009624 <HAL_GPIO_ReadPin>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d10a      	bne.n	8005e60 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005e4a:	2104      	movs	r1, #4
 8005e4c:	4875      	ldr	r0, [pc, #468]	; (8006024 <checkAktifCalisma+0x1060>)
 8005e4e:	f003 fbe9 	bl	8009624 <HAL_GPIO_ReadPin>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d103      	bne.n	8005e60 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005e58:	4b75      	ldr	r3, [pc, #468]	; (8006030 <checkAktifCalisma+0x106c>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	e002      	b.n	8005e66 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005e60:	4b73      	ldr	r3, [pc, #460]	; (8006030 <checkAktifCalisma+0x106c>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005e66:	4b71      	ldr	r3, [pc, #452]	; (800602c <checkAktifCalisma+0x1068>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00f      	beq.n	8005e8e <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005e6e:	4b71      	ldr	r3, [pc, #452]	; (8006034 <checkAktifCalisma+0x1070>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d10b      	bne.n	8005e8e <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005e76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e7a:	486f      	ldr	r0, [pc, #444]	; (8006038 <checkAktifCalisma+0x1074>)
 8005e7c:	f003 fbd2 	bl	8009624 <HAL_GPIO_ReadPin>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005e86:	4b6d      	ldr	r3, [pc, #436]	; (800603c <checkAktifCalisma+0x1078>)
 8005e88:	2201      	movs	r2, #1
 8005e8a:	701a      	strb	r2, [r3, #0]
 8005e8c:	e002      	b.n	8005e94 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005e8e:	4b6b      	ldr	r3, [pc, #428]	; (800603c <checkAktifCalisma+0x1078>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005e94:	4b66      	ldr	r3, [pc, #408]	; (8006030 <checkAktifCalisma+0x106c>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00f      	beq.n	8005ebc <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005e9c:	4b65      	ldr	r3, [pc, #404]	; (8006034 <checkAktifCalisma+0x1070>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d10b      	bne.n	8005ebc <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005ea4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ea8:	4863      	ldr	r0, [pc, #396]	; (8006038 <checkAktifCalisma+0x1074>)
 8005eaa:	f003 fbbb 	bl	8009624 <HAL_GPIO_ReadPin>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d103      	bne.n	8005ebc <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005eb4:	4b62      	ldr	r3, [pc, #392]	; (8006040 <checkAktifCalisma+0x107c>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	e002      	b.n	8005ec2 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005ebc:	4b60      	ldr	r3, [pc, #384]	; (8006040 <checkAktifCalisma+0x107c>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005ec2:	4b60      	ldr	r3, [pc, #384]	; (8006044 <checkAktifCalisma+0x1080>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d137      	bne.n	8005f3a <checkAktifCalisma+0xf76>
 8005eca:	4b5f      	ldr	r3, [pc, #380]	; (8006048 <checkAktifCalisma+0x1084>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d003      	beq.n	8005eda <checkAktifCalisma+0xf16>
 8005ed2:	4b5d      	ldr	r3, [pc, #372]	; (8006048 <checkAktifCalisma+0x1084>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d12f      	bne.n	8005f3a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005eda:	4b54      	ldr	r3, [pc, #336]	; (800602c <checkAktifCalisma+0x1068>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d103      	bne.n	8005eea <checkAktifCalisma+0xf26>
 8005ee2:	4b53      	ldr	r3, [pc, #332]	; (8006030 <checkAktifCalisma+0x106c>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d027      	beq.n	8005f3a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005eea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005eee:	484d      	ldr	r0, [pc, #308]	; (8006024 <checkAktifCalisma+0x1060>)
 8005ef0:	f003 fb98 	bl	8009624 <HAL_GPIO_ReadPin>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d103      	bne.n	8005f02 <checkAktifCalisma+0xf3e>
 8005efa:	4b4e      	ldr	r3, [pc, #312]	; (8006034 <checkAktifCalisma+0x1070>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d007      	beq.n	8005f12 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005f02:	4b4e      	ldr	r3, [pc, #312]	; (800603c <checkAktifCalisma+0x1078>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d103      	bne.n	8005f12 <checkAktifCalisma+0xf4e>
 8005f0a:	4b4d      	ldr	r3, [pc, #308]	; (8006040 <checkAktifCalisma+0x107c>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d013      	beq.n	8005f3a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005f12:	4b4e      	ldr	r3, [pc, #312]	; (800604c <checkAktifCalisma+0x1088>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00f      	beq.n	8005f3a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005f1a:	4b4d      	ldr	r3, [pc, #308]	; (8006050 <checkAktifCalisma+0x108c>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	f083 0301 	eor.w	r3, r3, #1
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d008      	beq.n	8005f3a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005f28:	4b4a      	ldr	r3, [pc, #296]	; (8006054 <checkAktifCalisma+0x1090>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005f2e:	4b4a      	ldr	r3, [pc, #296]	; (8006058 <checkAktifCalisma+0x1094>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a4a      	ldr	r2, [pc, #296]	; (800605c <checkAktifCalisma+0x1098>)
 8005f34:	6013      	str	r3, [r2, #0]
			bekle();
 8005f36:	f7fe fe93 	bl	8004c60 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005f3a:	4b47      	ldr	r3, [pc, #284]	; (8006058 <checkAktifCalisma+0x1094>)
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4b47      	ldr	r3, [pc, #284]	; (800605c <checkAktifCalisma+0x1098>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	4a46      	ldr	r2, [pc, #280]	; (8006060 <checkAktifCalisma+0x109c>)
 8005f46:	7812      	ldrb	r2, [r2, #0]
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d214      	bcs.n	8005f76 <checkAktifCalisma+0xfb2>
 8005f4c:	4b37      	ldr	r3, [pc, #220]	; (800602c <checkAktifCalisma+0x1068>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	f083 0301 	eor.w	r3, r3, #1
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d006      	beq.n	8005f68 <checkAktifCalisma+0xfa4>
 8005f5a:	4b35      	ldr	r3, [pc, #212]	; (8006030 <checkAktifCalisma+0x106c>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	f083 0301 	eor.w	r3, r3, #1
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d106      	bne.n	8005f76 <checkAktifCalisma+0xfb2>
 8005f68:	4b38      	ldr	r3, [pc, #224]	; (800604c <checkAktifCalisma+0x1088>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	f083 0301 	eor.w	r3, r3, #1
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005f76:	4b37      	ldr	r3, [pc, #220]	; (8006054 <checkAktifCalisma+0x1090>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005f7c:	4b31      	ldr	r3, [pc, #196]	; (8006044 <checkAktifCalisma+0x1080>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d12b      	bne.n	8005fdc <checkAktifCalisma+0x1018>
 8005f84:	4b30      	ldr	r3, [pc, #192]	; (8006048 <checkAktifCalisma+0x1084>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d003      	beq.n	8005f94 <checkAktifCalisma+0xfd0>
 8005f8c:	4b2e      	ldr	r3, [pc, #184]	; (8006048 <checkAktifCalisma+0x1084>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d123      	bne.n	8005fdc <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005f94:	4b25      	ldr	r3, [pc, #148]	; (800602c <checkAktifCalisma+0x1068>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d103      	bne.n	8005fa4 <checkAktifCalisma+0xfe0>
 8005f9c:	4b24      	ldr	r3, [pc, #144]	; (8006030 <checkAktifCalisma+0x106c>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01b      	beq.n	8005fdc <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fa8:	481e      	ldr	r0, [pc, #120]	; (8006024 <checkAktifCalisma+0x1060>)
 8005faa:	f003 fb3b 	bl	8009624 <HAL_GPIO_ReadPin>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d103      	bne.n	8005fbc <checkAktifCalisma+0xff8>
 8005fb4:	4b1f      	ldr	r3, [pc, #124]	; (8006034 <checkAktifCalisma+0x1070>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d007      	beq.n	8005fcc <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005fbc:	4b1f      	ldr	r3, [pc, #124]	; (800603c <checkAktifCalisma+0x1078>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d103      	bne.n	8005fcc <checkAktifCalisma+0x1008>
 8005fc4:	4b1e      	ldr	r3, [pc, #120]	; (8006040 <checkAktifCalisma+0x107c>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d007      	beq.n	8005fdc <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005fcc:	4b1f      	ldr	r3, [pc, #124]	; (800604c <checkAktifCalisma+0x1088>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005fd4:	4b23      	ldr	r3, [pc, #140]	; (8006064 <checkAktifCalisma+0x10a0>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	e002      	b.n	8005fe2 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005fdc:	4b21      	ldr	r3, [pc, #132]	; (8006064 <checkAktifCalisma+0x10a0>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005fe2:	4b18      	ldr	r3, [pc, #96]	; (8006044 <checkAktifCalisma+0x1080>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d140      	bne.n	800606c <checkAktifCalisma+0x10a8>
 8005fea:	4b17      	ldr	r3, [pc, #92]	; (8006048 <checkAktifCalisma+0x1084>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d003      	beq.n	8005ffa <checkAktifCalisma+0x1036>
 8005ff2:	4b15      	ldr	r3, [pc, #84]	; (8006048 <checkAktifCalisma+0x1084>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d138      	bne.n	800606c <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	; (800602c <checkAktifCalisma+0x1068>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d103      	bne.n	800600a <checkAktifCalisma+0x1046>
 8006002:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <checkAktifCalisma+0x106c>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d030      	beq.n	800606c <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 800600a:	4b10      	ldr	r3, [pc, #64]	; (800604c <checkAktifCalisma+0x1088>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d02c      	beq.n	800606c <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8006012:	4b15      	ldr	r3, [pc, #84]	; (8006068 <checkAktifCalisma+0x10a4>)
 8006014:	2201      	movs	r2, #1
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	e02b      	b.n	8006072 <checkAktifCalisma+0x10ae>
 800601a:	bf00      	nop
 800601c:	40010800 	.word	0x40010800
 8006020:	200001f9 	.word	0x200001f9
 8006024:	40011000 	.word	0x40011000
 8006028:	200001f2 	.word	0x200001f2
 800602c:	20000238 	.word	0x20000238
 8006030:	20000239 	.word	0x20000239
 8006034:	200001f8 	.word	0x200001f8
 8006038:	40010c00 	.word	0x40010c00
 800603c:	20000248 	.word	0x20000248
 8006040:	20000249 	.word	0x20000249
 8006044:	200001f7 	.word	0x200001f7
 8006048:	200001f4 	.word	0x200001f4
 800604c:	2000022e 	.word	0x2000022e
 8006050:	2000021b 	.word	0x2000021b
 8006054:	20000235 	.word	0x20000235
 8006058:	200001c8 	.word	0x200001c8
 800605c:	200001cc 	.word	0x200001cc
 8006060:	20000207 	.word	0x20000207
 8006064:	20000236 	.word	0x20000236
 8006068:	20000237 	.word	0x20000237
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 800606c:	4b8b      	ldr	r3, [pc, #556]	; (800629c <checkAktifCalisma+0x12d8>)
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8006072:	4b8b      	ldr	r3, [pc, #556]	; (80062a0 <checkAktifCalisma+0x12dc>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d107      	bne.n	800608a <checkAktifCalisma+0x10c6>
 800607a:	4b8a      	ldr	r3, [pc, #552]	; (80062a4 <checkAktifCalisma+0x12e0>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d103      	bne.n	800608a <checkAktifCalisma+0x10c6>
 8006082:	4b86      	ldr	r3, [pc, #536]	; (800629c <checkAktifCalisma+0x12d8>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800608a:	2201      	movs	r2, #1
 800608c:	2120      	movs	r1, #32
 800608e:	4886      	ldr	r0, [pc, #536]	; (80062a8 <checkAktifCalisma+0x12e4>)
 8006090:	f003 fadf 	bl	8009652 <HAL_GPIO_WritePin>
 8006094:	e004      	b.n	80060a0 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006096:	2200      	movs	r2, #0
 8006098:	2120      	movs	r1, #32
 800609a:	4883      	ldr	r0, [pc, #524]	; (80062a8 <checkAktifCalisma+0x12e4>)
 800609c:	f003 fad9 	bl	8009652 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80060a0:	4b82      	ldr	r3, [pc, #520]	; (80062ac <checkAktifCalisma+0x12e8>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00e      	beq.n	80060c6 <checkAktifCalisma+0x1102>
 80060a8:	2102      	movs	r1, #2
 80060aa:	4881      	ldr	r0, [pc, #516]	; (80062b0 <checkAktifCalisma+0x12ec>)
 80060ac:	f003 faba 	bl	8009624 <HAL_GPIO_ReadPin>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d107      	bne.n	80060c6 <checkAktifCalisma+0x1102>
 80060b6:	4b7f      	ldr	r3, [pc, #508]	; (80062b4 <checkAktifCalisma+0x12f0>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d103      	bne.n	80060c6 <checkAktifCalisma+0x1102>
 80060be:	4b7e      	ldr	r3, [pc, #504]	; (80062b8 <checkAktifCalisma+0x12f4>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d112      	bne.n	80060ec <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80060c6:	4b7d      	ldr	r3, [pc, #500]	; (80062bc <checkAktifCalisma+0x12f8>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d066      	beq.n	800619c <checkAktifCalisma+0x11d8>
 80060ce:	2104      	movs	r1, #4
 80060d0:	4877      	ldr	r0, [pc, #476]	; (80062b0 <checkAktifCalisma+0x12ec>)
 80060d2:	f003 faa7 	bl	8009624 <HAL_GPIO_ReadPin>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d15f      	bne.n	800619c <checkAktifCalisma+0x11d8>
 80060dc:	4b75      	ldr	r3, [pc, #468]	; (80062b4 <checkAktifCalisma+0x12f0>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d05b      	beq.n	800619c <checkAktifCalisma+0x11d8>
 80060e4:	4b74      	ldr	r3, [pc, #464]	; (80062b8 <checkAktifCalisma+0x12f4>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d057      	beq.n	800619c <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 80060ec:	4b74      	ldr	r3, [pc, #464]	; (80062c0 <checkAktifCalisma+0x12fc>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	4b72      	ldr	r3, [pc, #456]	; (80062c0 <checkAktifCalisma+0x12fc>)
 80060f6:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 80060f8:	4b71      	ldr	r3, [pc, #452]	; (80062c0 <checkAktifCalisma+0x12fc>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b09      	cmp	r3, #9
 80060fe:	d908      	bls.n	8006112 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8006100:	4b6f      	ldr	r3, [pc, #444]	; (80062c0 <checkAktifCalisma+0x12fc>)
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8006106:	4b6f      	ldr	r3, [pc, #444]	; (80062c4 <checkAktifCalisma+0x1300>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	3301      	adds	r3, #1
 800610c:	b2da      	uxtb	r2, r3
 800610e:	4b6d      	ldr	r3, [pc, #436]	; (80062c4 <checkAktifCalisma+0x1300>)
 8006110:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8006112:	4b6c      	ldr	r3, [pc, #432]	; (80062c4 <checkAktifCalisma+0x1300>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b09      	cmp	r3, #9
 8006118:	d908      	bls.n	800612c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 800611a:	4b6a      	ldr	r3, [pc, #424]	; (80062c4 <checkAktifCalisma+0x1300>)
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8006120:	4b69      	ldr	r3, [pc, #420]	; (80062c8 <checkAktifCalisma+0x1304>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	3301      	adds	r3, #1
 8006126:	b2da      	uxtb	r2, r3
 8006128:	4b67      	ldr	r3, [pc, #412]	; (80062c8 <checkAktifCalisma+0x1304>)
 800612a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 800612c:	4b66      	ldr	r3, [pc, #408]	; (80062c8 <checkAktifCalisma+0x1304>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b09      	cmp	r3, #9
 8006132:	d908      	bls.n	8006146 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8006134:	4b64      	ldr	r3, [pc, #400]	; (80062c8 <checkAktifCalisma+0x1304>)
 8006136:	2200      	movs	r2, #0
 8006138:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 800613a:	4b64      	ldr	r3, [pc, #400]	; (80062cc <checkAktifCalisma+0x1308>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	3301      	adds	r3, #1
 8006140:	b2da      	uxtb	r2, r3
 8006142:	4b62      	ldr	r3, [pc, #392]	; (80062cc <checkAktifCalisma+0x1308>)
 8006144:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8006146:	4b61      	ldr	r3, [pc, #388]	; (80062cc <checkAktifCalisma+0x1308>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b09      	cmp	r3, #9
 800614c:	d908      	bls.n	8006160 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800614e:	4b5f      	ldr	r3, [pc, #380]	; (80062cc <checkAktifCalisma+0x1308>)
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8006154:	4b5e      	ldr	r3, [pc, #376]	; (80062d0 <checkAktifCalisma+0x130c>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	3301      	adds	r3, #1
 800615a:	b2da      	uxtb	r2, r3
 800615c:	4b5c      	ldr	r3, [pc, #368]	; (80062d0 <checkAktifCalisma+0x130c>)
 800615e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006160:	4b5b      	ldr	r3, [pc, #364]	; (80062d0 <checkAktifCalisma+0x130c>)
 8006162:	781a      	ldrb	r2, [r3, #0]
 8006164:	4b5b      	ldr	r3, [pc, #364]	; (80062d4 <checkAktifCalisma+0x1310>)
 8006166:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800616a:	4b58      	ldr	r3, [pc, #352]	; (80062cc <checkAktifCalisma+0x1308>)
 800616c:	781a      	ldrb	r2, [r3, #0]
 800616e:	4b59      	ldr	r3, [pc, #356]	; (80062d4 <checkAktifCalisma+0x1310>)
 8006170:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006172:	4b55      	ldr	r3, [pc, #340]	; (80062c8 <checkAktifCalisma+0x1304>)
 8006174:	781a      	ldrb	r2, [r3, #0]
 8006176:	4b57      	ldr	r3, [pc, #348]	; (80062d4 <checkAktifCalisma+0x1310>)
 8006178:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800617a:	4b52      	ldr	r3, [pc, #328]	; (80062c4 <checkAktifCalisma+0x1300>)
 800617c:	781a      	ldrb	r2, [r3, #0]
 800617e:	4b55      	ldr	r3, [pc, #340]	; (80062d4 <checkAktifCalisma+0x1310>)
 8006180:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006182:	4b4f      	ldr	r3, [pc, #316]	; (80062c0 <checkAktifCalisma+0x12fc>)
 8006184:	781a      	ldrb	r2, [r3, #0]
 8006186:	4b53      	ldr	r3, [pc, #332]	; (80062d4 <checkAktifCalisma+0x1310>)
 8006188:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 800618a:	4b53      	ldr	r3, [pc, #332]	; (80062d8 <checkAktifCalisma+0x1314>)
 800618c:	2201      	movs	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006190:	4b46      	ldr	r3, [pc, #280]	; (80062ac <checkAktifCalisma+0x12e8>)
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8006196:	4b49      	ldr	r3, [pc, #292]	; (80062bc <checkAktifCalisma+0x12f8>)
 8006198:	2200      	movs	r2, #0
 800619a:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 800619c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061a0:	484e      	ldr	r0, [pc, #312]	; (80062dc <checkAktifCalisma+0x1318>)
 80061a2:	f003 fa3f 	bl	8009624 <HAL_GPIO_ReadPin>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d016      	beq.n	80061da <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80061ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061b0:	484a      	ldr	r0, [pc, #296]	; (80062dc <checkAktifCalisma+0x1318>)
 80061b2:	f003 fa37 	bl	8009624 <HAL_GPIO_ReadPin>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00e      	beq.n	80061da <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80061bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061c0:	4846      	ldr	r0, [pc, #280]	; (80062dc <checkAktifCalisma+0x1318>)
 80061c2:	f003 fa2f 	bl	8009624 <HAL_GPIO_ReadPin>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d006      	beq.n	80061da <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80061cc:	2140      	movs	r1, #64	; 0x40
 80061ce:	4838      	ldr	r0, [pc, #224]	; (80062b0 <checkAktifCalisma+0x12ec>)
 80061d0:	f003 fa28 	bl	8009624 <HAL_GPIO_ReadPin>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d103      	bne.n	80061e2 <checkAktifCalisma+0x121e>
			startBasili=1;
 80061da:	4b41      	ldr	r3, [pc, #260]	; (80062e0 <checkAktifCalisma+0x131c>)
 80061dc:	2201      	movs	r2, #1
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	e002      	b.n	80061e8 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 80061e2:	4b3f      	ldr	r3, [pc, #252]	; (80062e0 <checkAktifCalisma+0x131c>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80061e8:	4b3d      	ldr	r3, [pc, #244]	; (80062e0 <checkAktifCalisma+0x131c>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d016      	beq.n	800621e <checkAktifCalisma+0x125a>
 80061f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061f4:	4839      	ldr	r0, [pc, #228]	; (80062dc <checkAktifCalisma+0x1318>)
 80061f6:	f003 fa15 	bl	8009624 <HAL_GPIO_ReadPin>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d10e      	bne.n	800621e <checkAktifCalisma+0x125a>
			hataVar=1;
 8006200:	4b38      	ldr	r3, [pc, #224]	; (80062e4 <checkAktifCalisma+0x1320>)
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8006206:	2001      	movs	r0, #1
 8006208:	f7fa fd68 	bl	8000cdc <hataKoduLcdGoster>
			hata2EEPROM(1);
 800620c:	2001      	movs	r0, #1
 800620e:	f7fa fd0d 	bl	8000c2c <hata2EEPROM>
			convertAndSendData();
 8006212:	f001 fc43 	bl	8007a9c <convertAndSendData>
			acilstophatasi=1;
 8006216:	4b34      	ldr	r3, [pc, #208]	; (80062e8 <checkAktifCalisma+0x1324>)
 8006218:	2201      	movs	r2, #1
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	e018      	b.n	8006250 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800621e:	4b32      	ldr	r3, [pc, #200]	; (80062e8 <checkAktifCalisma+0x1324>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d014      	beq.n	8006250 <checkAktifCalisma+0x128c>
 8006226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800622a:	482c      	ldr	r0, [pc, #176]	; (80062dc <checkAktifCalisma+0x1318>)
 800622c:	f003 f9fa 	bl	8009624 <HAL_GPIO_ReadPin>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10c      	bne.n	8006250 <checkAktifCalisma+0x128c>
 8006236:	4b2a      	ldr	r3, [pc, #168]	; (80062e0 <checkAktifCalisma+0x131c>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	f083 0301 	eor.w	r3, r3, #1
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006244:	4b28      	ldr	r3, [pc, #160]	; (80062e8 <checkAktifCalisma+0x1324>)
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 800624a:	2001      	movs	r0, #1
 800624c:	f7fe fcb4 	bl	8004bb8 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006250:	4b26      	ldr	r3, [pc, #152]	; (80062ec <checkAktifCalisma+0x1328>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f083 0301 	eor.w	r3, r3, #1
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d04e      	beq.n	80062fc <checkAktifCalisma+0x1338>
 800625e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006262:	481e      	ldr	r0, [pc, #120]	; (80062dc <checkAktifCalisma+0x1318>)
 8006264:	f003 f9de 	bl	8009624 <HAL_GPIO_ReadPin>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <checkAktifCalisma+0x12b2>
 800626e:	4b20      	ldr	r3, [pc, #128]	; (80062f0 <checkAktifCalisma+0x132c>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d042      	beq.n	80062fc <checkAktifCalisma+0x1338>
 8006276:	4b1f      	ldr	r3, [pc, #124]	; (80062f4 <checkAktifCalisma+0x1330>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d13e      	bne.n	80062fc <checkAktifCalisma+0x1338>
			hataVar=1;
 800627e:	4b19      	ldr	r3, [pc, #100]	; (80062e4 <checkAktifCalisma+0x1320>)
 8006280:	2201      	movs	r2, #1
 8006282:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006284:	2002      	movs	r0, #2
 8006286:	f7fa fd29 	bl	8000cdc <hataKoduLcdGoster>
			hata2EEPROM(2);
 800628a:	2002      	movs	r0, #2
 800628c:	f7fa fcce 	bl	8000c2c <hata2EEPROM>
			convertAndSendData();
 8006290:	f001 fc04 	bl	8007a9c <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006294:	4b18      	ldr	r3, [pc, #96]	; (80062f8 <checkAktifCalisma+0x1334>)
 8006296:	2201      	movs	r2, #1
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	e047      	b.n	800632c <checkAktifCalisma+0x1368>
 800629c:	20000237 	.word	0x20000237
 80062a0:	20000236 	.word	0x20000236
 80062a4:	20000235 	.word	0x20000235
 80062a8:	40010800 	.word	0x40010800
 80062ac:	2000022b 	.word	0x2000022b
 80062b0:	40011000 	.word	0x40011000
 80062b4:	200001f2 	.word	0x200001f2
 80062b8:	2000022e 	.word	0x2000022e
 80062bc:	2000022c 	.word	0x2000022c
 80062c0:	200001e9 	.word	0x200001e9
 80062c4:	200001ea 	.word	0x200001ea
 80062c8:	20000000 	.word	0x20000000
 80062cc:	20000001 	.word	0x20000001
 80062d0:	200001eb 	.word	0x200001eb
 80062d4:	20000118 	.word	0x20000118
 80062d8:	20000218 	.word	0x20000218
 80062dc:	40010c00 	.word	0x40010c00
 80062e0:	2000023a 	.word	0x2000023a
 80062e4:	20000241 	.word	0x20000241
 80062e8:	2000023c 	.word	0x2000023c
 80062ec:	20000243 	.word	0x20000243
 80062f0:	2000024d 	.word	0x2000024d
 80062f4:	200001f0 	.word	0x200001f0
 80062f8:	2000023d 	.word	0x2000023d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80062fc:	4b9b      	ldr	r3, [pc, #620]	; (800656c <checkAktifCalisma+0x15a8>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d013      	beq.n	800632c <checkAktifCalisma+0x1368>
 8006304:	4b9a      	ldr	r3, [pc, #616]	; (8006570 <checkAktifCalisma+0x15ac>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00f      	beq.n	800632c <checkAktifCalisma+0x1368>
 800630c:	4b99      	ldr	r3, [pc, #612]	; (8006574 <checkAktifCalisma+0x15b0>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	f083 0301 	eor.w	r3, r3, #1
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d008      	beq.n	800632c <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 800631a:	4b94      	ldr	r3, [pc, #592]	; (800656c <checkAktifCalisma+0x15a8>)
 800631c:	2200      	movs	r2, #0
 800631e:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006320:	4b95      	ldr	r3, [pc, #596]	; (8006578 <checkAktifCalisma+0x15b4>)
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006326:	2002      	movs	r0, #2
 8006328:	f7fe fc46 	bl	8004bb8 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 800632c:	4b93      	ldr	r3, [pc, #588]	; (800657c <checkAktifCalisma+0x15b8>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d11e      	bne.n	8006372 <checkAktifCalisma+0x13ae>
 8006334:	4b92      	ldr	r3, [pc, #584]	; (8006580 <checkAktifCalisma+0x15bc>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d11a      	bne.n	8006372 <checkAktifCalisma+0x13ae>
 800633c:	4b91      	ldr	r3, [pc, #580]	; (8006584 <checkAktifCalisma+0x15c0>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d016      	beq.n	8006372 <checkAktifCalisma+0x13ae>
 8006344:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006348:	488f      	ldr	r0, [pc, #572]	; (8006588 <checkAktifCalisma+0x15c4>)
 800634a:	f003 f96b 	bl	8009624 <HAL_GPIO_ReadPin>
 800634e:	4603      	mov	r3, r0
 8006350:	2b01      	cmp	r3, #1
 8006352:	d10e      	bne.n	8006372 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006354:	4b8d      	ldr	r3, [pc, #564]	; (800658c <checkAktifCalisma+0x15c8>)
 8006356:	2201      	movs	r2, #1
 8006358:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800635a:	2003      	movs	r0, #3
 800635c:	f7fa fcbe 	bl	8000cdc <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006360:	2003      	movs	r0, #3
 8006362:	f7fa fc63 	bl	8000c2c <hata2EEPROM>
			convertAndSendData();
 8006366:	f001 fb99 	bl	8007a9c <convertAndSendData>
			basinchatasi=1;
 800636a:	4b89      	ldr	r3, [pc, #548]	; (8006590 <checkAktifCalisma+0x15cc>)
 800636c:	2201      	movs	r2, #1
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	e015      	b.n	800639e <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006372:	4b87      	ldr	r3, [pc, #540]	; (8006590 <checkAktifCalisma+0x15cc>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d011      	beq.n	800639e <checkAktifCalisma+0x13da>
 800637a:	4b80      	ldr	r3, [pc, #512]	; (800657c <checkAktifCalisma+0x15b8>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d10d      	bne.n	800639e <checkAktifCalisma+0x13da>
 8006382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006386:	4883      	ldr	r0, [pc, #524]	; (8006594 <checkAktifCalisma+0x15d0>)
 8006388:	f003 f94c 	bl	8009624 <HAL_GPIO_ReadPin>
 800638c:	4603      	mov	r3, r0
 800638e:	2b01      	cmp	r3, #1
 8006390:	d105      	bne.n	800639e <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8006392:	4b7f      	ldr	r3, [pc, #508]	; (8006590 <checkAktifCalisma+0x15cc>)
 8006394:	2200      	movs	r2, #0
 8006396:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006398:	2003      	movs	r0, #3
 800639a:	f7fe fc0d 	bl	8004bb8 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800639e:	4b7e      	ldr	r3, [pc, #504]	; (8006598 <checkAktifCalisma+0x15d4>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <checkAktifCalisma+0x13ea>
 80063a6:	4b7d      	ldr	r3, [pc, #500]	; (800659c <checkAktifCalisma+0x15d8>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d01e      	beq.n	80063ec <checkAktifCalisma+0x1428>
 80063ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063b2:	487b      	ldr	r0, [pc, #492]	; (80065a0 <checkAktifCalisma+0x15dc>)
 80063b4:	f003 f936 	bl	8009624 <HAL_GPIO_ReadPin>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d116      	bne.n	80063ec <checkAktifCalisma+0x1428>
 80063be:	4b79      	ldr	r3, [pc, #484]	; (80065a4 <checkAktifCalisma+0x15e0>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d003      	beq.n	80063ce <checkAktifCalisma+0x140a>
 80063c6:	4b77      	ldr	r3, [pc, #476]	; (80065a4 <checkAktifCalisma+0x15e0>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d10e      	bne.n	80063ec <checkAktifCalisma+0x1428>
			hataVar=1;
 80063ce:	4b6f      	ldr	r3, [pc, #444]	; (800658c <checkAktifCalisma+0x15c8>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80063d4:	2004      	movs	r0, #4
 80063d6:	f7fa fc81 	bl	8000cdc <hataKoduLcdGoster>
			hata2EEPROM(4);
 80063da:	2004      	movs	r0, #4
 80063dc:	f7fa fc26 	bl	8000c2c <hata2EEPROM>
			convertAndSendData();
 80063e0:	f001 fb5c 	bl	8007a9c <convertAndSendData>
			katkapisivicihatasi=1;
 80063e4:	4b70      	ldr	r3, [pc, #448]	; (80065a8 <checkAktifCalisma+0x15e4>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e01f      	b.n	800642c <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80063ec:	4b6e      	ldr	r3, [pc, #440]	; (80065a8 <checkAktifCalisma+0x15e4>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01b      	beq.n	800642c <checkAktifCalisma+0x1468>
 80063f4:	4b6d      	ldr	r3, [pc, #436]	; (80065ac <checkAktifCalisma+0x15e8>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d017      	beq.n	800642c <checkAktifCalisma+0x1468>
 80063fc:	4b66      	ldr	r3, [pc, #408]	; (8006598 <checkAktifCalisma+0x15d4>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	f083 0301 	eor.w	r3, r3, #1
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d010      	beq.n	800642c <checkAktifCalisma+0x1468>
 800640a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800640e:	4864      	ldr	r0, [pc, #400]	; (80065a0 <checkAktifCalisma+0x15dc>)
 8006410:	f003 f908 	bl	8009624 <HAL_GPIO_ReadPin>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d108      	bne.n	800642c <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800641a:	4b63      	ldr	r3, [pc, #396]	; (80065a8 <checkAktifCalisma+0x15e4>)
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006420:	4b5e      	ldr	r3, [pc, #376]	; (800659c <checkAktifCalisma+0x15d8>)
 8006422:	2200      	movs	r2, #0
 8006424:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006426:	2004      	movs	r0, #4
 8006428:	f7fe fbc6 	bl	8004bb8 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800642c:	4b5a      	ldr	r3, [pc, #360]	; (8006598 <checkAktifCalisma+0x15d4>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d103      	bne.n	800643c <checkAktifCalisma+0x1478>
 8006434:	4b5e      	ldr	r3, [pc, #376]	; (80065b0 <checkAktifCalisma+0x15ec>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01e      	beq.n	800647a <checkAktifCalisma+0x14b6>
 800643c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006440:	4857      	ldr	r0, [pc, #348]	; (80065a0 <checkAktifCalisma+0x15dc>)
 8006442:	f003 f8ef 	bl	8009624 <HAL_GPIO_ReadPin>
 8006446:	4603      	mov	r3, r0
 8006448:	2b01      	cmp	r3, #1
 800644a:	d116      	bne.n	800647a <checkAktifCalisma+0x14b6>
 800644c:	4b55      	ldr	r3, [pc, #340]	; (80065a4 <checkAktifCalisma+0x15e0>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d003      	beq.n	800645c <checkAktifCalisma+0x1498>
 8006454:	4b53      	ldr	r3, [pc, #332]	; (80065a4 <checkAktifCalisma+0x15e0>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b03      	cmp	r3, #3
 800645a:	d10e      	bne.n	800647a <checkAktifCalisma+0x14b6>
			hataVar=1;
 800645c:	4b4b      	ldr	r3, [pc, #300]	; (800658c <checkAktifCalisma+0x15c8>)
 800645e:	2201      	movs	r2, #1
 8006460:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006462:	2005      	movs	r0, #5
 8006464:	f7fa fc3a 	bl	8000cdc <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006468:	2005      	movs	r0, #5
 800646a:	f7fa fbdf 	bl	8000c2c <hata2EEPROM>
			convertAndSendData();
 800646e:	f001 fb15 	bl	8007a9c <convertAndSendData>
			tablakapisivicihatasi=1;
 8006472:	4b50      	ldr	r3, [pc, #320]	; (80065b4 <checkAktifCalisma+0x15f0>)
 8006474:	2201      	movs	r2, #1
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	e023      	b.n	80064c2 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 800647a:	4b4e      	ldr	r3, [pc, #312]	; (80065b4 <checkAktifCalisma+0x15f0>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d01f      	beq.n	80064c2 <checkAktifCalisma+0x14fe>
 8006482:	4b4a      	ldr	r3, [pc, #296]	; (80065ac <checkAktifCalisma+0x15e8>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d01b      	beq.n	80064c2 <checkAktifCalisma+0x14fe>
 800648a:	4b43      	ldr	r3, [pc, #268]	; (8006598 <checkAktifCalisma+0x15d4>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	f083 0301 	eor.w	r3, r3, #1
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d014      	beq.n	80064c2 <checkAktifCalisma+0x14fe>
 8006498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800649c:	4840      	ldr	r0, [pc, #256]	; (80065a0 <checkAktifCalisma+0x15dc>)
 800649e:	f003 f8c1 	bl	8009624 <HAL_GPIO_ReadPin>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10c      	bne.n	80064c2 <checkAktifCalisma+0x14fe>
 80064a8:	4b40      	ldr	r3, [pc, #256]	; (80065ac <checkAktifCalisma+0x15e8>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d008      	beq.n	80064c2 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80064b0:	4b40      	ldr	r3, [pc, #256]	; (80065b4 <checkAktifCalisma+0x15f0>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80064b6:	4b3e      	ldr	r3, [pc, #248]	; (80065b0 <checkAktifCalisma+0x15ec>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80064bc:	2005      	movs	r0, #5
 80064be:	f7fe fb7b 	bl	8004bb8 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80064c2:	4b30      	ldr	r3, [pc, #192]	; (8006584 <checkAktifCalisma+0x15c0>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d107      	bne.n	80064da <checkAktifCalisma+0x1516>
 80064ca:	4b2a      	ldr	r3, [pc, #168]	; (8006574 <checkAktifCalisma+0x15b0>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d103      	bne.n	80064da <checkAktifCalisma+0x1516>
 80064d2:	4b39      	ldr	r3, [pc, #228]	; (80065b8 <checkAktifCalisma+0x15f4>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d016      	beq.n	8006508 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80064da:	4b38      	ldr	r3, [pc, #224]	; (80065bc <checkAktifCalisma+0x15f8>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4b38      	ldr	r3, [pc, #224]	; (80065c0 <checkAktifCalisma+0x15fc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	4a37      	ldr	r2, [pc, #220]	; (80065c4 <checkAktifCalisma+0x1600>)
 80064e6:	7812      	ldrb	r2, [r2, #0]
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d30d      	bcc.n	8006508 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80064ec:	4b27      	ldr	r3, [pc, #156]	; (800658c <checkAktifCalisma+0x15c8>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80064f2:	2006      	movs	r0, #6
 80064f4:	f7fa fbf2 	bl	8000cdc <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80064f8:	2006      	movs	r0, #6
 80064fa:	f7fa fb97 	bl	8000c2c <hata2EEPROM>
			  	convertAndSendData();
 80064fe:	f001 facd 	bl	8007a9c <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006502:	4b31      	ldr	r3, [pc, #196]	; (80065c8 <checkAktifCalisma+0x1604>)
 8006504:	2201      	movs	r2, #1
 8006506:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006508:	4b2f      	ldr	r3, [pc, #188]	; (80065c8 <checkAktifCalisma+0x1604>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d013      	beq.n	8006538 <checkAktifCalisma+0x1574>
 8006510:	2108      	movs	r1, #8
 8006512:	4823      	ldr	r0, [pc, #140]	; (80065a0 <checkAktifCalisma+0x15dc>)
 8006514:	f003 f886 	bl	8009624 <HAL_GPIO_ReadPin>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00c      	beq.n	8006538 <checkAktifCalisma+0x1574>
 800651e:	4b1e      	ldr	r3, [pc, #120]	; (8006598 <checkAktifCalisma+0x15d4>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	f083 0301 	eor.w	r3, r3, #1
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 800652c:	4b26      	ldr	r3, [pc, #152]	; (80065c8 <checkAktifCalisma+0x1604>)
 800652e:	2200      	movs	r2, #0
 8006530:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006532:	2006      	movs	r0, #6
 8006534:	f7fe fb40 	bl	8004bb8 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006538:	4b24      	ldr	r3, [pc, #144]	; (80065cc <checkAktifCalisma+0x1608>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10b      	bne.n	8006558 <checkAktifCalisma+0x1594>
 8006540:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <checkAktifCalisma+0x15b0>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d107      	bne.n	8006558 <checkAktifCalisma+0x1594>
 8006548:	4b21      	ldr	r3, [pc, #132]	; (80065d0 <checkAktifCalisma+0x160c>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d103      	bne.n	8006558 <checkAktifCalisma+0x1594>
 8006550:	4b19      	ldr	r3, [pc, #100]	; (80065b8 <checkAktifCalisma+0x15f4>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d03f      	beq.n	80065d8 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006558:	4b1e      	ldr	r3, [pc, #120]	; (80065d4 <checkAktifCalisma+0x1610>)
 800655a:	2200      	movs	r2, #0
 800655c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800655e:	4b0f      	ldr	r3, [pc, #60]	; (800659c <checkAktifCalisma+0x15d8>)
 8006560:	2201      	movs	r2, #1
 8006562:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006564:	4b12      	ldr	r3, [pc, #72]	; (80065b0 <checkAktifCalisma+0x15ec>)
 8006566:	2201      	movs	r2, #1
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	e03c      	b.n	80065e6 <checkAktifCalisma+0x1622>
 800656c:	2000023d 	.word	0x2000023d
 8006570:	20000243 	.word	0x20000243
 8006574:	20000224 	.word	0x20000224
 8006578:	2000024d 	.word	0x2000024d
 800657c:	200001ef 	.word	0x200001ef
 8006580:	200001f3 	.word	0x200001f3
 8006584:	20000240 	.word	0x20000240
 8006588:	40011000 	.word	0x40011000
 800658c:	20000241 	.word	0x20000241
 8006590:	2000024a 	.word	0x2000024a
 8006594:	40010c00 	.word	0x40010c00
 8006598:	2000023a 	.word	0x2000023a
 800659c:	2000024e 	.word	0x2000024e
 80065a0:	40010800 	.word	0x40010800
 80065a4:	200001f4 	.word	0x200001f4
 80065a8:	2000024b 	.word	0x2000024b
 80065ac:	2000022e 	.word	0x2000022e
 80065b0:	2000024f 	.word	0x2000024f
 80065b4:	2000024c 	.word	0x2000024c
 80065b8:	20000223 	.word	0x20000223
 80065bc:	200001c8 	.word	0x200001c8
 80065c0:	200001dc 	.word	0x200001dc
 80065c4:	20000204 	.word	0x20000204
 80065c8:	2000023b 	.word	0x2000023b
 80065cc:	20000221 	.word	0x20000221
 80065d0:	20000222 	.word	0x20000222
 80065d4:	20000242 	.word	0x20000242
		} else {
			makineCalisiyor=1;
 80065d8:	4b1e      	ldr	r3, [pc, #120]	; (8006654 <checkAktifCalisma+0x1690>)
 80065da:	2201      	movs	r2, #1
 80065dc:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80065de:	4b1e      	ldr	r3, [pc, #120]	; (8006658 <checkAktifCalisma+0x1694>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1e      	ldr	r2, [pc, #120]	; (800665c <checkAktifCalisma+0x1698>)
 80065e4:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80065e6:	4b1e      	ldr	r3, [pc, #120]	; (8006660 <checkAktifCalisma+0x169c>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d02f      	beq.n	800664e <checkAktifCalisma+0x168a>
 80065ee:	4b1d      	ldr	r3, [pc, #116]	; (8006664 <checkAktifCalisma+0x16a0>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	f083 0301 	eor.w	r3, r3, #1
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d028      	beq.n	800664e <checkAktifCalisma+0x168a>
 80065fc:	4b1a      	ldr	r3, [pc, #104]	; (8006668 <checkAktifCalisma+0x16a4>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f083 0301 	eor.w	r3, r3, #1
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d021      	beq.n	800664e <checkAktifCalisma+0x168a>
 800660a:	4b18      	ldr	r3, [pc, #96]	; (800666c <checkAktifCalisma+0x16a8>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	f083 0301 	eor.w	r3, r3, #1
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d01a      	beq.n	800664e <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006618:	4b15      	ldr	r3, [pc, #84]	; (8006670 <checkAktifCalisma+0x16ac>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	f083 0301 	eor.w	r3, r3, #1
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d013      	beq.n	800664e <checkAktifCalisma+0x168a>
 8006626:	4b13      	ldr	r3, [pc, #76]	; (8006674 <checkAktifCalisma+0x16b0>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	f083 0301 	eor.w	r3, r3, #1
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00c      	beq.n	800664e <checkAktifCalisma+0x168a>
 8006634:	4b10      	ldr	r3, [pc, #64]	; (8006678 <checkAktifCalisma+0x16b4>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	f083 0301 	eor.w	r3, r3, #1
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d005      	beq.n	800664e <checkAktifCalisma+0x168a>
			hataVar=0;
 8006642:	4b07      	ldr	r3, [pc, #28]	; (8006660 <checkAktifCalisma+0x169c>)
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006648:	2007      	movs	r0, #7
 800664a:	f7fe fab5 	bl	8004bb8 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800664e:	bf00      	nop
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000242 	.word	0x20000242
 8006658:	200001c8 	.word	0x200001c8
 800665c:	200001dc 	.word	0x200001dc
 8006660:	20000241 	.word	0x20000241
 8006664:	2000023c 	.word	0x2000023c
 8006668:	2000023d 	.word	0x2000023d
 800666c:	2000024a 	.word	0x2000024a
 8006670:	2000024b 	.word	0x2000024b
 8006674:	2000024c 	.word	0x2000024c
 8006678:	2000023b 	.word	0x2000023b

0800667c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006680:	4b8b      	ldr	r3, [pc, #556]	; (80068b0 <checkDemoModCalisma+0x234>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b01      	cmp	r3, #1
 8006686:	f040 8229 	bne.w	8006adc <checkDemoModCalisma+0x460>
 800668a:	4b8a      	ldr	r3, [pc, #552]	; (80068b4 <checkDemoModCalisma+0x238>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 8224 	beq.w	8006adc <checkDemoModCalisma+0x460>
 8006694:	4b88      	ldr	r3, [pc, #544]	; (80068b8 <checkDemoModCalisma+0x23c>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f040 821f 	bne.w	8006adc <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800669e:	2102      	movs	r1, #2
 80066a0:	4886      	ldr	r0, [pc, #536]	; (80068bc <checkDemoModCalisma+0x240>)
 80066a2:	f002 ffbf 	bl	8009624 <HAL_GPIO_ReadPin>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d11d      	bne.n	80066e8 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80066ac:	4b84      	ldr	r3, [pc, #528]	; (80068c0 <checkDemoModCalisma+0x244>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	f083 0301 	eor.w	r3, r3, #1
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d016      	beq.n	80066e8 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80066ba:	4b82      	ldr	r3, [pc, #520]	; (80068c4 <checkDemoModCalisma+0x248>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	f083 0301 	eor.w	r3, r3, #1
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00f      	beq.n	80066e8 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80066c8:	4b7f      	ldr	r3, [pc, #508]	; (80068c8 <checkDemoModCalisma+0x24c>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	f083 0301 	eor.w	r3, r3, #1
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d008      	beq.n	80066e8 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80066d6:	2201      	movs	r2, #1
 80066d8:	2104      	movs	r1, #4
 80066da:	487c      	ldr	r0, [pc, #496]	; (80068cc <checkDemoModCalisma+0x250>)
 80066dc:	f002 ffb9 	bl	8009652 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80066e0:	4b7b      	ldr	r3, [pc, #492]	; (80068d0 <checkDemoModCalisma+0x254>)
 80066e2:	2201      	movs	r2, #1
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	e00e      	b.n	8006706 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80066e8:	2102      	movs	r1, #2
 80066ea:	4874      	ldr	r0, [pc, #464]	; (80068bc <checkDemoModCalisma+0x240>)
 80066ec:	f002 ff9a 	bl	8009624 <HAL_GPIO_ReadPin>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d107      	bne.n	8006706 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80066f6:	2200      	movs	r2, #0
 80066f8:	2104      	movs	r1, #4
 80066fa:	4874      	ldr	r0, [pc, #464]	; (80068cc <checkDemoModCalisma+0x250>)
 80066fc:	f002 ffa9 	bl	8009652 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006700:	4b73      	ldr	r3, [pc, #460]	; (80068d0 <checkDemoModCalisma+0x254>)
 8006702:	2200      	movs	r2, #0
 8006704:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006706:	4b72      	ldr	r3, [pc, #456]	; (80068d0 <checkDemoModCalisma+0x254>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10b      	bne.n	8006726 <checkDemoModCalisma+0xaa>
 800670e:	4b6d      	ldr	r3, [pc, #436]	; (80068c4 <checkDemoModCalisma+0x248>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d107      	bne.n	8006726 <checkDemoModCalisma+0xaa>
 8006716:	4b6c      	ldr	r3, [pc, #432]	; (80068c8 <checkDemoModCalisma+0x24c>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d103      	bne.n	8006726 <checkDemoModCalisma+0xaa>
 800671e:	4b68      	ldr	r3, [pc, #416]	; (80068c0 <checkDemoModCalisma+0x244>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00c      	beq.n	8006740 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006726:	2201      	movs	r2, #1
 8006728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800672c:	4867      	ldr	r0, [pc, #412]	; (80068cc <checkDemoModCalisma+0x250>)
 800672e:	f002 ff90 	bl	8009652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006732:	2201      	movs	r2, #1
 8006734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006738:	4864      	ldr	r0, [pc, #400]	; (80068cc <checkDemoModCalisma+0x250>)
 800673a:	f002 ff8a 	bl	8009652 <HAL_GPIO_WritePin>
 800673e:	e00b      	b.n	8006758 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006740:	2200      	movs	r2, #0
 8006742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006746:	4861      	ldr	r0, [pc, #388]	; (80068cc <checkDemoModCalisma+0x250>)
 8006748:	f002 ff83 	bl	8009652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800674c:	2200      	movs	r2, #0
 800674e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006752:	485e      	ldr	r0, [pc, #376]	; (80068cc <checkDemoModCalisma+0x250>)
 8006754:	f002 ff7d 	bl	8009652 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006758:	2102      	movs	r1, #2
 800675a:	4858      	ldr	r0, [pc, #352]	; (80068bc <checkDemoModCalisma+0x240>)
 800675c:	f002 ff62 	bl	8009624 <HAL_GPIO_ReadPin>
 8006760:	4603      	mov	r3, r0
 8006762:	2b01      	cmp	r3, #1
 8006764:	d10d      	bne.n	8006782 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006766:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800676a:	4854      	ldr	r0, [pc, #336]	; (80068bc <checkDemoModCalisma+0x240>)
 800676c:	f002 ff5a 	bl	8009624 <HAL_GPIO_ReadPin>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d105      	bne.n	8006782 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006776:	4b56      	ldr	r3, [pc, #344]	; (80068d0 <checkDemoModCalisma+0x254>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	f083 0301 	eor.w	r3, r3, #1
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006782:	2102      	movs	r1, #2
 8006784:	484d      	ldr	r0, [pc, #308]	; (80068bc <checkDemoModCalisma+0x240>)
 8006786:	f002 ff4d 	bl	8009624 <HAL_GPIO_ReadPin>
 800678a:	4603      	mov	r3, r0
 800678c:	2b01      	cmp	r3, #1
 800678e:	d125      	bne.n	80067dc <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006794:	4849      	ldr	r0, [pc, #292]	; (80068bc <checkDemoModCalisma+0x240>)
 8006796:	f002 ff45 	bl	8009624 <HAL_GPIO_ReadPin>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d11d      	bne.n	80067dc <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80067a0:	4b4b      	ldr	r3, [pc, #300]	; (80068d0 <checkDemoModCalisma+0x254>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f083 0301 	eor.w	r3, r3, #1
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d016      	beq.n	80067dc <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80067ae:	4b44      	ldr	r3, [pc, #272]	; (80068c0 <checkDemoModCalisma+0x244>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	f083 0301 	eor.w	r3, r3, #1
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00f      	beq.n	80067dc <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80067bc:	4b42      	ldr	r3, [pc, #264]	; (80068c8 <checkDemoModCalisma+0x24c>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	f083 0301 	eor.w	r3, r3, #1
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d008      	beq.n	80067dc <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80067ca:	2201      	movs	r2, #1
 80067cc:	2120      	movs	r1, #32
 80067ce:	483b      	ldr	r0, [pc, #236]	; (80068bc <checkDemoModCalisma+0x240>)
 80067d0:	f002 ff3f 	bl	8009652 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80067d4:	4b3b      	ldr	r3, [pc, #236]	; (80068c4 <checkDemoModCalisma+0x248>)
 80067d6:	2201      	movs	r2, #1
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	e007      	b.n	80067ec <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80067dc:	2200      	movs	r2, #0
 80067de:	2120      	movs	r1, #32
 80067e0:	4836      	ldr	r0, [pc, #216]	; (80068bc <checkDemoModCalisma+0x240>)
 80067e2:	f002 ff36 	bl	8009652 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80067e6:	4b37      	ldr	r3, [pc, #220]	; (80068c4 <checkDemoModCalisma+0x248>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80067ec:	2102      	movs	r1, #2
 80067ee:	4833      	ldr	r0, [pc, #204]	; (80068bc <checkDemoModCalisma+0x240>)
 80067f0:	f002 ff18 	bl	8009624 <HAL_GPIO_ReadPin>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d125      	bne.n	8006846 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80067fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067fe:	482f      	ldr	r0, [pc, #188]	; (80068bc <checkDemoModCalisma+0x240>)
 8006800:	f002 ff10 	bl	8009624 <HAL_GPIO_ReadPin>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d11d      	bne.n	8006846 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800680a:	4b31      	ldr	r3, [pc, #196]	; (80068d0 <checkDemoModCalisma+0x254>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	f083 0301 	eor.w	r3, r3, #1
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d016      	beq.n	8006846 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006818:	4b2a      	ldr	r3, [pc, #168]	; (80068c4 <checkDemoModCalisma+0x248>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f083 0301 	eor.w	r3, r3, #1
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00f      	beq.n	8006846 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006826:	4b26      	ldr	r3, [pc, #152]	; (80068c0 <checkDemoModCalisma+0x244>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	f083 0301 	eor.w	r3, r3, #1
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d008      	beq.n	8006846 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006834:	2201      	movs	r2, #1
 8006836:	2110      	movs	r1, #16
 8006838:	4820      	ldr	r0, [pc, #128]	; (80068bc <checkDemoModCalisma+0x240>)
 800683a:	f002 ff0a 	bl	8009652 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800683e:	4b22      	ldr	r3, [pc, #136]	; (80068c8 <checkDemoModCalisma+0x24c>)
 8006840:	2201      	movs	r2, #1
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	e007      	b.n	8006856 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006846:	2200      	movs	r2, #0
 8006848:	2110      	movs	r1, #16
 800684a:	481c      	ldr	r0, [pc, #112]	; (80068bc <checkDemoModCalisma+0x240>)
 800684c:	f002 ff01 	bl	8009652 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006850:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <checkDemoModCalisma+0x24c>)
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006856:	2104      	movs	r1, #4
 8006858:	4818      	ldr	r0, [pc, #96]	; (80068bc <checkDemoModCalisma+0x240>)
 800685a:	f002 fee3 	bl	8009624 <HAL_GPIO_ReadPin>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d139      	bne.n	80068d8 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006864:	4b1a      	ldr	r3, [pc, #104]	; (80068d0 <checkDemoModCalisma+0x254>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	f083 0301 	eor.w	r3, r3, #1
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d032      	beq.n	80068d8 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8006872:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <checkDemoModCalisma+0x24c>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	f083 0301 	eor.w	r3, r3, #1
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	d02b      	beq.n	80068d8 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006880:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <checkDemoModCalisma+0x248>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	f083 0301 	eor.w	r3, r3, #1
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d024      	beq.n	80068d8 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800688e:	2201      	movs	r2, #1
 8006890:	2102      	movs	r1, #2
 8006892:	480e      	ldr	r0, [pc, #56]	; (80068cc <checkDemoModCalisma+0x250>)
 8006894:	f002 fedd 	bl	8009652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006898:	2201      	movs	r2, #1
 800689a:	2101      	movs	r1, #1
 800689c:	480b      	ldr	r0, [pc, #44]	; (80068cc <checkDemoModCalisma+0x250>)
 800689e:	f002 fed8 	bl	8009652 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80068a2:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <checkDemoModCalisma+0x244>)
 80068a4:	2201      	movs	r2, #1
 80068a6:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80068a8:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <checkDemoModCalisma+0x258>)
 80068aa:	2201      	movs	r2, #1
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e027      	b.n	8006900 <checkDemoModCalisma+0x284>
 80068b0:	2000020a 	.word	0x2000020a
 80068b4:	2000023e 	.word	0x2000023e
 80068b8:	20000209 	.word	0x20000209
 80068bc:	40011000 	.word	0x40011000
 80068c0:	20000245 	.word	0x20000245
 80068c4:	20000246 	.word	0x20000246
 80068c8:	20000247 	.word	0x20000247
 80068cc:	40010c00 	.word	0x40010c00
 80068d0:	20000244 	.word	0x20000244
 80068d4:	2000022a 	.word	0x2000022a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80068d8:	2104      	movs	r1, #4
 80068da:	48a0      	ldr	r0, [pc, #640]	; (8006b5c <checkDemoModCalisma+0x4e0>)
 80068dc:	f002 fea2 	bl	8009624 <HAL_GPIO_ReadPin>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d10c      	bne.n	8006900 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80068e6:	2200      	movs	r2, #0
 80068e8:	2102      	movs	r1, #2
 80068ea:	489d      	ldr	r0, [pc, #628]	; (8006b60 <checkDemoModCalisma+0x4e4>)
 80068ec:	f002 feb1 	bl	8009652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80068f0:	2200      	movs	r2, #0
 80068f2:	2101      	movs	r1, #1
 80068f4:	489a      	ldr	r0, [pc, #616]	; (8006b60 <checkDemoModCalisma+0x4e4>)
 80068f6:	f002 feac 	bl	8009652 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80068fa:	4b9a      	ldr	r3, [pc, #616]	; (8006b64 <checkDemoModCalisma+0x4e8>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006900:	2104      	movs	r1, #4
 8006902:	4896      	ldr	r0, [pc, #600]	; (8006b5c <checkDemoModCalisma+0x4e0>)
 8006904:	f002 fe8e 	bl	8009624 <HAL_GPIO_ReadPin>
 8006908:	4603      	mov	r3, r0
 800690a:	2b01      	cmp	r3, #1
 800690c:	d10d      	bne.n	800692a <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800690e:	2201      	movs	r2, #1
 8006910:	2180      	movs	r1, #128	; 0x80
 8006912:	4895      	ldr	r0, [pc, #596]	; (8006b68 <checkDemoModCalisma+0x4ec>)
 8006914:	f002 fe9d 	bl	8009652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006918:	2201      	movs	r2, #1
 800691a:	2120      	movs	r1, #32
 800691c:	4892      	ldr	r0, [pc, #584]	; (8006b68 <checkDemoModCalisma+0x4ec>)
 800691e:	f002 fe98 	bl	8009652 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006922:	4b92      	ldr	r3, [pc, #584]	; (8006b6c <checkDemoModCalisma+0x4f0>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a92      	ldr	r2, [pc, #584]	; (8006b70 <checkDemoModCalisma+0x4f4>)
 8006928:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800692a:	4b90      	ldr	r3, [pc, #576]	; (8006b6c <checkDemoModCalisma+0x4f0>)
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	4b90      	ldr	r3, [pc, #576]	; (8006b70 <checkDemoModCalisma+0x4f4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b04      	cmp	r3, #4
 8006936:	d909      	bls.n	800694c <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006938:	2200      	movs	r2, #0
 800693a:	2180      	movs	r1, #128	; 0x80
 800693c:	488a      	ldr	r0, [pc, #552]	; (8006b68 <checkDemoModCalisma+0x4ec>)
 800693e:	f002 fe88 	bl	8009652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006942:	2200      	movs	r2, #0
 8006944:	2120      	movs	r1, #32
 8006946:	4888      	ldr	r0, [pc, #544]	; (8006b68 <checkDemoModCalisma+0x4ec>)
 8006948:	f002 fe83 	bl	8009652 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800694c:	2102      	movs	r1, #2
 800694e:	4883      	ldr	r0, [pc, #524]	; (8006b5c <checkDemoModCalisma+0x4e0>)
 8006950:	f002 fe68 	bl	8009624 <HAL_GPIO_ReadPin>
 8006954:	4603      	mov	r3, r0
 8006956:	2b01      	cmp	r3, #1
 8006958:	d108      	bne.n	800696c <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800695a:	2201      	movs	r2, #1
 800695c:	2140      	movs	r1, #64	; 0x40
 800695e:	4882      	ldr	r0, [pc, #520]	; (8006b68 <checkDemoModCalisma+0x4ec>)
 8006960:	f002 fe77 	bl	8009652 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006964:	4b81      	ldr	r3, [pc, #516]	; (8006b6c <checkDemoModCalisma+0x4f0>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a81      	ldr	r2, [pc, #516]	; (8006b70 <checkDemoModCalisma+0x4f4>)
 800696a:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800696c:	4b7f      	ldr	r3, [pc, #508]	; (8006b6c <checkDemoModCalisma+0x4f0>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	4b7f      	ldr	r3, [pc, #508]	; (8006b70 <checkDemoModCalisma+0x4f4>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b04      	cmp	r3, #4
 8006978:	d904      	bls.n	8006984 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800697a:	2200      	movs	r2, #0
 800697c:	2140      	movs	r1, #64	; 0x40
 800697e:	487a      	ldr	r0, [pc, #488]	; (8006b68 <checkDemoModCalisma+0x4ec>)
 8006980:	f002 fe67 	bl	8009652 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006984:	4b7b      	ldr	r3, [pc, #492]	; (8006b74 <checkDemoModCalisma+0x4f8>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d058      	beq.n	8006a3e <checkDemoModCalisma+0x3c2>
 800698c:	4b7a      	ldr	r3, [pc, #488]	; (8006b78 <checkDemoModCalisma+0x4fc>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d054      	beq.n	8006a3e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006994:	4b79      	ldr	r3, [pc, #484]	; (8006b7c <checkDemoModCalisma+0x500>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	3301      	adds	r3, #1
 800699a:	b2da      	uxtb	r2, r3
 800699c:	4b77      	ldr	r3, [pc, #476]	; (8006b7c <checkDemoModCalisma+0x500>)
 800699e:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80069a0:	4b76      	ldr	r3, [pc, #472]	; (8006b7c <checkDemoModCalisma+0x500>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b09      	cmp	r3, #9
 80069a6:	d908      	bls.n	80069ba <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80069a8:	4b74      	ldr	r3, [pc, #464]	; (8006b7c <checkDemoModCalisma+0x500>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80069ae:	4b74      	ldr	r3, [pc, #464]	; (8006b80 <checkDemoModCalisma+0x504>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	4b72      	ldr	r3, [pc, #456]	; (8006b80 <checkDemoModCalisma+0x504>)
 80069b8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80069ba:	4b71      	ldr	r3, [pc, #452]	; (8006b80 <checkDemoModCalisma+0x504>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b09      	cmp	r3, #9
 80069c0:	d908      	bls.n	80069d4 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80069c2:	4b6f      	ldr	r3, [pc, #444]	; (8006b80 <checkDemoModCalisma+0x504>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80069c8:	4b6e      	ldr	r3, [pc, #440]	; (8006b84 <checkDemoModCalisma+0x508>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	3301      	adds	r3, #1
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	4b6c      	ldr	r3, [pc, #432]	; (8006b84 <checkDemoModCalisma+0x508>)
 80069d2:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80069d4:	4b6b      	ldr	r3, [pc, #428]	; (8006b84 <checkDemoModCalisma+0x508>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b09      	cmp	r3, #9
 80069da:	d908      	bls.n	80069ee <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80069dc:	4b69      	ldr	r3, [pc, #420]	; (8006b84 <checkDemoModCalisma+0x508>)
 80069de:	2200      	movs	r2, #0
 80069e0:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80069e2:	4b69      	ldr	r3, [pc, #420]	; (8006b88 <checkDemoModCalisma+0x50c>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	3301      	adds	r3, #1
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	4b67      	ldr	r3, [pc, #412]	; (8006b88 <checkDemoModCalisma+0x50c>)
 80069ec:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80069ee:	4b66      	ldr	r3, [pc, #408]	; (8006b88 <checkDemoModCalisma+0x50c>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b09      	cmp	r3, #9
 80069f4:	d908      	bls.n	8006a08 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80069f6:	4b64      	ldr	r3, [pc, #400]	; (8006b88 <checkDemoModCalisma+0x50c>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80069fc:	4b63      	ldr	r3, [pc, #396]	; (8006b8c <checkDemoModCalisma+0x510>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	3301      	adds	r3, #1
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	4b61      	ldr	r3, [pc, #388]	; (8006b8c <checkDemoModCalisma+0x510>)
 8006a06:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006a08:	4b60      	ldr	r3, [pc, #384]	; (8006b8c <checkDemoModCalisma+0x510>)
 8006a0a:	781a      	ldrb	r2, [r3, #0]
 8006a0c:	4b60      	ldr	r3, [pc, #384]	; (8006b90 <checkDemoModCalisma+0x514>)
 8006a0e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006a12:	4b5d      	ldr	r3, [pc, #372]	; (8006b88 <checkDemoModCalisma+0x50c>)
 8006a14:	781a      	ldrb	r2, [r3, #0]
 8006a16:	4b5e      	ldr	r3, [pc, #376]	; (8006b90 <checkDemoModCalisma+0x514>)
 8006a18:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006a1a:	4b5a      	ldr	r3, [pc, #360]	; (8006b84 <checkDemoModCalisma+0x508>)
 8006a1c:	781a      	ldrb	r2, [r3, #0]
 8006a1e:	4b5c      	ldr	r3, [pc, #368]	; (8006b90 <checkDemoModCalisma+0x514>)
 8006a20:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006a22:	4b57      	ldr	r3, [pc, #348]	; (8006b80 <checkDemoModCalisma+0x504>)
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	4b5a      	ldr	r3, [pc, #360]	; (8006b90 <checkDemoModCalisma+0x514>)
 8006a28:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006a2a:	4b54      	ldr	r3, [pc, #336]	; (8006b7c <checkDemoModCalisma+0x500>)
 8006a2c:	781a      	ldrb	r2, [r3, #0]
 8006a2e:	4b58      	ldr	r3, [pc, #352]	; (8006b90 <checkDemoModCalisma+0x514>)
 8006a30:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006a32:	4b58      	ldr	r3, [pc, #352]	; (8006b94 <checkDemoModCalisma+0x518>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006a38:	4b4f      	ldr	r3, [pc, #316]	; (8006b78 <checkDemoModCalisma+0x4fc>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006a3e:	4b56      	ldr	r3, [pc, #344]	; (8006b98 <checkDemoModCalisma+0x51c>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f040 8087 	bne.w	8006b56 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006a48:	4a54      	ldr	r2, [pc, #336]	; (8006b9c <checkDemoModCalisma+0x520>)
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	2002      	movs	r0, #2
 8006a4e:	f001 fac3 	bl	8007fd8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006a52:	4a53      	ldr	r2, [pc, #332]	; (8006ba0 <checkDemoModCalisma+0x524>)
 8006a54:	2101      	movs	r1, #1
 8006a56:	2001      	movs	r0, #1
 8006a58:	f001 fabe 	bl	8007fd8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006a5c:	4b4b      	ldr	r3, [pc, #300]	; (8006b8c <checkDemoModCalisma+0x510>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	220a      	movs	r2, #10
 8006a62:	4950      	ldr	r1, [pc, #320]	; (8006ba4 <checkDemoModCalisma+0x528>)
 8006a64:	4618      	mov	r0, r3
 8006a66:	f005 fe65 	bl	800c734 <itoa>
			lcd_print(2,12,snum);
 8006a6a:	4a4e      	ldr	r2, [pc, #312]	; (8006ba4 <checkDemoModCalisma+0x528>)
 8006a6c:	210c      	movs	r1, #12
 8006a6e:	2002      	movs	r0, #2
 8006a70:	f001 fab2 	bl	8007fd8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006a74:	4b44      	ldr	r3, [pc, #272]	; (8006b88 <checkDemoModCalisma+0x50c>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	220a      	movs	r2, #10
 8006a7a:	494a      	ldr	r1, [pc, #296]	; (8006ba4 <checkDemoModCalisma+0x528>)
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f005 fe59 	bl	800c734 <itoa>
			lcd_print(2,13,snum);
 8006a82:	4a48      	ldr	r2, [pc, #288]	; (8006ba4 <checkDemoModCalisma+0x528>)
 8006a84:	210d      	movs	r1, #13
 8006a86:	2002      	movs	r0, #2
 8006a88:	f001 faa6 	bl	8007fd8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006a8c:	4b3d      	ldr	r3, [pc, #244]	; (8006b84 <checkDemoModCalisma+0x508>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	220a      	movs	r2, #10
 8006a92:	4944      	ldr	r1, [pc, #272]	; (8006ba4 <checkDemoModCalisma+0x528>)
 8006a94:	4618      	mov	r0, r3
 8006a96:	f005 fe4d 	bl	800c734 <itoa>
			lcd_print(2,14,snum);
 8006a9a:	4a42      	ldr	r2, [pc, #264]	; (8006ba4 <checkDemoModCalisma+0x528>)
 8006a9c:	210e      	movs	r1, #14
 8006a9e:	2002      	movs	r0, #2
 8006aa0:	f001 fa9a 	bl	8007fd8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006aa4:	4b36      	ldr	r3, [pc, #216]	; (8006b80 <checkDemoModCalisma+0x504>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	220a      	movs	r2, #10
 8006aaa:	493e      	ldr	r1, [pc, #248]	; (8006ba4 <checkDemoModCalisma+0x528>)
 8006aac:	4618      	mov	r0, r3
 8006aae:	f005 fe41 	bl	800c734 <itoa>
			lcd_print(2,15,snum);
 8006ab2:	4a3c      	ldr	r2, [pc, #240]	; (8006ba4 <checkDemoModCalisma+0x528>)
 8006ab4:	210f      	movs	r1, #15
 8006ab6:	2002      	movs	r0, #2
 8006ab8:	f001 fa8e 	bl	8007fd8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006abc:	4b2f      	ldr	r3, [pc, #188]	; (8006b7c <checkDemoModCalisma+0x500>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	220a      	movs	r2, #10
 8006ac2:	4938      	ldr	r1, [pc, #224]	; (8006ba4 <checkDemoModCalisma+0x528>)
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f005 fe35 	bl	800c734 <itoa>
			lcd_print(2,16,snum);
 8006aca:	4a36      	ldr	r2, [pc, #216]	; (8006ba4 <checkDemoModCalisma+0x528>)
 8006acc:	2110      	movs	r1, #16
 8006ace:	2002      	movs	r0, #2
 8006ad0:	f001 fa82 	bl	8007fd8 <lcd_print>
			mesajYazildi=1;
 8006ad4:	4b34      	ldr	r3, [pc, #208]	; (8006ba8 <checkDemoModCalisma+0x52c>)
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006ada:	e03c      	b.n	8006b56 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006adc:	4b33      	ldr	r3, [pc, #204]	; (8006bac <checkDemoModCalisma+0x530>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d003      	beq.n	8006aec <checkDemoModCalisma+0x470>
 8006ae4:	4b2c      	ldr	r3, [pc, #176]	; (8006b98 <checkDemoModCalisma+0x51c>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d134      	bne.n	8006b56 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006aec:	2200      	movs	r2, #0
 8006aee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006af2:	481b      	ldr	r0, [pc, #108]	; (8006b60 <checkDemoModCalisma+0x4e4>)
 8006af4:	f002 fdad 	bl	8009652 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006af8:	2200      	movs	r2, #0
 8006afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006afe:	4818      	ldr	r0, [pc, #96]	; (8006b60 <checkDemoModCalisma+0x4e4>)
 8006b00:	f002 fda7 	bl	8009652 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006b04:	2200      	movs	r2, #0
 8006b06:	2104      	movs	r1, #4
 8006b08:	4815      	ldr	r0, [pc, #84]	; (8006b60 <checkDemoModCalisma+0x4e4>)
 8006b0a:	f002 fda2 	bl	8009652 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2102      	movs	r1, #2
 8006b12:	4813      	ldr	r0, [pc, #76]	; (8006b60 <checkDemoModCalisma+0x4e4>)
 8006b14:	f002 fd9d 	bl	8009652 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	4810      	ldr	r0, [pc, #64]	; (8006b60 <checkDemoModCalisma+0x4e4>)
 8006b1e:	f002 fd98 	bl	8009652 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006b22:	2200      	movs	r2, #0
 8006b24:	2120      	movs	r1, #32
 8006b26:	480d      	ldr	r0, [pc, #52]	; (8006b5c <checkDemoModCalisma+0x4e0>)
 8006b28:	f002 fd93 	bl	8009652 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2110      	movs	r1, #16
 8006b30:	480a      	ldr	r0, [pc, #40]	; (8006b5c <checkDemoModCalisma+0x4e0>)
 8006b32:	f002 fd8e 	bl	8009652 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006b36:	2200      	movs	r2, #0
 8006b38:	2180      	movs	r1, #128	; 0x80
 8006b3a:	480b      	ldr	r0, [pc, #44]	; (8006b68 <checkDemoModCalisma+0x4ec>)
 8006b3c:	f002 fd89 	bl	8009652 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006b40:	2200      	movs	r2, #0
 8006b42:	2140      	movs	r1, #64	; 0x40
 8006b44:	4808      	ldr	r0, [pc, #32]	; (8006b68 <checkDemoModCalisma+0x4ec>)
 8006b46:	f002 fd84 	bl	8009652 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	2120      	movs	r1, #32
 8006b4e:	4806      	ldr	r0, [pc, #24]	; (8006b68 <checkDemoModCalisma+0x4ec>)
 8006b50:	f002 fd7f 	bl	8009652 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006b54:	e7ff      	b.n	8006b56 <checkDemoModCalisma+0x4da>
 8006b56:	bf00      	nop
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	40011000 	.word	0x40011000
 8006b60:	40010c00 	.word	0x40010c00
 8006b64:	20000245 	.word	0x20000245
 8006b68:	40010800 	.word	0x40010800
 8006b6c:	200001c8 	.word	0x200001c8
 8006b70:	200001d8 	.word	0x200001d8
 8006b74:	20000244 	.word	0x20000244
 8006b78:	2000022a 	.word	0x2000022a
 8006b7c:	200001e9 	.word	0x200001e9
 8006b80:	200001ea 	.word	0x200001ea
 8006b84:	20000000 	.word	0x20000000
 8006b88:	20000001 	.word	0x20000001
 8006b8c:	200001eb 	.word	0x200001eb
 8006b90:	20000118 	.word	0x20000118
 8006b94:	20000218 	.word	0x20000218
 8006b98:	20000209 	.word	0x20000209
 8006b9c:	0800df58 	.word	0x0800df58
 8006ba0:	0800df64 	.word	0x0800df64
 8006ba4:	20000188 	.word	0x20000188
 8006ba8:	20000220 	.word	0x20000220
 8006bac:	2000020a 	.word	0x2000020a

08006bb0 <mainLoop>:

void mainLoop() {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006bb6:	f7fe f923 	bl	8004e00 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006bba:	2101      	movs	r1, #1
 8006bbc:	48a9      	ldr	r0, [pc, #676]	; (8006e64 <mainLoop+0x2b4>)
 8006bbe:	f002 fd31 	bl	8009624 <HAL_GPIO_ReadPin>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d136      	bne.n	8006c36 <mainLoop+0x86>
 8006bc8:	2108      	movs	r1, #8
 8006bca:	48a7      	ldr	r0, [pc, #668]	; (8006e68 <mainLoop+0x2b8>)
 8006bcc:	f002 fd2a 	bl	8009624 <HAL_GPIO_ReadPin>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d12f      	bne.n	8006c36 <mainLoop+0x86>
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	48a2      	ldr	r0, [pc, #648]	; (8006e64 <mainLoop+0x2b4>)
 8006bda:	f002 fd23 	bl	8009624 <HAL_GPIO_ReadPin>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d128      	bne.n	8006c36 <mainLoop+0x86>
 8006be4:	2104      	movs	r1, #4
 8006be6:	489f      	ldr	r0, [pc, #636]	; (8006e64 <mainLoop+0x2b4>)
 8006be8:	f002 fd1c 	bl	8009624 <HAL_GPIO_ReadPin>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d121      	bne.n	8006c36 <mainLoop+0x86>
 8006bf2:	2108      	movs	r1, #8
 8006bf4:	489b      	ldr	r0, [pc, #620]	; (8006e64 <mainLoop+0x2b4>)
 8006bf6:	f002 fd15 	bl	8009624 <HAL_GPIO_ReadPin>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d11a      	bne.n	8006c36 <mainLoop+0x86>
 8006c00:	2180      	movs	r1, #128	; 0x80
 8006c02:	4899      	ldr	r0, [pc, #612]	; (8006e68 <mainLoop+0x2b8>)
 8006c04:	f002 fd0e 	bl	8009624 <HAL_GPIO_ReadPin>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d113      	bne.n	8006c36 <mainLoop+0x86>
 8006c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c12:	4895      	ldr	r0, [pc, #596]	; (8006e68 <mainLoop+0x2b8>)
 8006c14:	f002 fd06 	bl	8009624 <HAL_GPIO_ReadPin>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d10b      	bne.n	8006c36 <mainLoop+0x86>
 8006c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c22:	4891      	ldr	r0, [pc, #580]	; (8006e68 <mainLoop+0x2b8>)
 8006c24:	f002 fcfe 	bl	8009624 <HAL_GPIO_ReadPin>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d103      	bne.n	8006c36 <mainLoop+0x86>
			butonKontrol=0;
 8006c2e:	4b8f      	ldr	r3, [pc, #572]	; (8006e6c <mainLoop+0x2bc>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	e003      	b.n	8006c3e <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006c36:	4b8e      	ldr	r3, [pc, #568]	; (8006e70 <mainLoop+0x2c0>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a8e      	ldr	r2, [pc, #568]	; (8006e74 <mainLoop+0x2c4>)
 8006c3c:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() != 1) {
 8006c3e:	f7fe f8ab 	bl	8004d98 <buttonCheck>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d003      	beq.n	8006c50 <mainLoop+0xa0>
			backLightTimer = millis;
 8006c48:	4b89      	ldr	r3, [pc, #548]	; (8006e70 <mainLoop+0x2c0>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a89      	ldr	r2, [pc, #548]	; (8006e74 <mainLoop+0x2c4>)
 8006c4e:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006c50:	4b89      	ldr	r3, [pc, #548]	; (8006e78 <mainLoop+0x2c8>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d03a      	beq.n	8006cce <mainLoop+0x11e>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006c58:	bf00      	nop
 8006c5a:	4888      	ldr	r0, [pc, #544]	; (8006e7c <mainLoop+0x2cc>)
 8006c5c:	f003 fb0b 	bl	800a276 <HAL_I2C_GetError>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d0f9      	beq.n	8006c5a <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006c66:	bf00      	nop
 8006c68:	4884      	ldr	r0, [pc, #528]	; (8006e7c <mainLoop+0x2cc>)
 8006c6a:	f003 faf7 	bl	800a25c <HAL_I2C_GetState>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d1f9      	bne.n	8006c68 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006c74:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006c78:	9302      	str	r3, [sp, #8]
 8006c7a:	236e      	movs	r3, #110	; 0x6e
 8006c7c:	9301      	str	r3, [sp, #4]
 8006c7e:	4b80      	ldr	r3, [pc, #512]	; (8006e80 <mainLoop+0x2d0>)
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	236e      	movs	r3, #110	; 0x6e
 8006c84:	2200      	movs	r2, #0
 8006c86:	21a0      	movs	r1, #160	; 0xa0
 8006c88:	487c      	ldr	r0, [pc, #496]	; (8006e7c <mainLoop+0x2cc>)
 8006c8a:	f002 ff85 	bl	8009b98 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006c8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c92:	f001 fef7 	bl	8008a84 <HAL_Delay>

		  hafizaYaz=0;
 8006c96:	4b78      	ldr	r3, [pc, #480]	; (8006e78 <mainLoop+0x2c8>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006c9c:	4b79      	ldr	r3, [pc, #484]	; (8006e84 <mainLoop+0x2d4>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d105      	bne.n	8006cb0 <mainLoop+0x100>
			  lcd_print(2,1,"Data yazildi    ");
 8006ca4:	4a78      	ldr	r2, [pc, #480]	; (8006e88 <mainLoop+0x2d8>)
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	2002      	movs	r0, #2
 8006caa:	f001 f995 	bl	8007fd8 <lcd_print>
 8006cae:	e008      	b.n	8006cc2 <mainLoop+0x112>
		  } else if(dilSecim==1) {
 8006cb0:	4b74      	ldr	r3, [pc, #464]	; (8006e84 <mainLoop+0x2d4>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d104      	bne.n	8006cc2 <mainLoop+0x112>
			  lcd_print(2,1,"Data Wrote      ");
 8006cb8:	4a74      	ldr	r2, [pc, #464]	; (8006e8c <mainLoop+0x2dc>)
 8006cba:	2101      	movs	r1, #1
 8006cbc:	2002      	movs	r0, #2
 8006cbe:	f001 f98b 	bl	8007fd8 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cc6:	f001 fedd 	bl	8008a84 <HAL_Delay>
		  lcd_clear();
 8006cca:	f001 f9b1 	bl	8008030 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006cce:	4b70      	ldr	r3, [pc, #448]	; (8006e90 <mainLoop+0x2e0>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	f083 0301 	eor.w	r3, r3, #1
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d06d      	beq.n	8006db8 <mainLoop+0x208>
 8006cdc:	4867      	ldr	r0, [pc, #412]	; (8006e7c <mainLoop+0x2cc>)
 8006cde:	f003 fabd 	bl	800a25c <HAL_I2C_GetState>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d167      	bne.n	8006db8 <mainLoop+0x208>
		  if(ilkOkuma==0) {
 8006ce8:	4b6a      	ldr	r3, [pc, #424]	; (8006e94 <mainLoop+0x2e4>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	f083 0301 	eor.w	r3, r3, #1
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d044      	beq.n	8006d80 <mainLoop+0x1d0>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006cf6:	4a68      	ldr	r2, [pc, #416]	; (8006e98 <mainLoop+0x2e8>)
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	f001 f96c 	bl	8007fd8 <lcd_print>
			  if(dilSecim==0) {
 8006d00:	4b60      	ldr	r3, [pc, #384]	; (8006e84 <mainLoop+0x2d4>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d105      	bne.n	8006d14 <mainLoop+0x164>
				  lcd_print(2,1,"Data Okunuyor...");
 8006d08:	4a64      	ldr	r2, [pc, #400]	; (8006e9c <mainLoop+0x2ec>)
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	2002      	movs	r0, #2
 8006d0e:	f001 f963 	bl	8007fd8 <lcd_print>
 8006d12:	e008      	b.n	8006d26 <mainLoop+0x176>
			  } else if(dilSecim==1) {
 8006d14:	4b5b      	ldr	r3, [pc, #364]	; (8006e84 <mainLoop+0x2d4>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d104      	bne.n	8006d26 <mainLoop+0x176>
				  lcd_print(2,1,"Data Reading... ");
 8006d1c:	4a60      	ldr	r2, [pc, #384]	; (8006ea0 <mainLoop+0x2f0>)
 8006d1e:	2101      	movs	r1, #1
 8006d20:	2002      	movs	r0, #2
 8006d22:	f001 f959 	bl	8007fd8 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006d26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d2a:	f001 feab 	bl	8008a84 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006d2e:	bf00      	nop
 8006d30:	4852      	ldr	r0, [pc, #328]	; (8006e7c <mainLoop+0x2cc>)
 8006d32:	f003 faa0 	bl	800a276 <HAL_I2C_GetError>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d0f9      	beq.n	8006d30 <mainLoop+0x180>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006d3c:	e003      	b.n	8006d46 <mainLoop+0x196>
				  HAL_Delay(1000);
 8006d3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d42:	f001 fe9f 	bl	8008a84 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006d46:	484d      	ldr	r0, [pc, #308]	; (8006e7c <mainLoop+0x2cc>)
 8006d48:	f003 fa88 	bl	800a25c <HAL_I2C_GetState>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d1f5      	bne.n	8006d3e <mainLoop+0x18e>
			  }

			  if(dilSecim==0) {
 8006d52:	4b4c      	ldr	r3, [pc, #304]	; (8006e84 <mainLoop+0x2d4>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d105      	bne.n	8006d66 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Okundu.    ");
 8006d5a:	4a52      	ldr	r2, [pc, #328]	; (8006ea4 <mainLoop+0x2f4>)
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	2002      	movs	r0, #2
 8006d60:	f001 f93a 	bl	8007fd8 <lcd_print>
 8006d64:	e008      	b.n	8006d78 <mainLoop+0x1c8>
			  } else if(dilSecim==1) {
 8006d66:	4b47      	ldr	r3, [pc, #284]	; (8006e84 <mainLoop+0x2d4>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d104      	bne.n	8006d78 <mainLoop+0x1c8>
				  lcd_print(2,1,"Data Read.      ");
 8006d6e:	4a4e      	ldr	r2, [pc, #312]	; (8006ea8 <mainLoop+0x2f8>)
 8006d70:	2101      	movs	r1, #1
 8006d72:	2002      	movs	r0, #2
 8006d74:	f001 f930 	bl	8007fd8 <lcd_print>
			  }

			  ilkOkuma=1;
 8006d78:	4b46      	ldr	r3, [pc, #280]	; (8006e94 <mainLoop+0x2e4>)
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e014      	b.n	8006daa <mainLoop+0x1fa>
		  } else {
			  if(dilSecim==0) {
 8006d80:	4b40      	ldr	r3, [pc, #256]	; (8006e84 <mainLoop+0x2d4>)
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d105      	bne.n	8006d94 <mainLoop+0x1e4>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006d88:	4a48      	ldr	r2, [pc, #288]	; (8006eac <mainLoop+0x2fc>)
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	2002      	movs	r0, #2
 8006d8e:	f001 f923 	bl	8007fd8 <lcd_print>
 8006d92:	e008      	b.n	8006da6 <mainLoop+0x1f6>
			  } else if(dilSecim==1) {
 8006d94:	4b3b      	ldr	r3, [pc, #236]	; (8006e84 <mainLoop+0x2d4>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d104      	bne.n	8006da6 <mainLoop+0x1f6>
				  lcd_print(2,1,"Value Saved     ");
 8006d9c:	4a44      	ldr	r2, [pc, #272]	; (8006eb0 <mainLoop+0x300>)
 8006d9e:	2101      	movs	r1, #1
 8006da0:	2002      	movs	r0, #2
 8006da2:	f001 f919 	bl	8007fd8 <lcd_print>
			  }
			  lcd_clear();
 8006da6:	f001 f943 	bl	8008030 <lcd_clear>
		  }

		  lcd_clear();
 8006daa:	f001 f941 	bl	8008030 <lcd_clear>

		  eepromKontrol();
 8006dae:	f7f9 fa41 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006db2:	4b37      	ldr	r3, [pc, #220]	; (8006e90 <mainLoop+0x2e0>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006db8:	4b3e      	ldr	r3, [pc, #248]	; (8006eb4 <mainLoop+0x304>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d11c      	bne.n	8006dfa <mainLoop+0x24a>
 8006dc0:	4b3d      	ldr	r3, [pc, #244]	; (8006eb8 <mainLoop+0x308>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f083 0301 	eor.w	r3, r3, #1
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d015      	beq.n	8006dfa <mainLoop+0x24a>
 8006dce:	4b3b      	ldr	r3, [pc, #236]	; (8006ebc <mainLoop+0x30c>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d111      	bne.n	8006dfa <mainLoop+0x24a>
			lcd_clear();
 8006dd6:	f001 f92b 	bl	8008030 <lcd_clear>
			HAL_Delay(10);
 8006dda:	200a      	movs	r0, #10
 8006ddc:	f001 fe52 	bl	8008a84 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006de0:	4a37      	ldr	r2, [pc, #220]	; (8006ec0 <mainLoop+0x310>)
 8006de2:	2101      	movs	r1, #1
 8006de4:	2001      	movs	r0, #1
 8006de6:	f001 f8f7 	bl	8007fd8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006dea:	4a36      	ldr	r2, [pc, #216]	; (8006ec4 <mainLoop+0x314>)
 8006dec:	2101      	movs	r1, #1
 8006dee:	2002      	movs	r0, #2
 8006df0:	f001 f8f2 	bl	8007fd8 <lcd_print>
			mesajYazildi=1;
 8006df4:	4b30      	ldr	r3, [pc, #192]	; (8006eb8 <mainLoop+0x308>)
 8006df6:	2201      	movs	r2, #1
 8006df8:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006dfa:	4b2e      	ldr	r3, [pc, #184]	; (8006eb4 <mainLoop+0x304>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d112      	bne.n	8006e28 <mainLoop+0x278>
 8006e02:	2102      	movs	r1, #2
 8006e04:	4817      	ldr	r0, [pc, #92]	; (8006e64 <mainLoop+0x2b4>)
 8006e06:	f002 fc0d 	bl	8009624 <HAL_GPIO_ReadPin>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d10b      	bne.n	8006e28 <mainLoop+0x278>
 8006e10:	2104      	movs	r1, #4
 8006e12:	4814      	ldr	r0, [pc, #80]	; (8006e64 <mainLoop+0x2b4>)
 8006e14:	f002 fc06 	bl	8009624 <HAL_GPIO_ReadPin>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d104      	bne.n	8006e28 <mainLoop+0x278>
			menuGiris=1;
 8006e1e:	4b25      	ldr	r3, [pc, #148]	; (8006eb4 <mainLoop+0x304>)
 8006e20:	2201      	movs	r2, #1
 8006e22:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006e24:	f001 f904 	bl	8008030 <lcd_clear>
		}

		if(menuGiris==1) {
 8006e28:	4b22      	ldr	r3, [pc, #136]	; (8006eb4 <mainLoop+0x304>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <mainLoop+0x284>
			menu();
 8006e30:	f7fa fbba 	bl	80015a8 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006e34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e38:	480b      	ldr	r0, [pc, #44]	; (8006e68 <mainLoop+0x2b8>)
 8006e3a:	f002 fc22 	bl	8009682 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e42:	4821      	ldr	r0, [pc, #132]	; (8006ec8 <mainLoop+0x318>)
 8006e44:	f002 fbee 	bl	8009624 <HAL_GPIO_ReadPin>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d142      	bne.n	8006ed4 <mainLoop+0x324>
 8006e4e:	4b1f      	ldr	r3, [pc, #124]	; (8006ecc <mainLoop+0x31c>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	f083 0301 	eor.w	r3, r3, #1
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d03b      	beq.n	8006ed4 <mainLoop+0x324>
			stopVar=1;
 8006e5c:	4b1c      	ldr	r3, [pc, #112]	; (8006ed0 <mainLoop+0x320>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	701a      	strb	r2, [r3, #0]
 8006e62:	e03a      	b.n	8006eda <mainLoop+0x32a>
 8006e64:	40010800 	.word	0x40010800
 8006e68:	40011000 	.word	0x40011000
 8006e6c:	2000021b 	.word	0x2000021b
 8006e70:	200001c8 	.word	0x200001c8
 8006e74:	200001e4 	.word	0x200001e4
 8006e78:	20000218 	.word	0x20000218
 8006e7c:	20000374 	.word	0x20000374
 8006e80:	20000118 	.word	0x20000118
 8006e84:	2000020d 	.word	0x2000020d
 8006e88:	0800df78 	.word	0x0800df78
 8006e8c:	0800df8c 	.word	0x0800df8c
 8006e90:	20000219 	.word	0x20000219
 8006e94:	2000021a 	.word	0x2000021a
 8006e98:	0800dfa0 	.word	0x0800dfa0
 8006e9c:	0800dfb4 	.word	0x0800dfb4
 8006ea0:	0800dfc8 	.word	0x0800dfc8
 8006ea4:	0800dfdc 	.word	0x0800dfdc
 8006ea8:	0800dff0 	.word	0x0800dff0
 8006eac:	0800e004 	.word	0x0800e004
 8006eb0:	0800e018 	.word	0x0800e018
 8006eb4:	20000209 	.word	0x20000209
 8006eb8:	20000220 	.word	0x20000220
 8006ebc:	2000020a 	.word	0x2000020a
 8006ec0:	0800e02c 	.word	0x0800e02c
 8006ec4:	0800e040 	.word	0x0800e040
 8006ec8:	40010c00 	.word	0x40010c00
 8006ecc:	20000241 	.word	0x20000241
 8006ed0:	2000023e 	.word	0x2000023e
		} else {
			stopVar=0;
 8006ed4:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <mainLoop+0x340>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006eda:	f7fd ffa7 	bl	8004e2c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006ede:	f7fd ffd9 	bl	8004e94 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006ee2:	f7fe f81d 	bl	8004f20 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006ee6:	f7fe f86d 	bl	8004fc4 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006eea:	f7ff fbc7 	bl	800667c <checkDemoModCalisma>
		checkLCDBacklight();
 8006eee:	e662      	b.n	8006bb6 <mainLoop+0x6>
 8006ef0:	2000023e 	.word	0x2000023e

08006ef4 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8006efa:	2001      	movs	r0, #1
 8006efc:	f001 f8ca 	bl	8008094 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8006f00:	220c      	movs	r2, #12
 8006f02:	2100      	movs	r1, #0
 8006f04:	48a3      	ldr	r0, [pc, #652]	; (8007194 <takeMachineID+0x2a0>)
 8006f06:	f005 fd65 	bl	800c9d4 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006f0a:	2305      	movs	r3, #5
 8006f0c:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006f0e:	2303      	movs	r3, #3
 8006f10:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006f12:	2300      	movs	r3, #0
 8006f14:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006f16:	4ba0      	ldr	r3, [pc, #640]	; (8007198 <takeMachineID+0x2a4>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	2001      	movs	r0, #1
 8006f20:	f7fa f88e 	bl	8001040 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006f24:	2108      	movs	r1, #8
 8006f26:	489d      	ldr	r0, [pc, #628]	; (800719c <takeMachineID+0x2a8>)
 8006f28:	f002 fb7c 	bl	8009624 <HAL_GPIO_ReadPin>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d139      	bne.n	8006fa6 <takeMachineID+0xb2>
        	lcd_cursor(0);
 8006f32:	2000      	movs	r0, #0
 8006f34:	f001 f8ae 	bl	8008094 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8006f38:	f000 fe90 	bl	8007c5c <checkEEPROM4ID>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d01f      	beq.n	8006f82 <takeMachineID+0x8e>
        		lcd_clear();
 8006f42:	f001 f875 	bl	8008030 <lcd_clear>
        		if(dilSecim == 1) {
 8006f46:	4b96      	ldr	r3, [pc, #600]	; (80071a0 <takeMachineID+0x2ac>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d10a      	bne.n	8006f64 <takeMachineID+0x70>
        			lcd_print(1, 1, " ID 12 KARAKTER ");
 8006f4e:	4a95      	ldr	r2, [pc, #596]	; (80071a4 <takeMachineID+0x2b0>)
 8006f50:	2101      	movs	r1, #1
 8006f52:	2001      	movs	r0, #1
 8006f54:	f001 f840 	bl	8007fd8 <lcd_print>
        			lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006f58:	4a93      	ldr	r2, [pc, #588]	; (80071a8 <takeMachineID+0x2b4>)
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	2002      	movs	r0, #2
 8006f5e:	f001 f83b 	bl	8007fd8 <lcd_print>
 8006f62:	e009      	b.n	8006f78 <takeMachineID+0x84>
        		} else {
        			lcd_print(1, 1, " ID MUST BE  12 ");
 8006f64:	4a91      	ldr	r2, [pc, #580]	; (80071ac <takeMachineID+0x2b8>)
 8006f66:	2101      	movs	r1, #1
 8006f68:	2001      	movs	r0, #1
 8006f6a:	f001 f835 	bl	8007fd8 <lcd_print>
        			lcd_print(2, 1, "   CHARACTERS   ");
 8006f6e:	4a90      	ldr	r2, [pc, #576]	; (80071b0 <takeMachineID+0x2bc>)
 8006f70:	2101      	movs	r1, #1
 8006f72:	2002      	movs	r0, #2
 8006f74:	f001 f830 	bl	8007fd8 <lcd_print>
        		}
        		HAL_Delay(1250);
 8006f78:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8006f7c:	f001 fd82 	bl	8008a84 <HAL_Delay>

        		goto mainSection;
 8006f80:	e7bb      	b.n	8006efa <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006f82:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006f86:	9302      	str	r3, [sp, #8]
 8006f88:	236e      	movs	r3, #110	; 0x6e
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	4b89      	ldr	r3, [pc, #548]	; (80071b4 <takeMachineID+0x2c0>)
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	236e      	movs	r3, #110	; 0x6e
 8006f92:	2200      	movs	r2, #0
 8006f94:	21a0      	movs	r1, #160	; 0xa0
 8006f96:	4888      	ldr	r0, [pc, #544]	; (80071b8 <takeMachineID+0x2c4>)
 8006f98:	f002 fdfe 	bl	8009b98 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fa0:	f001 fd70 	bl	8008a84 <HAL_Delay>

            	break;
 8006fa4:	e138      	b.n	8007218 <takeMachineID+0x324>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	487c      	ldr	r0, [pc, #496]	; (800719c <takeMachineID+0x2a8>)
 8006faa:	f002 fb3b 	bl	8009624 <HAL_GPIO_ReadPin>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d111      	bne.n	8006fd8 <takeMachineID+0xe4>
        	if(cursorPosition == 7) {
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2b07      	cmp	r3, #7
 8006fb8:	d102      	bne.n	8006fc0 <takeMachineID+0xcc>
        		cursorPosition = 10;
 8006fba:	230a      	movs	r3, #10
 8006fbc:	60bb      	str	r3, [r7, #8]
 8006fbe:	e008      	b.n	8006fd2 <takeMachineID+0xde>
        	} else if (cursorPosition == 14) {
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b0e      	cmp	r3, #14
 8006fc4:	d102      	bne.n	8006fcc <takeMachineID+0xd8>
                cursorPosition = 3;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	60bb      	str	r3, [r7, #8]
 8006fca:	e002      	b.n	8006fd2 <takeMachineID+0xde>
            } else {
            	cursorPosition++;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006fd2:	2096      	movs	r0, #150	; 0x96
 8006fd4:	f001 fd56 	bl	8008a84 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006fd8:	2108      	movs	r1, #8
 8006fda:	4878      	ldr	r0, [pc, #480]	; (80071bc <takeMachineID+0x2c8>)
 8006fdc:	f002 fb22 	bl	8009624 <HAL_GPIO_ReadPin>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d111      	bne.n	800700a <takeMachineID+0x116>
            if (cursorPosition == 3) {
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d102      	bne.n	8006ff2 <takeMachineID+0xfe>
                cursorPosition = 14;
 8006fec:	230e      	movs	r3, #14
 8006fee:	60bb      	str	r3, [r7, #8]
 8006ff0:	e008      	b.n	8007004 <takeMachineID+0x110>
            } else if(cursorPosition == 10) {
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b0a      	cmp	r3, #10
 8006ff6:	d102      	bne.n	8006ffe <takeMachineID+0x10a>
            	cursorPosition = 7;
 8006ff8:	2307      	movs	r3, #7
 8006ffa:	60bb      	str	r3, [r7, #8]
 8006ffc:	e002      	b.n	8007004 <takeMachineID+0x110>
            } else {
            	cursorPosition--;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	3b01      	subs	r3, #1
 8007002:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8007004:	20fa      	movs	r0, #250	; 0xfa
 8007006:	f001 fd3d 	bl	8008a84 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800700a:	2102      	movs	r1, #2
 800700c:	4863      	ldr	r0, [pc, #396]	; (800719c <takeMachineID+0x2a8>)
 800700e:	f002 fb09 	bl	8009624 <HAL_GPIO_ReadPin>
 8007012:	4603      	mov	r3, r0
 8007014:	2b01      	cmp	r3, #1
 8007016:	f040 80a1 	bne.w	800715c <takeMachineID+0x268>
        	if(cursorPosition == 3) {
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d10a      	bne.n	8007036 <takeMachineID+0x142>
        		machineID[arrayPos] = '0';
 8007020:	4a5c      	ldr	r2, [pc, #368]	; (8007194 <takeMachineID+0x2a0>)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4413      	add	r3, r2
 8007026:	2230      	movs	r2, #48	; 0x30
 8007028:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 800702a:	4a62      	ldr	r2, [pc, #392]	; (80071b4 <takeMachineID+0x2c0>)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	4413      	add	r3, r2
 8007030:	2200      	movs	r2, #0
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	e07c      	b.n	8007130 <takeMachineID+0x23c>
        	} else if(cursorPosition == 4) {
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b04      	cmp	r3, #4
 800703a:	d10a      	bne.n	8007052 <takeMachineID+0x15e>
        		machineID[arrayPos] = '1';
 800703c:	4a55      	ldr	r2, [pc, #340]	; (8007194 <takeMachineID+0x2a0>)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4413      	add	r3, r2
 8007042:	2231      	movs	r2, #49	; 0x31
 8007044:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8007046:	4a5b      	ldr	r2, [pc, #364]	; (80071b4 <takeMachineID+0x2c0>)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	4413      	add	r3, r2
 800704c:	2201      	movs	r2, #1
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	e06e      	b.n	8007130 <takeMachineID+0x23c>
        	} else if(cursorPosition == 5) {
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b05      	cmp	r3, #5
 8007056:	d10a      	bne.n	800706e <takeMachineID+0x17a>
        		machineID[arrayPos] = '2';
 8007058:	4a4e      	ldr	r2, [pc, #312]	; (8007194 <takeMachineID+0x2a0>)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4413      	add	r3, r2
 800705e:	2232      	movs	r2, #50	; 0x32
 8007060:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8007062:	4a54      	ldr	r2, [pc, #336]	; (80071b4 <takeMachineID+0x2c0>)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	4413      	add	r3, r2
 8007068:	2202      	movs	r2, #2
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	e060      	b.n	8007130 <takeMachineID+0x23c>
        	} else if(cursorPosition == 6) {
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b06      	cmp	r3, #6
 8007072:	d10a      	bne.n	800708a <takeMachineID+0x196>
        		machineID[arrayPos] = '3';
 8007074:	4a47      	ldr	r2, [pc, #284]	; (8007194 <takeMachineID+0x2a0>)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4413      	add	r3, r2
 800707a:	2233      	movs	r2, #51	; 0x33
 800707c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 800707e:	4a4d      	ldr	r2, [pc, #308]	; (80071b4 <takeMachineID+0x2c0>)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	4413      	add	r3, r2
 8007084:	2203      	movs	r2, #3
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	e052      	b.n	8007130 <takeMachineID+0x23c>
        	} else if(cursorPosition == 7) {
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b07      	cmp	r3, #7
 800708e:	d10a      	bne.n	80070a6 <takeMachineID+0x1b2>
        		machineID[arrayPos] = '4';
 8007090:	4a40      	ldr	r2, [pc, #256]	; (8007194 <takeMachineID+0x2a0>)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4413      	add	r3, r2
 8007096:	2234      	movs	r2, #52	; 0x34
 8007098:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 800709a:	4a46      	ldr	r2, [pc, #280]	; (80071b4 <takeMachineID+0x2c0>)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	4413      	add	r3, r2
 80070a0:	2204      	movs	r2, #4
 80070a2:	701a      	strb	r2, [r3, #0]
 80070a4:	e044      	b.n	8007130 <takeMachineID+0x23c>
        	} else if(cursorPosition == 10) {
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b0a      	cmp	r3, #10
 80070aa:	d10a      	bne.n	80070c2 <takeMachineID+0x1ce>
        		machineID[arrayPos] = '5';
 80070ac:	4a39      	ldr	r2, [pc, #228]	; (8007194 <takeMachineID+0x2a0>)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4413      	add	r3, r2
 80070b2:	2235      	movs	r2, #53	; 0x35
 80070b4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 80070b6:	4a3f      	ldr	r2, [pc, #252]	; (80071b4 <takeMachineID+0x2c0>)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	4413      	add	r3, r2
 80070bc:	2205      	movs	r2, #5
 80070be:	701a      	strb	r2, [r3, #0]
 80070c0:	e036      	b.n	8007130 <takeMachineID+0x23c>
        	} else if(cursorPosition == 11) {
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b0b      	cmp	r3, #11
 80070c6:	d10a      	bne.n	80070de <takeMachineID+0x1ea>
        		machineID[arrayPos] = '6';
 80070c8:	4a32      	ldr	r2, [pc, #200]	; (8007194 <takeMachineID+0x2a0>)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	2236      	movs	r2, #54	; 0x36
 80070d0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 80070d2:	4a38      	ldr	r2, [pc, #224]	; (80071b4 <takeMachineID+0x2c0>)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	4413      	add	r3, r2
 80070d8:	2206      	movs	r2, #6
 80070da:	701a      	strb	r2, [r3, #0]
 80070dc:	e028      	b.n	8007130 <takeMachineID+0x23c>
        	} else if(cursorPosition == 12) {
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b0c      	cmp	r3, #12
 80070e2:	d10a      	bne.n	80070fa <takeMachineID+0x206>
        		machineID[arrayPos] = '7';
 80070e4:	4a2b      	ldr	r2, [pc, #172]	; (8007194 <takeMachineID+0x2a0>)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4413      	add	r3, r2
 80070ea:	2237      	movs	r2, #55	; 0x37
 80070ec:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 80070ee:	4a31      	ldr	r2, [pc, #196]	; (80071b4 <takeMachineID+0x2c0>)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	4413      	add	r3, r2
 80070f4:	2207      	movs	r2, #7
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	e01a      	b.n	8007130 <takeMachineID+0x23c>
        	} else if(cursorPosition == 13) {
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b0d      	cmp	r3, #13
 80070fe:	d10a      	bne.n	8007116 <takeMachineID+0x222>
        		machineID[arrayPos] = '8';
 8007100:	4a24      	ldr	r2, [pc, #144]	; (8007194 <takeMachineID+0x2a0>)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4413      	add	r3, r2
 8007106:	2238      	movs	r2, #56	; 0x38
 8007108:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 800710a:	4a2a      	ldr	r2, [pc, #168]	; (80071b4 <takeMachineID+0x2c0>)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	4413      	add	r3, r2
 8007110:	2208      	movs	r2, #8
 8007112:	701a      	strb	r2, [r3, #0]
 8007114:	e00c      	b.n	8007130 <takeMachineID+0x23c>
        	} else if(cursorPosition == 14) {
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b0e      	cmp	r3, #14
 800711a:	d109      	bne.n	8007130 <takeMachineID+0x23c>
        		machineID[arrayPos] = '9';
 800711c:	4a1d      	ldr	r2, [pc, #116]	; (8007194 <takeMachineID+0x2a0>)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4413      	add	r3, r2
 8007122:	2239      	movs	r2, #57	; 0x39
 8007124:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007126:	4a23      	ldr	r2, [pc, #140]	; (80071b4 <takeMachineID+0x2c0>)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	4413      	add	r3, r2
 800712c:	2209      	movs	r2, #9
 800712e:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	b2d9      	uxtb	r1, r3
 8007134:	4a17      	ldr	r2, [pc, #92]	; (8007194 <takeMachineID+0x2a0>)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4413      	add	r3, r2
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	2001      	movs	r0, #1
 8007140:	f000 ff5f 	bl	8008002 <lcd_print_char>

        	writeLoc++;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3301      	adds	r3, #1
 8007148:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3301      	adds	r3, #1
 800714e:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	3301      	adds	r3, #1
 8007154:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8007156:	2096      	movs	r0, #150	; 0x96
 8007158:	f001 fc94 	bl	8008a84 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800715c:	2104      	movs	r1, #4
 800715e:	480f      	ldr	r0, [pc, #60]	; (800719c <takeMachineID+0x2a8>)
 8007160:	f002 fa60 	bl	8009624 <HAL_GPIO_ReadPin>
 8007164:	4603      	mov	r3, r0
 8007166:	2b01      	cmp	r3, #1
 8007168:	d14f      	bne.n	800720a <takeMachineID+0x316>
            if(strlen(machineID) >= 1) {
 800716a:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <takeMachineID+0x2a0>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d048      	beq.n	8007204 <takeMachineID+0x310>
                machineID[arrayPos] = '\0';
 8007172:	4a08      	ldr	r2, [pc, #32]	; (8007194 <takeMachineID+0x2a0>)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4413      	add	r3, r2
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 800717c:	4a0d      	ldr	r2, [pc, #52]	; (80071b4 <takeMachineID+0x2c0>)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	4413      	add	r3, r2
 8007182:	2200      	movs	r2, #0
 8007184:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b05      	cmp	r3, #5
 800718a:	dd19      	ble.n	80071c0 <takeMachineID+0x2cc>
                	writeLoc--;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3b01      	subs	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	e01a      	b.n	80071ca <takeMachineID+0x2d6>
 8007194:	20000190 	.word	0x20000190
 8007198:	20000004 	.word	0x20000004
 800719c:	40010800 	.word	0x40010800
 80071a0:	2000020d 	.word	0x2000020d
 80071a4:	0800e054 	.word	0x0800e054
 80071a8:	0800e068 	.word	0x0800e068
 80071ac:	0800e07c 	.word	0x0800e07c
 80071b0:	0800e090 	.word	0x0800e090
 80071b4:	20000118 	.word	0x20000118
 80071b8:	20000374 	.word	0x20000374
 80071bc:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	dc01      	bgt.n	80071ca <takeMachineID+0x2d6>
                	writeLoc = 5;
 80071c6:	2305      	movs	r3, #5
 80071c8:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	dd06      	ble.n	80071de <takeMachineID+0x2ea>
                	arrayPos--;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	3b01      	subs	r3, #1
 80071da:	603b      	str	r3, [r7, #0]
 80071dc:	e007      	b.n	80071ee <takeMachineID+0x2fa>
                } else if(arrayPos < 0) {
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	da04      	bge.n	80071ee <takeMachineID+0x2fa>
                	arrayPos = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 80071e8:	4b0d      	ldr	r3, [pc, #52]	; (8007220 <takeMachineID+0x32c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	3304      	adds	r3, #4
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	4619      	mov	r1, r3
 80071f8:	2001      	movs	r0, #1
 80071fa:	f000 ff23 	bl	8008044 <lcd_delete_char>
                HAL_Delay(50);
 80071fe:	2032      	movs	r0, #50	; 0x32
 8007200:	f001 fc40 	bl	8008a84 <HAL_Delay>
            }

            HAL_Delay(150);
 8007204:	2096      	movs	r0, #150	; 0x96
 8007206:	f001 fc3d 	bl	8008a84 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	4619      	mov	r1, r3
 8007210:	2002      	movs	r0, #2
 8007212:	f000 fec2 	bl	8007f9a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007216:	e685      	b.n	8006f24 <takeMachineID+0x30>
    }
}
 8007218:	bf00      	nop
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20000004 	.word	0x20000004

08007224 <takeWifiSSID>:

void takeWifiSSID() {
 8007224:	b580      	push	{r7, lr}
 8007226:	b08a      	sub	sp, #40	; 0x28
 8007228:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 800722a:	2001      	movs	r0, #1
 800722c:	f000 ff32 	bl	8008094 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8007230:	2214      	movs	r2, #20
 8007232:	2100      	movs	r1, #0
 8007234:	48a4      	ldr	r0, [pc, #656]	; (80074c8 <takeWifiSSID+0x2a4>)
 8007236:	f005 fbcd 	bl	800c9d4 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800723a:	2301      	movs	r3, #1
 800723c:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800723e:	2307      	movs	r3, #7
 8007240:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007242:	2301      	movs	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007246:	2300      	movs	r3, #0
 8007248:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800724a:	4ba0      	ldr	r3, [pc, #640]	; (80074cc <takeWifiSSID+0x2a8>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8007250:	2101      	movs	r1, #1
 8007252:	2002      	movs	r0, #2
 8007254:	f7f9 fef4 	bl	8001040 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007258:	2108      	movs	r1, #8
 800725a:	489d      	ldr	r0, [pc, #628]	; (80074d0 <takeWifiSSID+0x2ac>)
 800725c:	f002 f9e2 	bl	8009624 <HAL_GPIO_ReadPin>
 8007260:	4603      	mov	r3, r0
 8007262:	2b01      	cmp	r3, #1
 8007264:	d13a      	bne.n	80072dc <takeWifiSSID+0xb8>
            lcd_cursor(0);
 8007266:	2000      	movs	r0, #0
 8007268:	f000 ff14 	bl	8008094 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 800726c:	4896      	ldr	r0, [pc, #600]	; (80074c8 <takeWifiSSID+0x2a4>)
 800726e:	f7f8 ffd9 	bl	8000224 <strlen>
 8007272:	4603      	mov	r3, r0
 8007274:	2b14      	cmp	r3, #20
 8007276:	d91f      	bls.n	80072b8 <takeWifiSSID+0x94>
                lcd_clear();
 8007278:	f000 feda 	bl	8008030 <lcd_clear>
                if(dilSecim == 1) {
 800727c:	4b95      	ldr	r3, [pc, #596]	; (80074d4 <takeWifiSSID+0x2b0>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d10a      	bne.n	800729a <takeWifiSSID+0x76>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007284:	4a94      	ldr	r2, [pc, #592]	; (80074d8 <takeWifiSSID+0x2b4>)
 8007286:	2101      	movs	r1, #1
 8007288:	2001      	movs	r0, #1
 800728a:	f000 fea5 	bl	8007fd8 <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 800728e:	4a93      	ldr	r2, [pc, #588]	; (80074dc <takeWifiSSID+0x2b8>)
 8007290:	2101      	movs	r1, #1
 8007292:	2002      	movs	r0, #2
 8007294:	f000 fea0 	bl	8007fd8 <lcd_print>
 8007298:	e009      	b.n	80072ae <takeWifiSSID+0x8a>
                } else {
                	lcd_print(1, 1, "SSID CANT EXCEED");
 800729a:	4a91      	ldr	r2, [pc, #580]	; (80074e0 <takeWifiSSID+0x2bc>)
 800729c:	2101      	movs	r1, #1
 800729e:	2001      	movs	r0, #1
 80072a0:	f000 fe9a 	bl	8007fd8 <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 80072a4:	4a8f      	ldr	r2, [pc, #572]	; (80074e4 <takeWifiSSID+0x2c0>)
 80072a6:	2101      	movs	r1, #1
 80072a8:	2002      	movs	r0, #2
 80072aa:	f000 fe95 	bl	8007fd8 <lcd_print>
                }
                HAL_Delay(1250);
 80072ae:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80072b2:	f001 fbe7 	bl	8008a84 <HAL_Delay>

                goto mainSSIDSection;
 80072b6:	e7b8      	b.n	800722a <takeWifiSSID+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80072b8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80072bc:	9302      	str	r3, [sp, #8]
 80072be:	236e      	movs	r3, #110	; 0x6e
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	4b89      	ldr	r3, [pc, #548]	; (80074e8 <takeWifiSSID+0x2c4>)
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	236e      	movs	r3, #110	; 0x6e
 80072c8:	2200      	movs	r2, #0
 80072ca:	21a0      	movs	r1, #160	; 0xa0
 80072cc:	4887      	ldr	r0, [pc, #540]	; (80074ec <takeWifiSSID+0x2c8>)
 80072ce:	f002 fc63 	bl	8009b98 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80072d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072d6:	f001 fbd5 	bl	8008a84 <HAL_Delay>

            	break;
 80072da:	e12a      	b.n	8007532 <takeWifiSSID+0x30e>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80072dc:	2101      	movs	r1, #1
 80072de:	487c      	ldr	r0, [pc, #496]	; (80074d0 <takeWifiSSID+0x2ac>)
 80072e0:	f002 f9a0 	bl	8009624 <HAL_GPIO_ReadPin>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d14d      	bne.n	8007386 <takeWifiSSID+0x162>
        	if(cursorPosition > 80) {
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b50      	cmp	r3, #80	; 0x50
 80072ee:	dd01      	ble.n	80072f4 <takeWifiSSID+0xd0>
        		cursorPosition = 1;
 80072f0:	2301      	movs	r3, #1
 80072f2:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b10      	cmp	r3, #16
 80072f8:	d13f      	bne.n	800737a <takeWifiSSID+0x156>
            	if(page == 1) {
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d109      	bne.n	8007314 <takeWifiSSID+0xf0>
            		cursorPosition = 1;
 8007300:	2301      	movs	r3, #1
 8007302:	60fb      	str	r3, [r7, #12]
            		page++;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	3301      	adds	r3, #1
 8007308:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800730a:	2102      	movs	r1, #2
 800730c:	2002      	movs	r0, #2
 800730e:	f7f9 fe97 	bl	8001040 <printTemplate>
 8007312:	e035      	b.n	8007380 <takeWifiSSID+0x15c>
            	} else if(page == 2) {
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	2b02      	cmp	r3, #2
 8007318:	d109      	bne.n	800732e <takeWifiSSID+0x10a>
            		cursorPosition = 1;
 800731a:	2301      	movs	r3, #1
 800731c:	60fb      	str	r3, [r7, #12]
            		page++;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	3301      	adds	r3, #1
 8007322:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007324:	2103      	movs	r1, #3
 8007326:	2002      	movs	r0, #2
 8007328:	f7f9 fe8a 	bl	8001040 <printTemplate>
 800732c:	e028      	b.n	8007380 <takeWifiSSID+0x15c>
            	} else if(page == 3) {
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2b03      	cmp	r3, #3
 8007332:	d109      	bne.n	8007348 <takeWifiSSID+0x124>
            		cursorPosition = 1;
 8007334:	2301      	movs	r3, #1
 8007336:	60fb      	str	r3, [r7, #12]
            		page++;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	3301      	adds	r3, #1
 800733c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800733e:	2104      	movs	r1, #4
 8007340:	2002      	movs	r0, #2
 8007342:	f7f9 fe7d 	bl	8001040 <printTemplate>
 8007346:	e01b      	b.n	8007380 <takeWifiSSID+0x15c>
            	} else if(page == 4) {
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b04      	cmp	r3, #4
 800734c:	d109      	bne.n	8007362 <takeWifiSSID+0x13e>
            		cursorPosition = 1;
 800734e:	2301      	movs	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]
            		page++;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	3301      	adds	r3, #1
 8007356:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007358:	2105      	movs	r1, #5
 800735a:	2002      	movs	r0, #2
 800735c:	f7f9 fe70 	bl	8001040 <printTemplate>
 8007360:	e00e      	b.n	8007380 <takeWifiSSID+0x15c>
            	} else if(page == 5) {
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2b05      	cmp	r3, #5
 8007366:	d10b      	bne.n	8007380 <takeWifiSSID+0x15c>
            		cursorPosition = 1;
 8007368:	2301      	movs	r3, #1
 800736a:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800736c:	2301      	movs	r3, #1
 800736e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007370:	2101      	movs	r1, #1
 8007372:	2002      	movs	r0, #2
 8007374:	f7f9 fe64 	bl	8001040 <printTemplate>
 8007378:	e002      	b.n	8007380 <takeWifiSSID+0x15c>
            	}
            } else {
            	cursorPosition++;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3301      	adds	r3, #1
 800737e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007380:	2096      	movs	r0, #150	; 0x96
 8007382:	f001 fb7f 	bl	8008a84 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007386:	2108      	movs	r1, #8
 8007388:	4859      	ldr	r0, [pc, #356]	; (80074f0 <takeWifiSSID+0x2cc>)
 800738a:	f002 f94b 	bl	8009624 <HAL_GPIO_ReadPin>
 800738e:	4603      	mov	r3, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	d149      	bne.n	8007428 <takeWifiSSID+0x204>
        	if(cursorPosition < 1) {
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	dc01      	bgt.n	800739e <takeWifiSSID+0x17a>
        		cursorPosition = 80;
 800739a:	2350      	movs	r3, #80	; 0x50
 800739c:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d13b      	bne.n	800741c <takeWifiSSID+0x1f8>
            	if(page == 1) {
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d108      	bne.n	80073bc <takeWifiSSID+0x198>
            		cursorPosition = 16;
 80073aa:	2310      	movs	r3, #16
 80073ac:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80073ae:	2305      	movs	r3, #5
 80073b0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80073b2:	2105      	movs	r1, #5
 80073b4:	2002      	movs	r0, #2
 80073b6:	f7f9 fe43 	bl	8001040 <printTemplate>
 80073ba:	e032      	b.n	8007422 <takeWifiSSID+0x1fe>
            	} else if(page == 2) {
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d108      	bne.n	80073d4 <takeWifiSSID+0x1b0>
            		cursorPosition = 16;
 80073c2:	2310      	movs	r3, #16
 80073c4:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80073c6:	2301      	movs	r3, #1
 80073c8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80073ca:	2101      	movs	r1, #1
 80073cc:	2002      	movs	r0, #2
 80073ce:	f7f9 fe37 	bl	8001040 <printTemplate>
 80073d2:	e026      	b.n	8007422 <takeWifiSSID+0x1fe>
            	} else if(page == 3) {
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d108      	bne.n	80073ec <takeWifiSSID+0x1c8>
            		cursorPosition = 16;
 80073da:	2310      	movs	r3, #16
 80073dc:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80073de:	2302      	movs	r3, #2
 80073e0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80073e2:	2102      	movs	r1, #2
 80073e4:	2002      	movs	r0, #2
 80073e6:	f7f9 fe2b 	bl	8001040 <printTemplate>
 80073ea:	e01a      	b.n	8007422 <takeWifiSSID+0x1fe>
            	} else if(page == 4) {
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d108      	bne.n	8007404 <takeWifiSSID+0x1e0>
            		cursorPosition = 16;
 80073f2:	2310      	movs	r3, #16
 80073f4:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80073f6:	2303      	movs	r3, #3
 80073f8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80073fa:	2103      	movs	r1, #3
 80073fc:	2002      	movs	r0, #2
 80073fe:	f7f9 fe1f 	bl	8001040 <printTemplate>
 8007402:	e00e      	b.n	8007422 <takeWifiSSID+0x1fe>
            	} else if(page == 5) {
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2b05      	cmp	r3, #5
 8007408:	d10b      	bne.n	8007422 <takeWifiSSID+0x1fe>
            		cursorPosition = 16;
 800740a:	2310      	movs	r3, #16
 800740c:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800740e:	2304      	movs	r3, #4
 8007410:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007412:	2104      	movs	r1, #4
 8007414:	2002      	movs	r0, #2
 8007416:	f7f9 fe13 	bl	8001040 <printTemplate>
 800741a:	e002      	b.n	8007422 <takeWifiSSID+0x1fe>
            	}
            } else {
            	cursorPosition--;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3b01      	subs	r3, #1
 8007420:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007422:	2096      	movs	r0, #150	; 0x96
 8007424:	f001 fb2e 	bl	8008a84 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007428:	2102      	movs	r1, #2
 800742a:	4829      	ldr	r0, [pc, #164]	; (80074d0 <takeWifiSSID+0x2ac>)
 800742c:	f002 f8fa 	bl	8009624 <HAL_GPIO_ReadPin>
 8007430:	4603      	mov	r3, r0
 8007432:	2b01      	cmp	r3, #1
 8007434:	d121      	bne.n	800747a <takeWifiSSID+0x256>
            eepromData[eepromVal] = cursorPosition;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	b2d9      	uxtb	r1, r3
 800743a:	4a2b      	ldr	r2, [pc, #172]	; (80074e8 <takeWifiSSID+0x2c4>)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4413      	add	r3, r2
 8007440:	460a      	mov	r2, r1
 8007442:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	b2d9      	uxtb	r1, r3
 8007448:	4a2a      	ldr	r2, [pc, #168]	; (80074f4 <takeWifiSSID+0x2d0>)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4413      	add	r3, r2
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	2001      	movs	r0, #1
 8007454:	f000 fdd5 	bl	8008002 <lcd_print_char>

            writeLoc++;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	3301      	adds	r3, #1
 800745c:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	3301      	adds	r3, #1
 8007462:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3301      	adds	r3, #1
 8007468:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 800746a:	4a1f      	ldr	r2, [pc, #124]	; (80074e8 <takeWifiSSID+0x2c4>)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4413      	add	r3, r2
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007474:	2096      	movs	r0, #150	; 0x96
 8007476:	f001 fb05 	bl	8008a84 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800747a:	2104      	movs	r1, #4
 800747c:	4814      	ldr	r0, [pc, #80]	; (80074d0 <takeWifiSSID+0x2ac>)
 800747e:	f002 f8d1 	bl	8009624 <HAL_GPIO_ReadPin>
 8007482:	4603      	mov	r3, r0
 8007484:	2b01      	cmp	r3, #1
 8007486:	d14d      	bne.n	8007524 <takeWifiSSID+0x300>
        	if(strlen(wifiSSID) >= 1) {
 8007488:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <takeWifiSSID+0x2a4>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d046      	beq.n	800751e <takeWifiSSID+0x2fa>
        		eepromData[eepromVal] = '\0';
 8007490:	4a15      	ldr	r2, [pc, #84]	; (80074e8 <takeWifiSSID+0x2c4>)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4413      	add	r3, r2
 8007496:	2200      	movs	r2, #0
 8007498:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	2b07      	cmp	r3, #7
 800749e:	dd03      	ble.n	80074a8 <takeWifiSSID+0x284>
        			writeLoc--;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	613b      	str	r3, [r7, #16]
 80074a6:	e004      	b.n	80074b2 <takeWifiSSID+0x28e>
        		} else if(writeLoc < 7) {
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	2b06      	cmp	r3, #6
 80074ac:	dc01      	bgt.n	80074b2 <takeWifiSSID+0x28e>
        			writeLoc = 7;
 80074ae:	2307      	movs	r3, #7
 80074b0:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dd1f      	ble.n	80074f8 <takeWifiSSID+0x2d4>
        			arrayPosition--;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	607b      	str	r3, [r7, #4]
 80074c4:	e020      	b.n	8007508 <takeWifiSSID+0x2e4>
 80074c6:	bf00      	nop
 80074c8:	2000019c 	.word	0x2000019c
 80074cc:	20000008 	.word	0x20000008
 80074d0:	40010800 	.word	0x40010800
 80074d4:	2000020d 	.word	0x2000020d
 80074d8:	0800e0a4 	.word	0x0800e0a4
 80074dc:	0800e0b8 	.word	0x0800e0b8
 80074e0:	0800e0cc 	.word	0x0800e0cc
 80074e4:	0800e0e0 	.word	0x0800e0e0
 80074e8:	20000118 	.word	0x20000118
 80074ec:	20000374 	.word	0x20000374
 80074f0:	40011000 	.word	0x40011000
 80074f4:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	da04      	bge.n	8007508 <takeWifiSSID+0x2e4>
        			arrayPosition = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007502:	4b0e      	ldr	r3, [pc, #56]	; (800753c <takeWifiSSID+0x318>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	b2db      	uxtb	r3, r3
 800750c:	3306      	adds	r3, #6
 800750e:	b2db      	uxtb	r3, r3
 8007510:	4619      	mov	r1, r3
 8007512:	2001      	movs	r0, #1
 8007514:	f000 fd96 	bl	8008044 <lcd_delete_char>
        		HAL_Delay(50);
 8007518:	2032      	movs	r0, #50	; 0x32
 800751a:	f001 fab3 	bl	8008a84 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800751e:	2096      	movs	r0, #150	; 0x96
 8007520:	f001 fab0 	bl	8008a84 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	4619      	mov	r1, r3
 800752a:	2002      	movs	r0, #2
 800752c:	f000 fd35 	bl	8007f9a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007530:	e692      	b.n	8007258 <takeWifiSSID+0x34>
    }
}
 8007532:	bf00      	nop
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20000008 	.word	0x20000008

08007540 <takeWifiPass>:

void takeWifiPass() {
 8007540:	b580      	push	{r7, lr}
 8007542:	b08a      	sub	sp, #40	; 0x28
 8007544:	af04      	add	r7, sp, #16
	mainPassSection:

    lcd_cursor(1);
 8007546:	2001      	movs	r0, #1
 8007548:	f000 fda4 	bl	8008094 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 800754c:	2214      	movs	r2, #20
 800754e:	2100      	movs	r1, #0
 8007550:	48a4      	ldr	r0, [pc, #656]	; (80077e4 <takeWifiPass+0x2a4>)
 8007552:	f005 fa3f 	bl	800c9d4 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007556:	2301      	movs	r3, #1
 8007558:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800755a:	2307      	movs	r3, #7
 800755c:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800755e:	2301      	movs	r3, #1
 8007560:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007562:	2300      	movs	r3, #0
 8007564:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007566:	4ba0      	ldr	r3, [pc, #640]	; (80077e8 <takeWifiPass+0x2a8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 800756c:	2101      	movs	r1, #1
 800756e:	2003      	movs	r0, #3
 8007570:	f7f9 fd66 	bl	8001040 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007574:	2108      	movs	r1, #8
 8007576:	489d      	ldr	r0, [pc, #628]	; (80077ec <takeWifiPass+0x2ac>)
 8007578:	f002 f854 	bl	8009624 <HAL_GPIO_ReadPin>
 800757c:	4603      	mov	r3, r0
 800757e:	2b01      	cmp	r3, #1
 8007580:	d13a      	bne.n	80075f8 <takeWifiPass+0xb8>
            lcd_cursor(0);
 8007582:	2000      	movs	r0, #0
 8007584:	f000 fd86 	bl	8008094 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8007588:	4899      	ldr	r0, [pc, #612]	; (80077f0 <takeWifiPass+0x2b0>)
 800758a:	f7f8 fe4b 	bl	8000224 <strlen>
 800758e:	4603      	mov	r3, r0
 8007590:	2b14      	cmp	r3, #20
 8007592:	d91f      	bls.n	80075d4 <takeWifiPass+0x94>
                lcd_clear();
 8007594:	f000 fd4c 	bl	8008030 <lcd_clear>
                if(dilSecim == 1) {
 8007598:	4b96      	ldr	r3, [pc, #600]	; (80077f4 <takeWifiPass+0x2b4>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d10a      	bne.n	80075b6 <takeWifiPass+0x76>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 80075a0:	4a95      	ldr	r2, [pc, #596]	; (80077f8 <takeWifiPass+0x2b8>)
 80075a2:	2101      	movs	r1, #1
 80075a4:	2001      	movs	r0, #1
 80075a6:	f000 fd17 	bl	8007fd8 <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 80075aa:	4a94      	ldr	r2, [pc, #592]	; (80077fc <takeWifiPass+0x2bc>)
 80075ac:	2101      	movs	r1, #1
 80075ae:	2002      	movs	r0, #2
 80075b0:	f000 fd12 	bl	8007fd8 <lcd_print>
 80075b4:	e009      	b.n	80075ca <takeWifiPass+0x8a>
                } else {
                	lcd_print(1, 1, "PASS CANT EXCEED");
 80075b6:	4a92      	ldr	r2, [pc, #584]	; (8007800 <takeWifiPass+0x2c0>)
 80075b8:	2101      	movs	r1, #1
 80075ba:	2001      	movs	r0, #1
 80075bc:	f000 fd0c 	bl	8007fd8 <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 80075c0:	4a90      	ldr	r2, [pc, #576]	; (8007804 <takeWifiPass+0x2c4>)
 80075c2:	2101      	movs	r1, #1
 80075c4:	2002      	movs	r0, #2
 80075c6:	f000 fd07 	bl	8007fd8 <lcd_print>
                }
                HAL_Delay(1250);
 80075ca:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80075ce:	f001 fa59 	bl	8008a84 <HAL_Delay>

                goto mainPassSection;
 80075d2:	e7b8      	b.n	8007546 <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80075d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80075d8:	9302      	str	r3, [sp, #8]
 80075da:	236e      	movs	r3, #110	; 0x6e
 80075dc:	9301      	str	r3, [sp, #4]
 80075de:	4b8a      	ldr	r3, [pc, #552]	; (8007808 <takeWifiPass+0x2c8>)
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	236e      	movs	r3, #110	; 0x6e
 80075e4:	2200      	movs	r2, #0
 80075e6:	21a0      	movs	r1, #160	; 0xa0
 80075e8:	4888      	ldr	r0, [pc, #544]	; (800780c <takeWifiPass+0x2cc>)
 80075ea:	f002 fad5 	bl	8009b98 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80075ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075f2:	f001 fa47 	bl	8008a84 <HAL_Delay>

            	break;
 80075f6:	e12c      	b.n	8007852 <takeWifiPass+0x312>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80075f8:	2101      	movs	r1, #1
 80075fa:	487c      	ldr	r0, [pc, #496]	; (80077ec <takeWifiPass+0x2ac>)
 80075fc:	f002 f812 	bl	8009624 <HAL_GPIO_ReadPin>
 8007600:	4603      	mov	r3, r0
 8007602:	2b01      	cmp	r3, #1
 8007604:	d14d      	bne.n	80076a2 <takeWifiPass+0x162>
        	if(cursorPosition > 80) {
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b50      	cmp	r3, #80	; 0x50
 800760a:	dd01      	ble.n	8007610 <takeWifiPass+0xd0>
        		cursorPosition = 1;
 800760c:	2301      	movs	r3, #1
 800760e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b10      	cmp	r3, #16
 8007614:	d13f      	bne.n	8007696 <takeWifiPass+0x156>
            	if(page == 1) {
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d109      	bne.n	8007630 <takeWifiPass+0xf0>
            		cursorPosition = 1;
 800761c:	2301      	movs	r3, #1
 800761e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	3301      	adds	r3, #1
 8007624:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007626:	2102      	movs	r1, #2
 8007628:	2003      	movs	r0, #3
 800762a:	f7f9 fd09 	bl	8001040 <printTemplate>
 800762e:	e035      	b.n	800769c <takeWifiPass+0x15c>
            	} else if(page == 2) {
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2b02      	cmp	r3, #2
 8007634:	d109      	bne.n	800764a <takeWifiPass+0x10a>
            		cursorPosition = 1;
 8007636:	2301      	movs	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]
            		page++;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	3301      	adds	r3, #1
 800763e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007640:	2103      	movs	r1, #3
 8007642:	2003      	movs	r0, #3
 8007644:	f7f9 fcfc 	bl	8001040 <printTemplate>
 8007648:	e028      	b.n	800769c <takeWifiPass+0x15c>
            	} else if(page == 3) {
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b03      	cmp	r3, #3
 800764e:	d109      	bne.n	8007664 <takeWifiPass+0x124>
            		cursorPosition = 1;
 8007650:	2301      	movs	r3, #1
 8007652:	60fb      	str	r3, [r7, #12]
            		page++;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	3301      	adds	r3, #1
 8007658:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800765a:	2104      	movs	r1, #4
 800765c:	2003      	movs	r0, #3
 800765e:	f7f9 fcef 	bl	8001040 <printTemplate>
 8007662:	e01b      	b.n	800769c <takeWifiPass+0x15c>
            	} else if(page == 4) {
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2b04      	cmp	r3, #4
 8007668:	d109      	bne.n	800767e <takeWifiPass+0x13e>
            		cursorPosition = 1;
 800766a:	2301      	movs	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
            		page++;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	3301      	adds	r3, #1
 8007672:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007674:	2105      	movs	r1, #5
 8007676:	2003      	movs	r0, #3
 8007678:	f7f9 fce2 	bl	8001040 <printTemplate>
 800767c:	e00e      	b.n	800769c <takeWifiPass+0x15c>
            	} else if(page == 5) {
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b05      	cmp	r3, #5
 8007682:	d10b      	bne.n	800769c <takeWifiPass+0x15c>
            		cursorPosition = 1;
 8007684:	2301      	movs	r3, #1
 8007686:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007688:	2301      	movs	r3, #1
 800768a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800768c:	2101      	movs	r1, #1
 800768e:	2003      	movs	r0, #3
 8007690:	f7f9 fcd6 	bl	8001040 <printTemplate>
 8007694:	e002      	b.n	800769c <takeWifiPass+0x15c>
            	}
            } else {
            	cursorPosition++;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3301      	adds	r3, #1
 800769a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800769c:	2096      	movs	r0, #150	; 0x96
 800769e:	f001 f9f1 	bl	8008a84 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80076a2:	2108      	movs	r1, #8
 80076a4:	485a      	ldr	r0, [pc, #360]	; (8007810 <takeWifiPass+0x2d0>)
 80076a6:	f001 ffbd 	bl	8009624 <HAL_GPIO_ReadPin>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d149      	bne.n	8007744 <takeWifiPass+0x204>
        	if(cursorPosition < 1) {
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	dc01      	bgt.n	80076ba <takeWifiPass+0x17a>
        		cursorPosition = 80;
 80076b6:	2350      	movs	r3, #80	; 0x50
 80076b8:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d13b      	bne.n	8007738 <takeWifiPass+0x1f8>
            	if(page == 1) {
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d108      	bne.n	80076d8 <takeWifiPass+0x198>
            		cursorPosition = 16;
 80076c6:	2310      	movs	r3, #16
 80076c8:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80076ca:	2305      	movs	r3, #5
 80076cc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80076ce:	2105      	movs	r1, #5
 80076d0:	2003      	movs	r0, #3
 80076d2:	f7f9 fcb5 	bl	8001040 <printTemplate>
 80076d6:	e032      	b.n	800773e <takeWifiPass+0x1fe>
            	} else if(page == 2) {
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d108      	bne.n	80076f0 <takeWifiPass+0x1b0>
            		cursorPosition = 16;
 80076de:	2310      	movs	r3, #16
 80076e0:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80076e2:	2301      	movs	r3, #1
 80076e4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80076e6:	2101      	movs	r1, #1
 80076e8:	2003      	movs	r0, #3
 80076ea:	f7f9 fca9 	bl	8001040 <printTemplate>
 80076ee:	e026      	b.n	800773e <takeWifiPass+0x1fe>
            	} else if(page == 3) {
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d108      	bne.n	8007708 <takeWifiPass+0x1c8>
            		cursorPosition = 16;
 80076f6:	2310      	movs	r3, #16
 80076f8:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80076fa:	2302      	movs	r3, #2
 80076fc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80076fe:	2102      	movs	r1, #2
 8007700:	2003      	movs	r0, #3
 8007702:	f7f9 fc9d 	bl	8001040 <printTemplate>
 8007706:	e01a      	b.n	800773e <takeWifiPass+0x1fe>
            	} else if(page == 4) {
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2b04      	cmp	r3, #4
 800770c:	d108      	bne.n	8007720 <takeWifiPass+0x1e0>
            		cursorPosition = 16;
 800770e:	2310      	movs	r3, #16
 8007710:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007712:	2303      	movs	r3, #3
 8007714:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007716:	2103      	movs	r1, #3
 8007718:	2003      	movs	r0, #3
 800771a:	f7f9 fc91 	bl	8001040 <printTemplate>
 800771e:	e00e      	b.n	800773e <takeWifiPass+0x1fe>
            	} else if(page == 5) {
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	2b05      	cmp	r3, #5
 8007724:	d10b      	bne.n	800773e <takeWifiPass+0x1fe>
            		cursorPosition = 16;
 8007726:	2310      	movs	r3, #16
 8007728:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800772a:	2304      	movs	r3, #4
 800772c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800772e:	2104      	movs	r1, #4
 8007730:	2003      	movs	r0, #3
 8007732:	f7f9 fc85 	bl	8001040 <printTemplate>
 8007736:	e002      	b.n	800773e <takeWifiPass+0x1fe>
            	}
            } else {
            	cursorPosition--;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3b01      	subs	r3, #1
 800773c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800773e:	2096      	movs	r0, #150	; 0x96
 8007740:	f001 f9a0 	bl	8008a84 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007744:	2102      	movs	r1, #2
 8007746:	4829      	ldr	r0, [pc, #164]	; (80077ec <takeWifiPass+0x2ac>)
 8007748:	f001 ff6c 	bl	8009624 <HAL_GPIO_ReadPin>
 800774c:	4603      	mov	r3, r0
 800774e:	2b01      	cmp	r3, #1
 8007750:	d121      	bne.n	8007796 <takeWifiPass+0x256>
            eepromData[eepromVal] = cursorPosition;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	b2d9      	uxtb	r1, r3
 8007756:	4a2c      	ldr	r2, [pc, #176]	; (8007808 <takeWifiPass+0x2c8>)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4413      	add	r3, r2
 800775c:	460a      	mov	r2, r1
 800775e:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	b2d9      	uxtb	r1, r3
 8007764:	4a2b      	ldr	r2, [pc, #172]	; (8007814 <takeWifiPass+0x2d4>)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	4413      	add	r3, r2
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	461a      	mov	r2, r3
 800776e:	2001      	movs	r0, #1
 8007770:	f000 fc47 	bl	8008002 <lcd_print_char>

            writeLoc++;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	3301      	adds	r3, #1
 8007778:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	3301      	adds	r3, #1
 800777e:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3301      	adds	r3, #1
 8007784:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8007786:	4a20      	ldr	r2, [pc, #128]	; (8007808 <takeWifiPass+0x2c8>)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4413      	add	r3, r2
 800778c:	2200      	movs	r2, #0
 800778e:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007790:	2096      	movs	r0, #150	; 0x96
 8007792:	f001 f977 	bl	8008a84 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007796:	2104      	movs	r1, #4
 8007798:	4814      	ldr	r0, [pc, #80]	; (80077ec <takeWifiPass+0x2ac>)
 800779a:	f001 ff43 	bl	8009624 <HAL_GPIO_ReadPin>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d14f      	bne.n	8007844 <takeWifiPass+0x304>
        	if(strlen(wifiSSID) >= 1) {
 80077a4:	4b12      	ldr	r3, [pc, #72]	; (80077f0 <takeWifiPass+0x2b0>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d048      	beq.n	800783e <takeWifiPass+0x2fe>
        		eepromData[eepromVal] = '\0';
 80077ac:	4a16      	ldr	r2, [pc, #88]	; (8007808 <takeWifiPass+0x2c8>)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4413      	add	r3, r2
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b07      	cmp	r3, #7
 80077ba:	dd03      	ble.n	80077c4 <takeWifiPass+0x284>
        			writeLoc--;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	3b01      	subs	r3, #1
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	e004      	b.n	80077ce <takeWifiPass+0x28e>
        		} else if(writeLoc < 7) {
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	2b06      	cmp	r3, #6
 80077c8:	dc01      	bgt.n	80077ce <takeWifiPass+0x28e>
        			writeLoc = 7;
 80077ca:	2307      	movs	r3, #7
 80077cc:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	dd21      	ble.n	8007818 <takeWifiPass+0x2d8>
        			arrayPosition--;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3b01      	subs	r3, #1
 80077de:	607b      	str	r3, [r7, #4]
 80077e0:	e022      	b.n	8007828 <takeWifiPass+0x2e8>
 80077e2:	bf00      	nop
 80077e4:	200001b0 	.word	0x200001b0
 80077e8:	2000000c 	.word	0x2000000c
 80077ec:	40010800 	.word	0x40010800
 80077f0:	2000019c 	.word	0x2000019c
 80077f4:	2000020d 	.word	0x2000020d
 80077f8:	0800e0a4 	.word	0x0800e0a4
 80077fc:	0800e0b8 	.word	0x0800e0b8
 8007800:	0800e0f4 	.word	0x0800e0f4
 8007804:	0800e0e0 	.word	0x0800e0e0
 8007808:	20000118 	.word	0x20000118
 800780c:	20000374 	.word	0x20000374
 8007810:	40011000 	.word	0x40011000
 8007814:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	da04      	bge.n	8007828 <takeWifiPass+0x2e8>
        			arrayPosition = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8007822:	4b0e      	ldr	r3, [pc, #56]	; (800785c <takeWifiPass+0x31c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	3306      	adds	r3, #6
 800782e:	b2db      	uxtb	r3, r3
 8007830:	4619      	mov	r1, r3
 8007832:	2001      	movs	r0, #1
 8007834:	f000 fc06 	bl	8008044 <lcd_delete_char>
        		HAL_Delay(50);
 8007838:	2032      	movs	r0, #50	; 0x32
 800783a:	f001 f923 	bl	8008a84 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800783e:	2096      	movs	r0, #150	; 0x96
 8007840:	f001 f920 	bl	8008a84 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	4619      	mov	r1, r3
 800784a:	2002      	movs	r0, #2
 800784c:	f000 fba5 	bl	8007f9a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007850:	e690      	b.n	8007574 <takeWifiPass+0x34>
    }
}
 8007852:	bf00      	nop
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	2000000c 	.word	0x2000000c

08007860 <mergeData>:

char* mergeData() {
 8007860:	b580      	push	{r7, lr}
 8007862:	b09c      	sub	sp, #112	; 0x70
 8007864:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8007866:	2300      	movs	r3, #0
 8007868:	63bb      	str	r3, [r7, #56]	; 0x38
 800786a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800786e:	2229      	movs	r2, #41	; 0x29
 8007870:	2100      	movs	r1, #0
 8007872:	4618      	mov	r0, r3
 8007874:	f005 f8ae 	bl	800c9d4 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007878:	4b65      	ldr	r3, [pc, #404]	; (8007a10 <mergeData+0x1b0>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	703b      	strb	r3, [r7, #0]
 800787e:	4b65      	ldr	r3, [pc, #404]	; (8007a14 <mergeData+0x1b4>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	707b      	strb	r3, [r7, #1]
 8007884:	4b64      	ldr	r3, [pc, #400]	; (8007a18 <mergeData+0x1b8>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	70bb      	strb	r3, [r7, #2]
 800788a:	4b64      	ldr	r3, [pc, #400]	; (8007a1c <mergeData+0x1bc>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	70fb      	strb	r3, [r7, #3]
 8007890:	4b63      	ldr	r3, [pc, #396]	; (8007a20 <mergeData+0x1c0>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	713b      	strb	r3, [r7, #4]
 8007896:	4b63      	ldr	r3, [pc, #396]	; (8007a24 <mergeData+0x1c4>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	717b      	strb	r3, [r7, #5]
 800789c:	4b62      	ldr	r3, [pc, #392]	; (8007a28 <mergeData+0x1c8>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	71bb      	strb	r3, [r7, #6]
 80078a2:	4b62      	ldr	r3, [pc, #392]	; (8007a2c <mergeData+0x1cc>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	71fb      	strb	r3, [r7, #7]
 80078a8:	4b61      	ldr	r3, [pc, #388]	; (8007a30 <mergeData+0x1d0>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	723b      	strb	r3, [r7, #8]
 80078ae:	4b61      	ldr	r3, [pc, #388]	; (8007a34 <mergeData+0x1d4>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	727b      	strb	r3, [r7, #9]
 80078b4:	4b60      	ldr	r3, [pc, #384]	; (8007a38 <mergeData+0x1d8>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	72bb      	strb	r3, [r7, #10]
 80078ba:	4b60      	ldr	r3, [pc, #384]	; (8007a3c <mergeData+0x1dc>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	72fb      	strb	r3, [r7, #11]
 80078c0:	4b5f      	ldr	r3, [pc, #380]	; (8007a40 <mergeData+0x1e0>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	733b      	strb	r3, [r7, #12]
 80078c6:	4b5f      	ldr	r3, [pc, #380]	; (8007a44 <mergeData+0x1e4>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	737b      	strb	r3, [r7, #13]
 80078cc:	4b5e      	ldr	r3, [pc, #376]	; (8007a48 <mergeData+0x1e8>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	73bb      	strb	r3, [r7, #14]
 80078d2:	4b5e      	ldr	r3, [pc, #376]	; (8007a4c <mergeData+0x1ec>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	73fb      	strb	r3, [r7, #15]
 80078d8:	4b5d      	ldr	r3, [pc, #372]	; (8007a50 <mergeData+0x1f0>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	743b      	strb	r3, [r7, #16]
 80078de:	4b5d      	ldr	r3, [pc, #372]	; (8007a54 <mergeData+0x1f4>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	747b      	strb	r3, [r7, #17]
 80078e4:	4b5c      	ldr	r3, [pc, #368]	; (8007a58 <mergeData+0x1f8>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	74bb      	strb	r3, [r7, #18]
 80078ea:	4b5c      	ldr	r3, [pc, #368]	; (8007a5c <mergeData+0x1fc>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	74fb      	strb	r3, [r7, #19]
 80078f0:	4b5b      	ldr	r3, [pc, #364]	; (8007a60 <mergeData+0x200>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	753b      	strb	r3, [r7, #20]
 80078f6:	4b5b      	ldr	r3, [pc, #364]	; (8007a64 <mergeData+0x204>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	757b      	strb	r3, [r7, #21]
 80078fc:	4b5a      	ldr	r3, [pc, #360]	; (8007a68 <mergeData+0x208>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	75bb      	strb	r3, [r7, #22]
 8007902:	4b5a      	ldr	r3, [pc, #360]	; (8007a6c <mergeData+0x20c>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	75fb      	strb	r3, [r7, #23]
 8007908:	4b59      	ldr	r3, [pc, #356]	; (8007a70 <mergeData+0x210>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	763b      	strb	r3, [r7, #24]
 800790e:	4b59      	ldr	r3, [pc, #356]	; (8007a74 <mergeData+0x214>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	767b      	strb	r3, [r7, #25]
 8007914:	4b58      	ldr	r3, [pc, #352]	; (8007a78 <mergeData+0x218>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	76bb      	strb	r3, [r7, #26]
 800791a:	4b58      	ldr	r3, [pc, #352]	; (8007a7c <mergeData+0x21c>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	76fb      	strb	r3, [r7, #27]
 8007920:	4b57      	ldr	r3, [pc, #348]	; (8007a80 <mergeData+0x220>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	773b      	strb	r3, [r7, #28]
 8007926:	4b57      	ldr	r3, [pc, #348]	; (8007a84 <mergeData+0x224>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	777b      	strb	r3, [r7, #29]
 800792c:	4b56      	ldr	r3, [pc, #344]	; (8007a88 <mergeData+0x228>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	77bb      	strb	r3, [r7, #30]
 8007932:	4b56      	ldr	r3, [pc, #344]	; (8007a8c <mergeData+0x22c>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	77fb      	strb	r3, [r7, #31]
 8007938:	4b55      	ldr	r3, [pc, #340]	; (8007a90 <mergeData+0x230>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f887 3020 	strb.w	r3, [r7, #32]
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007940:	4b54      	ldr	r3, [pc, #336]	; (8007a94 <mergeData+0x234>)
 8007942:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007946:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			eepromData[39],
 800794a:	4b52      	ldr	r3, [pc, #328]	; (8007a94 <mergeData+0x234>)
 800794c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			eepromData[40],
 8007954:	4b4f      	ldr	r3, [pc, #316]	; (8007a94 <mergeData+0x234>)
 8007956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800795a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			eepromData[41],
 800795e:	4b4d      	ldr	r3, [pc, #308]	; (8007a94 <mergeData+0x234>)
 8007960:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007964:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			eepromData[42],
 8007968:	4b4a      	ldr	r3, [pc, #296]	; (8007a94 <mergeData+0x234>)
 800796a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800796e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[43],
 8007972:	4b48      	ldr	r3, [pc, #288]	; (8007a94 <mergeData+0x234>)
 8007974:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007978:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[44],
 800797c:	4b45      	ldr	r3, [pc, #276]	; (8007a94 <mergeData+0x234>)
 800797e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[45],
 8007986:	4b43      	ldr	r3, [pc, #268]	; (8007a94 <mergeData+0x234>)
 8007988:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 800798c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[46],
 8007990:	4b40      	ldr	r3, [pc, #256]	; (8007a94 <mergeData+0x234>)
 8007992:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007996:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[47],
 800799a:	4b3e      	ldr	r3, [pc, #248]	; (8007a94 <mergeData+0x234>)
 800799c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80079a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079a4:	2306      	movs	r3, #6
 80079a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80079aa:	2300      	movs	r3, #0
 80079ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079ae:	e015      	b.n	80079dc <mergeData+0x17c>
	    sprintf(temp, "%u", uintVariables[i]);
 80079b0:	463a      	mov	r2, r7
 80079b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b4:	4413      	add	r3, r2
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079be:	4936      	ldr	r1, [pc, #216]	; (8007a98 <mergeData+0x238>)
 80079c0:	4618      	mov	r0, r3
 80079c2:	f004 ff6d 	bl	800c8a0 <siprintf>
	    strcat(combinedString, temp);
 80079c6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80079ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079ce:	4611      	mov	r1, r2
 80079d0:	4618      	mov	r0, r3
 80079d2:	f004 ffc7 	bl	800c964 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80079d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d8:	3301      	adds	r3, #1
 80079da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079de:	2b2b      	cmp	r3, #43	; 0x2b
 80079e0:	d9e6      	bls.n	80079b0 <mergeData+0x150>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80079e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7f8 fc1c 	bl	8000224 <strlen>
 80079ec:	4603      	mov	r3, r0
 80079ee:	3301      	adds	r3, #1
 80079f0:	4618      	mov	r0, r3
 80079f2:	f004 fea1 	bl	800c738 <malloc>
 80079f6:	4603      	mov	r3, r0
 80079f8:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80079fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079fe:	4619      	mov	r1, r3
 8007a00:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007a02:	f005 f82b 	bl	800ca5c <strcpy>
	return result;
 8007a06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3770      	adds	r7, #112	; 0x70
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	200001fb 	.word	0x200001fb
 8007a14:	200001ed 	.word	0x200001ed
 8007a18:	200001f0 	.word	0x200001f0
 8007a1c:	200001f1 	.word	0x200001f1
 8007a20:	200001f2 	.word	0x200001f2
 8007a24:	200001f9 	.word	0x200001f9
 8007a28:	200001f3 	.word	0x200001f3
 8007a2c:	200001f4 	.word	0x200001f4
 8007a30:	200001f8 	.word	0x200001f8
 8007a34:	200001f5 	.word	0x200001f5
 8007a38:	20000205 	.word	0x20000205
 8007a3c:	200001f6 	.word	0x200001f6
 8007a40:	20000206 	.word	0x20000206
 8007a44:	200001f7 	.word	0x200001f7
 8007a48:	20000207 	.word	0x20000207
 8007a4c:	200001fa 	.word	0x200001fa
 8007a50:	200001fc 	.word	0x200001fc
 8007a54:	200001fd 	.word	0x200001fd
 8007a58:	200001fe 	.word	0x200001fe
 8007a5c:	200001ff 	.word	0x200001ff
 8007a60:	20000200 	.word	0x20000200
 8007a64:	20000201 	.word	0x20000201
 8007a68:	20000202 	.word	0x20000202
 8007a6c:	20000203 	.word	0x20000203
 8007a70:	20000204 	.word	0x20000204
 8007a74:	20000208 	.word	0x20000208
 8007a78:	2000020a 	.word	0x2000020a
 8007a7c:	200001e9 	.word	0x200001e9
 8007a80:	200001ea 	.word	0x200001ea
 8007a84:	20000000 	.word	0x20000000
 8007a88:	20000001 	.word	0x20000001
 8007a8c:	200001eb 	.word	0x200001eb
 8007a90:	2000020d 	.word	0x2000020d
 8007a94:	20000118 	.word	0x20000118
 8007a98:	0800e108 	.word	0x0800e108

08007a9c <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af02      	add	r7, sp, #8
	if(dilSecim == 0) {
 8007aa2:	4b1b      	ldr	r3, [pc, #108]	; (8007b10 <convertAndSendData+0x74>)
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007aaa:	4a1a      	ldr	r2, [pc, #104]	; (8007b14 <convertAndSendData+0x78>)
 8007aac:	2101      	movs	r1, #1
 8007aae:	2001      	movs	r0, #1
 8007ab0:	f000 fa92 	bl	8007fd8 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007ab4:	4a18      	ldr	r2, [pc, #96]	; (8007b18 <convertAndSendData+0x7c>)
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	2002      	movs	r0, #2
 8007aba:	f000 fa8d 	bl	8007fd8 <lcd_print>
 8007abe:	e009      	b.n	8007ad4 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007ac0:	4a16      	ldr	r2, [pc, #88]	; (8007b1c <convertAndSendData+0x80>)
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	2001      	movs	r0, #1
 8007ac6:	f000 fa87 	bl	8007fd8 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007aca:	4a15      	ldr	r2, [pc, #84]	; (8007b20 <convertAndSendData+0x84>)
 8007acc:	2101      	movs	r1, #1
 8007ace:	2002      	movs	r0, #2
 8007ad0:	f000 fa82 	bl	8007fd8 <lcd_print>
	}

	for(int i=0; i<2; i++) {
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	607b      	str	r3, [r7, #4]
 8007ad8:	e00c      	b.n	8007af4 <convertAndSendData+0x58>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8007ada:	f7ff fec1 	bl	8007860 <mergeData>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	4b10      	ldr	r3, [pc, #64]	; (8007b24 <convertAndSendData+0x88>)
 8007ae4:	4a10      	ldr	r2, [pc, #64]	; (8007b28 <convertAndSendData+0x8c>)
 8007ae6:	4911      	ldr	r1, [pc, #68]	; (8007b2c <convertAndSendData+0x90>)
 8007ae8:	4811      	ldr	r0, [pc, #68]	; (8007b30 <convertAndSendData+0x94>)
 8007aea:	f7f8 ff51 	bl	8000990 <sendMachineData>
	for(int i=0; i<2; i++) {
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3301      	adds	r3, #1
 8007af2:	607b      	str	r3, [r7, #4]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	ddef      	ble.n	8007ada <convertAndSendData+0x3e>
	}

	HAL_Delay(500);
 8007afa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007afe:	f000 ffc1 	bl	8008a84 <HAL_Delay>
	lcd_clear();
 8007b02:	f000 fa95 	bl	8008030 <lcd_clear>
}
 8007b06:	bf00      	nop
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	2000020d 	.word	0x2000020d
 8007b14:	0800e10c 	.word	0x0800e10c
 8007b18:	0800e120 	.word	0x0800e120
 8007b1c:	0800e134 	.word	0x0800e134
 8007b20:	0800e148 	.word	0x0800e148
 8007b24:	200001b0 	.word	0x200001b0
 8007b28:	2000019c 	.word	0x2000019c
 8007b2c:	20000190 	.word	0x20000190
 8007b30:	20000410 	.word	0x20000410

08007b34 <iotSetup>:

void iotSetup() {
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af04      	add	r7, sp, #16
	if(iotMode != 0) {
 8007b3a:	4b39      	ldr	r3, [pc, #228]	; (8007c20 <iotSetup+0xec>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d016      	beq.n	8007b70 <iotSetup+0x3c>
		if(checkEEPROM4ID() != 1) {
 8007b42:	f000 f88b 	bl	8007c5c <checkEEPROM4ID>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d001      	beq.n	8007b50 <iotSetup+0x1c>
			takeMachineID();
 8007b4c:	f7ff f9d2 	bl	8006ef4 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007b50:	4834      	ldr	r0, [pc, #208]	; (8007c24 <iotSetup+0xf0>)
 8007b52:	f7f8 fb67 	bl	8000224 <strlen>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d801      	bhi.n	8007b60 <iotSetup+0x2c>
			takeWifiSSID();
 8007b5c:	f7ff fb62 	bl	8007224 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007b60:	4831      	ldr	r0, [pc, #196]	; (8007c28 <iotSetup+0xf4>)
 8007b62:	f7f8 fb5f 	bl	8000224 <strlen>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d801      	bhi.n	8007b70 <iotSetup+0x3c>
			takeWifiPass();
 8007b6c:	f7ff fce8 	bl	8007540 <takeWifiPass>
		}
	}

	if(setupCompleted != 1) {
 8007b70:	4b2e      	ldr	r3, [pc, #184]	; (8007c2c <iotSetup+0xf8>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d044      	beq.n	8007c02 <iotSetup+0xce>
		takeIDSection:
 8007b78:	bf00      	nop
		if(checkMachineID(&huart1, machineID) == 1) {
 8007b7a:	492d      	ldr	r1, [pc, #180]	; (8007c30 <iotSetup+0xfc>)
 8007b7c:	482d      	ldr	r0, [pc, #180]	; (8007c34 <iotSetup+0x100>)
 8007b7e:	f7f8 ffa7 	bl	8000ad0 <checkMachineID>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d119      	bne.n	8007bbc <iotSetup+0x88>
			setupCompleted = 1;
 8007b88:	4b28      	ldr	r3, [pc, #160]	; (8007c2c <iotSetup+0xf8>)
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	701a      	strb	r2, [r3, #0]
			eepromData[104] = setupCompleted;
 8007b8e:	4b27      	ldr	r3, [pc, #156]	; (8007c2c <iotSetup+0xf8>)
 8007b90:	781a      	ldrb	r2, [r3, #0]
 8007b92:	4b29      	ldr	r3, [pc, #164]	; (8007c38 <iotSetup+0x104>)
 8007b94:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			//EEPROMA yazma işlemini başlat
        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007b98:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007b9c:	9302      	str	r3, [sp, #8]
 8007b9e:	236e      	movs	r3, #110	; 0x6e
 8007ba0:	9301      	str	r3, [sp, #4]
 8007ba2:	4b25      	ldr	r3, [pc, #148]	; (8007c38 <iotSetup+0x104>)
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	236e      	movs	r3, #110	; 0x6e
 8007ba8:	2200      	movs	r2, #0
 8007baa:	21a0      	movs	r1, #160	; 0xa0
 8007bac:	4823      	ldr	r0, [pc, #140]	; (8007c3c <iotSetup+0x108>)
 8007bae:	f001 fff3 	bl	8009b98 <HAL_I2C_Mem_Write>
        	HAL_Delay(1000);
 8007bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bb6:	f000 ff65 	bl	8008a84 <HAL_Delay>
 8007bba:	e022      	b.n	8007c02 <iotSetup+0xce>
		} else {
			if(dilSecim == 1) {
 8007bbc:	4b20      	ldr	r3, [pc, #128]	; (8007c40 <iotSetup+0x10c>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d10a      	bne.n	8007bda <iotSetup+0xa6>
				//türkçe hata mesajı
				lcd_print(1, 1, " BU ID MAKINEDE ");
 8007bc4:	4a1f      	ldr	r2, [pc, #124]	; (8007c44 <iotSetup+0x110>)
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	2001      	movs	r0, #1
 8007bca:	f000 fa05 	bl	8007fd8 <lcd_print>
				lcd_print(2, 1, "  KULLANILAMAZ  ");
 8007bce:	4a1e      	ldr	r2, [pc, #120]	; (8007c48 <iotSetup+0x114>)
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	2002      	movs	r0, #2
 8007bd4:	f000 fa00 	bl	8007fd8 <lcd_print>
 8007bd8:	e009      	b.n	8007bee <iotSetup+0xba>
			} else {
				//ingilizce hata mesajı
				lcd_print(1, 1, "ID NOT AVAILABLE");
 8007bda:	4a1c      	ldr	r2, [pc, #112]	; (8007c4c <iotSetup+0x118>)
 8007bdc:	2101      	movs	r1, #1
 8007bde:	2001      	movs	r0, #1
 8007be0:	f000 f9fa 	bl	8007fd8 <lcd_print>
				lcd_print(2, 1, "FOR THIS MACHINE");
 8007be4:	4a1a      	ldr	r2, [pc, #104]	; (8007c50 <iotSetup+0x11c>)
 8007be6:	2101      	movs	r1, #1
 8007be8:	2002      	movs	r0, #2
 8007bea:	f000 f9f5 	bl	8007fd8 <lcd_print>
			}

			HAL_Delay(1250);
 8007bee:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007bf2:	f000 ff47 	bl	8008a84 <HAL_Delay>
			//Tekrar id alma işlemi
			takeMachineID();
 8007bf6:	f7ff f97d 	bl	8006ef4 <takeMachineID>
			HAL_Delay(200);
 8007bfa:	20c8      	movs	r0, #200	; 0xc8
 8007bfc:	f000 ff42 	bl	8008a84 <HAL_Delay>
			goto takeIDSection;
 8007c00:	e7bb      	b.n	8007b7a <iotSetup+0x46>
		}
	}

	ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8007c02:	4a14      	ldr	r2, [pc, #80]	; (8007c54 <iotSetup+0x120>)
 8007c04:	4914      	ldr	r1, [pc, #80]	; (8007c58 <iotSetup+0x124>)
 8007c06:	480b      	ldr	r0, [pc, #44]	; (8007c34 <iotSetup+0x100>)
 8007c08:	f7f8 fe18 	bl	800083c <ESP8266_Init>
	HAL_Delay(500);
 8007c0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c10:	f000 ff38 	bl	8008a84 <HAL_Delay>
	convertAndSendData();
 8007c14:	f7ff ff42 	bl	8007a9c <convertAndSendData>
}
 8007c18:	bf00      	nop
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	2000020b 	.word	0x2000020b
 8007c24:	2000019c 	.word	0x2000019c
 8007c28:	200001b0 	.word	0x200001b0
 8007c2c:	200001c4 	.word	0x200001c4
 8007c30:	20000190 	.word	0x20000190
 8007c34:	20000410 	.word	0x20000410
 8007c38:	20000118 	.word	0x20000118
 8007c3c:	20000374 	.word	0x20000374
 8007c40:	2000020d 	.word	0x2000020d
 8007c44:	0800e15c 	.word	0x0800e15c
 8007c48:	0800e170 	.word	0x0800e170
 8007c4c:	0800e184 	.word	0x0800e184
 8007c50:	0800e198 	.word	0x0800e198
 8007c54:	0800e1ac 	.word	0x0800e1ac
 8007c58:	0800e1c4 	.word	0x0800e1c4

08007c5c <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8007c62:	4b0f      	ldr	r3, [pc, #60]	; (8007ca0 <checkEEPROM4ID+0x44>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	607b      	str	r3, [r7, #4]
 8007c70:	e00d      	b.n	8007c8e <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8007c72:	4a0c      	ldr	r2, [pc, #48]	; (8007ca4 <checkEEPROM4ID+0x48>)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <checkEEPROM4ID+0x26>
			returnVal = 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3301      	adds	r3, #1
 8007c86:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	607b      	str	r3, [r7, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b0b      	cmp	r3, #11
 8007c92:	ddee      	ble.n	8007c72 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8007c94:	68bb      	ldr	r3, [r7, #8]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bc80      	pop	{r7}
 8007c9e:	4770      	bx	lr
 8007ca0:	20000004 	.word	0x20000004
 8007ca4:	20000118 	.word	0x20000118

08007ca8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	4603      	mov	r3, r0
 8007cb0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	f023 030f 	bic.w	r3, r3, #15
 8007cb8:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007cc0:	7b7b      	ldrb	r3, [r7, #13]
 8007cc2:	f043 030c 	orr.w	r3, r3, #12
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007cca:	7b7b      	ldrb	r3, [r7, #13]
 8007ccc:	f043 0308 	orr.w	r3, r3, #8
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007cd4:	7b3b      	ldrb	r3, [r7, #12]
 8007cd6:	f043 030c 	orr.w	r3, r3, #12
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007cde:	7b3b      	ldrb	r3, [r7, #12]
 8007ce0:	f043 0308 	orr.w	r3, r3, #8
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ce8:	bf00      	nop
 8007cea:	4825      	ldr	r0, [pc, #148]	; (8007d80 <lcd_send_cmd+0xd8>)
 8007cec:	f002 fac3 	bl	800a276 <HAL_I2C_GetError>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d0f9      	beq.n	8007cea <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007cf6:	bf00      	nop
 8007cf8:	4821      	ldr	r0, [pc, #132]	; (8007d80 <lcd_send_cmd+0xd8>)
 8007cfa:	f002 faaf 	bl	800a25c <HAL_I2C_GetState>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	d1f9      	bne.n	8007cf8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007d04:	4b1f      	ldr	r3, [pc, #124]	; (8007d84 <lcd_send_cmd+0xdc>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d116      	bne.n	8007d3a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	73fb      	strb	r3, [r7, #15]
 8007d10:	e00f      	b.n	8007d32 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	3310      	adds	r3, #16
 8007d16:	443b      	add	r3, r7
 8007d18:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	f022 0208 	bic.w	r2, r2, #8
 8007d22:	b2d2      	uxtb	r2, r2
 8007d24:	3310      	adds	r3, #16
 8007d26:	443b      	add	r3, r7
 8007d28:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	73fb      	strb	r3, [r7, #15]
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d9ec      	bls.n	8007d12 <lcd_send_cmd+0x6a>
 8007d38:	e015      	b.n	8007d66 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73bb      	strb	r3, [r7, #14]
 8007d3e:	e00f      	b.n	8007d60 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	3310      	adds	r3, #16
 8007d44:	443b      	add	r3, r7
 8007d46:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	f042 0208 	orr.w	r2, r2, #8
 8007d50:	b2d2      	uxtb	r2, r2
 8007d52:	3310      	adds	r3, #16
 8007d54:	443b      	add	r3, r7
 8007d56:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	73bb      	strb	r3, [r7, #14]
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d9ec      	bls.n	8007d40 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007d66:	f107 0208 	add.w	r2, r7, #8
 8007d6a:	2364      	movs	r3, #100	; 0x64
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	2304      	movs	r3, #4
 8007d70:	214e      	movs	r1, #78	; 0x4e
 8007d72:	4803      	ldr	r0, [pc, #12]	; (8007d80 <lcd_send_cmd+0xd8>)
 8007d74:	f001 fe12 	bl	800999c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	20000374 	.word	0x20000374
 8007d84:	2000034a 	.word	0x2000034a

08007d88 <lcd_send_data>:

void lcd_send_data (char data) {
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	4603      	mov	r3, r0
 8007d90:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	f023 030f 	bic.w	r3, r3, #15
 8007d98:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	011b      	lsls	r3, r3, #4
 8007d9e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007da0:	7b7b      	ldrb	r3, [r7, #13]
 8007da2:	f043 030d 	orr.w	r3, r3, #13
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007daa:	7b7b      	ldrb	r3, [r7, #13]
 8007dac:	f043 0309 	orr.w	r3, r3, #9
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007db4:	7b3b      	ldrb	r3, [r7, #12]
 8007db6:	f043 030d 	orr.w	r3, r3, #13
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007dbe:	7b3b      	ldrb	r3, [r7, #12]
 8007dc0:	f043 0309 	orr.w	r3, r3, #9
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007dc8:	bf00      	nop
 8007dca:	4825      	ldr	r0, [pc, #148]	; (8007e60 <lcd_send_data+0xd8>)
 8007dcc:	f002 fa53 	bl	800a276 <HAL_I2C_GetError>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d0f9      	beq.n	8007dca <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007dd6:	bf00      	nop
 8007dd8:	4821      	ldr	r0, [pc, #132]	; (8007e60 <lcd_send_data+0xd8>)
 8007dda:	f002 fa3f 	bl	800a25c <HAL_I2C_GetState>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b20      	cmp	r3, #32
 8007de2:	d1f9      	bne.n	8007dd8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007de4:	4b1f      	ldr	r3, [pc, #124]	; (8007e64 <lcd_send_data+0xdc>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d116      	bne.n	8007e1a <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007dec:	2300      	movs	r3, #0
 8007dee:	73fb      	strb	r3, [r7, #15]
 8007df0:	e00f      	b.n	8007e12 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	3310      	adds	r3, #16
 8007df6:	443b      	add	r3, r7
 8007df8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	f022 0208 	bic.w	r2, r2, #8
 8007e02:	b2d2      	uxtb	r2, r2
 8007e04:	3310      	adds	r3, #16
 8007e06:	443b      	add	r3, r7
 8007e08:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	73fb      	strb	r3, [r7, #15]
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d9ec      	bls.n	8007df2 <lcd_send_data+0x6a>
 8007e18:	e015      	b.n	8007e46 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73bb      	strb	r3, [r7, #14]
 8007e1e:	e00f      	b.n	8007e40 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	3310      	adds	r3, #16
 8007e24:	443b      	add	r3, r7
 8007e26:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	f042 0208 	orr.w	r2, r2, #8
 8007e30:	b2d2      	uxtb	r2, r2
 8007e32:	3310      	adds	r3, #16
 8007e34:	443b      	add	r3, r7
 8007e36:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	73bb      	strb	r3, [r7, #14]
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d9ec      	bls.n	8007e20 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007e46:	f107 0208 	add.w	r2, r7, #8
 8007e4a:	2364      	movs	r3, #100	; 0x64
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	2304      	movs	r3, #4
 8007e50:	214e      	movs	r1, #78	; 0x4e
 8007e52:	4803      	ldr	r0, [pc, #12]	; (8007e60 <lcd_send_data+0xd8>)
 8007e54:	f001 fda2 	bl	800999c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	20000374 	.word	0x20000374
 8007e64:	2000034a 	.word	0x2000034a

08007e68 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007e70:	e006      	b.n	8007e80 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	607a      	str	r2, [r7, #4]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7ff ff84 	bl	8007d88 <lcd_send_data>
	while (*str) {
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1f4      	bne.n	8007e72 <lcd_send_string+0xa>
	}
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af02      	add	r7, sp, #8
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	f023 030f 	bic.w	r3, r3, #15
 8007ea4:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	011b      	lsls	r3, r3, #4
 8007eaa:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007eac:	7b7b      	ldrb	r3, [r7, #13]
 8007eae:	f043 030d 	orr.w	r3, r3, #13
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007eb6:	7b7b      	ldrb	r3, [r7, #13]
 8007eb8:	f043 0309 	orr.w	r3, r3, #9
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007ec0:	7b3b      	ldrb	r3, [r7, #12]
 8007ec2:	f043 030d 	orr.w	r3, r3, #13
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007eca:	7b3b      	ldrb	r3, [r7, #12]
 8007ecc:	f043 0309 	orr.w	r3, r3, #9
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ed4:	bf00      	nop
 8007ed6:	4825      	ldr	r0, [pc, #148]	; (8007f6c <lcd_send_char+0xd8>)
 8007ed8:	f002 f9cd 	bl	800a276 <HAL_I2C_GetError>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	d0f9      	beq.n	8007ed6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ee2:	bf00      	nop
 8007ee4:	4821      	ldr	r0, [pc, #132]	; (8007f6c <lcd_send_char+0xd8>)
 8007ee6:	f002 f9b9 	bl	800a25c <HAL_I2C_GetState>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	d1f9      	bne.n	8007ee4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007ef0:	4b1f      	ldr	r3, [pc, #124]	; (8007f70 <lcd_send_char+0xdc>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d116      	bne.n	8007f26 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73fb      	strb	r3, [r7, #15]
 8007efc:	e00f      	b.n	8007f1e <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	3310      	adds	r3, #16
 8007f02:	443b      	add	r3, r7
 8007f04:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	f022 0208 	bic.w	r2, r2, #8
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	3310      	adds	r3, #16
 8007f12:	443b      	add	r3, r7
 8007f14:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	73fb      	strb	r3, [r7, #15]
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	d9ec      	bls.n	8007efe <lcd_send_char+0x6a>
 8007f24:	e015      	b.n	8007f52 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007f26:	2300      	movs	r3, #0
 8007f28:	73bb      	strb	r3, [r7, #14]
 8007f2a:	e00f      	b.n	8007f4c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
 8007f2e:	3310      	adds	r3, #16
 8007f30:	443b      	add	r3, r7
 8007f32:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	f042 0208 	orr.w	r2, r2, #8
 8007f3c:	b2d2      	uxtb	r2, r2
 8007f3e:	3310      	adds	r3, #16
 8007f40:	443b      	add	r3, r7
 8007f42:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	73bb      	strb	r3, [r7, #14]
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	2b03      	cmp	r3, #3
 8007f50:	d9ec      	bls.n	8007f2c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007f52:	f107 0208 	add.w	r2, r7, #8
 8007f56:	2364      	movs	r3, #100	; 0x64
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	2304      	movs	r3, #4
 8007f5c:	214e      	movs	r1, #78	; 0x4e
 8007f5e:	4803      	ldr	r0, [pc, #12]	; (8007f6c <lcd_send_char+0xd8>)
 8007f60:	f001 fd1c 	bl	800999c <HAL_I2C_Master_Transmit>
}
 8007f64:	bf00      	nop
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	20000374 	.word	0x20000374
 8007f70:	2000034a 	.word	0x2000034a

08007f74 <lcd_init>:

void lcd_init (void) {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007f78:	2002      	movs	r0, #2
 8007f7a:	f7ff fe95 	bl	8007ca8 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007f7e:	2028      	movs	r0, #40	; 0x28
 8007f80:	f7ff fe92 	bl	8007ca8 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007f84:	200c      	movs	r0, #12
 8007f86:	f7ff fe8f 	bl	8007ca8 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007f8a:	2080      	movs	r0, #128	; 0x80
 8007f8c:	f7ff fe8c 	bl	8007ca8 <lcd_send_cmd>
	lcd_backlight(1);
 8007f90:	2001      	movs	r0, #1
 8007f92:	f000 f86d 	bl	8008070 <lcd_backlight>
}
 8007f96:	bf00      	nop
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	460a      	mov	r2, r1
 8007fa4:	71fb      	strb	r3, [r7, #7]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d106      	bne.n	8007fbe <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007fb0:	79bb      	ldrb	r3, [r7, #6]
 8007fb2:	337f      	adds	r3, #127	; 0x7f
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7ff fe76 	bl	8007ca8 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007fbc:	e008      	b.n	8007fd0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007fbe:	79fb      	ldrb	r3, [r7, #7]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d105      	bne.n	8007fd0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007fc4:	79bb      	ldrb	r3, [r7, #6]
 8007fc6:	3b41      	subs	r3, #65	; 0x41
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7ff fe6c 	bl	8007ca8 <lcd_send_cmd>
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	603a      	str	r2, [r7, #0]
 8007fe2:	71fb      	strb	r3, [r7, #7]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007fe8:	79ba      	ldrb	r2, [r7, #6]
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	4611      	mov	r1, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7ff ffd3 	bl	8007f9a <lcd_gotoxy>
	lcd_send_string(str);
 8007ff4:	6838      	ldr	r0, [r7, #0]
 8007ff6:	f7ff ff37 	bl	8007e68 <lcd_send_string>
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
 8008008:	4603      	mov	r3, r0
 800800a:	71fb      	strb	r3, [r7, #7]
 800800c:	460b      	mov	r3, r1
 800800e:	71bb      	strb	r3, [r7, #6]
 8008010:	4613      	mov	r3, r2
 8008012:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008014:	79ba      	ldrb	r2, [r7, #6]
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	4611      	mov	r1, r2
 800801a:	4618      	mov	r0, r3
 800801c:	f7ff ffbd 	bl	8007f9a <lcd_gotoxy>
    lcd_send_char(ch);
 8008020:	797b      	ldrb	r3, [r7, #5]
 8008022:	4618      	mov	r0, r3
 8008024:	f7ff ff36 	bl	8007e94 <lcd_send_char>
}
 8008028:	bf00      	nop
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <lcd_clear>:

void lcd_clear(void) {
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008034:	2001      	movs	r0, #1
 8008036:	f7ff fe37 	bl	8007ca8 <lcd_send_cmd>
    HAL_Delay(2);
 800803a:	2002      	movs	r0, #2
 800803c:	f000 fd22 	bl	8008a84 <HAL_Delay>
}
 8008040:	bf00      	nop
 8008042:	bd80      	pop	{r7, pc}

08008044 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	460a      	mov	r2, r1
 800804e:	71fb      	strb	r3, [r7, #7]
 8008050:	4613      	mov	r3, r2
 8008052:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8008054:	79ba      	ldrb	r2, [r7, #6]
 8008056:	79fb      	ldrb	r3, [r7, #7]
 8008058:	4611      	mov	r1, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f7ff ff9d 	bl	8007f9a <lcd_gotoxy>

    lcd_send_char(' ');
 8008060:	2020      	movs	r0, #32
 8008062:	f7ff ff17 	bl	8007e94 <lcd_send_char>
}
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800807a:	4a05      	ldr	r2, [pc, #20]	; (8008090 <lcd_backlight+0x20>)
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8008080:	2000      	movs	r0, #0
 8008082:	f7ff fe11 	bl	8007ca8 <lcd_send_cmd>
}
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	2000034a 	.word	0x2000034a

08008094 <lcd_cursor>:

void lcd_cursor(int state) {
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d106      	bne.n	80080b0 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80080a2:	200e      	movs	r0, #14
 80080a4:	f7ff fe00 	bl	8007ca8 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80080a8:	200f      	movs	r0, #15
 80080aa:	f7ff fdfd 	bl	8007ca8 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80080ae:	e002      	b.n	80080b6 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80080b0:	200c      	movs	r0, #12
 80080b2:	f7ff fdf9 	bl	8007ca8 <lcd_send_cmd>
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80080c8:	4b04      	ldr	r3, [pc, #16]	; (80080dc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3301      	adds	r3, #1
 80080ce:	4a03      	ldr	r2, [pc, #12]	; (80080dc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80080d0:	6013      	str	r3, [r2, #0]
}
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bc80      	pop	{r7}
 80080da:	4770      	bx	lr
 80080dc:	200001c8 	.word	0x200001c8

080080e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80080e4:	f000 fc6c 	bl	80089c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80080e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080ec:	f000 fcca 	bl	8008a84 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80080f0:	f000 f89c 	bl	800822c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80080f4:	f000 f9be 	bl	8008474 <MX_GPIO_Init>
  MX_CAN_Init();
 80080f8:	f000 f8de 	bl	80082b8 <MX_CAN_Init>
  MX_I2C1_Init();
 80080fc:	f000 f910 	bl	8008320 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008100:	f000 f93c 	bl	800837c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008104:	f000 f98c 	bl	8008420 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008108:	2201      	movs	r2, #1
 800810a:	2140      	movs	r1, #64	; 0x40
 800810c:	483e      	ldr	r0, [pc, #248]	; (8008208 <main+0x128>)
 800810e:	f001 faa0 	bl	8009652 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008112:	2201      	movs	r2, #1
 8008114:	2180      	movs	r1, #128	; 0x80
 8008116:	483c      	ldr	r0, [pc, #240]	; (8008208 <main+0x128>)
 8008118:	f001 fa9b 	bl	8009652 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800811c:	200a      	movs	r0, #10
 800811e:	f000 fcb1 	bl	8008a84 <HAL_Delay>
  lcd_init();
 8008122:	f7ff ff27 	bl	8007f74 <lcd_init>
  HAL_Delay(10);
 8008126:	200a      	movs	r0, #10
 8008128:	f000 fcac 	bl	8008a84 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 800812c:	4837      	ldr	r0, [pc, #220]	; (800820c <main+0x12c>)
 800812e:	f003 f943 	bl	800b3b8 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008132:	bf00      	nop
 8008134:	4836      	ldr	r0, [pc, #216]	; (8008210 <main+0x130>)
 8008136:	f002 f89e 	bl	800a276 <HAL_I2C_GetError>
 800813a:	4603      	mov	r3, r0
 800813c:	2b04      	cmp	r3, #4
 800813e:	d0f9      	beq.n	8008134 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008140:	bf00      	nop
 8008142:	4833      	ldr	r0, [pc, #204]	; (8008210 <main+0x130>)
 8008144:	f002 f88a 	bl	800a25c <HAL_I2C_GetState>
 8008148:	4603      	mov	r3, r0
 800814a:	2b20      	cmp	r3, #32
 800814c:	d1f9      	bne.n	8008142 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800814e:	2200      	movs	r2, #0
 8008150:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008154:	482c      	ldr	r0, [pc, #176]	; (8008208 <main+0x128>)
 8008156:	f001 fa7c 	bl	8009652 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800815a:	2200      	movs	r2, #0
 800815c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008160:	4829      	ldr	r0, [pc, #164]	; (8008208 <main+0x128>)
 8008162:	f001 fa76 	bl	8009652 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008166:	2200      	movs	r2, #0
 8008168:	2104      	movs	r1, #4
 800816a:	4827      	ldr	r0, [pc, #156]	; (8008208 <main+0x128>)
 800816c:	f001 fa71 	bl	8009652 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008170:	2200      	movs	r2, #0
 8008172:	2102      	movs	r1, #2
 8008174:	4824      	ldr	r0, [pc, #144]	; (8008208 <main+0x128>)
 8008176:	f001 fa6c 	bl	8009652 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800817a:	2200      	movs	r2, #0
 800817c:	2101      	movs	r1, #1
 800817e:	4822      	ldr	r0, [pc, #136]	; (8008208 <main+0x128>)
 8008180:	f001 fa67 	bl	8009652 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008184:	2200      	movs	r2, #0
 8008186:	2120      	movs	r1, #32
 8008188:	4822      	ldr	r0, [pc, #136]	; (8008214 <main+0x134>)
 800818a:	f001 fa62 	bl	8009652 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800818e:	2200      	movs	r2, #0
 8008190:	2110      	movs	r1, #16
 8008192:	4820      	ldr	r0, [pc, #128]	; (8008214 <main+0x134>)
 8008194:	f001 fa5d 	bl	8009652 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008198:	2200      	movs	r2, #0
 800819a:	2180      	movs	r1, #128	; 0x80
 800819c:	481e      	ldr	r0, [pc, #120]	; (8008218 <main+0x138>)
 800819e:	f001 fa58 	bl	8009652 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80081a2:	2200      	movs	r2, #0
 80081a4:	2140      	movs	r1, #64	; 0x40
 80081a6:	481c      	ldr	r0, [pc, #112]	; (8008218 <main+0x138>)
 80081a8:	f001 fa53 	bl	8009652 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80081ac:	2200      	movs	r2, #0
 80081ae:	2120      	movs	r1, #32
 80081b0:	4819      	ldr	r0, [pc, #100]	; (8008218 <main+0x138>)
 80081b2:	f001 fa4e 	bl	8009652 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80081b6:	2200      	movs	r2, #0
 80081b8:	2110      	movs	r1, #16
 80081ba:	4817      	ldr	r0, [pc, #92]	; (8008218 <main+0x138>)
 80081bc:	f001 fa49 	bl	8009652 <HAL_GPIO_WritePin>

  i2cTest();
 80081c0:	f7f8 fe90 	bl	8000ee4 <i2cTest>
  HAL_Delay(100);
 80081c4:	2064      	movs	r0, #100	; 0x64
 80081c6:	f000 fc5d 	bl	8008a84 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80081ca:	4a14      	ldr	r2, [pc, #80]	; (800821c <main+0x13c>)
 80081cc:	2101      	movs	r1, #1
 80081ce:	2001      	movs	r0, #1
 80081d0:	f7ff ff02 	bl	8007fd8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80081d4:	4a12      	ldr	r2, [pc, #72]	; (8008220 <main+0x140>)
 80081d6:	2101      	movs	r1, #1
 80081d8:	2002      	movs	r0, #2
 80081da:	f7ff fefd 	bl	8007fd8 <lcd_print>
  HAL_Delay(1000);
 80081de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081e2:	f000 fc4f 	bl	8008a84 <HAL_Delay>
  lcd_clear();
 80081e6:	f7ff ff23 	bl	8008030 <lcd_clear>

  eepromKontrol();
 80081ea:	f7f8 f823 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 80081ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80081f2:	f000 fc47 	bl	8008a84 <HAL_Delay>

  backLightTimer = millis;
 80081f6:	4b0b      	ldr	r3, [pc, #44]	; (8008224 <main+0x144>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a0b      	ldr	r2, [pc, #44]	; (8008228 <main+0x148>)
 80081fc:	6013      	str	r3, [r2, #0]

  iotSetup();
 80081fe:	f7ff fc99 	bl	8007b34 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008202:	f7fe fcd5 	bl	8006bb0 <mainLoop>
 8008206:	e7fc      	b.n	8008202 <main+0x122>
 8008208:	40010c00 	.word	0x40010c00
 800820c:	200003c8 	.word	0x200003c8
 8008210:	20000374 	.word	0x20000374
 8008214:	40011000 	.word	0x40011000
 8008218:	40010800 	.word	0x40010800
 800821c:	0800e1cc 	.word	0x0800e1cc
 8008220:	0800e1e0 	.word	0x0800e1e0
 8008224:	200001c8 	.word	0x200001c8
 8008228:	200001e4 	.word	0x200001e4

0800822c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b090      	sub	sp, #64	; 0x40
 8008230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008232:	f107 0318 	add.w	r3, r7, #24
 8008236:	2228      	movs	r2, #40	; 0x28
 8008238:	2100      	movs	r1, #0
 800823a:	4618      	mov	r0, r3
 800823c:	f004 fbca 	bl	800c9d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008240:	1d3b      	adds	r3, r7, #4
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	605a      	str	r2, [r3, #4]
 8008248:	609a      	str	r2, [r3, #8]
 800824a:	60da      	str	r2, [r3, #12]
 800824c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800824e:	2301      	movs	r3, #1
 8008250:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008256:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008258:	2300      	movs	r3, #0
 800825a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800825c:	2301      	movs	r3, #1
 800825e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008260:	2302      	movs	r3, #2
 8008262:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800826a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800826e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008270:	f107 0318 	add.w	r3, r7, #24
 8008274:	4618      	mov	r0, r3
 8008276:	f002 fc3f 	bl	800aaf8 <HAL_RCC_OscConfig>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d001      	beq.n	8008284 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008280:	f000 f9a2 	bl	80085c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008284:	230f      	movs	r3, #15
 8008286:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008288:	2302      	movs	r3, #2
 800828a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800828c:	2300      	movs	r3, #0
 800828e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008296:	2300      	movs	r3, #0
 8008298:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800829a:	1d3b      	adds	r3, r7, #4
 800829c:	2102      	movs	r1, #2
 800829e:	4618      	mov	r0, r3
 80082a0:	f002 feac 	bl	800affc <HAL_RCC_ClockConfig>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80082aa:	f000 f98d 	bl	80085c8 <Error_Handler>
  }
}
 80082ae:	bf00      	nop
 80082b0:	3740      	adds	r7, #64	; 0x40
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80082bc:	4b16      	ldr	r3, [pc, #88]	; (8008318 <MX_CAN_Init+0x60>)
 80082be:	4a17      	ldr	r2, [pc, #92]	; (800831c <MX_CAN_Init+0x64>)
 80082c0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80082c2:	4b15      	ldr	r3, [pc, #84]	; (8008318 <MX_CAN_Init+0x60>)
 80082c4:	2210      	movs	r2, #16
 80082c6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80082c8:	4b13      	ldr	r3, [pc, #76]	; (8008318 <MX_CAN_Init+0x60>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80082ce:	4b12      	ldr	r3, [pc, #72]	; (8008318 <MX_CAN_Init+0x60>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80082d4:	4b10      	ldr	r3, [pc, #64]	; (8008318 <MX_CAN_Init+0x60>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80082da:	4b0f      	ldr	r3, [pc, #60]	; (8008318 <MX_CAN_Init+0x60>)
 80082dc:	2200      	movs	r2, #0
 80082de:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80082e0:	4b0d      	ldr	r3, [pc, #52]	; (8008318 <MX_CAN_Init+0x60>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80082e6:	4b0c      	ldr	r3, [pc, #48]	; (8008318 <MX_CAN_Init+0x60>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80082ec:	4b0a      	ldr	r3, [pc, #40]	; (8008318 <MX_CAN_Init+0x60>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80082f2:	4b09      	ldr	r3, [pc, #36]	; (8008318 <MX_CAN_Init+0x60>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80082f8:	4b07      	ldr	r3, [pc, #28]	; (8008318 <MX_CAN_Init+0x60>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80082fe:	4b06      	ldr	r3, [pc, #24]	; (8008318 <MX_CAN_Init+0x60>)
 8008300:	2200      	movs	r2, #0
 8008302:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008304:	4804      	ldr	r0, [pc, #16]	; (8008318 <MX_CAN_Init+0x60>)
 8008306:	f000 fbe1 	bl	8008acc <HAL_CAN_Init>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008310:	f000 f95a 	bl	80085c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008314:	bf00      	nop
 8008316:	bd80      	pop	{r7, pc}
 8008318:	2000034c 	.word	0x2000034c
 800831c:	40006400 	.word	0x40006400

08008320 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008324:	4b12      	ldr	r3, [pc, #72]	; (8008370 <MX_I2C1_Init+0x50>)
 8008326:	4a13      	ldr	r2, [pc, #76]	; (8008374 <MX_I2C1_Init+0x54>)
 8008328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800832a:	4b11      	ldr	r3, [pc, #68]	; (8008370 <MX_I2C1_Init+0x50>)
 800832c:	4a12      	ldr	r2, [pc, #72]	; (8008378 <MX_I2C1_Init+0x58>)
 800832e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008330:	4b0f      	ldr	r3, [pc, #60]	; (8008370 <MX_I2C1_Init+0x50>)
 8008332:	2200      	movs	r2, #0
 8008334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008336:	4b0e      	ldr	r3, [pc, #56]	; (8008370 <MX_I2C1_Init+0x50>)
 8008338:	2200      	movs	r2, #0
 800833a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800833c:	4b0c      	ldr	r3, [pc, #48]	; (8008370 <MX_I2C1_Init+0x50>)
 800833e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008342:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008344:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <MX_I2C1_Init+0x50>)
 8008346:	2200      	movs	r2, #0
 8008348:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800834a:	4b09      	ldr	r3, [pc, #36]	; (8008370 <MX_I2C1_Init+0x50>)
 800834c:	2200      	movs	r2, #0
 800834e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008350:	4b07      	ldr	r3, [pc, #28]	; (8008370 <MX_I2C1_Init+0x50>)
 8008352:	2200      	movs	r2, #0
 8008354:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008356:	4b06      	ldr	r3, [pc, #24]	; (8008370 <MX_I2C1_Init+0x50>)
 8008358:	2200      	movs	r2, #0
 800835a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800835c:	4804      	ldr	r0, [pc, #16]	; (8008370 <MX_I2C1_Init+0x50>)
 800835e:	f001 f9a9 	bl	80096b4 <HAL_I2C_Init>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008368:	f000 f92e 	bl	80085c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800836c:	bf00      	nop
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20000374 	.word	0x20000374
 8008374:	40005400 	.word	0x40005400
 8008378:	00061a80 	.word	0x00061a80

0800837c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008382:	f107 0308 	add.w	r3, r7, #8
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	605a      	str	r2, [r3, #4]
 800838c:	609a      	str	r2, [r3, #8]
 800838e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008390:	463b      	mov	r3, r7
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008398:	4b1f      	ldr	r3, [pc, #124]	; (8008418 <MX_TIM1_Init+0x9c>)
 800839a:	4a20      	ldr	r2, [pc, #128]	; (800841c <MX_TIM1_Init+0xa0>)
 800839c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800839e:	4b1e      	ldr	r3, [pc, #120]	; (8008418 <MX_TIM1_Init+0x9c>)
 80083a0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80083a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083a6:	4b1c      	ldr	r3, [pc, #112]	; (8008418 <MX_TIM1_Init+0x9c>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80083ac:	4b1a      	ldr	r3, [pc, #104]	; (8008418 <MX_TIM1_Init+0x9c>)
 80083ae:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80083b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083b4:	4b18      	ldr	r3, [pc, #96]	; (8008418 <MX_TIM1_Init+0x9c>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80083ba:	4b17      	ldr	r3, [pc, #92]	; (8008418 <MX_TIM1_Init+0x9c>)
 80083bc:	2200      	movs	r2, #0
 80083be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083c0:	4b15      	ldr	r3, [pc, #84]	; (8008418 <MX_TIM1_Init+0x9c>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80083c6:	4814      	ldr	r0, [pc, #80]	; (8008418 <MX_TIM1_Init+0x9c>)
 80083c8:	f002 ffa6 	bl	800b318 <HAL_TIM_Base_Init>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80083d2:	f000 f8f9 	bl	80085c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80083d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80083dc:	f107 0308 	add.w	r3, r7, #8
 80083e0:	4619      	mov	r1, r3
 80083e2:	480d      	ldr	r0, [pc, #52]	; (8008418 <MX_TIM1_Init+0x9c>)
 80083e4:	f003 f950 	bl	800b688 <HAL_TIM_ConfigClockSource>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80083ee:	f000 f8eb 	bl	80085c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80083f2:	2300      	movs	r3, #0
 80083f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083f6:	2300      	movs	r3, #0
 80083f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80083fa:	463b      	mov	r3, r7
 80083fc:	4619      	mov	r1, r3
 80083fe:	4806      	ldr	r0, [pc, #24]	; (8008418 <MX_TIM1_Init+0x9c>)
 8008400:	f003 fb3e 	bl	800ba80 <HAL_TIMEx_MasterConfigSynchronization>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800840a:	f000 f8dd 	bl	80085c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800840e:	bf00      	nop
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	200003c8 	.word	0x200003c8
 800841c:	40012c00 	.word	0x40012c00

08008420 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008424:	4b11      	ldr	r3, [pc, #68]	; (800846c <MX_USART1_UART_Init+0x4c>)
 8008426:	4a12      	ldr	r2, [pc, #72]	; (8008470 <MX_USART1_UART_Init+0x50>)
 8008428:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800842a:	4b10      	ldr	r3, [pc, #64]	; (800846c <MX_USART1_UART_Init+0x4c>)
 800842c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008430:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008432:	4b0e      	ldr	r3, [pc, #56]	; (800846c <MX_USART1_UART_Init+0x4c>)
 8008434:	2200      	movs	r2, #0
 8008436:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008438:	4b0c      	ldr	r3, [pc, #48]	; (800846c <MX_USART1_UART_Init+0x4c>)
 800843a:	2200      	movs	r2, #0
 800843c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800843e:	4b0b      	ldr	r3, [pc, #44]	; (800846c <MX_USART1_UART_Init+0x4c>)
 8008440:	2200      	movs	r2, #0
 8008442:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008444:	4b09      	ldr	r3, [pc, #36]	; (800846c <MX_USART1_UART_Init+0x4c>)
 8008446:	220c      	movs	r2, #12
 8008448:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800844a:	4b08      	ldr	r3, [pc, #32]	; (800846c <MX_USART1_UART_Init+0x4c>)
 800844c:	2200      	movs	r2, #0
 800844e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008450:	4b06      	ldr	r3, [pc, #24]	; (800846c <MX_USART1_UART_Init+0x4c>)
 8008452:	2200      	movs	r2, #0
 8008454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008456:	4805      	ldr	r0, [pc, #20]	; (800846c <MX_USART1_UART_Init+0x4c>)
 8008458:	f003 fb90 	bl	800bb7c <HAL_UART_Init>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008462:	f000 f8b1 	bl	80085c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008466:	bf00      	nop
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20000410 	.word	0x20000410
 8008470:	40013800 	.word	0x40013800

08008474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800847a:	f107 0310 	add.w	r3, r7, #16
 800847e:	2200      	movs	r2, #0
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	605a      	str	r2, [r3, #4]
 8008484:	609a      	str	r2, [r3, #8]
 8008486:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008488:	4b4b      	ldr	r3, [pc, #300]	; (80085b8 <MX_GPIO_Init+0x144>)
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	4a4a      	ldr	r2, [pc, #296]	; (80085b8 <MX_GPIO_Init+0x144>)
 800848e:	f043 0310 	orr.w	r3, r3, #16
 8008492:	6193      	str	r3, [r2, #24]
 8008494:	4b48      	ldr	r3, [pc, #288]	; (80085b8 <MX_GPIO_Init+0x144>)
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	f003 0310 	and.w	r3, r3, #16
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80084a0:	4b45      	ldr	r3, [pc, #276]	; (80085b8 <MX_GPIO_Init+0x144>)
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	4a44      	ldr	r2, [pc, #272]	; (80085b8 <MX_GPIO_Init+0x144>)
 80084a6:	f043 0320 	orr.w	r3, r3, #32
 80084aa:	6193      	str	r3, [r2, #24]
 80084ac:	4b42      	ldr	r3, [pc, #264]	; (80085b8 <MX_GPIO_Init+0x144>)
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	f003 0320 	and.w	r3, r3, #32
 80084b4:	60bb      	str	r3, [r7, #8]
 80084b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80084b8:	4b3f      	ldr	r3, [pc, #252]	; (80085b8 <MX_GPIO_Init+0x144>)
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	4a3e      	ldr	r2, [pc, #248]	; (80085b8 <MX_GPIO_Init+0x144>)
 80084be:	f043 0304 	orr.w	r3, r3, #4
 80084c2:	6193      	str	r3, [r2, #24]
 80084c4:	4b3c      	ldr	r3, [pc, #240]	; (80085b8 <MX_GPIO_Init+0x144>)
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	f003 0304 	and.w	r3, r3, #4
 80084cc:	607b      	str	r3, [r7, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80084d0:	4b39      	ldr	r3, [pc, #228]	; (80085b8 <MX_GPIO_Init+0x144>)
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	4a38      	ldr	r2, [pc, #224]	; (80085b8 <MX_GPIO_Init+0x144>)
 80084d6:	f043 0308 	orr.w	r3, r3, #8
 80084da:	6193      	str	r3, [r2, #24]
 80084dc:	4b36      	ldr	r3, [pc, #216]	; (80085b8 <MX_GPIO_Init+0x144>)
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	f003 0308 	and.w	r3, r3, #8
 80084e4:	603b      	str	r3, [r7, #0]
 80084e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80084e8:	2200      	movs	r2, #0
 80084ea:	21f0      	movs	r1, #240	; 0xf0
 80084ec:	4833      	ldr	r0, [pc, #204]	; (80085bc <MX_GPIO_Init+0x148>)
 80084ee:	f001 f8b0 	bl	8009652 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80084f2:	2200      	movs	r2, #0
 80084f4:	f241 0130 	movw	r1, #4144	; 0x1030
 80084f8:	4831      	ldr	r0, [pc, #196]	; (80085c0 <MX_GPIO_Init+0x14c>)
 80084fa:	f001 f8aa 	bl	8009652 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80084fe:	2200      	movs	r2, #0
 8008500:	f640 4107 	movw	r1, #3079	; 0xc07
 8008504:	482f      	ldr	r0, [pc, #188]	; (80085c4 <MX_GPIO_Init+0x150>)
 8008506:	f001 f8a4 	bl	8009652 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800850a:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800850e:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008510:	2300      	movs	r3, #0
 8008512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008514:	2300      	movs	r3, #0
 8008516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008518:	f107 0310 	add.w	r3, r7, #16
 800851c:	4619      	mov	r1, r3
 800851e:	4828      	ldr	r0, [pc, #160]	; (80085c0 <MX_GPIO_Init+0x14c>)
 8008520:	f000 fe20 	bl	8009164 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008524:	f248 130f 	movw	r3, #33039	; 0x810f
 8008528:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800852a:	2300      	movs	r3, #0
 800852c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800852e:	2300      	movs	r3, #0
 8008530:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008532:	f107 0310 	add.w	r3, r7, #16
 8008536:	4619      	mov	r1, r3
 8008538:	4820      	ldr	r0, [pc, #128]	; (80085bc <MX_GPIO_Init+0x148>)
 800853a:	f000 fe13 	bl	8009164 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800853e:	23f0      	movs	r3, #240	; 0xf0
 8008540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008542:	2301      	movs	r3, #1
 8008544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008546:	2300      	movs	r3, #0
 8008548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800854a:	2302      	movs	r3, #2
 800854c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800854e:	f107 0310 	add.w	r3, r7, #16
 8008552:	4619      	mov	r1, r3
 8008554:	4819      	ldr	r0, [pc, #100]	; (80085bc <MX_GPIO_Init+0x148>)
 8008556:	f000 fe05 	bl	8009164 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800855a:	f241 0330 	movw	r3, #4144	; 0x1030
 800855e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008560:	2301      	movs	r3, #1
 8008562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008564:	2300      	movs	r3, #0
 8008566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008568:	2302      	movs	r3, #2
 800856a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800856c:	f107 0310 	add.w	r3, r7, #16
 8008570:	4619      	mov	r1, r3
 8008572:	4813      	ldr	r0, [pc, #76]	; (80085c0 <MX_GPIO_Init+0x14c>)
 8008574:	f000 fdf6 	bl	8009164 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008578:	f640 4307 	movw	r3, #3079	; 0xc07
 800857c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800857e:	2301      	movs	r3, #1
 8008580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008582:	2300      	movs	r3, #0
 8008584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008586:	2302      	movs	r3, #2
 8008588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800858a:	f107 0310 	add.w	r3, r7, #16
 800858e:	4619      	mov	r1, r3
 8008590:	480c      	ldr	r0, [pc, #48]	; (80085c4 <MX_GPIO_Init+0x150>)
 8008592:	f000 fde7 	bl	8009164 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008596:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800859a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800859c:	2300      	movs	r3, #0
 800859e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a0:	2300      	movs	r3, #0
 80085a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085a4:	f107 0310 	add.w	r3, r7, #16
 80085a8:	4619      	mov	r1, r3
 80085aa:	4806      	ldr	r0, [pc, #24]	; (80085c4 <MX_GPIO_Init+0x150>)
 80085ac:	f000 fdda 	bl	8009164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80085b0:	bf00      	nop
 80085b2:	3720      	adds	r7, #32
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	40021000 	.word	0x40021000
 80085bc:	40010800 	.word	0x40010800
 80085c0:	40011000 	.word	0x40011000
 80085c4:	40010c00 	.word	0x40010c00

080085c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80085c8:	b480      	push	{r7}
 80085ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80085cc:	bf00      	nop
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr

080085d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80085da:	4b15      	ldr	r3, [pc, #84]	; (8008630 <HAL_MspInit+0x5c>)
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	4a14      	ldr	r2, [pc, #80]	; (8008630 <HAL_MspInit+0x5c>)
 80085e0:	f043 0301 	orr.w	r3, r3, #1
 80085e4:	6193      	str	r3, [r2, #24]
 80085e6:	4b12      	ldr	r3, [pc, #72]	; (8008630 <HAL_MspInit+0x5c>)
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	60bb      	str	r3, [r7, #8]
 80085f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80085f2:	4b0f      	ldr	r3, [pc, #60]	; (8008630 <HAL_MspInit+0x5c>)
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	4a0e      	ldr	r2, [pc, #56]	; (8008630 <HAL_MspInit+0x5c>)
 80085f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085fc:	61d3      	str	r3, [r2, #28]
 80085fe:	4b0c      	ldr	r3, [pc, #48]	; (8008630 <HAL_MspInit+0x5c>)
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008606:	607b      	str	r3, [r7, #4]
 8008608:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800860a:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <HAL_MspInit+0x60>)
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	4a04      	ldr	r2, [pc, #16]	; (8008634 <HAL_MspInit+0x60>)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008626:	bf00      	nop
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr
 8008630:	40021000 	.word	0x40021000
 8008634:	40010000 	.word	0x40010000

08008638 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008640:	f107 0310 	add.w	r3, r7, #16
 8008644:	2200      	movs	r2, #0
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	605a      	str	r2, [r3, #4]
 800864a:	609a      	str	r2, [r3, #8]
 800864c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a1c      	ldr	r2, [pc, #112]	; (80086c4 <HAL_CAN_MspInit+0x8c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d131      	bne.n	80086bc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008658:	4b1b      	ldr	r3, [pc, #108]	; (80086c8 <HAL_CAN_MspInit+0x90>)
 800865a:	69db      	ldr	r3, [r3, #28]
 800865c:	4a1a      	ldr	r2, [pc, #104]	; (80086c8 <HAL_CAN_MspInit+0x90>)
 800865e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008662:	61d3      	str	r3, [r2, #28]
 8008664:	4b18      	ldr	r3, [pc, #96]	; (80086c8 <HAL_CAN_MspInit+0x90>)
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800866c:	60fb      	str	r3, [r7, #12]
 800866e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008670:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <HAL_CAN_MspInit+0x90>)
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	4a14      	ldr	r2, [pc, #80]	; (80086c8 <HAL_CAN_MspInit+0x90>)
 8008676:	f043 0304 	orr.w	r3, r3, #4
 800867a:	6193      	str	r3, [r2, #24]
 800867c:	4b12      	ldr	r3, [pc, #72]	; (80086c8 <HAL_CAN_MspInit+0x90>)
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	60bb      	str	r3, [r7, #8]
 8008686:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008688:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800868c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800868e:	2300      	movs	r3, #0
 8008690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008692:	2300      	movs	r3, #0
 8008694:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008696:	f107 0310 	add.w	r3, r7, #16
 800869a:	4619      	mov	r1, r3
 800869c:	480b      	ldr	r0, [pc, #44]	; (80086cc <HAL_CAN_MspInit+0x94>)
 800869e:	f000 fd61 	bl	8009164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80086a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086a8:	2302      	movs	r3, #2
 80086aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80086ac:	2303      	movs	r3, #3
 80086ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086b0:	f107 0310 	add.w	r3, r7, #16
 80086b4:	4619      	mov	r1, r3
 80086b6:	4805      	ldr	r0, [pc, #20]	; (80086cc <HAL_CAN_MspInit+0x94>)
 80086b8:	f000 fd54 	bl	8009164 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80086bc:	bf00      	nop
 80086be:	3720      	adds	r7, #32
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	40006400 	.word	0x40006400
 80086c8:	40021000 	.word	0x40021000
 80086cc:	40010800 	.word	0x40010800

080086d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b088      	sub	sp, #32
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086d8:	f107 0310 	add.w	r3, r7, #16
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	605a      	str	r2, [r3, #4]
 80086e2:	609a      	str	r2, [r3, #8]
 80086e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a15      	ldr	r2, [pc, #84]	; (8008740 <HAL_I2C_MspInit+0x70>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d123      	bne.n	8008738 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086f0:	4b14      	ldr	r3, [pc, #80]	; (8008744 <HAL_I2C_MspInit+0x74>)
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	4a13      	ldr	r2, [pc, #76]	; (8008744 <HAL_I2C_MspInit+0x74>)
 80086f6:	f043 0308 	orr.w	r3, r3, #8
 80086fa:	6193      	str	r3, [r2, #24]
 80086fc:	4b11      	ldr	r3, [pc, #68]	; (8008744 <HAL_I2C_MspInit+0x74>)
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	f003 0308 	and.w	r3, r3, #8
 8008704:	60fb      	str	r3, [r7, #12]
 8008706:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008708:	23c0      	movs	r3, #192	; 0xc0
 800870a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800870c:	2312      	movs	r3, #18
 800870e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008710:	2303      	movs	r3, #3
 8008712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008714:	f107 0310 	add.w	r3, r7, #16
 8008718:	4619      	mov	r1, r3
 800871a:	480b      	ldr	r0, [pc, #44]	; (8008748 <HAL_I2C_MspInit+0x78>)
 800871c:	f000 fd22 	bl	8009164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008720:	4b08      	ldr	r3, [pc, #32]	; (8008744 <HAL_I2C_MspInit+0x74>)
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	4a07      	ldr	r2, [pc, #28]	; (8008744 <HAL_I2C_MspInit+0x74>)
 8008726:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800872a:	61d3      	str	r3, [r2, #28]
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <HAL_I2C_MspInit+0x74>)
 800872e:	69db      	ldr	r3, [r3, #28]
 8008730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008734:	60bb      	str	r3, [r7, #8]
 8008736:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008738:	bf00      	nop
 800873a:	3720      	adds	r7, #32
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	40005400 	.word	0x40005400
 8008744:	40021000 	.word	0x40021000
 8008748:	40010c00 	.word	0x40010c00

0800874c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a0a      	ldr	r2, [pc, #40]	; (8008784 <HAL_I2C_MspDeInit+0x38>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d10d      	bne.n	800877a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800875e:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <HAL_I2C_MspDeInit+0x3c>)
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	4a09      	ldr	r2, [pc, #36]	; (8008788 <HAL_I2C_MspDeInit+0x3c>)
 8008764:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008768:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800876a:	2140      	movs	r1, #64	; 0x40
 800876c:	4807      	ldr	r0, [pc, #28]	; (800878c <HAL_I2C_MspDeInit+0x40>)
 800876e:	f000 fe8d 	bl	800948c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008772:	2180      	movs	r1, #128	; 0x80
 8008774:	4805      	ldr	r0, [pc, #20]	; (800878c <HAL_I2C_MspDeInit+0x40>)
 8008776:	f000 fe89 	bl	800948c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800877a:	bf00      	nop
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	40005400 	.word	0x40005400
 8008788:	40021000 	.word	0x40021000
 800878c:	40010c00 	.word	0x40010c00

08008790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a0d      	ldr	r2, [pc, #52]	; (80087d4 <HAL_TIM_Base_MspInit+0x44>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d113      	bne.n	80087ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80087a2:	4b0d      	ldr	r3, [pc, #52]	; (80087d8 <HAL_TIM_Base_MspInit+0x48>)
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	4a0c      	ldr	r2, [pc, #48]	; (80087d8 <HAL_TIM_Base_MspInit+0x48>)
 80087a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80087ac:	6193      	str	r3, [r2, #24]
 80087ae:	4b0a      	ldr	r3, [pc, #40]	; (80087d8 <HAL_TIM_Base_MspInit+0x48>)
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80087ba:	2200      	movs	r2, #0
 80087bc:	2100      	movs	r1, #0
 80087be:	2019      	movs	r0, #25
 80087c0:	f000 fb57 	bl	8008e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80087c4:	2019      	movs	r0, #25
 80087c6:	f000 fb70 	bl	8008eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80087ca:	bf00      	nop
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	40012c00 	.word	0x40012c00
 80087d8:	40021000 	.word	0x40021000

080087dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b088      	sub	sp, #32
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087e4:	f107 0310 	add.w	r3, r7, #16
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	605a      	str	r2, [r3, #4]
 80087ee:	609a      	str	r2, [r3, #8]
 80087f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a20      	ldr	r2, [pc, #128]	; (8008878 <HAL_UART_MspInit+0x9c>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d139      	bne.n	8008870 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80087fc:	4b1f      	ldr	r3, [pc, #124]	; (800887c <HAL_UART_MspInit+0xa0>)
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	4a1e      	ldr	r2, [pc, #120]	; (800887c <HAL_UART_MspInit+0xa0>)
 8008802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008806:	6193      	str	r3, [r2, #24]
 8008808:	4b1c      	ldr	r3, [pc, #112]	; (800887c <HAL_UART_MspInit+0xa0>)
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008810:	60fb      	str	r3, [r7, #12]
 8008812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008814:	4b19      	ldr	r3, [pc, #100]	; (800887c <HAL_UART_MspInit+0xa0>)
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	4a18      	ldr	r2, [pc, #96]	; (800887c <HAL_UART_MspInit+0xa0>)
 800881a:	f043 0304 	orr.w	r3, r3, #4
 800881e:	6193      	str	r3, [r2, #24]
 8008820:	4b16      	ldr	r3, [pc, #88]	; (800887c <HAL_UART_MspInit+0xa0>)
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	f003 0304 	and.w	r3, r3, #4
 8008828:	60bb      	str	r3, [r7, #8]
 800882a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800882c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008832:	2302      	movs	r3, #2
 8008834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008836:	2303      	movs	r3, #3
 8008838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800883a:	f107 0310 	add.w	r3, r7, #16
 800883e:	4619      	mov	r1, r3
 8008840:	480f      	ldr	r0, [pc, #60]	; (8008880 <HAL_UART_MspInit+0xa4>)
 8008842:	f000 fc8f 	bl	8009164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800884a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800884c:	2300      	movs	r3, #0
 800884e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008850:	2300      	movs	r3, #0
 8008852:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008854:	f107 0310 	add.w	r3, r7, #16
 8008858:	4619      	mov	r1, r3
 800885a:	4809      	ldr	r0, [pc, #36]	; (8008880 <HAL_UART_MspInit+0xa4>)
 800885c:	f000 fc82 	bl	8009164 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008860:	2200      	movs	r2, #0
 8008862:	2100      	movs	r1, #0
 8008864:	2025      	movs	r0, #37	; 0x25
 8008866:	f000 fb04 	bl	8008e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800886a:	2025      	movs	r0, #37	; 0x25
 800886c:	f000 fb1d 	bl	8008eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008870:	bf00      	nop
 8008872:	3720      	adds	r7, #32
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	40013800 	.word	0x40013800
 800887c:	40021000 	.word	0x40021000
 8008880:	40010800 	.word	0x40010800

08008884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008884:	b480      	push	{r7}
 8008886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008888:	e7fe      	b.n	8008888 <NMI_Handler+0x4>

0800888a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800888a:	b480      	push	{r7}
 800888c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800888e:	e7fe      	b.n	800888e <HardFault_Handler+0x4>

08008890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008890:	b480      	push	{r7}
 8008892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008894:	e7fe      	b.n	8008894 <MemManage_Handler+0x4>

08008896 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008896:	b480      	push	{r7}
 8008898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800889a:	e7fe      	b.n	800889a <BusFault_Handler+0x4>

0800889c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088a0:	e7fe      	b.n	80088a0 <UsageFault_Handler+0x4>

080088a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80088a2:	b480      	push	{r7}
 80088a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088a6:	bf00      	nop
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bc80      	pop	{r7}
 80088ac:	4770      	bx	lr

080088ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088ae:	b480      	push	{r7}
 80088b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088b2:	bf00      	nop
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bc80      	pop	{r7}
 80088b8:	4770      	bx	lr

080088ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80088ba:	b480      	push	{r7}
 80088bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80088be:	bf00      	nop
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bc80      	pop	{r7}
 80088c4:	4770      	bx	lr

080088c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088ca:	f000 f8bf 	bl	8008a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088ce:	bf00      	nop
 80088d0:	bd80      	pop	{r7, pc}
	...

080088d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80088d8:	4802      	ldr	r0, [pc, #8]	; (80088e4 <TIM1_UP_IRQHandler+0x10>)
 80088da:	f002 fdcd 	bl	800b478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80088de:	bf00      	nop
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	200003c8 	.word	0x200003c8

080088e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80088ec:	4802      	ldr	r0, [pc, #8]	; (80088f8 <USART1_IRQHandler+0x10>)
 80088ee:	f003 f9ef 	bl	800bcd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80088f2:	bf00      	nop
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20000410 	.word	0x20000410

080088fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008904:	4a14      	ldr	r2, [pc, #80]	; (8008958 <_sbrk+0x5c>)
 8008906:	4b15      	ldr	r3, [pc, #84]	; (800895c <_sbrk+0x60>)
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008910:	4b13      	ldr	r3, [pc, #76]	; (8008960 <_sbrk+0x64>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d102      	bne.n	800891e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008918:	4b11      	ldr	r3, [pc, #68]	; (8008960 <_sbrk+0x64>)
 800891a:	4a12      	ldr	r2, [pc, #72]	; (8008964 <_sbrk+0x68>)
 800891c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800891e:	4b10      	ldr	r3, [pc, #64]	; (8008960 <_sbrk+0x64>)
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4413      	add	r3, r2
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	429a      	cmp	r2, r3
 800892a:	d207      	bcs.n	800893c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800892c:	f004 f86a 	bl	800ca04 <__errno>
 8008930:	4603      	mov	r3, r0
 8008932:	220c      	movs	r2, #12
 8008934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800893a:	e009      	b.n	8008950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800893c:	4b08      	ldr	r3, [pc, #32]	; (8008960 <_sbrk+0x64>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008942:	4b07      	ldr	r3, [pc, #28]	; (8008960 <_sbrk+0x64>)
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4413      	add	r3, r2
 800894a:	4a05      	ldr	r2, [pc, #20]	; (8008960 <_sbrk+0x64>)
 800894c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800894e:	68fb      	ldr	r3, [r7, #12]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	2000c000 	.word	0x2000c000
 800895c:	00000400 	.word	0x00000400
 8008960:	20000458 	.word	0x20000458
 8008964:	200005a8 	.word	0x200005a8

08008968 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008968:	b480      	push	{r7}
 800896a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800896c:	bf00      	nop
 800896e:	46bd      	mov	sp, r7
 8008970:	bc80      	pop	{r7}
 8008972:	4770      	bx	lr

08008974 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008974:	480c      	ldr	r0, [pc, #48]	; (80089a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008976:	490d      	ldr	r1, [pc, #52]	; (80089ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008978:	4a0d      	ldr	r2, [pc, #52]	; (80089b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800897a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800897c:	e002      	b.n	8008984 <LoopCopyDataInit>

0800897e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800897e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008982:	3304      	adds	r3, #4

08008984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008988:	d3f9      	bcc.n	800897e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800898a:	4a0a      	ldr	r2, [pc, #40]	; (80089b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800898c:	4c0a      	ldr	r4, [pc, #40]	; (80089b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800898e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008990:	e001      	b.n	8008996 <LoopFillZerobss>

08008992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008994:	3204      	adds	r2, #4

08008996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008998:	d3fb      	bcc.n	8008992 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800899a:	f7ff ffe5 	bl	8008968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800899e:	f004 f837 	bl	800ca10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80089a2:	f7ff fb9d 	bl	80080e0 <main>
  bx lr
 80089a6:	4770      	bx	lr
  ldr r0, =_sdata
 80089a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80089ac:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80089b0:	0800e280 	.word	0x0800e280
  ldr r2, =_sbss
 80089b4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80089b8:	200005a8 	.word	0x200005a8

080089bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80089bc:	e7fe      	b.n	80089bc <ADC1_2_IRQHandler>
	...

080089c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80089c4:	4b08      	ldr	r3, [pc, #32]	; (80089e8 <HAL_Init+0x28>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a07      	ldr	r2, [pc, #28]	; (80089e8 <HAL_Init+0x28>)
 80089ca:	f043 0310 	orr.w	r3, r3, #16
 80089ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80089d0:	2003      	movs	r0, #3
 80089d2:	f000 fa43 	bl	8008e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80089d6:	200f      	movs	r0, #15
 80089d8:	f000 f808 	bl	80089ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80089dc:	f7ff fdfa 	bl	80085d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	40022000 	.word	0x40022000

080089ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80089f4:	4b12      	ldr	r3, [pc, #72]	; (8008a40 <HAL_InitTick+0x54>)
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	4b12      	ldr	r3, [pc, #72]	; (8008a44 <HAL_InitTick+0x58>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	4619      	mov	r1, r3
 80089fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fa5b 	bl	8008ec6 <HAL_SYSTICK_Config>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e00e      	b.n	8008a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b0f      	cmp	r3, #15
 8008a1e:	d80a      	bhi.n	8008a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a20:	2200      	movs	r2, #0
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a28:	f000 fa23 	bl	8008e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a2c:	4a06      	ldr	r2, [pc, #24]	; (8008a48 <HAL_InitTick+0x5c>)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	e000      	b.n	8008a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	200000a0 	.word	0x200000a0
 8008a44:	200000a8 	.word	0x200000a8
 8008a48:	200000a4 	.word	0x200000a4

08008a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a50:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <HAL_IncTick+0x1c>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	461a      	mov	r2, r3
 8008a56:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <HAL_IncTick+0x20>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	4a03      	ldr	r2, [pc, #12]	; (8008a6c <HAL_IncTick+0x20>)
 8008a5e:	6013      	str	r3, [r2, #0]
}
 8008a60:	bf00      	nop
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bc80      	pop	{r7}
 8008a66:	4770      	bx	lr
 8008a68:	200000a8 	.word	0x200000a8
 8008a6c:	2000045c 	.word	0x2000045c

08008a70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a70:	b480      	push	{r7}
 8008a72:	af00      	add	r7, sp, #0
  return uwTick;
 8008a74:	4b02      	ldr	r3, [pc, #8]	; (8008a80 <HAL_GetTick+0x10>)
 8008a76:	681b      	ldr	r3, [r3, #0]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bc80      	pop	{r7}
 8008a7e:	4770      	bx	lr
 8008a80:	2000045c 	.word	0x2000045c

08008a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008a8c:	f7ff fff0 	bl	8008a70 <HAL_GetTick>
 8008a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a9c:	d005      	beq.n	8008aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008a9e:	4b0a      	ldr	r3, [pc, #40]	; (8008ac8 <HAL_Delay+0x44>)
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008aaa:	bf00      	nop
 8008aac:	f7ff ffe0 	bl	8008a70 <HAL_GetTick>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d8f7      	bhi.n	8008aac <HAL_Delay+0x28>
  {
  }
}
 8008abc:	bf00      	nop
 8008abe:	bf00      	nop
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	200000a8 	.word	0x200000a8

08008acc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e0ed      	b.n	8008cba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d102      	bne.n	8008af0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7ff fda4 	bl	8008638 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f042 0201 	orr.w	r2, r2, #1
 8008afe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b00:	f7ff ffb6 	bl	8008a70 <HAL_GetTick>
 8008b04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008b06:	e012      	b.n	8008b2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008b08:	f7ff ffb2 	bl	8008a70 <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	2b0a      	cmp	r3, #10
 8008b14:	d90b      	bls.n	8008b2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2205      	movs	r2, #5
 8008b26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e0c5      	b.n	8008cba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d0e5      	beq.n	8008b08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 0202 	bic.w	r2, r2, #2
 8008b4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b4c:	f7ff ff90 	bl	8008a70 <HAL_GetTick>
 8008b50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008b52:	e012      	b.n	8008b7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008b54:	f7ff ff8c 	bl	8008a70 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	2b0a      	cmp	r3, #10
 8008b60:	d90b      	bls.n	8008b7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2205      	movs	r2, #5
 8008b72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e09f      	b.n	8008cba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f003 0302 	and.w	r3, r3, #2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e5      	bne.n	8008b54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	7e1b      	ldrb	r3, [r3, #24]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d108      	bne.n	8008ba2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b9e:	601a      	str	r2, [r3, #0]
 8008ba0:	e007      	b.n	8008bb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	7e5b      	ldrb	r3, [r3, #25]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d108      	bne.n	8008bcc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	e007      	b.n	8008bdc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	7e9b      	ldrb	r3, [r3, #26]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d108      	bne.n	8008bf6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0220 	orr.w	r2, r2, #32
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	e007      	b.n	8008c06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 0220 	bic.w	r2, r2, #32
 8008c04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	7edb      	ldrb	r3, [r3, #27]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d108      	bne.n	8008c20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f022 0210 	bic.w	r2, r2, #16
 8008c1c:	601a      	str	r2, [r3, #0]
 8008c1e:	e007      	b.n	8008c30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f042 0210 	orr.w	r2, r2, #16
 8008c2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	7f1b      	ldrb	r3, [r3, #28]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d108      	bne.n	8008c4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f042 0208 	orr.w	r2, r2, #8
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	e007      	b.n	8008c5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f022 0208 	bic.w	r2, r2, #8
 8008c58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	7f5b      	ldrb	r3, [r3, #29]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d108      	bne.n	8008c74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f042 0204 	orr.w	r2, r2, #4
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	e007      	b.n	8008c84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f022 0204 	bic.w	r2, r2, #4
 8008c82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	689a      	ldr	r2, [r3, #8]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	431a      	orrs	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	431a      	orrs	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	ea42 0103 	orr.w	r1, r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	1e5a      	subs	r2, r3, #1
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
	...

08008cc4 <__NVIC_SetPriorityGrouping>:
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f003 0307 	and.w	r3, r3, #7
 8008cd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008cd4:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <__NVIC_SetPriorityGrouping+0x44>)
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008cf6:	4a04      	ldr	r2, [pc, #16]	; (8008d08 <__NVIC_SetPriorityGrouping+0x44>)
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	60d3      	str	r3, [r2, #12]
}
 8008cfc:	bf00      	nop
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bc80      	pop	{r7}
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	e000ed00 	.word	0xe000ed00

08008d0c <__NVIC_GetPriorityGrouping>:
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d10:	4b04      	ldr	r3, [pc, #16]	; (8008d24 <__NVIC_GetPriorityGrouping+0x18>)
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	0a1b      	lsrs	r3, r3, #8
 8008d16:	f003 0307 	and.w	r3, r3, #7
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bc80      	pop	{r7}
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	e000ed00 	.word	0xe000ed00

08008d28 <__NVIC_EnableIRQ>:
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	db0b      	blt.n	8008d52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d3a:	79fb      	ldrb	r3, [r7, #7]
 8008d3c:	f003 021f 	and.w	r2, r3, #31
 8008d40:	4906      	ldr	r1, [pc, #24]	; (8008d5c <__NVIC_EnableIRQ+0x34>)
 8008d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d46:	095b      	lsrs	r3, r3, #5
 8008d48:	2001      	movs	r0, #1
 8008d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8008d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bc80      	pop	{r7}
 8008d5a:	4770      	bx	lr
 8008d5c:	e000e100 	.word	0xe000e100

08008d60 <__NVIC_SetPriority>:
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	db0a      	blt.n	8008d8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	490c      	ldr	r1, [pc, #48]	; (8008dac <__NVIC_SetPriority+0x4c>)
 8008d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d7e:	0112      	lsls	r2, r2, #4
 8008d80:	b2d2      	uxtb	r2, r2
 8008d82:	440b      	add	r3, r1
 8008d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008d88:	e00a      	b.n	8008da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	4908      	ldr	r1, [pc, #32]	; (8008db0 <__NVIC_SetPriority+0x50>)
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	f003 030f 	and.w	r3, r3, #15
 8008d96:	3b04      	subs	r3, #4
 8008d98:	0112      	lsls	r2, r2, #4
 8008d9a:	b2d2      	uxtb	r2, r2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	761a      	strb	r2, [r3, #24]
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bc80      	pop	{r7}
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	e000e100 	.word	0xe000e100
 8008db0:	e000ed00 	.word	0xe000ed00

08008db4 <NVIC_EncodePriority>:
{
 8008db4:	b480      	push	{r7}
 8008db6:	b089      	sub	sp, #36	; 0x24
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	f1c3 0307 	rsb	r3, r3, #7
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	bf28      	it	cs
 8008dd2:	2304      	movcs	r3, #4
 8008dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	2b06      	cmp	r3, #6
 8008ddc:	d902      	bls.n	8008de4 <NVIC_EncodePriority+0x30>
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	3b03      	subs	r3, #3
 8008de2:	e000      	b.n	8008de6 <NVIC_EncodePriority+0x32>
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	fa02 f303 	lsl.w	r3, r2, r3
 8008df2:	43da      	mvns	r2, r3
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	401a      	ands	r2, r3
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008dfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	fa01 f303 	lsl.w	r3, r1, r3
 8008e06:	43d9      	mvns	r1, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e0c:	4313      	orrs	r3, r2
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3724      	adds	r7, #36	; 0x24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bc80      	pop	{r7}
 8008e16:	4770      	bx	lr

08008e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3b01      	subs	r3, #1
 8008e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e28:	d301      	bcc.n	8008e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e00f      	b.n	8008e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e2e:	4a0a      	ldr	r2, [pc, #40]	; (8008e58 <SysTick_Config+0x40>)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3b01      	subs	r3, #1
 8008e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008e36:	210f      	movs	r1, #15
 8008e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e3c:	f7ff ff90 	bl	8008d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e40:	4b05      	ldr	r3, [pc, #20]	; (8008e58 <SysTick_Config+0x40>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e46:	4b04      	ldr	r3, [pc, #16]	; (8008e58 <SysTick_Config+0x40>)
 8008e48:	2207      	movs	r2, #7
 8008e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	e000e010 	.word	0xe000e010

08008e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff ff2d 	bl	8008cc4 <__NVIC_SetPriorityGrouping>
}
 8008e6a:	bf00      	nop
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b086      	sub	sp, #24
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	4603      	mov	r3, r0
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	607a      	str	r2, [r7, #4]
 8008e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008e84:	f7ff ff42 	bl	8008d0c <__NVIC_GetPriorityGrouping>
 8008e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	6978      	ldr	r0, [r7, #20]
 8008e90:	f7ff ff90 	bl	8008db4 <NVIC_EncodePriority>
 8008e94:	4602      	mov	r2, r0
 8008e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7ff ff5f 	bl	8008d60 <__NVIC_SetPriority>
}
 8008ea2:	bf00      	nop
 8008ea4:	3718      	adds	r7, #24
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7ff ff35 	bl	8008d28 <__NVIC_EnableIRQ>
}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7ff ffa2 	bl	8008e18 <SysTick_Config>
 8008ed4:	4603      	mov	r3, r0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	b085      	sub	sp, #20
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d008      	beq.n	8008f08 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2204      	movs	r2, #4
 8008efa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e020      	b.n	8008f4a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 020e 	bic.w	r2, r2, #14
 8008f16:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f022 0201 	bic.w	r2, r2, #1
 8008f26:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f30:	2101      	movs	r1, #1
 8008f32:	fa01 f202 	lsl.w	r2, r1, r2
 8008f36:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bc80      	pop	{r7}
 8008f52:	4770      	bx	lr

08008f54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d005      	beq.n	8008f78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2204      	movs	r2, #4
 8008f70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	73fb      	strb	r3, [r7, #15]
 8008f76:	e0d6      	b.n	8009126 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f022 020e 	bic.w	r2, r2, #14
 8008f86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0201 	bic.w	r2, r2, #1
 8008f96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	4b64      	ldr	r3, [pc, #400]	; (8009130 <HAL_DMA_Abort_IT+0x1dc>)
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d958      	bls.n	8009056 <HAL_DMA_Abort_IT+0x102>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a62      	ldr	r2, [pc, #392]	; (8009134 <HAL_DMA_Abort_IT+0x1e0>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d04f      	beq.n	800904e <HAL_DMA_Abort_IT+0xfa>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a61      	ldr	r2, [pc, #388]	; (8009138 <HAL_DMA_Abort_IT+0x1e4>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d048      	beq.n	800904a <HAL_DMA_Abort_IT+0xf6>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a5f      	ldr	r2, [pc, #380]	; (800913c <HAL_DMA_Abort_IT+0x1e8>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d040      	beq.n	8009044 <HAL_DMA_Abort_IT+0xf0>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a5e      	ldr	r2, [pc, #376]	; (8009140 <HAL_DMA_Abort_IT+0x1ec>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d038      	beq.n	800903e <HAL_DMA_Abort_IT+0xea>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a5c      	ldr	r2, [pc, #368]	; (8009144 <HAL_DMA_Abort_IT+0x1f0>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d030      	beq.n	8009038 <HAL_DMA_Abort_IT+0xe4>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a5b      	ldr	r2, [pc, #364]	; (8009148 <HAL_DMA_Abort_IT+0x1f4>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d028      	beq.n	8009032 <HAL_DMA_Abort_IT+0xde>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a52      	ldr	r2, [pc, #328]	; (8009130 <HAL_DMA_Abort_IT+0x1dc>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d020      	beq.n	800902c <HAL_DMA_Abort_IT+0xd8>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a57      	ldr	r2, [pc, #348]	; (800914c <HAL_DMA_Abort_IT+0x1f8>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d019      	beq.n	8009028 <HAL_DMA_Abort_IT+0xd4>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a55      	ldr	r2, [pc, #340]	; (8009150 <HAL_DMA_Abort_IT+0x1fc>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d012      	beq.n	8009024 <HAL_DMA_Abort_IT+0xd0>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a54      	ldr	r2, [pc, #336]	; (8009154 <HAL_DMA_Abort_IT+0x200>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d00a      	beq.n	800901e <HAL_DMA_Abort_IT+0xca>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a52      	ldr	r2, [pc, #328]	; (8009158 <HAL_DMA_Abort_IT+0x204>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d102      	bne.n	8009018 <HAL_DMA_Abort_IT+0xc4>
 8009012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009016:	e01b      	b.n	8009050 <HAL_DMA_Abort_IT+0xfc>
 8009018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800901c:	e018      	b.n	8009050 <HAL_DMA_Abort_IT+0xfc>
 800901e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009022:	e015      	b.n	8009050 <HAL_DMA_Abort_IT+0xfc>
 8009024:	2310      	movs	r3, #16
 8009026:	e013      	b.n	8009050 <HAL_DMA_Abort_IT+0xfc>
 8009028:	2301      	movs	r3, #1
 800902a:	e011      	b.n	8009050 <HAL_DMA_Abort_IT+0xfc>
 800902c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009030:	e00e      	b.n	8009050 <HAL_DMA_Abort_IT+0xfc>
 8009032:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009036:	e00b      	b.n	8009050 <HAL_DMA_Abort_IT+0xfc>
 8009038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800903c:	e008      	b.n	8009050 <HAL_DMA_Abort_IT+0xfc>
 800903e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009042:	e005      	b.n	8009050 <HAL_DMA_Abort_IT+0xfc>
 8009044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009048:	e002      	b.n	8009050 <HAL_DMA_Abort_IT+0xfc>
 800904a:	2310      	movs	r3, #16
 800904c:	e000      	b.n	8009050 <HAL_DMA_Abort_IT+0xfc>
 800904e:	2301      	movs	r3, #1
 8009050:	4a42      	ldr	r2, [pc, #264]	; (800915c <HAL_DMA_Abort_IT+0x208>)
 8009052:	6053      	str	r3, [r2, #4]
 8009054:	e057      	b.n	8009106 <HAL_DMA_Abort_IT+0x1b2>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a36      	ldr	r2, [pc, #216]	; (8009134 <HAL_DMA_Abort_IT+0x1e0>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d04f      	beq.n	8009100 <HAL_DMA_Abort_IT+0x1ac>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a34      	ldr	r2, [pc, #208]	; (8009138 <HAL_DMA_Abort_IT+0x1e4>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d048      	beq.n	80090fc <HAL_DMA_Abort_IT+0x1a8>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a33      	ldr	r2, [pc, #204]	; (800913c <HAL_DMA_Abort_IT+0x1e8>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d040      	beq.n	80090f6 <HAL_DMA_Abort_IT+0x1a2>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a31      	ldr	r2, [pc, #196]	; (8009140 <HAL_DMA_Abort_IT+0x1ec>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d038      	beq.n	80090f0 <HAL_DMA_Abort_IT+0x19c>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a30      	ldr	r2, [pc, #192]	; (8009144 <HAL_DMA_Abort_IT+0x1f0>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d030      	beq.n	80090ea <HAL_DMA_Abort_IT+0x196>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a2e      	ldr	r2, [pc, #184]	; (8009148 <HAL_DMA_Abort_IT+0x1f4>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d028      	beq.n	80090e4 <HAL_DMA_Abort_IT+0x190>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a26      	ldr	r2, [pc, #152]	; (8009130 <HAL_DMA_Abort_IT+0x1dc>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d020      	beq.n	80090de <HAL_DMA_Abort_IT+0x18a>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a2a      	ldr	r2, [pc, #168]	; (800914c <HAL_DMA_Abort_IT+0x1f8>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d019      	beq.n	80090da <HAL_DMA_Abort_IT+0x186>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a29      	ldr	r2, [pc, #164]	; (8009150 <HAL_DMA_Abort_IT+0x1fc>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d012      	beq.n	80090d6 <HAL_DMA_Abort_IT+0x182>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a27      	ldr	r2, [pc, #156]	; (8009154 <HAL_DMA_Abort_IT+0x200>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d00a      	beq.n	80090d0 <HAL_DMA_Abort_IT+0x17c>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a26      	ldr	r2, [pc, #152]	; (8009158 <HAL_DMA_Abort_IT+0x204>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d102      	bne.n	80090ca <HAL_DMA_Abort_IT+0x176>
 80090c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090c8:	e01b      	b.n	8009102 <HAL_DMA_Abort_IT+0x1ae>
 80090ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80090ce:	e018      	b.n	8009102 <HAL_DMA_Abort_IT+0x1ae>
 80090d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090d4:	e015      	b.n	8009102 <HAL_DMA_Abort_IT+0x1ae>
 80090d6:	2310      	movs	r3, #16
 80090d8:	e013      	b.n	8009102 <HAL_DMA_Abort_IT+0x1ae>
 80090da:	2301      	movs	r3, #1
 80090dc:	e011      	b.n	8009102 <HAL_DMA_Abort_IT+0x1ae>
 80090de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090e2:	e00e      	b.n	8009102 <HAL_DMA_Abort_IT+0x1ae>
 80090e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80090e8:	e00b      	b.n	8009102 <HAL_DMA_Abort_IT+0x1ae>
 80090ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80090ee:	e008      	b.n	8009102 <HAL_DMA_Abort_IT+0x1ae>
 80090f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090f4:	e005      	b.n	8009102 <HAL_DMA_Abort_IT+0x1ae>
 80090f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090fa:	e002      	b.n	8009102 <HAL_DMA_Abort_IT+0x1ae>
 80090fc:	2310      	movs	r3, #16
 80090fe:	e000      	b.n	8009102 <HAL_DMA_Abort_IT+0x1ae>
 8009100:	2301      	movs	r3, #1
 8009102:	4a17      	ldr	r2, [pc, #92]	; (8009160 <HAL_DMA_Abort_IT+0x20c>)
 8009104:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800911a:	2b00      	cmp	r3, #0
 800911c:	d003      	beq.n	8009126 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	4798      	blx	r3
    } 
  }
  return status;
 8009126:	7bfb      	ldrb	r3, [r7, #15]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	40020080 	.word	0x40020080
 8009134:	40020008 	.word	0x40020008
 8009138:	4002001c 	.word	0x4002001c
 800913c:	40020030 	.word	0x40020030
 8009140:	40020044 	.word	0x40020044
 8009144:	40020058 	.word	0x40020058
 8009148:	4002006c 	.word	0x4002006c
 800914c:	40020408 	.word	0x40020408
 8009150:	4002041c 	.word	0x4002041c
 8009154:	40020430 	.word	0x40020430
 8009158:	40020444 	.word	0x40020444
 800915c:	40020400 	.word	0x40020400
 8009160:	40020000 	.word	0x40020000

08009164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009164:	b480      	push	{r7}
 8009166:	b08b      	sub	sp, #44	; 0x2c
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800916e:	2300      	movs	r3, #0
 8009170:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009172:	2300      	movs	r3, #0
 8009174:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009176:	e179      	b.n	800946c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009178:	2201      	movs	r2, #1
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	fa02 f303 	lsl.w	r3, r2, r3
 8009180:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	69fa      	ldr	r2, [r7, #28]
 8009188:	4013      	ands	r3, r2
 800918a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	429a      	cmp	r2, r3
 8009192:	f040 8168 	bne.w	8009466 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	4a96      	ldr	r2, [pc, #600]	; (80093f4 <HAL_GPIO_Init+0x290>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d05e      	beq.n	800925e <HAL_GPIO_Init+0xfa>
 80091a0:	4a94      	ldr	r2, [pc, #592]	; (80093f4 <HAL_GPIO_Init+0x290>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d875      	bhi.n	8009292 <HAL_GPIO_Init+0x12e>
 80091a6:	4a94      	ldr	r2, [pc, #592]	; (80093f8 <HAL_GPIO_Init+0x294>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d058      	beq.n	800925e <HAL_GPIO_Init+0xfa>
 80091ac:	4a92      	ldr	r2, [pc, #584]	; (80093f8 <HAL_GPIO_Init+0x294>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d86f      	bhi.n	8009292 <HAL_GPIO_Init+0x12e>
 80091b2:	4a92      	ldr	r2, [pc, #584]	; (80093fc <HAL_GPIO_Init+0x298>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d052      	beq.n	800925e <HAL_GPIO_Init+0xfa>
 80091b8:	4a90      	ldr	r2, [pc, #576]	; (80093fc <HAL_GPIO_Init+0x298>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d869      	bhi.n	8009292 <HAL_GPIO_Init+0x12e>
 80091be:	4a90      	ldr	r2, [pc, #576]	; (8009400 <HAL_GPIO_Init+0x29c>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d04c      	beq.n	800925e <HAL_GPIO_Init+0xfa>
 80091c4:	4a8e      	ldr	r2, [pc, #568]	; (8009400 <HAL_GPIO_Init+0x29c>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d863      	bhi.n	8009292 <HAL_GPIO_Init+0x12e>
 80091ca:	4a8e      	ldr	r2, [pc, #568]	; (8009404 <HAL_GPIO_Init+0x2a0>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d046      	beq.n	800925e <HAL_GPIO_Init+0xfa>
 80091d0:	4a8c      	ldr	r2, [pc, #560]	; (8009404 <HAL_GPIO_Init+0x2a0>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d85d      	bhi.n	8009292 <HAL_GPIO_Init+0x12e>
 80091d6:	2b12      	cmp	r3, #18
 80091d8:	d82a      	bhi.n	8009230 <HAL_GPIO_Init+0xcc>
 80091da:	2b12      	cmp	r3, #18
 80091dc:	d859      	bhi.n	8009292 <HAL_GPIO_Init+0x12e>
 80091de:	a201      	add	r2, pc, #4	; (adr r2, 80091e4 <HAL_GPIO_Init+0x80>)
 80091e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e4:	0800925f 	.word	0x0800925f
 80091e8:	08009239 	.word	0x08009239
 80091ec:	0800924b 	.word	0x0800924b
 80091f0:	0800928d 	.word	0x0800928d
 80091f4:	08009293 	.word	0x08009293
 80091f8:	08009293 	.word	0x08009293
 80091fc:	08009293 	.word	0x08009293
 8009200:	08009293 	.word	0x08009293
 8009204:	08009293 	.word	0x08009293
 8009208:	08009293 	.word	0x08009293
 800920c:	08009293 	.word	0x08009293
 8009210:	08009293 	.word	0x08009293
 8009214:	08009293 	.word	0x08009293
 8009218:	08009293 	.word	0x08009293
 800921c:	08009293 	.word	0x08009293
 8009220:	08009293 	.word	0x08009293
 8009224:	08009293 	.word	0x08009293
 8009228:	08009241 	.word	0x08009241
 800922c:	08009255 	.word	0x08009255
 8009230:	4a75      	ldr	r2, [pc, #468]	; (8009408 <HAL_GPIO_Init+0x2a4>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d013      	beq.n	800925e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009236:	e02c      	b.n	8009292 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	623b      	str	r3, [r7, #32]
          break;
 800923e:	e029      	b.n	8009294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	3304      	adds	r3, #4
 8009246:	623b      	str	r3, [r7, #32]
          break;
 8009248:	e024      	b.n	8009294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	3308      	adds	r3, #8
 8009250:	623b      	str	r3, [r7, #32]
          break;
 8009252:	e01f      	b.n	8009294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	330c      	adds	r3, #12
 800925a:	623b      	str	r3, [r7, #32]
          break;
 800925c:	e01a      	b.n	8009294 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d102      	bne.n	800926c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009266:	2304      	movs	r3, #4
 8009268:	623b      	str	r3, [r7, #32]
          break;
 800926a:	e013      	b.n	8009294 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d105      	bne.n	8009280 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009274:	2308      	movs	r3, #8
 8009276:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	69fa      	ldr	r2, [r7, #28]
 800927c:	611a      	str	r2, [r3, #16]
          break;
 800927e:	e009      	b.n	8009294 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009280:	2308      	movs	r3, #8
 8009282:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	615a      	str	r2, [r3, #20]
          break;
 800928a:	e003      	b.n	8009294 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800928c:	2300      	movs	r3, #0
 800928e:	623b      	str	r3, [r7, #32]
          break;
 8009290:	e000      	b.n	8009294 <HAL_GPIO_Init+0x130>
          break;
 8009292:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	2bff      	cmp	r3, #255	; 0xff
 8009298:	d801      	bhi.n	800929e <HAL_GPIO_Init+0x13a>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	e001      	b.n	80092a2 <HAL_GPIO_Init+0x13e>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	3304      	adds	r3, #4
 80092a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	2bff      	cmp	r3, #255	; 0xff
 80092a8:	d802      	bhi.n	80092b0 <HAL_GPIO_Init+0x14c>
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	e002      	b.n	80092b6 <HAL_GPIO_Init+0x152>
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	3b08      	subs	r3, #8
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	210f      	movs	r1, #15
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	fa01 f303 	lsl.w	r3, r1, r3
 80092c4:	43db      	mvns	r3, r3
 80092c6:	401a      	ands	r2, r3
 80092c8:	6a39      	ldr	r1, [r7, #32]
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	fa01 f303 	lsl.w	r3, r1, r3
 80092d0:	431a      	orrs	r2, r3
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 80c1 	beq.w	8009466 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80092e4:	4b49      	ldr	r3, [pc, #292]	; (800940c <HAL_GPIO_Init+0x2a8>)
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	4a48      	ldr	r2, [pc, #288]	; (800940c <HAL_GPIO_Init+0x2a8>)
 80092ea:	f043 0301 	orr.w	r3, r3, #1
 80092ee:	6193      	str	r3, [r2, #24]
 80092f0:	4b46      	ldr	r3, [pc, #280]	; (800940c <HAL_GPIO_Init+0x2a8>)
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	60bb      	str	r3, [r7, #8]
 80092fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80092fc:	4a44      	ldr	r2, [pc, #272]	; (8009410 <HAL_GPIO_Init+0x2ac>)
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	089b      	lsrs	r3, r3, #2
 8009302:	3302      	adds	r3, #2
 8009304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009308:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	f003 0303 	and.w	r3, r3, #3
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	220f      	movs	r2, #15
 8009314:	fa02 f303 	lsl.w	r3, r2, r3
 8009318:	43db      	mvns	r3, r3
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	4013      	ands	r3, r2
 800931e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a3c      	ldr	r2, [pc, #240]	; (8009414 <HAL_GPIO_Init+0x2b0>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d01f      	beq.n	8009368 <HAL_GPIO_Init+0x204>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a3b      	ldr	r2, [pc, #236]	; (8009418 <HAL_GPIO_Init+0x2b4>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d019      	beq.n	8009364 <HAL_GPIO_Init+0x200>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a3a      	ldr	r2, [pc, #232]	; (800941c <HAL_GPIO_Init+0x2b8>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d013      	beq.n	8009360 <HAL_GPIO_Init+0x1fc>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a39      	ldr	r2, [pc, #228]	; (8009420 <HAL_GPIO_Init+0x2bc>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00d      	beq.n	800935c <HAL_GPIO_Init+0x1f8>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a38      	ldr	r2, [pc, #224]	; (8009424 <HAL_GPIO_Init+0x2c0>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d007      	beq.n	8009358 <HAL_GPIO_Init+0x1f4>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a37      	ldr	r2, [pc, #220]	; (8009428 <HAL_GPIO_Init+0x2c4>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d101      	bne.n	8009354 <HAL_GPIO_Init+0x1f0>
 8009350:	2305      	movs	r3, #5
 8009352:	e00a      	b.n	800936a <HAL_GPIO_Init+0x206>
 8009354:	2306      	movs	r3, #6
 8009356:	e008      	b.n	800936a <HAL_GPIO_Init+0x206>
 8009358:	2304      	movs	r3, #4
 800935a:	e006      	b.n	800936a <HAL_GPIO_Init+0x206>
 800935c:	2303      	movs	r3, #3
 800935e:	e004      	b.n	800936a <HAL_GPIO_Init+0x206>
 8009360:	2302      	movs	r3, #2
 8009362:	e002      	b.n	800936a <HAL_GPIO_Init+0x206>
 8009364:	2301      	movs	r3, #1
 8009366:	e000      	b.n	800936a <HAL_GPIO_Init+0x206>
 8009368:	2300      	movs	r3, #0
 800936a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800936c:	f002 0203 	and.w	r2, r2, #3
 8009370:	0092      	lsls	r2, r2, #2
 8009372:	4093      	lsls	r3, r2
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	4313      	orrs	r3, r2
 8009378:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800937a:	4925      	ldr	r1, [pc, #148]	; (8009410 <HAL_GPIO_Init+0x2ac>)
 800937c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937e:	089b      	lsrs	r3, r3, #2
 8009380:	3302      	adds	r3, #2
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d006      	beq.n	80093a2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009394:	4b25      	ldr	r3, [pc, #148]	; (800942c <HAL_GPIO_Init+0x2c8>)
 8009396:	689a      	ldr	r2, [r3, #8]
 8009398:	4924      	ldr	r1, [pc, #144]	; (800942c <HAL_GPIO_Init+0x2c8>)
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	4313      	orrs	r3, r2
 800939e:	608b      	str	r3, [r1, #8]
 80093a0:	e006      	b.n	80093b0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80093a2:	4b22      	ldr	r3, [pc, #136]	; (800942c <HAL_GPIO_Init+0x2c8>)
 80093a4:	689a      	ldr	r2, [r3, #8]
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	43db      	mvns	r3, r3
 80093aa:	4920      	ldr	r1, [pc, #128]	; (800942c <HAL_GPIO_Init+0x2c8>)
 80093ac:	4013      	ands	r3, r2
 80093ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d006      	beq.n	80093ca <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80093bc:	4b1b      	ldr	r3, [pc, #108]	; (800942c <HAL_GPIO_Init+0x2c8>)
 80093be:	68da      	ldr	r2, [r3, #12]
 80093c0:	491a      	ldr	r1, [pc, #104]	; (800942c <HAL_GPIO_Init+0x2c8>)
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	60cb      	str	r3, [r1, #12]
 80093c8:	e006      	b.n	80093d8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80093ca:	4b18      	ldr	r3, [pc, #96]	; (800942c <HAL_GPIO_Init+0x2c8>)
 80093cc:	68da      	ldr	r2, [r3, #12]
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	43db      	mvns	r3, r3
 80093d2:	4916      	ldr	r1, [pc, #88]	; (800942c <HAL_GPIO_Init+0x2c8>)
 80093d4:	4013      	ands	r3, r2
 80093d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d025      	beq.n	8009430 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80093e4:	4b11      	ldr	r3, [pc, #68]	; (800942c <HAL_GPIO_Init+0x2c8>)
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	4910      	ldr	r1, [pc, #64]	; (800942c <HAL_GPIO_Init+0x2c8>)
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	604b      	str	r3, [r1, #4]
 80093f0:	e025      	b.n	800943e <HAL_GPIO_Init+0x2da>
 80093f2:	bf00      	nop
 80093f4:	10320000 	.word	0x10320000
 80093f8:	10310000 	.word	0x10310000
 80093fc:	10220000 	.word	0x10220000
 8009400:	10210000 	.word	0x10210000
 8009404:	10120000 	.word	0x10120000
 8009408:	10110000 	.word	0x10110000
 800940c:	40021000 	.word	0x40021000
 8009410:	40010000 	.word	0x40010000
 8009414:	40010800 	.word	0x40010800
 8009418:	40010c00 	.word	0x40010c00
 800941c:	40011000 	.word	0x40011000
 8009420:	40011400 	.word	0x40011400
 8009424:	40011800 	.word	0x40011800
 8009428:	40011c00 	.word	0x40011c00
 800942c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009430:	4b15      	ldr	r3, [pc, #84]	; (8009488 <HAL_GPIO_Init+0x324>)
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	43db      	mvns	r3, r3
 8009438:	4913      	ldr	r1, [pc, #76]	; (8009488 <HAL_GPIO_Init+0x324>)
 800943a:	4013      	ands	r3, r2
 800943c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d006      	beq.n	8009458 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800944a:	4b0f      	ldr	r3, [pc, #60]	; (8009488 <HAL_GPIO_Init+0x324>)
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	490e      	ldr	r1, [pc, #56]	; (8009488 <HAL_GPIO_Init+0x324>)
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	4313      	orrs	r3, r2
 8009454:	600b      	str	r3, [r1, #0]
 8009456:	e006      	b.n	8009466 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009458:	4b0b      	ldr	r3, [pc, #44]	; (8009488 <HAL_GPIO_Init+0x324>)
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	43db      	mvns	r3, r3
 8009460:	4909      	ldr	r1, [pc, #36]	; (8009488 <HAL_GPIO_Init+0x324>)
 8009462:	4013      	ands	r3, r2
 8009464:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009468:	3301      	adds	r3, #1
 800946a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009472:	fa22 f303 	lsr.w	r3, r2, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	f47f ae7e 	bne.w	8009178 <HAL_GPIO_Init+0x14>
  }
}
 800947c:	bf00      	nop
 800947e:	bf00      	nop
 8009480:	372c      	adds	r7, #44	; 0x2c
 8009482:	46bd      	mov	sp, r7
 8009484:	bc80      	pop	{r7}
 8009486:	4770      	bx	lr
 8009488:	40010400 	.word	0x40010400

0800948c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800948c:	b480      	push	{r7}
 800948e:	b089      	sub	sp, #36	; 0x24
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009496:	2300      	movs	r3, #0
 8009498:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800949a:	e0a6      	b.n	80095ea <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800949c:	2201      	movs	r2, #1
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	fa02 f303 	lsl.w	r3, r2, r3
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	4013      	ands	r3, r2
 80094a8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 8099 	beq.w	80095e4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80094b2:	4a54      	ldr	r2, [pc, #336]	; (8009604 <HAL_GPIO_DeInit+0x178>)
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	089b      	lsrs	r3, r3, #2
 80094b8:	3302      	adds	r3, #2
 80094ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094be:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	f003 0303 	and.w	r3, r3, #3
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	220f      	movs	r2, #15
 80094ca:	fa02 f303 	lsl.w	r3, r2, r3
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	4013      	ands	r3, r2
 80094d2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a4c      	ldr	r2, [pc, #304]	; (8009608 <HAL_GPIO_DeInit+0x17c>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d01f      	beq.n	800951c <HAL_GPIO_DeInit+0x90>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a4b      	ldr	r2, [pc, #300]	; (800960c <HAL_GPIO_DeInit+0x180>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d019      	beq.n	8009518 <HAL_GPIO_DeInit+0x8c>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a4a      	ldr	r2, [pc, #296]	; (8009610 <HAL_GPIO_DeInit+0x184>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d013      	beq.n	8009514 <HAL_GPIO_DeInit+0x88>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a49      	ldr	r2, [pc, #292]	; (8009614 <HAL_GPIO_DeInit+0x188>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d00d      	beq.n	8009510 <HAL_GPIO_DeInit+0x84>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a48      	ldr	r2, [pc, #288]	; (8009618 <HAL_GPIO_DeInit+0x18c>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d007      	beq.n	800950c <HAL_GPIO_DeInit+0x80>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a47      	ldr	r2, [pc, #284]	; (800961c <HAL_GPIO_DeInit+0x190>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d101      	bne.n	8009508 <HAL_GPIO_DeInit+0x7c>
 8009504:	2305      	movs	r3, #5
 8009506:	e00a      	b.n	800951e <HAL_GPIO_DeInit+0x92>
 8009508:	2306      	movs	r3, #6
 800950a:	e008      	b.n	800951e <HAL_GPIO_DeInit+0x92>
 800950c:	2304      	movs	r3, #4
 800950e:	e006      	b.n	800951e <HAL_GPIO_DeInit+0x92>
 8009510:	2303      	movs	r3, #3
 8009512:	e004      	b.n	800951e <HAL_GPIO_DeInit+0x92>
 8009514:	2302      	movs	r3, #2
 8009516:	e002      	b.n	800951e <HAL_GPIO_DeInit+0x92>
 8009518:	2301      	movs	r3, #1
 800951a:	e000      	b.n	800951e <HAL_GPIO_DeInit+0x92>
 800951c:	2300      	movs	r3, #0
 800951e:	69fa      	ldr	r2, [r7, #28]
 8009520:	f002 0203 	and.w	r2, r2, #3
 8009524:	0092      	lsls	r2, r2, #2
 8009526:	4093      	lsls	r3, r2
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	429a      	cmp	r2, r3
 800952c:	d132      	bne.n	8009594 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800952e:	4b3c      	ldr	r3, [pc, #240]	; (8009620 <HAL_GPIO_DeInit+0x194>)
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	43db      	mvns	r3, r3
 8009536:	493a      	ldr	r1, [pc, #232]	; (8009620 <HAL_GPIO_DeInit+0x194>)
 8009538:	4013      	ands	r3, r2
 800953a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800953c:	4b38      	ldr	r3, [pc, #224]	; (8009620 <HAL_GPIO_DeInit+0x194>)
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	43db      	mvns	r3, r3
 8009544:	4936      	ldr	r1, [pc, #216]	; (8009620 <HAL_GPIO_DeInit+0x194>)
 8009546:	4013      	ands	r3, r2
 8009548:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800954a:	4b35      	ldr	r3, [pc, #212]	; (8009620 <HAL_GPIO_DeInit+0x194>)
 800954c:	68da      	ldr	r2, [r3, #12]
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	43db      	mvns	r3, r3
 8009552:	4933      	ldr	r1, [pc, #204]	; (8009620 <HAL_GPIO_DeInit+0x194>)
 8009554:	4013      	ands	r3, r2
 8009556:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009558:	4b31      	ldr	r3, [pc, #196]	; (8009620 <HAL_GPIO_DeInit+0x194>)
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	43db      	mvns	r3, r3
 8009560:	492f      	ldr	r1, [pc, #188]	; (8009620 <HAL_GPIO_DeInit+0x194>)
 8009562:	4013      	ands	r3, r2
 8009564:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	f003 0303 	and.w	r3, r3, #3
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	220f      	movs	r2, #15
 8009570:	fa02 f303 	lsl.w	r3, r2, r3
 8009574:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009576:	4a23      	ldr	r2, [pc, #140]	; (8009604 <HAL_GPIO_DeInit+0x178>)
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	089b      	lsrs	r3, r3, #2
 800957c:	3302      	adds	r3, #2
 800957e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	43da      	mvns	r2, r3
 8009586:	481f      	ldr	r0, [pc, #124]	; (8009604 <HAL_GPIO_DeInit+0x178>)
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	089b      	lsrs	r3, r3, #2
 800958c:	400a      	ands	r2, r1
 800958e:	3302      	adds	r3, #2
 8009590:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	2bff      	cmp	r3, #255	; 0xff
 8009598:	d801      	bhi.n	800959e <HAL_GPIO_DeInit+0x112>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	e001      	b.n	80095a2 <HAL_GPIO_DeInit+0x116>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	3304      	adds	r3, #4
 80095a2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	2bff      	cmp	r3, #255	; 0xff
 80095a8:	d802      	bhi.n	80095b0 <HAL_GPIO_DeInit+0x124>
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	e002      	b.n	80095b6 <HAL_GPIO_DeInit+0x12a>
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	3b08      	subs	r3, #8
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	210f      	movs	r1, #15
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	fa01 f303 	lsl.w	r3, r1, r3
 80095c4:	43db      	mvns	r3, r3
 80095c6:	401a      	ands	r2, r3
 80095c8:	2104      	movs	r1, #4
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	fa01 f303 	lsl.w	r3, r1, r3
 80095d0:	431a      	orrs	r2, r3
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	43db      	mvns	r3, r3
 80095de:	401a      	ands	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	3301      	adds	r3, #1
 80095e8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	fa22 f303 	lsr.w	r3, r2, r3
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f47f af52 	bne.w	800949c <HAL_GPIO_DeInit+0x10>
  }
}
 80095f8:	bf00      	nop
 80095fa:	bf00      	nop
 80095fc:	3724      	adds	r7, #36	; 0x24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bc80      	pop	{r7}
 8009602:	4770      	bx	lr
 8009604:	40010000 	.word	0x40010000
 8009608:	40010800 	.word	0x40010800
 800960c:	40010c00 	.word	0x40010c00
 8009610:	40011000 	.word	0x40011000
 8009614:	40011400 	.word	0x40011400
 8009618:	40011800 	.word	0x40011800
 800961c:	40011c00 	.word	0x40011c00
 8009620:	40010400 	.word	0x40010400

08009624 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	460b      	mov	r3, r1
 800962e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	689a      	ldr	r2, [r3, #8]
 8009634:	887b      	ldrh	r3, [r7, #2]
 8009636:	4013      	ands	r3, r2
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800963c:	2301      	movs	r3, #1
 800963e:	73fb      	strb	r3, [r7, #15]
 8009640:	e001      	b.n	8009646 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009642:	2300      	movs	r3, #0
 8009644:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009646:	7bfb      	ldrb	r3, [r7, #15]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	bc80      	pop	{r7}
 8009650:	4770      	bx	lr

08009652 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	460b      	mov	r3, r1
 800965c:	807b      	strh	r3, [r7, #2]
 800965e:	4613      	mov	r3, r2
 8009660:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009662:	787b      	ldrb	r3, [r7, #1]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d003      	beq.n	8009670 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009668:	887a      	ldrh	r2, [r7, #2]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800966e:	e003      	b.n	8009678 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009670:	887b      	ldrh	r3, [r7, #2]
 8009672:	041a      	lsls	r2, r3, #16
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	611a      	str	r2, [r3, #16]
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	bc80      	pop	{r7}
 8009680:	4770      	bx	lr

08009682 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009682:	b480      	push	{r7}
 8009684:	b085      	sub	sp, #20
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	460b      	mov	r3, r1
 800968c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009694:	887a      	ldrh	r2, [r7, #2]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	4013      	ands	r3, r2
 800969a:	041a      	lsls	r2, r3, #16
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	43d9      	mvns	r1, r3
 80096a0:	887b      	ldrh	r3, [r7, #2]
 80096a2:	400b      	ands	r3, r1
 80096a4:	431a      	orrs	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	611a      	str	r2, [r3, #16]
}
 80096aa:	bf00      	nop
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bc80      	pop	{r7}
 80096b2:	4770      	bx	lr

080096b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e12b      	b.n	800991e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d106      	bne.n	80096e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7fe fff8 	bl	80086d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2224      	movs	r2, #36	; 0x24
 80096e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f022 0201 	bic.w	r2, r2, #1
 80096f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009718:	f001 fdb8 	bl	800b28c <HAL_RCC_GetPCLK1Freq>
 800971c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	4a81      	ldr	r2, [pc, #516]	; (8009928 <HAL_I2C_Init+0x274>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d807      	bhi.n	8009738 <HAL_I2C_Init+0x84>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4a80      	ldr	r2, [pc, #512]	; (800992c <HAL_I2C_Init+0x278>)
 800972c:	4293      	cmp	r3, r2
 800972e:	bf94      	ite	ls
 8009730:	2301      	movls	r3, #1
 8009732:	2300      	movhi	r3, #0
 8009734:	b2db      	uxtb	r3, r3
 8009736:	e006      	b.n	8009746 <HAL_I2C_Init+0x92>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	4a7d      	ldr	r2, [pc, #500]	; (8009930 <HAL_I2C_Init+0x27c>)
 800973c:	4293      	cmp	r3, r2
 800973e:	bf94      	ite	ls
 8009740:	2301      	movls	r3, #1
 8009742:	2300      	movhi	r3, #0
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e0e7      	b.n	800991e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	4a78      	ldr	r2, [pc, #480]	; (8009934 <HAL_I2C_Init+0x280>)
 8009752:	fba2 2303 	umull	r2, r3, r2, r3
 8009756:	0c9b      	lsrs	r3, r3, #18
 8009758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	430a      	orrs	r2, r1
 800976c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	4a6a      	ldr	r2, [pc, #424]	; (8009928 <HAL_I2C_Init+0x274>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d802      	bhi.n	8009788 <HAL_I2C_Init+0xd4>
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	3301      	adds	r3, #1
 8009786:	e009      	b.n	800979c <HAL_I2C_Init+0xe8>
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800978e:	fb02 f303 	mul.w	r3, r2, r3
 8009792:	4a69      	ldr	r2, [pc, #420]	; (8009938 <HAL_I2C_Init+0x284>)
 8009794:	fba2 2303 	umull	r2, r3, r2, r3
 8009798:	099b      	lsrs	r3, r3, #6
 800979a:	3301      	adds	r3, #1
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	6812      	ldr	r2, [r2, #0]
 80097a0:	430b      	orrs	r3, r1
 80097a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80097ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	495c      	ldr	r1, [pc, #368]	; (8009928 <HAL_I2C_Init+0x274>)
 80097b8:	428b      	cmp	r3, r1
 80097ba:	d819      	bhi.n	80097f0 <HAL_I2C_Init+0x13c>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	1e59      	subs	r1, r3, #1
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80097ca:	1c59      	adds	r1, r3, #1
 80097cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80097d0:	400b      	ands	r3, r1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00a      	beq.n	80097ec <HAL_I2C_Init+0x138>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	1e59      	subs	r1, r3, #1
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	005b      	lsls	r3, r3, #1
 80097e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80097e4:	3301      	adds	r3, #1
 80097e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097ea:	e051      	b.n	8009890 <HAL_I2C_Init+0x1dc>
 80097ec:	2304      	movs	r3, #4
 80097ee:	e04f      	b.n	8009890 <HAL_I2C_Init+0x1dc>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d111      	bne.n	800981c <HAL_I2C_Init+0x168>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	1e58      	subs	r0, r3, #1
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6859      	ldr	r1, [r3, #4]
 8009800:	460b      	mov	r3, r1
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	440b      	add	r3, r1
 8009806:	fbb0 f3f3 	udiv	r3, r0, r3
 800980a:	3301      	adds	r3, #1
 800980c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009810:	2b00      	cmp	r3, #0
 8009812:	bf0c      	ite	eq
 8009814:	2301      	moveq	r3, #1
 8009816:	2300      	movne	r3, #0
 8009818:	b2db      	uxtb	r3, r3
 800981a:	e012      	b.n	8009842 <HAL_I2C_Init+0x18e>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	1e58      	subs	r0, r3, #1
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6859      	ldr	r1, [r3, #4]
 8009824:	460b      	mov	r3, r1
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	440b      	add	r3, r1
 800982a:	0099      	lsls	r1, r3, #2
 800982c:	440b      	add	r3, r1
 800982e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009832:	3301      	adds	r3, #1
 8009834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009838:	2b00      	cmp	r3, #0
 800983a:	bf0c      	ite	eq
 800983c:	2301      	moveq	r3, #1
 800983e:	2300      	movne	r3, #0
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d001      	beq.n	800984a <HAL_I2C_Init+0x196>
 8009846:	2301      	movs	r3, #1
 8009848:	e022      	b.n	8009890 <HAL_I2C_Init+0x1dc>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10e      	bne.n	8009870 <HAL_I2C_Init+0x1bc>
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	1e58      	subs	r0, r3, #1
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6859      	ldr	r1, [r3, #4]
 800985a:	460b      	mov	r3, r1
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	440b      	add	r3, r1
 8009860:	fbb0 f3f3 	udiv	r3, r0, r3
 8009864:	3301      	adds	r3, #1
 8009866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800986a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800986e:	e00f      	b.n	8009890 <HAL_I2C_Init+0x1dc>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	1e58      	subs	r0, r3, #1
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6859      	ldr	r1, [r3, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	440b      	add	r3, r1
 800987e:	0099      	lsls	r1, r3, #2
 8009880:	440b      	add	r3, r1
 8009882:	fbb0 f3f3 	udiv	r3, r0, r3
 8009886:	3301      	adds	r3, #1
 8009888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800988c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	6809      	ldr	r1, [r1, #0]
 8009894:	4313      	orrs	r3, r2
 8009896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	69da      	ldr	r2, [r3, #28]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	431a      	orrs	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	430a      	orrs	r2, r1
 80098b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80098be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	6911      	ldr	r1, [r2, #16]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	68d2      	ldr	r2, [r2, #12]
 80098ca:	4311      	orrs	r1, r2
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	6812      	ldr	r2, [r2, #0]
 80098d0:	430b      	orrs	r3, r1
 80098d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	695a      	ldr	r2, [r3, #20]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	431a      	orrs	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	430a      	orrs	r2, r1
 80098ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f042 0201 	orr.w	r2, r2, #1
 80098fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2220      	movs	r2, #32
 800990a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	000186a0 	.word	0x000186a0
 800992c:	001e847f 	.word	0x001e847f
 8009930:	003d08ff 	.word	0x003d08ff
 8009934:	431bde83 	.word	0x431bde83
 8009938:	10624dd3 	.word	0x10624dd3

0800993c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d101      	bne.n	800994e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e021      	b.n	8009992 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2224      	movs	r2, #36	; 0x24
 8009952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f022 0201 	bic.w	r2, r2, #1
 8009964:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7fe fef0 	bl	800874c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af02      	add	r7, sp, #8
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	607a      	str	r2, [r7, #4]
 80099a6:	461a      	mov	r2, r3
 80099a8:	460b      	mov	r3, r1
 80099aa:	817b      	strh	r3, [r7, #10]
 80099ac:	4613      	mov	r3, r2
 80099ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80099b0:	f7ff f85e 	bl	8008a70 <HAL_GetTick>
 80099b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b20      	cmp	r3, #32
 80099c0:	f040 80e0 	bne.w	8009b84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	2319      	movs	r3, #25
 80099ca:	2201      	movs	r2, #1
 80099cc:	4970      	ldr	r1, [pc, #448]	; (8009b90 <HAL_I2C_Master_Transmit+0x1f4>)
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 fe5c 	bl	800a68c <I2C_WaitOnFlagUntilTimeout>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80099da:	2302      	movs	r3, #2
 80099dc:	e0d3      	b.n	8009b86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d101      	bne.n	80099ec <HAL_I2C_Master_Transmit+0x50>
 80099e8:	2302      	movs	r3, #2
 80099ea:	e0cc      	b.n	8009b86 <HAL_I2C_Master_Transmit+0x1ea>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d007      	beq.n	8009a12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f042 0201 	orr.w	r2, r2, #1
 8009a10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2221      	movs	r2, #33	; 0x21
 8009a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2210      	movs	r2, #16
 8009a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2200      	movs	r2, #0
 8009a36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	893a      	ldrh	r2, [r7, #8]
 8009a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	4a50      	ldr	r2, [pc, #320]	; (8009b94 <HAL_I2C_Master_Transmit+0x1f8>)
 8009a52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009a54:	8979      	ldrh	r1, [r7, #10]
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	6a3a      	ldr	r2, [r7, #32]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 fc16 	bl	800a28c <I2C_MasterRequestWrite>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e08d      	b.n	8009b86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	613b      	str	r3, [r7, #16]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	613b      	str	r3, [r7, #16]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	613b      	str	r3, [r7, #16]
 8009a7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009a80:	e066      	b.n	8009b50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	6a39      	ldr	r1, [r7, #32]
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f000 ff1a 	bl	800a8c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00d      	beq.n	8009aae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a96:	2b04      	cmp	r3, #4
 8009a98:	d107      	bne.n	8009aaa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009aa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e06b      	b.n	8009b86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab2:	781a      	ldrb	r2, [r3, #0]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	3b01      	subs	r3, #1
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	695b      	ldr	r3, [r3, #20]
 8009ae4:	f003 0304 	and.w	r3, r3, #4
 8009ae8:	2b04      	cmp	r3, #4
 8009aea:	d11b      	bne.n	8009b24 <HAL_I2C_Master_Transmit+0x188>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d017      	beq.n	8009b24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af8:	781a      	ldrb	r2, [r3, #0]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	1c5a      	adds	r2, r3, #1
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	3b01      	subs	r3, #1
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	6a39      	ldr	r1, [r7, #32]
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f000 ff11 	bl	800a950 <I2C_WaitOnBTFFlagUntilTimeout>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00d      	beq.n	8009b50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b38:	2b04      	cmp	r3, #4
 8009b3a:	d107      	bne.n	8009b4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e01a      	b.n	8009b86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d194      	bne.n	8009a82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	e000      	b.n	8009b86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009b84:	2302      	movs	r3, #2
  }
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	00100002 	.word	0x00100002
 8009b94:	ffff0000 	.word	0xffff0000

08009b98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b088      	sub	sp, #32
 8009b9c:	af02      	add	r7, sp, #8
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	4608      	mov	r0, r1
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	817b      	strh	r3, [r7, #10]
 8009baa:	460b      	mov	r3, r1
 8009bac:	813b      	strh	r3, [r7, #8]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009bb2:	f7fe ff5d 	bl	8008a70 <HAL_GetTick>
 8009bb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b20      	cmp	r3, #32
 8009bc2:	f040 80d9 	bne.w	8009d78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	2319      	movs	r3, #25
 8009bcc:	2201      	movs	r2, #1
 8009bce:	496d      	ldr	r1, [pc, #436]	; (8009d84 <HAL_I2C_Mem_Write+0x1ec>)
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f000 fd5b 	bl	800a68c <I2C_WaitOnFlagUntilTimeout>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009bdc:	2302      	movs	r3, #2
 8009bde:	e0cc      	b.n	8009d7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d101      	bne.n	8009bee <HAL_I2C_Mem_Write+0x56>
 8009bea:	2302      	movs	r3, #2
 8009bec:	e0c5      	b.n	8009d7a <HAL_I2C_Mem_Write+0x1e2>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 0301 	and.w	r3, r3, #1
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d007      	beq.n	8009c14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f042 0201 	orr.w	r2, r2, #1
 8009c12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2221      	movs	r2, #33	; 0x21
 8009c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2240      	movs	r2, #64	; 0x40
 8009c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6a3a      	ldr	r2, [r7, #32]
 8009c3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4a4d      	ldr	r2, [pc, #308]	; (8009d88 <HAL_I2C_Mem_Write+0x1f0>)
 8009c54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009c56:	88f8      	ldrh	r0, [r7, #6]
 8009c58:	893a      	ldrh	r2, [r7, #8]
 8009c5a:	8979      	ldrh	r1, [r7, #10]
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	9301      	str	r3, [sp, #4]
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	4603      	mov	r3, r0
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 fb92 	bl	800a390 <I2C_RequestMemoryWrite>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d052      	beq.n	8009d18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e081      	b.n	8009d7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 fe20 	bl	800a8c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00d      	beq.n	8009ca2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	d107      	bne.n	8009c9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e06b      	b.n	8009d7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	781a      	ldrb	r2, [r3, #0]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	695b      	ldr	r3, [r3, #20]
 8009cd8:	f003 0304 	and.w	r3, r3, #4
 8009cdc:	2b04      	cmp	r3, #4
 8009cde:	d11b      	bne.n	8009d18 <HAL_I2C_Mem_Write+0x180>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d017      	beq.n	8009d18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	781a      	ldrb	r2, [r3, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d02:	3b01      	subs	r3, #1
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	3b01      	subs	r3, #1
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1aa      	bne.n	8009c76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f000 fe13 	bl	800a950 <I2C_WaitOnBTFFlagUntilTimeout>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00d      	beq.n	8009d4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d34:	2b04      	cmp	r3, #4
 8009d36:	d107      	bne.n	8009d48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e016      	b.n	8009d7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2220      	movs	r2, #32
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	e000      	b.n	8009d7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009d78:	2302      	movs	r3, #2
  }
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	00100002 	.word	0x00100002
 8009d88:	ffff0000 	.word	0xffff0000

08009d8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08c      	sub	sp, #48	; 0x30
 8009d90:	af02      	add	r7, sp, #8
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	4608      	mov	r0, r1
 8009d96:	4611      	mov	r1, r2
 8009d98:	461a      	mov	r2, r3
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	817b      	strh	r3, [r7, #10]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	813b      	strh	r3, [r7, #8]
 8009da2:	4613      	mov	r3, r2
 8009da4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009da6:	2300      	movs	r3, #0
 8009da8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009daa:	f7fe fe61 	bl	8008a70 <HAL_GetTick>
 8009dae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b20      	cmp	r3, #32
 8009dba:	f040 8244 	bne.w	800a246 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	2319      	movs	r3, #25
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	4982      	ldr	r1, [pc, #520]	; (8009fd0 <HAL_I2C_Mem_Read+0x244>)
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f000 fc5f 	bl	800a68c <I2C_WaitOnFlagUntilTimeout>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	e237      	b.n	800a248 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d101      	bne.n	8009de6 <HAL_I2C_Mem_Read+0x5a>
 8009de2:	2302      	movs	r3, #2
 8009de4:	e230      	b.n	800a248 <HAL_I2C_Mem_Read+0x4bc>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d007      	beq.n	8009e0c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f042 0201 	orr.w	r2, r2, #1
 8009e0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2222      	movs	r2, #34	; 0x22
 8009e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2240      	movs	r2, #64	; 0x40
 8009e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4a62      	ldr	r2, [pc, #392]	; (8009fd4 <HAL_I2C_Mem_Read+0x248>)
 8009e4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e4e:	88f8      	ldrh	r0, [r7, #6]
 8009e50:	893a      	ldrh	r2, [r7, #8]
 8009e52:	8979      	ldrh	r1, [r7, #10]
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	9301      	str	r3, [sp, #4]
 8009e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f000 fb2c 	bl	800a4bc <I2C_RequestMemoryRead>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e1ec      	b.n	800a248 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d113      	bne.n	8009e9e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e76:	2300      	movs	r3, #0
 8009e78:	61fb      	str	r3, [r7, #28]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	61fb      	str	r3, [r7, #28]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	61fb      	str	r3, [r7, #28]
 8009e8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e9a:	601a      	str	r2, [r3, #0]
 8009e9c:	e1c0      	b.n	800a220 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d11e      	bne.n	8009ee4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009eb4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009eb6:	b672      	cpsid	i
}
 8009eb8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009eba:	2300      	movs	r3, #0
 8009ebc:	61bb      	str	r3, [r7, #24]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	61bb      	str	r3, [r7, #24]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	61bb      	str	r3, [r7, #24]
 8009ece:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ede:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009ee0:	b662      	cpsie	i
}
 8009ee2:	e035      	b.n	8009f50 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d11e      	bne.n	8009f2a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009efa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009efc:	b672      	cpsid	i
}
 8009efe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f00:	2300      	movs	r3, #0
 8009f02:	617b      	str	r3, [r7, #20]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	617b      	str	r3, [r7, #20]
 8009f14:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009f26:	b662      	cpsie	i
}
 8009f28:	e012      	b.n	8009f50 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f38:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	613b      	str	r3, [r7, #16]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	613b      	str	r3, [r7, #16]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	613b      	str	r3, [r7, #16]
 8009f4e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009f50:	e166      	b.n	800a220 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	f200 811f 	bhi.w	800a19a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d123      	bne.n	8009fac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 fd39 	bl	800a9e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	e167      	b.n	800a248 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	691a      	ldr	r2, [r3, #16]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f82:	b2d2      	uxtb	r2, r2
 8009f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f94:	3b01      	subs	r3, #1
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009faa:	e139      	b.n	800a220 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d152      	bne.n	800a05a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fba:	2200      	movs	r2, #0
 8009fbc:	4906      	ldr	r1, [pc, #24]	; (8009fd8 <HAL_I2C_Mem_Read+0x24c>)
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f000 fb64 	bl	800a68c <I2C_WaitOnFlagUntilTimeout>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d008      	beq.n	8009fdc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e13c      	b.n	800a248 <HAL_I2C_Mem_Read+0x4bc>
 8009fce:	bf00      	nop
 8009fd0:	00100002 	.word	0x00100002
 8009fd4:	ffff0000 	.word	0xffff0000
 8009fd8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009fdc:	b672      	cpsid	i
}
 8009fde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	691a      	ldr	r2, [r3, #16]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffa:	b2d2      	uxtb	r2, r2
 8009ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	1c5a      	adds	r2, r3, #1
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a00c:	3b01      	subs	r3, #1
 800a00e:	b29a      	uxth	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a018:	b29b      	uxth	r3, r3
 800a01a:	3b01      	subs	r3, #1
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a022:	b662      	cpsie	i
}
 800a024:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	691a      	ldr	r2, [r3, #16]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a030:	b2d2      	uxtb	r2, r2
 800a032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	1c5a      	adds	r2, r3, #1
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a042:	3b01      	subs	r3, #1
 800a044:	b29a      	uxth	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a04e:	b29b      	uxth	r3, r3
 800a050:	3b01      	subs	r3, #1
 800a052:	b29a      	uxth	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a058:	e0e2      	b.n	800a220 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a060:	2200      	movs	r2, #0
 800a062:	497b      	ldr	r1, [pc, #492]	; (800a250 <HAL_I2C_Mem_Read+0x4c4>)
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 fb11 	bl	800a68c <I2C_WaitOnFlagUntilTimeout>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d001      	beq.n	800a074 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e0e9      	b.n	800a248 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a082:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a084:	b672      	cpsid	i
}
 800a086:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	691a      	ldr	r2, [r3, #16]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a092:	b2d2      	uxtb	r2, r2
 800a094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09a:	1c5a      	adds	r2, r3, #1
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a0ba:	4b66      	ldr	r3, [pc, #408]	; (800a254 <HAL_I2C_Mem_Read+0x4c8>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	08db      	lsrs	r3, r3, #3
 800a0c0:	4a65      	ldr	r2, [pc, #404]	; (800a258 <HAL_I2C_Mem_Read+0x4cc>)
 800a0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c6:	0a1a      	lsrs	r2, r3, #8
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	00da      	lsls	r2, r3, #3
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d118      	bne.n	800a112 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fa:	f043 0220 	orr.w	r2, r3, #32
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a102:	b662      	cpsie	i
}
 800a104:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e09a      	b.n	800a248 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	f003 0304 	and.w	r3, r3, #4
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	d1d9      	bne.n	800a0d4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a12e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	691a      	ldr	r2, [r3, #16]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13a:	b2d2      	uxtb	r2, r2
 800a13c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a142:	1c5a      	adds	r2, r3, #1
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a14c:	3b01      	subs	r3, #1
 800a14e:	b29a      	uxth	r2, r3
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a158:	b29b      	uxth	r3, r3
 800a15a:	3b01      	subs	r3, #1
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a162:	b662      	cpsie	i
}
 800a164:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	691a      	ldr	r2, [r3, #16]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a170:	b2d2      	uxtb	r2, r2
 800a172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a178:	1c5a      	adds	r2, r3, #1
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a182:	3b01      	subs	r3, #1
 800a184:	b29a      	uxth	r2, r3
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a18e:	b29b      	uxth	r3, r3
 800a190:	3b01      	subs	r3, #1
 800a192:	b29a      	uxth	r2, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a198:	e042      	b.n	800a220 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a19a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a19c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 fc1e 	bl	800a9e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e04c      	b.n	800a248 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	691a      	ldr	r2, [r3, #16]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	b2d2      	uxtb	r2, r2
 800a1ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c0:	1c5a      	adds	r2, r3, #1
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	f003 0304 	and.w	r3, r3, #4
 800a1ea:	2b04      	cmp	r3, #4
 800a1ec:	d118      	bne.n	800a220 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	691a      	ldr	r2, [r3, #16]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	b2d2      	uxtb	r2, r2
 800a1fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a200:	1c5a      	adds	r2, r3, #1
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a20a:	3b01      	subs	r3, #1
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a216:	b29b      	uxth	r3, r3
 800a218:	3b01      	subs	r3, #1
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a224:	2b00      	cmp	r3, #0
 800a226:	f47f ae94 	bne.w	8009f52 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2220      	movs	r2, #32
 800a22e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	e000      	b.n	800a248 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a246:	2302      	movs	r3, #2
  }
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3728      	adds	r7, #40	; 0x28
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	00010004 	.word	0x00010004
 800a254:	200000a0 	.word	0x200000a0
 800a258:	14f8b589 	.word	0x14f8b589

0800a25c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a26a:	b2db      	uxtb	r3, r3
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	bc80      	pop	{r7}
 800a274:	4770      	bx	lr

0800a276 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	bc80      	pop	{r7}
 800a28a:	4770      	bx	lr

0800a28c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af02      	add	r7, sp, #8
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	607a      	str	r2, [r7, #4]
 800a296:	603b      	str	r3, [r7, #0]
 800a298:	460b      	mov	r3, r1
 800a29a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	2b08      	cmp	r3, #8
 800a2a6:	d006      	beq.n	800a2b6 <I2C_MasterRequestWrite+0x2a>
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d003      	beq.n	800a2b6 <I2C_MasterRequestWrite+0x2a>
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a2b4:	d108      	bne.n	800a2c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2c4:	601a      	str	r2, [r3, #0]
 800a2c6:	e00b      	b.n	800a2e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2cc:	2b12      	cmp	r3, #18
 800a2ce:	d107      	bne.n	800a2e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f000 f9cd 	bl	800a68c <I2C_WaitOnFlagUntilTimeout>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00d      	beq.n	800a314 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a306:	d103      	bne.n	800a310 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a30e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a310:	2303      	movs	r3, #3
 800a312:	e035      	b.n	800a380 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a31c:	d108      	bne.n	800a330 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a31e:	897b      	ldrh	r3, [r7, #10]
 800a320:	b2db      	uxtb	r3, r3
 800a322:	461a      	mov	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a32c:	611a      	str	r2, [r3, #16]
 800a32e:	e01b      	b.n	800a368 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a330:	897b      	ldrh	r3, [r7, #10]
 800a332:	11db      	asrs	r3, r3, #7
 800a334:	b2db      	uxtb	r3, r3
 800a336:	f003 0306 	and.w	r3, r3, #6
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	f063 030f 	orn	r3, r3, #15
 800a340:	b2da      	uxtb	r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	490e      	ldr	r1, [pc, #56]	; (800a388 <I2C_MasterRequestWrite+0xfc>)
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 fa16 	bl	800a780 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e010      	b.n	800a380 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a35e:	897b      	ldrh	r3, [r7, #10]
 800a360:	b2da      	uxtb	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	4907      	ldr	r1, [pc, #28]	; (800a38c <I2C_MasterRequestWrite+0x100>)
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f000 fa06 	bl	800a780 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d001      	beq.n	800a37e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e000      	b.n	800a380 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	00010008 	.word	0x00010008
 800a38c:	00010002 	.word	0x00010002

0800a390 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b088      	sub	sp, #32
 800a394:	af02      	add	r7, sp, #8
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	4608      	mov	r0, r1
 800a39a:	4611      	mov	r1, r2
 800a39c:	461a      	mov	r2, r3
 800a39e:	4603      	mov	r3, r0
 800a3a0:	817b      	strh	r3, [r7, #10]
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	813b      	strh	r3, [r7, #8]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 f960 	bl	800a68c <I2C_WaitOnFlagUntilTimeout>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00d      	beq.n	800a3ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3e0:	d103      	bne.n	800a3ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e05f      	b.n	800a4ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a3ee:	897b      	ldrh	r3, [r7, #10]
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a3fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a400:	6a3a      	ldr	r2, [r7, #32]
 800a402:	492d      	ldr	r1, [pc, #180]	; (800a4b8 <I2C_RequestMemoryWrite+0x128>)
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f000 f9bb 	bl	800a780 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e04c      	b.n	800a4ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a414:	2300      	movs	r3, #0
 800a416:	617b      	str	r3, [r7, #20]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	617b      	str	r3, [r7, #20]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	617b      	str	r3, [r7, #20]
 800a428:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a42a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a42c:	6a39      	ldr	r1, [r7, #32]
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f000 fa46 	bl	800a8c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00d      	beq.n	800a456 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43e:	2b04      	cmp	r3, #4
 800a440:	d107      	bne.n	800a452 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a450:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e02b      	b.n	800a4ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a456:	88fb      	ldrh	r3, [r7, #6]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d105      	bne.n	800a468 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a45c:	893b      	ldrh	r3, [r7, #8]
 800a45e:	b2da      	uxtb	r2, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	611a      	str	r2, [r3, #16]
 800a466:	e021      	b.n	800a4ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a468:	893b      	ldrh	r3, [r7, #8]
 800a46a:	0a1b      	lsrs	r3, r3, #8
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a478:	6a39      	ldr	r1, [r7, #32]
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f000 fa20 	bl	800a8c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00d      	beq.n	800a4a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48a:	2b04      	cmp	r3, #4
 800a48c:	d107      	bne.n	800a49e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a49c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e005      	b.n	800a4ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a4a2:	893b      	ldrh	r3, [r7, #8]
 800a4a4:	b2da      	uxtb	r2, r3
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3718      	adds	r7, #24
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	00010002 	.word	0x00010002

0800a4bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af02      	add	r7, sp, #8
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	4608      	mov	r0, r1
 800a4c6:	4611      	mov	r1, r2
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	817b      	strh	r3, [r7, #10]
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	813b      	strh	r3, [r7, #8]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a4e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	6a3b      	ldr	r3, [r7, #32]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f000 f8c2 	bl	800a68c <I2C_WaitOnFlagUntilTimeout>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00d      	beq.n	800a52a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a51c:	d103      	bne.n	800a526 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a524:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a526:	2303      	movs	r3, #3
 800a528:	e0aa      	b.n	800a680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a52a:	897b      	ldrh	r3, [r7, #10]
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	461a      	mov	r2, r3
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a538:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53c:	6a3a      	ldr	r2, [r7, #32]
 800a53e:	4952      	ldr	r1, [pc, #328]	; (800a688 <I2C_RequestMemoryRead+0x1cc>)
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f000 f91d 	bl	800a780 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d001      	beq.n	800a550 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e097      	b.n	800a680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a550:	2300      	movs	r3, #0
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	617b      	str	r3, [r7, #20]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	617b      	str	r3, [r7, #20]
 800a564:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a568:	6a39      	ldr	r1, [r7, #32]
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f000 f9a8 	bl	800a8c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00d      	beq.n	800a592 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57a:	2b04      	cmp	r3, #4
 800a57c:	d107      	bne.n	800a58e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a58c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e076      	b.n	800a680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a592:	88fb      	ldrh	r3, [r7, #6]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d105      	bne.n	800a5a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a598:	893b      	ldrh	r3, [r7, #8]
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	611a      	str	r2, [r3, #16]
 800a5a2:	e021      	b.n	800a5e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a5a4:	893b      	ldrh	r3, [r7, #8]
 800a5a6:	0a1b      	lsrs	r3, r3, #8
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5b4:	6a39      	ldr	r1, [r7, #32]
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 f982 	bl	800a8c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00d      	beq.n	800a5de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c6:	2b04      	cmp	r3, #4
 800a5c8:	d107      	bne.n	800a5da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e050      	b.n	800a680 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a5de:	893b      	ldrh	r3, [r7, #8]
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ea:	6a39      	ldr	r1, [r7, #32]
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f000 f967 	bl	800a8c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00d      	beq.n	800a614 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fc:	2b04      	cmp	r3, #4
 800a5fe:	d107      	bne.n	800a610 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a60e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e035      	b.n	800a680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a622:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f000 f82b 	bl	800a68c <I2C_WaitOnFlagUntilTimeout>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00d      	beq.n	800a658 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a64a:	d103      	bne.n	800a654 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a652:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a654:	2303      	movs	r3, #3
 800a656:	e013      	b.n	800a680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a658:	897b      	ldrh	r3, [r7, #10]
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	f043 0301 	orr.w	r3, r3, #1
 800a660:	b2da      	uxtb	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	6a3a      	ldr	r2, [r7, #32]
 800a66c:	4906      	ldr	r1, [pc, #24]	; (800a688 <I2C_RequestMemoryRead+0x1cc>)
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 f886 	bl	800a780 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e000      	b.n	800a680 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	00010002 	.word	0x00010002

0800a68c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	603b      	str	r3, [r7, #0]
 800a698:	4613      	mov	r3, r2
 800a69a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a69c:	e048      	b.n	800a730 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6a4:	d044      	beq.n	800a730 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6a6:	f7fe f9e3 	bl	8008a70 <HAL_GetTick>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d302      	bcc.n	800a6bc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d139      	bne.n	800a730 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	0c1b      	lsrs	r3, r3, #16
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d10d      	bne.n	800a6e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	695b      	ldr	r3, [r3, #20]
 800a6cc:	43da      	mvns	r2, r3
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	bf0c      	ite	eq
 800a6d8:	2301      	moveq	r3, #1
 800a6da:	2300      	movne	r3, #0
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	461a      	mov	r2, r3
 800a6e0:	e00c      	b.n	800a6fc <I2C_WaitOnFlagUntilTimeout+0x70>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	43da      	mvns	r2, r3
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	bf0c      	ite	eq
 800a6f4:	2301      	moveq	r3, #1
 800a6f6:	2300      	movne	r3, #0
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	79fb      	ldrb	r3, [r7, #7]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d116      	bne.n	800a730 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2220      	movs	r2, #32
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71c:	f043 0220 	orr.w	r2, r3, #32
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e023      	b.n	800a778 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	0c1b      	lsrs	r3, r3, #16
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b01      	cmp	r3, #1
 800a738:	d10d      	bne.n	800a756 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	695b      	ldr	r3, [r3, #20]
 800a740:	43da      	mvns	r2, r3
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	4013      	ands	r3, r2
 800a746:	b29b      	uxth	r3, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	bf0c      	ite	eq
 800a74c:	2301      	moveq	r3, #1
 800a74e:	2300      	movne	r3, #0
 800a750:	b2db      	uxtb	r3, r3
 800a752:	461a      	mov	r2, r3
 800a754:	e00c      	b.n	800a770 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	699b      	ldr	r3, [r3, #24]
 800a75c:	43da      	mvns	r2, r3
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	4013      	ands	r3, r2
 800a762:	b29b      	uxth	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	bf0c      	ite	eq
 800a768:	2301      	moveq	r3, #1
 800a76a:	2300      	movne	r3, #0
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	461a      	mov	r2, r3
 800a770:	79fb      	ldrb	r3, [r7, #7]
 800a772:	429a      	cmp	r2, r3
 800a774:	d093      	beq.n	800a69e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
 800a78c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a78e:	e071      	b.n	800a874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a79a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a79e:	d123      	bne.n	800a7e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a7b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d4:	f043 0204 	orr.w	r2, r3, #4
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e067      	b.n	800a8b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7ee:	d041      	beq.n	800a874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7f0:	f7fe f93e 	bl	8008a70 <HAL_GetTick>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	1ad3      	subs	r3, r2, r3
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d302      	bcc.n	800a806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d136      	bne.n	800a874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	0c1b      	lsrs	r3, r3, #16
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d10c      	bne.n	800a82a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	43da      	mvns	r2, r3
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	4013      	ands	r3, r2
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	2b00      	cmp	r3, #0
 800a820:	bf14      	ite	ne
 800a822:	2301      	movne	r3, #1
 800a824:	2300      	moveq	r3, #0
 800a826:	b2db      	uxtb	r3, r3
 800a828:	e00b      	b.n	800a842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	43da      	mvns	r2, r3
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	4013      	ands	r3, r2
 800a836:	b29b      	uxth	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	bf14      	ite	ne
 800a83c:	2301      	movne	r3, #1
 800a83e:	2300      	moveq	r3, #0
 800a840:	b2db      	uxtb	r3, r3
 800a842:	2b00      	cmp	r3, #0
 800a844:	d016      	beq.n	800a874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2220      	movs	r2, #32
 800a850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a860:	f043 0220 	orr.w	r2, r3, #32
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e021      	b.n	800a8b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	0c1b      	lsrs	r3, r3, #16
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d10c      	bne.n	800a898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	43da      	mvns	r2, r3
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	4013      	ands	r3, r2
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	bf14      	ite	ne
 800a890:	2301      	movne	r3, #1
 800a892:	2300      	moveq	r3, #0
 800a894:	b2db      	uxtb	r3, r3
 800a896:	e00b      	b.n	800a8b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	43da      	mvns	r2, r3
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	bf14      	ite	ne
 800a8aa:	2301      	movne	r3, #1
 800a8ac:	2300      	moveq	r3, #0
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f47f af6d 	bne.w	800a790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a8cc:	e034      	b.n	800a938 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	f000 f8e3 	bl	800aa9a <I2C_IsAcknowledgeFailed>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e034      	b.n	800a948 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8e4:	d028      	beq.n	800a938 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8e6:	f7fe f8c3 	bl	8008a70 <HAL_GetTick>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d302      	bcc.n	800a8fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d11d      	bne.n	800a938 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a906:	2b80      	cmp	r3, #128	; 0x80
 800a908:	d016      	beq.n	800a938 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2220      	movs	r2, #32
 800a914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a924:	f043 0220 	orr.w	r2, r3, #32
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2200      	movs	r2, #0
 800a930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	e007      	b.n	800a948 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a942:	2b80      	cmp	r3, #128	; 0x80
 800a944:	d1c3      	bne.n	800a8ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a95c:	e034      	b.n	800a9c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f000 f89b 	bl	800aa9a <I2C_IsAcknowledgeFailed>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d001      	beq.n	800a96e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e034      	b.n	800a9d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a974:	d028      	beq.n	800a9c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a976:	f7fe f87b 	bl	8008a70 <HAL_GetTick>
 800a97a:	4602      	mov	r2, r0
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	1ad3      	subs	r3, r2, r3
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	429a      	cmp	r2, r3
 800a984:	d302      	bcc.n	800a98c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d11d      	bne.n	800a9c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	f003 0304 	and.w	r3, r3, #4
 800a996:	2b04      	cmp	r3, #4
 800a998:	d016      	beq.n	800a9c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2220      	movs	r2, #32
 800a9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b4:	f043 0220 	orr.w	r2, r3, #32
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e007      	b.n	800a9d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	f003 0304 	and.w	r3, r3, #4
 800a9d2:	2b04      	cmp	r3, #4
 800a9d4:	d1c3      	bne.n	800a95e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a9ec:	e049      	b.n	800aa82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	f003 0310 	and.w	r3, r3, #16
 800a9f8:	2b10      	cmp	r3, #16
 800a9fa:	d119      	bne.n	800aa30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f06f 0210 	mvn.w	r2, #16
 800aa04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2220      	movs	r2, #32
 800aa10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e030      	b.n	800aa92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa30:	f7fe f81e 	bl	8008a70 <HAL_GetTick>
 800aa34:	4602      	mov	r2, r0
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d302      	bcc.n	800aa46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d11d      	bne.n	800aa82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	695b      	ldr	r3, [r3, #20]
 800aa4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa50:	2b40      	cmp	r3, #64	; 0x40
 800aa52:	d016      	beq.n	800aa82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2220      	movs	r2, #32
 800aa5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6e:	f043 0220 	orr.w	r2, r3, #32
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e007      	b.n	800aa92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa8c:	2b40      	cmp	r3, #64	; 0x40
 800aa8e:	d1ae      	bne.n	800a9ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800aa9a:	b480      	push	{r7}
 800aa9c:	b083      	sub	sp, #12
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aab0:	d11b      	bne.n	800aaea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aaba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2220      	movs	r2, #32
 800aac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad6:	f043 0204 	orr.w	r2, r3, #4
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e000      	b.n	800aaec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bc80      	pop	{r7}
 800aaf4:	4770      	bx	lr
	...

0800aaf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d101      	bne.n	800ab0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e272      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 0301 	and.w	r3, r3, #1
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f000 8087 	beq.w	800ac26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab18:	4b92      	ldr	r3, [pc, #584]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	f003 030c 	and.w	r3, r3, #12
 800ab20:	2b04      	cmp	r3, #4
 800ab22:	d00c      	beq.n	800ab3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ab24:	4b8f      	ldr	r3, [pc, #572]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	f003 030c 	and.w	r3, r3, #12
 800ab2c:	2b08      	cmp	r3, #8
 800ab2e:	d112      	bne.n	800ab56 <HAL_RCC_OscConfig+0x5e>
 800ab30:	4b8c      	ldr	r3, [pc, #560]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab3c:	d10b      	bne.n	800ab56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab3e:	4b89      	ldr	r3, [pc, #548]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d06c      	beq.n	800ac24 <HAL_RCC_OscConfig+0x12c>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d168      	bne.n	800ac24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e24c      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab5e:	d106      	bne.n	800ab6e <HAL_RCC_OscConfig+0x76>
 800ab60:	4b80      	ldr	r3, [pc, #512]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a7f      	ldr	r2, [pc, #508]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ab66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab6a:	6013      	str	r3, [r2, #0]
 800ab6c:	e02e      	b.n	800abcc <HAL_RCC_OscConfig+0xd4>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d10c      	bne.n	800ab90 <HAL_RCC_OscConfig+0x98>
 800ab76:	4b7b      	ldr	r3, [pc, #492]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a7a      	ldr	r2, [pc, #488]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ab7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab80:	6013      	str	r3, [r2, #0]
 800ab82:	4b78      	ldr	r3, [pc, #480]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a77      	ldr	r2, [pc, #476]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ab88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab8c:	6013      	str	r3, [r2, #0]
 800ab8e:	e01d      	b.n	800abcc <HAL_RCC_OscConfig+0xd4>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab98:	d10c      	bne.n	800abb4 <HAL_RCC_OscConfig+0xbc>
 800ab9a:	4b72      	ldr	r3, [pc, #456]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a71      	ldr	r2, [pc, #452]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800aba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aba4:	6013      	str	r3, [r2, #0]
 800aba6:	4b6f      	ldr	r3, [pc, #444]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a6e      	ldr	r2, [pc, #440]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800abac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	e00b      	b.n	800abcc <HAL_RCC_OscConfig+0xd4>
 800abb4:	4b6b      	ldr	r3, [pc, #428]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a6a      	ldr	r2, [pc, #424]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800abba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abbe:	6013      	str	r3, [r2, #0]
 800abc0:	4b68      	ldr	r3, [pc, #416]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a67      	ldr	r2, [pc, #412]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800abc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d013      	beq.n	800abfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abd4:	f7fd ff4c 	bl	8008a70 <HAL_GetTick>
 800abd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abda:	e008      	b.n	800abee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abdc:	f7fd ff48 	bl	8008a70 <HAL_GetTick>
 800abe0:	4602      	mov	r2, r0
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	2b64      	cmp	r3, #100	; 0x64
 800abe8:	d901      	bls.n	800abee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800abea:	2303      	movs	r3, #3
 800abec:	e200      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abee:	4b5d      	ldr	r3, [pc, #372]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0f0      	beq.n	800abdc <HAL_RCC_OscConfig+0xe4>
 800abfa:	e014      	b.n	800ac26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abfc:	f7fd ff38 	bl	8008a70 <HAL_GetTick>
 800ac00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac02:	e008      	b.n	800ac16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac04:	f7fd ff34 	bl	8008a70 <HAL_GetTick>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	2b64      	cmp	r3, #100	; 0x64
 800ac10:	d901      	bls.n	800ac16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ac12:	2303      	movs	r3, #3
 800ac14:	e1ec      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac16:	4b53      	ldr	r3, [pc, #332]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1f0      	bne.n	800ac04 <HAL_RCC_OscConfig+0x10c>
 800ac22:	e000      	b.n	800ac26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d063      	beq.n	800acfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ac32:	4b4c      	ldr	r3, [pc, #304]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	f003 030c 	and.w	r3, r3, #12
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00b      	beq.n	800ac56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ac3e:	4b49      	ldr	r3, [pc, #292]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	f003 030c 	and.w	r3, r3, #12
 800ac46:	2b08      	cmp	r3, #8
 800ac48:	d11c      	bne.n	800ac84 <HAL_RCC_OscConfig+0x18c>
 800ac4a:	4b46      	ldr	r3, [pc, #280]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d116      	bne.n	800ac84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac56:	4b43      	ldr	r3, [pc, #268]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 0302 	and.w	r3, r3, #2
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d005      	beq.n	800ac6e <HAL_RCC_OscConfig+0x176>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d001      	beq.n	800ac6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e1c0      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac6e:	4b3d      	ldr	r3, [pc, #244]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	00db      	lsls	r3, r3, #3
 800ac7c:	4939      	ldr	r1, [pc, #228]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac82:	e03a      	b.n	800acfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d020      	beq.n	800acce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac8c:	4b36      	ldr	r3, [pc, #216]	; (800ad68 <HAL_RCC_OscConfig+0x270>)
 800ac8e:	2201      	movs	r2, #1
 800ac90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac92:	f7fd feed 	bl	8008a70 <HAL_GetTick>
 800ac96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac98:	e008      	b.n	800acac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac9a:	f7fd fee9 	bl	8008a70 <HAL_GetTick>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d901      	bls.n	800acac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aca8:	2303      	movs	r3, #3
 800acaa:	e1a1      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acac:	4b2d      	ldr	r3, [pc, #180]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 0302 	and.w	r3, r3, #2
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d0f0      	beq.n	800ac9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acb8:	4b2a      	ldr	r3, [pc, #168]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	00db      	lsls	r3, r3, #3
 800acc6:	4927      	ldr	r1, [pc, #156]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800acc8:	4313      	orrs	r3, r2
 800acca:	600b      	str	r3, [r1, #0]
 800accc:	e015      	b.n	800acfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800acce:	4b26      	ldr	r3, [pc, #152]	; (800ad68 <HAL_RCC_OscConfig+0x270>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acd4:	f7fd fecc 	bl	8008a70 <HAL_GetTick>
 800acd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acda:	e008      	b.n	800acee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acdc:	f7fd fec8 	bl	8008a70 <HAL_GetTick>
 800ace0:	4602      	mov	r2, r0
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d901      	bls.n	800acee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800acea:	2303      	movs	r3, #3
 800acec:	e180      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acee:	4b1d      	ldr	r3, [pc, #116]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 0302 	and.w	r3, r3, #2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1f0      	bne.n	800acdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f003 0308 	and.w	r3, r3, #8
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d03a      	beq.n	800ad7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d019      	beq.n	800ad42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad0e:	4b17      	ldr	r3, [pc, #92]	; (800ad6c <HAL_RCC_OscConfig+0x274>)
 800ad10:	2201      	movs	r2, #1
 800ad12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad14:	f7fd feac 	bl	8008a70 <HAL_GetTick>
 800ad18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad1a:	e008      	b.n	800ad2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad1c:	f7fd fea8 	bl	8008a70 <HAL_GetTick>
 800ad20:	4602      	mov	r2, r0
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d901      	bls.n	800ad2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e160      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad2e:	4b0d      	ldr	r3, [pc, #52]	; (800ad64 <HAL_RCC_OscConfig+0x26c>)
 800ad30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad32:	f003 0302 	and.w	r3, r3, #2
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d0f0      	beq.n	800ad1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ad3a:	2001      	movs	r0, #1
 800ad3c:	f000 face 	bl	800b2dc <RCC_Delay>
 800ad40:	e01c      	b.n	800ad7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad42:	4b0a      	ldr	r3, [pc, #40]	; (800ad6c <HAL_RCC_OscConfig+0x274>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad48:	f7fd fe92 	bl	8008a70 <HAL_GetTick>
 800ad4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad4e:	e00f      	b.n	800ad70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad50:	f7fd fe8e 	bl	8008a70 <HAL_GetTick>
 800ad54:	4602      	mov	r2, r0
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d908      	bls.n	800ad70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	e146      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
 800ad62:	bf00      	nop
 800ad64:	40021000 	.word	0x40021000
 800ad68:	42420000 	.word	0x42420000
 800ad6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad70:	4b92      	ldr	r3, [pc, #584]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ad72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad74:	f003 0302 	and.w	r3, r3, #2
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d1e9      	bne.n	800ad50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 0304 	and.w	r3, r3, #4
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 80a6 	beq.w	800aed6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad8e:	4b8b      	ldr	r3, [pc, #556]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10d      	bne.n	800adb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad9a:	4b88      	ldr	r3, [pc, #544]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ad9c:	69db      	ldr	r3, [r3, #28]
 800ad9e:	4a87      	ldr	r2, [pc, #540]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ada0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ada4:	61d3      	str	r3, [r2, #28]
 800ada6:	4b85      	ldr	r3, [pc, #532]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ada8:	69db      	ldr	r3, [r3, #28]
 800adaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adae:	60bb      	str	r3, [r7, #8]
 800adb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800adb2:	2301      	movs	r3, #1
 800adb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800adb6:	4b82      	ldr	r3, [pc, #520]	; (800afc0 <HAL_RCC_OscConfig+0x4c8>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d118      	bne.n	800adf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800adc2:	4b7f      	ldr	r3, [pc, #508]	; (800afc0 <HAL_RCC_OscConfig+0x4c8>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a7e      	ldr	r2, [pc, #504]	; (800afc0 <HAL_RCC_OscConfig+0x4c8>)
 800adc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800adce:	f7fd fe4f 	bl	8008a70 <HAL_GetTick>
 800add2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800add4:	e008      	b.n	800ade8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800add6:	f7fd fe4b 	bl	8008a70 <HAL_GetTick>
 800adda:	4602      	mov	r2, r0
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	1ad3      	subs	r3, r2, r3
 800ade0:	2b64      	cmp	r3, #100	; 0x64
 800ade2:	d901      	bls.n	800ade8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ade4:	2303      	movs	r3, #3
 800ade6:	e103      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ade8:	4b75      	ldr	r3, [pc, #468]	; (800afc0 <HAL_RCC_OscConfig+0x4c8>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d0f0      	beq.n	800add6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d106      	bne.n	800ae0a <HAL_RCC_OscConfig+0x312>
 800adfc:	4b6f      	ldr	r3, [pc, #444]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800adfe:	6a1b      	ldr	r3, [r3, #32]
 800ae00:	4a6e      	ldr	r2, [pc, #440]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ae02:	f043 0301 	orr.w	r3, r3, #1
 800ae06:	6213      	str	r3, [r2, #32]
 800ae08:	e02d      	b.n	800ae66 <HAL_RCC_OscConfig+0x36e>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10c      	bne.n	800ae2c <HAL_RCC_OscConfig+0x334>
 800ae12:	4b6a      	ldr	r3, [pc, #424]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	4a69      	ldr	r2, [pc, #420]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ae18:	f023 0301 	bic.w	r3, r3, #1
 800ae1c:	6213      	str	r3, [r2, #32]
 800ae1e:	4b67      	ldr	r3, [pc, #412]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	4a66      	ldr	r2, [pc, #408]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ae24:	f023 0304 	bic.w	r3, r3, #4
 800ae28:	6213      	str	r3, [r2, #32]
 800ae2a:	e01c      	b.n	800ae66 <HAL_RCC_OscConfig+0x36e>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	2b05      	cmp	r3, #5
 800ae32:	d10c      	bne.n	800ae4e <HAL_RCC_OscConfig+0x356>
 800ae34:	4b61      	ldr	r3, [pc, #388]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ae36:	6a1b      	ldr	r3, [r3, #32]
 800ae38:	4a60      	ldr	r2, [pc, #384]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ae3a:	f043 0304 	orr.w	r3, r3, #4
 800ae3e:	6213      	str	r3, [r2, #32]
 800ae40:	4b5e      	ldr	r3, [pc, #376]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ae42:	6a1b      	ldr	r3, [r3, #32]
 800ae44:	4a5d      	ldr	r2, [pc, #372]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ae46:	f043 0301 	orr.w	r3, r3, #1
 800ae4a:	6213      	str	r3, [r2, #32]
 800ae4c:	e00b      	b.n	800ae66 <HAL_RCC_OscConfig+0x36e>
 800ae4e:	4b5b      	ldr	r3, [pc, #364]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ae50:	6a1b      	ldr	r3, [r3, #32]
 800ae52:	4a5a      	ldr	r2, [pc, #360]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ae54:	f023 0301 	bic.w	r3, r3, #1
 800ae58:	6213      	str	r3, [r2, #32]
 800ae5a:	4b58      	ldr	r3, [pc, #352]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	4a57      	ldr	r2, [pc, #348]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ae60:	f023 0304 	bic.w	r3, r3, #4
 800ae64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d015      	beq.n	800ae9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae6e:	f7fd fdff 	bl	8008a70 <HAL_GetTick>
 800ae72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae74:	e00a      	b.n	800ae8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae76:	f7fd fdfb 	bl	8008a70 <HAL_GetTick>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	1ad3      	subs	r3, r2, r3
 800ae80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d901      	bls.n	800ae8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ae88:	2303      	movs	r3, #3
 800ae8a:	e0b1      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae8c:	4b4b      	ldr	r3, [pc, #300]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800ae8e:	6a1b      	ldr	r3, [r3, #32]
 800ae90:	f003 0302 	and.w	r3, r3, #2
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d0ee      	beq.n	800ae76 <HAL_RCC_OscConfig+0x37e>
 800ae98:	e014      	b.n	800aec4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae9a:	f7fd fde9 	bl	8008a70 <HAL_GetTick>
 800ae9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aea0:	e00a      	b.n	800aeb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aea2:	f7fd fde5 	bl	8008a70 <HAL_GetTick>
 800aea6:	4602      	mov	r2, r0
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d901      	bls.n	800aeb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800aeb4:	2303      	movs	r3, #3
 800aeb6:	e09b      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aeb8:	4b40      	ldr	r3, [pc, #256]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800aeba:	6a1b      	ldr	r3, [r3, #32]
 800aebc:	f003 0302 	and.w	r3, r3, #2
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1ee      	bne.n	800aea2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aec4:	7dfb      	ldrb	r3, [r7, #23]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d105      	bne.n	800aed6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aeca:	4b3c      	ldr	r3, [pc, #240]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800aecc:	69db      	ldr	r3, [r3, #28]
 800aece:	4a3b      	ldr	r2, [pc, #236]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800aed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aed4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	69db      	ldr	r3, [r3, #28]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f000 8087 	beq.w	800afee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aee0:	4b36      	ldr	r3, [pc, #216]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	f003 030c 	and.w	r3, r3, #12
 800aee8:	2b08      	cmp	r3, #8
 800aeea:	d061      	beq.n	800afb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	69db      	ldr	r3, [r3, #28]
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d146      	bne.n	800af82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aef4:	4b33      	ldr	r3, [pc, #204]	; (800afc4 <HAL_RCC_OscConfig+0x4cc>)
 800aef6:	2200      	movs	r2, #0
 800aef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aefa:	f7fd fdb9 	bl	8008a70 <HAL_GetTick>
 800aefe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af00:	e008      	b.n	800af14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af02:	f7fd fdb5 	bl	8008a70 <HAL_GetTick>
 800af06:	4602      	mov	r2, r0
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d901      	bls.n	800af14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800af10:	2303      	movs	r3, #3
 800af12:	e06d      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af14:	4b29      	ldr	r3, [pc, #164]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1f0      	bne.n	800af02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a1b      	ldr	r3, [r3, #32]
 800af24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af28:	d108      	bne.n	800af3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800af2a:	4b24      	ldr	r3, [pc, #144]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	4921      	ldr	r1, [pc, #132]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800af38:	4313      	orrs	r3, r2
 800af3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800af3c:	4b1f      	ldr	r3, [pc, #124]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a19      	ldr	r1, [r3, #32]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4c:	430b      	orrs	r3, r1
 800af4e:	491b      	ldr	r1, [pc, #108]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800af50:	4313      	orrs	r3, r2
 800af52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af54:	4b1b      	ldr	r3, [pc, #108]	; (800afc4 <HAL_RCC_OscConfig+0x4cc>)
 800af56:	2201      	movs	r2, #1
 800af58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af5a:	f7fd fd89 	bl	8008a70 <HAL_GetTick>
 800af5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800af60:	e008      	b.n	800af74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af62:	f7fd fd85 	bl	8008a70 <HAL_GetTick>
 800af66:	4602      	mov	r2, r0
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d901      	bls.n	800af74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800af70:	2303      	movs	r3, #3
 800af72:	e03d      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800af74:	4b11      	ldr	r3, [pc, #68]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d0f0      	beq.n	800af62 <HAL_RCC_OscConfig+0x46a>
 800af80:	e035      	b.n	800afee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af82:	4b10      	ldr	r3, [pc, #64]	; (800afc4 <HAL_RCC_OscConfig+0x4cc>)
 800af84:	2200      	movs	r2, #0
 800af86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af88:	f7fd fd72 	bl	8008a70 <HAL_GetTick>
 800af8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af8e:	e008      	b.n	800afa2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af90:	f7fd fd6e 	bl	8008a70 <HAL_GetTick>
 800af94:	4602      	mov	r2, r0
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d901      	bls.n	800afa2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e026      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800afa2:	4b06      	ldr	r3, [pc, #24]	; (800afbc <HAL_RCC_OscConfig+0x4c4>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1f0      	bne.n	800af90 <HAL_RCC_OscConfig+0x498>
 800afae:	e01e      	b.n	800afee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	69db      	ldr	r3, [r3, #28]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d107      	bne.n	800afc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	e019      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
 800afbc:	40021000 	.word	0x40021000
 800afc0:	40007000 	.word	0x40007000
 800afc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800afc8:	4b0b      	ldr	r3, [pc, #44]	; (800aff8 <HAL_RCC_OscConfig+0x500>)
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d106      	bne.n	800afea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d001      	beq.n	800afee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	e000      	b.n	800aff0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3718      	adds	r7, #24
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	40021000 	.word	0x40021000

0800affc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e0d0      	b.n	800b1b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b010:	4b6a      	ldr	r3, [pc, #424]	; (800b1bc <HAL_RCC_ClockConfig+0x1c0>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 0307 	and.w	r3, r3, #7
 800b018:	683a      	ldr	r2, [r7, #0]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d910      	bls.n	800b040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b01e:	4b67      	ldr	r3, [pc, #412]	; (800b1bc <HAL_RCC_ClockConfig+0x1c0>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f023 0207 	bic.w	r2, r3, #7
 800b026:	4965      	ldr	r1, [pc, #404]	; (800b1bc <HAL_RCC_ClockConfig+0x1c0>)
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b02e:	4b63      	ldr	r3, [pc, #396]	; (800b1bc <HAL_RCC_ClockConfig+0x1c0>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f003 0307 	and.w	r3, r3, #7
 800b036:	683a      	ldr	r2, [r7, #0]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d001      	beq.n	800b040 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e0b8      	b.n	800b1b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 0302 	and.w	r3, r3, #2
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d020      	beq.n	800b08e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f003 0304 	and.w	r3, r3, #4
 800b054:	2b00      	cmp	r3, #0
 800b056:	d005      	beq.n	800b064 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b058:	4b59      	ldr	r3, [pc, #356]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	4a58      	ldr	r2, [pc, #352]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b05e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b062:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0308 	and.w	r3, r3, #8
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d005      	beq.n	800b07c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b070:	4b53      	ldr	r3, [pc, #332]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	4a52      	ldr	r2, [pc, #328]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b076:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b07a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b07c:	4b50      	ldr	r3, [pc, #320]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	494d      	ldr	r1, [pc, #308]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b08a:	4313      	orrs	r3, r2
 800b08c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	2b00      	cmp	r3, #0
 800b098:	d040      	beq.n	800b11c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d107      	bne.n	800b0b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b0a2:	4b47      	ldr	r3, [pc, #284]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d115      	bne.n	800b0da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e07f      	b.n	800b1b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d107      	bne.n	800b0ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0ba:	4b41      	ldr	r3, [pc, #260]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d109      	bne.n	800b0da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e073      	b.n	800b1b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0ca:	4b3d      	ldr	r3, [pc, #244]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 0302 	and.w	r3, r3, #2
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d101      	bne.n	800b0da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e06b      	b.n	800b1b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b0da:	4b39      	ldr	r3, [pc, #228]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	f023 0203 	bic.w	r2, r3, #3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	4936      	ldr	r1, [pc, #216]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b0ec:	f7fd fcc0 	bl	8008a70 <HAL_GetTick>
 800b0f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0f2:	e00a      	b.n	800b10a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0f4:	f7fd fcbc 	bl	8008a70 <HAL_GetTick>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800b102:	4293      	cmp	r3, r2
 800b104:	d901      	bls.n	800b10a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b106:	2303      	movs	r3, #3
 800b108:	e053      	b.n	800b1b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b10a:	4b2d      	ldr	r3, [pc, #180]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	f003 020c 	and.w	r2, r3, #12
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	429a      	cmp	r2, r3
 800b11a:	d1eb      	bne.n	800b0f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b11c:	4b27      	ldr	r3, [pc, #156]	; (800b1bc <HAL_RCC_ClockConfig+0x1c0>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f003 0307 	and.w	r3, r3, #7
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	429a      	cmp	r2, r3
 800b128:	d210      	bcs.n	800b14c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b12a:	4b24      	ldr	r3, [pc, #144]	; (800b1bc <HAL_RCC_ClockConfig+0x1c0>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f023 0207 	bic.w	r2, r3, #7
 800b132:	4922      	ldr	r1, [pc, #136]	; (800b1bc <HAL_RCC_ClockConfig+0x1c0>)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	4313      	orrs	r3, r2
 800b138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b13a:	4b20      	ldr	r3, [pc, #128]	; (800b1bc <HAL_RCC_ClockConfig+0x1c0>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 0307 	and.w	r3, r3, #7
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d001      	beq.n	800b14c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	e032      	b.n	800b1b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 0304 	and.w	r3, r3, #4
 800b154:	2b00      	cmp	r3, #0
 800b156:	d008      	beq.n	800b16a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b158:	4b19      	ldr	r3, [pc, #100]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	4916      	ldr	r1, [pc, #88]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b166:	4313      	orrs	r3, r2
 800b168:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f003 0308 	and.w	r3, r3, #8
 800b172:	2b00      	cmp	r3, #0
 800b174:	d009      	beq.n	800b18a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b176:	4b12      	ldr	r3, [pc, #72]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	00db      	lsls	r3, r3, #3
 800b184:	490e      	ldr	r1, [pc, #56]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b186:	4313      	orrs	r3, r2
 800b188:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b18a:	f000 f821 	bl	800b1d0 <HAL_RCC_GetSysClockFreq>
 800b18e:	4602      	mov	r2, r0
 800b190:	4b0b      	ldr	r3, [pc, #44]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	091b      	lsrs	r3, r3, #4
 800b196:	f003 030f 	and.w	r3, r3, #15
 800b19a:	490a      	ldr	r1, [pc, #40]	; (800b1c4 <HAL_RCC_ClockConfig+0x1c8>)
 800b19c:	5ccb      	ldrb	r3, [r1, r3]
 800b19e:	fa22 f303 	lsr.w	r3, r2, r3
 800b1a2:	4a09      	ldr	r2, [pc, #36]	; (800b1c8 <HAL_RCC_ClockConfig+0x1cc>)
 800b1a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b1a6:	4b09      	ldr	r3, [pc, #36]	; (800b1cc <HAL_RCC_ClockConfig+0x1d0>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fd fc1e 	bl	80089ec <HAL_InitTick>

  return HAL_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	40022000 	.word	0x40022000
 800b1c0:	40021000 	.word	0x40021000
 800b1c4:	0800e1f4 	.word	0x0800e1f4
 800b1c8:	200000a0 	.word	0x200000a0
 800b1cc:	200000a4 	.word	0x200000a4

0800b1d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b087      	sub	sp, #28
 800b1d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60fb      	str	r3, [r7, #12]
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60bb      	str	r3, [r7, #8]
 800b1de:	2300      	movs	r3, #0
 800b1e0:	617b      	str	r3, [r7, #20]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b1ea:	4b1e      	ldr	r3, [pc, #120]	; (800b264 <HAL_RCC_GetSysClockFreq+0x94>)
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f003 030c 	and.w	r3, r3, #12
 800b1f6:	2b04      	cmp	r3, #4
 800b1f8:	d002      	beq.n	800b200 <HAL_RCC_GetSysClockFreq+0x30>
 800b1fa:	2b08      	cmp	r3, #8
 800b1fc:	d003      	beq.n	800b206 <HAL_RCC_GetSysClockFreq+0x36>
 800b1fe:	e027      	b.n	800b250 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b200:	4b19      	ldr	r3, [pc, #100]	; (800b268 <HAL_RCC_GetSysClockFreq+0x98>)
 800b202:	613b      	str	r3, [r7, #16]
      break;
 800b204:	e027      	b.n	800b256 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	0c9b      	lsrs	r3, r3, #18
 800b20a:	f003 030f 	and.w	r3, r3, #15
 800b20e:	4a17      	ldr	r2, [pc, #92]	; (800b26c <HAL_RCC_GetSysClockFreq+0x9c>)
 800b210:	5cd3      	ldrb	r3, [r2, r3]
 800b212:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d010      	beq.n	800b240 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b21e:	4b11      	ldr	r3, [pc, #68]	; (800b264 <HAL_RCC_GetSysClockFreq+0x94>)
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	0c5b      	lsrs	r3, r3, #17
 800b224:	f003 0301 	and.w	r3, r3, #1
 800b228:	4a11      	ldr	r2, [pc, #68]	; (800b270 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b22a:	5cd3      	ldrb	r3, [r2, r3]
 800b22c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a0d      	ldr	r2, [pc, #52]	; (800b268 <HAL_RCC_GetSysClockFreq+0x98>)
 800b232:	fb03 f202 	mul.w	r2, r3, r2
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	fbb2 f3f3 	udiv	r3, r2, r3
 800b23c:	617b      	str	r3, [r7, #20]
 800b23e:	e004      	b.n	800b24a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a0c      	ldr	r2, [pc, #48]	; (800b274 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b244:	fb02 f303 	mul.w	r3, r2, r3
 800b248:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	613b      	str	r3, [r7, #16]
      break;
 800b24e:	e002      	b.n	800b256 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b250:	4b05      	ldr	r3, [pc, #20]	; (800b268 <HAL_RCC_GetSysClockFreq+0x98>)
 800b252:	613b      	str	r3, [r7, #16]
      break;
 800b254:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b256:	693b      	ldr	r3, [r7, #16]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	371c      	adds	r7, #28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bc80      	pop	{r7}
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	40021000 	.word	0x40021000
 800b268:	007a1200 	.word	0x007a1200
 800b26c:	0800e20c 	.word	0x0800e20c
 800b270:	0800e21c 	.word	0x0800e21c
 800b274:	003d0900 	.word	0x003d0900

0800b278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b278:	b480      	push	{r7}
 800b27a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b27c:	4b02      	ldr	r3, [pc, #8]	; (800b288 <HAL_RCC_GetHCLKFreq+0x10>)
 800b27e:	681b      	ldr	r3, [r3, #0]
}
 800b280:	4618      	mov	r0, r3
 800b282:	46bd      	mov	sp, r7
 800b284:	bc80      	pop	{r7}
 800b286:	4770      	bx	lr
 800b288:	200000a0 	.word	0x200000a0

0800b28c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b290:	f7ff fff2 	bl	800b278 <HAL_RCC_GetHCLKFreq>
 800b294:	4602      	mov	r2, r0
 800b296:	4b05      	ldr	r3, [pc, #20]	; (800b2ac <HAL_RCC_GetPCLK1Freq+0x20>)
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	0a1b      	lsrs	r3, r3, #8
 800b29c:	f003 0307 	and.w	r3, r3, #7
 800b2a0:	4903      	ldr	r1, [pc, #12]	; (800b2b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2a2:	5ccb      	ldrb	r3, [r1, r3]
 800b2a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	40021000 	.word	0x40021000
 800b2b0:	0800e204 	.word	0x0800e204

0800b2b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b2b8:	f7ff ffde 	bl	800b278 <HAL_RCC_GetHCLKFreq>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	0adb      	lsrs	r3, r3, #11
 800b2c4:	f003 0307 	and.w	r3, r3, #7
 800b2c8:	4903      	ldr	r1, [pc, #12]	; (800b2d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b2ca:	5ccb      	ldrb	r3, [r1, r3]
 800b2cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	40021000 	.word	0x40021000
 800b2d8:	0800e204 	.word	0x0800e204

0800b2dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b2e4:	4b0a      	ldr	r3, [pc, #40]	; (800b310 <RCC_Delay+0x34>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a0a      	ldr	r2, [pc, #40]	; (800b314 <RCC_Delay+0x38>)
 800b2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ee:	0a5b      	lsrs	r3, r3, #9
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	fb02 f303 	mul.w	r3, r2, r3
 800b2f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b2f8:	bf00      	nop
  }
  while (Delay --);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	1e5a      	subs	r2, r3, #1
 800b2fe:	60fa      	str	r2, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1f9      	bne.n	800b2f8 <RCC_Delay+0x1c>
}
 800b304:	bf00      	nop
 800b306:	bf00      	nop
 800b308:	3714      	adds	r7, #20
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bc80      	pop	{r7}
 800b30e:	4770      	bx	lr
 800b310:	200000a0 	.word	0x200000a0
 800b314:	10624dd3 	.word	0x10624dd3

0800b318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d101      	bne.n	800b32a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e041      	b.n	800b3ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b00      	cmp	r3, #0
 800b334:	d106      	bne.n	800b344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7fd fa26 	bl	8008790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2202      	movs	r2, #2
 800b348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	3304      	adds	r3, #4
 800b354:	4619      	mov	r1, r3
 800b356:	4610      	mov	r0, r2
 800b358:	f000 fa82 	bl	800b860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d001      	beq.n	800b3d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e044      	b.n	800b45a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2202      	movs	r2, #2
 800b3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68da      	ldr	r2, [r3, #12]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f042 0201 	orr.w	r2, r2, #1
 800b3e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a1d      	ldr	r2, [pc, #116]	; (800b464 <HAL_TIM_Base_Start_IT+0xac>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d018      	beq.n	800b424 <HAL_TIM_Base_Start_IT+0x6c>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a1c      	ldr	r2, [pc, #112]	; (800b468 <HAL_TIM_Base_Start_IT+0xb0>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d013      	beq.n	800b424 <HAL_TIM_Base_Start_IT+0x6c>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b404:	d00e      	beq.n	800b424 <HAL_TIM_Base_Start_IT+0x6c>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a18      	ldr	r2, [pc, #96]	; (800b46c <HAL_TIM_Base_Start_IT+0xb4>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d009      	beq.n	800b424 <HAL_TIM_Base_Start_IT+0x6c>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a16      	ldr	r2, [pc, #88]	; (800b470 <HAL_TIM_Base_Start_IT+0xb8>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d004      	beq.n	800b424 <HAL_TIM_Base_Start_IT+0x6c>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a15      	ldr	r2, [pc, #84]	; (800b474 <HAL_TIM_Base_Start_IT+0xbc>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d111      	bne.n	800b448 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	f003 0307 	and.w	r3, r3, #7
 800b42e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b06      	cmp	r3, #6
 800b434:	d010      	beq.n	800b458 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f042 0201 	orr.w	r2, r2, #1
 800b444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b446:	e007      	b.n	800b458 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f042 0201 	orr.w	r2, r2, #1
 800b456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	bc80      	pop	{r7}
 800b462:	4770      	bx	lr
 800b464:	40012c00 	.word	0x40012c00
 800b468:	40013400 	.word	0x40013400
 800b46c:	40000400 	.word	0x40000400
 800b470:	40000800 	.word	0x40000800
 800b474:	40000c00 	.word	0x40000c00

0800b478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	f003 0302 	and.w	r3, r3, #2
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d122      	bne.n	800b4d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	f003 0302 	and.w	r3, r3, #2
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d11b      	bne.n	800b4d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f06f 0202 	mvn.w	r2, #2
 800b4a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	699b      	ldr	r3, [r3, #24]
 800b4b2:	f003 0303 	and.w	r3, r3, #3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d003      	beq.n	800b4c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 f9b4 	bl	800b828 <HAL_TIM_IC_CaptureCallback>
 800b4c0:	e005      	b.n	800b4ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f9a7 	bl	800b816 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 f9b6 	bl	800b83a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	f003 0304 	and.w	r3, r3, #4
 800b4de:	2b04      	cmp	r3, #4
 800b4e0:	d122      	bne.n	800b528 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	f003 0304 	and.w	r3, r3, #4
 800b4ec:	2b04      	cmp	r3, #4
 800b4ee:	d11b      	bne.n	800b528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f06f 0204 	mvn.w	r2, #4
 800b4f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2202      	movs	r2, #2
 800b4fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	699b      	ldr	r3, [r3, #24]
 800b506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d003      	beq.n	800b516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 f98a 	bl	800b828 <HAL_TIM_IC_CaptureCallback>
 800b514:	e005      	b.n	800b522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 f97d 	bl	800b816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f98c 	bl	800b83a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	f003 0308 	and.w	r3, r3, #8
 800b532:	2b08      	cmp	r3, #8
 800b534:	d122      	bne.n	800b57c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	f003 0308 	and.w	r3, r3, #8
 800b540:	2b08      	cmp	r3, #8
 800b542:	d11b      	bne.n	800b57c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f06f 0208 	mvn.w	r2, #8
 800b54c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2204      	movs	r2, #4
 800b552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	69db      	ldr	r3, [r3, #28]
 800b55a:	f003 0303 	and.w	r3, r3, #3
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d003      	beq.n	800b56a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f960 	bl	800b828 <HAL_TIM_IC_CaptureCallback>
 800b568:	e005      	b.n	800b576 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f953 	bl	800b816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f962 	bl	800b83a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	f003 0310 	and.w	r3, r3, #16
 800b586:	2b10      	cmp	r3, #16
 800b588:	d122      	bne.n	800b5d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	f003 0310 	and.w	r3, r3, #16
 800b594:	2b10      	cmp	r3, #16
 800b596:	d11b      	bne.n	800b5d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f06f 0210 	mvn.w	r2, #16
 800b5a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2208      	movs	r2, #8
 800b5a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	69db      	ldr	r3, [r3, #28]
 800b5ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f936 	bl	800b828 <HAL_TIM_IC_CaptureCallback>
 800b5bc:	e005      	b.n	800b5ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 f929 	bl	800b816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 f938 	bl	800b83a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	f003 0301 	and.w	r3, r3, #1
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d10e      	bne.n	800b5fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	f003 0301 	and.w	r3, r3, #1
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d107      	bne.n	800b5fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f06f 0201 	mvn.w	r2, #1
 800b5f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7fc fd62 	bl	80080c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b606:	2b80      	cmp	r3, #128	; 0x80
 800b608:	d10e      	bne.n	800b628 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b614:	2b80      	cmp	r3, #128	; 0x80
 800b616:	d107      	bne.n	800b628 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 faa1 	bl	800bb6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b632:	2b40      	cmp	r3, #64	; 0x40
 800b634:	d10e      	bne.n	800b654 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b640:	2b40      	cmp	r3, #64	; 0x40
 800b642:	d107      	bne.n	800b654 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b64c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f8fc 	bl	800b84c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	f003 0320 	and.w	r3, r3, #32
 800b65e:	2b20      	cmp	r3, #32
 800b660:	d10e      	bne.n	800b680 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	f003 0320 	and.w	r3, r3, #32
 800b66c:	2b20      	cmp	r3, #32
 800b66e:	d107      	bne.n	800b680 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f06f 0220 	mvn.w	r2, #32
 800b678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fa6c 	bl	800bb58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b680:	bf00      	nop
 800b682:	3708      	adds	r7, #8
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d101      	bne.n	800b6a4 <HAL_TIM_ConfigClockSource+0x1c>
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	e0b4      	b.n	800b80e <HAL_TIM_ConfigClockSource+0x186>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2202      	movs	r2, #2
 800b6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b6c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6dc:	d03e      	beq.n	800b75c <HAL_TIM_ConfigClockSource+0xd4>
 800b6de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6e2:	f200 8087 	bhi.w	800b7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6ea:	f000 8086 	beq.w	800b7fa <HAL_TIM_ConfigClockSource+0x172>
 800b6ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6f2:	d87f      	bhi.n	800b7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6f4:	2b70      	cmp	r3, #112	; 0x70
 800b6f6:	d01a      	beq.n	800b72e <HAL_TIM_ConfigClockSource+0xa6>
 800b6f8:	2b70      	cmp	r3, #112	; 0x70
 800b6fa:	d87b      	bhi.n	800b7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6fc:	2b60      	cmp	r3, #96	; 0x60
 800b6fe:	d050      	beq.n	800b7a2 <HAL_TIM_ConfigClockSource+0x11a>
 800b700:	2b60      	cmp	r3, #96	; 0x60
 800b702:	d877      	bhi.n	800b7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b704:	2b50      	cmp	r3, #80	; 0x50
 800b706:	d03c      	beq.n	800b782 <HAL_TIM_ConfigClockSource+0xfa>
 800b708:	2b50      	cmp	r3, #80	; 0x50
 800b70a:	d873      	bhi.n	800b7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b70c:	2b40      	cmp	r3, #64	; 0x40
 800b70e:	d058      	beq.n	800b7c2 <HAL_TIM_ConfigClockSource+0x13a>
 800b710:	2b40      	cmp	r3, #64	; 0x40
 800b712:	d86f      	bhi.n	800b7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b714:	2b30      	cmp	r3, #48	; 0x30
 800b716:	d064      	beq.n	800b7e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b718:	2b30      	cmp	r3, #48	; 0x30
 800b71a:	d86b      	bhi.n	800b7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b71c:	2b20      	cmp	r3, #32
 800b71e:	d060      	beq.n	800b7e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b720:	2b20      	cmp	r3, #32
 800b722:	d867      	bhi.n	800b7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b724:	2b00      	cmp	r3, #0
 800b726:	d05c      	beq.n	800b7e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b728:	2b10      	cmp	r3, #16
 800b72a:	d05a      	beq.n	800b7e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b72c:	e062      	b.n	800b7f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b73e:	f000 f980 	bl	800ba42 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	609a      	str	r2, [r3, #8]
      break;
 800b75a:	e04f      	b.n	800b7fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b76c:	f000 f969 	bl	800ba42 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	689a      	ldr	r2, [r3, #8]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b77e:	609a      	str	r2, [r3, #8]
      break;
 800b780:	e03c      	b.n	800b7fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b78e:	461a      	mov	r2, r3
 800b790:	f000 f8e0 	bl	800b954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2150      	movs	r1, #80	; 0x50
 800b79a:	4618      	mov	r0, r3
 800b79c:	f000 f937 	bl	800ba0e <TIM_ITRx_SetConfig>
      break;
 800b7a0:	e02c      	b.n	800b7fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	f000 f8fe 	bl	800b9b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2160      	movs	r1, #96	; 0x60
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 f927 	bl	800ba0e <TIM_ITRx_SetConfig>
      break;
 800b7c0:	e01c      	b.n	800b7fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	f000 f8c0 	bl	800b954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2140      	movs	r1, #64	; 0x40
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f000 f917 	bl	800ba0e <TIM_ITRx_SetConfig>
      break;
 800b7e0:	e00c      	b.n	800b7fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	4610      	mov	r0, r2
 800b7ee:	f000 f90e 	bl	800ba0e <TIM_ITRx_SetConfig>
      break;
 800b7f2:	e003      	b.n	800b7fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b7f8:	e000      	b.n	800b7fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b7fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b816:	b480      	push	{r7}
 800b818:	b083      	sub	sp, #12
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b81e:	bf00      	nop
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	bc80      	pop	{r7}
 800b826:	4770      	bx	lr

0800b828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	bc80      	pop	{r7}
 800b838:	4770      	bx	lr

0800b83a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b83a:	b480      	push	{r7}
 800b83c:	b083      	sub	sp, #12
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b842:	bf00      	nop
 800b844:	370c      	adds	r7, #12
 800b846:	46bd      	mov	sp, r7
 800b848:	bc80      	pop	{r7}
 800b84a:	4770      	bx	lr

0800b84c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b854:	bf00      	nop
 800b856:	370c      	adds	r7, #12
 800b858:	46bd      	mov	sp, r7
 800b85a:	bc80      	pop	{r7}
 800b85c:	4770      	bx	lr
	...

0800b860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a33      	ldr	r2, [pc, #204]	; (800b940 <TIM_Base_SetConfig+0xe0>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d013      	beq.n	800b8a0 <TIM_Base_SetConfig+0x40>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a32      	ldr	r2, [pc, #200]	; (800b944 <TIM_Base_SetConfig+0xe4>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d00f      	beq.n	800b8a0 <TIM_Base_SetConfig+0x40>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b886:	d00b      	beq.n	800b8a0 <TIM_Base_SetConfig+0x40>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4a2f      	ldr	r2, [pc, #188]	; (800b948 <TIM_Base_SetConfig+0xe8>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d007      	beq.n	800b8a0 <TIM_Base_SetConfig+0x40>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4a2e      	ldr	r2, [pc, #184]	; (800b94c <TIM_Base_SetConfig+0xec>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d003      	beq.n	800b8a0 <TIM_Base_SetConfig+0x40>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4a2d      	ldr	r2, [pc, #180]	; (800b950 <TIM_Base_SetConfig+0xf0>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d108      	bne.n	800b8b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4a22      	ldr	r2, [pc, #136]	; (800b940 <TIM_Base_SetConfig+0xe0>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d013      	beq.n	800b8e2 <TIM_Base_SetConfig+0x82>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a21      	ldr	r2, [pc, #132]	; (800b944 <TIM_Base_SetConfig+0xe4>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d00f      	beq.n	800b8e2 <TIM_Base_SetConfig+0x82>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8c8:	d00b      	beq.n	800b8e2 <TIM_Base_SetConfig+0x82>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a1e      	ldr	r2, [pc, #120]	; (800b948 <TIM_Base_SetConfig+0xe8>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d007      	beq.n	800b8e2 <TIM_Base_SetConfig+0x82>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4a1d      	ldr	r2, [pc, #116]	; (800b94c <TIM_Base_SetConfig+0xec>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d003      	beq.n	800b8e2 <TIM_Base_SetConfig+0x82>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4a1c      	ldr	r2, [pc, #112]	; (800b950 <TIM_Base_SetConfig+0xf0>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d108      	bne.n	800b8f4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	68fa      	ldr	r2, [r7, #12]
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	695b      	ldr	r3, [r3, #20]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	689a      	ldr	r2, [r3, #8]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a09      	ldr	r2, [pc, #36]	; (800b940 <TIM_Base_SetConfig+0xe0>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d003      	beq.n	800b928 <TIM_Base_SetConfig+0xc8>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a08      	ldr	r2, [pc, #32]	; (800b944 <TIM_Base_SetConfig+0xe4>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d103      	bne.n	800b930 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	691a      	ldr	r2, [r3, #16]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	615a      	str	r2, [r3, #20]
}
 800b936:	bf00      	nop
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bc80      	pop	{r7}
 800b93e:	4770      	bx	lr
 800b940:	40012c00 	.word	0x40012c00
 800b944:	40013400 	.word	0x40013400
 800b948:	40000400 	.word	0x40000400
 800b94c:	40000800 	.word	0x40000800
 800b950:	40000c00 	.word	0x40000c00

0800b954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b954:	b480      	push	{r7}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6a1b      	ldr	r3, [r3, #32]
 800b964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6a1b      	ldr	r3, [r3, #32]
 800b96a:	f023 0201 	bic.w	r2, r3, #1
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b97e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	011b      	lsls	r3, r3, #4
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	4313      	orrs	r3, r2
 800b988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f023 030a 	bic.w	r3, r3, #10
 800b990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	4313      	orrs	r3, r2
 800b998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	693a      	ldr	r2, [r7, #16]
 800b99e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	621a      	str	r2, [r3, #32]
}
 800b9a6:	bf00      	nop
 800b9a8:	371c      	adds	r7, #28
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bc80      	pop	{r7}
 800b9ae:	4770      	bx	lr

0800b9b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6a1b      	ldr	r3, [r3, #32]
 800b9c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	f023 0210 	bic.w	r2, r3, #16
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b9da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	031b      	lsls	r3, r3, #12
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b9ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	011b      	lsls	r3, r3, #4
 800b9f2:	697a      	ldr	r2, [r7, #20]
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	621a      	str	r2, [r3, #32]
}
 800ba04:	bf00      	nop
 800ba06:	371c      	adds	r7, #28
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bc80      	pop	{r7}
 800ba0c:	4770      	bx	lr

0800ba0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b085      	sub	sp, #20
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	f043 0307 	orr.w	r3, r3, #7
 800ba30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	609a      	str	r2, [r3, #8]
}
 800ba38:	bf00      	nop
 800ba3a:	3714      	adds	r7, #20
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bc80      	pop	{r7}
 800ba40:	4770      	bx	lr

0800ba42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b087      	sub	sp, #28
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	60f8      	str	r0, [r7, #12]
 800ba4a:	60b9      	str	r1, [r7, #8]
 800ba4c:	607a      	str	r2, [r7, #4]
 800ba4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	021a      	lsls	r2, r3, #8
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	431a      	orrs	r2, r3
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	697a      	ldr	r2, [r7, #20]
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	609a      	str	r2, [r3, #8]
}
 800ba76:	bf00      	nop
 800ba78:	371c      	adds	r7, #28
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bc80      	pop	{r7}
 800ba7e:	4770      	bx	lr

0800ba80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d101      	bne.n	800ba98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba94:	2302      	movs	r3, #2
 800ba96:	e050      	b.n	800bb3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2202      	movs	r2, #2
 800baa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800babe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a1b      	ldr	r2, [pc, #108]	; (800bb44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d018      	beq.n	800bb0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a19      	ldr	r2, [pc, #100]	; (800bb48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d013      	beq.n	800bb0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baee:	d00e      	beq.n	800bb0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a15      	ldr	r2, [pc, #84]	; (800bb4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d009      	beq.n	800bb0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a14      	ldr	r2, [pc, #80]	; (800bb50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d004      	beq.n	800bb0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a12      	ldr	r2, [pc, #72]	; (800bb54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d10c      	bne.n	800bb28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	68ba      	ldr	r2, [r7, #8]
 800bb26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bc80      	pop	{r7}
 800bb42:	4770      	bx	lr
 800bb44:	40012c00 	.word	0x40012c00
 800bb48:	40013400 	.word	0x40013400
 800bb4c:	40000400 	.word	0x40000400
 800bb50:	40000800 	.word	0x40000800
 800bb54:	40000c00 	.word	0x40000c00

0800bb58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bc80      	pop	{r7}
 800bb68:	4770      	bx	lr

0800bb6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	b083      	sub	sp, #12
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb72:	bf00      	nop
 800bb74:	370c      	adds	r7, #12
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bc80      	pop	{r7}
 800bb7a:	4770      	bx	lr

0800bb7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d101      	bne.n	800bb8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e042      	b.n	800bc14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d106      	bne.n	800bba8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7fc fe1a 	bl	80087dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2224      	movs	r2, #36	; 0x24
 800bbac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68da      	ldr	r2, [r3, #12]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bbbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fd11 	bl	800c5e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	691a      	ldr	r2, [r3, #16]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	695a      	ldr	r2, [r3, #20]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68da      	ldr	r2, [r3, #12]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bbf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2220      	movs	r2, #32
 800bc00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2220      	movs	r2, #32
 800bc08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	4613      	mov	r3, r2
 800bc28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b20      	cmp	r3, #32
 800bc34:	d121      	bne.n	800bc7a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <HAL_UART_Transmit_IT+0x26>
 800bc3c:	88fb      	ldrh	r3, [r7, #6]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d101      	bne.n	800bc46 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	e01a      	b.n	800bc7c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	68ba      	ldr	r2, [r7, #8]
 800bc4a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	88fa      	ldrh	r2, [r7, #6]
 800bc50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	88fa      	ldrh	r2, [r7, #6]
 800bc56:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2221      	movs	r2, #33	; 0x21
 800bc62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68da      	ldr	r2, [r3, #12]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc74:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800bc76:	2300      	movs	r3, #0
 800bc78:	e000      	b.n	800bc7c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800bc7a:	2302      	movs	r3, #2
  }
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3714      	adds	r7, #20
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bc80      	pop	{r7}
 800bc84:	4770      	bx	lr

0800bc86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b084      	sub	sp, #16
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	60f8      	str	r0, [r7, #12]
 800bc8e:	60b9      	str	r1, [r7, #8]
 800bc90:	4613      	mov	r3, r2
 800bc92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b20      	cmp	r3, #32
 800bc9e:	d112      	bne.n	800bcc6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d002      	beq.n	800bcac <HAL_UART_Receive_IT+0x26>
 800bca6:	88fb      	ldrh	r3, [r7, #6]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d101      	bne.n	800bcb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e00b      	b.n	800bcc8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bcb6:	88fb      	ldrh	r3, [r7, #6]
 800bcb8:	461a      	mov	r2, r3
 800bcba:	68b9      	ldr	r1, [r7, #8]
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f000 fabf 	bl	800c240 <UART_Start_Receive_IT>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	e000      	b.n	800bcc8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800bcc6:	2302      	movs	r3, #2
  }
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b0ba      	sub	sp, #232	; 0xe8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bd02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd06:	f003 030f 	and.w	r3, r3, #15
 800bd0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bd0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d10f      	bne.n	800bd36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd1a:	f003 0320 	and.w	r3, r3, #32
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d009      	beq.n	800bd36 <HAL_UART_IRQHandler+0x66>
 800bd22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd26:	f003 0320 	and.w	r3, r3, #32
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d003      	beq.n	800bd36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fb9c 	bl	800c46c <UART_Receive_IT>
      return;
 800bd34:	e25b      	b.n	800c1ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bd36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f000 80de 	beq.w	800befc <HAL_UART_IRQHandler+0x22c>
 800bd40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd44:	f003 0301 	and.w	r3, r3, #1
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d106      	bne.n	800bd5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bd4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f000 80d1 	beq.w	800befc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bd5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00b      	beq.n	800bd7e <HAL_UART_IRQHandler+0xae>
 800bd66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d005      	beq.n	800bd7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd76:	f043 0201 	orr.w	r2, r3, #1
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd82:	f003 0304 	and.w	r3, r3, #4
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00b      	beq.n	800bda2 <HAL_UART_IRQHandler+0xd2>
 800bd8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd8e:	f003 0301 	and.w	r3, r3, #1
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d005      	beq.n	800bda2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd9a:	f043 0202 	orr.w	r2, r3, #2
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bda2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bda6:	f003 0302 	and.w	r3, r3, #2
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00b      	beq.n	800bdc6 <HAL_UART_IRQHandler+0xf6>
 800bdae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdb2:	f003 0301 	and.w	r3, r3, #1
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d005      	beq.n	800bdc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdbe:	f043 0204 	orr.w	r2, r3, #4
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bdc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdca:	f003 0308 	and.w	r3, r3, #8
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d011      	beq.n	800bdf6 <HAL_UART_IRQHandler+0x126>
 800bdd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdd6:	f003 0320 	and.w	r3, r3, #32
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d105      	bne.n	800bdea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bdde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bde2:	f003 0301 	and.w	r3, r3, #1
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d005      	beq.n	800bdf6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdee:	f043 0208 	orr.w	r2, r3, #8
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f000 81f2 	beq.w	800c1e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be04:	f003 0320 	and.w	r3, r3, #32
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d008      	beq.n	800be1e <HAL_UART_IRQHandler+0x14e>
 800be0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be10:	f003 0320 	and.w	r3, r3, #32
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fb27 	bl	800c46c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	695b      	ldr	r3, [r3, #20]
 800be24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be28:	2b00      	cmp	r3, #0
 800be2a:	bf14      	ite	ne
 800be2c:	2301      	movne	r3, #1
 800be2e:	2300      	moveq	r3, #0
 800be30:	b2db      	uxtb	r3, r3
 800be32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be3a:	f003 0308 	and.w	r3, r3, #8
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d103      	bne.n	800be4a <HAL_UART_IRQHandler+0x17a>
 800be42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be46:	2b00      	cmp	r3, #0
 800be48:	d04f      	beq.n	800beea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fa31 	bl	800c2b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	695b      	ldr	r3, [r3, #20]
 800be56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d041      	beq.n	800bee2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	3314      	adds	r3, #20
 800be64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be6c:	e853 3f00 	ldrex	r3, [r3]
 800be70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800be74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800be78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3314      	adds	r3, #20
 800be86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800be8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800be8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800be96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800be9a:	e841 2300 	strex	r3, r2, [r1]
 800be9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1d9      	bne.n	800be5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d013      	beq.n	800beda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beb6:	4a7e      	ldr	r2, [pc, #504]	; (800c0b0 <HAL_UART_IRQHandler+0x3e0>)
 800beb8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fd f848 	bl	8008f54 <HAL_DMA_Abort_IT>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d016      	beq.n	800bef8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bed4:	4610      	mov	r0, r2
 800bed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bed8:	e00e      	b.n	800bef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 f99c 	bl	800c218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bee0:	e00a      	b.n	800bef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f998 	bl	800c218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bee8:	e006      	b.n	800bef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f994 	bl	800c218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bef6:	e175      	b.n	800c1e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bef8:	bf00      	nop
    return;
 800befa:	e173      	b.n	800c1e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	f040 814f 	bne.w	800c1a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bf06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf0a:	f003 0310 	and.w	r3, r3, #16
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f000 8148 	beq.w	800c1a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bf14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf18:	f003 0310 	and.w	r3, r3, #16
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f000 8141 	beq.w	800c1a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf22:	2300      	movs	r3, #0
 800bf24:	60bb      	str	r3, [r7, #8]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	60bb      	str	r3, [r7, #8]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	60bb      	str	r3, [r7, #8]
 800bf36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	695b      	ldr	r3, [r3, #20]
 800bf3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 80b6 	beq.w	800c0b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f000 8145 	beq.w	800c1e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bf62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf66:	429a      	cmp	r2, r3
 800bf68:	f080 813e 	bcs.w	800c1e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf78:	699b      	ldr	r3, [r3, #24]
 800bf7a:	2b20      	cmp	r3, #32
 800bf7c:	f000 8088 	beq.w	800c090 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	330c      	adds	r3, #12
 800bf86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf8e:	e853 3f00 	ldrex	r3, [r3]
 800bf92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bf96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	330c      	adds	r3, #12
 800bfa8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bfac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bfb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bfb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bfbc:	e841 2300 	strex	r3, r2, [r1]
 800bfc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bfc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1d9      	bne.n	800bf80 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	3314      	adds	r3, #20
 800bfd2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfd6:	e853 3f00 	ldrex	r3, [r3]
 800bfda:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bfdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfde:	f023 0301 	bic.w	r3, r3, #1
 800bfe2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	3314      	adds	r3, #20
 800bfec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bff0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bff4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bff8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bffc:	e841 2300 	strex	r3, r2, [r1]
 800c000:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c004:	2b00      	cmp	r3, #0
 800c006:	d1e1      	bne.n	800bfcc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	3314      	adds	r3, #20
 800c00e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c010:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c012:	e853 3f00 	ldrex	r3, [r3]
 800c016:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c01a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c01e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	3314      	adds	r3, #20
 800c028:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c02c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c02e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c030:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c032:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c034:	e841 2300 	strex	r3, r2, [r1]
 800c038:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c03a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1e3      	bne.n	800c008 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2220      	movs	r2, #32
 800c044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	330c      	adds	r3, #12
 800c054:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c058:	e853 3f00 	ldrex	r3, [r3]
 800c05c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c05e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c060:	f023 0310 	bic.w	r3, r3, #16
 800c064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	330c      	adds	r3, #12
 800c06e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c072:	65ba      	str	r2, [r7, #88]	; 0x58
 800c074:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c076:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c07a:	e841 2300 	strex	r3, r2, [r1]
 800c07e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1e3      	bne.n	800c04e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fc ff27 	bl	8008ede <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2202      	movs	r2, #2
 800c094:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	1ad3      	subs	r3, r2, r3
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 f8bf 	bl	800c22a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c0ac:	e09c      	b.n	800c1e8 <HAL_UART_IRQHandler+0x518>
 800c0ae:	bf00      	nop
 800c0b0:	0800c377 	.word	0x0800c377
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f000 808e 	beq.w	800c1ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c0d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f000 8089 	beq.w	800c1ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	330c      	adds	r3, #12
 800c0e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e4:	e853 3f00 	ldrex	r3, [r3]
 800c0e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	330c      	adds	r3, #12
 800c0fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c0fe:	647a      	str	r2, [r7, #68]	; 0x44
 800c100:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c102:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c104:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c106:	e841 2300 	strex	r3, r2, [r1]
 800c10a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c10c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1e3      	bne.n	800c0da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3314      	adds	r3, #20
 800c118:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11c:	e853 3f00 	ldrex	r3, [r3]
 800c120:	623b      	str	r3, [r7, #32]
   return(result);
 800c122:	6a3b      	ldr	r3, [r7, #32]
 800c124:	f023 0301 	bic.w	r3, r3, #1
 800c128:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	3314      	adds	r3, #20
 800c132:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c136:	633a      	str	r2, [r7, #48]	; 0x30
 800c138:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c13c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c13e:	e841 2300 	strex	r3, r2, [r1]
 800c142:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1e3      	bne.n	800c112 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2220      	movs	r2, #32
 800c14e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	330c      	adds	r3, #12
 800c15e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	e853 3f00 	ldrex	r3, [r3]
 800c166:	60fb      	str	r3, [r7, #12]
   return(result);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f023 0310 	bic.w	r3, r3, #16
 800c16e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	330c      	adds	r3, #12
 800c178:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c17c:	61fa      	str	r2, [r7, #28]
 800c17e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c180:	69b9      	ldr	r1, [r7, #24]
 800c182:	69fa      	ldr	r2, [r7, #28]
 800c184:	e841 2300 	strex	r3, r2, [r1]
 800c188:	617b      	str	r3, [r7, #20]
   return(result);
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d1e3      	bne.n	800c158 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2202      	movs	r2, #2
 800c194:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c196:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c19a:	4619      	mov	r1, r3
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 f844 	bl	800c22a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c1a2:	e023      	b.n	800c1ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c1a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d009      	beq.n	800c1c4 <HAL_UART_IRQHandler+0x4f4>
 800c1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d003      	beq.n	800c1c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 f8ee 	bl	800c39e <UART_Transmit_IT>
    return;
 800c1c2:	e014      	b.n	800c1ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c1c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00e      	beq.n	800c1ee <HAL_UART_IRQHandler+0x51e>
 800c1d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d008      	beq.n	800c1ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f92d 	bl	800c43c <UART_EndTransmit_IT>
    return;
 800c1e2:	e004      	b.n	800c1ee <HAL_UART_IRQHandler+0x51e>
    return;
 800c1e4:	bf00      	nop
 800c1e6:	e002      	b.n	800c1ee <HAL_UART_IRQHandler+0x51e>
      return;
 800c1e8:	bf00      	nop
 800c1ea:	e000      	b.n	800c1ee <HAL_UART_IRQHandler+0x51e>
      return;
 800c1ec:	bf00      	nop
  }
}
 800c1ee:	37e8      	adds	r7, #232	; 0xe8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c1fc:	bf00      	nop
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	bc80      	pop	{r7}
 800c204:	4770      	bx	lr

0800c206 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c206:	b480      	push	{r7}
 800c208:	b083      	sub	sp, #12
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c20e:	bf00      	nop
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	bc80      	pop	{r7}
 800c216:	4770      	bx	lr

0800c218 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c220:	bf00      	nop
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	bc80      	pop	{r7}
 800c228:	4770      	bx	lr

0800c22a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c22a:	b480      	push	{r7}
 800c22c:	b083      	sub	sp, #12
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	460b      	mov	r3, r1
 800c234:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c236:	bf00      	nop
 800c238:	370c      	adds	r7, #12
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bc80      	pop	{r7}
 800c23e:	4770      	bx	lr

0800c240 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c240:	b480      	push	{r7}
 800c242:	b085      	sub	sp, #20
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	4613      	mov	r3, r2
 800c24c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	88fa      	ldrh	r2, [r7, #6]
 800c258:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	88fa      	ldrh	r2, [r7, #6]
 800c25e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2200      	movs	r2, #0
 800c264:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2222      	movs	r2, #34	; 0x22
 800c26a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d007      	beq.n	800c286 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68da      	ldr	r2, [r3, #12]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c284:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	695a      	ldr	r2, [r3, #20]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f042 0201 	orr.w	r2, r2, #1
 800c294:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	68da      	ldr	r2, [r3, #12]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f042 0220 	orr.w	r2, r2, #32
 800c2a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c2a6:	2300      	movs	r3, #0
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3714      	adds	r7, #20
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bc80      	pop	{r7}
 800c2b0:	4770      	bx	lr

0800c2b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c2b2:	b480      	push	{r7}
 800c2b4:	b095      	sub	sp, #84	; 0x54
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	330c      	adds	r3, #12
 800c2c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c4:	e853 3f00 	ldrex	r3, [r3]
 800c2c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	330c      	adds	r3, #12
 800c2d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c2da:	643a      	str	r2, [r7, #64]	; 0x40
 800c2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c2e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2e2:	e841 2300 	strex	r3, r2, [r1]
 800c2e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1e5      	bne.n	800c2ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	3314      	adds	r3, #20
 800c2f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f6:	6a3b      	ldr	r3, [r7, #32]
 800c2f8:	e853 3f00 	ldrex	r3, [r3]
 800c2fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	f023 0301 	bic.w	r3, r3, #1
 800c304:	64bb      	str	r3, [r7, #72]	; 0x48
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3314      	adds	r3, #20
 800c30c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c30e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c310:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c316:	e841 2300 	strex	r3, r2, [r1]
 800c31a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1e5      	bne.n	800c2ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c326:	2b01      	cmp	r3, #1
 800c328:	d119      	bne.n	800c35e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	330c      	adds	r3, #12
 800c330:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	e853 3f00 	ldrex	r3, [r3]
 800c338:	60bb      	str	r3, [r7, #8]
   return(result);
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	f023 0310 	bic.w	r3, r3, #16
 800c340:	647b      	str	r3, [r7, #68]	; 0x44
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	330c      	adds	r3, #12
 800c348:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c34a:	61ba      	str	r2, [r7, #24]
 800c34c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34e:	6979      	ldr	r1, [r7, #20]
 800c350:	69ba      	ldr	r2, [r7, #24]
 800c352:	e841 2300 	strex	r3, r2, [r1]
 800c356:	613b      	str	r3, [r7, #16]
   return(result);
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1e5      	bne.n	800c32a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2220      	movs	r2, #32
 800c362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2200      	movs	r2, #0
 800c36a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c36c:	bf00      	nop
 800c36e:	3754      	adds	r7, #84	; 0x54
 800c370:	46bd      	mov	sp, r7
 800c372:	bc80      	pop	{r7}
 800c374:	4770      	bx	lr

0800c376 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b084      	sub	sp, #16
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c382:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2200      	movs	r2, #0
 800c388:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2200      	movs	r2, #0
 800c38e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f7ff ff41 	bl	800c218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c396:	bf00      	nop
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c39e:	b480      	push	{r7}
 800c3a0:	b085      	sub	sp, #20
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b21      	cmp	r3, #33	; 0x21
 800c3b0:	d13e      	bne.n	800c430 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3ba:	d114      	bne.n	800c3e6 <UART_Transmit_IT+0x48>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d110      	bne.n	800c3e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6a1b      	ldr	r3, [r3, #32]
 800c3c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a1b      	ldr	r3, [r3, #32]
 800c3de:	1c9a      	adds	r2, r3, #2
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	621a      	str	r2, [r3, #32]
 800c3e4:	e008      	b.n	800c3f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6a1b      	ldr	r3, [r3, #32]
 800c3ea:	1c59      	adds	r1, r3, #1
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	6211      	str	r1, [r2, #32]
 800c3f0:	781a      	ldrb	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	3b01      	subs	r3, #1
 800c400:	b29b      	uxth	r3, r3
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	4619      	mov	r1, r3
 800c406:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10f      	bne.n	800c42c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	68da      	ldr	r2, [r3, #12]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c41a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68da      	ldr	r2, [r3, #12]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c42a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c42c:	2300      	movs	r3, #0
 800c42e:	e000      	b.n	800c432 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c430:	2302      	movs	r3, #2
  }
}
 800c432:	4618      	mov	r0, r3
 800c434:	3714      	adds	r7, #20
 800c436:	46bd      	mov	sp, r7
 800c438:	bc80      	pop	{r7}
 800c43a:	4770      	bx	lr

0800c43c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68da      	ldr	r2, [r3, #12]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c452:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2220      	movs	r2, #32
 800c458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7ff fec9 	bl	800c1f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c462:	2300      	movs	r3, #0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b08c      	sub	sp, #48	; 0x30
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	2b22      	cmp	r3, #34	; 0x22
 800c47e:	f040 80ae 	bne.w	800c5de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c48a:	d117      	bne.n	800c4bc <UART_Receive_IT+0x50>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d113      	bne.n	800c4bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c494:	2300      	movs	r3, #0
 800c496:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c49c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4b4:	1c9a      	adds	r2, r3, #2
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	629a      	str	r2, [r3, #40]	; 0x28
 800c4ba:	e026      	b.n	800c50a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4ce:	d007      	beq.n	800c4e0 <UART_Receive_IT+0x74>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10a      	bne.n	800c4ee <UART_Receive_IT+0x82>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	691b      	ldr	r3, [r3, #16]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d106      	bne.n	800c4ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ea:	701a      	strb	r2, [r3, #0]
 800c4ec:	e008      	b.n	800c500 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4fa:	b2da      	uxtb	r2, r3
 800c4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c504:	1c5a      	adds	r2, r3, #1
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c50e:	b29b      	uxth	r3, r3
 800c510:	3b01      	subs	r3, #1
 800c512:	b29b      	uxth	r3, r3
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	4619      	mov	r1, r3
 800c518:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d15d      	bne.n	800c5da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	68da      	ldr	r2, [r3, #12]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f022 0220 	bic.w	r2, r2, #32
 800c52c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	68da      	ldr	r2, [r3, #12]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c53c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	695a      	ldr	r2, [r3, #20]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f022 0201 	bic.w	r2, r2, #1
 800c54c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2220      	movs	r2, #32
 800c552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c560:	2b01      	cmp	r3, #1
 800c562:	d135      	bne.n	800c5d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	330c      	adds	r3, #12
 800c570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	e853 3f00 	ldrex	r3, [r3]
 800c578:	613b      	str	r3, [r7, #16]
   return(result);
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	f023 0310 	bic.w	r3, r3, #16
 800c580:	627b      	str	r3, [r7, #36]	; 0x24
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	330c      	adds	r3, #12
 800c588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c58a:	623a      	str	r2, [r7, #32]
 800c58c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58e:	69f9      	ldr	r1, [r7, #28]
 800c590:	6a3a      	ldr	r2, [r7, #32]
 800c592:	e841 2300 	strex	r3, r2, [r1]
 800c596:	61bb      	str	r3, [r7, #24]
   return(result);
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1e5      	bne.n	800c56a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f003 0310 	and.w	r3, r3, #16
 800c5a8:	2b10      	cmp	r3, #16
 800c5aa:	d10a      	bne.n	800c5c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	60fb      	str	r3, [r7, #12]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	60fb      	str	r3, [r7, #12]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	60fb      	str	r3, [r7, #12]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7ff fe2e 	bl	800c22a <HAL_UARTEx_RxEventCallback>
 800c5ce:	e002      	b.n	800c5d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7ff fe18 	bl	800c206 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	e002      	b.n	800c5e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	e000      	b.n	800c5e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c5de:	2302      	movs	r3, #2
  }
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3730      	adds	r7, #48	; 0x30
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	691b      	ldr	r3, [r3, #16]
 800c5f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	68da      	ldr	r2, [r3, #12]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	430a      	orrs	r2, r1
 800c604:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	689a      	ldr	r2, [r3, #8]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	691b      	ldr	r3, [r3, #16]
 800c60e:	431a      	orrs	r2, r3
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	695b      	ldr	r3, [r3, #20]
 800c614:	4313      	orrs	r3, r2
 800c616:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c622:	f023 030c 	bic.w	r3, r3, #12
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	6812      	ldr	r2, [r2, #0]
 800c62a:	68b9      	ldr	r1, [r7, #8]
 800c62c:	430b      	orrs	r3, r1
 800c62e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	695b      	ldr	r3, [r3, #20]
 800c636:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	699a      	ldr	r2, [r3, #24]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	430a      	orrs	r2, r1
 800c644:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a2c      	ldr	r2, [pc, #176]	; (800c6fc <UART_SetConfig+0x114>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d103      	bne.n	800c658 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c650:	f7fe fe30 	bl	800b2b4 <HAL_RCC_GetPCLK2Freq>
 800c654:	60f8      	str	r0, [r7, #12]
 800c656:	e002      	b.n	800c65e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c658:	f7fe fe18 	bl	800b28c <HAL_RCC_GetPCLK1Freq>
 800c65c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	4613      	mov	r3, r2
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	4413      	add	r3, r2
 800c666:	009a      	lsls	r2, r3, #2
 800c668:	441a      	add	r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	fbb2 f3f3 	udiv	r3, r2, r3
 800c674:	4a22      	ldr	r2, [pc, #136]	; (800c700 <UART_SetConfig+0x118>)
 800c676:	fba2 2303 	umull	r2, r3, r2, r3
 800c67a:	095b      	lsrs	r3, r3, #5
 800c67c:	0119      	lsls	r1, r3, #4
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	4613      	mov	r3, r2
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	4413      	add	r3, r2
 800c686:	009a      	lsls	r2, r3, #2
 800c688:	441a      	add	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	fbb2 f2f3 	udiv	r2, r2, r3
 800c694:	4b1a      	ldr	r3, [pc, #104]	; (800c700 <UART_SetConfig+0x118>)
 800c696:	fba3 0302 	umull	r0, r3, r3, r2
 800c69a:	095b      	lsrs	r3, r3, #5
 800c69c:	2064      	movs	r0, #100	; 0x64
 800c69e:	fb00 f303 	mul.w	r3, r0, r3
 800c6a2:	1ad3      	subs	r3, r2, r3
 800c6a4:	011b      	lsls	r3, r3, #4
 800c6a6:	3332      	adds	r3, #50	; 0x32
 800c6a8:	4a15      	ldr	r2, [pc, #84]	; (800c700 <UART_SetConfig+0x118>)
 800c6aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ae:	095b      	lsrs	r3, r3, #5
 800c6b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6b4:	4419      	add	r1, r3
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	4413      	add	r3, r2
 800c6be:	009a      	lsls	r2, r3, #2
 800c6c0:	441a      	add	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6cc:	4b0c      	ldr	r3, [pc, #48]	; (800c700 <UART_SetConfig+0x118>)
 800c6ce:	fba3 0302 	umull	r0, r3, r3, r2
 800c6d2:	095b      	lsrs	r3, r3, #5
 800c6d4:	2064      	movs	r0, #100	; 0x64
 800c6d6:	fb00 f303 	mul.w	r3, r0, r3
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	011b      	lsls	r3, r3, #4
 800c6de:	3332      	adds	r3, #50	; 0x32
 800c6e0:	4a07      	ldr	r2, [pc, #28]	; (800c700 <UART_SetConfig+0x118>)
 800c6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6e6:	095b      	lsrs	r3, r3, #5
 800c6e8:	f003 020f 	and.w	r2, r3, #15
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	440a      	add	r2, r1
 800c6f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c6f4:	bf00      	nop
 800c6f6:	3710      	adds	r7, #16
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	40013800 	.word	0x40013800
 800c700:	51eb851f 	.word	0x51eb851f

0800c704 <__itoa>:
 800c704:	1e93      	subs	r3, r2, #2
 800c706:	2b22      	cmp	r3, #34	; 0x22
 800c708:	b510      	push	{r4, lr}
 800c70a:	460c      	mov	r4, r1
 800c70c:	d904      	bls.n	800c718 <__itoa+0x14>
 800c70e:	2300      	movs	r3, #0
 800c710:	461c      	mov	r4, r3
 800c712:	700b      	strb	r3, [r1, #0]
 800c714:	4620      	mov	r0, r4
 800c716:	bd10      	pop	{r4, pc}
 800c718:	2a0a      	cmp	r2, #10
 800c71a:	d109      	bne.n	800c730 <__itoa+0x2c>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	da07      	bge.n	800c730 <__itoa+0x2c>
 800c720:	232d      	movs	r3, #45	; 0x2d
 800c722:	700b      	strb	r3, [r1, #0]
 800c724:	2101      	movs	r1, #1
 800c726:	4240      	negs	r0, r0
 800c728:	4421      	add	r1, r4
 800c72a:	f000 f8d9 	bl	800c8e0 <__utoa>
 800c72e:	e7f1      	b.n	800c714 <__itoa+0x10>
 800c730:	2100      	movs	r1, #0
 800c732:	e7f9      	b.n	800c728 <__itoa+0x24>

0800c734 <itoa>:
 800c734:	f7ff bfe6 	b.w	800c704 <__itoa>

0800c738 <malloc>:
 800c738:	4b02      	ldr	r3, [pc, #8]	; (800c744 <malloc+0xc>)
 800c73a:	4601      	mov	r1, r0
 800c73c:	6818      	ldr	r0, [r3, #0]
 800c73e:	f000 b823 	b.w	800c788 <_malloc_r>
 800c742:	bf00      	nop
 800c744:	200000f8 	.word	0x200000f8

0800c748 <sbrk_aligned>:
 800c748:	b570      	push	{r4, r5, r6, lr}
 800c74a:	4e0e      	ldr	r6, [pc, #56]	; (800c784 <sbrk_aligned+0x3c>)
 800c74c:	460c      	mov	r4, r1
 800c74e:	6831      	ldr	r1, [r6, #0]
 800c750:	4605      	mov	r5, r0
 800c752:	b911      	cbnz	r1, 800c75a <sbrk_aligned+0x12>
 800c754:	f000 f946 	bl	800c9e4 <_sbrk_r>
 800c758:	6030      	str	r0, [r6, #0]
 800c75a:	4621      	mov	r1, r4
 800c75c:	4628      	mov	r0, r5
 800c75e:	f000 f941 	bl	800c9e4 <_sbrk_r>
 800c762:	1c43      	adds	r3, r0, #1
 800c764:	d00a      	beq.n	800c77c <sbrk_aligned+0x34>
 800c766:	1cc4      	adds	r4, r0, #3
 800c768:	f024 0403 	bic.w	r4, r4, #3
 800c76c:	42a0      	cmp	r0, r4
 800c76e:	d007      	beq.n	800c780 <sbrk_aligned+0x38>
 800c770:	1a21      	subs	r1, r4, r0
 800c772:	4628      	mov	r0, r5
 800c774:	f000 f936 	bl	800c9e4 <_sbrk_r>
 800c778:	3001      	adds	r0, #1
 800c77a:	d101      	bne.n	800c780 <sbrk_aligned+0x38>
 800c77c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c780:	4620      	mov	r0, r4
 800c782:	bd70      	pop	{r4, r5, r6, pc}
 800c784:	20000464 	.word	0x20000464

0800c788 <_malloc_r>:
 800c788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c78c:	1ccd      	adds	r5, r1, #3
 800c78e:	f025 0503 	bic.w	r5, r5, #3
 800c792:	3508      	adds	r5, #8
 800c794:	2d0c      	cmp	r5, #12
 800c796:	bf38      	it	cc
 800c798:	250c      	movcc	r5, #12
 800c79a:	2d00      	cmp	r5, #0
 800c79c:	4607      	mov	r7, r0
 800c79e:	db01      	blt.n	800c7a4 <_malloc_r+0x1c>
 800c7a0:	42a9      	cmp	r1, r5
 800c7a2:	d905      	bls.n	800c7b0 <_malloc_r+0x28>
 800c7a4:	230c      	movs	r3, #12
 800c7a6:	2600      	movs	r6, #0
 800c7a8:	603b      	str	r3, [r7, #0]
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c884 <_malloc_r+0xfc>
 800c7b4:	f000 f868 	bl	800c888 <__malloc_lock>
 800c7b8:	f8d8 3000 	ldr.w	r3, [r8]
 800c7bc:	461c      	mov	r4, r3
 800c7be:	bb5c      	cbnz	r4, 800c818 <_malloc_r+0x90>
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	f7ff ffc0 	bl	800c748 <sbrk_aligned>
 800c7c8:	1c43      	adds	r3, r0, #1
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	d155      	bne.n	800c87a <_malloc_r+0xf2>
 800c7ce:	f8d8 4000 	ldr.w	r4, [r8]
 800c7d2:	4626      	mov	r6, r4
 800c7d4:	2e00      	cmp	r6, #0
 800c7d6:	d145      	bne.n	800c864 <_malloc_r+0xdc>
 800c7d8:	2c00      	cmp	r4, #0
 800c7da:	d048      	beq.n	800c86e <_malloc_r+0xe6>
 800c7dc:	6823      	ldr	r3, [r4, #0]
 800c7de:	4631      	mov	r1, r6
 800c7e0:	4638      	mov	r0, r7
 800c7e2:	eb04 0903 	add.w	r9, r4, r3
 800c7e6:	f000 f8fd 	bl	800c9e4 <_sbrk_r>
 800c7ea:	4581      	cmp	r9, r0
 800c7ec:	d13f      	bne.n	800c86e <_malloc_r+0xe6>
 800c7ee:	6821      	ldr	r1, [r4, #0]
 800c7f0:	4638      	mov	r0, r7
 800c7f2:	1a6d      	subs	r5, r5, r1
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	f7ff ffa7 	bl	800c748 <sbrk_aligned>
 800c7fa:	3001      	adds	r0, #1
 800c7fc:	d037      	beq.n	800c86e <_malloc_r+0xe6>
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	442b      	add	r3, r5
 800c802:	6023      	str	r3, [r4, #0]
 800c804:	f8d8 3000 	ldr.w	r3, [r8]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d038      	beq.n	800c87e <_malloc_r+0xf6>
 800c80c:	685a      	ldr	r2, [r3, #4]
 800c80e:	42a2      	cmp	r2, r4
 800c810:	d12b      	bne.n	800c86a <_malloc_r+0xe2>
 800c812:	2200      	movs	r2, #0
 800c814:	605a      	str	r2, [r3, #4]
 800c816:	e00f      	b.n	800c838 <_malloc_r+0xb0>
 800c818:	6822      	ldr	r2, [r4, #0]
 800c81a:	1b52      	subs	r2, r2, r5
 800c81c:	d41f      	bmi.n	800c85e <_malloc_r+0xd6>
 800c81e:	2a0b      	cmp	r2, #11
 800c820:	d917      	bls.n	800c852 <_malloc_r+0xca>
 800c822:	1961      	adds	r1, r4, r5
 800c824:	42a3      	cmp	r3, r4
 800c826:	6025      	str	r5, [r4, #0]
 800c828:	bf18      	it	ne
 800c82a:	6059      	strne	r1, [r3, #4]
 800c82c:	6863      	ldr	r3, [r4, #4]
 800c82e:	bf08      	it	eq
 800c830:	f8c8 1000 	streq.w	r1, [r8]
 800c834:	5162      	str	r2, [r4, r5]
 800c836:	604b      	str	r3, [r1, #4]
 800c838:	4638      	mov	r0, r7
 800c83a:	f104 060b 	add.w	r6, r4, #11
 800c83e:	f000 f829 	bl	800c894 <__malloc_unlock>
 800c842:	f026 0607 	bic.w	r6, r6, #7
 800c846:	1d23      	adds	r3, r4, #4
 800c848:	1af2      	subs	r2, r6, r3
 800c84a:	d0ae      	beq.n	800c7aa <_malloc_r+0x22>
 800c84c:	1b9b      	subs	r3, r3, r6
 800c84e:	50a3      	str	r3, [r4, r2]
 800c850:	e7ab      	b.n	800c7aa <_malloc_r+0x22>
 800c852:	42a3      	cmp	r3, r4
 800c854:	6862      	ldr	r2, [r4, #4]
 800c856:	d1dd      	bne.n	800c814 <_malloc_r+0x8c>
 800c858:	f8c8 2000 	str.w	r2, [r8]
 800c85c:	e7ec      	b.n	800c838 <_malloc_r+0xb0>
 800c85e:	4623      	mov	r3, r4
 800c860:	6864      	ldr	r4, [r4, #4]
 800c862:	e7ac      	b.n	800c7be <_malloc_r+0x36>
 800c864:	4634      	mov	r4, r6
 800c866:	6876      	ldr	r6, [r6, #4]
 800c868:	e7b4      	b.n	800c7d4 <_malloc_r+0x4c>
 800c86a:	4613      	mov	r3, r2
 800c86c:	e7cc      	b.n	800c808 <_malloc_r+0x80>
 800c86e:	230c      	movs	r3, #12
 800c870:	4638      	mov	r0, r7
 800c872:	603b      	str	r3, [r7, #0]
 800c874:	f000 f80e 	bl	800c894 <__malloc_unlock>
 800c878:	e797      	b.n	800c7aa <_malloc_r+0x22>
 800c87a:	6025      	str	r5, [r4, #0]
 800c87c:	e7dc      	b.n	800c838 <_malloc_r+0xb0>
 800c87e:	605b      	str	r3, [r3, #4]
 800c880:	deff      	udf	#255	; 0xff
 800c882:	bf00      	nop
 800c884:	20000460 	.word	0x20000460

0800c888 <__malloc_lock>:
 800c888:	4801      	ldr	r0, [pc, #4]	; (800c890 <__malloc_lock+0x8>)
 800c88a:	f000 b8e5 	b.w	800ca58 <__retarget_lock_acquire_recursive>
 800c88e:	bf00      	nop
 800c890:	200005a0 	.word	0x200005a0

0800c894 <__malloc_unlock>:
 800c894:	4801      	ldr	r0, [pc, #4]	; (800c89c <__malloc_unlock+0x8>)
 800c896:	f000 b8e0 	b.w	800ca5a <__retarget_lock_release_recursive>
 800c89a:	bf00      	nop
 800c89c:	200005a0 	.word	0x200005a0

0800c8a0 <siprintf>:
 800c8a0:	b40e      	push	{r1, r2, r3}
 800c8a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c8a6:	b500      	push	{lr}
 800c8a8:	b09c      	sub	sp, #112	; 0x70
 800c8aa:	ab1d      	add	r3, sp, #116	; 0x74
 800c8ac:	9002      	str	r0, [sp, #8]
 800c8ae:	9006      	str	r0, [sp, #24]
 800c8b0:	9107      	str	r1, [sp, #28]
 800c8b2:	9104      	str	r1, [sp, #16]
 800c8b4:	4808      	ldr	r0, [pc, #32]	; (800c8d8 <siprintf+0x38>)
 800c8b6:	4909      	ldr	r1, [pc, #36]	; (800c8dc <siprintf+0x3c>)
 800c8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8bc:	9105      	str	r1, [sp, #20]
 800c8be:	6800      	ldr	r0, [r0, #0]
 800c8c0:	a902      	add	r1, sp, #8
 800c8c2:	9301      	str	r3, [sp, #4]
 800c8c4:	f000 f974 	bl	800cbb0 <_svfiprintf_r>
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	9b02      	ldr	r3, [sp, #8]
 800c8cc:	701a      	strb	r2, [r3, #0]
 800c8ce:	b01c      	add	sp, #112	; 0x70
 800c8d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8d4:	b003      	add	sp, #12
 800c8d6:	4770      	bx	lr
 800c8d8:	200000f8 	.word	0x200000f8
 800c8dc:	ffff0208 	.word	0xffff0208

0800c8e0 <__utoa>:
 800c8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8e2:	b08b      	sub	sp, #44	; 0x2c
 800c8e4:	4605      	mov	r5, r0
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	466e      	mov	r6, sp
 800c8ea:	4c1d      	ldr	r4, [pc, #116]	; (800c960 <__utoa+0x80>)
 800c8ec:	f104 0c20 	add.w	ip, r4, #32
 800c8f0:	4637      	mov	r7, r6
 800c8f2:	6820      	ldr	r0, [r4, #0]
 800c8f4:	6861      	ldr	r1, [r4, #4]
 800c8f6:	3408      	adds	r4, #8
 800c8f8:	c703      	stmia	r7!, {r0, r1}
 800c8fa:	4564      	cmp	r4, ip
 800c8fc:	463e      	mov	r6, r7
 800c8fe:	d1f7      	bne.n	800c8f0 <__utoa+0x10>
 800c900:	7921      	ldrb	r1, [r4, #4]
 800c902:	6820      	ldr	r0, [r4, #0]
 800c904:	7139      	strb	r1, [r7, #4]
 800c906:	1e91      	subs	r1, r2, #2
 800c908:	2922      	cmp	r1, #34	; 0x22
 800c90a:	6038      	str	r0, [r7, #0]
 800c90c:	f04f 0100 	mov.w	r1, #0
 800c910:	d904      	bls.n	800c91c <__utoa+0x3c>
 800c912:	7019      	strb	r1, [r3, #0]
 800c914:	460b      	mov	r3, r1
 800c916:	4618      	mov	r0, r3
 800c918:	b00b      	add	sp, #44	; 0x2c
 800c91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c91c:	1e58      	subs	r0, r3, #1
 800c91e:	4684      	mov	ip, r0
 800c920:	fbb5 f7f2 	udiv	r7, r5, r2
 800c924:	fb02 5617 	mls	r6, r2, r7, r5
 800c928:	3628      	adds	r6, #40	; 0x28
 800c92a:	446e      	add	r6, sp
 800c92c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c930:	460c      	mov	r4, r1
 800c932:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c936:	462e      	mov	r6, r5
 800c938:	42b2      	cmp	r2, r6
 800c93a:	463d      	mov	r5, r7
 800c93c:	f101 0101 	add.w	r1, r1, #1
 800c940:	d9ee      	bls.n	800c920 <__utoa+0x40>
 800c942:	2200      	movs	r2, #0
 800c944:	545a      	strb	r2, [r3, r1]
 800c946:	1919      	adds	r1, r3, r4
 800c948:	1aa5      	subs	r5, r4, r2
 800c94a:	42aa      	cmp	r2, r5
 800c94c:	dae3      	bge.n	800c916 <__utoa+0x36>
 800c94e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c952:	780e      	ldrb	r6, [r1, #0]
 800c954:	3201      	adds	r2, #1
 800c956:	7006      	strb	r6, [r0, #0]
 800c958:	f801 5901 	strb.w	r5, [r1], #-1
 800c95c:	e7f4      	b.n	800c948 <__utoa+0x68>
 800c95e:	bf00      	nop
 800c960:	0800e21e 	.word	0x0800e21e

0800c964 <strcat>:
 800c964:	4602      	mov	r2, r0
 800c966:	b510      	push	{r4, lr}
 800c968:	7814      	ldrb	r4, [r2, #0]
 800c96a:	4613      	mov	r3, r2
 800c96c:	3201      	adds	r2, #1
 800c96e:	2c00      	cmp	r4, #0
 800c970:	d1fa      	bne.n	800c968 <strcat+0x4>
 800c972:	3b01      	subs	r3, #1
 800c974:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c978:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c97c:	2a00      	cmp	r2, #0
 800c97e:	d1f9      	bne.n	800c974 <strcat+0x10>
 800c980:	bd10      	pop	{r4, pc}

0800c982 <strncpy>:
 800c982:	4603      	mov	r3, r0
 800c984:	b510      	push	{r4, lr}
 800c986:	3901      	subs	r1, #1
 800c988:	b132      	cbz	r2, 800c998 <strncpy+0x16>
 800c98a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c98e:	3a01      	subs	r2, #1
 800c990:	f803 4b01 	strb.w	r4, [r3], #1
 800c994:	2c00      	cmp	r4, #0
 800c996:	d1f7      	bne.n	800c988 <strncpy+0x6>
 800c998:	2100      	movs	r1, #0
 800c99a:	441a      	add	r2, r3
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d100      	bne.n	800c9a2 <strncpy+0x20>
 800c9a0:	bd10      	pop	{r4, pc}
 800c9a2:	f803 1b01 	strb.w	r1, [r3], #1
 800c9a6:	e7f9      	b.n	800c99c <strncpy+0x1a>

0800c9a8 <strstr>:
 800c9a8:	780a      	ldrb	r2, [r1, #0]
 800c9aa:	b570      	push	{r4, r5, r6, lr}
 800c9ac:	b96a      	cbnz	r2, 800c9ca <strstr+0x22>
 800c9ae:	bd70      	pop	{r4, r5, r6, pc}
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d109      	bne.n	800c9c8 <strstr+0x20>
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	4605      	mov	r5, r0
 800c9b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d0f6      	beq.n	800c9ae <strstr+0x6>
 800c9c0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c9c4:	429e      	cmp	r6, r3
 800c9c6:	d0f7      	beq.n	800c9b8 <strstr+0x10>
 800c9c8:	3001      	adds	r0, #1
 800c9ca:	7803      	ldrb	r3, [r0, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d1ef      	bne.n	800c9b0 <strstr+0x8>
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	e7ec      	b.n	800c9ae <strstr+0x6>

0800c9d4 <memset>:
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	4402      	add	r2, r0
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d100      	bne.n	800c9de <memset+0xa>
 800c9dc:	4770      	bx	lr
 800c9de:	f803 1b01 	strb.w	r1, [r3], #1
 800c9e2:	e7f9      	b.n	800c9d8 <memset+0x4>

0800c9e4 <_sbrk_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	4d05      	ldr	r5, [pc, #20]	; (800ca00 <_sbrk_r+0x1c>)
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	4608      	mov	r0, r1
 800c9ee:	602b      	str	r3, [r5, #0]
 800c9f0:	f7fb ff84 	bl	80088fc <_sbrk>
 800c9f4:	1c43      	adds	r3, r0, #1
 800c9f6:	d102      	bne.n	800c9fe <_sbrk_r+0x1a>
 800c9f8:	682b      	ldr	r3, [r5, #0]
 800c9fa:	b103      	cbz	r3, 800c9fe <_sbrk_r+0x1a>
 800c9fc:	6023      	str	r3, [r4, #0]
 800c9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ca00:	200005a4 	.word	0x200005a4

0800ca04 <__errno>:
 800ca04:	4b01      	ldr	r3, [pc, #4]	; (800ca0c <__errno+0x8>)
 800ca06:	6818      	ldr	r0, [r3, #0]
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	200000f8 	.word	0x200000f8

0800ca10 <__libc_init_array>:
 800ca10:	b570      	push	{r4, r5, r6, lr}
 800ca12:	2600      	movs	r6, #0
 800ca14:	4d0c      	ldr	r5, [pc, #48]	; (800ca48 <__libc_init_array+0x38>)
 800ca16:	4c0d      	ldr	r4, [pc, #52]	; (800ca4c <__libc_init_array+0x3c>)
 800ca18:	1b64      	subs	r4, r4, r5
 800ca1a:	10a4      	asrs	r4, r4, #2
 800ca1c:	42a6      	cmp	r6, r4
 800ca1e:	d109      	bne.n	800ca34 <__libc_init_array+0x24>
 800ca20:	f000 fbc6 	bl	800d1b0 <_init>
 800ca24:	2600      	movs	r6, #0
 800ca26:	4d0a      	ldr	r5, [pc, #40]	; (800ca50 <__libc_init_array+0x40>)
 800ca28:	4c0a      	ldr	r4, [pc, #40]	; (800ca54 <__libc_init_array+0x44>)
 800ca2a:	1b64      	subs	r4, r4, r5
 800ca2c:	10a4      	asrs	r4, r4, #2
 800ca2e:	42a6      	cmp	r6, r4
 800ca30:	d105      	bne.n	800ca3e <__libc_init_array+0x2e>
 800ca32:	bd70      	pop	{r4, r5, r6, pc}
 800ca34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca38:	4798      	blx	r3
 800ca3a:	3601      	adds	r6, #1
 800ca3c:	e7ee      	b.n	800ca1c <__libc_init_array+0xc>
 800ca3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca42:	4798      	blx	r3
 800ca44:	3601      	adds	r6, #1
 800ca46:	e7f2      	b.n	800ca2e <__libc_init_array+0x1e>
 800ca48:	0800e278 	.word	0x0800e278
 800ca4c:	0800e278 	.word	0x0800e278
 800ca50:	0800e278 	.word	0x0800e278
 800ca54:	0800e27c 	.word	0x0800e27c

0800ca58 <__retarget_lock_acquire_recursive>:
 800ca58:	4770      	bx	lr

0800ca5a <__retarget_lock_release_recursive>:
 800ca5a:	4770      	bx	lr

0800ca5c <strcpy>:
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca62:	f803 2b01 	strb.w	r2, [r3], #1
 800ca66:	2a00      	cmp	r2, #0
 800ca68:	d1f9      	bne.n	800ca5e <strcpy+0x2>
 800ca6a:	4770      	bx	lr

0800ca6c <_free_r>:
 800ca6c:	b538      	push	{r3, r4, r5, lr}
 800ca6e:	4605      	mov	r5, r0
 800ca70:	2900      	cmp	r1, #0
 800ca72:	d040      	beq.n	800caf6 <_free_r+0x8a>
 800ca74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca78:	1f0c      	subs	r4, r1, #4
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	bfb8      	it	lt
 800ca7e:	18e4      	addlt	r4, r4, r3
 800ca80:	f7ff ff02 	bl	800c888 <__malloc_lock>
 800ca84:	4a1c      	ldr	r2, [pc, #112]	; (800caf8 <_free_r+0x8c>)
 800ca86:	6813      	ldr	r3, [r2, #0]
 800ca88:	b933      	cbnz	r3, 800ca98 <_free_r+0x2c>
 800ca8a:	6063      	str	r3, [r4, #4]
 800ca8c:	6014      	str	r4, [r2, #0]
 800ca8e:	4628      	mov	r0, r5
 800ca90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca94:	f7ff befe 	b.w	800c894 <__malloc_unlock>
 800ca98:	42a3      	cmp	r3, r4
 800ca9a:	d908      	bls.n	800caae <_free_r+0x42>
 800ca9c:	6820      	ldr	r0, [r4, #0]
 800ca9e:	1821      	adds	r1, r4, r0
 800caa0:	428b      	cmp	r3, r1
 800caa2:	bf01      	itttt	eq
 800caa4:	6819      	ldreq	r1, [r3, #0]
 800caa6:	685b      	ldreq	r3, [r3, #4]
 800caa8:	1809      	addeq	r1, r1, r0
 800caaa:	6021      	streq	r1, [r4, #0]
 800caac:	e7ed      	b.n	800ca8a <_free_r+0x1e>
 800caae:	461a      	mov	r2, r3
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	b10b      	cbz	r3, 800cab8 <_free_r+0x4c>
 800cab4:	42a3      	cmp	r3, r4
 800cab6:	d9fa      	bls.n	800caae <_free_r+0x42>
 800cab8:	6811      	ldr	r1, [r2, #0]
 800caba:	1850      	adds	r0, r2, r1
 800cabc:	42a0      	cmp	r0, r4
 800cabe:	d10b      	bne.n	800cad8 <_free_r+0x6c>
 800cac0:	6820      	ldr	r0, [r4, #0]
 800cac2:	4401      	add	r1, r0
 800cac4:	1850      	adds	r0, r2, r1
 800cac6:	4283      	cmp	r3, r0
 800cac8:	6011      	str	r1, [r2, #0]
 800caca:	d1e0      	bne.n	800ca8e <_free_r+0x22>
 800cacc:	6818      	ldr	r0, [r3, #0]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	4408      	add	r0, r1
 800cad2:	6010      	str	r0, [r2, #0]
 800cad4:	6053      	str	r3, [r2, #4]
 800cad6:	e7da      	b.n	800ca8e <_free_r+0x22>
 800cad8:	d902      	bls.n	800cae0 <_free_r+0x74>
 800cada:	230c      	movs	r3, #12
 800cadc:	602b      	str	r3, [r5, #0]
 800cade:	e7d6      	b.n	800ca8e <_free_r+0x22>
 800cae0:	6820      	ldr	r0, [r4, #0]
 800cae2:	1821      	adds	r1, r4, r0
 800cae4:	428b      	cmp	r3, r1
 800cae6:	bf01      	itttt	eq
 800cae8:	6819      	ldreq	r1, [r3, #0]
 800caea:	685b      	ldreq	r3, [r3, #4]
 800caec:	1809      	addeq	r1, r1, r0
 800caee:	6021      	streq	r1, [r4, #0]
 800caf0:	6063      	str	r3, [r4, #4]
 800caf2:	6054      	str	r4, [r2, #4]
 800caf4:	e7cb      	b.n	800ca8e <_free_r+0x22>
 800caf6:	bd38      	pop	{r3, r4, r5, pc}
 800caf8:	20000460 	.word	0x20000460

0800cafc <__ssputs_r>:
 800cafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb00:	461f      	mov	r7, r3
 800cb02:	688e      	ldr	r6, [r1, #8]
 800cb04:	4682      	mov	sl, r0
 800cb06:	42be      	cmp	r6, r7
 800cb08:	460c      	mov	r4, r1
 800cb0a:	4690      	mov	r8, r2
 800cb0c:	680b      	ldr	r3, [r1, #0]
 800cb0e:	d82c      	bhi.n	800cb6a <__ssputs_r+0x6e>
 800cb10:	898a      	ldrh	r2, [r1, #12]
 800cb12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb16:	d026      	beq.n	800cb66 <__ssputs_r+0x6a>
 800cb18:	6965      	ldr	r5, [r4, #20]
 800cb1a:	6909      	ldr	r1, [r1, #16]
 800cb1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb20:	eba3 0901 	sub.w	r9, r3, r1
 800cb24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb28:	1c7b      	adds	r3, r7, #1
 800cb2a:	444b      	add	r3, r9
 800cb2c:	106d      	asrs	r5, r5, #1
 800cb2e:	429d      	cmp	r5, r3
 800cb30:	bf38      	it	cc
 800cb32:	461d      	movcc	r5, r3
 800cb34:	0553      	lsls	r3, r2, #21
 800cb36:	d527      	bpl.n	800cb88 <__ssputs_r+0x8c>
 800cb38:	4629      	mov	r1, r5
 800cb3a:	f7ff fe25 	bl	800c788 <_malloc_r>
 800cb3e:	4606      	mov	r6, r0
 800cb40:	b360      	cbz	r0, 800cb9c <__ssputs_r+0xa0>
 800cb42:	464a      	mov	r2, r9
 800cb44:	6921      	ldr	r1, [r4, #16]
 800cb46:	f000 fb1c 	bl	800d182 <memcpy>
 800cb4a:	89a3      	ldrh	r3, [r4, #12]
 800cb4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb54:	81a3      	strh	r3, [r4, #12]
 800cb56:	6126      	str	r6, [r4, #16]
 800cb58:	444e      	add	r6, r9
 800cb5a:	6026      	str	r6, [r4, #0]
 800cb5c:	463e      	mov	r6, r7
 800cb5e:	6165      	str	r5, [r4, #20]
 800cb60:	eba5 0509 	sub.w	r5, r5, r9
 800cb64:	60a5      	str	r5, [r4, #8]
 800cb66:	42be      	cmp	r6, r7
 800cb68:	d900      	bls.n	800cb6c <__ssputs_r+0x70>
 800cb6a:	463e      	mov	r6, r7
 800cb6c:	4632      	mov	r2, r6
 800cb6e:	4641      	mov	r1, r8
 800cb70:	6820      	ldr	r0, [r4, #0]
 800cb72:	f000 fade 	bl	800d132 <memmove>
 800cb76:	2000      	movs	r0, #0
 800cb78:	68a3      	ldr	r3, [r4, #8]
 800cb7a:	1b9b      	subs	r3, r3, r6
 800cb7c:	60a3      	str	r3, [r4, #8]
 800cb7e:	6823      	ldr	r3, [r4, #0]
 800cb80:	4433      	add	r3, r6
 800cb82:	6023      	str	r3, [r4, #0]
 800cb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb88:	462a      	mov	r2, r5
 800cb8a:	f000 faa3 	bl	800d0d4 <_realloc_r>
 800cb8e:	4606      	mov	r6, r0
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d1e0      	bne.n	800cb56 <__ssputs_r+0x5a>
 800cb94:	4650      	mov	r0, sl
 800cb96:	6921      	ldr	r1, [r4, #16]
 800cb98:	f7ff ff68 	bl	800ca6c <_free_r>
 800cb9c:	230c      	movs	r3, #12
 800cb9e:	f8ca 3000 	str.w	r3, [sl]
 800cba2:	89a3      	ldrh	r3, [r4, #12]
 800cba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbac:	81a3      	strh	r3, [r4, #12]
 800cbae:	e7e9      	b.n	800cb84 <__ssputs_r+0x88>

0800cbb0 <_svfiprintf_r>:
 800cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	4698      	mov	r8, r3
 800cbb6:	898b      	ldrh	r3, [r1, #12]
 800cbb8:	4607      	mov	r7, r0
 800cbba:	061b      	lsls	r3, r3, #24
 800cbbc:	460d      	mov	r5, r1
 800cbbe:	4614      	mov	r4, r2
 800cbc0:	b09d      	sub	sp, #116	; 0x74
 800cbc2:	d50e      	bpl.n	800cbe2 <_svfiprintf_r+0x32>
 800cbc4:	690b      	ldr	r3, [r1, #16]
 800cbc6:	b963      	cbnz	r3, 800cbe2 <_svfiprintf_r+0x32>
 800cbc8:	2140      	movs	r1, #64	; 0x40
 800cbca:	f7ff fddd 	bl	800c788 <_malloc_r>
 800cbce:	6028      	str	r0, [r5, #0]
 800cbd0:	6128      	str	r0, [r5, #16]
 800cbd2:	b920      	cbnz	r0, 800cbde <_svfiprintf_r+0x2e>
 800cbd4:	230c      	movs	r3, #12
 800cbd6:	603b      	str	r3, [r7, #0]
 800cbd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbdc:	e0d0      	b.n	800cd80 <_svfiprintf_r+0x1d0>
 800cbde:	2340      	movs	r3, #64	; 0x40
 800cbe0:	616b      	str	r3, [r5, #20]
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	9309      	str	r3, [sp, #36]	; 0x24
 800cbe6:	2320      	movs	r3, #32
 800cbe8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbec:	2330      	movs	r3, #48	; 0x30
 800cbee:	f04f 0901 	mov.w	r9, #1
 800cbf2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbf6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800cd98 <_svfiprintf_r+0x1e8>
 800cbfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbfe:	4623      	mov	r3, r4
 800cc00:	469a      	mov	sl, r3
 800cc02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc06:	b10a      	cbz	r2, 800cc0c <_svfiprintf_r+0x5c>
 800cc08:	2a25      	cmp	r2, #37	; 0x25
 800cc0a:	d1f9      	bne.n	800cc00 <_svfiprintf_r+0x50>
 800cc0c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc10:	d00b      	beq.n	800cc2a <_svfiprintf_r+0x7a>
 800cc12:	465b      	mov	r3, fp
 800cc14:	4622      	mov	r2, r4
 800cc16:	4629      	mov	r1, r5
 800cc18:	4638      	mov	r0, r7
 800cc1a:	f7ff ff6f 	bl	800cafc <__ssputs_r>
 800cc1e:	3001      	adds	r0, #1
 800cc20:	f000 80a9 	beq.w	800cd76 <_svfiprintf_r+0x1c6>
 800cc24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc26:	445a      	add	r2, fp
 800cc28:	9209      	str	r2, [sp, #36]	; 0x24
 800cc2a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f000 80a1 	beq.w	800cd76 <_svfiprintf_r+0x1c6>
 800cc34:	2300      	movs	r3, #0
 800cc36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc3e:	f10a 0a01 	add.w	sl, sl, #1
 800cc42:	9304      	str	r3, [sp, #16]
 800cc44:	9307      	str	r3, [sp, #28]
 800cc46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc4a:	931a      	str	r3, [sp, #104]	; 0x68
 800cc4c:	4654      	mov	r4, sl
 800cc4e:	2205      	movs	r2, #5
 800cc50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc54:	4850      	ldr	r0, [pc, #320]	; (800cd98 <_svfiprintf_r+0x1e8>)
 800cc56:	f000 fa86 	bl	800d166 <memchr>
 800cc5a:	9a04      	ldr	r2, [sp, #16]
 800cc5c:	b9d8      	cbnz	r0, 800cc96 <_svfiprintf_r+0xe6>
 800cc5e:	06d0      	lsls	r0, r2, #27
 800cc60:	bf44      	itt	mi
 800cc62:	2320      	movmi	r3, #32
 800cc64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc68:	0711      	lsls	r1, r2, #28
 800cc6a:	bf44      	itt	mi
 800cc6c:	232b      	movmi	r3, #43	; 0x2b
 800cc6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc72:	f89a 3000 	ldrb.w	r3, [sl]
 800cc76:	2b2a      	cmp	r3, #42	; 0x2a
 800cc78:	d015      	beq.n	800cca6 <_svfiprintf_r+0xf6>
 800cc7a:	4654      	mov	r4, sl
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	f04f 0c0a 	mov.w	ip, #10
 800cc82:	9a07      	ldr	r2, [sp, #28]
 800cc84:	4621      	mov	r1, r4
 800cc86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc8a:	3b30      	subs	r3, #48	; 0x30
 800cc8c:	2b09      	cmp	r3, #9
 800cc8e:	d94d      	bls.n	800cd2c <_svfiprintf_r+0x17c>
 800cc90:	b1b0      	cbz	r0, 800ccc0 <_svfiprintf_r+0x110>
 800cc92:	9207      	str	r2, [sp, #28]
 800cc94:	e014      	b.n	800ccc0 <_svfiprintf_r+0x110>
 800cc96:	eba0 0308 	sub.w	r3, r0, r8
 800cc9a:	fa09 f303 	lsl.w	r3, r9, r3
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	46a2      	mov	sl, r4
 800cca2:	9304      	str	r3, [sp, #16]
 800cca4:	e7d2      	b.n	800cc4c <_svfiprintf_r+0x9c>
 800cca6:	9b03      	ldr	r3, [sp, #12]
 800cca8:	1d19      	adds	r1, r3, #4
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	9103      	str	r1, [sp, #12]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	bfbb      	ittet	lt
 800ccb2:	425b      	neglt	r3, r3
 800ccb4:	f042 0202 	orrlt.w	r2, r2, #2
 800ccb8:	9307      	strge	r3, [sp, #28]
 800ccba:	9307      	strlt	r3, [sp, #28]
 800ccbc:	bfb8      	it	lt
 800ccbe:	9204      	strlt	r2, [sp, #16]
 800ccc0:	7823      	ldrb	r3, [r4, #0]
 800ccc2:	2b2e      	cmp	r3, #46	; 0x2e
 800ccc4:	d10c      	bne.n	800cce0 <_svfiprintf_r+0x130>
 800ccc6:	7863      	ldrb	r3, [r4, #1]
 800ccc8:	2b2a      	cmp	r3, #42	; 0x2a
 800ccca:	d134      	bne.n	800cd36 <_svfiprintf_r+0x186>
 800cccc:	9b03      	ldr	r3, [sp, #12]
 800ccce:	3402      	adds	r4, #2
 800ccd0:	1d1a      	adds	r2, r3, #4
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	9203      	str	r2, [sp, #12]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	bfb8      	it	lt
 800ccda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ccde:	9305      	str	r3, [sp, #20]
 800cce0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800cd9c <_svfiprintf_r+0x1ec>
 800cce4:	2203      	movs	r2, #3
 800cce6:	4650      	mov	r0, sl
 800cce8:	7821      	ldrb	r1, [r4, #0]
 800ccea:	f000 fa3c 	bl	800d166 <memchr>
 800ccee:	b138      	cbz	r0, 800cd00 <_svfiprintf_r+0x150>
 800ccf0:	2240      	movs	r2, #64	; 0x40
 800ccf2:	9b04      	ldr	r3, [sp, #16]
 800ccf4:	eba0 000a 	sub.w	r0, r0, sl
 800ccf8:	4082      	lsls	r2, r0
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	3401      	adds	r4, #1
 800ccfe:	9304      	str	r3, [sp, #16]
 800cd00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd04:	2206      	movs	r2, #6
 800cd06:	4826      	ldr	r0, [pc, #152]	; (800cda0 <_svfiprintf_r+0x1f0>)
 800cd08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd0c:	f000 fa2b 	bl	800d166 <memchr>
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d038      	beq.n	800cd86 <_svfiprintf_r+0x1d6>
 800cd14:	4b23      	ldr	r3, [pc, #140]	; (800cda4 <_svfiprintf_r+0x1f4>)
 800cd16:	bb1b      	cbnz	r3, 800cd60 <_svfiprintf_r+0x1b0>
 800cd18:	9b03      	ldr	r3, [sp, #12]
 800cd1a:	3307      	adds	r3, #7
 800cd1c:	f023 0307 	bic.w	r3, r3, #7
 800cd20:	3308      	adds	r3, #8
 800cd22:	9303      	str	r3, [sp, #12]
 800cd24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd26:	4433      	add	r3, r6
 800cd28:	9309      	str	r3, [sp, #36]	; 0x24
 800cd2a:	e768      	b.n	800cbfe <_svfiprintf_r+0x4e>
 800cd2c:	460c      	mov	r4, r1
 800cd2e:	2001      	movs	r0, #1
 800cd30:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd34:	e7a6      	b.n	800cc84 <_svfiprintf_r+0xd4>
 800cd36:	2300      	movs	r3, #0
 800cd38:	f04f 0c0a 	mov.w	ip, #10
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	3401      	adds	r4, #1
 800cd40:	9305      	str	r3, [sp, #20]
 800cd42:	4620      	mov	r0, r4
 800cd44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd48:	3a30      	subs	r2, #48	; 0x30
 800cd4a:	2a09      	cmp	r2, #9
 800cd4c:	d903      	bls.n	800cd56 <_svfiprintf_r+0x1a6>
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d0c6      	beq.n	800cce0 <_svfiprintf_r+0x130>
 800cd52:	9105      	str	r1, [sp, #20]
 800cd54:	e7c4      	b.n	800cce0 <_svfiprintf_r+0x130>
 800cd56:	4604      	mov	r4, r0
 800cd58:	2301      	movs	r3, #1
 800cd5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd5e:	e7f0      	b.n	800cd42 <_svfiprintf_r+0x192>
 800cd60:	ab03      	add	r3, sp, #12
 800cd62:	9300      	str	r3, [sp, #0]
 800cd64:	462a      	mov	r2, r5
 800cd66:	4638      	mov	r0, r7
 800cd68:	4b0f      	ldr	r3, [pc, #60]	; (800cda8 <_svfiprintf_r+0x1f8>)
 800cd6a:	a904      	add	r1, sp, #16
 800cd6c:	f3af 8000 	nop.w
 800cd70:	1c42      	adds	r2, r0, #1
 800cd72:	4606      	mov	r6, r0
 800cd74:	d1d6      	bne.n	800cd24 <_svfiprintf_r+0x174>
 800cd76:	89ab      	ldrh	r3, [r5, #12]
 800cd78:	065b      	lsls	r3, r3, #25
 800cd7a:	f53f af2d 	bmi.w	800cbd8 <_svfiprintf_r+0x28>
 800cd7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd80:	b01d      	add	sp, #116	; 0x74
 800cd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd86:	ab03      	add	r3, sp, #12
 800cd88:	9300      	str	r3, [sp, #0]
 800cd8a:	462a      	mov	r2, r5
 800cd8c:	4638      	mov	r0, r7
 800cd8e:	4b06      	ldr	r3, [pc, #24]	; (800cda8 <_svfiprintf_r+0x1f8>)
 800cd90:	a904      	add	r1, sp, #16
 800cd92:	f000 f87d 	bl	800ce90 <_printf_i>
 800cd96:	e7eb      	b.n	800cd70 <_svfiprintf_r+0x1c0>
 800cd98:	0800e243 	.word	0x0800e243
 800cd9c:	0800e249 	.word	0x0800e249
 800cda0:	0800e24d 	.word	0x0800e24d
 800cda4:	00000000 	.word	0x00000000
 800cda8:	0800cafd 	.word	0x0800cafd

0800cdac <_printf_common>:
 800cdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdb0:	4616      	mov	r6, r2
 800cdb2:	4699      	mov	r9, r3
 800cdb4:	688a      	ldr	r2, [r1, #8]
 800cdb6:	690b      	ldr	r3, [r1, #16]
 800cdb8:	4607      	mov	r7, r0
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	bfb8      	it	lt
 800cdbe:	4613      	movlt	r3, r2
 800cdc0:	6033      	str	r3, [r6, #0]
 800cdc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cdcc:	b10a      	cbz	r2, 800cdd2 <_printf_common+0x26>
 800cdce:	3301      	adds	r3, #1
 800cdd0:	6033      	str	r3, [r6, #0]
 800cdd2:	6823      	ldr	r3, [r4, #0]
 800cdd4:	0699      	lsls	r1, r3, #26
 800cdd6:	bf42      	ittt	mi
 800cdd8:	6833      	ldrmi	r3, [r6, #0]
 800cdda:	3302      	addmi	r3, #2
 800cddc:	6033      	strmi	r3, [r6, #0]
 800cdde:	6825      	ldr	r5, [r4, #0]
 800cde0:	f015 0506 	ands.w	r5, r5, #6
 800cde4:	d106      	bne.n	800cdf4 <_printf_common+0x48>
 800cde6:	f104 0a19 	add.w	sl, r4, #25
 800cdea:	68e3      	ldr	r3, [r4, #12]
 800cdec:	6832      	ldr	r2, [r6, #0]
 800cdee:	1a9b      	subs	r3, r3, r2
 800cdf0:	42ab      	cmp	r3, r5
 800cdf2:	dc2b      	bgt.n	800ce4c <_printf_common+0xa0>
 800cdf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cdf8:	1e13      	subs	r3, r2, #0
 800cdfa:	6822      	ldr	r2, [r4, #0]
 800cdfc:	bf18      	it	ne
 800cdfe:	2301      	movne	r3, #1
 800ce00:	0692      	lsls	r2, r2, #26
 800ce02:	d430      	bmi.n	800ce66 <_printf_common+0xba>
 800ce04:	4649      	mov	r1, r9
 800ce06:	4638      	mov	r0, r7
 800ce08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce0c:	47c0      	blx	r8
 800ce0e:	3001      	adds	r0, #1
 800ce10:	d023      	beq.n	800ce5a <_printf_common+0xae>
 800ce12:	6823      	ldr	r3, [r4, #0]
 800ce14:	6922      	ldr	r2, [r4, #16]
 800ce16:	f003 0306 	and.w	r3, r3, #6
 800ce1a:	2b04      	cmp	r3, #4
 800ce1c:	bf14      	ite	ne
 800ce1e:	2500      	movne	r5, #0
 800ce20:	6833      	ldreq	r3, [r6, #0]
 800ce22:	f04f 0600 	mov.w	r6, #0
 800ce26:	bf08      	it	eq
 800ce28:	68e5      	ldreq	r5, [r4, #12]
 800ce2a:	f104 041a 	add.w	r4, r4, #26
 800ce2e:	bf08      	it	eq
 800ce30:	1aed      	subeq	r5, r5, r3
 800ce32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ce36:	bf08      	it	eq
 800ce38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	bfc4      	itt	gt
 800ce40:	1a9b      	subgt	r3, r3, r2
 800ce42:	18ed      	addgt	r5, r5, r3
 800ce44:	42b5      	cmp	r5, r6
 800ce46:	d11a      	bne.n	800ce7e <_printf_common+0xd2>
 800ce48:	2000      	movs	r0, #0
 800ce4a:	e008      	b.n	800ce5e <_printf_common+0xb2>
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	4652      	mov	r2, sl
 800ce50:	4649      	mov	r1, r9
 800ce52:	4638      	mov	r0, r7
 800ce54:	47c0      	blx	r8
 800ce56:	3001      	adds	r0, #1
 800ce58:	d103      	bne.n	800ce62 <_printf_common+0xb6>
 800ce5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce62:	3501      	adds	r5, #1
 800ce64:	e7c1      	b.n	800cdea <_printf_common+0x3e>
 800ce66:	2030      	movs	r0, #48	; 0x30
 800ce68:	18e1      	adds	r1, r4, r3
 800ce6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce6e:	1c5a      	adds	r2, r3, #1
 800ce70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce74:	4422      	add	r2, r4
 800ce76:	3302      	adds	r3, #2
 800ce78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce7c:	e7c2      	b.n	800ce04 <_printf_common+0x58>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	4622      	mov	r2, r4
 800ce82:	4649      	mov	r1, r9
 800ce84:	4638      	mov	r0, r7
 800ce86:	47c0      	blx	r8
 800ce88:	3001      	adds	r0, #1
 800ce8a:	d0e6      	beq.n	800ce5a <_printf_common+0xae>
 800ce8c:	3601      	adds	r6, #1
 800ce8e:	e7d9      	b.n	800ce44 <_printf_common+0x98>

0800ce90 <_printf_i>:
 800ce90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce94:	7e0f      	ldrb	r7, [r1, #24]
 800ce96:	4691      	mov	r9, r2
 800ce98:	2f78      	cmp	r7, #120	; 0x78
 800ce9a:	4680      	mov	r8, r0
 800ce9c:	460c      	mov	r4, r1
 800ce9e:	469a      	mov	sl, r3
 800cea0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cea2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cea6:	d807      	bhi.n	800ceb8 <_printf_i+0x28>
 800cea8:	2f62      	cmp	r7, #98	; 0x62
 800ceaa:	d80a      	bhi.n	800cec2 <_printf_i+0x32>
 800ceac:	2f00      	cmp	r7, #0
 800ceae:	f000 80d5 	beq.w	800d05c <_printf_i+0x1cc>
 800ceb2:	2f58      	cmp	r7, #88	; 0x58
 800ceb4:	f000 80c1 	beq.w	800d03a <_printf_i+0x1aa>
 800ceb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cec0:	e03a      	b.n	800cf38 <_printf_i+0xa8>
 800cec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cec6:	2b15      	cmp	r3, #21
 800cec8:	d8f6      	bhi.n	800ceb8 <_printf_i+0x28>
 800ceca:	a101      	add	r1, pc, #4	; (adr r1, 800ced0 <_printf_i+0x40>)
 800cecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ced0:	0800cf29 	.word	0x0800cf29
 800ced4:	0800cf3d 	.word	0x0800cf3d
 800ced8:	0800ceb9 	.word	0x0800ceb9
 800cedc:	0800ceb9 	.word	0x0800ceb9
 800cee0:	0800ceb9 	.word	0x0800ceb9
 800cee4:	0800ceb9 	.word	0x0800ceb9
 800cee8:	0800cf3d 	.word	0x0800cf3d
 800ceec:	0800ceb9 	.word	0x0800ceb9
 800cef0:	0800ceb9 	.word	0x0800ceb9
 800cef4:	0800ceb9 	.word	0x0800ceb9
 800cef8:	0800ceb9 	.word	0x0800ceb9
 800cefc:	0800d043 	.word	0x0800d043
 800cf00:	0800cf69 	.word	0x0800cf69
 800cf04:	0800cffd 	.word	0x0800cffd
 800cf08:	0800ceb9 	.word	0x0800ceb9
 800cf0c:	0800ceb9 	.word	0x0800ceb9
 800cf10:	0800d065 	.word	0x0800d065
 800cf14:	0800ceb9 	.word	0x0800ceb9
 800cf18:	0800cf69 	.word	0x0800cf69
 800cf1c:	0800ceb9 	.word	0x0800ceb9
 800cf20:	0800ceb9 	.word	0x0800ceb9
 800cf24:	0800d005 	.word	0x0800d005
 800cf28:	682b      	ldr	r3, [r5, #0]
 800cf2a:	1d1a      	adds	r2, r3, #4
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	602a      	str	r2, [r5, #0]
 800cf30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf38:	2301      	movs	r3, #1
 800cf3a:	e0a0      	b.n	800d07e <_printf_i+0x1ee>
 800cf3c:	6820      	ldr	r0, [r4, #0]
 800cf3e:	682b      	ldr	r3, [r5, #0]
 800cf40:	0607      	lsls	r7, r0, #24
 800cf42:	f103 0104 	add.w	r1, r3, #4
 800cf46:	6029      	str	r1, [r5, #0]
 800cf48:	d501      	bpl.n	800cf4e <_printf_i+0xbe>
 800cf4a:	681e      	ldr	r6, [r3, #0]
 800cf4c:	e003      	b.n	800cf56 <_printf_i+0xc6>
 800cf4e:	0646      	lsls	r6, r0, #25
 800cf50:	d5fb      	bpl.n	800cf4a <_printf_i+0xba>
 800cf52:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cf56:	2e00      	cmp	r6, #0
 800cf58:	da03      	bge.n	800cf62 <_printf_i+0xd2>
 800cf5a:	232d      	movs	r3, #45	; 0x2d
 800cf5c:	4276      	negs	r6, r6
 800cf5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf62:	230a      	movs	r3, #10
 800cf64:	4859      	ldr	r0, [pc, #356]	; (800d0cc <_printf_i+0x23c>)
 800cf66:	e012      	b.n	800cf8e <_printf_i+0xfe>
 800cf68:	682b      	ldr	r3, [r5, #0]
 800cf6a:	6820      	ldr	r0, [r4, #0]
 800cf6c:	1d19      	adds	r1, r3, #4
 800cf6e:	6029      	str	r1, [r5, #0]
 800cf70:	0605      	lsls	r5, r0, #24
 800cf72:	d501      	bpl.n	800cf78 <_printf_i+0xe8>
 800cf74:	681e      	ldr	r6, [r3, #0]
 800cf76:	e002      	b.n	800cf7e <_printf_i+0xee>
 800cf78:	0641      	lsls	r1, r0, #25
 800cf7a:	d5fb      	bpl.n	800cf74 <_printf_i+0xe4>
 800cf7c:	881e      	ldrh	r6, [r3, #0]
 800cf7e:	2f6f      	cmp	r7, #111	; 0x6f
 800cf80:	bf0c      	ite	eq
 800cf82:	2308      	moveq	r3, #8
 800cf84:	230a      	movne	r3, #10
 800cf86:	4851      	ldr	r0, [pc, #324]	; (800d0cc <_printf_i+0x23c>)
 800cf88:	2100      	movs	r1, #0
 800cf8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf8e:	6865      	ldr	r5, [r4, #4]
 800cf90:	2d00      	cmp	r5, #0
 800cf92:	bfa8      	it	ge
 800cf94:	6821      	ldrge	r1, [r4, #0]
 800cf96:	60a5      	str	r5, [r4, #8]
 800cf98:	bfa4      	itt	ge
 800cf9a:	f021 0104 	bicge.w	r1, r1, #4
 800cf9e:	6021      	strge	r1, [r4, #0]
 800cfa0:	b90e      	cbnz	r6, 800cfa6 <_printf_i+0x116>
 800cfa2:	2d00      	cmp	r5, #0
 800cfa4:	d04b      	beq.n	800d03e <_printf_i+0x1ae>
 800cfa6:	4615      	mov	r5, r2
 800cfa8:	fbb6 f1f3 	udiv	r1, r6, r3
 800cfac:	fb03 6711 	mls	r7, r3, r1, r6
 800cfb0:	5dc7      	ldrb	r7, [r0, r7]
 800cfb2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cfb6:	4637      	mov	r7, r6
 800cfb8:	42bb      	cmp	r3, r7
 800cfba:	460e      	mov	r6, r1
 800cfbc:	d9f4      	bls.n	800cfa8 <_printf_i+0x118>
 800cfbe:	2b08      	cmp	r3, #8
 800cfc0:	d10b      	bne.n	800cfda <_printf_i+0x14a>
 800cfc2:	6823      	ldr	r3, [r4, #0]
 800cfc4:	07de      	lsls	r6, r3, #31
 800cfc6:	d508      	bpl.n	800cfda <_printf_i+0x14a>
 800cfc8:	6923      	ldr	r3, [r4, #16]
 800cfca:	6861      	ldr	r1, [r4, #4]
 800cfcc:	4299      	cmp	r1, r3
 800cfce:	bfde      	ittt	le
 800cfd0:	2330      	movle	r3, #48	; 0x30
 800cfd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cfd6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cfda:	1b52      	subs	r2, r2, r5
 800cfdc:	6122      	str	r2, [r4, #16]
 800cfde:	464b      	mov	r3, r9
 800cfe0:	4621      	mov	r1, r4
 800cfe2:	4640      	mov	r0, r8
 800cfe4:	f8cd a000 	str.w	sl, [sp]
 800cfe8:	aa03      	add	r2, sp, #12
 800cfea:	f7ff fedf 	bl	800cdac <_printf_common>
 800cfee:	3001      	adds	r0, #1
 800cff0:	d14a      	bne.n	800d088 <_printf_i+0x1f8>
 800cff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cff6:	b004      	add	sp, #16
 800cff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cffc:	6823      	ldr	r3, [r4, #0]
 800cffe:	f043 0320 	orr.w	r3, r3, #32
 800d002:	6023      	str	r3, [r4, #0]
 800d004:	2778      	movs	r7, #120	; 0x78
 800d006:	4832      	ldr	r0, [pc, #200]	; (800d0d0 <_printf_i+0x240>)
 800d008:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d00c:	6823      	ldr	r3, [r4, #0]
 800d00e:	6829      	ldr	r1, [r5, #0]
 800d010:	061f      	lsls	r7, r3, #24
 800d012:	f851 6b04 	ldr.w	r6, [r1], #4
 800d016:	d402      	bmi.n	800d01e <_printf_i+0x18e>
 800d018:	065f      	lsls	r7, r3, #25
 800d01a:	bf48      	it	mi
 800d01c:	b2b6      	uxthmi	r6, r6
 800d01e:	07df      	lsls	r7, r3, #31
 800d020:	bf48      	it	mi
 800d022:	f043 0320 	orrmi.w	r3, r3, #32
 800d026:	6029      	str	r1, [r5, #0]
 800d028:	bf48      	it	mi
 800d02a:	6023      	strmi	r3, [r4, #0]
 800d02c:	b91e      	cbnz	r6, 800d036 <_printf_i+0x1a6>
 800d02e:	6823      	ldr	r3, [r4, #0]
 800d030:	f023 0320 	bic.w	r3, r3, #32
 800d034:	6023      	str	r3, [r4, #0]
 800d036:	2310      	movs	r3, #16
 800d038:	e7a6      	b.n	800cf88 <_printf_i+0xf8>
 800d03a:	4824      	ldr	r0, [pc, #144]	; (800d0cc <_printf_i+0x23c>)
 800d03c:	e7e4      	b.n	800d008 <_printf_i+0x178>
 800d03e:	4615      	mov	r5, r2
 800d040:	e7bd      	b.n	800cfbe <_printf_i+0x12e>
 800d042:	682b      	ldr	r3, [r5, #0]
 800d044:	6826      	ldr	r6, [r4, #0]
 800d046:	1d18      	adds	r0, r3, #4
 800d048:	6961      	ldr	r1, [r4, #20]
 800d04a:	6028      	str	r0, [r5, #0]
 800d04c:	0635      	lsls	r5, r6, #24
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	d501      	bpl.n	800d056 <_printf_i+0x1c6>
 800d052:	6019      	str	r1, [r3, #0]
 800d054:	e002      	b.n	800d05c <_printf_i+0x1cc>
 800d056:	0670      	lsls	r0, r6, #25
 800d058:	d5fb      	bpl.n	800d052 <_printf_i+0x1c2>
 800d05a:	8019      	strh	r1, [r3, #0]
 800d05c:	2300      	movs	r3, #0
 800d05e:	4615      	mov	r5, r2
 800d060:	6123      	str	r3, [r4, #16]
 800d062:	e7bc      	b.n	800cfde <_printf_i+0x14e>
 800d064:	682b      	ldr	r3, [r5, #0]
 800d066:	2100      	movs	r1, #0
 800d068:	1d1a      	adds	r2, r3, #4
 800d06a:	602a      	str	r2, [r5, #0]
 800d06c:	681d      	ldr	r5, [r3, #0]
 800d06e:	6862      	ldr	r2, [r4, #4]
 800d070:	4628      	mov	r0, r5
 800d072:	f000 f878 	bl	800d166 <memchr>
 800d076:	b108      	cbz	r0, 800d07c <_printf_i+0x1ec>
 800d078:	1b40      	subs	r0, r0, r5
 800d07a:	6060      	str	r0, [r4, #4]
 800d07c:	6863      	ldr	r3, [r4, #4]
 800d07e:	6123      	str	r3, [r4, #16]
 800d080:	2300      	movs	r3, #0
 800d082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d086:	e7aa      	b.n	800cfde <_printf_i+0x14e>
 800d088:	462a      	mov	r2, r5
 800d08a:	4649      	mov	r1, r9
 800d08c:	4640      	mov	r0, r8
 800d08e:	6923      	ldr	r3, [r4, #16]
 800d090:	47d0      	blx	sl
 800d092:	3001      	adds	r0, #1
 800d094:	d0ad      	beq.n	800cff2 <_printf_i+0x162>
 800d096:	6823      	ldr	r3, [r4, #0]
 800d098:	079b      	lsls	r3, r3, #30
 800d09a:	d413      	bmi.n	800d0c4 <_printf_i+0x234>
 800d09c:	68e0      	ldr	r0, [r4, #12]
 800d09e:	9b03      	ldr	r3, [sp, #12]
 800d0a0:	4298      	cmp	r0, r3
 800d0a2:	bfb8      	it	lt
 800d0a4:	4618      	movlt	r0, r3
 800d0a6:	e7a6      	b.n	800cff6 <_printf_i+0x166>
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	4632      	mov	r2, r6
 800d0ac:	4649      	mov	r1, r9
 800d0ae:	4640      	mov	r0, r8
 800d0b0:	47d0      	blx	sl
 800d0b2:	3001      	adds	r0, #1
 800d0b4:	d09d      	beq.n	800cff2 <_printf_i+0x162>
 800d0b6:	3501      	adds	r5, #1
 800d0b8:	68e3      	ldr	r3, [r4, #12]
 800d0ba:	9903      	ldr	r1, [sp, #12]
 800d0bc:	1a5b      	subs	r3, r3, r1
 800d0be:	42ab      	cmp	r3, r5
 800d0c0:	dcf2      	bgt.n	800d0a8 <_printf_i+0x218>
 800d0c2:	e7eb      	b.n	800d09c <_printf_i+0x20c>
 800d0c4:	2500      	movs	r5, #0
 800d0c6:	f104 0619 	add.w	r6, r4, #25
 800d0ca:	e7f5      	b.n	800d0b8 <_printf_i+0x228>
 800d0cc:	0800e254 	.word	0x0800e254
 800d0d0:	0800e265 	.word	0x0800e265

0800d0d4 <_realloc_r>:
 800d0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0d8:	4680      	mov	r8, r0
 800d0da:	4614      	mov	r4, r2
 800d0dc:	460e      	mov	r6, r1
 800d0de:	b921      	cbnz	r1, 800d0ea <_realloc_r+0x16>
 800d0e0:	4611      	mov	r1, r2
 800d0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e6:	f7ff bb4f 	b.w	800c788 <_malloc_r>
 800d0ea:	b92a      	cbnz	r2, 800d0f8 <_realloc_r+0x24>
 800d0ec:	f7ff fcbe 	bl	800ca6c <_free_r>
 800d0f0:	4625      	mov	r5, r4
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f8:	f000 f851 	bl	800d19e <_malloc_usable_size_r>
 800d0fc:	4284      	cmp	r4, r0
 800d0fe:	4607      	mov	r7, r0
 800d100:	d802      	bhi.n	800d108 <_realloc_r+0x34>
 800d102:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d106:	d812      	bhi.n	800d12e <_realloc_r+0x5a>
 800d108:	4621      	mov	r1, r4
 800d10a:	4640      	mov	r0, r8
 800d10c:	f7ff fb3c 	bl	800c788 <_malloc_r>
 800d110:	4605      	mov	r5, r0
 800d112:	2800      	cmp	r0, #0
 800d114:	d0ed      	beq.n	800d0f2 <_realloc_r+0x1e>
 800d116:	42bc      	cmp	r4, r7
 800d118:	4622      	mov	r2, r4
 800d11a:	4631      	mov	r1, r6
 800d11c:	bf28      	it	cs
 800d11e:	463a      	movcs	r2, r7
 800d120:	f000 f82f 	bl	800d182 <memcpy>
 800d124:	4631      	mov	r1, r6
 800d126:	4640      	mov	r0, r8
 800d128:	f7ff fca0 	bl	800ca6c <_free_r>
 800d12c:	e7e1      	b.n	800d0f2 <_realloc_r+0x1e>
 800d12e:	4635      	mov	r5, r6
 800d130:	e7df      	b.n	800d0f2 <_realloc_r+0x1e>

0800d132 <memmove>:
 800d132:	4288      	cmp	r0, r1
 800d134:	b510      	push	{r4, lr}
 800d136:	eb01 0402 	add.w	r4, r1, r2
 800d13a:	d902      	bls.n	800d142 <memmove+0x10>
 800d13c:	4284      	cmp	r4, r0
 800d13e:	4623      	mov	r3, r4
 800d140:	d807      	bhi.n	800d152 <memmove+0x20>
 800d142:	1e43      	subs	r3, r0, #1
 800d144:	42a1      	cmp	r1, r4
 800d146:	d008      	beq.n	800d15a <memmove+0x28>
 800d148:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d14c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d150:	e7f8      	b.n	800d144 <memmove+0x12>
 800d152:	4601      	mov	r1, r0
 800d154:	4402      	add	r2, r0
 800d156:	428a      	cmp	r2, r1
 800d158:	d100      	bne.n	800d15c <memmove+0x2a>
 800d15a:	bd10      	pop	{r4, pc}
 800d15c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d160:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d164:	e7f7      	b.n	800d156 <memmove+0x24>

0800d166 <memchr>:
 800d166:	4603      	mov	r3, r0
 800d168:	b510      	push	{r4, lr}
 800d16a:	b2c9      	uxtb	r1, r1
 800d16c:	4402      	add	r2, r0
 800d16e:	4293      	cmp	r3, r2
 800d170:	4618      	mov	r0, r3
 800d172:	d101      	bne.n	800d178 <memchr+0x12>
 800d174:	2000      	movs	r0, #0
 800d176:	e003      	b.n	800d180 <memchr+0x1a>
 800d178:	7804      	ldrb	r4, [r0, #0]
 800d17a:	3301      	adds	r3, #1
 800d17c:	428c      	cmp	r4, r1
 800d17e:	d1f6      	bne.n	800d16e <memchr+0x8>
 800d180:	bd10      	pop	{r4, pc}

0800d182 <memcpy>:
 800d182:	440a      	add	r2, r1
 800d184:	4291      	cmp	r1, r2
 800d186:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d18a:	d100      	bne.n	800d18e <memcpy+0xc>
 800d18c:	4770      	bx	lr
 800d18e:	b510      	push	{r4, lr}
 800d190:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d194:	4291      	cmp	r1, r2
 800d196:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d19a:	d1f9      	bne.n	800d190 <memcpy+0xe>
 800d19c:	bd10      	pop	{r4, pc}

0800d19e <_malloc_usable_size_r>:
 800d19e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1a2:	1f18      	subs	r0, r3, #4
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	bfbc      	itt	lt
 800d1a8:	580b      	ldrlt	r3, [r1, r0]
 800d1aa:	18c0      	addlt	r0, r0, r3
 800d1ac:	4770      	bx	lr
	...

0800d1b0 <_init>:
 800d1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1b2:	bf00      	nop
 800d1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1b6:	bc08      	pop	{r3}
 800d1b8:	469e      	mov	lr, r3
 800d1ba:	4770      	bx	lr

0800d1bc <_fini>:
 800d1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1be:	bf00      	nop
 800d1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1c2:	bc08      	pop	{r3}
 800d1c4:	469e      	mov	lr, r3
 800d1c6:	4770      	bx	lr
