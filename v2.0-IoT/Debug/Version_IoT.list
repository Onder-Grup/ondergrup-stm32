
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d798  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f2c  0800d97c  0800d97c  0001d97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8a8  0800e8a8  00020a2c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e8a8  0800e8a8  00020a2c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e8a8  0800e8a8  00020a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8a8  0800e8a8  0001e8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8ac  0800e8ac  0001e8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a2c  20000000  0800e8b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000a2c  0800f2dc  00020a2c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000109c  0800f2dc  0002109c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a2c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a55  2**0
                  CONTENTS, READONLY
 13 .debug_info   000135b3  00000000  00000000  00020a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ce  00000000  00000000  0003404b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00036720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df4  00000000  00000000  000378c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af02  00000000  00000000  000386b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018881  00000000  00000000  000535b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fd4a  00000000  00000000  0006be37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005194  00000000  00000000  0010bb84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00110d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a2c 	.word	0x20000a2c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d964 	.word	0x0800d964

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a30 	.word	0x20000a30
 8000220:	0800d964 	.word	0x0800d964

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00c ff5a 	bl	800d0fc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00c f8cc 	bl	800c3f4 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f008 fffc 	bl	800925c <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00c ff48 	bl	800d0fc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00c f8ba 	bl	800c3f4 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f008 ffea 	bl	800925c <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00c ff36 	bl	800d0fc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00c f8a8 	bl	800c3f4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f008 ffd8 	bl	800925c <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00c ff24 	bl	800d0fc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00c f896 	bl	800c3f4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f008 ffc6 	bl	800925c <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00c ff2f 	bl	800d14c <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00c ff1c 	bl	800d14c <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00c fee0 	bl	800d0fc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00c f852 	bl	800c3f4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f008 ff82 	bl	800925c <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800d97c 	.word	0x0800d97c
 8000364:	20000a48 	.word	0x20000a48
 8000368:	0800d98c 	.word	0x0800d98c
 800036c:	0800d998 	.word	0x0800d998
 8000370:	0800d9a0 	.word	0x0800d9a0
 8000374:	0800d9b0 	.word	0x0800d9b0
 8000378:	0800d9bc 	.word	0x0800d9bc
 800037c:	0800d9c0 	.word	0x0800d9c0
 8000380:	0800d9c4 	.word	0x0800d9c4

08000384 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b0c6      	sub	sp, #280	; 0x118
 8000388:	af02      	add	r7, sp, #8
 800038a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800038e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800039c:	6019      	str	r1, [r3, #0]
 800039e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003a6:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003a8:	4a31      	ldr	r2, [pc, #196]	; (8000470 <sendMachineData+0xec>)
 80003aa:	4932      	ldr	r1, [pc, #200]	; (8000474 <sendMachineData+0xf0>)
 80003ac:	4832      	ldr	r0, [pc, #200]	; (8000478 <sendMachineData+0xf4>)
 80003ae:	f00c fea5 	bl	800d0fc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <sendMachineData+0xf4>)
 80003b4:	f7ff ff36 	bl	8000224 <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c4:	492c      	ldr	r1, [pc, #176]	; (8000478 <sendMachineData+0xf4>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f00c f814 	bl	800c3f4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f008 ff44 	bl	800925c <HAL_Delay>

	sprintf(local_txA,
 80003d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e8:	4924      	ldr	r1, [pc, #144]	; (800047c <sendMachineData+0xf8>)
 80003ea:	9100      	str	r1, [sp, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4923      	ldr	r1, [pc, #140]	; (8000480 <sendMachineData+0xfc>)
 80003f2:	f00c fe83 	bl	800d0fc <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80003f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff12 	bl	8000224 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <sendMachineData+0x100>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00c fe73 	bl	800d0fc <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f00b ffdf 	bl	800c3f4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f008 ff0f 	bl	800925c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800043e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff feee 	bl	8000224 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f00b ffcb 	bl	800c3f4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f008 fefb 	bl	800925c <HAL_Delay>
}
 8000466:	bf00      	nop
 8000468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800d9c8 	.word	0x0800d9c8
 8000474:	0800d9d8 	.word	0x0800d9d8
 8000478:	20000a48 	.word	0x20000a48
 800047c:	0800da54 	.word	0x0800da54
 8000480:	0800d9f8 	.word	0x0800d9f8
 8000484:	0800da68 	.word	0x0800da68

08000488 <checkMachineID>:

int checkMachineID(UART_HandleTypeDef *huart1, const char *machineID) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b0f4      	sub	sp, #464	; 0x1d0
 800048c:	af00      	add	r7, sp, #0
 800048e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000492:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000496:	6018      	str	r0, [r3, #0]
 8000498:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800049c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80004a0:	6019      	str	r1, [r3, #0]
	char local_txB[50];
	int len;

	char bufferRX[200];

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80004a2:	4a3c      	ldr	r2, [pc, #240]	; (8000594 <checkMachineID+0x10c>)
 80004a4:	493c      	ldr	r1, [pc, #240]	; (8000598 <checkMachineID+0x110>)
 80004a6:	483d      	ldr	r0, [pc, #244]	; (800059c <checkMachineID+0x114>)
 80004a8:	f00c fe28 	bl	800d0fc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80004ac:	483b      	ldr	r0, [pc, #236]	; (800059c <checkMachineID+0x114>)
 80004ae:	f7ff feb9 	bl	8000224 <strlen>
 80004b2:	4603      	mov	r3, r0
 80004b4:	b29a      	uxth	r2, r3
 80004b6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80004ba:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80004be:	4937      	ldr	r1, [pc, #220]	; (800059c <checkMachineID+0x114>)
 80004c0:	6818      	ldr	r0, [r3, #0]
 80004c2:	f00b ff97 	bl	800c3f4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80004c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004ca:	f008 fec7 	bl	800925c <HAL_Delay>

	sprintf(local_txA,
 80004ce:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80004d2:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 80004d6:	f507 7082 	add.w	r0, r7, #260	; 0x104
 80004da:	4b31      	ldr	r3, [pc, #196]	; (80005a0 <checkMachineID+0x118>)
 80004dc:	6812      	ldr	r2, [r2, #0]
 80004de:	4931      	ldr	r1, [pc, #196]	; (80005a4 <checkMachineID+0x11c>)
 80004e0:	f00c fe0c 	bl	800d0fc <siprintf>
			"GET /api/machine/checkMachineID?machineID=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, Server2);
	len = strlen(local_txA);
 80004e4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff fe9b 	bl	8000224 <strlen>
 80004ee:	4603      	mov	r3, r0
 80004f0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80004f4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80004f8:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80004fc:	492a      	ldr	r1, [pc, #168]	; (80005a8 <checkMachineID+0x120>)
 80004fe:	4618      	mov	r0, r3
 8000500:	f00c fdfc 	bl	800d0fc <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000504:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff fe8b 	bl	8000224 <strlen>
 800050e:	4603      	mov	r3, r0
 8000510:	b29a      	uxth	r2, r3
 8000512:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000516:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800051a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800051e:	6818      	ldr	r0, [r3, #0]
 8000520:	f00b ff68 	bl	800c3f4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000524:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000528:	f008 fe98 	bl	800925c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800052c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fe77 	bl	8000224 <strlen>
 8000536:	4603      	mov	r3, r0
 8000538:	b29a      	uxth	r2, r3
 800053a:	f507 7182 	add.w	r1, r7, #260	; 0x104
 800053e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000542:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	f00b ff54 	bl	800c3f4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800054c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000550:	f008 fe84 	bl	800925c <HAL_Delay>

	HAL_UART_Receive_IT(huart1, (uint8_t*) bufferRX, sizeof(bufferRX));
 8000554:	f107 0108 	add.w	r1, r7, #8
 8000558:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800055c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000560:	22c8      	movs	r2, #200	; 0xc8
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	f00b ff7b 	bl	800c45e <HAL_UART_Receive_IT>
	HAL_Delay(2000);
 8000568:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800056c:	f008 fe76 	bl	800925c <HAL_Delay>

	if (strstr(bufferRX, "HTTP/1.1 200 OK") != NULL) {
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	490d      	ldr	r1, [pc, #52]	; (80005ac <checkMachineID+0x124>)
 8000576:	4618      	mov	r0, r3
 8000578:	f00c fdf7 	bl	800d16a <strstr>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <checkMachineID+0xfe>
	    return 1; // Yanıt başarılı
 8000582:	2301      	movs	r3, #1
 8000584:	e000      	b.n	8000588 <checkMachineID+0x100>
	} else {
	    return 0; // Yanıt başarısız
 8000586:	2300      	movs	r3, #0
	}
}
 8000588:	4618      	mov	r0, r3
 800058a:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	0800d9c8 	.word	0x0800d9c8
 8000598:	0800d9d8 	.word	0x0800d9d8
 800059c:	20000a48 	.word	0x20000a48
 80005a0:	0800da54 	.word	0x0800da54
 80005a4:	0800da78 	.word	0x0800da78
 80005a8:	0800da68 	.word	0x0800da68
 80005ac:	0800dabc 	.word	0x0800dabc

080005b0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f023 030f 	bic.w	r3, r3, #15
 80005c0:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	011b      	lsls	r3, r3, #4
 80005c6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005c8:	7b7b      	ldrb	r3, [r7, #13]
 80005ca:	f043 030c 	orr.w	r3, r3, #12
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80005d2:	7b7b      	ldrb	r3, [r7, #13]
 80005d4:	f043 0308 	orr.w	r3, r3, #8
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005dc:	7b3b      	ldrb	r3, [r7, #12]
 80005de:	f043 030c 	orr.w	r3, r3, #12
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005e6:	7b3b      	ldrb	r3, [r7, #12]
 80005e8:	f043 0308 	orr.w	r3, r3, #8
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005f0:	bf00      	nop
 80005f2:	4825      	ldr	r0, [pc, #148]	; (8000688 <lcd_send_cmd+0xd8>)
 80005f4:	f00a fa2b 	bl	800aa4e <HAL_I2C_GetError>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	d0f9      	beq.n	80005f2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005fe:	bf00      	nop
 8000600:	4821      	ldr	r0, [pc, #132]	; (8000688 <lcd_send_cmd+0xd8>)
 8000602:	f00a fa17 	bl	800aa34 <HAL_I2C_GetState>
 8000606:	4603      	mov	r3, r0
 8000608:	2b20      	cmp	r3, #32
 800060a:	d1f9      	bne.n	8000600 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <lcd_send_cmd+0xdc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d116      	bne.n	8000642 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000614:	2300      	movs	r3, #0
 8000616:	73fb      	strb	r3, [r7, #15]
 8000618:	e00f      	b.n	800063a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	3310      	adds	r3, #16
 800061e:	443b      	add	r3, r7
 8000620:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	f022 0208 	bic.w	r2, r2, #8
 800062a:	b2d2      	uxtb	r2, r2
 800062c:	3310      	adds	r3, #16
 800062e:	443b      	add	r3, r7
 8000630:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	3301      	adds	r3, #1
 8000638:	73fb      	strb	r3, [r7, #15]
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	2b03      	cmp	r3, #3
 800063e:	d9ec      	bls.n	800061a <lcd_send_cmd+0x6a>
 8000640:	e015      	b.n	800066e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8000642:	2300      	movs	r3, #0
 8000644:	73bb      	strb	r3, [r7, #14]
 8000646:	e00f      	b.n	8000668 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000648:	7bbb      	ldrb	r3, [r7, #14]
 800064a:	3310      	adds	r3, #16
 800064c:	443b      	add	r3, r7
 800064e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	f042 0208 	orr.w	r2, r2, #8
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	3310      	adds	r3, #16
 800065c:	443b      	add	r3, r7
 800065e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	3301      	adds	r3, #1
 8000666:	73bb      	strb	r3, [r7, #14]
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	2b03      	cmp	r3, #3
 800066c:	d9ec      	bls.n	8000648 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800066e:	f107 0208 	add.w	r2, r7, #8
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2304      	movs	r3, #4
 8000678:	214e      	movs	r1, #78	; 0x4e
 800067a:	4803      	ldr	r0, [pc, #12]	; (8000688 <lcd_send_cmd+0xd8>)
 800067c:	f009 fd7a 	bl	800a174 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000e14 	.word	0x20000e14
 800068c:	20000b42 	.word	0x20000b42

08000690 <lcd_send_data>:

void lcd_send_data (char data) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af02      	add	r7, sp, #8
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f023 030f 	bic.w	r3, r3, #15
 80006a0:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	011b      	lsls	r3, r3, #4
 80006a6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80006a8:	7b7b      	ldrb	r3, [r7, #13]
 80006aa:	f043 030d 	orr.w	r3, r3, #13
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80006b2:	7b7b      	ldrb	r3, [r7, #13]
 80006b4:	f043 0309 	orr.w	r3, r3, #9
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80006bc:	7b3b      	ldrb	r3, [r7, #12]
 80006be:	f043 030d 	orr.w	r3, r3, #13
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80006c6:	7b3b      	ldrb	r3, [r7, #12]
 80006c8:	f043 0309 	orr.w	r3, r3, #9
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006d0:	bf00      	nop
 80006d2:	4825      	ldr	r0, [pc, #148]	; (8000768 <lcd_send_data+0xd8>)
 80006d4:	f00a f9bb 	bl	800aa4e <HAL_I2C_GetError>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b04      	cmp	r3, #4
 80006dc:	d0f9      	beq.n	80006d2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006de:	bf00      	nop
 80006e0:	4821      	ldr	r0, [pc, #132]	; (8000768 <lcd_send_data+0xd8>)
 80006e2:	f00a f9a7 	bl	800aa34 <HAL_I2C_GetState>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b20      	cmp	r3, #32
 80006ea:	d1f9      	bne.n	80006e0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <lcd_send_data+0xdc>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d116      	bne.n	8000722 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e00f      	b.n	800071a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	3310      	adds	r3, #16
 80006fe:	443b      	add	r3, r7
 8000700:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	f022 0208 	bic.w	r2, r2, #8
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	3310      	adds	r3, #16
 800070e:	443b      	add	r3, r7
 8000710:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	3301      	adds	r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d9ec      	bls.n	80006fa <lcd_send_data+0x6a>
 8000720:	e015      	b.n	800074e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8000722:	2300      	movs	r3, #0
 8000724:	73bb      	strb	r3, [r7, #14]
 8000726:	e00f      	b.n	8000748 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000728:	7bbb      	ldrb	r3, [r7, #14]
 800072a:	3310      	adds	r3, #16
 800072c:	443b      	add	r3, r7
 800072e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000732:	7bbb      	ldrb	r3, [r7, #14]
 8000734:	f042 0208 	orr.w	r2, r2, #8
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	3310      	adds	r3, #16
 800073c:	443b      	add	r3, r7
 800073e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	3301      	adds	r3, #1
 8000746:	73bb      	strb	r3, [r7, #14]
 8000748:	7bbb      	ldrb	r3, [r7, #14]
 800074a:	2b03      	cmp	r3, #3
 800074c:	d9ec      	bls.n	8000728 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800074e:	f107 0208 	add.w	r2, r7, #8
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2304      	movs	r3, #4
 8000758:	214e      	movs	r1, #78	; 0x4e
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <lcd_send_data+0xd8>)
 800075c:	f009 fd0a 	bl	800a174 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000e14 	.word	0x20000e14
 800076c:	20000b42 	.word	0x20000b42

08000770 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000778:	e006      	b.n	8000788 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff84 	bl	8000690 <lcd_send_data>
	while (*str) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1f4      	bne.n	800077a <lcd_send_string+0xa>
	}
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <lcd_send_char>:

void lcd_send_char(char ch) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af02      	add	r7, sp, #8
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	f023 030f 	bic.w	r3, r3, #15
 80007ac:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	011b      	lsls	r3, r3, #4
 80007b2:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80007b4:	7b7b      	ldrb	r3, [r7, #13]
 80007b6:	f043 030d 	orr.w	r3, r3, #13
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 80007be:	7b7b      	ldrb	r3, [r7, #13]
 80007c0:	f043 0309 	orr.w	r3, r3, #9
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80007c8:	7b3b      	ldrb	r3, [r7, #12]
 80007ca:	f043 030d 	orr.w	r3, r3, #13
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80007d2:	7b3b      	ldrb	r3, [r7, #12]
 80007d4:	f043 0309 	orr.w	r3, r3, #9
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80007dc:	bf00      	nop
 80007de:	4825      	ldr	r0, [pc, #148]	; (8000874 <lcd_send_char+0xd8>)
 80007e0:	f00a f935 	bl	800aa4e <HAL_I2C_GetError>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d0f9      	beq.n	80007de <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80007ea:	bf00      	nop
 80007ec:	4821      	ldr	r0, [pc, #132]	; (8000874 <lcd_send_char+0xd8>)
 80007ee:	f00a f921 	bl	800aa34 <HAL_I2C_GetState>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b20      	cmp	r3, #32
 80007f6:	d1f9      	bne.n	80007ec <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <lcd_send_char+0xdc>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d116      	bne.n	800082e <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]
 8000804:	e00f      	b.n	8000826 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	3310      	adds	r3, #16
 800080a:	443b      	add	r3, r7
 800080c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f022 0208 	bic.w	r2, r2, #8
 8000816:	b2d2      	uxtb	r2, r2
 8000818:	3310      	adds	r3, #16
 800081a:	443b      	add	r3, r7
 800081c:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	3301      	adds	r3, #1
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	2b03      	cmp	r3, #3
 800082a:	d9ec      	bls.n	8000806 <lcd_send_char+0x6a>
 800082c:	e015      	b.n	800085a <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 800082e:	2300      	movs	r3, #0
 8000830:	73bb      	strb	r3, [r7, #14]
 8000832:	e00f      	b.n	8000854 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	3310      	adds	r3, #16
 8000838:	443b      	add	r3, r7
 800083a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800083e:	7bbb      	ldrb	r3, [r7, #14]
 8000840:	f042 0208 	orr.w	r2, r2, #8
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	3310      	adds	r3, #16
 8000848:	443b      	add	r3, r7
 800084a:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	3301      	adds	r3, #1
 8000852:	73bb      	strb	r3, [r7, #14]
 8000854:	7bbb      	ldrb	r3, [r7, #14]
 8000856:	2b03      	cmp	r3, #3
 8000858:	d9ec      	bls.n	8000834 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 800085a:	f107 0208 	add.w	r2, r7, #8
 800085e:	2364      	movs	r3, #100	; 0x64
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2304      	movs	r3, #4
 8000864:	214e      	movs	r1, #78	; 0x4e
 8000866:	4803      	ldr	r0, [pc, #12]	; (8000874 <lcd_send_char+0xd8>)
 8000868:	f009 fc84 	bl	800a174 <HAL_I2C_Master_Transmit>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000e14 	.word	0x20000e14
 8000878:	20000b42 	.word	0x20000b42

0800087c <lcd_init>:

void lcd_init (void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff fe95 	bl	80005b0 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8000886:	2028      	movs	r0, #40	; 0x28
 8000888:	f7ff fe92 	bl	80005b0 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800088c:	200c      	movs	r0, #12
 800088e:	f7ff fe8f 	bl	80005b0 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000892:	2080      	movs	r0, #128	; 0x80
 8000894:	f7ff fe8c 	bl	80005b0 <lcd_send_cmd>
	lcd_backlight(1);
 8000898:	2001      	movs	r0, #1
 800089a:	f000 f86d 	bl	8000978 <lcd_backlight>
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	460a      	mov	r2, r1
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	4613      	mov	r3, r2
 80008b0:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d106      	bne.n	80008c6 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	337f      	adds	r3, #127	; 0x7f
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fe76 	bl	80005b0 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80008c4:	e008      	b.n	80008d8 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d105      	bne.n	80008d8 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80008cc:	79bb      	ldrb	r3, [r7, #6]
 80008ce:	3b41      	subs	r3, #65	; 0x41
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fe6c 	bl	80005b0 <lcd_send_cmd>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	603a      	str	r2, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	460b      	mov	r3, r1
 80008ee:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80008f0:	79ba      	ldrb	r2, [r7, #6]
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ffd3 	bl	80008a2 <lcd_gotoxy>
	lcd_send_string(str);
 80008fc:	6838      	ldr	r0, [r7, #0]
 80008fe:	f7ff ff37 	bl	8000770 <lcd_send_string>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
 8000914:	460b      	mov	r3, r1
 8000916:	71bb      	strb	r3, [r7, #6]
 8000918:	4613      	mov	r3, r2
 800091a:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 800091c:	79ba      	ldrb	r2, [r7, #6]
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ffbd 	bl	80008a2 <lcd_gotoxy>
    lcd_send_char(ch);
 8000928:	797b      	ldrb	r3, [r7, #5]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff36 	bl	800079c <lcd_send_char>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <lcd_clear>:

void lcd_clear(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fe37 	bl	80005b0 <lcd_send_cmd>
    HAL_Delay(2);
 8000942:	2002      	movs	r0, #2
 8000944:	f008 fc8a 	bl	800925c <HAL_Delay>

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <lcd_delete_char>:

void lcd_delete_char(unsigned char row, unsigned char column) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	460a      	mov	r2, r1
 8000956:	71fb      	strb	r3, [r7, #7]
 8000958:	4613      	mov	r3, r2
 800095a:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 800095c:	79ba      	ldrb	r2, [r7, #6]
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff9d 	bl	80008a2 <lcd_gotoxy>

    lcd_send_char(' ');
 8000968:	2020      	movs	r0, #32
 800096a:	f7ff ff17 	bl	800079c <lcd_send_char>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <lcd_backlight+0x20>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fe11 	bl	80005b0 <lcd_send_cmd>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000b42 	.word	0x20000b42

0800099c <lcd_cursor>:

void lcd_cursor(int state) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d106      	bne.n	80009b8 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80009aa:	200e      	movs	r0, #14
 80009ac:	f7ff fe00 	bl	80005b0 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80009b0:	200f      	movs	r0, #15
 80009b2:	f7ff fdfd 	bl	80005b0 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80009b6:	e002      	b.n	80009be <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80009b8:	200c      	movs	r0, #12
 80009ba:	f7ff fdf9 	bl	80005b0 <lcd_send_cmd>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009cc:	f3bf 8f4f 	dsb	sy
}
 80009d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <__NVIC_SystemReset+0x24>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80009da:	4904      	ldr	r1, [pc, #16]	; (80009ec <__NVIC_SystemReset+0x24>)
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <__NVIC_SystemReset+0x28>)
 80009de:	4313      	orrs	r3, r2
 80009e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80009e2:	f3bf 8f4f 	dsb	sy
}
 80009e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <__NVIC_SystemReset+0x20>
 80009ec:	e000ed00 	.word	0xe000ed00
 80009f0:	05fa0004 	.word	0x05fa0004

080009f4 <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff fc11 	bl	8000224 <strlen>
 8000a02:	4603      	mov	r3, r0
 8000a04:	3301      	adds	r3, #1
 8000a06:	4618      	mov	r0, r3
 8000a08:	f00c fa82 	bl	800cf10 <malloc>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d003      	beq.n	8000a1e <copyText+0x2a>
        strcpy(result, text);
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f00c fbf9 	bl	800d210 <strcpy>
    }
    return result;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000a32:	20c8      	movs	r0, #200	; 0xc8
 8000a34:	f008 fc12 	bl	800925c <HAL_Delay>
	lcd_clear();
 8000a38:	f7ff ff7e 	bl	8000938 <lcd_clear>
	if(type == 1 && page == 0) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d143      	bne.n	8000aca <printTemplate+0xa2>
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d140      	bne.n	8000aca <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000a48:	4a9d      	ldr	r2, [pc, #628]	; (8000cc0 <printTemplate+0x298>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff ff47 	bl	80008e0 <lcd_print>
		lcd_print(2, 3, "0");
 8000a52:	4a9c      	ldr	r2, [pc, #624]	; (8000cc4 <printTemplate+0x29c>)
 8000a54:	2103      	movs	r1, #3
 8000a56:	2002      	movs	r0, #2
 8000a58:	f7ff ff42 	bl	80008e0 <lcd_print>
		lcd_print(2, 4, "1");
 8000a5c:	4a9a      	ldr	r2, [pc, #616]	; (8000cc8 <printTemplate+0x2a0>)
 8000a5e:	2104      	movs	r1, #4
 8000a60:	2002      	movs	r0, #2
 8000a62:	f7ff ff3d 	bl	80008e0 <lcd_print>
		lcd_print(2, 5, "2");
 8000a66:	4a99      	ldr	r2, [pc, #612]	; (8000ccc <printTemplate+0x2a4>)
 8000a68:	2105      	movs	r1, #5
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f7ff ff38 	bl	80008e0 <lcd_print>
		lcd_print(2, 6, "3");
 8000a70:	4a97      	ldr	r2, [pc, #604]	; (8000cd0 <printTemplate+0x2a8>)
 8000a72:	2106      	movs	r1, #6
 8000a74:	2002      	movs	r0, #2
 8000a76:	f7ff ff33 	bl	80008e0 <lcd_print>
		lcd_print(2, 7, "4");
 8000a7a:	4a96      	ldr	r2, [pc, #600]	; (8000cd4 <printTemplate+0x2ac>)
 8000a7c:	2107      	movs	r1, #7
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f7ff ff2e 	bl	80008e0 <lcd_print>
		lcd_print(2, 10, "5");
 8000a84:	4a94      	ldr	r2, [pc, #592]	; (8000cd8 <printTemplate+0x2b0>)
 8000a86:	210a      	movs	r1, #10
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f7ff ff29 	bl	80008e0 <lcd_print>
		lcd_print(2, 11, "6");
 8000a8e:	4a93      	ldr	r2, [pc, #588]	; (8000cdc <printTemplate+0x2b4>)
 8000a90:	210b      	movs	r1, #11
 8000a92:	2002      	movs	r0, #2
 8000a94:	f7ff ff24 	bl	80008e0 <lcd_print>
		lcd_print(2, 12, "7");
 8000a98:	4a91      	ldr	r2, [pc, #580]	; (8000ce0 <printTemplate+0x2b8>)
 8000a9a:	210c      	movs	r1, #12
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f7ff ff1f 	bl	80008e0 <lcd_print>
		lcd_print(2, 13, "8");
 8000aa2:	4a90      	ldr	r2, [pc, #576]	; (8000ce4 <printTemplate+0x2bc>)
 8000aa4:	210d      	movs	r1, #13
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f7ff ff1a 	bl	80008e0 <lcd_print>
		lcd_print(2, 14, "9");
 8000aac:	4a8e      	ldr	r2, [pc, #568]	; (8000ce8 <printTemplate+0x2c0>)
 8000aae:	210e      	movs	r1, #14
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f7ff ff15 	bl	80008e0 <lcd_print>
		lcd_print(1, 5, machineID);
 8000ab6:	4a8d      	ldr	r2, [pc, #564]	; (8000cec <printTemplate+0x2c4>)
 8000ab8:	2105      	movs	r1, #5
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff ff10 	bl	80008e0 <lcd_print>
		lcd_gotoxy(2, 3);
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f7ff feed 	bl	80008a2 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000ac8:	e0f5      	b.n	8000cb6 <printTemplate+0x28e>
	} else if(type == 2) {
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d178      	bne.n	8000bc2 <printTemplate+0x19a>
		if(page == 1) {
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d114      	bne.n	8000b00 <printTemplate+0xd8>
			lcd_clear();
 8000ad6:	f7ff ff2f 	bl	8000938 <lcd_clear>
			HAL_Delay(100);
 8000ada:	2064      	movs	r0, #100	; 0x64
 8000adc:	f008 fbbe 	bl	800925c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ae0:	4a83      	ldr	r2, [pc, #524]	; (8000cf0 <printTemplate+0x2c8>)
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fefb 	bl	80008e0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000aea:	4a82      	ldr	r2, [pc, #520]	; (8000cf4 <printTemplate+0x2cc>)
 8000aec:	2107      	movs	r1, #7
 8000aee:	2001      	movs	r0, #1
 8000af0:	f7ff fef6 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000af4:	4a80      	ldr	r2, [pc, #512]	; (8000cf8 <printTemplate+0x2d0>)
 8000af6:	2101      	movs	r1, #1
 8000af8:	2002      	movs	r0, #2
 8000afa:	f7ff fef1 	bl	80008e0 <lcd_print>
}
 8000afe:	e0da      	b.n	8000cb6 <printTemplate+0x28e>
		} else if(page == 2) {
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d114      	bne.n	8000b30 <printTemplate+0x108>
			lcd_clear();
 8000b06:	f7ff ff17 	bl	8000938 <lcd_clear>
			HAL_Delay(100);
 8000b0a:	2064      	movs	r0, #100	; 0x64
 8000b0c:	f008 fba6 	bl	800925c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000b10:	4a77      	ldr	r2, [pc, #476]	; (8000cf0 <printTemplate+0x2c8>)
 8000b12:	2101      	movs	r1, #1
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff fee3 	bl	80008e0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000b1a:	4a76      	ldr	r2, [pc, #472]	; (8000cf4 <printTemplate+0x2cc>)
 8000b1c:	2107      	movs	r1, #7
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff fede 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000b24:	4a75      	ldr	r2, [pc, #468]	; (8000cfc <printTemplate+0x2d4>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f7ff fed9 	bl	80008e0 <lcd_print>
}
 8000b2e:	e0c2      	b.n	8000cb6 <printTemplate+0x28e>
		} else if(page == 3) {
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d114      	bne.n	8000b60 <printTemplate+0x138>
			lcd_clear();
 8000b36:	f7ff feff 	bl	8000938 <lcd_clear>
			HAL_Delay(100);
 8000b3a:	2064      	movs	r0, #100	; 0x64
 8000b3c:	f008 fb8e 	bl	800925c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000b40:	4a6b      	ldr	r2, [pc, #428]	; (8000cf0 <printTemplate+0x2c8>)
 8000b42:	2101      	movs	r1, #1
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff fecb 	bl	80008e0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000b4a:	4a6a      	ldr	r2, [pc, #424]	; (8000cf4 <printTemplate+0x2cc>)
 8000b4c:	2107      	movs	r1, #7
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f7ff fec6 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000b54:	4a6a      	ldr	r2, [pc, #424]	; (8000d00 <printTemplate+0x2d8>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f7ff fec1 	bl	80008e0 <lcd_print>
}
 8000b5e:	e0aa      	b.n	8000cb6 <printTemplate+0x28e>
		} else if(page == 4) {
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	d114      	bne.n	8000b90 <printTemplate+0x168>
			lcd_clear();
 8000b66:	f7ff fee7 	bl	8000938 <lcd_clear>
			HAL_Delay(100);
 8000b6a:	2064      	movs	r0, #100	; 0x64
 8000b6c:	f008 fb76 	bl	800925c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000b70:	4a5f      	ldr	r2, [pc, #380]	; (8000cf0 <printTemplate+0x2c8>)
 8000b72:	2101      	movs	r1, #1
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff feb3 	bl	80008e0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000b7a:	4a5e      	ldr	r2, [pc, #376]	; (8000cf4 <printTemplate+0x2cc>)
 8000b7c:	2107      	movs	r1, #7
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff feae 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000b84:	4a5f      	ldr	r2, [pc, #380]	; (8000d04 <printTemplate+0x2dc>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fea9 	bl	80008e0 <lcd_print>
}
 8000b8e:	e092      	b.n	8000cb6 <printTemplate+0x28e>
		} else if(page == 5) {
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2b05      	cmp	r3, #5
 8000b94:	f040 808f 	bne.w	8000cb6 <printTemplate+0x28e>
			lcd_clear();
 8000b98:	f7ff fece 	bl	8000938 <lcd_clear>
			HAL_Delay(100);
 8000b9c:	2064      	movs	r0, #100	; 0x64
 8000b9e:	f008 fb5d 	bl	800925c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ba2:	4a53      	ldr	r2, [pc, #332]	; (8000cf0 <printTemplate+0x2c8>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff fe9a 	bl	80008e0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000bac:	4a51      	ldr	r2, [pc, #324]	; (8000cf4 <printTemplate+0x2cc>)
 8000bae:	2107      	movs	r1, #7
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f7ff fe95 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000bb6:	4a54      	ldr	r2, [pc, #336]	; (8000d08 <printTemplate+0x2e0>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f7ff fe90 	bl	80008e0 <lcd_print>
}
 8000bc0:	e079      	b.n	8000cb6 <printTemplate+0x28e>
	} else if(type == 3) {
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	d176      	bne.n	8000cb6 <printTemplate+0x28e>
		if(page == 1) {
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d114      	bne.n	8000bf8 <printTemplate+0x1d0>
			lcd_clear();
 8000bce:	f7ff feb3 	bl	8000938 <lcd_clear>
			HAL_Delay(100);
 8000bd2:	2064      	movs	r0, #100	; 0x64
 8000bd4:	f008 fb42 	bl	800925c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000bd8:	4a4c      	ldr	r2, [pc, #304]	; (8000d0c <printTemplate+0x2e4>)
 8000bda:	2101      	movs	r1, #1
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f7ff fe7f 	bl	80008e0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000be2:	4a4b      	ldr	r2, [pc, #300]	; (8000d10 <printTemplate+0x2e8>)
 8000be4:	2107      	movs	r1, #7
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff fe7a 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000bec:	4a42      	ldr	r2, [pc, #264]	; (8000cf8 <printTemplate+0x2d0>)
 8000bee:	2101      	movs	r1, #1
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f7ff fe75 	bl	80008e0 <lcd_print>
}
 8000bf6:	e05e      	b.n	8000cb6 <printTemplate+0x28e>
		} else if(page == 2) {
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d114      	bne.n	8000c28 <printTemplate+0x200>
			lcd_clear();
 8000bfe:	f7ff fe9b 	bl	8000938 <lcd_clear>
			HAL_Delay(100);
 8000c02:	2064      	movs	r0, #100	; 0x64
 8000c04:	f008 fb2a 	bl	800925c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000c08:	4a40      	ldr	r2, [pc, #256]	; (8000d0c <printTemplate+0x2e4>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff fe67 	bl	80008e0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000c12:	4a3f      	ldr	r2, [pc, #252]	; (8000d10 <printTemplate+0x2e8>)
 8000c14:	2107      	movs	r1, #7
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff fe62 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000c1c:	4a37      	ldr	r2, [pc, #220]	; (8000cfc <printTemplate+0x2d4>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	2002      	movs	r0, #2
 8000c22:	f7ff fe5d 	bl	80008e0 <lcd_print>
}
 8000c26:	e046      	b.n	8000cb6 <printTemplate+0x28e>
		} else if(page == 3) {
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d114      	bne.n	8000c58 <printTemplate+0x230>
			lcd_clear();
 8000c2e:	f7ff fe83 	bl	8000938 <lcd_clear>
			HAL_Delay(100);
 8000c32:	2064      	movs	r0, #100	; 0x64
 8000c34:	f008 fb12 	bl	800925c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000c38:	4a34      	ldr	r2, [pc, #208]	; (8000d0c <printTemplate+0x2e4>)
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff fe4f 	bl	80008e0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000c42:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <printTemplate+0x2e8>)
 8000c44:	2107      	movs	r1, #7
 8000c46:	2001      	movs	r0, #1
 8000c48:	f7ff fe4a 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000c4c:	4a2c      	ldr	r2, [pc, #176]	; (8000d00 <printTemplate+0x2d8>)
 8000c4e:	2101      	movs	r1, #1
 8000c50:	2002      	movs	r0, #2
 8000c52:	f7ff fe45 	bl	80008e0 <lcd_print>
}
 8000c56:	e02e      	b.n	8000cb6 <printTemplate+0x28e>
		} else if(page == 4) {
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d114      	bne.n	8000c88 <printTemplate+0x260>
			lcd_clear();
 8000c5e:	f7ff fe6b 	bl	8000938 <lcd_clear>
			HAL_Delay(100);
 8000c62:	2064      	movs	r0, #100	; 0x64
 8000c64:	f008 fafa 	bl	800925c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000c68:	4a28      	ldr	r2, [pc, #160]	; (8000d0c <printTemplate+0x2e4>)
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff fe37 	bl	80008e0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000c72:	4a27      	ldr	r2, [pc, #156]	; (8000d10 <printTemplate+0x2e8>)
 8000c74:	2107      	movs	r1, #7
 8000c76:	2001      	movs	r0, #1
 8000c78:	f7ff fe32 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000c7c:	4a21      	ldr	r2, [pc, #132]	; (8000d04 <printTemplate+0x2dc>)
 8000c7e:	2101      	movs	r1, #1
 8000c80:	2002      	movs	r0, #2
 8000c82:	f7ff fe2d 	bl	80008e0 <lcd_print>
}
 8000c86:	e016      	b.n	8000cb6 <printTemplate+0x28e>
		} else if(page == 5) {
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2b05      	cmp	r3, #5
 8000c8c:	d113      	bne.n	8000cb6 <printTemplate+0x28e>
			lcd_clear();
 8000c8e:	f7ff fe53 	bl	8000938 <lcd_clear>
			HAL_Delay(100);
 8000c92:	2064      	movs	r0, #100	; 0x64
 8000c94:	f008 fae2 	bl	800925c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000c98:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <printTemplate+0x2e4>)
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff fe1f 	bl	80008e0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <printTemplate+0x2e8>)
 8000ca4:	2107      	movs	r1, #7
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f7ff fe1a 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000cac:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <printTemplate+0x2e0>)
 8000cae:	2101      	movs	r1, #1
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	f7ff fe15 	bl	80008e0 <lcd_print>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	0800dacc 	.word	0x0800dacc
 8000cc4:	0800dad4 	.word	0x0800dad4
 8000cc8:	0800dad8 	.word	0x0800dad8
 8000ccc:	0800dadc 	.word	0x0800dadc
 8000cd0:	0800dae0 	.word	0x0800dae0
 8000cd4:	0800dae4 	.word	0x0800dae4
 8000cd8:	0800dae8 	.word	0x0800dae8
 8000cdc:	0800daec 	.word	0x0800daec
 8000ce0:	0800daf0 	.word	0x0800daf0
 8000ce4:	0800daf4 	.word	0x0800daf4
 8000ce8:	0800daf8 	.word	0x0800daf8
 8000cec:	20000c00 	.word	0x20000c00
 8000cf0:	0800dafc 	.word	0x0800dafc
 8000cf4:	20000c0c 	.word	0x20000c0c
 8000cf8:	0800db04 	.word	0x0800db04
 8000cfc:	0800db18 	.word	0x0800db18
 8000d00:	0800db2c 	.word	0x0800db2c
 8000d04:	0800db40 	.word	0x0800db40
 8000d08:	0800db54 	.word	0x0800db54
 8000d0c:	0800db68 	.word	0x0800db68
 8000d10:	20000c30 	.word	0x20000c30

08000d14 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    return characters[cursorPosition];
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <getCharFromCursorPosition+0x1c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	781b      	ldrb	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000960 	.word	0x20000960

08000d34 <takeMachineID>:

void takeMachineID() {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
	lcd_cursor(1);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f7ff fe2e 	bl	800099c <lcd_cursor>

    int cursorPosition = 3;
 8000d40:	2303      	movs	r3, #3
 8000d42:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000d48:	2305      	movs	r3, #5
 8000d4a:	60fb      	str	r3, [r7, #12]

    printTemplate(1, 0);
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f7ff fe6a 	bl	8000a28 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d54:	2108      	movs	r1, #8
 8000d56:	4885      	ldr	r0, [pc, #532]	; (8000f6c <takeMachineID+0x238>)
 8000d58:	f009 f850 	bl	8009dfc <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d11a      	bne.n	8000d98 <takeMachineID+0x64>
        	lcd_cursor(0);
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff fe1a 	bl	800099c <lcd_cursor>
        	int uzunluk = strlen(machineID);
 8000d68:	4881      	ldr	r0, [pc, #516]	; (8000f70 <takeMachineID+0x23c>)
 8000d6a:	f7ff fa5b 	bl	8000224 <strlen>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	607b      	str	r3, [r7, #4]

        	for(int i=0; i<uzunluk; i++) {
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	e00a      	b.n	8000d8e <takeMachineID+0x5a>
        		eepromData[60+i] = machineID[i];
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	333c      	adds	r3, #60	; 0x3c
 8000d7c:	497c      	ldr	r1, [pc, #496]	; (8000f70 <takeMachineID+0x23c>)
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	440a      	add	r2, r1
 8000d82:	7811      	ldrb	r1, [r2, #0]
 8000d84:	4a7b      	ldr	r2, [pc, #492]	; (8000f74 <takeMachineID+0x240>)
 8000d86:	54d1      	strb	r1, [r2, r3]
        	for(int i=0; i<uzunluk; i++) {
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	dbf0      	blt.n	8000d78 <takeMachineID+0x44>
        	}

            break;
 8000d96:	e0e4      	b.n	8000f62 <takeMachineID+0x22e>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4874      	ldr	r0, [pc, #464]	; (8000f6c <takeMachineID+0x238>)
 8000d9c:	f009 f82e 	bl	8009dfc <HAL_GPIO_ReadPin>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d112      	bne.n	8000dcc <takeMachineID+0x98>
        	if(cursorPosition == 7) {
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	2b07      	cmp	r3, #7
 8000daa:	d102      	bne.n	8000db2 <takeMachineID+0x7e>
        		cursorPosition = 10;
 8000dac:	230a      	movs	r3, #10
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	e008      	b.n	8000dc4 <takeMachineID+0x90>
        	} else if (cursorPosition == 14) {
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2b0e      	cmp	r3, #14
 8000db6:	d102      	bne.n	8000dbe <takeMachineID+0x8a>
                cursorPosition = 3;
 8000db8:	2303      	movs	r3, #3
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	e002      	b.n	8000dc4 <takeMachineID+0x90>
            } else {
            	cursorPosition++;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000dc4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000dc8:	f008 fa48 	bl	800925c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000dcc:	2108      	movs	r1, #8
 8000dce:	486a      	ldr	r0, [pc, #424]	; (8000f78 <takeMachineID+0x244>)
 8000dd0:	f009 f814 	bl	8009dfc <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d112      	bne.n	8000e00 <takeMachineID+0xcc>
            if (cursorPosition == 3) {
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d102      	bne.n	8000de6 <takeMachineID+0xb2>
                cursorPosition = 14;
 8000de0:	230e      	movs	r3, #14
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	e008      	b.n	8000df8 <takeMachineID+0xc4>
            } else if(cursorPosition == 10) {
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2b0a      	cmp	r3, #10
 8000dea:	d102      	bne.n	8000df2 <takeMachineID+0xbe>
            	cursorPosition = 7;
 8000dec:	2307      	movs	r3, #7
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e002      	b.n	8000df8 <takeMachineID+0xc4>
            } else {
            	cursorPosition--;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000df8:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000dfc:	f008 fa2e 	bl	800925c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000e00:	2102      	movs	r1, #2
 8000e02:	485a      	ldr	r0, [pc, #360]	; (8000f6c <takeMachineID+0x238>)
 8000e04:	f008 fffa 	bl	8009dfc <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d16c      	bne.n	8000ee8 <takeMachineID+0x1b4>
        	if(cursorPosition == 3) {
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d105      	bne.n	8000e20 <takeMachineID+0xec>
        		machineID[machineIDLoc] = '0';
 8000e14:	4a56      	ldr	r2, [pc, #344]	; (8000f70 <takeMachineID+0x23c>)
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4413      	add	r3, r2
 8000e1a:	2230      	movs	r2, #48	; 0x30
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e04f      	b.n	8000ec0 <takeMachineID+0x18c>
        	} else if(cursorPosition == 4) {
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d105      	bne.n	8000e32 <takeMachineID+0xfe>
        		machineID[machineIDLoc] = '1';
 8000e26:	4a52      	ldr	r2, [pc, #328]	; (8000f70 <takeMachineID+0x23c>)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	2231      	movs	r2, #49	; 0x31
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e046      	b.n	8000ec0 <takeMachineID+0x18c>
        	} else if(cursorPosition == 5) {
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2b05      	cmp	r3, #5
 8000e36:	d105      	bne.n	8000e44 <takeMachineID+0x110>
        		machineID[machineIDLoc] = '2';
 8000e38:	4a4d      	ldr	r2, [pc, #308]	; (8000f70 <takeMachineID+0x23c>)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	2232      	movs	r2, #50	; 0x32
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e03d      	b.n	8000ec0 <takeMachineID+0x18c>
        	} else if(cursorPosition == 6) {
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d105      	bne.n	8000e56 <takeMachineID+0x122>
        		machineID[machineIDLoc] = '3';
 8000e4a:	4a49      	ldr	r2, [pc, #292]	; (8000f70 <takeMachineID+0x23c>)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4413      	add	r3, r2
 8000e50:	2233      	movs	r2, #51	; 0x33
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e034      	b.n	8000ec0 <takeMachineID+0x18c>
        	} else if(cursorPosition == 7) {
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2b07      	cmp	r3, #7
 8000e5a:	d105      	bne.n	8000e68 <takeMachineID+0x134>
        		machineID[machineIDLoc] = '4';
 8000e5c:	4a44      	ldr	r2, [pc, #272]	; (8000f70 <takeMachineID+0x23c>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4413      	add	r3, r2
 8000e62:	2234      	movs	r2, #52	; 0x34
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	e02b      	b.n	8000ec0 <takeMachineID+0x18c>
        	} else if(cursorPosition == 10) {
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2b0a      	cmp	r3, #10
 8000e6c:	d105      	bne.n	8000e7a <takeMachineID+0x146>
        		machineID[machineIDLoc] = '5';
 8000e6e:	4a40      	ldr	r2, [pc, #256]	; (8000f70 <takeMachineID+0x23c>)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4413      	add	r3, r2
 8000e74:	2235      	movs	r2, #53	; 0x35
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	e022      	b.n	8000ec0 <takeMachineID+0x18c>
        	} else if(cursorPosition == 11) {
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2b0b      	cmp	r3, #11
 8000e7e:	d105      	bne.n	8000e8c <takeMachineID+0x158>
        		machineID[machineIDLoc] = '6';
 8000e80:	4a3b      	ldr	r2, [pc, #236]	; (8000f70 <takeMachineID+0x23c>)
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4413      	add	r3, r2
 8000e86:	2236      	movs	r2, #54	; 0x36
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	e019      	b.n	8000ec0 <takeMachineID+0x18c>
        	} else if(cursorPosition == 12) {
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b0c      	cmp	r3, #12
 8000e90:	d105      	bne.n	8000e9e <takeMachineID+0x16a>
        		machineID[machineIDLoc] = '7';
 8000e92:	4a37      	ldr	r2, [pc, #220]	; (8000f70 <takeMachineID+0x23c>)
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4413      	add	r3, r2
 8000e98:	2237      	movs	r2, #55	; 0x37
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	e010      	b.n	8000ec0 <takeMachineID+0x18c>
        	} else if(cursorPosition == 13) {
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2b0d      	cmp	r3, #13
 8000ea2:	d105      	bne.n	8000eb0 <takeMachineID+0x17c>
        		machineID[machineIDLoc] = '8';
 8000ea4:	4a32      	ldr	r2, [pc, #200]	; (8000f70 <takeMachineID+0x23c>)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	2238      	movs	r2, #56	; 0x38
 8000eac:	701a      	strb	r2, [r3, #0]
 8000eae:	e007      	b.n	8000ec0 <takeMachineID+0x18c>
        	} else if(cursorPosition == 14) {
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2b0e      	cmp	r3, #14
 8000eb4:	d104      	bne.n	8000ec0 <takeMachineID+0x18c>
        		machineID[machineIDLoc] = '9';
 8000eb6:	4a2e      	ldr	r2, [pc, #184]	; (8000f70 <takeMachineID+0x23c>)
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4413      	add	r3, r2
 8000ebc:	2239      	movs	r2, #57	; 0x39
 8000ebe:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	b2d9      	uxtb	r1, r3
 8000ec4:	4a2a      	ldr	r2, [pc, #168]	; (8000f70 <takeMachineID+0x23c>)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff fd1b 	bl	800090a <lcd_print_char>

        	writeLoc++;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	3301      	adds	r3, #1
 8000ede:	613b      	str	r3, [r7, #16]

        	HAL_Delay(350);
 8000ee0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000ee4:	f008 f9ba 	bl	800925c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000ee8:	2104      	movs	r1, #4
 8000eea:	4820      	ldr	r0, [pc, #128]	; (8000f6c <takeMachineID+0x238>)
 8000eec:	f008 ff86 	bl	8009dfc <HAL_GPIO_ReadPin>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d12e      	bne.n	8000f54 <takeMachineID+0x220>
            if(strlen(machineID) >= 1) {
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <takeMachineID+0x23c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d027      	beq.n	8000f4e <takeMachineID+0x21a>

                machineID[machineIDLoc] = '\0';
 8000efe:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <takeMachineID+0x23c>)
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4413      	add	r3, r2
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4619      	mov	r1, r3
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff fd1a 	bl	800094c <lcd_delete_char>
                HAL_Delay(50);
 8000f18:	2032      	movs	r0, #50	; 0x32
 8000f1a:	f008 f99f 	bl	800925c <HAL_Delay>

                if(writeLoc > 5) {
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b05      	cmp	r3, #5
 8000f22:	dd03      	ble.n	8000f2c <takeMachineID+0x1f8>
                	writeLoc--;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	e004      	b.n	8000f36 <takeMachineID+0x202>
                } else if(writeLoc < 5) {
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	dc01      	bgt.n	8000f36 <takeMachineID+0x202>
                	writeLoc = 5;
 8000f32:	2305      	movs	r3, #5
 8000f34:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dd03      	ble.n	8000f44 <takeMachineID+0x210>
                	machineIDLoc--;
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	e004      	b.n	8000f4e <takeMachineID+0x21a>
                } else if(machineIDLoc < 0) {
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	da01      	bge.n	8000f4e <takeMachineID+0x21a>
                	machineIDLoc = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(250);
 8000f4e:	20fa      	movs	r0, #250	; 0xfa
 8000f50:	f008 f984 	bl	800925c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4619      	mov	r1, r3
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f7ff fca1 	bl	80008a2 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000f60:	e6f8      	b.n	8000d54 <takeMachineID+0x20>
    }
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40010800 	.word	0x40010800
 8000f70:	20000c00 	.word	0x20000c00
 8000f74:	20000b44 	.word	0x20000b44
 8000f78:	40011000 	.word	0x40011000

08000f7c <takeWifiSSID>:

void takeWifiSSID() {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08e      	sub	sp, #56	; 0x38
 8000f80:	af00      	add	r7, sp, #0
    lcd_cursor(1);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff fd0a 	bl	800099c <lcd_cursor>

    int realCharPos = 1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
    cursorPosition = 1;
 8000f8c:	4b7e      	ldr	r3, [pc, #504]	; (8001188 <takeWifiSSID+0x20c>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
    page = 1;
 8000f92:	4b7e      	ldr	r3, [pc, #504]	; (800118c <takeWifiSSID+0x210>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
    int writeLoc = 7;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t realCharPosLoc[33];

    printTemplate(2, 1);
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f7ff fd40 	bl	8000a28 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4879      	ldr	r0, [pc, #484]	; (8001190 <takeWifiSSID+0x214>)
 8000fac:	f008 ff26 	bl	8009dfc <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d11c      	bne.n	8000ff0 <takeWifiSSID+0x74>
            lcd_cursor(0);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff fcf0 	bl	800099c <lcd_cursor>
            lcd_clear();
 8000fbc:	f7ff fcbc 	bl	8000938 <lcd_clear>

            int uzunluk = strlen(wifiSSID);
 8000fc0:	4874      	ldr	r0, [pc, #464]	; (8001194 <takeWifiSSID+0x218>)
 8000fc2:	f7ff f92f 	bl	8000224 <strlen>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24

            for(int i=0; i<uzunluk; i++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fce:	e00a      	b.n	8000fe6 <takeWifiSSID+0x6a>
            	eepromData[wifiSSIDEEPROMBaslangic] = realCharPosLoc[i];
 8000fd0:	4b71      	ldr	r3, [pc, #452]	; (8001198 <takeWifiSSID+0x21c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fd8:	440a      	add	r2, r1
 8000fda:	7811      	ldrb	r1, [r2, #0]
 8000fdc:	4a6f      	ldr	r2, [pc, #444]	; (800119c <takeWifiSSID+0x220>)
 8000fde:	54d1      	strb	r1, [r2, r3]
            for(int i=0; i<uzunluk; i++) {
 8000fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	429a      	cmp	r2, r3
 8000fec:	dbf0      	blt.n	8000fd0 <takeWifiSSID+0x54>
            }

            break;
 8000fee:	e14e      	b.n	800128e <takeWifiSSID+0x312>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	4867      	ldr	r0, [pc, #412]	; (8001190 <takeWifiSSID+0x214>)
 8000ff4:	f008 ff02 	bl	8009dfc <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d166      	bne.n	80010cc <takeWifiSSID+0x150>
        	realCharPos++;
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001000:	3301      	adds	r3, #1
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos > 80) {
 8001004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001006:	2b50      	cmp	r3, #80	; 0x50
 8001008:	dd01      	ble.n	800100e <takeWifiSSID+0x92>
        		realCharPos = 1;
 800100a:	2301      	movs	r3, #1
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if (cursorPosition == 16) {
 800100e:	4b5e      	ldr	r3, [pc, #376]	; (8001188 <takeWifiSSID+0x20c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b10      	cmp	r3, #16
 8001014:	d152      	bne.n	80010bc <takeWifiSSID+0x140>
            	if(page == 1) {
 8001016:	4b5d      	ldr	r3, [pc, #372]	; (800118c <takeWifiSSID+0x210>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d10c      	bne.n	8001038 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 800101e:	4b5a      	ldr	r3, [pc, #360]	; (8001188 <takeWifiSSID+0x20c>)
 8001020:	2201      	movs	r2, #1
 8001022:	601a      	str	r2, [r3, #0]
            		page++;
 8001024:	4b59      	ldr	r3, [pc, #356]	; (800118c <takeWifiSSID+0x210>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	4a58      	ldr	r2, [pc, #352]	; (800118c <takeWifiSSID+0x210>)
 800102c:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 800102e:	2102      	movs	r1, #2
 8001030:	2002      	movs	r0, #2
 8001032:	f7ff fcf9 	bl	8000a28 <printTemplate>
 8001036:	e046      	b.n	80010c6 <takeWifiSSID+0x14a>
            	} else if(page == 2) {
 8001038:	4b54      	ldr	r3, [pc, #336]	; (800118c <takeWifiSSID+0x210>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d10c      	bne.n	800105a <takeWifiSSID+0xde>
            		cursorPosition = 1;
 8001040:	4b51      	ldr	r3, [pc, #324]	; (8001188 <takeWifiSSID+0x20c>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
            		page++;
 8001046:	4b51      	ldr	r3, [pc, #324]	; (800118c <takeWifiSSID+0x210>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a4f      	ldr	r2, [pc, #316]	; (800118c <takeWifiSSID+0x210>)
 800104e:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8001050:	2103      	movs	r1, #3
 8001052:	2002      	movs	r0, #2
 8001054:	f7ff fce8 	bl	8000a28 <printTemplate>
 8001058:	e035      	b.n	80010c6 <takeWifiSSID+0x14a>
            	} else if(page == 3) {
 800105a:	4b4c      	ldr	r3, [pc, #304]	; (800118c <takeWifiSSID+0x210>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b03      	cmp	r3, #3
 8001060:	d10c      	bne.n	800107c <takeWifiSSID+0x100>
            		cursorPosition = 1;
 8001062:	4b49      	ldr	r3, [pc, #292]	; (8001188 <takeWifiSSID+0x20c>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
            		page++;
 8001068:	4b48      	ldr	r3, [pc, #288]	; (800118c <takeWifiSSID+0x210>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a47      	ldr	r2, [pc, #284]	; (800118c <takeWifiSSID+0x210>)
 8001070:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8001072:	2104      	movs	r1, #4
 8001074:	2002      	movs	r0, #2
 8001076:	f7ff fcd7 	bl	8000a28 <printTemplate>
 800107a:	e024      	b.n	80010c6 <takeWifiSSID+0x14a>
            	} else if(page == 4) {
 800107c:	4b43      	ldr	r3, [pc, #268]	; (800118c <takeWifiSSID+0x210>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b04      	cmp	r3, #4
 8001082:	d10c      	bne.n	800109e <takeWifiSSID+0x122>
            		cursorPosition = 1;
 8001084:	4b40      	ldr	r3, [pc, #256]	; (8001188 <takeWifiSSID+0x20c>)
 8001086:	2201      	movs	r2, #1
 8001088:	601a      	str	r2, [r3, #0]
            		page++;
 800108a:	4b40      	ldr	r3, [pc, #256]	; (800118c <takeWifiSSID+0x210>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a3e      	ldr	r2, [pc, #248]	; (800118c <takeWifiSSID+0x210>)
 8001092:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8001094:	2105      	movs	r1, #5
 8001096:	2002      	movs	r0, #2
 8001098:	f7ff fcc6 	bl	8000a28 <printTemplate>
 800109c:	e013      	b.n	80010c6 <takeWifiSSID+0x14a>
            	} else if(page == 5) {
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <takeWifiSSID+0x210>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	d10f      	bne.n	80010c6 <takeWifiSSID+0x14a>
            		cursorPosition = 1;
 80010a6:	4b38      	ldr	r3, [pc, #224]	; (8001188 <takeWifiSSID+0x20c>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
            		page = 1;
 80010ac:	4b37      	ldr	r3, [pc, #220]	; (800118c <takeWifiSSID+0x210>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80010b2:	2101      	movs	r1, #1
 80010b4:	2002      	movs	r0, #2
 80010b6:	f7ff fcb7 	bl	8000a28 <printTemplate>
 80010ba:	e004      	b.n	80010c6 <takeWifiSSID+0x14a>
            	}
            } else {
            	cursorPosition++;
 80010bc:	4b32      	ldr	r3, [pc, #200]	; (8001188 <takeWifiSSID+0x20c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a31      	ldr	r2, [pc, #196]	; (8001188 <takeWifiSSID+0x20c>)
 80010c4:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80010c6:	20fa      	movs	r0, #250	; 0xfa
 80010c8:	f008 f8c8 	bl	800925c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80010cc:	2108      	movs	r1, #8
 80010ce:	4834      	ldr	r0, [pc, #208]	; (80011a0 <takeWifiSSID+0x224>)
 80010d0:	f008 fe94 	bl	8009dfc <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d16c      	bne.n	80011b4 <takeWifiSSID+0x238>
        	realCharPos--;
 80010da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010dc:	3b01      	subs	r3, #1
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos < 1) {
 80010e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	dc01      	bgt.n	80010ea <takeWifiSSID+0x16e>
        		realCharPos = 80;
 80010e6:	2350      	movs	r3, #80	; 0x50
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if(cursorPosition == 1) {
 80010ea:	4b27      	ldr	r3, [pc, #156]	; (8001188 <takeWifiSSID+0x20c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d158      	bne.n	80011a4 <takeWifiSSID+0x228>
            	if(page == 1) {
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <takeWifiSSID+0x210>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d10a      	bne.n	8001110 <takeWifiSSID+0x194>
            		cursorPosition = 16;
 80010fa:	4b23      	ldr	r3, [pc, #140]	; (8001188 <takeWifiSSID+0x20c>)
 80010fc:	2210      	movs	r2, #16
 80010fe:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001100:	4b22      	ldr	r3, [pc, #136]	; (800118c <takeWifiSSID+0x210>)
 8001102:	2205      	movs	r2, #5
 8001104:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8001106:	2105      	movs	r1, #5
 8001108:	2002      	movs	r0, #2
 800110a:	f7ff fc8d 	bl	8000a28 <printTemplate>
 800110e:	e04e      	b.n	80011ae <takeWifiSSID+0x232>
            	} else if(page == 2) {
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <takeWifiSSID+0x210>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d10a      	bne.n	800112e <takeWifiSSID+0x1b2>
            		cursorPosition = 16;
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <takeWifiSSID+0x20c>)
 800111a:	2210      	movs	r2, #16
 800111c:	601a      	str	r2, [r3, #0]
            		page = 1;
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <takeWifiSSID+0x210>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8001124:	2101      	movs	r1, #1
 8001126:	2002      	movs	r0, #2
 8001128:	f7ff fc7e 	bl	8000a28 <printTemplate>
 800112c:	e03f      	b.n	80011ae <takeWifiSSID+0x232>
            	} else if(page == 3) {
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <takeWifiSSID+0x210>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d10a      	bne.n	800114c <takeWifiSSID+0x1d0>
            		cursorPosition = 16;
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <takeWifiSSID+0x20c>)
 8001138:	2210      	movs	r2, #16
 800113a:	601a      	str	r2, [r3, #0]
            		page = 2;
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <takeWifiSSID+0x210>)
 800113e:	2202      	movs	r2, #2
 8001140:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8001142:	2102      	movs	r1, #2
 8001144:	2002      	movs	r0, #2
 8001146:	f7ff fc6f 	bl	8000a28 <printTemplate>
 800114a:	e030      	b.n	80011ae <takeWifiSSID+0x232>
            	} else if(page == 4) {
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <takeWifiSSID+0x210>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b04      	cmp	r3, #4
 8001152:	d10a      	bne.n	800116a <takeWifiSSID+0x1ee>
            		cursorPosition = 16;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <takeWifiSSID+0x20c>)
 8001156:	2210      	movs	r2, #16
 8001158:	601a      	str	r2, [r3, #0]
            		page = 3;
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <takeWifiSSID+0x210>)
 800115c:	2203      	movs	r2, #3
 800115e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8001160:	2103      	movs	r1, #3
 8001162:	2002      	movs	r0, #2
 8001164:	f7ff fc60 	bl	8000a28 <printTemplate>
 8001168:	e021      	b.n	80011ae <takeWifiSSID+0x232>
            	} else if(page == 5) {
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <takeWifiSSID+0x210>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b05      	cmp	r3, #5
 8001170:	d11d      	bne.n	80011ae <takeWifiSSID+0x232>
            		cursorPosition = 16;
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <takeWifiSSID+0x20c>)
 8001174:	2210      	movs	r2, #16
 8001176:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <takeWifiSSID+0x210>)
 800117a:	2204      	movs	r2, #4
 800117c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 800117e:	2104      	movs	r1, #4
 8001180:	2002      	movs	r0, #2
 8001182:	f7ff fc51 	bl	8000a28 <printTemplate>
 8001186:	e012      	b.n	80011ae <takeWifiSSID+0x232>
 8001188:	20000944 	.word	0x20000944
 800118c:	20000948 	.word	0x20000948
 8001190:	40010800 	.word	0x40010800
 8001194:	20000c0c 	.word	0x20000c0c
 8001198:	200009c4 	.word	0x200009c4
 800119c:	20000b44 	.word	0x20000b44
 80011a0:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80011a4:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <takeWifiSSID+0x31c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	4a3b      	ldr	r2, [pc, #236]	; (8001298 <takeWifiSSID+0x31c>)
 80011ac:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80011ae:	20fa      	movs	r0, #250	; 0xfa
 80011b0:	f008 f854 	bl	800925c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80011b4:	2102      	movs	r1, #2
 80011b6:	4839      	ldr	r0, [pc, #228]	; (800129c <takeWifiSSID+0x320>)
 80011b8:	f008 fe20 	bl	8009dfc <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d127      	bne.n	8001212 <takeWifiSSID+0x296>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 80011c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fda4 	bl	8000d14 <getCharFromCursorPosition>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4619      	mov	r1, r3
 80011d0:	4a33      	ldr	r2, [pc, #204]	; (80012a0 <takeWifiSSID+0x324>)
 80011d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d4:	4413      	add	r3, r2
 80011d6:	460a      	mov	r2, r1
 80011d8:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 80011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011dc:	b2d9      	uxtb	r1, r3
 80011de:	4a30      	ldr	r2, [pc, #192]	; (80012a0 <takeWifiSSID+0x324>)
 80011e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e2:	4413      	add	r3, r2
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff fb8e 	bl	800090a <lcd_print_char>

            realCharPosLoc[wifiNameLoc] = realCharPos-1;
 80011ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	3b01      	subs	r3, #1
 80011f4:	b2d9      	uxtb	r1, r3
 80011f6:	463a      	mov	r2, r7
 80011f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fa:	4413      	add	r3, r2
 80011fc:	460a      	mov	r2, r1
 80011fe:	701a      	strb	r2, [r3, #0]

            writeLoc++;
 8001200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001202:	3301      	adds	r3, #1
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
            wifiNameLoc++;
 8001206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001208:	3301      	adds	r3, #1
 800120a:	633b      	str	r3, [r7, #48]	; 0x30

            HAL_Delay(250);
 800120c:	20fa      	movs	r0, #250	; 0xfa
 800120e:	f008 f825 	bl	800925c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001212:	2104      	movs	r1, #4
 8001214:	4821      	ldr	r0, [pc, #132]	; (800129c <takeWifiSSID+0x320>)
 8001216:	f008 fdf1 	bl	8009dfc <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d12e      	bne.n	800127e <takeWifiSSID+0x302>
        	if(strlen(wifiSSID) >= 1) {
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <takeWifiSSID+0x324>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d027      	beq.n	8001278 <takeWifiSSID+0x2fc>
        		wifiSSID[wifiNameLoc] = '\0';
 8001228:	4a1d      	ldr	r2, [pc, #116]	; (80012a0 <takeWifiSSID+0x324>)
 800122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122c:	4413      	add	r3, r2
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8001232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001234:	b2db      	uxtb	r3, r3
 8001236:	3306      	adds	r3, #6
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4619      	mov	r1, r3
 800123c:	2001      	movs	r0, #1
 800123e:	f7ff fb85 	bl	800094c <lcd_delete_char>
        		HAL_Delay(50);
 8001242:	2032      	movs	r0, #50	; 0x32
 8001244:	f008 f80a 	bl	800925c <HAL_Delay>
        		if(writeLoc > 7) {
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	2b07      	cmp	r3, #7
 800124c:	dd03      	ble.n	8001256 <takeWifiSSID+0x2da>
        			writeLoc--;
 800124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001250:	3b01      	subs	r3, #1
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001254:	e004      	b.n	8001260 <takeWifiSSID+0x2e4>
        		} else if(writeLoc < 7) {
 8001256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001258:	2b06      	cmp	r3, #6
 800125a:	dc01      	bgt.n	8001260 <takeWifiSSID+0x2e4>
        			writeLoc = 7;
 800125c:	2307      	movs	r3, #7
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
        		}

        		if(wifiNameLoc > 0) {
 8001260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001262:	2b00      	cmp	r3, #0
 8001264:	dd03      	ble.n	800126e <takeWifiSSID+0x2f2>
        			wifiNameLoc--;
 8001266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001268:	3b01      	subs	r3, #1
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
 800126c:	e004      	b.n	8001278 <takeWifiSSID+0x2fc>
        		} else if(wifiNameLoc < 0) {
 800126e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001270:	2b00      	cmp	r3, #0
 8001272:	da01      	bge.n	8001278 <takeWifiSSID+0x2fc>
        			wifiNameLoc = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
        		}
        	}

        	HAL_Delay(250);
 8001278:	20fa      	movs	r0, #250	; 0xfa
 800127a:	f007 ffef 	bl	800925c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <takeWifiSSID+0x31c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	4619      	mov	r1, r3
 8001286:	2002      	movs	r0, #2
 8001288:	f7ff fb0b 	bl	80008a2 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800128c:	e68c      	b.n	8000fa8 <takeWifiSSID+0x2c>
    }
}
 800128e:	bf00      	nop
 8001290:	3738      	adds	r7, #56	; 0x38
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000944 	.word	0x20000944
 800129c:	40010800 	.word	0x40010800
 80012a0:	20000c0c 	.word	0x20000c0c

080012a4 <takeWifiPass>:

void takeWifiPass() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	; 0x38
 80012a8:	af00      	add	r7, sp, #0
    lcd_cursor(1);
 80012aa:	2001      	movs	r0, #1
 80012ac:	f7ff fb76 	bl	800099c <lcd_cursor>

    int realCharPos = 1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
    cursorPosition = 1;
 80012b4:	4b7d      	ldr	r3, [pc, #500]	; (80014ac <takeWifiPass+0x208>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	601a      	str	r2, [r3, #0]
    page = 1;
 80012ba:	4b7d      	ldr	r3, [pc, #500]	; (80014b0 <takeWifiPass+0x20c>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
    int writeLoc = 7;
 80012c4:	2307      	movs	r3, #7
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t realCharPosLoc[33];

    printTemplate(3, 1);
 80012c8:	2101      	movs	r1, #1
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff fbac 	bl	8000a28 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80012d0:	2108      	movs	r1, #8
 80012d2:	4878      	ldr	r0, [pc, #480]	; (80014b4 <takeWifiPass+0x210>)
 80012d4:	f008 fd92 	bl	8009dfc <HAL_GPIO_ReadPin>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d11a      	bne.n	8001314 <takeWifiPass+0x70>
            lcd_cursor(0);
 80012de:	2000      	movs	r0, #0
 80012e0:	f7ff fb5c 	bl	800099c <lcd_cursor>

            int uzunluk = strlen(wifiPass);
 80012e4:	4874      	ldr	r0, [pc, #464]	; (80014b8 <takeWifiPass+0x214>)
 80012e6:	f7fe ff9d 	bl	8000224 <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24

            for(int i=0; i<uzunluk; i++) {
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012f2:	e00a      	b.n	800130a <takeWifiPass+0x66>
              	eepromData[wifiPassEEPROMBaslangic] = realCharPosLoc[i];
 80012f4:	4b71      	ldr	r3, [pc, #452]	; (80014bc <takeWifiPass+0x218>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4639      	mov	r1, r7
 80012fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012fc:	440a      	add	r2, r1
 80012fe:	7811      	ldrb	r1, [r2, #0]
 8001300:	4a6f      	ldr	r2, [pc, #444]	; (80014c0 <takeWifiPass+0x21c>)
 8001302:	54d1      	strb	r1, [r2, r3]
            for(int i=0; i<uzunluk; i++) {
 8001304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001306:	3301      	adds	r3, #1
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
 800130a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	429a      	cmp	r2, r3
 8001310:	dbf0      	blt.n	80012f4 <takeWifiPass+0x50>
            }

            break;
 8001312:	e14e      	b.n	80015b2 <takeWifiPass+0x30e>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001314:	2101      	movs	r1, #1
 8001316:	4867      	ldr	r0, [pc, #412]	; (80014b4 <takeWifiPass+0x210>)
 8001318:	f008 fd70 	bl	8009dfc <HAL_GPIO_ReadPin>
 800131c:	4603      	mov	r3, r0
 800131e:	2b01      	cmp	r3, #1
 8001320:	d166      	bne.n	80013f0 <takeWifiPass+0x14c>
        	realCharPos++;
 8001322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001324:	3301      	adds	r3, #1
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos > 80) {
 8001328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132a:	2b50      	cmp	r3, #80	; 0x50
 800132c:	dd01      	ble.n	8001332 <takeWifiPass+0x8e>
        	    realCharPos = 1;
 800132e:	2301      	movs	r3, #1
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if (cursorPosition == 16) {
 8001332:	4b5e      	ldr	r3, [pc, #376]	; (80014ac <takeWifiPass+0x208>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b10      	cmp	r3, #16
 8001338:	d152      	bne.n	80013e0 <takeWifiPass+0x13c>
            	if(page == 1) {
 800133a:	4b5d      	ldr	r3, [pc, #372]	; (80014b0 <takeWifiPass+0x20c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d10c      	bne.n	800135c <takeWifiPass+0xb8>
            		cursorPosition = 1;
 8001342:	4b5a      	ldr	r3, [pc, #360]	; (80014ac <takeWifiPass+0x208>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]
            		page++;
 8001348:	4b59      	ldr	r3, [pc, #356]	; (80014b0 <takeWifiPass+0x20c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	4a58      	ldr	r2, [pc, #352]	; (80014b0 <takeWifiPass+0x20c>)
 8001350:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8001352:	2102      	movs	r1, #2
 8001354:	2003      	movs	r0, #3
 8001356:	f7ff fb67 	bl	8000a28 <printTemplate>
 800135a:	e046      	b.n	80013ea <takeWifiPass+0x146>
            	} else if(page == 2) {
 800135c:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <takeWifiPass+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d10c      	bne.n	800137e <takeWifiPass+0xda>
            		cursorPosition = 1;
 8001364:	4b51      	ldr	r3, [pc, #324]	; (80014ac <takeWifiPass+0x208>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]
            		page++;
 800136a:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <takeWifiPass+0x20c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3301      	adds	r3, #1
 8001370:	4a4f      	ldr	r2, [pc, #316]	; (80014b0 <takeWifiPass+0x20c>)
 8001372:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 8001374:	2103      	movs	r1, #3
 8001376:	2003      	movs	r0, #3
 8001378:	f7ff fb56 	bl	8000a28 <printTemplate>
 800137c:	e035      	b.n	80013ea <takeWifiPass+0x146>
            	} else if(page == 3) {
 800137e:	4b4c      	ldr	r3, [pc, #304]	; (80014b0 <takeWifiPass+0x20c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d10c      	bne.n	80013a0 <takeWifiPass+0xfc>
            		cursorPosition = 1;
 8001386:	4b49      	ldr	r3, [pc, #292]	; (80014ac <takeWifiPass+0x208>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]
            		page++;
 800138c:	4b48      	ldr	r3, [pc, #288]	; (80014b0 <takeWifiPass+0x20c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	4a47      	ldr	r2, [pc, #284]	; (80014b0 <takeWifiPass+0x20c>)
 8001394:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 8001396:	2104      	movs	r1, #4
 8001398:	2003      	movs	r0, #3
 800139a:	f7ff fb45 	bl	8000a28 <printTemplate>
 800139e:	e024      	b.n	80013ea <takeWifiPass+0x146>
            	} else if(page == 4) {
 80013a0:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <takeWifiPass+0x20c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d10c      	bne.n	80013c2 <takeWifiPass+0x11e>
            		cursorPosition = 1;
 80013a8:	4b40      	ldr	r3, [pc, #256]	; (80014ac <takeWifiPass+0x208>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
            		page++;
 80013ae:	4b40      	ldr	r3, [pc, #256]	; (80014b0 <takeWifiPass+0x20c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <takeWifiPass+0x20c>)
 80013b6:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80013b8:	2105      	movs	r1, #5
 80013ba:	2003      	movs	r0, #3
 80013bc:	f7ff fb34 	bl	8000a28 <printTemplate>
 80013c0:	e013      	b.n	80013ea <takeWifiPass+0x146>
            	} else if(page == 5) {
 80013c2:	4b3b      	ldr	r3, [pc, #236]	; (80014b0 <takeWifiPass+0x20c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b05      	cmp	r3, #5
 80013c8:	d10f      	bne.n	80013ea <takeWifiPass+0x146>
            		cursorPosition = 1;
 80013ca:	4b38      	ldr	r3, [pc, #224]	; (80014ac <takeWifiPass+0x208>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
            		page = 1;
 80013d0:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <takeWifiPass+0x20c>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80013d6:	2101      	movs	r1, #1
 80013d8:	2003      	movs	r0, #3
 80013da:	f7ff fb25 	bl	8000a28 <printTemplate>
 80013de:	e004      	b.n	80013ea <takeWifiPass+0x146>
            	}
            } else {
            	cursorPosition++;
 80013e0:	4b32      	ldr	r3, [pc, #200]	; (80014ac <takeWifiPass+0x208>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	4a31      	ldr	r2, [pc, #196]	; (80014ac <takeWifiPass+0x208>)
 80013e8:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80013ea:	20fa      	movs	r0, #250	; 0xfa
 80013ec:	f007 ff36 	bl	800925c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80013f0:	2108      	movs	r1, #8
 80013f2:	4834      	ldr	r0, [pc, #208]	; (80014c4 <takeWifiPass+0x220>)
 80013f4:	f008 fd02 	bl	8009dfc <HAL_GPIO_ReadPin>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d16c      	bne.n	80014d8 <takeWifiPass+0x234>
        	realCharPos--;
 80013fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001400:	3b01      	subs	r3, #1
 8001402:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos < 1) {
 8001404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001406:	2b00      	cmp	r3, #0
 8001408:	dc01      	bgt.n	800140e <takeWifiPass+0x16a>
        	    realCharPos = 80;
 800140a:	2350      	movs	r3, #80	; 0x50
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if(cursorPosition == 1) {
 800140e:	4b27      	ldr	r3, [pc, #156]	; (80014ac <takeWifiPass+0x208>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d158      	bne.n	80014c8 <takeWifiPass+0x224>
            	if(page == 1) {
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <takeWifiPass+0x20c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d10a      	bne.n	8001434 <takeWifiPass+0x190>
            		cursorPosition = 16;
 800141e:	4b23      	ldr	r3, [pc, #140]	; (80014ac <takeWifiPass+0x208>)
 8001420:	2210      	movs	r2, #16
 8001422:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <takeWifiPass+0x20c>)
 8001426:	2205      	movs	r2, #5
 8001428:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 800142a:	2105      	movs	r1, #5
 800142c:	2003      	movs	r0, #3
 800142e:	f7ff fafb 	bl	8000a28 <printTemplate>
 8001432:	e04e      	b.n	80014d2 <takeWifiPass+0x22e>
            	} else if(page == 2) {
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <takeWifiPass+0x20c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d10a      	bne.n	8001452 <takeWifiPass+0x1ae>
            		cursorPosition = 16;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <takeWifiPass+0x208>)
 800143e:	2210      	movs	r2, #16
 8001440:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <takeWifiPass+0x20c>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001448:	2101      	movs	r1, #1
 800144a:	2003      	movs	r0, #3
 800144c:	f7ff faec 	bl	8000a28 <printTemplate>
 8001450:	e03f      	b.n	80014d2 <takeWifiPass+0x22e>
            	} else if(page == 3) {
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <takeWifiPass+0x20c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d10a      	bne.n	8001470 <takeWifiPass+0x1cc>
            		cursorPosition = 16;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <takeWifiPass+0x208>)
 800145c:	2210      	movs	r2, #16
 800145e:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <takeWifiPass+0x20c>)
 8001462:	2202      	movs	r2, #2
 8001464:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8001466:	2102      	movs	r1, #2
 8001468:	2003      	movs	r0, #3
 800146a:	f7ff fadd 	bl	8000a28 <printTemplate>
 800146e:	e030      	b.n	80014d2 <takeWifiPass+0x22e>
            	} else if(page == 4) {
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <takeWifiPass+0x20c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d10a      	bne.n	800148e <takeWifiPass+0x1ea>
            		cursorPosition = 16;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <takeWifiPass+0x208>)
 800147a:	2210      	movs	r2, #16
 800147c:	601a      	str	r2, [r3, #0]
            		page = 3;
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <takeWifiPass+0x20c>)
 8001480:	2203      	movs	r2, #3
 8001482:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 8001484:	2103      	movs	r1, #3
 8001486:	2003      	movs	r0, #3
 8001488:	f7ff face 	bl	8000a28 <printTemplate>
 800148c:	e021      	b.n	80014d2 <takeWifiPass+0x22e>
            	} else if(page == 5) {
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <takeWifiPass+0x20c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b05      	cmp	r3, #5
 8001494:	d11d      	bne.n	80014d2 <takeWifiPass+0x22e>
            		cursorPosition = 16;
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <takeWifiPass+0x208>)
 8001498:	2210      	movs	r2, #16
 800149a:	601a      	str	r2, [r3, #0]
            		page = 4;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <takeWifiPass+0x20c>)
 800149e:	2204      	movs	r2, #4
 80014a0:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80014a2:	2104      	movs	r1, #4
 80014a4:	2003      	movs	r0, #3
 80014a6:	f7ff fabf 	bl	8000a28 <printTemplate>
 80014aa:	e012      	b.n	80014d2 <takeWifiPass+0x22e>
 80014ac:	20000944 	.word	0x20000944
 80014b0:	20000948 	.word	0x20000948
 80014b4:	40010800 	.word	0x40010800
 80014b8:	20000c30 	.word	0x20000c30
 80014bc:	200009c8 	.word	0x200009c8
 80014c0:	20000b44 	.word	0x20000b44
 80014c4:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80014c8:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <takeWifiPass+0x318>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	4a3b      	ldr	r2, [pc, #236]	; (80015bc <takeWifiPass+0x318>)
 80014d0:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80014d2:	20fa      	movs	r0, #250	; 0xfa
 80014d4:	f007 fec2 	bl	800925c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80014d8:	2102      	movs	r1, #2
 80014da:	4839      	ldr	r0, [pc, #228]	; (80015c0 <takeWifiPass+0x31c>)
 80014dc:	f008 fc8e 	bl	8009dfc <HAL_GPIO_ReadPin>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d127      	bne.n	8001536 <takeWifiPass+0x292>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80014e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e8:	3b01      	subs	r3, #1
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fc12 	bl	8000d14 <getCharFromCursorPosition>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4619      	mov	r1, r3
 80014f4:	4a33      	ldr	r2, [pc, #204]	; (80015c4 <takeWifiPass+0x320>)
 80014f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f8:	4413      	add	r3, r2
 80014fa:	460a      	mov	r2, r1
 80014fc:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	b2d9      	uxtb	r1, r3
 8001502:	4a30      	ldr	r2, [pc, #192]	; (80015c4 <takeWifiPass+0x320>)
 8001504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001506:	4413      	add	r3, r2
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff f9fc 	bl	800090a <lcd_print_char>

            realCharPosLoc[wifiPassLoc] = realCharPos-1;
 8001512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001514:	b2db      	uxtb	r3, r3
 8001516:	3b01      	subs	r3, #1
 8001518:	b2d9      	uxtb	r1, r3
 800151a:	463a      	mov	r2, r7
 800151c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	701a      	strb	r2, [r3, #0]

            writeLoc++;
 8001524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001526:	3301      	adds	r3, #1
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
            wifiPassLoc++;
 800152a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800152c:	3301      	adds	r3, #1
 800152e:	633b      	str	r3, [r7, #48]	; 0x30

            HAL_Delay(250);
 8001530:	20fa      	movs	r0, #250	; 0xfa
 8001532:	f007 fe93 	bl	800925c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001536:	2104      	movs	r1, #4
 8001538:	4821      	ldr	r0, [pc, #132]	; (80015c0 <takeWifiPass+0x31c>)
 800153a:	f008 fc5f 	bl	8009dfc <HAL_GPIO_ReadPin>
 800153e:	4603      	mov	r3, r0
 8001540:	2b01      	cmp	r3, #1
 8001542:	d12e      	bne.n	80015a2 <takeWifiPass+0x2fe>
            if(strlen(wifiPass) >= 1) {
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <takeWifiPass+0x320>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d027      	beq.n	800159c <takeWifiPass+0x2f8>
            	wifiPass[wifiPassLoc] = '\0';
 800154c:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <takeWifiPass+0x320>)
 800154e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001550:	4413      	add	r3, r2
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 8001556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001558:	b2db      	uxtb	r3, r3
 800155a:	3306      	adds	r3, #6
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	2001      	movs	r0, #1
 8001562:	f7ff f9f3 	bl	800094c <lcd_delete_char>
            	HAL_Delay(50);
 8001566:	2032      	movs	r0, #50	; 0x32
 8001568:	f007 fe78 	bl	800925c <HAL_Delay>

            	if(writeLoc > 7) {
 800156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156e:	2b07      	cmp	r3, #7
 8001570:	dd03      	ble.n	800157a <takeWifiPass+0x2d6>
            		writeLoc--;
 8001572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001574:	3b01      	subs	r3, #1
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001578:	e004      	b.n	8001584 <takeWifiPass+0x2e0>
            	} else if(writeLoc < 7) {
 800157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157c:	2b06      	cmp	r3, #6
 800157e:	dc01      	bgt.n	8001584 <takeWifiPass+0x2e0>
            		writeLoc = 7;
 8001580:	2307      	movs	r3, #7
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
            	}

            	if(wifiPassLoc > 0) {
 8001584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001586:	2b00      	cmp	r3, #0
 8001588:	dd03      	ble.n	8001592 <takeWifiPass+0x2ee>
            		wifiPassLoc--;
 800158a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158c:	3b01      	subs	r3, #1
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
 8001590:	e004      	b.n	800159c <takeWifiPass+0x2f8>
            	} else if(wifiPassLoc < 0) {
 8001592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001594:	2b00      	cmp	r3, #0
 8001596:	da01      	bge.n	800159c <takeWifiPass+0x2f8>
            		wifiPassLoc = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
            	}
            }

            HAL_Delay(250);
 800159c:	20fa      	movs	r0, #250	; 0xfa
 800159e:	f007 fe5d 	bl	800925c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <takeWifiPass+0x318>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	4619      	mov	r1, r3
 80015aa:	2002      	movs	r0, #2
 80015ac:	f7ff f979 	bl	80008a2 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80015b0:	e68e      	b.n	80012d0 <takeWifiPass+0x2c>
    }
}
 80015b2:	bf00      	nop
 80015b4:	3738      	adds	r7, #56	; 0x38
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000944 	.word	0x20000944
 80015c0:	40010800 	.word	0x40010800
 80015c4:	20000c30 	.word	0x20000c30

080015c8 <menu>:

void menu(void) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015cc:	2101      	movs	r1, #1
 80015ce:	488f      	ldr	r0, [pc, #572]	; (800180c <menu+0x244>)
 80015d0:	f008 fc14 	bl	8009dfc <HAL_GPIO_ReadPin>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	f040 808e 	bne.w	80016f8 <menu+0x130>
 80015dc:	4b8c      	ldr	r3, [pc, #560]	; (8001810 <menu+0x248>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8086 	beq.w	80016f8 <menu+0x130>
		menuSayac = menuSayac+1;
 80015ec:	4b89      	ldr	r3, [pc, #548]	; (8001814 <menu+0x24c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b87      	ldr	r3, [pc, #540]	; (8001814 <menu+0x24c>)
 80015f6:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80015f8:	4b86      	ldr	r3, [pc, #536]	; (8001814 <menu+0x24c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b24      	cmp	r3, #36	; 0x24
 80015fe:	d102      	bne.n	8001606 <menu+0x3e>
			menuSayac = 1;
 8001600:	4b84      	ldr	r3, [pc, #528]	; (8001814 <menu+0x24c>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001606:	4b83      	ldr	r3, [pc, #524]	; (8001814 <menu+0x24c>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b12      	cmp	r3, #18
 800160c:	d106      	bne.n	800161c <menu+0x54>
 800160e:	4b82      	ldr	r3, [pc, #520]	; (8001818 <menu+0x250>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <menu+0x54>
			menuSayac = 21;
 8001616:	4b7f      	ldr	r3, [pc, #508]	; (8001814 <menu+0x24c>)
 8001618:	2215      	movs	r2, #21
 800161a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800161c:	4b7d      	ldr	r3, [pc, #500]	; (8001814 <menu+0x24c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b08      	cmp	r3, #8
 8001622:	d106      	bne.n	8001632 <menu+0x6a>
 8001624:	4b7d      	ldr	r3, [pc, #500]	; (800181c <menu+0x254>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <menu+0x6a>
			menuSayac = 16;
 800162c:	4b79      	ldr	r3, [pc, #484]	; (8001814 <menu+0x24c>)
 800162e:	2210      	movs	r2, #16
 8001630:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001632:	4b78      	ldr	r3, [pc, #480]	; (8001814 <menu+0x24c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b0d      	cmp	r3, #13
 8001638:	d106      	bne.n	8001648 <menu+0x80>
 800163a:	4b78      	ldr	r3, [pc, #480]	; (800181c <menu+0x254>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d102      	bne.n	8001648 <menu+0x80>
			menuSayac = 16;
 8001642:	4b74      	ldr	r3, [pc, #464]	; (8001814 <menu+0x24c>)
 8001644:	2210      	movs	r2, #16
 8001646:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001648:	4b72      	ldr	r3, [pc, #456]	; (8001814 <menu+0x24c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b09      	cmp	r3, #9
 800164e:	d106      	bne.n	800165e <menu+0x96>
 8001650:	4b72      	ldr	r3, [pc, #456]	; (800181c <menu+0x254>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d102      	bne.n	800165e <menu+0x96>
			menuSayac = 13;
 8001658:	4b6e      	ldr	r3, [pc, #440]	; (8001814 <menu+0x24c>)
 800165a:	220d      	movs	r2, #13
 800165c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800165e:	4b6d      	ldr	r3, [pc, #436]	; (8001814 <menu+0x24c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b0a      	cmp	r3, #10
 8001664:	d10a      	bne.n	800167c <menu+0xb4>
 8001666:	4b6e      	ldr	r3, [pc, #440]	; (8001820 <menu+0x258>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d003      	beq.n	8001676 <menu+0xae>
 800166e:	4b6c      	ldr	r3, [pc, #432]	; (8001820 <menu+0x258>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d102      	bne.n	800167c <menu+0xb4>
			menuSayac = 11;
 8001676:	4b67      	ldr	r3, [pc, #412]	; (8001814 <menu+0x24c>)
 8001678:	220b      	movs	r2, #11
 800167a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800167c:	4b65      	ldr	r3, [pc, #404]	; (8001814 <menu+0x24c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b0c      	cmp	r3, #12
 8001682:	d10e      	bne.n	80016a2 <menu+0xda>
 8001684:	4b67      	ldr	r3, [pc, #412]	; (8001824 <menu+0x25c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d003      	beq.n	8001694 <menu+0xcc>
 800168c:	4b65      	ldr	r3, [pc, #404]	; (8001824 <menu+0x25c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d106      	bne.n	80016a2 <menu+0xda>
 8001694:	4b61      	ldr	r3, [pc, #388]	; (800181c <menu+0x254>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d102      	bne.n	80016a2 <menu+0xda>
			menuSayac = 16;
 800169c:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <menu+0x24c>)
 800169e:	2210      	movs	r2, #16
 80016a0:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80016a2:	4b5c      	ldr	r3, [pc, #368]	; (8001814 <menu+0x24c>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d10e      	bne.n	80016c8 <menu+0x100>
 80016aa:	4b5e      	ldr	r3, [pc, #376]	; (8001824 <menu+0x25c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d003      	beq.n	80016ba <menu+0xf2>
 80016b2:	4b5c      	ldr	r3, [pc, #368]	; (8001824 <menu+0x25c>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d106      	bne.n	80016c8 <menu+0x100>
 80016ba:	4b58      	ldr	r3, [pc, #352]	; (800181c <menu+0x254>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d102      	bne.n	80016c8 <menu+0x100>
			menuSayac = 13;
 80016c2:	4b54      	ldr	r3, [pc, #336]	; (8001814 <menu+0x24c>)
 80016c4:	220d      	movs	r2, #13
 80016c6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016c8:	4b52      	ldr	r3, [pc, #328]	; (8001814 <menu+0x24c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d106      	bne.n	80016de <menu+0x116>
 80016d0:	4b55      	ldr	r3, [pc, #340]	; (8001828 <menu+0x260>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d102      	bne.n	80016de <menu+0x116>
			menuSayac = 16;
 80016d8:	4b4e      	ldr	r3, [pc, #312]	; (8001814 <menu+0x24c>)
 80016da:	2210      	movs	r2, #16
 80016dc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80016de:	4b4d      	ldr	r3, [pc, #308]	; (8001814 <menu+0x24c>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b18      	cmp	r3, #24
 80016e4:	d106      	bne.n	80016f4 <menu+0x12c>
 80016e6:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <menu+0x250>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <menu+0x12c>
			menuSayac = 26;
 80016ee:	4b49      	ldr	r3, [pc, #292]	; (8001814 <menu+0x24c>)
 80016f0:	221a      	movs	r2, #26
 80016f2:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016f4:	f004 fc86 	bl	8006004 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016f8:	2108      	movs	r1, #8
 80016fa:	484c      	ldr	r0, [pc, #304]	; (800182c <menu+0x264>)
 80016fc:	f008 fb7e 	bl	8009dfc <HAL_GPIO_ReadPin>
 8001700:	4603      	mov	r3, r0
 8001702:	2b01      	cmp	r3, #1
 8001704:	d175      	bne.n	80017f2 <menu+0x22a>
 8001706:	4b42      	ldr	r3, [pc, #264]	; (8001810 <menu+0x248>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	f083 0301 	eor.w	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d06e      	beq.n	80017f2 <menu+0x22a>
		if (menuSayac <= 1) {
 8001714:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <menu+0x24c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d802      	bhi.n	8001722 <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800171c:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <menu+0x24c>)
 800171e:	2224      	movs	r2, #36	; 0x24
 8001720:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001722:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <menu+0x24c>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	3b01      	subs	r3, #1
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <menu+0x24c>)
 800172c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800172e:	4b39      	ldr	r3, [pc, #228]	; (8001814 <menu+0x24c>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b14      	cmp	r3, #20
 8001734:	d106      	bne.n	8001744 <menu+0x17c>
 8001736:	4b38      	ldr	r3, [pc, #224]	; (8001818 <menu+0x250>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <menu+0x17c>
			menuSayac = 17;
 800173e:	4b35      	ldr	r3, [pc, #212]	; (8001814 <menu+0x24c>)
 8001740:	2211      	movs	r2, #17
 8001742:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001744:	4b33      	ldr	r3, [pc, #204]	; (8001814 <menu+0x24c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d106      	bne.n	800175a <menu+0x192>
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <menu+0x254>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <menu+0x192>
			menuSayac = 7;
 8001754:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <menu+0x24c>)
 8001756:	2207      	movs	r2, #7
 8001758:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <menu+0x24c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b0f      	cmp	r3, #15
 8001760:	d106      	bne.n	8001770 <menu+0x1a8>
 8001762:	4b2e      	ldr	r3, [pc, #184]	; (800181c <menu+0x254>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d102      	bne.n	8001770 <menu+0x1a8>
			menuSayac = 12;
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <menu+0x24c>)
 800176c:	220c      	movs	r2, #12
 800176e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001770:	4b28      	ldr	r3, [pc, #160]	; (8001814 <menu+0x24c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b0c      	cmp	r3, #12
 8001776:	d106      	bne.n	8001786 <menu+0x1be>
 8001778:	4b28      	ldr	r3, [pc, #160]	; (800181c <menu+0x254>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d102      	bne.n	8001786 <menu+0x1be>
			menuSayac = 8;
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <menu+0x24c>)
 8001782:	2208      	movs	r2, #8
 8001784:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <menu+0x24c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b0a      	cmp	r3, #10
 800178c:	d10a      	bne.n	80017a4 <menu+0x1dc>
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <menu+0x258>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d003      	beq.n	800179e <menu+0x1d6>
 8001796:	4b22      	ldr	r3, [pc, #136]	; (8001820 <menu+0x258>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d102      	bne.n	80017a4 <menu+0x1dc>
			menuSayac = 9;
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <menu+0x24c>)
 80017a0:	2209      	movs	r2, #9
 80017a2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <menu+0x24c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b0c      	cmp	r3, #12
 80017aa:	d10a      	bne.n	80017c2 <menu+0x1fa>
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <menu+0x25c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d003      	beq.n	80017bc <menu+0x1f4>
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <menu+0x25c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d102      	bne.n	80017c2 <menu+0x1fa>
			menuSayac = 11;
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <menu+0x24c>)
 80017be:	220b      	movs	r2, #11
 80017c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <menu+0x24c>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b0f      	cmp	r3, #15
 80017c8:	d106      	bne.n	80017d8 <menu+0x210>
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <menu+0x260>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d102      	bne.n	80017d8 <menu+0x210>
			menuSayac = 14;
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <menu+0x24c>)
 80017d4:	220e      	movs	r2, #14
 80017d6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <menu+0x24c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b19      	cmp	r3, #25
 80017de:	d106      	bne.n	80017ee <menu+0x226>
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <menu+0x250>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <menu+0x226>
			menuSayac = 23;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <menu+0x24c>)
 80017ea:	2217      	movs	r2, #23
 80017ec:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80017ee:	f004 fc09 	bl	8006004 <bekle>
	}

	if (menuSayac == 0) {
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <menu+0x24c>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d134      	bne.n	8001864 <menu+0x29c>
		if(dilSecim == 0) {
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <menu+0x268>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d122      	bne.n	8001848 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001802:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <menu+0x26c>)
 8001804:	2101      	movs	r1, #1
 8001806:	2001      	movs	r0, #1
 8001808:	e016      	b.n	8001838 <menu+0x270>
 800180a:	bf00      	nop
 800180c:	40010800 	.word	0x40010800
 8001810:	20000c84 	.word	0x20000c84
 8001814:	20000c55 	.word	0x20000c55
 8001818:	20000c64 	.word	0x20000c64
 800181c:	20000c5d 	.word	0x20000c5d
 8001820:	20000c5e 	.word	0x20000c5e
 8001824:	20000c5f 	.word	0x20000c5f
 8001828:	20000c60 	.word	0x20000c60
 800182c:	40011000 	.word	0x40011000
 8001830:	20000c76 	.word	0x20000c76
 8001834:	0800db70 	.word	0x0800db70
 8001838:	f7ff f852 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 800183c:	4a94      	ldr	r2, [pc, #592]	; (8001a90 <menu+0x4c8>)
 800183e:	2101      	movs	r1, #1
 8001840:	2002      	movs	r0, #2
 8001842:	f7ff f84d 	bl	80008e0 <lcd_print>
 8001846:	e00d      	b.n	8001864 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001848:	4b92      	ldr	r3, [pc, #584]	; (8001a94 <menu+0x4cc>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d109      	bne.n	8001864 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001850:	4a91      	ldr	r2, [pc, #580]	; (8001a98 <menu+0x4d0>)
 8001852:	2101      	movs	r1, #1
 8001854:	2001      	movs	r0, #1
 8001856:	f7ff f843 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800185a:	4a90      	ldr	r2, [pc, #576]	; (8001a9c <menu+0x4d4>)
 800185c:	2101      	movs	r1, #1
 800185e:	2002      	movs	r0, #2
 8001860:	f7ff f83e 	bl	80008e0 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001864:	4b8e      	ldr	r3, [pc, #568]	; (8001aa0 <menu+0x4d8>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	f040 82b5 	bne.w	8001dd8 <menu+0x810>
		if(dilSecim == 0) {
 800186e:	4b89      	ldr	r3, [pc, #548]	; (8001a94 <menu+0x4cc>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d105      	bne.n	8001882 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001876:	4a8b      	ldr	r2, [pc, #556]	; (8001aa4 <menu+0x4dc>)
 8001878:	2101      	movs	r1, #1
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff f830 	bl	80008e0 <lcd_print>
 8001880:	e008      	b.n	8001894 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001882:	4b84      	ldr	r3, [pc, #528]	; (8001a94 <menu+0x4cc>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d104      	bne.n	8001894 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800188a:	4a87      	ldr	r2, [pc, #540]	; (8001aa8 <menu+0x4e0>)
 800188c:	2101      	movs	r1, #1
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff f826 	bl	80008e0 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001894:	4b85      	ldr	r3, [pc, #532]	; (8001aac <menu+0x4e4>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d123      	bne.n	80018e4 <menu+0x31c>
			if(dilSecim == 0) {
 800189c:	4b7d      	ldr	r3, [pc, #500]	; (8001a94 <menu+0x4cc>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80018a4:	4a82      	ldr	r2, [pc, #520]	; (8001ab0 <menu+0x4e8>)
 80018a6:	2101      	movs	r1, #1
 80018a8:	2002      	movs	r0, #2
 80018aa:	f7ff f819 	bl	80008e0 <lcd_print>
 80018ae:	e008      	b.n	80018c2 <menu+0x2fa>

			} else if(dilSecim == 1) {
 80018b0:	4b78      	ldr	r3, [pc, #480]	; (8001a94 <menu+0x4cc>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d104      	bne.n	80018c2 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80018b8:	4a7e      	ldr	r2, [pc, #504]	; (8001ab4 <menu+0x4ec>)
 80018ba:	2101      	movs	r1, #1
 80018bc:	2002      	movs	r0, #2
 80018be:	f7ff f80f 	bl	80008e0 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80018c2:	4a7d      	ldr	r2, [pc, #500]	; (8001ab8 <menu+0x4f0>)
 80018c4:	210f      	movs	r1, #15
 80018c6:	2002      	movs	r0, #2
 80018c8:	f7ff f80a 	bl	80008e0 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80018cc:	4b7b      	ldr	r3, [pc, #492]	; (8001abc <menu+0x4f4>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	220a      	movs	r2, #10
 80018d2:	497b      	ldr	r1, [pc, #492]	; (8001ac0 <menu+0x4f8>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00b fb19 	bl	800cf0c <itoa>
			lcd_print(2, 14, snum);
 80018da:	4a79      	ldr	r2, [pc, #484]	; (8001ac0 <menu+0x4f8>)
 80018dc:	210e      	movs	r1, #14
 80018de:	2002      	movs	r0, #2
 80018e0:	f7fe fffe 	bl	80008e0 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80018e4:	4b71      	ldr	r3, [pc, #452]	; (8001aac <menu+0x4e4>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d123      	bne.n	8001934 <menu+0x36c>
			if(dilSecim == 0) {
 80018ec:	4b69      	ldr	r3, [pc, #420]	; (8001a94 <menu+0x4cc>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80018f4:	4a73      	ldr	r2, [pc, #460]	; (8001ac4 <menu+0x4fc>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	2002      	movs	r0, #2
 80018fa:	f7fe fff1 	bl	80008e0 <lcd_print>
 80018fe:	e008      	b.n	8001912 <menu+0x34a>
			} else if(dilSecim == 1) {
 8001900:	4b64      	ldr	r3, [pc, #400]	; (8001a94 <menu+0x4cc>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d104      	bne.n	8001912 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001908:	4a6f      	ldr	r2, [pc, #444]	; (8001ac8 <menu+0x500>)
 800190a:	2101      	movs	r1, #1
 800190c:	2002      	movs	r0, #2
 800190e:	f7fe ffe7 	bl	80008e0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001912:	4a6e      	ldr	r2, [pc, #440]	; (8001acc <menu+0x504>)
 8001914:	210f      	movs	r1, #15
 8001916:	2002      	movs	r0, #2
 8001918:	f7fe ffe2 	bl	80008e0 <lcd_print>
			itoa(hataKayit2, snum, 10);
 800191c:	4b6c      	ldr	r3, [pc, #432]	; (8001ad0 <menu+0x508>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	220a      	movs	r2, #10
 8001922:	4967      	ldr	r1, [pc, #412]	; (8001ac0 <menu+0x4f8>)
 8001924:	4618      	mov	r0, r3
 8001926:	f00b faf1 	bl	800cf0c <itoa>
			lcd_print(2, 14, snum);
 800192a:	4a65      	ldr	r2, [pc, #404]	; (8001ac0 <menu+0x4f8>)
 800192c:	210e      	movs	r1, #14
 800192e:	2002      	movs	r0, #2
 8001930:	f7fe ffd6 	bl	80008e0 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001934:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <menu+0x4e4>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d123      	bne.n	8001984 <menu+0x3bc>
			if(dilSecim == 0) {
 800193c:	4b55      	ldr	r3, [pc, #340]	; (8001a94 <menu+0x4cc>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001944:	4a63      	ldr	r2, [pc, #396]	; (8001ad4 <menu+0x50c>)
 8001946:	2101      	movs	r1, #1
 8001948:	2002      	movs	r0, #2
 800194a:	f7fe ffc9 	bl	80008e0 <lcd_print>
 800194e:	e008      	b.n	8001962 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001950:	4b50      	ldr	r3, [pc, #320]	; (8001a94 <menu+0x4cc>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d104      	bne.n	8001962 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001958:	4a5f      	ldr	r2, [pc, #380]	; (8001ad8 <menu+0x510>)
 800195a:	2101      	movs	r1, #1
 800195c:	2002      	movs	r0, #2
 800195e:	f7fe ffbf 	bl	80008e0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001962:	4a5a      	ldr	r2, [pc, #360]	; (8001acc <menu+0x504>)
 8001964:	210f      	movs	r1, #15
 8001966:	2002      	movs	r0, #2
 8001968:	f7fe ffba 	bl	80008e0 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800196c:	4b5b      	ldr	r3, [pc, #364]	; (8001adc <menu+0x514>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	220a      	movs	r2, #10
 8001972:	4953      	ldr	r1, [pc, #332]	; (8001ac0 <menu+0x4f8>)
 8001974:	4618      	mov	r0, r3
 8001976:	f00b fac9 	bl	800cf0c <itoa>
			lcd_print(2, 14, snum);
 800197a:	4a51      	ldr	r2, [pc, #324]	; (8001ac0 <menu+0x4f8>)
 800197c:	210e      	movs	r1, #14
 800197e:	2002      	movs	r0, #2
 8001980:	f7fe ffae 	bl	80008e0 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001984:	4b49      	ldr	r3, [pc, #292]	; (8001aac <menu+0x4e4>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d123      	bne.n	80019d4 <menu+0x40c>
			if(dilSecim == 0) {
 800198c:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <menu+0x4cc>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d105      	bne.n	80019a0 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001994:	4a52      	ldr	r2, [pc, #328]	; (8001ae0 <menu+0x518>)
 8001996:	2101      	movs	r1, #1
 8001998:	2002      	movs	r0, #2
 800199a:	f7fe ffa1 	bl	80008e0 <lcd_print>
 800199e:	e008      	b.n	80019b2 <menu+0x3ea>
			} else if(dilSecim == 1) {
 80019a0:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <menu+0x4cc>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d104      	bne.n	80019b2 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80019a8:	4a4e      	ldr	r2, [pc, #312]	; (8001ae4 <menu+0x51c>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	2002      	movs	r0, #2
 80019ae:	f7fe ff97 	bl	80008e0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019b2:	4a46      	ldr	r2, [pc, #280]	; (8001acc <menu+0x504>)
 80019b4:	210f      	movs	r1, #15
 80019b6:	2002      	movs	r0, #2
 80019b8:	f7fe ff92 	bl	80008e0 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80019bc:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <menu+0x520>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	220a      	movs	r2, #10
 80019c2:	493f      	ldr	r1, [pc, #252]	; (8001ac0 <menu+0x4f8>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00b faa1 	bl	800cf0c <itoa>
			lcd_print(2, 14, snum);
 80019ca:	4a3d      	ldr	r2, [pc, #244]	; (8001ac0 <menu+0x4f8>)
 80019cc:	210e      	movs	r1, #14
 80019ce:	2002      	movs	r0, #2
 80019d0:	f7fe ff86 	bl	80008e0 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80019d4:	4b35      	ldr	r3, [pc, #212]	; (8001aac <menu+0x4e4>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d123      	bne.n	8001a24 <menu+0x45c>
			if(dilSecim == 0) {
 80019dc:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <menu+0x4cc>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80019e4:	4a41      	ldr	r2, [pc, #260]	; (8001aec <menu+0x524>)
 80019e6:	2101      	movs	r1, #1
 80019e8:	2002      	movs	r0, #2
 80019ea:	f7fe ff79 	bl	80008e0 <lcd_print>
 80019ee:	e008      	b.n	8001a02 <menu+0x43a>
			} else if(dilSecim == 1) {
 80019f0:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <menu+0x4cc>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d104      	bne.n	8001a02 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80019f8:	4a3d      	ldr	r2, [pc, #244]	; (8001af0 <menu+0x528>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	2002      	movs	r0, #2
 80019fe:	f7fe ff6f 	bl	80008e0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a02:	4a32      	ldr	r2, [pc, #200]	; (8001acc <menu+0x504>)
 8001a04:	210f      	movs	r1, #15
 8001a06:	2002      	movs	r0, #2
 8001a08:	f7fe ff6a 	bl	80008e0 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001a0c:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <menu+0x52c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	220a      	movs	r2, #10
 8001a12:	492b      	ldr	r1, [pc, #172]	; (8001ac0 <menu+0x4f8>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00b fa79 	bl	800cf0c <itoa>
			lcd_print(2, 14, snum);
 8001a1a:	4a29      	ldr	r2, [pc, #164]	; (8001ac0 <menu+0x4f8>)
 8001a1c:	210e      	movs	r1, #14
 8001a1e:	2002      	movs	r0, #2
 8001a20:	f7fe ff5e 	bl	80008e0 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <menu+0x4e4>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d123      	bne.n	8001a74 <menu+0x4ac>
			if(dilSecim == 0) {
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <menu+0x4cc>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001a34:	4a30      	ldr	r2, [pc, #192]	; (8001af8 <menu+0x530>)
 8001a36:	2101      	movs	r1, #1
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f7fe ff51 	bl	80008e0 <lcd_print>
 8001a3e:	e008      	b.n	8001a52 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <menu+0x4cc>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d104      	bne.n	8001a52 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001a48:	4a2c      	ldr	r2, [pc, #176]	; (8001afc <menu+0x534>)
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f7fe ff47 	bl	80008e0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a52:	4a1e      	ldr	r2, [pc, #120]	; (8001acc <menu+0x504>)
 8001a54:	210f      	movs	r1, #15
 8001a56:	2002      	movs	r0, #2
 8001a58:	f7fe ff42 	bl	80008e0 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001a5c:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <menu+0x538>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	220a      	movs	r2, #10
 8001a62:	4917      	ldr	r1, [pc, #92]	; (8001ac0 <menu+0x4f8>)
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00b fa51 	bl	800cf0c <itoa>
			lcd_print(2, 14, snum);
 8001a6a:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <menu+0x4f8>)
 8001a6c:	210e      	movs	r1, #14
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f7fe ff36 	bl	80008e0 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <menu+0x4e4>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b06      	cmp	r3, #6
 8001a7a:	d15f      	bne.n	8001b3c <menu+0x574>
			if(dilSecim == 0) {
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <menu+0x4cc>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d141      	bne.n	8001b08 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001a84:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <menu+0x53c>)
 8001a86:	2101      	movs	r1, #1
 8001a88:	2002      	movs	r0, #2
 8001a8a:	f7fe ff29 	bl	80008e0 <lcd_print>
 8001a8e:	e044      	b.n	8001b1a <menu+0x552>
 8001a90:	0800db84 	.word	0x0800db84
 8001a94:	20000c76 	.word	0x20000c76
 8001a98:	0800db98 	.word	0x0800db98
 8001a9c:	0800dbac 	.word	0x0800dbac
 8001aa0:	20000c55 	.word	0x20000c55
 8001aa4:	0800dbc0 	.word	0x0800dbc0
 8001aa8:	0800dbd4 	.word	0x0800dbd4
 8001aac:	20000c57 	.word	0x20000c57
 8001ab0:	0800dbe8 	.word	0x0800dbe8
 8001ab4:	0800dbf8 	.word	0x0800dbf8
 8001ab8:	0800dc08 	.word	0x0800dc08
 8001abc:	20000c77 	.word	0x20000c77
 8001ac0:	20000bd8 	.word	0x20000bd8
 8001ac4:	0800dc0c 	.word	0x0800dc0c
 8001ac8:	0800dc1c 	.word	0x0800dc1c
 8001acc:	0800dc2c 	.word	0x0800dc2c
 8001ad0:	20000c78 	.word	0x20000c78
 8001ad4:	0800dc30 	.word	0x0800dc30
 8001ad8:	0800dc40 	.word	0x0800dc40
 8001adc:	20000c79 	.word	0x20000c79
 8001ae0:	0800dc50 	.word	0x0800dc50
 8001ae4:	0800dc60 	.word	0x0800dc60
 8001ae8:	20000c7a 	.word	0x20000c7a
 8001aec:	0800dc70 	.word	0x0800dc70
 8001af0:	0800dc80 	.word	0x0800dc80
 8001af4:	20000c7b 	.word	0x20000c7b
 8001af8:	0800dc90 	.word	0x0800dc90
 8001afc:	0800dca0 	.word	0x0800dca0
 8001b00:	20000c7c 	.word	0x20000c7c
 8001b04:	0800dcb0 	.word	0x0800dcb0
			} else if(dilSecim == 1) {
 8001b08:	4b4f      	ldr	r3, [pc, #316]	; (8001c48 <menu+0x680>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d104      	bne.n	8001b1a <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001b10:	4a4e      	ldr	r2, [pc, #312]	; (8001c4c <menu+0x684>)
 8001b12:	2101      	movs	r1, #1
 8001b14:	2002      	movs	r0, #2
 8001b16:	f7fe fee3 	bl	80008e0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b1a:	4a4d      	ldr	r2, [pc, #308]	; (8001c50 <menu+0x688>)
 8001b1c:	210f      	movs	r1, #15
 8001b1e:	2002      	movs	r0, #2
 8001b20:	f7fe fede 	bl	80008e0 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001b24:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <menu+0x68c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	220a      	movs	r2, #10
 8001b2a:	494b      	ldr	r1, [pc, #300]	; (8001c58 <menu+0x690>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00b f9ed 	bl	800cf0c <itoa>
			lcd_print(2, 14, snum);
 8001b32:	4a49      	ldr	r2, [pc, #292]	; (8001c58 <menu+0x690>)
 8001b34:	210e      	movs	r1, #14
 8001b36:	2002      	movs	r0, #2
 8001b38:	f7fe fed2 	bl	80008e0 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001b3c:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <menu+0x694>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b07      	cmp	r3, #7
 8001b42:	d123      	bne.n	8001b8c <menu+0x5c4>
			if(dilSecim == 0) {
 8001b44:	4b40      	ldr	r3, [pc, #256]	; (8001c48 <menu+0x680>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d105      	bne.n	8001b58 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001b4c:	4a44      	ldr	r2, [pc, #272]	; (8001c60 <menu+0x698>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	2002      	movs	r0, #2
 8001b52:	f7fe fec5 	bl	80008e0 <lcd_print>
 8001b56:	e008      	b.n	8001b6a <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001b58:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <menu+0x680>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d104      	bne.n	8001b6a <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001b60:	4a40      	ldr	r2, [pc, #256]	; (8001c64 <menu+0x69c>)
 8001b62:	2101      	movs	r1, #1
 8001b64:	2002      	movs	r0, #2
 8001b66:	f7fe febb 	bl	80008e0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b6a:	4a39      	ldr	r2, [pc, #228]	; (8001c50 <menu+0x688>)
 8001b6c:	210f      	movs	r1, #15
 8001b6e:	2002      	movs	r0, #2
 8001b70:	f7fe feb6 	bl	80008e0 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001b74:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <menu+0x6a0>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	220a      	movs	r2, #10
 8001b7a:	4937      	ldr	r1, [pc, #220]	; (8001c58 <menu+0x690>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00b f9c5 	bl	800cf0c <itoa>
			lcd_print(2, 14, snum);
 8001b82:	4a35      	ldr	r2, [pc, #212]	; (8001c58 <menu+0x690>)
 8001b84:	210e      	movs	r1, #14
 8001b86:	2002      	movs	r0, #2
 8001b88:	f7fe feaa 	bl	80008e0 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001b8c:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <menu+0x694>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d123      	bne.n	8001bdc <menu+0x614>
			if(dilSecim == 0) {
 8001b94:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <menu+0x680>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001b9c:	4a33      	ldr	r2, [pc, #204]	; (8001c6c <menu+0x6a4>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	2002      	movs	r0, #2
 8001ba2:	f7fe fe9d 	bl	80008e0 <lcd_print>
 8001ba6:	e008      	b.n	8001bba <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <menu+0x680>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d104      	bne.n	8001bba <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001bb0:	4a2f      	ldr	r2, [pc, #188]	; (8001c70 <menu+0x6a8>)
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	f7fe fe93 	bl	80008e0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001bba:	4a25      	ldr	r2, [pc, #148]	; (8001c50 <menu+0x688>)
 8001bbc:	210f      	movs	r1, #15
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f7fe fe8e 	bl	80008e0 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <menu+0x6ac>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	220a      	movs	r2, #10
 8001bca:	4923      	ldr	r1, [pc, #140]	; (8001c58 <menu+0x690>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00b f99d 	bl	800cf0c <itoa>
			lcd_print(2, 14, snum);
 8001bd2:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <menu+0x690>)
 8001bd4:	210e      	movs	r1, #14
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	f7fe fe82 	bl	80008e0 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <menu+0x694>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b09      	cmp	r3, #9
 8001be2:	d123      	bne.n	8001c2c <menu+0x664>
			if(dilSecim == 0) {
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <menu+0x680>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001bec:	4a22      	ldr	r2, [pc, #136]	; (8001c78 <menu+0x6b0>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f7fe fe75 	bl	80008e0 <lcd_print>
 8001bf6:	e008      	b.n	8001c0a <menu+0x642>
			} else if(dilSecim == 1) {
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <menu+0x680>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d104      	bne.n	8001c0a <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001c00:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <menu+0x6b4>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	2002      	movs	r0, #2
 8001c06:	f7fe fe6b 	bl	80008e0 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001c0a:	4a1d      	ldr	r2, [pc, #116]	; (8001c80 <menu+0x6b8>)
 8001c0c:	2110      	movs	r1, #16
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f7fe fe66 	bl	80008e0 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <menu+0x6bc>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	220a      	movs	r2, #10
 8001c1a:	490f      	ldr	r1, [pc, #60]	; (8001c58 <menu+0x690>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f00b f975 	bl	800cf0c <itoa>
			lcd_print(2, 15, snum);
 8001c22:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <menu+0x690>)
 8001c24:	210f      	movs	r1, #15
 8001c26:	2002      	movs	r0, #2
 8001c28:	f7fe fe5a 	bl	80008e0 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <menu+0x694>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b0a      	cmp	r3, #10
 8001c32:	d134      	bne.n	8001c9e <menu+0x6d6>
			if(dilSecim == 0) {
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <menu+0x680>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d127      	bne.n	8001c8c <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001c3c:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <menu+0x6c0>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	2002      	movs	r0, #2
 8001c42:	f7fe fe4d 	bl	80008e0 <lcd_print>
 8001c46:	e02a      	b.n	8001c9e <menu+0x6d6>
 8001c48:	20000c76 	.word	0x20000c76
 8001c4c:	0800dcc0 	.word	0x0800dcc0
 8001c50:	0800dc2c 	.word	0x0800dc2c
 8001c54:	20000c7d 	.word	0x20000c7d
 8001c58:	20000bd8 	.word	0x20000bd8
 8001c5c:	20000c57 	.word	0x20000c57
 8001c60:	0800dcd0 	.word	0x0800dcd0
 8001c64:	0800dce0 	.word	0x0800dce0
 8001c68:	20000c7e 	.word	0x20000c7e
 8001c6c:	0800dcf0 	.word	0x0800dcf0
 8001c70:	0800dd00 	.word	0x0800dd00
 8001c74:	20000c7f 	.word	0x20000c7f
 8001c78:	0800dd10 	.word	0x0800dd10
 8001c7c:	0800dd20 	.word	0x0800dd20
 8001c80:	0800dd30 	.word	0x0800dd30
 8001c84:	20000c80 	.word	0x20000c80
 8001c88:	0800dd34 	.word	0x0800dd34
			} else if(dilSecim == 1) {
 8001c8c:	4b82      	ldr	r3, [pc, #520]	; (8001e98 <menu+0x8d0>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d104      	bne.n	8001c9e <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001c94:	4a81      	ldr	r2, [pc, #516]	; (8001e9c <menu+0x8d4>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f7fe fe21 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	487f      	ldr	r0, [pc, #508]	; (8001ea0 <menu+0x8d8>)
 8001ca2:	f008 f8ab 	bl	8009dfc <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d119      	bne.n	8001ce0 <menu+0x718>
 8001cac:	4b7d      	ldr	r3, [pc, #500]	; (8001ea4 <menu+0x8dc>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	f083 0301 	eor.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d012      	beq.n	8001ce0 <menu+0x718>
 8001cba:	4b7b      	ldr	r3, [pc, #492]	; (8001ea8 <menu+0x8e0>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10e      	bne.n	8001ce0 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001cc2:	4b7a      	ldr	r3, [pc, #488]	; (8001eac <menu+0x8e4>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b78      	ldr	r3, [pc, #480]	; (8001eac <menu+0x8e4>)
 8001ccc:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001cce:	4b77      	ldr	r3, [pc, #476]	; (8001eac <menu+0x8e4>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b0a      	cmp	r3, #10
 8001cd4:	d902      	bls.n	8001cdc <menu+0x714>
				hataGostermeSirasi = 0;
 8001cd6:	4b75      	ldr	r3, [pc, #468]	; (8001eac <menu+0x8e4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cdc:	f004 f992 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	486f      	ldr	r0, [pc, #444]	; (8001ea0 <menu+0x8d8>)
 8001ce4:	f008 f88a 	bl	8009dfc <HAL_GPIO_ReadPin>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d119      	bne.n	8001d22 <menu+0x75a>
 8001cee:	4b6d      	ldr	r3, [pc, #436]	; (8001ea4 <menu+0x8dc>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	f083 0301 	eor.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d012      	beq.n	8001d22 <menu+0x75a>
 8001cfc:	4b6a      	ldr	r3, [pc, #424]	; (8001ea8 <menu+0x8e0>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10e      	bne.n	8001d22 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001d04:	4b69      	ldr	r3, [pc, #420]	; (8001eac <menu+0x8e4>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b67      	ldr	r3, [pc, #412]	; (8001eac <menu+0x8e4>)
 8001d0e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001d10:	4b66      	ldr	r3, [pc, #408]	; (8001eac <menu+0x8e4>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b0b      	cmp	r3, #11
 8001d16:	d902      	bls.n	8001d1e <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001d18:	4b64      	ldr	r3, [pc, #400]	; (8001eac <menu+0x8e4>)
 8001d1a:	220a      	movs	r2, #10
 8001d1c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d1e:	f004 f971 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001d22:	2108      	movs	r1, #8
 8001d24:	485e      	ldr	r0, [pc, #376]	; (8001ea0 <menu+0x8d8>)
 8001d26:	f008 f869 	bl	8009dfc <HAL_GPIO_ReadPin>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d153      	bne.n	8001dd8 <menu+0x810>
 8001d30:	4b5c      	ldr	r3, [pc, #368]	; (8001ea4 <menu+0x8dc>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d04c      	beq.n	8001dd8 <menu+0x810>
 8001d3e:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <menu+0x8e4>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b0a      	cmp	r3, #10
 8001d44:	d148      	bne.n	8001dd8 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001d46:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <menu+0x8e8>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	4b59      	ldr	r3, [pc, #356]	; (8001eb4 <menu+0x8ec>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001d54:	4b58      	ldr	r3, [pc, #352]	; (8001eb8 <menu+0x8f0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	4b56      	ldr	r3, [pc, #344]	; (8001eb4 <menu+0x8ec>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001d62:	4b56      	ldr	r3, [pc, #344]	; (8001ebc <menu+0x8f4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
 8001d68:	4b52      	ldr	r3, [pc, #328]	; (8001eb4 <menu+0x8ec>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001d70:	4b53      	ldr	r3, [pc, #332]	; (8001ec0 <menu+0x8f8>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	4b4f      	ldr	r3, [pc, #316]	; (8001eb4 <menu+0x8ec>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001d7e:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <menu+0x8fc>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <menu+0x8ec>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001d8c:	4b4e      	ldr	r3, [pc, #312]	; (8001ec8 <menu+0x900>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
 8001d92:	4b48      	ldr	r3, [pc, #288]	; (8001eb4 <menu+0x8ec>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001d9a:	4b4c      	ldr	r3, [pc, #304]	; (8001ecc <menu+0x904>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
 8001da0:	4b44      	ldr	r3, [pc, #272]	; (8001eb4 <menu+0x8ec>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001da8:	4b49      	ldr	r3, [pc, #292]	; (8001ed0 <menu+0x908>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
 8001dae:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <menu+0x8ec>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001db6:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <menu+0x90c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <menu+0x8ec>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001dc4:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <menu+0x910>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <menu+0x8ec>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001dd2:	4b42      	ldr	r3, [pc, #264]	; (8001edc <menu+0x914>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001dd8:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <menu+0x918>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	f040 80fc 	bne.w	8001fda <menu+0xa12>
		if(dilSecim == 0) {
 8001de2:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <menu+0x8d0>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d105      	bne.n	8001df6 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001dea:	4a3e      	ldr	r2, [pc, #248]	; (8001ee4 <menu+0x91c>)
 8001dec:	2101      	movs	r1, #1
 8001dee:	2001      	movs	r0, #1
 8001df0:	f7fe fd76 	bl	80008e0 <lcd_print>
 8001df4:	e008      	b.n	8001e08 <menu+0x840>
		} else if(dilSecim == 1) {
 8001df6:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <menu+0x8d0>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d104      	bne.n	8001e08 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001dfe:	4a3a      	ldr	r2, [pc, #232]	; (8001ee8 <menu+0x920>)
 8001e00:	2101      	movs	r1, #1
 8001e02:	2001      	movs	r0, #1
 8001e04:	f7fe fd6c 	bl	80008e0 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <menu+0x8e0>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d003      	beq.n	8001e18 <menu+0x850>
 8001e10:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <menu+0x8e0>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d112      	bne.n	8001e3e <menu+0x876>
			if(dilSecim == 0) {
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <menu+0x8d0>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d105      	bne.n	8001e2c <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001e20:	4a32      	ldr	r2, [pc, #200]	; (8001eec <menu+0x924>)
 8001e22:	2101      	movs	r1, #1
 8001e24:	2002      	movs	r0, #2
 8001e26:	f7fe fd5b 	bl	80008e0 <lcd_print>
 8001e2a:	e008      	b.n	8001e3e <menu+0x876>
			} else if(dilSecim == 1) {
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <menu+0x8d0>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d104      	bne.n	8001e3e <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001e34:	4a2e      	ldr	r2, [pc, #184]	; (8001ef0 <menu+0x928>)
 8001e36:	2101      	movs	r1, #1
 8001e38:	2002      	movs	r0, #2
 8001e3a:	f7fe fd51 	bl	80008e0 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001e3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <menu+0x92c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d116      	bne.n	8001e74 <menu+0x8ac>
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <menu+0x8e0>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d112      	bne.n	8001e74 <menu+0x8ac>
			if(dilSecim == 0) {
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <menu+0x8d0>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d105      	bne.n	8001e62 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001e56:	4a28      	ldr	r2, [pc, #160]	; (8001ef8 <menu+0x930>)
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	f7fe fd40 	bl	80008e0 <lcd_print>
 8001e60:	e008      	b.n	8001e74 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <menu+0x8d0>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d104      	bne.n	8001e74 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001e6a:	4a24      	ldr	r2, [pc, #144]	; (8001efc <menu+0x934>)
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f7fe fd36 	bl	80008e0 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <menu+0x92c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d14c      	bne.n	8001f16 <menu+0x94e>
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <menu+0x8e0>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d148      	bne.n	8001f16 <menu+0x94e>
			if(dilSecim == 0) {
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <menu+0x8d0>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d13b      	bne.n	8001f04 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <menu+0x938>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2002      	movs	r0, #2
 8001e92:	f7fe fd25 	bl	80008e0 <lcd_print>
 8001e96:	e03e      	b.n	8001f16 <menu+0x94e>
 8001e98:	20000c76 	.word	0x20000c76
 8001e9c:	0800dd48 	.word	0x0800dd48
 8001ea0:	40010800 	.word	0x40010800
 8001ea4:	20000c84 	.word	0x20000c84
 8001ea8:	20000c64 	.word	0x20000c64
 8001eac:	20000c57 	.word	0x20000c57
 8001eb0:	20000c77 	.word	0x20000c77
 8001eb4:	20000b44 	.word	0x20000b44
 8001eb8:	20000c78 	.word	0x20000c78
 8001ebc:	20000c79 	.word	0x20000c79
 8001ec0:	20000c7a 	.word	0x20000c7a
 8001ec4:	20000c7b 	.word	0x20000c7b
 8001ec8:	20000c7c 	.word	0x20000c7c
 8001ecc:	20000c7d 	.word	0x20000c7d
 8001ed0:	20000c7e 	.word	0x20000c7e
 8001ed4:	20000c7f 	.word	0x20000c7f
 8001ed8:	20000c80 	.word	0x20000c80
 8001edc:	20000c81 	.word	0x20000c81
 8001ee0:	20000c55 	.word	0x20000c55
 8001ee4:	0800dd5c 	.word	0x0800dd5c
 8001ee8:	0800dd70 	.word	0x0800dd70
 8001eec:	0800dd84 	.word	0x0800dd84
 8001ef0:	0800dd98 	.word	0x0800dd98
 8001ef4:	20000c56 	.word	0x20000c56
 8001ef8:	0800ddac 	.word	0x0800ddac
 8001efc:	0800ddbc 	.word	0x0800ddbc
 8001f00:	0800ddcc 	.word	0x0800ddcc
			} else if(dilSecim == 1) {
 8001f04:	4b98      	ldr	r3, [pc, #608]	; (8002168 <menu+0xba0>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d104      	bne.n	8001f16 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001f0c:	4a97      	ldr	r2, [pc, #604]	; (800216c <menu+0xba4>)
 8001f0e:	2101      	movs	r1, #1
 8001f10:	2002      	movs	r0, #2
 8001f12:	f7fe fce5 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f16:	2102      	movs	r1, #2
 8001f18:	4895      	ldr	r0, [pc, #596]	; (8002170 <menu+0xba8>)
 8001f1a:	f007 ff6f 	bl	8009dfc <HAL_GPIO_ReadPin>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d119      	bne.n	8001f58 <menu+0x990>
 8001f24:	4b93      	ldr	r3, [pc, #588]	; (8002174 <menu+0xbac>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	f083 0301 	eor.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d012      	beq.n	8001f58 <menu+0x990>
 8001f32:	4b91      	ldr	r3, [pc, #580]	; (8002178 <menu+0xbb0>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10e      	bne.n	8001f58 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001f3a:	4b90      	ldr	r3, [pc, #576]	; (800217c <menu+0xbb4>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4b8e      	ldr	r3, [pc, #568]	; (800217c <menu+0xbb4>)
 8001f44:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001f46:	4b8d      	ldr	r3, [pc, #564]	; (800217c <menu+0xbb4>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d902      	bls.n	8001f54 <menu+0x98c>
				calismaSekli = 0;
 8001f4e:	4b8b      	ldr	r3, [pc, #556]	; (800217c <menu+0xbb4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f54:	f004 f856 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f58:	2104      	movs	r1, #4
 8001f5a:	4885      	ldr	r0, [pc, #532]	; (8002170 <menu+0xba8>)
 8001f5c:	f007 ff4e 	bl	8009dfc <HAL_GPIO_ReadPin>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d119      	bne.n	8001f9a <menu+0x9d2>
 8001f66:	4b83      	ldr	r3, [pc, #524]	; (8002174 <menu+0xbac>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	f083 0301 	eor.w	r3, r3, #1
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d012      	beq.n	8001f9a <menu+0x9d2>
 8001f74:	4b80      	ldr	r3, [pc, #512]	; (8002178 <menu+0xbb0>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10e      	bne.n	8001f9a <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001f7c:	4b7f      	ldr	r3, [pc, #508]	; (800217c <menu+0xbb4>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b7d      	ldr	r3, [pc, #500]	; (800217c <menu+0xbb4>)
 8001f86:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001f88:	4b7c      	ldr	r3, [pc, #496]	; (800217c <menu+0xbb4>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <menu+0x9ce>
	    		calismaSekli = 1;
 8001f90:	4b7a      	ldr	r3, [pc, #488]	; (800217c <menu+0xbb4>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001f96:	f004 f835 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f9a:	2108      	movs	r1, #8
 8001f9c:	4874      	ldr	r0, [pc, #464]	; (8002170 <menu+0xba8>)
 8001f9e:	f007 ff2d 	bl	8009dfc <HAL_GPIO_ReadPin>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d118      	bne.n	8001fda <menu+0xa12>
 8001fa8:	4b72      	ldr	r3, [pc, #456]	; (8002174 <menu+0xbac>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f083 0301 	eor.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d011      	beq.n	8001fda <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001fb6:	4b71      	ldr	r3, [pc, #452]	; (800217c <menu+0xbb4>)
 8001fb8:	781a      	ldrb	r2, [r3, #0]
 8001fba:	4b71      	ldr	r3, [pc, #452]	; (8002180 <menu+0xbb8>)
 8001fbc:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001fbe:	4b6f      	ldr	r3, [pc, #444]	; (800217c <menu+0xbb4>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d106      	bne.n	8001fd4 <menu+0xa0c>
				altLimit = 1;
 8001fc6:	4b6f      	ldr	r3, [pc, #444]	; (8002184 <menu+0xbbc>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001fcc:	4b6d      	ldr	r3, [pc, #436]	; (8002184 <menu+0xbbc>)
 8001fce:	781a      	ldrb	r2, [r3, #0]
 8001fd0:	4b6b      	ldr	r3, [pc, #428]	; (8002180 <menu+0xbb8>)
 8001fd2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001fd4:	4b6c      	ldr	r3, [pc, #432]	; (8002188 <menu+0xbc0>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001fda:	4b6c      	ldr	r3, [pc, #432]	; (800218c <menu+0xbc4>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	f040 8083 	bne.w	80020ea <menu+0xb22>
		if(dilSecim == 0) {
 8001fe4:	4b60      	ldr	r3, [pc, #384]	; (8002168 <menu+0xba0>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d105      	bne.n	8001ff8 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001fec:	4a68      	ldr	r2, [pc, #416]	; (8002190 <menu+0xbc8>)
 8001fee:	2101      	movs	r1, #1
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f7fe fc75 	bl	80008e0 <lcd_print>
 8001ff6:	e008      	b.n	800200a <menu+0xa42>
		} else if(dilSecim == 1) {
 8001ff8:	4b5b      	ldr	r3, [pc, #364]	; (8002168 <menu+0xba0>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d104      	bne.n	800200a <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8002000:	4a64      	ldr	r2, [pc, #400]	; (8002194 <menu+0xbcc>)
 8002002:	2101      	movs	r1, #1
 8002004:	2001      	movs	r0, #1
 8002006:	f7fe fc6b 	bl	80008e0 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <menu+0xbd0>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d113      	bne.n	800203a <menu+0xa72>
			if(dilSecim == 0) {
 8002012:	4b55      	ldr	r3, [pc, #340]	; (8002168 <menu+0xba0>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 800201a:	4a60      	ldr	r2, [pc, #384]	; (800219c <menu+0xbd4>)
 800201c:	2101      	movs	r1, #1
 800201e:	2002      	movs	r0, #2
 8002020:	f7fe fc5e 	bl	80008e0 <lcd_print>
 8002024:	e012      	b.n	800204c <menu+0xa84>
			} else if(dilSecim == 1) {
 8002026:	4b50      	ldr	r3, [pc, #320]	; (8002168 <menu+0xba0>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d10e      	bne.n	800204c <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 800202e:	4a5c      	ldr	r2, [pc, #368]	; (80021a0 <menu+0xbd8>)
 8002030:	2101      	movs	r1, #1
 8002032:	2002      	movs	r0, #2
 8002034:	f7fe fc54 	bl	80008e0 <lcd_print>
 8002038:	e008      	b.n	800204c <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 800203a:	4b57      	ldr	r3, [pc, #348]	; (8002198 <menu+0xbd0>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d104      	bne.n	800204c <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8002042:	4a58      	ldr	r2, [pc, #352]	; (80021a4 <menu+0xbdc>)
 8002044:	2101      	movs	r1, #1
 8002046:	2002      	movs	r0, #2
 8002048:	f7fe fc4a 	bl	80008e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800204c:	2102      	movs	r1, #2
 800204e:	4848      	ldr	r0, [pc, #288]	; (8002170 <menu+0xba8>)
 8002050:	f007 fed4 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002054:	4603      	mov	r3, r0
 8002056:	2b01      	cmp	r3, #1
 8002058:	d115      	bne.n	8002086 <menu+0xabe>
 800205a:	4b46      	ldr	r3, [pc, #280]	; (8002174 <menu+0xbac>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	f083 0301 	eor.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00e      	beq.n	8002086 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8002068:	4b4b      	ldr	r3, [pc, #300]	; (8002198 <menu+0xbd0>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b49      	ldr	r3, [pc, #292]	; (8002198 <menu+0xbd0>)
 8002072:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8002074:	4b48      	ldr	r3, [pc, #288]	; (8002198 <menu+0xbd0>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d902      	bls.n	8002082 <menu+0xaba>
				emniyetCercevesi = 0;
 800207c:	4b46      	ldr	r3, [pc, #280]	; (8002198 <menu+0xbd0>)
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002082:	f003 ffbf 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002086:	2104      	movs	r1, #4
 8002088:	4839      	ldr	r0, [pc, #228]	; (8002170 <menu+0xba8>)
 800208a:	f007 feb7 	bl	8009dfc <HAL_GPIO_ReadPin>
 800208e:	4603      	mov	r3, r0
 8002090:	2b01      	cmp	r3, #1
 8002092:	d115      	bne.n	80020c0 <menu+0xaf8>
 8002094:	4b37      	ldr	r3, [pc, #220]	; (8002174 <menu+0xbac>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	f083 0301 	eor.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00e      	beq.n	80020c0 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <menu+0xbd0>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <menu+0xbd0>)
 80020ac:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 80020ae:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <menu+0xbd0>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <menu+0xaf4>
		   		emniyetCercevesi = 1;
 80020b6:	4b38      	ldr	r3, [pc, #224]	; (8002198 <menu+0xbd0>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020bc:	f003 ffa2 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80020c0:	2108      	movs	r1, #8
 80020c2:	482b      	ldr	r0, [pc, #172]	; (8002170 <menu+0xba8>)
 80020c4:	f007 fe9a 	bl	8009dfc <HAL_GPIO_ReadPin>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d10d      	bne.n	80020ea <menu+0xb22>
 80020ce:	4b29      	ldr	r3, [pc, #164]	; (8002174 <menu+0xbac>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	f083 0301 	eor.w	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 80020dc:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <menu+0xbd0>)
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	4b27      	ldr	r3, [pc, #156]	; (8002180 <menu+0xbb8>)
 80020e2:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80020e4:	4b28      	ldr	r3, [pc, #160]	; (8002188 <menu+0xbc0>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80020ea:	4b28      	ldr	r3, [pc, #160]	; (800218c <menu+0xbc4>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	f040 80ba 	bne.w	8002268 <menu+0xca0>
		if(dilSecim == 0) {
 80020f4:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <menu+0xba0>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 80020fc:	4a2a      	ldr	r2, [pc, #168]	; (80021a8 <menu+0xbe0>)
 80020fe:	2101      	movs	r1, #1
 8002100:	2001      	movs	r0, #1
 8002102:	f7fe fbed 	bl	80008e0 <lcd_print>
 8002106:	e008      	b.n	800211a <menu+0xb52>
		} else if(dilSecim == 1) {
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <menu+0xba0>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d104      	bne.n	800211a <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8002110:	4a26      	ldr	r2, [pc, #152]	; (80021ac <menu+0xbe4>)
 8002112:	2101      	movs	r1, #1
 8002114:	2001      	movs	r0, #1
 8002116:	f7fe fbe3 	bl	80008e0 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 800211a:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <menu+0xbe8>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d113      	bne.n	800214a <menu+0xb82>
			if(dilSecim == 0) {
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <menu+0xba0>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d105      	bne.n	8002136 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 800212a:	4a1c      	ldr	r2, [pc, #112]	; (800219c <menu+0xbd4>)
 800212c:	2101      	movs	r1, #1
 800212e:	2002      	movs	r0, #2
 8002130:	f7fe fbd6 	bl	80008e0 <lcd_print>
 8002134:	e049      	b.n	80021ca <menu+0xc02>
			} else if(dilSecim == 1) {
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <menu+0xba0>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d145      	bne.n	80021ca <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 800213e:	4a18      	ldr	r2, [pc, #96]	; (80021a0 <menu+0xbd8>)
 8002140:	2101      	movs	r1, #1
 8002142:	2002      	movs	r0, #2
 8002144:	f7fe fbcc 	bl	80008e0 <lcd_print>
 8002148:	e03f      	b.n	80021ca <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 800214a:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <menu+0xbe8>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d13b      	bne.n	80021ca <menu+0xc02>
			if(dilSecim == 0) {
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <menu+0xba0>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d12e      	bne.n	80021b8 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 800215a:	4a16      	ldr	r2, [pc, #88]	; (80021b4 <menu+0xbec>)
 800215c:	2101      	movs	r1, #1
 800215e:	2002      	movs	r0, #2
 8002160:	f7fe fbbe 	bl	80008e0 <lcd_print>
 8002164:	e031      	b.n	80021ca <menu+0xc02>
 8002166:	bf00      	nop
 8002168:	20000c76 	.word	0x20000c76
 800216c:	0800dddc 	.word	0x0800dddc
 8002170:	40010800 	.word	0x40010800
 8002174:	20000c84 	.word	0x20000c84
 8002178:	20000c64 	.word	0x20000c64
 800217c:	20000c56 	.word	0x20000c56
 8002180:	20000b44 	.word	0x20000b44
 8002184:	20000c5b 	.word	0x20000c5b
 8002188:	20000c81 	.word	0x20000c81
 800218c:	20000c55 	.word	0x20000c55
 8002190:	0800ddec 	.word	0x0800ddec
 8002194:	0800de00 	.word	0x0800de00
 8002198:	20000c59 	.word	0x20000c59
 800219c:	0800de14 	.word	0x0800de14
 80021a0:	0800de28 	.word	0x0800de28
 80021a4:	0800de3c 	.word	0x0800de3c
 80021a8:	0800de4c 	.word	0x0800de4c
 80021ac:	0800de60 	.word	0x0800de60
 80021b0:	20000c5a 	.word	0x20000c5a
 80021b4:	0800de74 	.word	0x0800de74
			} else if(dilSecim == 1) {
 80021b8:	4b92      	ldr	r3, [pc, #584]	; (8002404 <menu+0xe3c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d104      	bne.n	80021ca <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80021c0:	4a91      	ldr	r2, [pc, #580]	; (8002408 <menu+0xe40>)
 80021c2:	2101      	movs	r1, #1
 80021c4:	2002      	movs	r0, #2
 80021c6:	f7fe fb8b 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ca:	2102      	movs	r1, #2
 80021cc:	488f      	ldr	r0, [pc, #572]	; (800240c <menu+0xe44>)
 80021ce:	f007 fe15 	bl	8009dfc <HAL_GPIO_ReadPin>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d115      	bne.n	8002204 <menu+0xc3c>
 80021d8:	4b8d      	ldr	r3, [pc, #564]	; (8002410 <menu+0xe48>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	f083 0301 	eor.w	r3, r3, #1
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00e      	beq.n	8002204 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80021e6:	4b8b      	ldr	r3, [pc, #556]	; (8002414 <menu+0xe4c>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	3301      	adds	r3, #1
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4b89      	ldr	r3, [pc, #548]	; (8002414 <menu+0xe4c>)
 80021f0:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80021f2:	4b88      	ldr	r3, [pc, #544]	; (8002414 <menu+0xe4c>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d902      	bls.n	8002200 <menu+0xc38>
				yavaslamaLimit = 0;
 80021fa:	4b86      	ldr	r3, [pc, #536]	; (8002414 <menu+0xe4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002200:	f003 ff00 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002204:	2104      	movs	r1, #4
 8002206:	4881      	ldr	r0, [pc, #516]	; (800240c <menu+0xe44>)
 8002208:	f007 fdf8 	bl	8009dfc <HAL_GPIO_ReadPin>
 800220c:	4603      	mov	r3, r0
 800220e:	2b01      	cmp	r3, #1
 8002210:	d115      	bne.n	800223e <menu+0xc76>
 8002212:	4b7f      	ldr	r3, [pc, #508]	; (8002410 <menu+0xe48>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	f083 0301 	eor.w	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00e      	beq.n	800223e <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002220:	4b7c      	ldr	r3, [pc, #496]	; (8002414 <menu+0xe4c>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	3b01      	subs	r3, #1
 8002226:	b2da      	uxtb	r2, r3
 8002228:	4b7a      	ldr	r3, [pc, #488]	; (8002414 <menu+0xe4c>)
 800222a:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800222c:	4b79      	ldr	r3, [pc, #484]	; (8002414 <menu+0xe4c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <menu+0xc72>
		   		yavaslamaLimit = 1;
 8002234:	4b77      	ldr	r3, [pc, #476]	; (8002414 <menu+0xe4c>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800223a:	f003 fee3 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800223e:	2108      	movs	r1, #8
 8002240:	4872      	ldr	r0, [pc, #456]	; (800240c <menu+0xe44>)
 8002242:	f007 fddb 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002246:	4603      	mov	r3, r0
 8002248:	2b01      	cmp	r3, #1
 800224a:	d10d      	bne.n	8002268 <menu+0xca0>
 800224c:	4b70      	ldr	r3, [pc, #448]	; (8002410 <menu+0xe48>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	f083 0301 	eor.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 800225a:	4b6e      	ldr	r3, [pc, #440]	; (8002414 <menu+0xe4c>)
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	4b6e      	ldr	r3, [pc, #440]	; (8002418 <menu+0xe50>)
 8002260:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002262:	4b6e      	ldr	r3, [pc, #440]	; (800241c <menu+0xe54>)
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002268:	4b6d      	ldr	r3, [pc, #436]	; (8002420 <menu+0xe58>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b05      	cmp	r3, #5
 800226e:	f040 80b9 	bne.w	80023e4 <menu+0xe1c>
		if(dilSecim == 0) {
 8002272:	4b64      	ldr	r3, [pc, #400]	; (8002404 <menu+0xe3c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d105      	bne.n	8002286 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 800227a:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <menu+0xe5c>)
 800227c:	2101      	movs	r1, #1
 800227e:	2001      	movs	r0, #1
 8002280:	f7fe fb2e 	bl	80008e0 <lcd_print>
 8002284:	e008      	b.n	8002298 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8002286:	4b5f      	ldr	r3, [pc, #380]	; (8002404 <menu+0xe3c>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d104      	bne.n	8002298 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800228e:	4a66      	ldr	r2, [pc, #408]	; (8002428 <menu+0xe60>)
 8002290:	2101      	movs	r1, #1
 8002292:	2001      	movs	r0, #1
 8002294:	f7fe fb24 	bl	80008e0 <lcd_print>
		}

		if(altLimit == 0) {
 8002298:	4b64      	ldr	r3, [pc, #400]	; (800242c <menu+0xe64>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d113      	bne.n	80022c8 <menu+0xd00>
			if(dilSecim == 0) {
 80022a0:	4b58      	ldr	r3, [pc, #352]	; (8002404 <menu+0xe3c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d105      	bne.n	80022b4 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 80022a8:	4a61      	ldr	r2, [pc, #388]	; (8002430 <menu+0xe68>)
 80022aa:	2101      	movs	r1, #1
 80022ac:	2002      	movs	r0, #2
 80022ae:	f7fe fb17 	bl	80008e0 <lcd_print>
 80022b2:	e020      	b.n	80022f6 <menu+0xd2e>
			} else if(dilSecim == 1) {
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <menu+0xe3c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d11c      	bne.n	80022f6 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80022bc:	4a5d      	ldr	r2, [pc, #372]	; (8002434 <menu+0xe6c>)
 80022be:	2101      	movs	r1, #1
 80022c0:	2002      	movs	r0, #2
 80022c2:	f7fe fb0d 	bl	80008e0 <lcd_print>
 80022c6:	e016      	b.n	80022f6 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80022c8:	4b58      	ldr	r3, [pc, #352]	; (800242c <menu+0xe64>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d112      	bne.n	80022f6 <menu+0xd2e>
			if(dilSecim == 0){
 80022d0:	4b4c      	ldr	r3, [pc, #304]	; (8002404 <menu+0xe3c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80022d8:	4a57      	ldr	r2, [pc, #348]	; (8002438 <menu+0xe70>)
 80022da:	2101      	movs	r1, #1
 80022dc:	2002      	movs	r0, #2
 80022de:	f7fe faff 	bl	80008e0 <lcd_print>
 80022e2:	e008      	b.n	80022f6 <menu+0xd2e>
			} else if(dilSecim == 1){
 80022e4:	4b47      	ldr	r3, [pc, #284]	; (8002404 <menu+0xe3c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d104      	bne.n	80022f6 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80022ec:	4a46      	ldr	r2, [pc, #280]	; (8002408 <menu+0xe40>)
 80022ee:	2101      	movs	r1, #1
 80022f0:	2002      	movs	r0, #2
 80022f2:	f7fe faf5 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80022f6:	2102      	movs	r1, #2
 80022f8:	4844      	ldr	r0, [pc, #272]	; (800240c <menu+0xe44>)
 80022fa:	f007 fd7f 	bl	8009dfc <HAL_GPIO_ReadPin>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b01      	cmp	r3, #1
 8002302:	d119      	bne.n	8002338 <menu+0xd70>
 8002304:	4b42      	ldr	r3, [pc, #264]	; (8002410 <menu+0xe48>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	f083 0301 	eor.w	r3, r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d012      	beq.n	8002338 <menu+0xd70>
 8002312:	4b4a      	ldr	r3, [pc, #296]	; (800243c <menu+0xe74>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10e      	bne.n	8002338 <menu+0xd70>
			altLimit = altLimit + 1;
 800231a:	4b44      	ldr	r3, [pc, #272]	; (800242c <menu+0xe64>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	3301      	adds	r3, #1
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4b42      	ldr	r3, [pc, #264]	; (800242c <menu+0xe64>)
 8002324:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8002326:	4b41      	ldr	r3, [pc, #260]	; (800242c <menu+0xe64>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d902      	bls.n	8002334 <menu+0xd6c>
				altLimit = 0;
 800232e:	4b3f      	ldr	r3, [pc, #252]	; (800242c <menu+0xe64>)
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002334:	f003 fe66 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002338:	2104      	movs	r1, #4
 800233a:	4834      	ldr	r0, [pc, #208]	; (800240c <menu+0xe44>)
 800233c:	f007 fd5e 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002340:	4603      	mov	r3, r0
 8002342:	2b01      	cmp	r3, #1
 8002344:	d119      	bne.n	800237a <menu+0xdb2>
 8002346:	4b32      	ldr	r3, [pc, #200]	; (8002410 <menu+0xe48>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	f083 0301 	eor.w	r3, r3, #1
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d012      	beq.n	800237a <menu+0xdb2>
 8002354:	4b39      	ldr	r3, [pc, #228]	; (800243c <menu+0xe74>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10e      	bne.n	800237a <menu+0xdb2>
			altLimit = altLimit - 1;
 800235c:	4b33      	ldr	r3, [pc, #204]	; (800242c <menu+0xe64>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	3b01      	subs	r3, #1
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b31      	ldr	r3, [pc, #196]	; (800242c <menu+0xe64>)
 8002366:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002368:	4b30      	ldr	r3, [pc, #192]	; (800242c <menu+0xe64>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <menu+0xdae>
		   		altLimit = 1;
 8002370:	4b2e      	ldr	r3, [pc, #184]	; (800242c <menu+0xe64>)
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002376:	f003 fe45 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800237a:	2108      	movs	r1, #8
 800237c:	4823      	ldr	r0, [pc, #140]	; (800240c <menu+0xe44>)
 800237e:	f007 fd3d 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002382:	4603      	mov	r3, r0
 8002384:	2b01      	cmp	r3, #1
 8002386:	d12d      	bne.n	80023e4 <menu+0xe1c>
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <menu+0xe48>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	f083 0301 	eor.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d026      	beq.n	80023e4 <menu+0xe1c>
			eepromData[5] = altLimit;
 8002396:	4b25      	ldr	r3, [pc, #148]	; (800242c <menu+0xe64>)
 8002398:	781a      	ldrb	r2, [r3, #0]
 800239a:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <menu+0xe50>)
 800239c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800239e:	4b23      	ldr	r3, [pc, #140]	; (800242c <menu+0xe64>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d110      	bne.n	80023c8 <menu+0xe00>
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <menu+0xe78>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <menu+0xdee>
 80023ae:	4b24      	ldr	r3, [pc, #144]	; (8002440 <menu+0xe78>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d108      	bne.n	80023c8 <menu+0xe00>
				kapiTablaAcKonum = 3;
 80023b6:	4b22      	ldr	r3, [pc, #136]	; (8002440 <menu+0xe78>)
 80023b8:	2203      	movs	r2, #3
 80023ba:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80023bc:	4b20      	ldr	r3, [pc, #128]	; (8002440 <menu+0xe78>)
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	4b15      	ldr	r3, [pc, #84]	; (8002418 <menu+0xe50>)
 80023c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80023c6:	e00a      	b.n	80023de <menu+0xe16>
			} else if(altLimit == 0) {
 80023c8:	4b18      	ldr	r3, [pc, #96]	; (800242c <menu+0xe64>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d106      	bne.n	80023de <menu+0xe16>
				platformSilindirTipi = 0;
 80023d0:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <menu+0xe7c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <menu+0xe7c>)
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <menu+0xe50>)
 80023dc:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <menu+0xe54>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <menu+0xe58>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b06      	cmp	r3, #6
 80023ea:	f040 80b6 	bne.w	800255a <menu+0xf92>
		if(dilSecim == 0) {
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <menu+0xe3c>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d12a      	bne.n	800244c <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80023f6:	4a14      	ldr	r2, [pc, #80]	; (8002448 <menu+0xe80>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	2001      	movs	r0, #1
 80023fc:	f7fe fa70 	bl	80008e0 <lcd_print>
 8002400:	e02d      	b.n	800245e <menu+0xe96>
 8002402:	bf00      	nop
 8002404:	20000c76 	.word	0x20000c76
 8002408:	0800de88 	.word	0x0800de88
 800240c:	40010800 	.word	0x40010800
 8002410:	20000c84 	.word	0x20000c84
 8002414:	20000c5a 	.word	0x20000c5a
 8002418:	20000b44 	.word	0x20000b44
 800241c:	20000c81 	.word	0x20000c81
 8002420:	20000c55 	.word	0x20000c55
 8002424:	0800de9c 	.word	0x0800de9c
 8002428:	0800deb0 	.word	0x0800deb0
 800242c:	20000c5b 	.word	0x20000c5b
 8002430:	0800de14 	.word	0x0800de14
 8002434:	0800de28 	.word	0x0800de28
 8002438:	0800de74 	.word	0x0800de74
 800243c:	20000c56 	.word	0x20000c56
 8002440:	20000c62 	.word	0x20000c62
 8002444:	20000c68 	.word	0x20000c68
 8002448:	0800dec4 	.word	0x0800dec4
		} else if(dilSecim == 1){
 800244c:	4b7a      	ldr	r3, [pc, #488]	; (8002638 <menu+0x1070>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d104      	bne.n	800245e <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002454:	4a79      	ldr	r2, [pc, #484]	; (800263c <menu+0x1074>)
 8002456:	2101      	movs	r1, #1
 8002458:	2001      	movs	r0, #1
 800245a:	f7fe fa41 	bl	80008e0 <lcd_print>
		}
		if(basincSalteri == 0){
 800245e:	4b78      	ldr	r3, [pc, #480]	; (8002640 <menu+0x1078>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d113      	bne.n	800248e <menu+0xec6>
			if(dilSecim == 0) {
 8002466:	4b74      	ldr	r3, [pc, #464]	; (8002638 <menu+0x1070>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 800246e:	4a75      	ldr	r2, [pc, #468]	; (8002644 <menu+0x107c>)
 8002470:	2101      	movs	r1, #1
 8002472:	2002      	movs	r0, #2
 8002474:	f7fe fa34 	bl	80008e0 <lcd_print>
 8002478:	e020      	b.n	80024bc <menu+0xef4>
			} else if(dilSecim == 1){
 800247a:	4b6f      	ldr	r3, [pc, #444]	; (8002638 <menu+0x1070>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d11c      	bne.n	80024bc <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8002482:	4a71      	ldr	r2, [pc, #452]	; (8002648 <menu+0x1080>)
 8002484:	2101      	movs	r1, #1
 8002486:	2002      	movs	r0, #2
 8002488:	f7fe fa2a 	bl	80008e0 <lcd_print>
 800248c:	e016      	b.n	80024bc <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800248e:	4b6c      	ldr	r3, [pc, #432]	; (8002640 <menu+0x1078>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d112      	bne.n	80024bc <menu+0xef4>
			if(dilSecim == 0) {
 8002496:	4b68      	ldr	r3, [pc, #416]	; (8002638 <menu+0x1070>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d105      	bne.n	80024aa <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800249e:	4a6b      	ldr	r2, [pc, #428]	; (800264c <menu+0x1084>)
 80024a0:	2101      	movs	r1, #1
 80024a2:	2002      	movs	r0, #2
 80024a4:	f7fe fa1c 	bl	80008e0 <lcd_print>
 80024a8:	e008      	b.n	80024bc <menu+0xef4>
			} else if(dilSecim == 1) {
 80024aa:	4b63      	ldr	r3, [pc, #396]	; (8002638 <menu+0x1070>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d104      	bne.n	80024bc <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80024b2:	4a67      	ldr	r2, [pc, #412]	; (8002650 <menu+0x1088>)
 80024b4:	2101      	movs	r1, #1
 80024b6:	2002      	movs	r0, #2
 80024b8:	f7fe fa12 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024bc:	2102      	movs	r1, #2
 80024be:	4865      	ldr	r0, [pc, #404]	; (8002654 <menu+0x108c>)
 80024c0:	f007 fc9c 	bl	8009dfc <HAL_GPIO_ReadPin>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d115      	bne.n	80024f6 <menu+0xf2e>
 80024ca:	4b63      	ldr	r3, [pc, #396]	; (8002658 <menu+0x1090>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	f083 0301 	eor.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80024d8:	4b59      	ldr	r3, [pc, #356]	; (8002640 <menu+0x1078>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	3301      	adds	r3, #1
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b57      	ldr	r3, [pc, #348]	; (8002640 <menu+0x1078>)
 80024e2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80024e4:	4b56      	ldr	r3, [pc, #344]	; (8002640 <menu+0x1078>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d902      	bls.n	80024f2 <menu+0xf2a>
				basincSalteri = 0;
 80024ec:	4b54      	ldr	r3, [pc, #336]	; (8002640 <menu+0x1078>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024f2:	f003 fd87 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024f6:	2104      	movs	r1, #4
 80024f8:	4856      	ldr	r0, [pc, #344]	; (8002654 <menu+0x108c>)
 80024fa:	f007 fc7f 	bl	8009dfc <HAL_GPIO_ReadPin>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b01      	cmp	r3, #1
 8002502:	d115      	bne.n	8002530 <menu+0xf68>
 8002504:	4b54      	ldr	r3, [pc, #336]	; (8002658 <menu+0x1090>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00e      	beq.n	8002530 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8002512:	4b4b      	ldr	r3, [pc, #300]	; (8002640 <menu+0x1078>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	3b01      	subs	r3, #1
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b49      	ldr	r3, [pc, #292]	; (8002640 <menu+0x1078>)
 800251c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800251e:	4b48      	ldr	r3, [pc, #288]	; (8002640 <menu+0x1078>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <menu+0xf64>
		   		basincSalteri = 1;
 8002526:	4b46      	ldr	r3, [pc, #280]	; (8002640 <menu+0x1078>)
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800252c:	f003 fd6a 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002530:	2108      	movs	r1, #8
 8002532:	4848      	ldr	r0, [pc, #288]	; (8002654 <menu+0x108c>)
 8002534:	f007 fc62 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002538:	4603      	mov	r3, r0
 800253a:	2b01      	cmp	r3, #1
 800253c:	d10d      	bne.n	800255a <menu+0xf92>
 800253e:	4b46      	ldr	r3, [pc, #280]	; (8002658 <menu+0x1090>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	f083 0301 	eor.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d006      	beq.n	800255a <menu+0xf92>
			eepromData[6] = basincSalteri;
 800254c:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <menu+0x1078>)
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	4b42      	ldr	r3, [pc, #264]	; (800265c <menu+0x1094>)
 8002552:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002554:	4b42      	ldr	r3, [pc, #264]	; (8002660 <menu+0x1098>)
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800255a:	4b42      	ldr	r3, [pc, #264]	; (8002664 <menu+0x109c>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b07      	cmp	r3, #7
 8002560:	f040 80f5 	bne.w	800274e <menu+0x1186>
		if(dilSecim == 0) {
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <menu+0x1070>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800256c:	4a3e      	ldr	r2, [pc, #248]	; (8002668 <menu+0x10a0>)
 800256e:	2101      	movs	r1, #1
 8002570:	2001      	movs	r0, #1
 8002572:	f7fe f9b5 	bl	80008e0 <lcd_print>
 8002576:	e008      	b.n	800258a <menu+0xfc2>
		} else if(dilSecim == 1){
 8002578:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <menu+0x1070>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d104      	bne.n	800258a <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002580:	4a3a      	ldr	r2, [pc, #232]	; (800266c <menu+0x10a4>)
 8002582:	2101      	movs	r1, #1
 8002584:	2001      	movs	r0, #1
 8002586:	f7fe f9ab 	bl	80008e0 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800258a:	4b39      	ldr	r3, [pc, #228]	; (8002670 <menu+0x10a8>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d113      	bne.n	80025ba <menu+0xff2>
			if(dilSecim == 0) {
 8002592:	4b29      	ldr	r3, [pc, #164]	; (8002638 <menu+0x1070>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800259a:	4a2a      	ldr	r2, [pc, #168]	; (8002644 <menu+0x107c>)
 800259c:	2101      	movs	r1, #1
 800259e:	2002      	movs	r0, #2
 80025a0:	f7fe f99e 	bl	80008e0 <lcd_print>
 80025a4:	e079      	b.n	800269a <menu+0x10d2>
			} else if(dilSecim == 1){
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <menu+0x1070>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d175      	bne.n	800269a <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80025ae:	4a26      	ldr	r2, [pc, #152]	; (8002648 <menu+0x1080>)
 80025b0:	2101      	movs	r1, #1
 80025b2:	2002      	movs	r0, #2
 80025b4:	f7fe f994 	bl	80008e0 <lcd_print>
 80025b8:	e06f      	b.n	800269a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80025ba:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <menu+0x10a8>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d113      	bne.n	80025ea <menu+0x1022>
			if(dilSecim == 0) {
 80025c2:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <menu+0x1070>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d105      	bne.n	80025d6 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80025ca:	4a2a      	ldr	r2, [pc, #168]	; (8002674 <menu+0x10ac>)
 80025cc:	2101      	movs	r1, #1
 80025ce:	2002      	movs	r0, #2
 80025d0:	f7fe f986 	bl	80008e0 <lcd_print>
 80025d4:	e061      	b.n	800269a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <menu+0x1070>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d15d      	bne.n	800269a <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80025de:	4a26      	ldr	r2, [pc, #152]	; (8002678 <menu+0x10b0>)
 80025e0:	2101      	movs	r1, #1
 80025e2:	2002      	movs	r0, #2
 80025e4:	f7fe f97c 	bl	80008e0 <lcd_print>
 80025e8:	e057      	b.n	800269a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80025ea:	4b21      	ldr	r3, [pc, #132]	; (8002670 <menu+0x10a8>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d113      	bne.n	800261a <menu+0x1052>
			if(dilSecim == 0) {
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <menu+0x1070>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80025fa:	4a20      	ldr	r2, [pc, #128]	; (800267c <menu+0x10b4>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	2002      	movs	r0, #2
 8002600:	f7fe f96e 	bl	80008e0 <lcd_print>
 8002604:	e049      	b.n	800269a <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <menu+0x1070>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d145      	bne.n	800269a <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800260e:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <menu+0x10b8>)
 8002610:	2101      	movs	r1, #1
 8002612:	2002      	movs	r0, #2
 8002614:	f7fe f964 	bl	80008e0 <lcd_print>
 8002618:	e03f      	b.n	800269a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <menu+0x10a8>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d13b      	bne.n	800269a <menu+0x10d2>
			if(dilSecim == 0) {
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <menu+0x1070>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d12e      	bne.n	8002688 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800262a:	4a16      	ldr	r2, [pc, #88]	; (8002684 <menu+0x10bc>)
 800262c:	2101      	movs	r1, #1
 800262e:	2002      	movs	r0, #2
 8002630:	f7fe f956 	bl	80008e0 <lcd_print>
 8002634:	e031      	b.n	800269a <menu+0x10d2>
 8002636:	bf00      	nop
 8002638:	20000c76 	.word	0x20000c76
 800263c:	0800ded4 	.word	0x0800ded4
 8002640:	20000c5c 	.word	0x20000c5c
 8002644:	0800de14 	.word	0x0800de14
 8002648:	0800de28 	.word	0x0800de28
 800264c:	0800de74 	.word	0x0800de74
 8002650:	0800de88 	.word	0x0800de88
 8002654:	40010800 	.word	0x40010800
 8002658:	20000c84 	.word	0x20000c84
 800265c:	20000b44 	.word	0x20000b44
 8002660:	20000c81 	.word	0x20000c81
 8002664:	20000c55 	.word	0x20000c55
 8002668:	0800dee4 	.word	0x0800dee4
 800266c:	0800def8 	.word	0x0800def8
 8002670:	20000c5d 	.word	0x20000c5d
 8002674:	0800df0c 	.word	0x0800df0c
 8002678:	0800df20 	.word	0x0800df20
 800267c:	0800df34 	.word	0x0800df34
 8002680:	0800df48 	.word	0x0800df48
 8002684:	0800df5c 	.word	0x0800df5c
			} else if(dilSecim == 1){
 8002688:	4b99      	ldr	r3, [pc, #612]	; (80028f0 <menu+0x1328>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d104      	bne.n	800269a <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002690:	4a98      	ldr	r2, [pc, #608]	; (80028f4 <menu+0x132c>)
 8002692:	2101      	movs	r1, #1
 8002694:	2002      	movs	r0, #2
 8002696:	f7fe f923 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800269a:	2102      	movs	r1, #2
 800269c:	4896      	ldr	r0, [pc, #600]	; (80028f8 <menu+0x1330>)
 800269e:	f007 fbad 	bl	8009dfc <HAL_GPIO_ReadPin>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d115      	bne.n	80026d4 <menu+0x110c>
 80026a8:	4b94      	ldr	r3, [pc, #592]	; (80028fc <menu+0x1334>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	f083 0301 	eor.w	r3, r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00e      	beq.n	80026d4 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80026b6:	4b92      	ldr	r3, [pc, #584]	; (8002900 <menu+0x1338>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	3301      	adds	r3, #1
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4b90      	ldr	r3, [pc, #576]	; (8002900 <menu+0x1338>)
 80026c0:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80026c2:	4b8f      	ldr	r3, [pc, #572]	; (8002900 <menu+0x1338>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d902      	bls.n	80026d0 <menu+0x1108>
				kapiSecimleri = 0;
 80026ca:	4b8d      	ldr	r3, [pc, #564]	; (8002900 <menu+0x1338>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026d0:	f003 fc98 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026d4:	2104      	movs	r1, #4
 80026d6:	4888      	ldr	r0, [pc, #544]	; (80028f8 <menu+0x1330>)
 80026d8:	f007 fb90 	bl	8009dfc <HAL_GPIO_ReadPin>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d115      	bne.n	800270e <menu+0x1146>
 80026e2:	4b86      	ldr	r3, [pc, #536]	; (80028fc <menu+0x1334>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	f083 0301 	eor.w	r3, r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00e      	beq.n	800270e <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80026f0:	4b83      	ldr	r3, [pc, #524]	; (8002900 <menu+0x1338>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	4b81      	ldr	r3, [pc, #516]	; (8002900 <menu+0x1338>)
 80026fa:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80026fc:	4b80      	ldr	r3, [pc, #512]	; (8002900 <menu+0x1338>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b04      	cmp	r3, #4
 8002702:	d902      	bls.n	800270a <menu+0x1142>
		   		kapiSecimleri = 3;
 8002704:	4b7e      	ldr	r3, [pc, #504]	; (8002900 <menu+0x1338>)
 8002706:	2203      	movs	r2, #3
 8002708:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800270a:	f003 fc7b 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800270e:	2108      	movs	r1, #8
 8002710:	4879      	ldr	r0, [pc, #484]	; (80028f8 <menu+0x1330>)
 8002712:	f007 fb73 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002716:	4603      	mov	r3, r0
 8002718:	2b01      	cmp	r3, #1
 800271a:	d118      	bne.n	800274e <menu+0x1186>
 800271c:	4b77      	ldr	r3, [pc, #476]	; (80028fc <menu+0x1334>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	f083 0301 	eor.w	r3, r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d011      	beq.n	800274e <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 800272a:	4b75      	ldr	r3, [pc, #468]	; (8002900 <menu+0x1338>)
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	4b75      	ldr	r3, [pc, #468]	; (8002904 <menu+0x133c>)
 8002730:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002732:	4b73      	ldr	r3, [pc, #460]	; (8002900 <menu+0x1338>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <menu+0x1180>
				altLimit = 1;
 800273a:	4b73      	ldr	r3, [pc, #460]	; (8002908 <menu+0x1340>)
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002740:	4b71      	ldr	r3, [pc, #452]	; (8002908 <menu+0x1340>)
 8002742:	781a      	ldrb	r2, [r3, #0]
 8002744:	4b6f      	ldr	r3, [pc, #444]	; (8002904 <menu+0x133c>)
 8002746:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002748:	4b70      	ldr	r3, [pc, #448]	; (800290c <menu+0x1344>)
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800274e:	4b70      	ldr	r3, [pc, #448]	; (8002910 <menu+0x1348>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b08      	cmp	r3, #8
 8002754:	f040 8092 	bne.w	800287c <menu+0x12b4>
		if(dilSecim == 0) {
 8002758:	4b65      	ldr	r3, [pc, #404]	; (80028f0 <menu+0x1328>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d105      	bne.n	800276c <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002760:	4a6c      	ldr	r2, [pc, #432]	; (8002914 <menu+0x134c>)
 8002762:	2101      	movs	r1, #1
 8002764:	2001      	movs	r0, #1
 8002766:	f7fe f8bb 	bl	80008e0 <lcd_print>
 800276a:	e008      	b.n	800277e <menu+0x11b6>
		} else if(dilSecim == 1) {
 800276c:	4b60      	ldr	r3, [pc, #384]	; (80028f0 <menu+0x1328>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d104      	bne.n	800277e <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002774:	4a68      	ldr	r2, [pc, #416]	; (8002918 <menu+0x1350>)
 8002776:	2101      	movs	r1, #1
 8002778:	2001      	movs	r0, #1
 800277a:	f7fe f8b1 	bl	80008e0 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800277e:	4b67      	ldr	r3, [pc, #412]	; (800291c <menu+0x1354>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d113      	bne.n	80027ae <menu+0x11e6>
			if(dilSecim == 0) {
 8002786:	4b5a      	ldr	r3, [pc, #360]	; (80028f0 <menu+0x1328>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d105      	bne.n	800279a <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800278e:	4a64      	ldr	r2, [pc, #400]	; (8002920 <menu+0x1358>)
 8002790:	2101      	movs	r1, #1
 8002792:	2002      	movs	r0, #2
 8002794:	f7fe f8a4 	bl	80008e0 <lcd_print>
 8002798:	e020      	b.n	80027dc <menu+0x1214>
			} else if(dilSecim == 1) {
 800279a:	4b55      	ldr	r3, [pc, #340]	; (80028f0 <menu+0x1328>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d11c      	bne.n	80027dc <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80027a2:	4a60      	ldr	r2, [pc, #384]	; (8002924 <menu+0x135c>)
 80027a4:	2101      	movs	r1, #1
 80027a6:	2002      	movs	r0, #2
 80027a8:	f7fe f89a 	bl	80008e0 <lcd_print>
 80027ac:	e016      	b.n	80027dc <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80027ae:	4b5b      	ldr	r3, [pc, #364]	; (800291c <menu+0x1354>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d112      	bne.n	80027dc <menu+0x1214>
			if(dilSecim == 0){
 80027b6:	4b4e      	ldr	r3, [pc, #312]	; (80028f0 <menu+0x1328>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d105      	bne.n	80027ca <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80027be:	4a5a      	ldr	r2, [pc, #360]	; (8002928 <menu+0x1360>)
 80027c0:	2101      	movs	r1, #1
 80027c2:	2002      	movs	r0, #2
 80027c4:	f7fe f88c 	bl	80008e0 <lcd_print>
 80027c8:	e008      	b.n	80027dc <menu+0x1214>
			} else if(dilSecim == 1){
 80027ca:	4b49      	ldr	r3, [pc, #292]	; (80028f0 <menu+0x1328>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d104      	bne.n	80027dc <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80027d2:	4a56      	ldr	r2, [pc, #344]	; (800292c <menu+0x1364>)
 80027d4:	2101      	movs	r1, #1
 80027d6:	2002      	movs	r0, #2
 80027d8:	f7fe f882 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027dc:	2102      	movs	r1, #2
 80027de:	4846      	ldr	r0, [pc, #280]	; (80028f8 <menu+0x1330>)
 80027e0:	f007 fb0c 	bl	8009dfc <HAL_GPIO_ReadPin>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d115      	bne.n	8002816 <menu+0x124e>
 80027ea:	4b44      	ldr	r3, [pc, #272]	; (80028fc <menu+0x1334>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	f083 0301 	eor.w	r3, r3, #1
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00e      	beq.n	8002816 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80027f8:	4b48      	ldr	r3, [pc, #288]	; (800291c <menu+0x1354>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	4b46      	ldr	r3, [pc, #280]	; (800291c <menu+0x1354>)
 8002802:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002804:	4b45      	ldr	r3, [pc, #276]	; (800291c <menu+0x1354>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d902      	bls.n	8002812 <menu+0x124a>
				kapiAcTipi = 0;
 800280c:	4b43      	ldr	r3, [pc, #268]	; (800291c <menu+0x1354>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002812:	f003 fbf7 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002816:	2104      	movs	r1, #4
 8002818:	4837      	ldr	r0, [pc, #220]	; (80028f8 <menu+0x1330>)
 800281a:	f007 faef 	bl	8009dfc <HAL_GPIO_ReadPin>
 800281e:	4603      	mov	r3, r0
 8002820:	2b01      	cmp	r3, #1
 8002822:	d115      	bne.n	8002850 <menu+0x1288>
 8002824:	4b35      	ldr	r3, [pc, #212]	; (80028fc <menu+0x1334>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	f083 0301 	eor.w	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00e      	beq.n	8002850 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002832:	4b3a      	ldr	r3, [pc, #232]	; (800291c <menu+0x1354>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	3b01      	subs	r3, #1
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b38      	ldr	r3, [pc, #224]	; (800291c <menu+0x1354>)
 800283c:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800283e:	4b37      	ldr	r3, [pc, #220]	; (800291c <menu+0x1354>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <menu+0x1284>
		   		kapiAcTipi = 1;
 8002846:	4b35      	ldr	r3, [pc, #212]	; (800291c <menu+0x1354>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800284c:	f003 fbda 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002850:	2108      	movs	r1, #8
 8002852:	4829      	ldr	r0, [pc, #164]	; (80028f8 <menu+0x1330>)
 8002854:	f007 fad2 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002858:	4603      	mov	r3, r0
 800285a:	2b01      	cmp	r3, #1
 800285c:	d10e      	bne.n	800287c <menu+0x12b4>
 800285e:	4b27      	ldr	r3, [pc, #156]	; (80028fc <menu+0x1334>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	f083 0301 	eor.w	r3, r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d007      	beq.n	800287c <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <menu+0x1354>)
 800286e:	781a      	ldrb	r2, [r3, #0]
 8002870:	4b24      	ldr	r3, [pc, #144]	; (8002904 <menu+0x133c>)
 8002872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002876:	4b25      	ldr	r3, [pc, #148]	; (800290c <menu+0x1344>)
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800287c:	4b24      	ldr	r3, [pc, #144]	; (8002910 <menu+0x1348>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b09      	cmp	r3, #9
 8002882:	f040 80b9 	bne.w	80029f8 <menu+0x1430>
		if(dilSecim == 0){
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <menu+0x1328>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800288e:	4a28      	ldr	r2, [pc, #160]	; (8002930 <menu+0x1368>)
 8002890:	2101      	movs	r1, #1
 8002892:	2001      	movs	r0, #1
 8002894:	f7fe f824 	bl	80008e0 <lcd_print>
 8002898:	e008      	b.n	80028ac <menu+0x12e4>
		} else if(dilSecim == 1) {
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <menu+0x1328>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d104      	bne.n	80028ac <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80028a2:	4a24      	ldr	r2, [pc, #144]	; (8002934 <menu+0x136c>)
 80028a4:	2101      	movs	r1, #1
 80028a6:	2001      	movs	r0, #1
 80028a8:	f7fe f81a 	bl	80008e0 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80028ac:	4b22      	ldr	r3, [pc, #136]	; (8002938 <menu+0x1370>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80028b4:	4a21      	ldr	r2, [pc, #132]	; (800293c <menu+0x1374>)
 80028b6:	2101      	movs	r1, #1
 80028b8:	2002      	movs	r0, #2
 80028ba:	f7fe f811 	bl	80008e0 <lcd_print>
 80028be:	e04c      	b.n	800295a <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <menu+0x1370>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d13f      	bne.n	8002948 <menu+0x1380>
			if(dilSecim == 0){
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <menu+0x1328>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80028d0:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <menu+0x1378>)
 80028d2:	2101      	movs	r1, #1
 80028d4:	2002      	movs	r0, #2
 80028d6:	f7fe f803 	bl	80008e0 <lcd_print>
 80028da:	e03e      	b.n	800295a <menu+0x1392>
			} else if(dilSecim == 1) {
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <menu+0x1328>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d13a      	bne.n	800295a <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80028e4:	4a17      	ldr	r2, [pc, #92]	; (8002944 <menu+0x137c>)
 80028e6:	2101      	movs	r1, #1
 80028e8:	2002      	movs	r0, #2
 80028ea:	f7fd fff9 	bl	80008e0 <lcd_print>
 80028ee:	e034      	b.n	800295a <menu+0x1392>
 80028f0:	20000c76 	.word	0x20000c76
 80028f4:	0800df70 	.word	0x0800df70
 80028f8:	40010800 	.word	0x40010800
 80028fc:	20000c84 	.word	0x20000c84
 8002900:	20000c5d 	.word	0x20000c5d
 8002904:	20000b44 	.word	0x20000b44
 8002908:	20000c5b 	.word	0x20000c5b
 800290c:	20000c81 	.word	0x20000c81
 8002910:	20000c55 	.word	0x20000c55
 8002914:	0800df84 	.word	0x0800df84
 8002918:	0800df98 	.word	0x0800df98
 800291c:	20000c61 	.word	0x20000c61
 8002920:	0800dfac 	.word	0x0800dfac
 8002924:	0800dfbc 	.word	0x0800dfbc
 8002928:	0800dfcc 	.word	0x0800dfcc
 800292c:	0800dfe0 	.word	0x0800dfe0
 8002930:	0800dff4 	.word	0x0800dff4
 8002934:	0800e008 	.word	0x0800e008
 8002938:	20000c5e 	.word	0x20000c5e
 800293c:	0800e01c 	.word	0x0800e01c
 8002940:	0800e030 	.word	0x0800e030
 8002944:	0800e040 	.word	0x0800e040
			}
		} else if(kapi1Tip == 2) {
 8002948:	4b8a      	ldr	r3, [pc, #552]	; (8002b74 <menu+0x15ac>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d104      	bne.n	800295a <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002950:	4a89      	ldr	r2, [pc, #548]	; (8002b78 <menu+0x15b0>)
 8002952:	2101      	movs	r1, #1
 8002954:	2002      	movs	r0, #2
 8002956:	f7fd ffc3 	bl	80008e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800295a:	2102      	movs	r1, #2
 800295c:	4887      	ldr	r0, [pc, #540]	; (8002b7c <menu+0x15b4>)
 800295e:	f007 fa4d 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002962:	4603      	mov	r3, r0
 8002964:	2b01      	cmp	r3, #1
 8002966:	d115      	bne.n	8002994 <menu+0x13cc>
 8002968:	4b85      	ldr	r3, [pc, #532]	; (8002b80 <menu+0x15b8>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	f083 0301 	eor.w	r3, r3, #1
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00e      	beq.n	8002994 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002976:	4b7f      	ldr	r3, [pc, #508]	; (8002b74 <menu+0x15ac>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	3301      	adds	r3, #1
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4b7d      	ldr	r3, [pc, #500]	; (8002b74 <menu+0x15ac>)
 8002980:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002982:	4b7c      	ldr	r3, [pc, #496]	; (8002b74 <menu+0x15ac>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d902      	bls.n	8002990 <menu+0x13c8>
				kapi1Tip = 0;
 800298a:	4b7a      	ldr	r3, [pc, #488]	; (8002b74 <menu+0x15ac>)
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002990:	f003 fb38 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002994:	2104      	movs	r1, #4
 8002996:	4879      	ldr	r0, [pc, #484]	; (8002b7c <menu+0x15b4>)
 8002998:	f007 fa30 	bl	8009dfc <HAL_GPIO_ReadPin>
 800299c:	4603      	mov	r3, r0
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d115      	bne.n	80029ce <menu+0x1406>
 80029a2:	4b77      	ldr	r3, [pc, #476]	; (8002b80 <menu+0x15b8>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	f083 0301 	eor.w	r3, r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00e      	beq.n	80029ce <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80029b0:	4b70      	ldr	r3, [pc, #448]	; (8002b74 <menu+0x15ac>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	4b6e      	ldr	r3, [pc, #440]	; (8002b74 <menu+0x15ac>)
 80029ba:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80029bc:	4b6d      	ldr	r3, [pc, #436]	; (8002b74 <menu+0x15ac>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d902      	bls.n	80029ca <menu+0x1402>
		   		kapi1Tip = 2;
 80029c4:	4b6b      	ldr	r3, [pc, #428]	; (8002b74 <menu+0x15ac>)
 80029c6:	2202      	movs	r2, #2
 80029c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029ca:	f003 fb1b 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ce:	2108      	movs	r1, #8
 80029d0:	486a      	ldr	r0, [pc, #424]	; (8002b7c <menu+0x15b4>)
 80029d2:	f007 fa13 	bl	8009dfc <HAL_GPIO_ReadPin>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d10d      	bne.n	80029f8 <menu+0x1430>
 80029dc:	4b68      	ldr	r3, [pc, #416]	; (8002b80 <menu+0x15b8>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	f083 0301 	eor.w	r3, r3, #1
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d006      	beq.n	80029f8 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80029ea:	4b62      	ldr	r3, [pc, #392]	; (8002b74 <menu+0x15ac>)
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	4b65      	ldr	r3, [pc, #404]	; (8002b84 <menu+0x15bc>)
 80029f0:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80029f2:	4b65      	ldr	r3, [pc, #404]	; (8002b88 <menu+0x15c0>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80029f8:	4b64      	ldr	r3, [pc, #400]	; (8002b8c <menu+0x15c4>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b0a      	cmp	r3, #10
 80029fe:	d17f      	bne.n	8002b00 <menu+0x1538>
		if(dilSecim == 0) {
 8002a00:	4b63      	ldr	r3, [pc, #396]	; (8002b90 <menu+0x15c8>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002a08:	4a62      	ldr	r2, [pc, #392]	; (8002b94 <menu+0x15cc>)
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	f7fd ff67 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002a12:	4a61      	ldr	r2, [pc, #388]	; (8002b98 <menu+0x15d0>)
 8002a14:	2101      	movs	r1, #1
 8002a16:	2002      	movs	r0, #2
 8002a18:	f7fd ff62 	bl	80008e0 <lcd_print>
 8002a1c:	e00d      	b.n	8002a3a <menu+0x1472>
		} else if(dilSecim == 1) {
 8002a1e:	4b5c      	ldr	r3, [pc, #368]	; (8002b90 <menu+0x15c8>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d109      	bne.n	8002a3a <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002a26:	4a5d      	ldr	r2, [pc, #372]	; (8002b9c <menu+0x15d4>)
 8002a28:	2101      	movs	r1, #1
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f7fd ff58 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a30:	4a5b      	ldr	r2, [pc, #364]	; (8002ba0 <menu+0x15d8>)
 8002a32:	2101      	movs	r1, #1
 8002a34:	2002      	movs	r0, #2
 8002a36:	f7fd ff53 	bl	80008e0 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002a3a:	4b5a      	ldr	r3, [pc, #360]	; (8002ba4 <menu+0x15dc>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	220a      	movs	r2, #10
 8002a40:	4959      	ldr	r1, [pc, #356]	; (8002ba8 <menu+0x15e0>)
 8002a42:	4618      	mov	r0, r3
 8002a44:	f00a fa62 	bl	800cf0c <itoa>
		lcd_print(2,16,snum);
 8002a48:	4a57      	ldr	r2, [pc, #348]	; (8002ba8 <menu+0x15e0>)
 8002a4a:	2110      	movs	r1, #16
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f7fd ff47 	bl	80008e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a52:	2102      	movs	r1, #2
 8002a54:	4849      	ldr	r0, [pc, #292]	; (8002b7c <menu+0x15b4>)
 8002a56:	f007 f9d1 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d119      	bne.n	8002a94 <menu+0x14cc>
 8002a60:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <menu+0x15b8>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	f083 0301 	eor.w	r3, r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d012      	beq.n	8002a94 <menu+0x14cc>
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <menu+0x15ac>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10e      	bne.n	8002a94 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002a76:	4b4b      	ldr	r3, [pc, #300]	; (8002ba4 <menu+0x15dc>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4b49      	ldr	r3, [pc, #292]	; (8002ba4 <menu+0x15dc>)
 8002a80:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002a82:	4b48      	ldr	r3, [pc, #288]	; (8002ba4 <menu+0x15dc>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b05      	cmp	r3, #5
 8002a88:	d902      	bls.n	8002a90 <menu+0x14c8>
				kapi1AcSure = 0;
 8002a8a:	4b46      	ldr	r3, [pc, #280]	; (8002ba4 <menu+0x15dc>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a90:	f003 fab8 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a94:	2104      	movs	r1, #4
 8002a96:	4839      	ldr	r0, [pc, #228]	; (8002b7c <menu+0x15b4>)
 8002a98:	f007 f9b0 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d119      	bne.n	8002ad6 <menu+0x150e>
 8002aa2:	4b37      	ldr	r3, [pc, #220]	; (8002b80 <menu+0x15b8>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	f083 0301 	eor.w	r3, r3, #1
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d012      	beq.n	8002ad6 <menu+0x150e>
 8002ab0:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <menu+0x15ac>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10e      	bne.n	8002ad6 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002ab8:	4b3a      	ldr	r3, [pc, #232]	; (8002ba4 <menu+0x15dc>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	4b38      	ldr	r3, [pc, #224]	; (8002ba4 <menu+0x15dc>)
 8002ac2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002ac4:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <menu+0x15dc>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b06      	cmp	r3, #6
 8002aca:	d902      	bls.n	8002ad2 <menu+0x150a>
		   		kapi1AcSure = 5;
 8002acc:	4b35      	ldr	r3, [pc, #212]	; (8002ba4 <menu+0x15dc>)
 8002ace:	2205      	movs	r2, #5
 8002ad0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ad2:	f003 fa97 	bl	8006004 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad6:	2108      	movs	r1, #8
 8002ad8:	4828      	ldr	r0, [pc, #160]	; (8002b7c <menu+0x15b4>)
 8002ada:	f007 f98f 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10d      	bne.n	8002b00 <menu+0x1538>
 8002ae4:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <menu+0x15b8>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	f083 0301 	eor.w	r3, r3, #1
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002af2:	4b2c      	ldr	r3, [pc, #176]	; (8002ba4 <menu+0x15dc>)
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <menu+0x15bc>)
 8002af8:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <menu+0x15c0>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002b00:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <menu+0x15c4>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b0b      	cmp	r3, #11
 8002b06:	f040 80b5 	bne.w	8002c74 <menu+0x16ac>
		if(dilSecim == 0) {
 8002b0a:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <menu+0x15c8>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d105      	bne.n	8002b1e <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002b12:	4a26      	ldr	r2, [pc, #152]	; (8002bac <menu+0x15e4>)
 8002b14:	2101      	movs	r1, #1
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7fd fee2 	bl	80008e0 <lcd_print>
 8002b1c:	e008      	b.n	8002b30 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002b1e:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <menu+0x15c8>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d104      	bne.n	8002b30 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002b26:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <menu+0x15e8>)
 8002b28:	2101      	movs	r1, #1
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	f7fd fed8 	bl	80008e0 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002b30:	4b20      	ldr	r3, [pc, #128]	; (8002bb4 <menu+0x15ec>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002b38:	4a1f      	ldr	r2, [pc, #124]	; (8002bb8 <menu+0x15f0>)
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	2002      	movs	r0, #2
 8002b3e:	f7fd fecf 	bl	80008e0 <lcd_print>
 8002b42:	e048      	b.n	8002bd6 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <menu+0x15ec>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d13b      	bne.n	8002bc4 <menu+0x15fc>
			if(dilSecim == 0) {
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <menu+0x15c8>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002b54:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <menu+0x15f4>)
 8002b56:	2101      	movs	r1, #1
 8002b58:	2002      	movs	r0, #2
 8002b5a:	f7fd fec1 	bl	80008e0 <lcd_print>
 8002b5e:	e03a      	b.n	8002bd6 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <menu+0x15c8>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d136      	bne.n	8002bd6 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002b68:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <menu+0x15f8>)
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	2002      	movs	r0, #2
 8002b6e:	f7fd feb7 	bl	80008e0 <lcd_print>
 8002b72:	e030      	b.n	8002bd6 <menu+0x160e>
 8002b74:	20000c5e 	.word	0x20000c5e
 8002b78:	0800e054 	.word	0x0800e054
 8002b7c:	40010800 	.word	0x40010800
 8002b80:	20000c84 	.word	0x20000c84
 8002b84:	20000b44 	.word	0x20000b44
 8002b88:	20000c81 	.word	0x20000c81
 8002b8c:	20000c55 	.word	0x20000c55
 8002b90:	20000c76 	.word	0x20000c76
 8002b94:	0800e064 	.word	0x0800e064
 8002b98:	0800e078 	.word	0x0800e078
 8002b9c:	0800e088 	.word	0x0800e088
 8002ba0:	0800e09c 	.word	0x0800e09c
 8002ba4:	20000c6e 	.word	0x20000c6e
 8002ba8:	20000bd8 	.word	0x20000bd8
 8002bac:	0800e0ac 	.word	0x0800e0ac
 8002bb0:	0800e0c0 	.word	0x0800e0c0
 8002bb4:	20000c5f 	.word	0x20000c5f
 8002bb8:	0800e01c 	.word	0x0800e01c
 8002bbc:	0800e030 	.word	0x0800e030
 8002bc0:	0800e040 	.word	0x0800e040
			}
		} else if(kapi2Tip == 2) {
 8002bc4:	4b8a      	ldr	r3, [pc, #552]	; (8002df0 <menu+0x1828>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d104      	bne.n	8002bd6 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002bcc:	4a89      	ldr	r2, [pc, #548]	; (8002df4 <menu+0x182c>)
 8002bce:	2101      	movs	r1, #1
 8002bd0:	2002      	movs	r0, #2
 8002bd2:	f7fd fe85 	bl	80008e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	4887      	ldr	r0, [pc, #540]	; (8002df8 <menu+0x1830>)
 8002bda:	f007 f90f 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d115      	bne.n	8002c10 <menu+0x1648>
 8002be4:	4b85      	ldr	r3, [pc, #532]	; (8002dfc <menu+0x1834>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	f083 0301 	eor.w	r3, r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00e      	beq.n	8002c10 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002bf2:	4b7f      	ldr	r3, [pc, #508]	; (8002df0 <menu+0x1828>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b7d      	ldr	r3, [pc, #500]	; (8002df0 <menu+0x1828>)
 8002bfc:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002bfe:	4b7c      	ldr	r3, [pc, #496]	; (8002df0 <menu+0x1828>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d902      	bls.n	8002c0c <menu+0x1644>
				kapi2Tip = 0;
 8002c06:	4b7a      	ldr	r3, [pc, #488]	; (8002df0 <menu+0x1828>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c0c:	f003 f9fa 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c10:	2104      	movs	r1, #4
 8002c12:	4879      	ldr	r0, [pc, #484]	; (8002df8 <menu+0x1830>)
 8002c14:	f007 f8f2 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d115      	bne.n	8002c4a <menu+0x1682>
 8002c1e:	4b77      	ldr	r3, [pc, #476]	; (8002dfc <menu+0x1834>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	f083 0301 	eor.w	r3, r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00e      	beq.n	8002c4a <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002c2c:	4b70      	ldr	r3, [pc, #448]	; (8002df0 <menu+0x1828>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	4b6e      	ldr	r3, [pc, #440]	; (8002df0 <menu+0x1828>)
 8002c36:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002c38:	4b6d      	ldr	r3, [pc, #436]	; (8002df0 <menu+0x1828>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d902      	bls.n	8002c46 <menu+0x167e>
		   		kapi2Tip = 2;
 8002c40:	4b6b      	ldr	r3, [pc, #428]	; (8002df0 <menu+0x1828>)
 8002c42:	2202      	movs	r2, #2
 8002c44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c46:	f003 f9dd 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c4a:	2108      	movs	r1, #8
 8002c4c:	486a      	ldr	r0, [pc, #424]	; (8002df8 <menu+0x1830>)
 8002c4e:	f007 f8d5 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d10d      	bne.n	8002c74 <menu+0x16ac>
 8002c58:	4b68      	ldr	r3, [pc, #416]	; (8002dfc <menu+0x1834>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	f083 0301 	eor.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002c66:	4b62      	ldr	r3, [pc, #392]	; (8002df0 <menu+0x1828>)
 8002c68:	781a      	ldrb	r2, [r3, #0]
 8002c6a:	4b65      	ldr	r3, [pc, #404]	; (8002e00 <menu+0x1838>)
 8002c6c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002c6e:	4b65      	ldr	r3, [pc, #404]	; (8002e04 <menu+0x183c>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002c74:	4b64      	ldr	r3, [pc, #400]	; (8002e08 <menu+0x1840>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b0c      	cmp	r3, #12
 8002c7a:	d17f      	bne.n	8002d7c <menu+0x17b4>
		if(dilSecim == 0) {
 8002c7c:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <menu+0x1844>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002c84:	4a62      	ldr	r2, [pc, #392]	; (8002e10 <menu+0x1848>)
 8002c86:	2101      	movs	r1, #1
 8002c88:	2001      	movs	r0, #1
 8002c8a:	f7fd fe29 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002c8e:	4a61      	ldr	r2, [pc, #388]	; (8002e14 <menu+0x184c>)
 8002c90:	2101      	movs	r1, #1
 8002c92:	2002      	movs	r0, #2
 8002c94:	f7fd fe24 	bl	80008e0 <lcd_print>
 8002c98:	e00d      	b.n	8002cb6 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002c9a:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <menu+0x1844>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d109      	bne.n	8002cb6 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002ca2:	4a5d      	ldr	r2, [pc, #372]	; (8002e18 <menu+0x1850>)
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f7fd fe1a 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002cac:	4a5b      	ldr	r2, [pc, #364]	; (8002e1c <menu+0x1854>)
 8002cae:	2101      	movs	r1, #1
 8002cb0:	2002      	movs	r0, #2
 8002cb2:	f7fd fe15 	bl	80008e0 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002cb6:	4b5a      	ldr	r3, [pc, #360]	; (8002e20 <menu+0x1858>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	220a      	movs	r2, #10
 8002cbc:	4959      	ldr	r1, [pc, #356]	; (8002e24 <menu+0x185c>)
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f00a f924 	bl	800cf0c <itoa>
		lcd_print(2,16,snum);
 8002cc4:	4a57      	ldr	r2, [pc, #348]	; (8002e24 <menu+0x185c>)
 8002cc6:	2110      	movs	r1, #16
 8002cc8:	2002      	movs	r0, #2
 8002cca:	f7fd fe09 	bl	80008e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002cce:	2102      	movs	r1, #2
 8002cd0:	4849      	ldr	r0, [pc, #292]	; (8002df8 <menu+0x1830>)
 8002cd2:	f007 f893 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d119      	bne.n	8002d10 <menu+0x1748>
 8002cdc:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <menu+0x1834>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	f083 0301 	eor.w	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d012      	beq.n	8002d10 <menu+0x1748>
 8002cea:	4b41      	ldr	r3, [pc, #260]	; (8002df0 <menu+0x1828>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10e      	bne.n	8002d10 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002cf2:	4b4b      	ldr	r3, [pc, #300]	; (8002e20 <menu+0x1858>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <menu+0x1858>)
 8002cfc:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002cfe:	4b48      	ldr	r3, [pc, #288]	; (8002e20 <menu+0x1858>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d902      	bls.n	8002d0c <menu+0x1744>
				kapi2AcSure = 0;
 8002d06:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <menu+0x1858>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d0c:	f003 f97a 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002d10:	2104      	movs	r1, #4
 8002d12:	4839      	ldr	r0, [pc, #228]	; (8002df8 <menu+0x1830>)
 8002d14:	f007 f872 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d119      	bne.n	8002d52 <menu+0x178a>
 8002d1e:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <menu+0x1834>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	f083 0301 	eor.w	r3, r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d012      	beq.n	8002d52 <menu+0x178a>
 8002d2c:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <menu+0x1828>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10e      	bne.n	8002d52 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002d34:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <menu+0x1858>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	4b38      	ldr	r3, [pc, #224]	; (8002e20 <menu+0x1858>)
 8002d3e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002d40:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <menu+0x1858>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b06      	cmp	r3, #6
 8002d46:	d902      	bls.n	8002d4e <menu+0x1786>
		   		kapi2AcSure = 5;
 8002d48:	4b35      	ldr	r3, [pc, #212]	; (8002e20 <menu+0x1858>)
 8002d4a:	2205      	movs	r2, #5
 8002d4c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d4e:	f003 f959 	bl	8006004 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d52:	2108      	movs	r1, #8
 8002d54:	4828      	ldr	r0, [pc, #160]	; (8002df8 <menu+0x1830>)
 8002d56:	f007 f851 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d10d      	bne.n	8002d7c <menu+0x17b4>
 8002d60:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <menu+0x1834>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	f083 0301 	eor.w	r3, r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d006      	beq.n	8002d7c <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002d6e:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <menu+0x1858>)
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <menu+0x1838>)
 8002d74:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002d76:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <menu+0x183c>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002d7c:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <menu+0x1840>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b0d      	cmp	r3, #13
 8002d82:	f040 80b5 	bne.w	8002ef0 <menu+0x1928>
		if(dilSecim == 0) {
 8002d86:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <menu+0x1844>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002d8e:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <menu+0x1860>)
 8002d90:	2101      	movs	r1, #1
 8002d92:	2001      	movs	r0, #1
 8002d94:	f7fd fda4 	bl	80008e0 <lcd_print>
 8002d98:	e008      	b.n	8002dac <menu+0x17e4>
		} else if(dilSecim == 1){
 8002d9a:	4b1c      	ldr	r3, [pc, #112]	; (8002e0c <menu+0x1844>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d104      	bne.n	8002dac <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002da2:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <menu+0x1864>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	2001      	movs	r0, #1
 8002da8:	f7fd fd9a 	bl	80008e0 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <menu+0x1868>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d105      	bne.n	8002dc0 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002db4:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <menu+0x186c>)
 8002db6:	2101      	movs	r1, #1
 8002db8:	2002      	movs	r0, #2
 8002dba:	f7fd fd91 	bl	80008e0 <lcd_print>
 8002dbe:	e048      	b.n	8002e52 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <menu+0x1868>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d13b      	bne.n	8002e40 <menu+0x1878>
			if(dilSecim == 0) {
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <menu+0x1844>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d105      	bne.n	8002ddc <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002dd0:	4a19      	ldr	r2, [pc, #100]	; (8002e38 <menu+0x1870>)
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	2002      	movs	r0, #2
 8002dd6:	f7fd fd83 	bl	80008e0 <lcd_print>
 8002dda:	e03a      	b.n	8002e52 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <menu+0x1844>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d136      	bne.n	8002e52 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002de4:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <menu+0x1874>)
 8002de6:	2101      	movs	r1, #1
 8002de8:	2002      	movs	r0, #2
 8002dea:	f7fd fd79 	bl	80008e0 <lcd_print>
 8002dee:	e030      	b.n	8002e52 <menu+0x188a>
 8002df0:	20000c5f 	.word	0x20000c5f
 8002df4:	0800e054 	.word	0x0800e054
 8002df8:	40010800 	.word	0x40010800
 8002dfc:	20000c84 	.word	0x20000c84
 8002e00:	20000b44 	.word	0x20000b44
 8002e04:	20000c81 	.word	0x20000c81
 8002e08:	20000c55 	.word	0x20000c55
 8002e0c:	20000c76 	.word	0x20000c76
 8002e10:	0800e0d4 	.word	0x0800e0d4
 8002e14:	0800e078 	.word	0x0800e078
 8002e18:	0800e0e8 	.word	0x0800e0e8
 8002e1c:	0800e09c 	.word	0x0800e09c
 8002e20:	20000c6f 	.word	0x20000c6f
 8002e24:	20000bd8 	.word	0x20000bd8
 8002e28:	0800e0fc 	.word	0x0800e0fc
 8002e2c:	0800e110 	.word	0x0800e110
 8002e30:	20000c60 	.word	0x20000c60
 8002e34:	0800e01c 	.word	0x0800e01c
 8002e38:	0800e030 	.word	0x0800e030
 8002e3c:	0800e040 	.word	0x0800e040
			}
		} else if(kapitablaTip == 2) {
 8002e40:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <menu+0x19e8>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d104      	bne.n	8002e52 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002e48:	4a5a      	ldr	r2, [pc, #360]	; (8002fb4 <menu+0x19ec>)
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	2002      	movs	r0, #2
 8002e4e:	f7fd fd47 	bl	80008e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e52:	2102      	movs	r1, #2
 8002e54:	4858      	ldr	r0, [pc, #352]	; (8002fb8 <menu+0x19f0>)
 8002e56:	f006 ffd1 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d115      	bne.n	8002e8c <menu+0x18c4>
 8002e60:	4b56      	ldr	r3, [pc, #344]	; (8002fbc <menu+0x19f4>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	f083 0301 	eor.w	r3, r3, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00e      	beq.n	8002e8c <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002e6e:	4b50      	ldr	r3, [pc, #320]	; (8002fb0 <menu+0x19e8>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4b4e      	ldr	r3, [pc, #312]	; (8002fb0 <menu+0x19e8>)
 8002e78:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002e7a:	4b4d      	ldr	r3, [pc, #308]	; (8002fb0 <menu+0x19e8>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d902      	bls.n	8002e88 <menu+0x18c0>
				kapitablaTip = 0;
 8002e82:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <menu+0x19e8>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e88:	f003 f8bc 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e8c:	2104      	movs	r1, #4
 8002e8e:	484a      	ldr	r0, [pc, #296]	; (8002fb8 <menu+0x19f0>)
 8002e90:	f006 ffb4 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d115      	bne.n	8002ec6 <menu+0x18fe>
 8002e9a:	4b48      	ldr	r3, [pc, #288]	; (8002fbc <menu+0x19f4>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	f083 0301 	eor.w	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002ea8:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <menu+0x19e8>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <menu+0x19e8>)
 8002eb2:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002eb4:	4b3e      	ldr	r3, [pc, #248]	; (8002fb0 <menu+0x19e8>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d902      	bls.n	8002ec2 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002ebc:	4b3c      	ldr	r3, [pc, #240]	; (8002fb0 <menu+0x19e8>)
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ec2:	f003 f89f 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ec6:	2108      	movs	r1, #8
 8002ec8:	483b      	ldr	r0, [pc, #236]	; (8002fb8 <menu+0x19f0>)
 8002eca:	f006 ff97 	bl	8009dfc <HAL_GPIO_ReadPin>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d10d      	bne.n	8002ef0 <menu+0x1928>
 8002ed4:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <menu+0x19f4>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	f083 0301 	eor.w	r3, r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002ee2:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <menu+0x19e8>)
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <menu+0x19f8>)
 8002ee8:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002eea:	4b36      	ldr	r3, [pc, #216]	; (8002fc4 <menu+0x19fc>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002ef0:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <menu+0x1a00>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b0e      	cmp	r3, #14
 8002ef6:	f040 80f2 	bne.w	80030de <menu+0x1b16>
		if(dilSecim == 0) {
 8002efa:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <menu+0x1a04>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002f02:	4a33      	ldr	r2, [pc, #204]	; (8002fd0 <menu+0x1a08>)
 8002f04:	2101      	movs	r1, #1
 8002f06:	2001      	movs	r0, #1
 8002f08:	f7fd fcea 	bl	80008e0 <lcd_print>
 8002f0c:	e008      	b.n	8002f20 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002f0e:	4b2f      	ldr	r3, [pc, #188]	; (8002fcc <menu+0x1a04>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d104      	bne.n	8002f20 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002f16:	4a2f      	ldr	r2, [pc, #188]	; (8002fd4 <menu+0x1a0c>)
 8002f18:	2101      	movs	r1, #1
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	f7fd fce0 	bl	80008e0 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002f20:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <menu+0x1a10>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d113      	bne.n	8002f50 <menu+0x1988>
			if(dilSecim == 0){
 8002f28:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <menu+0x1a04>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002f30:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <menu+0x1a14>)
 8002f32:	2101      	movs	r1, #1
 8002f34:	2002      	movs	r0, #2
 8002f36:	f7fd fcd3 	bl	80008e0 <lcd_print>
 8002f3a:	e071      	b.n	8003020 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002f3c:	4b23      	ldr	r3, [pc, #140]	; (8002fcc <menu+0x1a04>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d16d      	bne.n	8003020 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002f44:	4a26      	ldr	r2, [pc, #152]	; (8002fe0 <menu+0x1a18>)
 8002f46:	2101      	movs	r1, #1
 8002f48:	2002      	movs	r0, #2
 8002f4a:	f7fd fcc9 	bl	80008e0 <lcd_print>
 8002f4e:	e067      	b.n	8003020 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002f50:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <menu+0x1a10>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d112      	bne.n	8002f7e <menu+0x19b6>
			if(dilSecim == 0){
 8002f58:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <menu+0x1a04>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d104      	bne.n	8002f6a <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002f60:	4a20      	ldr	r2, [pc, #128]	; (8002fe4 <menu+0x1a1c>)
 8002f62:	2101      	movs	r1, #1
 8002f64:	2002      	movs	r0, #2
 8002f66:	f7fd fcbb 	bl	80008e0 <lcd_print>
			}
			if(dilSecim == 1){
 8002f6a:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <menu+0x1a04>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d156      	bne.n	8003020 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002f72:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <menu+0x1a20>)
 8002f74:	2101      	movs	r1, #1
 8002f76:	2002      	movs	r0, #2
 8002f78:	f7fd fcb2 	bl	80008e0 <lcd_print>
 8002f7c:	e050      	b.n	8003020 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002f7e:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <menu+0x1a10>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d136      	bne.n	8002ff4 <menu+0x1a2c>
			if(dilSecim == 0){
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <menu+0x1a04>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d105      	bne.n	8002f9a <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002f8e:	4a17      	ldr	r2, [pc, #92]	; (8002fec <menu+0x1a24>)
 8002f90:	2101      	movs	r1, #1
 8002f92:	2002      	movs	r0, #2
 8002f94:	f7fd fca4 	bl	80008e0 <lcd_print>
 8002f98:	e042      	b.n	8003020 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <menu+0x1a04>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d13e      	bne.n	8003020 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002fa2:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <menu+0x1a28>)
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	2002      	movs	r0, #2
 8002fa8:	f7fd fc9a 	bl	80008e0 <lcd_print>
 8002fac:	e038      	b.n	8003020 <menu+0x1a58>
 8002fae:	bf00      	nop
 8002fb0:	20000c60 	.word	0x20000c60
 8002fb4:	0800e054 	.word	0x0800e054
 8002fb8:	40010800 	.word	0x40010800
 8002fbc:	20000c84 	.word	0x20000c84
 8002fc0:	20000b44 	.word	0x20000b44
 8002fc4:	20000c81 	.word	0x20000c81
 8002fc8:	20000c55 	.word	0x20000c55
 8002fcc:	20000c76 	.word	0x20000c76
 8002fd0:	0800e124 	.word	0x0800e124
 8002fd4:	0800e138 	.word	0x0800e138
 8002fd8:	20000c62 	.word	0x20000c62
 8002fdc:	0800e14c 	.word	0x0800e14c
 8002fe0:	0800e15c 	.word	0x0800e15c
 8002fe4:	0800e16c 	.word	0x0800e16c
 8002fe8:	0800e17c 	.word	0x0800e17c
 8002fec:	0800e18c 	.word	0x0800e18c
 8002ff0:	0800e1a0 	.word	0x0800e1a0
			}
		} else if(kapiTablaAcKonum == 3) {
 8002ff4:	4b9b      	ldr	r3, [pc, #620]	; (8003264 <menu+0x1c9c>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d111      	bne.n	8003020 <menu+0x1a58>
			if(dilSecim == 0) {
 8002ffc:	4b9a      	ldr	r3, [pc, #616]	; (8003268 <menu+0x1ca0>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d104      	bne.n	800300e <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8003004:	4a99      	ldr	r2, [pc, #612]	; (800326c <menu+0x1ca4>)
 8003006:	2101      	movs	r1, #1
 8003008:	2002      	movs	r0, #2
 800300a:	f7fd fc69 	bl	80008e0 <lcd_print>
			}
			if(dilSecim == 1) {
 800300e:	4b96      	ldr	r3, [pc, #600]	; (8003268 <menu+0x1ca0>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d104      	bne.n	8003020 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8003016:	4a96      	ldr	r2, [pc, #600]	; (8003270 <menu+0x1ca8>)
 8003018:	2101      	movs	r1, #1
 800301a:	2002      	movs	r0, #2
 800301c:	f7fd fc60 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003020:	2102      	movs	r1, #2
 8003022:	4894      	ldr	r0, [pc, #592]	; (8003274 <menu+0x1cac>)
 8003024:	f006 feea 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003028:	4603      	mov	r3, r0
 800302a:	2b01      	cmp	r3, #1
 800302c:	d115      	bne.n	800305a <menu+0x1a92>
 800302e:	4b92      	ldr	r3, [pc, #584]	; (8003278 <menu+0x1cb0>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	f083 0301 	eor.w	r3, r3, #1
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00e      	beq.n	800305a <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800303c:	4b89      	ldr	r3, [pc, #548]	; (8003264 <menu+0x1c9c>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	b2da      	uxtb	r2, r3
 8003044:	4b87      	ldr	r3, [pc, #540]	; (8003264 <menu+0x1c9c>)
 8003046:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8003048:	4b86      	ldr	r3, [pc, #536]	; (8003264 <menu+0x1c9c>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d902      	bls.n	8003056 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8003050:	4b84      	ldr	r3, [pc, #528]	; (8003264 <menu+0x1c9c>)
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003056:	f002 ffd5 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800305a:	2104      	movs	r1, #4
 800305c:	4885      	ldr	r0, [pc, #532]	; (8003274 <menu+0x1cac>)
 800305e:	f006 fecd 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003062:	4603      	mov	r3, r0
 8003064:	2b01      	cmp	r3, #1
 8003066:	d115      	bne.n	8003094 <menu+0x1acc>
 8003068:	4b83      	ldr	r3, [pc, #524]	; (8003278 <menu+0x1cb0>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	f083 0301 	eor.w	r3, r3, #1
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00e      	beq.n	8003094 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8003076:	4b7b      	ldr	r3, [pc, #492]	; (8003264 <menu+0x1c9c>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	3b01      	subs	r3, #1
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4b79      	ldr	r3, [pc, #484]	; (8003264 <menu+0x1c9c>)
 8003080:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8003082:	4b78      	ldr	r3, [pc, #480]	; (8003264 <menu+0x1c9c>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d902      	bls.n	8003090 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 800308a:	4b76      	ldr	r3, [pc, #472]	; (8003264 <menu+0x1c9c>)
 800308c:	2202      	movs	r2, #2
 800308e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003090:	f002 ffb8 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003094:	2108      	movs	r1, #8
 8003096:	4877      	ldr	r0, [pc, #476]	; (8003274 <menu+0x1cac>)
 8003098:	f006 feb0 	bl	8009dfc <HAL_GPIO_ReadPin>
 800309c:	4603      	mov	r3, r0
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d11d      	bne.n	80030de <menu+0x1b16>
 80030a2:	4b75      	ldr	r3, [pc, #468]	; (8003278 <menu+0x1cb0>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	f083 0301 	eor.w	r3, r3, #1
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d016      	beq.n	80030de <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 80030b0:	4b6c      	ldr	r3, [pc, #432]	; (8003264 <menu+0x1c9c>)
 80030b2:	781a      	ldrb	r2, [r3, #0]
 80030b4:	4b71      	ldr	r3, [pc, #452]	; (800327c <menu+0x1cb4>)
 80030b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80030ba:	4b6a      	ldr	r3, [pc, #424]	; (8003264 <menu+0x1c9c>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <menu+0x1b02>
 80030c2:	4b68      	ldr	r3, [pc, #416]	; (8003264 <menu+0x1c9c>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d106      	bne.n	80030d8 <menu+0x1b10>
				altLimit = 1;
 80030ca:	4b6d      	ldr	r3, [pc, #436]	; (8003280 <menu+0x1cb8>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80030d0:	4b6b      	ldr	r3, [pc, #428]	; (8003280 <menu+0x1cb8>)
 80030d2:	781a      	ldrb	r2, [r3, #0]
 80030d4:	4b69      	ldr	r3, [pc, #420]	; (800327c <menu+0x1cb4>)
 80030d6:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80030d8:	4b6a      	ldr	r3, [pc, #424]	; (8003284 <menu+0x1cbc>)
 80030da:	2201      	movs	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80030de:	4b6a      	ldr	r3, [pc, #424]	; (8003288 <menu+0x1cc0>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b0f      	cmp	r3, #15
 80030e4:	d17f      	bne.n	80031e6 <menu+0x1c1e>
		if(dilSecim == 0) {
 80030e6:	4b60      	ldr	r3, [pc, #384]	; (8003268 <menu+0x1ca0>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80030ee:	4a67      	ldr	r2, [pc, #412]	; (800328c <menu+0x1cc4>)
 80030f0:	2101      	movs	r1, #1
 80030f2:	2001      	movs	r0, #1
 80030f4:	f7fd fbf4 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80030f8:	4a65      	ldr	r2, [pc, #404]	; (8003290 <menu+0x1cc8>)
 80030fa:	2101      	movs	r1, #1
 80030fc:	2002      	movs	r0, #2
 80030fe:	f7fd fbef 	bl	80008e0 <lcd_print>
 8003102:	e00d      	b.n	8003120 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8003104:	4b58      	ldr	r3, [pc, #352]	; (8003268 <menu+0x1ca0>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d109      	bne.n	8003120 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 800310c:	4a61      	ldr	r2, [pc, #388]	; (8003294 <menu+0x1ccc>)
 800310e:	2101      	movs	r1, #1
 8003110:	2001      	movs	r0, #1
 8003112:	f7fd fbe5 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8003116:	4a60      	ldr	r2, [pc, #384]	; (8003298 <menu+0x1cd0>)
 8003118:	2101      	movs	r1, #1
 800311a:	2002      	movs	r0, #2
 800311c:	f7fd fbe0 	bl	80008e0 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003120:	4b5e      	ldr	r3, [pc, #376]	; (800329c <menu+0x1cd4>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	220a      	movs	r2, #10
 8003126:	495e      	ldr	r1, [pc, #376]	; (80032a0 <menu+0x1cd8>)
 8003128:	4618      	mov	r0, r3
 800312a:	f009 feef 	bl	800cf0c <itoa>
		lcd_print(2,16,snum);
 800312e:	4a5c      	ldr	r2, [pc, #368]	; (80032a0 <menu+0x1cd8>)
 8003130:	2110      	movs	r1, #16
 8003132:	2002      	movs	r0, #2
 8003134:	f7fd fbd4 	bl	80008e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003138:	2102      	movs	r1, #2
 800313a:	484e      	ldr	r0, [pc, #312]	; (8003274 <menu+0x1cac>)
 800313c:	f006 fe5e 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003140:	4603      	mov	r3, r0
 8003142:	2b01      	cmp	r3, #1
 8003144:	d119      	bne.n	800317a <menu+0x1bb2>
 8003146:	4b4c      	ldr	r3, [pc, #304]	; (8003278 <menu+0x1cb0>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	f083 0301 	eor.w	r3, r3, #1
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d012      	beq.n	800317a <menu+0x1bb2>
 8003154:	4b53      	ldr	r3, [pc, #332]	; (80032a4 <menu+0x1cdc>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10e      	bne.n	800317a <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 800315c:	4b4f      	ldr	r3, [pc, #316]	; (800329c <menu+0x1cd4>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	b2da      	uxtb	r2, r3
 8003164:	4b4d      	ldr	r3, [pc, #308]	; (800329c <menu+0x1cd4>)
 8003166:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003168:	4b4c      	ldr	r3, [pc, #304]	; (800329c <menu+0x1cd4>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b05      	cmp	r3, #5
 800316e:	d902      	bls.n	8003176 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8003170:	4b4a      	ldr	r3, [pc, #296]	; (800329c <menu+0x1cd4>)
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003176:	f002 ff45 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800317a:	2104      	movs	r1, #4
 800317c:	483d      	ldr	r0, [pc, #244]	; (8003274 <menu+0x1cac>)
 800317e:	f006 fe3d 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003182:	4603      	mov	r3, r0
 8003184:	2b01      	cmp	r3, #1
 8003186:	d119      	bne.n	80031bc <menu+0x1bf4>
 8003188:	4b3b      	ldr	r3, [pc, #236]	; (8003278 <menu+0x1cb0>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	f083 0301 	eor.w	r3, r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d012      	beq.n	80031bc <menu+0x1bf4>
 8003196:	4b43      	ldr	r3, [pc, #268]	; (80032a4 <menu+0x1cdc>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10e      	bne.n	80031bc <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800319e:	4b3f      	ldr	r3, [pc, #252]	; (800329c <menu+0x1cd4>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	4b3d      	ldr	r3, [pc, #244]	; (800329c <menu+0x1cd4>)
 80031a8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80031aa:	4b3c      	ldr	r3, [pc, #240]	; (800329c <menu+0x1cd4>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d902      	bls.n	80031b8 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 80031b2:	4b3a      	ldr	r3, [pc, #232]	; (800329c <menu+0x1cd4>)
 80031b4:	2205      	movs	r2, #5
 80031b6:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80031b8:	f002 ff24 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031bc:	2108      	movs	r1, #8
 80031be:	482d      	ldr	r0, [pc, #180]	; (8003274 <menu+0x1cac>)
 80031c0:	f006 fe1c 	bl	8009dfc <HAL_GPIO_ReadPin>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d10d      	bne.n	80031e6 <menu+0x1c1e>
 80031ca:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <menu+0x1cb0>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	f083 0301 	eor.w	r3, r3, #1
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d006      	beq.n	80031e6 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80031d8:	4b30      	ldr	r3, [pc, #192]	; (800329c <menu+0x1cd4>)
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	4b27      	ldr	r3, [pc, #156]	; (800327c <menu+0x1cb4>)
 80031de:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80031e0:	4b28      	ldr	r3, [pc, #160]	; (8003284 <menu+0x1cbc>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80031e6:	4b28      	ldr	r3, [pc, #160]	; (8003288 <menu+0x1cc0>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	f040 80bc 	bne.w	8003368 <menu+0x1da0>
		if(dilSecim == 0) {
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <menu+0x1ca0>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80031f8:	4a2b      	ldr	r2, [pc, #172]	; (80032a8 <menu+0x1ce0>)
 80031fa:	2101      	movs	r1, #1
 80031fc:	2001      	movs	r0, #1
 80031fe:	f7fd fb6f 	bl	80008e0 <lcd_print>
 8003202:	e008      	b.n	8003216 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8003204:	4b18      	ldr	r3, [pc, #96]	; (8003268 <menu+0x1ca0>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d104      	bne.n	8003216 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 800320c:	4a27      	ldr	r2, [pc, #156]	; (80032ac <menu+0x1ce4>)
 800320e:	2101      	movs	r1, #1
 8003210:	2001      	movs	r0, #1
 8003212:	f7fd fb65 	bl	80008e0 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8003216:	4b26      	ldr	r3, [pc, #152]	; (80032b0 <menu+0x1ce8>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d113      	bne.n	8003246 <menu+0x1c7e>
			if(dilSecim == 0) {
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <menu+0x1ca0>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d105      	bne.n	8003232 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8003226:	4a11      	ldr	r2, [pc, #68]	; (800326c <menu+0x1ca4>)
 8003228:	2101      	movs	r1, #1
 800322a:	2002      	movs	r0, #2
 800322c:	f7fd fb58 	bl	80008e0 <lcd_print>
 8003230:	e04b      	b.n	80032ca <menu+0x1d02>
			} else if(dilSecim == 1) {
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <menu+0x1ca0>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d147      	bne.n	80032ca <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 800323a:	4a0d      	ldr	r2, [pc, #52]	; (8003270 <menu+0x1ca8>)
 800323c:	2101      	movs	r1, #1
 800323e:	2002      	movs	r0, #2
 8003240:	f7fd fb4e 	bl	80008e0 <lcd_print>
 8003244:	e041      	b.n	80032ca <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <menu+0x1ce8>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d13d      	bne.n	80032ca <menu+0x1d02>
			if(dilSecim == 0) {
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <menu+0x1ca0>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d130      	bne.n	80032b8 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8003256:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <menu+0x1cec>)
 8003258:	2101      	movs	r1, #1
 800325a:	2002      	movs	r0, #2
 800325c:	f7fd fb40 	bl	80008e0 <lcd_print>
 8003260:	e033      	b.n	80032ca <menu+0x1d02>
 8003262:	bf00      	nop
 8003264:	20000c62 	.word	0x20000c62
 8003268:	20000c76 	.word	0x20000c76
 800326c:	0800de14 	.word	0x0800de14
 8003270:	0800de28 	.word	0x0800de28
 8003274:	40010800 	.word	0x40010800
 8003278:	20000c84 	.word	0x20000c84
 800327c:	20000b44 	.word	0x20000b44
 8003280:	20000c5b 	.word	0x20000c5b
 8003284:	20000c81 	.word	0x20000c81
 8003288:	20000c55 	.word	0x20000c55
 800328c:	0800e1b4 	.word	0x0800e1b4
 8003290:	0800e078 	.word	0x0800e078
 8003294:	0800e1c8 	.word	0x0800e1c8
 8003298:	0800e09c 	.word	0x0800e09c
 800329c:	20000c70 	.word	0x20000c70
 80032a0:	20000bd8 	.word	0x20000bd8
 80032a4:	20000c60 	.word	0x20000c60
 80032a8:	0800e1dc 	.word	0x0800e1dc
 80032ac:	0800e1f0 	.word	0x0800e1f0
 80032b0:	20000c63 	.word	0x20000c63
 80032b4:	0800de74 	.word	0x0800de74
			} else if(dilSecim == 1) {
 80032b8:	4b99      	ldr	r3, [pc, #612]	; (8003520 <menu+0x1f58>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d104      	bne.n	80032ca <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80032c0:	4a98      	ldr	r2, [pc, #608]	; (8003524 <menu+0x1f5c>)
 80032c2:	2101      	movs	r1, #1
 80032c4:	2002      	movs	r0, #2
 80032c6:	f7fd fb0b 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ca:	2102      	movs	r1, #2
 80032cc:	4896      	ldr	r0, [pc, #600]	; (8003528 <menu+0x1f60>)
 80032ce:	f006 fd95 	bl	8009dfc <HAL_GPIO_ReadPin>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d115      	bne.n	8003304 <menu+0x1d3c>
 80032d8:	4b94      	ldr	r3, [pc, #592]	; (800352c <menu+0x1f64>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	f083 0301 	eor.w	r3, r3, #1
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00e      	beq.n	8003304 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80032e6:	4b92      	ldr	r3, [pc, #584]	; (8003530 <menu+0x1f68>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	3301      	adds	r3, #1
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4b90      	ldr	r3, [pc, #576]	; (8003530 <menu+0x1f68>)
 80032f0:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80032f2:	4b8f      	ldr	r3, [pc, #572]	; (8003530 <menu+0x1f68>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d902      	bls.n	8003300 <menu+0x1d38>
				yukariYavasLimit = 0;
 80032fa:	4b8d      	ldr	r3, [pc, #564]	; (8003530 <menu+0x1f68>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003300:	f002 fe80 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003304:	2104      	movs	r1, #4
 8003306:	4888      	ldr	r0, [pc, #544]	; (8003528 <menu+0x1f60>)
 8003308:	f006 fd78 	bl	8009dfc <HAL_GPIO_ReadPin>
 800330c:	4603      	mov	r3, r0
 800330e:	2b01      	cmp	r3, #1
 8003310:	d115      	bne.n	800333e <menu+0x1d76>
 8003312:	4b86      	ldr	r3, [pc, #536]	; (800352c <menu+0x1f64>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	f083 0301 	eor.w	r3, r3, #1
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00e      	beq.n	800333e <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003320:	4b83      	ldr	r3, [pc, #524]	; (8003530 <menu+0x1f68>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	3b01      	subs	r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	4b81      	ldr	r3, [pc, #516]	; (8003530 <menu+0x1f68>)
 800332a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 800332c:	4b80      	ldr	r3, [pc, #512]	; (8003530 <menu+0x1f68>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003334:	4b7e      	ldr	r3, [pc, #504]	; (8003530 <menu+0x1f68>)
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800333a:	f002 fe63 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800333e:	2108      	movs	r1, #8
 8003340:	4879      	ldr	r0, [pc, #484]	; (8003528 <menu+0x1f60>)
 8003342:	f006 fd5b 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003346:	4603      	mov	r3, r0
 8003348:	2b01      	cmp	r3, #1
 800334a:	d10d      	bne.n	8003368 <menu+0x1da0>
 800334c:	4b77      	ldr	r3, [pc, #476]	; (800352c <menu+0x1f64>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	f083 0301 	eor.w	r3, r3, #1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d006      	beq.n	8003368 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 800335a:	4b75      	ldr	r3, [pc, #468]	; (8003530 <menu+0x1f68>)
 800335c:	781a      	ldrb	r2, [r3, #0]
 800335e:	4b75      	ldr	r3, [pc, #468]	; (8003534 <menu+0x1f6c>)
 8003360:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003362:	4b75      	ldr	r3, [pc, #468]	; (8003538 <menu+0x1f70>)
 8003364:	2201      	movs	r2, #1
 8003366:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003368:	4b74      	ldr	r3, [pc, #464]	; (800353c <menu+0x1f74>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b11      	cmp	r3, #17
 800336e:	f040 80c3 	bne.w	80034f8 <menu+0x1f30>
		if(dilSecim == 0) {
 8003372:	4b6b      	ldr	r3, [pc, #428]	; (8003520 <menu+0x1f58>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d105      	bne.n	8003386 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800337a:	4a71      	ldr	r2, [pc, #452]	; (8003540 <menu+0x1f78>)
 800337c:	2101      	movs	r1, #1
 800337e:	2001      	movs	r0, #1
 8003380:	f7fd faae 	bl	80008e0 <lcd_print>
 8003384:	e008      	b.n	8003398 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8003386:	4b66      	ldr	r3, [pc, #408]	; (8003520 <menu+0x1f58>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d104      	bne.n	8003398 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800338e:	4a6d      	ldr	r2, [pc, #436]	; (8003544 <menu+0x1f7c>)
 8003390:	2101      	movs	r1, #1
 8003392:	2001      	movs	r0, #1
 8003394:	f7fd faa4 	bl	80008e0 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003398:	4b6b      	ldr	r3, [pc, #428]	; (8003548 <menu+0x1f80>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d113      	bne.n	80033c8 <menu+0x1e00>
			if(dilSecim == 0){
 80033a0:	4b5f      	ldr	r3, [pc, #380]	; (8003520 <menu+0x1f58>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 80033a8:	4a68      	ldr	r2, [pc, #416]	; (800354c <menu+0x1f84>)
 80033aa:	2101      	movs	r1, #1
 80033ac:	2002      	movs	r0, #2
 80033ae:	f7fd fa97 	bl	80008e0 <lcd_print>
 80033b2:	e038      	b.n	8003426 <menu+0x1e5e>
			} else if(dilSecim == 1){
 80033b4:	4b5a      	ldr	r3, [pc, #360]	; (8003520 <menu+0x1f58>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d134      	bne.n	8003426 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80033bc:	4a64      	ldr	r2, [pc, #400]	; (8003550 <menu+0x1f88>)
 80033be:	2101      	movs	r1, #1
 80033c0:	2002      	movs	r0, #2
 80033c2:	f7fd fa8d 	bl	80008e0 <lcd_print>
 80033c6:	e02e      	b.n	8003426 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80033c8:	4b5f      	ldr	r3, [pc, #380]	; (8003548 <menu+0x1f80>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d113      	bne.n	80033f8 <menu+0x1e30>
			if(dilSecim == 0){
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <menu+0x1f58>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80033d8:	4a5e      	ldr	r2, [pc, #376]	; (8003554 <menu+0x1f8c>)
 80033da:	2101      	movs	r1, #1
 80033dc:	2002      	movs	r0, #2
 80033de:	f7fd fa7f 	bl	80008e0 <lcd_print>
 80033e2:	e020      	b.n	8003426 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80033e4:	4b4e      	ldr	r3, [pc, #312]	; (8003520 <menu+0x1f58>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d11c      	bne.n	8003426 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80033ec:	4a5a      	ldr	r2, [pc, #360]	; (8003558 <menu+0x1f90>)
 80033ee:	2101      	movs	r1, #1
 80033f0:	2002      	movs	r0, #2
 80033f2:	f7fd fa75 	bl	80008e0 <lcd_print>
 80033f6:	e016      	b.n	8003426 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80033f8:	4b53      	ldr	r3, [pc, #332]	; (8003548 <menu+0x1f80>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d112      	bne.n	8003426 <menu+0x1e5e>
			if(dilSecim == 0) {
 8003400:	4b47      	ldr	r3, [pc, #284]	; (8003520 <menu+0x1f58>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d105      	bne.n	8003414 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003408:	4a54      	ldr	r2, [pc, #336]	; (800355c <menu+0x1f94>)
 800340a:	2101      	movs	r1, #1
 800340c:	2002      	movs	r0, #2
 800340e:	f7fd fa67 	bl	80008e0 <lcd_print>
 8003412:	e008      	b.n	8003426 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003414:	4b42      	ldr	r3, [pc, #264]	; (8003520 <menu+0x1f58>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d104      	bne.n	8003426 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 800341c:	4a50      	ldr	r2, [pc, #320]	; (8003560 <menu+0x1f98>)
 800341e:	2101      	movs	r1, #1
 8003420:	2002      	movs	r0, #2
 8003422:	f7fd fa5d 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003426:	2102      	movs	r1, #2
 8003428:	483f      	ldr	r0, [pc, #252]	; (8003528 <menu+0x1f60>)
 800342a:	f006 fce7 	bl	8009dfc <HAL_GPIO_ReadPin>
 800342e:	4603      	mov	r3, r0
 8003430:	2b01      	cmp	r3, #1
 8003432:	d115      	bne.n	8003460 <menu+0x1e98>
 8003434:	4b3d      	ldr	r3, [pc, #244]	; (800352c <menu+0x1f64>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	f083 0301 	eor.w	r3, r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00e      	beq.n	8003460 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003442:	4b41      	ldr	r3, [pc, #260]	; (8003548 <menu+0x1f80>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	b2da      	uxtb	r2, r3
 800344a:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <menu+0x1f80>)
 800344c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800344e:	4b3e      	ldr	r3, [pc, #248]	; (8003548 <menu+0x1f80>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d902      	bls.n	800345c <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8003456:	4b3c      	ldr	r3, [pc, #240]	; (8003548 <menu+0x1f80>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800345c:	f002 fdd2 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003460:	2104      	movs	r1, #4
 8003462:	4831      	ldr	r0, [pc, #196]	; (8003528 <menu+0x1f60>)
 8003464:	f006 fcca 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003468:	4603      	mov	r3, r0
 800346a:	2b01      	cmp	r3, #1
 800346c:	d115      	bne.n	800349a <menu+0x1ed2>
 800346e:	4b2f      	ldr	r3, [pc, #188]	; (800352c <menu+0x1f64>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	f083 0301 	eor.w	r3, r3, #1
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00e      	beq.n	800349a <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800347c:	4b32      	ldr	r3, [pc, #200]	; (8003548 <menu+0x1f80>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	3b01      	subs	r3, #1
 8003482:	b2da      	uxtb	r2, r3
 8003484:	4b30      	ldr	r3, [pc, #192]	; (8003548 <menu+0x1f80>)
 8003486:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003488:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <menu+0x1f80>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d902      	bls.n	8003496 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003490:	4b2d      	ldr	r3, [pc, #180]	; (8003548 <menu+0x1f80>)
 8003492:	2202      	movs	r2, #2
 8003494:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003496:	f002 fdb5 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800349a:	2108      	movs	r1, #8
 800349c:	4822      	ldr	r0, [pc, #136]	; (8003528 <menu+0x1f60>)
 800349e:	f006 fcad 	bl	8009dfc <HAL_GPIO_ReadPin>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d127      	bne.n	80034f8 <menu+0x1f30>
 80034a8:	4b20      	ldr	r3, [pc, #128]	; (800352c <menu+0x1f64>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	f083 0301 	eor.w	r3, r3, #1
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d020      	beq.n	80034f8 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <menu+0x1f80>)
 80034b8:	781a      	ldrb	r2, [r3, #0]
 80034ba:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <menu+0x1f6c>)
 80034bc:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <menu+0x1f80>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d003      	beq.n	80034ce <menu+0x1f06>
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <menu+0x1f80>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d106      	bne.n	80034dc <menu+0x1f14>
				calismaSekli = 0;
 80034ce:	4b25      	ldr	r3, [pc, #148]	; (8003564 <menu+0x1f9c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80034d4:	4b23      	ldr	r3, [pc, #140]	; (8003564 <menu+0x1f9c>)
 80034d6:	781a      	ldrb	r2, [r3, #0]
 80034d8:	4b16      	ldr	r3, [pc, #88]	; (8003534 <menu+0x1f6c>)
 80034da:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80034dc:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <menu+0x1f80>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d106      	bne.n	80034f2 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80034e4:	4b20      	ldr	r3, [pc, #128]	; (8003568 <menu+0x1fa0>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80034ea:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <menu+0x1fa0>)
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	4b11      	ldr	r3, [pc, #68]	; (8003534 <menu+0x1f6c>)
 80034f0:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80034f2:	4b11      	ldr	r3, [pc, #68]	; (8003538 <menu+0x1f70>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80034f8:	4b10      	ldr	r3, [pc, #64]	; (800353c <menu+0x1f74>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b12      	cmp	r3, #18
 80034fe:	f040 80d5 	bne.w	80036ac <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <menu+0x1f80>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d13c      	bne.n	8003584 <menu+0x1fbc>
			if(dilSecim == 0) {
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <menu+0x1f58>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d12e      	bne.n	8003570 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003512:	4a16      	ldr	r2, [pc, #88]	; (800356c <menu+0x1fa4>)
 8003514:	2101      	movs	r1, #1
 8003516:	2001      	movs	r0, #1
 8003518:	f7fd f9e2 	bl	80008e0 <lcd_print>
 800351c:	e048      	b.n	80035b0 <menu+0x1fe8>
 800351e:	bf00      	nop
 8003520:	20000c76 	.word	0x20000c76
 8003524:	0800de88 	.word	0x0800de88
 8003528:	40010800 	.word	0x40010800
 800352c:	20000c84 	.word	0x20000c84
 8003530:	20000c63 	.word	0x20000c63
 8003534:	20000b44 	.word	0x20000b44
 8003538:	20000c81 	.word	0x20000c81
 800353c:	20000c55 	.word	0x20000c55
 8003540:	0800e204 	.word	0x0800e204
 8003544:	0800e218 	.word	0x0800e218
 8003548:	20000c64 	.word	0x20000c64
 800354c:	0800e22c 	.word	0x0800e22c
 8003550:	0800e23c 	.word	0x0800e23c
 8003554:	0800e24c 	.word	0x0800e24c
 8003558:	0800e25c 	.word	0x0800e25c
 800355c:	0800de14 	.word	0x0800de14
 8003560:	0800de28 	.word	0x0800de28
 8003564:	20000c56 	.word	0x20000c56
 8003568:	20000c67 	.word	0x20000c67
 800356c:	0800e26c 	.word	0x0800e26c
			} else if(dilSecim == 1) {
 8003570:	4b7b      	ldr	r3, [pc, #492]	; (8003760 <menu+0x2198>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d11b      	bne.n	80035b0 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003578:	4a7a      	ldr	r2, [pc, #488]	; (8003764 <menu+0x219c>)
 800357a:	2101      	movs	r1, #1
 800357c:	2001      	movs	r0, #1
 800357e:	f7fd f9af 	bl	80008e0 <lcd_print>
 8003582:	e015      	b.n	80035b0 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003584:	4b78      	ldr	r3, [pc, #480]	; (8003768 <menu+0x21a0>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d111      	bne.n	80035b0 <menu+0x1fe8>
			if(dilSecim == 0){
 800358c:	4b74      	ldr	r3, [pc, #464]	; (8003760 <menu+0x2198>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003594:	4a75      	ldr	r2, [pc, #468]	; (800376c <menu+0x21a4>)
 8003596:	2101      	movs	r1, #1
 8003598:	2001      	movs	r0, #1
 800359a:	f7fd f9a1 	bl	80008e0 <lcd_print>
			}
			if(dilSecim == 1){
 800359e:	4b70      	ldr	r3, [pc, #448]	; (8003760 <menu+0x2198>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d104      	bne.n	80035b0 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80035a6:	4a72      	ldr	r2, [pc, #456]	; (8003770 <menu+0x21a8>)
 80035a8:	2101      	movs	r1, #1
 80035aa:	2001      	movs	r0, #1
 80035ac:	f7fd f998 	bl	80008e0 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80035b0:	4b70      	ldr	r3, [pc, #448]	; (8003774 <menu+0x21ac>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d113      	bne.n	80035e0 <menu+0x2018>
			if(dilSecim == 0) {
 80035b8:	4b69      	ldr	r3, [pc, #420]	; (8003760 <menu+0x2198>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80035c0:	4a6d      	ldr	r2, [pc, #436]	; (8003778 <menu+0x21b0>)
 80035c2:	2101      	movs	r1, #1
 80035c4:	2002      	movs	r0, #2
 80035c6:	f7fd f98b 	bl	80008e0 <lcd_print>
 80035ca:	e020      	b.n	800360e <menu+0x2046>
			} else if(dilSecim == 1){
 80035cc:	4b64      	ldr	r3, [pc, #400]	; (8003760 <menu+0x2198>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d11c      	bne.n	800360e <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80035d4:	4a69      	ldr	r2, [pc, #420]	; (800377c <menu+0x21b4>)
 80035d6:	2101      	movs	r1, #1
 80035d8:	2002      	movs	r0, #2
 80035da:	f7fd f981 	bl	80008e0 <lcd_print>
 80035de:	e016      	b.n	800360e <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80035e0:	4b64      	ldr	r3, [pc, #400]	; (8003774 <menu+0x21ac>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d112      	bne.n	800360e <menu+0x2046>
			if(dilSecim == 0){
 80035e8:	4b5d      	ldr	r3, [pc, #372]	; (8003760 <menu+0x2198>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d105      	bne.n	80035fc <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80035f0:	4a63      	ldr	r2, [pc, #396]	; (8003780 <menu+0x21b8>)
 80035f2:	2101      	movs	r1, #1
 80035f4:	2002      	movs	r0, #2
 80035f6:	f7fd f973 	bl	80008e0 <lcd_print>
 80035fa:	e008      	b.n	800360e <menu+0x2046>
			} else if(dilSecim == 1){
 80035fc:	4b58      	ldr	r3, [pc, #352]	; (8003760 <menu+0x2198>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d104      	bne.n	800360e <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003604:	4a5f      	ldr	r2, [pc, #380]	; (8003784 <menu+0x21bc>)
 8003606:	2101      	movs	r1, #1
 8003608:	2002      	movs	r0, #2
 800360a:	f7fd f969 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800360e:	2102      	movs	r1, #2
 8003610:	485d      	ldr	r0, [pc, #372]	; (8003788 <menu+0x21c0>)
 8003612:	f006 fbf3 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003616:	4603      	mov	r3, r0
 8003618:	2b01      	cmp	r3, #1
 800361a:	d115      	bne.n	8003648 <menu+0x2080>
 800361c:	4b5b      	ldr	r3, [pc, #364]	; (800378c <menu+0x21c4>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	f083 0301 	eor.w	r3, r3, #1
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00e      	beq.n	8003648 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800362a:	4b52      	ldr	r3, [pc, #328]	; (8003774 <menu+0x21ac>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4b50      	ldr	r3, [pc, #320]	; (8003774 <menu+0x21ac>)
 8003634:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003636:	4b4f      	ldr	r3, [pc, #316]	; (8003774 <menu+0x21ac>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d902      	bls.n	8003644 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800363e:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <menu+0x21ac>)
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003644:	f002 fcde 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003648:	2104      	movs	r1, #4
 800364a:	484f      	ldr	r0, [pc, #316]	; (8003788 <menu+0x21c0>)
 800364c:	f006 fbd6 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003650:	4603      	mov	r3, r0
 8003652:	2b01      	cmp	r3, #1
 8003654:	d115      	bne.n	8003682 <menu+0x20ba>
 8003656:	4b4d      	ldr	r3, [pc, #308]	; (800378c <menu+0x21c4>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	f083 0301 	eor.w	r3, r3, #1
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00e      	beq.n	8003682 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003664:	4b43      	ldr	r3, [pc, #268]	; (8003774 <menu+0x21ac>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	3b01      	subs	r3, #1
 800366a:	b2da      	uxtb	r2, r3
 800366c:	4b41      	ldr	r3, [pc, #260]	; (8003774 <menu+0x21ac>)
 800366e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003670:	4b40      	ldr	r3, [pc, #256]	; (8003774 <menu+0x21ac>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003678:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <menu+0x21ac>)
 800367a:	2201      	movs	r2, #1
 800367c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800367e:	f002 fcc1 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003682:	2108      	movs	r1, #8
 8003684:	4840      	ldr	r0, [pc, #256]	; (8003788 <menu+0x21c0>)
 8003686:	f006 fbb9 	bl	8009dfc <HAL_GPIO_ReadPin>
 800368a:	4603      	mov	r3, r0
 800368c:	2b01      	cmp	r3, #1
 800368e:	d10d      	bne.n	80036ac <menu+0x20e4>
 8003690:	4b3e      	ldr	r3, [pc, #248]	; (800378c <menu+0x21c4>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	f083 0301 	eor.w	r3, r3, #1
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d006      	beq.n	80036ac <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800369e:	4b35      	ldr	r3, [pc, #212]	; (8003774 <menu+0x21ac>)
 80036a0:	781a      	ldrb	r2, [r3, #0]
 80036a2:	4b3b      	ldr	r3, [pc, #236]	; (8003790 <menu+0x21c8>)
 80036a4:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80036a6:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <menu+0x21cc>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80036ac:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <menu+0x21d0>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b13      	cmp	r3, #19
 80036b2:	f040 80d5 	bne.w	8003860 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80036b6:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <menu+0x21a0>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d113      	bne.n	80036e6 <menu+0x211e>
			if(dilSecim == 0) {
 80036be:	4b28      	ldr	r3, [pc, #160]	; (8003760 <menu+0x2198>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d105      	bne.n	80036d2 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80036c6:	4a35      	ldr	r2, [pc, #212]	; (800379c <menu+0x21d4>)
 80036c8:	2101      	movs	r1, #1
 80036ca:	2001      	movs	r0, #1
 80036cc:	f7fd f908 	bl	80008e0 <lcd_print>
 80036d0:	e01f      	b.n	8003712 <menu+0x214a>
			} else if(dilSecim == 1) {
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <menu+0x2198>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d11b      	bne.n	8003712 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80036da:	4a31      	ldr	r2, [pc, #196]	; (80037a0 <menu+0x21d8>)
 80036dc:	2101      	movs	r1, #1
 80036de:	2001      	movs	r0, #1
 80036e0:	f7fd f8fe 	bl	80008e0 <lcd_print>
 80036e4:	e015      	b.n	8003712 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80036e6:	4b20      	ldr	r3, [pc, #128]	; (8003768 <menu+0x21a0>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d111      	bne.n	8003712 <menu+0x214a>
			if(dilSecim == 0) {
 80036ee:	4b1c      	ldr	r3, [pc, #112]	; (8003760 <menu+0x2198>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d104      	bne.n	8003700 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80036f6:	4a2b      	ldr	r2, [pc, #172]	; (80037a4 <menu+0x21dc>)
 80036f8:	2101      	movs	r1, #1
 80036fa:	2001      	movs	r0, #1
 80036fc:	f7fd f8f0 	bl	80008e0 <lcd_print>
			}
			if(dilSecim == 1) {
 8003700:	4b17      	ldr	r3, [pc, #92]	; (8003760 <menu+0x2198>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d104      	bne.n	8003712 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003708:	4a27      	ldr	r2, [pc, #156]	; (80037a8 <menu+0x21e0>)
 800370a:	2101      	movs	r1, #1
 800370c:	2001      	movs	r0, #1
 800370e:	f7fd f8e7 	bl	80008e0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003712:	4b26      	ldr	r3, [pc, #152]	; (80037ac <menu+0x21e4>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d113      	bne.n	8003742 <menu+0x217a>
			if(dilSecim == 0) {
 800371a:	4b11      	ldr	r3, [pc, #68]	; (8003760 <menu+0x2198>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d105      	bne.n	800372e <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8003722:	4a15      	ldr	r2, [pc, #84]	; (8003778 <menu+0x21b0>)
 8003724:	2101      	movs	r1, #1
 8003726:	2002      	movs	r0, #2
 8003728:	f7fd f8da 	bl	80008e0 <lcd_print>
 800372c:	e049      	b.n	80037c2 <menu+0x21fa>
			} else if(dilSecim == 1) {
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <menu+0x2198>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d145      	bne.n	80037c2 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003736:	4a11      	ldr	r2, [pc, #68]	; (800377c <menu+0x21b4>)
 8003738:	2101      	movs	r1, #1
 800373a:	2002      	movs	r0, #2
 800373c:	f7fd f8d0 	bl	80008e0 <lcd_print>
 8003740:	e03f      	b.n	80037c2 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003742:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <menu+0x21e4>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d13b      	bne.n	80037c2 <menu+0x21fa>
			if(dilSecim == 0) {
 800374a:	4b05      	ldr	r3, [pc, #20]	; (8003760 <menu+0x2198>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d12e      	bne.n	80037b0 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003752:	4a0b      	ldr	r2, [pc, #44]	; (8003780 <menu+0x21b8>)
 8003754:	2101      	movs	r1, #1
 8003756:	2002      	movs	r0, #2
 8003758:	f7fd f8c2 	bl	80008e0 <lcd_print>
 800375c:	e031      	b.n	80037c2 <menu+0x21fa>
 800375e:	bf00      	nop
 8003760:	20000c76 	.word	0x20000c76
 8003764:	0800e280 	.word	0x0800e280
 8003768:	20000c64 	.word	0x20000c64
 800376c:	0800e290 	.word	0x0800e290
 8003770:	0800e2a4 	.word	0x0800e2a4
 8003774:	20000c65 	.word	0x20000c65
 8003778:	0800de14 	.word	0x0800de14
 800377c:	0800de28 	.word	0x0800de28
 8003780:	0800de74 	.word	0x0800de74
 8003784:	0800de88 	.word	0x0800de88
 8003788:	40010800 	.word	0x40010800
 800378c:	20000c84 	.word	0x20000c84
 8003790:	20000b44 	.word	0x20000b44
 8003794:	20000c81 	.word	0x20000c81
 8003798:	20000c55 	.word	0x20000c55
 800379c:	0800e2b8 	.word	0x0800e2b8
 80037a0:	0800e2cc 	.word	0x0800e2cc
 80037a4:	0800e2e0 	.word	0x0800e2e0
 80037a8:	0800e2f4 	.word	0x0800e2f4
 80037ac:	20000c66 	.word	0x20000c66
			} else if(dilSecim == 1) {
 80037b0:	4b90      	ldr	r3, [pc, #576]	; (80039f4 <menu+0x242c>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d104      	bne.n	80037c2 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80037b8:	4a8f      	ldr	r2, [pc, #572]	; (80039f8 <menu+0x2430>)
 80037ba:	2101      	movs	r1, #1
 80037bc:	2002      	movs	r0, #2
 80037be:	f7fd f88f 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037c2:	2102      	movs	r1, #2
 80037c4:	488d      	ldr	r0, [pc, #564]	; (80039fc <menu+0x2434>)
 80037c6:	f006 fb19 	bl	8009dfc <HAL_GPIO_ReadPin>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d115      	bne.n	80037fc <menu+0x2234>
 80037d0:	4b8b      	ldr	r3, [pc, #556]	; (8003a00 <menu+0x2438>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	f083 0301 	eor.w	r3, r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00e      	beq.n	80037fc <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80037de:	4b89      	ldr	r3, [pc, #548]	; (8003a04 <menu+0x243c>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4b87      	ldr	r3, [pc, #540]	; (8003a04 <menu+0x243c>)
 80037e8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80037ea:	4b86      	ldr	r3, [pc, #536]	; (8003a04 <menu+0x243c>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d902      	bls.n	80037f8 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80037f2:	4b84      	ldr	r3, [pc, #528]	; (8003a04 <menu+0x243c>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037f8:	f002 fc04 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037fc:	2104      	movs	r1, #4
 80037fe:	487f      	ldr	r0, [pc, #508]	; (80039fc <menu+0x2434>)
 8003800:	f006 fafc 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003804:	4603      	mov	r3, r0
 8003806:	2b01      	cmp	r3, #1
 8003808:	d115      	bne.n	8003836 <menu+0x226e>
 800380a:	4b7d      	ldr	r3, [pc, #500]	; (8003a00 <menu+0x2438>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	f083 0301 	eor.w	r3, r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00e      	beq.n	8003836 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003818:	4b7a      	ldr	r3, [pc, #488]	; (8003a04 <menu+0x243c>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	3b01      	subs	r3, #1
 800381e:	b2da      	uxtb	r2, r3
 8003820:	4b78      	ldr	r3, [pc, #480]	; (8003a04 <menu+0x243c>)
 8003822:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003824:	4b77      	ldr	r3, [pc, #476]	; (8003a04 <menu+0x243c>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 800382c:	4b75      	ldr	r3, [pc, #468]	; (8003a04 <menu+0x243c>)
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003832:	f002 fbe7 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003836:	2108      	movs	r1, #8
 8003838:	4870      	ldr	r0, [pc, #448]	; (80039fc <menu+0x2434>)
 800383a:	f006 fadf 	bl	8009dfc <HAL_GPIO_ReadPin>
 800383e:	4603      	mov	r3, r0
 8003840:	2b01      	cmp	r3, #1
 8003842:	d10d      	bne.n	8003860 <menu+0x2298>
 8003844:	4b6e      	ldr	r3, [pc, #440]	; (8003a00 <menu+0x2438>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	f083 0301 	eor.w	r3, r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d006      	beq.n	8003860 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003852:	4b6c      	ldr	r3, [pc, #432]	; (8003a04 <menu+0x243c>)
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	4b6c      	ldr	r3, [pc, #432]	; (8003a08 <menu+0x2440>)
 8003858:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800385a:	4b6c      	ldr	r3, [pc, #432]	; (8003a0c <menu+0x2444>)
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003860:	4b6b      	ldr	r3, [pc, #428]	; (8003a10 <menu+0x2448>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b14      	cmp	r3, #20
 8003866:	f040 80b5 	bne.w	80039d4 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800386a:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <menu+0x244c>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d113      	bne.n	800389a <menu+0x22d2>
			if(dilSecim == 0) {
 8003872:	4b60      	ldr	r3, [pc, #384]	; (80039f4 <menu+0x242c>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d105      	bne.n	8003886 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800387a:	4a67      	ldr	r2, [pc, #412]	; (8003a18 <menu+0x2450>)
 800387c:	2101      	movs	r1, #1
 800387e:	2001      	movs	r0, #1
 8003880:	f7fd f82e 	bl	80008e0 <lcd_print>
 8003884:	e020      	b.n	80038c8 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003886:	4b5b      	ldr	r3, [pc, #364]	; (80039f4 <menu+0x242c>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d11c      	bne.n	80038c8 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800388e:	4a63      	ldr	r2, [pc, #396]	; (8003a1c <menu+0x2454>)
 8003890:	2101      	movs	r1, #1
 8003892:	2001      	movs	r0, #1
 8003894:	f7fd f824 	bl	80008e0 <lcd_print>
 8003898:	e016      	b.n	80038c8 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800389a:	4b5e      	ldr	r3, [pc, #376]	; (8003a14 <menu+0x244c>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d112      	bne.n	80038c8 <menu+0x2300>
			if(dilSecim == 0) {
 80038a2:	4b54      	ldr	r3, [pc, #336]	; (80039f4 <menu+0x242c>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d105      	bne.n	80038b6 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80038aa:	4a5d      	ldr	r2, [pc, #372]	; (8003a20 <menu+0x2458>)
 80038ac:	2101      	movs	r1, #1
 80038ae:	2001      	movs	r0, #1
 80038b0:	f7fd f816 	bl	80008e0 <lcd_print>
 80038b4:	e008      	b.n	80038c8 <menu+0x2300>
			} else if(dilSecim == 1) {
 80038b6:	4b4f      	ldr	r3, [pc, #316]	; (80039f4 <menu+0x242c>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d104      	bne.n	80038c8 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80038be:	4a59      	ldr	r2, [pc, #356]	; (8003a24 <menu+0x245c>)
 80038c0:	2101      	movs	r1, #1
 80038c2:	2001      	movs	r0, #1
 80038c4:	f7fd f80c 	bl	80008e0 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80038c8:	4b57      	ldr	r3, [pc, #348]	; (8003a28 <menu+0x2460>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d113      	bne.n	80038f8 <menu+0x2330>
			if(dilSecim == 0) {
 80038d0:	4b48      	ldr	r3, [pc, #288]	; (80039f4 <menu+0x242c>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d105      	bne.n	80038e4 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80038d8:	4a54      	ldr	r2, [pc, #336]	; (8003a2c <menu+0x2464>)
 80038da:	2101      	movs	r1, #1
 80038dc:	2002      	movs	r0, #2
 80038de:	f7fc ffff 	bl	80008e0 <lcd_print>
 80038e2:	e020      	b.n	8003926 <menu+0x235e>
			} else if(dilSecim == 1) {
 80038e4:	4b43      	ldr	r3, [pc, #268]	; (80039f4 <menu+0x242c>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d11c      	bne.n	8003926 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80038ec:	4a50      	ldr	r2, [pc, #320]	; (8003a30 <menu+0x2468>)
 80038ee:	2101      	movs	r1, #1
 80038f0:	2002      	movs	r0, #2
 80038f2:	f7fc fff5 	bl	80008e0 <lcd_print>
 80038f6:	e016      	b.n	8003926 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80038f8:	4b4b      	ldr	r3, [pc, #300]	; (8003a28 <menu+0x2460>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d112      	bne.n	8003926 <menu+0x235e>
			if(dilSecim == 0) {
 8003900:	4b3c      	ldr	r3, [pc, #240]	; (80039f4 <menu+0x242c>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003908:	4a4a      	ldr	r2, [pc, #296]	; (8003a34 <menu+0x246c>)
 800390a:	2101      	movs	r1, #1
 800390c:	2002      	movs	r0, #2
 800390e:	f7fc ffe7 	bl	80008e0 <lcd_print>
 8003912:	e008      	b.n	8003926 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003914:	4b37      	ldr	r3, [pc, #220]	; (80039f4 <menu+0x242c>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d104      	bne.n	8003926 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 800391c:	4a46      	ldr	r2, [pc, #280]	; (8003a38 <menu+0x2470>)
 800391e:	2101      	movs	r1, #1
 8003920:	2002      	movs	r0, #2
 8003922:	f7fc ffdd 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003926:	2102      	movs	r1, #2
 8003928:	4834      	ldr	r0, [pc, #208]	; (80039fc <menu+0x2434>)
 800392a:	f006 fa67 	bl	8009dfc <HAL_GPIO_ReadPin>
 800392e:	4603      	mov	r3, r0
 8003930:	2b01      	cmp	r3, #1
 8003932:	d119      	bne.n	8003968 <menu+0x23a0>
 8003934:	4b32      	ldr	r3, [pc, #200]	; (8003a00 <menu+0x2438>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	f083 0301 	eor.w	r3, r3, #1
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d012      	beq.n	8003968 <menu+0x23a0>
 8003942:	4b34      	ldr	r3, [pc, #208]	; (8003a14 <menu+0x244c>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d10e      	bne.n	8003968 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800394a:	4b37      	ldr	r3, [pc, #220]	; (8003a28 <menu+0x2460>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	3301      	adds	r3, #1
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4b35      	ldr	r3, [pc, #212]	; (8003a28 <menu+0x2460>)
 8003954:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003956:	4b34      	ldr	r3, [pc, #208]	; (8003a28 <menu+0x2460>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d902      	bls.n	8003964 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800395e:	4b32      	ldr	r3, [pc, #200]	; (8003a28 <menu+0x2460>)
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003964:	f002 fb4e 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003968:	2104      	movs	r1, #4
 800396a:	4824      	ldr	r0, [pc, #144]	; (80039fc <menu+0x2434>)
 800396c:	f006 fa46 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003970:	4603      	mov	r3, r0
 8003972:	2b01      	cmp	r3, #1
 8003974:	d119      	bne.n	80039aa <menu+0x23e2>
 8003976:	4b22      	ldr	r3, [pc, #136]	; (8003a00 <menu+0x2438>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	f083 0301 	eor.w	r3, r3, #1
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d012      	beq.n	80039aa <menu+0x23e2>
 8003984:	4b23      	ldr	r3, [pc, #140]	; (8003a14 <menu+0x244c>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d10e      	bne.n	80039aa <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 800398c:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <menu+0x2460>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	3b01      	subs	r3, #1
 8003992:	b2da      	uxtb	r2, r3
 8003994:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <menu+0x2460>)
 8003996:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003998:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <menu+0x2460>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80039a0:	4b21      	ldr	r3, [pc, #132]	; (8003a28 <menu+0x2460>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039a6:	f002 fb2d 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039aa:	2108      	movs	r1, #8
 80039ac:	4813      	ldr	r0, [pc, #76]	; (80039fc <menu+0x2434>)
 80039ae:	f006 fa25 	bl	8009dfc <HAL_GPIO_ReadPin>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d10d      	bne.n	80039d4 <menu+0x240c>
 80039b8:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <menu+0x2438>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	f083 0301 	eor.w	r3, r3, #1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d006      	beq.n	80039d4 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80039c6:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <menu+0x2460>)
 80039c8:	781a      	ldrb	r2, [r3, #0]
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <menu+0x2440>)
 80039cc:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80039ce:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <menu+0x2444>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80039d4:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <menu+0x2448>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b15      	cmp	r3, #21
 80039da:	f040 80c2 	bne.w	8003b62 <menu+0x259a>
		if(dilSecim == 0) {
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <menu+0x242c>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d12c      	bne.n	8003a40 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80039e6:	4a15      	ldr	r2, [pc, #84]	; (8003a3c <menu+0x2474>)
 80039e8:	2101      	movs	r1, #1
 80039ea:	2001      	movs	r0, #1
 80039ec:	f7fc ff78 	bl	80008e0 <lcd_print>
 80039f0:	e02f      	b.n	8003a52 <menu+0x248a>
 80039f2:	bf00      	nop
 80039f4:	20000c76 	.word	0x20000c76
 80039f8:	0800de88 	.word	0x0800de88
 80039fc:	40010800 	.word	0x40010800
 8003a00:	20000c84 	.word	0x20000c84
 8003a04:	20000c66 	.word	0x20000c66
 8003a08:	20000b44 	.word	0x20000b44
 8003a0c:	20000c81 	.word	0x20000c81
 8003a10:	20000c55 	.word	0x20000c55
 8003a14:	20000c64 	.word	0x20000c64
 8003a18:	0800e308 	.word	0x0800e308
 8003a1c:	0800e31c 	.word	0x0800e31c
 8003a20:	0800e330 	.word	0x0800e330
 8003a24:	0800e344 	.word	0x0800e344
 8003a28:	20000c67 	.word	0x20000c67
 8003a2c:	0800e358 	.word	0x0800e358
 8003a30:	0800e36c 	.word	0x0800e36c
 8003a34:	0800e37c 	.word	0x0800e37c
 8003a38:	0800e390 	.word	0x0800e390
 8003a3c:	0800e3a0 	.word	0x0800e3a0
		} else if(dilSecim == 1) {
 8003a40:	4b9c      	ldr	r3, [pc, #624]	; (8003cb4 <menu+0x26ec>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d104      	bne.n	8003a52 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003a48:	4a9b      	ldr	r2, [pc, #620]	; (8003cb8 <menu+0x26f0>)
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	f7fc ff47 	bl	80008e0 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003a52:	4b9a      	ldr	r3, [pc, #616]	; (8003cbc <menu+0x26f4>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d112      	bne.n	8003a80 <menu+0x24b8>
			if(dilSecim == 0) {
 8003a5a:	4b96      	ldr	r3, [pc, #600]	; (8003cb4 <menu+0x26ec>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003a62:	4a97      	ldr	r2, [pc, #604]	; (8003cc0 <menu+0x26f8>)
 8003a64:	2101      	movs	r1, #1
 8003a66:	2002      	movs	r0, #2
 8003a68:	f7fc ff3a 	bl	80008e0 <lcd_print>
			}
			if(dilSecim == 1) {
 8003a6c:	4b91      	ldr	r3, [pc, #580]	; (8003cb4 <menu+0x26ec>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d11c      	bne.n	8003aae <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003a74:	4a93      	ldr	r2, [pc, #588]	; (8003cc4 <menu+0x26fc>)
 8003a76:	2101      	movs	r1, #1
 8003a78:	2002      	movs	r0, #2
 8003a7a:	f7fc ff31 	bl	80008e0 <lcd_print>
 8003a7e:	e016      	b.n	8003aae <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003a80:	4b8e      	ldr	r3, [pc, #568]	; (8003cbc <menu+0x26f4>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d112      	bne.n	8003aae <menu+0x24e6>
			if(dilSecim == 0) {
 8003a88:	4b8a      	ldr	r3, [pc, #552]	; (8003cb4 <menu+0x26ec>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d105      	bne.n	8003a9c <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003a90:	4a8d      	ldr	r2, [pc, #564]	; (8003cc8 <menu+0x2700>)
 8003a92:	2101      	movs	r1, #1
 8003a94:	2002      	movs	r0, #2
 8003a96:	f7fc ff23 	bl	80008e0 <lcd_print>
 8003a9a:	e008      	b.n	8003aae <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003a9c:	4b85      	ldr	r3, [pc, #532]	; (8003cb4 <menu+0x26ec>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d104      	bne.n	8003aae <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003aa4:	4a89      	ldr	r2, [pc, #548]	; (8003ccc <menu+0x2704>)
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	f7fc ff19 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aae:	2102      	movs	r1, #2
 8003ab0:	4887      	ldr	r0, [pc, #540]	; (8003cd0 <menu+0x2708>)
 8003ab2:	f006 f9a3 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d115      	bne.n	8003ae8 <menu+0x2520>
 8003abc:	4b85      	ldr	r3, [pc, #532]	; (8003cd4 <menu+0x270c>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	f083 0301 	eor.w	r3, r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00e      	beq.n	8003ae8 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003aca:	4b7c      	ldr	r3, [pc, #496]	; (8003cbc <menu+0x26f4>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	4b7a      	ldr	r3, [pc, #488]	; (8003cbc <menu+0x26f4>)
 8003ad4:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003ad6:	4b79      	ldr	r3, [pc, #484]	; (8003cbc <menu+0x26f4>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d902      	bls.n	8003ae4 <menu+0x251c>
				platformSilindirTipi = 0;
 8003ade:	4b77      	ldr	r3, [pc, #476]	; (8003cbc <menu+0x26f4>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ae4:	f002 fa8e 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ae8:	2104      	movs	r1, #4
 8003aea:	4879      	ldr	r0, [pc, #484]	; (8003cd0 <menu+0x2708>)
 8003aec:	f006 f986 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d115      	bne.n	8003b22 <menu+0x255a>
 8003af6:	4b77      	ldr	r3, [pc, #476]	; (8003cd4 <menu+0x270c>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	f083 0301 	eor.w	r3, r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00e      	beq.n	8003b22 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003b04:	4b6d      	ldr	r3, [pc, #436]	; (8003cbc <menu+0x26f4>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	4b6b      	ldr	r3, [pc, #428]	; (8003cbc <menu+0x26f4>)
 8003b0e:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003b10:	4b6a      	ldr	r3, [pc, #424]	; (8003cbc <menu+0x26f4>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003b18:	4b68      	ldr	r3, [pc, #416]	; (8003cbc <menu+0x26f4>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b1e:	f002 fa71 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b22:	2108      	movs	r1, #8
 8003b24:	486a      	ldr	r0, [pc, #424]	; (8003cd0 <menu+0x2708>)
 8003b26:	f006 f969 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d118      	bne.n	8003b62 <menu+0x259a>
 8003b30:	4b68      	ldr	r3, [pc, #416]	; (8003cd4 <menu+0x270c>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f083 0301 	eor.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d011      	beq.n	8003b62 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003b3e:	4b5f      	ldr	r3, [pc, #380]	; (8003cbc <menu+0x26f4>)
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	4b65      	ldr	r3, [pc, #404]	; (8003cd8 <menu+0x2710>)
 8003b44:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003b46:	4b5d      	ldr	r3, [pc, #372]	; (8003cbc <menu+0x26f4>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d106      	bne.n	8003b5c <menu+0x2594>
				altLimit = 1;
 8003b4e:	4b63      	ldr	r3, [pc, #396]	; (8003cdc <menu+0x2714>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003b54:	4b61      	ldr	r3, [pc, #388]	; (8003cdc <menu+0x2714>)
 8003b56:	781a      	ldrb	r2, [r3, #0]
 8003b58:	4b5f      	ldr	r3, [pc, #380]	; (8003cd8 <menu+0x2710>)
 8003b5a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003b5c:	4b60      	ldr	r3, [pc, #384]	; (8003ce0 <menu+0x2718>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003b62:	4b60      	ldr	r3, [pc, #384]	; (8003ce4 <menu+0x271c>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b16      	cmp	r3, #22
 8003b68:	f040 8081 	bne.w	8003c6e <menu+0x26a6>
		if(dilSecim == 0) {
 8003b6c:	4b51      	ldr	r3, [pc, #324]	; (8003cb4 <menu+0x26ec>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003b74:	4a5c      	ldr	r2, [pc, #368]	; (8003ce8 <menu+0x2720>)
 8003b76:	2101      	movs	r1, #1
 8003b78:	2001      	movs	r0, #1
 8003b7a:	f7fc feb1 	bl	80008e0 <lcd_print>
 8003b7e:	e008      	b.n	8003b92 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003b80:	4b4c      	ldr	r3, [pc, #304]	; (8003cb4 <menu+0x26ec>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d104      	bne.n	8003b92 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003b88:	4a58      	ldr	r2, [pc, #352]	; (8003cec <menu+0x2724>)
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f7fc fea7 	bl	80008e0 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b92:	4b48      	ldr	r3, [pc, #288]	; (8003cb4 <menu+0x26ec>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d105      	bne.n	8003ba6 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b9a:	4a55      	ldr	r2, [pc, #340]	; (8003cf0 <menu+0x2728>)
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	2002      	movs	r0, #2
 8003ba0:	f7fc fe9e 	bl	80008e0 <lcd_print>
 8003ba4:	e008      	b.n	8003bb8 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003ba6:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <menu+0x26ec>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d104      	bne.n	8003bb8 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003bae:	4a51      	ldr	r2, [pc, #324]	; (8003cf4 <menu+0x272c>)
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	2002      	movs	r0, #2
 8003bb4:	f7fc fe94 	bl	80008e0 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003bb8:	4b4f      	ldr	r3, [pc, #316]	; (8003cf8 <menu+0x2730>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	220a      	movs	r2, #10
 8003bbe:	494f      	ldr	r1, [pc, #316]	; (8003cfc <menu+0x2734>)
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f009 f9a3 	bl	800cf0c <itoa>
		lcd_print(2,16,snum);
 8003bc6:	4a4d      	ldr	r2, [pc, #308]	; (8003cfc <menu+0x2734>)
 8003bc8:	2110      	movs	r1, #16
 8003bca:	2002      	movs	r0, #2
 8003bcc:	f7fc fe88 	bl	80008e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	483f      	ldr	r0, [pc, #252]	; (8003cd0 <menu+0x2708>)
 8003bd4:	f006 f912 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d115      	bne.n	8003c0a <menu+0x2642>
 8003bde:	4b3d      	ldr	r3, [pc, #244]	; (8003cd4 <menu+0x270c>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	f083 0301 	eor.w	r3, r3, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003bec:	4b42      	ldr	r3, [pc, #264]	; (8003cf8 <menu+0x2730>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	4b40      	ldr	r3, [pc, #256]	; (8003cf8 <menu+0x2730>)
 8003bf6:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003bf8:	4b3f      	ldr	r3, [pc, #252]	; (8003cf8 <menu+0x2730>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d902      	bls.n	8003c06 <menu+0x263e>
				yukariValfTmr = 0;
 8003c00:	4b3d      	ldr	r3, [pc, #244]	; (8003cf8 <menu+0x2730>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c06:	f002 f9fd 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c0a:	2104      	movs	r1, #4
 8003c0c:	4830      	ldr	r0, [pc, #192]	; (8003cd0 <menu+0x2708>)
 8003c0e:	f006 f8f5 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d115      	bne.n	8003c44 <menu+0x267c>
 8003c18:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <menu+0x270c>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	f083 0301 	eor.w	r3, r3, #1
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00e      	beq.n	8003c44 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003c26:	4b34      	ldr	r3, [pc, #208]	; (8003cf8 <menu+0x2730>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	4b32      	ldr	r3, [pc, #200]	; (8003cf8 <menu+0x2730>)
 8003c30:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003c32:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <menu+0x2730>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d902      	bls.n	8003c40 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003c3a:	4b2f      	ldr	r3, [pc, #188]	; (8003cf8 <menu+0x2730>)
 8003c3c:	2205      	movs	r2, #5
 8003c3e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c40:	f002 f9e0 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c44:	2108      	movs	r1, #8
 8003c46:	4822      	ldr	r0, [pc, #136]	; (8003cd0 <menu+0x2708>)
 8003c48:	f006 f8d8 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d10d      	bne.n	8003c6e <menu+0x26a6>
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <menu+0x270c>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	f083 0301 	eor.w	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d006      	beq.n	8003c6e <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003c60:	4b25      	ldr	r3, [pc, #148]	; (8003cf8 <menu+0x2730>)
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	4b1c      	ldr	r3, [pc, #112]	; (8003cd8 <menu+0x2710>)
 8003c66:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003c68:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <menu+0x2718>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <menu+0x271c>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b17      	cmp	r3, #23
 8003c74:	f040 80ac 	bne.w	8003dd0 <menu+0x2808>
		if(dilSecim == 0) {
 8003c78:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <menu+0x26ec>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003c80:	4a1f      	ldr	r2, [pc, #124]	; (8003d00 <menu+0x2738>)
 8003c82:	2101      	movs	r1, #1
 8003c84:	2001      	movs	r0, #1
 8003c86:	f7fc fe2b 	bl	80008e0 <lcd_print>
 8003c8a:	e008      	b.n	8003c9e <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003c8c:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <menu+0x26ec>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d104      	bne.n	8003c9e <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003c94:	4a1b      	ldr	r2, [pc, #108]	; (8003d04 <menu+0x273c>)
 8003c96:	2101      	movs	r1, #1
 8003c98:	2001      	movs	r0, #1
 8003c9a:	f7fc fe21 	bl	80008e0 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <menu+0x26ec>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d130      	bne.n	8003d08 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ca6:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <menu+0x2728>)
 8003ca8:	2101      	movs	r1, #1
 8003caa:	2002      	movs	r0, #2
 8003cac:	f7fc fe18 	bl	80008e0 <lcd_print>
 8003cb0:	e033      	b.n	8003d1a <menu+0x2752>
 8003cb2:	bf00      	nop
 8003cb4:	20000c76 	.word	0x20000c76
 8003cb8:	0800e3b4 	.word	0x0800e3b4
 8003cbc:	20000c68 	.word	0x20000c68
 8003cc0:	0800e358 	.word	0x0800e358
 8003cc4:	0800e36c 	.word	0x0800e36c
 8003cc8:	0800e37c 	.word	0x0800e37c
 8003ccc:	0800e390 	.word	0x0800e390
 8003cd0:	40010800 	.word	0x40010800
 8003cd4:	20000c84 	.word	0x20000c84
 8003cd8:	20000b44 	.word	0x20000b44
 8003cdc:	20000c5b 	.word	0x20000c5b
 8003ce0:	20000c81 	.word	0x20000c81
 8003ce4:	20000c55 	.word	0x20000c55
 8003ce8:	0800e3c4 	.word	0x0800e3c4
 8003cec:	0800e3d8 	.word	0x0800e3d8
 8003cf0:	0800e078 	.word	0x0800e078
 8003cf4:	0800e3ec 	.word	0x0800e3ec
 8003cf8:	20000c69 	.word	0x20000c69
 8003cfc:	20000bd8 	.word	0x20000bd8
 8003d00:	0800e3fc 	.word	0x0800e3fc
 8003d04:	0800e410 	.word	0x0800e410
			} else if(dilSecim == 1) {
 8003d08:	4b98      	ldr	r3, [pc, #608]	; (8003f6c <menu+0x29a4>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d104      	bne.n	8003d1a <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003d10:	4a97      	ldr	r2, [pc, #604]	; (8003f70 <menu+0x29a8>)
 8003d12:	2101      	movs	r1, #1
 8003d14:	2002      	movs	r0, #2
 8003d16:	f7fc fde3 	bl	80008e0 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003d1a:	4b96      	ldr	r3, [pc, #600]	; (8003f74 <menu+0x29ac>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	220a      	movs	r2, #10
 8003d20:	4995      	ldr	r1, [pc, #596]	; (8003f78 <menu+0x29b0>)
 8003d22:	4618      	mov	r0, r3
 8003d24:	f009 f8f2 	bl	800cf0c <itoa>
		lcd_print(2,16,snum);
 8003d28:	4a93      	ldr	r2, [pc, #588]	; (8003f78 <menu+0x29b0>)
 8003d2a:	2110      	movs	r1, #16
 8003d2c:	2002      	movs	r0, #2
 8003d2e:	f7fc fdd7 	bl	80008e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d32:	2102      	movs	r1, #2
 8003d34:	4891      	ldr	r0, [pc, #580]	; (8003f7c <menu+0x29b4>)
 8003d36:	f006 f861 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d115      	bne.n	8003d6c <menu+0x27a4>
 8003d40:	4b8f      	ldr	r3, [pc, #572]	; (8003f80 <menu+0x29b8>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	f083 0301 	eor.w	r3, r3, #1
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00e      	beq.n	8003d6c <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003d4e:	4b89      	ldr	r3, [pc, #548]	; (8003f74 <menu+0x29ac>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	3301      	adds	r3, #1
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4b87      	ldr	r3, [pc, #540]	; (8003f74 <menu+0x29ac>)
 8003d58:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003d5a:	4b86      	ldr	r3, [pc, #536]	; (8003f74 <menu+0x29ac>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d902      	bls.n	8003d68 <menu+0x27a0>
				asagiValfTmr = 0;
 8003d62:	4b84      	ldr	r3, [pc, #528]	; (8003f74 <menu+0x29ac>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d68:	f002 f94c 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d6c:	2104      	movs	r1, #4
 8003d6e:	4883      	ldr	r0, [pc, #524]	; (8003f7c <menu+0x29b4>)
 8003d70:	f006 f844 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d115      	bne.n	8003da6 <menu+0x27de>
 8003d7a:	4b81      	ldr	r3, [pc, #516]	; (8003f80 <menu+0x29b8>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	f083 0301 	eor.w	r3, r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00e      	beq.n	8003da6 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003d88:	4b7a      	ldr	r3, [pc, #488]	; (8003f74 <menu+0x29ac>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	4b78      	ldr	r3, [pc, #480]	; (8003f74 <menu+0x29ac>)
 8003d92:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003d94:	4b77      	ldr	r3, [pc, #476]	; (8003f74 <menu+0x29ac>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b06      	cmp	r3, #6
 8003d9a:	d902      	bls.n	8003da2 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003d9c:	4b75      	ldr	r3, [pc, #468]	; (8003f74 <menu+0x29ac>)
 8003d9e:	2205      	movs	r2, #5
 8003da0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003da2:	f002 f92f 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003da6:	2108      	movs	r1, #8
 8003da8:	4874      	ldr	r0, [pc, #464]	; (8003f7c <menu+0x29b4>)
 8003daa:	f006 f827 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d10d      	bne.n	8003dd0 <menu+0x2808>
 8003db4:	4b72      	ldr	r3, [pc, #456]	; (8003f80 <menu+0x29b8>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	f083 0301 	eor.w	r3, r3, #1
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d006      	beq.n	8003dd0 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003dc2:	4b6c      	ldr	r3, [pc, #432]	; (8003f74 <menu+0x29ac>)
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	4b6f      	ldr	r3, [pc, #444]	; (8003f84 <menu+0x29bc>)
 8003dc8:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003dca:	4b6f      	ldr	r3, [pc, #444]	; (8003f88 <menu+0x29c0>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003dd0:	4b6e      	ldr	r3, [pc, #440]	; (8003f8c <menu+0x29c4>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b18      	cmp	r3, #24
 8003dd6:	f040 809d 	bne.w	8003f14 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003dda:	4b6d      	ldr	r3, [pc, #436]	; (8003f90 <menu+0x29c8>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d113      	bne.n	8003e0a <menu+0x2842>
			if(dilSecim == 0) {
 8003de2:	4b62      	ldr	r3, [pc, #392]	; (8003f6c <menu+0x29a4>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d105      	bne.n	8003df6 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003dea:	4a6a      	ldr	r2, [pc, #424]	; (8003f94 <menu+0x29cc>)
 8003dec:	2101      	movs	r1, #1
 8003dee:	2001      	movs	r0, #1
 8003df0:	f7fc fd76 	bl	80008e0 <lcd_print>
 8003df4:	e020      	b.n	8003e38 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003df6:	4b5d      	ldr	r3, [pc, #372]	; (8003f6c <menu+0x29a4>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d11c      	bne.n	8003e38 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003dfe:	4a66      	ldr	r2, [pc, #408]	; (8003f98 <menu+0x29d0>)
 8003e00:	2101      	movs	r1, #1
 8003e02:	2001      	movs	r0, #1
 8003e04:	f7fc fd6c 	bl	80008e0 <lcd_print>
 8003e08:	e016      	b.n	8003e38 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003e0a:	4b61      	ldr	r3, [pc, #388]	; (8003f90 <menu+0x29c8>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d112      	bne.n	8003e38 <menu+0x2870>
			if(dilSecim == 0) {
 8003e12:	4b56      	ldr	r3, [pc, #344]	; (8003f6c <menu+0x29a4>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d105      	bne.n	8003e26 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003e1a:	4a60      	ldr	r2, [pc, #384]	; (8003f9c <menu+0x29d4>)
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	2001      	movs	r0, #1
 8003e20:	f7fc fd5e 	bl	80008e0 <lcd_print>
 8003e24:	e008      	b.n	8003e38 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003e26:	4b51      	ldr	r3, [pc, #324]	; (8003f6c <menu+0x29a4>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d104      	bne.n	8003e38 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003e2e:	4a5c      	ldr	r2, [pc, #368]	; (8003fa0 <menu+0x29d8>)
 8003e30:	2101      	movs	r1, #1
 8003e32:	2001      	movs	r0, #1
 8003e34:	f7fc fd54 	bl	80008e0 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003e38:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <menu+0x29a4>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d105      	bne.n	8003e4c <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e40:	4a58      	ldr	r2, [pc, #352]	; (8003fa4 <menu+0x29dc>)
 8003e42:	2101      	movs	r1, #1
 8003e44:	2002      	movs	r0, #2
 8003e46:	f7fc fd4b 	bl	80008e0 <lcd_print>
 8003e4a:	e008      	b.n	8003e5e <menu+0x2896>
			} else if(dilSecim == 1) {
 8003e4c:	4b47      	ldr	r3, [pc, #284]	; (8003f6c <menu+0x29a4>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d104      	bne.n	8003e5e <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003e54:	4a46      	ldr	r2, [pc, #280]	; (8003f70 <menu+0x29a8>)
 8003e56:	2101      	movs	r1, #1
 8003e58:	2002      	movs	r0, #2
 8003e5a:	f7fc fd41 	bl	80008e0 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003e5e:	4b52      	ldr	r3, [pc, #328]	; (8003fa8 <menu+0x29e0>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	220a      	movs	r2, #10
 8003e64:	4944      	ldr	r1, [pc, #272]	; (8003f78 <menu+0x29b0>)
 8003e66:	4618      	mov	r0, r3
 8003e68:	f009 f850 	bl	800cf0c <itoa>
		lcd_print(2, 16, snum);
 8003e6c:	4a42      	ldr	r2, [pc, #264]	; (8003f78 <menu+0x29b0>)
 8003e6e:	2110      	movs	r1, #16
 8003e70:	2002      	movs	r0, #2
 8003e72:	f7fc fd35 	bl	80008e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e76:	2102      	movs	r1, #2
 8003e78:	4840      	ldr	r0, [pc, #256]	; (8003f7c <menu+0x29b4>)
 8003e7a:	f005 ffbf 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d115      	bne.n	8003eb0 <menu+0x28e8>
 8003e84:	4b3e      	ldr	r3, [pc, #248]	; (8003f80 <menu+0x29b8>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	f083 0301 	eor.w	r3, r3, #1
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00e      	beq.n	8003eb0 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003e92:	4b45      	ldr	r3, [pc, #276]	; (8003fa8 <menu+0x29e0>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	3301      	adds	r3, #1
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	4b43      	ldr	r3, [pc, #268]	; (8003fa8 <menu+0x29e0>)
 8003e9c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003e9e:	4b42      	ldr	r3, [pc, #264]	; (8003fa8 <menu+0x29e0>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b05      	cmp	r3, #5
 8003ea4:	d902      	bls.n	8003eac <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003ea6:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <menu+0x29e0>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003eac:	f002 f8aa 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eb0:	2104      	movs	r1, #4
 8003eb2:	4832      	ldr	r0, [pc, #200]	; (8003f7c <menu+0x29b4>)
 8003eb4:	f005 ffa2 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d115      	bne.n	8003eea <menu+0x2922>
 8003ebe:	4b30      	ldr	r3, [pc, #192]	; (8003f80 <menu+0x29b8>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	f083 0301 	eor.w	r3, r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00e      	beq.n	8003eea <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003ecc:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <menu+0x29e0>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <menu+0x29e0>)
 8003ed6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003ed8:	4b33      	ldr	r3, [pc, #204]	; (8003fa8 <menu+0x29e0>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b06      	cmp	r3, #6
 8003ede:	d902      	bls.n	8003ee6 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003ee0:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <menu+0x29e0>)
 8003ee2:	2205      	movs	r2, #5
 8003ee4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ee6:	f002 f88d 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eea:	2108      	movs	r1, #8
 8003eec:	4823      	ldr	r0, [pc, #140]	; (8003f7c <menu+0x29b4>)
 8003eee:	f005 ff85 	bl	8009dfc <HAL_GPIO_ReadPin>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d10d      	bne.n	8003f14 <menu+0x294c>
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <menu+0x29b8>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	f083 0301 	eor.w	r3, r3, #1
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d006      	beq.n	8003f14 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003f06:	4b28      	ldr	r3, [pc, #160]	; (8003fa8 <menu+0x29e0>)
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <menu+0x29bc>)
 8003f0c:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003f0e:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <menu+0x29c0>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003f14:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <menu+0x29c4>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b19      	cmp	r3, #25
 8003f1a:	f040 80c4 	bne.w	80040a6 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003f1e:	4b1c      	ldr	r3, [pc, #112]	; (8003f90 <menu+0x29c8>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d113      	bne.n	8003f4e <menu+0x2986>
			if(dilSecim == 0) {
 8003f26:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <menu+0x29a4>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d105      	bne.n	8003f3a <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003f2e:	4a1f      	ldr	r2, [pc, #124]	; (8003fac <menu+0x29e4>)
 8003f30:	2101      	movs	r1, #1
 8003f32:	2001      	movs	r0, #1
 8003f34:	f7fc fcd4 	bl	80008e0 <lcd_print>
 8003f38:	e047      	b.n	8003fca <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <menu+0x29a4>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d143      	bne.n	8003fca <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003f42:	4a1b      	ldr	r2, [pc, #108]	; (8003fb0 <menu+0x29e8>)
 8003f44:	2101      	movs	r1, #1
 8003f46:	2001      	movs	r0, #1
 8003f48:	f7fc fcca 	bl	80008e0 <lcd_print>
 8003f4c:	e03d      	b.n	8003fca <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003f4e:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <menu+0x29c8>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d139      	bne.n	8003fca <menu+0x2a02>
			if(dilSecim == 0) {
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <menu+0x29a4>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d12c      	bne.n	8003fb8 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003f5e:	4a15      	ldr	r2, [pc, #84]	; (8003fb4 <menu+0x29ec>)
 8003f60:	2101      	movs	r1, #1
 8003f62:	2001      	movs	r0, #1
 8003f64:	f7fc fcbc 	bl	80008e0 <lcd_print>
 8003f68:	e02f      	b.n	8003fca <menu+0x2a02>
 8003f6a:	bf00      	nop
 8003f6c:	20000c76 	.word	0x20000c76
 8003f70:	0800e3ec 	.word	0x0800e3ec
 8003f74:	20000c6a 	.word	0x20000c6a
 8003f78:	20000bd8 	.word	0x20000bd8
 8003f7c:	40010800 	.word	0x40010800
 8003f80:	20000c84 	.word	0x20000c84
 8003f84:	20000b44 	.word	0x20000b44
 8003f88:	20000c81 	.word	0x20000c81
 8003f8c:	20000c55 	.word	0x20000c55
 8003f90:	20000c64 	.word	0x20000c64
 8003f94:	0800e424 	.word	0x0800e424
 8003f98:	0800e438 	.word	0x0800e438
 8003f9c:	0800e44c 	.word	0x0800e44c
 8003fa0:	0800e460 	.word	0x0800e460
 8003fa4:	0800e078 	.word	0x0800e078
 8003fa8:	20000c6b 	.word	0x20000c6b
 8003fac:	0800e474 	.word	0x0800e474
 8003fb0:	0800e488 	.word	0x0800e488
 8003fb4:	0800e49c 	.word	0x0800e49c
			} else if(dilSecim == 1) {
 8003fb8:	4b73      	ldr	r3, [pc, #460]	; (8004188 <menu+0x2bc0>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d104      	bne.n	8003fca <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003fc0:	4a72      	ldr	r2, [pc, #456]	; (800418c <menu+0x2bc4>)
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	f7fc fc8b 	bl	80008e0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003fca:	4b6f      	ldr	r3, [pc, #444]	; (8004188 <menu+0x2bc0>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d105      	bne.n	8003fde <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fd2:	4a6f      	ldr	r2, [pc, #444]	; (8004190 <menu+0x2bc8>)
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	2002      	movs	r0, #2
 8003fd8:	f7fc fc82 	bl	80008e0 <lcd_print>
 8003fdc:	e008      	b.n	8003ff0 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003fde:	4b6a      	ldr	r3, [pc, #424]	; (8004188 <menu+0x2bc0>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d104      	bne.n	8003ff0 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003fe6:	4a6b      	ldr	r2, [pc, #428]	; (8004194 <menu+0x2bcc>)
 8003fe8:	2101      	movs	r1, #1
 8003fea:	2002      	movs	r0, #2
 8003fec:	f7fc fc78 	bl	80008e0 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003ff0:	4b69      	ldr	r3, [pc, #420]	; (8004198 <menu+0x2bd0>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	220a      	movs	r2, #10
 8003ff6:	4969      	ldr	r1, [pc, #420]	; (800419c <menu+0x2bd4>)
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f008 ff87 	bl	800cf0c <itoa>
		lcd_print(2,16,snum);
 8003ffe:	4a67      	ldr	r2, [pc, #412]	; (800419c <menu+0x2bd4>)
 8004000:	2110      	movs	r1, #16
 8004002:	2002      	movs	r0, #2
 8004004:	f7fc fc6c 	bl	80008e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004008:	2102      	movs	r1, #2
 800400a:	4865      	ldr	r0, [pc, #404]	; (80041a0 <menu+0x2bd8>)
 800400c:	f005 fef6 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004010:	4603      	mov	r3, r0
 8004012:	2b01      	cmp	r3, #1
 8004014:	d115      	bne.n	8004042 <menu+0x2a7a>
 8004016:	4b63      	ldr	r3, [pc, #396]	; (80041a4 <menu+0x2bdc>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	f083 0301 	eor.w	r3, r3, #1
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00e      	beq.n	8004042 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8004024:	4b5c      	ldr	r3, [pc, #368]	; (8004198 <menu+0x2bd0>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	3301      	adds	r3, #1
 800402a:	b2da      	uxtb	r2, r3
 800402c:	4b5a      	ldr	r3, [pc, #360]	; (8004198 <menu+0x2bd0>)
 800402e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8004030:	4b59      	ldr	r3, [pc, #356]	; (8004198 <menu+0x2bd0>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b05      	cmp	r3, #5
 8004036:	d902      	bls.n	800403e <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8004038:	4b57      	ldr	r3, [pc, #348]	; (8004198 <menu+0x2bd0>)
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800403e:	f001 ffe1 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004042:	2104      	movs	r1, #4
 8004044:	4856      	ldr	r0, [pc, #344]	; (80041a0 <menu+0x2bd8>)
 8004046:	f005 fed9 	bl	8009dfc <HAL_GPIO_ReadPin>
 800404a:	4603      	mov	r3, r0
 800404c:	2b01      	cmp	r3, #1
 800404e:	d115      	bne.n	800407c <menu+0x2ab4>
 8004050:	4b54      	ldr	r3, [pc, #336]	; (80041a4 <menu+0x2bdc>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	f083 0301 	eor.w	r3, r3, #1
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00e      	beq.n	800407c <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 800405e:	4b4e      	ldr	r3, [pc, #312]	; (8004198 <menu+0x2bd0>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	3b01      	subs	r3, #1
 8004064:	b2da      	uxtb	r2, r3
 8004066:	4b4c      	ldr	r3, [pc, #304]	; (8004198 <menu+0x2bd0>)
 8004068:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 800406a:	4b4b      	ldr	r3, [pc, #300]	; (8004198 <menu+0x2bd0>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b06      	cmp	r3, #6
 8004070:	d902      	bls.n	8004078 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8004072:	4b49      	ldr	r3, [pc, #292]	; (8004198 <menu+0x2bd0>)
 8004074:	2205      	movs	r2, #5
 8004076:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004078:	f001 ffc4 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800407c:	2108      	movs	r1, #8
 800407e:	4848      	ldr	r0, [pc, #288]	; (80041a0 <menu+0x2bd8>)
 8004080:	f005 febc 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004084:	4603      	mov	r3, r0
 8004086:	2b01      	cmp	r3, #1
 8004088:	d10d      	bne.n	80040a6 <menu+0x2ade>
 800408a:	4b46      	ldr	r3, [pc, #280]	; (80041a4 <menu+0x2bdc>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	f083 0301 	eor.w	r3, r3, #1
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d006      	beq.n	80040a6 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004098:	4b3f      	ldr	r3, [pc, #252]	; (8004198 <menu+0x2bd0>)
 800409a:	781a      	ldrb	r2, [r3, #0]
 800409c:	4b42      	ldr	r3, [pc, #264]	; (80041a8 <menu+0x2be0>)
 800409e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80040a0:	4b42      	ldr	r3, [pc, #264]	; (80041ac <menu+0x2be4>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80040a6:	4b42      	ldr	r3, [pc, #264]	; (80041b0 <menu+0x2be8>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b1a      	cmp	r3, #26
 80040ac:	f040 80ec 	bne.w	8004288 <menu+0x2cc0>
		if(dilSecim == 0) {
 80040b0:	4b35      	ldr	r3, [pc, #212]	; (8004188 <menu+0x2bc0>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 80040b8:	4a3e      	ldr	r2, [pc, #248]	; (80041b4 <menu+0x2bec>)
 80040ba:	2101      	movs	r1, #1
 80040bc:	2001      	movs	r0, #1
 80040be:	f7fc fc0f 	bl	80008e0 <lcd_print>
 80040c2:	e008      	b.n	80040d6 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 80040c4:	4b30      	ldr	r3, [pc, #192]	; (8004188 <menu+0x2bc0>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d104      	bne.n	80040d6 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 80040cc:	4a3a      	ldr	r2, [pc, #232]	; (80041b8 <menu+0x2bf0>)
 80040ce:	2101      	movs	r1, #1
 80040d0:	2001      	movs	r0, #1
 80040d2:	f7fc fc05 	bl	80008e0 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 80040d6:	4b39      	ldr	r3, [pc, #228]	; (80041bc <menu+0x2bf4>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b63      	cmp	r3, #99	; 0x63
 80040dc:	d91e      	bls.n	800411c <menu+0x2b54>
			if(dilSecim == 0) {
 80040de:	4b2a      	ldr	r3, [pc, #168]	; (8004188 <menu+0x2bc0>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d104      	bne.n	80040f0 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 80040e6:	4a2a      	ldr	r2, [pc, #168]	; (8004190 <menu+0x2bc8>)
 80040e8:	2101      	movs	r1, #1
 80040ea:	2002      	movs	r0, #2
 80040ec:	f7fc fbf8 	bl	80008e0 <lcd_print>
			}
			if(dilSecim == 1) {
 80040f0:	4b25      	ldr	r3, [pc, #148]	; (8004188 <menu+0x2bc0>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d104      	bne.n	8004102 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 80040f8:	4a26      	ldr	r2, [pc, #152]	; (8004194 <menu+0x2bcc>)
 80040fa:	2101      	movs	r1, #1
 80040fc:	2002      	movs	r0, #2
 80040fe:	f7fc fbef 	bl	80008e0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004102:	4b2e      	ldr	r3, [pc, #184]	; (80041bc <menu+0x2bf4>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	220a      	movs	r2, #10
 8004108:	4924      	ldr	r1, [pc, #144]	; (800419c <menu+0x2bd4>)
 800410a:	4618      	mov	r0, r3
 800410c:	f008 fefe 	bl	800cf0c <itoa>
			lcd_print(2,14,snum);
 8004110:	4a22      	ldr	r2, [pc, #136]	; (800419c <menu+0x2bd4>)
 8004112:	210e      	movs	r1, #14
 8004114:	2002      	movs	r0, #2
 8004116:	f7fc fbe3 	bl	80008e0 <lcd_print>
 800411a:	e066      	b.n	80041ea <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 800411c:	4b27      	ldr	r3, [pc, #156]	; (80041bc <menu+0x2bf4>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b09      	cmp	r3, #9
 8004122:	d923      	bls.n	800416c <menu+0x2ba4>
 8004124:	4b25      	ldr	r3, [pc, #148]	; (80041bc <menu+0x2bf4>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b63      	cmp	r3, #99	; 0x63
 800412a:	d81f      	bhi.n	800416c <menu+0x2ba4>
			if(dilSecim == 0) {
 800412c:	4b16      	ldr	r3, [pc, #88]	; (8004188 <menu+0x2bc0>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8004134:	4a16      	ldr	r2, [pc, #88]	; (8004190 <menu+0x2bc8>)
 8004136:	2101      	movs	r1, #1
 8004138:	2002      	movs	r0, #2
 800413a:	f7fc fbd1 	bl	80008e0 <lcd_print>
 800413e:	e008      	b.n	8004152 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <menu+0x2bc0>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d104      	bne.n	8004152 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8004148:	4a12      	ldr	r2, [pc, #72]	; (8004194 <menu+0x2bcc>)
 800414a:	2101      	movs	r1, #1
 800414c:	2002      	movs	r0, #2
 800414e:	f7fc fbc7 	bl	80008e0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004152:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <menu+0x2bf4>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	220a      	movs	r2, #10
 8004158:	4910      	ldr	r1, [pc, #64]	; (800419c <menu+0x2bd4>)
 800415a:	4618      	mov	r0, r3
 800415c:	f008 fed6 	bl	800cf0c <itoa>
			lcd_print(2, 15, snum);
 8004160:	4a0e      	ldr	r2, [pc, #56]	; (800419c <menu+0x2bd4>)
 8004162:	210f      	movs	r1, #15
 8004164:	2002      	movs	r0, #2
 8004166:	f7fc fbbb 	bl	80008e0 <lcd_print>
 800416a:	e03e      	b.n	80041ea <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 800416c:	4b13      	ldr	r3, [pc, #76]	; (80041bc <menu+0x2bf4>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b09      	cmp	r3, #9
 8004172:	d83a      	bhi.n	80041ea <menu+0x2c22>
			if(dilSecim == 0) {
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <menu+0x2bc0>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d121      	bne.n	80041c0 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 800417c:	4a04      	ldr	r2, [pc, #16]	; (8004190 <menu+0x2bc8>)
 800417e:	2101      	movs	r1, #1
 8004180:	2002      	movs	r0, #2
 8004182:	f7fc fbad 	bl	80008e0 <lcd_print>
 8004186:	e024      	b.n	80041d2 <menu+0x2c0a>
 8004188:	20000c76 	.word	0x20000c76
 800418c:	0800e4b0 	.word	0x0800e4b0
 8004190:	0800e078 	.word	0x0800e078
 8004194:	0800e3ec 	.word	0x0800e3ec
 8004198:	20000c6c 	.word	0x20000c6c
 800419c:	20000bd8 	.word	0x20000bd8
 80041a0:	40010800 	.word	0x40010800
 80041a4:	20000c84 	.word	0x20000c84
 80041a8:	20000b44 	.word	0x20000b44
 80041ac:	20000c81 	.word	0x20000c81
 80041b0:	20000c55 	.word	0x20000c55
 80041b4:	0800e4c4 	.word	0x0800e4c4
 80041b8:	0800e4d8 	.word	0x0800e4d8
 80041bc:	20000c6d 	.word	0x20000c6d
			} else if(dilSecim == 1) {
 80041c0:	4b8f      	ldr	r3, [pc, #572]	; (8004400 <menu+0x2e38>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d104      	bne.n	80041d2 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80041c8:	4a8e      	ldr	r2, [pc, #568]	; (8004404 <menu+0x2e3c>)
 80041ca:	2101      	movs	r1, #1
 80041cc:	2002      	movs	r0, #2
 80041ce:	f7fc fb87 	bl	80008e0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80041d2:	4b8d      	ldr	r3, [pc, #564]	; (8004408 <menu+0x2e40>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	220a      	movs	r2, #10
 80041d8:	498c      	ldr	r1, [pc, #560]	; (800440c <menu+0x2e44>)
 80041da:	4618      	mov	r0, r3
 80041dc:	f008 fe96 	bl	800cf0c <itoa>
			lcd_print(2, 16, snum);
 80041e0:	4a8a      	ldr	r2, [pc, #552]	; (800440c <menu+0x2e44>)
 80041e2:	2110      	movs	r1, #16
 80041e4:	2002      	movs	r0, #2
 80041e6:	f7fc fb7b 	bl	80008e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041ea:	2102      	movs	r1, #2
 80041ec:	4888      	ldr	r0, [pc, #544]	; (8004410 <menu+0x2e48>)
 80041ee:	f005 fe05 	bl	8009dfc <HAL_GPIO_ReadPin>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d115      	bne.n	8004224 <menu+0x2c5c>
 80041f8:	4b86      	ldr	r3, [pc, #536]	; (8004414 <menu+0x2e4c>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	f083 0301 	eor.w	r3, r3, #1
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00e      	beq.n	8004224 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8004206:	4b80      	ldr	r3, [pc, #512]	; (8004408 <menu+0x2e40>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	3301      	adds	r3, #1
 800420c:	b2da      	uxtb	r2, r3
 800420e:	4b7e      	ldr	r3, [pc, #504]	; (8004408 <menu+0x2e40>)
 8004210:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8004212:	4b7d      	ldr	r3, [pc, #500]	; (8004408 <menu+0x2e40>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2bb4      	cmp	r3, #180	; 0xb4
 8004218:	d902      	bls.n	8004220 <menu+0x2c58>
				makineCalismaTmr = 0;
 800421a:	4b7b      	ldr	r3, [pc, #492]	; (8004408 <menu+0x2e40>)
 800421c:	2200      	movs	r2, #0
 800421e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004220:	f001 fef0 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004224:	2104      	movs	r1, #4
 8004226:	487a      	ldr	r0, [pc, #488]	; (8004410 <menu+0x2e48>)
 8004228:	f005 fde8 	bl	8009dfc <HAL_GPIO_ReadPin>
 800422c:	4603      	mov	r3, r0
 800422e:	2b01      	cmp	r3, #1
 8004230:	d115      	bne.n	800425e <menu+0x2c96>
 8004232:	4b78      	ldr	r3, [pc, #480]	; (8004414 <menu+0x2e4c>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	f083 0301 	eor.w	r3, r3, #1
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00e      	beq.n	800425e <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004240:	4b71      	ldr	r3, [pc, #452]	; (8004408 <menu+0x2e40>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	3b01      	subs	r3, #1
 8004246:	b2da      	uxtb	r2, r3
 8004248:	4b6f      	ldr	r3, [pc, #444]	; (8004408 <menu+0x2e40>)
 800424a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 800424c:	4b6e      	ldr	r3, [pc, #440]	; (8004408 <menu+0x2e40>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2bb5      	cmp	r3, #181	; 0xb5
 8004252:	d902      	bls.n	800425a <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8004254:	4b6c      	ldr	r3, [pc, #432]	; (8004408 <menu+0x2e40>)
 8004256:	22b4      	movs	r2, #180	; 0xb4
 8004258:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800425a:	f001 fed3 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800425e:	2108      	movs	r1, #8
 8004260:	486b      	ldr	r0, [pc, #428]	; (8004410 <menu+0x2e48>)
 8004262:	f005 fdcb 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004266:	4603      	mov	r3, r0
 8004268:	2b01      	cmp	r3, #1
 800426a:	d10d      	bne.n	8004288 <menu+0x2cc0>
 800426c:	4b69      	ldr	r3, [pc, #420]	; (8004414 <menu+0x2e4c>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	f083 0301 	eor.w	r3, r3, #1
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 800427a:	4b63      	ldr	r3, [pc, #396]	; (8004408 <menu+0x2e40>)
 800427c:	781a      	ldrb	r2, [r3, #0]
 800427e:	4b66      	ldr	r3, [pc, #408]	; (8004418 <menu+0x2e50>)
 8004280:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8004282:	4b66      	ldr	r3, [pc, #408]	; (800441c <menu+0x2e54>)
 8004284:	2201      	movs	r2, #1
 8004286:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004288:	4b65      	ldr	r3, [pc, #404]	; (8004420 <menu+0x2e58>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b1b      	cmp	r3, #27
 800428e:	f040 8083 	bne.w	8004398 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8004292:	4a64      	ldr	r2, [pc, #400]	; (8004424 <menu+0x2e5c>)
 8004294:	2101      	movs	r1, #1
 8004296:	2001      	movs	r0, #1
 8004298:	f7fc fb22 	bl	80008e0 <lcd_print>

		if(buzzer == 0) {
 800429c:	4b62      	ldr	r3, [pc, #392]	; (8004428 <menu+0x2e60>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d113      	bne.n	80042cc <menu+0x2d04>
			if(dilSecim == 0) {
 80042a4:	4b56      	ldr	r3, [pc, #344]	; (8004400 <menu+0x2e38>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 80042ac:	4a5f      	ldr	r2, [pc, #380]	; (800442c <menu+0x2e64>)
 80042ae:	2101      	movs	r1, #1
 80042b0:	2002      	movs	r0, #2
 80042b2:	f7fc fb15 	bl	80008e0 <lcd_print>
 80042b6:	e020      	b.n	80042fa <menu+0x2d32>
			} else if(dilSecim == 1) {
 80042b8:	4b51      	ldr	r3, [pc, #324]	; (8004400 <menu+0x2e38>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d11c      	bne.n	80042fa <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80042c0:	4a5b      	ldr	r2, [pc, #364]	; (8004430 <menu+0x2e68>)
 80042c2:	2101      	movs	r1, #1
 80042c4:	2002      	movs	r0, #2
 80042c6:	f7fc fb0b 	bl	80008e0 <lcd_print>
 80042ca:	e016      	b.n	80042fa <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80042cc:	4b56      	ldr	r3, [pc, #344]	; (8004428 <menu+0x2e60>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d112      	bne.n	80042fa <menu+0x2d32>
			if(dilSecim == 0) {
 80042d4:	4b4a      	ldr	r3, [pc, #296]	; (8004400 <menu+0x2e38>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d105      	bne.n	80042e8 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80042dc:	4a55      	ldr	r2, [pc, #340]	; (8004434 <menu+0x2e6c>)
 80042de:	2101      	movs	r1, #1
 80042e0:	2002      	movs	r0, #2
 80042e2:	f7fc fafd 	bl	80008e0 <lcd_print>
 80042e6:	e008      	b.n	80042fa <menu+0x2d32>
			} else if(dilSecim == 1) {
 80042e8:	4b45      	ldr	r3, [pc, #276]	; (8004400 <menu+0x2e38>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d104      	bne.n	80042fa <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80042f0:	4a51      	ldr	r2, [pc, #324]	; (8004438 <menu+0x2e70>)
 80042f2:	2101      	movs	r1, #1
 80042f4:	2002      	movs	r0, #2
 80042f6:	f7fc faf3 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80042fa:	2102      	movs	r1, #2
 80042fc:	4844      	ldr	r0, [pc, #272]	; (8004410 <menu+0x2e48>)
 80042fe:	f005 fd7d 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004302:	4603      	mov	r3, r0
 8004304:	2b01      	cmp	r3, #1
 8004306:	d115      	bne.n	8004334 <menu+0x2d6c>
 8004308:	4b42      	ldr	r3, [pc, #264]	; (8004414 <menu+0x2e4c>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	f083 0301 	eor.w	r3, r3, #1
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00e      	beq.n	8004334 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8004316:	4b44      	ldr	r3, [pc, #272]	; (8004428 <menu+0x2e60>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	3301      	adds	r3, #1
 800431c:	b2da      	uxtb	r2, r3
 800431e:	4b42      	ldr	r3, [pc, #264]	; (8004428 <menu+0x2e60>)
 8004320:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8004322:	4b41      	ldr	r3, [pc, #260]	; (8004428 <menu+0x2e60>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d902      	bls.n	8004330 <menu+0x2d68>
				buzzer = 0;
 800432a:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <menu+0x2e60>)
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004330:	f001 fe68 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004334:	2104      	movs	r1, #4
 8004336:	4836      	ldr	r0, [pc, #216]	; (8004410 <menu+0x2e48>)
 8004338:	f005 fd60 	bl	8009dfc <HAL_GPIO_ReadPin>
 800433c:	4603      	mov	r3, r0
 800433e:	2b01      	cmp	r3, #1
 8004340:	d115      	bne.n	800436e <menu+0x2da6>
 8004342:	4b34      	ldr	r3, [pc, #208]	; (8004414 <menu+0x2e4c>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	f083 0301 	eor.w	r3, r3, #1
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00e      	beq.n	800436e <menu+0x2da6>
			buzzer = buzzer - 1;
 8004350:	4b35      	ldr	r3, [pc, #212]	; (8004428 <menu+0x2e60>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	3b01      	subs	r3, #1
 8004356:	b2da      	uxtb	r2, r3
 8004358:	4b33      	ldr	r3, [pc, #204]	; (8004428 <menu+0x2e60>)
 800435a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800435c:	4b32      	ldr	r3, [pc, #200]	; (8004428 <menu+0x2e60>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <menu+0x2da2>
		   		buzzer = 1;
 8004364:	4b30      	ldr	r3, [pc, #192]	; (8004428 <menu+0x2e60>)
 8004366:	2201      	movs	r2, #1
 8004368:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800436a:	f001 fe4b 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800436e:	2108      	movs	r1, #8
 8004370:	4827      	ldr	r0, [pc, #156]	; (8004410 <menu+0x2e48>)
 8004372:	f005 fd43 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004376:	4603      	mov	r3, r0
 8004378:	2b01      	cmp	r3, #1
 800437a:	d10d      	bne.n	8004398 <menu+0x2dd0>
 800437c:	4b25      	ldr	r3, [pc, #148]	; (8004414 <menu+0x2e4c>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	f083 0301 	eor.w	r3, r3, #1
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d006      	beq.n	8004398 <menu+0x2dd0>
			eepromData[25] = buzzer;
 800438a:	4b27      	ldr	r3, [pc, #156]	; (8004428 <menu+0x2e60>)
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	4b22      	ldr	r3, [pc, #136]	; (8004418 <menu+0x2e50>)
 8004390:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8004392:	4b22      	ldr	r3, [pc, #136]	; (800441c <menu+0x2e54>)
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004398:	4b21      	ldr	r3, [pc, #132]	; (8004420 <menu+0x2e58>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b1c      	cmp	r3, #28
 800439e:	f040 80ab 	bne.w	80044f8 <menu+0x2f30>
		calismaSayModu = 0;
 80043a2:	4b26      	ldr	r3, [pc, #152]	; (800443c <menu+0x2e74>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80043a8:	4a25      	ldr	r2, [pc, #148]	; (8004440 <menu+0x2e78>)
 80043aa:	2101      	movs	r1, #1
 80043ac:	2001      	movs	r0, #1
 80043ae:	f7fc fa97 	bl	80008e0 <lcd_print>

		if(demoMode == 0) {
 80043b2:	4b24      	ldr	r3, [pc, #144]	; (8004444 <menu+0x2e7c>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d113      	bne.n	80043e2 <menu+0x2e1a>
			if(dilSecim == 0) {
 80043ba:	4b11      	ldr	r3, [pc, #68]	; (8004400 <menu+0x2e38>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d105      	bne.n	80043ce <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80043c2:	4a1a      	ldr	r2, [pc, #104]	; (800442c <menu+0x2e64>)
 80043c4:	2101      	movs	r1, #1
 80043c6:	2002      	movs	r0, #2
 80043c8:	f7fc fa8a 	bl	80008e0 <lcd_print>
 80043cc:	e045      	b.n	800445a <menu+0x2e92>
			} else if(dilSecim == 1) {
 80043ce:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <menu+0x2e38>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d141      	bne.n	800445a <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80043d6:	4a16      	ldr	r2, [pc, #88]	; (8004430 <menu+0x2e68>)
 80043d8:	2101      	movs	r1, #1
 80043da:	2002      	movs	r0, #2
 80043dc:	f7fc fa80 	bl	80008e0 <lcd_print>
 80043e0:	e03b      	b.n	800445a <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80043e2:	4b18      	ldr	r3, [pc, #96]	; (8004444 <menu+0x2e7c>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d137      	bne.n	800445a <menu+0x2e92>
			if(dilSecim == 0){
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <menu+0x2e38>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d12a      	bne.n	8004448 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80043f2:	4a10      	ldr	r2, [pc, #64]	; (8004434 <menu+0x2e6c>)
 80043f4:	2101      	movs	r1, #1
 80043f6:	2002      	movs	r0, #2
 80043f8:	f7fc fa72 	bl	80008e0 <lcd_print>
 80043fc:	e02d      	b.n	800445a <menu+0x2e92>
 80043fe:	bf00      	nop
 8004400:	20000c76 	.word	0x20000c76
 8004404:	0800e3ec 	.word	0x0800e3ec
 8004408:	20000c6d 	.word	0x20000c6d
 800440c:	20000bd8 	.word	0x20000bd8
 8004410:	40010800 	.word	0x40010800
 8004414:	20000c84 	.word	0x20000c84
 8004418:	20000b44 	.word	0x20000b44
 800441c:	20000c81 	.word	0x20000c81
 8004420:	20000c55 	.word	0x20000c55
 8004424:	0800e4ec 	.word	0x0800e4ec
 8004428:	20000c71 	.word	0x20000c71
 800442c:	0800de14 	.word	0x0800de14
 8004430:	0800de28 	.word	0x0800de28
 8004434:	0800de74 	.word	0x0800de74
 8004438:	0800de88 	.word	0x0800de88
 800443c:	20000c75 	.word	0x20000c75
 8004440:	0800e500 	.word	0x0800e500
 8004444:	20000c73 	.word	0x20000c73
			} else if(dilSecim == 1) {
 8004448:	4b71      	ldr	r3, [pc, #452]	; (8004610 <menu+0x3048>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d104      	bne.n	800445a <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004450:	4a70      	ldr	r2, [pc, #448]	; (8004614 <menu+0x304c>)
 8004452:	2101      	movs	r1, #1
 8004454:	2002      	movs	r0, #2
 8004456:	f7fc fa43 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800445a:	2102      	movs	r1, #2
 800445c:	486e      	ldr	r0, [pc, #440]	; (8004618 <menu+0x3050>)
 800445e:	f005 fccd 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004462:	4603      	mov	r3, r0
 8004464:	2b01      	cmp	r3, #1
 8004466:	d115      	bne.n	8004494 <menu+0x2ecc>
 8004468:	4b6c      	ldr	r3, [pc, #432]	; (800461c <menu+0x3054>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f083 0301 	eor.w	r3, r3, #1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00e      	beq.n	8004494 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004476:	4b6a      	ldr	r3, [pc, #424]	; (8004620 <menu+0x3058>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	3301      	adds	r3, #1
 800447c:	b2da      	uxtb	r2, r3
 800447e:	4b68      	ldr	r3, [pc, #416]	; (8004620 <menu+0x3058>)
 8004480:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004482:	4b67      	ldr	r3, [pc, #412]	; (8004620 <menu+0x3058>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d902      	bls.n	8004490 <menu+0x2ec8>
				demoMode = 0;
 800448a:	4b65      	ldr	r3, [pc, #404]	; (8004620 <menu+0x3058>)
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004490:	f001 fdb8 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004494:	2104      	movs	r1, #4
 8004496:	4860      	ldr	r0, [pc, #384]	; (8004618 <menu+0x3050>)
 8004498:	f005 fcb0 	bl	8009dfc <HAL_GPIO_ReadPin>
 800449c:	4603      	mov	r3, r0
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d115      	bne.n	80044ce <menu+0x2f06>
 80044a2:	4b5e      	ldr	r3, [pc, #376]	; (800461c <menu+0x3054>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	f083 0301 	eor.w	r3, r3, #1
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00e      	beq.n	80044ce <menu+0x2f06>
			demoMode = demoMode - 1;
 80044b0:	4b5b      	ldr	r3, [pc, #364]	; (8004620 <menu+0x3058>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	4b59      	ldr	r3, [pc, #356]	; (8004620 <menu+0x3058>)
 80044ba:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80044bc:	4b58      	ldr	r3, [pc, #352]	; (8004620 <menu+0x3058>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <menu+0x2f02>
		   		demoMode = 1;
 80044c4:	4b56      	ldr	r3, [pc, #344]	; (8004620 <menu+0x3058>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044ca:	f001 fd9b 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044ce:	2108      	movs	r1, #8
 80044d0:	4851      	ldr	r0, [pc, #324]	; (8004618 <menu+0x3050>)
 80044d2:	f005 fc93 	bl	8009dfc <HAL_GPIO_ReadPin>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d10d      	bne.n	80044f8 <menu+0x2f30>
 80044dc:	4b4f      	ldr	r3, [pc, #316]	; (800461c <menu+0x3054>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	f083 0301 	eor.w	r3, r3, #1
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d006      	beq.n	80044f8 <menu+0x2f30>
			eepromData[26] = demoMode;
 80044ea:	4b4d      	ldr	r3, [pc, #308]	; (8004620 <menu+0x3058>)
 80044ec:	781a      	ldrb	r2, [r3, #0]
 80044ee:	4b4d      	ldr	r3, [pc, #308]	; (8004624 <menu+0x305c>)
 80044f0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80044f2:	4b4d      	ldr	r3, [pc, #308]	; (8004628 <menu+0x3060>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80044f8:	4b4c      	ldr	r3, [pc, #304]	; (800462c <menu+0x3064>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b1d      	cmp	r3, #29
 80044fe:	f040 8132 	bne.w	8004766 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004502:	4b4b      	ldr	r3, [pc, #300]	; (8004630 <menu+0x3068>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d113      	bne.n	8004532 <menu+0x2f6a>
 800450a:	4b4a      	ldr	r3, [pc, #296]	; (8004634 <menu+0x306c>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <menu+0x2f6a>
 8004512:	4b49      	ldr	r3, [pc, #292]	; (8004638 <menu+0x3070>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10b      	bne.n	8004532 <menu+0x2f6a>
 800451a:	4b48      	ldr	r3, [pc, #288]	; (800463c <menu+0x3074>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d107      	bne.n	8004532 <menu+0x2f6a>
 8004522:	4b47      	ldr	r3, [pc, #284]	; (8004640 <menu+0x3078>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800452a:	4b46      	ldr	r3, [pc, #280]	; (8004644 <menu+0x307c>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e002      	b.n	8004538 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004532:	4b44      	ldr	r3, [pc, #272]	; (8004644 <menu+0x307c>)
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004538:	4b43      	ldr	r3, [pc, #268]	; (8004648 <menu+0x3080>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d154      	bne.n	80045ea <menu+0x3022>
			if(dilSecim == 0) {
 8004540:	4b33      	ldr	r3, [pc, #204]	; (8004610 <menu+0x3048>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004548:	4a40      	ldr	r2, [pc, #256]	; (800464c <menu+0x3084>)
 800454a:	2101      	movs	r1, #1
 800454c:	2001      	movs	r0, #1
 800454e:	f7fc f9c7 	bl	80008e0 <lcd_print>
 8004552:	e008      	b.n	8004566 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004554:	4b2e      	ldr	r3, [pc, #184]	; (8004610 <menu+0x3048>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d104      	bne.n	8004566 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 800455c:	4a3c      	ldr	r2, [pc, #240]	; (8004650 <menu+0x3088>)
 800455e:	2101      	movs	r1, #1
 8004560:	2001      	movs	r0, #1
 8004562:	f7fc f9bd 	bl	80008e0 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004566:	4b36      	ldr	r3, [pc, #216]	; (8004640 <menu+0x3078>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	220a      	movs	r2, #10
 800456c:	4939      	ldr	r1, [pc, #228]	; (8004654 <menu+0x308c>)
 800456e:	4618      	mov	r0, r3
 8004570:	f008 fccc 	bl	800cf0c <itoa>
			lcd_print(2, 12, snum);
 8004574:	4a37      	ldr	r2, [pc, #220]	; (8004654 <menu+0x308c>)
 8004576:	210c      	movs	r1, #12
 8004578:	2002      	movs	r0, #2
 800457a:	f7fc f9b1 	bl	80008e0 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800457e:	4b2f      	ldr	r3, [pc, #188]	; (800463c <menu+0x3074>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	220a      	movs	r2, #10
 8004584:	4933      	ldr	r1, [pc, #204]	; (8004654 <menu+0x308c>)
 8004586:	4618      	mov	r0, r3
 8004588:	f008 fcc0 	bl	800cf0c <itoa>
			lcd_print(2, 13, snum);
 800458c:	4a31      	ldr	r2, [pc, #196]	; (8004654 <menu+0x308c>)
 800458e:	210d      	movs	r1, #13
 8004590:	2002      	movs	r0, #2
 8004592:	f7fc f9a5 	bl	80008e0 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004596:	4b28      	ldr	r3, [pc, #160]	; (8004638 <menu+0x3070>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	220a      	movs	r2, #10
 800459c:	492d      	ldr	r1, [pc, #180]	; (8004654 <menu+0x308c>)
 800459e:	4618      	mov	r0, r3
 80045a0:	f008 fcb4 	bl	800cf0c <itoa>
			lcd_print(2, 14, snum);
 80045a4:	4a2b      	ldr	r2, [pc, #172]	; (8004654 <menu+0x308c>)
 80045a6:	210e      	movs	r1, #14
 80045a8:	2002      	movs	r0, #2
 80045aa:	f7fc f999 	bl	80008e0 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80045ae:	4b21      	ldr	r3, [pc, #132]	; (8004634 <menu+0x306c>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	220a      	movs	r2, #10
 80045b4:	4927      	ldr	r1, [pc, #156]	; (8004654 <menu+0x308c>)
 80045b6:	4618      	mov	r0, r3
 80045b8:	f008 fca8 	bl	800cf0c <itoa>
			lcd_print(2, 15, snum);
 80045bc:	4a25      	ldr	r2, [pc, #148]	; (8004654 <menu+0x308c>)
 80045be:	210f      	movs	r1, #15
 80045c0:	2002      	movs	r0, #2
 80045c2:	f7fc f98d 	bl	80008e0 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80045c6:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <menu+0x3068>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	220a      	movs	r2, #10
 80045cc:	4921      	ldr	r1, [pc, #132]	; (8004654 <menu+0x308c>)
 80045ce:	4618      	mov	r0, r3
 80045d0:	f008 fc9c 	bl	800cf0c <itoa>
			lcd_print(2, 16, snum);
 80045d4:	4a1f      	ldr	r2, [pc, #124]	; (8004654 <menu+0x308c>)
 80045d6:	2110      	movs	r1, #16
 80045d8:	2002      	movs	r0, #2
 80045da:	f7fc f981 	bl	80008e0 <lcd_print>

			lcd_print(2, 1, "           ");
 80045de:	4a1e      	ldr	r2, [pc, #120]	; (8004658 <menu+0x3090>)
 80045e0:	2101      	movs	r1, #1
 80045e2:	2002      	movs	r0, #2
 80045e4:	f7fc f97c 	bl	80008e0 <lcd_print>
 80045e8:	e048      	b.n	800467c <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80045ea:	4b17      	ldr	r3, [pc, #92]	; (8004648 <menu+0x3080>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d144      	bne.n	800467c <menu+0x30b4>
			if(dilSecim == 0) {
 80045f2:	4b07      	ldr	r3, [pc, #28]	; (8004610 <menu+0x3048>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d132      	bne.n	8004660 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80045fa:	4a14      	ldr	r2, [pc, #80]	; (800464c <menu+0x3084>)
 80045fc:	2101      	movs	r1, #1
 80045fe:	2001      	movs	r0, #1
 8004600:	f7fc f96e 	bl	80008e0 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004604:	4a15      	ldr	r2, [pc, #84]	; (800465c <menu+0x3094>)
 8004606:	2101      	movs	r1, #1
 8004608:	2002      	movs	r0, #2
 800460a:	f7fc f969 	bl	80008e0 <lcd_print>
 800460e:	e035      	b.n	800467c <menu+0x30b4>
 8004610:	20000c76 	.word	0x20000c76
 8004614:	0800de88 	.word	0x0800de88
 8004618:	40010800 	.word	0x40010800
 800461c:	20000c84 	.word	0x20000c84
 8004620:	20000c73 	.word	0x20000c73
 8004624:	20000b44 	.word	0x20000b44
 8004628:	20000c81 	.word	0x20000c81
 800462c:	20000c55 	.word	0x20000c55
 8004630:	20000c52 	.word	0x20000c52
 8004634:	20000c53 	.word	0x20000c53
 8004638:	200009cc 	.word	0x200009cc
 800463c:	200009cd 	.word	0x200009cd
 8004640:	20000c54 	.word	0x20000c54
 8004644:	20000c96 	.word	0x20000c96
 8004648:	20000c75 	.word	0x20000c75
 800464c:	0800e510 	.word	0x0800e510
 8004650:	0800e524 	.word	0x0800e524
 8004654:	20000bd8 	.word	0x20000bd8
 8004658:	0800e538 	.word	0x0800e538
 800465c:	0800e544 	.word	0x0800e544
			} else if(dilSecim == 1) {
 8004660:	4b94      	ldr	r3, [pc, #592]	; (80048b4 <menu+0x32ec>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d109      	bne.n	800467c <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004668:	4a93      	ldr	r2, [pc, #588]	; (80048b8 <menu+0x32f0>)
 800466a:	2101      	movs	r1, #1
 800466c:	2001      	movs	r0, #1
 800466e:	f7fc f937 	bl	80008e0 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004672:	4a92      	ldr	r2, [pc, #584]	; (80048bc <menu+0x32f4>)
 8004674:	2101      	movs	r1, #1
 8004676:	2002      	movs	r0, #2
 8004678:	f7fc f932 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800467c:	2102      	movs	r1, #2
 800467e:	4890      	ldr	r0, [pc, #576]	; (80048c0 <menu+0x32f8>)
 8004680:	f005 fbbc 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004684:	4603      	mov	r3, r0
 8004686:	2b01      	cmp	r3, #1
 8004688:	d119      	bne.n	80046be <menu+0x30f6>
 800468a:	4b8e      	ldr	r3, [pc, #568]	; (80048c4 <menu+0x32fc>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	f083 0301 	eor.w	r3, r3, #1
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d012      	beq.n	80046be <menu+0x30f6>
 8004698:	4b8b      	ldr	r3, [pc, #556]	; (80048c8 <menu+0x3300>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00e      	beq.n	80046be <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80046a0:	4b8a      	ldr	r3, [pc, #552]	; (80048cc <menu+0x3304>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	4b88      	ldr	r3, [pc, #544]	; (80048cc <menu+0x3304>)
 80046aa:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80046ac:	4b87      	ldr	r3, [pc, #540]	; (80048cc <menu+0x3304>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d902      	bls.n	80046ba <menu+0x30f2>
				calismaSayModu = 0;
 80046b4:	4b85      	ldr	r3, [pc, #532]	; (80048cc <menu+0x3304>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80046ba:	f001 fca3 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80046be:	2104      	movs	r1, #4
 80046c0:	487f      	ldr	r0, [pc, #508]	; (80048c0 <menu+0x32f8>)
 80046c2:	f005 fb9b 	bl	8009dfc <HAL_GPIO_ReadPin>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d119      	bne.n	8004700 <menu+0x3138>
 80046cc:	4b7d      	ldr	r3, [pc, #500]	; (80048c4 <menu+0x32fc>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	f083 0301 	eor.w	r3, r3, #1
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d012      	beq.n	8004700 <menu+0x3138>
 80046da:	4b7b      	ldr	r3, [pc, #492]	; (80048c8 <menu+0x3300>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00e      	beq.n	8004700 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80046e2:	4b7a      	ldr	r3, [pc, #488]	; (80048cc <menu+0x3304>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	4b78      	ldr	r3, [pc, #480]	; (80048cc <menu+0x3304>)
 80046ec:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80046ee:	4b77      	ldr	r3, [pc, #476]	; (80048cc <menu+0x3304>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <menu+0x3134>
		   		calismaSayModu = 1;
 80046f6:	4b75      	ldr	r3, [pc, #468]	; (80048cc <menu+0x3304>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80046fc:	f001 fc82 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004700:	2108      	movs	r1, #8
 8004702:	486f      	ldr	r0, [pc, #444]	; (80048c0 <menu+0x32f8>)
 8004704:	f005 fb7a 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004708:	4603      	mov	r3, r0
 800470a:	2b01      	cmp	r3, #1
 800470c:	d12b      	bne.n	8004766 <menu+0x319e>
 800470e:	4b6d      	ldr	r3, [pc, #436]	; (80048c4 <menu+0x32fc>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	f083 0301 	eor.w	r3, r3, #1
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d024      	beq.n	8004766 <menu+0x319e>
			eepromData[32] = 0;
 800471c:	4b6c      	ldr	r3, [pc, #432]	; (80048d0 <menu+0x3308>)
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004724:	4b6a      	ldr	r3, [pc, #424]	; (80048d0 <menu+0x3308>)
 8004726:	2200      	movs	r2, #0
 8004728:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800472a:	4b69      	ldr	r3, [pc, #420]	; (80048d0 <menu+0x3308>)
 800472c:	2200      	movs	r2, #0
 800472e:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004730:	4b67      	ldr	r3, [pc, #412]	; (80048d0 <menu+0x3308>)
 8004732:	2200      	movs	r2, #0
 8004734:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004736:	4b66      	ldr	r3, [pc, #408]	; (80048d0 <menu+0x3308>)
 8004738:	2200      	movs	r2, #0
 800473a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 800473c:	4b65      	ldr	r3, [pc, #404]	; (80048d4 <menu+0x330c>)
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004742:	4b65      	ldr	r3, [pc, #404]	; (80048d8 <menu+0x3310>)
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004748:	4b64      	ldr	r3, [pc, #400]	; (80048dc <menu+0x3314>)
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800474e:	4b64      	ldr	r3, [pc, #400]	; (80048e0 <menu+0x3318>)
 8004750:	2200      	movs	r2, #0
 8004752:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004754:	4b63      	ldr	r3, [pc, #396]	; (80048e4 <menu+0x331c>)
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800475a:	4b5c      	ldr	r3, [pc, #368]	; (80048cc <menu+0x3304>)
 800475c:	2200      	movs	r2, #0
 800475e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004760:	4b61      	ldr	r3, [pc, #388]	; (80048e8 <menu+0x3320>)
 8004762:	2201      	movs	r2, #1
 8004764:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004766:	4b61      	ldr	r3, [pc, #388]	; (80048ec <menu+0x3324>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b1e      	cmp	r3, #30
 800476c:	d16f      	bne.n	800484e <menu+0x3286>
		calismaSayModu = 0;
 800476e:	4b57      	ldr	r3, [pc, #348]	; (80048cc <menu+0x3304>)
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004774:	4b4f      	ldr	r3, [pc, #316]	; (80048b4 <menu+0x32ec>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 800477c:	4a5c      	ldr	r2, [pc, #368]	; (80048f0 <menu+0x3328>)
 800477e:	2101      	movs	r1, #1
 8004780:	2001      	movs	r0, #1
 8004782:	f7fc f8ad 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004786:	4a5b      	ldr	r2, [pc, #364]	; (80048f4 <menu+0x332c>)
 8004788:	2101      	movs	r1, #1
 800478a:	2002      	movs	r0, #2
 800478c:	f7fc f8a8 	bl	80008e0 <lcd_print>
 8004790:	e00d      	b.n	80047ae <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004792:	4b48      	ldr	r3, [pc, #288]	; (80048b4 <menu+0x32ec>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d109      	bne.n	80047ae <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800479a:	4a57      	ldr	r2, [pc, #348]	; (80048f8 <menu+0x3330>)
 800479c:	2101      	movs	r1, #1
 800479e:	2001      	movs	r0, #1
 80047a0:	f7fc f89e 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80047a4:	4a55      	ldr	r2, [pc, #340]	; (80048fc <menu+0x3334>)
 80047a6:	2101      	movs	r1, #1
 80047a8:	2002      	movs	r0, #2
 80047aa:	f7fc f899 	bl	80008e0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80047ae:	2102      	movs	r1, #2
 80047b0:	4843      	ldr	r0, [pc, #268]	; (80048c0 <menu+0x32f8>)
 80047b2:	f005 fb23 	bl	8009dfc <HAL_GPIO_ReadPin>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d115      	bne.n	80047e8 <menu+0x3220>
 80047bc:	4b41      	ldr	r3, [pc, #260]	; (80048c4 <menu+0x32fc>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	f083 0301 	eor.w	r3, r3, #1
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00e      	beq.n	80047e8 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80047ca:	4b3a      	ldr	r3, [pc, #232]	; (80048b4 <menu+0x32ec>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	3301      	adds	r3, #1
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	4b38      	ldr	r3, [pc, #224]	; (80048b4 <menu+0x32ec>)
 80047d4:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80047d6:	4b37      	ldr	r3, [pc, #220]	; (80048b4 <menu+0x32ec>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d902      	bls.n	80047e4 <menu+0x321c>
				dilSecim = 0;
 80047de:	4b35      	ldr	r3, [pc, #212]	; (80048b4 <menu+0x32ec>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80047e4:	f001 fc0e 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047e8:	2104      	movs	r1, #4
 80047ea:	4835      	ldr	r0, [pc, #212]	; (80048c0 <menu+0x32f8>)
 80047ec:	f005 fb06 	bl	8009dfc <HAL_GPIO_ReadPin>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d115      	bne.n	8004822 <menu+0x325a>
 80047f6:	4b33      	ldr	r3, [pc, #204]	; (80048c4 <menu+0x32fc>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	f083 0301 	eor.w	r3, r3, #1
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00e      	beq.n	8004822 <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004804:	4b2b      	ldr	r3, [pc, #172]	; (80048b4 <menu+0x32ec>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	3b01      	subs	r3, #1
 800480a:	b2da      	uxtb	r2, r3
 800480c:	4b29      	ldr	r3, [pc, #164]	; (80048b4 <menu+0x32ec>)
 800480e:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004810:	4b28      	ldr	r3, [pc, #160]	; (80048b4 <menu+0x32ec>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <menu+0x3256>
		   		dilSecim = 1;
 8004818:	4b26      	ldr	r3, [pc, #152]	; (80048b4 <menu+0x32ec>)
 800481a:	2201      	movs	r2, #1
 800481c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800481e:	f001 fbf1 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004822:	2108      	movs	r1, #8
 8004824:	4826      	ldr	r0, [pc, #152]	; (80048c0 <menu+0x32f8>)
 8004826:	f005 fae9 	bl	8009dfc <HAL_GPIO_ReadPin>
 800482a:	4603      	mov	r3, r0
 800482c:	2b01      	cmp	r3, #1
 800482e:	d10e      	bne.n	800484e <menu+0x3286>
 8004830:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <menu+0x32fc>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	f083 0301 	eor.w	r3, r3, #1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d007      	beq.n	800484e <menu+0x3286>
			eepromData[33] = dilSecim;
 800483e:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <menu+0x32ec>)
 8004840:	781a      	ldrb	r2, [r3, #0]
 8004842:	4b23      	ldr	r3, [pc, #140]	; (80048d0 <menu+0x3308>)
 8004844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004848:	4b27      	ldr	r3, [pc, #156]	; (80048e8 <menu+0x3320>)
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800484e:	4b27      	ldr	r3, [pc, #156]	; (80048ec <menu+0x3324>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b1f      	cmp	r3, #31
 8004854:	f040 80b7 	bne.w	80049c6 <menu+0x33fe>
		calismaSayModu = 0;
 8004858:	4b1c      	ldr	r3, [pc, #112]	; (80048cc <menu+0x3304>)
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800485e:	4a28      	ldr	r2, [pc, #160]	; (8004900 <menu+0x3338>)
 8004860:	2101      	movs	r1, #1
 8004862:	2001      	movs	r0, #1
 8004864:	f7fc f83c 	bl	80008e0 <lcd_print>

		if(iotMode == 0) {
 8004868:	4b26      	ldr	r3, [pc, #152]	; (8004904 <menu+0x333c>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d113      	bne.n	8004898 <menu+0x32d0>
			if(dilSecim == 0) {
 8004870:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <menu+0x32ec>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d105      	bne.n	8004884 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004878:	4a23      	ldr	r2, [pc, #140]	; (8004908 <menu+0x3340>)
 800487a:	2101      	movs	r1, #1
 800487c:	2002      	movs	r0, #2
 800487e:	f7fc f82f 	bl	80008e0 <lcd_print>
 8004882:	e050      	b.n	8004926 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <menu+0x32ec>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d14c      	bne.n	8004926 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 800488c:	4a1f      	ldr	r2, [pc, #124]	; (800490c <menu+0x3344>)
 800488e:	2101      	movs	r1, #1
 8004890:	2002      	movs	r0, #2
 8004892:	f7fc f825 	bl	80008e0 <lcd_print>
 8004896:	e046      	b.n	8004926 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004898:	4b1a      	ldr	r3, [pc, #104]	; (8004904 <menu+0x333c>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d142      	bne.n	8004926 <menu+0x335e>
			if(dilSecim == 0){
 80048a0:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <menu+0x32ec>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d135      	bne.n	8004914 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80048a8:	4a19      	ldr	r2, [pc, #100]	; (8004910 <menu+0x3348>)
 80048aa:	2101      	movs	r1, #1
 80048ac:	2002      	movs	r0, #2
 80048ae:	f7fc f817 	bl	80008e0 <lcd_print>
 80048b2:	e038      	b.n	8004926 <menu+0x335e>
 80048b4:	20000c76 	.word	0x20000c76
 80048b8:	0800e524 	.word	0x0800e524
 80048bc:	0800e558 	.word	0x0800e558
 80048c0:	40010800 	.word	0x40010800
 80048c4:	20000c84 	.word	0x20000c84
 80048c8:	20000c96 	.word	0x20000c96
 80048cc:	20000c75 	.word	0x20000c75
 80048d0:	20000b44 	.word	0x20000b44
 80048d4:	20000c54 	.word	0x20000c54
 80048d8:	200009cd 	.word	0x200009cd
 80048dc:	200009cc 	.word	0x200009cc
 80048e0:	20000c53 	.word	0x20000c53
 80048e4:	20000c52 	.word	0x20000c52
 80048e8:	20000c81 	.word	0x20000c81
 80048ec:	20000c55 	.word	0x20000c55
 80048f0:	0800e56c 	.word	0x0800e56c
 80048f4:	0800e580 	.word	0x0800e580
 80048f8:	0800e594 	.word	0x0800e594
 80048fc:	0800e5a8 	.word	0x0800e5a8
 8004900:	0800e5bc 	.word	0x0800e5bc
 8004904:	20000c74 	.word	0x20000c74
 8004908:	0800de14 	.word	0x0800de14
 800490c:	0800de28 	.word	0x0800de28
 8004910:	0800de74 	.word	0x0800de74
			} else if(dilSecim == 1) {
 8004914:	4b97      	ldr	r3, [pc, #604]	; (8004b74 <menu+0x35ac>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d104      	bne.n	8004926 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 800491c:	4a96      	ldr	r2, [pc, #600]	; (8004b78 <menu+0x35b0>)
 800491e:	2101      	movs	r1, #1
 8004920:	2002      	movs	r0, #2
 8004922:	f7fb ffdd 	bl	80008e0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004926:	2102      	movs	r1, #2
 8004928:	4894      	ldr	r0, [pc, #592]	; (8004b7c <menu+0x35b4>)
 800492a:	f005 fa67 	bl	8009dfc <HAL_GPIO_ReadPin>
 800492e:	4603      	mov	r3, r0
 8004930:	2b01      	cmp	r3, #1
 8004932:	d115      	bne.n	8004960 <menu+0x3398>
 8004934:	4b92      	ldr	r3, [pc, #584]	; (8004b80 <menu+0x35b8>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	f083 0301 	eor.w	r3, r3, #1
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00e      	beq.n	8004960 <menu+0x3398>
			iotMode = iotMode + 1;
 8004942:	4b90      	ldr	r3, [pc, #576]	; (8004b84 <menu+0x35bc>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	3301      	adds	r3, #1
 8004948:	b2da      	uxtb	r2, r3
 800494a:	4b8e      	ldr	r3, [pc, #568]	; (8004b84 <menu+0x35bc>)
 800494c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800494e:	4b8d      	ldr	r3, [pc, #564]	; (8004b84 <menu+0x35bc>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d902      	bls.n	800495c <menu+0x3394>
				iotMode = 0;
 8004956:	4b8b      	ldr	r3, [pc, #556]	; (8004b84 <menu+0x35bc>)
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800495c:	f001 fb52 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004960:	2104      	movs	r1, #4
 8004962:	4886      	ldr	r0, [pc, #536]	; (8004b7c <menu+0x35b4>)
 8004964:	f005 fa4a 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004968:	4603      	mov	r3, r0
 800496a:	2b01      	cmp	r3, #1
 800496c:	d115      	bne.n	800499a <menu+0x33d2>
 800496e:	4b84      	ldr	r3, [pc, #528]	; (8004b80 <menu+0x35b8>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	f083 0301 	eor.w	r3, r3, #1
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00e      	beq.n	800499a <menu+0x33d2>
			iotMode = iotMode - 1;
 800497c:	4b81      	ldr	r3, [pc, #516]	; (8004b84 <menu+0x35bc>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	3b01      	subs	r3, #1
 8004982:	b2da      	uxtb	r2, r3
 8004984:	4b7f      	ldr	r3, [pc, #508]	; (8004b84 <menu+0x35bc>)
 8004986:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004988:	4b7e      	ldr	r3, [pc, #504]	; (8004b84 <menu+0x35bc>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <menu+0x33ce>
		   		iotMode = 1;
 8004990:	4b7c      	ldr	r3, [pc, #496]	; (8004b84 <menu+0x35bc>)
 8004992:	2201      	movs	r2, #1
 8004994:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004996:	f001 fb35 	bl	8006004 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800499a:	2108      	movs	r1, #8
 800499c:	4877      	ldr	r0, [pc, #476]	; (8004b7c <menu+0x35b4>)
 800499e:	f005 fa2d 	bl	8009dfc <HAL_GPIO_ReadPin>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d10e      	bne.n	80049c6 <menu+0x33fe>
 80049a8:	4b75      	ldr	r3, [pc, #468]	; (8004b80 <menu+0x35b8>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	f083 0301 	eor.w	r3, r3, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <menu+0x33fe>
			eepromData[37] = iotMode;
 80049b6:	4b73      	ldr	r3, [pc, #460]	; (8004b84 <menu+0x35bc>)
 80049b8:	781a      	ldrb	r2, [r3, #0]
 80049ba:	4b73      	ldr	r3, [pc, #460]	; (8004b88 <menu+0x35c0>)
 80049bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 80049c0:	4b72      	ldr	r3, [pc, #456]	; (8004b8c <menu+0x35c4>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80049c6:	4b72      	ldr	r3, [pc, #456]	; (8004b90 <menu+0x35c8>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d131      	bne.n	8004a32 <menu+0x346a>
		calismaSayModu = 0;
 80049ce:	4b71      	ldr	r3, [pc, #452]	; (8004b94 <menu+0x35cc>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 80049d4:	4a70      	ldr	r2, [pc, #448]	; (8004b98 <menu+0x35d0>)
 80049d6:	2101      	movs	r1, #1
 80049d8:	2001      	movs	r0, #1
 80049da:	f7fb ff81 	bl	80008e0 <lcd_print>

		lcd_print(2, 1, machineID);
 80049de:	4a6f      	ldr	r2, [pc, #444]	; (8004b9c <menu+0x35d4>)
 80049e0:	2101      	movs	r1, #1
 80049e2:	2002      	movs	r0, #2
 80049e4:	f7fb ff7c 	bl	80008e0 <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 80049e8:	486c      	ldr	r0, [pc, #432]	; (8004b9c <menu+0x35d4>)
 80049ea:	f7fb fc1b 	bl	8000224 <strlen>
 80049ee:	4603      	mov	r3, r0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	3301      	adds	r3, #1
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	4a6a      	ldr	r2, [pc, #424]	; (8004ba0 <menu+0x35d8>)
 80049f8:	4619      	mov	r1, r3
 80049fa:	2002      	movs	r0, #2
 80049fc:	f7fb ff70 	bl	80008e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a00:	2102      	movs	r1, #2
 8004a02:	485e      	ldr	r0, [pc, #376]	; (8004b7c <menu+0x35b4>)
 8004a04:	f005 f9fa 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d111      	bne.n	8004a32 <menu+0x346a>
 8004a0e:	2104      	movs	r1, #4
 8004a10:	485a      	ldr	r0, [pc, #360]	; (8004b7c <menu+0x35b4>)
 8004a12:	f005 f9f3 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d10a      	bne.n	8004a32 <menu+0x346a>
 8004a1c:	4b58      	ldr	r3, [pc, #352]	; (8004b80 <menu+0x35b8>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	f083 0301 	eor.w	r3, r3, #1
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <menu+0x346a>
			takeMachineID();
 8004a2a:	f7fc f983 	bl	8000d34 <takeMachineID>

			bekle();
 8004a2e:	f001 fae9 	bl	8006004 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004a32:	4b57      	ldr	r3, [pc, #348]	; (8004b90 <menu+0x35c8>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b21      	cmp	r3, #33	; 0x21
 8004a38:	d131      	bne.n	8004a9e <menu+0x34d6>
		calismaSayModu = 0;
 8004a3a:	4b56      	ldr	r3, [pc, #344]	; (8004b94 <menu+0x35cc>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004a40:	4a58      	ldr	r2, [pc, #352]	; (8004ba4 <menu+0x35dc>)
 8004a42:	2101      	movs	r1, #1
 8004a44:	2001      	movs	r0, #1
 8004a46:	f7fb ff4b 	bl	80008e0 <lcd_print>

		lcd_print(2, 1, wifiSSID);
 8004a4a:	4a57      	ldr	r2, [pc, #348]	; (8004ba8 <menu+0x35e0>)
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	2002      	movs	r0, #2
 8004a50:	f7fb ff46 	bl	80008e0 <lcd_print>
		lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004a54:	4854      	ldr	r0, [pc, #336]	; (8004ba8 <menu+0x35e0>)
 8004a56:	f7fb fbe5 	bl	8000224 <strlen>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	3301      	adds	r3, #1
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	4a4f      	ldr	r2, [pc, #316]	; (8004ba0 <menu+0x35d8>)
 8004a64:	4619      	mov	r1, r3
 8004a66:	2002      	movs	r0, #2
 8004a68:	f7fb ff3a 	bl	80008e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	4843      	ldr	r0, [pc, #268]	; (8004b7c <menu+0x35b4>)
 8004a70:	f005 f9c4 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d111      	bne.n	8004a9e <menu+0x34d6>
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	483f      	ldr	r0, [pc, #252]	; (8004b7c <menu+0x35b4>)
 8004a7e:	f005 f9bd 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d10a      	bne.n	8004a9e <menu+0x34d6>
 8004a88:	4b3d      	ldr	r3, [pc, #244]	; (8004b80 <menu+0x35b8>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	f083 0301 	eor.w	r3, r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <menu+0x34d6>
			takeWifiSSID();
 8004a96:	f7fc fa71 	bl	8000f7c <takeWifiSSID>

			bekle();
 8004a9a:	f001 fab3 	bl	8006004 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004a9e:	4b3c      	ldr	r3, [pc, #240]	; (8004b90 <menu+0x35c8>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b22      	cmp	r3, #34	; 0x22
 8004aa4:	d131      	bne.n	8004b0a <menu+0x3542>
		calismaSayModu = 0;
 8004aa6:	4b3b      	ldr	r3, [pc, #236]	; (8004b94 <menu+0x35cc>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004aac:	4a3f      	ldr	r2, [pc, #252]	; (8004bac <menu+0x35e4>)
 8004aae:	2101      	movs	r1, #1
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	f7fb ff15 	bl	80008e0 <lcd_print>

		lcd_print(2, 1, wifiPass);
 8004ab6:	4a3e      	ldr	r2, [pc, #248]	; (8004bb0 <menu+0x35e8>)
 8004ab8:	2101      	movs	r1, #1
 8004aba:	2002      	movs	r0, #2
 8004abc:	f7fb ff10 	bl	80008e0 <lcd_print>
		lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004ac0:	483b      	ldr	r0, [pc, #236]	; (8004bb0 <menu+0x35e8>)
 8004ac2:	f7fb fbaf 	bl	8000224 <strlen>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	3301      	adds	r3, #1
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	4a34      	ldr	r2, [pc, #208]	; (8004ba0 <menu+0x35d8>)
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	2002      	movs	r0, #2
 8004ad4:	f7fb ff04 	bl	80008e0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004ad8:	2102      	movs	r1, #2
 8004ada:	4828      	ldr	r0, [pc, #160]	; (8004b7c <menu+0x35b4>)
 8004adc:	f005 f98e 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d111      	bne.n	8004b0a <menu+0x3542>
 8004ae6:	2104      	movs	r1, #4
 8004ae8:	4824      	ldr	r0, [pc, #144]	; (8004b7c <menu+0x35b4>)
 8004aea:	f005 f987 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d10a      	bne.n	8004b0a <menu+0x3542>
 8004af4:	4b22      	ldr	r3, [pc, #136]	; (8004b80 <menu+0x35b8>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	f083 0301 	eor.w	r3, r3, #1
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <menu+0x3542>
			takeWifiPass();
 8004b02:	f7fc fbcf 	bl	80012a4 <takeWifiPass>

			bekle();
 8004b06:	f001 fa7d 	bl	8006004 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004b0a:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <menu+0x35c8>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b23      	cmp	r3, #35	; 0x23
 8004b10:	d12e      	bne.n	8004b70 <menu+0x35a8>
		if(dilSecim == 0) {
 8004b12:	4b18      	ldr	r3, [pc, #96]	; (8004b74 <menu+0x35ac>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <menu+0x3568>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004b1a:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <menu+0x35ec>)
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	2001      	movs	r0, #1
 8004b20:	f7fb fede 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004b24:	4a24      	ldr	r2, [pc, #144]	; (8004bb8 <menu+0x35f0>)
 8004b26:	2101      	movs	r1, #1
 8004b28:	2002      	movs	r0, #2
 8004b2a:	f7fb fed9 	bl	80008e0 <lcd_print>
 8004b2e:	e00d      	b.n	8004b4c <menu+0x3584>
		} else if(dilSecim == 1) {
 8004b30:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <menu+0x35ac>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d109      	bne.n	8004b4c <menu+0x3584>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004b38:	4a20      	ldr	r2, [pc, #128]	; (8004bbc <menu+0x35f4>)
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	f7fb fecf 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004b42:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <menu+0x35f8>)
 8004b44:	2101      	movs	r1, #1
 8004b46:	2002      	movs	r0, #2
 8004b48:	f7fb feca 	bl	80008e0 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004b4c:	2108      	movs	r1, #8
 8004b4e:	480b      	ldr	r0, [pc, #44]	; (8004b7c <menu+0x35b4>)
 8004b50:	f005 f954 	bl	8009dfc <HAL_GPIO_ReadPin>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d10a      	bne.n	8004b70 <menu+0x35a8>
			menuGiris = 0;
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <menu+0x35fc>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004b60:	f7fb feea 	bl	8000938 <lcd_clear>
			HAL_Delay(500);
 8004b64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b68:	f004 fb78 	bl	800925c <HAL_Delay>
			NVIC_SystemReset();
 8004b6c:	f7fb ff2c 	bl	80009c8 <__NVIC_SystemReset>
		}
	}
}
 8004b70:	bf00      	nop
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20000c76 	.word	0x20000c76
 8004b78:	0800de88 	.word	0x0800de88
 8004b7c:	40010800 	.word	0x40010800
 8004b80:	20000c84 	.word	0x20000c84
 8004b84:	20000c74 	.word	0x20000c74
 8004b88:	20000b44 	.word	0x20000b44
 8004b8c:	20000c81 	.word	0x20000c81
 8004b90:	20000c55 	.word	0x20000c55
 8004b94:	20000c75 	.word	0x20000c75
 8004b98:	0800e5d0 	.word	0x0800e5d0
 8004b9c:	20000c00 	.word	0x20000c00
 8004ba0:	2000094c 	.word	0x2000094c
 8004ba4:	0800e5e4 	.word	0x0800e5e4
 8004ba8:	20000c0c 	.word	0x20000c0c
 8004bac:	0800e5f8 	.word	0x0800e5f8
 8004bb0:	20000c30 	.word	0x20000c30
 8004bb4:	0800e60c 	.word	0x0800e60c
 8004bb8:	0800e620 	.word	0x0800e620
 8004bbc:	0800e634 	.word	0x0800e634
 8004bc0:	0800e648 	.word	0x0800e648
 8004bc4:	20000c72 	.word	0x20000c72

08004bc8 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004bd2:	48a9      	ldr	r0, [pc, #676]	; (8004e78 <loadMenuTexts+0x2b0>)
 8004bd4:	f7fb ff0e 	bl	80009f4 <copyText>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	4aa8      	ldr	r2, [pc, #672]	; (8004e7c <loadMenuTexts+0x2b4>)
 8004bdc:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004bde:	48a8      	ldr	r0, [pc, #672]	; (8004e80 <loadMenuTexts+0x2b8>)
 8004be0:	f7fb ff08 	bl	80009f4 <copyText>
 8004be4:	4603      	mov	r3, r0
 8004be6:	4aa7      	ldr	r2, [pc, #668]	; (8004e84 <loadMenuTexts+0x2bc>)
 8004be8:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004bea:	48a7      	ldr	r0, [pc, #668]	; (8004e88 <loadMenuTexts+0x2c0>)
 8004bec:	f7fb ff02 	bl	80009f4 <copyText>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	4aa6      	ldr	r2, [pc, #664]	; (8004e8c <loadMenuTexts+0x2c4>)
 8004bf4:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004bf6:	48a6      	ldr	r0, [pc, #664]	; (8004e90 <loadMenuTexts+0x2c8>)
 8004bf8:	f7fb fefc 	bl	80009f4 <copyText>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	4aa5      	ldr	r2, [pc, #660]	; (8004e94 <loadMenuTexts+0x2cc>)
 8004c00:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004c02:	48a5      	ldr	r0, [pc, #660]	; (8004e98 <loadMenuTexts+0x2d0>)
 8004c04:	f7fb fef6 	bl	80009f4 <copyText>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4aa4      	ldr	r2, [pc, #656]	; (8004e9c <loadMenuTexts+0x2d4>)
 8004c0c:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004c0e:	48a4      	ldr	r0, [pc, #656]	; (8004ea0 <loadMenuTexts+0x2d8>)
 8004c10:	f7fb fef0 	bl	80009f4 <copyText>
 8004c14:	4603      	mov	r3, r0
 8004c16:	4aa3      	ldr	r2, [pc, #652]	; (8004ea4 <loadMenuTexts+0x2dc>)
 8004c18:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004c1a:	48a3      	ldr	r0, [pc, #652]	; (8004ea8 <loadMenuTexts+0x2e0>)
 8004c1c:	f7fb feea 	bl	80009f4 <copyText>
 8004c20:	4603      	mov	r3, r0
 8004c22:	4aa2      	ldr	r2, [pc, #648]	; (8004eac <loadMenuTexts+0x2e4>)
 8004c24:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f040 82d1 	bne.w	80051d0 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004c2e:	48a0      	ldr	r0, [pc, #640]	; (8004eb0 <loadMenuTexts+0x2e8>)
 8004c30:	f7fb fee0 	bl	80009f4 <copyText>
 8004c34:	4603      	mov	r3, r0
 8004c36:	4a9f      	ldr	r2, [pc, #636]	; (8004eb4 <loadMenuTexts+0x2ec>)
 8004c38:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004c3a:	489f      	ldr	r0, [pc, #636]	; (8004eb8 <loadMenuTexts+0x2f0>)
 8004c3c:	f7fb feda 	bl	80009f4 <copyText>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4a9e      	ldr	r2, [pc, #632]	; (8004ebc <loadMenuTexts+0x2f4>)
 8004c44:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004c46:	489e      	ldr	r0, [pc, #632]	; (8004ec0 <loadMenuTexts+0x2f8>)
 8004c48:	f7fb fed4 	bl	80009f4 <copyText>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	4a9d      	ldr	r2, [pc, #628]	; (8004ec4 <loadMenuTexts+0x2fc>)
 8004c50:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004c52:	489d      	ldr	r0, [pc, #628]	; (8004ec8 <loadMenuTexts+0x300>)
 8004c54:	f7fb fece 	bl	80009f4 <copyText>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4a9c      	ldr	r2, [pc, #624]	; (8004ecc <loadMenuTexts+0x304>)
 8004c5c:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004c5e:	489c      	ldr	r0, [pc, #624]	; (8004ed0 <loadMenuTexts+0x308>)
 8004c60:	f7fb fec8 	bl	80009f4 <copyText>
 8004c64:	4603      	mov	r3, r0
 8004c66:	4a9b      	ldr	r2, [pc, #620]	; (8004ed4 <loadMenuTexts+0x30c>)
 8004c68:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004c6a:	489b      	ldr	r0, [pc, #620]	; (8004ed8 <loadMenuTexts+0x310>)
 8004c6c:	f7fb fec2 	bl	80009f4 <copyText>
 8004c70:	4603      	mov	r3, r0
 8004c72:	4a9a      	ldr	r2, [pc, #616]	; (8004edc <loadMenuTexts+0x314>)
 8004c74:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004c76:	489a      	ldr	r0, [pc, #616]	; (8004ee0 <loadMenuTexts+0x318>)
 8004c78:	f7fb febc 	bl	80009f4 <copyText>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4a99      	ldr	r2, [pc, #612]	; (8004ee4 <loadMenuTexts+0x31c>)
 8004c80:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004c82:	4899      	ldr	r0, [pc, #612]	; (8004ee8 <loadMenuTexts+0x320>)
 8004c84:	f7fb feb6 	bl	80009f4 <copyText>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4a98      	ldr	r2, [pc, #608]	; (8004eec <loadMenuTexts+0x324>)
 8004c8c:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004c8e:	4898      	ldr	r0, [pc, #608]	; (8004ef0 <loadMenuTexts+0x328>)
 8004c90:	f7fb feb0 	bl	80009f4 <copyText>
 8004c94:	4603      	mov	r3, r0
 8004c96:	4a97      	ldr	r2, [pc, #604]	; (8004ef4 <loadMenuTexts+0x32c>)
 8004c98:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004c9a:	4897      	ldr	r0, [pc, #604]	; (8004ef8 <loadMenuTexts+0x330>)
 8004c9c:	f7fb feaa 	bl	80009f4 <copyText>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	4a96      	ldr	r2, [pc, #600]	; (8004efc <loadMenuTexts+0x334>)
 8004ca4:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004ca6:	4896      	ldr	r0, [pc, #600]	; (8004f00 <loadMenuTexts+0x338>)
 8004ca8:	f7fb fea4 	bl	80009f4 <copyText>
 8004cac:	4603      	mov	r3, r0
 8004cae:	4a95      	ldr	r2, [pc, #596]	; (8004f04 <loadMenuTexts+0x33c>)
 8004cb0:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004cb2:	4895      	ldr	r0, [pc, #596]	; (8004f08 <loadMenuTexts+0x340>)
 8004cb4:	f7fb fe9e 	bl	80009f4 <copyText>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4a94      	ldr	r2, [pc, #592]	; (8004f0c <loadMenuTexts+0x344>)
 8004cbc:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004cbe:	4894      	ldr	r0, [pc, #592]	; (8004f10 <loadMenuTexts+0x348>)
 8004cc0:	f7fb fe98 	bl	80009f4 <copyText>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	4a93      	ldr	r2, [pc, #588]	; (8004f14 <loadMenuTexts+0x34c>)
 8004cc8:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004cca:	4893      	ldr	r0, [pc, #588]	; (8004f18 <loadMenuTexts+0x350>)
 8004ccc:	f7fb fe92 	bl	80009f4 <copyText>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4a92      	ldr	r2, [pc, #584]	; (8004f1c <loadMenuTexts+0x354>)
 8004cd4:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004cd6:	4892      	ldr	r0, [pc, #584]	; (8004f20 <loadMenuTexts+0x358>)
 8004cd8:	f7fb fe8c 	bl	80009f4 <copyText>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	4a91      	ldr	r2, [pc, #580]	; (8004f24 <loadMenuTexts+0x35c>)
 8004ce0:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004ce2:	4891      	ldr	r0, [pc, #580]	; (8004f28 <loadMenuTexts+0x360>)
 8004ce4:	f7fb fe86 	bl	80009f4 <copyText>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	4a90      	ldr	r2, [pc, #576]	; (8004f2c <loadMenuTexts+0x364>)
 8004cec:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004cee:	4890      	ldr	r0, [pc, #576]	; (8004f30 <loadMenuTexts+0x368>)
 8004cf0:	f7fb fe80 	bl	80009f4 <copyText>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	4a8f      	ldr	r2, [pc, #572]	; (8004f34 <loadMenuTexts+0x36c>)
 8004cf8:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004cfa:	488f      	ldr	r0, [pc, #572]	; (8004f38 <loadMenuTexts+0x370>)
 8004cfc:	f7fb fe7a 	bl	80009f4 <copyText>
 8004d00:	4603      	mov	r3, r0
 8004d02:	4a8e      	ldr	r2, [pc, #568]	; (8004f3c <loadMenuTexts+0x374>)
 8004d04:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004d06:	488e      	ldr	r0, [pc, #568]	; (8004f40 <loadMenuTexts+0x378>)
 8004d08:	f7fb fe74 	bl	80009f4 <copyText>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4a8d      	ldr	r2, [pc, #564]	; (8004f44 <loadMenuTexts+0x37c>)
 8004d10:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004d12:	488d      	ldr	r0, [pc, #564]	; (8004f48 <loadMenuTexts+0x380>)
 8004d14:	f7fb fe6e 	bl	80009f4 <copyText>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4a8c      	ldr	r2, [pc, #560]	; (8004f4c <loadMenuTexts+0x384>)
 8004d1c:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004d1e:	488c      	ldr	r0, [pc, #560]	; (8004f50 <loadMenuTexts+0x388>)
 8004d20:	f7fb fe68 	bl	80009f4 <copyText>
 8004d24:	4603      	mov	r3, r0
 8004d26:	4a8b      	ldr	r2, [pc, #556]	; (8004f54 <loadMenuTexts+0x38c>)
 8004d28:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004d2a:	488b      	ldr	r0, [pc, #556]	; (8004f58 <loadMenuTexts+0x390>)
 8004d2c:	f7fb fe62 	bl	80009f4 <copyText>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4a8a      	ldr	r2, [pc, #552]	; (8004f5c <loadMenuTexts+0x394>)
 8004d34:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004d36:	488a      	ldr	r0, [pc, #552]	; (8004f60 <loadMenuTexts+0x398>)
 8004d38:	f7fb fe5c 	bl	80009f4 <copyText>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4a89      	ldr	r2, [pc, #548]	; (8004f64 <loadMenuTexts+0x39c>)
 8004d40:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004d42:	4889      	ldr	r0, [pc, #548]	; (8004f68 <loadMenuTexts+0x3a0>)
 8004d44:	f7fb fe56 	bl	80009f4 <copyText>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4a88      	ldr	r2, [pc, #544]	; (8004f6c <loadMenuTexts+0x3a4>)
 8004d4c:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004d4e:	4888      	ldr	r0, [pc, #544]	; (8004f70 <loadMenuTexts+0x3a8>)
 8004d50:	f7fb fe50 	bl	80009f4 <copyText>
 8004d54:	4603      	mov	r3, r0
 8004d56:	4a87      	ldr	r2, [pc, #540]	; (8004f74 <loadMenuTexts+0x3ac>)
 8004d58:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004d5a:	4887      	ldr	r0, [pc, #540]	; (8004f78 <loadMenuTexts+0x3b0>)
 8004d5c:	f7fb fe4a 	bl	80009f4 <copyText>
 8004d60:	4603      	mov	r3, r0
 8004d62:	4a86      	ldr	r2, [pc, #536]	; (8004f7c <loadMenuTexts+0x3b4>)
 8004d64:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004d66:	4886      	ldr	r0, [pc, #536]	; (8004f80 <loadMenuTexts+0x3b8>)
 8004d68:	f7fb fe44 	bl	80009f4 <copyText>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	4a85      	ldr	r2, [pc, #532]	; (8004f84 <loadMenuTexts+0x3bc>)
 8004d70:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004d72:	4885      	ldr	r0, [pc, #532]	; (8004f88 <loadMenuTexts+0x3c0>)
 8004d74:	f7fb fe3e 	bl	80009f4 <copyText>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	4a84      	ldr	r2, [pc, #528]	; (8004f8c <loadMenuTexts+0x3c4>)
 8004d7c:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004d7e:	4884      	ldr	r0, [pc, #528]	; (8004f90 <loadMenuTexts+0x3c8>)
 8004d80:	f7fb fe38 	bl	80009f4 <copyText>
 8004d84:	4603      	mov	r3, r0
 8004d86:	4a83      	ldr	r2, [pc, #524]	; (8004f94 <loadMenuTexts+0x3cc>)
 8004d88:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004d8a:	4883      	ldr	r0, [pc, #524]	; (8004f98 <loadMenuTexts+0x3d0>)
 8004d8c:	f7fb fe32 	bl	80009f4 <copyText>
 8004d90:	4603      	mov	r3, r0
 8004d92:	4a82      	ldr	r2, [pc, #520]	; (8004f9c <loadMenuTexts+0x3d4>)
 8004d94:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004d96:	4882      	ldr	r0, [pc, #520]	; (8004fa0 <loadMenuTexts+0x3d8>)
 8004d98:	f7fb fe2c 	bl	80009f4 <copyText>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4a81      	ldr	r2, [pc, #516]	; (8004fa4 <loadMenuTexts+0x3dc>)
 8004da0:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004da2:	4881      	ldr	r0, [pc, #516]	; (8004fa8 <loadMenuTexts+0x3e0>)
 8004da4:	f7fb fe26 	bl	80009f4 <copyText>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4a80      	ldr	r2, [pc, #512]	; (8004fac <loadMenuTexts+0x3e4>)
 8004dac:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004dae:	4880      	ldr	r0, [pc, #512]	; (8004fb0 <loadMenuTexts+0x3e8>)
 8004db0:	f7fb fe20 	bl	80009f4 <copyText>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4a7f      	ldr	r2, [pc, #508]	; (8004fb4 <loadMenuTexts+0x3ec>)
 8004db8:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004dba:	487f      	ldr	r0, [pc, #508]	; (8004fb8 <loadMenuTexts+0x3f0>)
 8004dbc:	f7fb fe1a 	bl	80009f4 <copyText>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4a7e      	ldr	r2, [pc, #504]	; (8004fbc <loadMenuTexts+0x3f4>)
 8004dc4:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004dc6:	487e      	ldr	r0, [pc, #504]	; (8004fc0 <loadMenuTexts+0x3f8>)
 8004dc8:	f7fb fe14 	bl	80009f4 <copyText>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4a7d      	ldr	r2, [pc, #500]	; (8004fc4 <loadMenuTexts+0x3fc>)
 8004dd0:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004dd2:	487d      	ldr	r0, [pc, #500]	; (8004fc8 <loadMenuTexts+0x400>)
 8004dd4:	f7fb fe0e 	bl	80009f4 <copyText>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	4a7c      	ldr	r2, [pc, #496]	; (8004fcc <loadMenuTexts+0x404>)
 8004ddc:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004dde:	487c      	ldr	r0, [pc, #496]	; (8004fd0 <loadMenuTexts+0x408>)
 8004de0:	f7fb fe08 	bl	80009f4 <copyText>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4a7b      	ldr	r2, [pc, #492]	; (8004fd4 <loadMenuTexts+0x40c>)
 8004de8:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004dea:	487b      	ldr	r0, [pc, #492]	; (8004fd8 <loadMenuTexts+0x410>)
 8004dec:	f7fb fe02 	bl	80009f4 <copyText>
 8004df0:	4603      	mov	r3, r0
 8004df2:	4a7a      	ldr	r2, [pc, #488]	; (8004fdc <loadMenuTexts+0x414>)
 8004df4:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004df6:	487a      	ldr	r0, [pc, #488]	; (8004fe0 <loadMenuTexts+0x418>)
 8004df8:	f7fb fdfc 	bl	80009f4 <copyText>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4a79      	ldr	r2, [pc, #484]	; (8004fe4 <loadMenuTexts+0x41c>)
 8004e00:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004e02:	4879      	ldr	r0, [pc, #484]	; (8004fe8 <loadMenuTexts+0x420>)
 8004e04:	f7fb fdf6 	bl	80009f4 <copyText>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4a78      	ldr	r2, [pc, #480]	; (8004fec <loadMenuTexts+0x424>)
 8004e0c:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004e0e:	4878      	ldr	r0, [pc, #480]	; (8004ff0 <loadMenuTexts+0x428>)
 8004e10:	f7fb fdf0 	bl	80009f4 <copyText>
 8004e14:	4603      	mov	r3, r0
 8004e16:	4a77      	ldr	r2, [pc, #476]	; (8004ff4 <loadMenuTexts+0x42c>)
 8004e18:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004e1a:	4877      	ldr	r0, [pc, #476]	; (8004ff8 <loadMenuTexts+0x430>)
 8004e1c:	f7fb fdea 	bl	80009f4 <copyText>
 8004e20:	4603      	mov	r3, r0
 8004e22:	4a76      	ldr	r2, [pc, #472]	; (8004ffc <loadMenuTexts+0x434>)
 8004e24:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004e26:	4876      	ldr	r0, [pc, #472]	; (8005000 <loadMenuTexts+0x438>)
 8004e28:	f7fb fde4 	bl	80009f4 <copyText>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	4a75      	ldr	r2, [pc, #468]	; (8005004 <loadMenuTexts+0x43c>)
 8004e30:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004e32:	4875      	ldr	r0, [pc, #468]	; (8005008 <loadMenuTexts+0x440>)
 8004e34:	f7fb fdde 	bl	80009f4 <copyText>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4a74      	ldr	r2, [pc, #464]	; (800500c <loadMenuTexts+0x444>)
 8004e3c:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004e3e:	4874      	ldr	r0, [pc, #464]	; (8005010 <loadMenuTexts+0x448>)
 8004e40:	f7fb fdd8 	bl	80009f4 <copyText>
 8004e44:	4603      	mov	r3, r0
 8004e46:	4a73      	ldr	r2, [pc, #460]	; (8005014 <loadMenuTexts+0x44c>)
 8004e48:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004e4a:	4873      	ldr	r0, [pc, #460]	; (8005018 <loadMenuTexts+0x450>)
 8004e4c:	f7fb fdd2 	bl	80009f4 <copyText>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4a72      	ldr	r2, [pc, #456]	; (800501c <loadMenuTexts+0x454>)
 8004e54:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004e56:	4872      	ldr	r0, [pc, #456]	; (8005020 <loadMenuTexts+0x458>)
 8004e58:	f7fb fdcc 	bl	80009f4 <copyText>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	4a71      	ldr	r2, [pc, #452]	; (8005024 <loadMenuTexts+0x45c>)
 8004e60:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004e62:	4871      	ldr	r0, [pc, #452]	; (8005028 <loadMenuTexts+0x460>)
 8004e64:	f7fb fdc6 	bl	80009f4 <copyText>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4a70      	ldr	r2, [pc, #448]	; (800502c <loadMenuTexts+0x464>)
 8004e6c:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004e6e:	4870      	ldr	r0, [pc, #448]	; (8005030 <loadMenuTexts+0x468>)
 8004e70:	f7fb fdc0 	bl	80009f4 <copyText>
 8004e74:	4603      	mov	r3, r0
 8004e76:	e0dd      	b.n	8005034 <loadMenuTexts+0x46c>
 8004e78:	20000000 	.word	0x20000000
 8004e7c:	20000cbc 	.word	0x20000cbc
 8004e80:	20000010 	.word	0x20000010
 8004e84:	20000cc0 	.word	0x20000cc0
 8004e88:	20000020 	.word	0x20000020
 8004e8c:	20000d18 	.word	0x20000d18
 8004e90:	20000030 	.word	0x20000030
 8004e94:	20000d48 	.word	0x20000d48
 8004e98:	20000040 	.word	0x20000040
 8004e9c:	20000d50 	.word	0x20000d50
 8004ea0:	20000050 	.word	0x20000050
 8004ea4:	20000dc8 	.word	0x20000dc8
 8004ea8:	20000060 	.word	0x20000060
 8004eac:	20000dcc 	.word	0x20000dcc
 8004eb0:	20000070 	.word	0x20000070
 8004eb4:	20000cc4 	.word	0x20000cc4
 8004eb8:	20000080 	.word	0x20000080
 8004ebc:	20000cc8 	.word	0x20000cc8
 8004ec0:	20000090 	.word	0x20000090
 8004ec4:	20000ccc 	.word	0x20000ccc
 8004ec8:	200000a0 	.word	0x200000a0
 8004ecc:	20000cd0 	.word	0x20000cd0
 8004ed0:	200000b0 	.word	0x200000b0
 8004ed4:	20000cd4 	.word	0x20000cd4
 8004ed8:	200000c0 	.word	0x200000c0
 8004edc:	20000cd8 	.word	0x20000cd8
 8004ee0:	200000d0 	.word	0x200000d0
 8004ee4:	20000cdc 	.word	0x20000cdc
 8004ee8:	200000e0 	.word	0x200000e0
 8004eec:	20000ce0 	.word	0x20000ce0
 8004ef0:	200000f0 	.word	0x200000f0
 8004ef4:	20000ce4 	.word	0x20000ce4
 8004ef8:	20000100 	.word	0x20000100
 8004efc:	20000ce8 	.word	0x20000ce8
 8004f00:	20000110 	.word	0x20000110
 8004f04:	20000cec 	.word	0x20000cec
 8004f08:	20000120 	.word	0x20000120
 8004f0c:	20000cf0 	.word	0x20000cf0
 8004f10:	20000130 	.word	0x20000130
 8004f14:	20000cf4 	.word	0x20000cf4
 8004f18:	20000140 	.word	0x20000140
 8004f1c:	20000cf8 	.word	0x20000cf8
 8004f20:	20000150 	.word	0x20000150
 8004f24:	20000cfc 	.word	0x20000cfc
 8004f28:	20000160 	.word	0x20000160
 8004f2c:	20000d00 	.word	0x20000d00
 8004f30:	20000170 	.word	0x20000170
 8004f34:	20000d04 	.word	0x20000d04
 8004f38:	20000180 	.word	0x20000180
 8004f3c:	20000d08 	.word	0x20000d08
 8004f40:	20000190 	.word	0x20000190
 8004f44:	20000d0c 	.word	0x20000d0c
 8004f48:	200001a0 	.word	0x200001a0
 8004f4c:	20000d10 	.word	0x20000d10
 8004f50:	200001b0 	.word	0x200001b0
 8004f54:	20000d14 	.word	0x20000d14
 8004f58:	200001c0 	.word	0x200001c0
 8004f5c:	20000d1c 	.word	0x20000d1c
 8004f60:	200001d0 	.word	0x200001d0
 8004f64:	20000d20 	.word	0x20000d20
 8004f68:	200001e0 	.word	0x200001e0
 8004f6c:	20000d24 	.word	0x20000d24
 8004f70:	200001f0 	.word	0x200001f0
 8004f74:	20000d28 	.word	0x20000d28
 8004f78:	20000200 	.word	0x20000200
 8004f7c:	20000d2c 	.word	0x20000d2c
 8004f80:	20000210 	.word	0x20000210
 8004f84:	20000d30 	.word	0x20000d30
 8004f88:	20000220 	.word	0x20000220
 8004f8c:	20000d34 	.word	0x20000d34
 8004f90:	20000230 	.word	0x20000230
 8004f94:	20000d38 	.word	0x20000d38
 8004f98:	20000240 	.word	0x20000240
 8004f9c:	20000d3c 	.word	0x20000d3c
 8004fa0:	20000250 	.word	0x20000250
 8004fa4:	20000d40 	.word	0x20000d40
 8004fa8:	20000260 	.word	0x20000260
 8004fac:	20000d44 	.word	0x20000d44
 8004fb0:	20000270 	.word	0x20000270
 8004fb4:	20000d4c 	.word	0x20000d4c
 8004fb8:	20000280 	.word	0x20000280
 8004fbc:	20000d54 	.word	0x20000d54
 8004fc0:	20000290 	.word	0x20000290
 8004fc4:	20000d58 	.word	0x20000d58
 8004fc8:	200002a0 	.word	0x200002a0
 8004fcc:	20000d5c 	.word	0x20000d5c
 8004fd0:	200002b0 	.word	0x200002b0
 8004fd4:	20000d60 	.word	0x20000d60
 8004fd8:	200002c0 	.word	0x200002c0
 8004fdc:	20000d64 	.word	0x20000d64
 8004fe0:	200002d0 	.word	0x200002d0
 8004fe4:	20000d68 	.word	0x20000d68
 8004fe8:	200002e0 	.word	0x200002e0
 8004fec:	20000d6c 	.word	0x20000d6c
 8004ff0:	200002f0 	.word	0x200002f0
 8004ff4:	20000d70 	.word	0x20000d70
 8004ff8:	20000300 	.word	0x20000300
 8004ffc:	20000d74 	.word	0x20000d74
 8005000:	20000310 	.word	0x20000310
 8005004:	20000d78 	.word	0x20000d78
 8005008:	20000320 	.word	0x20000320
 800500c:	20000d7c 	.word	0x20000d7c
 8005010:	20000330 	.word	0x20000330
 8005014:	20000d80 	.word	0x20000d80
 8005018:	20000340 	.word	0x20000340
 800501c:	20000d84 	.word	0x20000d84
 8005020:	20000350 	.word	0x20000350
 8005024:	20000d88 	.word	0x20000d88
 8005028:	20000360 	.word	0x20000360
 800502c:	20000d8c 	.word	0x20000d8c
 8005030:	20000370 	.word	0x20000370
 8005034:	4a3d      	ldr	r2, [pc, #244]	; (800512c <loadMenuTexts+0x564>)
 8005036:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8005038:	483d      	ldr	r0, [pc, #244]	; (8005130 <loadMenuTexts+0x568>)
 800503a:	f7fb fcdb 	bl	80009f4 <copyText>
 800503e:	4603      	mov	r3, r0
 8005040:	4a3c      	ldr	r2, [pc, #240]	; (8005134 <loadMenuTexts+0x56c>)
 8005042:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8005044:	483c      	ldr	r0, [pc, #240]	; (8005138 <loadMenuTexts+0x570>)
 8005046:	f7fb fcd5 	bl	80009f4 <copyText>
 800504a:	4603      	mov	r3, r0
 800504c:	4a3b      	ldr	r2, [pc, #236]	; (800513c <loadMenuTexts+0x574>)
 800504e:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8005050:	483b      	ldr	r0, [pc, #236]	; (8005140 <loadMenuTexts+0x578>)
 8005052:	f7fb fccf 	bl	80009f4 <copyText>
 8005056:	4603      	mov	r3, r0
 8005058:	4a3a      	ldr	r2, [pc, #232]	; (8005144 <loadMenuTexts+0x57c>)
 800505a:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 800505c:	483a      	ldr	r0, [pc, #232]	; (8005148 <loadMenuTexts+0x580>)
 800505e:	f7fb fcc9 	bl	80009f4 <copyText>
 8005062:	4603      	mov	r3, r0
 8005064:	4a39      	ldr	r2, [pc, #228]	; (800514c <loadMenuTexts+0x584>)
 8005066:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8005068:	4839      	ldr	r0, [pc, #228]	; (8005150 <loadMenuTexts+0x588>)
 800506a:	f7fb fcc3 	bl	80009f4 <copyText>
 800506e:	4603      	mov	r3, r0
 8005070:	4a38      	ldr	r2, [pc, #224]	; (8005154 <loadMenuTexts+0x58c>)
 8005072:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8005074:	4838      	ldr	r0, [pc, #224]	; (8005158 <loadMenuTexts+0x590>)
 8005076:	f7fb fcbd 	bl	80009f4 <copyText>
 800507a:	4603      	mov	r3, r0
 800507c:	4a37      	ldr	r2, [pc, #220]	; (800515c <loadMenuTexts+0x594>)
 800507e:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8005080:	4837      	ldr	r0, [pc, #220]	; (8005160 <loadMenuTexts+0x598>)
 8005082:	f7fb fcb7 	bl	80009f4 <copyText>
 8005086:	4603      	mov	r3, r0
 8005088:	4a36      	ldr	r2, [pc, #216]	; (8005164 <loadMenuTexts+0x59c>)
 800508a:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 800508c:	4836      	ldr	r0, [pc, #216]	; (8005168 <loadMenuTexts+0x5a0>)
 800508e:	f7fb fcb1 	bl	80009f4 <copyText>
 8005092:	4603      	mov	r3, r0
 8005094:	4a35      	ldr	r2, [pc, #212]	; (800516c <loadMenuTexts+0x5a4>)
 8005096:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8005098:	4835      	ldr	r0, [pc, #212]	; (8005170 <loadMenuTexts+0x5a8>)
 800509a:	f7fb fcab 	bl	80009f4 <copyText>
 800509e:	4603      	mov	r3, r0
 80050a0:	4a34      	ldr	r2, [pc, #208]	; (8005174 <loadMenuTexts+0x5ac>)
 80050a2:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 80050a4:	4834      	ldr	r0, [pc, #208]	; (8005178 <loadMenuTexts+0x5b0>)
 80050a6:	f7fb fca5 	bl	80009f4 <copyText>
 80050aa:	4603      	mov	r3, r0
 80050ac:	4a33      	ldr	r2, [pc, #204]	; (800517c <loadMenuTexts+0x5b4>)
 80050ae:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 80050b0:	4833      	ldr	r0, [pc, #204]	; (8005180 <loadMenuTexts+0x5b8>)
 80050b2:	f7fb fc9f 	bl	80009f4 <copyText>
 80050b6:	4603      	mov	r3, r0
 80050b8:	4a32      	ldr	r2, [pc, #200]	; (8005184 <loadMenuTexts+0x5bc>)
 80050ba:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 80050bc:	4832      	ldr	r0, [pc, #200]	; (8005188 <loadMenuTexts+0x5c0>)
 80050be:	f7fb fc99 	bl	80009f4 <copyText>
 80050c2:	4603      	mov	r3, r0
 80050c4:	4a31      	ldr	r2, [pc, #196]	; (800518c <loadMenuTexts+0x5c4>)
 80050c6:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 80050c8:	4831      	ldr	r0, [pc, #196]	; (8005190 <loadMenuTexts+0x5c8>)
 80050ca:	f7fb fc93 	bl	80009f4 <copyText>
 80050ce:	4603      	mov	r3, r0
 80050d0:	4a30      	ldr	r2, [pc, #192]	; (8005194 <loadMenuTexts+0x5cc>)
 80050d2:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 80050d4:	4830      	ldr	r0, [pc, #192]	; (8005198 <loadMenuTexts+0x5d0>)
 80050d6:	f7fb fc8d 	bl	80009f4 <copyText>
 80050da:	4603      	mov	r3, r0
 80050dc:	4a2f      	ldr	r2, [pc, #188]	; (800519c <loadMenuTexts+0x5d4>)
 80050de:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 80050e0:	482f      	ldr	r0, [pc, #188]	; (80051a0 <loadMenuTexts+0x5d8>)
 80050e2:	f7fb fc87 	bl	80009f4 <copyText>
 80050e6:	4603      	mov	r3, r0
 80050e8:	4a2e      	ldr	r2, [pc, #184]	; (80051a4 <loadMenuTexts+0x5dc>)
 80050ea:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 80050ec:	482e      	ldr	r0, [pc, #184]	; (80051a8 <loadMenuTexts+0x5e0>)
 80050ee:	f7fb fc81 	bl	80009f4 <copyText>
 80050f2:	4603      	mov	r3, r0
 80050f4:	4a2d      	ldr	r2, [pc, #180]	; (80051ac <loadMenuTexts+0x5e4>)
 80050f6:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 80050f8:	482d      	ldr	r0, [pc, #180]	; (80051b0 <loadMenuTexts+0x5e8>)
 80050fa:	f7fb fc7b 	bl	80009f4 <copyText>
 80050fe:	4603      	mov	r3, r0
 8005100:	4a2c      	ldr	r2, [pc, #176]	; (80051b4 <loadMenuTexts+0x5ec>)
 8005102:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8005104:	482c      	ldr	r0, [pc, #176]	; (80051b8 <loadMenuTexts+0x5f0>)
 8005106:	f7fb fc75 	bl	80009f4 <copyText>
 800510a:	4603      	mov	r3, r0
 800510c:	4a2b      	ldr	r2, [pc, #172]	; (80051bc <loadMenuTexts+0x5f4>)
 800510e:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8005110:	482b      	ldr	r0, [pc, #172]	; (80051c0 <loadMenuTexts+0x5f8>)
 8005112:	f7fb fc6f 	bl	80009f4 <copyText>
 8005116:	4603      	mov	r3, r0
 8005118:	4a2a      	ldr	r2, [pc, #168]	; (80051c4 <loadMenuTexts+0x5fc>)
 800511a:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 800511c:	482a      	ldr	r0, [pc, #168]	; (80051c8 <loadMenuTexts+0x600>)
 800511e:	f7fb fc69 	bl	80009f4 <copyText>
 8005122:	4603      	mov	r3, r0
 8005124:	4a29      	ldr	r2, [pc, #164]	; (80051cc <loadMenuTexts+0x604>)
 8005126:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8005128:	e2d3      	b.n	80056d2 <loadMenuTexts+0xb0a>
 800512a:	bf00      	nop
 800512c:	20000d90 	.word	0x20000d90
 8005130:	20000380 	.word	0x20000380
 8005134:	20000d94 	.word	0x20000d94
 8005138:	20000390 	.word	0x20000390
 800513c:	20000d98 	.word	0x20000d98
 8005140:	200003a0 	.word	0x200003a0
 8005144:	20000d9c 	.word	0x20000d9c
 8005148:	200003b0 	.word	0x200003b0
 800514c:	20000da0 	.word	0x20000da0
 8005150:	200003c0 	.word	0x200003c0
 8005154:	20000da4 	.word	0x20000da4
 8005158:	200003d0 	.word	0x200003d0
 800515c:	20000da8 	.word	0x20000da8
 8005160:	200003e0 	.word	0x200003e0
 8005164:	20000dac 	.word	0x20000dac
 8005168:	200003f0 	.word	0x200003f0
 800516c:	20000db0 	.word	0x20000db0
 8005170:	20000400 	.word	0x20000400
 8005174:	20000db4 	.word	0x20000db4
 8005178:	20000410 	.word	0x20000410
 800517c:	20000db8 	.word	0x20000db8
 8005180:	20000420 	.word	0x20000420
 8005184:	20000dbc 	.word	0x20000dbc
 8005188:	20000430 	.word	0x20000430
 800518c:	20000dc0 	.word	0x20000dc0
 8005190:	20000440 	.word	0x20000440
 8005194:	20000dc4 	.word	0x20000dc4
 8005198:	20000450 	.word	0x20000450
 800519c:	20000dd0 	.word	0x20000dd0
 80051a0:	20000460 	.word	0x20000460
 80051a4:	20000dd4 	.word	0x20000dd4
 80051a8:	20000470 	.word	0x20000470
 80051ac:	20000dd8 	.word	0x20000dd8
 80051b0:	20000480 	.word	0x20000480
 80051b4:	20000ddc 	.word	0x20000ddc
 80051b8:	20000490 	.word	0x20000490
 80051bc:	20000de0 	.word	0x20000de0
 80051c0:	200004a0 	.word	0x200004a0
 80051c4:	20000de4 	.word	0x20000de4
 80051c8:	200004b0 	.word	0x200004b0
 80051cc:	20000de8 	.word	0x20000de8
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 80051d0:	48a9      	ldr	r0, [pc, #676]	; (8005478 <loadMenuTexts+0x8b0>)
 80051d2:	f7fb fc0f 	bl	80009f4 <copyText>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4aa8      	ldr	r2, [pc, #672]	; (800547c <loadMenuTexts+0x8b4>)
 80051da:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 80051dc:	48a8      	ldr	r0, [pc, #672]	; (8005480 <loadMenuTexts+0x8b8>)
 80051de:	f7fb fc09 	bl	80009f4 <copyText>
 80051e2:	4603      	mov	r3, r0
 80051e4:	4aa7      	ldr	r2, [pc, #668]	; (8005484 <loadMenuTexts+0x8bc>)
 80051e6:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 80051e8:	48a7      	ldr	r0, [pc, #668]	; (8005488 <loadMenuTexts+0x8c0>)
 80051ea:	f7fb fc03 	bl	80009f4 <copyText>
 80051ee:	4603      	mov	r3, r0
 80051f0:	4aa6      	ldr	r2, [pc, #664]	; (800548c <loadMenuTexts+0x8c4>)
 80051f2:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 80051f4:	48a6      	ldr	r0, [pc, #664]	; (8005490 <loadMenuTexts+0x8c8>)
 80051f6:	f7fb fbfd 	bl	80009f4 <copyText>
 80051fa:	4603      	mov	r3, r0
 80051fc:	4aa5      	ldr	r2, [pc, #660]	; (8005494 <loadMenuTexts+0x8cc>)
 80051fe:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8005200:	48a5      	ldr	r0, [pc, #660]	; (8005498 <loadMenuTexts+0x8d0>)
 8005202:	f7fb fbf7 	bl	80009f4 <copyText>
 8005206:	4603      	mov	r3, r0
 8005208:	4aa4      	ldr	r2, [pc, #656]	; (800549c <loadMenuTexts+0x8d4>)
 800520a:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 800520c:	48a4      	ldr	r0, [pc, #656]	; (80054a0 <loadMenuTexts+0x8d8>)
 800520e:	f7fb fbf1 	bl	80009f4 <copyText>
 8005212:	4603      	mov	r3, r0
 8005214:	4aa3      	ldr	r2, [pc, #652]	; (80054a4 <loadMenuTexts+0x8dc>)
 8005216:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8005218:	48a3      	ldr	r0, [pc, #652]	; (80054a8 <loadMenuTexts+0x8e0>)
 800521a:	f7fb fbeb 	bl	80009f4 <copyText>
 800521e:	4603      	mov	r3, r0
 8005220:	4aa2      	ldr	r2, [pc, #648]	; (80054ac <loadMenuTexts+0x8e4>)
 8005222:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8005224:	48a2      	ldr	r0, [pc, #648]	; (80054b0 <loadMenuTexts+0x8e8>)
 8005226:	f7fb fbe5 	bl	80009f4 <copyText>
 800522a:	4603      	mov	r3, r0
 800522c:	4aa1      	ldr	r2, [pc, #644]	; (80054b4 <loadMenuTexts+0x8ec>)
 800522e:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8005230:	48a1      	ldr	r0, [pc, #644]	; (80054b8 <loadMenuTexts+0x8f0>)
 8005232:	f7fb fbdf 	bl	80009f4 <copyText>
 8005236:	4603      	mov	r3, r0
 8005238:	4aa0      	ldr	r2, [pc, #640]	; (80054bc <loadMenuTexts+0x8f4>)
 800523a:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 800523c:	48a0      	ldr	r0, [pc, #640]	; (80054c0 <loadMenuTexts+0x8f8>)
 800523e:	f7fb fbd9 	bl	80009f4 <copyText>
 8005242:	4603      	mov	r3, r0
 8005244:	4a9f      	ldr	r2, [pc, #636]	; (80054c4 <loadMenuTexts+0x8fc>)
 8005246:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8005248:	489f      	ldr	r0, [pc, #636]	; (80054c8 <loadMenuTexts+0x900>)
 800524a:	f7fb fbd3 	bl	80009f4 <copyText>
 800524e:	4603      	mov	r3, r0
 8005250:	4a9e      	ldr	r2, [pc, #632]	; (80054cc <loadMenuTexts+0x904>)
 8005252:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8005254:	489e      	ldr	r0, [pc, #632]	; (80054d0 <loadMenuTexts+0x908>)
 8005256:	f7fb fbcd 	bl	80009f4 <copyText>
 800525a:	4603      	mov	r3, r0
 800525c:	4a9d      	ldr	r2, [pc, #628]	; (80054d4 <loadMenuTexts+0x90c>)
 800525e:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8005260:	489d      	ldr	r0, [pc, #628]	; (80054d8 <loadMenuTexts+0x910>)
 8005262:	f7fb fbc7 	bl	80009f4 <copyText>
 8005266:	4603      	mov	r3, r0
 8005268:	4a9c      	ldr	r2, [pc, #624]	; (80054dc <loadMenuTexts+0x914>)
 800526a:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 800526c:	489c      	ldr	r0, [pc, #624]	; (80054e0 <loadMenuTexts+0x918>)
 800526e:	f7fb fbc1 	bl	80009f4 <copyText>
 8005272:	4603      	mov	r3, r0
 8005274:	4a9b      	ldr	r2, [pc, #620]	; (80054e4 <loadMenuTexts+0x91c>)
 8005276:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8005278:	489b      	ldr	r0, [pc, #620]	; (80054e8 <loadMenuTexts+0x920>)
 800527a:	f7fb fbbb 	bl	80009f4 <copyText>
 800527e:	4603      	mov	r3, r0
 8005280:	4a9a      	ldr	r2, [pc, #616]	; (80054ec <loadMenuTexts+0x924>)
 8005282:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8005284:	489a      	ldr	r0, [pc, #616]	; (80054f0 <loadMenuTexts+0x928>)
 8005286:	f7fb fbb5 	bl	80009f4 <copyText>
 800528a:	4603      	mov	r3, r0
 800528c:	4a99      	ldr	r2, [pc, #612]	; (80054f4 <loadMenuTexts+0x92c>)
 800528e:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8005290:	4899      	ldr	r0, [pc, #612]	; (80054f8 <loadMenuTexts+0x930>)
 8005292:	f7fb fbaf 	bl	80009f4 <copyText>
 8005296:	4603      	mov	r3, r0
 8005298:	4a98      	ldr	r2, [pc, #608]	; (80054fc <loadMenuTexts+0x934>)
 800529a:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 800529c:	4898      	ldr	r0, [pc, #608]	; (8005500 <loadMenuTexts+0x938>)
 800529e:	f7fb fba9 	bl	80009f4 <copyText>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4a97      	ldr	r2, [pc, #604]	; (8005504 <loadMenuTexts+0x93c>)
 80052a6:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 80052a8:	4897      	ldr	r0, [pc, #604]	; (8005508 <loadMenuTexts+0x940>)
 80052aa:	f7fb fba3 	bl	80009f4 <copyText>
 80052ae:	4603      	mov	r3, r0
 80052b0:	4a96      	ldr	r2, [pc, #600]	; (800550c <loadMenuTexts+0x944>)
 80052b2:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 80052b4:	4896      	ldr	r0, [pc, #600]	; (8005510 <loadMenuTexts+0x948>)
 80052b6:	f7fb fb9d 	bl	80009f4 <copyText>
 80052ba:	4603      	mov	r3, r0
 80052bc:	4a95      	ldr	r2, [pc, #596]	; (8005514 <loadMenuTexts+0x94c>)
 80052be:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 80052c0:	4895      	ldr	r0, [pc, #596]	; (8005518 <loadMenuTexts+0x950>)
 80052c2:	f7fb fb97 	bl	80009f4 <copyText>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4a94      	ldr	r2, [pc, #592]	; (800551c <loadMenuTexts+0x954>)
 80052ca:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 80052cc:	4894      	ldr	r0, [pc, #592]	; (8005520 <loadMenuTexts+0x958>)
 80052ce:	f7fb fb91 	bl	80009f4 <copyText>
 80052d2:	4603      	mov	r3, r0
 80052d4:	4a93      	ldr	r2, [pc, #588]	; (8005524 <loadMenuTexts+0x95c>)
 80052d6:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 80052d8:	4893      	ldr	r0, [pc, #588]	; (8005528 <loadMenuTexts+0x960>)
 80052da:	f7fb fb8b 	bl	80009f4 <copyText>
 80052de:	4603      	mov	r3, r0
 80052e0:	4a92      	ldr	r2, [pc, #584]	; (800552c <loadMenuTexts+0x964>)
 80052e2:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 80052e4:	4892      	ldr	r0, [pc, #584]	; (8005530 <loadMenuTexts+0x968>)
 80052e6:	f7fb fb85 	bl	80009f4 <copyText>
 80052ea:	4603      	mov	r3, r0
 80052ec:	4a91      	ldr	r2, [pc, #580]	; (8005534 <loadMenuTexts+0x96c>)
 80052ee:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 80052f0:	4891      	ldr	r0, [pc, #580]	; (8005538 <loadMenuTexts+0x970>)
 80052f2:	f7fb fb7f 	bl	80009f4 <copyText>
 80052f6:	4603      	mov	r3, r0
 80052f8:	4a90      	ldr	r2, [pc, #576]	; (800553c <loadMenuTexts+0x974>)
 80052fa:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 80052fc:	4890      	ldr	r0, [pc, #576]	; (8005540 <loadMenuTexts+0x978>)
 80052fe:	f7fb fb79 	bl	80009f4 <copyText>
 8005302:	4603      	mov	r3, r0
 8005304:	4a8f      	ldr	r2, [pc, #572]	; (8005544 <loadMenuTexts+0x97c>)
 8005306:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8005308:	488f      	ldr	r0, [pc, #572]	; (8005548 <loadMenuTexts+0x980>)
 800530a:	f7fb fb73 	bl	80009f4 <copyText>
 800530e:	4603      	mov	r3, r0
 8005310:	4a8e      	ldr	r2, [pc, #568]	; (800554c <loadMenuTexts+0x984>)
 8005312:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8005314:	488e      	ldr	r0, [pc, #568]	; (8005550 <loadMenuTexts+0x988>)
 8005316:	f7fb fb6d 	bl	80009f4 <copyText>
 800531a:	4603      	mov	r3, r0
 800531c:	4a8d      	ldr	r2, [pc, #564]	; (8005554 <loadMenuTexts+0x98c>)
 800531e:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8005320:	488d      	ldr	r0, [pc, #564]	; (8005558 <loadMenuTexts+0x990>)
 8005322:	f7fb fb67 	bl	80009f4 <copyText>
 8005326:	4603      	mov	r3, r0
 8005328:	4a8c      	ldr	r2, [pc, #560]	; (800555c <loadMenuTexts+0x994>)
 800532a:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 800532c:	488c      	ldr	r0, [pc, #560]	; (8005560 <loadMenuTexts+0x998>)
 800532e:	f7fb fb61 	bl	80009f4 <copyText>
 8005332:	4603      	mov	r3, r0
 8005334:	4a8b      	ldr	r2, [pc, #556]	; (8005564 <loadMenuTexts+0x99c>)
 8005336:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8005338:	488b      	ldr	r0, [pc, #556]	; (8005568 <loadMenuTexts+0x9a0>)
 800533a:	f7fb fb5b 	bl	80009f4 <copyText>
 800533e:	4603      	mov	r3, r0
 8005340:	4a8a      	ldr	r2, [pc, #552]	; (800556c <loadMenuTexts+0x9a4>)
 8005342:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8005344:	488a      	ldr	r0, [pc, #552]	; (8005570 <loadMenuTexts+0x9a8>)
 8005346:	f7fb fb55 	bl	80009f4 <copyText>
 800534a:	4603      	mov	r3, r0
 800534c:	4a89      	ldr	r2, [pc, #548]	; (8005574 <loadMenuTexts+0x9ac>)
 800534e:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8005350:	4889      	ldr	r0, [pc, #548]	; (8005578 <loadMenuTexts+0x9b0>)
 8005352:	f7fb fb4f 	bl	80009f4 <copyText>
 8005356:	4603      	mov	r3, r0
 8005358:	4a88      	ldr	r2, [pc, #544]	; (800557c <loadMenuTexts+0x9b4>)
 800535a:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 800535c:	4888      	ldr	r0, [pc, #544]	; (8005580 <loadMenuTexts+0x9b8>)
 800535e:	f7fb fb49 	bl	80009f4 <copyText>
 8005362:	4603      	mov	r3, r0
 8005364:	4a87      	ldr	r2, [pc, #540]	; (8005584 <loadMenuTexts+0x9bc>)
 8005366:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8005368:	4887      	ldr	r0, [pc, #540]	; (8005588 <loadMenuTexts+0x9c0>)
 800536a:	f7fb fb43 	bl	80009f4 <copyText>
 800536e:	4603      	mov	r3, r0
 8005370:	4a86      	ldr	r2, [pc, #536]	; (800558c <loadMenuTexts+0x9c4>)
 8005372:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005374:	4886      	ldr	r0, [pc, #536]	; (8005590 <loadMenuTexts+0x9c8>)
 8005376:	f7fb fb3d 	bl	80009f4 <copyText>
 800537a:	4603      	mov	r3, r0
 800537c:	4a85      	ldr	r2, [pc, #532]	; (8005594 <loadMenuTexts+0x9cc>)
 800537e:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8005380:	4885      	ldr	r0, [pc, #532]	; (8005598 <loadMenuTexts+0x9d0>)
 8005382:	f7fb fb37 	bl	80009f4 <copyText>
 8005386:	4603      	mov	r3, r0
 8005388:	4a84      	ldr	r2, [pc, #528]	; (800559c <loadMenuTexts+0x9d4>)
 800538a:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 800538c:	4884      	ldr	r0, [pc, #528]	; (80055a0 <loadMenuTexts+0x9d8>)
 800538e:	f7fb fb31 	bl	80009f4 <copyText>
 8005392:	4603      	mov	r3, r0
 8005394:	4a83      	ldr	r2, [pc, #524]	; (80055a4 <loadMenuTexts+0x9dc>)
 8005396:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8005398:	4883      	ldr	r0, [pc, #524]	; (80055a8 <loadMenuTexts+0x9e0>)
 800539a:	f7fb fb2b 	bl	80009f4 <copyText>
 800539e:	4603      	mov	r3, r0
 80053a0:	4a82      	ldr	r2, [pc, #520]	; (80055ac <loadMenuTexts+0x9e4>)
 80053a2:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 80053a4:	4882      	ldr	r0, [pc, #520]	; (80055b0 <loadMenuTexts+0x9e8>)
 80053a6:	f7fb fb25 	bl	80009f4 <copyText>
 80053aa:	4603      	mov	r3, r0
 80053ac:	4a81      	ldr	r2, [pc, #516]	; (80055b4 <loadMenuTexts+0x9ec>)
 80053ae:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 80053b0:	4881      	ldr	r0, [pc, #516]	; (80055b8 <loadMenuTexts+0x9f0>)
 80053b2:	f7fb fb1f 	bl	80009f4 <copyText>
 80053b6:	4603      	mov	r3, r0
 80053b8:	4a80      	ldr	r2, [pc, #512]	; (80055bc <loadMenuTexts+0x9f4>)
 80053ba:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 80053bc:	4880      	ldr	r0, [pc, #512]	; (80055c0 <loadMenuTexts+0x9f8>)
 80053be:	f7fb fb19 	bl	80009f4 <copyText>
 80053c2:	4603      	mov	r3, r0
 80053c4:	4a7f      	ldr	r2, [pc, #508]	; (80055c4 <loadMenuTexts+0x9fc>)
 80053c6:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 80053c8:	487f      	ldr	r0, [pc, #508]	; (80055c8 <loadMenuTexts+0xa00>)
 80053ca:	f7fb fb13 	bl	80009f4 <copyText>
 80053ce:	4603      	mov	r3, r0
 80053d0:	4a7e      	ldr	r2, [pc, #504]	; (80055cc <loadMenuTexts+0xa04>)
 80053d2:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80053d4:	487e      	ldr	r0, [pc, #504]	; (80055d0 <loadMenuTexts+0xa08>)
 80053d6:	f7fb fb0d 	bl	80009f4 <copyText>
 80053da:	4603      	mov	r3, r0
 80053dc:	4a7d      	ldr	r2, [pc, #500]	; (80055d4 <loadMenuTexts+0xa0c>)
 80053de:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80053e0:	487d      	ldr	r0, [pc, #500]	; (80055d8 <loadMenuTexts+0xa10>)
 80053e2:	f7fb fb07 	bl	80009f4 <copyText>
 80053e6:	4603      	mov	r3, r0
 80053e8:	4a7c      	ldr	r2, [pc, #496]	; (80055dc <loadMenuTexts+0xa14>)
 80053ea:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 80053ec:	487c      	ldr	r0, [pc, #496]	; (80055e0 <loadMenuTexts+0xa18>)
 80053ee:	f7fb fb01 	bl	80009f4 <copyText>
 80053f2:	4603      	mov	r3, r0
 80053f4:	4a7b      	ldr	r2, [pc, #492]	; (80055e4 <loadMenuTexts+0xa1c>)
 80053f6:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 80053f8:	487b      	ldr	r0, [pc, #492]	; (80055e8 <loadMenuTexts+0xa20>)
 80053fa:	f7fb fafb 	bl	80009f4 <copyText>
 80053fe:	4603      	mov	r3, r0
 8005400:	4a7a      	ldr	r2, [pc, #488]	; (80055ec <loadMenuTexts+0xa24>)
 8005402:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8005404:	487a      	ldr	r0, [pc, #488]	; (80055f0 <loadMenuTexts+0xa28>)
 8005406:	f7fb faf5 	bl	80009f4 <copyText>
 800540a:	4603      	mov	r3, r0
 800540c:	4a79      	ldr	r2, [pc, #484]	; (80055f4 <loadMenuTexts+0xa2c>)
 800540e:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8005410:	4879      	ldr	r0, [pc, #484]	; (80055f8 <loadMenuTexts+0xa30>)
 8005412:	f7fb faef 	bl	80009f4 <copyText>
 8005416:	4603      	mov	r3, r0
 8005418:	4a78      	ldr	r2, [pc, #480]	; (80055fc <loadMenuTexts+0xa34>)
 800541a:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 800541c:	4878      	ldr	r0, [pc, #480]	; (8005600 <loadMenuTexts+0xa38>)
 800541e:	f7fb fae9 	bl	80009f4 <copyText>
 8005422:	4603      	mov	r3, r0
 8005424:	4a77      	ldr	r2, [pc, #476]	; (8005604 <loadMenuTexts+0xa3c>)
 8005426:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8005428:	4877      	ldr	r0, [pc, #476]	; (8005608 <loadMenuTexts+0xa40>)
 800542a:	f7fb fae3 	bl	80009f4 <copyText>
 800542e:	4603      	mov	r3, r0
 8005430:	4a76      	ldr	r2, [pc, #472]	; (800560c <loadMenuTexts+0xa44>)
 8005432:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8005434:	4876      	ldr	r0, [pc, #472]	; (8005610 <loadMenuTexts+0xa48>)
 8005436:	f7fb fadd 	bl	80009f4 <copyText>
 800543a:	4603      	mov	r3, r0
 800543c:	4a75      	ldr	r2, [pc, #468]	; (8005614 <loadMenuTexts+0xa4c>)
 800543e:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8005440:	4875      	ldr	r0, [pc, #468]	; (8005618 <loadMenuTexts+0xa50>)
 8005442:	f7fb fad7 	bl	80009f4 <copyText>
 8005446:	4603      	mov	r3, r0
 8005448:	4a74      	ldr	r2, [pc, #464]	; (800561c <loadMenuTexts+0xa54>)
 800544a:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 800544c:	4874      	ldr	r0, [pc, #464]	; (8005620 <loadMenuTexts+0xa58>)
 800544e:	f7fb fad1 	bl	80009f4 <copyText>
 8005452:	4603      	mov	r3, r0
 8005454:	4a73      	ldr	r2, [pc, #460]	; (8005624 <loadMenuTexts+0xa5c>)
 8005456:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8005458:	4873      	ldr	r0, [pc, #460]	; (8005628 <loadMenuTexts+0xa60>)
 800545a:	f7fb facb 	bl	80009f4 <copyText>
 800545e:	4603      	mov	r3, r0
 8005460:	4a72      	ldr	r2, [pc, #456]	; (800562c <loadMenuTexts+0xa64>)
 8005462:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8005464:	4872      	ldr	r0, [pc, #456]	; (8005630 <loadMenuTexts+0xa68>)
 8005466:	f7fb fac5 	bl	80009f4 <copyText>
 800546a:	4603      	mov	r3, r0
 800546c:	4a71      	ldr	r2, [pc, #452]	; (8005634 <loadMenuTexts+0xa6c>)
 800546e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8005470:	4871      	ldr	r0, [pc, #452]	; (8005638 <loadMenuTexts+0xa70>)
 8005472:	f7fb fabf 	bl	80009f4 <copyText>
 8005476:	e0e1      	b.n	800563c <loadMenuTexts+0xa74>
 8005478:	200004c0 	.word	0x200004c0
 800547c:	20000cc4 	.word	0x20000cc4
 8005480:	200004d0 	.word	0x200004d0
 8005484:	20000cc8 	.word	0x20000cc8
 8005488:	200004e0 	.word	0x200004e0
 800548c:	20000ccc 	.word	0x20000ccc
 8005490:	200004f0 	.word	0x200004f0
 8005494:	20000cd0 	.word	0x20000cd0
 8005498:	20000500 	.word	0x20000500
 800549c:	20000cd4 	.word	0x20000cd4
 80054a0:	20000510 	.word	0x20000510
 80054a4:	20000cd8 	.word	0x20000cd8
 80054a8:	20000520 	.word	0x20000520
 80054ac:	20000cdc 	.word	0x20000cdc
 80054b0:	20000530 	.word	0x20000530
 80054b4:	20000ce0 	.word	0x20000ce0
 80054b8:	20000540 	.word	0x20000540
 80054bc:	20000ce4 	.word	0x20000ce4
 80054c0:	20000550 	.word	0x20000550
 80054c4:	20000ce8 	.word	0x20000ce8
 80054c8:	20000560 	.word	0x20000560
 80054cc:	20000cec 	.word	0x20000cec
 80054d0:	20000570 	.word	0x20000570
 80054d4:	20000cf0 	.word	0x20000cf0
 80054d8:	20000580 	.word	0x20000580
 80054dc:	20000cf4 	.word	0x20000cf4
 80054e0:	20000590 	.word	0x20000590
 80054e4:	20000cf8 	.word	0x20000cf8
 80054e8:	200005a0 	.word	0x200005a0
 80054ec:	20000cfc 	.word	0x20000cfc
 80054f0:	200005b0 	.word	0x200005b0
 80054f4:	20000d00 	.word	0x20000d00
 80054f8:	200005c0 	.word	0x200005c0
 80054fc:	20000d04 	.word	0x20000d04
 8005500:	200005d0 	.word	0x200005d0
 8005504:	20000d08 	.word	0x20000d08
 8005508:	200005e0 	.word	0x200005e0
 800550c:	20000d0c 	.word	0x20000d0c
 8005510:	200005f0 	.word	0x200005f0
 8005514:	20000d10 	.word	0x20000d10
 8005518:	20000600 	.word	0x20000600
 800551c:	20000d14 	.word	0x20000d14
 8005520:	20000610 	.word	0x20000610
 8005524:	20000d1c 	.word	0x20000d1c
 8005528:	20000620 	.word	0x20000620
 800552c:	20000d20 	.word	0x20000d20
 8005530:	20000630 	.word	0x20000630
 8005534:	20000d24 	.word	0x20000d24
 8005538:	20000640 	.word	0x20000640
 800553c:	20000d28 	.word	0x20000d28
 8005540:	20000650 	.word	0x20000650
 8005544:	20000d2c 	.word	0x20000d2c
 8005548:	20000660 	.word	0x20000660
 800554c:	20000d30 	.word	0x20000d30
 8005550:	20000670 	.word	0x20000670
 8005554:	20000d34 	.word	0x20000d34
 8005558:	20000680 	.word	0x20000680
 800555c:	20000d38 	.word	0x20000d38
 8005560:	20000690 	.word	0x20000690
 8005564:	20000d3c 	.word	0x20000d3c
 8005568:	200006a0 	.word	0x200006a0
 800556c:	20000d40 	.word	0x20000d40
 8005570:	200006b0 	.word	0x200006b0
 8005574:	20000d44 	.word	0x20000d44
 8005578:	200006c0 	.word	0x200006c0
 800557c:	20000d4c 	.word	0x20000d4c
 8005580:	200006d0 	.word	0x200006d0
 8005584:	20000d54 	.word	0x20000d54
 8005588:	200006e0 	.word	0x200006e0
 800558c:	20000d58 	.word	0x20000d58
 8005590:	200006f0 	.word	0x200006f0
 8005594:	20000d5c 	.word	0x20000d5c
 8005598:	20000700 	.word	0x20000700
 800559c:	20000d60 	.word	0x20000d60
 80055a0:	20000710 	.word	0x20000710
 80055a4:	20000d64 	.word	0x20000d64
 80055a8:	20000720 	.word	0x20000720
 80055ac:	20000d68 	.word	0x20000d68
 80055b0:	20000730 	.word	0x20000730
 80055b4:	20000d6c 	.word	0x20000d6c
 80055b8:	20000740 	.word	0x20000740
 80055bc:	20000d70 	.word	0x20000d70
 80055c0:	20000750 	.word	0x20000750
 80055c4:	20000d74 	.word	0x20000d74
 80055c8:	20000760 	.word	0x20000760
 80055cc:	20000d78 	.word	0x20000d78
 80055d0:	20000770 	.word	0x20000770
 80055d4:	20000d7c 	.word	0x20000d7c
 80055d8:	20000780 	.word	0x20000780
 80055dc:	20000d80 	.word	0x20000d80
 80055e0:	20000790 	.word	0x20000790
 80055e4:	20000d84 	.word	0x20000d84
 80055e8:	200007a0 	.word	0x200007a0
 80055ec:	20000d88 	.word	0x20000d88
 80055f0:	200007b0 	.word	0x200007b0
 80055f4:	20000d8c 	.word	0x20000d8c
 80055f8:	200007c0 	.word	0x200007c0
 80055fc:	20000d90 	.word	0x20000d90
 8005600:	200007d0 	.word	0x200007d0
 8005604:	20000d94 	.word	0x20000d94
 8005608:	200007e0 	.word	0x200007e0
 800560c:	20000d98 	.word	0x20000d98
 8005610:	200007f0 	.word	0x200007f0
 8005614:	20000d9c 	.word	0x20000d9c
 8005618:	20000800 	.word	0x20000800
 800561c:	20000da0 	.word	0x20000da0
 8005620:	20000810 	.word	0x20000810
 8005624:	20000da4 	.word	0x20000da4
 8005628:	20000820 	.word	0x20000820
 800562c:	20000da8 	.word	0x20000da8
 8005630:	20000830 	.word	0x20000830
 8005634:	20000dac 	.word	0x20000dac
 8005638:	20000840 	.word	0x20000840
 800563c:	4603      	mov	r3, r0
 800563e:	4a27      	ldr	r2, [pc, #156]	; (80056dc <loadMenuTexts+0xb14>)
 8005640:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8005642:	4827      	ldr	r0, [pc, #156]	; (80056e0 <loadMenuTexts+0xb18>)
 8005644:	f7fb f9d6 	bl	80009f4 <copyText>
 8005648:	4603      	mov	r3, r0
 800564a:	4a26      	ldr	r2, [pc, #152]	; (80056e4 <loadMenuTexts+0xb1c>)
 800564c:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 800564e:	4826      	ldr	r0, [pc, #152]	; (80056e8 <loadMenuTexts+0xb20>)
 8005650:	f7fb f9d0 	bl	80009f4 <copyText>
 8005654:	4603      	mov	r3, r0
 8005656:	4a25      	ldr	r2, [pc, #148]	; (80056ec <loadMenuTexts+0xb24>)
 8005658:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 800565a:	4825      	ldr	r0, [pc, #148]	; (80056f0 <loadMenuTexts+0xb28>)
 800565c:	f7fb f9ca 	bl	80009f4 <copyText>
 8005660:	4603      	mov	r3, r0
 8005662:	4a24      	ldr	r2, [pc, #144]	; (80056f4 <loadMenuTexts+0xb2c>)
 8005664:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8005666:	4824      	ldr	r0, [pc, #144]	; (80056f8 <loadMenuTexts+0xb30>)
 8005668:	f7fb f9c4 	bl	80009f4 <copyText>
 800566c:	4603      	mov	r3, r0
 800566e:	4a23      	ldr	r2, [pc, #140]	; (80056fc <loadMenuTexts+0xb34>)
 8005670:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8005672:	4823      	ldr	r0, [pc, #140]	; (8005700 <loadMenuTexts+0xb38>)
 8005674:	f7fb f9be 	bl	80009f4 <copyText>
 8005678:	4603      	mov	r3, r0
 800567a:	4a22      	ldr	r2, [pc, #136]	; (8005704 <loadMenuTexts+0xb3c>)
 800567c:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 800567e:	4822      	ldr	r0, [pc, #136]	; (8005708 <loadMenuTexts+0xb40>)
 8005680:	f7fb f9b8 	bl	80009f4 <copyText>
 8005684:	4603      	mov	r3, r0
 8005686:	4a21      	ldr	r2, [pc, #132]	; (800570c <loadMenuTexts+0xb44>)
 8005688:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 800568a:	4821      	ldr	r0, [pc, #132]	; (8005710 <loadMenuTexts+0xb48>)
 800568c:	f7fb f9b2 	bl	80009f4 <copyText>
 8005690:	4603      	mov	r3, r0
 8005692:	4a20      	ldr	r2, [pc, #128]	; (8005714 <loadMenuTexts+0xb4c>)
 8005694:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8005696:	4820      	ldr	r0, [pc, #128]	; (8005718 <loadMenuTexts+0xb50>)
 8005698:	f7fb f9ac 	bl	80009f4 <copyText>
 800569c:	4603      	mov	r3, r0
 800569e:	4a1f      	ldr	r2, [pc, #124]	; (800571c <loadMenuTexts+0xb54>)
 80056a0:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 80056a2:	481f      	ldr	r0, [pc, #124]	; (8005720 <loadMenuTexts+0xb58>)
 80056a4:	f7fb f9a6 	bl	80009f4 <copyText>
 80056a8:	4603      	mov	r3, r0
 80056aa:	4a1e      	ldr	r2, [pc, #120]	; (8005724 <loadMenuTexts+0xb5c>)
 80056ac:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 80056ae:	481e      	ldr	r0, [pc, #120]	; (8005728 <loadMenuTexts+0xb60>)
 80056b0:	f7fb f9a0 	bl	80009f4 <copyText>
 80056b4:	4603      	mov	r3, r0
 80056b6:	4a1d      	ldr	r2, [pc, #116]	; (800572c <loadMenuTexts+0xb64>)
 80056b8:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 80056ba:	481d      	ldr	r0, [pc, #116]	; (8005730 <loadMenuTexts+0xb68>)
 80056bc:	f7fb f99a 	bl	80009f4 <copyText>
 80056c0:	4603      	mov	r3, r0
 80056c2:	4a1c      	ldr	r2, [pc, #112]	; (8005734 <loadMenuTexts+0xb6c>)
 80056c4:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 80056c6:	481c      	ldr	r0, [pc, #112]	; (8005738 <loadMenuTexts+0xb70>)
 80056c8:	f7fb f994 	bl	80009f4 <copyText>
 80056cc:	4603      	mov	r3, r0
 80056ce:	4a1b      	ldr	r2, [pc, #108]	; (800573c <loadMenuTexts+0xb74>)
 80056d0:	6013      	str	r3, [r2, #0]
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000db0 	.word	0x20000db0
 80056e0:	20000850 	.word	0x20000850
 80056e4:	20000db4 	.word	0x20000db4
 80056e8:	20000860 	.word	0x20000860
 80056ec:	20000db8 	.word	0x20000db8
 80056f0:	20000870 	.word	0x20000870
 80056f4:	20000dbc 	.word	0x20000dbc
 80056f8:	20000880 	.word	0x20000880
 80056fc:	20000dc0 	.word	0x20000dc0
 8005700:	20000890 	.word	0x20000890
 8005704:	20000dc4 	.word	0x20000dc4
 8005708:	200008a0 	.word	0x200008a0
 800570c:	20000dd0 	.word	0x20000dd0
 8005710:	200008b0 	.word	0x200008b0
 8005714:	20000dd4 	.word	0x20000dd4
 8005718:	200008c0 	.word	0x200008c0
 800571c:	20000dd8 	.word	0x20000dd8
 8005720:	200008d0 	.word	0x200008d0
 8005724:	20000ddc 	.word	0x20000ddc
 8005728:	200008e0 	.word	0x200008e0
 800572c:	20000de0 	.word	0x20000de0
 8005730:	200008f0 	.word	0x200008f0
 8005734:	20000de4 	.word	0x20000de4
 8005738:	20000900 	.word	0x20000900
 800573c:	20000de8 	.word	0x20000de8

08005740 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d105      	bne.n	800575c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8005750:	4a22      	ldr	r2, [pc, #136]	; (80057dc <lcdUpdate+0x9c>)
 8005752:	2101      	movs	r1, #1
 8005754:	2002      	movs	r0, #2
 8005756:	f7fb f8c3 	bl	80008e0 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 800575a:	e03b      	b.n	80057d4 <lcdUpdate+0x94>
	} else if(y==2) {
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d105      	bne.n	800576e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8005762:	4a1e      	ldr	r2, [pc, #120]	; (80057dc <lcdUpdate+0x9c>)
 8005764:	2102      	movs	r1, #2
 8005766:	2002      	movs	r0, #2
 8005768:	f7fb f8ba 	bl	80008e0 <lcd_print>
}
 800576c:	e032      	b.n	80057d4 <lcdUpdate+0x94>
	} else if(y==3) {
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	2b03      	cmp	r3, #3
 8005772:	d105      	bne.n	8005780 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005774:	4a19      	ldr	r2, [pc, #100]	; (80057dc <lcdUpdate+0x9c>)
 8005776:	2103      	movs	r1, #3
 8005778:	2002      	movs	r0, #2
 800577a:	f7fb f8b1 	bl	80008e0 <lcd_print>
}
 800577e:	e029      	b.n	80057d4 <lcdUpdate+0x94>
	} else if(y==4) {
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	2b04      	cmp	r3, #4
 8005784:	d105      	bne.n	8005792 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8005786:	4a15      	ldr	r2, [pc, #84]	; (80057dc <lcdUpdate+0x9c>)
 8005788:	2104      	movs	r1, #4
 800578a:	2002      	movs	r0, #2
 800578c:	f7fb f8a8 	bl	80008e0 <lcd_print>
}
 8005790:	e020      	b.n	80057d4 <lcdUpdate+0x94>
	} else if(y==5) {
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	2b05      	cmp	r3, #5
 8005796:	d105      	bne.n	80057a4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005798:	4a10      	ldr	r2, [pc, #64]	; (80057dc <lcdUpdate+0x9c>)
 800579a:	2105      	movs	r1, #5
 800579c:	2002      	movs	r0, #2
 800579e:	f7fb f89f 	bl	80008e0 <lcd_print>
}
 80057a2:	e017      	b.n	80057d4 <lcdUpdate+0x94>
	} else if(y==6) {
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	2b06      	cmp	r3, #6
 80057a8:	d105      	bne.n	80057b6 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80057aa:	4a0c      	ldr	r2, [pc, #48]	; (80057dc <lcdUpdate+0x9c>)
 80057ac:	2106      	movs	r1, #6
 80057ae:	2002      	movs	r0, #2
 80057b0:	f7fb f896 	bl	80008e0 <lcd_print>
}
 80057b4:	e00e      	b.n	80057d4 <lcdUpdate+0x94>
	} else if (y==7) {
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	2b07      	cmp	r3, #7
 80057ba:	d10b      	bne.n	80057d4 <lcdUpdate+0x94>
		lcd_clear();
 80057bc:	f7fb f8bc 	bl	8000938 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 80057c0:	4a07      	ldr	r2, [pc, #28]	; (80057e0 <lcdUpdate+0xa0>)
 80057c2:	2101      	movs	r1, #1
 80057c4:	2001      	movs	r0, #1
 80057c6:	f7fb f88b 	bl	80008e0 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 80057ca:	4a06      	ldr	r2, [pc, #24]	; (80057e4 <lcdUpdate+0xa4>)
 80057cc:	2101      	movs	r1, #1
 80057ce:	2002      	movs	r0, #2
 80057d0:	f7fb f886 	bl	80008e0 <lcd_print>
}
 80057d4:	bf00      	nop
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	0800dd30 	.word	0x0800dd30
 80057e0:	0800e65c 	.word	0x0800e65c
 80057e4:	0800e670 	.word	0x0800e670

080057e8 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d11d      	bne.n	8005834 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 80057f8:	4b62      	ldr	r3, [pc, #392]	; (8005984 <hataKoduLcdGoster+0x19c>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d105      	bne.n	800580c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8005800:	4a61      	ldr	r2, [pc, #388]	; (8005988 <hataKoduLcdGoster+0x1a0>)
 8005802:	2101      	movs	r1, #1
 8005804:	2001      	movs	r0, #1
 8005806:	f7fb f86b 	bl	80008e0 <lcd_print>
 800580a:	e008      	b.n	800581e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 800580c:	4b5d      	ldr	r3, [pc, #372]	; (8005984 <hataKoduLcdGoster+0x19c>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d104      	bne.n	800581e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005814:	4a5d      	ldr	r2, [pc, #372]	; (800598c <hataKoduLcdGoster+0x1a4>)
 8005816:	2101      	movs	r1, #1
 8005818:	2001      	movs	r0, #1
 800581a:	f7fb f861 	bl	80008e0 <lcd_print>
		}
		lcd_print(2, 1, "1");
 800581e:	4a5c      	ldr	r2, [pc, #368]	; (8005990 <hataKoduLcdGoster+0x1a8>)
 8005820:	2101      	movs	r1, #1
 8005822:	2002      	movs	r0, #2
 8005824:	f7fb f85c 	bl	80008e0 <lcd_print>
		lcd_print(2, 7, "          ");
 8005828:	4a5a      	ldr	r2, [pc, #360]	; (8005994 <hataKoduLcdGoster+0x1ac>)
 800582a:	2107      	movs	r1, #7
 800582c:	2002      	movs	r0, #2
 800582e:	f7fb f857 	bl	80008e0 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8005832:	e0a3      	b.n	800597c <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	2b02      	cmp	r3, #2
 8005838:	d11d      	bne.n	8005876 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 800583a:	4b52      	ldr	r3, [pc, #328]	; (8005984 <hataKoduLcdGoster+0x19c>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d105      	bne.n	800584e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8005842:	4a51      	ldr	r2, [pc, #324]	; (8005988 <hataKoduLcdGoster+0x1a0>)
 8005844:	2101      	movs	r1, #1
 8005846:	2001      	movs	r0, #1
 8005848:	f7fb f84a 	bl	80008e0 <lcd_print>
 800584c:	e008      	b.n	8005860 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 800584e:	4b4d      	ldr	r3, [pc, #308]	; (8005984 <hataKoduLcdGoster+0x19c>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d104      	bne.n	8005860 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005856:	4a4d      	ldr	r2, [pc, #308]	; (800598c <hataKoduLcdGoster+0x1a4>)
 8005858:	2101      	movs	r1, #1
 800585a:	2001      	movs	r0, #1
 800585c:	f7fb f840 	bl	80008e0 <lcd_print>
		lcd_print(2, 2, "2");
 8005860:	4a4d      	ldr	r2, [pc, #308]	; (8005998 <hataKoduLcdGoster+0x1b0>)
 8005862:	2102      	movs	r1, #2
 8005864:	2002      	movs	r0, #2
 8005866:	f7fb f83b 	bl	80008e0 <lcd_print>
		lcd_print(2, 7, "          ");
 800586a:	4a4a      	ldr	r2, [pc, #296]	; (8005994 <hataKoduLcdGoster+0x1ac>)
 800586c:	2107      	movs	r1, #7
 800586e:	2002      	movs	r0, #2
 8005870:	f7fb f836 	bl	80008e0 <lcd_print>
}
 8005874:	e082      	b.n	800597c <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	2b03      	cmp	r3, #3
 800587a:	d11d      	bne.n	80058b8 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 800587c:	4b41      	ldr	r3, [pc, #260]	; (8005984 <hataKoduLcdGoster+0x19c>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d105      	bne.n	8005890 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005884:	4a40      	ldr	r2, [pc, #256]	; (8005988 <hataKoduLcdGoster+0x1a0>)
 8005886:	2101      	movs	r1, #1
 8005888:	2001      	movs	r0, #1
 800588a:	f7fb f829 	bl	80008e0 <lcd_print>
 800588e:	e008      	b.n	80058a2 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005890:	4b3c      	ldr	r3, [pc, #240]	; (8005984 <hataKoduLcdGoster+0x19c>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d104      	bne.n	80058a2 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005898:	4a3c      	ldr	r2, [pc, #240]	; (800598c <hataKoduLcdGoster+0x1a4>)
 800589a:	2101      	movs	r1, #1
 800589c:	2001      	movs	r0, #1
 800589e:	f7fb f81f 	bl	80008e0 <lcd_print>
		lcd_print(2, 3, "3");
 80058a2:	4a3e      	ldr	r2, [pc, #248]	; (800599c <hataKoduLcdGoster+0x1b4>)
 80058a4:	2103      	movs	r1, #3
 80058a6:	2002      	movs	r0, #2
 80058a8:	f7fb f81a 	bl	80008e0 <lcd_print>
		lcd_print(2, 7, "          ");
 80058ac:	4a39      	ldr	r2, [pc, #228]	; (8005994 <hataKoduLcdGoster+0x1ac>)
 80058ae:	2107      	movs	r1, #7
 80058b0:	2002      	movs	r0, #2
 80058b2:	f7fb f815 	bl	80008e0 <lcd_print>
}
 80058b6:	e061      	b.n	800597c <hataKoduLcdGoster+0x194>
	} else if(x==4){
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d11d      	bne.n	80058fa <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 80058be:	4b31      	ldr	r3, [pc, #196]	; (8005984 <hataKoduLcdGoster+0x19c>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d105      	bne.n	80058d2 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 80058c6:	4a30      	ldr	r2, [pc, #192]	; (8005988 <hataKoduLcdGoster+0x1a0>)
 80058c8:	2101      	movs	r1, #1
 80058ca:	2001      	movs	r0, #1
 80058cc:	f7fb f808 	bl	80008e0 <lcd_print>
 80058d0:	e008      	b.n	80058e4 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 80058d2:	4b2c      	ldr	r3, [pc, #176]	; (8005984 <hataKoduLcdGoster+0x19c>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d104      	bne.n	80058e4 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058da:	4a2c      	ldr	r2, [pc, #176]	; (800598c <hataKoduLcdGoster+0x1a4>)
 80058dc:	2101      	movs	r1, #1
 80058de:	2001      	movs	r0, #1
 80058e0:	f7fa fffe 	bl	80008e0 <lcd_print>
		lcd_print(2, 4, "4");
 80058e4:	4a2e      	ldr	r2, [pc, #184]	; (80059a0 <hataKoduLcdGoster+0x1b8>)
 80058e6:	2104      	movs	r1, #4
 80058e8:	2002      	movs	r0, #2
 80058ea:	f7fa fff9 	bl	80008e0 <lcd_print>
		lcd_print(2, 7, "          ");
 80058ee:	4a29      	ldr	r2, [pc, #164]	; (8005994 <hataKoduLcdGoster+0x1ac>)
 80058f0:	2107      	movs	r1, #7
 80058f2:	2002      	movs	r0, #2
 80058f4:	f7fa fff4 	bl	80008e0 <lcd_print>
}
 80058f8:	e040      	b.n	800597c <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	2b05      	cmp	r3, #5
 80058fe:	d11d      	bne.n	800593c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8005900:	4b20      	ldr	r3, [pc, #128]	; (8005984 <hataKoduLcdGoster+0x19c>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d105      	bne.n	8005914 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8005908:	4a1f      	ldr	r2, [pc, #124]	; (8005988 <hataKoduLcdGoster+0x1a0>)
 800590a:	2101      	movs	r1, #1
 800590c:	2001      	movs	r0, #1
 800590e:	f7fa ffe7 	bl	80008e0 <lcd_print>
 8005912:	e008      	b.n	8005926 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8005914:	4b1b      	ldr	r3, [pc, #108]	; (8005984 <hataKoduLcdGoster+0x19c>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d104      	bne.n	8005926 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 800591c:	4a1b      	ldr	r2, [pc, #108]	; (800598c <hataKoduLcdGoster+0x1a4>)
 800591e:	2101      	movs	r1, #1
 8005920:	2001      	movs	r0, #1
 8005922:	f7fa ffdd 	bl	80008e0 <lcd_print>
		lcd_print(2, 5, "5");
 8005926:	4a1f      	ldr	r2, [pc, #124]	; (80059a4 <hataKoduLcdGoster+0x1bc>)
 8005928:	2105      	movs	r1, #5
 800592a:	2002      	movs	r0, #2
 800592c:	f7fa ffd8 	bl	80008e0 <lcd_print>
		lcd_print(2, 7, "          ");
 8005930:	4a18      	ldr	r2, [pc, #96]	; (8005994 <hataKoduLcdGoster+0x1ac>)
 8005932:	2107      	movs	r1, #7
 8005934:	2002      	movs	r0, #2
 8005936:	f7fa ffd3 	bl	80008e0 <lcd_print>
}
 800593a:	e01f      	b.n	800597c <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	2b06      	cmp	r3, #6
 8005940:	d11c      	bne.n	800597c <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8005942:	4b10      	ldr	r3, [pc, #64]	; (8005984 <hataKoduLcdGoster+0x19c>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d105      	bne.n	8005956 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 800594a:	4a0f      	ldr	r2, [pc, #60]	; (8005988 <hataKoduLcdGoster+0x1a0>)
 800594c:	2101      	movs	r1, #1
 800594e:	2001      	movs	r0, #1
 8005950:	f7fa ffc6 	bl	80008e0 <lcd_print>
 8005954:	e008      	b.n	8005968 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8005956:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <hataKoduLcdGoster+0x19c>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d104      	bne.n	8005968 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 800595e:	4a0b      	ldr	r2, [pc, #44]	; (800598c <hataKoduLcdGoster+0x1a4>)
 8005960:	2101      	movs	r1, #1
 8005962:	2001      	movs	r0, #1
 8005964:	f7fa ffbc 	bl	80008e0 <lcd_print>
		lcd_print(2, 6, "6");
 8005968:	4a0f      	ldr	r2, [pc, #60]	; (80059a8 <hataKoduLcdGoster+0x1c0>)
 800596a:	2106      	movs	r1, #6
 800596c:	2002      	movs	r0, #2
 800596e:	f7fa ffb7 	bl	80008e0 <lcd_print>
		lcd_print(2, 7, "          ");
 8005972:	4a08      	ldr	r2, [pc, #32]	; (8005994 <hataKoduLcdGoster+0x1ac>)
 8005974:	2107      	movs	r1, #7
 8005976:	2002      	movs	r0, #2
 8005978:	f7fa ffb2 	bl	80008e0 <lcd_print>
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20000c76 	.word	0x20000c76
 8005988:	0800e684 	.word	0x0800e684
 800598c:	0800e698 	.word	0x0800e698
 8005990:	0800dad8 	.word	0x0800dad8
 8005994:	0800e6ac 	.word	0x0800e6ac
 8005998:	0800dadc 	.word	0x0800dadc
 800599c:	0800dae0 	.word	0x0800dae0
 80059a0:	0800dae4 	.word	0x0800dae4
 80059a4:	0800dae8 	.word	0x0800dae8
 80059a8:	0800daec 	.word	0x0800daec

080059ac <convertAndSendData>:

void convertAndSendData() {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 80059b2:	4a14      	ldr	r2, [pc, #80]	; (8005a04 <convertAndSendData+0x58>)
 80059b4:	2101      	movs	r1, #1
 80059b6:	2001      	movs	r0, #1
 80059b8:	f7fa ff92 	bl	80008e0 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 80059bc:	4a12      	ldr	r2, [pc, #72]	; (8005a08 <convertAndSendData+0x5c>)
 80059be:	2101      	movs	r1, #1
 80059c0:	2002      	movs	r0, #2
 80059c2:	f7fa ff8d 	bl	80008e0 <lcd_print>
	for(int i=0; i<2; i++) {
 80059c6:	2300      	movs	r3, #0
 80059c8:	607b      	str	r3, [r7, #4]
 80059ca:	e00a      	b.n	80059e2 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 80059cc:	f002 fb3a 	bl	8008044 <mergeData>
 80059d0:	4603      	mov	r3, r0
 80059d2:	461a      	mov	r2, r3
 80059d4:	490d      	ldr	r1, [pc, #52]	; (8005a0c <convertAndSendData+0x60>)
 80059d6:	480e      	ldr	r0, [pc, #56]	; (8005a10 <convertAndSendData+0x64>)
 80059d8:	f7fa fcd4 	bl	8000384 <sendMachineData>
	for(int i=0; i<2; i++) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3301      	adds	r3, #1
 80059e0:	607b      	str	r3, [r7, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	ddf1      	ble.n	80059cc <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 80059e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059ec:	f003 fc36 	bl	800925c <HAL_Delay>
	lcd_clear();
 80059f0:	f7fa ffa2 	bl	8000938 <lcd_clear>
	HAL_Delay(500);
 80059f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059f8:	f003 fc30 	bl	800925c <HAL_Delay>
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	0800e6b8 	.word	0x0800e6b8
 8005a08:	0800e6c4 	.word	0x0800e6c4
 8005a0c:	20000c00 	.word	0x20000c00
 8005a10:	20000eb0 	.word	0x20000eb0

08005a14 <eepromKontrol>:

void eepromKontrol(int type) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af04      	add	r7, sp, #16
 8005a1a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8005a1c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005a20:	9302      	str	r3, [sp, #8]
 8005a22:	233f      	movs	r3, #63	; 0x3f
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	4b9c      	ldr	r3, [pc, #624]	; (8005c98 <eepromKontrol+0x284>)
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	233f      	movs	r3, #63	; 0x3f
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	21a0      	movs	r1, #160	; 0xa0
 8005a30:	489a      	ldr	r0, [pc, #616]	; (8005c9c <eepromKontrol+0x288>)
 8005a32:	f004 fd97 	bl	800a564 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8005a36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a3a:	f003 fc0f 	bl	800925c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005a3e:	4b96      	ldr	r3, [pc, #600]	; (8005c98 <eepromKontrol+0x284>)
 8005a40:	78da      	ldrb	r2, [r3, #3]
 8005a42:	4b97      	ldr	r3, [pc, #604]	; (8005ca0 <eepromKontrol+0x28c>)
 8005a44:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005a46:	4b94      	ldr	r3, [pc, #592]	; (8005c98 <eepromKontrol+0x284>)
 8005a48:	785a      	ldrb	r2, [r3, #1]
 8005a4a:	4b96      	ldr	r3, [pc, #600]	; (8005ca4 <eepromKontrol+0x290>)
 8005a4c:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005a4e:	4b92      	ldr	r3, [pc, #584]	; (8005c98 <eepromKontrol+0x284>)
 8005a50:	789a      	ldrb	r2, [r3, #2]
 8005a52:	4b95      	ldr	r3, [pc, #596]	; (8005ca8 <eepromKontrol+0x294>)
 8005a54:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005a56:	4b90      	ldr	r3, [pc, #576]	; (8005c98 <eepromKontrol+0x284>)
 8005a58:	791a      	ldrb	r2, [r3, #4]
 8005a5a:	4b94      	ldr	r3, [pc, #592]	; (8005cac <eepromKontrol+0x298>)
 8005a5c:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005a5e:	4b8e      	ldr	r3, [pc, #568]	; (8005c98 <eepromKontrol+0x284>)
 8005a60:	795a      	ldrb	r2, [r3, #5]
 8005a62:	4b93      	ldr	r3, [pc, #588]	; (8005cb0 <eepromKontrol+0x29c>)
 8005a64:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005a66:	4b8c      	ldr	r3, [pc, #560]	; (8005c98 <eepromKontrol+0x284>)
 8005a68:	799a      	ldrb	r2, [r3, #6]
 8005a6a:	4b92      	ldr	r3, [pc, #584]	; (8005cb4 <eepromKontrol+0x2a0>)
 8005a6c:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005a6e:	4b8a      	ldr	r3, [pc, #552]	; (8005c98 <eepromKontrol+0x284>)
 8005a70:	79da      	ldrb	r2, [r3, #7]
 8005a72:	4b91      	ldr	r3, [pc, #580]	; (8005cb8 <eepromKontrol+0x2a4>)
 8005a74:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005a76:	4b88      	ldr	r3, [pc, #544]	; (8005c98 <eepromKontrol+0x284>)
 8005a78:	7a1a      	ldrb	r2, [r3, #8]
 8005a7a:	4b90      	ldr	r3, [pc, #576]	; (8005cbc <eepromKontrol+0x2a8>)
 8005a7c:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005a7e:	4b86      	ldr	r3, [pc, #536]	; (8005c98 <eepromKontrol+0x284>)
 8005a80:	7a5a      	ldrb	r2, [r3, #9]
 8005a82:	4b8f      	ldr	r3, [pc, #572]	; (8005cc0 <eepromKontrol+0x2ac>)
 8005a84:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005a86:	4b84      	ldr	r3, [pc, #528]	; (8005c98 <eepromKontrol+0x284>)
 8005a88:	7a9a      	ldrb	r2, [r3, #10]
 8005a8a:	4b8e      	ldr	r3, [pc, #568]	; (8005cc4 <eepromKontrol+0x2b0>)
 8005a8c:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005a8e:	4b82      	ldr	r3, [pc, #520]	; (8005c98 <eepromKontrol+0x284>)
 8005a90:	7ada      	ldrb	r2, [r3, #11]
 8005a92:	4b8d      	ldr	r3, [pc, #564]	; (8005cc8 <eepromKontrol+0x2b4>)
 8005a94:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005a96:	4b80      	ldr	r3, [pc, #512]	; (8005c98 <eepromKontrol+0x284>)
 8005a98:	7b1a      	ldrb	r2, [r3, #12]
 8005a9a:	4b8c      	ldr	r3, [pc, #560]	; (8005ccc <eepromKontrol+0x2b8>)
 8005a9c:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005a9e:	4b7e      	ldr	r3, [pc, #504]	; (8005c98 <eepromKontrol+0x284>)
 8005aa0:	7b5a      	ldrb	r2, [r3, #13]
 8005aa2:	4b8b      	ldr	r3, [pc, #556]	; (8005cd0 <eepromKontrol+0x2bc>)
 8005aa4:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005aa6:	4b7c      	ldr	r3, [pc, #496]	; (8005c98 <eepromKontrol+0x284>)
 8005aa8:	7b9a      	ldrb	r2, [r3, #14]
 8005aaa:	4b8a      	ldr	r3, [pc, #552]	; (8005cd4 <eepromKontrol+0x2c0>)
 8005aac:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005aae:	4b7a      	ldr	r3, [pc, #488]	; (8005c98 <eepromKontrol+0x284>)
 8005ab0:	7bda      	ldrb	r2, [r3, #15]
 8005ab2:	4b89      	ldr	r3, [pc, #548]	; (8005cd8 <eepromKontrol+0x2c4>)
 8005ab4:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005ab6:	4b78      	ldr	r3, [pc, #480]	; (8005c98 <eepromKontrol+0x284>)
 8005ab8:	7c1a      	ldrb	r2, [r3, #16]
 8005aba:	4b88      	ldr	r3, [pc, #544]	; (8005cdc <eepromKontrol+0x2c8>)
 8005abc:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005abe:	4b76      	ldr	r3, [pc, #472]	; (8005c98 <eepromKontrol+0x284>)
 8005ac0:	7c5a      	ldrb	r2, [r3, #17]
 8005ac2:	4b87      	ldr	r3, [pc, #540]	; (8005ce0 <eepromKontrol+0x2cc>)
 8005ac4:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005ac6:	4b74      	ldr	r3, [pc, #464]	; (8005c98 <eepromKontrol+0x284>)
 8005ac8:	7c9a      	ldrb	r2, [r3, #18]
 8005aca:	4b86      	ldr	r3, [pc, #536]	; (8005ce4 <eepromKontrol+0x2d0>)
 8005acc:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005ace:	4b72      	ldr	r3, [pc, #456]	; (8005c98 <eepromKontrol+0x284>)
 8005ad0:	7cda      	ldrb	r2, [r3, #19]
 8005ad2:	4b85      	ldr	r3, [pc, #532]	; (8005ce8 <eepromKontrol+0x2d4>)
 8005ad4:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005ad6:	4b70      	ldr	r3, [pc, #448]	; (8005c98 <eepromKontrol+0x284>)
 8005ad8:	7d1a      	ldrb	r2, [r3, #20]
 8005ada:	4b84      	ldr	r3, [pc, #528]	; (8005cec <eepromKontrol+0x2d8>)
 8005adc:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005ade:	4b6e      	ldr	r3, [pc, #440]	; (8005c98 <eepromKontrol+0x284>)
 8005ae0:	7d5a      	ldrb	r2, [r3, #21]
 8005ae2:	4b83      	ldr	r3, [pc, #524]	; (8005cf0 <eepromKontrol+0x2dc>)
 8005ae4:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005ae6:	4b6c      	ldr	r3, [pc, #432]	; (8005c98 <eepromKontrol+0x284>)
 8005ae8:	7d9a      	ldrb	r2, [r3, #22]
 8005aea:	4b82      	ldr	r3, [pc, #520]	; (8005cf4 <eepromKontrol+0x2e0>)
 8005aec:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005aee:	4b6a      	ldr	r3, [pc, #424]	; (8005c98 <eepromKontrol+0x284>)
 8005af0:	7dda      	ldrb	r2, [r3, #23]
 8005af2:	4b81      	ldr	r3, [pc, #516]	; (8005cf8 <eepromKontrol+0x2e4>)
 8005af4:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005af6:	4b68      	ldr	r3, [pc, #416]	; (8005c98 <eepromKontrol+0x284>)
 8005af8:	7e1a      	ldrb	r2, [r3, #24]
 8005afa:	4b80      	ldr	r3, [pc, #512]	; (8005cfc <eepromKontrol+0x2e8>)
 8005afc:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005afe:	4b66      	ldr	r3, [pc, #408]	; (8005c98 <eepromKontrol+0x284>)
 8005b00:	7e5a      	ldrb	r2, [r3, #25]
 8005b02:	4b7f      	ldr	r3, [pc, #508]	; (8005d00 <eepromKontrol+0x2ec>)
 8005b04:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005b06:	4b64      	ldr	r3, [pc, #400]	; (8005c98 <eepromKontrol+0x284>)
 8005b08:	7e9a      	ldrb	r2, [r3, #26]
 8005b0a:	4b7e      	ldr	r3, [pc, #504]	; (8005d04 <eepromKontrol+0x2f0>)
 8005b0c:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005b0e:	4b62      	ldr	r3, [pc, #392]	; (8005c98 <eepromKontrol+0x284>)
 8005b10:	7eda      	ldrb	r2, [r3, #27]
 8005b12:	4b7d      	ldr	r3, [pc, #500]	; (8005d08 <eepromKontrol+0x2f4>)
 8005b14:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005b16:	4b60      	ldr	r3, [pc, #384]	; (8005c98 <eepromKontrol+0x284>)
 8005b18:	7f1a      	ldrb	r2, [r3, #28]
 8005b1a:	4b7c      	ldr	r3, [pc, #496]	; (8005d0c <eepromKontrol+0x2f8>)
 8005b1c:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005b1e:	4b5e      	ldr	r3, [pc, #376]	; (8005c98 <eepromKontrol+0x284>)
 8005b20:	7f5a      	ldrb	r2, [r3, #29]
 8005b22:	4b7b      	ldr	r3, [pc, #492]	; (8005d10 <eepromKontrol+0x2fc>)
 8005b24:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005b26:	4b5c      	ldr	r3, [pc, #368]	; (8005c98 <eepromKontrol+0x284>)
 8005b28:	7f9a      	ldrb	r2, [r3, #30]
 8005b2a:	4b7a      	ldr	r3, [pc, #488]	; (8005d14 <eepromKontrol+0x300>)
 8005b2c:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005b2e:	4b5a      	ldr	r3, [pc, #360]	; (8005c98 <eepromKontrol+0x284>)
 8005b30:	7fda      	ldrb	r2, [r3, #31]
 8005b32:	4b79      	ldr	r3, [pc, #484]	; (8005d18 <eepromKontrol+0x304>)
 8005b34:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005b36:	4b58      	ldr	r3, [pc, #352]	; (8005c98 <eepromKontrol+0x284>)
 8005b38:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005b3c:	4b77      	ldr	r3, [pc, #476]	; (8005d1c <eepromKontrol+0x308>)
 8005b3e:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005b40:	4b55      	ldr	r3, [pc, #340]	; (8005c98 <eepromKontrol+0x284>)
 8005b42:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005b46:	4b76      	ldr	r3, [pc, #472]	; (8005d20 <eepromKontrol+0x30c>)
 8005b48:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 8005b4a:	4b53      	ldr	r3, [pc, #332]	; (8005c98 <eepromKontrol+0x284>)
 8005b4c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005b50:	4b74      	ldr	r3, [pc, #464]	; (8005d24 <eepromKontrol+0x310>)
 8005b52:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005b54:	4b50      	ldr	r3, [pc, #320]	; (8005c98 <eepromKontrol+0x284>)
 8005b56:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005b5a:	4b73      	ldr	r3, [pc, #460]	; (8005d28 <eepromKontrol+0x314>)
 8005b5c:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005b5e:	4b4e      	ldr	r3, [pc, #312]	; (8005c98 <eepromKontrol+0x284>)
 8005b60:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005b64:	4b71      	ldr	r3, [pc, #452]	; (8005d2c <eepromKontrol+0x318>)
 8005b66:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005b68:	4b4b      	ldr	r3, [pc, #300]	; (8005c98 <eepromKontrol+0x284>)
 8005b6a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005b6e:	4b70      	ldr	r3, [pc, #448]	; (8005d30 <eepromKontrol+0x31c>)
 8005b70:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005b72:	4b49      	ldr	r3, [pc, #292]	; (8005c98 <eepromKontrol+0x284>)
 8005b74:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005b78:	4b6e      	ldr	r3, [pc, #440]	; (8005d34 <eepromKontrol+0x320>)
 8005b7a:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005b7c:	4b46      	ldr	r3, [pc, #280]	; (8005c98 <eepromKontrol+0x284>)
 8005b7e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005b82:	4b6d      	ldr	r3, [pc, #436]	; (8005d38 <eepromKontrol+0x324>)
 8005b84:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005b86:	4b44      	ldr	r3, [pc, #272]	; (8005c98 <eepromKontrol+0x284>)
 8005b88:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005b8c:	4b6b      	ldr	r3, [pc, #428]	; (8005d3c <eepromKontrol+0x328>)
 8005b8e:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005b90:	4b41      	ldr	r3, [pc, #260]	; (8005c98 <eepromKontrol+0x284>)
 8005b92:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005b96:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <eepromKontrol+0x32c>)
 8005b98:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005b9a:	4b3f      	ldr	r3, [pc, #252]	; (8005c98 <eepromKontrol+0x284>)
 8005b9c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005ba0:	4b68      	ldr	r3, [pc, #416]	; (8005d44 <eepromKontrol+0x330>)
 8005ba2:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005ba4:	4b3c      	ldr	r3, [pc, #240]	; (8005c98 <eepromKontrol+0x284>)
 8005ba6:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005baa:	4b67      	ldr	r3, [pc, #412]	; (8005d48 <eepromKontrol+0x334>)
 8005bac:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005bae:	4b3a      	ldr	r3, [pc, #232]	; (8005c98 <eepromKontrol+0x284>)
 8005bb0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005bb4:	4b65      	ldr	r3, [pc, #404]	; (8005d4c <eepromKontrol+0x338>)
 8005bb6:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005bb8:	4b37      	ldr	r3, [pc, #220]	; (8005c98 <eepromKontrol+0x284>)
 8005bba:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005bbe:	4b64      	ldr	r3, [pc, #400]	; (8005d50 <eepromKontrol+0x33c>)
 8005bc0:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005bc2:	4b35      	ldr	r3, [pc, #212]	; (8005c98 <eepromKontrol+0x284>)
 8005bc4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005bc8:	4b62      	ldr	r3, [pc, #392]	; (8005d54 <eepromKontrol+0x340>)
 8005bca:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005bcc:	4b32      	ldr	r3, [pc, #200]	; (8005c98 <eepromKontrol+0x284>)
 8005bce:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005bd2:	4b61      	ldr	r3, [pc, #388]	; (8005d58 <eepromKontrol+0x344>)
 8005bd4:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005bd6:	4b52      	ldr	r3, [pc, #328]	; (8005d20 <eepromKontrol+0x30c>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe fff4 	bl	8004bc8 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005be0:	4b4e      	ldr	r3, [pc, #312]	; (8005d1c <eepromKontrol+0x308>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b09      	cmp	r3, #9
 8005be6:	d902      	bls.n	8005bee <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005be8:	4b4c      	ldr	r3, [pc, #304]	; (8005d1c <eepromKontrol+0x308>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005bee:	4b4a      	ldr	r3, [pc, #296]	; (8005d18 <eepromKontrol+0x304>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b09      	cmp	r3, #9
 8005bf4:	d902      	bls.n	8005bfc <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005bf6:	4b48      	ldr	r3, [pc, #288]	; (8005d18 <eepromKontrol+0x304>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005bfc:	4b45      	ldr	r3, [pc, #276]	; (8005d14 <eepromKontrol+0x300>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b09      	cmp	r3, #9
 8005c02:	d902      	bls.n	8005c0a <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005c04:	4b43      	ldr	r3, [pc, #268]	; (8005d14 <eepromKontrol+0x300>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005c0a:	4b41      	ldr	r3, [pc, #260]	; (8005d10 <eepromKontrol+0x2fc>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b09      	cmp	r3, #9
 8005c10:	d902      	bls.n	8005c18 <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005c12:	4b3f      	ldr	r3, [pc, #252]	; (8005d10 <eepromKontrol+0x2fc>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005c18:	4b3c      	ldr	r3, [pc, #240]	; (8005d0c <eepromKontrol+0x2f8>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b09      	cmp	r3, #9
 8005c1e:	d902      	bls.n	8005c26 <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005c20:	4b3a      	ldr	r3, [pc, #232]	; (8005d0c <eepromKontrol+0x2f8>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005c26:	4b1f      	ldr	r3, [pc, #124]	; (8005ca4 <eepromKontrol+0x290>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d902      	bls.n	8005c34 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005c2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ca4 <eepromKontrol+0x290>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005c34:	4b1c      	ldr	r3, [pc, #112]	; (8005ca8 <eepromKontrol+0x294>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d902      	bls.n	8005c42 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005c3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ca8 <eepromKontrol+0x294>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005c42:	4b1a      	ldr	r3, [pc, #104]	; (8005cac <eepromKontrol+0x298>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d902      	bls.n	8005c50 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005c4a:	4b18      	ldr	r3, [pc, #96]	; (8005cac <eepromKontrol+0x298>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005c50:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <eepromKontrol+0x29c>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d902      	bls.n	8005c5e <eepromKontrol+0x24a>
	    altLimit=1;
 8005c58:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <eepromKontrol+0x29c>)
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005c5e:	4b15      	ldr	r3, [pc, #84]	; (8005cb4 <eepromKontrol+0x2a0>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d902      	bls.n	8005c6c <eepromKontrol+0x258>
	    basincSalteri=1;
 8005c66:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <eepromKontrol+0x2a0>)
 8005c68:	2201      	movs	r2, #1
 8005c6a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005c6c:	4b12      	ldr	r3, [pc, #72]	; (8005cb8 <eepromKontrol+0x2a4>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d902      	bls.n	8005c7a <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005c74:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <eepromKontrol+0x2a4>)
 8005c76:	2203      	movs	r2, #3
 8005c78:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005c7a:	4b2d      	ldr	r3, [pc, #180]	; (8005d30 <eepromKontrol+0x31c>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d902      	bls.n	8005c88 <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005c82:	4b2b      	ldr	r3, [pc, #172]	; (8005d30 <eepromKontrol+0x31c>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005c88:	4b0c      	ldr	r3, [pc, #48]	; (8005cbc <eepromKontrol+0x2a8>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d965      	bls.n	8005d5c <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005c90:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <eepromKontrol+0x2a8>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	e061      	b.n	8005d5c <eepromKontrol+0x348>
 8005c98:	20000b44 	.word	0x20000b44
 8005c9c:	20000e14 	.word	0x20000e14
 8005ca0:	20000bd5 	.word	0x20000bd5
 8005ca4:	20000c56 	.word	0x20000c56
 8005ca8:	20000c59 	.word	0x20000c59
 8005cac:	20000c5a 	.word	0x20000c5a
 8005cb0:	20000c5b 	.word	0x20000c5b
 8005cb4:	20000c5c 	.word	0x20000c5c
 8005cb8:	20000c5d 	.word	0x20000c5d
 8005cbc:	20000c5e 	.word	0x20000c5e
 8005cc0:	20000c6e 	.word	0x20000c6e
 8005cc4:	20000c5f 	.word	0x20000c5f
 8005cc8:	20000c6f 	.word	0x20000c6f
 8005ccc:	20000c60 	.word	0x20000c60
 8005cd0:	20000c70 	.word	0x20000c70
 8005cd4:	20000c63 	.word	0x20000c63
 8005cd8:	20000c64 	.word	0x20000c64
 8005cdc:	20000c65 	.word	0x20000c65
 8005ce0:	20000c66 	.word	0x20000c66
 8005ce4:	20000c67 	.word	0x20000c67
 8005ce8:	20000c68 	.word	0x20000c68
 8005cec:	20000c69 	.word	0x20000c69
 8005cf0:	20000c6a 	.word	0x20000c6a
 8005cf4:	20000c6b 	.word	0x20000c6b
 8005cf8:	20000c6c 	.word	0x20000c6c
 8005cfc:	20000c6d 	.word	0x20000c6d
 8005d00:	20000c71 	.word	0x20000c71
 8005d04:	20000c73 	.word	0x20000c73
 8005d08:	20000c51 	.word	0x20000c51
 8005d0c:	20000c52 	.word	0x20000c52
 8005d10:	20000c53 	.word	0x20000c53
 8005d14:	200009cc 	.word	0x200009cc
 8005d18:	200009cd 	.word	0x200009cd
 8005d1c:	20000c54 	.word	0x20000c54
 8005d20:	20000c76 	.word	0x20000c76
 8005d24:	20000c74 	.word	0x20000c74
 8005d28:	20000c62 	.word	0x20000c62
 8005d2c:	20000c75 	.word	0x20000c75
 8005d30:	20000c61 	.word	0x20000c61
 8005d34:	20000c77 	.word	0x20000c77
 8005d38:	20000c78 	.word	0x20000c78
 8005d3c:	20000c79 	.word	0x20000c79
 8005d40:	20000c7a 	.word	0x20000c7a
 8005d44:	20000c7b 	.word	0x20000c7b
 8005d48:	20000c7c 	.word	0x20000c7c
 8005d4c:	20000c7d 	.word	0x20000c7d
 8005d50:	20000c7e 	.word	0x20000c7e
 8005d54:	20000c7f 	.word	0x20000c7f
 8005d58:	20000c80 	.word	0x20000c80
	}

	if(kapi1AcSure>5) {
 8005d5c:	4b55      	ldr	r3, [pc, #340]	; (8005eb4 <eepromKontrol+0x4a0>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b05      	cmp	r3, #5
 8005d62:	d902      	bls.n	8005d6a <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005d64:	4b53      	ldr	r3, [pc, #332]	; (8005eb4 <eepromKontrol+0x4a0>)
 8005d66:	2205      	movs	r2, #5
 8005d68:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005d6a:	4b53      	ldr	r3, [pc, #332]	; (8005eb8 <eepromKontrol+0x4a4>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d902      	bls.n	8005d78 <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005d72:	4b51      	ldr	r3, [pc, #324]	; (8005eb8 <eepromKontrol+0x4a4>)
 8005d74:	2201      	movs	r2, #1
 8005d76:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005d78:	4b50      	ldr	r3, [pc, #320]	; (8005ebc <eepromKontrol+0x4a8>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b05      	cmp	r3, #5
 8005d7e:	d902      	bls.n	8005d86 <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005d80:	4b4e      	ldr	r3, [pc, #312]	; (8005ebc <eepromKontrol+0x4a8>)
 8005d82:	2205      	movs	r2, #5
 8005d84:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005d86:	4b4e      	ldr	r3, [pc, #312]	; (8005ec0 <eepromKontrol+0x4ac>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d902      	bls.n	8005d94 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005d8e:	4b4c      	ldr	r3, [pc, #304]	; (8005ec0 <eepromKontrol+0x4ac>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005d94:	4b4b      	ldr	r3, [pc, #300]	; (8005ec4 <eepromKontrol+0x4b0>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d902      	bls.n	8005da2 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005d9c:	4b49      	ldr	r3, [pc, #292]	; (8005ec4 <eepromKontrol+0x4b0>)
 8005d9e:	2202      	movs	r2, #2
 8005da0:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005da2:	4b49      	ldr	r3, [pc, #292]	; (8005ec8 <eepromKontrol+0x4b4>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b05      	cmp	r3, #5
 8005da8:	d902      	bls.n	8005db0 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005daa:	4b47      	ldr	r3, [pc, #284]	; (8005ec8 <eepromKontrol+0x4b4>)
 8005dac:	2205      	movs	r2, #5
 8005dae:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005db0:	4b46      	ldr	r3, [pc, #280]	; (8005ecc <eepromKontrol+0x4b8>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d902      	bls.n	8005dbe <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005db8:	4b44      	ldr	r3, [pc, #272]	; (8005ecc <eepromKontrol+0x4b8>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005dbe:	4b44      	ldr	r3, [pc, #272]	; (8005ed0 <eepromKontrol+0x4bc>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d902      	bls.n	8005dcc <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005dc6:	4b42      	ldr	r3, [pc, #264]	; (8005ed0 <eepromKontrol+0x4bc>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005dcc:	4b41      	ldr	r3, [pc, #260]	; (8005ed4 <eepromKontrol+0x4c0>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d902      	bls.n	8005dda <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005dd4:	4b3f      	ldr	r3, [pc, #252]	; (8005ed4 <eepromKontrol+0x4c0>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005dda:	4b3f      	ldr	r3, [pc, #252]	; (8005ed8 <eepromKontrol+0x4c4>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d902      	bls.n	8005de8 <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005de2:	4b3d      	ldr	r3, [pc, #244]	; (8005ed8 <eepromKontrol+0x4c4>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005de8:	4b3c      	ldr	r3, [pc, #240]	; (8005edc <eepromKontrol+0x4c8>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d902      	bls.n	8005df6 <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005df0:	4b3a      	ldr	r3, [pc, #232]	; (8005edc <eepromKontrol+0x4c8>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005df6:	4b3a      	ldr	r3, [pc, #232]	; (8005ee0 <eepromKontrol+0x4cc>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d902      	bls.n	8005e04 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005dfe:	4b38      	ldr	r3, [pc, #224]	; (8005ee0 <eepromKontrol+0x4cc>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005e04:	4b37      	ldr	r3, [pc, #220]	; (8005ee4 <eepromKontrol+0x4d0>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b05      	cmp	r3, #5
 8005e0a:	d902      	bls.n	8005e12 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005e0c:	4b35      	ldr	r3, [pc, #212]	; (8005ee4 <eepromKontrol+0x4d0>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005e12:	4b35      	ldr	r3, [pc, #212]	; (8005ee8 <eepromKontrol+0x4d4>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b05      	cmp	r3, #5
 8005e18:	d902      	bls.n	8005e20 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005e1a:	4b33      	ldr	r3, [pc, #204]	; (8005ee8 <eepromKontrol+0x4d4>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005e20:	4b32      	ldr	r3, [pc, #200]	; (8005eec <eepromKontrol+0x4d8>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b05      	cmp	r3, #5
 8005e26:	d902      	bls.n	8005e2e <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005e28:	4b30      	ldr	r3, [pc, #192]	; (8005eec <eepromKontrol+0x4d8>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005e2e:	4b30      	ldr	r3, [pc, #192]	; (8005ef0 <eepromKontrol+0x4dc>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b05      	cmp	r3, #5
 8005e34:	d902      	bls.n	8005e3c <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005e36:	4b2e      	ldr	r3, [pc, #184]	; (8005ef0 <eepromKontrol+0x4dc>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005e3c:	4b2d      	ldr	r3, [pc, #180]	; (8005ef4 <eepromKontrol+0x4e0>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2bb4      	cmp	r3, #180	; 0xb4
 8005e42:	d902      	bls.n	8005e4a <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005e44:	4b2b      	ldr	r3, [pc, #172]	; (8005ef4 <eepromKontrol+0x4e0>)
 8005e46:	223c      	movs	r2, #60	; 0x3c
 8005e48:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005e4a:	4b2b      	ldr	r3, [pc, #172]	; (8005ef8 <eepromKontrol+0x4e4>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d902      	bls.n	8005e58 <eepromKontrol+0x444>
	    buzzer=0;
 8005e52:	4b29      	ldr	r3, [pc, #164]	; (8005ef8 <eepromKontrol+0x4e4>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005e58:	4b28      	ldr	r3, [pc, #160]	; (8005efc <eepromKontrol+0x4e8>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d902      	bls.n	8005e66 <eepromKontrol+0x452>
	    demoMode=0;
 8005e60:	4b26      	ldr	r3, [pc, #152]	; (8005efc <eepromKontrol+0x4e8>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005e66:	4b26      	ldr	r3, [pc, #152]	; (8005f00 <eepromKontrol+0x4ec>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d902      	bls.n	8005e74 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005e6e:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <eepromKontrol+0x4ec>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005e74:	4b23      	ldr	r3, [pc, #140]	; (8005f04 <eepromKontrol+0x4f0>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d902      	bls.n	8005e82 <eepromKontrol+0x46e>
	    dilSecim=0;
 8005e7c:	4b21      	ldr	r3, [pc, #132]	; (8005f04 <eepromKontrol+0x4f0>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005e82:	4b21      	ldr	r3, [pc, #132]	; (8005f08 <eepromKontrol+0x4f4>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d902      	bls.n	8005e90 <eepromKontrol+0x47c>
		iotMode=0;
 8005e8a:	4b1f      	ldr	r3, [pc, #124]	; (8005f08 <eepromKontrol+0x4f4>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8005e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e94:	f003 f9e2 	bl	800925c <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 8005e98:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <eepromKontrol+0x4f4>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d104      	bne.n	8005eaa <eepromKontrol+0x496>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <eepromKontrol+0x496>
		convertAndSendData();
 8005ea6:	f7ff fd81 	bl	80059ac <convertAndSendData>
	}
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000c6e 	.word	0x20000c6e
 8005eb8:	20000c5f 	.word	0x20000c5f
 8005ebc:	20000c6f 	.word	0x20000c6f
 8005ec0:	20000c60 	.word	0x20000c60
 8005ec4:	20000c62 	.word	0x20000c62
 8005ec8:	20000c70 	.word	0x20000c70
 8005ecc:	20000c63 	.word	0x20000c63
 8005ed0:	20000c64 	.word	0x20000c64
 8005ed4:	20000c65 	.word	0x20000c65
 8005ed8:	20000c66 	.word	0x20000c66
 8005edc:	20000c67 	.word	0x20000c67
 8005ee0:	20000c68 	.word	0x20000c68
 8005ee4:	20000c69 	.word	0x20000c69
 8005ee8:	20000c6a 	.word	0x20000c6a
 8005eec:	20000c6b 	.word	0x20000c6b
 8005ef0:	20000c6c 	.word	0x20000c6c
 8005ef4:	20000c6d 	.word	0x20000c6d
 8005ef8:	20000c71 	.word	0x20000c71
 8005efc:	20000c73 	.word	0x20000c73
 8005f00:	20000c75 	.word	0x20000c75
 8005f04:	20000c76 	.word	0x20000c76
 8005f08:	20000c74 	.word	0x20000c74

08005f0c <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8005f0c:	b590      	push	{r4, r7, lr}
 8005f0e:	b089      	sub	sp, #36	; 0x24
 8005f10:	af04      	add	r7, sp, #16
 8005f12:	4603      	mov	r3, r0
 8005f14:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005f16:	4b26      	ldr	r3, [pc, #152]	; (8005fb0 <hata2EEPROM+0xa4>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	1e5a      	subs	r2, r3, #1
 8005f1c:	4b25      	ldr	r3, [pc, #148]	; (8005fb4 <hata2EEPROM+0xa8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4413      	add	r3, r2
 8005f22:	4a25      	ldr	r2, [pc, #148]	; (8005fb8 <hata2EEPROM+0xac>)
 8005f24:	5cd3      	ldrb	r3, [r2, r3]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8005f2a:	f000 f849 	bl	8005fc0 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8005f2e:	e000      	b.n	8005f32 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005f30:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	e012      	b.n	8005f5e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005f38:	4b1e      	ldr	r3, [pc, #120]	; (8005fb4 <hata2EEPROM+0xa8>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	4a1d      	ldr	r2, [pc, #116]	; (8005fb8 <hata2EEPROM+0xac>)
 8005f42:	5cd3      	ldrb	r3, [r2, r3]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d107      	bne.n	8005f58 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005f48:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <hata2EEPROM+0xa8>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	4919      	ldr	r1, [pc, #100]	; (8005fb8 <hata2EEPROM+0xac>)
 8005f52:	79fa      	ldrb	r2, [r7, #7]
 8005f54:	54ca      	strb	r2, [r1, r3]
					break;
 8005f56:	e007      	b.n	8005f68 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	4b14      	ldr	r3, [pc, #80]	; (8005fb0 <hata2EEPROM+0xa4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	dbe7      	blt.n	8005f38 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8005f68:	4b12      	ldr	r3, [pc, #72]	; (8005fb4 <hata2EEPROM+0xa8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	b299      	uxth	r1, r3
 8005f6e:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <hata2EEPROM+0xa4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	b298      	uxth	r0, r3
 8005f74:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <hata2EEPROM+0xa8>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a0f      	ldr	r2, [pc, #60]	; (8005fb8 <hata2EEPROM+0xac>)
 8005f7a:	4413      	add	r3, r2
 8005f7c:	4a0c      	ldr	r2, [pc, #48]	; (8005fb0 <hata2EEPROM+0xa4>)
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	b292      	uxth	r2, r2
 8005f82:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8005f86:	9402      	str	r4, [sp, #8]
 8005f88:	9201      	str	r2, [sp, #4]
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	460a      	mov	r2, r1
 8005f90:	21a0      	movs	r1, #160	; 0xa0
 8005f92:	480a      	ldr	r0, [pc, #40]	; (8005fbc <hata2EEPROM+0xb0>)
 8005f94:	f004 f9ec 	bl	800a370 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8005f98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f9c:	f003 f95e 	bl	800925c <HAL_Delay>
	eepromKontrol(1);
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	f7ff fd37 	bl	8005a14 <eepromKontrol>
}
 8005fa6:	bf00      	nop
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd90      	pop	{r4, r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000938 	.word	0x20000938
 8005fb4:	2000093c 	.word	0x2000093c
 8005fb8:	20000b44 	.word	0x20000b44
 8005fbc:	20000e14 	.word	0x20000e14

08005fc0 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	607b      	str	r3, [r7, #4]
 8005fca:	e009      	b.n	8005fe0 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8005fcc:	4a0a      	ldr	r2, [pc, #40]	; (8005ff8 <eepromDataFillWithEmpty+0x38>)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd4:	4a09      	ldr	r2, [pc, #36]	; (8005ffc <eepromDataFillWithEmpty+0x3c>)
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	607b      	str	r3, [r7, #4]
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <eepromDataFillWithEmpty+0x40>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	dbf0      	blt.n	8005fcc <eepromDataFillWithEmpty+0xc>
	}
}
 8005fea:	bf00      	nop
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bc80      	pop	{r7}
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	20000910 	.word	0x20000910
 8005ffc:	20000b44 	.word	0x20000b44
 8006000:	20000938 	.word	0x20000938

08006004 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
	timer1=millis;
 8006008:	4b47      	ldr	r3, [pc, #284]	; (8006128 <bekle+0x124>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a47      	ldr	r2, [pc, #284]	; (800612c <bekle+0x128>)
 800600e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006010:	e002      	b.n	8006018 <bekle+0x14>
    	butonKontrol = 1;
 8006012:	4b47      	ldr	r3, [pc, #284]	; (8006130 <bekle+0x12c>)
 8006014:	2201      	movs	r2, #1
 8006016:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006018:	2101      	movs	r1, #1
 800601a:	4846      	ldr	r0, [pc, #280]	; (8006134 <bekle+0x130>)
 800601c:	f003 feee 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006020:	4603      	mov	r3, r0
 8006022:	2b01      	cmp	r3, #1
 8006024:	d109      	bne.n	800603a <bekle+0x36>
 8006026:	4b40      	ldr	r3, [pc, #256]	; (8006128 <bekle+0x124>)
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	4b40      	ldr	r3, [pc, #256]	; (800612c <bekle+0x128>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d0ef      	beq.n	8006012 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006032:	e002      	b.n	800603a <bekle+0x36>
    	butonKontrol = 1;
 8006034:	4b3e      	ldr	r3, [pc, #248]	; (8006130 <bekle+0x12c>)
 8006036:	2201      	movs	r2, #1
 8006038:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800603a:	2108      	movs	r1, #8
 800603c:	483e      	ldr	r0, [pc, #248]	; (8006138 <bekle+0x134>)
 800603e:	f003 fedd 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006042:	4603      	mov	r3, r0
 8006044:	2b01      	cmp	r3, #1
 8006046:	d109      	bne.n	800605c <bekle+0x58>
 8006048:	4b37      	ldr	r3, [pc, #220]	; (8006128 <bekle+0x124>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	4b37      	ldr	r3, [pc, #220]	; (800612c <bekle+0x128>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d0ef      	beq.n	8006034 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006054:	e002      	b.n	800605c <bekle+0x58>
    	butonKontrol = 1;
 8006056:	4b36      	ldr	r3, [pc, #216]	; (8006130 <bekle+0x12c>)
 8006058:	2201      	movs	r2, #1
 800605a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800605c:	2102      	movs	r1, #2
 800605e:	4835      	ldr	r0, [pc, #212]	; (8006134 <bekle+0x130>)
 8006060:	f003 fecc 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006064:	4603      	mov	r3, r0
 8006066:	2b01      	cmp	r3, #1
 8006068:	d109      	bne.n	800607e <bekle+0x7a>
 800606a:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <bekle+0x124>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4b2f      	ldr	r3, [pc, #188]	; (800612c <bekle+0x128>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d0ef      	beq.n	8006056 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006076:	e002      	b.n	800607e <bekle+0x7a>
    	butonKontrol = 1;
 8006078:	4b2d      	ldr	r3, [pc, #180]	; (8006130 <bekle+0x12c>)
 800607a:	2201      	movs	r2, #1
 800607c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800607e:	2104      	movs	r1, #4
 8006080:	482c      	ldr	r0, [pc, #176]	; (8006134 <bekle+0x130>)
 8006082:	f003 febb 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006086:	4603      	mov	r3, r0
 8006088:	2b01      	cmp	r3, #1
 800608a:	d109      	bne.n	80060a0 <bekle+0x9c>
 800608c:	4b26      	ldr	r3, [pc, #152]	; (8006128 <bekle+0x124>)
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	4b26      	ldr	r3, [pc, #152]	; (800612c <bekle+0x128>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d0ef      	beq.n	8006078 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006098:	e002      	b.n	80060a0 <bekle+0x9c>
    	butonKontrol = 1;
 800609a:	4b25      	ldr	r3, [pc, #148]	; (8006130 <bekle+0x12c>)
 800609c:	2201      	movs	r2, #1
 800609e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060a0:	2108      	movs	r1, #8
 80060a2:	4824      	ldr	r0, [pc, #144]	; (8006134 <bekle+0x130>)
 80060a4:	f003 feaa 	bl	8009dfc <HAL_GPIO_ReadPin>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d109      	bne.n	80060c2 <bekle+0xbe>
 80060ae:	4b1e      	ldr	r3, [pc, #120]	; (8006128 <bekle+0x124>)
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b1e      	ldr	r3, [pc, #120]	; (800612c <bekle+0x128>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d0ef      	beq.n	800609a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060ba:	e002      	b.n	80060c2 <bekle+0xbe>
    	butonKontrol = 1;
 80060bc:	4b1c      	ldr	r3, [pc, #112]	; (8006130 <bekle+0x12c>)
 80060be:	2201      	movs	r2, #1
 80060c0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060c2:	2180      	movs	r1, #128	; 0x80
 80060c4:	481c      	ldr	r0, [pc, #112]	; (8006138 <bekle+0x134>)
 80060c6:	f003 fe99 	bl	8009dfc <HAL_GPIO_ReadPin>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d109      	bne.n	80060e4 <bekle+0xe0>
 80060d0:	4b15      	ldr	r3, [pc, #84]	; (8006128 <bekle+0x124>)
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	4b15      	ldr	r3, [pc, #84]	; (800612c <bekle+0x128>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d0ef      	beq.n	80060bc <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060dc:	e002      	b.n	80060e4 <bekle+0xe0>
    	butonKontrol = 1;
 80060de:	4b14      	ldr	r3, [pc, #80]	; (8006130 <bekle+0x12c>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060e8:	4813      	ldr	r0, [pc, #76]	; (8006138 <bekle+0x134>)
 80060ea:	f003 fe87 	bl	8009dfc <HAL_GPIO_ReadPin>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <bekle+0x104>
 80060f4:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <bekle+0x124>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <bekle+0x128>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d0ee      	beq.n	80060de <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006100:	e002      	b.n	8006108 <bekle+0x104>
    	butonKontrol = 1;
 8006102:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <bekle+0x12c>)
 8006104:	2201      	movs	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800610c:	480a      	ldr	r0, [pc, #40]	; (8006138 <bekle+0x134>)
 800610e:	f003 fe75 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d105      	bne.n	8006124 <bekle+0x120>
 8006118:	4b03      	ldr	r3, [pc, #12]	; (8006128 <bekle+0x124>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	4b03      	ldr	r3, [pc, #12]	; (800612c <bekle+0x128>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	429a      	cmp	r2, r3
 8006122:	d0ee      	beq.n	8006102 <bekle+0xfe>
    }

}
 8006124:	bf00      	nop
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000be0 	.word	0x20000be0
 800612c:	20000be8 	.word	0x20000be8
 8006130:	20000c84 	.word	0x20000c84
 8006134:	40010800 	.word	0x40010800
 8006138:	40011000 	.word	0x40011000

0800613c <i2cTest>:

void i2cTest() {
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8006142:	463b      	mov	r3, r7
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	605a      	str	r2, [r3, #4]
 800614a:	609a      	str	r2, [r3, #8]
 800614c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 800614e:	4b50      	ldr	r3, [pc, #320]	; (8006290 <i2cTest+0x154>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	4b4e      	ldr	r3, [pc, #312]	; (8006290 <i2cTest+0x154>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0201 	bic.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 800615e:	484c      	ldr	r0, [pc, #304]	; (8006290 <i2cTest+0x154>)
 8006160:	f003 ffd8 	bl	800a114 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006164:	23c0      	movs	r3, #192	; 0xc0
 8006166:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8006168:	2311      	movs	r3, #17
 800616a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800616c:	2301      	movs	r3, #1
 800616e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006170:	2303      	movs	r3, #3
 8006172:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8006174:	463b      	mov	r3, r7
 8006176:	4619      	mov	r1, r3
 8006178:	4846      	ldr	r0, [pc, #280]	; (8006294 <i2cTest+0x158>)
 800617a:	f003 fbdf 	bl	800993c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800617e:	2201      	movs	r2, #1
 8006180:	2140      	movs	r1, #64	; 0x40
 8006182:	4844      	ldr	r0, [pc, #272]	; (8006294 <i2cTest+0x158>)
 8006184:	f003 fe51 	bl	8009e2a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006188:	2201      	movs	r2, #1
 800618a:	2180      	movs	r1, #128	; 0x80
 800618c:	4841      	ldr	r0, [pc, #260]	; (8006294 <i2cTest+0x158>)
 800618e:	f003 fe4c 	bl	8009e2a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8006192:	200a      	movs	r0, #10
 8006194:	f003 f862 	bl	800925c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006198:	bf00      	nop
 800619a:	2140      	movs	r1, #64	; 0x40
 800619c:	483d      	ldr	r0, [pc, #244]	; (8006294 <i2cTest+0x158>)
 800619e:	f003 fe2d 	bl	8009dfc <HAL_GPIO_ReadPin>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d006      	beq.n	80061b6 <i2cTest+0x7a>
 80061a8:	2180      	movs	r1, #128	; 0x80
 80061aa:	483a      	ldr	r0, [pc, #232]	; (8006294 <i2cTest+0x158>)
 80061ac:	f003 fe26 	bl	8009dfc <HAL_GPIO_ReadPin>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d1f1      	bne.n	800619a <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80061b6:	2200      	movs	r2, #0
 80061b8:	2180      	movs	r1, #128	; 0x80
 80061ba:	4836      	ldr	r0, [pc, #216]	; (8006294 <i2cTest+0x158>)
 80061bc:	f003 fe35 	bl	8009e2a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 80061c0:	200a      	movs	r0, #10
 80061c2:	f003 f84b 	bl	800925c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 80061c6:	bf00      	nop
 80061c8:	2180      	movs	r1, #128	; 0x80
 80061ca:	4832      	ldr	r0, [pc, #200]	; (8006294 <i2cTest+0x158>)
 80061cc:	f003 fe16 	bl	8009dfc <HAL_GPIO_ReadPin>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d0f8      	beq.n	80061c8 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80061d6:	2200      	movs	r2, #0
 80061d8:	2140      	movs	r1, #64	; 0x40
 80061da:	482e      	ldr	r0, [pc, #184]	; (8006294 <i2cTest+0x158>)
 80061dc:	f003 fe25 	bl	8009e2a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80061e0:	200a      	movs	r0, #10
 80061e2:	f003 f83b 	bl	800925c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80061e6:	bf00      	nop
 80061e8:	2140      	movs	r1, #64	; 0x40
 80061ea:	482a      	ldr	r0, [pc, #168]	; (8006294 <i2cTest+0x158>)
 80061ec:	f003 fe06 	bl	8009dfc <HAL_GPIO_ReadPin>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d0f8      	beq.n	80061e8 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80061f6:	2201      	movs	r2, #1
 80061f8:	2140      	movs	r1, #64	; 0x40
 80061fa:	4826      	ldr	r0, [pc, #152]	; (8006294 <i2cTest+0x158>)
 80061fc:	f003 fe15 	bl	8009e2a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006200:	200a      	movs	r0, #10
 8006202:	f003 f82b 	bl	800925c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8006206:	bf00      	nop
 8006208:	2140      	movs	r1, #64	; 0x40
 800620a:	4822      	ldr	r0, [pc, #136]	; (8006294 <i2cTest+0x158>)
 800620c:	f003 fdf6 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006210:	4603      	mov	r3, r0
 8006212:	2b01      	cmp	r3, #1
 8006214:	d1f8      	bne.n	8006208 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006216:	2201      	movs	r2, #1
 8006218:	2180      	movs	r1, #128	; 0x80
 800621a:	481e      	ldr	r0, [pc, #120]	; (8006294 <i2cTest+0x158>)
 800621c:	f003 fe05 	bl	8009e2a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006220:	200a      	movs	r0, #10
 8006222:	f003 f81b 	bl	800925c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006226:	bf00      	nop
 8006228:	2180      	movs	r1, #128	; 0x80
 800622a:	481a      	ldr	r0, [pc, #104]	; (8006294 <i2cTest+0x158>)
 800622c:	f003 fde6 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006230:	4603      	mov	r3, r0
 8006232:	2b01      	cmp	r3, #1
 8006234:	d1f8      	bne.n	8006228 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006236:	23c0      	movs	r3, #192	; 0xc0
 8006238:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800623a:	2312      	movs	r3, #18
 800623c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800623e:	2301      	movs	r3, #1
 8006240:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006242:	2303      	movs	r3, #3
 8006244:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8006246:	463b      	mov	r3, r7
 8006248:	4619      	mov	r1, r3
 800624a:	4812      	ldr	r0, [pc, #72]	; (8006294 <i2cTest+0x158>)
 800624c:	f003 fb76 	bl	800993c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8006250:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <i2cTest+0x154>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <i2cTest+0x154>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800625e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <i2cTest+0x154>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4b0a      	ldr	r3, [pc, #40]	; (8006290 <i2cTest+0x154>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800626e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8006270:	4b07      	ldr	r3, [pc, #28]	; (8006290 <i2cTest+0x154>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	4b06      	ldr	r3, [pc, #24]	; (8006290 <i2cTest+0x154>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8006280:	4803      	ldr	r0, [pc, #12]	; (8006290 <i2cTest+0x154>)
 8006282:	f003 fe03 	bl	8009e8c <HAL_I2C_Init>
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20000e14 	.word	0x20000e14
 8006294:	40010c00 	.word	0x40010c00

08006298 <checkLCDBacklight>:

void checkLCDBacklight() {
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 800629c:	4b0b      	ldr	r3, [pc, #44]	; (80062cc <checkLCDBacklight+0x34>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <checkLCDBacklight+0x38>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	1ad2      	subs	r2, r2, r3
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <checkLCDBacklight+0x3c>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	4619      	mov	r1, r3
 80062ac:	460b      	mov	r3, r1
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d303      	bcc.n	80062c0 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 80062b8:	2000      	movs	r0, #0
 80062ba:	f7fa fb5d 	bl	8000978 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80062be:	e002      	b.n	80062c6 <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 80062c0:	2001      	movs	r0, #1
 80062c2:	f7fa fb59 	bl	8000978 <lcd_backlight>
}
 80062c6:	bf00      	nop
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000be0 	.word	0x20000be0
 80062d0:	20000bfc 	.word	0x20000bfc
 80062d4:	20000940 	.word	0x20000940

080062d8 <checkBasincSalteri>:

void checkBasincSalteri() {
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80062dc:	4b13      	ldr	r3, [pc, #76]	; (800632c <checkBasincSalteri+0x54>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d102      	bne.n	80062ea <checkBasincSalteri+0x12>
		basincVar=1;
 80062e4:	4b12      	ldr	r3, [pc, #72]	; (8006330 <checkBasincSalteri+0x58>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80062ea:	4b10      	ldr	r3, [pc, #64]	; (800632c <checkBasincSalteri+0x54>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d119      	bne.n	8006326 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80062f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062f6:	480f      	ldr	r0, [pc, #60]	; (8006334 <checkBasincSalteri+0x5c>)
 80062f8:	f003 fd80 	bl	8009dfc <HAL_GPIO_ReadPin>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8006302:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <checkBasincSalteri+0x60>)
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	4b0d      	ldr	r3, [pc, #52]	; (800633c <checkBasincSalteri+0x64>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d90a      	bls.n	8006326 <checkBasincSalteri+0x4e>
				basincVar=1;
 8006310:	4b07      	ldr	r3, [pc, #28]	; (8006330 <checkBasincSalteri+0x58>)
 8006312:	2201      	movs	r2, #1
 8006314:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8006316:	e006      	b.n	8006326 <checkBasincSalteri+0x4e>
			timer5=millis;
 8006318:	4b07      	ldr	r3, [pc, #28]	; (8006338 <checkBasincSalteri+0x60>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a07      	ldr	r2, [pc, #28]	; (800633c <checkBasincSalteri+0x64>)
 800631e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8006320:	4b03      	ldr	r3, [pc, #12]	; (8006330 <checkBasincSalteri+0x58>)
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
}
 8006326:	bf00      	nop
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000c5c 	.word	0x20000c5c
 8006330:	20000c58 	.word	0x20000c58
 8006334:	40011000 	.word	0x40011000
 8006338:	20000be0 	.word	0x20000be0
 800633c:	20000bf8 	.word	0x20000bf8

08006340 <checkBasGonder>:

void checkBasGonder() {
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006344:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <checkBasGonder+0x74>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d10b      	bne.n	8006364 <checkBasGonder+0x24>
 800634c:	4b1a      	ldr	r3, [pc, #104]	; (80063b8 <checkBasGonder+0x78>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d007      	beq.n	8006364 <checkBasGonder+0x24>
 8006354:	4b19      	ldr	r3, [pc, #100]	; (80063bc <checkBasGonder+0x7c>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d103      	bne.n	8006364 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 800635c:	4b18      	ldr	r3, [pc, #96]	; (80063c0 <checkBasGonder+0x80>)
 800635e:	2201      	movs	r2, #1
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	e009      	b.n	8006378 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8006364:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <checkBasGonder+0x78>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	f083 0301 	eor.w	r3, r3, #1
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8006372:	4b13      	ldr	r3, [pc, #76]	; (80063c0 <checkBasGonder+0x80>)
 8006374:	2200      	movs	r2, #0
 8006376:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006378:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <checkBasGonder+0x74>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d10b      	bne.n	8006398 <checkBasGonder+0x58>
 8006380:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <checkBasGonder+0x84>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <checkBasGonder+0x58>
 8006388:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <checkBasGonder+0x7c>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d103      	bne.n	8006398 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8006390:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <checkBasGonder+0x88>)
 8006392:	2201      	movs	r2, #1
 8006394:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8006396:	e009      	b.n	80063ac <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8006398:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <checkBasGonder+0x84>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	f083 0301 	eor.w	r3, r3, #1
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80063a6:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <checkBasGonder+0x88>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	701a      	strb	r2, [r3, #0]
}
 80063ac:	bf00      	nop
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr
 80063b4:	20000c56 	.word	0x20000c56
 80063b8:	20000c8a 	.word	0x20000c8a
 80063bc:	20000c64 	.word	0x20000c64
 80063c0:	20000c91 	.word	0x20000c91
 80063c4:	20000c8d 	.word	0x20000c8d
 80063c8:	20000c92 	.word	0x20000c92

080063cc <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80063d0:	4b24      	ldr	r3, [pc, #144]	; (8006464 <checkKapiSecimleri+0x98>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d102      	bne.n	80063de <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80063d8:	4b23      	ldr	r3, [pc, #140]	; (8006468 <checkKapiSecimleri+0x9c>)
 80063da:	2201      	movs	r2, #1
 80063dc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80063de:	4b21      	ldr	r3, [pc, #132]	; (8006464 <checkKapiSecimleri+0x98>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d10e      	bne.n	8006404 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80063e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063ea:	4820      	ldr	r0, [pc, #128]	; (800646c <checkKapiSecimleri+0xa0>)
 80063ec:	f003 fd06 	bl	8009dfc <HAL_GPIO_ReadPin>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d103      	bne.n	80063fe <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80063f6:	4b1c      	ldr	r3, [pc, #112]	; (8006468 <checkKapiSecimleri+0x9c>)
 80063f8:	2201      	movs	r2, #1
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	e002      	b.n	8006404 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80063fe:	4b1a      	ldr	r3, [pc, #104]	; (8006468 <checkKapiSecimleri+0x9c>)
 8006400:	2200      	movs	r2, #0
 8006402:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8006404:	4b17      	ldr	r3, [pc, #92]	; (8006464 <checkKapiSecimleri+0x98>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b02      	cmp	r3, #2
 800640a:	d10e      	bne.n	800642a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 800640c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006410:	4816      	ldr	r0, [pc, #88]	; (800646c <checkKapiSecimleri+0xa0>)
 8006412:	f003 fcf3 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d103      	bne.n	8006424 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 800641c:	4b12      	ldr	r3, [pc, #72]	; (8006468 <checkKapiSecimleri+0x9c>)
 800641e:	2201      	movs	r2, #1
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	e002      	b.n	800642a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8006424:	4b10      	ldr	r3, [pc, #64]	; (8006468 <checkKapiSecimleri+0x9c>)
 8006426:	2200      	movs	r2, #0
 8006428:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800642a:	4b0e      	ldr	r3, [pc, #56]	; (8006464 <checkKapiSecimleri+0x98>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b03      	cmp	r3, #3
 8006430:	d116      	bne.n	8006460 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8006432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006436:	480d      	ldr	r0, [pc, #52]	; (800646c <checkKapiSecimleri+0xa0>)
 8006438:	f003 fce0 	bl	8009dfc <HAL_GPIO_ReadPin>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <checkKapiSecimleri+0x8e>
 8006442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006446:	4809      	ldr	r0, [pc, #36]	; (800646c <checkKapiSecimleri+0xa0>)
 8006448:	f003 fcd8 	bl	8009dfc <HAL_GPIO_ReadPin>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d103      	bne.n	800645a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8006452:	4b05      	ldr	r3, [pc, #20]	; (8006468 <checkKapiSecimleri+0x9c>)
 8006454:	2201      	movs	r2, #1
 8006456:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8006458:	e002      	b.n	8006460 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800645a:	4b03      	ldr	r3, [pc, #12]	; (8006468 <checkKapiSecimleri+0x9c>)
 800645c:	2200      	movs	r2, #0
 800645e:	701a      	strb	r2, [r3, #0]
}
 8006460:	bf00      	nop
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20000c5d 	.word	0x20000c5d
 8006468:	20000ca8 	.word	0x20000ca8
 800646c:	40010800 	.word	0x40010800

08006470 <checkAktifCalisma>:

void checkAktifCalisma() {
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8006474:	4b62      	ldr	r3, [pc, #392]	; (8006600 <checkAktifCalisma+0x190>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f041 8332 	bne.w	8007ae2 <checkAktifCalisma+0x1672>
 800647e:	4b61      	ldr	r3, [pc, #388]	; (8006604 <checkAktifCalisma+0x194>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	f041 832d 	bne.w	8007ae2 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8006488:	4b5f      	ldr	r3, [pc, #380]	; (8006608 <checkAktifCalisma+0x198>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d11a      	bne.n	80064c6 <checkAktifCalisma+0x56>
 8006490:	4b5e      	ldr	r3, [pc, #376]	; (800660c <checkAktifCalisma+0x19c>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d116      	bne.n	80064c6 <checkAktifCalisma+0x56>
 8006498:	4b5d      	ldr	r3, [pc, #372]	; (8006610 <checkAktifCalisma+0x1a0>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <checkAktifCalisma+0x46>
 80064a0:	4b5c      	ldr	r3, [pc, #368]	; (8006614 <checkAktifCalisma+0x1a4>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	f083 0301 	eor.w	r3, r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <checkAktifCalisma+0x46>
 80064ae:	4b5a      	ldr	r3, [pc, #360]	; (8006618 <checkAktifCalisma+0x1a8>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d007      	beq.n	80064c6 <checkAktifCalisma+0x56>
 80064b6:	4b59      	ldr	r3, [pc, #356]	; (800661c <checkAktifCalisma+0x1ac>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d018      	beq.n	80064f0 <checkAktifCalisma+0x80>
 80064be:	4b58      	ldr	r3, [pc, #352]	; (8006620 <checkAktifCalisma+0x1b0>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d114      	bne.n	80064f0 <checkAktifCalisma+0x80>
 80064c6:	4b57      	ldr	r3, [pc, #348]	; (8006624 <checkAktifCalisma+0x1b4>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d010      	beq.n	80064f0 <checkAktifCalisma+0x80>
 80064ce:	4b56      	ldr	r3, [pc, #344]	; (8006628 <checkAktifCalisma+0x1b8>)
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00c      	beq.n	80064f0 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80064d6:	2201      	movs	r2, #1
 80064d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064dc:	4853      	ldr	r0, [pc, #332]	; (800662c <checkAktifCalisma+0x1bc>)
 80064de:	f003 fca4 	bl	8009e2a <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 80064e2:	4b53      	ldr	r3, [pc, #332]	; (8006630 <checkAktifCalisma+0x1c0>)
 80064e4:	2201      	movs	r2, #1
 80064e6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80064e8:	4b52      	ldr	r3, [pc, #328]	; (8006634 <checkAktifCalisma+0x1c4>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	e008      	b.n	8006502 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80064f0:	2200      	movs	r2, #0
 80064f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064f6:	484d      	ldr	r0, [pc, #308]	; (800662c <checkAktifCalisma+0x1bc>)
 80064f8:	f003 fc97 	bl	8009e2a <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80064fc:	4b4c      	ldr	r3, [pc, #304]	; (8006630 <checkAktifCalisma+0x1c0>)
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8006502:	4b40      	ldr	r3, [pc, #256]	; (8006604 <checkAktifCalisma+0x194>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d160      	bne.n	80065cc <checkAktifCalisma+0x15c>
 800650a:	4b46      	ldr	r3, [pc, #280]	; (8006624 <checkAktifCalisma+0x1b4>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d05c      	beq.n	80065cc <checkAktifCalisma+0x15c>
 8006512:	4b45      	ldr	r3, [pc, #276]	; (8006628 <checkAktifCalisma+0x1b8>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d058      	beq.n	80065cc <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800651a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800651e:	4843      	ldr	r0, [pc, #268]	; (800662c <checkAktifCalisma+0x1bc>)
 8006520:	f003 fc6c 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <checkAktifCalisma+0xc2>
 800652a:	4b43      	ldr	r3, [pc, #268]	; (8006638 <checkAktifCalisma+0x1c8>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d04c      	beq.n	80065cc <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006532:	2102      	movs	r1, #2
 8006534:	4841      	ldr	r0, [pc, #260]	; (800663c <checkAktifCalisma+0x1cc>)
 8006536:	f003 fc61 	bl	8009dfc <HAL_GPIO_ReadPin>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d145      	bne.n	80065cc <checkAktifCalisma+0x15c>
				&& (basincVar)
 8006540:	4b3f      	ldr	r3, [pc, #252]	; (8006640 <checkAktifCalisma+0x1d0>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d041      	beq.n	80065cc <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8006548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800654c:	4837      	ldr	r0, [pc, #220]	; (800662c <checkAktifCalisma+0x1bc>)
 800654e:	f003 fc55 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006552:	4603      	mov	r3, r0
 8006554:	2b01      	cmp	r3, #1
 8006556:	d10e      	bne.n	8006576 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800655c:	4833      	ldr	r0, [pc, #204]	; (800662c <checkAktifCalisma+0x1bc>)
 800655e:	f003 fc4d 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006562:	4603      	mov	r3, r0
 8006564:	2b01      	cmp	r3, #1
 8006566:	d106      	bne.n	8006576 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8006568:	2140      	movs	r1, #64	; 0x40
 800656a:	4834      	ldr	r0, [pc, #208]	; (800663c <checkAktifCalisma+0x1cc>)
 800656c:	f003 fc46 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006570:	4603      	mov	r3, r0
 8006572:	2b01      	cmp	r3, #1
 8006574:	d003      	beq.n	800657e <checkAktifCalisma+0x10e>
 8006576:	4b24      	ldr	r3, [pc, #144]	; (8006608 <checkAktifCalisma+0x198>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d026      	beq.n	80065cc <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 800657e:	4b24      	ldr	r3, [pc, #144]	; (8006610 <checkAktifCalisma+0x1a0>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	f083 0301 	eor.w	r3, r3, #1
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01f      	beq.n	80065cc <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 800658c:	4b1f      	ldr	r3, [pc, #124]	; (800660c <checkAktifCalisma+0x19c>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	f083 0301 	eor.w	r3, r3, #1
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d018      	beq.n	80065cc <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800659a:	4b20      	ldr	r3, [pc, #128]	; (800661c <checkAktifCalisma+0x1ac>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	f083 0301 	eor.w	r3, r3, #1
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d011      	beq.n	80065cc <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 80065a8:	4b26      	ldr	r3, [pc, #152]	; (8006644 <checkAktifCalisma+0x1d4>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	f083 0301 	eor.w	r3, r3, #1
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 80065b6:	4b24      	ldr	r3, [pc, #144]	; (8006648 <checkAktifCalisma+0x1d8>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f083 0301 	eor.w	r3, r3, #1
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 80065c4:	4b10      	ldr	r3, [pc, #64]	; (8006608 <checkAktifCalisma+0x198>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	e002      	b.n	80065d2 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80065cc:	4b0e      	ldr	r3, [pc, #56]	; (8006608 <checkAktifCalisma+0x198>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80065d2:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <checkAktifCalisma+0x198>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d03a      	beq.n	8006650 <checkAktifCalisma+0x1e0>
 80065da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065de:	4817      	ldr	r0, [pc, #92]	; (800663c <checkAktifCalisma+0x1cc>)
 80065e0:	f003 fc0c 	bl	8009dfc <HAL_GPIO_ReadPin>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d132      	bne.n	8006650 <checkAktifCalisma+0x1e0>
 80065ea:	4b18      	ldr	r3, [pc, #96]	; (800664c <checkAktifCalisma+0x1dc>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d02e      	beq.n	8006650 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80065f2:	2201      	movs	r2, #1
 80065f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065f8:	480c      	ldr	r0, [pc, #48]	; (800662c <checkAktifCalisma+0x1bc>)
 80065fa:	f003 fc16 	bl	8009e2a <HAL_GPIO_WritePin>
 80065fe:	e02d      	b.n	800665c <checkAktifCalisma+0x1ec>
 8006600:	20000c73 	.word	0x20000c73
 8006604:	20000c72 	.word	0x20000c72
 8006608:	20000c8a 	.word	0x20000c8a
 800660c:	20000c8b 	.word	0x20000c8b
 8006610:	20000c8d 	.word	0x20000c8d
 8006614:	20000c85 	.word	0x20000c85
 8006618:	20000c68 	.word	0x20000c68
 800661c:	20000c8c 	.word	0x20000c8c
 8006620:	20000c67 	.word	0x20000c67
 8006624:	20000ca7 	.word	0x20000ca7
 8006628:	20000ca8 	.word	0x20000ca8
 800662c:	40010c00 	.word	0x40010c00
 8006630:	20000ca9 	.word	0x20000ca9
 8006634:	20000c94 	.word	0x20000c94
 8006638:	20000c91 	.word	0x20000c91
 800663c:	40011000 	.word	0x40011000
 8006640:	20000c58 	.word	0x20000c58
 8006644:	20000c8f 	.word	0x20000c8f
 8006648:	20000c90 	.word	0x20000c90
 800664c:	20000c63 	.word	0x20000c63
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006650:	2200      	movs	r2, #0
 8006652:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006656:	4860      	ldr	r0, [pc, #384]	; (80067d8 <checkAktifCalisma+0x368>)
 8006658:	f003 fbe7 	bl	8009e2a <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800665c:	4b5f      	ldr	r3, [pc, #380]	; (80067dc <checkAktifCalisma+0x36c>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d013      	beq.n	800668c <checkAktifCalisma+0x21c>
 8006664:	4b5e      	ldr	r3, [pc, #376]	; (80067e0 <checkAktifCalisma+0x370>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d007      	beq.n	800667c <checkAktifCalisma+0x20c>
 800666c:	4b5c      	ldr	r3, [pc, #368]	; (80067e0 <checkAktifCalisma+0x370>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b02      	cmp	r3, #2
 8006672:	d003      	beq.n	800667c <checkAktifCalisma+0x20c>
 8006674:	4b5b      	ldr	r3, [pc, #364]	; (80067e4 <checkAktifCalisma+0x374>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d107      	bne.n	800668c <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800667c:	2201      	movs	r2, #1
 800667e:	2104      	movs	r1, #4
 8006680:	4855      	ldr	r0, [pc, #340]	; (80067d8 <checkAktifCalisma+0x368>)
 8006682:	f003 fbd2 	bl	8009e2a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8006686:	4b58      	ldr	r3, [pc, #352]	; (80067e8 <checkAktifCalisma+0x378>)
 8006688:	2201      	movs	r2, #1
 800668a:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800668c:	4b56      	ldr	r3, [pc, #344]	; (80067e8 <checkAktifCalisma+0x378>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d02f      	beq.n	80066f4 <checkAktifCalisma+0x284>
 8006694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006698:	484f      	ldr	r0, [pc, #316]	; (80067d8 <checkAktifCalisma+0x368>)
 800669a:	f003 fbaf 	bl	8009dfc <HAL_GPIO_ReadPin>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d106      	bne.n	80066b2 <checkAktifCalisma+0x242>
 80066a4:	4b51      	ldr	r3, [pc, #324]	; (80067ec <checkAktifCalisma+0x37c>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	f083 0301 	eor.w	r3, r3, #1
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <checkAktifCalisma+0x250>
 80066b2:	2102      	movs	r1, #2
 80066b4:	484e      	ldr	r0, [pc, #312]	; (80067f0 <checkAktifCalisma+0x380>)
 80066b6:	f003 fba1 	bl	8009dfc <HAL_GPIO_ReadPin>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d119      	bne.n	80066f4 <checkAktifCalisma+0x284>
 80066c0:	4b4c      	ldr	r3, [pc, #304]	; (80067f4 <checkAktifCalisma+0x384>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d015      	beq.n	80066f4 <checkAktifCalisma+0x284>
 80066c8:	4b4b      	ldr	r3, [pc, #300]	; (80067f8 <checkAktifCalisma+0x388>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d011      	beq.n	80066f4 <checkAktifCalisma+0x284>
 80066d0:	4b4a      	ldr	r3, [pc, #296]	; (80067fc <checkAktifCalisma+0x38c>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00d      	beq.n	80066f4 <checkAktifCalisma+0x284>
 80066d8:	4b49      	ldr	r3, [pc, #292]	; (8006800 <checkAktifCalisma+0x390>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	f083 0301 	eor.w	r3, r3, #1
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d006      	beq.n	80066f4 <checkAktifCalisma+0x284>
			timer2=millis;
 80066e6:	4b47      	ldr	r3, [pc, #284]	; (8006804 <checkAktifCalisma+0x394>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a47      	ldr	r2, [pc, #284]	; (8006808 <checkAktifCalisma+0x398>)
 80066ec:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80066ee:	4b44      	ldr	r3, [pc, #272]	; (8006800 <checkAktifCalisma+0x390>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80066f4:	4b43      	ldr	r3, [pc, #268]	; (8006804 <checkAktifCalisma+0x394>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4b43      	ldr	r3, [pc, #268]	; (8006808 <checkAktifCalisma+0x398>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	4a43      	ldr	r2, [pc, #268]	; (800680c <checkAktifCalisma+0x39c>)
 8006700:	7812      	ldrb	r2, [r2, #0]
 8006702:	4293      	cmp	r3, r2
 8006704:	d303      	bcc.n	800670e <checkAktifCalisma+0x29e>
 8006706:	4b3e      	ldr	r3, [pc, #248]	; (8006800 <checkAktifCalisma+0x390>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d111      	bne.n	8006732 <checkAktifCalisma+0x2c2>
 800670e:	4b39      	ldr	r3, [pc, #228]	; (80067f4 <checkAktifCalisma+0x384>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	f083 0301 	eor.w	r3, r3, #1
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <checkAktifCalisma+0x2c2>
 800671c:	4b36      	ldr	r3, [pc, #216]	; (80067f8 <checkAktifCalisma+0x388>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	f083 0301 	eor.w	r3, r3, #1
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d103      	bne.n	8006732 <checkAktifCalisma+0x2c2>
 800672a:	4b34      	ldr	r3, [pc, #208]	; (80067fc <checkAktifCalisma+0x38c>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10a      	bne.n	8006748 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006732:	2200      	movs	r2, #0
 8006734:	2104      	movs	r1, #4
 8006736:	4828      	ldr	r0, [pc, #160]	; (80067d8 <checkAktifCalisma+0x368>)
 8006738:	f003 fb77 	bl	8009e2a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 800673c:	4b2a      	ldr	r3, [pc, #168]	; (80067e8 <checkAktifCalisma+0x378>)
 800673e:	2200      	movs	r2, #0
 8006740:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8006742:	4b2f      	ldr	r3, [pc, #188]	; (8006800 <checkAktifCalisma+0x390>)
 8006744:	2200      	movs	r2, #0
 8006746:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8006748:	4b31      	ldr	r3, [pc, #196]	; (8006810 <checkAktifCalisma+0x3a0>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8006750:	4b30      	ldr	r3, [pc, #192]	; (8006814 <checkAktifCalisma+0x3a4>)
 8006752:	2201      	movs	r2, #1
 8006754:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8006756:	4b2e      	ldr	r3, [pc, #184]	; (8006810 <checkAktifCalisma+0x3a0>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d116      	bne.n	800678c <checkAktifCalisma+0x31c>
 800675e:	4b2e      	ldr	r3, [pc, #184]	; (8006818 <checkAktifCalisma+0x3a8>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d112      	bne.n	800678c <checkAktifCalisma+0x31c>
 8006766:	2101      	movs	r1, #1
 8006768:	4821      	ldr	r0, [pc, #132]	; (80067f0 <checkAktifCalisma+0x380>)
 800676a:	f003 fb47 	bl	8009dfc <HAL_GPIO_ReadPin>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10b      	bne.n	800678c <checkAktifCalisma+0x31c>
 8006774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006778:	4817      	ldr	r0, [pc, #92]	; (80067d8 <checkAktifCalisma+0x368>)
 800677a:	f003 fb3f 	bl	8009dfc <HAL_GPIO_ReadPin>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d103      	bne.n	800678c <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006784:	4b23      	ldr	r3, [pc, #140]	; (8006814 <checkAktifCalisma+0x3a4>)
 8006786:	2201      	movs	r2, #1
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	e011      	b.n	80067b0 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800678c:	4b20      	ldr	r3, [pc, #128]	; (8006810 <checkAktifCalisma+0x3a0>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d10d      	bne.n	80067b0 <checkAktifCalisma+0x340>
 8006794:	2101      	movs	r1, #1
 8006796:	4816      	ldr	r0, [pc, #88]	; (80067f0 <checkAktifCalisma+0x380>)
 8006798:	f003 fb30 	bl	8009dfc <HAL_GPIO_ReadPin>
 800679c:	4603      	mov	r3, r0
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d106      	bne.n	80067b0 <checkAktifCalisma+0x340>
 80067a2:	4b1d      	ldr	r3, [pc, #116]	; (8006818 <checkAktifCalisma+0x3a8>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d102      	bne.n	80067b0 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80067aa:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <checkAktifCalisma+0x3a4>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80067b0:	4b17      	ldr	r3, [pc, #92]	; (8006810 <checkAktifCalisma+0x3a0>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d134      	bne.n	8006822 <checkAktifCalisma+0x3b2>
 80067b8:	4b17      	ldr	r3, [pc, #92]	; (8006818 <checkAktifCalisma+0x3a8>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d130      	bne.n	8006822 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80067c0:	2101      	movs	r1, #1
 80067c2:	480b      	ldr	r0, [pc, #44]	; (80067f0 <checkAktifCalisma+0x380>)
 80067c4:	f003 fb1a 	bl	8009dfc <HAL_GPIO_ReadPin>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d126      	bne.n	800681c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80067ce:	4b11      	ldr	r3, [pc, #68]	; (8006814 <checkAktifCalisma+0x3a4>)
 80067d0:	2201      	movs	r2, #1
 80067d2:	701a      	strb	r2, [r3, #0]
 80067d4:	e025      	b.n	8006822 <checkAktifCalisma+0x3b2>
 80067d6:	bf00      	nop
 80067d8:	40010c00 	.word	0x40010c00
 80067dc:	20000c8a 	.word	0x20000c8a
 80067e0:	20000c64 	.word	0x20000c64
 80067e4:	20000c68 	.word	0x20000c68
 80067e8:	20000c8e 	.word	0x20000c8e
 80067ec:	20000c91 	.word	0x20000c91
 80067f0:	40011000 	.word	0x40011000
 80067f4:	20000ca7 	.word	0x20000ca7
 80067f8:	20000ca8 	.word	0x20000ca8
 80067fc:	20000c58 	.word	0x20000c58
 8006800:	20000c86 	.word	0x20000c86
 8006804:	20000be0 	.word	0x20000be0
 8006808:	20000bec 	.word	0x20000bec
 800680c:	20000c69 	.word	0x20000c69
 8006810:	20000c59 	.word	0x20000c59
 8006814:	20000cac 	.word	0x20000cac
 8006818:	20000c56 	.word	0x20000c56
			} else {
				cerceveVar=0;
 800681c:	4b7f      	ldr	r3, [pc, #508]	; (8006a1c <checkAktifCalisma+0x5ac>)
 800681e:	2200      	movs	r2, #0
 8006820:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8006822:	4b7f      	ldr	r3, [pc, #508]	; (8006a20 <checkAktifCalisma+0x5b0>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d17c      	bne.n	8006924 <checkAktifCalisma+0x4b4>
 800682a:	4b7e      	ldr	r3, [pc, #504]	; (8006a24 <checkAktifCalisma+0x5b4>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d078      	beq.n	8006924 <checkAktifCalisma+0x4b4>
 8006832:	4b7d      	ldr	r3, [pc, #500]	; (8006a28 <checkAktifCalisma+0x5b8>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d074      	beq.n	8006924 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800683a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800683e:	487b      	ldr	r0, [pc, #492]	; (8006a2c <checkAktifCalisma+0x5bc>)
 8006840:	f003 fadc 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <checkAktifCalisma+0x3e2>
 800684a:	4b79      	ldr	r3, [pc, #484]	; (8006a30 <checkAktifCalisma+0x5c0>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d068      	beq.n	8006924 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8006852:	4b72      	ldr	r3, [pc, #456]	; (8006a1c <checkAktifCalisma+0x5ac>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d064      	beq.n	8006924 <checkAktifCalisma+0x4b4>
 800685a:	4b76      	ldr	r3, [pc, #472]	; (8006a34 <checkAktifCalisma+0x5c4>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	f083 0301 	eor.w	r3, r3, #1
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d05d      	beq.n	8006924 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006868:	2104      	movs	r1, #4
 800686a:	4873      	ldr	r0, [pc, #460]	; (8006a38 <checkAktifCalisma+0x5c8>)
 800686c:	f003 fac6 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <checkAktifCalisma+0x40e>
 8006876:	4b71      	ldr	r3, [pc, #452]	; (8006a3c <checkAktifCalisma+0x5cc>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d152      	bne.n	8006924 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800687e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006882:	486a      	ldr	r0, [pc, #424]	; (8006a2c <checkAktifCalisma+0x5bc>)
 8006884:	f003 faba 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006888:	4603      	mov	r3, r0
 800688a:	2b01      	cmp	r3, #1
 800688c:	d10e      	bne.n	80068ac <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800688e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006892:	4866      	ldr	r0, [pc, #408]	; (8006a2c <checkAktifCalisma+0x5bc>)
 8006894:	f003 fab2 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006898:	4603      	mov	r3, r0
 800689a:	2b01      	cmp	r3, #1
 800689c:	d106      	bne.n	80068ac <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800689e:	2140      	movs	r1, #64	; 0x40
 80068a0:	4865      	ldr	r0, [pc, #404]	; (8006a38 <checkAktifCalisma+0x5c8>)
 80068a2:	f003 faab 	bl	8009dfc <HAL_GPIO_ReadPin>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d003      	beq.n	80068b4 <checkAktifCalisma+0x444>
 80068ac:	4b64      	ldr	r3, [pc, #400]	; (8006a40 <checkAktifCalisma+0x5d0>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d037      	beq.n	8006924 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80068b4:	4b63      	ldr	r3, [pc, #396]	; (8006a44 <checkAktifCalisma+0x5d4>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	f083 0301 	eor.w	r3, r3, #1
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d030      	beq.n	8006924 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80068c2:	4b61      	ldr	r3, [pc, #388]	; (8006a48 <checkAktifCalisma+0x5d8>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	f083 0301 	eor.w	r3, r3, #1
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d029      	beq.n	8006924 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80068d0:	4b5e      	ldr	r3, [pc, #376]	; (8006a4c <checkAktifCalisma+0x5dc>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	f083 0301 	eor.w	r3, r3, #1
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d022      	beq.n	8006924 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80068de:	4b5c      	ldr	r3, [pc, #368]	; (8006a50 <checkAktifCalisma+0x5e0>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	f083 0301 	eor.w	r3, r3, #1
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01b      	beq.n	8006924 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80068ec:	4b59      	ldr	r3, [pc, #356]	; (8006a54 <checkAktifCalisma+0x5e4>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f083 0301 	eor.w	r3, r3, #1
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d014      	beq.n	8006924 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80068fa:	4b57      	ldr	r3, [pc, #348]	; (8006a58 <checkAktifCalisma+0x5e8>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	f083 0301 	eor.w	r3, r3, #1
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00d      	beq.n	8006924 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006908:	2201      	movs	r2, #1
 800690a:	2102      	movs	r1, #2
 800690c:	4847      	ldr	r0, [pc, #284]	; (8006a2c <checkAktifCalisma+0x5bc>)
 800690e:	f003 fa8c 	bl	8009e2a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8006912:	4b4b      	ldr	r3, [pc, #300]	; (8006a40 <checkAktifCalisma+0x5d0>)
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8006918:	4b50      	ldr	r3, [pc, #320]	; (8006a5c <checkAktifCalisma+0x5ec>)
 800691a:	2201      	movs	r2, #1
 800691c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800691e:	4b50      	ldr	r3, [pc, #320]	; (8006a60 <checkAktifCalisma+0x5f0>)
 8006920:	2201      	movs	r2, #1
 8006922:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8006924:	4b46      	ldr	r3, [pc, #280]	; (8006a40 <checkAktifCalisma+0x5d0>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d033      	beq.n	8006994 <checkAktifCalisma+0x524>
 800692c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006930:	483e      	ldr	r0, [pc, #248]	; (8006a2c <checkAktifCalisma+0x5bc>)
 8006932:	f003 fa63 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006936:	4603      	mov	r3, r0
 8006938:	2b01      	cmp	r3, #1
 800693a:	d106      	bne.n	800694a <checkAktifCalisma+0x4da>
 800693c:	4b3c      	ldr	r3, [pc, #240]	; (8006a30 <checkAktifCalisma+0x5c0>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	f083 0301 	eor.w	r3, r3, #1
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <checkAktifCalisma+0x4f0>
 800694a:	2104      	movs	r1, #4
 800694c:	483a      	ldr	r0, [pc, #232]	; (8006a38 <checkAktifCalisma+0x5c8>)
 800694e:	f003 fa55 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006952:	4603      	mov	r3, r0
 8006954:	2b01      	cmp	r3, #1
 8006956:	d11d      	bne.n	8006994 <checkAktifCalisma+0x524>
 8006958:	4b38      	ldr	r3, [pc, #224]	; (8006a3c <checkAktifCalisma+0x5cc>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d019      	beq.n	8006994 <checkAktifCalisma+0x524>
 8006960:	4b30      	ldr	r3, [pc, #192]	; (8006a24 <checkAktifCalisma+0x5b4>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d015      	beq.n	8006994 <checkAktifCalisma+0x524>
 8006968:	4b2f      	ldr	r3, [pc, #188]	; (8006a28 <checkAktifCalisma+0x5b8>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d011      	beq.n	8006994 <checkAktifCalisma+0x524>
 8006970:	4b2a      	ldr	r3, [pc, #168]	; (8006a1c <checkAktifCalisma+0x5ac>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00d      	beq.n	8006994 <checkAktifCalisma+0x524>
 8006978:	4b3a      	ldr	r3, [pc, #232]	; (8006a64 <checkAktifCalisma+0x5f4>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	f083 0301 	eor.w	r3, r3, #1
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d006      	beq.n	8006994 <checkAktifCalisma+0x524>
			timer2=millis;
 8006986:	4b38      	ldr	r3, [pc, #224]	; (8006a68 <checkAktifCalisma+0x5f8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a38      	ldr	r2, [pc, #224]	; (8006a6c <checkAktifCalisma+0x5fc>)
 800698c:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800698e:	4b35      	ldr	r3, [pc, #212]	; (8006a64 <checkAktifCalisma+0x5f4>)
 8006990:	2201      	movs	r2, #1
 8006992:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006994:	4b34      	ldr	r3, [pc, #208]	; (8006a68 <checkAktifCalisma+0x5f8>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	4b34      	ldr	r3, [pc, #208]	; (8006a6c <checkAktifCalisma+0x5fc>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	4a34      	ldr	r2, [pc, #208]	; (8006a70 <checkAktifCalisma+0x600>)
 80069a0:	7812      	ldrb	r2, [r2, #0]
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d303      	bcc.n	80069ae <checkAktifCalisma+0x53e>
 80069a6:	4b2f      	ldr	r3, [pc, #188]	; (8006a64 <checkAktifCalisma+0x5f4>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d114      	bne.n	80069d8 <checkAktifCalisma+0x568>
 80069ae:	4b1d      	ldr	r3, [pc, #116]	; (8006a24 <checkAktifCalisma+0x5b4>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	f083 0301 	eor.w	r3, r3, #1
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10d      	bne.n	80069d8 <checkAktifCalisma+0x568>
 80069bc:	4b1a      	ldr	r3, [pc, #104]	; (8006a28 <checkAktifCalisma+0x5b8>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	f083 0301 	eor.w	r3, r3, #1
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <checkAktifCalisma+0x568>
 80069ca:	4b14      	ldr	r3, [pc, #80]	; (8006a1c <checkAktifCalisma+0x5ac>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	f083 0301 	eor.w	r3, r3, #1
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80069d8:	2200      	movs	r2, #0
 80069da:	2102      	movs	r1, #2
 80069dc:	4813      	ldr	r0, [pc, #76]	; (8006a2c <checkAktifCalisma+0x5bc>)
 80069de:	f003 fa24 	bl	8009e2a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80069e2:	4b17      	ldr	r3, [pc, #92]	; (8006a40 <checkAktifCalisma+0x5d0>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80069e8:	4b1e      	ldr	r3, [pc, #120]	; (8006a64 <checkAktifCalisma+0x5f4>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80069ee:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <checkAktifCalisma+0x5d0>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d040      	beq.n	8006a78 <checkAktifCalisma+0x608>
 80069f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069fa:	480f      	ldr	r0, [pc, #60]	; (8006a38 <checkAktifCalisma+0x5c8>)
 80069fc:	f003 f9fe 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d138      	bne.n	8006a78 <checkAktifCalisma+0x608>
 8006a06:	4b1b      	ldr	r3, [pc, #108]	; (8006a74 <checkAktifCalisma+0x604>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d034      	beq.n	8006a78 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006a0e:	2201      	movs	r2, #1
 8006a10:	2101      	movs	r1, #1
 8006a12:	4806      	ldr	r0, [pc, #24]	; (8006a2c <checkAktifCalisma+0x5bc>)
 8006a14:	f003 fa09 	bl	8009e2a <HAL_GPIO_WritePin>
 8006a18:	e033      	b.n	8006a82 <checkAktifCalisma+0x612>
 8006a1a:	bf00      	nop
 8006a1c:	20000cac 	.word	0x20000cac
 8006a20:	20000c72 	.word	0x20000c72
 8006a24:	20000ca7 	.word	0x20000ca7
 8006a28:	20000ca8 	.word	0x20000ca8
 8006a2c:	40010c00 	.word	0x40010c00
 8006a30:	20000c92 	.word	0x20000c92
 8006a34:	20000ca6 	.word	0x20000ca6
 8006a38:	40011000 	.word	0x40011000
 8006a3c:	20000c5b 	.word	0x20000c5b
 8006a40:	20000c8d 	.word	0x20000c8d
 8006a44:	20000c8a 	.word	0x20000c8a
 8006a48:	20000c8e 	.word	0x20000c8e
 8006a4c:	20000c8b 	.word	0x20000c8b
 8006a50:	20000c8c 	.word	0x20000c8c
 8006a54:	20000c8f 	.word	0x20000c8f
 8006a58:	20000c90 	.word	0x20000c90
 8006a5c:	20000c95 	.word	0x20000c95
 8006a60:	20000cb6 	.word	0x20000cb6
 8006a64:	20000c85 	.word	0x20000c85
 8006a68:	20000be0 	.word	0x20000be0
 8006a6c:	20000bec 	.word	0x20000bec
 8006a70:	20000c6a 	.word	0x20000c6a
 8006a74:	20000c5a 	.word	0x20000c5a
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	4836      	ldr	r0, [pc, #216]	; (8006b58 <checkAktifCalisma+0x6e8>)
 8006a7e:	f003 f9d4 	bl	8009e2a <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006a82:	4b36      	ldr	r3, [pc, #216]	; (8006b5c <checkAktifCalisma+0x6ec>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f040 8080 	bne.w	8006b8c <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006a8c:	4b34      	ldr	r3, [pc, #208]	; (8006b60 <checkAktifCalisma+0x6f0>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d003      	beq.n	8006a9c <checkAktifCalisma+0x62c>
 8006a94:	4b32      	ldr	r3, [pc, #200]	; (8006b60 <checkAktifCalisma+0x6f0>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d177      	bne.n	8006b8c <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006a9c:	4b31      	ldr	r3, [pc, #196]	; (8006b64 <checkAktifCalisma+0x6f4>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d073      	beq.n	8006b8c <checkAktifCalisma+0x71c>
 8006aa4:	4b30      	ldr	r3, [pc, #192]	; (8006b68 <checkAktifCalisma+0x6f8>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d06f      	beq.n	8006b8c <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ab0:	4829      	ldr	r0, [pc, #164]	; (8006b58 <checkAktifCalisma+0x6e8>)
 8006ab2:	f003 f9a3 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d167      	bne.n	8006b8c <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006abc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ac0:	482a      	ldr	r0, [pc, #168]	; (8006b6c <checkAktifCalisma+0x6fc>)
 8006ac2:	f003 f99b 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <checkAktifCalisma+0x664>
 8006acc:	4b28      	ldr	r3, [pc, #160]	; (8006b70 <checkAktifCalisma+0x700>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d15b      	bne.n	8006b8c <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006ad4:	2140      	movs	r1, #64	; 0x40
 8006ad6:	4825      	ldr	r0, [pc, #148]	; (8006b6c <checkAktifCalisma+0x6fc>)
 8006ad8:	f003 f990 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d10f      	bne.n	8006b02 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ae6:	481c      	ldr	r0, [pc, #112]	; (8006b58 <checkAktifCalisma+0x6e8>)
 8006ae8:	f003 f988 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d107      	bne.n	8006b02 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006af2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006af6:	4818      	ldr	r0, [pc, #96]	; (8006b58 <checkAktifCalisma+0x6e8>)
 8006af8:	f003 f980 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d003      	beq.n	8006b0a <checkAktifCalisma+0x69a>
 8006b02:	4b1c      	ldr	r3, [pc, #112]	; (8006b74 <checkAktifCalisma+0x704>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d040      	beq.n	8006b8c <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006b0a:	4b1b      	ldr	r3, [pc, #108]	; (8006b78 <checkAktifCalisma+0x708>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	f083 0301 	eor.w	r3, r3, #1
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d039      	beq.n	8006b8c <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006b18:	4b18      	ldr	r3, [pc, #96]	; (8006b7c <checkAktifCalisma+0x70c>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	f083 0301 	eor.w	r3, r3, #1
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d032      	beq.n	8006b8c <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006b26:	4b16      	ldr	r3, [pc, #88]	; (8006b80 <checkAktifCalisma+0x710>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	f083 0301 	eor.w	r3, r3, #1
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d02b      	beq.n	8006b8c <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006b34:	4b13      	ldr	r3, [pc, #76]	; (8006b84 <checkAktifCalisma+0x714>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	f083 0301 	eor.w	r3, r3, #1
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d024      	beq.n	8006b8c <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006b42:	4b11      	ldr	r3, [pc, #68]	; (8006b88 <checkAktifCalisma+0x718>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	f083 0301 	eor.w	r3, r3, #1
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01d      	beq.n	8006b8c <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006b50:	4b08      	ldr	r3, [pc, #32]	; (8006b74 <checkAktifCalisma+0x704>)
 8006b52:	2201      	movs	r2, #1
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	e01c      	b.n	8006b92 <checkAktifCalisma+0x722>
 8006b58:	40010c00 	.word	0x40010c00
 8006b5c:	20000c72 	.word	0x20000c72
 8006b60:	20000c64 	.word	0x20000c64
 8006b64:	20000ca7 	.word	0x20000ca7
 8006b68:	20000ca8 	.word	0x20000ca8
 8006b6c:	40011000 	.word	0x40011000
 8006b70:	20000c65 	.word	0x20000c65
 8006b74:	20000c8b 	.word	0x20000c8b
 8006b78:	20000c8a 	.word	0x20000c8a
 8006b7c:	20000c8e 	.word	0x20000c8e
 8006b80:	20000c8d 	.word	0x20000c8d
 8006b84:	20000c8c 	.word	0x20000c8c
 8006b88:	20000c90 	.word	0x20000c90
		} else {
			devmotoryukaricalisiyor=0;
 8006b8c:	4b64      	ldr	r3, [pc, #400]	; (8006d20 <checkAktifCalisma+0x8b0>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006b92:	4b63      	ldr	r3, [pc, #396]	; (8006d20 <checkAktifCalisma+0x8b0>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d007      	beq.n	8006baa <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	2120      	movs	r1, #32
 8006b9e:	4861      	ldr	r0, [pc, #388]	; (8006d24 <checkAktifCalisma+0x8b4>)
 8006ba0:	f003 f943 	bl	8009e2a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006ba4:	4b60      	ldr	r3, [pc, #384]	; (8006d28 <checkAktifCalisma+0x8b8>)
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006baa:	4b5f      	ldr	r3, [pc, #380]	; (8006d28 <checkAktifCalisma+0x8b8>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d025      	beq.n	8006bfe <checkAktifCalisma+0x78e>
 8006bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bb6:	485d      	ldr	r0, [pc, #372]	; (8006d2c <checkAktifCalisma+0x8bc>)
 8006bb8:	f003 f920 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d007      	beq.n	8006bd2 <checkAktifCalisma+0x762>
 8006bc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bc6:	4857      	ldr	r0, [pc, #348]	; (8006d24 <checkAktifCalisma+0x8b4>)
 8006bc8:	f003 f918 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d115      	bne.n	8006bfe <checkAktifCalisma+0x78e>
 8006bd2:	4b57      	ldr	r3, [pc, #348]	; (8006d30 <checkAktifCalisma+0x8c0>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d011      	beq.n	8006bfe <checkAktifCalisma+0x78e>
 8006bda:	4b56      	ldr	r3, [pc, #344]	; (8006d34 <checkAktifCalisma+0x8c4>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00d      	beq.n	8006bfe <checkAktifCalisma+0x78e>
 8006be2:	4b55      	ldr	r3, [pc, #340]	; (8006d38 <checkAktifCalisma+0x8c8>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	f083 0301 	eor.w	r3, r3, #1
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d006      	beq.n	8006bfe <checkAktifCalisma+0x78e>
			timer2=millis;
 8006bf0:	4b52      	ldr	r3, [pc, #328]	; (8006d3c <checkAktifCalisma+0x8cc>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a52      	ldr	r2, [pc, #328]	; (8006d40 <checkAktifCalisma+0x8d0>)
 8006bf6:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006bf8:	4b4f      	ldr	r3, [pc, #316]	; (8006d38 <checkAktifCalisma+0x8c8>)
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006bfe:	4b4f      	ldr	r3, [pc, #316]	; (8006d3c <checkAktifCalisma+0x8cc>)
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4b4f      	ldr	r3, [pc, #316]	; (8006d40 <checkAktifCalisma+0x8d0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	4a4e      	ldr	r2, [pc, #312]	; (8006d44 <checkAktifCalisma+0x8d4>)
 8006c0a:	7812      	ldrb	r2, [r2, #0]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d303      	bcc.n	8006c18 <checkAktifCalisma+0x7a8>
 8006c10:	4b49      	ldr	r3, [pc, #292]	; (8006d38 <checkAktifCalisma+0x8c8>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10d      	bne.n	8006c34 <checkAktifCalisma+0x7c4>
 8006c18:	4b45      	ldr	r3, [pc, #276]	; (8006d30 <checkAktifCalisma+0x8c0>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	f083 0301 	eor.w	r3, r3, #1
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d106      	bne.n	8006c34 <checkAktifCalisma+0x7c4>
 8006c26:	4b43      	ldr	r3, [pc, #268]	; (8006d34 <checkAktifCalisma+0x8c4>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	f083 0301 	eor.w	r3, r3, #1
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006c34:	2200      	movs	r2, #0
 8006c36:	2120      	movs	r1, #32
 8006c38:	483a      	ldr	r0, [pc, #232]	; (8006d24 <checkAktifCalisma+0x8b4>)
 8006c3a:	f003 f8f6 	bl	8009e2a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006c3e:	4b3a      	ldr	r3, [pc, #232]	; (8006d28 <checkAktifCalisma+0x8b8>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006c44:	4b3c      	ldr	r3, [pc, #240]	; (8006d38 <checkAktifCalisma+0x8c8>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006c4a:	4b3f      	ldr	r3, [pc, #252]	; (8006d48 <checkAktifCalisma+0x8d8>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f040 8088 	bne.w	8006d64 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006c54:	4b3d      	ldr	r3, [pc, #244]	; (8006d4c <checkAktifCalisma+0x8dc>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d003      	beq.n	8006c64 <checkAktifCalisma+0x7f4>
 8006c5c:	4b3b      	ldr	r3, [pc, #236]	; (8006d4c <checkAktifCalisma+0x8dc>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d17f      	bne.n	8006d64 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006c64:	4b32      	ldr	r3, [pc, #200]	; (8006d30 <checkAktifCalisma+0x8c0>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d07b      	beq.n	8006d64 <checkAktifCalisma+0x8f4>
 8006c6c:	4b31      	ldr	r3, [pc, #196]	; (8006d34 <checkAktifCalisma+0x8c4>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d077      	beq.n	8006d64 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006c74:	2140      	movs	r1, #64	; 0x40
 8006c76:	482b      	ldr	r0, [pc, #172]	; (8006d24 <checkAktifCalisma+0x8b4>)
 8006c78:	f003 f8c0 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d170      	bne.n	8006d64 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006c82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c86:	4827      	ldr	r0, [pc, #156]	; (8006d24 <checkAktifCalisma+0x8b4>)
 8006c88:	f003 f8b8 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <checkAktifCalisma+0x82a>
 8006c92:	4b2f      	ldr	r3, [pc, #188]	; (8006d50 <checkAktifCalisma+0x8e0>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d164      	bne.n	8006d64 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c9e:	4823      	ldr	r0, [pc, #140]	; (8006d2c <checkAktifCalisma+0x8bc>)
 8006ca0:	f003 f8ac 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d10f      	bne.n	8006cca <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006cae:	481f      	ldr	r0, [pc, #124]	; (8006d2c <checkAktifCalisma+0x8bc>)
 8006cb0:	f003 f8a4 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d107      	bne.n	8006cca <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006cbe:	481b      	ldr	r0, [pc, #108]	; (8006d2c <checkAktifCalisma+0x8bc>)
 8006cc0:	f003 f89c 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d003      	beq.n	8006cd2 <checkAktifCalisma+0x862>
 8006cca:	4b22      	ldr	r3, [pc, #136]	; (8006d54 <checkAktifCalisma+0x8e4>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d048      	beq.n	8006d64 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006cd2:	4b21      	ldr	r3, [pc, #132]	; (8006d58 <checkAktifCalisma+0x8e8>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	f083 0301 	eor.w	r3, r3, #1
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d041      	beq.n	8006d64 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006ce0:	4b1e      	ldr	r3, [pc, #120]	; (8006d5c <checkAktifCalisma+0x8ec>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	f083 0301 	eor.w	r3, r3, #1
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d03a      	beq.n	8006d64 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006cee:	4b1c      	ldr	r3, [pc, #112]	; (8006d60 <checkAktifCalisma+0x8f0>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	f083 0301 	eor.w	r3, r3, #1
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d033      	beq.n	8006d64 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <checkAktifCalisma+0x8b8>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	f083 0301 	eor.w	r3, r3, #1
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d02c      	beq.n	8006d64 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006d0a:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <checkAktifCalisma+0x8b0>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	f083 0301 	eor.w	r3, r3, #1
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d025      	beq.n	8006d64 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006d18:	4b0e      	ldr	r3, [pc, #56]	; (8006d54 <checkAktifCalisma+0x8e4>)
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	e024      	b.n	8006d6a <checkAktifCalisma+0x8fa>
 8006d20:	20000c8b 	.word	0x20000c8b
 8006d24:	40011000 	.word	0x40011000
 8006d28:	20000c8f 	.word	0x20000c8f
 8006d2c:	40010c00 	.word	0x40010c00
 8006d30:	20000ca7 	.word	0x20000ca7
 8006d34:	20000ca8 	.word	0x20000ca8
 8006d38:	20000c87 	.word	0x20000c87
 8006d3c:	20000be0 	.word	0x20000be0
 8006d40:	20000bec 	.word	0x20000bec
 8006d44:	20000c6b 	.word	0x20000c6b
 8006d48:	20000c72 	.word	0x20000c72
 8006d4c:	20000c64 	.word	0x20000c64
 8006d50:	20000c66 	.word	0x20000c66
 8006d54:	20000c8c 	.word	0x20000c8c
 8006d58:	20000c8a 	.word	0x20000c8a
 8006d5c:	20000c8e 	.word	0x20000c8e
 8006d60:	20000c8d 	.word	0x20000c8d
		} else {
			devmotorasagicalisiyor=0;
 8006d64:	4b96      	ldr	r3, [pc, #600]	; (8006fc0 <checkAktifCalisma+0xb50>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006d6a:	4b95      	ldr	r3, [pc, #596]	; (8006fc0 <checkAktifCalisma+0xb50>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d007      	beq.n	8006d82 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006d72:	2201      	movs	r2, #1
 8006d74:	2110      	movs	r1, #16
 8006d76:	4893      	ldr	r0, [pc, #588]	; (8006fc4 <checkAktifCalisma+0xb54>)
 8006d78:	f003 f857 	bl	8009e2a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006d7c:	4b92      	ldr	r3, [pc, #584]	; (8006fc8 <checkAktifCalisma+0xb58>)
 8006d7e:	2201      	movs	r2, #1
 8006d80:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006d82:	4b91      	ldr	r3, [pc, #580]	; (8006fc8 <checkAktifCalisma+0xb58>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d024      	beq.n	8006dd4 <checkAktifCalisma+0x964>
 8006d8a:	2140      	movs	r1, #64	; 0x40
 8006d8c:	488d      	ldr	r0, [pc, #564]	; (8006fc4 <checkAktifCalisma+0xb54>)
 8006d8e:	f003 f835 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d007      	beq.n	8006da8 <checkAktifCalisma+0x938>
 8006d98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d9c:	4889      	ldr	r0, [pc, #548]	; (8006fc4 <checkAktifCalisma+0xb54>)
 8006d9e:	f003 f82d 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d115      	bne.n	8006dd4 <checkAktifCalisma+0x964>
 8006da8:	4b88      	ldr	r3, [pc, #544]	; (8006fcc <checkAktifCalisma+0xb5c>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d011      	beq.n	8006dd4 <checkAktifCalisma+0x964>
 8006db0:	4b87      	ldr	r3, [pc, #540]	; (8006fd0 <checkAktifCalisma+0xb60>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00d      	beq.n	8006dd4 <checkAktifCalisma+0x964>
 8006db8:	4b86      	ldr	r3, [pc, #536]	; (8006fd4 <checkAktifCalisma+0xb64>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	f083 0301 	eor.w	r3, r3, #1
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d006      	beq.n	8006dd4 <checkAktifCalisma+0x964>
			timer2=millis;
 8006dc6:	4b84      	ldr	r3, [pc, #528]	; (8006fd8 <checkAktifCalisma+0xb68>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a84      	ldr	r2, [pc, #528]	; (8006fdc <checkAktifCalisma+0xb6c>)
 8006dcc:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006dce:	4b81      	ldr	r3, [pc, #516]	; (8006fd4 <checkAktifCalisma+0xb64>)
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006dd4:	4b80      	ldr	r3, [pc, #512]	; (8006fd8 <checkAktifCalisma+0xb68>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	4b80      	ldr	r3, [pc, #512]	; (8006fdc <checkAktifCalisma+0xb6c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	4a80      	ldr	r2, [pc, #512]	; (8006fe0 <checkAktifCalisma+0xb70>)
 8006de0:	7812      	ldrb	r2, [r2, #0]
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d303      	bcc.n	8006dee <checkAktifCalisma+0x97e>
 8006de6:	4b7b      	ldr	r3, [pc, #492]	; (8006fd4 <checkAktifCalisma+0xb64>)
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10d      	bne.n	8006e0a <checkAktifCalisma+0x99a>
 8006dee:	4b77      	ldr	r3, [pc, #476]	; (8006fcc <checkAktifCalisma+0xb5c>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	f083 0301 	eor.w	r3, r3, #1
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d106      	bne.n	8006e0a <checkAktifCalisma+0x99a>
 8006dfc:	4b74      	ldr	r3, [pc, #464]	; (8006fd0 <checkAktifCalisma+0xb60>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	f083 0301 	eor.w	r3, r3, #1
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00a      	beq.n	8006e20 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	2110      	movs	r1, #16
 8006e0e:	486d      	ldr	r0, [pc, #436]	; (8006fc4 <checkAktifCalisma+0xb54>)
 8006e10:	f003 f80b 	bl	8009e2a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006e14:	4b6c      	ldr	r3, [pc, #432]	; (8006fc8 <checkAktifCalisma+0xb58>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006e1a:	4b6e      	ldr	r3, [pc, #440]	; (8006fd4 <checkAktifCalisma+0xb64>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006e20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e24:	486f      	ldr	r0, [pc, #444]	; (8006fe4 <checkAktifCalisma+0xb74>)
 8006e26:	f002 ffe9 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d120      	bne.n	8006e72 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e34:	486b      	ldr	r0, [pc, #428]	; (8006fe4 <checkAktifCalisma+0xb74>)
 8006e36:	f002 ffe1 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d118      	bne.n	8006e72 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006e40:	2104      	movs	r1, #4
 8006e42:	4868      	ldr	r0, [pc, #416]	; (8006fe4 <checkAktifCalisma+0xb74>)
 8006e44:	f002 ffda 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d111      	bne.n	8006e72 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006e4e:	2102      	movs	r1, #2
 8006e50:	4864      	ldr	r0, [pc, #400]	; (8006fe4 <checkAktifCalisma+0xb74>)
 8006e52:	f002 ffd3 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10a      	bne.n	8006e72 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	4861      	ldr	r0, [pc, #388]	; (8006fe4 <checkAktifCalisma+0xb74>)
 8006e60:	f002 ffcc 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d103      	bne.n	8006e72 <checkAktifCalisma+0xa02>
			makineStop=1;
 8006e6a:	4b5f      	ldr	r3, [pc, #380]	; (8006fe8 <checkAktifCalisma+0xb78>)
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	e002      	b.n	8006e78 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006e72:	4b5d      	ldr	r3, [pc, #372]	; (8006fe8 <checkAktifCalisma+0xb78>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006e78:	4b5c      	ldr	r3, [pc, #368]	; (8006fec <checkAktifCalisma+0xb7c>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d144      	bne.n	8006f0a <checkAktifCalisma+0xa9a>
 8006e80:	4b5b      	ldr	r3, [pc, #364]	; (8006ff0 <checkAktifCalisma+0xb80>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d003      	beq.n	8006e90 <checkAktifCalisma+0xa20>
 8006e88:	4b59      	ldr	r3, [pc, #356]	; (8006ff0 <checkAktifCalisma+0xb80>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d13c      	bne.n	8006f0a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	484c      	ldr	r0, [pc, #304]	; (8006fc4 <checkAktifCalisma+0xb54>)
 8006e94:	f002 ffb2 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d103      	bne.n	8006ea6 <checkAktifCalisma+0xa36>
 8006e9e:	4b55      	ldr	r3, [pc, #340]	; (8006ff4 <checkAktifCalisma+0xb84>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00b      	beq.n	8006ebe <checkAktifCalisma+0xa4e>
 8006ea6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006eaa:	484e      	ldr	r0, [pc, #312]	; (8006fe4 <checkAktifCalisma+0xb74>)
 8006eac:	f002 ffa6 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d129      	bne.n	8006f0a <checkAktifCalisma+0xa9a>
 8006eb6:	4b4f      	ldr	r3, [pc, #316]	; (8006ff4 <checkAktifCalisma+0xb84>)
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d125      	bne.n	8006f0a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006ebe:	2104      	movs	r1, #4
 8006ec0:	4840      	ldr	r0, [pc, #256]	; (8006fc4 <checkAktifCalisma+0xb54>)
 8006ec2:	f002 ff9b 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d003      	beq.n	8006ed4 <checkAktifCalisma+0xa64>
 8006ecc:	4b4a      	ldr	r3, [pc, #296]	; (8006ff8 <checkAktifCalisma+0xb88>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d11a      	bne.n	8006f0a <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006ed4:	2102      	movs	r1, #2
 8006ed6:	483b      	ldr	r0, [pc, #236]	; (8006fc4 <checkAktifCalisma+0xb54>)
 8006ed8:	f002 ff90 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d113      	bne.n	8006f0a <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006ee2:	4b46      	ldr	r3, [pc, #280]	; (8006ffc <checkAktifCalisma+0xb8c>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	f083 0301 	eor.w	r3, r3, #1
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00c      	beq.n	8006f0a <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006ef0:	4b3d      	ldr	r3, [pc, #244]	; (8006fe8 <checkAktifCalisma+0xb78>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d008      	beq.n	8006f0a <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006ef8:	4b41      	ldr	r3, [pc, #260]	; (8007000 <checkAktifCalisma+0xb90>)
 8006efa:	2201      	movs	r2, #1
 8006efc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006efe:	4b36      	ldr	r3, [pc, #216]	; (8006fd8 <checkAktifCalisma+0xb68>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a40      	ldr	r2, [pc, #256]	; (8007004 <checkAktifCalisma+0xb94>)
 8006f04:	6013      	str	r3, [r2, #0]
			bekle();
 8006f06:	f7ff f87d 	bl	8006004 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006f0a:	4b33      	ldr	r3, [pc, #204]	; (8006fd8 <checkAktifCalisma+0xb68>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b3d      	ldr	r3, [pc, #244]	; (8007004 <checkAktifCalisma+0xb94>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	4a3c      	ldr	r2, [pc, #240]	; (8007008 <checkAktifCalisma+0xb98>)
 8006f16:	7812      	ldrb	r2, [r2, #0]
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d211      	bcs.n	8006f40 <checkAktifCalisma+0xad0>
 8006f1c:	2104      	movs	r1, #4
 8006f1e:	4829      	ldr	r0, [pc, #164]	; (8006fc4 <checkAktifCalisma+0xb54>)
 8006f20:	f002 ff6c 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <checkAktifCalisma+0xad0>
 8006f2a:	4b33      	ldr	r3, [pc, #204]	; (8006ff8 <checkAktifCalisma+0xb88>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d006      	beq.n	8006f40 <checkAktifCalisma+0xad0>
 8006f32:	4b2d      	ldr	r3, [pc, #180]	; (8006fe8 <checkAktifCalisma+0xb78>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	f083 0301 	eor.w	r3, r3, #1
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006f40:	4b2f      	ldr	r3, [pc, #188]	; (8007000 <checkAktifCalisma+0xb90>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006f46:	4b29      	ldr	r3, [pc, #164]	; (8006fec <checkAktifCalisma+0xb7c>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d160      	bne.n	8007010 <checkAktifCalisma+0xba0>
 8006f4e:	4b28      	ldr	r3, [pc, #160]	; (8006ff0 <checkAktifCalisma+0xb80>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d003      	beq.n	8006f5e <checkAktifCalisma+0xaee>
 8006f56:	4b26      	ldr	r3, [pc, #152]	; (8006ff0 <checkAktifCalisma+0xb80>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d158      	bne.n	8007010 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006f5e:	2104      	movs	r1, #4
 8006f60:	4818      	ldr	r0, [pc, #96]	; (8006fc4 <checkAktifCalisma+0xb54>)
 8006f62:	f002 ff4b 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d003      	beq.n	8006f74 <checkAktifCalisma+0xb04>
 8006f6c:	4b22      	ldr	r3, [pc, #136]	; (8006ff8 <checkAktifCalisma+0xb88>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d14d      	bne.n	8007010 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006f74:	2102      	movs	r1, #2
 8006f76:	4813      	ldr	r0, [pc, #76]	; (8006fc4 <checkAktifCalisma+0xb54>)
 8006f78:	f002 ff40 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d146      	bne.n	8007010 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006f82:	2180      	movs	r1, #128	; 0x80
 8006f84:	480f      	ldr	r0, [pc, #60]	; (8006fc4 <checkAktifCalisma+0xb54>)
 8006f86:	f002 ff39 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d103      	bne.n	8006f98 <checkAktifCalisma+0xb28>
 8006f90:	4b18      	ldr	r3, [pc, #96]	; (8006ff4 <checkAktifCalisma+0xb84>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00b      	beq.n	8006fb0 <checkAktifCalisma+0xb40>
 8006f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f9c:	4811      	ldr	r0, [pc, #68]	; (8006fe4 <checkAktifCalisma+0xb74>)
 8006f9e:	f002 ff2d 	bl	8009dfc <HAL_GPIO_ReadPin>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d133      	bne.n	8007010 <checkAktifCalisma+0xba0>
 8006fa8:	4b12      	ldr	r3, [pc, #72]	; (8006ff4 <checkAktifCalisma+0xb84>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d12f      	bne.n	8007010 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8006fb0:	4b0d      	ldr	r3, [pc, #52]	; (8006fe8 <checkAktifCalisma+0xb78>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d02b      	beq.n	8007010 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8006fb8:	4b14      	ldr	r3, [pc, #80]	; (800700c <checkAktifCalisma+0xb9c>)
 8006fba:	2201      	movs	r2, #1
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	e02a      	b.n	8007016 <checkAktifCalisma+0xba6>
 8006fc0:	20000c8c 	.word	0x20000c8c
 8006fc4:	40011000 	.word	0x40011000
 8006fc8:	20000c90 	.word	0x20000c90
 8006fcc:	20000ca7 	.word	0x20000ca7
 8006fd0:	20000ca8 	.word	0x20000ca8
 8006fd4:	20000c88 	.word	0x20000c88
 8006fd8:	20000be0 	.word	0x20000be0
 8006fdc:	20000bec 	.word	0x20000bec
 8006fe0:	20000c6b 	.word	0x20000c6b
 8006fe4:	40010c00 	.word	0x40010c00
 8006fe8:	20000c97 	.word	0x20000c97
 8006fec:	20000c5e 	.word	0x20000c5e
 8006ff0:	20000c5d 	.word	0x20000c5d
 8006ff4:	20000c61 	.word	0x20000c61
 8006ff8:	20000c5b 	.word	0x20000c5b
 8006ffc:	20000c84 	.word	0x20000c84
 8007000:	20000c98 	.word	0x20000c98
 8007004:	20000be4 	.word	0x20000be4
 8007008:	20000c6e 	.word	0x20000c6e
 800700c:	20000c99 	.word	0x20000c99
		} else {
			kapi1butonkontrol=0;
 8007010:	4b8b      	ldr	r3, [pc, #556]	; (8007240 <checkAktifCalisma+0xdd0>)
 8007012:	2200      	movs	r2, #0
 8007014:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007016:	4b8b      	ldr	r3, [pc, #556]	; (8007244 <checkAktifCalisma+0xdd4>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d121      	bne.n	8007062 <checkAktifCalisma+0xbf2>
 800701e:	4b8a      	ldr	r3, [pc, #552]	; (8007248 <checkAktifCalisma+0xdd8>)
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d003      	beq.n	800702e <checkAktifCalisma+0xbbe>
 8007026:	4b88      	ldr	r3, [pc, #544]	; (8007248 <checkAktifCalisma+0xdd8>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b03      	cmp	r3, #3
 800702c:	d119      	bne.n	8007062 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800702e:	2104      	movs	r1, #4
 8007030:	4886      	ldr	r0, [pc, #536]	; (800724c <checkAktifCalisma+0xddc>)
 8007032:	f002 fee3 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007036:	4603      	mov	r3, r0
 8007038:	2b01      	cmp	r3, #1
 800703a:	d003      	beq.n	8007044 <checkAktifCalisma+0xbd4>
 800703c:	4b84      	ldr	r3, [pc, #528]	; (8007250 <checkAktifCalisma+0xde0>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10e      	bne.n	8007062 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007044:	2102      	movs	r1, #2
 8007046:	4881      	ldr	r0, [pc, #516]	; (800724c <checkAktifCalisma+0xddc>)
 8007048:	f002 fed8 	bl	8009dfc <HAL_GPIO_ReadPin>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d107      	bne.n	8007062 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8007052:	4b80      	ldr	r3, [pc, #512]	; (8007254 <checkAktifCalisma+0xde4>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800705a:	4b7f      	ldr	r3, [pc, #508]	; (8007258 <checkAktifCalisma+0xde8>)
 800705c:	2201      	movs	r2, #1
 800705e:	701a      	strb	r2, [r3, #0]
 8007060:	e002      	b.n	8007068 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8007062:	4b7d      	ldr	r3, [pc, #500]	; (8007258 <checkAktifCalisma+0xde8>)
 8007064:	2200      	movs	r2, #0
 8007066:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8007068:	4b75      	ldr	r3, [pc, #468]	; (8007240 <checkAktifCalisma+0xdd0>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d107      	bne.n	8007080 <checkAktifCalisma+0xc10>
 8007070:	4b79      	ldr	r3, [pc, #484]	; (8007258 <checkAktifCalisma+0xde8>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d103      	bne.n	8007080 <checkAktifCalisma+0xc10>
 8007078:	4b78      	ldr	r3, [pc, #480]	; (800725c <checkAktifCalisma+0xdec>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007080:	2201      	movs	r2, #1
 8007082:	2180      	movs	r1, #128	; 0x80
 8007084:	4876      	ldr	r0, [pc, #472]	; (8007260 <checkAktifCalisma+0xdf0>)
 8007086:	f002 fed0 	bl	8009e2a <HAL_GPIO_WritePin>
 800708a:	e004      	b.n	8007096 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800708c:	2200      	movs	r2, #0
 800708e:	2180      	movs	r1, #128	; 0x80
 8007090:	4873      	ldr	r0, [pc, #460]	; (8007260 <checkAktifCalisma+0xdf0>)
 8007092:	f002 feca 	bl	8009e2a <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007096:	4b73      	ldr	r3, [pc, #460]	; (8007264 <checkAktifCalisma+0xdf4>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d141      	bne.n	8007122 <checkAktifCalisma+0xcb2>
 800709e:	4b6a      	ldr	r3, [pc, #424]	; (8007248 <checkAktifCalisma+0xdd8>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d003      	beq.n	80070ae <checkAktifCalisma+0xc3e>
 80070a6:	4b68      	ldr	r3, [pc, #416]	; (8007248 <checkAktifCalisma+0xdd8>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d139      	bne.n	8007122 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80070ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070b2:	4866      	ldr	r0, [pc, #408]	; (800724c <checkAktifCalisma+0xddc>)
 80070b4:	f002 fea2 	bl	8009dfc <HAL_GPIO_ReadPin>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d103      	bne.n	80070c6 <checkAktifCalisma+0xc56>
 80070be:	4b6a      	ldr	r3, [pc, #424]	; (8007268 <checkAktifCalisma+0xdf8>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00b      	beq.n	80070de <checkAktifCalisma+0xc6e>
 80070c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070ca:	4868      	ldr	r0, [pc, #416]	; (800726c <checkAktifCalisma+0xdfc>)
 80070cc:	f002 fe96 	bl	8009dfc <HAL_GPIO_ReadPin>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d125      	bne.n	8007122 <checkAktifCalisma+0xcb2>
 80070d6:	4b64      	ldr	r3, [pc, #400]	; (8007268 <checkAktifCalisma+0xdf8>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d121      	bne.n	8007122 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80070de:	2102      	movs	r1, #2
 80070e0:	485a      	ldr	r0, [pc, #360]	; (800724c <checkAktifCalisma+0xddc>)
 80070e2:	f002 fe8b 	bl	8009dfc <HAL_GPIO_ReadPin>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d11a      	bne.n	8007122 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80070ec:	2104      	movs	r1, #4
 80070ee:	4857      	ldr	r0, [pc, #348]	; (800724c <checkAktifCalisma+0xddc>)
 80070f0:	f002 fe84 	bl	8009dfc <HAL_GPIO_ReadPin>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d113      	bne.n	8007122 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80070fa:	4b56      	ldr	r3, [pc, #344]	; (8007254 <checkAktifCalisma+0xde4>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00f      	beq.n	8007122 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8007102:	4b5b      	ldr	r3, [pc, #364]	; (8007270 <checkAktifCalisma+0xe00>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	f083 0301 	eor.w	r3, r3, #1
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	d008      	beq.n	8007122 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8007110:	4b58      	ldr	r3, [pc, #352]	; (8007274 <checkAktifCalisma+0xe04>)
 8007112:	2201      	movs	r2, #1
 8007114:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007116:	4b58      	ldr	r3, [pc, #352]	; (8007278 <checkAktifCalisma+0xe08>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a58      	ldr	r2, [pc, #352]	; (800727c <checkAktifCalisma+0xe0c>)
 800711c:	6013      	str	r3, [r2, #0]
			bekle();
 800711e:	f7fe ff71 	bl	8006004 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8007122:	4b55      	ldr	r3, [pc, #340]	; (8007278 <checkAktifCalisma+0xe08>)
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	4b55      	ldr	r3, [pc, #340]	; (800727c <checkAktifCalisma+0xe0c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	4a54      	ldr	r2, [pc, #336]	; (8007280 <checkAktifCalisma+0xe10>)
 800712e:	7812      	ldrb	r2, [r2, #0]
 8007130:	4293      	cmp	r3, r2
 8007132:	d20d      	bcs.n	8007150 <checkAktifCalisma+0xce0>
 8007134:	2102      	movs	r1, #2
 8007136:	4845      	ldr	r0, [pc, #276]	; (800724c <checkAktifCalisma+0xddc>)
 8007138:	f002 fe60 	bl	8009dfc <HAL_GPIO_ReadPin>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d006      	beq.n	8007150 <checkAktifCalisma+0xce0>
 8007142:	4b44      	ldr	r3, [pc, #272]	; (8007254 <checkAktifCalisma+0xde4>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	f083 0301 	eor.w	r3, r3, #1
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8007150:	4b48      	ldr	r3, [pc, #288]	; (8007274 <checkAktifCalisma+0xe04>)
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007156:	4b43      	ldr	r3, [pc, #268]	; (8007264 <checkAktifCalisma+0xdf4>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d135      	bne.n	80071ca <checkAktifCalisma+0xd5a>
 800715e:	4b3a      	ldr	r3, [pc, #232]	; (8007248 <checkAktifCalisma+0xdd8>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d003      	beq.n	800716e <checkAktifCalisma+0xcfe>
 8007166:	4b38      	ldr	r3, [pc, #224]	; (8007248 <checkAktifCalisma+0xdd8>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b03      	cmp	r3, #3
 800716c:	d12d      	bne.n	80071ca <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800716e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007172:	4836      	ldr	r0, [pc, #216]	; (800724c <checkAktifCalisma+0xddc>)
 8007174:	f002 fe42 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d103      	bne.n	8007186 <checkAktifCalisma+0xd16>
 800717e:	4b3a      	ldr	r3, [pc, #232]	; (8007268 <checkAktifCalisma+0xdf8>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00b      	beq.n	800719e <checkAktifCalisma+0xd2e>
 8007186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800718a:	4838      	ldr	r0, [pc, #224]	; (800726c <checkAktifCalisma+0xdfc>)
 800718c:	f002 fe36 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d119      	bne.n	80071ca <checkAktifCalisma+0xd5a>
 8007196:	4b34      	ldr	r3, [pc, #208]	; (8007268 <checkAktifCalisma+0xdf8>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d115      	bne.n	80071ca <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800719e:	2102      	movs	r1, #2
 80071a0:	482a      	ldr	r0, [pc, #168]	; (800724c <checkAktifCalisma+0xddc>)
 80071a2:	f002 fe2b 	bl	8009dfc <HAL_GPIO_ReadPin>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d10e      	bne.n	80071ca <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80071ac:	2104      	movs	r1, #4
 80071ae:	4827      	ldr	r0, [pc, #156]	; (800724c <checkAktifCalisma+0xddc>)
 80071b0:	f002 fe24 	bl	8009dfc <HAL_GPIO_ReadPin>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d107      	bne.n	80071ca <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 80071ba:	4b26      	ldr	r3, [pc, #152]	; (8007254 <checkAktifCalisma+0xde4>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 80071c2:	4b30      	ldr	r3, [pc, #192]	; (8007284 <checkAktifCalisma+0xe14>)
 80071c4:	2201      	movs	r2, #1
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	e002      	b.n	80071d0 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80071ca:	4b2e      	ldr	r3, [pc, #184]	; (8007284 <checkAktifCalisma+0xe14>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80071d0:	4b24      	ldr	r3, [pc, #144]	; (8007264 <checkAktifCalisma+0xdf4>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d11d      	bne.n	8007214 <checkAktifCalisma+0xda4>
 80071d8:	4b1b      	ldr	r3, [pc, #108]	; (8007248 <checkAktifCalisma+0xdd8>)
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d003      	beq.n	80071e8 <checkAktifCalisma+0xd78>
 80071e0:	4b19      	ldr	r3, [pc, #100]	; (8007248 <checkAktifCalisma+0xdd8>)
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d115      	bne.n	8007214 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80071e8:	2102      	movs	r1, #2
 80071ea:	4818      	ldr	r0, [pc, #96]	; (800724c <checkAktifCalisma+0xddc>)
 80071ec:	f002 fe06 	bl	8009dfc <HAL_GPIO_ReadPin>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d10e      	bne.n	8007214 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80071f6:	2104      	movs	r1, #4
 80071f8:	4814      	ldr	r0, [pc, #80]	; (800724c <checkAktifCalisma+0xddc>)
 80071fa:	f002 fdff 	bl	8009dfc <HAL_GPIO_ReadPin>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d107      	bne.n	8007214 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8007204:	4b13      	ldr	r3, [pc, #76]	; (8007254 <checkAktifCalisma+0xde4>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 800720c:	4b1e      	ldr	r3, [pc, #120]	; (8007288 <checkAktifCalisma+0xe18>)
 800720e:	2201      	movs	r2, #1
 8007210:	701a      	strb	r2, [r3, #0]
 8007212:	e002      	b.n	800721a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8007214:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <checkAktifCalisma+0xe18>)
 8007216:	2200      	movs	r2, #0
 8007218:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800721a:	4b1a      	ldr	r3, [pc, #104]	; (8007284 <checkAktifCalisma+0xe14>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d107      	bne.n	8007232 <checkAktifCalisma+0xdc2>
 8007222:	4b19      	ldr	r3, [pc, #100]	; (8007288 <checkAktifCalisma+0xe18>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d103      	bne.n	8007232 <checkAktifCalisma+0xdc2>
 800722a:	4b12      	ldr	r3, [pc, #72]	; (8007274 <checkAktifCalisma+0xe04>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d02c      	beq.n	800728c <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007232:	2201      	movs	r2, #1
 8007234:	2140      	movs	r1, #64	; 0x40
 8007236:	480a      	ldr	r0, [pc, #40]	; (8007260 <checkAktifCalisma+0xdf0>)
 8007238:	f002 fdf7 	bl	8009e2a <HAL_GPIO_WritePin>
 800723c:	e02b      	b.n	8007296 <checkAktifCalisma+0xe26>
 800723e:	bf00      	nop
 8007240:	20000c99 	.word	0x20000c99
 8007244:	20000c5e 	.word	0x20000c5e
 8007248:	20000c5d 	.word	0x20000c5d
 800724c:	40011000 	.word	0x40011000
 8007250:	20000c5b 	.word	0x20000c5b
 8007254:	20000c97 	.word	0x20000c97
 8007258:	20000c9a 	.word	0x20000c9a
 800725c:	20000c98 	.word	0x20000c98
 8007260:	40010800 	.word	0x40010800
 8007264:	20000c5f 	.word	0x20000c5f
 8007268:	20000c61 	.word	0x20000c61
 800726c:	40010c00 	.word	0x40010c00
 8007270:	20000c84 	.word	0x20000c84
 8007274:	20000c9b 	.word	0x20000c9b
 8007278:	20000be0 	.word	0x20000be0
 800727c:	20000be4 	.word	0x20000be4
 8007280:	20000c6f 	.word	0x20000c6f
 8007284:	20000c9c 	.word	0x20000c9c
 8007288:	20000c9d 	.word	0x20000c9d
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800728c:	2200      	movs	r2, #0
 800728e:	2140      	movs	r1, #64	; 0x40
 8007290:	488d      	ldr	r0, [pc, #564]	; (80074c8 <checkAktifCalisma+0x1058>)
 8007292:	f002 fdca 	bl	8009e2a <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8007296:	4b8d      	ldr	r3, [pc, #564]	; (80074cc <checkAktifCalisma+0x105c>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <checkAktifCalisma+0xe36>
 800729e:	4b8b      	ldr	r3, [pc, #556]	; (80074cc <checkAktifCalisma+0x105c>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d115      	bne.n	80072d2 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80072a6:	2104      	movs	r1, #4
 80072a8:	4889      	ldr	r0, [pc, #548]	; (80074d0 <checkAktifCalisma+0x1060>)
 80072aa:	f002 fda7 	bl	8009dfc <HAL_GPIO_ReadPin>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d003      	beq.n	80072bc <checkAktifCalisma+0xe4c>
 80072b4:	4b87      	ldr	r3, [pc, #540]	; (80074d4 <checkAktifCalisma+0x1064>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80072bc:	2102      	movs	r1, #2
 80072be:	4884      	ldr	r0, [pc, #528]	; (80074d0 <checkAktifCalisma+0x1060>)
 80072c0:	f002 fd9c 	bl	8009dfc <HAL_GPIO_ReadPin>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d103      	bne.n	80072d2 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 80072ca:	4b83      	ldr	r3, [pc, #524]	; (80074d8 <checkAktifCalisma+0x1068>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	e002      	b.n	80072d8 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 80072d2:	4b81      	ldr	r3, [pc, #516]	; (80074d8 <checkAktifCalisma+0x1068>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80072d8:	4b7c      	ldr	r3, [pc, #496]	; (80074cc <checkAktifCalisma+0x105c>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d003      	beq.n	80072e8 <checkAktifCalisma+0xe78>
 80072e0:	4b7a      	ldr	r3, [pc, #488]	; (80074cc <checkAktifCalisma+0x105c>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d111      	bne.n	800730c <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80072e8:	2102      	movs	r1, #2
 80072ea:	4879      	ldr	r0, [pc, #484]	; (80074d0 <checkAktifCalisma+0x1060>)
 80072ec:	f002 fd86 	bl	8009dfc <HAL_GPIO_ReadPin>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d10a      	bne.n	800730c <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80072f6:	2104      	movs	r1, #4
 80072f8:	4875      	ldr	r0, [pc, #468]	; (80074d0 <checkAktifCalisma+0x1060>)
 80072fa:	f002 fd7f 	bl	8009dfc <HAL_GPIO_ReadPin>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d103      	bne.n	800730c <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8007304:	4b75      	ldr	r3, [pc, #468]	; (80074dc <checkAktifCalisma+0x106c>)
 8007306:	2201      	movs	r2, #1
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	e002      	b.n	8007312 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 800730c:	4b73      	ldr	r3, [pc, #460]	; (80074dc <checkAktifCalisma+0x106c>)
 800730e:	2200      	movs	r2, #0
 8007310:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8007312:	4b71      	ldr	r3, [pc, #452]	; (80074d8 <checkAktifCalisma+0x1068>)
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00f      	beq.n	800733a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 800731a:	4b71      	ldr	r3, [pc, #452]	; (80074e0 <checkAktifCalisma+0x1070>)
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d10b      	bne.n	800733a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8007322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007326:	486f      	ldr	r0, [pc, #444]	; (80074e4 <checkAktifCalisma+0x1074>)
 8007328:	f002 fd68 	bl	8009dfc <HAL_GPIO_ReadPin>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8007332:	4b6d      	ldr	r3, [pc, #436]	; (80074e8 <checkAktifCalisma+0x1078>)
 8007334:	2201      	movs	r2, #1
 8007336:	701a      	strb	r2, [r3, #0]
 8007338:	e002      	b.n	8007340 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 800733a:	4b6b      	ldr	r3, [pc, #428]	; (80074e8 <checkAktifCalisma+0x1078>)
 800733c:	2200      	movs	r2, #0
 800733e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8007340:	4b66      	ldr	r3, [pc, #408]	; (80074dc <checkAktifCalisma+0x106c>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00f      	beq.n	8007368 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8007348:	4b65      	ldr	r3, [pc, #404]	; (80074e0 <checkAktifCalisma+0x1070>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d10b      	bne.n	8007368 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8007350:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007354:	4863      	ldr	r0, [pc, #396]	; (80074e4 <checkAktifCalisma+0x1074>)
 8007356:	f002 fd51 	bl	8009dfc <HAL_GPIO_ReadPin>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d103      	bne.n	8007368 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8007360:	4b62      	ldr	r3, [pc, #392]	; (80074ec <checkAktifCalisma+0x107c>)
 8007362:	2201      	movs	r2, #1
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	e002      	b.n	800736e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8007368:	4b60      	ldr	r3, [pc, #384]	; (80074ec <checkAktifCalisma+0x107c>)
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800736e:	4b60      	ldr	r3, [pc, #384]	; (80074f0 <checkAktifCalisma+0x1080>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d137      	bne.n	80073e6 <checkAktifCalisma+0xf76>
 8007376:	4b5f      	ldr	r3, [pc, #380]	; (80074f4 <checkAktifCalisma+0x1084>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b02      	cmp	r3, #2
 800737c:	d003      	beq.n	8007386 <checkAktifCalisma+0xf16>
 800737e:	4b5d      	ldr	r3, [pc, #372]	; (80074f4 <checkAktifCalisma+0x1084>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	2b03      	cmp	r3, #3
 8007384:	d12f      	bne.n	80073e6 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007386:	4b54      	ldr	r3, [pc, #336]	; (80074d8 <checkAktifCalisma+0x1068>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d103      	bne.n	8007396 <checkAktifCalisma+0xf26>
 800738e:	4b53      	ldr	r3, [pc, #332]	; (80074dc <checkAktifCalisma+0x106c>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d027      	beq.n	80073e6 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800739a:	484d      	ldr	r0, [pc, #308]	; (80074d0 <checkAktifCalisma+0x1060>)
 800739c:	f002 fd2e 	bl	8009dfc <HAL_GPIO_ReadPin>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d103      	bne.n	80073ae <checkAktifCalisma+0xf3e>
 80073a6:	4b4e      	ldr	r3, [pc, #312]	; (80074e0 <checkAktifCalisma+0x1070>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d007      	beq.n	80073be <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80073ae:	4b4e      	ldr	r3, [pc, #312]	; (80074e8 <checkAktifCalisma+0x1078>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d103      	bne.n	80073be <checkAktifCalisma+0xf4e>
 80073b6:	4b4d      	ldr	r3, [pc, #308]	; (80074ec <checkAktifCalisma+0x107c>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d013      	beq.n	80073e6 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 80073be:	4b4e      	ldr	r3, [pc, #312]	; (80074f8 <checkAktifCalisma+0x1088>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00f      	beq.n	80073e6 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 80073c6:	4b4d      	ldr	r3, [pc, #308]	; (80074fc <checkAktifCalisma+0x108c>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	f083 0301 	eor.w	r3, r3, #1
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d008      	beq.n	80073e6 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 80073d4:	4b4a      	ldr	r3, [pc, #296]	; (8007500 <checkAktifCalisma+0x1090>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80073da:	4b4a      	ldr	r3, [pc, #296]	; (8007504 <checkAktifCalisma+0x1094>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a4a      	ldr	r2, [pc, #296]	; (8007508 <checkAktifCalisma+0x1098>)
 80073e0:	6013      	str	r3, [r2, #0]
			bekle();
 80073e2:	f7fe fe0f 	bl	8006004 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80073e6:	4b47      	ldr	r3, [pc, #284]	; (8007504 <checkAktifCalisma+0x1094>)
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	4b47      	ldr	r3, [pc, #284]	; (8007508 <checkAktifCalisma+0x1098>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	4a46      	ldr	r2, [pc, #280]	; (800750c <checkAktifCalisma+0x109c>)
 80073f2:	7812      	ldrb	r2, [r2, #0]
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d214      	bcs.n	8007422 <checkAktifCalisma+0xfb2>
 80073f8:	4b37      	ldr	r3, [pc, #220]	; (80074d8 <checkAktifCalisma+0x1068>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	f083 0301 	eor.w	r3, r3, #1
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d006      	beq.n	8007414 <checkAktifCalisma+0xfa4>
 8007406:	4b35      	ldr	r3, [pc, #212]	; (80074dc <checkAktifCalisma+0x106c>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	f083 0301 	eor.w	r3, r3, #1
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d106      	bne.n	8007422 <checkAktifCalisma+0xfb2>
 8007414:	4b38      	ldr	r3, [pc, #224]	; (80074f8 <checkAktifCalisma+0x1088>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	f083 0301 	eor.w	r3, r3, #1
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8007422:	4b37      	ldr	r3, [pc, #220]	; (8007500 <checkAktifCalisma+0x1090>)
 8007424:	2200      	movs	r2, #0
 8007426:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007428:	4b31      	ldr	r3, [pc, #196]	; (80074f0 <checkAktifCalisma+0x1080>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d12b      	bne.n	8007488 <checkAktifCalisma+0x1018>
 8007430:	4b30      	ldr	r3, [pc, #192]	; (80074f4 <checkAktifCalisma+0x1084>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	2b02      	cmp	r3, #2
 8007436:	d003      	beq.n	8007440 <checkAktifCalisma+0xfd0>
 8007438:	4b2e      	ldr	r3, [pc, #184]	; (80074f4 <checkAktifCalisma+0x1084>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b03      	cmp	r3, #3
 800743e:	d123      	bne.n	8007488 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007440:	4b25      	ldr	r3, [pc, #148]	; (80074d8 <checkAktifCalisma+0x1068>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d103      	bne.n	8007450 <checkAktifCalisma+0xfe0>
 8007448:	4b24      	ldr	r3, [pc, #144]	; (80074dc <checkAktifCalisma+0x106c>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d01b      	beq.n	8007488 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007454:	481e      	ldr	r0, [pc, #120]	; (80074d0 <checkAktifCalisma+0x1060>)
 8007456:	f002 fcd1 	bl	8009dfc <HAL_GPIO_ReadPin>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d103      	bne.n	8007468 <checkAktifCalisma+0xff8>
 8007460:	4b1f      	ldr	r3, [pc, #124]	; (80074e0 <checkAktifCalisma+0x1070>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d007      	beq.n	8007478 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007468:	4b1f      	ldr	r3, [pc, #124]	; (80074e8 <checkAktifCalisma+0x1078>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d103      	bne.n	8007478 <checkAktifCalisma+0x1008>
 8007470:	4b1e      	ldr	r3, [pc, #120]	; (80074ec <checkAktifCalisma+0x107c>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8007478:	4b1f      	ldr	r3, [pc, #124]	; (80074f8 <checkAktifCalisma+0x1088>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8007480:	4b23      	ldr	r3, [pc, #140]	; (8007510 <checkAktifCalisma+0x10a0>)
 8007482:	2201      	movs	r2, #1
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	e002      	b.n	800748e <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8007488:	4b21      	ldr	r3, [pc, #132]	; (8007510 <checkAktifCalisma+0x10a0>)
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800748e:	4b18      	ldr	r3, [pc, #96]	; (80074f0 <checkAktifCalisma+0x1080>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b02      	cmp	r3, #2
 8007494:	d140      	bne.n	8007518 <checkAktifCalisma+0x10a8>
 8007496:	4b17      	ldr	r3, [pc, #92]	; (80074f4 <checkAktifCalisma+0x1084>)
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d003      	beq.n	80074a6 <checkAktifCalisma+0x1036>
 800749e:	4b15      	ldr	r3, [pc, #84]	; (80074f4 <checkAktifCalisma+0x1084>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d138      	bne.n	8007518 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80074a6:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <checkAktifCalisma+0x1068>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d103      	bne.n	80074b6 <checkAktifCalisma+0x1046>
 80074ae:	4b0b      	ldr	r3, [pc, #44]	; (80074dc <checkAktifCalisma+0x106c>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d030      	beq.n	8007518 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 80074b6:	4b10      	ldr	r3, [pc, #64]	; (80074f8 <checkAktifCalisma+0x1088>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d02c      	beq.n	8007518 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 80074be:	4b15      	ldr	r3, [pc, #84]	; (8007514 <checkAktifCalisma+0x10a4>)
 80074c0:	2201      	movs	r2, #1
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	e02b      	b.n	800751e <checkAktifCalisma+0x10ae>
 80074c6:	bf00      	nop
 80074c8:	40010800 	.word	0x40010800
 80074cc:	20000c62 	.word	0x20000c62
 80074d0:	40011000 	.word	0x40011000
 80074d4:	20000c5b 	.word	0x20000c5b
 80074d8:	20000ca1 	.word	0x20000ca1
 80074dc:	20000ca2 	.word	0x20000ca2
 80074e0:	20000c61 	.word	0x20000c61
 80074e4:	40010c00 	.word	0x40010c00
 80074e8:	20000cb1 	.word	0x20000cb1
 80074ec:	20000cb2 	.word	0x20000cb2
 80074f0:	20000c60 	.word	0x20000c60
 80074f4:	20000c5d 	.word	0x20000c5d
 80074f8:	20000c97 	.word	0x20000c97
 80074fc:	20000c84 	.word	0x20000c84
 8007500:	20000c9e 	.word	0x20000c9e
 8007504:	20000be0 	.word	0x20000be0
 8007508:	20000be4 	.word	0x20000be4
 800750c:	20000c70 	.word	0x20000c70
 8007510:	20000c9f 	.word	0x20000c9f
 8007514:	20000ca0 	.word	0x20000ca0
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8007518:	4b89      	ldr	r3, [pc, #548]	; (8007740 <checkAktifCalisma+0x12d0>)
 800751a:	2200      	movs	r2, #0
 800751c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800751e:	4b89      	ldr	r3, [pc, #548]	; (8007744 <checkAktifCalisma+0x12d4>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d107      	bne.n	8007536 <checkAktifCalisma+0x10c6>
 8007526:	4b88      	ldr	r3, [pc, #544]	; (8007748 <checkAktifCalisma+0x12d8>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d103      	bne.n	8007536 <checkAktifCalisma+0x10c6>
 800752e:	4b84      	ldr	r3, [pc, #528]	; (8007740 <checkAktifCalisma+0x12d0>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007536:	2201      	movs	r2, #1
 8007538:	2120      	movs	r1, #32
 800753a:	4884      	ldr	r0, [pc, #528]	; (800774c <checkAktifCalisma+0x12dc>)
 800753c:	f002 fc75 	bl	8009e2a <HAL_GPIO_WritePin>
 8007540:	e004      	b.n	800754c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007542:	2200      	movs	r2, #0
 8007544:	2120      	movs	r1, #32
 8007546:	4881      	ldr	r0, [pc, #516]	; (800774c <checkAktifCalisma+0x12dc>)
 8007548:	f002 fc6f 	bl	8009e2a <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800754c:	4b80      	ldr	r3, [pc, #512]	; (8007750 <checkAktifCalisma+0x12e0>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00e      	beq.n	8007572 <checkAktifCalisma+0x1102>
 8007554:	2102      	movs	r1, #2
 8007556:	487f      	ldr	r0, [pc, #508]	; (8007754 <checkAktifCalisma+0x12e4>)
 8007558:	f002 fc50 	bl	8009dfc <HAL_GPIO_ReadPin>
 800755c:	4603      	mov	r3, r0
 800755e:	2b01      	cmp	r3, #1
 8007560:	d107      	bne.n	8007572 <checkAktifCalisma+0x1102>
 8007562:	4b7d      	ldr	r3, [pc, #500]	; (8007758 <checkAktifCalisma+0x12e8>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d103      	bne.n	8007572 <checkAktifCalisma+0x1102>
 800756a:	4b7c      	ldr	r3, [pc, #496]	; (800775c <checkAktifCalisma+0x12ec>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d112      	bne.n	8007598 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8007572:	4b7b      	ldr	r3, [pc, #492]	; (8007760 <checkAktifCalisma+0x12f0>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d066      	beq.n	8007648 <checkAktifCalisma+0x11d8>
 800757a:	2104      	movs	r1, #4
 800757c:	4875      	ldr	r0, [pc, #468]	; (8007754 <checkAktifCalisma+0x12e4>)
 800757e:	f002 fc3d 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007582:	4603      	mov	r3, r0
 8007584:	2b01      	cmp	r3, #1
 8007586:	d15f      	bne.n	8007648 <checkAktifCalisma+0x11d8>
 8007588:	4b73      	ldr	r3, [pc, #460]	; (8007758 <checkAktifCalisma+0x12e8>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d05b      	beq.n	8007648 <checkAktifCalisma+0x11d8>
 8007590:	4b72      	ldr	r3, [pc, #456]	; (800775c <checkAktifCalisma+0x12ec>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d057      	beq.n	8007648 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8007598:	4b72      	ldr	r3, [pc, #456]	; (8007764 <checkAktifCalisma+0x12f4>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	3301      	adds	r3, #1
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	4b70      	ldr	r3, [pc, #448]	; (8007764 <checkAktifCalisma+0x12f4>)
 80075a2:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 80075a4:	4b6f      	ldr	r3, [pc, #444]	; (8007764 <checkAktifCalisma+0x12f4>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b09      	cmp	r3, #9
 80075aa:	d908      	bls.n	80075be <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 80075ac:	4b6d      	ldr	r3, [pc, #436]	; (8007764 <checkAktifCalisma+0x12f4>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 80075b2:	4b6d      	ldr	r3, [pc, #436]	; (8007768 <checkAktifCalisma+0x12f8>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	3301      	adds	r3, #1
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	4b6b      	ldr	r3, [pc, #428]	; (8007768 <checkAktifCalisma+0x12f8>)
 80075bc:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 80075be:	4b6a      	ldr	r3, [pc, #424]	; (8007768 <checkAktifCalisma+0x12f8>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2b09      	cmp	r3, #9
 80075c4:	d908      	bls.n	80075d8 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 80075c6:	4b68      	ldr	r3, [pc, #416]	; (8007768 <checkAktifCalisma+0x12f8>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80075cc:	4b67      	ldr	r3, [pc, #412]	; (800776c <checkAktifCalisma+0x12fc>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	3301      	adds	r3, #1
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	4b65      	ldr	r3, [pc, #404]	; (800776c <checkAktifCalisma+0x12fc>)
 80075d6:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80075d8:	4b64      	ldr	r3, [pc, #400]	; (800776c <checkAktifCalisma+0x12fc>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b09      	cmp	r3, #9
 80075de:	d908      	bls.n	80075f2 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80075e0:	4b62      	ldr	r3, [pc, #392]	; (800776c <checkAktifCalisma+0x12fc>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80075e6:	4b62      	ldr	r3, [pc, #392]	; (8007770 <checkAktifCalisma+0x1300>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	3301      	adds	r3, #1
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	4b60      	ldr	r3, [pc, #384]	; (8007770 <checkAktifCalisma+0x1300>)
 80075f0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80075f2:	4b5f      	ldr	r3, [pc, #380]	; (8007770 <checkAktifCalisma+0x1300>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b09      	cmp	r3, #9
 80075f8:	d908      	bls.n	800760c <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80075fa:	4b5d      	ldr	r3, [pc, #372]	; (8007770 <checkAktifCalisma+0x1300>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8007600:	4b5c      	ldr	r3, [pc, #368]	; (8007774 <checkAktifCalisma+0x1304>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	3301      	adds	r3, #1
 8007606:	b2da      	uxtb	r2, r3
 8007608:	4b5a      	ldr	r3, [pc, #360]	; (8007774 <checkAktifCalisma+0x1304>)
 800760a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800760c:	4b59      	ldr	r3, [pc, #356]	; (8007774 <checkAktifCalisma+0x1304>)
 800760e:	781a      	ldrb	r2, [r3, #0]
 8007610:	4b59      	ldr	r3, [pc, #356]	; (8007778 <checkAktifCalisma+0x1308>)
 8007612:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007616:	4b56      	ldr	r3, [pc, #344]	; (8007770 <checkAktifCalisma+0x1300>)
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	4b57      	ldr	r3, [pc, #348]	; (8007778 <checkAktifCalisma+0x1308>)
 800761c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800761e:	4b53      	ldr	r3, [pc, #332]	; (800776c <checkAktifCalisma+0x12fc>)
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	4b55      	ldr	r3, [pc, #340]	; (8007778 <checkAktifCalisma+0x1308>)
 8007624:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007626:	4b50      	ldr	r3, [pc, #320]	; (8007768 <checkAktifCalisma+0x12f8>)
 8007628:	781a      	ldrb	r2, [r3, #0]
 800762a:	4b53      	ldr	r3, [pc, #332]	; (8007778 <checkAktifCalisma+0x1308>)
 800762c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800762e:	4b4d      	ldr	r3, [pc, #308]	; (8007764 <checkAktifCalisma+0x12f4>)
 8007630:	781a      	ldrb	r2, [r3, #0]
 8007632:	4b51      	ldr	r3, [pc, #324]	; (8007778 <checkAktifCalisma+0x1308>)
 8007634:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8007636:	4b51      	ldr	r3, [pc, #324]	; (800777c <checkAktifCalisma+0x130c>)
 8007638:	2201      	movs	r2, #1
 800763a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 800763c:	4b44      	ldr	r3, [pc, #272]	; (8007750 <checkAktifCalisma+0x12e0>)
 800763e:	2200      	movs	r2, #0
 8007640:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8007642:	4b47      	ldr	r3, [pc, #284]	; (8007760 <checkAktifCalisma+0x12f0>)
 8007644:	2200      	movs	r2, #0
 8007646:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8007648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800764c:	484c      	ldr	r0, [pc, #304]	; (8007780 <checkAktifCalisma+0x1310>)
 800764e:	f002 fbd5 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d016      	beq.n	8007686 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8007658:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800765c:	4848      	ldr	r0, [pc, #288]	; (8007780 <checkAktifCalisma+0x1310>)
 800765e:	f002 fbcd 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00e      	beq.n	8007686 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8007668:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800766c:	4844      	ldr	r0, [pc, #272]	; (8007780 <checkAktifCalisma+0x1310>)
 800766e:	f002 fbc5 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d006      	beq.n	8007686 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8007678:	2140      	movs	r1, #64	; 0x40
 800767a:	4836      	ldr	r0, [pc, #216]	; (8007754 <checkAktifCalisma+0x12e4>)
 800767c:	f002 fbbe 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d103      	bne.n	800768e <checkAktifCalisma+0x121e>
			startBasili=1;
 8007686:	4b3f      	ldr	r3, [pc, #252]	; (8007784 <checkAktifCalisma+0x1314>)
 8007688:	2201      	movs	r2, #1
 800768a:	701a      	strb	r2, [r3, #0]
 800768c:	e002      	b.n	8007694 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800768e:	4b3d      	ldr	r3, [pc, #244]	; (8007784 <checkAktifCalisma+0x1314>)
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8007694:	4b3b      	ldr	r3, [pc, #236]	; (8007784 <checkAktifCalisma+0x1314>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d014      	beq.n	80076c6 <checkAktifCalisma+0x1256>
 800769c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80076a0:	4837      	ldr	r0, [pc, #220]	; (8007780 <checkAktifCalisma+0x1310>)
 80076a2:	f002 fbab 	bl	8009dfc <HAL_GPIO_ReadPin>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d10c      	bne.n	80076c6 <checkAktifCalisma+0x1256>
			hataVar=1;
 80076ac:	4b36      	ldr	r3, [pc, #216]	; (8007788 <checkAktifCalisma+0x1318>)
 80076ae:	2201      	movs	r2, #1
 80076b0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 80076b2:	2001      	movs	r0, #1
 80076b4:	f7fe f898 	bl	80057e8 <hataKoduLcdGoster>
			hata2EEPROM(1);
 80076b8:	2001      	movs	r0, #1
 80076ba:	f7fe fc27 	bl	8005f0c <hata2EEPROM>
			acilstophatasi=1;
 80076be:	4b33      	ldr	r3, [pc, #204]	; (800778c <checkAktifCalisma+0x131c>)
 80076c0:	2201      	movs	r2, #1
 80076c2:	701a      	strb	r2, [r3, #0]
 80076c4:	e018      	b.n	80076f8 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80076c6:	4b31      	ldr	r3, [pc, #196]	; (800778c <checkAktifCalisma+0x131c>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d014      	beq.n	80076f8 <checkAktifCalisma+0x1288>
 80076ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80076d2:	482b      	ldr	r0, [pc, #172]	; (8007780 <checkAktifCalisma+0x1310>)
 80076d4:	f002 fb92 	bl	8009dfc <HAL_GPIO_ReadPin>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10c      	bne.n	80076f8 <checkAktifCalisma+0x1288>
 80076de:	4b29      	ldr	r3, [pc, #164]	; (8007784 <checkAktifCalisma+0x1314>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	f083 0301 	eor.w	r3, r3, #1
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 80076ec:	4b27      	ldr	r3, [pc, #156]	; (800778c <checkAktifCalisma+0x131c>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80076f2:	2001      	movs	r0, #1
 80076f4:	f7fe f824 	bl	8005740 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80076f8:	4b25      	ldr	r3, [pc, #148]	; (8007790 <checkAktifCalisma+0x1320>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	f083 0301 	eor.w	r3, r3, #1
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d04c      	beq.n	80077a0 <checkAktifCalisma+0x1330>
 8007706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800770a:	481d      	ldr	r0, [pc, #116]	; (8007780 <checkAktifCalisma+0x1310>)
 800770c:	f002 fb76 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <checkAktifCalisma+0x12ae>
 8007716:	4b1f      	ldr	r3, [pc, #124]	; (8007794 <checkAktifCalisma+0x1324>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d040      	beq.n	80077a0 <checkAktifCalisma+0x1330>
 800771e:	4b1e      	ldr	r3, [pc, #120]	; (8007798 <checkAktifCalisma+0x1328>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d13c      	bne.n	80077a0 <checkAktifCalisma+0x1330>
			hataVar=1;
 8007726:	4b18      	ldr	r3, [pc, #96]	; (8007788 <checkAktifCalisma+0x1318>)
 8007728:	2201      	movs	r2, #1
 800772a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 800772c:	2002      	movs	r0, #2
 800772e:	f7fe f85b 	bl	80057e8 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8007732:	2002      	movs	r0, #2
 8007734:	f7fe fbea 	bl	8005f0c <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8007738:	4b18      	ldr	r3, [pc, #96]	; (800779c <checkAktifCalisma+0x132c>)
 800773a:	2201      	movs	r2, #1
 800773c:	701a      	strb	r2, [r3, #0]
 800773e:	e047      	b.n	80077d0 <checkAktifCalisma+0x1360>
 8007740:	20000ca0 	.word	0x20000ca0
 8007744:	20000c9f 	.word	0x20000c9f
 8007748:	20000c9e 	.word	0x20000c9e
 800774c:	40010800 	.word	0x40010800
 8007750:	20000c94 	.word	0x20000c94
 8007754:	40011000 	.word	0x40011000
 8007758:	20000c5b 	.word	0x20000c5b
 800775c:	20000c97 	.word	0x20000c97
 8007760:	20000c95 	.word	0x20000c95
 8007764:	20000c52 	.word	0x20000c52
 8007768:	20000c53 	.word	0x20000c53
 800776c:	200009cc 	.word	0x200009cc
 8007770:	200009cd 	.word	0x200009cd
 8007774:	20000c54 	.word	0x20000c54
 8007778:	20000b44 	.word	0x20000b44
 800777c:	20000c81 	.word	0x20000c81
 8007780:	40010c00 	.word	0x40010c00
 8007784:	20000ca3 	.word	0x20000ca3
 8007788:	20000caa 	.word	0x20000caa
 800778c:	20000ca5 	.word	0x20000ca5
 8007790:	20000cac 	.word	0x20000cac
 8007794:	20000cb6 	.word	0x20000cb6
 8007798:	20000c59 	.word	0x20000c59
 800779c:	20000ca6 	.word	0x20000ca6
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80077a0:	4b97      	ldr	r3, [pc, #604]	; (8007a00 <checkAktifCalisma+0x1590>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d013      	beq.n	80077d0 <checkAktifCalisma+0x1360>
 80077a8:	4b96      	ldr	r3, [pc, #600]	; (8007a04 <checkAktifCalisma+0x1594>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00f      	beq.n	80077d0 <checkAktifCalisma+0x1360>
 80077b0:	4b95      	ldr	r3, [pc, #596]	; (8007a08 <checkAktifCalisma+0x1598>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	f083 0301 	eor.w	r3, r3, #1
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d008      	beq.n	80077d0 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 80077be:	4b90      	ldr	r3, [pc, #576]	; (8007a00 <checkAktifCalisma+0x1590>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80077c4:	4b91      	ldr	r3, [pc, #580]	; (8007a0c <checkAktifCalisma+0x159c>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80077ca:	2002      	movs	r0, #2
 80077cc:	f7fd ffb8 	bl	8005740 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80077d0:	4b8f      	ldr	r3, [pc, #572]	; (8007a10 <checkAktifCalisma+0x15a0>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d11c      	bne.n	8007812 <checkAktifCalisma+0x13a2>
 80077d8:	4b8e      	ldr	r3, [pc, #568]	; (8007a14 <checkAktifCalisma+0x15a4>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d118      	bne.n	8007812 <checkAktifCalisma+0x13a2>
 80077e0:	4b8d      	ldr	r3, [pc, #564]	; (8007a18 <checkAktifCalisma+0x15a8>)
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d014      	beq.n	8007812 <checkAktifCalisma+0x13a2>
 80077e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077ec:	488b      	ldr	r0, [pc, #556]	; (8007a1c <checkAktifCalisma+0x15ac>)
 80077ee:	f002 fb05 	bl	8009dfc <HAL_GPIO_ReadPin>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d10c      	bne.n	8007812 <checkAktifCalisma+0x13a2>
			hataVar=1;
 80077f8:	4b89      	ldr	r3, [pc, #548]	; (8007a20 <checkAktifCalisma+0x15b0>)
 80077fa:	2201      	movs	r2, #1
 80077fc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80077fe:	2003      	movs	r0, #3
 8007800:	f7fd fff2 	bl	80057e8 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8007804:	2003      	movs	r0, #3
 8007806:	f7fe fb81 	bl	8005f0c <hata2EEPROM>
			basinchatasi=1;
 800780a:	4b86      	ldr	r3, [pc, #536]	; (8007a24 <checkAktifCalisma+0x15b4>)
 800780c:	2201      	movs	r2, #1
 800780e:	701a      	strb	r2, [r3, #0]
 8007810:	e015      	b.n	800783e <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8007812:	4b84      	ldr	r3, [pc, #528]	; (8007a24 <checkAktifCalisma+0x15b4>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d011      	beq.n	800783e <checkAktifCalisma+0x13ce>
 800781a:	4b7d      	ldr	r3, [pc, #500]	; (8007a10 <checkAktifCalisma+0x15a0>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d10d      	bne.n	800783e <checkAktifCalisma+0x13ce>
 8007822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007826:	4880      	ldr	r0, [pc, #512]	; (8007a28 <checkAktifCalisma+0x15b8>)
 8007828:	f002 fae8 	bl	8009dfc <HAL_GPIO_ReadPin>
 800782c:	4603      	mov	r3, r0
 800782e:	2b01      	cmp	r3, #1
 8007830:	d105      	bne.n	800783e <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8007832:	4b7c      	ldr	r3, [pc, #496]	; (8007a24 <checkAktifCalisma+0x15b4>)
 8007834:	2200      	movs	r2, #0
 8007836:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8007838:	2003      	movs	r0, #3
 800783a:	f7fd ff81 	bl	8005740 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800783e:	4b7b      	ldr	r3, [pc, #492]	; (8007a2c <checkAktifCalisma+0x15bc>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d103      	bne.n	800784e <checkAktifCalisma+0x13de>
 8007846:	4b7a      	ldr	r3, [pc, #488]	; (8007a30 <checkAktifCalisma+0x15c0>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d01c      	beq.n	8007888 <checkAktifCalisma+0x1418>
 800784e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007852:	4878      	ldr	r0, [pc, #480]	; (8007a34 <checkAktifCalisma+0x15c4>)
 8007854:	f002 fad2 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007858:	4603      	mov	r3, r0
 800785a:	2b01      	cmp	r3, #1
 800785c:	d114      	bne.n	8007888 <checkAktifCalisma+0x1418>
 800785e:	4b76      	ldr	r3, [pc, #472]	; (8007a38 <checkAktifCalisma+0x15c8>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d003      	beq.n	800786e <checkAktifCalisma+0x13fe>
 8007866:	4b74      	ldr	r3, [pc, #464]	; (8007a38 <checkAktifCalisma+0x15c8>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	2b03      	cmp	r3, #3
 800786c:	d10c      	bne.n	8007888 <checkAktifCalisma+0x1418>
			hataVar=1;
 800786e:	4b6c      	ldr	r3, [pc, #432]	; (8007a20 <checkAktifCalisma+0x15b0>)
 8007870:	2201      	movs	r2, #1
 8007872:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8007874:	2004      	movs	r0, #4
 8007876:	f7fd ffb7 	bl	80057e8 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800787a:	2004      	movs	r0, #4
 800787c:	f7fe fb46 	bl	8005f0c <hata2EEPROM>
			katkapisivicihatasi=1;
 8007880:	4b6e      	ldr	r3, [pc, #440]	; (8007a3c <checkAktifCalisma+0x15cc>)
 8007882:	2201      	movs	r2, #1
 8007884:	701a      	strb	r2, [r3, #0]
 8007886:	e01f      	b.n	80078c8 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007888:	4b6c      	ldr	r3, [pc, #432]	; (8007a3c <checkAktifCalisma+0x15cc>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d01b      	beq.n	80078c8 <checkAktifCalisma+0x1458>
 8007890:	4b6b      	ldr	r3, [pc, #428]	; (8007a40 <checkAktifCalisma+0x15d0>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d017      	beq.n	80078c8 <checkAktifCalisma+0x1458>
 8007898:	4b64      	ldr	r3, [pc, #400]	; (8007a2c <checkAktifCalisma+0x15bc>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	f083 0301 	eor.w	r3, r3, #1
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d010      	beq.n	80078c8 <checkAktifCalisma+0x1458>
 80078a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078aa:	4862      	ldr	r0, [pc, #392]	; (8007a34 <checkAktifCalisma+0x15c4>)
 80078ac:	f002 faa6 	bl	8009dfc <HAL_GPIO_ReadPin>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d108      	bne.n	80078c8 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 80078b6:	4b61      	ldr	r3, [pc, #388]	; (8007a3c <checkAktifCalisma+0x15cc>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80078bc:	4b5c      	ldr	r3, [pc, #368]	; (8007a30 <checkAktifCalisma+0x15c0>)
 80078be:	2200      	movs	r2, #0
 80078c0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80078c2:	2004      	movs	r0, #4
 80078c4:	f7fd ff3c 	bl	8005740 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80078c8:	4b58      	ldr	r3, [pc, #352]	; (8007a2c <checkAktifCalisma+0x15bc>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d103      	bne.n	80078d8 <checkAktifCalisma+0x1468>
 80078d0:	4b5c      	ldr	r3, [pc, #368]	; (8007a44 <checkAktifCalisma+0x15d4>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d01c      	beq.n	8007912 <checkAktifCalisma+0x14a2>
 80078d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078dc:	4855      	ldr	r0, [pc, #340]	; (8007a34 <checkAktifCalisma+0x15c4>)
 80078de:	f002 fa8d 	bl	8009dfc <HAL_GPIO_ReadPin>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d114      	bne.n	8007912 <checkAktifCalisma+0x14a2>
 80078e8:	4b53      	ldr	r3, [pc, #332]	; (8007a38 <checkAktifCalisma+0x15c8>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d003      	beq.n	80078f8 <checkAktifCalisma+0x1488>
 80078f0:	4b51      	ldr	r3, [pc, #324]	; (8007a38 <checkAktifCalisma+0x15c8>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d10c      	bne.n	8007912 <checkAktifCalisma+0x14a2>
			hataVar=1;
 80078f8:	4b49      	ldr	r3, [pc, #292]	; (8007a20 <checkAktifCalisma+0x15b0>)
 80078fa:	2201      	movs	r2, #1
 80078fc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80078fe:	2005      	movs	r0, #5
 8007900:	f7fd ff72 	bl	80057e8 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8007904:	2005      	movs	r0, #5
 8007906:	f7fe fb01 	bl	8005f0c <hata2EEPROM>
			tablakapisivicihatasi=1;
 800790a:	4b4f      	ldr	r3, [pc, #316]	; (8007a48 <checkAktifCalisma+0x15d8>)
 800790c:	2201      	movs	r2, #1
 800790e:	701a      	strb	r2, [r3, #0]
 8007910:	e023      	b.n	800795a <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8007912:	4b4d      	ldr	r3, [pc, #308]	; (8007a48 <checkAktifCalisma+0x15d8>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d01f      	beq.n	800795a <checkAktifCalisma+0x14ea>
 800791a:	4b49      	ldr	r3, [pc, #292]	; (8007a40 <checkAktifCalisma+0x15d0>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d01b      	beq.n	800795a <checkAktifCalisma+0x14ea>
 8007922:	4b42      	ldr	r3, [pc, #264]	; (8007a2c <checkAktifCalisma+0x15bc>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	f083 0301 	eor.w	r3, r3, #1
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b00      	cmp	r3, #0
 800792e:	d014      	beq.n	800795a <checkAktifCalisma+0x14ea>
 8007930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007934:	483f      	ldr	r0, [pc, #252]	; (8007a34 <checkAktifCalisma+0x15c4>)
 8007936:	f002 fa61 	bl	8009dfc <HAL_GPIO_ReadPin>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10c      	bne.n	800795a <checkAktifCalisma+0x14ea>
 8007940:	4b3f      	ldr	r3, [pc, #252]	; (8007a40 <checkAktifCalisma+0x15d0>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d008      	beq.n	800795a <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8007948:	4b3f      	ldr	r3, [pc, #252]	; (8007a48 <checkAktifCalisma+0x15d8>)
 800794a:	2200      	movs	r2, #0
 800794c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800794e:	4b3d      	ldr	r3, [pc, #244]	; (8007a44 <checkAktifCalisma+0x15d4>)
 8007950:	2200      	movs	r2, #0
 8007952:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007954:	2005      	movs	r0, #5
 8007956:	f7fd fef3 	bl	8005740 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800795a:	4b2f      	ldr	r3, [pc, #188]	; (8007a18 <checkAktifCalisma+0x15a8>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d107      	bne.n	8007972 <checkAktifCalisma+0x1502>
 8007962:	4b29      	ldr	r3, [pc, #164]	; (8007a08 <checkAktifCalisma+0x1598>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d103      	bne.n	8007972 <checkAktifCalisma+0x1502>
 800796a:	4b38      	ldr	r3, [pc, #224]	; (8007a4c <checkAktifCalisma+0x15dc>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d014      	beq.n	800799c <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8007972:	4b37      	ldr	r3, [pc, #220]	; (8007a50 <checkAktifCalisma+0x15e0>)
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	4b37      	ldr	r3, [pc, #220]	; (8007a54 <checkAktifCalisma+0x15e4>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	4a36      	ldr	r2, [pc, #216]	; (8007a58 <checkAktifCalisma+0x15e8>)
 800797e:	7812      	ldrb	r2, [r2, #0]
 8007980:	4293      	cmp	r3, r2
 8007982:	d30b      	bcc.n	800799c <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007984:	4b26      	ldr	r3, [pc, #152]	; (8007a20 <checkAktifCalisma+0x15b0>)
 8007986:	2201      	movs	r2, #1
 8007988:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800798a:	2006      	movs	r0, #6
 800798c:	f7fd ff2c 	bl	80057e8 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007990:	2006      	movs	r0, #6
 8007992:	f7fe fabb 	bl	8005f0c <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8007996:	4b31      	ldr	r3, [pc, #196]	; (8007a5c <checkAktifCalisma+0x15ec>)
 8007998:	2201      	movs	r2, #1
 800799a:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800799c:	4b2f      	ldr	r3, [pc, #188]	; (8007a5c <checkAktifCalisma+0x15ec>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d013      	beq.n	80079cc <checkAktifCalisma+0x155c>
 80079a4:	2108      	movs	r1, #8
 80079a6:	4823      	ldr	r0, [pc, #140]	; (8007a34 <checkAktifCalisma+0x15c4>)
 80079a8:	f002 fa28 	bl	8009dfc <HAL_GPIO_ReadPin>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00c      	beq.n	80079cc <checkAktifCalisma+0x155c>
 80079b2:	4b1e      	ldr	r3, [pc, #120]	; (8007a2c <checkAktifCalisma+0x15bc>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	f083 0301 	eor.w	r3, r3, #1
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d005      	beq.n	80079cc <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 80079c0:	4b26      	ldr	r3, [pc, #152]	; (8007a5c <checkAktifCalisma+0x15ec>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80079c6:	2006      	movs	r0, #6
 80079c8:	f7fd feba 	bl	8005740 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80079cc:	4b24      	ldr	r3, [pc, #144]	; (8007a60 <checkAktifCalisma+0x15f0>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10b      	bne.n	80079ec <checkAktifCalisma+0x157c>
 80079d4:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <checkAktifCalisma+0x1598>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d107      	bne.n	80079ec <checkAktifCalisma+0x157c>
 80079dc:	4b21      	ldr	r3, [pc, #132]	; (8007a64 <checkAktifCalisma+0x15f4>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d103      	bne.n	80079ec <checkAktifCalisma+0x157c>
 80079e4:	4b19      	ldr	r3, [pc, #100]	; (8007a4c <checkAktifCalisma+0x15dc>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d03f      	beq.n	8007a6c <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 80079ec:	4b1e      	ldr	r3, [pc, #120]	; (8007a68 <checkAktifCalisma+0x15f8>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80079f2:	4b0f      	ldr	r3, [pc, #60]	; (8007a30 <checkAktifCalisma+0x15c0>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80079f8:	4b12      	ldr	r3, [pc, #72]	; (8007a44 <checkAktifCalisma+0x15d4>)
 80079fa:	2201      	movs	r2, #1
 80079fc:	701a      	strb	r2, [r3, #0]
 80079fe:	e03c      	b.n	8007a7a <checkAktifCalisma+0x160a>
 8007a00:	20000ca6 	.word	0x20000ca6
 8007a04:	20000cac 	.word	0x20000cac
 8007a08:	20000c8d 	.word	0x20000c8d
 8007a0c:	20000cb6 	.word	0x20000cb6
 8007a10:	20000c58 	.word	0x20000c58
 8007a14:	20000c5c 	.word	0x20000c5c
 8007a18:	20000ca9 	.word	0x20000ca9
 8007a1c:	40011000 	.word	0x40011000
 8007a20:	20000caa 	.word	0x20000caa
 8007a24:	20000cb3 	.word	0x20000cb3
 8007a28:	40010c00 	.word	0x40010c00
 8007a2c:	20000ca3 	.word	0x20000ca3
 8007a30:	20000cb7 	.word	0x20000cb7
 8007a34:	40010800 	.word	0x40010800
 8007a38:	20000c5d 	.word	0x20000c5d
 8007a3c:	20000cb4 	.word	0x20000cb4
 8007a40:	20000c97 	.word	0x20000c97
 8007a44:	20000cb8 	.word	0x20000cb8
 8007a48:	20000cb5 	.word	0x20000cb5
 8007a4c:	20000c8c 	.word	0x20000c8c
 8007a50:	20000be0 	.word	0x20000be0
 8007a54:	20000bf4 	.word	0x20000bf4
 8007a58:	20000c6d 	.word	0x20000c6d
 8007a5c:	20000ca4 	.word	0x20000ca4
 8007a60:	20000c8a 	.word	0x20000c8a
 8007a64:	20000c8b 	.word	0x20000c8b
 8007a68:	20000cab 	.word	0x20000cab
		} else {
			makineCalisiyor=1;
 8007a6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ae8 <checkAktifCalisma+0x1678>)
 8007a6e:	2201      	movs	r2, #1
 8007a70:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007a72:	4b1e      	ldr	r3, [pc, #120]	; (8007aec <checkAktifCalisma+0x167c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a1e      	ldr	r2, [pc, #120]	; (8007af0 <checkAktifCalisma+0x1680>)
 8007a78:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007a7a:	4b1e      	ldr	r3, [pc, #120]	; (8007af4 <checkAktifCalisma+0x1684>)
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d02f      	beq.n	8007ae2 <checkAktifCalisma+0x1672>
 8007a82:	4b1d      	ldr	r3, [pc, #116]	; (8007af8 <checkAktifCalisma+0x1688>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	f083 0301 	eor.w	r3, r3, #1
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d028      	beq.n	8007ae2 <checkAktifCalisma+0x1672>
 8007a90:	4b1a      	ldr	r3, [pc, #104]	; (8007afc <checkAktifCalisma+0x168c>)
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	f083 0301 	eor.w	r3, r3, #1
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d021      	beq.n	8007ae2 <checkAktifCalisma+0x1672>
 8007a9e:	4b18      	ldr	r3, [pc, #96]	; (8007b00 <checkAktifCalisma+0x1690>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	f083 0301 	eor.w	r3, r3, #1
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d01a      	beq.n	8007ae2 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007aac:	4b15      	ldr	r3, [pc, #84]	; (8007b04 <checkAktifCalisma+0x1694>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	f083 0301 	eor.w	r3, r3, #1
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d013      	beq.n	8007ae2 <checkAktifCalisma+0x1672>
 8007aba:	4b13      	ldr	r3, [pc, #76]	; (8007b08 <checkAktifCalisma+0x1698>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	f083 0301 	eor.w	r3, r3, #1
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00c      	beq.n	8007ae2 <checkAktifCalisma+0x1672>
 8007ac8:	4b10      	ldr	r3, [pc, #64]	; (8007b0c <checkAktifCalisma+0x169c>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	f083 0301 	eor.w	r3, r3, #1
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d005      	beq.n	8007ae2 <checkAktifCalisma+0x1672>
			hataVar=0;
 8007ad6:	4b07      	ldr	r3, [pc, #28]	; (8007af4 <checkAktifCalisma+0x1684>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007adc:	2007      	movs	r0, #7
 8007ade:	f7fd fe2f 	bl	8005740 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007ae2:	bf00      	nop
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000cab 	.word	0x20000cab
 8007aec:	20000be0 	.word	0x20000be0
 8007af0:	20000bf4 	.word	0x20000bf4
 8007af4:	20000caa 	.word	0x20000caa
 8007af8:	20000ca5 	.word	0x20000ca5
 8007afc:	20000ca6 	.word	0x20000ca6
 8007b00:	20000cb3 	.word	0x20000cb3
 8007b04:	20000cb4 	.word	0x20000cb4
 8007b08:	20000cb5 	.word	0x20000cb5
 8007b0c:	20000ca4 	.word	0x20000ca4

08007b10 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007b14:	4b8b      	ldr	r3, [pc, #556]	; (8007d44 <checkDemoModCalisma+0x234>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	f040 8229 	bne.w	8007f70 <checkDemoModCalisma+0x460>
 8007b1e:	4b8a      	ldr	r3, [pc, #552]	; (8007d48 <checkDemoModCalisma+0x238>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 8224 	beq.w	8007f70 <checkDemoModCalisma+0x460>
 8007b28:	4b88      	ldr	r3, [pc, #544]	; (8007d4c <checkDemoModCalisma+0x23c>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f040 821f 	bne.w	8007f70 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007b32:	2102      	movs	r1, #2
 8007b34:	4886      	ldr	r0, [pc, #536]	; (8007d50 <checkDemoModCalisma+0x240>)
 8007b36:	f002 f961 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d11d      	bne.n	8007b7c <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007b40:	4b84      	ldr	r3, [pc, #528]	; (8007d54 <checkDemoModCalisma+0x244>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	f083 0301 	eor.w	r3, r3, #1
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d016      	beq.n	8007b7c <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007b4e:	4b82      	ldr	r3, [pc, #520]	; (8007d58 <checkDemoModCalisma+0x248>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	f083 0301 	eor.w	r3, r3, #1
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00f      	beq.n	8007b7c <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007b5c:	4b7f      	ldr	r3, [pc, #508]	; (8007d5c <checkDemoModCalisma+0x24c>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	f083 0301 	eor.w	r3, r3, #1
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d008      	beq.n	8007b7c <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	2104      	movs	r1, #4
 8007b6e:	487c      	ldr	r0, [pc, #496]	; (8007d60 <checkDemoModCalisma+0x250>)
 8007b70:	f002 f95b 	bl	8009e2a <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007b74:	4b7b      	ldr	r3, [pc, #492]	; (8007d64 <checkDemoModCalisma+0x254>)
 8007b76:	2201      	movs	r2, #1
 8007b78:	701a      	strb	r2, [r3, #0]
 8007b7a:	e00e      	b.n	8007b9a <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007b7c:	2102      	movs	r1, #2
 8007b7e:	4874      	ldr	r0, [pc, #464]	; (8007d50 <checkDemoModCalisma+0x240>)
 8007b80:	f002 f93c 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d107      	bne.n	8007b9a <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2104      	movs	r1, #4
 8007b8e:	4874      	ldr	r0, [pc, #464]	; (8007d60 <checkDemoModCalisma+0x250>)
 8007b90:	f002 f94b 	bl	8009e2a <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007b94:	4b73      	ldr	r3, [pc, #460]	; (8007d64 <checkDemoModCalisma+0x254>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007b9a:	4b72      	ldr	r3, [pc, #456]	; (8007d64 <checkDemoModCalisma+0x254>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10b      	bne.n	8007bba <checkDemoModCalisma+0xaa>
 8007ba2:	4b6d      	ldr	r3, [pc, #436]	; (8007d58 <checkDemoModCalisma+0x248>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d107      	bne.n	8007bba <checkDemoModCalisma+0xaa>
 8007baa:	4b6c      	ldr	r3, [pc, #432]	; (8007d5c <checkDemoModCalisma+0x24c>)
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d103      	bne.n	8007bba <checkDemoModCalisma+0xaa>
 8007bb2:	4b68      	ldr	r3, [pc, #416]	; (8007d54 <checkDemoModCalisma+0x244>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00c      	beq.n	8007bd4 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bc0:	4867      	ldr	r0, [pc, #412]	; (8007d60 <checkDemoModCalisma+0x250>)
 8007bc2:	f002 f932 	bl	8009e2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bcc:	4864      	ldr	r0, [pc, #400]	; (8007d60 <checkDemoModCalisma+0x250>)
 8007bce:	f002 f92c 	bl	8009e2a <HAL_GPIO_WritePin>
 8007bd2:	e00b      	b.n	8007bec <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bda:	4861      	ldr	r0, [pc, #388]	; (8007d60 <checkDemoModCalisma+0x250>)
 8007bdc:	f002 f925 	bl	8009e2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007be0:	2200      	movs	r2, #0
 8007be2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007be6:	485e      	ldr	r0, [pc, #376]	; (8007d60 <checkDemoModCalisma+0x250>)
 8007be8:	f002 f91f 	bl	8009e2a <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007bec:	2102      	movs	r1, #2
 8007bee:	4858      	ldr	r0, [pc, #352]	; (8007d50 <checkDemoModCalisma+0x240>)
 8007bf0:	f002 f904 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d10d      	bne.n	8007c16 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007bfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bfe:	4854      	ldr	r0, [pc, #336]	; (8007d50 <checkDemoModCalisma+0x240>)
 8007c00:	f002 f8fc 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d105      	bne.n	8007c16 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007c0a:	4b56      	ldr	r3, [pc, #344]	; (8007d64 <checkDemoModCalisma+0x254>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	f083 0301 	eor.w	r3, r3, #1
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007c16:	2102      	movs	r1, #2
 8007c18:	484d      	ldr	r0, [pc, #308]	; (8007d50 <checkDemoModCalisma+0x240>)
 8007c1a:	f002 f8ef 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d125      	bne.n	8007c70 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007c24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c28:	4849      	ldr	r0, [pc, #292]	; (8007d50 <checkDemoModCalisma+0x240>)
 8007c2a:	f002 f8e7 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d11d      	bne.n	8007c70 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007c34:	4b4b      	ldr	r3, [pc, #300]	; (8007d64 <checkDemoModCalisma+0x254>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	f083 0301 	eor.w	r3, r3, #1
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d016      	beq.n	8007c70 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007c42:	4b44      	ldr	r3, [pc, #272]	; (8007d54 <checkDemoModCalisma+0x244>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	f083 0301 	eor.w	r3, r3, #1
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00f      	beq.n	8007c70 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007c50:	4b42      	ldr	r3, [pc, #264]	; (8007d5c <checkDemoModCalisma+0x24c>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	f083 0301 	eor.w	r3, r3, #1
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d008      	beq.n	8007c70 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007c5e:	2201      	movs	r2, #1
 8007c60:	2120      	movs	r1, #32
 8007c62:	483b      	ldr	r0, [pc, #236]	; (8007d50 <checkDemoModCalisma+0x240>)
 8007c64:	f002 f8e1 	bl	8009e2a <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007c68:	4b3b      	ldr	r3, [pc, #236]	; (8007d58 <checkDemoModCalisma+0x248>)
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	e007      	b.n	8007c80 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007c70:	2200      	movs	r2, #0
 8007c72:	2120      	movs	r1, #32
 8007c74:	4836      	ldr	r0, [pc, #216]	; (8007d50 <checkDemoModCalisma+0x240>)
 8007c76:	f002 f8d8 	bl	8009e2a <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007c7a:	4b37      	ldr	r3, [pc, #220]	; (8007d58 <checkDemoModCalisma+0x248>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007c80:	2102      	movs	r1, #2
 8007c82:	4833      	ldr	r0, [pc, #204]	; (8007d50 <checkDemoModCalisma+0x240>)
 8007c84:	f002 f8ba 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d125      	bne.n	8007cda <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007c8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c92:	482f      	ldr	r0, [pc, #188]	; (8007d50 <checkDemoModCalisma+0x240>)
 8007c94:	f002 f8b2 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d11d      	bne.n	8007cda <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007c9e:	4b31      	ldr	r3, [pc, #196]	; (8007d64 <checkDemoModCalisma+0x254>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	f083 0301 	eor.w	r3, r3, #1
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d016      	beq.n	8007cda <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007cac:	4b2a      	ldr	r3, [pc, #168]	; (8007d58 <checkDemoModCalisma+0x248>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	f083 0301 	eor.w	r3, r3, #1
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00f      	beq.n	8007cda <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007cba:	4b26      	ldr	r3, [pc, #152]	; (8007d54 <checkDemoModCalisma+0x244>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	f083 0301 	eor.w	r3, r3, #1
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d008      	beq.n	8007cda <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007cc8:	2201      	movs	r2, #1
 8007cca:	2110      	movs	r1, #16
 8007ccc:	4820      	ldr	r0, [pc, #128]	; (8007d50 <checkDemoModCalisma+0x240>)
 8007cce:	f002 f8ac 	bl	8009e2a <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007cd2:	4b22      	ldr	r3, [pc, #136]	; (8007d5c <checkDemoModCalisma+0x24c>)
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	701a      	strb	r2, [r3, #0]
 8007cd8:	e007      	b.n	8007cea <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007cda:	2200      	movs	r2, #0
 8007cdc:	2110      	movs	r1, #16
 8007cde:	481c      	ldr	r0, [pc, #112]	; (8007d50 <checkDemoModCalisma+0x240>)
 8007ce0:	f002 f8a3 	bl	8009e2a <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007ce4:	4b1d      	ldr	r3, [pc, #116]	; (8007d5c <checkDemoModCalisma+0x24c>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007cea:	2104      	movs	r1, #4
 8007cec:	4818      	ldr	r0, [pc, #96]	; (8007d50 <checkDemoModCalisma+0x240>)
 8007cee:	f002 f885 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d139      	bne.n	8007d6c <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007cf8:	4b1a      	ldr	r3, [pc, #104]	; (8007d64 <checkDemoModCalisma+0x254>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	f083 0301 	eor.w	r3, r3, #1
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d032      	beq.n	8007d6c <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007d06:	4b15      	ldr	r3, [pc, #84]	; (8007d5c <checkDemoModCalisma+0x24c>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	f083 0301 	eor.w	r3, r3, #1
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d02b      	beq.n	8007d6c <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007d14:	4b10      	ldr	r3, [pc, #64]	; (8007d58 <checkDemoModCalisma+0x248>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	f083 0301 	eor.w	r3, r3, #1
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d024      	beq.n	8007d6c <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007d22:	2201      	movs	r2, #1
 8007d24:	2102      	movs	r1, #2
 8007d26:	480e      	ldr	r0, [pc, #56]	; (8007d60 <checkDemoModCalisma+0x250>)
 8007d28:	f002 f87f 	bl	8009e2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	2101      	movs	r1, #1
 8007d30:	480b      	ldr	r0, [pc, #44]	; (8007d60 <checkDemoModCalisma+0x250>)
 8007d32:	f002 f87a 	bl	8009e2a <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007d36:	4b07      	ldr	r3, [pc, #28]	; (8007d54 <checkDemoModCalisma+0x244>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <checkDemoModCalisma+0x258>)
 8007d3e:	2201      	movs	r2, #1
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	e027      	b.n	8007d94 <checkDemoModCalisma+0x284>
 8007d44:	20000c73 	.word	0x20000c73
 8007d48:	20000ca7 	.word	0x20000ca7
 8007d4c:	20000c72 	.word	0x20000c72
 8007d50:	40011000 	.word	0x40011000
 8007d54:	20000cae 	.word	0x20000cae
 8007d58:	20000caf 	.word	0x20000caf
 8007d5c:	20000cb0 	.word	0x20000cb0
 8007d60:	40010c00 	.word	0x40010c00
 8007d64:	20000cad 	.word	0x20000cad
 8007d68:	20000c93 	.word	0x20000c93
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007d6c:	2104      	movs	r1, #4
 8007d6e:	48a0      	ldr	r0, [pc, #640]	; (8007ff0 <checkDemoModCalisma+0x4e0>)
 8007d70:	f002 f844 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d10c      	bne.n	8007d94 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2102      	movs	r1, #2
 8007d7e:	489d      	ldr	r0, [pc, #628]	; (8007ff4 <checkDemoModCalisma+0x4e4>)
 8007d80:	f002 f853 	bl	8009e2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007d84:	2200      	movs	r2, #0
 8007d86:	2101      	movs	r1, #1
 8007d88:	489a      	ldr	r0, [pc, #616]	; (8007ff4 <checkDemoModCalisma+0x4e4>)
 8007d8a:	f002 f84e 	bl	8009e2a <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007d8e:	4b9a      	ldr	r3, [pc, #616]	; (8007ff8 <checkDemoModCalisma+0x4e8>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007d94:	2104      	movs	r1, #4
 8007d96:	4896      	ldr	r0, [pc, #600]	; (8007ff0 <checkDemoModCalisma+0x4e0>)
 8007d98:	f002 f830 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d10d      	bne.n	8007dbe <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007da2:	2201      	movs	r2, #1
 8007da4:	2180      	movs	r1, #128	; 0x80
 8007da6:	4895      	ldr	r0, [pc, #596]	; (8007ffc <checkDemoModCalisma+0x4ec>)
 8007da8:	f002 f83f 	bl	8009e2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007dac:	2201      	movs	r2, #1
 8007dae:	2120      	movs	r1, #32
 8007db0:	4892      	ldr	r0, [pc, #584]	; (8007ffc <checkDemoModCalisma+0x4ec>)
 8007db2:	f002 f83a 	bl	8009e2a <HAL_GPIO_WritePin>
			timer3 = millis;
 8007db6:	4b92      	ldr	r3, [pc, #584]	; (8008000 <checkDemoModCalisma+0x4f0>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a92      	ldr	r2, [pc, #584]	; (8008004 <checkDemoModCalisma+0x4f4>)
 8007dbc:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007dbe:	4b90      	ldr	r3, [pc, #576]	; (8008000 <checkDemoModCalisma+0x4f0>)
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	4b90      	ldr	r3, [pc, #576]	; (8008004 <checkDemoModCalisma+0x4f4>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	2b04      	cmp	r3, #4
 8007dca:	d909      	bls.n	8007de0 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2180      	movs	r1, #128	; 0x80
 8007dd0:	488a      	ldr	r0, [pc, #552]	; (8007ffc <checkDemoModCalisma+0x4ec>)
 8007dd2:	f002 f82a 	bl	8009e2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2120      	movs	r1, #32
 8007dda:	4888      	ldr	r0, [pc, #544]	; (8007ffc <checkDemoModCalisma+0x4ec>)
 8007ddc:	f002 f825 	bl	8009e2a <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007de0:	2102      	movs	r1, #2
 8007de2:	4883      	ldr	r0, [pc, #524]	; (8007ff0 <checkDemoModCalisma+0x4e0>)
 8007de4:	f002 f80a 	bl	8009dfc <HAL_GPIO_ReadPin>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d108      	bne.n	8007e00 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007dee:	2201      	movs	r2, #1
 8007df0:	2140      	movs	r1, #64	; 0x40
 8007df2:	4882      	ldr	r0, [pc, #520]	; (8007ffc <checkDemoModCalisma+0x4ec>)
 8007df4:	f002 f819 	bl	8009e2a <HAL_GPIO_WritePin>
			timer3 = millis;
 8007df8:	4b81      	ldr	r3, [pc, #516]	; (8008000 <checkDemoModCalisma+0x4f0>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a81      	ldr	r2, [pc, #516]	; (8008004 <checkDemoModCalisma+0x4f4>)
 8007dfe:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007e00:	4b7f      	ldr	r3, [pc, #508]	; (8008000 <checkDemoModCalisma+0x4f0>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	4b7f      	ldr	r3, [pc, #508]	; (8008004 <checkDemoModCalisma+0x4f4>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	2b04      	cmp	r3, #4
 8007e0c:	d904      	bls.n	8007e18 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2140      	movs	r1, #64	; 0x40
 8007e12:	487a      	ldr	r0, [pc, #488]	; (8007ffc <checkDemoModCalisma+0x4ec>)
 8007e14:	f002 f809 	bl	8009e2a <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007e18:	4b7b      	ldr	r3, [pc, #492]	; (8008008 <checkDemoModCalisma+0x4f8>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d058      	beq.n	8007ed2 <checkDemoModCalisma+0x3c2>
 8007e20:	4b7a      	ldr	r3, [pc, #488]	; (800800c <checkDemoModCalisma+0x4fc>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d054      	beq.n	8007ed2 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007e28:	4b79      	ldr	r3, [pc, #484]	; (8008010 <checkDemoModCalisma+0x500>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	4b77      	ldr	r3, [pc, #476]	; (8008010 <checkDemoModCalisma+0x500>)
 8007e32:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007e34:	4b76      	ldr	r3, [pc, #472]	; (8008010 <checkDemoModCalisma+0x500>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b09      	cmp	r3, #9
 8007e3a:	d908      	bls.n	8007e4e <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007e3c:	4b74      	ldr	r3, [pc, #464]	; (8008010 <checkDemoModCalisma+0x500>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007e42:	4b74      	ldr	r3, [pc, #464]	; (8008014 <checkDemoModCalisma+0x504>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	3301      	adds	r3, #1
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	4b72      	ldr	r3, [pc, #456]	; (8008014 <checkDemoModCalisma+0x504>)
 8007e4c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007e4e:	4b71      	ldr	r3, [pc, #452]	; (8008014 <checkDemoModCalisma+0x504>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b09      	cmp	r3, #9
 8007e54:	d908      	bls.n	8007e68 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007e56:	4b6f      	ldr	r3, [pc, #444]	; (8008014 <checkDemoModCalisma+0x504>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007e5c:	4b6e      	ldr	r3, [pc, #440]	; (8008018 <checkDemoModCalisma+0x508>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	3301      	adds	r3, #1
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	4b6c      	ldr	r3, [pc, #432]	; (8008018 <checkDemoModCalisma+0x508>)
 8007e66:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007e68:	4b6b      	ldr	r3, [pc, #428]	; (8008018 <checkDemoModCalisma+0x508>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b09      	cmp	r3, #9
 8007e6e:	d908      	bls.n	8007e82 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007e70:	4b69      	ldr	r3, [pc, #420]	; (8008018 <checkDemoModCalisma+0x508>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007e76:	4b69      	ldr	r3, [pc, #420]	; (800801c <checkDemoModCalisma+0x50c>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	4b67      	ldr	r3, [pc, #412]	; (800801c <checkDemoModCalisma+0x50c>)
 8007e80:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007e82:	4b66      	ldr	r3, [pc, #408]	; (800801c <checkDemoModCalisma+0x50c>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b09      	cmp	r3, #9
 8007e88:	d908      	bls.n	8007e9c <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007e8a:	4b64      	ldr	r3, [pc, #400]	; (800801c <checkDemoModCalisma+0x50c>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007e90:	4b63      	ldr	r3, [pc, #396]	; (8008020 <checkDemoModCalisma+0x510>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	3301      	adds	r3, #1
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	4b61      	ldr	r3, [pc, #388]	; (8008020 <checkDemoModCalisma+0x510>)
 8007e9a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007e9c:	4b60      	ldr	r3, [pc, #384]	; (8008020 <checkDemoModCalisma+0x510>)
 8007e9e:	781a      	ldrb	r2, [r3, #0]
 8007ea0:	4b60      	ldr	r3, [pc, #384]	; (8008024 <checkDemoModCalisma+0x514>)
 8007ea2:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007ea6:	4b5d      	ldr	r3, [pc, #372]	; (800801c <checkDemoModCalisma+0x50c>)
 8007ea8:	781a      	ldrb	r2, [r3, #0]
 8007eaa:	4b5e      	ldr	r3, [pc, #376]	; (8008024 <checkDemoModCalisma+0x514>)
 8007eac:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007eae:	4b5a      	ldr	r3, [pc, #360]	; (8008018 <checkDemoModCalisma+0x508>)
 8007eb0:	781a      	ldrb	r2, [r3, #0]
 8007eb2:	4b5c      	ldr	r3, [pc, #368]	; (8008024 <checkDemoModCalisma+0x514>)
 8007eb4:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007eb6:	4b57      	ldr	r3, [pc, #348]	; (8008014 <checkDemoModCalisma+0x504>)
 8007eb8:	781a      	ldrb	r2, [r3, #0]
 8007eba:	4b5a      	ldr	r3, [pc, #360]	; (8008024 <checkDemoModCalisma+0x514>)
 8007ebc:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007ebe:	4b54      	ldr	r3, [pc, #336]	; (8008010 <checkDemoModCalisma+0x500>)
 8007ec0:	781a      	ldrb	r2, [r3, #0]
 8007ec2:	4b58      	ldr	r3, [pc, #352]	; (8008024 <checkDemoModCalisma+0x514>)
 8007ec4:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8007ec6:	4b58      	ldr	r3, [pc, #352]	; (8008028 <checkDemoModCalisma+0x518>)
 8007ec8:	2201      	movs	r2, #1
 8007eca:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007ecc:	4b4f      	ldr	r3, [pc, #316]	; (800800c <checkDemoModCalisma+0x4fc>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8007ed2:	4b56      	ldr	r3, [pc, #344]	; (800802c <checkDemoModCalisma+0x51c>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f040 8087 	bne.w	8007fea <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007edc:	4a54      	ldr	r2, [pc, #336]	; (8008030 <checkDemoModCalisma+0x520>)
 8007ede:	2101      	movs	r1, #1
 8007ee0:	2002      	movs	r0, #2
 8007ee2:	f7f8 fcfd 	bl	80008e0 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8007ee6:	4a53      	ldr	r2, [pc, #332]	; (8008034 <checkDemoModCalisma+0x524>)
 8007ee8:	2101      	movs	r1, #1
 8007eea:	2001      	movs	r0, #1
 8007eec:	f7f8 fcf8 	bl	80008e0 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007ef0:	4b4b      	ldr	r3, [pc, #300]	; (8008020 <checkDemoModCalisma+0x510>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	220a      	movs	r2, #10
 8007ef6:	4950      	ldr	r1, [pc, #320]	; (8008038 <checkDemoModCalisma+0x528>)
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f005 f807 	bl	800cf0c <itoa>
			lcd_print(2,12,snum);
 8007efe:	4a4e      	ldr	r2, [pc, #312]	; (8008038 <checkDemoModCalisma+0x528>)
 8007f00:	210c      	movs	r1, #12
 8007f02:	2002      	movs	r0, #2
 8007f04:	f7f8 fcec 	bl	80008e0 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007f08:	4b44      	ldr	r3, [pc, #272]	; (800801c <checkDemoModCalisma+0x50c>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	220a      	movs	r2, #10
 8007f0e:	494a      	ldr	r1, [pc, #296]	; (8008038 <checkDemoModCalisma+0x528>)
 8007f10:	4618      	mov	r0, r3
 8007f12:	f004 fffb 	bl	800cf0c <itoa>
			lcd_print(2,13,snum);
 8007f16:	4a48      	ldr	r2, [pc, #288]	; (8008038 <checkDemoModCalisma+0x528>)
 8007f18:	210d      	movs	r1, #13
 8007f1a:	2002      	movs	r0, #2
 8007f1c:	f7f8 fce0 	bl	80008e0 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007f20:	4b3d      	ldr	r3, [pc, #244]	; (8008018 <checkDemoModCalisma+0x508>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	220a      	movs	r2, #10
 8007f26:	4944      	ldr	r1, [pc, #272]	; (8008038 <checkDemoModCalisma+0x528>)
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f004 ffef 	bl	800cf0c <itoa>
			lcd_print(2,14,snum);
 8007f2e:	4a42      	ldr	r2, [pc, #264]	; (8008038 <checkDemoModCalisma+0x528>)
 8007f30:	210e      	movs	r1, #14
 8007f32:	2002      	movs	r0, #2
 8007f34:	f7f8 fcd4 	bl	80008e0 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007f38:	4b36      	ldr	r3, [pc, #216]	; (8008014 <checkDemoModCalisma+0x504>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	220a      	movs	r2, #10
 8007f3e:	493e      	ldr	r1, [pc, #248]	; (8008038 <checkDemoModCalisma+0x528>)
 8007f40:	4618      	mov	r0, r3
 8007f42:	f004 ffe3 	bl	800cf0c <itoa>
			lcd_print(2,15,snum);
 8007f46:	4a3c      	ldr	r2, [pc, #240]	; (8008038 <checkDemoModCalisma+0x528>)
 8007f48:	210f      	movs	r1, #15
 8007f4a:	2002      	movs	r0, #2
 8007f4c:	f7f8 fcc8 	bl	80008e0 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007f50:	4b2f      	ldr	r3, [pc, #188]	; (8008010 <checkDemoModCalisma+0x500>)
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	220a      	movs	r2, #10
 8007f56:	4938      	ldr	r1, [pc, #224]	; (8008038 <checkDemoModCalisma+0x528>)
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f004 ffd7 	bl	800cf0c <itoa>
			lcd_print(2,16,snum);
 8007f5e:	4a36      	ldr	r2, [pc, #216]	; (8008038 <checkDemoModCalisma+0x528>)
 8007f60:	2110      	movs	r1, #16
 8007f62:	2002      	movs	r0, #2
 8007f64:	f7f8 fcbc 	bl	80008e0 <lcd_print>
			mesajYazildi=1;
 8007f68:	4b34      	ldr	r3, [pc, #208]	; (800803c <checkDemoModCalisma+0x52c>)
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8007f6e:	e03c      	b.n	8007fea <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007f70:	4b33      	ldr	r3, [pc, #204]	; (8008040 <checkDemoModCalisma+0x530>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d003      	beq.n	8007f80 <checkDemoModCalisma+0x470>
 8007f78:	4b2c      	ldr	r3, [pc, #176]	; (800802c <checkDemoModCalisma+0x51c>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d134      	bne.n	8007fea <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007f80:	2200      	movs	r2, #0
 8007f82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f86:	481b      	ldr	r0, [pc, #108]	; (8007ff4 <checkDemoModCalisma+0x4e4>)
 8007f88:	f001 ff4f 	bl	8009e2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f92:	4818      	ldr	r0, [pc, #96]	; (8007ff4 <checkDemoModCalisma+0x4e4>)
 8007f94:	f001 ff49 	bl	8009e2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2104      	movs	r1, #4
 8007f9c:	4815      	ldr	r0, [pc, #84]	; (8007ff4 <checkDemoModCalisma+0x4e4>)
 8007f9e:	f001 ff44 	bl	8009e2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2102      	movs	r1, #2
 8007fa6:	4813      	ldr	r0, [pc, #76]	; (8007ff4 <checkDemoModCalisma+0x4e4>)
 8007fa8:	f001 ff3f 	bl	8009e2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007fac:	2200      	movs	r2, #0
 8007fae:	2101      	movs	r1, #1
 8007fb0:	4810      	ldr	r0, [pc, #64]	; (8007ff4 <checkDemoModCalisma+0x4e4>)
 8007fb2:	f001 ff3a 	bl	8009e2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	2120      	movs	r1, #32
 8007fba:	480d      	ldr	r0, [pc, #52]	; (8007ff0 <checkDemoModCalisma+0x4e0>)
 8007fbc:	f001 ff35 	bl	8009e2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2110      	movs	r1, #16
 8007fc4:	480a      	ldr	r0, [pc, #40]	; (8007ff0 <checkDemoModCalisma+0x4e0>)
 8007fc6:	f001 ff30 	bl	8009e2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007fca:	2200      	movs	r2, #0
 8007fcc:	2180      	movs	r1, #128	; 0x80
 8007fce:	480b      	ldr	r0, [pc, #44]	; (8007ffc <checkDemoModCalisma+0x4ec>)
 8007fd0:	f001 ff2b 	bl	8009e2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2140      	movs	r1, #64	; 0x40
 8007fd8:	4808      	ldr	r0, [pc, #32]	; (8007ffc <checkDemoModCalisma+0x4ec>)
 8007fda:	f001 ff26 	bl	8009e2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007fde:	2200      	movs	r2, #0
 8007fe0:	2120      	movs	r1, #32
 8007fe2:	4806      	ldr	r0, [pc, #24]	; (8007ffc <checkDemoModCalisma+0x4ec>)
 8007fe4:	f001 ff21 	bl	8009e2a <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8007fe8:	e7ff      	b.n	8007fea <checkDemoModCalisma+0x4da>
 8007fea:	bf00      	nop
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	40011000 	.word	0x40011000
 8007ff4:	40010c00 	.word	0x40010c00
 8007ff8:	20000cae 	.word	0x20000cae
 8007ffc:	40010800 	.word	0x40010800
 8008000:	20000be0 	.word	0x20000be0
 8008004:	20000bf0 	.word	0x20000bf0
 8008008:	20000cad 	.word	0x20000cad
 800800c:	20000c93 	.word	0x20000c93
 8008010:	20000c52 	.word	0x20000c52
 8008014:	20000c53 	.word	0x20000c53
 8008018:	200009cc 	.word	0x200009cc
 800801c:	200009cd 	.word	0x200009cd
 8008020:	20000c54 	.word	0x20000c54
 8008024:	20000b44 	.word	0x20000b44
 8008028:	20000c81 	.word	0x20000c81
 800802c:	20000c72 	.word	0x20000c72
 8008030:	0800e6d4 	.word	0x0800e6d4
 8008034:	0800e6e0 	.word	0x0800e6e0
 8008038:	20000bd8 	.word	0x20000bd8
 800803c:	20000c89 	.word	0x20000c89
 8008040:	20000c73 	.word	0x20000c73

08008044 <mergeData>:

char* mergeData() {
 8008044:	b580      	push	{r7, lr}
 8008046:	b09e      	sub	sp, #120	; 0x78
 8008048:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 800804a:	2300      	movs	r3, #0
 800804c:	643b      	str	r3, [r7, #64]	; 0x40
 800804e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008052:	2229      	movs	r2, #41	; 0x29
 8008054:	2100      	movs	r1, #0
 8008056:	4618      	mov	r0, r3
 8008058:	f005 f870 	bl	800d13c <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 800805c:	4b6a      	ldr	r3, [pc, #424]	; (8008208 <mergeData+0x1c4>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	713b      	strb	r3, [r7, #4]
 8008062:	4b6a      	ldr	r3, [pc, #424]	; (800820c <mergeData+0x1c8>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	717b      	strb	r3, [r7, #5]
 8008068:	4b69      	ldr	r3, [pc, #420]	; (8008210 <mergeData+0x1cc>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	71bb      	strb	r3, [r7, #6]
 800806e:	4b69      	ldr	r3, [pc, #420]	; (8008214 <mergeData+0x1d0>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	71fb      	strb	r3, [r7, #7]
 8008074:	4b68      	ldr	r3, [pc, #416]	; (8008218 <mergeData+0x1d4>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	723b      	strb	r3, [r7, #8]
 800807a:	4b68      	ldr	r3, [pc, #416]	; (800821c <mergeData+0x1d8>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	727b      	strb	r3, [r7, #9]
 8008080:	4b67      	ldr	r3, [pc, #412]	; (8008220 <mergeData+0x1dc>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	72bb      	strb	r3, [r7, #10]
 8008086:	4b67      	ldr	r3, [pc, #412]	; (8008224 <mergeData+0x1e0>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	72fb      	strb	r3, [r7, #11]
 800808c:	4b66      	ldr	r3, [pc, #408]	; (8008228 <mergeData+0x1e4>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	733b      	strb	r3, [r7, #12]
 8008092:	4b66      	ldr	r3, [pc, #408]	; (800822c <mergeData+0x1e8>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	737b      	strb	r3, [r7, #13]
 8008098:	4b65      	ldr	r3, [pc, #404]	; (8008230 <mergeData+0x1ec>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	73bb      	strb	r3, [r7, #14]
 800809e:	4b65      	ldr	r3, [pc, #404]	; (8008234 <mergeData+0x1f0>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	73fb      	strb	r3, [r7, #15]
 80080a4:	4b64      	ldr	r3, [pc, #400]	; (8008238 <mergeData+0x1f4>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	743b      	strb	r3, [r7, #16]
 80080aa:	4b64      	ldr	r3, [pc, #400]	; (800823c <mergeData+0x1f8>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	747b      	strb	r3, [r7, #17]
 80080b0:	4b63      	ldr	r3, [pc, #396]	; (8008240 <mergeData+0x1fc>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	74bb      	strb	r3, [r7, #18]
 80080b6:	4b63      	ldr	r3, [pc, #396]	; (8008244 <mergeData+0x200>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	74fb      	strb	r3, [r7, #19]
 80080bc:	4b62      	ldr	r3, [pc, #392]	; (8008248 <mergeData+0x204>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	753b      	strb	r3, [r7, #20]
 80080c2:	4b62      	ldr	r3, [pc, #392]	; (800824c <mergeData+0x208>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	757b      	strb	r3, [r7, #21]
 80080c8:	4b61      	ldr	r3, [pc, #388]	; (8008250 <mergeData+0x20c>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	75bb      	strb	r3, [r7, #22]
 80080ce:	4b61      	ldr	r3, [pc, #388]	; (8008254 <mergeData+0x210>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	75fb      	strb	r3, [r7, #23]
 80080d4:	4b60      	ldr	r3, [pc, #384]	; (8008258 <mergeData+0x214>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	763b      	strb	r3, [r7, #24]
 80080da:	4b60      	ldr	r3, [pc, #384]	; (800825c <mergeData+0x218>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	767b      	strb	r3, [r7, #25]
 80080e0:	4b5f      	ldr	r3, [pc, #380]	; (8008260 <mergeData+0x21c>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	76bb      	strb	r3, [r7, #26]
 80080e6:	4b5f      	ldr	r3, [pc, #380]	; (8008264 <mergeData+0x220>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	76fb      	strb	r3, [r7, #27]
 80080ec:	4b5e      	ldr	r3, [pc, #376]	; (8008268 <mergeData+0x224>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	773b      	strb	r3, [r7, #28]
 80080f2:	4b5e      	ldr	r3, [pc, #376]	; (800826c <mergeData+0x228>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	777b      	strb	r3, [r7, #29]
 80080f8:	4b5d      	ldr	r3, [pc, #372]	; (8008270 <mergeData+0x22c>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	77bb      	strb	r3, [r7, #30]
 80080fe:	4b5d      	ldr	r3, [pc, #372]	; (8008274 <mergeData+0x230>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	77fb      	strb	r3, [r7, #31]
 8008104:	4b5c      	ldr	r3, [pc, #368]	; (8008278 <mergeData+0x234>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	f887 3020 	strb.w	r3, [r7, #32]
 800810c:	4b5b      	ldr	r3, [pc, #364]	; (800827c <mergeData+0x238>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008114:	4b5a      	ldr	r3, [pc, #360]	; (8008280 <mergeData+0x23c>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800811c:	4b59      	ldr	r3, [pc, #356]	; (8008284 <mergeData+0x240>)
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008124:	4b58      	ldr	r3, [pc, #352]	; (8008288 <mergeData+0x244>)
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 800812c:	4b57      	ldr	r3, [pc, #348]	; (800828c <mergeData+0x248>)
 800812e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 8008132:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 8008136:	4b55      	ldr	r3, [pc, #340]	; (800828c <mergeData+0x248>)
 8008138:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 800813c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8008140:	4b52      	ldr	r3, [pc, #328]	; (800828c <mergeData+0x248>)
 8008142:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8008146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 800814a:	4b50      	ldr	r3, [pc, #320]	; (800828c <mergeData+0x248>)
 800814c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8008150:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 8008154:	4b4d      	ldr	r3, [pc, #308]	; (800828c <mergeData+0x248>)
 8008156:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800815a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 800815e:	4b4b      	ldr	r3, [pc, #300]	; (800828c <mergeData+0x248>)
 8008160:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8008164:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 8008168:	4b48      	ldr	r3, [pc, #288]	; (800828c <mergeData+0x248>)
 800816a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 800816e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 8008172:	4b46      	ldr	r3, [pc, #280]	; (800828c <mergeData+0x248>)
 8008174:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8008178:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 800817c:	4b43      	ldr	r3, [pc, #268]	; (800828c <mergeData+0x248>)
 800817e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8008182:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 8008186:	4b41      	ldr	r3, [pc, #260]	; (800828c <mergeData+0x248>)
 8008188:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800818c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8008190:	4b3e      	ldr	r3, [pc, #248]	; (800828c <mergeData+0x248>)
 8008192:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8008196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800819a:	4b3d      	ldr	r3, [pc, #244]	; (8008290 <mergeData+0x24c>)
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80081a2:	2300      	movs	r3, #0
 80081a4:	677b      	str	r3, [r7, #116]	; 0x74
 80081a6:	e015      	b.n	80081d4 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 80081a8:	1d3a      	adds	r2, r7, #4
 80081aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ac:	4413      	add	r3, r2
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80081b6:	4937      	ldr	r1, [pc, #220]	; (8008294 <mergeData+0x250>)
 80081b8:	4618      	mov	r0, r3
 80081ba:	f004 ff9f 	bl	800d0fc <siprintf>
	    strcat(combinedString, temp);
 80081be:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80081c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081c6:	4611      	mov	r1, r2
 80081c8:	4618      	mov	r0, r3
 80081ca:	f004 ffbf 	bl	800d14c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80081ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081d0:	3301      	adds	r3, #1
 80081d2:	677b      	str	r3, [r7, #116]	; 0x74
 80081d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081d6:	2b2c      	cmp	r3, #44	; 0x2c
 80081d8:	d9e6      	bls.n	80081a8 <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80081da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081de:	4618      	mov	r0, r3
 80081e0:	f7f8 f820 	bl	8000224 <strlen>
 80081e4:	4603      	mov	r3, r0
 80081e6:	3301      	adds	r3, #1
 80081e8:	4618      	mov	r0, r3
 80081ea:	f004 fe91 	bl	800cf10 <malloc>
 80081ee:	4603      	mov	r3, r0
 80081f0:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 80081f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081f6:	4619      	mov	r1, r3
 80081f8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80081fa:	f005 f809 	bl	800d210 <strcpy>
	return result;
 80081fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008200:	4618      	mov	r0, r3
 8008202:	3778      	adds	r7, #120	; 0x78
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	20000c64 	.word	0x20000c64
 800820c:	20000c56 	.word	0x20000c56
 8008210:	20000c59 	.word	0x20000c59
 8008214:	20000c5a 	.word	0x20000c5a
 8008218:	20000c5b 	.word	0x20000c5b
 800821c:	20000c62 	.word	0x20000c62
 8008220:	20000c5c 	.word	0x20000c5c
 8008224:	20000c5d 	.word	0x20000c5d
 8008228:	20000c61 	.word	0x20000c61
 800822c:	20000c5e 	.word	0x20000c5e
 8008230:	20000c6e 	.word	0x20000c6e
 8008234:	20000c5f 	.word	0x20000c5f
 8008238:	20000c6f 	.word	0x20000c6f
 800823c:	20000c60 	.word	0x20000c60
 8008240:	20000c70 	.word	0x20000c70
 8008244:	20000c63 	.word	0x20000c63
 8008248:	20000c65 	.word	0x20000c65
 800824c:	20000c66 	.word	0x20000c66
 8008250:	20000c67 	.word	0x20000c67
 8008254:	20000c68 	.word	0x20000c68
 8008258:	20000c69 	.word	0x20000c69
 800825c:	20000c6a 	.word	0x20000c6a
 8008260:	20000c6b 	.word	0x20000c6b
 8008264:	20000c6c 	.word	0x20000c6c
 8008268:	20000c6d 	.word	0x20000c6d
 800826c:	20000c71 	.word	0x20000c71
 8008270:	20000c73 	.word	0x20000c73
 8008274:	20000c52 	.word	0x20000c52
 8008278:	20000c53 	.word	0x20000c53
 800827c:	200009cc 	.word	0x200009cc
 8008280:	200009cd 	.word	0x200009cd
 8008284:	20000c54 	.word	0x20000c54
 8008288:	20000c76 	.word	0x20000c76
 800828c:	20000b44 	.word	0x20000b44
 8008290:	20000940 	.word	0x20000940
 8008294:	0800e6f4 	.word	0x0800e6f4

08008298 <mainLoop>:

void mainLoop() {
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800829e:	f7fd fffb 	bl	8006298 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80082a2:	2101      	movs	r1, #1
 80082a4:	48ac      	ldr	r0, [pc, #688]	; (8008558 <mainLoop+0x2c0>)
 80082a6:	f001 fda9 	bl	8009dfc <HAL_GPIO_ReadPin>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d136      	bne.n	800831e <mainLoop+0x86>
 80082b0:	2108      	movs	r1, #8
 80082b2:	48aa      	ldr	r0, [pc, #680]	; (800855c <mainLoop+0x2c4>)
 80082b4:	f001 fda2 	bl	8009dfc <HAL_GPIO_ReadPin>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d12f      	bne.n	800831e <mainLoop+0x86>
 80082be:	2102      	movs	r1, #2
 80082c0:	48a5      	ldr	r0, [pc, #660]	; (8008558 <mainLoop+0x2c0>)
 80082c2:	f001 fd9b 	bl	8009dfc <HAL_GPIO_ReadPin>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d128      	bne.n	800831e <mainLoop+0x86>
 80082cc:	2104      	movs	r1, #4
 80082ce:	48a2      	ldr	r0, [pc, #648]	; (8008558 <mainLoop+0x2c0>)
 80082d0:	f001 fd94 	bl	8009dfc <HAL_GPIO_ReadPin>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d121      	bne.n	800831e <mainLoop+0x86>
 80082da:	2108      	movs	r1, #8
 80082dc:	489e      	ldr	r0, [pc, #632]	; (8008558 <mainLoop+0x2c0>)
 80082de:	f001 fd8d 	bl	8009dfc <HAL_GPIO_ReadPin>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d11a      	bne.n	800831e <mainLoop+0x86>
 80082e8:	2180      	movs	r1, #128	; 0x80
 80082ea:	489c      	ldr	r0, [pc, #624]	; (800855c <mainLoop+0x2c4>)
 80082ec:	f001 fd86 	bl	8009dfc <HAL_GPIO_ReadPin>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d113      	bne.n	800831e <mainLoop+0x86>
 80082f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082fa:	4898      	ldr	r0, [pc, #608]	; (800855c <mainLoop+0x2c4>)
 80082fc:	f001 fd7e 	bl	8009dfc <HAL_GPIO_ReadPin>
 8008300:	4603      	mov	r3, r0
 8008302:	2b01      	cmp	r3, #1
 8008304:	d10b      	bne.n	800831e <mainLoop+0x86>
 8008306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800830a:	4894      	ldr	r0, [pc, #592]	; (800855c <mainLoop+0x2c4>)
 800830c:	f001 fd76 	bl	8009dfc <HAL_GPIO_ReadPin>
 8008310:	4603      	mov	r3, r0
 8008312:	2b01      	cmp	r3, #1
 8008314:	d103      	bne.n	800831e <mainLoop+0x86>
			butonKontrol=0;
 8008316:	4b92      	ldr	r3, [pc, #584]	; (8008560 <mainLoop+0x2c8>)
 8008318:	2200      	movs	r2, #0
 800831a:	701a      	strb	r2, [r3, #0]
 800831c:	e003      	b.n	8008326 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800831e:	4b91      	ldr	r3, [pc, #580]	; (8008564 <mainLoop+0x2cc>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a91      	ldr	r2, [pc, #580]	; (8008568 <mainLoop+0x2d0>)
 8008324:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8008326:	4b91      	ldr	r3, [pc, #580]	; (800856c <mainLoop+0x2d4>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d039      	beq.n	80083a2 <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800832e:	bf00      	nop
 8008330:	488f      	ldr	r0, [pc, #572]	; (8008570 <mainLoop+0x2d8>)
 8008332:	f002 fb8c 	bl	800aa4e <HAL_I2C_GetError>
 8008336:	4603      	mov	r3, r0
 8008338:	2b04      	cmp	r3, #4
 800833a:	d0f9      	beq.n	8008330 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800833c:	bf00      	nop
 800833e:	488c      	ldr	r0, [pc, #560]	; (8008570 <mainLoop+0x2d8>)
 8008340:	f002 fb78 	bl	800aa34 <HAL_I2C_GetState>
 8008344:	4603      	mov	r3, r0
 8008346:	2b20      	cmp	r3, #32
 8008348:	d1f9      	bne.n	800833e <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 800834a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800834e:	9302      	str	r3, [sp, #8]
 8008350:	233f      	movs	r3, #63	; 0x3f
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	4b87      	ldr	r3, [pc, #540]	; (8008574 <mainLoop+0x2dc>)
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	233f      	movs	r3, #63	; 0x3f
 800835a:	2200      	movs	r2, #0
 800835c:	21a0      	movs	r1, #160	; 0xa0
 800835e:	4884      	ldr	r0, [pc, #528]	; (8008570 <mainLoop+0x2d8>)
 8008360:	f002 f806 	bl	800a370 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 8008364:	2005      	movs	r0, #5
 8008366:	f000 ff79 	bl	800925c <HAL_Delay>

		  hafizaYaz=0;
 800836a:	4b80      	ldr	r3, [pc, #512]	; (800856c <mainLoop+0x2d4>)
 800836c:	2200      	movs	r2, #0
 800836e:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8008370:	4b81      	ldr	r3, [pc, #516]	; (8008578 <mainLoop+0x2e0>)
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d105      	bne.n	8008384 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 8008378:	4a80      	ldr	r2, [pc, #512]	; (800857c <mainLoop+0x2e4>)
 800837a:	2101      	movs	r1, #1
 800837c:	2002      	movs	r0, #2
 800837e:	f7f8 faaf 	bl	80008e0 <lcd_print>
 8008382:	e008      	b.n	8008396 <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 8008384:	4b7c      	ldr	r3, [pc, #496]	; (8008578 <mainLoop+0x2e0>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d104      	bne.n	8008396 <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 800838c:	4a7c      	ldr	r2, [pc, #496]	; (8008580 <mainLoop+0x2e8>)
 800838e:	2101      	movs	r1, #1
 8008390:	2002      	movs	r0, #2
 8008392:	f7f8 faa5 	bl	80008e0 <lcd_print>
		  }

		  HAL_Delay(1000);
 8008396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800839a:	f000 ff5f 	bl	800925c <HAL_Delay>
		  lcd_clear();
 800839e:	f7f8 facb 	bl	8000938 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80083a2:	4b78      	ldr	r3, [pc, #480]	; (8008584 <mainLoop+0x2ec>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	f083 0301 	eor.w	r3, r3, #1
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d06e      	beq.n	800848e <mainLoop+0x1f6>
 80083b0:	486f      	ldr	r0, [pc, #444]	; (8008570 <mainLoop+0x2d8>)
 80083b2:	f002 fb3f 	bl	800aa34 <HAL_I2C_GetState>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b20      	cmp	r3, #32
 80083ba:	d168      	bne.n	800848e <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 80083bc:	4b72      	ldr	r3, [pc, #456]	; (8008588 <mainLoop+0x2f0>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	f083 0301 	eor.w	r3, r3, #1
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d044      	beq.n	8008454 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 80083ca:	4a70      	ldr	r2, [pc, #448]	; (800858c <mainLoop+0x2f4>)
 80083cc:	2101      	movs	r1, #1
 80083ce:	2001      	movs	r0, #1
 80083d0:	f7f8 fa86 	bl	80008e0 <lcd_print>
			  if(dilSecim==0) {
 80083d4:	4b68      	ldr	r3, [pc, #416]	; (8008578 <mainLoop+0x2e0>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d105      	bne.n	80083e8 <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 80083dc:	4a6c      	ldr	r2, [pc, #432]	; (8008590 <mainLoop+0x2f8>)
 80083de:	2101      	movs	r1, #1
 80083e0:	2002      	movs	r0, #2
 80083e2:	f7f8 fa7d 	bl	80008e0 <lcd_print>
 80083e6:	e008      	b.n	80083fa <mainLoop+0x162>
			  } else if(dilSecim==1) {
 80083e8:	4b63      	ldr	r3, [pc, #396]	; (8008578 <mainLoop+0x2e0>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d104      	bne.n	80083fa <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 80083f0:	4a68      	ldr	r2, [pc, #416]	; (8008594 <mainLoop+0x2fc>)
 80083f2:	2101      	movs	r1, #1
 80083f4:	2002      	movs	r0, #2
 80083f6:	f7f8 fa73 	bl	80008e0 <lcd_print>
			  }
			  HAL_Delay(1000);
 80083fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083fe:	f000 ff2d 	bl	800925c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008402:	bf00      	nop
 8008404:	485a      	ldr	r0, [pc, #360]	; (8008570 <mainLoop+0x2d8>)
 8008406:	f002 fb22 	bl	800aa4e <HAL_I2C_GetError>
 800840a:	4603      	mov	r3, r0
 800840c:	2b04      	cmp	r3, #4
 800840e:	d0f9      	beq.n	8008404 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008410:	e003      	b.n	800841a <mainLoop+0x182>
				  HAL_Delay(1000);
 8008412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008416:	f000 ff21 	bl	800925c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800841a:	4855      	ldr	r0, [pc, #340]	; (8008570 <mainLoop+0x2d8>)
 800841c:	f002 fb0a 	bl	800aa34 <HAL_I2C_GetState>
 8008420:	4603      	mov	r3, r0
 8008422:	2b20      	cmp	r3, #32
 8008424:	d1f5      	bne.n	8008412 <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 8008426:	4b54      	ldr	r3, [pc, #336]	; (8008578 <mainLoop+0x2e0>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d105      	bne.n	800843a <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 800842e:	4a5a      	ldr	r2, [pc, #360]	; (8008598 <mainLoop+0x300>)
 8008430:	2101      	movs	r1, #1
 8008432:	2002      	movs	r0, #2
 8008434:	f7f8 fa54 	bl	80008e0 <lcd_print>
 8008438:	e008      	b.n	800844c <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 800843a:	4b4f      	ldr	r3, [pc, #316]	; (8008578 <mainLoop+0x2e0>)
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d104      	bne.n	800844c <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 8008442:	4a56      	ldr	r2, [pc, #344]	; (800859c <mainLoop+0x304>)
 8008444:	2101      	movs	r1, #1
 8008446:	2002      	movs	r0, #2
 8008448:	f7f8 fa4a 	bl	80008e0 <lcd_print>
			  }

			  ilkOkuma=1;
 800844c:	4b4e      	ldr	r3, [pc, #312]	; (8008588 <mainLoop+0x2f0>)
 800844e:	2201      	movs	r2, #1
 8008450:	701a      	strb	r2, [r3, #0]
 8008452:	e014      	b.n	800847e <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 8008454:	4b48      	ldr	r3, [pc, #288]	; (8008578 <mainLoop+0x2e0>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d105      	bne.n	8008468 <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 800845c:	4a50      	ldr	r2, [pc, #320]	; (80085a0 <mainLoop+0x308>)
 800845e:	2101      	movs	r1, #1
 8008460:	2002      	movs	r0, #2
 8008462:	f7f8 fa3d 	bl	80008e0 <lcd_print>
 8008466:	e008      	b.n	800847a <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 8008468:	4b43      	ldr	r3, [pc, #268]	; (8008578 <mainLoop+0x2e0>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d104      	bne.n	800847a <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 8008470:	4a4c      	ldr	r2, [pc, #304]	; (80085a4 <mainLoop+0x30c>)
 8008472:	2101      	movs	r1, #1
 8008474:	2002      	movs	r0, #2
 8008476:	f7f8 fa33 	bl	80008e0 <lcd_print>
			  }
			  lcd_clear();
 800847a:	f7f8 fa5d 	bl	8000938 <lcd_clear>
		  }

		  lcd_clear();
 800847e:	f7f8 fa5b 	bl	8000938 <lcd_clear>

		  eepromKontrol(1);
 8008482:	2001      	movs	r0, #1
 8008484:	f7fd fac6 	bl	8005a14 <eepromKontrol>
		  hafizaOku=1;
 8008488:	4b3e      	ldr	r3, [pc, #248]	; (8008584 <mainLoop+0x2ec>)
 800848a:	2201      	movs	r2, #1
 800848c:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 800848e:	4b46      	ldr	r3, [pc, #280]	; (80085a8 <mainLoop+0x310>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d11c      	bne.n	80084d0 <mainLoop+0x238>
 8008496:	4b45      	ldr	r3, [pc, #276]	; (80085ac <mainLoop+0x314>)
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	f083 0301 	eor.w	r3, r3, #1
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d015      	beq.n	80084d0 <mainLoop+0x238>
 80084a4:	4b42      	ldr	r3, [pc, #264]	; (80085b0 <mainLoop+0x318>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d111      	bne.n	80084d0 <mainLoop+0x238>
			lcd_clear();
 80084ac:	f7f8 fa44 	bl	8000938 <lcd_clear>
			HAL_Delay(10);
 80084b0:	200a      	movs	r0, #10
 80084b2:	f000 fed3 	bl	800925c <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 80084b6:	4a3f      	ldr	r2, [pc, #252]	; (80085b4 <mainLoop+0x31c>)
 80084b8:	2101      	movs	r1, #1
 80084ba:	2001      	movs	r0, #1
 80084bc:	f7f8 fa10 	bl	80008e0 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 80084c0:	4a3d      	ldr	r2, [pc, #244]	; (80085b8 <mainLoop+0x320>)
 80084c2:	2101      	movs	r1, #1
 80084c4:	2002      	movs	r0, #2
 80084c6:	f7f8 fa0b 	bl	80008e0 <lcd_print>
			mesajYazildi=1;
 80084ca:	4b38      	ldr	r3, [pc, #224]	; (80085ac <mainLoop+0x314>)
 80084cc:	2201      	movs	r2, #1
 80084ce:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 80084d0:	4b35      	ldr	r3, [pc, #212]	; (80085a8 <mainLoop+0x310>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d112      	bne.n	80084fe <mainLoop+0x266>
 80084d8:	2102      	movs	r1, #2
 80084da:	481f      	ldr	r0, [pc, #124]	; (8008558 <mainLoop+0x2c0>)
 80084dc:	f001 fc8e 	bl	8009dfc <HAL_GPIO_ReadPin>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d10b      	bne.n	80084fe <mainLoop+0x266>
 80084e6:	2104      	movs	r1, #4
 80084e8:	481b      	ldr	r0, [pc, #108]	; (8008558 <mainLoop+0x2c0>)
 80084ea:	f001 fc87 	bl	8009dfc <HAL_GPIO_ReadPin>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d104      	bne.n	80084fe <mainLoop+0x266>
			menuGiris=1;
 80084f4:	4b2c      	ldr	r3, [pc, #176]	; (80085a8 <mainLoop+0x310>)
 80084f6:	2201      	movs	r2, #1
 80084f8:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80084fa:	f7f8 fa1d 	bl	8000938 <lcd_clear>
		}

		if(menuGiris==1) {
 80084fe:	4b2a      	ldr	r3, [pc, #168]	; (80085a8 <mainLoop+0x310>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d101      	bne.n	800850a <mainLoop+0x272>
			menu();
 8008506:	f7f9 f85f 	bl	80015c8 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 800850a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800850e:	4813      	ldr	r0, [pc, #76]	; (800855c <mainLoop+0x2c4>)
 8008510:	f001 fca3 	bl	8009e5a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8008514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008518:	4828      	ldr	r0, [pc, #160]	; (80085bc <mainLoop+0x324>)
 800851a:	f001 fc6f 	bl	8009dfc <HAL_GPIO_ReadPin>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10a      	bne.n	800853a <mainLoop+0x2a2>
 8008524:	4b26      	ldr	r3, [pc, #152]	; (80085c0 <mainLoop+0x328>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	f083 0301 	eor.w	r3, r3, #1
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <mainLoop+0x2a2>
			stopVar=1;
 8008532:	4b24      	ldr	r3, [pc, #144]	; (80085c4 <mainLoop+0x32c>)
 8008534:	2201      	movs	r2, #1
 8008536:	701a      	strb	r2, [r3, #0]
 8008538:	e002      	b.n	8008540 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 800853a:	4b22      	ldr	r3, [pc, #136]	; (80085c4 <mainLoop+0x32c>)
 800853c:	2200      	movs	r2, #0
 800853e:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8008540:	f7fd feca 	bl	80062d8 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8008544:	f7fd fefc 	bl	8006340 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8008548:	f7fd ff40 	bl	80063cc <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 800854c:	f7fd ff90 	bl	8006470 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8008550:	f7ff fade 	bl	8007b10 <checkDemoModCalisma>
		checkLCDBacklight();
 8008554:	e6a3      	b.n	800829e <mainLoop+0x6>
 8008556:	bf00      	nop
 8008558:	40010800 	.word	0x40010800
 800855c:	40011000 	.word	0x40011000
 8008560:	20000c84 	.word	0x20000c84
 8008564:	20000be0 	.word	0x20000be0
 8008568:	20000bfc 	.word	0x20000bfc
 800856c:	20000c81 	.word	0x20000c81
 8008570:	20000e14 	.word	0x20000e14
 8008574:	20000b44 	.word	0x20000b44
 8008578:	20000c76 	.word	0x20000c76
 800857c:	0800e6f8 	.word	0x0800e6f8
 8008580:	0800e70c 	.word	0x0800e70c
 8008584:	20000c82 	.word	0x20000c82
 8008588:	20000c83 	.word	0x20000c83
 800858c:	0800e720 	.word	0x0800e720
 8008590:	0800e734 	.word	0x0800e734
 8008594:	0800e748 	.word	0x0800e748
 8008598:	0800e75c 	.word	0x0800e75c
 800859c:	0800e770 	.word	0x0800e770
 80085a0:	0800e784 	.word	0x0800e784
 80085a4:	0800e798 	.word	0x0800e798
 80085a8:	20000c72 	.word	0x20000c72
 80085ac:	20000c89 	.word	0x20000c89
 80085b0:	20000c73 	.word	0x20000c73
 80085b4:	0800e65c 	.word	0x0800e65c
 80085b8:	0800e670 	.word	0x0800e670
 80085bc:	40010c00 	.word	0x40010c00
 80085c0:	20000caa 	.word	0x20000caa
 80085c4:	20000ca7 	.word	0x20000ca7

080085c8 <takeWifiDataFromEEPROM>:
	}
}

void takeWifiDataFromEEPROM(int type) {
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af04      	add	r7, sp, #16
 80085ce:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d111      	bne.n	80085fa <takeWifiDataFromEEPROM+0x32>
		HAL_I2C_Mem_Read(&hi2c1,0xA0,60,12,machineIDTemp,12,3000);
 80085d6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80085da:	9302      	str	r3, [sp, #8]
 80085dc:	230c      	movs	r3, #12
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	4b1c      	ldr	r3, [pc, #112]	; (8008654 <takeWifiDataFromEEPROM+0x8c>)
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	230c      	movs	r3, #12
 80085e6:	223c      	movs	r2, #60	; 0x3c
 80085e8:	21a0      	movs	r1, #160	; 0xa0
 80085ea:	481b      	ldr	r0, [pc, #108]	; (8008658 <takeWifiDataFromEEPROM+0x90>)
 80085ec:	f001 ffba 	bl	800a564 <HAL_I2C_Mem_Read>
		HAL_Delay(1000);
 80085f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085f4:	f000 fe32 	bl	800925c <HAL_Delay>
		HAL_Delay(1000);
	} else if(type == 3) {
		HAL_I2C_Mem_Read(&hi2c1,0xA0,107,33,wifiPassTemp,33,3000);
		HAL_Delay(1000);
	}
}
 80085f8:	e028      	b.n	800864c <takeWifiDataFromEEPROM+0x84>
	} else if(type == 2) {
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d111      	bne.n	8008624 <takeWifiDataFromEEPROM+0x5c>
		HAL_I2C_Mem_Read(&hi2c1,0xA0,73,33,wifiSSIDTemp,33,3000);
 8008600:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008604:	9302      	str	r3, [sp, #8]
 8008606:	2321      	movs	r3, #33	; 0x21
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	4b14      	ldr	r3, [pc, #80]	; (800865c <takeWifiDataFromEEPROM+0x94>)
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	2321      	movs	r3, #33	; 0x21
 8008610:	2249      	movs	r2, #73	; 0x49
 8008612:	21a0      	movs	r1, #160	; 0xa0
 8008614:	4810      	ldr	r0, [pc, #64]	; (8008658 <takeWifiDataFromEEPROM+0x90>)
 8008616:	f001 ffa5 	bl	800a564 <HAL_I2C_Mem_Read>
		HAL_Delay(1000);
 800861a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800861e:	f000 fe1d 	bl	800925c <HAL_Delay>
}
 8008622:	e013      	b.n	800864c <takeWifiDataFromEEPROM+0x84>
	} else if(type == 3) {
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b03      	cmp	r3, #3
 8008628:	d110      	bne.n	800864c <takeWifiDataFromEEPROM+0x84>
		HAL_I2C_Mem_Read(&hi2c1,0xA0,107,33,wifiPassTemp,33,3000);
 800862a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800862e:	9302      	str	r3, [sp, #8]
 8008630:	2321      	movs	r3, #33	; 0x21
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <takeWifiDataFromEEPROM+0x98>)
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	2321      	movs	r3, #33	; 0x21
 800863a:	226b      	movs	r2, #107	; 0x6b
 800863c:	21a0      	movs	r1, #160	; 0xa0
 800863e:	4806      	ldr	r0, [pc, #24]	; (8008658 <takeWifiDataFromEEPROM+0x90>)
 8008640:	f001 ff90 	bl	800a564 <HAL_I2C_Mem_Read>
		HAL_Delay(1000);
 8008644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008648:	f000 fe08 	bl	800925c <HAL_Delay>
}
 800864c:	bf00      	nop
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20000ef8 	.word	0x20000ef8
 8008658:	20000e14 	.word	0x20000e14
 800865c:	20000f04 	.word	0x20000f04
 8008660:	20000f28 	.word	0x20000f28

08008664 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 800866c:	4b04      	ldr	r3, [pc, #16]	; (8008680 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3301      	adds	r3, #1
 8008672:	4a03      	ldr	r2, [pc, #12]	; (8008680 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008674:	6013      	str	r3, [r2, #0]
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	bc80      	pop	{r7}
 800867e:	4770      	bx	lr
 8008680:	20000be0 	.word	0x20000be0

08008684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b08e      	sub	sp, #56	; 0x38
 8008688:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800868a:	f000 fd85 	bl	8009198 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800868e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008692:	f000 fde3 	bl	800925c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008696:	f000 f9b5 	bl	8008a04 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800869a:	f000 fad7 	bl	8008c4c <MX_GPIO_Init>
  MX_CAN_Init();
 800869e:	f000 f9f7 	bl	8008a90 <MX_CAN_Init>
  MX_I2C1_Init();
 80086a2:	f000 fa29 	bl	8008af8 <MX_I2C1_Init>
  MX_TIM1_Init();
 80086a6:	f000 fa55 	bl	8008b54 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80086aa:	f000 faa5 	bl	8008bf8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80086ae:	2201      	movs	r2, #1
 80086b0:	2140      	movs	r1, #64	; 0x40
 80086b2:	48ae      	ldr	r0, [pc, #696]	; (800896c <main+0x2e8>)
 80086b4:	f001 fbb9 	bl	8009e2a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80086b8:	2201      	movs	r2, #1
 80086ba:	2180      	movs	r1, #128	; 0x80
 80086bc:	48ab      	ldr	r0, [pc, #684]	; (800896c <main+0x2e8>)
 80086be:	f001 fbb4 	bl	8009e2a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80086c2:	200a      	movs	r0, #10
 80086c4:	f000 fdca 	bl	800925c <HAL_Delay>
  lcd_init();
 80086c8:	f7f8 f8d8 	bl	800087c <lcd_init>
  HAL_Delay(10);
 80086cc:	200a      	movs	r0, #10
 80086ce:	f000 fdc5 	bl	800925c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80086d2:	48a7      	ldr	r0, [pc, #668]	; (8008970 <main+0x2ec>)
 80086d4:	f003 fa5c 	bl	800bb90 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80086d8:	bf00      	nop
 80086da:	48a6      	ldr	r0, [pc, #664]	; (8008974 <main+0x2f0>)
 80086dc:	f002 f9b7 	bl	800aa4e <HAL_I2C_GetError>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b04      	cmp	r3, #4
 80086e4:	d0f9      	beq.n	80086da <main+0x56>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80086e6:	bf00      	nop
 80086e8:	48a2      	ldr	r0, [pc, #648]	; (8008974 <main+0x2f0>)
 80086ea:	f002 f9a3 	bl	800aa34 <HAL_I2C_GetState>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d1f9      	bne.n	80086e8 <main+0x64>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80086f4:	2200      	movs	r2, #0
 80086f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086fa:	489c      	ldr	r0, [pc, #624]	; (800896c <main+0x2e8>)
 80086fc:	f001 fb95 	bl	8009e2a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008700:	2200      	movs	r2, #0
 8008702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008706:	4899      	ldr	r0, [pc, #612]	; (800896c <main+0x2e8>)
 8008708:	f001 fb8f 	bl	8009e2a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800870c:	2200      	movs	r2, #0
 800870e:	2104      	movs	r1, #4
 8008710:	4896      	ldr	r0, [pc, #600]	; (800896c <main+0x2e8>)
 8008712:	f001 fb8a 	bl	8009e2a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008716:	2200      	movs	r2, #0
 8008718:	2102      	movs	r1, #2
 800871a:	4894      	ldr	r0, [pc, #592]	; (800896c <main+0x2e8>)
 800871c:	f001 fb85 	bl	8009e2a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008720:	2200      	movs	r2, #0
 8008722:	2101      	movs	r1, #1
 8008724:	4891      	ldr	r0, [pc, #580]	; (800896c <main+0x2e8>)
 8008726:	f001 fb80 	bl	8009e2a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800872a:	2200      	movs	r2, #0
 800872c:	2120      	movs	r1, #32
 800872e:	4892      	ldr	r0, [pc, #584]	; (8008978 <main+0x2f4>)
 8008730:	f001 fb7b 	bl	8009e2a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008734:	2200      	movs	r2, #0
 8008736:	2110      	movs	r1, #16
 8008738:	488f      	ldr	r0, [pc, #572]	; (8008978 <main+0x2f4>)
 800873a:	f001 fb76 	bl	8009e2a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800873e:	2200      	movs	r2, #0
 8008740:	2180      	movs	r1, #128	; 0x80
 8008742:	488e      	ldr	r0, [pc, #568]	; (800897c <main+0x2f8>)
 8008744:	f001 fb71 	bl	8009e2a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008748:	2200      	movs	r2, #0
 800874a:	2140      	movs	r1, #64	; 0x40
 800874c:	488b      	ldr	r0, [pc, #556]	; (800897c <main+0x2f8>)
 800874e:	f001 fb6c 	bl	8009e2a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008752:	2200      	movs	r2, #0
 8008754:	2120      	movs	r1, #32
 8008756:	4889      	ldr	r0, [pc, #548]	; (800897c <main+0x2f8>)
 8008758:	f001 fb67 	bl	8009e2a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800875c:	2200      	movs	r2, #0
 800875e:	2110      	movs	r1, #16
 8008760:	4886      	ldr	r0, [pc, #536]	; (800897c <main+0x2f8>)
 8008762:	f001 fb62 	bl	8009e2a <HAL_GPIO_WritePin>

  i2cTest();
 8008766:	f7fd fce9 	bl	800613c <i2cTest>
  HAL_Delay(100);
 800876a:	2064      	movs	r0, #100	; 0x64
 800876c:	f000 fd76 	bl	800925c <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8008770:	4a83      	ldr	r2, [pc, #524]	; (8008980 <main+0x2fc>)
 8008772:	2101      	movs	r1, #1
 8008774:	2001      	movs	r0, #1
 8008776:	f7f8 f8b3 	bl	80008e0 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 800877a:	4a82      	ldr	r2, [pc, #520]	; (8008984 <main+0x300>)
 800877c:	2101      	movs	r1, #1
 800877e:	2002      	movs	r0, #2
 8008780:	f7f8 f8ae 	bl	80008e0 <lcd_print>
  HAL_Delay(1000);
 8008784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008788:	f000 fd68 	bl	800925c <HAL_Delay>
  lcd_clear();
 800878c:	f7f8 f8d4 	bl	8000938 <lcd_clear>

  eepromKontrol(0);
 8008790:	2000      	movs	r0, #0
 8008792:	f7fd f93f 	bl	8005a14 <eepromKontrol>

  takeWifiDataFromEEPROM(1);
 8008796:	2001      	movs	r0, #1
 8008798:	f7ff ff16 	bl	80085c8 <takeWifiDataFromEEPROM>
  takeWifiDataFromEEPROM(2);
 800879c:	2002      	movs	r0, #2
 800879e:	f7ff ff13 	bl	80085c8 <takeWifiDataFromEEPROM>
  takeWifiDataFromEEPROM(3);
 80087a2:	2003      	movs	r0, #3
 80087a4:	f7ff ff10 	bl	80085c8 <takeWifiDataFromEEPROM>

  if(strlen(machineID) == 0) {
 80087a8:	4b77      	ldr	r3, [pc, #476]	; (8008988 <main+0x304>)
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d114      	bne.n	80087da <main+0x156>
	  if(sizeof(machineIDTemp) / sizeof(machineIDTemp[0]) > 0) {
		  //machineIDTempten orijinal hale çevir
		  int machineIDCount = sizeof(machineIDTemp)/sizeof(machineIDTemp[0]);
 80087b0:	230c      	movs	r3, #12
 80087b2:	617b      	str	r3, [r7, #20]
		  for(int i=0; i<machineIDCount; i++) {
 80087b4:	2300      	movs	r3, #0
 80087b6:	627b      	str	r3, [r7, #36]	; 0x24
 80087b8:	e00b      	b.n	80087d2 <main+0x14e>
			  machineID[i] = numbers[i];
 80087ba:	4a74      	ldr	r2, [pc, #464]	; (800898c <main+0x308>)
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	4413      	add	r3, r2
 80087c0:	7819      	ldrb	r1, [r3, #0]
 80087c2:	4a71      	ldr	r2, [pc, #452]	; (8008988 <main+0x304>)
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	4413      	add	r3, r2
 80087c8:	460a      	mov	r2, r1
 80087ca:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<machineIDCount; i++) {
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	3301      	adds	r3, #1
 80087d0:	627b      	str	r3, [r7, #36]	; 0x24
 80087d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	dbef      	blt.n	80087ba <main+0x136>
	  } else {
		  takeMachineID();
	  }
  }

  HAL_I2C_Mem_Write(&hi2c1, 0xA0, machineIDEEPROMBaslangic, 12, &eepromData[machineIDEEPROMBaslangic], 12, 3000);
 80087da:	4b6d      	ldr	r3, [pc, #436]	; (8008990 <main+0x30c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	b29a      	uxth	r2, r3
 80087e0:	4b6b      	ldr	r3, [pc, #428]	; (8008990 <main+0x30c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	496b      	ldr	r1, [pc, #428]	; (8008994 <main+0x310>)
 80087e6:	440b      	add	r3, r1
 80087e8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80087ec:	9102      	str	r1, [sp, #8]
 80087ee:	210c      	movs	r1, #12
 80087f0:	9101      	str	r1, [sp, #4]
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	230c      	movs	r3, #12
 80087f6:	21a0      	movs	r1, #160	; 0xa0
 80087f8:	485e      	ldr	r0, [pc, #376]	; (8008974 <main+0x2f0>)
 80087fa:	f001 fdb9 	bl	800a370 <HAL_I2C_Mem_Write>
  HAL_Delay(500);
 80087fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008802:	f000 fd2b 	bl	800925c <HAL_Delay>

  lcd_clear();
 8008806:	f7f8 f897 	bl	8000938 <lcd_clear>
  HAL_Delay(500);
 800880a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800880e:	f000 fd25 	bl	800925c <HAL_Delay>

  if(iotMode == 1) {
 8008812:	4b61      	ldr	r3, [pc, #388]	; (8008998 <main+0x314>)
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d176      	bne.n	8008908 <main+0x284>
	  if(strlen(wifiSSID) == 0) {
 800881a:	4b60      	ldr	r3, [pc, #384]	; (800899c <main+0x318>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d114      	bne.n	800884c <main+0x1c8>
		  if(sizeof(wifiSSIDTemp) / sizeof(wifiSSIDTemp[0]) > 0) {
			  //wifiSSIDTemp'ten orijinale çevir
			  int wifiSSIDCount = sizeof(wifiSSIDTemp)/sizeof(wifiSSIDTemp[0]);
 8008822:	2321      	movs	r3, #33	; 0x21
 8008824:	613b      	str	r3, [r7, #16]
			  for(int i=0; i<wifiSSIDCount; i++) {
 8008826:	2300      	movs	r3, #0
 8008828:	623b      	str	r3, [r7, #32]
 800882a:	e00b      	b.n	8008844 <main+0x1c0>
				  wifiSSID[i] = characters[i];
 800882c:	4a5c      	ldr	r2, [pc, #368]	; (80089a0 <main+0x31c>)
 800882e:	6a3b      	ldr	r3, [r7, #32]
 8008830:	4413      	add	r3, r2
 8008832:	7819      	ldrb	r1, [r3, #0]
 8008834:	4a59      	ldr	r2, [pc, #356]	; (800899c <main+0x318>)
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	4413      	add	r3, r2
 800883a:	460a      	mov	r2, r1
 800883c:	701a      	strb	r2, [r3, #0]
			  for(int i=0; i<wifiSSIDCount; i++) {
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	3301      	adds	r3, #1
 8008842:	623b      	str	r3, [r7, #32]
 8008844:	6a3a      	ldr	r2, [r7, #32]
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	429a      	cmp	r2, r3
 800884a:	dbef      	blt.n	800882c <main+0x1a8>
		  } else {
			  takeWifiSSID();
		  }
	  }

	  HAL_I2C_Mem_Write(&hi2c1, 0xA0, wifiSSIDEEPROMBaslangic, 33, &eepromData[wifiSSIDEEPROMBaslangic], 33, 3000);
 800884c:	4b55      	ldr	r3, [pc, #340]	; (80089a4 <main+0x320>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	b29a      	uxth	r2, r3
 8008852:	4b54      	ldr	r3, [pc, #336]	; (80089a4 <main+0x320>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	494f      	ldr	r1, [pc, #316]	; (8008994 <main+0x310>)
 8008858:	440b      	add	r3, r1
 800885a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800885e:	9102      	str	r1, [sp, #8]
 8008860:	2121      	movs	r1, #33	; 0x21
 8008862:	9101      	str	r1, [sp, #4]
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	2321      	movs	r3, #33	; 0x21
 8008868:	21a0      	movs	r1, #160	; 0xa0
 800886a:	4842      	ldr	r0, [pc, #264]	; (8008974 <main+0x2f0>)
 800886c:	f001 fd80 	bl	800a370 <HAL_I2C_Mem_Write>
	  HAL_Delay(500);
 8008870:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008874:	f000 fcf2 	bl	800925c <HAL_Delay>

	  lcd_clear();
 8008878:	f7f8 f85e 	bl	8000938 <lcd_clear>
	  HAL_Delay(500);
 800887c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008880:	f000 fcec 	bl	800925c <HAL_Delay>

	  if(strlen(wifiPass) == 0) {
 8008884:	4b48      	ldr	r3, [pc, #288]	; (80089a8 <main+0x324>)
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d114      	bne.n	80088b6 <main+0x232>
		  if(sizeof(wifiPassTemp) / sizeof(wifiPassTemp[0]) > 0) {
			  //wifiPassTemp'ten orijinale çevir
			  int wifiPassCount = sizeof(wifiPassTemp)/sizeof(wifiPassTemp[0]);
 800888c:	2321      	movs	r3, #33	; 0x21
 800888e:	60fb      	str	r3, [r7, #12]
			  for(int i=0; i<wifiPassCount; i++) {
 8008890:	2300      	movs	r3, #0
 8008892:	61fb      	str	r3, [r7, #28]
 8008894:	e00b      	b.n	80088ae <main+0x22a>
				  wifiPass[i] = characters[i];
 8008896:	4a42      	ldr	r2, [pc, #264]	; (80089a0 <main+0x31c>)
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	4413      	add	r3, r2
 800889c:	7819      	ldrb	r1, [r3, #0]
 800889e:	4a42      	ldr	r2, [pc, #264]	; (80089a8 <main+0x324>)
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	4413      	add	r3, r2
 80088a4:	460a      	mov	r2, r1
 80088a6:	701a      	strb	r2, [r3, #0]
			  for(int i=0; i<wifiPassCount; i++) {
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	3301      	adds	r3, #1
 80088ac:	61fb      	str	r3, [r7, #28]
 80088ae:	69fa      	ldr	r2, [r7, #28]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	dbef      	blt.n	8008896 <main+0x212>
		  } else {
			  takeWifiPass();
		  }
	  }

	  HAL_I2C_Mem_Write(&hi2c1, 0xA0, wifiPassEEPROMBaslangic, 33, &eepromData[wifiPassEEPROMBaslangic], 33, 3000);
 80088b6:	4b3d      	ldr	r3, [pc, #244]	; (80089ac <main+0x328>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	4b3b      	ldr	r3, [pc, #236]	; (80089ac <main+0x328>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4934      	ldr	r1, [pc, #208]	; (8008994 <main+0x310>)
 80088c2:	440b      	add	r3, r1
 80088c4:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80088c8:	9102      	str	r1, [sp, #8]
 80088ca:	2121      	movs	r1, #33	; 0x21
 80088cc:	9101      	str	r1, [sp, #4]
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	2321      	movs	r3, #33	; 0x21
 80088d2:	21a0      	movs	r1, #160	; 0xa0
 80088d4:	4827      	ldr	r0, [pc, #156]	; (8008974 <main+0x2f0>)
 80088d6:	f001 fd4b 	bl	800a370 <HAL_I2C_Mem_Write>
	  HAL_Delay(500);
 80088da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80088de:	f000 fcbd 	bl	800925c <HAL_Delay>

	  lcd_print(1, 1, "Wifi Ayarlaniyor");
 80088e2:	4a33      	ldr	r2, [pc, #204]	; (80089b0 <main+0x32c>)
 80088e4:	2101      	movs	r1, #1
 80088e6:	2001      	movs	r0, #1
 80088e8:	f7f7 fffa 	bl	80008e0 <lcd_print>
	  lcd_print(2, 1, "Lutfen Bekleyin ");
 80088ec:	4a31      	ldr	r2, [pc, #196]	; (80089b4 <main+0x330>)
 80088ee:	2101      	movs	r1, #1
 80088f0:	2002      	movs	r0, #2
 80088f2:	f7f7 fff5 	bl	80008e0 <lcd_print>
	  ESP8266_Init(&huart1, wifiSSID, wifiPass);
 80088f6:	4a2c      	ldr	r2, [pc, #176]	; (80089a8 <main+0x324>)
 80088f8:	4928      	ldr	r1, [pc, #160]	; (800899c <main+0x318>)
 80088fa:	482f      	ldr	r0, [pc, #188]	; (80089b8 <main+0x334>)
 80088fc:	f7f7 fc9a 	bl	8000234 <ESP8266_Init>
	  HAL_Delay(500);
 8008900:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008904:	f000 fcaa 	bl	800925c <HAL_Delay>
  }

  if(checkMachineID(&huart1, machineID) == 1) {
 8008908:	491f      	ldr	r1, [pc, #124]	; (8008988 <main+0x304>)
 800890a:	482b      	ldr	r0, [pc, #172]	; (80089b8 <main+0x334>)
 800890c:	f7f7 fdbc 	bl	8000488 <checkMachineID>
 8008910:	4603      	mov	r3, r0
 8008912:	2b01      	cmp	r3, #1
 8008914:	d111      	bne.n	800893a <main+0x2b6>
	  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 58, 1, &eepromData[58], 1, 3000);
 8008916:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800891a:	9302      	str	r3, [sp, #8]
 800891c:	2301      	movs	r3, #1
 800891e:	9301      	str	r3, [sp, #4]
 8008920:	4b26      	ldr	r3, [pc, #152]	; (80089bc <main+0x338>)
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	2301      	movs	r3, #1
 8008926:	223a      	movs	r2, #58	; 0x3a
 8008928:	21a0      	movs	r1, #160	; 0xa0
 800892a:	4812      	ldr	r0, [pc, #72]	; (8008974 <main+0x2f0>)
 800892c:	f001 fd20 	bl	800a370 <HAL_I2C_Mem_Write>
	  HAL_Delay(500);
 8008930:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008934:	f000 fc92 	bl	800925c <HAL_Delay>
 8008938:	e00f      	b.n	800895a <main+0x2d6>
  } else {
	  lcd_print(1, 1, "ID HATASI       ");
 800893a:	4a21      	ldr	r2, [pc, #132]	; (80089c0 <main+0x33c>)
 800893c:	2101      	movs	r1, #1
 800893e:	2001      	movs	r0, #1
 8008940:	f7f7 ffce 	bl	80008e0 <lcd_print>
	  lcd_print(1, 1, "YENI ID GIRIN   ");
 8008944:	4a1f      	ldr	r2, [pc, #124]	; (80089c4 <main+0x340>)
 8008946:	2101      	movs	r1, #1
 8008948:	2001      	movs	r0, #1
 800894a:	f7f7 ffc9 	bl	80008e0 <lcd_print>
	  HAL_Delay(1000);
 800894e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008952:	f000 fc83 	bl	800925c <HAL_Delay>
	  takeMachineID();
 8008956:	f7f8 f9ed 	bl	8000d34 <takeMachineID>
  }

  lcd_clear();
 800895a:	f7f7 ffed 	bl	8000938 <lcd_clear>

  backLightTimer = millis;
 800895e:	4b1a      	ldr	r3, [pc, #104]	; (80089c8 <main+0x344>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a1a      	ldr	r2, [pc, #104]	; (80089cc <main+0x348>)
 8008964:	6013      	str	r3, [r2, #0]
  char testArr[12];

  for(int k=0; k<12; k++) {
 8008966:	2300      	movs	r3, #0
 8008968:	61bb      	str	r3, [r7, #24]
 800896a:	e03d      	b.n	80089e8 <main+0x364>
 800896c:	40010c00 	.word	0x40010c00
 8008970:	20000e68 	.word	0x20000e68
 8008974:	20000e14 	.word	0x20000e14
 8008978:	40011000 	.word	0x40011000
 800897c:	40010800 	.word	0x40010800
 8008980:	0800e7ac 	.word	0x0800e7ac
 8008984:	0800e7c0 	.word	0x0800e7c0
 8008988:	20000c00 	.word	0x20000c00
 800898c:	200009b4 	.word	0x200009b4
 8008990:	200009c0 	.word	0x200009c0
 8008994:	20000b44 	.word	0x20000b44
 8008998:	20000c74 	.word	0x20000c74
 800899c:	20000c0c 	.word	0x20000c0c
 80089a0:	20000960 	.word	0x20000960
 80089a4:	200009c4 	.word	0x200009c4
 80089a8:	20000c30 	.word	0x20000c30
 80089ac:	200009c8 	.word	0x200009c8
 80089b0:	0800e7d4 	.word	0x0800e7d4
 80089b4:	0800e7e8 	.word	0x0800e7e8
 80089b8:	20000eb0 	.word	0x20000eb0
 80089bc:	20000b7e 	.word	0x20000b7e
 80089c0:	0800e7fc 	.word	0x0800e7fc
 80089c4:	0800e810 	.word	0x0800e810
 80089c8:	20000be0 	.word	0x20000be0
 80089cc:	20000bfc 	.word	0x20000bfc
	  testArr[k] = eepromData[60+k];
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	333c      	adds	r3, #60	; 0x3c
 80089d4:	4a0a      	ldr	r2, [pc, #40]	; (8008a00 <main+0x37c>)
 80089d6:	5cd1      	ldrb	r1, [r2, r3]
 80089d8:	463a      	mov	r2, r7
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	4413      	add	r3, r2
 80089de:	460a      	mov	r2, r1
 80089e0:	701a      	strb	r2, [r3, #0]
  for(int k=0; k<12; k++) {
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	3301      	adds	r3, #1
 80089e6:	61bb      	str	r3, [r7, #24]
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	2b0b      	cmp	r3, #11
 80089ec:	ddf0      	ble.n	80089d0 <main+0x34c>
  }

  lcd_print(1, 1, testArr);
 80089ee:	463b      	mov	r3, r7
 80089f0:	461a      	mov	r2, r3
 80089f2:	2101      	movs	r1, #1
 80089f4:	2001      	movs	r0, #1
 80089f6:	f7f7 ff73 	bl	80008e0 <lcd_print>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80089fa:	f7ff fc4d 	bl	8008298 <mainLoop>
 80089fe:	e7fc      	b.n	80089fa <main+0x376>
 8008a00:	20000b44 	.word	0x20000b44

08008a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b090      	sub	sp, #64	; 0x40
 8008a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008a0a:	f107 0318 	add.w	r3, r7, #24
 8008a0e:	2228      	movs	r2, #40	; 0x28
 8008a10:	2100      	movs	r1, #0
 8008a12:	4618      	mov	r0, r3
 8008a14:	f004 fb92 	bl	800d13c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008a18:	1d3b      	adds	r3, r7, #4
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	605a      	str	r2, [r3, #4]
 8008a20:	609a      	str	r2, [r3, #8]
 8008a22:	60da      	str	r2, [r3, #12]
 8008a24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008a26:	2301      	movs	r3, #1
 8008a28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008a2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008a30:	2300      	movs	r3, #0
 8008a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008a34:	2301      	movs	r3, #1
 8008a36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008a3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008a42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a48:	f107 0318 	add.w	r3, r7, #24
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f002 fc3f 	bl	800b2d0 <HAL_RCC_OscConfig>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008a58:	f000 f9a2 	bl	8008da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a5c:	230f      	movs	r3, #15
 8008a5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a60:	2302      	movs	r3, #2
 8008a62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a64:	2300      	movs	r3, #0
 8008a66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008a72:	1d3b      	adds	r3, r7, #4
 8008a74:	2102      	movs	r1, #2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f002 feac 	bl	800b7d4 <HAL_RCC_ClockConfig>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008a82:	f000 f98d 	bl	8008da0 <Error_Handler>
  }
}
 8008a86:	bf00      	nop
 8008a88:	3740      	adds	r7, #64	; 0x40
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008a94:	4b16      	ldr	r3, [pc, #88]	; (8008af0 <MX_CAN_Init+0x60>)
 8008a96:	4a17      	ldr	r2, [pc, #92]	; (8008af4 <MX_CAN_Init+0x64>)
 8008a98:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008a9a:	4b15      	ldr	r3, [pc, #84]	; (8008af0 <MX_CAN_Init+0x60>)
 8008a9c:	2210      	movs	r2, #16
 8008a9e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008aa0:	4b13      	ldr	r3, [pc, #76]	; (8008af0 <MX_CAN_Init+0x60>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008aa6:	4b12      	ldr	r3, [pc, #72]	; (8008af0 <MX_CAN_Init+0x60>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008aac:	4b10      	ldr	r3, [pc, #64]	; (8008af0 <MX_CAN_Init+0x60>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008ab2:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <MX_CAN_Init+0x60>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008ab8:	4b0d      	ldr	r3, [pc, #52]	; (8008af0 <MX_CAN_Init+0x60>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008abe:	4b0c      	ldr	r3, [pc, #48]	; (8008af0 <MX_CAN_Init+0x60>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008ac4:	4b0a      	ldr	r3, [pc, #40]	; (8008af0 <MX_CAN_Init+0x60>)
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008aca:	4b09      	ldr	r3, [pc, #36]	; (8008af0 <MX_CAN_Init+0x60>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008ad0:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <MX_CAN_Init+0x60>)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008ad6:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <MX_CAN_Init+0x60>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008adc:	4804      	ldr	r0, [pc, #16]	; (8008af0 <MX_CAN_Init+0x60>)
 8008ade:	f000 fbe1 	bl	80092a4 <HAL_CAN_Init>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d001      	beq.n	8008aec <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008ae8:	f000 f95a 	bl	8008da0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008aec:	bf00      	nop
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	20000dec 	.word	0x20000dec
 8008af4:	40006400 	.word	0x40006400

08008af8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008afc:	4b12      	ldr	r3, [pc, #72]	; (8008b48 <MX_I2C1_Init+0x50>)
 8008afe:	4a13      	ldr	r2, [pc, #76]	; (8008b4c <MX_I2C1_Init+0x54>)
 8008b00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008b02:	4b11      	ldr	r3, [pc, #68]	; (8008b48 <MX_I2C1_Init+0x50>)
 8008b04:	4a12      	ldr	r2, [pc, #72]	; (8008b50 <MX_I2C1_Init+0x58>)
 8008b06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008b08:	4b0f      	ldr	r3, [pc, #60]	; (8008b48 <MX_I2C1_Init+0x50>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008b0e:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <MX_I2C1_Init+0x50>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008b14:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <MX_I2C1_Init+0x50>)
 8008b16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <MX_I2C1_Init+0x50>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008b22:	4b09      	ldr	r3, [pc, #36]	; (8008b48 <MX_I2C1_Init+0x50>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008b28:	4b07      	ldr	r3, [pc, #28]	; (8008b48 <MX_I2C1_Init+0x50>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008b2e:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <MX_I2C1_Init+0x50>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008b34:	4804      	ldr	r0, [pc, #16]	; (8008b48 <MX_I2C1_Init+0x50>)
 8008b36:	f001 f9a9 	bl	8009e8c <HAL_I2C_Init>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d001      	beq.n	8008b44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008b40:	f000 f92e 	bl	8008da0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008b44:	bf00      	nop
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	20000e14 	.word	0x20000e14
 8008b4c:	40005400 	.word	0x40005400
 8008b50:	00061a80 	.word	0x00061a80

08008b54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b5a:	f107 0308 	add.w	r3, r7, #8
 8008b5e:	2200      	movs	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	605a      	str	r2, [r3, #4]
 8008b64:	609a      	str	r2, [r3, #8]
 8008b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b68:	463b      	mov	r3, r7
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008b70:	4b1f      	ldr	r3, [pc, #124]	; (8008bf0 <MX_TIM1_Init+0x9c>)
 8008b72:	4a20      	ldr	r2, [pc, #128]	; (8008bf4 <MX_TIM1_Init+0xa0>)
 8008b74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008b76:	4b1e      	ldr	r3, [pc, #120]	; (8008bf0 <MX_TIM1_Init+0x9c>)
 8008b78:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008b7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b7e:	4b1c      	ldr	r3, [pc, #112]	; (8008bf0 <MX_TIM1_Init+0x9c>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008b84:	4b1a      	ldr	r3, [pc, #104]	; (8008bf0 <MX_TIM1_Init+0x9c>)
 8008b86:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008b8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b8c:	4b18      	ldr	r3, [pc, #96]	; (8008bf0 <MX_TIM1_Init+0x9c>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008b92:	4b17      	ldr	r3, [pc, #92]	; (8008bf0 <MX_TIM1_Init+0x9c>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b98:	4b15      	ldr	r3, [pc, #84]	; (8008bf0 <MX_TIM1_Init+0x9c>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008b9e:	4814      	ldr	r0, [pc, #80]	; (8008bf0 <MX_TIM1_Init+0x9c>)
 8008ba0:	f002 ffa6 	bl	800baf0 <HAL_TIM_Base_Init>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008baa:	f000 f8f9 	bl	8008da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008bb4:	f107 0308 	add.w	r3, r7, #8
 8008bb8:	4619      	mov	r1, r3
 8008bba:	480d      	ldr	r0, [pc, #52]	; (8008bf0 <MX_TIM1_Init+0x9c>)
 8008bbc:	f003 f950 	bl	800be60 <HAL_TIM_ConfigClockSource>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008bc6:	f000 f8eb 	bl	8008da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008bd2:	463b      	mov	r3, r7
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4806      	ldr	r0, [pc, #24]	; (8008bf0 <MX_TIM1_Init+0x9c>)
 8008bd8:	f003 fb3e 	bl	800c258 <HAL_TIMEx_MasterConfigSynchronization>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008be2:	f000 f8dd 	bl	8008da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008be6:	bf00      	nop
 8008be8:	3718      	adds	r7, #24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20000e68 	.word	0x20000e68
 8008bf4:	40012c00 	.word	0x40012c00

08008bf8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008bfc:	4b11      	ldr	r3, [pc, #68]	; (8008c44 <MX_USART1_UART_Init+0x4c>)
 8008bfe:	4a12      	ldr	r2, [pc, #72]	; (8008c48 <MX_USART1_UART_Init+0x50>)
 8008c00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008c02:	4b10      	ldr	r3, [pc, #64]	; (8008c44 <MX_USART1_UART_Init+0x4c>)
 8008c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008c08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008c0a:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <MX_USART1_UART_Init+0x4c>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008c10:	4b0c      	ldr	r3, [pc, #48]	; (8008c44 <MX_USART1_UART_Init+0x4c>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008c16:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <MX_USART1_UART_Init+0x4c>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008c1c:	4b09      	ldr	r3, [pc, #36]	; (8008c44 <MX_USART1_UART_Init+0x4c>)
 8008c1e:	220c      	movs	r2, #12
 8008c20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c22:	4b08      	ldr	r3, [pc, #32]	; (8008c44 <MX_USART1_UART_Init+0x4c>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c28:	4b06      	ldr	r3, [pc, #24]	; (8008c44 <MX_USART1_UART_Init+0x4c>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008c2e:	4805      	ldr	r0, [pc, #20]	; (8008c44 <MX_USART1_UART_Init+0x4c>)
 8008c30:	f003 fb90 	bl	800c354 <HAL_UART_Init>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008c3a:	f000 f8b1 	bl	8008da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008c3e:	bf00      	nop
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000eb0 	.word	0x20000eb0
 8008c48:	40013800 	.word	0x40013800

08008c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b088      	sub	sp, #32
 8008c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c52:	f107 0310 	add.w	r3, r7, #16
 8008c56:	2200      	movs	r2, #0
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	605a      	str	r2, [r3, #4]
 8008c5c:	609a      	str	r2, [r3, #8]
 8008c5e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c60:	4b4b      	ldr	r3, [pc, #300]	; (8008d90 <MX_GPIO_Init+0x144>)
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	4a4a      	ldr	r2, [pc, #296]	; (8008d90 <MX_GPIO_Init+0x144>)
 8008c66:	f043 0310 	orr.w	r3, r3, #16
 8008c6a:	6193      	str	r3, [r2, #24]
 8008c6c:	4b48      	ldr	r3, [pc, #288]	; (8008d90 <MX_GPIO_Init+0x144>)
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	f003 0310 	and.w	r3, r3, #16
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008c78:	4b45      	ldr	r3, [pc, #276]	; (8008d90 <MX_GPIO_Init+0x144>)
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	4a44      	ldr	r2, [pc, #272]	; (8008d90 <MX_GPIO_Init+0x144>)
 8008c7e:	f043 0320 	orr.w	r3, r3, #32
 8008c82:	6193      	str	r3, [r2, #24]
 8008c84:	4b42      	ldr	r3, [pc, #264]	; (8008d90 <MX_GPIO_Init+0x144>)
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	f003 0320 	and.w	r3, r3, #32
 8008c8c:	60bb      	str	r3, [r7, #8]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c90:	4b3f      	ldr	r3, [pc, #252]	; (8008d90 <MX_GPIO_Init+0x144>)
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	4a3e      	ldr	r2, [pc, #248]	; (8008d90 <MX_GPIO_Init+0x144>)
 8008c96:	f043 0304 	orr.w	r3, r3, #4
 8008c9a:	6193      	str	r3, [r2, #24]
 8008c9c:	4b3c      	ldr	r3, [pc, #240]	; (8008d90 <MX_GPIO_Init+0x144>)
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	f003 0304 	and.w	r3, r3, #4
 8008ca4:	607b      	str	r3, [r7, #4]
 8008ca6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ca8:	4b39      	ldr	r3, [pc, #228]	; (8008d90 <MX_GPIO_Init+0x144>)
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	4a38      	ldr	r2, [pc, #224]	; (8008d90 <MX_GPIO_Init+0x144>)
 8008cae:	f043 0308 	orr.w	r3, r3, #8
 8008cb2:	6193      	str	r3, [r2, #24]
 8008cb4:	4b36      	ldr	r3, [pc, #216]	; (8008d90 <MX_GPIO_Init+0x144>)
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	f003 0308 	and.w	r3, r3, #8
 8008cbc:	603b      	str	r3, [r7, #0]
 8008cbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	21f0      	movs	r1, #240	; 0xf0
 8008cc4:	4833      	ldr	r0, [pc, #204]	; (8008d94 <MX_GPIO_Init+0x148>)
 8008cc6:	f001 f8b0 	bl	8009e2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f241 0130 	movw	r1, #4144	; 0x1030
 8008cd0:	4831      	ldr	r0, [pc, #196]	; (8008d98 <MX_GPIO_Init+0x14c>)
 8008cd2:	f001 f8aa 	bl	8009e2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f640 4107 	movw	r1, #3079	; 0xc07
 8008cdc:	482f      	ldr	r0, [pc, #188]	; (8008d9c <MX_GPIO_Init+0x150>)
 8008cde:	f001 f8a4 	bl	8009e2a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008ce2:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008ce6:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cec:	2300      	movs	r3, #0
 8008cee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008cf0:	f107 0310 	add.w	r3, r7, #16
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4828      	ldr	r0, [pc, #160]	; (8008d98 <MX_GPIO_Init+0x14c>)
 8008cf8:	f000 fe20 	bl	800993c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008cfc:	f248 130f 	movw	r3, #33039	; 0x810f
 8008d00:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d02:	2300      	movs	r3, #0
 8008d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d0a:	f107 0310 	add.w	r3, r7, #16
 8008d0e:	4619      	mov	r1, r3
 8008d10:	4820      	ldr	r0, [pc, #128]	; (8008d94 <MX_GPIO_Init+0x148>)
 8008d12:	f000 fe13 	bl	800993c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008d16:	23f0      	movs	r3, #240	; 0xf0
 8008d18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d22:	2302      	movs	r3, #2
 8008d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d26:	f107 0310 	add.w	r3, r7, #16
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	4819      	ldr	r0, [pc, #100]	; (8008d94 <MX_GPIO_Init+0x148>)
 8008d2e:	f000 fe05 	bl	800993c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008d32:	f241 0330 	movw	r3, #4144	; 0x1030
 8008d36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d40:	2302      	movs	r3, #2
 8008d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d44:	f107 0310 	add.w	r3, r7, #16
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4813      	ldr	r0, [pc, #76]	; (8008d98 <MX_GPIO_Init+0x14c>)
 8008d4c:	f000 fdf6 	bl	800993c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008d50:	f640 4307 	movw	r3, #3079	; 0xc07
 8008d54:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d56:	2301      	movs	r3, #1
 8008d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d5e:	2302      	movs	r3, #2
 8008d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d62:	f107 0310 	add.w	r3, r7, #16
 8008d66:	4619      	mov	r1, r3
 8008d68:	480c      	ldr	r0, [pc, #48]	; (8008d9c <MX_GPIO_Init+0x150>)
 8008d6a:	f000 fde7 	bl	800993c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008d6e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d74:	2300      	movs	r3, #0
 8008d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d7c:	f107 0310 	add.w	r3, r7, #16
 8008d80:	4619      	mov	r1, r3
 8008d82:	4806      	ldr	r0, [pc, #24]	; (8008d9c <MX_GPIO_Init+0x150>)
 8008d84:	f000 fdda 	bl	800993c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008d88:	bf00      	nop
 8008d8a:	3720      	adds	r7, #32
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	40021000 	.word	0x40021000
 8008d94:	40010800 	.word	0x40010800
 8008d98:	40011000 	.word	0x40011000
 8008d9c:	40010c00 	.word	0x40010c00

08008da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008da4:	bf00      	nop
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bc80      	pop	{r7}
 8008daa:	4770      	bx	lr

08008dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008db2:	4b15      	ldr	r3, [pc, #84]	; (8008e08 <HAL_MspInit+0x5c>)
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	4a14      	ldr	r2, [pc, #80]	; (8008e08 <HAL_MspInit+0x5c>)
 8008db8:	f043 0301 	orr.w	r3, r3, #1
 8008dbc:	6193      	str	r3, [r2, #24]
 8008dbe:	4b12      	ldr	r3, [pc, #72]	; (8008e08 <HAL_MspInit+0x5c>)
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	60bb      	str	r3, [r7, #8]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008dca:	4b0f      	ldr	r3, [pc, #60]	; (8008e08 <HAL_MspInit+0x5c>)
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	4a0e      	ldr	r2, [pc, #56]	; (8008e08 <HAL_MspInit+0x5c>)
 8008dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dd4:	61d3      	str	r3, [r2, #28]
 8008dd6:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <HAL_MspInit+0x5c>)
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dde:	607b      	str	r3, [r7, #4]
 8008de0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008de2:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <HAL_MspInit+0x60>)
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	60fb      	str	r3, [r7, #12]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	4a04      	ldr	r2, [pc, #16]	; (8008e0c <HAL_MspInit+0x60>)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008dfe:	bf00      	nop
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bc80      	pop	{r7}
 8008e06:	4770      	bx	lr
 8008e08:	40021000 	.word	0x40021000
 8008e0c:	40010000 	.word	0x40010000

08008e10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e18:	f107 0310 	add.w	r3, r7, #16
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	605a      	str	r2, [r3, #4]
 8008e22:	609a      	str	r2, [r3, #8]
 8008e24:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a1c      	ldr	r2, [pc, #112]	; (8008e9c <HAL_CAN_MspInit+0x8c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d131      	bne.n	8008e94 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008e30:	4b1b      	ldr	r3, [pc, #108]	; (8008ea0 <HAL_CAN_MspInit+0x90>)
 8008e32:	69db      	ldr	r3, [r3, #28]
 8008e34:	4a1a      	ldr	r2, [pc, #104]	; (8008ea0 <HAL_CAN_MspInit+0x90>)
 8008e36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008e3a:	61d3      	str	r3, [r2, #28]
 8008e3c:	4b18      	ldr	r3, [pc, #96]	; (8008ea0 <HAL_CAN_MspInit+0x90>)
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e48:	4b15      	ldr	r3, [pc, #84]	; (8008ea0 <HAL_CAN_MspInit+0x90>)
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	4a14      	ldr	r2, [pc, #80]	; (8008ea0 <HAL_CAN_MspInit+0x90>)
 8008e4e:	f043 0304 	orr.w	r3, r3, #4
 8008e52:	6193      	str	r3, [r2, #24]
 8008e54:	4b12      	ldr	r3, [pc, #72]	; (8008ea0 <HAL_CAN_MspInit+0x90>)
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f003 0304 	and.w	r3, r3, #4
 8008e5c:	60bb      	str	r3, [r7, #8]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e66:	2300      	movs	r3, #0
 8008e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e6e:	f107 0310 	add.w	r3, r7, #16
 8008e72:	4619      	mov	r1, r3
 8008e74:	480b      	ldr	r0, [pc, #44]	; (8008ea4 <HAL_CAN_MspInit+0x94>)
 8008e76:	f000 fd61 	bl	800993c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e80:	2302      	movs	r3, #2
 8008e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e84:	2303      	movs	r3, #3
 8008e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e88:	f107 0310 	add.w	r3, r7, #16
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4805      	ldr	r0, [pc, #20]	; (8008ea4 <HAL_CAN_MspInit+0x94>)
 8008e90:	f000 fd54 	bl	800993c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008e94:	bf00      	nop
 8008e96:	3720      	adds	r7, #32
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	40006400 	.word	0x40006400
 8008ea0:	40021000 	.word	0x40021000
 8008ea4:	40010800 	.word	0x40010800

08008ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b088      	sub	sp, #32
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eb0:	f107 0310 	add.w	r3, r7, #16
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	605a      	str	r2, [r3, #4]
 8008eba:	609a      	str	r2, [r3, #8]
 8008ebc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a15      	ldr	r2, [pc, #84]	; (8008f18 <HAL_I2C_MspInit+0x70>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d123      	bne.n	8008f10 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ec8:	4b14      	ldr	r3, [pc, #80]	; (8008f1c <HAL_I2C_MspInit+0x74>)
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	4a13      	ldr	r2, [pc, #76]	; (8008f1c <HAL_I2C_MspInit+0x74>)
 8008ece:	f043 0308 	orr.w	r3, r3, #8
 8008ed2:	6193      	str	r3, [r2, #24]
 8008ed4:	4b11      	ldr	r3, [pc, #68]	; (8008f1c <HAL_I2C_MspInit+0x74>)
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	f003 0308 	and.w	r3, r3, #8
 8008edc:	60fb      	str	r3, [r7, #12]
 8008ede:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008ee0:	23c0      	movs	r3, #192	; 0xc0
 8008ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008ee4:	2312      	movs	r3, #18
 8008ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008eec:	f107 0310 	add.w	r3, r7, #16
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	480b      	ldr	r0, [pc, #44]	; (8008f20 <HAL_I2C_MspInit+0x78>)
 8008ef4:	f000 fd22 	bl	800993c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008ef8:	4b08      	ldr	r3, [pc, #32]	; (8008f1c <HAL_I2C_MspInit+0x74>)
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	4a07      	ldr	r2, [pc, #28]	; (8008f1c <HAL_I2C_MspInit+0x74>)
 8008efe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f02:	61d3      	str	r3, [r2, #28]
 8008f04:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <HAL_I2C_MspInit+0x74>)
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f0c:	60bb      	str	r3, [r7, #8]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008f10:	bf00      	nop
 8008f12:	3720      	adds	r7, #32
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40005400 	.word	0x40005400
 8008f1c:	40021000 	.word	0x40021000
 8008f20:	40010c00 	.word	0x40010c00

08008f24 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a0a      	ldr	r2, [pc, #40]	; (8008f5c <HAL_I2C_MspDeInit+0x38>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d10d      	bne.n	8008f52 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008f36:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <HAL_I2C_MspDeInit+0x3c>)
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	4a09      	ldr	r2, [pc, #36]	; (8008f60 <HAL_I2C_MspDeInit+0x3c>)
 8008f3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f40:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008f42:	2140      	movs	r1, #64	; 0x40
 8008f44:	4807      	ldr	r0, [pc, #28]	; (8008f64 <HAL_I2C_MspDeInit+0x40>)
 8008f46:	f000 fe8d 	bl	8009c64 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008f4a:	2180      	movs	r1, #128	; 0x80
 8008f4c:	4805      	ldr	r0, [pc, #20]	; (8008f64 <HAL_I2C_MspDeInit+0x40>)
 8008f4e:	f000 fe89 	bl	8009c64 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008f52:	bf00      	nop
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	40005400 	.word	0x40005400
 8008f60:	40021000 	.word	0x40021000
 8008f64:	40010c00 	.word	0x40010c00

08008f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a0d      	ldr	r2, [pc, #52]	; (8008fac <HAL_TIM_Base_MspInit+0x44>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d113      	bne.n	8008fa2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008f7a:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <HAL_TIM_Base_MspInit+0x48>)
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	4a0c      	ldr	r2, [pc, #48]	; (8008fb0 <HAL_TIM_Base_MspInit+0x48>)
 8008f80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008f84:	6193      	str	r3, [r2, #24]
 8008f86:	4b0a      	ldr	r3, [pc, #40]	; (8008fb0 <HAL_TIM_Base_MspInit+0x48>)
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008f92:	2200      	movs	r2, #0
 8008f94:	2100      	movs	r1, #0
 8008f96:	2019      	movs	r0, #25
 8008f98:	f000 fb57 	bl	800964a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008f9c:	2019      	movs	r0, #25
 8008f9e:	f000 fb70 	bl	8009682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008fa2:	bf00      	nop
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	40012c00 	.word	0x40012c00
 8008fb0:	40021000 	.word	0x40021000

08008fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fbc:	f107 0310 	add.w	r3, r7, #16
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	605a      	str	r2, [r3, #4]
 8008fc6:	609a      	str	r2, [r3, #8]
 8008fc8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a20      	ldr	r2, [pc, #128]	; (8009050 <HAL_UART_MspInit+0x9c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d139      	bne.n	8009048 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008fd4:	4b1f      	ldr	r3, [pc, #124]	; (8009054 <HAL_UART_MspInit+0xa0>)
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	4a1e      	ldr	r2, [pc, #120]	; (8009054 <HAL_UART_MspInit+0xa0>)
 8008fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fde:	6193      	str	r3, [r2, #24]
 8008fe0:	4b1c      	ldr	r3, [pc, #112]	; (8009054 <HAL_UART_MspInit+0xa0>)
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fe8:	60fb      	str	r3, [r7, #12]
 8008fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fec:	4b19      	ldr	r3, [pc, #100]	; (8009054 <HAL_UART_MspInit+0xa0>)
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	4a18      	ldr	r2, [pc, #96]	; (8009054 <HAL_UART_MspInit+0xa0>)
 8008ff2:	f043 0304 	orr.w	r3, r3, #4
 8008ff6:	6193      	str	r3, [r2, #24]
 8008ff8:	4b16      	ldr	r3, [pc, #88]	; (8009054 <HAL_UART_MspInit+0xa0>)
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	60bb      	str	r3, [r7, #8]
 8009002:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009008:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800900a:	2302      	movs	r3, #2
 800900c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800900e:	2303      	movs	r3, #3
 8009010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009012:	f107 0310 	add.w	r3, r7, #16
 8009016:	4619      	mov	r1, r3
 8009018:	480f      	ldr	r0, [pc, #60]	; (8009058 <HAL_UART_MspInit+0xa4>)
 800901a:	f000 fc8f 	bl	800993c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800901e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009024:	2300      	movs	r3, #0
 8009026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009028:	2300      	movs	r3, #0
 800902a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800902c:	f107 0310 	add.w	r3, r7, #16
 8009030:	4619      	mov	r1, r3
 8009032:	4809      	ldr	r0, [pc, #36]	; (8009058 <HAL_UART_MspInit+0xa4>)
 8009034:	f000 fc82 	bl	800993c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009038:	2200      	movs	r2, #0
 800903a:	2100      	movs	r1, #0
 800903c:	2025      	movs	r0, #37	; 0x25
 800903e:	f000 fb04 	bl	800964a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009042:	2025      	movs	r0, #37	; 0x25
 8009044:	f000 fb1d 	bl	8009682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009048:	bf00      	nop
 800904a:	3720      	adds	r7, #32
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	40013800 	.word	0x40013800
 8009054:	40021000 	.word	0x40021000
 8009058:	40010800 	.word	0x40010800

0800905c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800905c:	b480      	push	{r7}
 800905e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009060:	e7fe      	b.n	8009060 <NMI_Handler+0x4>

08009062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009062:	b480      	push	{r7}
 8009064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009066:	e7fe      	b.n	8009066 <HardFault_Handler+0x4>

08009068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800906c:	e7fe      	b.n	800906c <MemManage_Handler+0x4>

0800906e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800906e:	b480      	push	{r7}
 8009070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009072:	e7fe      	b.n	8009072 <BusFault_Handler+0x4>

08009074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009074:	b480      	push	{r7}
 8009076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009078:	e7fe      	b.n	8009078 <UsageFault_Handler+0x4>

0800907a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800907a:	b480      	push	{r7}
 800907c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800907e:	bf00      	nop
 8009080:	46bd      	mov	sp, r7
 8009082:	bc80      	pop	{r7}
 8009084:	4770      	bx	lr

08009086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009086:	b480      	push	{r7}
 8009088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800908a:	bf00      	nop
 800908c:	46bd      	mov	sp, r7
 800908e:	bc80      	pop	{r7}
 8009090:	4770      	bx	lr

08009092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009092:	b480      	push	{r7}
 8009094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009096:	bf00      	nop
 8009098:	46bd      	mov	sp, r7
 800909a:	bc80      	pop	{r7}
 800909c:	4770      	bx	lr

0800909e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80090a2:	f000 f8bf 	bl	8009224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80090a6:	bf00      	nop
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80090b0:	4802      	ldr	r0, [pc, #8]	; (80090bc <TIM1_UP_IRQHandler+0x10>)
 80090b2:	f002 fdcd 	bl	800bc50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80090b6:	bf00      	nop
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000e68 	.word	0x20000e68

080090c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80090c4:	4802      	ldr	r0, [pc, #8]	; (80090d0 <USART1_IRQHandler+0x10>)
 80090c6:	f003 f9ef 	bl	800c4a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80090ca:	bf00      	nop
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	20000eb0 	.word	0x20000eb0

080090d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80090dc:	4a14      	ldr	r2, [pc, #80]	; (8009130 <_sbrk+0x5c>)
 80090de:	4b15      	ldr	r3, [pc, #84]	; (8009134 <_sbrk+0x60>)
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80090e8:	4b13      	ldr	r3, [pc, #76]	; (8009138 <_sbrk+0x64>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d102      	bne.n	80090f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80090f0:	4b11      	ldr	r3, [pc, #68]	; (8009138 <_sbrk+0x64>)
 80090f2:	4a12      	ldr	r2, [pc, #72]	; (800913c <_sbrk+0x68>)
 80090f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80090f6:	4b10      	ldr	r3, [pc, #64]	; (8009138 <_sbrk+0x64>)
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4413      	add	r3, r2
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	429a      	cmp	r2, r3
 8009102:	d207      	bcs.n	8009114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009104:	f004 f858 	bl	800d1b8 <__errno>
 8009108:	4603      	mov	r3, r0
 800910a:	220c      	movs	r2, #12
 800910c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800910e:	f04f 33ff 	mov.w	r3, #4294967295
 8009112:	e009      	b.n	8009128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009114:	4b08      	ldr	r3, [pc, #32]	; (8009138 <_sbrk+0x64>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800911a:	4b07      	ldr	r3, [pc, #28]	; (8009138 <_sbrk+0x64>)
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4413      	add	r3, r2
 8009122:	4a05      	ldr	r2, [pc, #20]	; (8009138 <_sbrk+0x64>)
 8009124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009126:	68fb      	ldr	r3, [r7, #12]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3718      	adds	r7, #24
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	2000c000 	.word	0x2000c000
 8009134:	00000400 	.word	0x00000400
 8009138:	20000f4c 	.word	0x20000f4c
 800913c:	200010a0 	.word	0x200010a0

08009140 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009140:	b480      	push	{r7}
 8009142:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009144:	bf00      	nop
 8009146:	46bd      	mov	sp, r7
 8009148:	bc80      	pop	{r7}
 800914a:	4770      	bx	lr

0800914c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800914c:	480c      	ldr	r0, [pc, #48]	; (8009180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800914e:	490d      	ldr	r1, [pc, #52]	; (8009184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009150:	4a0d      	ldr	r2, [pc, #52]	; (8009188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009154:	e002      	b.n	800915c <LoopCopyDataInit>

08009156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800915a:	3304      	adds	r3, #4

0800915c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800915c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800915e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009160:	d3f9      	bcc.n	8009156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009162:	4a0a      	ldr	r2, [pc, #40]	; (800918c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009164:	4c0a      	ldr	r4, [pc, #40]	; (8009190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009168:	e001      	b.n	800916e <LoopFillZerobss>

0800916a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800916a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800916c:	3204      	adds	r2, #4

0800916e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800916e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009170:	d3fb      	bcc.n	800916a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009172:	f7ff ffe5 	bl	8009140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009176:	f004 f825 	bl	800d1c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800917a:	f7ff fa83 	bl	8008684 <main>
  bx lr
 800917e:	4770      	bx	lr
  ldr r0, =_sdata
 8009180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009184:	20000a2c 	.word	0x20000a2c
  ldr r2, =_sidata
 8009188:	0800e8b0 	.word	0x0800e8b0
  ldr r2, =_sbss
 800918c:	20000a2c 	.word	0x20000a2c
  ldr r4, =_ebss
 8009190:	2000109c 	.word	0x2000109c

08009194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009194:	e7fe      	b.n	8009194 <ADC1_2_IRQHandler>
	...

08009198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800919c:	4b08      	ldr	r3, [pc, #32]	; (80091c0 <HAL_Init+0x28>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a07      	ldr	r2, [pc, #28]	; (80091c0 <HAL_Init+0x28>)
 80091a2:	f043 0310 	orr.w	r3, r3, #16
 80091a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80091a8:	2003      	movs	r0, #3
 80091aa:	f000 fa43 	bl	8009634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80091ae:	200f      	movs	r0, #15
 80091b0:	f000 f808 	bl	80091c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80091b4:	f7ff fdfa 	bl	8008dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	40022000 	.word	0x40022000

080091c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80091cc:	4b12      	ldr	r3, [pc, #72]	; (8009218 <HAL_InitTick+0x54>)
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	4b12      	ldr	r3, [pc, #72]	; (800921c <HAL_InitTick+0x58>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	4619      	mov	r1, r3
 80091d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80091da:	fbb3 f3f1 	udiv	r3, r3, r1
 80091de:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fa5b 	bl	800969e <HAL_SYSTICK_Config>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e00e      	b.n	8009210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b0f      	cmp	r3, #15
 80091f6:	d80a      	bhi.n	800920e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80091f8:	2200      	movs	r2, #0
 80091fa:	6879      	ldr	r1, [r7, #4]
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009200:	f000 fa23 	bl	800964a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009204:	4a06      	ldr	r2, [pc, #24]	; (8009220 <HAL_InitTick+0x5c>)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	e000      	b.n	8009210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
}
 8009210:	4618      	mov	r0, r3
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	200009d0 	.word	0x200009d0
 800921c:	200009d8 	.word	0x200009d8
 8009220:	200009d4 	.word	0x200009d4

08009224 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009224:	b480      	push	{r7}
 8009226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009228:	4b05      	ldr	r3, [pc, #20]	; (8009240 <HAL_IncTick+0x1c>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	461a      	mov	r2, r3
 800922e:	4b05      	ldr	r3, [pc, #20]	; (8009244 <HAL_IncTick+0x20>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4413      	add	r3, r2
 8009234:	4a03      	ldr	r2, [pc, #12]	; (8009244 <HAL_IncTick+0x20>)
 8009236:	6013      	str	r3, [r2, #0]
}
 8009238:	bf00      	nop
 800923a:	46bd      	mov	sp, r7
 800923c:	bc80      	pop	{r7}
 800923e:	4770      	bx	lr
 8009240:	200009d8 	.word	0x200009d8
 8009244:	20000f50 	.word	0x20000f50

08009248 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009248:	b480      	push	{r7}
 800924a:	af00      	add	r7, sp, #0
  return uwTick;
 800924c:	4b02      	ldr	r3, [pc, #8]	; (8009258 <HAL_GetTick+0x10>)
 800924e:	681b      	ldr	r3, [r3, #0]
}
 8009250:	4618      	mov	r0, r3
 8009252:	46bd      	mov	sp, r7
 8009254:	bc80      	pop	{r7}
 8009256:	4770      	bx	lr
 8009258:	20000f50 	.word	0x20000f50

0800925c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009264:	f7ff fff0 	bl	8009248 <HAL_GetTick>
 8009268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009274:	d005      	beq.n	8009282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009276:	4b0a      	ldr	r3, [pc, #40]	; (80092a0 <HAL_Delay+0x44>)
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4413      	add	r3, r2
 8009280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009282:	bf00      	nop
 8009284:	f7ff ffe0 	bl	8009248 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	429a      	cmp	r2, r3
 8009292:	d8f7      	bhi.n	8009284 <HAL_Delay+0x28>
  {
  }
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	200009d8 	.word	0x200009d8

080092a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e0ed      	b.n	8009492 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d102      	bne.n	80092c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7ff fda4 	bl	8008e10 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f042 0201 	orr.w	r2, r2, #1
 80092d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092d8:	f7ff ffb6 	bl	8009248 <HAL_GetTick>
 80092dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80092de:	e012      	b.n	8009306 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80092e0:	f7ff ffb2 	bl	8009248 <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	2b0a      	cmp	r3, #10
 80092ec:	d90b      	bls.n	8009306 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2205      	movs	r2, #5
 80092fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e0c5      	b.n	8009492 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	f003 0301 	and.w	r3, r3, #1
 8009310:	2b00      	cmp	r3, #0
 8009312:	d0e5      	beq.n	80092e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f022 0202 	bic.w	r2, r2, #2
 8009322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009324:	f7ff ff90 	bl	8009248 <HAL_GetTick>
 8009328:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800932a:	e012      	b.n	8009352 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800932c:	f7ff ff8c 	bl	8009248 <HAL_GetTick>
 8009330:	4602      	mov	r2, r0
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	2b0a      	cmp	r3, #10
 8009338:	d90b      	bls.n	8009352 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2205      	movs	r2, #5
 800934a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e09f      	b.n	8009492 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e5      	bne.n	800932c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	7e1b      	ldrb	r3, [r3, #24]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d108      	bne.n	800937a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	e007      	b.n	800938a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009388:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	7e5b      	ldrb	r3, [r3, #25]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d108      	bne.n	80093a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	e007      	b.n	80093b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	7e9b      	ldrb	r3, [r3, #26]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d108      	bne.n	80093ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f042 0220 	orr.w	r2, r2, #32
 80093ca:	601a      	str	r2, [r3, #0]
 80093cc:	e007      	b.n	80093de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f022 0220 	bic.w	r2, r2, #32
 80093dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	7edb      	ldrb	r3, [r3, #27]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d108      	bne.n	80093f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0210 	bic.w	r2, r2, #16
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	e007      	b.n	8009408 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f042 0210 	orr.w	r2, r2, #16
 8009406:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7f1b      	ldrb	r3, [r3, #28]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d108      	bne.n	8009422 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f042 0208 	orr.w	r2, r2, #8
 800941e:	601a      	str	r2, [r3, #0]
 8009420:	e007      	b.n	8009432 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f022 0208 	bic.w	r2, r2, #8
 8009430:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	7f5b      	ldrb	r3, [r3, #29]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d108      	bne.n	800944c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f042 0204 	orr.w	r2, r2, #4
 8009448:	601a      	str	r2, [r3, #0]
 800944a:	e007      	b.n	800945c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 0204 	bic.w	r2, r2, #4
 800945a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689a      	ldr	r2, [r3, #8]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	431a      	orrs	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	431a      	orrs	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	ea42 0103 	orr.w	r1, r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	1e5a      	subs	r2, r3, #1
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
	...

0800949c <__NVIC_SetPriorityGrouping>:
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80094ac:	4b0c      	ldr	r3, [pc, #48]	; (80094e0 <__NVIC_SetPriorityGrouping+0x44>)
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80094b8:	4013      	ands	r3, r2
 80094ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80094c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80094c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80094ce:	4a04      	ldr	r2, [pc, #16]	; (80094e0 <__NVIC_SetPriorityGrouping+0x44>)
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	60d3      	str	r3, [r2, #12]
}
 80094d4:	bf00      	nop
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	bc80      	pop	{r7}
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	e000ed00 	.word	0xe000ed00

080094e4 <__NVIC_GetPriorityGrouping>:
{
 80094e4:	b480      	push	{r7}
 80094e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80094e8:	4b04      	ldr	r3, [pc, #16]	; (80094fc <__NVIC_GetPriorityGrouping+0x18>)
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	0a1b      	lsrs	r3, r3, #8
 80094ee:	f003 0307 	and.w	r3, r3, #7
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bc80      	pop	{r7}
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	e000ed00 	.word	0xe000ed00

08009500 <__NVIC_EnableIRQ>:
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	4603      	mov	r3, r0
 8009508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800950a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800950e:	2b00      	cmp	r3, #0
 8009510:	db0b      	blt.n	800952a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009512:	79fb      	ldrb	r3, [r7, #7]
 8009514:	f003 021f 	and.w	r2, r3, #31
 8009518:	4906      	ldr	r1, [pc, #24]	; (8009534 <__NVIC_EnableIRQ+0x34>)
 800951a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800951e:	095b      	lsrs	r3, r3, #5
 8009520:	2001      	movs	r0, #1
 8009522:	fa00 f202 	lsl.w	r2, r0, r2
 8009526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800952a:	bf00      	nop
 800952c:	370c      	adds	r7, #12
 800952e:	46bd      	mov	sp, r7
 8009530:	bc80      	pop	{r7}
 8009532:	4770      	bx	lr
 8009534:	e000e100 	.word	0xe000e100

08009538 <__NVIC_SetPriority>:
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	6039      	str	r1, [r7, #0]
 8009542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009548:	2b00      	cmp	r3, #0
 800954a:	db0a      	blt.n	8009562 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	b2da      	uxtb	r2, r3
 8009550:	490c      	ldr	r1, [pc, #48]	; (8009584 <__NVIC_SetPriority+0x4c>)
 8009552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009556:	0112      	lsls	r2, r2, #4
 8009558:	b2d2      	uxtb	r2, r2
 800955a:	440b      	add	r3, r1
 800955c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009560:	e00a      	b.n	8009578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	b2da      	uxtb	r2, r3
 8009566:	4908      	ldr	r1, [pc, #32]	; (8009588 <__NVIC_SetPriority+0x50>)
 8009568:	79fb      	ldrb	r3, [r7, #7]
 800956a:	f003 030f 	and.w	r3, r3, #15
 800956e:	3b04      	subs	r3, #4
 8009570:	0112      	lsls	r2, r2, #4
 8009572:	b2d2      	uxtb	r2, r2
 8009574:	440b      	add	r3, r1
 8009576:	761a      	strb	r2, [r3, #24]
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	bc80      	pop	{r7}
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	e000e100 	.word	0xe000e100
 8009588:	e000ed00 	.word	0xe000ed00

0800958c <NVIC_EncodePriority>:
{
 800958c:	b480      	push	{r7}
 800958e:	b089      	sub	sp, #36	; 0x24
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f003 0307 	and.w	r3, r3, #7
 800959e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	f1c3 0307 	rsb	r3, r3, #7
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	bf28      	it	cs
 80095aa:	2304      	movcs	r3, #4
 80095ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	3304      	adds	r3, #4
 80095b2:	2b06      	cmp	r3, #6
 80095b4:	d902      	bls.n	80095bc <NVIC_EncodePriority+0x30>
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	3b03      	subs	r3, #3
 80095ba:	e000      	b.n	80095be <NVIC_EncodePriority+0x32>
 80095bc:	2300      	movs	r3, #0
 80095be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095c0:	f04f 32ff 	mov.w	r2, #4294967295
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	fa02 f303 	lsl.w	r3, r2, r3
 80095ca:	43da      	mvns	r2, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	401a      	ands	r2, r3
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80095d4:	f04f 31ff 	mov.w	r1, #4294967295
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	fa01 f303 	lsl.w	r3, r1, r3
 80095de:	43d9      	mvns	r1, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095e4:	4313      	orrs	r3, r2
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3724      	adds	r7, #36	; 0x24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bc80      	pop	{r7}
 80095ee:	4770      	bx	lr

080095f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	3b01      	subs	r3, #1
 80095fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009600:	d301      	bcc.n	8009606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009602:	2301      	movs	r3, #1
 8009604:	e00f      	b.n	8009626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009606:	4a0a      	ldr	r2, [pc, #40]	; (8009630 <SysTick_Config+0x40>)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	3b01      	subs	r3, #1
 800960c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800960e:	210f      	movs	r1, #15
 8009610:	f04f 30ff 	mov.w	r0, #4294967295
 8009614:	f7ff ff90 	bl	8009538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009618:	4b05      	ldr	r3, [pc, #20]	; (8009630 <SysTick_Config+0x40>)
 800961a:	2200      	movs	r2, #0
 800961c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800961e:	4b04      	ldr	r3, [pc, #16]	; (8009630 <SysTick_Config+0x40>)
 8009620:	2207      	movs	r2, #7
 8009622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	e000e010 	.word	0xe000e010

08009634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7ff ff2d 	bl	800949c <__NVIC_SetPriorityGrouping>
}
 8009642:	bf00      	nop
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800964a:	b580      	push	{r7, lr}
 800964c:	b086      	sub	sp, #24
 800964e:	af00      	add	r7, sp, #0
 8009650:	4603      	mov	r3, r0
 8009652:	60b9      	str	r1, [r7, #8]
 8009654:	607a      	str	r2, [r7, #4]
 8009656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009658:	2300      	movs	r3, #0
 800965a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800965c:	f7ff ff42 	bl	80094e4 <__NVIC_GetPriorityGrouping>
 8009660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	68b9      	ldr	r1, [r7, #8]
 8009666:	6978      	ldr	r0, [r7, #20]
 8009668:	f7ff ff90 	bl	800958c <NVIC_EncodePriority>
 800966c:	4602      	mov	r2, r0
 800966e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009672:	4611      	mov	r1, r2
 8009674:	4618      	mov	r0, r3
 8009676:	f7ff ff5f 	bl	8009538 <__NVIC_SetPriority>
}
 800967a:	bf00      	nop
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b082      	sub	sp, #8
 8009686:	af00      	add	r7, sp, #0
 8009688:	4603      	mov	r3, r0
 800968a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800968c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009690:	4618      	mov	r0, r3
 8009692:	f7ff ff35 	bl	8009500 <__NVIC_EnableIRQ>
}
 8009696:	bf00      	nop
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b082      	sub	sp, #8
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7ff ffa2 	bl	80095f0 <SysTick_Config>
 80096ac:	4603      	mov	r3, r0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b085      	sub	sp, #20
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d008      	beq.n	80096e0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2204      	movs	r2, #4
 80096d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e020      	b.n	8009722 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 020e 	bic.w	r2, r2, #14
 80096ee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0201 	bic.w	r2, r2, #1
 80096fe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009708:	2101      	movs	r1, #1
 800970a:	fa01 f202 	lsl.w	r2, r1, r2
 800970e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009720:	7bfb      	ldrb	r3, [r7, #15]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	bc80      	pop	{r7}
 800972a:	4770      	bx	lr

0800972c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800973e:	b2db      	uxtb	r3, r3
 8009740:	2b02      	cmp	r3, #2
 8009742:	d005      	beq.n	8009750 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2204      	movs	r2, #4
 8009748:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	73fb      	strb	r3, [r7, #15]
 800974e:	e0d6      	b.n	80098fe <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 020e 	bic.w	r2, r2, #14
 800975e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f022 0201 	bic.w	r2, r2, #1
 800976e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	461a      	mov	r2, r3
 8009776:	4b64      	ldr	r3, [pc, #400]	; (8009908 <HAL_DMA_Abort_IT+0x1dc>)
 8009778:	429a      	cmp	r2, r3
 800977a:	d958      	bls.n	800982e <HAL_DMA_Abort_IT+0x102>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a62      	ldr	r2, [pc, #392]	; (800990c <HAL_DMA_Abort_IT+0x1e0>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d04f      	beq.n	8009826 <HAL_DMA_Abort_IT+0xfa>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a61      	ldr	r2, [pc, #388]	; (8009910 <HAL_DMA_Abort_IT+0x1e4>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d048      	beq.n	8009822 <HAL_DMA_Abort_IT+0xf6>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a5f      	ldr	r2, [pc, #380]	; (8009914 <HAL_DMA_Abort_IT+0x1e8>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d040      	beq.n	800981c <HAL_DMA_Abort_IT+0xf0>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a5e      	ldr	r2, [pc, #376]	; (8009918 <HAL_DMA_Abort_IT+0x1ec>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d038      	beq.n	8009816 <HAL_DMA_Abort_IT+0xea>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a5c      	ldr	r2, [pc, #368]	; (800991c <HAL_DMA_Abort_IT+0x1f0>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d030      	beq.n	8009810 <HAL_DMA_Abort_IT+0xe4>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a5b      	ldr	r2, [pc, #364]	; (8009920 <HAL_DMA_Abort_IT+0x1f4>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d028      	beq.n	800980a <HAL_DMA_Abort_IT+0xde>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a52      	ldr	r2, [pc, #328]	; (8009908 <HAL_DMA_Abort_IT+0x1dc>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d020      	beq.n	8009804 <HAL_DMA_Abort_IT+0xd8>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a57      	ldr	r2, [pc, #348]	; (8009924 <HAL_DMA_Abort_IT+0x1f8>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d019      	beq.n	8009800 <HAL_DMA_Abort_IT+0xd4>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a55      	ldr	r2, [pc, #340]	; (8009928 <HAL_DMA_Abort_IT+0x1fc>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d012      	beq.n	80097fc <HAL_DMA_Abort_IT+0xd0>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a54      	ldr	r2, [pc, #336]	; (800992c <HAL_DMA_Abort_IT+0x200>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d00a      	beq.n	80097f6 <HAL_DMA_Abort_IT+0xca>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a52      	ldr	r2, [pc, #328]	; (8009930 <HAL_DMA_Abort_IT+0x204>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d102      	bne.n	80097f0 <HAL_DMA_Abort_IT+0xc4>
 80097ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097ee:	e01b      	b.n	8009828 <HAL_DMA_Abort_IT+0xfc>
 80097f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097f4:	e018      	b.n	8009828 <HAL_DMA_Abort_IT+0xfc>
 80097f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097fa:	e015      	b.n	8009828 <HAL_DMA_Abort_IT+0xfc>
 80097fc:	2310      	movs	r3, #16
 80097fe:	e013      	b.n	8009828 <HAL_DMA_Abort_IT+0xfc>
 8009800:	2301      	movs	r3, #1
 8009802:	e011      	b.n	8009828 <HAL_DMA_Abort_IT+0xfc>
 8009804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009808:	e00e      	b.n	8009828 <HAL_DMA_Abort_IT+0xfc>
 800980a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800980e:	e00b      	b.n	8009828 <HAL_DMA_Abort_IT+0xfc>
 8009810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009814:	e008      	b.n	8009828 <HAL_DMA_Abort_IT+0xfc>
 8009816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800981a:	e005      	b.n	8009828 <HAL_DMA_Abort_IT+0xfc>
 800981c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009820:	e002      	b.n	8009828 <HAL_DMA_Abort_IT+0xfc>
 8009822:	2310      	movs	r3, #16
 8009824:	e000      	b.n	8009828 <HAL_DMA_Abort_IT+0xfc>
 8009826:	2301      	movs	r3, #1
 8009828:	4a42      	ldr	r2, [pc, #264]	; (8009934 <HAL_DMA_Abort_IT+0x208>)
 800982a:	6053      	str	r3, [r2, #4]
 800982c:	e057      	b.n	80098de <HAL_DMA_Abort_IT+0x1b2>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a36      	ldr	r2, [pc, #216]	; (800990c <HAL_DMA_Abort_IT+0x1e0>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d04f      	beq.n	80098d8 <HAL_DMA_Abort_IT+0x1ac>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a34      	ldr	r2, [pc, #208]	; (8009910 <HAL_DMA_Abort_IT+0x1e4>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d048      	beq.n	80098d4 <HAL_DMA_Abort_IT+0x1a8>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a33      	ldr	r2, [pc, #204]	; (8009914 <HAL_DMA_Abort_IT+0x1e8>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d040      	beq.n	80098ce <HAL_DMA_Abort_IT+0x1a2>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a31      	ldr	r2, [pc, #196]	; (8009918 <HAL_DMA_Abort_IT+0x1ec>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d038      	beq.n	80098c8 <HAL_DMA_Abort_IT+0x19c>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a30      	ldr	r2, [pc, #192]	; (800991c <HAL_DMA_Abort_IT+0x1f0>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d030      	beq.n	80098c2 <HAL_DMA_Abort_IT+0x196>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a2e      	ldr	r2, [pc, #184]	; (8009920 <HAL_DMA_Abort_IT+0x1f4>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d028      	beq.n	80098bc <HAL_DMA_Abort_IT+0x190>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a26      	ldr	r2, [pc, #152]	; (8009908 <HAL_DMA_Abort_IT+0x1dc>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d020      	beq.n	80098b6 <HAL_DMA_Abort_IT+0x18a>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a2a      	ldr	r2, [pc, #168]	; (8009924 <HAL_DMA_Abort_IT+0x1f8>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d019      	beq.n	80098b2 <HAL_DMA_Abort_IT+0x186>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a29      	ldr	r2, [pc, #164]	; (8009928 <HAL_DMA_Abort_IT+0x1fc>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d012      	beq.n	80098ae <HAL_DMA_Abort_IT+0x182>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a27      	ldr	r2, [pc, #156]	; (800992c <HAL_DMA_Abort_IT+0x200>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d00a      	beq.n	80098a8 <HAL_DMA_Abort_IT+0x17c>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a26      	ldr	r2, [pc, #152]	; (8009930 <HAL_DMA_Abort_IT+0x204>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d102      	bne.n	80098a2 <HAL_DMA_Abort_IT+0x176>
 800989c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098a0:	e01b      	b.n	80098da <HAL_DMA_Abort_IT+0x1ae>
 80098a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098a6:	e018      	b.n	80098da <HAL_DMA_Abort_IT+0x1ae>
 80098a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098ac:	e015      	b.n	80098da <HAL_DMA_Abort_IT+0x1ae>
 80098ae:	2310      	movs	r3, #16
 80098b0:	e013      	b.n	80098da <HAL_DMA_Abort_IT+0x1ae>
 80098b2:	2301      	movs	r3, #1
 80098b4:	e011      	b.n	80098da <HAL_DMA_Abort_IT+0x1ae>
 80098b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098ba:	e00e      	b.n	80098da <HAL_DMA_Abort_IT+0x1ae>
 80098bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80098c0:	e00b      	b.n	80098da <HAL_DMA_Abort_IT+0x1ae>
 80098c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098c6:	e008      	b.n	80098da <HAL_DMA_Abort_IT+0x1ae>
 80098c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098cc:	e005      	b.n	80098da <HAL_DMA_Abort_IT+0x1ae>
 80098ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098d2:	e002      	b.n	80098da <HAL_DMA_Abort_IT+0x1ae>
 80098d4:	2310      	movs	r3, #16
 80098d6:	e000      	b.n	80098da <HAL_DMA_Abort_IT+0x1ae>
 80098d8:	2301      	movs	r3, #1
 80098da:	4a17      	ldr	r2, [pc, #92]	; (8009938 <HAL_DMA_Abort_IT+0x20c>)
 80098dc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	4798      	blx	r3
    } 
  }
  return status;
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	40020080 	.word	0x40020080
 800990c:	40020008 	.word	0x40020008
 8009910:	4002001c 	.word	0x4002001c
 8009914:	40020030 	.word	0x40020030
 8009918:	40020044 	.word	0x40020044
 800991c:	40020058 	.word	0x40020058
 8009920:	4002006c 	.word	0x4002006c
 8009924:	40020408 	.word	0x40020408
 8009928:	4002041c 	.word	0x4002041c
 800992c:	40020430 	.word	0x40020430
 8009930:	40020444 	.word	0x40020444
 8009934:	40020400 	.word	0x40020400
 8009938:	40020000 	.word	0x40020000

0800993c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800993c:	b480      	push	{r7}
 800993e:	b08b      	sub	sp, #44	; 0x2c
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009946:	2300      	movs	r3, #0
 8009948:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800994a:	2300      	movs	r3, #0
 800994c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800994e:	e179      	b.n	8009c44 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009950:	2201      	movs	r2, #1
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	fa02 f303 	lsl.w	r3, r2, r3
 8009958:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	69fa      	ldr	r2, [r7, #28]
 8009960:	4013      	ands	r3, r2
 8009962:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009964:	69ba      	ldr	r2, [r7, #24]
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	429a      	cmp	r2, r3
 800996a:	f040 8168 	bne.w	8009c3e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	4a96      	ldr	r2, [pc, #600]	; (8009bcc <HAL_GPIO_Init+0x290>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d05e      	beq.n	8009a36 <HAL_GPIO_Init+0xfa>
 8009978:	4a94      	ldr	r2, [pc, #592]	; (8009bcc <HAL_GPIO_Init+0x290>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d875      	bhi.n	8009a6a <HAL_GPIO_Init+0x12e>
 800997e:	4a94      	ldr	r2, [pc, #592]	; (8009bd0 <HAL_GPIO_Init+0x294>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d058      	beq.n	8009a36 <HAL_GPIO_Init+0xfa>
 8009984:	4a92      	ldr	r2, [pc, #584]	; (8009bd0 <HAL_GPIO_Init+0x294>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d86f      	bhi.n	8009a6a <HAL_GPIO_Init+0x12e>
 800998a:	4a92      	ldr	r2, [pc, #584]	; (8009bd4 <HAL_GPIO_Init+0x298>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d052      	beq.n	8009a36 <HAL_GPIO_Init+0xfa>
 8009990:	4a90      	ldr	r2, [pc, #576]	; (8009bd4 <HAL_GPIO_Init+0x298>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d869      	bhi.n	8009a6a <HAL_GPIO_Init+0x12e>
 8009996:	4a90      	ldr	r2, [pc, #576]	; (8009bd8 <HAL_GPIO_Init+0x29c>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d04c      	beq.n	8009a36 <HAL_GPIO_Init+0xfa>
 800999c:	4a8e      	ldr	r2, [pc, #568]	; (8009bd8 <HAL_GPIO_Init+0x29c>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d863      	bhi.n	8009a6a <HAL_GPIO_Init+0x12e>
 80099a2:	4a8e      	ldr	r2, [pc, #568]	; (8009bdc <HAL_GPIO_Init+0x2a0>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d046      	beq.n	8009a36 <HAL_GPIO_Init+0xfa>
 80099a8:	4a8c      	ldr	r2, [pc, #560]	; (8009bdc <HAL_GPIO_Init+0x2a0>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d85d      	bhi.n	8009a6a <HAL_GPIO_Init+0x12e>
 80099ae:	2b12      	cmp	r3, #18
 80099b0:	d82a      	bhi.n	8009a08 <HAL_GPIO_Init+0xcc>
 80099b2:	2b12      	cmp	r3, #18
 80099b4:	d859      	bhi.n	8009a6a <HAL_GPIO_Init+0x12e>
 80099b6:	a201      	add	r2, pc, #4	; (adr r2, 80099bc <HAL_GPIO_Init+0x80>)
 80099b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099bc:	08009a37 	.word	0x08009a37
 80099c0:	08009a11 	.word	0x08009a11
 80099c4:	08009a23 	.word	0x08009a23
 80099c8:	08009a65 	.word	0x08009a65
 80099cc:	08009a6b 	.word	0x08009a6b
 80099d0:	08009a6b 	.word	0x08009a6b
 80099d4:	08009a6b 	.word	0x08009a6b
 80099d8:	08009a6b 	.word	0x08009a6b
 80099dc:	08009a6b 	.word	0x08009a6b
 80099e0:	08009a6b 	.word	0x08009a6b
 80099e4:	08009a6b 	.word	0x08009a6b
 80099e8:	08009a6b 	.word	0x08009a6b
 80099ec:	08009a6b 	.word	0x08009a6b
 80099f0:	08009a6b 	.word	0x08009a6b
 80099f4:	08009a6b 	.word	0x08009a6b
 80099f8:	08009a6b 	.word	0x08009a6b
 80099fc:	08009a6b 	.word	0x08009a6b
 8009a00:	08009a19 	.word	0x08009a19
 8009a04:	08009a2d 	.word	0x08009a2d
 8009a08:	4a75      	ldr	r2, [pc, #468]	; (8009be0 <HAL_GPIO_Init+0x2a4>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d013      	beq.n	8009a36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009a0e:	e02c      	b.n	8009a6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	623b      	str	r3, [r7, #32]
          break;
 8009a16:	e029      	b.n	8009a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	623b      	str	r3, [r7, #32]
          break;
 8009a20:	e024      	b.n	8009a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	3308      	adds	r3, #8
 8009a28:	623b      	str	r3, [r7, #32]
          break;
 8009a2a:	e01f      	b.n	8009a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	330c      	adds	r3, #12
 8009a32:	623b      	str	r3, [r7, #32]
          break;
 8009a34:	e01a      	b.n	8009a6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d102      	bne.n	8009a44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009a3e:	2304      	movs	r3, #4
 8009a40:	623b      	str	r3, [r7, #32]
          break;
 8009a42:	e013      	b.n	8009a6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d105      	bne.n	8009a58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009a4c:	2308      	movs	r3, #8
 8009a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	69fa      	ldr	r2, [r7, #28]
 8009a54:	611a      	str	r2, [r3, #16]
          break;
 8009a56:	e009      	b.n	8009a6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009a58:	2308      	movs	r3, #8
 8009a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	69fa      	ldr	r2, [r7, #28]
 8009a60:	615a      	str	r2, [r3, #20]
          break;
 8009a62:	e003      	b.n	8009a6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009a64:	2300      	movs	r3, #0
 8009a66:	623b      	str	r3, [r7, #32]
          break;
 8009a68:	e000      	b.n	8009a6c <HAL_GPIO_Init+0x130>
          break;
 8009a6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	2bff      	cmp	r3, #255	; 0xff
 8009a70:	d801      	bhi.n	8009a76 <HAL_GPIO_Init+0x13a>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	e001      	b.n	8009a7a <HAL_GPIO_Init+0x13e>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	2bff      	cmp	r3, #255	; 0xff
 8009a80:	d802      	bhi.n	8009a88 <HAL_GPIO_Init+0x14c>
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	e002      	b.n	8009a8e <HAL_GPIO_Init+0x152>
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	3b08      	subs	r3, #8
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	210f      	movs	r1, #15
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	fa01 f303 	lsl.w	r3, r1, r3
 8009a9c:	43db      	mvns	r3, r3
 8009a9e:	401a      	ands	r2, r3
 8009aa0:	6a39      	ldr	r1, [r7, #32]
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 80c1 	beq.w	8009c3e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009abc:	4b49      	ldr	r3, [pc, #292]	; (8009be4 <HAL_GPIO_Init+0x2a8>)
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	4a48      	ldr	r2, [pc, #288]	; (8009be4 <HAL_GPIO_Init+0x2a8>)
 8009ac2:	f043 0301 	orr.w	r3, r3, #1
 8009ac6:	6193      	str	r3, [r2, #24]
 8009ac8:	4b46      	ldr	r3, [pc, #280]	; (8009be4 <HAL_GPIO_Init+0x2a8>)
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	60bb      	str	r3, [r7, #8]
 8009ad2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009ad4:	4a44      	ldr	r2, [pc, #272]	; (8009be8 <HAL_GPIO_Init+0x2ac>)
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad8:	089b      	lsrs	r3, r3, #2
 8009ada:	3302      	adds	r3, #2
 8009adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ae0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	f003 0303 	and.w	r3, r3, #3
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	220f      	movs	r2, #15
 8009aec:	fa02 f303 	lsl.w	r3, r2, r3
 8009af0:	43db      	mvns	r3, r3
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	4013      	ands	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a3c      	ldr	r2, [pc, #240]	; (8009bec <HAL_GPIO_Init+0x2b0>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d01f      	beq.n	8009b40 <HAL_GPIO_Init+0x204>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a3b      	ldr	r2, [pc, #236]	; (8009bf0 <HAL_GPIO_Init+0x2b4>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d019      	beq.n	8009b3c <HAL_GPIO_Init+0x200>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a3a      	ldr	r2, [pc, #232]	; (8009bf4 <HAL_GPIO_Init+0x2b8>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d013      	beq.n	8009b38 <HAL_GPIO_Init+0x1fc>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a39      	ldr	r2, [pc, #228]	; (8009bf8 <HAL_GPIO_Init+0x2bc>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d00d      	beq.n	8009b34 <HAL_GPIO_Init+0x1f8>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a38      	ldr	r2, [pc, #224]	; (8009bfc <HAL_GPIO_Init+0x2c0>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d007      	beq.n	8009b30 <HAL_GPIO_Init+0x1f4>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a37      	ldr	r2, [pc, #220]	; (8009c00 <HAL_GPIO_Init+0x2c4>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d101      	bne.n	8009b2c <HAL_GPIO_Init+0x1f0>
 8009b28:	2305      	movs	r3, #5
 8009b2a:	e00a      	b.n	8009b42 <HAL_GPIO_Init+0x206>
 8009b2c:	2306      	movs	r3, #6
 8009b2e:	e008      	b.n	8009b42 <HAL_GPIO_Init+0x206>
 8009b30:	2304      	movs	r3, #4
 8009b32:	e006      	b.n	8009b42 <HAL_GPIO_Init+0x206>
 8009b34:	2303      	movs	r3, #3
 8009b36:	e004      	b.n	8009b42 <HAL_GPIO_Init+0x206>
 8009b38:	2302      	movs	r3, #2
 8009b3a:	e002      	b.n	8009b42 <HAL_GPIO_Init+0x206>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e000      	b.n	8009b42 <HAL_GPIO_Init+0x206>
 8009b40:	2300      	movs	r3, #0
 8009b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b44:	f002 0203 	and.w	r2, r2, #3
 8009b48:	0092      	lsls	r2, r2, #2
 8009b4a:	4093      	lsls	r3, r2
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009b52:	4925      	ldr	r1, [pc, #148]	; (8009be8 <HAL_GPIO_Init+0x2ac>)
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	089b      	lsrs	r3, r3, #2
 8009b58:	3302      	adds	r3, #2
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d006      	beq.n	8009b7a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009b6c:	4b25      	ldr	r3, [pc, #148]	; (8009c04 <HAL_GPIO_Init+0x2c8>)
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	4924      	ldr	r1, [pc, #144]	; (8009c04 <HAL_GPIO_Init+0x2c8>)
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	608b      	str	r3, [r1, #8]
 8009b78:	e006      	b.n	8009b88 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009b7a:	4b22      	ldr	r3, [pc, #136]	; (8009c04 <HAL_GPIO_Init+0x2c8>)
 8009b7c:	689a      	ldr	r2, [r3, #8]
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	43db      	mvns	r3, r3
 8009b82:	4920      	ldr	r1, [pc, #128]	; (8009c04 <HAL_GPIO_Init+0x2c8>)
 8009b84:	4013      	ands	r3, r2
 8009b86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d006      	beq.n	8009ba2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009b94:	4b1b      	ldr	r3, [pc, #108]	; (8009c04 <HAL_GPIO_Init+0x2c8>)
 8009b96:	68da      	ldr	r2, [r3, #12]
 8009b98:	491a      	ldr	r1, [pc, #104]	; (8009c04 <HAL_GPIO_Init+0x2c8>)
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	60cb      	str	r3, [r1, #12]
 8009ba0:	e006      	b.n	8009bb0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009ba2:	4b18      	ldr	r3, [pc, #96]	; (8009c04 <HAL_GPIO_Init+0x2c8>)
 8009ba4:	68da      	ldr	r2, [r3, #12]
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	43db      	mvns	r3, r3
 8009baa:	4916      	ldr	r1, [pc, #88]	; (8009c04 <HAL_GPIO_Init+0x2c8>)
 8009bac:	4013      	ands	r3, r2
 8009bae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d025      	beq.n	8009c08 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009bbc:	4b11      	ldr	r3, [pc, #68]	; (8009c04 <HAL_GPIO_Init+0x2c8>)
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	4910      	ldr	r1, [pc, #64]	; (8009c04 <HAL_GPIO_Init+0x2c8>)
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	604b      	str	r3, [r1, #4]
 8009bc8:	e025      	b.n	8009c16 <HAL_GPIO_Init+0x2da>
 8009bca:	bf00      	nop
 8009bcc:	10320000 	.word	0x10320000
 8009bd0:	10310000 	.word	0x10310000
 8009bd4:	10220000 	.word	0x10220000
 8009bd8:	10210000 	.word	0x10210000
 8009bdc:	10120000 	.word	0x10120000
 8009be0:	10110000 	.word	0x10110000
 8009be4:	40021000 	.word	0x40021000
 8009be8:	40010000 	.word	0x40010000
 8009bec:	40010800 	.word	0x40010800
 8009bf0:	40010c00 	.word	0x40010c00
 8009bf4:	40011000 	.word	0x40011000
 8009bf8:	40011400 	.word	0x40011400
 8009bfc:	40011800 	.word	0x40011800
 8009c00:	40011c00 	.word	0x40011c00
 8009c04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009c08:	4b15      	ldr	r3, [pc, #84]	; (8009c60 <HAL_GPIO_Init+0x324>)
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	43db      	mvns	r3, r3
 8009c10:	4913      	ldr	r1, [pc, #76]	; (8009c60 <HAL_GPIO_Init+0x324>)
 8009c12:	4013      	ands	r3, r2
 8009c14:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d006      	beq.n	8009c30 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009c22:	4b0f      	ldr	r3, [pc, #60]	; (8009c60 <HAL_GPIO_Init+0x324>)
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	490e      	ldr	r1, [pc, #56]	; (8009c60 <HAL_GPIO_Init+0x324>)
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	600b      	str	r3, [r1, #0]
 8009c2e:	e006      	b.n	8009c3e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009c30:	4b0b      	ldr	r3, [pc, #44]	; (8009c60 <HAL_GPIO_Init+0x324>)
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	43db      	mvns	r3, r3
 8009c38:	4909      	ldr	r1, [pc, #36]	; (8009c60 <HAL_GPIO_Init+0x324>)
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	3301      	adds	r3, #1
 8009c42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f47f ae7e 	bne.w	8009950 <HAL_GPIO_Init+0x14>
  }
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop
 8009c58:	372c      	adds	r7, #44	; 0x2c
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bc80      	pop	{r7}
 8009c5e:	4770      	bx	lr
 8009c60:	40010400 	.word	0x40010400

08009c64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b089      	sub	sp, #36	; 0x24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009c72:	e0a6      	b.n	8009dc2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009c74:	2201      	movs	r2, #1
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	fa02 f303 	lsl.w	r3, r2, r3
 8009c7c:	683a      	ldr	r2, [r7, #0]
 8009c7e:	4013      	ands	r3, r2
 8009c80:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 8099 	beq.w	8009dbc <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009c8a:	4a54      	ldr	r2, [pc, #336]	; (8009ddc <HAL_GPIO_DeInit+0x178>)
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	089b      	lsrs	r3, r3, #2
 8009c90:	3302      	adds	r3, #2
 8009c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c96:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	f003 0303 	and.w	r3, r3, #3
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	220f      	movs	r2, #15
 8009ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	4013      	ands	r3, r2
 8009caa:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a4c      	ldr	r2, [pc, #304]	; (8009de0 <HAL_GPIO_DeInit+0x17c>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d01f      	beq.n	8009cf4 <HAL_GPIO_DeInit+0x90>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a4b      	ldr	r2, [pc, #300]	; (8009de4 <HAL_GPIO_DeInit+0x180>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d019      	beq.n	8009cf0 <HAL_GPIO_DeInit+0x8c>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a4a      	ldr	r2, [pc, #296]	; (8009de8 <HAL_GPIO_DeInit+0x184>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d013      	beq.n	8009cec <HAL_GPIO_DeInit+0x88>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a49      	ldr	r2, [pc, #292]	; (8009dec <HAL_GPIO_DeInit+0x188>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d00d      	beq.n	8009ce8 <HAL_GPIO_DeInit+0x84>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a48      	ldr	r2, [pc, #288]	; (8009df0 <HAL_GPIO_DeInit+0x18c>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d007      	beq.n	8009ce4 <HAL_GPIO_DeInit+0x80>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a47      	ldr	r2, [pc, #284]	; (8009df4 <HAL_GPIO_DeInit+0x190>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d101      	bne.n	8009ce0 <HAL_GPIO_DeInit+0x7c>
 8009cdc:	2305      	movs	r3, #5
 8009cde:	e00a      	b.n	8009cf6 <HAL_GPIO_DeInit+0x92>
 8009ce0:	2306      	movs	r3, #6
 8009ce2:	e008      	b.n	8009cf6 <HAL_GPIO_DeInit+0x92>
 8009ce4:	2304      	movs	r3, #4
 8009ce6:	e006      	b.n	8009cf6 <HAL_GPIO_DeInit+0x92>
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e004      	b.n	8009cf6 <HAL_GPIO_DeInit+0x92>
 8009cec:	2302      	movs	r3, #2
 8009cee:	e002      	b.n	8009cf6 <HAL_GPIO_DeInit+0x92>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e000      	b.n	8009cf6 <HAL_GPIO_DeInit+0x92>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	69fa      	ldr	r2, [r7, #28]
 8009cf8:	f002 0203 	and.w	r2, r2, #3
 8009cfc:	0092      	lsls	r2, r2, #2
 8009cfe:	4093      	lsls	r3, r2
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d132      	bne.n	8009d6c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009d06:	4b3c      	ldr	r3, [pc, #240]	; (8009df8 <HAL_GPIO_DeInit+0x194>)
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	43db      	mvns	r3, r3
 8009d0e:	493a      	ldr	r1, [pc, #232]	; (8009df8 <HAL_GPIO_DeInit+0x194>)
 8009d10:	4013      	ands	r3, r2
 8009d12:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009d14:	4b38      	ldr	r3, [pc, #224]	; (8009df8 <HAL_GPIO_DeInit+0x194>)
 8009d16:	685a      	ldr	r2, [r3, #4]
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	43db      	mvns	r3, r3
 8009d1c:	4936      	ldr	r1, [pc, #216]	; (8009df8 <HAL_GPIO_DeInit+0x194>)
 8009d1e:	4013      	ands	r3, r2
 8009d20:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009d22:	4b35      	ldr	r3, [pc, #212]	; (8009df8 <HAL_GPIO_DeInit+0x194>)
 8009d24:	68da      	ldr	r2, [r3, #12]
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	43db      	mvns	r3, r3
 8009d2a:	4933      	ldr	r1, [pc, #204]	; (8009df8 <HAL_GPIO_DeInit+0x194>)
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009d30:	4b31      	ldr	r3, [pc, #196]	; (8009df8 <HAL_GPIO_DeInit+0x194>)
 8009d32:	689a      	ldr	r2, [r3, #8]
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	43db      	mvns	r3, r3
 8009d38:	492f      	ldr	r1, [pc, #188]	; (8009df8 <HAL_GPIO_DeInit+0x194>)
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	f003 0303 	and.w	r3, r3, #3
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	220f      	movs	r2, #15
 8009d48:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009d4e:	4a23      	ldr	r2, [pc, #140]	; (8009ddc <HAL_GPIO_DeInit+0x178>)
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	089b      	lsrs	r3, r3, #2
 8009d54:	3302      	adds	r3, #2
 8009d56:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	43da      	mvns	r2, r3
 8009d5e:	481f      	ldr	r0, [pc, #124]	; (8009ddc <HAL_GPIO_DeInit+0x178>)
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	089b      	lsrs	r3, r3, #2
 8009d64:	400a      	ands	r2, r1
 8009d66:	3302      	adds	r3, #2
 8009d68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	2bff      	cmp	r3, #255	; 0xff
 8009d70:	d801      	bhi.n	8009d76 <HAL_GPIO_DeInit+0x112>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	e001      	b.n	8009d7a <HAL_GPIO_DeInit+0x116>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	3304      	adds	r3, #4
 8009d7a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	2bff      	cmp	r3, #255	; 0xff
 8009d80:	d802      	bhi.n	8009d88 <HAL_GPIO_DeInit+0x124>
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	e002      	b.n	8009d8e <HAL_GPIO_DeInit+0x12a>
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	3b08      	subs	r3, #8
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	210f      	movs	r1, #15
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	fa01 f303 	lsl.w	r3, r1, r3
 8009d9c:	43db      	mvns	r3, r3
 8009d9e:	401a      	ands	r2, r3
 8009da0:	2104      	movs	r1, #4
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	fa01 f303 	lsl.w	r3, r1, r3
 8009da8:	431a      	orrs	r2, r3
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68da      	ldr	r2, [r3, #12]
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	43db      	mvns	r3, r3
 8009db6:	401a      	ands	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009dc2:	683a      	ldr	r2, [r7, #0]
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f47f af52 	bne.w	8009c74 <HAL_GPIO_DeInit+0x10>
  }
}
 8009dd0:	bf00      	nop
 8009dd2:	bf00      	nop
 8009dd4:	3724      	adds	r7, #36	; 0x24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bc80      	pop	{r7}
 8009dda:	4770      	bx	lr
 8009ddc:	40010000 	.word	0x40010000
 8009de0:	40010800 	.word	0x40010800
 8009de4:	40010c00 	.word	0x40010c00
 8009de8:	40011000 	.word	0x40011000
 8009dec:	40011400 	.word	0x40011400
 8009df0:	40011800 	.word	0x40011800
 8009df4:	40011c00 	.word	0x40011c00
 8009df8:	40010400 	.word	0x40010400

08009dfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	460b      	mov	r3, r1
 8009e06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	689a      	ldr	r2, [r3, #8]
 8009e0c:	887b      	ldrh	r3, [r7, #2]
 8009e0e:	4013      	ands	r3, r2
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e14:	2301      	movs	r3, #1
 8009e16:	73fb      	strb	r3, [r7, #15]
 8009e18:	e001      	b.n	8009e1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bc80      	pop	{r7}
 8009e28:	4770      	bx	lr

08009e2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	460b      	mov	r3, r1
 8009e34:	807b      	strh	r3, [r7, #2]
 8009e36:	4613      	mov	r3, r2
 8009e38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e3a:	787b      	ldrb	r3, [r7, #1]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d003      	beq.n	8009e48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e40:	887a      	ldrh	r2, [r7, #2]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009e46:	e003      	b.n	8009e50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009e48:	887b      	ldrh	r3, [r7, #2]
 8009e4a:	041a      	lsls	r2, r3, #16
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	611a      	str	r2, [r3, #16]
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bc80      	pop	{r7}
 8009e58:	4770      	bx	lr

08009e5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	460b      	mov	r3, r1
 8009e64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009e6c:	887a      	ldrh	r2, [r7, #2]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	4013      	ands	r3, r2
 8009e72:	041a      	lsls	r2, r3, #16
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	43d9      	mvns	r1, r3
 8009e78:	887b      	ldrh	r3, [r7, #2]
 8009e7a:	400b      	ands	r3, r1
 8009e7c:	431a      	orrs	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	611a      	str	r2, [r3, #16]
}
 8009e82:	bf00      	nop
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bc80      	pop	{r7}
 8009e8a:	4770      	bx	lr

08009e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e12b      	b.n	800a0f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d106      	bne.n	8009eb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7fe fff8 	bl	8008ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2224      	movs	r2, #36	; 0x24
 8009ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f022 0201 	bic.w	r2, r2, #1
 8009ece:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ede:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009eee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009ef0:	f001 fdb8 	bl	800ba64 <HAL_RCC_GetPCLK1Freq>
 8009ef4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	4a81      	ldr	r2, [pc, #516]	; (800a100 <HAL_I2C_Init+0x274>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d807      	bhi.n	8009f10 <HAL_I2C_Init+0x84>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4a80      	ldr	r2, [pc, #512]	; (800a104 <HAL_I2C_Init+0x278>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	bf94      	ite	ls
 8009f08:	2301      	movls	r3, #1
 8009f0a:	2300      	movhi	r3, #0
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	e006      	b.n	8009f1e <HAL_I2C_Init+0x92>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4a7d      	ldr	r2, [pc, #500]	; (800a108 <HAL_I2C_Init+0x27c>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	bf94      	ite	ls
 8009f18:	2301      	movls	r3, #1
 8009f1a:	2300      	movhi	r3, #0
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e0e7      	b.n	800a0f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4a78      	ldr	r2, [pc, #480]	; (800a10c <HAL_I2C_Init+0x280>)
 8009f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2e:	0c9b      	lsrs	r3, r3, #18
 8009f30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	6a1b      	ldr	r3, [r3, #32]
 8009f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	4a6a      	ldr	r2, [pc, #424]	; (800a100 <HAL_I2C_Init+0x274>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d802      	bhi.n	8009f60 <HAL_I2C_Init+0xd4>
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	e009      	b.n	8009f74 <HAL_I2C_Init+0xe8>
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009f66:	fb02 f303 	mul.w	r3, r2, r3
 8009f6a:	4a69      	ldr	r2, [pc, #420]	; (800a110 <HAL_I2C_Init+0x284>)
 8009f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f70:	099b      	lsrs	r3, r3, #6
 8009f72:	3301      	adds	r3, #1
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	6812      	ldr	r2, [r2, #0]
 8009f78:	430b      	orrs	r3, r1
 8009f7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	69db      	ldr	r3, [r3, #28]
 8009f82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009f86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	495c      	ldr	r1, [pc, #368]	; (800a100 <HAL_I2C_Init+0x274>)
 8009f90:	428b      	cmp	r3, r1
 8009f92:	d819      	bhi.n	8009fc8 <HAL_I2C_Init+0x13c>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	1e59      	subs	r1, r3, #1
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009fa2:	1c59      	adds	r1, r3, #1
 8009fa4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009fa8:	400b      	ands	r3, r1
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00a      	beq.n	8009fc4 <HAL_I2C_Init+0x138>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	1e59      	subs	r1, r3, #1
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	005b      	lsls	r3, r3, #1
 8009fb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fc2:	e051      	b.n	800a068 <HAL_I2C_Init+0x1dc>
 8009fc4:	2304      	movs	r3, #4
 8009fc6:	e04f      	b.n	800a068 <HAL_I2C_Init+0x1dc>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d111      	bne.n	8009ff4 <HAL_I2C_Init+0x168>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	1e58      	subs	r0, r3, #1
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6859      	ldr	r1, [r3, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	005b      	lsls	r3, r3, #1
 8009fdc:	440b      	add	r3, r1
 8009fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	bf0c      	ite	eq
 8009fec:	2301      	moveq	r3, #1
 8009fee:	2300      	movne	r3, #0
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	e012      	b.n	800a01a <HAL_I2C_Init+0x18e>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	1e58      	subs	r0, r3, #1
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6859      	ldr	r1, [r3, #4]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	440b      	add	r3, r1
 800a002:	0099      	lsls	r1, r3, #2
 800a004:	440b      	add	r3, r1
 800a006:	fbb0 f3f3 	udiv	r3, r0, r3
 800a00a:	3301      	adds	r3, #1
 800a00c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a010:	2b00      	cmp	r3, #0
 800a012:	bf0c      	ite	eq
 800a014:	2301      	moveq	r3, #1
 800a016:	2300      	movne	r3, #0
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <HAL_I2C_Init+0x196>
 800a01e:	2301      	movs	r3, #1
 800a020:	e022      	b.n	800a068 <HAL_I2C_Init+0x1dc>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10e      	bne.n	800a048 <HAL_I2C_Init+0x1bc>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	1e58      	subs	r0, r3, #1
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6859      	ldr	r1, [r3, #4]
 800a032:	460b      	mov	r3, r1
 800a034:	005b      	lsls	r3, r3, #1
 800a036:	440b      	add	r3, r1
 800a038:	fbb0 f3f3 	udiv	r3, r0, r3
 800a03c:	3301      	adds	r3, #1
 800a03e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a046:	e00f      	b.n	800a068 <HAL_I2C_Init+0x1dc>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	1e58      	subs	r0, r3, #1
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6859      	ldr	r1, [r3, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	440b      	add	r3, r1
 800a056:	0099      	lsls	r1, r3, #2
 800a058:	440b      	add	r3, r1
 800a05a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a05e:	3301      	adds	r3, #1
 800a060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a068:	6879      	ldr	r1, [r7, #4]
 800a06a:	6809      	ldr	r1, [r1, #0]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	69da      	ldr	r2, [r3, #28]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	431a      	orrs	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	430a      	orrs	r2, r1
 800a08a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	6911      	ldr	r1, [r2, #16]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	68d2      	ldr	r2, [r2, #12]
 800a0a2:	4311      	orrs	r1, r2
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	6812      	ldr	r2, [r2, #0]
 800a0a8:	430b      	orrs	r3, r1
 800a0aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	695a      	ldr	r2, [r3, #20]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	431a      	orrs	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f042 0201 	orr.w	r2, r2, #1
 800a0d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2220      	movs	r2, #32
 800a0e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	000186a0 	.word	0x000186a0
 800a104:	001e847f 	.word	0x001e847f
 800a108:	003d08ff 	.word	0x003d08ff
 800a10c:	431bde83 	.word	0x431bde83
 800a110:	10624dd3 	.word	0x10624dd3

0800a114 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d101      	bne.n	800a126 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e021      	b.n	800a16a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2224      	movs	r2, #36	; 0x24
 800a12a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f022 0201 	bic.w	r2, r2, #1
 800a13c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7fe fef0 	bl	8008f24 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
	...

0800a174 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b088      	sub	sp, #32
 800a178:	af02      	add	r7, sp, #8
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	607a      	str	r2, [r7, #4]
 800a17e:	461a      	mov	r2, r3
 800a180:	460b      	mov	r3, r1
 800a182:	817b      	strh	r3, [r7, #10]
 800a184:	4613      	mov	r3, r2
 800a186:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a188:	f7ff f85e 	bl	8009248 <HAL_GetTick>
 800a18c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b20      	cmp	r3, #32
 800a198:	f040 80e0 	bne.w	800a35c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	2319      	movs	r3, #25
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	4970      	ldr	r1, [pc, #448]	; (800a368 <HAL_I2C_Master_Transmit+0x1f4>)
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f000 fe5c 	bl	800ae64 <I2C_WaitOnFlagUntilTimeout>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	e0d3      	b.n	800a35e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d101      	bne.n	800a1c4 <HAL_I2C_Master_Transmit+0x50>
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	e0cc      	b.n	800a35e <HAL_I2C_Master_Transmit+0x1ea>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d007      	beq.n	800a1ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f042 0201 	orr.w	r2, r2, #1
 800a1e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2221      	movs	r2, #33	; 0x21
 800a1fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2210      	movs	r2, #16
 800a206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	893a      	ldrh	r2, [r7, #8]
 800a21a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a220:	b29a      	uxth	r2, r3
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4a50      	ldr	r2, [pc, #320]	; (800a36c <HAL_I2C_Master_Transmit+0x1f8>)
 800a22a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a22c:	8979      	ldrh	r1, [r7, #10]
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	6a3a      	ldr	r2, [r7, #32]
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f000 fc16 	bl	800aa64 <I2C_MasterRequestWrite>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e08d      	b.n	800a35e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a242:	2300      	movs	r3, #0
 800a244:	613b      	str	r3, [r7, #16]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	695b      	ldr	r3, [r3, #20]
 800a24c:	613b      	str	r3, [r7, #16]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	613b      	str	r3, [r7, #16]
 800a256:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a258:	e066      	b.n	800a328 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	6a39      	ldr	r1, [r7, #32]
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f000 ff1a 	bl	800b098 <I2C_WaitOnTXEFlagUntilTimeout>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00d      	beq.n	800a286 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d107      	bne.n	800a282 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a280:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	e06b      	b.n	800a35e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28a:	781a      	ldrb	r2, [r3, #0]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a296:	1c5a      	adds	r2, r3, #1
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	695b      	ldr	r3, [r3, #20]
 800a2bc:	f003 0304 	and.w	r3, r3, #4
 800a2c0:	2b04      	cmp	r3, #4
 800a2c2:	d11b      	bne.n	800a2fc <HAL_I2C_Master_Transmit+0x188>
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d017      	beq.n	800a2fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	781a      	ldrb	r2, [r3, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	6a39      	ldr	r1, [r7, #32]
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f000 ff11 	bl	800b128 <I2C_WaitOnBTFFlagUntilTimeout>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00d      	beq.n	800a328 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a310:	2b04      	cmp	r3, #4
 800a312:	d107      	bne.n	800a324 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a322:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	e01a      	b.n	800a35e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d194      	bne.n	800a25a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a33e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2220      	movs	r2, #32
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	e000      	b.n	800a35e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a35c:	2302      	movs	r3, #2
  }
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	00100002 	.word	0x00100002
 800a36c:	ffff0000 	.word	0xffff0000

0800a370 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b088      	sub	sp, #32
 800a374:	af02      	add	r7, sp, #8
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	4608      	mov	r0, r1
 800a37a:	4611      	mov	r1, r2
 800a37c:	461a      	mov	r2, r3
 800a37e:	4603      	mov	r3, r0
 800a380:	817b      	strh	r3, [r7, #10]
 800a382:	460b      	mov	r3, r1
 800a384:	813b      	strh	r3, [r7, #8]
 800a386:	4613      	mov	r3, r2
 800a388:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a38a:	f7fe ff5d 	bl	8009248 <HAL_GetTick>
 800a38e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a396:	b2db      	uxtb	r3, r3
 800a398:	2b20      	cmp	r3, #32
 800a39a:	f040 80d9 	bne.w	800a550 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	2319      	movs	r3, #25
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	496d      	ldr	r1, [pc, #436]	; (800a55c <HAL_I2C_Mem_Write+0x1ec>)
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 fd5b 	bl	800ae64 <I2C_WaitOnFlagUntilTimeout>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	e0cc      	b.n	800a552 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d101      	bne.n	800a3c6 <HAL_I2C_Mem_Write+0x56>
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	e0c5      	b.n	800a552 <HAL_I2C_Mem_Write+0x1e2>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 0301 	and.w	r3, r3, #1
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d007      	beq.n	800a3ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f042 0201 	orr.w	r2, r2, #1
 800a3ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2221      	movs	r2, #33	; 0x21
 800a400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2240      	movs	r2, #64	; 0x40
 800a408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6a3a      	ldr	r2, [r7, #32]
 800a416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a41c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a422:	b29a      	uxth	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	4a4d      	ldr	r2, [pc, #308]	; (800a560 <HAL_I2C_Mem_Write+0x1f0>)
 800a42c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a42e:	88f8      	ldrh	r0, [r7, #6]
 800a430:	893a      	ldrh	r2, [r7, #8]
 800a432:	8979      	ldrh	r1, [r7, #10]
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	9301      	str	r3, [sp, #4]
 800a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	4603      	mov	r3, r0
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 fb92 	bl	800ab68 <I2C_RequestMemoryWrite>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d052      	beq.n	800a4f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e081      	b.n	800a552 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f000 fe20 	bl	800b098 <I2C_WaitOnTXEFlagUntilTimeout>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00d      	beq.n	800a47a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a462:	2b04      	cmp	r3, #4
 800a464:	d107      	bne.n	800a476 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a474:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	e06b      	b.n	800a552 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47e:	781a      	ldrb	r2, [r3, #0]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48a:	1c5a      	adds	r2, r3, #1
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a494:	3b01      	subs	r3, #1
 800a496:	b29a      	uxth	r2, r3
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	f003 0304 	and.w	r3, r3, #4
 800a4b4:	2b04      	cmp	r3, #4
 800a4b6:	d11b      	bne.n	800a4f0 <HAL_I2C_Mem_Write+0x180>
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d017      	beq.n	800a4f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c4:	781a      	ldrb	r2, [r3, #0]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d0:	1c5a      	adds	r2, r3, #1
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1aa      	bne.n	800a44e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4f8:	697a      	ldr	r2, [r7, #20]
 800a4fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f000 fe13 	bl	800b128 <I2C_WaitOnBTFFlagUntilTimeout>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00d      	beq.n	800a524 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50c:	2b04      	cmp	r3, #4
 800a50e:	d107      	bne.n	800a520 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a51e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e016      	b.n	800a552 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2220      	movs	r2, #32
 800a538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	e000      	b.n	800a552 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a550:	2302      	movs	r3, #2
  }
}
 800a552:	4618      	mov	r0, r3
 800a554:	3718      	adds	r7, #24
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	00100002 	.word	0x00100002
 800a560:	ffff0000 	.word	0xffff0000

0800a564 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b08c      	sub	sp, #48	; 0x30
 800a568:	af02      	add	r7, sp, #8
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	4608      	mov	r0, r1
 800a56e:	4611      	mov	r1, r2
 800a570:	461a      	mov	r2, r3
 800a572:	4603      	mov	r3, r0
 800a574:	817b      	strh	r3, [r7, #10]
 800a576:	460b      	mov	r3, r1
 800a578:	813b      	strh	r3, [r7, #8]
 800a57a:	4613      	mov	r3, r2
 800a57c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a57e:	2300      	movs	r3, #0
 800a580:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a582:	f7fe fe61 	bl	8009248 <HAL_GetTick>
 800a586:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	2b20      	cmp	r3, #32
 800a592:	f040 8244 	bne.w	800aa1e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	2319      	movs	r3, #25
 800a59c:	2201      	movs	r2, #1
 800a59e:	4982      	ldr	r1, [pc, #520]	; (800a7a8 <HAL_I2C_Mem_Read+0x244>)
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 fc5f 	bl	800ae64 <I2C_WaitOnFlagUntilTimeout>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	e237      	b.n	800aa20 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d101      	bne.n	800a5be <HAL_I2C_Mem_Read+0x5a>
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	e230      	b.n	800aa20 <HAL_I2C_Mem_Read+0x4bc>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0301 	and.w	r3, r3, #1
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d007      	beq.n	800a5e4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f042 0201 	orr.w	r2, r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2222      	movs	r2, #34	; 0x22
 800a5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2240      	movs	r2, #64	; 0x40
 800a600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a60e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a614:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	4a62      	ldr	r2, [pc, #392]	; (800a7ac <HAL_I2C_Mem_Read+0x248>)
 800a624:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a626:	88f8      	ldrh	r0, [r7, #6]
 800a628:	893a      	ldrh	r2, [r7, #8]
 800a62a:	8979      	ldrh	r1, [r7, #10]
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	9301      	str	r3, [sp, #4]
 800a630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	4603      	mov	r3, r0
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f000 fb2c 	bl	800ac94 <I2C_RequestMemoryRead>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	e1ec      	b.n	800aa20 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d113      	bne.n	800a676 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a64e:	2300      	movs	r3, #0
 800a650:	61fb      	str	r3, [r7, #28]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	61fb      	str	r3, [r7, #28]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	61fb      	str	r3, [r7, #28]
 800a662:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a672:	601a      	str	r2, [r3, #0]
 800a674:	e1c0      	b.n	800a9f8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d11e      	bne.n	800a6bc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a68c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a68e:	b672      	cpsid	i
}
 800a690:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a692:	2300      	movs	r3, #0
 800a694:	61bb      	str	r3, [r7, #24]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	61bb      	str	r3, [r7, #24]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	61bb      	str	r3, [r7, #24]
 800a6a6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a6b8:	b662      	cpsie	i
}
 800a6ba:	e035      	b.n	800a728 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d11e      	bne.n	800a702 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6d4:	b672      	cpsid	i
}
 800a6d6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6d8:	2300      	movs	r3, #0
 800a6da:	617b      	str	r3, [r7, #20]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	617b      	str	r3, [r7, #20]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	699b      	ldr	r3, [r3, #24]
 800a6ea:	617b      	str	r3, [r7, #20]
 800a6ec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a6fe:	b662      	cpsie	i
}
 800a700:	e012      	b.n	800a728 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a710:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a712:	2300      	movs	r3, #0
 800a714:	613b      	str	r3, [r7, #16]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	695b      	ldr	r3, [r3, #20]
 800a71c:	613b      	str	r3, [r7, #16]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	613b      	str	r3, [r7, #16]
 800a726:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a728:	e166      	b.n	800a9f8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a72e:	2b03      	cmp	r3, #3
 800a730:	f200 811f 	bhi.w	800a972 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d123      	bne.n	800a784 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a73c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a73e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 fd39 	bl	800b1b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d001      	beq.n	800a750 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	e167      	b.n	800aa20 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	691a      	ldr	r2, [r3, #16]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75a:	b2d2      	uxtb	r2, r2
 800a75c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a762:	1c5a      	adds	r2, r3, #1
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a76c:	3b01      	subs	r3, #1
 800a76e:	b29a      	uxth	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a778:	b29b      	uxth	r3, r3
 800a77a:	3b01      	subs	r3, #1
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a782:	e139      	b.n	800a9f8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d152      	bne.n	800a832 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a792:	2200      	movs	r2, #0
 800a794:	4906      	ldr	r1, [pc, #24]	; (800a7b0 <HAL_I2C_Mem_Read+0x24c>)
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f000 fb64 	bl	800ae64 <I2C_WaitOnFlagUntilTimeout>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d008      	beq.n	800a7b4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e13c      	b.n	800aa20 <HAL_I2C_Mem_Read+0x4bc>
 800a7a6:	bf00      	nop
 800a7a8:	00100002 	.word	0x00100002
 800a7ac:	ffff0000 	.word	0xffff0000
 800a7b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a7b4:	b672      	cpsid	i
}
 800a7b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	691a      	ldr	r2, [r3, #16]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d2:	b2d2      	uxtb	r2, r2
 800a7d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7da:	1c5a      	adds	r2, r3, #1
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a7fa:	b662      	cpsie	i
}
 800a7fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	691a      	ldr	r2, [r3, #16]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	b2d2      	uxtb	r2, r2
 800a80a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	1c5a      	adds	r2, r3, #1
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a81a:	3b01      	subs	r3, #1
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a826:	b29b      	uxth	r3, r3
 800a828:	3b01      	subs	r3, #1
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a830:	e0e2      	b.n	800a9f8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a838:	2200      	movs	r2, #0
 800a83a:	497b      	ldr	r1, [pc, #492]	; (800aa28 <HAL_I2C_Mem_Read+0x4c4>)
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f000 fb11 	bl	800ae64 <I2C_WaitOnFlagUntilTimeout>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	e0e9      	b.n	800aa20 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a85a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a85c:	b672      	cpsid	i
}
 800a85e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	691a      	ldr	r2, [r3, #16]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86a:	b2d2      	uxtb	r2, r2
 800a86c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a87c:	3b01      	subs	r3, #1
 800a87e:	b29a      	uxth	r2, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a888:	b29b      	uxth	r3, r3
 800a88a:	3b01      	subs	r3, #1
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a892:	4b66      	ldr	r3, [pc, #408]	; (800aa2c <HAL_I2C_Mem_Read+0x4c8>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	08db      	lsrs	r3, r3, #3
 800a898:	4a65      	ldr	r2, [pc, #404]	; (800aa30 <HAL_I2C_Mem_Read+0x4cc>)
 800a89a:	fba2 2303 	umull	r2, r3, r2, r3
 800a89e:	0a1a      	lsrs	r2, r3, #8
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4413      	add	r3, r2
 800a8a6:	00da      	lsls	r2, r3, #3
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a8ac:	6a3b      	ldr	r3, [r7, #32]
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a8b2:	6a3b      	ldr	r3, [r7, #32]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d118      	bne.n	800a8ea <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2220      	movs	r2, #32
 800a8c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d2:	f043 0220 	orr.w	r2, r3, #32
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a8da:	b662      	cpsie	i
}
 800a8dc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e09a      	b.n	800aa20 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	695b      	ldr	r3, [r3, #20]
 800a8f0:	f003 0304 	and.w	r3, r3, #4
 800a8f4:	2b04      	cmp	r3, #4
 800a8f6:	d1d9      	bne.n	800a8ac <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	691a      	ldr	r2, [r3, #16]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a912:	b2d2      	uxtb	r2, r2
 800a914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91a:	1c5a      	adds	r2, r3, #1
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a924:	3b01      	subs	r3, #1
 800a926:	b29a      	uxth	r2, r3
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a930:	b29b      	uxth	r3, r3
 800a932:	3b01      	subs	r3, #1
 800a934:	b29a      	uxth	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a93a:	b662      	cpsie	i
}
 800a93c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	691a      	ldr	r2, [r3, #16]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a948:	b2d2      	uxtb	r2, r2
 800a94a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a95a:	3b01      	subs	r3, #1
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a966:	b29b      	uxth	r3, r3
 800a968:	3b01      	subs	r3, #1
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a970:	e042      	b.n	800a9f8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a974:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f000 fc1e 	bl	800b1b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d001      	beq.n	800a986 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	e04c      	b.n	800aa20 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	691a      	ldr	r2, [r3, #16]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	b2d2      	uxtb	r2, r2
 800a992:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	1c5a      	adds	r2, r3, #1
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	f003 0304 	and.w	r3, r3, #4
 800a9c2:	2b04      	cmp	r3, #4
 800a9c4:	d118      	bne.n	800a9f8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	691a      	ldr	r2, [r3, #16]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	b2d2      	uxtb	r2, r2
 800a9d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d8:	1c5a      	adds	r2, r3, #1
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f47f ae94 	bne.w	800a72a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2220      	movs	r2, #32
 800aa06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	e000      	b.n	800aa20 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800aa1e:	2302      	movs	r3, #2
  }
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3728      	adds	r7, #40	; 0x28
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	00010004 	.word	0x00010004
 800aa2c:	200009d0 	.word	0x200009d0
 800aa30:	14f8b589 	.word	0x14f8b589

0800aa34 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa42:	b2db      	uxtb	r3, r3
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bc80      	pop	{r7}
 800aa4c:	4770      	bx	lr

0800aa4e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800aa4e:	b480      	push	{r7}
 800aa50:	b083      	sub	sp, #12
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bc80      	pop	{r7}
 800aa62:	4770      	bx	lr

0800aa64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b088      	sub	sp, #32
 800aa68:	af02      	add	r7, sp, #8
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	607a      	str	r2, [r7, #4]
 800aa6e:	603b      	str	r3, [r7, #0]
 800aa70:	460b      	mov	r3, r1
 800aa72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	2b08      	cmp	r3, #8
 800aa7e:	d006      	beq.n	800aa8e <I2C_MasterRequestWrite+0x2a>
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d003      	beq.n	800aa8e <I2C_MasterRequestWrite+0x2a>
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aa8c:	d108      	bne.n	800aaa0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	e00b      	b.n	800aab8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa4:	2b12      	cmp	r3, #18
 800aaa6:	d107      	bne.n	800aab8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aab6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f000 f9cd 	bl	800ae64 <I2C_WaitOnFlagUntilTimeout>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00d      	beq.n	800aaec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aade:	d103      	bne.n	800aae8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e035      	b.n	800ab58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aaf4:	d108      	bne.n	800ab08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aaf6:	897b      	ldrh	r3, [r7, #10]
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	461a      	mov	r2, r3
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab04:	611a      	str	r2, [r3, #16]
 800ab06:	e01b      	b.n	800ab40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ab08:	897b      	ldrh	r3, [r7, #10]
 800ab0a:	11db      	asrs	r3, r3, #7
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	f003 0306 	and.w	r3, r3, #6
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	f063 030f 	orn	r3, r3, #15
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	490e      	ldr	r1, [pc, #56]	; (800ab60 <I2C_MasterRequestWrite+0xfc>)
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f000 fa16 	bl	800af58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e010      	b.n	800ab58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ab36:	897b      	ldrh	r3, [r7, #10]
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	4907      	ldr	r1, [pc, #28]	; (800ab64 <I2C_MasterRequestWrite+0x100>)
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f000 fa06 	bl	800af58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d001      	beq.n	800ab56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e000      	b.n	800ab58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	00010008 	.word	0x00010008
 800ab64:	00010002 	.word	0x00010002

0800ab68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b088      	sub	sp, #32
 800ab6c:	af02      	add	r7, sp, #8
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	4608      	mov	r0, r1
 800ab72:	4611      	mov	r1, r2
 800ab74:	461a      	mov	r2, r3
 800ab76:	4603      	mov	r3, r0
 800ab78:	817b      	strh	r3, [r7, #10]
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	813b      	strh	r3, [r7, #8]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	6a3b      	ldr	r3, [r7, #32]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f000 f960 	bl	800ae64 <I2C_WaitOnFlagUntilTimeout>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00d      	beq.n	800abc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abb8:	d103      	bne.n	800abc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800abc2:	2303      	movs	r3, #3
 800abc4:	e05f      	b.n	800ac86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800abc6:	897b      	ldrh	r3, [r7, #10]
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	461a      	mov	r2, r3
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800abd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	6a3a      	ldr	r2, [r7, #32]
 800abda:	492d      	ldr	r1, [pc, #180]	; (800ac90 <I2C_RequestMemoryWrite+0x128>)
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f000 f9bb 	bl	800af58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e04c      	b.n	800ac86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abec:	2300      	movs	r3, #0
 800abee:	617b      	str	r3, [r7, #20]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	617b      	str	r3, [r7, #20]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	617b      	str	r3, [r7, #20]
 800ac00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac04:	6a39      	ldr	r1, [r7, #32]
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f000 fa46 	bl	800b098 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00d      	beq.n	800ac2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac16:	2b04      	cmp	r3, #4
 800ac18:	d107      	bne.n	800ac2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e02b      	b.n	800ac86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ac2e:	88fb      	ldrh	r3, [r7, #6]
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d105      	bne.n	800ac40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac34:	893b      	ldrh	r3, [r7, #8]
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	611a      	str	r2, [r3, #16]
 800ac3e:	e021      	b.n	800ac84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ac40:	893b      	ldrh	r3, [r7, #8]
 800ac42:	0a1b      	lsrs	r3, r3, #8
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac50:	6a39      	ldr	r1, [r7, #32]
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f000 fa20 	bl	800b098 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00d      	beq.n	800ac7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac62:	2b04      	cmp	r3, #4
 800ac64:	d107      	bne.n	800ac76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e005      	b.n	800ac86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac7a:	893b      	ldrh	r3, [r7, #8]
 800ac7c:	b2da      	uxtb	r2, r3
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3718      	adds	r7, #24
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	00010002 	.word	0x00010002

0800ac94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b088      	sub	sp, #32
 800ac98:	af02      	add	r7, sp, #8
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	4608      	mov	r0, r1
 800ac9e:	4611      	mov	r1, r2
 800aca0:	461a      	mov	r2, r3
 800aca2:	4603      	mov	r3, r0
 800aca4:	817b      	strh	r3, [r7, #10]
 800aca6:	460b      	mov	r3, r1
 800aca8:	813b      	strh	r3, [r7, #8]
 800acaa:	4613      	mov	r3, r2
 800acac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800acbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800accc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800acce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	6a3b      	ldr	r3, [r7, #32]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f000 f8c2 	bl	800ae64 <I2C_WaitOnFlagUntilTimeout>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00d      	beq.n	800ad02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acf4:	d103      	bne.n	800acfe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e0aa      	b.n	800ae58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ad02:	897b      	ldrh	r3, [r7, #10]
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	461a      	mov	r2, r3
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ad10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad14:	6a3a      	ldr	r2, [r7, #32]
 800ad16:	4952      	ldr	r1, [pc, #328]	; (800ae60 <I2C_RequestMemoryRead+0x1cc>)
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f000 f91d 	bl	800af58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d001      	beq.n	800ad28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	e097      	b.n	800ae58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad28:	2300      	movs	r3, #0
 800ad2a:	617b      	str	r3, [r7, #20]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	695b      	ldr	r3, [r3, #20]
 800ad32:	617b      	str	r3, [r7, #20]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	699b      	ldr	r3, [r3, #24]
 800ad3a:	617b      	str	r3, [r7, #20]
 800ad3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad40:	6a39      	ldr	r1, [r7, #32]
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f000 f9a8 	bl	800b098 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00d      	beq.n	800ad6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad52:	2b04      	cmp	r3, #4
 800ad54:	d107      	bne.n	800ad66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e076      	b.n	800ae58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad6a:	88fb      	ldrh	r3, [r7, #6]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d105      	bne.n	800ad7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad70:	893b      	ldrh	r3, [r7, #8]
 800ad72:	b2da      	uxtb	r2, r3
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	611a      	str	r2, [r3, #16]
 800ad7a:	e021      	b.n	800adc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ad7c:	893b      	ldrh	r3, [r7, #8]
 800ad7e:	0a1b      	lsrs	r3, r3, #8
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	b2da      	uxtb	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad8c:	6a39      	ldr	r1, [r7, #32]
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f000 f982 	bl	800b098 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00d      	beq.n	800adb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9e:	2b04      	cmp	r3, #4
 800ada0:	d107      	bne.n	800adb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e050      	b.n	800ae58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800adb6:	893b      	ldrh	r3, [r7, #8]
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adc2:	6a39      	ldr	r1, [r7, #32]
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f000 f967 	bl	800b098 <I2C_WaitOnTXEFlagUntilTimeout>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d00d      	beq.n	800adec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add4:	2b04      	cmp	r3, #4
 800add6:	d107      	bne.n	800ade8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ade6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	e035      	b.n	800ae58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adfa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	6a3b      	ldr	r3, [r7, #32]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f000 f82b 	bl	800ae64 <I2C_WaitOnFlagUntilTimeout>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00d      	beq.n	800ae30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae22:	d103      	bne.n	800ae2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e013      	b.n	800ae58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ae30:	897b      	ldrh	r3, [r7, #10]
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	f043 0301 	orr.w	r3, r3, #1
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	6a3a      	ldr	r2, [r7, #32]
 800ae44:	4906      	ldr	r1, [pc, #24]	; (800ae60 <I2C_RequestMemoryRead+0x1cc>)
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f000 f886 	bl	800af58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e000      	b.n	800ae58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3718      	adds	r7, #24
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	00010002 	.word	0x00010002

0800ae64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	603b      	str	r3, [r7, #0]
 800ae70:	4613      	mov	r3, r2
 800ae72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae74:	e048      	b.n	800af08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7c:	d044      	beq.n	800af08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae7e:	f7fe f9e3 	bl	8009248 <HAL_GetTick>
 800ae82:	4602      	mov	r2, r0
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	1ad3      	subs	r3, r2, r3
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d302      	bcc.n	800ae94 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d139      	bne.n	800af08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	0c1b      	lsrs	r3, r3, #16
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d10d      	bne.n	800aeba <I2C_WaitOnFlagUntilTimeout+0x56>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	695b      	ldr	r3, [r3, #20]
 800aea4:	43da      	mvns	r2, r3
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	4013      	ands	r3, r2
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	bf0c      	ite	eq
 800aeb0:	2301      	moveq	r3, #1
 800aeb2:	2300      	movne	r3, #0
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	e00c      	b.n	800aed4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	43da      	mvns	r2, r3
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	4013      	ands	r3, r2
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	bf0c      	ite	eq
 800aecc:	2301      	moveq	r3, #1
 800aece:	2300      	movne	r3, #0
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	461a      	mov	r2, r3
 800aed4:	79fb      	ldrb	r3, [r7, #7]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d116      	bne.n	800af08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2220      	movs	r2, #32
 800aee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef4:	f043 0220 	orr.w	r2, r3, #32
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	e023      	b.n	800af50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	0c1b      	lsrs	r3, r3, #16
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d10d      	bne.n	800af2e <I2C_WaitOnFlagUntilTimeout+0xca>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	695b      	ldr	r3, [r3, #20]
 800af18:	43da      	mvns	r2, r3
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	4013      	ands	r3, r2
 800af1e:	b29b      	uxth	r3, r3
 800af20:	2b00      	cmp	r3, #0
 800af22:	bf0c      	ite	eq
 800af24:	2301      	moveq	r3, #1
 800af26:	2300      	movne	r3, #0
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	461a      	mov	r2, r3
 800af2c:	e00c      	b.n	800af48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	699b      	ldr	r3, [r3, #24]
 800af34:	43da      	mvns	r2, r3
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	4013      	ands	r3, r2
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	bf0c      	ite	eq
 800af40:	2301      	moveq	r3, #1
 800af42:	2300      	movne	r3, #0
 800af44:	b2db      	uxtb	r3, r3
 800af46:	461a      	mov	r2, r3
 800af48:	79fb      	ldrb	r3, [r7, #7]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d093      	beq.n	800ae76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
 800af64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800af66:	e071      	b.n	800b04c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af76:	d123      	bne.n	800afc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800af90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2220      	movs	r2, #32
 800af9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afac:	f043 0204 	orr.w	r2, r3, #4
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	e067      	b.n	800b090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc6:	d041      	beq.n	800b04c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afc8:	f7fe f93e 	bl	8009248 <HAL_GetTick>
 800afcc:	4602      	mov	r2, r0
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d302      	bcc.n	800afde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d136      	bne.n	800b04c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	0c1b      	lsrs	r3, r3, #16
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d10c      	bne.n	800b002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	43da      	mvns	r2, r3
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	4013      	ands	r3, r2
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	bf14      	ite	ne
 800affa:	2301      	movne	r3, #1
 800affc:	2300      	moveq	r3, #0
 800affe:	b2db      	uxtb	r3, r3
 800b000:	e00b      	b.n	800b01a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	43da      	mvns	r2, r3
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	4013      	ands	r3, r2
 800b00e:	b29b      	uxth	r3, r3
 800b010:	2b00      	cmp	r3, #0
 800b012:	bf14      	ite	ne
 800b014:	2301      	movne	r3, #1
 800b016:	2300      	moveq	r3, #0
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d016      	beq.n	800b04c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2220      	movs	r2, #32
 800b028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b038:	f043 0220 	orr.w	r2, r3, #32
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	e021      	b.n	800b090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	0c1b      	lsrs	r3, r3, #16
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b01      	cmp	r3, #1
 800b054:	d10c      	bne.n	800b070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	43da      	mvns	r2, r3
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	4013      	ands	r3, r2
 800b062:	b29b      	uxth	r3, r3
 800b064:	2b00      	cmp	r3, #0
 800b066:	bf14      	ite	ne
 800b068:	2301      	movne	r3, #1
 800b06a:	2300      	moveq	r3, #0
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	e00b      	b.n	800b088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	43da      	mvns	r2, r3
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	4013      	ands	r3, r2
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	2b00      	cmp	r3, #0
 800b080:	bf14      	ite	ne
 800b082:	2301      	movne	r3, #1
 800b084:	2300      	moveq	r3, #0
 800b086:	b2db      	uxtb	r3, r3
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f47f af6d 	bne.w	800af68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b0a4:	e034      	b.n	800b110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f000 f8e3 	bl	800b272 <I2C_IsAcknowledgeFailed>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e034      	b.n	800b120 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0bc:	d028      	beq.n	800b110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0be:	f7fe f8c3 	bl	8009248 <HAL_GetTick>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	68ba      	ldr	r2, [r7, #8]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d302      	bcc.n	800b0d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d11d      	bne.n	800b110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0de:	2b80      	cmp	r3, #128	; 0x80
 800b0e0:	d016      	beq.n	800b110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2220      	movs	r2, #32
 800b0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fc:	f043 0220 	orr.w	r2, r3, #32
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e007      	b.n	800b120 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	695b      	ldr	r3, [r3, #20]
 800b116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b11a:	2b80      	cmp	r3, #128	; 0x80
 800b11c:	d1c3      	bne.n	800b0a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b134:	e034      	b.n	800b1a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f000 f89b 	bl	800b272 <I2C_IsAcknowledgeFailed>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d001      	beq.n	800b146 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e034      	b.n	800b1b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14c:	d028      	beq.n	800b1a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b14e:	f7fe f87b 	bl	8009248 <HAL_GetTick>
 800b152:	4602      	mov	r2, r0
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	68ba      	ldr	r2, [r7, #8]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d302      	bcc.n	800b164 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d11d      	bne.n	800b1a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	f003 0304 	and.w	r3, r3, #4
 800b16e:	2b04      	cmp	r3, #4
 800b170:	d016      	beq.n	800b1a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2220      	movs	r2, #32
 800b17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18c:	f043 0220 	orr.w	r2, r3, #32
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e007      	b.n	800b1b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	695b      	ldr	r3, [r3, #20]
 800b1a6:	f003 0304 	and.w	r3, r3, #4
 800b1aa:	2b04      	cmp	r3, #4
 800b1ac:	d1c3      	bne.n	800b136 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b1c4:	e049      	b.n	800b25a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	695b      	ldr	r3, [r3, #20]
 800b1cc:	f003 0310 	and.w	r3, r3, #16
 800b1d0:	2b10      	cmp	r3, #16
 800b1d2:	d119      	bne.n	800b208 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f06f 0210 	mvn.w	r2, #16
 800b1dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2220      	movs	r2, #32
 800b1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	e030      	b.n	800b26a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b208:	f7fe f81e 	bl	8009248 <HAL_GetTick>
 800b20c:	4602      	mov	r2, r0
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	68ba      	ldr	r2, [r7, #8]
 800b214:	429a      	cmp	r2, r3
 800b216:	d302      	bcc.n	800b21e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d11d      	bne.n	800b25a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	695b      	ldr	r3, [r3, #20]
 800b224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b228:	2b40      	cmp	r3, #64	; 0x40
 800b22a:	d016      	beq.n	800b25a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2220      	movs	r2, #32
 800b236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2200      	movs	r2, #0
 800b23e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b246:	f043 0220 	orr.w	r2, r3, #32
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e007      	b.n	800b26a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	695b      	ldr	r3, [r3, #20]
 800b260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b264:	2b40      	cmp	r3, #64	; 0x40
 800b266:	d1ae      	bne.n	800b1c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b272:	b480      	push	{r7}
 800b274:	b083      	sub	sp, #12
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	695b      	ldr	r3, [r3, #20]
 800b280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b288:	d11b      	bne.n	800b2c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b292:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2220      	movs	r2, #32
 800b29e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ae:	f043 0204 	orr.w	r2, r3, #4
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e000      	b.n	800b2c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bc80      	pop	{r7}
 800b2cc:	4770      	bx	lr
	...

0800b2d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e272      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 0301 	and.w	r3, r3, #1
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f000 8087 	beq.w	800b3fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b2f0:	4b92      	ldr	r3, [pc, #584]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	f003 030c 	and.w	r3, r3, #12
 800b2f8:	2b04      	cmp	r3, #4
 800b2fa:	d00c      	beq.n	800b316 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b2fc:	4b8f      	ldr	r3, [pc, #572]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	f003 030c 	and.w	r3, r3, #12
 800b304:	2b08      	cmp	r3, #8
 800b306:	d112      	bne.n	800b32e <HAL_RCC_OscConfig+0x5e>
 800b308:	4b8c      	ldr	r3, [pc, #560]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b314:	d10b      	bne.n	800b32e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b316:	4b89      	ldr	r3, [pc, #548]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d06c      	beq.n	800b3fc <HAL_RCC_OscConfig+0x12c>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d168      	bne.n	800b3fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	e24c      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b336:	d106      	bne.n	800b346 <HAL_RCC_OscConfig+0x76>
 800b338:	4b80      	ldr	r3, [pc, #512]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a7f      	ldr	r2, [pc, #508]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b33e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b342:	6013      	str	r3, [r2, #0]
 800b344:	e02e      	b.n	800b3a4 <HAL_RCC_OscConfig+0xd4>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10c      	bne.n	800b368 <HAL_RCC_OscConfig+0x98>
 800b34e:	4b7b      	ldr	r3, [pc, #492]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a7a      	ldr	r2, [pc, #488]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b358:	6013      	str	r3, [r2, #0]
 800b35a:	4b78      	ldr	r3, [pc, #480]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a77      	ldr	r2, [pc, #476]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	e01d      	b.n	800b3a4 <HAL_RCC_OscConfig+0xd4>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b370:	d10c      	bne.n	800b38c <HAL_RCC_OscConfig+0xbc>
 800b372:	4b72      	ldr	r3, [pc, #456]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a71      	ldr	r2, [pc, #452]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b37c:	6013      	str	r3, [r2, #0]
 800b37e:	4b6f      	ldr	r3, [pc, #444]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a6e      	ldr	r2, [pc, #440]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b388:	6013      	str	r3, [r2, #0]
 800b38a:	e00b      	b.n	800b3a4 <HAL_RCC_OscConfig+0xd4>
 800b38c:	4b6b      	ldr	r3, [pc, #428]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a6a      	ldr	r2, [pc, #424]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	4b68      	ldr	r3, [pc, #416]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a67      	ldr	r2, [pc, #412]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b39e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d013      	beq.n	800b3d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3ac:	f7fd ff4c 	bl	8009248 <HAL_GetTick>
 800b3b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3b2:	e008      	b.n	800b3c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3b4:	f7fd ff48 	bl	8009248 <HAL_GetTick>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	2b64      	cmp	r3, #100	; 0x64
 800b3c0:	d901      	bls.n	800b3c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e200      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3c6:	4b5d      	ldr	r3, [pc, #372]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d0f0      	beq.n	800b3b4 <HAL_RCC_OscConfig+0xe4>
 800b3d2:	e014      	b.n	800b3fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3d4:	f7fd ff38 	bl	8009248 <HAL_GetTick>
 800b3d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b3da:	e008      	b.n	800b3ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3dc:	f7fd ff34 	bl	8009248 <HAL_GetTick>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	2b64      	cmp	r3, #100	; 0x64
 800b3e8:	d901      	bls.n	800b3ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b3ea:	2303      	movs	r3, #3
 800b3ec:	e1ec      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b3ee:	4b53      	ldr	r3, [pc, #332]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1f0      	bne.n	800b3dc <HAL_RCC_OscConfig+0x10c>
 800b3fa:	e000      	b.n	800b3fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f003 0302 	and.w	r3, r3, #2
 800b406:	2b00      	cmp	r3, #0
 800b408:	d063      	beq.n	800b4d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b40a:	4b4c      	ldr	r3, [pc, #304]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	f003 030c 	and.w	r3, r3, #12
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00b      	beq.n	800b42e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b416:	4b49      	ldr	r3, [pc, #292]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	f003 030c 	and.w	r3, r3, #12
 800b41e:	2b08      	cmp	r3, #8
 800b420:	d11c      	bne.n	800b45c <HAL_RCC_OscConfig+0x18c>
 800b422:	4b46      	ldr	r3, [pc, #280]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d116      	bne.n	800b45c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b42e:	4b43      	ldr	r3, [pc, #268]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 0302 	and.w	r3, r3, #2
 800b436:	2b00      	cmp	r3, #0
 800b438:	d005      	beq.n	800b446 <HAL_RCC_OscConfig+0x176>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d001      	beq.n	800b446 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	e1c0      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b446:	4b3d      	ldr	r3, [pc, #244]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	00db      	lsls	r3, r3, #3
 800b454:	4939      	ldr	r1, [pc, #228]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b456:	4313      	orrs	r3, r2
 800b458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b45a:	e03a      	b.n	800b4d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d020      	beq.n	800b4a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b464:	4b36      	ldr	r3, [pc, #216]	; (800b540 <HAL_RCC_OscConfig+0x270>)
 800b466:	2201      	movs	r2, #1
 800b468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b46a:	f7fd feed 	bl	8009248 <HAL_GetTick>
 800b46e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b470:	e008      	b.n	800b484 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b472:	f7fd fee9 	bl	8009248 <HAL_GetTick>
 800b476:	4602      	mov	r2, r0
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d901      	bls.n	800b484 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b480:	2303      	movs	r3, #3
 800b482:	e1a1      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b484:	4b2d      	ldr	r3, [pc, #180]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f003 0302 	and.w	r3, r3, #2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0f0      	beq.n	800b472 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b490:	4b2a      	ldr	r3, [pc, #168]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	695b      	ldr	r3, [r3, #20]
 800b49c:	00db      	lsls	r3, r3, #3
 800b49e:	4927      	ldr	r1, [pc, #156]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	600b      	str	r3, [r1, #0]
 800b4a4:	e015      	b.n	800b4d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b4a6:	4b26      	ldr	r3, [pc, #152]	; (800b540 <HAL_RCC_OscConfig+0x270>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4ac:	f7fd fecc 	bl	8009248 <HAL_GetTick>
 800b4b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b4b2:	e008      	b.n	800b4c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4b4:	f7fd fec8 	bl	8009248 <HAL_GetTick>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d901      	bls.n	800b4c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	e180      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b4c6:	4b1d      	ldr	r3, [pc, #116]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f003 0302 	and.w	r3, r3, #2
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1f0      	bne.n	800b4b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f003 0308 	and.w	r3, r3, #8
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d03a      	beq.n	800b554 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	699b      	ldr	r3, [r3, #24]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d019      	beq.n	800b51a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b4e6:	4b17      	ldr	r3, [pc, #92]	; (800b544 <HAL_RCC_OscConfig+0x274>)
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4ec:	f7fd feac 	bl	8009248 <HAL_GetTick>
 800b4f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b4f2:	e008      	b.n	800b506 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4f4:	f7fd fea8 	bl	8009248 <HAL_GetTick>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	1ad3      	subs	r3, r2, r3
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d901      	bls.n	800b506 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b502:	2303      	movs	r3, #3
 800b504:	e160      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b506:	4b0d      	ldr	r3, [pc, #52]	; (800b53c <HAL_RCC_OscConfig+0x26c>)
 800b508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50a:	f003 0302 	and.w	r3, r3, #2
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d0f0      	beq.n	800b4f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b512:	2001      	movs	r0, #1
 800b514:	f000 face 	bl	800bab4 <RCC_Delay>
 800b518:	e01c      	b.n	800b554 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b51a:	4b0a      	ldr	r3, [pc, #40]	; (800b544 <HAL_RCC_OscConfig+0x274>)
 800b51c:	2200      	movs	r2, #0
 800b51e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b520:	f7fd fe92 	bl	8009248 <HAL_GetTick>
 800b524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b526:	e00f      	b.n	800b548 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b528:	f7fd fe8e 	bl	8009248 <HAL_GetTick>
 800b52c:	4602      	mov	r2, r0
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	2b02      	cmp	r3, #2
 800b534:	d908      	bls.n	800b548 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b536:	2303      	movs	r3, #3
 800b538:	e146      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
 800b53a:	bf00      	nop
 800b53c:	40021000 	.word	0x40021000
 800b540:	42420000 	.word	0x42420000
 800b544:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b548:	4b92      	ldr	r3, [pc, #584]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54c:	f003 0302 	and.w	r3, r3, #2
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1e9      	bne.n	800b528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 0304 	and.w	r3, r3, #4
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f000 80a6 	beq.w	800b6ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b562:	2300      	movs	r3, #0
 800b564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b566:	4b8b      	ldr	r3, [pc, #556]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b568:	69db      	ldr	r3, [r3, #28]
 800b56a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d10d      	bne.n	800b58e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b572:	4b88      	ldr	r3, [pc, #544]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b574:	69db      	ldr	r3, [r3, #28]
 800b576:	4a87      	ldr	r2, [pc, #540]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b57c:	61d3      	str	r3, [r2, #28]
 800b57e:	4b85      	ldr	r3, [pc, #532]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b580:	69db      	ldr	r3, [r3, #28]
 800b582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b586:	60bb      	str	r3, [r7, #8]
 800b588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b58a:	2301      	movs	r3, #1
 800b58c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b58e:	4b82      	ldr	r3, [pc, #520]	; (800b798 <HAL_RCC_OscConfig+0x4c8>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b596:	2b00      	cmp	r3, #0
 800b598:	d118      	bne.n	800b5cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b59a:	4b7f      	ldr	r3, [pc, #508]	; (800b798 <HAL_RCC_OscConfig+0x4c8>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a7e      	ldr	r2, [pc, #504]	; (800b798 <HAL_RCC_OscConfig+0x4c8>)
 800b5a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b5a6:	f7fd fe4f 	bl	8009248 <HAL_GetTick>
 800b5aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5ac:	e008      	b.n	800b5c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5ae:	f7fd fe4b 	bl	8009248 <HAL_GetTick>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	1ad3      	subs	r3, r2, r3
 800b5b8:	2b64      	cmp	r3, #100	; 0x64
 800b5ba:	d901      	bls.n	800b5c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	e103      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5c0:	4b75      	ldr	r3, [pc, #468]	; (800b798 <HAL_RCC_OscConfig+0x4c8>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d0f0      	beq.n	800b5ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d106      	bne.n	800b5e2 <HAL_RCC_OscConfig+0x312>
 800b5d4:	4b6f      	ldr	r3, [pc, #444]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b5d6:	6a1b      	ldr	r3, [r3, #32]
 800b5d8:	4a6e      	ldr	r2, [pc, #440]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b5da:	f043 0301 	orr.w	r3, r3, #1
 800b5de:	6213      	str	r3, [r2, #32]
 800b5e0:	e02d      	b.n	800b63e <HAL_RCC_OscConfig+0x36e>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d10c      	bne.n	800b604 <HAL_RCC_OscConfig+0x334>
 800b5ea:	4b6a      	ldr	r3, [pc, #424]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	4a69      	ldr	r2, [pc, #420]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b5f0:	f023 0301 	bic.w	r3, r3, #1
 800b5f4:	6213      	str	r3, [r2, #32]
 800b5f6:	4b67      	ldr	r3, [pc, #412]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	4a66      	ldr	r2, [pc, #408]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b5fc:	f023 0304 	bic.w	r3, r3, #4
 800b600:	6213      	str	r3, [r2, #32]
 800b602:	e01c      	b.n	800b63e <HAL_RCC_OscConfig+0x36e>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	2b05      	cmp	r3, #5
 800b60a:	d10c      	bne.n	800b626 <HAL_RCC_OscConfig+0x356>
 800b60c:	4b61      	ldr	r3, [pc, #388]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b60e:	6a1b      	ldr	r3, [r3, #32]
 800b610:	4a60      	ldr	r2, [pc, #384]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b612:	f043 0304 	orr.w	r3, r3, #4
 800b616:	6213      	str	r3, [r2, #32]
 800b618:	4b5e      	ldr	r3, [pc, #376]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b61a:	6a1b      	ldr	r3, [r3, #32]
 800b61c:	4a5d      	ldr	r2, [pc, #372]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b61e:	f043 0301 	orr.w	r3, r3, #1
 800b622:	6213      	str	r3, [r2, #32]
 800b624:	e00b      	b.n	800b63e <HAL_RCC_OscConfig+0x36e>
 800b626:	4b5b      	ldr	r3, [pc, #364]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	4a5a      	ldr	r2, [pc, #360]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b62c:	f023 0301 	bic.w	r3, r3, #1
 800b630:	6213      	str	r3, [r2, #32]
 800b632:	4b58      	ldr	r3, [pc, #352]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b634:	6a1b      	ldr	r3, [r3, #32]
 800b636:	4a57      	ldr	r2, [pc, #348]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b638:	f023 0304 	bic.w	r3, r3, #4
 800b63c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d015      	beq.n	800b672 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b646:	f7fd fdff 	bl	8009248 <HAL_GetTick>
 800b64a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b64c:	e00a      	b.n	800b664 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b64e:	f7fd fdfb 	bl	8009248 <HAL_GetTick>
 800b652:	4602      	mov	r2, r0
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	1ad3      	subs	r3, r2, r3
 800b658:	f241 3288 	movw	r2, #5000	; 0x1388
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d901      	bls.n	800b664 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b660:	2303      	movs	r3, #3
 800b662:	e0b1      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b664:	4b4b      	ldr	r3, [pc, #300]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b666:	6a1b      	ldr	r3, [r3, #32]
 800b668:	f003 0302 	and.w	r3, r3, #2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d0ee      	beq.n	800b64e <HAL_RCC_OscConfig+0x37e>
 800b670:	e014      	b.n	800b69c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b672:	f7fd fde9 	bl	8009248 <HAL_GetTick>
 800b676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b678:	e00a      	b.n	800b690 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b67a:	f7fd fde5 	bl	8009248 <HAL_GetTick>
 800b67e:	4602      	mov	r2, r0
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	f241 3288 	movw	r2, #5000	; 0x1388
 800b688:	4293      	cmp	r3, r2
 800b68a:	d901      	bls.n	800b690 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b68c:	2303      	movs	r3, #3
 800b68e:	e09b      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b690:	4b40      	ldr	r3, [pc, #256]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b692:	6a1b      	ldr	r3, [r3, #32]
 800b694:	f003 0302 	and.w	r3, r3, #2
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1ee      	bne.n	800b67a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b69c:	7dfb      	ldrb	r3, [r7, #23]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d105      	bne.n	800b6ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b6a2:	4b3c      	ldr	r3, [pc, #240]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b6a4:	69db      	ldr	r3, [r3, #28]
 800b6a6:	4a3b      	ldr	r2, [pc, #236]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b6a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	69db      	ldr	r3, [r3, #28]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f000 8087 	beq.w	800b7c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b6b8:	4b36      	ldr	r3, [pc, #216]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	f003 030c 	and.w	r3, r3, #12
 800b6c0:	2b08      	cmp	r3, #8
 800b6c2:	d061      	beq.n	800b788 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	69db      	ldr	r3, [r3, #28]
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d146      	bne.n	800b75a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6cc:	4b33      	ldr	r3, [pc, #204]	; (800b79c <HAL_RCC_OscConfig+0x4cc>)
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b6d2:	f7fd fdb9 	bl	8009248 <HAL_GetTick>
 800b6d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b6d8:	e008      	b.n	800b6ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6da:	f7fd fdb5 	bl	8009248 <HAL_GetTick>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d901      	bls.n	800b6ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e06d      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b6ec:	4b29      	ldr	r3, [pc, #164]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1f0      	bne.n	800b6da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6a1b      	ldr	r3, [r3, #32]
 800b6fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b700:	d108      	bne.n	800b714 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b702:	4b24      	ldr	r3, [pc, #144]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	4921      	ldr	r1, [pc, #132]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b710:	4313      	orrs	r3, r2
 800b712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b714:	4b1f      	ldr	r3, [pc, #124]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6a19      	ldr	r1, [r3, #32]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b724:	430b      	orrs	r3, r1
 800b726:	491b      	ldr	r1, [pc, #108]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b728:	4313      	orrs	r3, r2
 800b72a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b72c:	4b1b      	ldr	r3, [pc, #108]	; (800b79c <HAL_RCC_OscConfig+0x4cc>)
 800b72e:	2201      	movs	r2, #1
 800b730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b732:	f7fd fd89 	bl	8009248 <HAL_GetTick>
 800b736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b738:	e008      	b.n	800b74c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b73a:	f7fd fd85 	bl	8009248 <HAL_GetTick>
 800b73e:	4602      	mov	r2, r0
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	2b02      	cmp	r3, #2
 800b746:	d901      	bls.n	800b74c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b748:	2303      	movs	r3, #3
 800b74a:	e03d      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b74c:	4b11      	ldr	r3, [pc, #68]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b754:	2b00      	cmp	r3, #0
 800b756:	d0f0      	beq.n	800b73a <HAL_RCC_OscConfig+0x46a>
 800b758:	e035      	b.n	800b7c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b75a:	4b10      	ldr	r3, [pc, #64]	; (800b79c <HAL_RCC_OscConfig+0x4cc>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b760:	f7fd fd72 	bl	8009248 <HAL_GetTick>
 800b764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b766:	e008      	b.n	800b77a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b768:	f7fd fd6e 	bl	8009248 <HAL_GetTick>
 800b76c:	4602      	mov	r2, r0
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	1ad3      	subs	r3, r2, r3
 800b772:	2b02      	cmp	r3, #2
 800b774:	d901      	bls.n	800b77a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b776:	2303      	movs	r3, #3
 800b778:	e026      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b77a:	4b06      	ldr	r3, [pc, #24]	; (800b794 <HAL_RCC_OscConfig+0x4c4>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1f0      	bne.n	800b768 <HAL_RCC_OscConfig+0x498>
 800b786:	e01e      	b.n	800b7c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	69db      	ldr	r3, [r3, #28]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d107      	bne.n	800b7a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	e019      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
 800b794:	40021000 	.word	0x40021000
 800b798:	40007000 	.word	0x40007000
 800b79c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b7a0:	4b0b      	ldr	r3, [pc, #44]	; (800b7d0 <HAL_RCC_OscConfig+0x500>)
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6a1b      	ldr	r3, [r3, #32]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d106      	bne.n	800b7c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d001      	beq.n	800b7c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e000      	b.n	800b7c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3718      	adds	r7, #24
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	40021000 	.word	0x40021000

0800b7d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d101      	bne.n	800b7e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e0d0      	b.n	800b98a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b7e8:	4b6a      	ldr	r3, [pc, #424]	; (800b994 <HAL_RCC_ClockConfig+0x1c0>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 0307 	and.w	r3, r3, #7
 800b7f0:	683a      	ldr	r2, [r7, #0]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d910      	bls.n	800b818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7f6:	4b67      	ldr	r3, [pc, #412]	; (800b994 <HAL_RCC_ClockConfig+0x1c0>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f023 0207 	bic.w	r2, r3, #7
 800b7fe:	4965      	ldr	r1, [pc, #404]	; (800b994 <HAL_RCC_ClockConfig+0x1c0>)
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	4313      	orrs	r3, r2
 800b804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b806:	4b63      	ldr	r3, [pc, #396]	; (800b994 <HAL_RCC_ClockConfig+0x1c0>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f003 0307 	and.w	r3, r3, #7
 800b80e:	683a      	ldr	r2, [r7, #0]
 800b810:	429a      	cmp	r2, r3
 800b812:	d001      	beq.n	800b818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	e0b8      	b.n	800b98a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0302 	and.w	r3, r3, #2
 800b820:	2b00      	cmp	r3, #0
 800b822:	d020      	beq.n	800b866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 0304 	and.w	r3, r3, #4
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d005      	beq.n	800b83c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b830:	4b59      	ldr	r3, [pc, #356]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	4a58      	ldr	r2, [pc, #352]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b836:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b83a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f003 0308 	and.w	r3, r3, #8
 800b844:	2b00      	cmp	r3, #0
 800b846:	d005      	beq.n	800b854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b848:	4b53      	ldr	r3, [pc, #332]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	4a52      	ldr	r2, [pc, #328]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b84e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b854:	4b50      	ldr	r3, [pc, #320]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	494d      	ldr	r1, [pc, #308]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b862:	4313      	orrs	r3, r2
 800b864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f003 0301 	and.w	r3, r3, #1
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d040      	beq.n	800b8f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d107      	bne.n	800b88a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b87a:	4b47      	ldr	r3, [pc, #284]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b882:	2b00      	cmp	r3, #0
 800b884:	d115      	bne.n	800b8b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	e07f      	b.n	800b98a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d107      	bne.n	800b8a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b892:	4b41      	ldr	r3, [pc, #260]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d109      	bne.n	800b8b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e073      	b.n	800b98a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8a2:	4b3d      	ldr	r3, [pc, #244]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f003 0302 	and.w	r3, r3, #2
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d101      	bne.n	800b8b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e06b      	b.n	800b98a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b8b2:	4b39      	ldr	r3, [pc, #228]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	f023 0203 	bic.w	r2, r3, #3
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	4936      	ldr	r1, [pc, #216]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b8c4:	f7fd fcc0 	bl	8009248 <HAL_GetTick>
 800b8c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8ca:	e00a      	b.n	800b8e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8cc:	f7fd fcbc 	bl	8009248 <HAL_GetTick>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	1ad3      	subs	r3, r2, r3
 800b8d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d901      	bls.n	800b8e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	e053      	b.n	800b98a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8e2:	4b2d      	ldr	r3, [pc, #180]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	f003 020c 	and.w	r2, r3, #12
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d1eb      	bne.n	800b8cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b8f4:	4b27      	ldr	r3, [pc, #156]	; (800b994 <HAL_RCC_ClockConfig+0x1c0>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 0307 	and.w	r3, r3, #7
 800b8fc:	683a      	ldr	r2, [r7, #0]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d210      	bcs.n	800b924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b902:	4b24      	ldr	r3, [pc, #144]	; (800b994 <HAL_RCC_ClockConfig+0x1c0>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f023 0207 	bic.w	r2, r3, #7
 800b90a:	4922      	ldr	r1, [pc, #136]	; (800b994 <HAL_RCC_ClockConfig+0x1c0>)
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	4313      	orrs	r3, r2
 800b910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b912:	4b20      	ldr	r3, [pc, #128]	; (800b994 <HAL_RCC_ClockConfig+0x1c0>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f003 0307 	and.w	r3, r3, #7
 800b91a:	683a      	ldr	r2, [r7, #0]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d001      	beq.n	800b924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b920:	2301      	movs	r3, #1
 800b922:	e032      	b.n	800b98a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 0304 	and.w	r3, r3, #4
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d008      	beq.n	800b942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b930:	4b19      	ldr	r3, [pc, #100]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	4916      	ldr	r1, [pc, #88]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b93e:	4313      	orrs	r3, r2
 800b940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f003 0308 	and.w	r3, r3, #8
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d009      	beq.n	800b962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b94e:	4b12      	ldr	r3, [pc, #72]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	00db      	lsls	r3, r3, #3
 800b95c:	490e      	ldr	r1, [pc, #56]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b95e:	4313      	orrs	r3, r2
 800b960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b962:	f000 f821 	bl	800b9a8 <HAL_RCC_GetSysClockFreq>
 800b966:	4602      	mov	r2, r0
 800b968:	4b0b      	ldr	r3, [pc, #44]	; (800b998 <HAL_RCC_ClockConfig+0x1c4>)
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	091b      	lsrs	r3, r3, #4
 800b96e:	f003 030f 	and.w	r3, r3, #15
 800b972:	490a      	ldr	r1, [pc, #40]	; (800b99c <HAL_RCC_ClockConfig+0x1c8>)
 800b974:	5ccb      	ldrb	r3, [r1, r3]
 800b976:	fa22 f303 	lsr.w	r3, r2, r3
 800b97a:	4a09      	ldr	r2, [pc, #36]	; (800b9a0 <HAL_RCC_ClockConfig+0x1cc>)
 800b97c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b97e:	4b09      	ldr	r3, [pc, #36]	; (800b9a4 <HAL_RCC_ClockConfig+0x1d0>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4618      	mov	r0, r3
 800b984:	f7fd fc1e 	bl	80091c4 <HAL_InitTick>

  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	40022000 	.word	0x40022000
 800b998:	40021000 	.word	0x40021000
 800b99c:	0800e824 	.word	0x0800e824
 800b9a0:	200009d0 	.word	0x200009d0
 800b9a4:	200009d4 	.word	0x200009d4

0800b9a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b087      	sub	sp, #28
 800b9ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	60fb      	str	r3, [r7, #12]
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	60bb      	str	r3, [r7, #8]
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	617b      	str	r3, [r7, #20]
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b9c2:	4b1e      	ldr	r3, [pc, #120]	; (800ba3c <HAL_RCC_GetSysClockFreq+0x94>)
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f003 030c 	and.w	r3, r3, #12
 800b9ce:	2b04      	cmp	r3, #4
 800b9d0:	d002      	beq.n	800b9d8 <HAL_RCC_GetSysClockFreq+0x30>
 800b9d2:	2b08      	cmp	r3, #8
 800b9d4:	d003      	beq.n	800b9de <HAL_RCC_GetSysClockFreq+0x36>
 800b9d6:	e027      	b.n	800ba28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b9d8:	4b19      	ldr	r3, [pc, #100]	; (800ba40 <HAL_RCC_GetSysClockFreq+0x98>)
 800b9da:	613b      	str	r3, [r7, #16]
      break;
 800b9dc:	e027      	b.n	800ba2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	0c9b      	lsrs	r3, r3, #18
 800b9e2:	f003 030f 	and.w	r3, r3, #15
 800b9e6:	4a17      	ldr	r2, [pc, #92]	; (800ba44 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b9e8:	5cd3      	ldrb	r3, [r2, r3]
 800b9ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d010      	beq.n	800ba18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b9f6:	4b11      	ldr	r3, [pc, #68]	; (800ba3c <HAL_RCC_GetSysClockFreq+0x94>)
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	0c5b      	lsrs	r3, r3, #17
 800b9fc:	f003 0301 	and.w	r3, r3, #1
 800ba00:	4a11      	ldr	r2, [pc, #68]	; (800ba48 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ba02:	5cd3      	ldrb	r3, [r2, r3]
 800ba04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	4a0d      	ldr	r2, [pc, #52]	; (800ba40 <HAL_RCC_GetSysClockFreq+0x98>)
 800ba0a:	fb03 f202 	mul.w	r2, r3, r2
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba14:	617b      	str	r3, [r7, #20]
 800ba16:	e004      	b.n	800ba22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a0c      	ldr	r2, [pc, #48]	; (800ba4c <HAL_RCC_GetSysClockFreq+0xa4>)
 800ba1c:	fb02 f303 	mul.w	r3, r2, r3
 800ba20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	613b      	str	r3, [r7, #16]
      break;
 800ba26:	e002      	b.n	800ba2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ba28:	4b05      	ldr	r3, [pc, #20]	; (800ba40 <HAL_RCC_GetSysClockFreq+0x98>)
 800ba2a:	613b      	str	r3, [r7, #16]
      break;
 800ba2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ba2e:	693b      	ldr	r3, [r7, #16]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	371c      	adds	r7, #28
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bc80      	pop	{r7}
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	40021000 	.word	0x40021000
 800ba40:	007a1200 	.word	0x007a1200
 800ba44:	0800e83c 	.word	0x0800e83c
 800ba48:	0800e84c 	.word	0x0800e84c
 800ba4c:	003d0900 	.word	0x003d0900

0800ba50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba50:	b480      	push	{r7}
 800ba52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ba54:	4b02      	ldr	r3, [pc, #8]	; (800ba60 <HAL_RCC_GetHCLKFreq+0x10>)
 800ba56:	681b      	ldr	r3, [r3, #0]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bc80      	pop	{r7}
 800ba5e:	4770      	bx	lr
 800ba60:	200009d0 	.word	0x200009d0

0800ba64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ba68:	f7ff fff2 	bl	800ba50 <HAL_RCC_GetHCLKFreq>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	4b05      	ldr	r3, [pc, #20]	; (800ba84 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	0a1b      	lsrs	r3, r3, #8
 800ba74:	f003 0307 	and.w	r3, r3, #7
 800ba78:	4903      	ldr	r1, [pc, #12]	; (800ba88 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba7a:	5ccb      	ldrb	r3, [r1, r3]
 800ba7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	40021000 	.word	0x40021000
 800ba88:	0800e834 	.word	0x0800e834

0800ba8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ba90:	f7ff ffde 	bl	800ba50 <HAL_RCC_GetHCLKFreq>
 800ba94:	4602      	mov	r2, r0
 800ba96:	4b05      	ldr	r3, [pc, #20]	; (800baac <HAL_RCC_GetPCLK2Freq+0x20>)
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	0adb      	lsrs	r3, r3, #11
 800ba9c:	f003 0307 	and.w	r3, r3, #7
 800baa0:	4903      	ldr	r1, [pc, #12]	; (800bab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800baa2:	5ccb      	ldrb	r3, [r1, r3]
 800baa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	40021000 	.word	0x40021000
 800bab0:	0800e834 	.word	0x0800e834

0800bab4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800babc:	4b0a      	ldr	r3, [pc, #40]	; (800bae8 <RCC_Delay+0x34>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a0a      	ldr	r2, [pc, #40]	; (800baec <RCC_Delay+0x38>)
 800bac2:	fba2 2303 	umull	r2, r3, r2, r3
 800bac6:	0a5b      	lsrs	r3, r3, #9
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	fb02 f303 	mul.w	r3, r2, r3
 800bace:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bad0:	bf00      	nop
  }
  while (Delay --);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	1e5a      	subs	r2, r3, #1
 800bad6:	60fa      	str	r2, [r7, #12]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1f9      	bne.n	800bad0 <RCC_Delay+0x1c>
}
 800badc:	bf00      	nop
 800bade:	bf00      	nop
 800bae0:	3714      	adds	r7, #20
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bc80      	pop	{r7}
 800bae6:	4770      	bx	lr
 800bae8:	200009d0 	.word	0x200009d0
 800baec:	10624dd3 	.word	0x10624dd3

0800baf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d101      	bne.n	800bb02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e041      	b.n	800bb86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d106      	bne.n	800bb1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f7fd fa26 	bl	8008f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2202      	movs	r2, #2
 800bb20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	4610      	mov	r0, r2
 800bb30:	f000 fa82 	bl	800c038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3708      	adds	r7, #8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
	...

0800bb90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d001      	beq.n	800bba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	e044      	b.n	800bc32 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2202      	movs	r2, #2
 800bbac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68da      	ldr	r2, [r3, #12]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f042 0201 	orr.w	r2, r2, #1
 800bbbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a1d      	ldr	r2, [pc, #116]	; (800bc3c <HAL_TIM_Base_Start_IT+0xac>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d018      	beq.n	800bbfc <HAL_TIM_Base_Start_IT+0x6c>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4a1c      	ldr	r2, [pc, #112]	; (800bc40 <HAL_TIM_Base_Start_IT+0xb0>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d013      	beq.n	800bbfc <HAL_TIM_Base_Start_IT+0x6c>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbdc:	d00e      	beq.n	800bbfc <HAL_TIM_Base_Start_IT+0x6c>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4a18      	ldr	r2, [pc, #96]	; (800bc44 <HAL_TIM_Base_Start_IT+0xb4>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d009      	beq.n	800bbfc <HAL_TIM_Base_Start_IT+0x6c>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a16      	ldr	r2, [pc, #88]	; (800bc48 <HAL_TIM_Base_Start_IT+0xb8>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d004      	beq.n	800bbfc <HAL_TIM_Base_Start_IT+0x6c>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a15      	ldr	r2, [pc, #84]	; (800bc4c <HAL_TIM_Base_Start_IT+0xbc>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d111      	bne.n	800bc20 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	f003 0307 	and.w	r3, r3, #7
 800bc06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2b06      	cmp	r3, #6
 800bc0c:	d010      	beq.n	800bc30 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f042 0201 	orr.w	r2, r2, #1
 800bc1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc1e:	e007      	b.n	800bc30 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f042 0201 	orr.w	r2, r2, #1
 800bc2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bc80      	pop	{r7}
 800bc3a:	4770      	bx	lr
 800bc3c:	40012c00 	.word	0x40012c00
 800bc40:	40013400 	.word	0x40013400
 800bc44:	40000400 	.word	0x40000400
 800bc48:	40000800 	.word	0x40000800
 800bc4c:	40000c00 	.word	0x40000c00

0800bc50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	691b      	ldr	r3, [r3, #16]
 800bc5e:	f003 0302 	and.w	r3, r3, #2
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d122      	bne.n	800bcac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	f003 0302 	and.w	r3, r3, #2
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	d11b      	bne.n	800bcac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f06f 0202 	mvn.w	r2, #2
 800bc7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2201      	movs	r2, #1
 800bc82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	699b      	ldr	r3, [r3, #24]
 800bc8a:	f003 0303 	and.w	r3, r3, #3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d003      	beq.n	800bc9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 f9b4 	bl	800c000 <HAL_TIM_IC_CaptureCallback>
 800bc98:	e005      	b.n	800bca6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 f9a7 	bl	800bfee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 f9b6 	bl	800c012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	691b      	ldr	r3, [r3, #16]
 800bcb2:	f003 0304 	and.w	r3, r3, #4
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	d122      	bne.n	800bd00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	f003 0304 	and.w	r3, r3, #4
 800bcc4:	2b04      	cmp	r3, #4
 800bcc6:	d11b      	bne.n	800bd00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f06f 0204 	mvn.w	r2, #4
 800bcd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2202      	movs	r2, #2
 800bcd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	699b      	ldr	r3, [r3, #24]
 800bcde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d003      	beq.n	800bcee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f98a 	bl	800c000 <HAL_TIM_IC_CaptureCallback>
 800bcec:	e005      	b.n	800bcfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 f97d 	bl	800bfee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 f98c 	bl	800c012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	f003 0308 	and.w	r3, r3, #8
 800bd0a:	2b08      	cmp	r3, #8
 800bd0c:	d122      	bne.n	800bd54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	f003 0308 	and.w	r3, r3, #8
 800bd18:	2b08      	cmp	r3, #8
 800bd1a:	d11b      	bne.n	800bd54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f06f 0208 	mvn.w	r2, #8
 800bd24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2204      	movs	r2, #4
 800bd2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	69db      	ldr	r3, [r3, #28]
 800bd32:	f003 0303 	and.w	r3, r3, #3
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d003      	beq.n	800bd42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 f960 	bl	800c000 <HAL_TIM_IC_CaptureCallback>
 800bd40:	e005      	b.n	800bd4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 f953 	bl	800bfee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 f962 	bl	800c012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	f003 0310 	and.w	r3, r3, #16
 800bd5e:	2b10      	cmp	r3, #16
 800bd60:	d122      	bne.n	800bda8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	f003 0310 	and.w	r3, r3, #16
 800bd6c:	2b10      	cmp	r3, #16
 800bd6e:	d11b      	bne.n	800bda8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f06f 0210 	mvn.w	r2, #16
 800bd78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2208      	movs	r2, #8
 800bd7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	69db      	ldr	r3, [r3, #28]
 800bd86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d003      	beq.n	800bd96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f936 	bl	800c000 <HAL_TIM_IC_CaptureCallback>
 800bd94:	e005      	b.n	800bda2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 f929 	bl	800bfee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 f938 	bl	800c012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	691b      	ldr	r3, [r3, #16]
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d10e      	bne.n	800bdd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	f003 0301 	and.w	r3, r3, #1
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d107      	bne.n	800bdd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f06f 0201 	mvn.w	r2, #1
 800bdcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f7fc fc48 	bl	8008664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdde:	2b80      	cmp	r3, #128	; 0x80
 800bde0:	d10e      	bne.n	800be00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdec:	2b80      	cmp	r3, #128	; 0x80
 800bdee:	d107      	bne.n	800be00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bdf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 faa1 	bl	800c342 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be0a:	2b40      	cmp	r3, #64	; 0x40
 800be0c:	d10e      	bne.n	800be2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be18:	2b40      	cmp	r3, #64	; 0x40
 800be1a:	d107      	bne.n	800be2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800be24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f8fc 	bl	800c024 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	f003 0320 	and.w	r3, r3, #32
 800be36:	2b20      	cmp	r3, #32
 800be38:	d10e      	bne.n	800be58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	f003 0320 	and.w	r3, r3, #32
 800be44:	2b20      	cmp	r3, #32
 800be46:	d107      	bne.n	800be58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f06f 0220 	mvn.w	r2, #32
 800be50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fa6c 	bl	800c330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be58:	bf00      	nop
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be6a:	2300      	movs	r3, #0
 800be6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be74:	2b01      	cmp	r3, #1
 800be76:	d101      	bne.n	800be7c <HAL_TIM_ConfigClockSource+0x1c>
 800be78:	2302      	movs	r3, #2
 800be7a:	e0b4      	b.n	800bfe6 <HAL_TIM_ConfigClockSource+0x186>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2201      	movs	r2, #1
 800be80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2202      	movs	r2, #2
 800be88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800be9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bea2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68ba      	ldr	r2, [r7, #8]
 800beaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beb4:	d03e      	beq.n	800bf34 <HAL_TIM_ConfigClockSource+0xd4>
 800beb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beba:	f200 8087 	bhi.w	800bfcc <HAL_TIM_ConfigClockSource+0x16c>
 800bebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bec2:	f000 8086 	beq.w	800bfd2 <HAL_TIM_ConfigClockSource+0x172>
 800bec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beca:	d87f      	bhi.n	800bfcc <HAL_TIM_ConfigClockSource+0x16c>
 800becc:	2b70      	cmp	r3, #112	; 0x70
 800bece:	d01a      	beq.n	800bf06 <HAL_TIM_ConfigClockSource+0xa6>
 800bed0:	2b70      	cmp	r3, #112	; 0x70
 800bed2:	d87b      	bhi.n	800bfcc <HAL_TIM_ConfigClockSource+0x16c>
 800bed4:	2b60      	cmp	r3, #96	; 0x60
 800bed6:	d050      	beq.n	800bf7a <HAL_TIM_ConfigClockSource+0x11a>
 800bed8:	2b60      	cmp	r3, #96	; 0x60
 800beda:	d877      	bhi.n	800bfcc <HAL_TIM_ConfigClockSource+0x16c>
 800bedc:	2b50      	cmp	r3, #80	; 0x50
 800bede:	d03c      	beq.n	800bf5a <HAL_TIM_ConfigClockSource+0xfa>
 800bee0:	2b50      	cmp	r3, #80	; 0x50
 800bee2:	d873      	bhi.n	800bfcc <HAL_TIM_ConfigClockSource+0x16c>
 800bee4:	2b40      	cmp	r3, #64	; 0x40
 800bee6:	d058      	beq.n	800bf9a <HAL_TIM_ConfigClockSource+0x13a>
 800bee8:	2b40      	cmp	r3, #64	; 0x40
 800beea:	d86f      	bhi.n	800bfcc <HAL_TIM_ConfigClockSource+0x16c>
 800beec:	2b30      	cmp	r3, #48	; 0x30
 800beee:	d064      	beq.n	800bfba <HAL_TIM_ConfigClockSource+0x15a>
 800bef0:	2b30      	cmp	r3, #48	; 0x30
 800bef2:	d86b      	bhi.n	800bfcc <HAL_TIM_ConfigClockSource+0x16c>
 800bef4:	2b20      	cmp	r3, #32
 800bef6:	d060      	beq.n	800bfba <HAL_TIM_ConfigClockSource+0x15a>
 800bef8:	2b20      	cmp	r3, #32
 800befa:	d867      	bhi.n	800bfcc <HAL_TIM_ConfigClockSource+0x16c>
 800befc:	2b00      	cmp	r3, #0
 800befe:	d05c      	beq.n	800bfba <HAL_TIM_ConfigClockSource+0x15a>
 800bf00:	2b10      	cmp	r3, #16
 800bf02:	d05a      	beq.n	800bfba <HAL_TIM_ConfigClockSource+0x15a>
 800bf04:	e062      	b.n	800bfcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf16:	f000 f980 	bl	800c21a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bf28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	68ba      	ldr	r2, [r7, #8]
 800bf30:	609a      	str	r2, [r3, #8]
      break;
 800bf32:	e04f      	b.n	800bfd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf44:	f000 f969 	bl	800c21a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	689a      	ldr	r2, [r3, #8]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf56:	609a      	str	r2, [r3, #8]
      break;
 800bf58:	e03c      	b.n	800bfd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf66:	461a      	mov	r2, r3
 800bf68:	f000 f8e0 	bl	800c12c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2150      	movs	r1, #80	; 0x50
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 f937 	bl	800c1e6 <TIM_ITRx_SetConfig>
      break;
 800bf78:	e02c      	b.n	800bfd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf86:	461a      	mov	r2, r3
 800bf88:	f000 f8fe 	bl	800c188 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2160      	movs	r1, #96	; 0x60
 800bf92:	4618      	mov	r0, r3
 800bf94:	f000 f927 	bl	800c1e6 <TIM_ITRx_SetConfig>
      break;
 800bf98:	e01c      	b.n	800bfd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	f000 f8c0 	bl	800c12c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2140      	movs	r1, #64	; 0x40
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f000 f917 	bl	800c1e6 <TIM_ITRx_SetConfig>
      break;
 800bfb8:	e00c      	b.n	800bfd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	f000 f90e 	bl	800c1e6 <TIM_ITRx_SetConfig>
      break;
 800bfca:	e003      	b.n	800bfd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	73fb      	strb	r3, [r7, #15]
      break;
 800bfd0:	e000      	b.n	800bfd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bfd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfee:	b480      	push	{r7}
 800bff0:	b083      	sub	sp, #12
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bff6:	bf00      	nop
 800bff8:	370c      	adds	r7, #12
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bc80      	pop	{r7}
 800bffe:	4770      	bx	lr

0800c000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c008:	bf00      	nop
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bc80      	pop	{r7}
 800c010:	4770      	bx	lr

0800c012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c012:	b480      	push	{r7}
 800c014:	b083      	sub	sp, #12
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c01a:	bf00      	nop
 800c01c:	370c      	adds	r7, #12
 800c01e:	46bd      	mov	sp, r7
 800c020:	bc80      	pop	{r7}
 800c022:	4770      	bx	lr

0800c024 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c02c:	bf00      	nop
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	bc80      	pop	{r7}
 800c034:	4770      	bx	lr
	...

0800c038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4a33      	ldr	r2, [pc, #204]	; (800c118 <TIM_Base_SetConfig+0xe0>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d013      	beq.n	800c078 <TIM_Base_SetConfig+0x40>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4a32      	ldr	r2, [pc, #200]	; (800c11c <TIM_Base_SetConfig+0xe4>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d00f      	beq.n	800c078 <TIM_Base_SetConfig+0x40>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c05e:	d00b      	beq.n	800c078 <TIM_Base_SetConfig+0x40>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4a2f      	ldr	r2, [pc, #188]	; (800c120 <TIM_Base_SetConfig+0xe8>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d007      	beq.n	800c078 <TIM_Base_SetConfig+0x40>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	4a2e      	ldr	r2, [pc, #184]	; (800c124 <TIM_Base_SetConfig+0xec>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d003      	beq.n	800c078 <TIM_Base_SetConfig+0x40>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	4a2d      	ldr	r2, [pc, #180]	; (800c128 <TIM_Base_SetConfig+0xf0>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d108      	bne.n	800c08a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c07e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	68fa      	ldr	r2, [r7, #12]
 800c086:	4313      	orrs	r3, r2
 800c088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4a22      	ldr	r2, [pc, #136]	; (800c118 <TIM_Base_SetConfig+0xe0>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d013      	beq.n	800c0ba <TIM_Base_SetConfig+0x82>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4a21      	ldr	r2, [pc, #132]	; (800c11c <TIM_Base_SetConfig+0xe4>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d00f      	beq.n	800c0ba <TIM_Base_SetConfig+0x82>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0a0:	d00b      	beq.n	800c0ba <TIM_Base_SetConfig+0x82>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a1e      	ldr	r2, [pc, #120]	; (800c120 <TIM_Base_SetConfig+0xe8>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d007      	beq.n	800c0ba <TIM_Base_SetConfig+0x82>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a1d      	ldr	r2, [pc, #116]	; (800c124 <TIM_Base_SetConfig+0xec>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d003      	beq.n	800c0ba <TIM_Base_SetConfig+0x82>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	4a1c      	ldr	r2, [pc, #112]	; (800c128 <TIM_Base_SetConfig+0xf0>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d108      	bne.n	800c0cc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	695b      	ldr	r3, [r3, #20]
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	689a      	ldr	r2, [r3, #8]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a09      	ldr	r2, [pc, #36]	; (800c118 <TIM_Base_SetConfig+0xe0>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d003      	beq.n	800c100 <TIM_Base_SetConfig+0xc8>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a08      	ldr	r2, [pc, #32]	; (800c11c <TIM_Base_SetConfig+0xe4>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d103      	bne.n	800c108 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	691a      	ldr	r2, [r3, #16]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2201      	movs	r2, #1
 800c10c:	615a      	str	r2, [r3, #20]
}
 800c10e:	bf00      	nop
 800c110:	3714      	adds	r7, #20
 800c112:	46bd      	mov	sp, r7
 800c114:	bc80      	pop	{r7}
 800c116:	4770      	bx	lr
 800c118:	40012c00 	.word	0x40012c00
 800c11c:	40013400 	.word	0x40013400
 800c120:	40000400 	.word	0x40000400
 800c124:	40000800 	.word	0x40000800
 800c128:	40000c00 	.word	0x40000c00

0800c12c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b087      	sub	sp, #28
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6a1b      	ldr	r3, [r3, #32]
 800c13c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6a1b      	ldr	r3, [r3, #32]
 800c142:	f023 0201 	bic.w	r2, r3, #1
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	011b      	lsls	r3, r3, #4
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	4313      	orrs	r3, r2
 800c160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	f023 030a 	bic.w	r3, r3, #10
 800c168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c16a:	697a      	ldr	r2, [r7, #20]
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	4313      	orrs	r3, r2
 800c170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	693a      	ldr	r2, [r7, #16]
 800c176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	621a      	str	r2, [r3, #32]
}
 800c17e:	bf00      	nop
 800c180:	371c      	adds	r7, #28
 800c182:	46bd      	mov	sp, r7
 800c184:	bc80      	pop	{r7}
 800c186:	4770      	bx	lr

0800c188 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c188:	b480      	push	{r7}
 800c18a:	b087      	sub	sp, #28
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6a1b      	ldr	r3, [r3, #32]
 800c198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	f023 0210 	bic.w	r2, r3, #16
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	699b      	ldr	r3, [r3, #24]
 800c1aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c1b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	031b      	lsls	r3, r3, #12
 800c1b8:	693a      	ldr	r2, [r7, #16]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c1c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	011b      	lsls	r3, r3, #4
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	693a      	ldr	r2, [r7, #16]
 800c1d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	697a      	ldr	r2, [r7, #20]
 800c1da:	621a      	str	r2, [r3, #32]
}
 800c1dc:	bf00      	nop
 800c1de:	371c      	adds	r7, #28
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bc80      	pop	{r7}
 800c1e4:	4770      	bx	lr

0800c1e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b085      	sub	sp, #20
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c1fe:	683a      	ldr	r2, [r7, #0]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	4313      	orrs	r3, r2
 800c204:	f043 0307 	orr.w	r3, r3, #7
 800c208:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	609a      	str	r2, [r3, #8]
}
 800c210:	bf00      	nop
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	bc80      	pop	{r7}
 800c218:	4770      	bx	lr

0800c21a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c21a:	b480      	push	{r7}
 800c21c:	b087      	sub	sp, #28
 800c21e:	af00      	add	r7, sp, #0
 800c220:	60f8      	str	r0, [r7, #12]
 800c222:	60b9      	str	r1, [r7, #8]
 800c224:	607a      	str	r2, [r7, #4]
 800c226:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c234:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	021a      	lsls	r2, r3, #8
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	431a      	orrs	r2, r3
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	4313      	orrs	r3, r2
 800c242:	697a      	ldr	r2, [r7, #20]
 800c244:	4313      	orrs	r3, r2
 800c246:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	697a      	ldr	r2, [r7, #20]
 800c24c:	609a      	str	r2, [r3, #8]
}
 800c24e:	bf00      	nop
 800c250:	371c      	adds	r7, #28
 800c252:	46bd      	mov	sp, r7
 800c254:	bc80      	pop	{r7}
 800c256:	4770      	bx	lr

0800c258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d101      	bne.n	800c270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c26c:	2302      	movs	r3, #2
 800c26e:	e050      	b.n	800c312 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2202      	movs	r2, #2
 800c27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68fa      	ldr	r2, [r7, #12]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4a1b      	ldr	r2, [pc, #108]	; (800c31c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d018      	beq.n	800c2e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a19      	ldr	r2, [pc, #100]	; (800c320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d013      	beq.n	800c2e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2c6:	d00e      	beq.n	800c2e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a15      	ldr	r2, [pc, #84]	; (800c324 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d009      	beq.n	800c2e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a14      	ldr	r2, [pc, #80]	; (800c328 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d004      	beq.n	800c2e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a12      	ldr	r2, [pc, #72]	; (800c32c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d10c      	bne.n	800c300 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c310:	2300      	movs	r3, #0
}
 800c312:	4618      	mov	r0, r3
 800c314:	3714      	adds	r7, #20
 800c316:	46bd      	mov	sp, r7
 800c318:	bc80      	pop	{r7}
 800c31a:	4770      	bx	lr
 800c31c:	40012c00 	.word	0x40012c00
 800c320:	40013400 	.word	0x40013400
 800c324:	40000400 	.word	0x40000400
 800c328:	40000800 	.word	0x40000800
 800c32c:	40000c00 	.word	0x40000c00

0800c330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c338:	bf00      	nop
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bc80      	pop	{r7}
 800c340:	4770      	bx	lr

0800c342 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c342:	b480      	push	{r7}
 800c344:	b083      	sub	sp, #12
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c34a:	bf00      	nop
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	bc80      	pop	{r7}
 800c352:	4770      	bx	lr

0800c354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d101      	bne.n	800c366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c362:	2301      	movs	r3, #1
 800c364:	e042      	b.n	800c3ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d106      	bne.n	800c380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f7fc fe1a 	bl	8008fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2224      	movs	r2, #36	; 0x24
 800c384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	68da      	ldr	r2, [r3, #12]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fd11 	bl	800cdc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	691a      	ldr	r2, [r3, #16]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c3ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	695a      	ldr	r2, [r3, #20]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c3bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68da      	ldr	r2, [r3, #12]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c3cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2220      	movs	r2, #32
 800c3d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2220      	movs	r2, #32
 800c3e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3708      	adds	r7, #8
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	4613      	mov	r3, r2
 800c400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	2b20      	cmp	r3, #32
 800c40c:	d121      	bne.n	800c452 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d002      	beq.n	800c41a <HAL_UART_Transmit_IT+0x26>
 800c414:	88fb      	ldrh	r3, [r7, #6]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d101      	bne.n	800c41e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	e01a      	b.n	800c454 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	68ba      	ldr	r2, [r7, #8]
 800c422:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	88fa      	ldrh	r2, [r7, #6]
 800c428:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	88fa      	ldrh	r2, [r7, #6]
 800c42e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2200      	movs	r2, #0
 800c434:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2221      	movs	r2, #33	; 0x21
 800c43a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68da      	ldr	r2, [r3, #12]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c44c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	e000      	b.n	800c454 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c452:	2302      	movs	r3, #2
  }
}
 800c454:	4618      	mov	r0, r3
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	bc80      	pop	{r7}
 800c45c:	4770      	bx	lr

0800c45e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b084      	sub	sp, #16
 800c462:	af00      	add	r7, sp, #0
 800c464:	60f8      	str	r0, [r7, #12]
 800c466:	60b9      	str	r1, [r7, #8]
 800c468:	4613      	mov	r3, r2
 800c46a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c472:	b2db      	uxtb	r3, r3
 800c474:	2b20      	cmp	r3, #32
 800c476:	d112      	bne.n	800c49e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d002      	beq.n	800c484 <HAL_UART_Receive_IT+0x26>
 800c47e:	88fb      	ldrh	r3, [r7, #6]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d101      	bne.n	800c488 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c484:	2301      	movs	r3, #1
 800c486:	e00b      	b.n	800c4a0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2200      	movs	r2, #0
 800c48c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c48e:	88fb      	ldrh	r3, [r7, #6]
 800c490:	461a      	mov	r2, r3
 800c492:	68b9      	ldr	r1, [r7, #8]
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f000 fabf 	bl	800ca18 <UART_Start_Receive_IT>
 800c49a:	4603      	mov	r3, r0
 800c49c:	e000      	b.n	800c4a0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c49e:	2302      	movs	r3, #2
  }
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b0ba      	sub	sp, #232	; 0xe8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c4da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4de:	f003 030f 	and.w	r3, r3, #15
 800c4e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c4e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d10f      	bne.n	800c50e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4f2:	f003 0320 	and.w	r3, r3, #32
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d009      	beq.n	800c50e <HAL_UART_IRQHandler+0x66>
 800c4fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4fe:	f003 0320 	and.w	r3, r3, #32
 800c502:	2b00      	cmp	r3, #0
 800c504:	d003      	beq.n	800c50e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fb9c 	bl	800cc44 <UART_Receive_IT>
      return;
 800c50c:	e25b      	b.n	800c9c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c50e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c512:	2b00      	cmp	r3, #0
 800c514:	f000 80de 	beq.w	800c6d4 <HAL_UART_IRQHandler+0x22c>
 800c518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c51c:	f003 0301 	and.w	r3, r3, #1
 800c520:	2b00      	cmp	r3, #0
 800c522:	d106      	bne.n	800c532 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c528:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f000 80d1 	beq.w	800c6d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c536:	f003 0301 	and.w	r3, r3, #1
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00b      	beq.n	800c556 <HAL_UART_IRQHandler+0xae>
 800c53e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c546:	2b00      	cmp	r3, #0
 800c548:	d005      	beq.n	800c556 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c54e:	f043 0201 	orr.w	r2, r3, #1
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c55a:	f003 0304 	and.w	r3, r3, #4
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d00b      	beq.n	800c57a <HAL_UART_IRQHandler+0xd2>
 800c562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c566:	f003 0301 	and.w	r3, r3, #1
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d005      	beq.n	800c57a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c572:	f043 0202 	orr.w	r2, r3, #2
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c57a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c57e:	f003 0302 	and.w	r3, r3, #2
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00b      	beq.n	800c59e <HAL_UART_IRQHandler+0xf6>
 800c586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c58a:	f003 0301 	and.w	r3, r3, #1
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d005      	beq.n	800c59e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c596:	f043 0204 	orr.w	r2, r3, #4
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c59e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5a2:	f003 0308 	and.w	r3, r3, #8
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d011      	beq.n	800c5ce <HAL_UART_IRQHandler+0x126>
 800c5aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5ae:	f003 0320 	and.w	r3, r3, #32
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d105      	bne.n	800c5c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c5b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d005      	beq.n	800c5ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5c6:	f043 0208 	orr.w	r2, r3, #8
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f000 81f2 	beq.w	800c9bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c5d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5dc:	f003 0320 	and.w	r3, r3, #32
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d008      	beq.n	800c5f6 <HAL_UART_IRQHandler+0x14e>
 800c5e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5e8:	f003 0320 	and.w	r3, r3, #32
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 fb27 	bl	800cc44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	695b      	ldr	r3, [r3, #20]
 800c5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c600:	2b00      	cmp	r3, #0
 800c602:	bf14      	ite	ne
 800c604:	2301      	movne	r3, #1
 800c606:	2300      	moveq	r3, #0
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c612:	f003 0308 	and.w	r3, r3, #8
 800c616:	2b00      	cmp	r3, #0
 800c618:	d103      	bne.n	800c622 <HAL_UART_IRQHandler+0x17a>
 800c61a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d04f      	beq.n	800c6c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fa31 	bl	800ca8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	695b      	ldr	r3, [r3, #20]
 800c62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c632:	2b00      	cmp	r3, #0
 800c634:	d041      	beq.n	800c6ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	3314      	adds	r3, #20
 800c63c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c640:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c644:	e853 3f00 	ldrex	r3, [r3]
 800c648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c64c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3314      	adds	r3, #20
 800c65e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c662:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c66e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c672:	e841 2300 	strex	r3, r2, [r1]
 800c676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c67a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1d9      	bne.n	800c636 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c686:	2b00      	cmp	r3, #0
 800c688:	d013      	beq.n	800c6b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c68e:	4a7e      	ldr	r2, [pc, #504]	; (800c888 <HAL_UART_IRQHandler+0x3e0>)
 800c690:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c696:	4618      	mov	r0, r3
 800c698:	f7fd f848 	bl	800972c <HAL_DMA_Abort_IT>
 800c69c:	4603      	mov	r3, r0
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d016      	beq.n	800c6d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c6ac:	4610      	mov	r0, r2
 800c6ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6b0:	e00e      	b.n	800c6d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f000 f99c 	bl	800c9f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6b8:	e00a      	b.n	800c6d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 f998 	bl	800c9f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6c0:	e006      	b.n	800c6d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f994 	bl	800c9f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c6ce:	e175      	b.n	800c9bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6d0:	bf00      	nop
    return;
 800c6d2:	e173      	b.n	800c9bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	f040 814f 	bne.w	800c97c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c6de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6e2:	f003 0310 	and.w	r3, r3, #16
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f000 8148 	beq.w	800c97c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c6ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6f0:	f003 0310 	and.w	r3, r3, #16
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f000 8141 	beq.w	800c97c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	60bb      	str	r3, [r7, #8]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	60bb      	str	r3, [r7, #8]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	60bb      	str	r3, [r7, #8]
 800c70e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	695b      	ldr	r3, [r3, #20]
 800c716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f000 80b6 	beq.w	800c88c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c72c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c730:	2b00      	cmp	r3, #0
 800c732:	f000 8145 	beq.w	800c9c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c73a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c73e:	429a      	cmp	r2, r3
 800c740:	f080 813e 	bcs.w	800c9c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c74a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c750:	699b      	ldr	r3, [r3, #24]
 800c752:	2b20      	cmp	r3, #32
 800c754:	f000 8088 	beq.w	800c868 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	330c      	adds	r3, #12
 800c75e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c762:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c766:	e853 3f00 	ldrex	r3, [r3]
 800c76a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c76e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c776:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	330c      	adds	r3, #12
 800c780:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c784:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c788:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c790:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c794:	e841 2300 	strex	r3, r2, [r1]
 800c798:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c79c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d1d9      	bne.n	800c758 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	3314      	adds	r3, #20
 800c7aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7ae:	e853 3f00 	ldrex	r3, [r3]
 800c7b2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c7b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7b6:	f023 0301 	bic.w	r3, r3, #1
 800c7ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	3314      	adds	r3, #20
 800c7c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c7c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c7cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c7d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c7d4:	e841 2300 	strex	r3, r2, [r1]
 800c7d8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c7da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1e1      	bne.n	800c7a4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	3314      	adds	r3, #20
 800c7e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c7ea:	e853 3f00 	ldrex	r3, [r3]
 800c7ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c7f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	3314      	adds	r3, #20
 800c800:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c804:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c806:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c808:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c80a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c80c:	e841 2300 	strex	r3, r2, [r1]
 800c810:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c814:	2b00      	cmp	r3, #0
 800c816:	d1e3      	bne.n	800c7e0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2220      	movs	r2, #32
 800c81c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	330c      	adds	r3, #12
 800c82c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c830:	e853 3f00 	ldrex	r3, [r3]
 800c834:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c838:	f023 0310 	bic.w	r3, r3, #16
 800c83c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	330c      	adds	r3, #12
 800c846:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c84a:	65ba      	str	r2, [r7, #88]	; 0x58
 800c84c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c84e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c850:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c852:	e841 2300 	strex	r3, r2, [r1]
 800c856:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1e3      	bne.n	800c826 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c862:	4618      	mov	r0, r3
 800c864:	f7fc ff27 	bl	80096b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2202      	movs	r2, #2
 800c86c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c876:	b29b      	uxth	r3, r3
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	4619      	mov	r1, r3
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f8bf 	bl	800ca02 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c884:	e09c      	b.n	800c9c0 <HAL_UART_IRQHandler+0x518>
 800c886:	bf00      	nop
 800c888:	0800cb4f 	.word	0x0800cb4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c894:	b29b      	uxth	r3, r3
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f000 808e 	beq.w	800c9c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c8a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f000 8089 	beq.w	800c9c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	330c      	adds	r3, #12
 800c8b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8bc:	e853 3f00 	ldrex	r3, [r3]
 800c8c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c8c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	330c      	adds	r3, #12
 800c8d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c8d6:	647a      	str	r2, [r7, #68]	; 0x44
 800c8d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c8dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8de:	e841 2300 	strex	r3, r2, [r1]
 800c8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1e3      	bne.n	800c8b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3314      	adds	r3, #20
 800c8f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f4:	e853 3f00 	ldrex	r3, [r3]
 800c8f8:	623b      	str	r3, [r7, #32]
   return(result);
 800c8fa:	6a3b      	ldr	r3, [r7, #32]
 800c8fc:	f023 0301 	bic.w	r3, r3, #1
 800c900:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	3314      	adds	r3, #20
 800c90a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c90e:	633a      	str	r2, [r7, #48]	; 0x30
 800c910:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c912:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c916:	e841 2300 	strex	r3, r2, [r1]
 800c91a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1e3      	bne.n	800c8ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2220      	movs	r2, #32
 800c926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	330c      	adds	r3, #12
 800c936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	e853 3f00 	ldrex	r3, [r3]
 800c93e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f023 0310 	bic.w	r3, r3, #16
 800c946:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	330c      	adds	r3, #12
 800c950:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c954:	61fa      	str	r2, [r7, #28]
 800c956:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c958:	69b9      	ldr	r1, [r7, #24]
 800c95a:	69fa      	ldr	r2, [r7, #28]
 800c95c:	e841 2300 	strex	r3, r2, [r1]
 800c960:	617b      	str	r3, [r7, #20]
   return(result);
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1e3      	bne.n	800c930 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2202      	movs	r2, #2
 800c96c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c96e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c972:	4619      	mov	r1, r3
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 f844 	bl	800ca02 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c97a:	e023      	b.n	800c9c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c97c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c984:	2b00      	cmp	r3, #0
 800c986:	d009      	beq.n	800c99c <HAL_UART_IRQHandler+0x4f4>
 800c988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c98c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c990:	2b00      	cmp	r3, #0
 800c992:	d003      	beq.n	800c99c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 f8ee 	bl	800cb76 <UART_Transmit_IT>
    return;
 800c99a:	e014      	b.n	800c9c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d00e      	beq.n	800c9c6 <HAL_UART_IRQHandler+0x51e>
 800c9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d008      	beq.n	800c9c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 f92d 	bl	800cc14 <UART_EndTransmit_IT>
    return;
 800c9ba:	e004      	b.n	800c9c6 <HAL_UART_IRQHandler+0x51e>
    return;
 800c9bc:	bf00      	nop
 800c9be:	e002      	b.n	800c9c6 <HAL_UART_IRQHandler+0x51e>
      return;
 800c9c0:	bf00      	nop
 800c9c2:	e000      	b.n	800c9c6 <HAL_UART_IRQHandler+0x51e>
      return;
 800c9c4:	bf00      	nop
  }
}
 800c9c6:	37e8      	adds	r7, #232	; 0xe8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c9d4:	bf00      	nop
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bc80      	pop	{r7}
 800c9dc:	4770      	bx	lr

0800c9de <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9de:	b480      	push	{r7}
 800c9e0:	b083      	sub	sp, #12
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c9e6:	bf00      	nop
 800c9e8:	370c      	adds	r7, #12
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bc80      	pop	{r7}
 800c9ee:	4770      	bx	lr

0800c9f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c9f8:	bf00      	nop
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bc80      	pop	{r7}
 800ca00:	4770      	bx	lr

0800ca02 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca02:	b480      	push	{r7}
 800ca04:	b083      	sub	sp, #12
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ca0e:	bf00      	nop
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bc80      	pop	{r7}
 800ca16:	4770      	bx	lr

0800ca18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	4613      	mov	r3, r2
 800ca24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	68ba      	ldr	r2, [r7, #8]
 800ca2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	88fa      	ldrh	r2, [r7, #6]
 800ca30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	88fa      	ldrh	r2, [r7, #6]
 800ca36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2222      	movs	r2, #34	; 0x22
 800ca42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d007      	beq.n	800ca5e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	68da      	ldr	r2, [r3, #12]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ca5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	695a      	ldr	r2, [r3, #20]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f042 0201 	orr.w	r2, r2, #1
 800ca6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	68da      	ldr	r2, [r3, #12]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f042 0220 	orr.w	r2, r2, #32
 800ca7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bc80      	pop	{r7}
 800ca88:	4770      	bx	lr

0800ca8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca8a:	b480      	push	{r7}
 800ca8c:	b095      	sub	sp, #84	; 0x54
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	330c      	adds	r3, #12
 800ca98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9c:	e853 3f00 	ldrex	r3, [r3]
 800caa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800caa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800caa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	330c      	adds	r3, #12
 800cab0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cab2:	643a      	str	r2, [r7, #64]	; 0x40
 800cab4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800caba:	e841 2300 	strex	r3, r2, [r1]
 800cabe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1e5      	bne.n	800ca92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	3314      	adds	r3, #20
 800cacc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cace:	6a3b      	ldr	r3, [r7, #32]
 800cad0:	e853 3f00 	ldrex	r3, [r3]
 800cad4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	f023 0301 	bic.w	r3, r3, #1
 800cadc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	3314      	adds	r3, #20
 800cae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cae8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800caec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caee:	e841 2300 	strex	r3, r2, [r1]
 800caf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800caf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1e5      	bne.n	800cac6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d119      	bne.n	800cb36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	330c      	adds	r3, #12
 800cb08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	e853 3f00 	ldrex	r3, [r3]
 800cb10:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	f023 0310 	bic.w	r3, r3, #16
 800cb18:	647b      	str	r3, [r7, #68]	; 0x44
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	330c      	adds	r3, #12
 800cb20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb22:	61ba      	str	r2, [r7, #24]
 800cb24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb26:	6979      	ldr	r1, [r7, #20]
 800cb28:	69ba      	ldr	r2, [r7, #24]
 800cb2a:	e841 2300 	strex	r3, r2, [r1]
 800cb2e:	613b      	str	r3, [r7, #16]
   return(result);
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1e5      	bne.n	800cb02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2220      	movs	r2, #32
 800cb3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cb44:	bf00      	nop
 800cb46:	3754      	adds	r7, #84	; 0x54
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bc80      	pop	{r7}
 800cb4c:	4770      	bx	lr

0800cb4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b084      	sub	sp, #16
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2200      	movs	r2, #0
 800cb66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f7ff ff41 	bl	800c9f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb6e:	bf00      	nop
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cb76:	b480      	push	{r7}
 800cb78:	b085      	sub	sp, #20
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	2b21      	cmp	r3, #33	; 0x21
 800cb88:	d13e      	bne.n	800cc08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb92:	d114      	bne.n	800cbbe <UART_Transmit_IT+0x48>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	691b      	ldr	r3, [r3, #16]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d110      	bne.n	800cbbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6a1b      	ldr	r3, [r3, #32]
 800cba0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	881b      	ldrh	r3, [r3, #0]
 800cba6:	461a      	mov	r2, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6a1b      	ldr	r3, [r3, #32]
 800cbb6:	1c9a      	adds	r2, r3, #2
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	621a      	str	r2, [r3, #32]
 800cbbc:	e008      	b.n	800cbd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a1b      	ldr	r3, [r3, #32]
 800cbc2:	1c59      	adds	r1, r3, #1
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	6211      	str	r1, [r2, #32]
 800cbc8:	781a      	ldrb	r2, [r3, #0]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	3b01      	subs	r3, #1
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	4619      	mov	r1, r3
 800cbde:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10f      	bne.n	800cc04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68da      	ldr	r2, [r3, #12]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cbf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	68da      	ldr	r2, [r3, #12]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	e000      	b.n	800cc0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cc08:	2302      	movs	r3, #2
  }
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3714      	adds	r7, #20
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bc80      	pop	{r7}
 800cc12:	4770      	bx	lr

0800cc14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	68da      	ldr	r2, [r3, #12]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2220      	movs	r2, #32
 800cc30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f7ff fec9 	bl	800c9cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cc3a:	2300      	movs	r3, #0
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b08c      	sub	sp, #48	; 0x30
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	2b22      	cmp	r3, #34	; 0x22
 800cc56:	f040 80ae 	bne.w	800cdb6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc62:	d117      	bne.n	800cc94 <UART_Receive_IT+0x50>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	691b      	ldr	r3, [r3, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d113      	bne.n	800cc94 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc74:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc8c:	1c9a      	adds	r2, r3, #2
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	629a      	str	r2, [r3, #40]	; 0x28
 800cc92:	e026      	b.n	800cce2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cca6:	d007      	beq.n	800ccb8 <UART_Receive_IT+0x74>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10a      	bne.n	800ccc6 <UART_Receive_IT+0x82>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	691b      	ldr	r3, [r3, #16]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d106      	bne.n	800ccc6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	b2da      	uxtb	r2, r3
 800ccc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc2:	701a      	strb	r2, [r3, #0]
 800ccc4:	e008      	b.n	800ccd8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccd2:	b2da      	uxtb	r2, r3
 800ccd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccdc:	1c5a      	adds	r2, r3, #1
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	3b01      	subs	r3, #1
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	4619      	mov	r1, r3
 800ccf0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d15d      	bne.n	800cdb2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	68da      	ldr	r2, [r3, #12]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f022 0220 	bic.w	r2, r2, #32
 800cd04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	68da      	ldr	r2, [r3, #12]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	695a      	ldr	r2, [r3, #20]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f022 0201 	bic.w	r2, r2, #1
 800cd24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2220      	movs	r2, #32
 800cd2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d135      	bne.n	800cda8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	330c      	adds	r3, #12
 800cd48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	e853 3f00 	ldrex	r3, [r3]
 800cd50:	613b      	str	r3, [r7, #16]
   return(result);
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	f023 0310 	bic.w	r3, r3, #16
 800cd58:	627b      	str	r3, [r7, #36]	; 0x24
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	330c      	adds	r3, #12
 800cd60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd62:	623a      	str	r2, [r7, #32]
 800cd64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd66:	69f9      	ldr	r1, [r7, #28]
 800cd68:	6a3a      	ldr	r2, [r7, #32]
 800cd6a:	e841 2300 	strex	r3, r2, [r1]
 800cd6e:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d1e5      	bne.n	800cd42 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 0310 	and.w	r3, r3, #16
 800cd80:	2b10      	cmp	r3, #16
 800cd82:	d10a      	bne.n	800cd9a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cd84:	2300      	movs	r3, #0
 800cd86:	60fb      	str	r3, [r7, #12]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	60fb      	str	r3, [r7, #12]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	60fb      	str	r3, [r7, #12]
 800cd98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cd9e:	4619      	mov	r1, r3
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f7ff fe2e 	bl	800ca02 <HAL_UARTEx_RxEventCallback>
 800cda6:	e002      	b.n	800cdae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f7ff fe18 	bl	800c9de <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	e002      	b.n	800cdb8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	e000      	b.n	800cdb8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cdb6:	2302      	movs	r3, #2
  }
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3730      	adds	r7, #48	; 0x30
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	68da      	ldr	r2, [r3, #12]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	430a      	orrs	r2, r1
 800cddc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	689a      	ldr	r2, [r3, #8]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	431a      	orrs	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	695b      	ldr	r3, [r3, #20]
 800cdec:	4313      	orrs	r3, r2
 800cdee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800cdfa:	f023 030c 	bic.w	r3, r3, #12
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	6812      	ldr	r2, [r2, #0]
 800ce02:	68b9      	ldr	r1, [r7, #8]
 800ce04:	430b      	orrs	r3, r1
 800ce06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	695b      	ldr	r3, [r3, #20]
 800ce0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	699a      	ldr	r2, [r3, #24]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	430a      	orrs	r2, r1
 800ce1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a2c      	ldr	r2, [pc, #176]	; (800ced4 <UART_SetConfig+0x114>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d103      	bne.n	800ce30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800ce28:	f7fe fe30 	bl	800ba8c <HAL_RCC_GetPCLK2Freq>
 800ce2c:	60f8      	str	r0, [r7, #12]
 800ce2e:	e002      	b.n	800ce36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ce30:	f7fe fe18 	bl	800ba64 <HAL_RCC_GetPCLK1Freq>
 800ce34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	4613      	mov	r3, r2
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	4413      	add	r3, r2
 800ce3e:	009a      	lsls	r2, r3, #2
 800ce40:	441a      	add	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce4c:	4a22      	ldr	r2, [pc, #136]	; (800ced8 <UART_SetConfig+0x118>)
 800ce4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce52:	095b      	lsrs	r3, r3, #5
 800ce54:	0119      	lsls	r1, r3, #4
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	4613      	mov	r3, r2
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	4413      	add	r3, r2
 800ce5e:	009a      	lsls	r2, r3, #2
 800ce60:	441a      	add	r2, r3
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	fbb2 f2f3 	udiv	r2, r2, r3
 800ce6c:	4b1a      	ldr	r3, [pc, #104]	; (800ced8 <UART_SetConfig+0x118>)
 800ce6e:	fba3 0302 	umull	r0, r3, r3, r2
 800ce72:	095b      	lsrs	r3, r3, #5
 800ce74:	2064      	movs	r0, #100	; 0x64
 800ce76:	fb00 f303 	mul.w	r3, r0, r3
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	011b      	lsls	r3, r3, #4
 800ce7e:	3332      	adds	r3, #50	; 0x32
 800ce80:	4a15      	ldr	r2, [pc, #84]	; (800ced8 <UART_SetConfig+0x118>)
 800ce82:	fba2 2303 	umull	r2, r3, r2, r3
 800ce86:	095b      	lsrs	r3, r3, #5
 800ce88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce8c:	4419      	add	r1, r3
 800ce8e:	68fa      	ldr	r2, [r7, #12]
 800ce90:	4613      	mov	r3, r2
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	4413      	add	r3, r2
 800ce96:	009a      	lsls	r2, r3, #2
 800ce98:	441a      	add	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	fbb2 f2f3 	udiv	r2, r2, r3
 800cea4:	4b0c      	ldr	r3, [pc, #48]	; (800ced8 <UART_SetConfig+0x118>)
 800cea6:	fba3 0302 	umull	r0, r3, r3, r2
 800ceaa:	095b      	lsrs	r3, r3, #5
 800ceac:	2064      	movs	r0, #100	; 0x64
 800ceae:	fb00 f303 	mul.w	r3, r0, r3
 800ceb2:	1ad3      	subs	r3, r2, r3
 800ceb4:	011b      	lsls	r3, r3, #4
 800ceb6:	3332      	adds	r3, #50	; 0x32
 800ceb8:	4a07      	ldr	r2, [pc, #28]	; (800ced8 <UART_SetConfig+0x118>)
 800ceba:	fba2 2303 	umull	r2, r3, r2, r3
 800cebe:	095b      	lsrs	r3, r3, #5
 800cec0:	f003 020f 	and.w	r2, r3, #15
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	440a      	add	r2, r1
 800ceca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cecc:	bf00      	nop
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	40013800 	.word	0x40013800
 800ced8:	51eb851f 	.word	0x51eb851f

0800cedc <__itoa>:
 800cedc:	1e93      	subs	r3, r2, #2
 800cede:	2b22      	cmp	r3, #34	; 0x22
 800cee0:	b510      	push	{r4, lr}
 800cee2:	460c      	mov	r4, r1
 800cee4:	d904      	bls.n	800cef0 <__itoa+0x14>
 800cee6:	2300      	movs	r3, #0
 800cee8:	461c      	mov	r4, r3
 800ceea:	700b      	strb	r3, [r1, #0]
 800ceec:	4620      	mov	r0, r4
 800ceee:	bd10      	pop	{r4, pc}
 800cef0:	2a0a      	cmp	r2, #10
 800cef2:	d109      	bne.n	800cf08 <__itoa+0x2c>
 800cef4:	2800      	cmp	r0, #0
 800cef6:	da07      	bge.n	800cf08 <__itoa+0x2c>
 800cef8:	232d      	movs	r3, #45	; 0x2d
 800cefa:	700b      	strb	r3, [r1, #0]
 800cefc:	2101      	movs	r1, #1
 800cefe:	4240      	negs	r0, r0
 800cf00:	4421      	add	r1, r4
 800cf02:	f000 f8b9 	bl	800d078 <__utoa>
 800cf06:	e7f1      	b.n	800ceec <__itoa+0x10>
 800cf08:	2100      	movs	r1, #0
 800cf0a:	e7f9      	b.n	800cf00 <__itoa+0x24>

0800cf0c <itoa>:
 800cf0c:	f7ff bfe6 	b.w	800cedc <__itoa>

0800cf10 <malloc>:
 800cf10:	4b02      	ldr	r3, [pc, #8]	; (800cf1c <malloc+0xc>)
 800cf12:	4601      	mov	r1, r0
 800cf14:	6818      	ldr	r0, [r3, #0]
 800cf16:	f000 b823 	b.w	800cf60 <_malloc_r>
 800cf1a:	bf00      	nop
 800cf1c:	20000a28 	.word	0x20000a28

0800cf20 <sbrk_aligned>:
 800cf20:	b570      	push	{r4, r5, r6, lr}
 800cf22:	4e0e      	ldr	r6, [pc, #56]	; (800cf5c <sbrk_aligned+0x3c>)
 800cf24:	460c      	mov	r4, r1
 800cf26:	6831      	ldr	r1, [r6, #0]
 800cf28:	4605      	mov	r5, r0
 800cf2a:	b911      	cbnz	r1, 800cf32 <sbrk_aligned+0x12>
 800cf2c:	f000 f934 	bl	800d198 <_sbrk_r>
 800cf30:	6030      	str	r0, [r6, #0]
 800cf32:	4621      	mov	r1, r4
 800cf34:	4628      	mov	r0, r5
 800cf36:	f000 f92f 	bl	800d198 <_sbrk_r>
 800cf3a:	1c43      	adds	r3, r0, #1
 800cf3c:	d00a      	beq.n	800cf54 <sbrk_aligned+0x34>
 800cf3e:	1cc4      	adds	r4, r0, #3
 800cf40:	f024 0403 	bic.w	r4, r4, #3
 800cf44:	42a0      	cmp	r0, r4
 800cf46:	d007      	beq.n	800cf58 <sbrk_aligned+0x38>
 800cf48:	1a21      	subs	r1, r4, r0
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	f000 f924 	bl	800d198 <_sbrk_r>
 800cf50:	3001      	adds	r0, #1
 800cf52:	d101      	bne.n	800cf58 <sbrk_aligned+0x38>
 800cf54:	f04f 34ff 	mov.w	r4, #4294967295
 800cf58:	4620      	mov	r0, r4
 800cf5a:	bd70      	pop	{r4, r5, r6, pc}
 800cf5c:	20000f58 	.word	0x20000f58

0800cf60 <_malloc_r>:
 800cf60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf64:	1ccd      	adds	r5, r1, #3
 800cf66:	f025 0503 	bic.w	r5, r5, #3
 800cf6a:	3508      	adds	r5, #8
 800cf6c:	2d0c      	cmp	r5, #12
 800cf6e:	bf38      	it	cc
 800cf70:	250c      	movcc	r5, #12
 800cf72:	2d00      	cmp	r5, #0
 800cf74:	4607      	mov	r7, r0
 800cf76:	db01      	blt.n	800cf7c <_malloc_r+0x1c>
 800cf78:	42a9      	cmp	r1, r5
 800cf7a:	d905      	bls.n	800cf88 <_malloc_r+0x28>
 800cf7c:	230c      	movs	r3, #12
 800cf7e:	2600      	movs	r6, #0
 800cf80:	603b      	str	r3, [r7, #0]
 800cf82:	4630      	mov	r0, r6
 800cf84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d05c <_malloc_r+0xfc>
 800cf8c:	f000 f868 	bl	800d060 <__malloc_lock>
 800cf90:	f8d8 3000 	ldr.w	r3, [r8]
 800cf94:	461c      	mov	r4, r3
 800cf96:	bb5c      	cbnz	r4, 800cff0 <_malloc_r+0x90>
 800cf98:	4629      	mov	r1, r5
 800cf9a:	4638      	mov	r0, r7
 800cf9c:	f7ff ffc0 	bl	800cf20 <sbrk_aligned>
 800cfa0:	1c43      	adds	r3, r0, #1
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	d155      	bne.n	800d052 <_malloc_r+0xf2>
 800cfa6:	f8d8 4000 	ldr.w	r4, [r8]
 800cfaa:	4626      	mov	r6, r4
 800cfac:	2e00      	cmp	r6, #0
 800cfae:	d145      	bne.n	800d03c <_malloc_r+0xdc>
 800cfb0:	2c00      	cmp	r4, #0
 800cfb2:	d048      	beq.n	800d046 <_malloc_r+0xe6>
 800cfb4:	6823      	ldr	r3, [r4, #0]
 800cfb6:	4631      	mov	r1, r6
 800cfb8:	4638      	mov	r0, r7
 800cfba:	eb04 0903 	add.w	r9, r4, r3
 800cfbe:	f000 f8eb 	bl	800d198 <_sbrk_r>
 800cfc2:	4581      	cmp	r9, r0
 800cfc4:	d13f      	bne.n	800d046 <_malloc_r+0xe6>
 800cfc6:	6821      	ldr	r1, [r4, #0]
 800cfc8:	4638      	mov	r0, r7
 800cfca:	1a6d      	subs	r5, r5, r1
 800cfcc:	4629      	mov	r1, r5
 800cfce:	f7ff ffa7 	bl	800cf20 <sbrk_aligned>
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	d037      	beq.n	800d046 <_malloc_r+0xe6>
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	442b      	add	r3, r5
 800cfda:	6023      	str	r3, [r4, #0]
 800cfdc:	f8d8 3000 	ldr.w	r3, [r8]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d038      	beq.n	800d056 <_malloc_r+0xf6>
 800cfe4:	685a      	ldr	r2, [r3, #4]
 800cfe6:	42a2      	cmp	r2, r4
 800cfe8:	d12b      	bne.n	800d042 <_malloc_r+0xe2>
 800cfea:	2200      	movs	r2, #0
 800cfec:	605a      	str	r2, [r3, #4]
 800cfee:	e00f      	b.n	800d010 <_malloc_r+0xb0>
 800cff0:	6822      	ldr	r2, [r4, #0]
 800cff2:	1b52      	subs	r2, r2, r5
 800cff4:	d41f      	bmi.n	800d036 <_malloc_r+0xd6>
 800cff6:	2a0b      	cmp	r2, #11
 800cff8:	d917      	bls.n	800d02a <_malloc_r+0xca>
 800cffa:	1961      	adds	r1, r4, r5
 800cffc:	42a3      	cmp	r3, r4
 800cffe:	6025      	str	r5, [r4, #0]
 800d000:	bf18      	it	ne
 800d002:	6059      	strne	r1, [r3, #4]
 800d004:	6863      	ldr	r3, [r4, #4]
 800d006:	bf08      	it	eq
 800d008:	f8c8 1000 	streq.w	r1, [r8]
 800d00c:	5162      	str	r2, [r4, r5]
 800d00e:	604b      	str	r3, [r1, #4]
 800d010:	4638      	mov	r0, r7
 800d012:	f104 060b 	add.w	r6, r4, #11
 800d016:	f000 f829 	bl	800d06c <__malloc_unlock>
 800d01a:	f026 0607 	bic.w	r6, r6, #7
 800d01e:	1d23      	adds	r3, r4, #4
 800d020:	1af2      	subs	r2, r6, r3
 800d022:	d0ae      	beq.n	800cf82 <_malloc_r+0x22>
 800d024:	1b9b      	subs	r3, r3, r6
 800d026:	50a3      	str	r3, [r4, r2]
 800d028:	e7ab      	b.n	800cf82 <_malloc_r+0x22>
 800d02a:	42a3      	cmp	r3, r4
 800d02c:	6862      	ldr	r2, [r4, #4]
 800d02e:	d1dd      	bne.n	800cfec <_malloc_r+0x8c>
 800d030:	f8c8 2000 	str.w	r2, [r8]
 800d034:	e7ec      	b.n	800d010 <_malloc_r+0xb0>
 800d036:	4623      	mov	r3, r4
 800d038:	6864      	ldr	r4, [r4, #4]
 800d03a:	e7ac      	b.n	800cf96 <_malloc_r+0x36>
 800d03c:	4634      	mov	r4, r6
 800d03e:	6876      	ldr	r6, [r6, #4]
 800d040:	e7b4      	b.n	800cfac <_malloc_r+0x4c>
 800d042:	4613      	mov	r3, r2
 800d044:	e7cc      	b.n	800cfe0 <_malloc_r+0x80>
 800d046:	230c      	movs	r3, #12
 800d048:	4638      	mov	r0, r7
 800d04a:	603b      	str	r3, [r7, #0]
 800d04c:	f000 f80e 	bl	800d06c <__malloc_unlock>
 800d050:	e797      	b.n	800cf82 <_malloc_r+0x22>
 800d052:	6025      	str	r5, [r4, #0]
 800d054:	e7dc      	b.n	800d010 <_malloc_r+0xb0>
 800d056:	605b      	str	r3, [r3, #4]
 800d058:	deff      	udf	#255	; 0xff
 800d05a:	bf00      	nop
 800d05c:	20000f54 	.word	0x20000f54

0800d060 <__malloc_lock>:
 800d060:	4801      	ldr	r0, [pc, #4]	; (800d068 <__malloc_lock+0x8>)
 800d062:	f000 b8d3 	b.w	800d20c <__retarget_lock_acquire_recursive>
 800d066:	bf00      	nop
 800d068:	20001098 	.word	0x20001098

0800d06c <__malloc_unlock>:
 800d06c:	4801      	ldr	r0, [pc, #4]	; (800d074 <__malloc_unlock+0x8>)
 800d06e:	f000 b8ce 	b.w	800d20e <__retarget_lock_release_recursive>
 800d072:	bf00      	nop
 800d074:	20001098 	.word	0x20001098

0800d078 <__utoa>:
 800d078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d07a:	b08b      	sub	sp, #44	; 0x2c
 800d07c:	4605      	mov	r5, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	466e      	mov	r6, sp
 800d082:	4c1d      	ldr	r4, [pc, #116]	; (800d0f8 <__utoa+0x80>)
 800d084:	f104 0c20 	add.w	ip, r4, #32
 800d088:	4637      	mov	r7, r6
 800d08a:	6820      	ldr	r0, [r4, #0]
 800d08c:	6861      	ldr	r1, [r4, #4]
 800d08e:	3408      	adds	r4, #8
 800d090:	c703      	stmia	r7!, {r0, r1}
 800d092:	4564      	cmp	r4, ip
 800d094:	463e      	mov	r6, r7
 800d096:	d1f7      	bne.n	800d088 <__utoa+0x10>
 800d098:	7921      	ldrb	r1, [r4, #4]
 800d09a:	6820      	ldr	r0, [r4, #0]
 800d09c:	7139      	strb	r1, [r7, #4]
 800d09e:	1e91      	subs	r1, r2, #2
 800d0a0:	2922      	cmp	r1, #34	; 0x22
 800d0a2:	6038      	str	r0, [r7, #0]
 800d0a4:	f04f 0100 	mov.w	r1, #0
 800d0a8:	d904      	bls.n	800d0b4 <__utoa+0x3c>
 800d0aa:	7019      	strb	r1, [r3, #0]
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	b00b      	add	sp, #44	; 0x2c
 800d0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0b4:	1e58      	subs	r0, r3, #1
 800d0b6:	4684      	mov	ip, r0
 800d0b8:	fbb5 f7f2 	udiv	r7, r5, r2
 800d0bc:	fb02 5617 	mls	r6, r2, r7, r5
 800d0c0:	3628      	adds	r6, #40	; 0x28
 800d0c2:	446e      	add	r6, sp
 800d0c4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d0c8:	460c      	mov	r4, r1
 800d0ca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d0ce:	462e      	mov	r6, r5
 800d0d0:	42b2      	cmp	r2, r6
 800d0d2:	463d      	mov	r5, r7
 800d0d4:	f101 0101 	add.w	r1, r1, #1
 800d0d8:	d9ee      	bls.n	800d0b8 <__utoa+0x40>
 800d0da:	2200      	movs	r2, #0
 800d0dc:	545a      	strb	r2, [r3, r1]
 800d0de:	1919      	adds	r1, r3, r4
 800d0e0:	1aa5      	subs	r5, r4, r2
 800d0e2:	42aa      	cmp	r2, r5
 800d0e4:	dae3      	bge.n	800d0ae <__utoa+0x36>
 800d0e6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d0ea:	780e      	ldrb	r6, [r1, #0]
 800d0ec:	3201      	adds	r2, #1
 800d0ee:	7006      	strb	r6, [r0, #0]
 800d0f0:	f801 5901 	strb.w	r5, [r1], #-1
 800d0f4:	e7f4      	b.n	800d0e0 <__utoa+0x68>
 800d0f6:	bf00      	nop
 800d0f8:	0800e84e 	.word	0x0800e84e

0800d0fc <siprintf>:
 800d0fc:	b40e      	push	{r1, r2, r3}
 800d0fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d102:	b500      	push	{lr}
 800d104:	b09c      	sub	sp, #112	; 0x70
 800d106:	ab1d      	add	r3, sp, #116	; 0x74
 800d108:	9002      	str	r0, [sp, #8]
 800d10a:	9006      	str	r0, [sp, #24]
 800d10c:	9107      	str	r1, [sp, #28]
 800d10e:	9104      	str	r1, [sp, #16]
 800d110:	4808      	ldr	r0, [pc, #32]	; (800d134 <siprintf+0x38>)
 800d112:	4909      	ldr	r1, [pc, #36]	; (800d138 <siprintf+0x3c>)
 800d114:	f853 2b04 	ldr.w	r2, [r3], #4
 800d118:	9105      	str	r1, [sp, #20]
 800d11a:	6800      	ldr	r0, [r0, #0]
 800d11c:	a902      	add	r1, sp, #8
 800d11e:	9301      	str	r3, [sp, #4]
 800d120:	f000 f920 	bl	800d364 <_svfiprintf_r>
 800d124:	2200      	movs	r2, #0
 800d126:	9b02      	ldr	r3, [sp, #8]
 800d128:	701a      	strb	r2, [r3, #0]
 800d12a:	b01c      	add	sp, #112	; 0x70
 800d12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d130:	b003      	add	sp, #12
 800d132:	4770      	bx	lr
 800d134:	20000a28 	.word	0x20000a28
 800d138:	ffff0208 	.word	0xffff0208

0800d13c <memset>:
 800d13c:	4603      	mov	r3, r0
 800d13e:	4402      	add	r2, r0
 800d140:	4293      	cmp	r3, r2
 800d142:	d100      	bne.n	800d146 <memset+0xa>
 800d144:	4770      	bx	lr
 800d146:	f803 1b01 	strb.w	r1, [r3], #1
 800d14a:	e7f9      	b.n	800d140 <memset+0x4>

0800d14c <strcat>:
 800d14c:	4602      	mov	r2, r0
 800d14e:	b510      	push	{r4, lr}
 800d150:	7814      	ldrb	r4, [r2, #0]
 800d152:	4613      	mov	r3, r2
 800d154:	3201      	adds	r2, #1
 800d156:	2c00      	cmp	r4, #0
 800d158:	d1fa      	bne.n	800d150 <strcat+0x4>
 800d15a:	3b01      	subs	r3, #1
 800d15c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d160:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d164:	2a00      	cmp	r2, #0
 800d166:	d1f9      	bne.n	800d15c <strcat+0x10>
 800d168:	bd10      	pop	{r4, pc}

0800d16a <strstr>:
 800d16a:	780a      	ldrb	r2, [r1, #0]
 800d16c:	b570      	push	{r4, r5, r6, lr}
 800d16e:	b96a      	cbnz	r2, 800d18c <strstr+0x22>
 800d170:	bd70      	pop	{r4, r5, r6, pc}
 800d172:	429a      	cmp	r2, r3
 800d174:	d109      	bne.n	800d18a <strstr+0x20>
 800d176:	460c      	mov	r4, r1
 800d178:	4605      	mov	r5, r0
 800d17a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d0f6      	beq.n	800d170 <strstr+0x6>
 800d182:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d186:	429e      	cmp	r6, r3
 800d188:	d0f7      	beq.n	800d17a <strstr+0x10>
 800d18a:	3001      	adds	r0, #1
 800d18c:	7803      	ldrb	r3, [r0, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d1ef      	bne.n	800d172 <strstr+0x8>
 800d192:	4618      	mov	r0, r3
 800d194:	e7ec      	b.n	800d170 <strstr+0x6>
	...

0800d198 <_sbrk_r>:
 800d198:	b538      	push	{r3, r4, r5, lr}
 800d19a:	2300      	movs	r3, #0
 800d19c:	4d05      	ldr	r5, [pc, #20]	; (800d1b4 <_sbrk_r+0x1c>)
 800d19e:	4604      	mov	r4, r0
 800d1a0:	4608      	mov	r0, r1
 800d1a2:	602b      	str	r3, [r5, #0]
 800d1a4:	f7fb ff96 	bl	80090d4 <_sbrk>
 800d1a8:	1c43      	adds	r3, r0, #1
 800d1aa:	d102      	bne.n	800d1b2 <_sbrk_r+0x1a>
 800d1ac:	682b      	ldr	r3, [r5, #0]
 800d1ae:	b103      	cbz	r3, 800d1b2 <_sbrk_r+0x1a>
 800d1b0:	6023      	str	r3, [r4, #0]
 800d1b2:	bd38      	pop	{r3, r4, r5, pc}
 800d1b4:	20001094 	.word	0x20001094

0800d1b8 <__errno>:
 800d1b8:	4b01      	ldr	r3, [pc, #4]	; (800d1c0 <__errno+0x8>)
 800d1ba:	6818      	ldr	r0, [r3, #0]
 800d1bc:	4770      	bx	lr
 800d1be:	bf00      	nop
 800d1c0:	20000a28 	.word	0x20000a28

0800d1c4 <__libc_init_array>:
 800d1c4:	b570      	push	{r4, r5, r6, lr}
 800d1c6:	2600      	movs	r6, #0
 800d1c8:	4d0c      	ldr	r5, [pc, #48]	; (800d1fc <__libc_init_array+0x38>)
 800d1ca:	4c0d      	ldr	r4, [pc, #52]	; (800d200 <__libc_init_array+0x3c>)
 800d1cc:	1b64      	subs	r4, r4, r5
 800d1ce:	10a4      	asrs	r4, r4, #2
 800d1d0:	42a6      	cmp	r6, r4
 800d1d2:	d109      	bne.n	800d1e8 <__libc_init_array+0x24>
 800d1d4:	f000 fbc6 	bl	800d964 <_init>
 800d1d8:	2600      	movs	r6, #0
 800d1da:	4d0a      	ldr	r5, [pc, #40]	; (800d204 <__libc_init_array+0x40>)
 800d1dc:	4c0a      	ldr	r4, [pc, #40]	; (800d208 <__libc_init_array+0x44>)
 800d1de:	1b64      	subs	r4, r4, r5
 800d1e0:	10a4      	asrs	r4, r4, #2
 800d1e2:	42a6      	cmp	r6, r4
 800d1e4:	d105      	bne.n	800d1f2 <__libc_init_array+0x2e>
 800d1e6:	bd70      	pop	{r4, r5, r6, pc}
 800d1e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1ec:	4798      	blx	r3
 800d1ee:	3601      	adds	r6, #1
 800d1f0:	e7ee      	b.n	800d1d0 <__libc_init_array+0xc>
 800d1f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1f6:	4798      	blx	r3
 800d1f8:	3601      	adds	r6, #1
 800d1fa:	e7f2      	b.n	800d1e2 <__libc_init_array+0x1e>
 800d1fc:	0800e8a8 	.word	0x0800e8a8
 800d200:	0800e8a8 	.word	0x0800e8a8
 800d204:	0800e8a8 	.word	0x0800e8a8
 800d208:	0800e8ac 	.word	0x0800e8ac

0800d20c <__retarget_lock_acquire_recursive>:
 800d20c:	4770      	bx	lr

0800d20e <__retarget_lock_release_recursive>:
 800d20e:	4770      	bx	lr

0800d210 <strcpy>:
 800d210:	4603      	mov	r3, r0
 800d212:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d216:	f803 2b01 	strb.w	r2, [r3], #1
 800d21a:	2a00      	cmp	r2, #0
 800d21c:	d1f9      	bne.n	800d212 <strcpy+0x2>
 800d21e:	4770      	bx	lr

0800d220 <_free_r>:
 800d220:	b538      	push	{r3, r4, r5, lr}
 800d222:	4605      	mov	r5, r0
 800d224:	2900      	cmp	r1, #0
 800d226:	d040      	beq.n	800d2aa <_free_r+0x8a>
 800d228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d22c:	1f0c      	subs	r4, r1, #4
 800d22e:	2b00      	cmp	r3, #0
 800d230:	bfb8      	it	lt
 800d232:	18e4      	addlt	r4, r4, r3
 800d234:	f7ff ff14 	bl	800d060 <__malloc_lock>
 800d238:	4a1c      	ldr	r2, [pc, #112]	; (800d2ac <_free_r+0x8c>)
 800d23a:	6813      	ldr	r3, [r2, #0]
 800d23c:	b933      	cbnz	r3, 800d24c <_free_r+0x2c>
 800d23e:	6063      	str	r3, [r4, #4]
 800d240:	6014      	str	r4, [r2, #0]
 800d242:	4628      	mov	r0, r5
 800d244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d248:	f7ff bf10 	b.w	800d06c <__malloc_unlock>
 800d24c:	42a3      	cmp	r3, r4
 800d24e:	d908      	bls.n	800d262 <_free_r+0x42>
 800d250:	6820      	ldr	r0, [r4, #0]
 800d252:	1821      	adds	r1, r4, r0
 800d254:	428b      	cmp	r3, r1
 800d256:	bf01      	itttt	eq
 800d258:	6819      	ldreq	r1, [r3, #0]
 800d25a:	685b      	ldreq	r3, [r3, #4]
 800d25c:	1809      	addeq	r1, r1, r0
 800d25e:	6021      	streq	r1, [r4, #0]
 800d260:	e7ed      	b.n	800d23e <_free_r+0x1e>
 800d262:	461a      	mov	r2, r3
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	b10b      	cbz	r3, 800d26c <_free_r+0x4c>
 800d268:	42a3      	cmp	r3, r4
 800d26a:	d9fa      	bls.n	800d262 <_free_r+0x42>
 800d26c:	6811      	ldr	r1, [r2, #0]
 800d26e:	1850      	adds	r0, r2, r1
 800d270:	42a0      	cmp	r0, r4
 800d272:	d10b      	bne.n	800d28c <_free_r+0x6c>
 800d274:	6820      	ldr	r0, [r4, #0]
 800d276:	4401      	add	r1, r0
 800d278:	1850      	adds	r0, r2, r1
 800d27a:	4283      	cmp	r3, r0
 800d27c:	6011      	str	r1, [r2, #0]
 800d27e:	d1e0      	bne.n	800d242 <_free_r+0x22>
 800d280:	6818      	ldr	r0, [r3, #0]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	4408      	add	r0, r1
 800d286:	6010      	str	r0, [r2, #0]
 800d288:	6053      	str	r3, [r2, #4]
 800d28a:	e7da      	b.n	800d242 <_free_r+0x22>
 800d28c:	d902      	bls.n	800d294 <_free_r+0x74>
 800d28e:	230c      	movs	r3, #12
 800d290:	602b      	str	r3, [r5, #0]
 800d292:	e7d6      	b.n	800d242 <_free_r+0x22>
 800d294:	6820      	ldr	r0, [r4, #0]
 800d296:	1821      	adds	r1, r4, r0
 800d298:	428b      	cmp	r3, r1
 800d29a:	bf01      	itttt	eq
 800d29c:	6819      	ldreq	r1, [r3, #0]
 800d29e:	685b      	ldreq	r3, [r3, #4]
 800d2a0:	1809      	addeq	r1, r1, r0
 800d2a2:	6021      	streq	r1, [r4, #0]
 800d2a4:	6063      	str	r3, [r4, #4]
 800d2a6:	6054      	str	r4, [r2, #4]
 800d2a8:	e7cb      	b.n	800d242 <_free_r+0x22>
 800d2aa:	bd38      	pop	{r3, r4, r5, pc}
 800d2ac:	20000f54 	.word	0x20000f54

0800d2b0 <__ssputs_r>:
 800d2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2b4:	461f      	mov	r7, r3
 800d2b6:	688e      	ldr	r6, [r1, #8]
 800d2b8:	4682      	mov	sl, r0
 800d2ba:	42be      	cmp	r6, r7
 800d2bc:	460c      	mov	r4, r1
 800d2be:	4690      	mov	r8, r2
 800d2c0:	680b      	ldr	r3, [r1, #0]
 800d2c2:	d82c      	bhi.n	800d31e <__ssputs_r+0x6e>
 800d2c4:	898a      	ldrh	r2, [r1, #12]
 800d2c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2ca:	d026      	beq.n	800d31a <__ssputs_r+0x6a>
 800d2cc:	6965      	ldr	r5, [r4, #20]
 800d2ce:	6909      	ldr	r1, [r1, #16]
 800d2d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2d4:	eba3 0901 	sub.w	r9, r3, r1
 800d2d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2dc:	1c7b      	adds	r3, r7, #1
 800d2de:	444b      	add	r3, r9
 800d2e0:	106d      	asrs	r5, r5, #1
 800d2e2:	429d      	cmp	r5, r3
 800d2e4:	bf38      	it	cc
 800d2e6:	461d      	movcc	r5, r3
 800d2e8:	0553      	lsls	r3, r2, #21
 800d2ea:	d527      	bpl.n	800d33c <__ssputs_r+0x8c>
 800d2ec:	4629      	mov	r1, r5
 800d2ee:	f7ff fe37 	bl	800cf60 <_malloc_r>
 800d2f2:	4606      	mov	r6, r0
 800d2f4:	b360      	cbz	r0, 800d350 <__ssputs_r+0xa0>
 800d2f6:	464a      	mov	r2, r9
 800d2f8:	6921      	ldr	r1, [r4, #16]
 800d2fa:	f000 faed 	bl	800d8d8 <memcpy>
 800d2fe:	89a3      	ldrh	r3, [r4, #12]
 800d300:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d308:	81a3      	strh	r3, [r4, #12]
 800d30a:	6126      	str	r6, [r4, #16]
 800d30c:	444e      	add	r6, r9
 800d30e:	6026      	str	r6, [r4, #0]
 800d310:	463e      	mov	r6, r7
 800d312:	6165      	str	r5, [r4, #20]
 800d314:	eba5 0509 	sub.w	r5, r5, r9
 800d318:	60a5      	str	r5, [r4, #8]
 800d31a:	42be      	cmp	r6, r7
 800d31c:	d900      	bls.n	800d320 <__ssputs_r+0x70>
 800d31e:	463e      	mov	r6, r7
 800d320:	4632      	mov	r2, r6
 800d322:	4641      	mov	r1, r8
 800d324:	6820      	ldr	r0, [r4, #0]
 800d326:	f000 faaf 	bl	800d888 <memmove>
 800d32a:	2000      	movs	r0, #0
 800d32c:	68a3      	ldr	r3, [r4, #8]
 800d32e:	1b9b      	subs	r3, r3, r6
 800d330:	60a3      	str	r3, [r4, #8]
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	4433      	add	r3, r6
 800d336:	6023      	str	r3, [r4, #0]
 800d338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d33c:	462a      	mov	r2, r5
 800d33e:	f000 fad9 	bl	800d8f4 <_realloc_r>
 800d342:	4606      	mov	r6, r0
 800d344:	2800      	cmp	r0, #0
 800d346:	d1e0      	bne.n	800d30a <__ssputs_r+0x5a>
 800d348:	4650      	mov	r0, sl
 800d34a:	6921      	ldr	r1, [r4, #16]
 800d34c:	f7ff ff68 	bl	800d220 <_free_r>
 800d350:	230c      	movs	r3, #12
 800d352:	f8ca 3000 	str.w	r3, [sl]
 800d356:	89a3      	ldrh	r3, [r4, #12]
 800d358:	f04f 30ff 	mov.w	r0, #4294967295
 800d35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d360:	81a3      	strh	r3, [r4, #12]
 800d362:	e7e9      	b.n	800d338 <__ssputs_r+0x88>

0800d364 <_svfiprintf_r>:
 800d364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d368:	4698      	mov	r8, r3
 800d36a:	898b      	ldrh	r3, [r1, #12]
 800d36c:	4607      	mov	r7, r0
 800d36e:	061b      	lsls	r3, r3, #24
 800d370:	460d      	mov	r5, r1
 800d372:	4614      	mov	r4, r2
 800d374:	b09d      	sub	sp, #116	; 0x74
 800d376:	d50e      	bpl.n	800d396 <_svfiprintf_r+0x32>
 800d378:	690b      	ldr	r3, [r1, #16]
 800d37a:	b963      	cbnz	r3, 800d396 <_svfiprintf_r+0x32>
 800d37c:	2140      	movs	r1, #64	; 0x40
 800d37e:	f7ff fdef 	bl	800cf60 <_malloc_r>
 800d382:	6028      	str	r0, [r5, #0]
 800d384:	6128      	str	r0, [r5, #16]
 800d386:	b920      	cbnz	r0, 800d392 <_svfiprintf_r+0x2e>
 800d388:	230c      	movs	r3, #12
 800d38a:	603b      	str	r3, [r7, #0]
 800d38c:	f04f 30ff 	mov.w	r0, #4294967295
 800d390:	e0d0      	b.n	800d534 <_svfiprintf_r+0x1d0>
 800d392:	2340      	movs	r3, #64	; 0x40
 800d394:	616b      	str	r3, [r5, #20]
 800d396:	2300      	movs	r3, #0
 800d398:	9309      	str	r3, [sp, #36]	; 0x24
 800d39a:	2320      	movs	r3, #32
 800d39c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3a0:	2330      	movs	r3, #48	; 0x30
 800d3a2:	f04f 0901 	mov.w	r9, #1
 800d3a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3aa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d54c <_svfiprintf_r+0x1e8>
 800d3ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3b2:	4623      	mov	r3, r4
 800d3b4:	469a      	mov	sl, r3
 800d3b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3ba:	b10a      	cbz	r2, 800d3c0 <_svfiprintf_r+0x5c>
 800d3bc:	2a25      	cmp	r2, #37	; 0x25
 800d3be:	d1f9      	bne.n	800d3b4 <_svfiprintf_r+0x50>
 800d3c0:	ebba 0b04 	subs.w	fp, sl, r4
 800d3c4:	d00b      	beq.n	800d3de <_svfiprintf_r+0x7a>
 800d3c6:	465b      	mov	r3, fp
 800d3c8:	4622      	mov	r2, r4
 800d3ca:	4629      	mov	r1, r5
 800d3cc:	4638      	mov	r0, r7
 800d3ce:	f7ff ff6f 	bl	800d2b0 <__ssputs_r>
 800d3d2:	3001      	adds	r0, #1
 800d3d4:	f000 80a9 	beq.w	800d52a <_svfiprintf_r+0x1c6>
 800d3d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3da:	445a      	add	r2, fp
 800d3dc:	9209      	str	r2, [sp, #36]	; 0x24
 800d3de:	f89a 3000 	ldrb.w	r3, [sl]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f000 80a1 	beq.w	800d52a <_svfiprintf_r+0x1c6>
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3f2:	f10a 0a01 	add.w	sl, sl, #1
 800d3f6:	9304      	str	r3, [sp, #16]
 800d3f8:	9307      	str	r3, [sp, #28]
 800d3fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3fe:	931a      	str	r3, [sp, #104]	; 0x68
 800d400:	4654      	mov	r4, sl
 800d402:	2205      	movs	r2, #5
 800d404:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d408:	4850      	ldr	r0, [pc, #320]	; (800d54c <_svfiprintf_r+0x1e8>)
 800d40a:	f000 fa57 	bl	800d8bc <memchr>
 800d40e:	9a04      	ldr	r2, [sp, #16]
 800d410:	b9d8      	cbnz	r0, 800d44a <_svfiprintf_r+0xe6>
 800d412:	06d0      	lsls	r0, r2, #27
 800d414:	bf44      	itt	mi
 800d416:	2320      	movmi	r3, #32
 800d418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d41c:	0711      	lsls	r1, r2, #28
 800d41e:	bf44      	itt	mi
 800d420:	232b      	movmi	r3, #43	; 0x2b
 800d422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d426:	f89a 3000 	ldrb.w	r3, [sl]
 800d42a:	2b2a      	cmp	r3, #42	; 0x2a
 800d42c:	d015      	beq.n	800d45a <_svfiprintf_r+0xf6>
 800d42e:	4654      	mov	r4, sl
 800d430:	2000      	movs	r0, #0
 800d432:	f04f 0c0a 	mov.w	ip, #10
 800d436:	9a07      	ldr	r2, [sp, #28]
 800d438:	4621      	mov	r1, r4
 800d43a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d43e:	3b30      	subs	r3, #48	; 0x30
 800d440:	2b09      	cmp	r3, #9
 800d442:	d94d      	bls.n	800d4e0 <_svfiprintf_r+0x17c>
 800d444:	b1b0      	cbz	r0, 800d474 <_svfiprintf_r+0x110>
 800d446:	9207      	str	r2, [sp, #28]
 800d448:	e014      	b.n	800d474 <_svfiprintf_r+0x110>
 800d44a:	eba0 0308 	sub.w	r3, r0, r8
 800d44e:	fa09 f303 	lsl.w	r3, r9, r3
 800d452:	4313      	orrs	r3, r2
 800d454:	46a2      	mov	sl, r4
 800d456:	9304      	str	r3, [sp, #16]
 800d458:	e7d2      	b.n	800d400 <_svfiprintf_r+0x9c>
 800d45a:	9b03      	ldr	r3, [sp, #12]
 800d45c:	1d19      	adds	r1, r3, #4
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	9103      	str	r1, [sp, #12]
 800d462:	2b00      	cmp	r3, #0
 800d464:	bfbb      	ittet	lt
 800d466:	425b      	neglt	r3, r3
 800d468:	f042 0202 	orrlt.w	r2, r2, #2
 800d46c:	9307      	strge	r3, [sp, #28]
 800d46e:	9307      	strlt	r3, [sp, #28]
 800d470:	bfb8      	it	lt
 800d472:	9204      	strlt	r2, [sp, #16]
 800d474:	7823      	ldrb	r3, [r4, #0]
 800d476:	2b2e      	cmp	r3, #46	; 0x2e
 800d478:	d10c      	bne.n	800d494 <_svfiprintf_r+0x130>
 800d47a:	7863      	ldrb	r3, [r4, #1]
 800d47c:	2b2a      	cmp	r3, #42	; 0x2a
 800d47e:	d134      	bne.n	800d4ea <_svfiprintf_r+0x186>
 800d480:	9b03      	ldr	r3, [sp, #12]
 800d482:	3402      	adds	r4, #2
 800d484:	1d1a      	adds	r2, r3, #4
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	9203      	str	r2, [sp, #12]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	bfb8      	it	lt
 800d48e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d492:	9305      	str	r3, [sp, #20]
 800d494:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d550 <_svfiprintf_r+0x1ec>
 800d498:	2203      	movs	r2, #3
 800d49a:	4650      	mov	r0, sl
 800d49c:	7821      	ldrb	r1, [r4, #0]
 800d49e:	f000 fa0d 	bl	800d8bc <memchr>
 800d4a2:	b138      	cbz	r0, 800d4b4 <_svfiprintf_r+0x150>
 800d4a4:	2240      	movs	r2, #64	; 0x40
 800d4a6:	9b04      	ldr	r3, [sp, #16]
 800d4a8:	eba0 000a 	sub.w	r0, r0, sl
 800d4ac:	4082      	lsls	r2, r0
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	3401      	adds	r4, #1
 800d4b2:	9304      	str	r3, [sp, #16]
 800d4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4b8:	2206      	movs	r2, #6
 800d4ba:	4826      	ldr	r0, [pc, #152]	; (800d554 <_svfiprintf_r+0x1f0>)
 800d4bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4c0:	f000 f9fc 	bl	800d8bc <memchr>
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	d038      	beq.n	800d53a <_svfiprintf_r+0x1d6>
 800d4c8:	4b23      	ldr	r3, [pc, #140]	; (800d558 <_svfiprintf_r+0x1f4>)
 800d4ca:	bb1b      	cbnz	r3, 800d514 <_svfiprintf_r+0x1b0>
 800d4cc:	9b03      	ldr	r3, [sp, #12]
 800d4ce:	3307      	adds	r3, #7
 800d4d0:	f023 0307 	bic.w	r3, r3, #7
 800d4d4:	3308      	adds	r3, #8
 800d4d6:	9303      	str	r3, [sp, #12]
 800d4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4da:	4433      	add	r3, r6
 800d4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d4de:	e768      	b.n	800d3b2 <_svfiprintf_r+0x4e>
 800d4e0:	460c      	mov	r4, r1
 800d4e2:	2001      	movs	r0, #1
 800d4e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4e8:	e7a6      	b.n	800d438 <_svfiprintf_r+0xd4>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	f04f 0c0a 	mov.w	ip, #10
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	3401      	adds	r4, #1
 800d4f4:	9305      	str	r3, [sp, #20]
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4fc:	3a30      	subs	r2, #48	; 0x30
 800d4fe:	2a09      	cmp	r2, #9
 800d500:	d903      	bls.n	800d50a <_svfiprintf_r+0x1a6>
 800d502:	2b00      	cmp	r3, #0
 800d504:	d0c6      	beq.n	800d494 <_svfiprintf_r+0x130>
 800d506:	9105      	str	r1, [sp, #20]
 800d508:	e7c4      	b.n	800d494 <_svfiprintf_r+0x130>
 800d50a:	4604      	mov	r4, r0
 800d50c:	2301      	movs	r3, #1
 800d50e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d512:	e7f0      	b.n	800d4f6 <_svfiprintf_r+0x192>
 800d514:	ab03      	add	r3, sp, #12
 800d516:	9300      	str	r3, [sp, #0]
 800d518:	462a      	mov	r2, r5
 800d51a:	4638      	mov	r0, r7
 800d51c:	4b0f      	ldr	r3, [pc, #60]	; (800d55c <_svfiprintf_r+0x1f8>)
 800d51e:	a904      	add	r1, sp, #16
 800d520:	f3af 8000 	nop.w
 800d524:	1c42      	adds	r2, r0, #1
 800d526:	4606      	mov	r6, r0
 800d528:	d1d6      	bne.n	800d4d8 <_svfiprintf_r+0x174>
 800d52a:	89ab      	ldrh	r3, [r5, #12]
 800d52c:	065b      	lsls	r3, r3, #25
 800d52e:	f53f af2d 	bmi.w	800d38c <_svfiprintf_r+0x28>
 800d532:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d534:	b01d      	add	sp, #116	; 0x74
 800d536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d53a:	ab03      	add	r3, sp, #12
 800d53c:	9300      	str	r3, [sp, #0]
 800d53e:	462a      	mov	r2, r5
 800d540:	4638      	mov	r0, r7
 800d542:	4b06      	ldr	r3, [pc, #24]	; (800d55c <_svfiprintf_r+0x1f8>)
 800d544:	a904      	add	r1, sp, #16
 800d546:	f000 f87d 	bl	800d644 <_printf_i>
 800d54a:	e7eb      	b.n	800d524 <_svfiprintf_r+0x1c0>
 800d54c:	0800e873 	.word	0x0800e873
 800d550:	0800e879 	.word	0x0800e879
 800d554:	0800e87d 	.word	0x0800e87d
 800d558:	00000000 	.word	0x00000000
 800d55c:	0800d2b1 	.word	0x0800d2b1

0800d560 <_printf_common>:
 800d560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d564:	4616      	mov	r6, r2
 800d566:	4699      	mov	r9, r3
 800d568:	688a      	ldr	r2, [r1, #8]
 800d56a:	690b      	ldr	r3, [r1, #16]
 800d56c:	4607      	mov	r7, r0
 800d56e:	4293      	cmp	r3, r2
 800d570:	bfb8      	it	lt
 800d572:	4613      	movlt	r3, r2
 800d574:	6033      	str	r3, [r6, #0]
 800d576:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d57a:	460c      	mov	r4, r1
 800d57c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d580:	b10a      	cbz	r2, 800d586 <_printf_common+0x26>
 800d582:	3301      	adds	r3, #1
 800d584:	6033      	str	r3, [r6, #0]
 800d586:	6823      	ldr	r3, [r4, #0]
 800d588:	0699      	lsls	r1, r3, #26
 800d58a:	bf42      	ittt	mi
 800d58c:	6833      	ldrmi	r3, [r6, #0]
 800d58e:	3302      	addmi	r3, #2
 800d590:	6033      	strmi	r3, [r6, #0]
 800d592:	6825      	ldr	r5, [r4, #0]
 800d594:	f015 0506 	ands.w	r5, r5, #6
 800d598:	d106      	bne.n	800d5a8 <_printf_common+0x48>
 800d59a:	f104 0a19 	add.w	sl, r4, #25
 800d59e:	68e3      	ldr	r3, [r4, #12]
 800d5a0:	6832      	ldr	r2, [r6, #0]
 800d5a2:	1a9b      	subs	r3, r3, r2
 800d5a4:	42ab      	cmp	r3, r5
 800d5a6:	dc2b      	bgt.n	800d600 <_printf_common+0xa0>
 800d5a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5ac:	1e13      	subs	r3, r2, #0
 800d5ae:	6822      	ldr	r2, [r4, #0]
 800d5b0:	bf18      	it	ne
 800d5b2:	2301      	movne	r3, #1
 800d5b4:	0692      	lsls	r2, r2, #26
 800d5b6:	d430      	bmi.n	800d61a <_printf_common+0xba>
 800d5b8:	4649      	mov	r1, r9
 800d5ba:	4638      	mov	r0, r7
 800d5bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5c0:	47c0      	blx	r8
 800d5c2:	3001      	adds	r0, #1
 800d5c4:	d023      	beq.n	800d60e <_printf_common+0xae>
 800d5c6:	6823      	ldr	r3, [r4, #0]
 800d5c8:	6922      	ldr	r2, [r4, #16]
 800d5ca:	f003 0306 	and.w	r3, r3, #6
 800d5ce:	2b04      	cmp	r3, #4
 800d5d0:	bf14      	ite	ne
 800d5d2:	2500      	movne	r5, #0
 800d5d4:	6833      	ldreq	r3, [r6, #0]
 800d5d6:	f04f 0600 	mov.w	r6, #0
 800d5da:	bf08      	it	eq
 800d5dc:	68e5      	ldreq	r5, [r4, #12]
 800d5de:	f104 041a 	add.w	r4, r4, #26
 800d5e2:	bf08      	it	eq
 800d5e4:	1aed      	subeq	r5, r5, r3
 800d5e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d5ea:	bf08      	it	eq
 800d5ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	bfc4      	itt	gt
 800d5f4:	1a9b      	subgt	r3, r3, r2
 800d5f6:	18ed      	addgt	r5, r5, r3
 800d5f8:	42b5      	cmp	r5, r6
 800d5fa:	d11a      	bne.n	800d632 <_printf_common+0xd2>
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	e008      	b.n	800d612 <_printf_common+0xb2>
 800d600:	2301      	movs	r3, #1
 800d602:	4652      	mov	r2, sl
 800d604:	4649      	mov	r1, r9
 800d606:	4638      	mov	r0, r7
 800d608:	47c0      	blx	r8
 800d60a:	3001      	adds	r0, #1
 800d60c:	d103      	bne.n	800d616 <_printf_common+0xb6>
 800d60e:	f04f 30ff 	mov.w	r0, #4294967295
 800d612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d616:	3501      	adds	r5, #1
 800d618:	e7c1      	b.n	800d59e <_printf_common+0x3e>
 800d61a:	2030      	movs	r0, #48	; 0x30
 800d61c:	18e1      	adds	r1, r4, r3
 800d61e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d622:	1c5a      	adds	r2, r3, #1
 800d624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d628:	4422      	add	r2, r4
 800d62a:	3302      	adds	r3, #2
 800d62c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d630:	e7c2      	b.n	800d5b8 <_printf_common+0x58>
 800d632:	2301      	movs	r3, #1
 800d634:	4622      	mov	r2, r4
 800d636:	4649      	mov	r1, r9
 800d638:	4638      	mov	r0, r7
 800d63a:	47c0      	blx	r8
 800d63c:	3001      	adds	r0, #1
 800d63e:	d0e6      	beq.n	800d60e <_printf_common+0xae>
 800d640:	3601      	adds	r6, #1
 800d642:	e7d9      	b.n	800d5f8 <_printf_common+0x98>

0800d644 <_printf_i>:
 800d644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d648:	7e0f      	ldrb	r7, [r1, #24]
 800d64a:	4691      	mov	r9, r2
 800d64c:	2f78      	cmp	r7, #120	; 0x78
 800d64e:	4680      	mov	r8, r0
 800d650:	460c      	mov	r4, r1
 800d652:	469a      	mov	sl, r3
 800d654:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d65a:	d807      	bhi.n	800d66c <_printf_i+0x28>
 800d65c:	2f62      	cmp	r7, #98	; 0x62
 800d65e:	d80a      	bhi.n	800d676 <_printf_i+0x32>
 800d660:	2f00      	cmp	r7, #0
 800d662:	f000 80d5 	beq.w	800d810 <_printf_i+0x1cc>
 800d666:	2f58      	cmp	r7, #88	; 0x58
 800d668:	f000 80c1 	beq.w	800d7ee <_printf_i+0x1aa>
 800d66c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d674:	e03a      	b.n	800d6ec <_printf_i+0xa8>
 800d676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d67a:	2b15      	cmp	r3, #21
 800d67c:	d8f6      	bhi.n	800d66c <_printf_i+0x28>
 800d67e:	a101      	add	r1, pc, #4	; (adr r1, 800d684 <_printf_i+0x40>)
 800d680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d684:	0800d6dd 	.word	0x0800d6dd
 800d688:	0800d6f1 	.word	0x0800d6f1
 800d68c:	0800d66d 	.word	0x0800d66d
 800d690:	0800d66d 	.word	0x0800d66d
 800d694:	0800d66d 	.word	0x0800d66d
 800d698:	0800d66d 	.word	0x0800d66d
 800d69c:	0800d6f1 	.word	0x0800d6f1
 800d6a0:	0800d66d 	.word	0x0800d66d
 800d6a4:	0800d66d 	.word	0x0800d66d
 800d6a8:	0800d66d 	.word	0x0800d66d
 800d6ac:	0800d66d 	.word	0x0800d66d
 800d6b0:	0800d7f7 	.word	0x0800d7f7
 800d6b4:	0800d71d 	.word	0x0800d71d
 800d6b8:	0800d7b1 	.word	0x0800d7b1
 800d6bc:	0800d66d 	.word	0x0800d66d
 800d6c0:	0800d66d 	.word	0x0800d66d
 800d6c4:	0800d819 	.word	0x0800d819
 800d6c8:	0800d66d 	.word	0x0800d66d
 800d6cc:	0800d71d 	.word	0x0800d71d
 800d6d0:	0800d66d 	.word	0x0800d66d
 800d6d4:	0800d66d 	.word	0x0800d66d
 800d6d8:	0800d7b9 	.word	0x0800d7b9
 800d6dc:	682b      	ldr	r3, [r5, #0]
 800d6de:	1d1a      	adds	r2, r3, #4
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	602a      	str	r2, [r5, #0]
 800d6e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e0a0      	b.n	800d832 <_printf_i+0x1ee>
 800d6f0:	6820      	ldr	r0, [r4, #0]
 800d6f2:	682b      	ldr	r3, [r5, #0]
 800d6f4:	0607      	lsls	r7, r0, #24
 800d6f6:	f103 0104 	add.w	r1, r3, #4
 800d6fa:	6029      	str	r1, [r5, #0]
 800d6fc:	d501      	bpl.n	800d702 <_printf_i+0xbe>
 800d6fe:	681e      	ldr	r6, [r3, #0]
 800d700:	e003      	b.n	800d70a <_printf_i+0xc6>
 800d702:	0646      	lsls	r6, r0, #25
 800d704:	d5fb      	bpl.n	800d6fe <_printf_i+0xba>
 800d706:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d70a:	2e00      	cmp	r6, #0
 800d70c:	da03      	bge.n	800d716 <_printf_i+0xd2>
 800d70e:	232d      	movs	r3, #45	; 0x2d
 800d710:	4276      	negs	r6, r6
 800d712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d716:	230a      	movs	r3, #10
 800d718:	4859      	ldr	r0, [pc, #356]	; (800d880 <_printf_i+0x23c>)
 800d71a:	e012      	b.n	800d742 <_printf_i+0xfe>
 800d71c:	682b      	ldr	r3, [r5, #0]
 800d71e:	6820      	ldr	r0, [r4, #0]
 800d720:	1d19      	adds	r1, r3, #4
 800d722:	6029      	str	r1, [r5, #0]
 800d724:	0605      	lsls	r5, r0, #24
 800d726:	d501      	bpl.n	800d72c <_printf_i+0xe8>
 800d728:	681e      	ldr	r6, [r3, #0]
 800d72a:	e002      	b.n	800d732 <_printf_i+0xee>
 800d72c:	0641      	lsls	r1, r0, #25
 800d72e:	d5fb      	bpl.n	800d728 <_printf_i+0xe4>
 800d730:	881e      	ldrh	r6, [r3, #0]
 800d732:	2f6f      	cmp	r7, #111	; 0x6f
 800d734:	bf0c      	ite	eq
 800d736:	2308      	moveq	r3, #8
 800d738:	230a      	movne	r3, #10
 800d73a:	4851      	ldr	r0, [pc, #324]	; (800d880 <_printf_i+0x23c>)
 800d73c:	2100      	movs	r1, #0
 800d73e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d742:	6865      	ldr	r5, [r4, #4]
 800d744:	2d00      	cmp	r5, #0
 800d746:	bfa8      	it	ge
 800d748:	6821      	ldrge	r1, [r4, #0]
 800d74a:	60a5      	str	r5, [r4, #8]
 800d74c:	bfa4      	itt	ge
 800d74e:	f021 0104 	bicge.w	r1, r1, #4
 800d752:	6021      	strge	r1, [r4, #0]
 800d754:	b90e      	cbnz	r6, 800d75a <_printf_i+0x116>
 800d756:	2d00      	cmp	r5, #0
 800d758:	d04b      	beq.n	800d7f2 <_printf_i+0x1ae>
 800d75a:	4615      	mov	r5, r2
 800d75c:	fbb6 f1f3 	udiv	r1, r6, r3
 800d760:	fb03 6711 	mls	r7, r3, r1, r6
 800d764:	5dc7      	ldrb	r7, [r0, r7]
 800d766:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d76a:	4637      	mov	r7, r6
 800d76c:	42bb      	cmp	r3, r7
 800d76e:	460e      	mov	r6, r1
 800d770:	d9f4      	bls.n	800d75c <_printf_i+0x118>
 800d772:	2b08      	cmp	r3, #8
 800d774:	d10b      	bne.n	800d78e <_printf_i+0x14a>
 800d776:	6823      	ldr	r3, [r4, #0]
 800d778:	07de      	lsls	r6, r3, #31
 800d77a:	d508      	bpl.n	800d78e <_printf_i+0x14a>
 800d77c:	6923      	ldr	r3, [r4, #16]
 800d77e:	6861      	ldr	r1, [r4, #4]
 800d780:	4299      	cmp	r1, r3
 800d782:	bfde      	ittt	le
 800d784:	2330      	movle	r3, #48	; 0x30
 800d786:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d78a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d78e:	1b52      	subs	r2, r2, r5
 800d790:	6122      	str	r2, [r4, #16]
 800d792:	464b      	mov	r3, r9
 800d794:	4621      	mov	r1, r4
 800d796:	4640      	mov	r0, r8
 800d798:	f8cd a000 	str.w	sl, [sp]
 800d79c:	aa03      	add	r2, sp, #12
 800d79e:	f7ff fedf 	bl	800d560 <_printf_common>
 800d7a2:	3001      	adds	r0, #1
 800d7a4:	d14a      	bne.n	800d83c <_printf_i+0x1f8>
 800d7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7aa:	b004      	add	sp, #16
 800d7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7b0:	6823      	ldr	r3, [r4, #0]
 800d7b2:	f043 0320 	orr.w	r3, r3, #32
 800d7b6:	6023      	str	r3, [r4, #0]
 800d7b8:	2778      	movs	r7, #120	; 0x78
 800d7ba:	4832      	ldr	r0, [pc, #200]	; (800d884 <_printf_i+0x240>)
 800d7bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d7c0:	6823      	ldr	r3, [r4, #0]
 800d7c2:	6829      	ldr	r1, [r5, #0]
 800d7c4:	061f      	lsls	r7, r3, #24
 800d7c6:	f851 6b04 	ldr.w	r6, [r1], #4
 800d7ca:	d402      	bmi.n	800d7d2 <_printf_i+0x18e>
 800d7cc:	065f      	lsls	r7, r3, #25
 800d7ce:	bf48      	it	mi
 800d7d0:	b2b6      	uxthmi	r6, r6
 800d7d2:	07df      	lsls	r7, r3, #31
 800d7d4:	bf48      	it	mi
 800d7d6:	f043 0320 	orrmi.w	r3, r3, #32
 800d7da:	6029      	str	r1, [r5, #0]
 800d7dc:	bf48      	it	mi
 800d7de:	6023      	strmi	r3, [r4, #0]
 800d7e0:	b91e      	cbnz	r6, 800d7ea <_printf_i+0x1a6>
 800d7e2:	6823      	ldr	r3, [r4, #0]
 800d7e4:	f023 0320 	bic.w	r3, r3, #32
 800d7e8:	6023      	str	r3, [r4, #0]
 800d7ea:	2310      	movs	r3, #16
 800d7ec:	e7a6      	b.n	800d73c <_printf_i+0xf8>
 800d7ee:	4824      	ldr	r0, [pc, #144]	; (800d880 <_printf_i+0x23c>)
 800d7f0:	e7e4      	b.n	800d7bc <_printf_i+0x178>
 800d7f2:	4615      	mov	r5, r2
 800d7f4:	e7bd      	b.n	800d772 <_printf_i+0x12e>
 800d7f6:	682b      	ldr	r3, [r5, #0]
 800d7f8:	6826      	ldr	r6, [r4, #0]
 800d7fa:	1d18      	adds	r0, r3, #4
 800d7fc:	6961      	ldr	r1, [r4, #20]
 800d7fe:	6028      	str	r0, [r5, #0]
 800d800:	0635      	lsls	r5, r6, #24
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	d501      	bpl.n	800d80a <_printf_i+0x1c6>
 800d806:	6019      	str	r1, [r3, #0]
 800d808:	e002      	b.n	800d810 <_printf_i+0x1cc>
 800d80a:	0670      	lsls	r0, r6, #25
 800d80c:	d5fb      	bpl.n	800d806 <_printf_i+0x1c2>
 800d80e:	8019      	strh	r1, [r3, #0]
 800d810:	2300      	movs	r3, #0
 800d812:	4615      	mov	r5, r2
 800d814:	6123      	str	r3, [r4, #16]
 800d816:	e7bc      	b.n	800d792 <_printf_i+0x14e>
 800d818:	682b      	ldr	r3, [r5, #0]
 800d81a:	2100      	movs	r1, #0
 800d81c:	1d1a      	adds	r2, r3, #4
 800d81e:	602a      	str	r2, [r5, #0]
 800d820:	681d      	ldr	r5, [r3, #0]
 800d822:	6862      	ldr	r2, [r4, #4]
 800d824:	4628      	mov	r0, r5
 800d826:	f000 f849 	bl	800d8bc <memchr>
 800d82a:	b108      	cbz	r0, 800d830 <_printf_i+0x1ec>
 800d82c:	1b40      	subs	r0, r0, r5
 800d82e:	6060      	str	r0, [r4, #4]
 800d830:	6863      	ldr	r3, [r4, #4]
 800d832:	6123      	str	r3, [r4, #16]
 800d834:	2300      	movs	r3, #0
 800d836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d83a:	e7aa      	b.n	800d792 <_printf_i+0x14e>
 800d83c:	462a      	mov	r2, r5
 800d83e:	4649      	mov	r1, r9
 800d840:	4640      	mov	r0, r8
 800d842:	6923      	ldr	r3, [r4, #16]
 800d844:	47d0      	blx	sl
 800d846:	3001      	adds	r0, #1
 800d848:	d0ad      	beq.n	800d7a6 <_printf_i+0x162>
 800d84a:	6823      	ldr	r3, [r4, #0]
 800d84c:	079b      	lsls	r3, r3, #30
 800d84e:	d413      	bmi.n	800d878 <_printf_i+0x234>
 800d850:	68e0      	ldr	r0, [r4, #12]
 800d852:	9b03      	ldr	r3, [sp, #12]
 800d854:	4298      	cmp	r0, r3
 800d856:	bfb8      	it	lt
 800d858:	4618      	movlt	r0, r3
 800d85a:	e7a6      	b.n	800d7aa <_printf_i+0x166>
 800d85c:	2301      	movs	r3, #1
 800d85e:	4632      	mov	r2, r6
 800d860:	4649      	mov	r1, r9
 800d862:	4640      	mov	r0, r8
 800d864:	47d0      	blx	sl
 800d866:	3001      	adds	r0, #1
 800d868:	d09d      	beq.n	800d7a6 <_printf_i+0x162>
 800d86a:	3501      	adds	r5, #1
 800d86c:	68e3      	ldr	r3, [r4, #12]
 800d86e:	9903      	ldr	r1, [sp, #12]
 800d870:	1a5b      	subs	r3, r3, r1
 800d872:	42ab      	cmp	r3, r5
 800d874:	dcf2      	bgt.n	800d85c <_printf_i+0x218>
 800d876:	e7eb      	b.n	800d850 <_printf_i+0x20c>
 800d878:	2500      	movs	r5, #0
 800d87a:	f104 0619 	add.w	r6, r4, #25
 800d87e:	e7f5      	b.n	800d86c <_printf_i+0x228>
 800d880:	0800e884 	.word	0x0800e884
 800d884:	0800e895 	.word	0x0800e895

0800d888 <memmove>:
 800d888:	4288      	cmp	r0, r1
 800d88a:	b510      	push	{r4, lr}
 800d88c:	eb01 0402 	add.w	r4, r1, r2
 800d890:	d902      	bls.n	800d898 <memmove+0x10>
 800d892:	4284      	cmp	r4, r0
 800d894:	4623      	mov	r3, r4
 800d896:	d807      	bhi.n	800d8a8 <memmove+0x20>
 800d898:	1e43      	subs	r3, r0, #1
 800d89a:	42a1      	cmp	r1, r4
 800d89c:	d008      	beq.n	800d8b0 <memmove+0x28>
 800d89e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8a6:	e7f8      	b.n	800d89a <memmove+0x12>
 800d8a8:	4601      	mov	r1, r0
 800d8aa:	4402      	add	r2, r0
 800d8ac:	428a      	cmp	r2, r1
 800d8ae:	d100      	bne.n	800d8b2 <memmove+0x2a>
 800d8b0:	bd10      	pop	{r4, pc}
 800d8b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8ba:	e7f7      	b.n	800d8ac <memmove+0x24>

0800d8bc <memchr>:
 800d8bc:	4603      	mov	r3, r0
 800d8be:	b510      	push	{r4, lr}
 800d8c0:	b2c9      	uxtb	r1, r1
 800d8c2:	4402      	add	r2, r0
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	d101      	bne.n	800d8ce <memchr+0x12>
 800d8ca:	2000      	movs	r0, #0
 800d8cc:	e003      	b.n	800d8d6 <memchr+0x1a>
 800d8ce:	7804      	ldrb	r4, [r0, #0]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	428c      	cmp	r4, r1
 800d8d4:	d1f6      	bne.n	800d8c4 <memchr+0x8>
 800d8d6:	bd10      	pop	{r4, pc}

0800d8d8 <memcpy>:
 800d8d8:	440a      	add	r2, r1
 800d8da:	4291      	cmp	r1, r2
 800d8dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8e0:	d100      	bne.n	800d8e4 <memcpy+0xc>
 800d8e2:	4770      	bx	lr
 800d8e4:	b510      	push	{r4, lr}
 800d8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8ea:	4291      	cmp	r1, r2
 800d8ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8f0:	d1f9      	bne.n	800d8e6 <memcpy+0xe>
 800d8f2:	bd10      	pop	{r4, pc}

0800d8f4 <_realloc_r>:
 800d8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f8:	4680      	mov	r8, r0
 800d8fa:	4614      	mov	r4, r2
 800d8fc:	460e      	mov	r6, r1
 800d8fe:	b921      	cbnz	r1, 800d90a <_realloc_r+0x16>
 800d900:	4611      	mov	r1, r2
 800d902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d906:	f7ff bb2b 	b.w	800cf60 <_malloc_r>
 800d90a:	b92a      	cbnz	r2, 800d918 <_realloc_r+0x24>
 800d90c:	f7ff fc88 	bl	800d220 <_free_r>
 800d910:	4625      	mov	r5, r4
 800d912:	4628      	mov	r0, r5
 800d914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d918:	f000 f81b 	bl	800d952 <_malloc_usable_size_r>
 800d91c:	4284      	cmp	r4, r0
 800d91e:	4607      	mov	r7, r0
 800d920:	d802      	bhi.n	800d928 <_realloc_r+0x34>
 800d922:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d926:	d812      	bhi.n	800d94e <_realloc_r+0x5a>
 800d928:	4621      	mov	r1, r4
 800d92a:	4640      	mov	r0, r8
 800d92c:	f7ff fb18 	bl	800cf60 <_malloc_r>
 800d930:	4605      	mov	r5, r0
 800d932:	2800      	cmp	r0, #0
 800d934:	d0ed      	beq.n	800d912 <_realloc_r+0x1e>
 800d936:	42bc      	cmp	r4, r7
 800d938:	4622      	mov	r2, r4
 800d93a:	4631      	mov	r1, r6
 800d93c:	bf28      	it	cs
 800d93e:	463a      	movcs	r2, r7
 800d940:	f7ff ffca 	bl	800d8d8 <memcpy>
 800d944:	4631      	mov	r1, r6
 800d946:	4640      	mov	r0, r8
 800d948:	f7ff fc6a 	bl	800d220 <_free_r>
 800d94c:	e7e1      	b.n	800d912 <_realloc_r+0x1e>
 800d94e:	4635      	mov	r5, r6
 800d950:	e7df      	b.n	800d912 <_realloc_r+0x1e>

0800d952 <_malloc_usable_size_r>:
 800d952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d956:	1f18      	subs	r0, r3, #4
 800d958:	2b00      	cmp	r3, #0
 800d95a:	bfbc      	itt	lt
 800d95c:	580b      	ldrlt	r3, [r1, r0]
 800d95e:	18c0      	addlt	r0, r0, r3
 800d960:	4770      	bx	lr
	...

0800d964 <_init>:
 800d964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d966:	bf00      	nop
 800d968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d96a:	bc08      	pop	{r3}
 800d96c:	469e      	mov	lr, r3
 800d96e:	4770      	bx	lr

0800d970 <_fini>:
 800d970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d972:	bf00      	nop
 800d974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d976:	bc08      	pop	{r3}
 800d978:	469e      	mov	lr, r3
 800d97a:	4770      	bx	lr
