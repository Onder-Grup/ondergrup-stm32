
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc2c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0800ce10  0800ce10  0001ce10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddec  0800ddec  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ddec  0800ddec  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ddec  0800ddec  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddec  0800ddec  0001ddec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddf0  0800ddf0  0001ddf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800ddf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  2000010c  0800df00  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800df00  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001668d  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034da  00000000  00000000  00036805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  00039ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e61  00000000  00000000  0003af70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003bdd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0df  00000000  00000000  00058476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee78  00000000  00000000  00074555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052b4  00000000  00000000  001133d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000010c 	.word	0x2000010c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cdf8 	.word	0x0800cdf8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000110 	.word	0x20000110
 8000220:	0800cdf8 	.word	0x0800cdf8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fc10 	bl	8009a74 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fa88 	bl	800876c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000128 	.word	0x20000128
 80004bc:	200002b4 	.word	0x200002b4
 80004c0:	200001fd 	.word	0x200001fd
 80004c4:	20000225 	.word	0x20000225
 80004c8:	20000228 	.word	0x20000228
 80004cc:	20000229 	.word	0x20000229
 80004d0:	2000022a 	.word	0x2000022a
 80004d4:	2000022b 	.word	0x2000022b
 80004d8:	2000022c 	.word	0x2000022c
 80004dc:	2000022d 	.word	0x2000022d
 80004e0:	2000023d 	.word	0x2000023d
 80004e4:	2000022e 	.word	0x2000022e
 80004e8:	2000023e 	.word	0x2000023e
 80004ec:	2000022f 	.word	0x2000022f
 80004f0:	2000023f 	.word	0x2000023f
 80004f4:	20000232 	.word	0x20000232
 80004f8:	20000233 	.word	0x20000233
 80004fc:	20000234 	.word	0x20000234
 8000500:	20000235 	.word	0x20000235
 8000504:	20000236 	.word	0x20000236
 8000508:	20000237 	.word	0x20000237
 800050c:	20000238 	.word	0x20000238
 8000510:	20000239 	.word	0x20000239
 8000514:	2000023a 	.word	0x2000023a
 8000518:	2000023b 	.word	0x2000023b
 800051c:	2000023c 	.word	0x2000023c
 8000520:	20000240 	.word	0x20000240
 8000524:	20000242 	.word	0x20000242
 8000528:	20000220 	.word	0x20000220
 800052c:	20000221 	.word	0x20000221
 8000530:	20000222 	.word	0x20000222
 8000534:	20000008 	.word	0x20000008
 8000538:	20000009 	.word	0x20000009
 800053c:	20000223 	.word	0x20000223
 8000540:	20000245 	.word	0x20000245
 8000544:	20000243 	.word	0x20000243
 8000548:	20000231 	.word	0x20000231
 800054c:	20000244 	.word	0x20000244
 8000550:	20000230 	.word	0x20000230
 8000554:	20000246 	.word	0x20000246
 8000558:	20000247 	.word	0x20000247
 800055c:	20000248 	.word	0x20000248
 8000560:	20000249 	.word	0x20000249
 8000564:	2000024a 	.word	0x2000024a
 8000568:	2000024b 	.word	0x2000024b
 800056c:	2000024c 	.word	0x2000024c
 8000570:	2000024d 	.word	0x2000024d
 8000574:	2000024e 	.word	0x2000024e
 8000578:	2000024f 	.word	0x2000024f
 800057c:	200001fc 	.word	0x200001fc
	}

	if(kapi1AcSure>5) {
 8000580:	4b6d      	ldr	r3, [pc, #436]	; (8000738 <eepromKontrol+0x504>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b6b      	ldr	r3, [pc, #428]	; (8000738 <eepromKontrol+0x504>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b6b      	ldr	r3, [pc, #428]	; (800073c <eepromKontrol+0x508>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b69      	ldr	r3, [pc, #420]	; (800073c <eepromKontrol+0x508>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b68      	ldr	r3, [pc, #416]	; (8000740 <eepromKontrol+0x50c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b66      	ldr	r3, [pc, #408]	; (8000740 <eepromKontrol+0x50c>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b66      	ldr	r3, [pc, #408]	; (8000744 <eepromKontrol+0x510>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b64      	ldr	r3, [pc, #400]	; (8000744 <eepromKontrol+0x510>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b63      	ldr	r3, [pc, #396]	; (8000748 <eepromKontrol+0x514>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b61      	ldr	r3, [pc, #388]	; (8000748 <eepromKontrol+0x514>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b61      	ldr	r3, [pc, #388]	; (800074c <eepromKontrol+0x518>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b5f      	ldr	r3, [pc, #380]	; (800074c <eepromKontrol+0x518>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b5e      	ldr	r3, [pc, #376]	; (8000750 <eepromKontrol+0x51c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b5c      	ldr	r3, [pc, #368]	; (8000750 <eepromKontrol+0x51c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b5c      	ldr	r3, [pc, #368]	; (8000754 <eepromKontrol+0x520>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b5a      	ldr	r3, [pc, #360]	; (8000754 <eepromKontrol+0x520>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b59      	ldr	r3, [pc, #356]	; (8000758 <eepromKontrol+0x524>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b57      	ldr	r3, [pc, #348]	; (8000758 <eepromKontrol+0x524>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b57      	ldr	r3, [pc, #348]	; (800075c <eepromKontrol+0x528>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b55      	ldr	r3, [pc, #340]	; (800075c <eepromKontrol+0x528>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b54      	ldr	r3, [pc, #336]	; (8000760 <eepromKontrol+0x52c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b52      	ldr	r3, [pc, #328]	; (8000760 <eepromKontrol+0x52c>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b52      	ldr	r3, [pc, #328]	; (8000764 <eepromKontrol+0x530>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b50      	ldr	r3, [pc, #320]	; (8000764 <eepromKontrol+0x530>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <eepromKontrol+0x534>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b4d      	ldr	r3, [pc, #308]	; (8000768 <eepromKontrol+0x534>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b4d      	ldr	r3, [pc, #308]	; (800076c <eepromKontrol+0x538>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b4b      	ldr	r3, [pc, #300]	; (800076c <eepromKontrol+0x538>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <eepromKontrol+0x53c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b48      	ldr	r3, [pc, #288]	; (8000770 <eepromKontrol+0x53c>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b48      	ldr	r3, [pc, #288]	; (8000774 <eepromKontrol+0x540>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b46      	ldr	r3, [pc, #280]	; (8000774 <eepromKontrol+0x540>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b45      	ldr	r3, [pc, #276]	; (8000778 <eepromKontrol+0x544>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b43      	ldr	r3, [pc, #268]	; (8000778 <eepromKontrol+0x544>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b43      	ldr	r3, [pc, #268]	; (800077c <eepromKontrol+0x548>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b41      	ldr	r3, [pc, #260]	; (800077c <eepromKontrol+0x548>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b40      	ldr	r3, [pc, #256]	; (8000780 <eepromKontrol+0x54c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b3e      	ldr	r3, [pc, #248]	; (8000780 <eepromKontrol+0x54c>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <eepromKontrol+0x550>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b3c      	ldr	r3, [pc, #240]	; (8000784 <eepromKontrol+0x550>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b3b      	ldr	r3, [pc, #236]	; (8000788 <eepromKontrol+0x554>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <eepromKontrol+0x554>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b39      	ldr	r3, [pc, #228]	; (800078c <eepromKontrol+0x558>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b37      	ldr	r3, [pc, #220]	; (800078c <eepromKontrol+0x558>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], machineIDCharacterLimit);
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <eepromKontrol+0x55c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a36      	ldr	r2, [pc, #216]	; (8000794 <eepromKontrol+0x560>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <eepromKontrol+0x564>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	HAL_Delay(500);
 80006ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ce:	f008 f84d 	bl	800876c <HAL_Delay>
	memcpy(wifiSSIDInt, &eepromData[ssidStartPos], wifiCharacterLimit);
 80006d2:	4b32      	ldr	r3, [pc, #200]	; (800079c <eepromKontrol+0x568>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a2f      	ldr	r2, [pc, #188]	; (8000794 <eepromKontrol+0x560>)
 80006d8:	441a      	add	r2, r3
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <eepromKontrol+0x56c>)
 80006dc:	6811      	ldr	r1, [r2, #0]
 80006de:	6855      	ldr	r5, [r2, #4]
 80006e0:	6894      	ldr	r4, [r2, #8]
 80006e2:	68d0      	ldr	r0, [r2, #12]
 80006e4:	6019      	str	r1, [r3, #0]
 80006e6:	605d      	str	r5, [r3, #4]
 80006e8:	609c      	str	r4, [r3, #8]
 80006ea:	60d8      	str	r0, [r3, #12]
 80006ec:	6911      	ldr	r1, [r2, #16]
 80006ee:	6119      	str	r1, [r3, #16]
	HAL_Delay(500);
 80006f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f4:	f008 f83a 	bl	800876c <HAL_Delay>
	memcpy(wifiPassInt, &eepromData[passStartPos], wifiCharacterLimit);
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <eepromKontrol+0x570>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a25      	ldr	r2, [pc, #148]	; (8000794 <eepromKontrol+0x560>)
 80006fe:	441a      	add	r2, r3
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <eepromKontrol+0x574>)
 8000702:	6811      	ldr	r1, [r2, #0]
 8000704:	6855      	ldr	r5, [r2, #4]
 8000706:	6894      	ldr	r4, [r2, #8]
 8000708:	68d0      	ldr	r0, [r2, #12]
 800070a:	6019      	str	r1, [r3, #0]
 800070c:	605d      	str	r5, [r3, #4]
 800070e:	609c      	str	r4, [r3, #8]
 8000710:	60d8      	str	r0, [r3, #12]
 8000712:	6911      	ldr	r1, [r2, #16]
 8000714:	6119      	str	r1, [r3, #16]
	HAL_Delay(500);
 8000716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071a:	f008 f827 	bl	800876c <HAL_Delay>
	readFromEEPROM(1);
 800071e:	2001      	movs	r0, #1
 8000720:	f000 f854 	bl	80007cc <readFromEEPROM>
	HAL_Delay(200);
 8000724:	20c8      	movs	r0, #200	; 0xc8
 8000726:	f008 f821 	bl	800876c <HAL_Delay>
	readFromEEPROM(2);
 800072a:	2002      	movs	r0, #2
 800072c:	f000 f84e 	bl	80007cc <readFromEEPROM>
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bdb0      	pop	{r4, r5, r7, pc}
 8000736:	bf00      	nop
 8000738:	2000023d 	.word	0x2000023d
 800073c:	2000022e 	.word	0x2000022e
 8000740:	2000023e 	.word	0x2000023e
 8000744:	2000022f 	.word	0x2000022f
 8000748:	20000231 	.word	0x20000231
 800074c:	2000023f 	.word	0x2000023f
 8000750:	20000232 	.word	0x20000232
 8000754:	20000233 	.word	0x20000233
 8000758:	20000234 	.word	0x20000234
 800075c:	20000235 	.word	0x20000235
 8000760:	20000236 	.word	0x20000236
 8000764:	20000237 	.word	0x20000237
 8000768:	20000238 	.word	0x20000238
 800076c:	20000239 	.word	0x20000239
 8000770:	2000023a 	.word	0x2000023a
 8000774:	2000023b 	.word	0x2000023b
 8000778:	2000023c 	.word	0x2000023c
 800077c:	20000240 	.word	0x20000240
 8000780:	20000242 	.word	0x20000242
 8000784:	20000244 	.word	0x20000244
 8000788:	20000245 	.word	0x20000245
 800078c:	20000243 	.word	0x20000243
 8000790:	2000000c 	.word	0x2000000c
 8000794:	20000128 	.word	0x20000128
 8000798:	200001a0 	.word	0x200001a0
 800079c:	20000010 	.word	0x20000010
 80007a0:	200001d4 	.word	0x200001d4
 80007a4:	20000014 	.word	0x20000014
 80007a8:	200001e8 	.word	0x200001e8

080007ac <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <getCharFromCursorPosition+0x1c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	2000002c 	.word	0x2000002c

080007cc <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d117      	bne.n	800080a <readFromEEPROM+0x3e>
		//Wifi SSID Okuma
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	e010      	b.n	8000802 <readFromEEPROM+0x36>
			wifiSSID[i] = getCharFromCursorPosition(wifiSSIDInt[i]);
 80007e0:	4a17      	ldr	r2, [pc, #92]	; (8000840 <readFromEEPROM+0x74>)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ffdf 	bl	80007ac <getCharFromCursorPosition>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4619      	mov	r1, r3
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <readFromEEPROM+0x78>)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	460a      	mov	r2, r1
 80007fa:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	3301      	adds	r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2b13      	cmp	r3, #19
 8000806:	ddeb      	ble.n	80007e0 <readFromEEPROM+0x14>
		//Wifi Pass Okuma
		for(int i=0; i<wifiCharacterLimit; i++) {
			wifiPass[i] = getCharFromCursorPosition(wifiPassInt[i]);
		}
	}
}
 8000808:	e016      	b.n	8000838 <readFromEEPROM+0x6c>
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	e010      	b.n	8000832 <readFromEEPROM+0x66>
			wifiPass[i] = getCharFromCursorPosition(wifiPassInt[i]);
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <readFromEEPROM+0x7c>)
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	4413      	add	r3, r2
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ffc7 	bl	80007ac <getCharFromCursorPosition>
 800081e:	4603      	mov	r3, r0
 8000820:	4619      	mov	r1, r3
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <readFromEEPROM+0x80>)
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4413      	add	r3, r2
 8000828:	460a      	mov	r2, r1
 800082a:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	3301      	adds	r3, #1
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	2b13      	cmp	r3, #19
 8000836:	ddeb      	ble.n	8000810 <readFromEEPROM+0x44>
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200001d4 	.word	0x200001d4
 8000844:	200001ac 	.word	0x200001ac
 8000848:	200001e8 	.word	0x200001e8
 800084c:	200001c0 	.word	0x200001c0

08000850 <sendATCommand>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void sendATCommand(UART_HandleTypeDef *huart1, const char *cmd, uint16_t delayAfter) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	4613      	mov	r3, r2
 800085c:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(huart1, (uint8_t*)cmd, strlen(cmd));
 800085e:	68b8      	ldr	r0, [r7, #8]
 8000860:	f7ff fce0 	bl	8000224 <strlen>
 8000864:	4603      	mov	r3, r0
 8000866:	b29b      	uxth	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	68b9      	ldr	r1, [r7, #8]
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f00b f849 	bl	800b904 <HAL_UART_Transmit_IT>
    HAL_Delay(delayAfter);
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	4618      	mov	r0, r3
 8000876:	f007 ff79 	bl	800876c <HAL_Delay>
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <ESP8266_Init>:

void ESP8266_Init(UART_HandleTypeDef *huart, const char *wifiSS, const char *wifiPA) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b0a0      	sub	sp, #128	; 0x80
 8000888:	af02      	add	r7, sp, #8
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
    sendATCommand(huart, "AT+RESTORE\r\n", 1000);
 8000890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000894:	4915      	ldr	r1, [pc, #84]	; (80008ec <ESP8266_Init+0x68>)
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f7ff ffda 	bl	8000850 <sendATCommand>
    sendATCommand(huart, "AT+RST\r\n", 1000);
 800089c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008a0:	4913      	ldr	r1, [pc, #76]	; (80008f0 <ESP8266_Init+0x6c>)
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f7ff ffd4 	bl	8000850 <sendATCommand>
    sendATCommand(huart, "AT\r\n", 2000);
 80008a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008ac:	4911      	ldr	r1, [pc, #68]	; (80008f4 <ESP8266_Init+0x70>)
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f7ff ffce 	bl	8000850 <sendATCommand>
    sendATCommand(huart, "AT+CWMODE=1\r\n", 2000);
 80008b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008b8:	490f      	ldr	r1, [pc, #60]	; (80008f8 <ESP8266_Init+0x74>)
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f7ff ffc8 	bl	8000850 <sendATCommand>

    char cmd[100];
    snprintf(cmd, sizeof(cmd), "AT+CWJAP_DEF=\"%s\",\"%s\"\r\n", wifiSS, wifiPA);
 80008c0:	f107 0014 	add.w	r0, r7, #20
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <ESP8266_Init+0x78>)
 80008cc:	2164      	movs	r1, #100	; 0x64
 80008ce:	f00b fdf3 	bl	800c4b8 <sniprintf>
    sendATCommand(huart, cmd, 2000);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008da:	4619      	mov	r1, r3
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f7ff ffb7 	bl	8000850 <sendATCommand>
}
 80008e2:	bf00      	nop
 80008e4:	3778      	adds	r7, #120	; 0x78
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	0800ce10 	.word	0x0800ce10
 80008f0:	0800ce20 	.word	0x0800ce20
 80008f4:	0800ce2c 	.word	0x0800ce2c
 80008f8:	0800ce34 	.word	0x0800ce34
 80008fc:	0800ce44 	.word	0x0800ce44

08000900 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *machineData) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b0c6      	sub	sp, #280	; 0x118
 8000904:	af02      	add	r7, sp, #8
 8000906:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800090a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800090e:	6018      	str	r0, [r3, #0]
 8000910:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000918:	6019      	str	r1, [r3, #0]
 800091a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800091e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000922:	601a      	str	r2, [r3, #0]
    char cmd[200];
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000924:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <sendMachineData+0xb8>)
 800092a:	4a24      	ldr	r2, [pc, #144]	; (80009bc <sendMachineData+0xbc>)
 800092c:	21c8      	movs	r1, #200	; 0xc8
 800092e:	f00b fdc3 	bl	800c4b8 <sniprintf>
    sendATCommand(huart, cmd, 4000);
 8000932:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000936:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800093a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800093e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	f7ff ff84 	bl	8000850 <sendATCommand>

    int len = snprintf(cmd, sizeof(cmd),
 8000948:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800094c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000950:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000954:	4a1a      	ldr	r2, [pc, #104]	; (80009c0 <sendMachineData+0xc0>)
 8000956:	9201      	str	r2, [sp, #4]
 8000958:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800095c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000960:	6812      	ldr	r2, [r2, #0]
 8000962:	9200      	str	r2, [sp, #0]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <sendMachineData+0xc4>)
 8000968:	21c8      	movs	r1, #200	; 0xc8
 800096a:	f00b fda5 	bl	800c4b8 <sniprintf>
 800096e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        "GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
        machineID, machineData, mainServerWithPort);

    char lenCmd[50];
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 8000972:	f107 0010 	add.w	r0, r7, #16
 8000976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800097a:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <sendMachineData+0xc8>)
 800097c:	2132      	movs	r1, #50	; 0x32
 800097e:	f00b fd9b 	bl	800c4b8 <sniprintf>
    sendATCommand(huart, lenCmd, 4000);
 8000982:	f107 0110 	add.w	r1, r7, #16
 8000986:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800098a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800098e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	f7ff ff5c 	bl	8000850 <sendATCommand>
    sendATCommand(huart, cmd, 4000);
 8000998:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800099c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009a4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	f7ff ff51 	bl	8000850 <sendATCommand>
}
 80009ae:	bf00      	nop
 80009b0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	0800ce60 	.word	0x0800ce60
 80009bc:	0800ce70 	.word	0x0800ce70
 80009c0:	0800ceec 	.word	0x0800ceec
 80009c4:	0800ce90 	.word	0x0800ce90
 80009c8:	0800cf00 	.word	0x0800cf00

080009cc <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b089      	sub	sp, #36	; 0x24
 80009d0:	af04      	add	r7, sp, #16
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <hata2EEPROM+0xa4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	1e5a      	subs	r2, r3, #1
 80009dc:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <hata2EEPROM+0xa8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a25      	ldr	r2, [pc, #148]	; (8000a78 <hata2EEPROM+0xac>)
 80009e4:	5cd3      	ldrb	r3, [r2, r3]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80009ea:	f000 f92b 	bl	8000c44 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80009ee:	e000      	b.n	80009f2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80009f0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	e012      	b.n	8000a1e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <hata2EEPROM+0xa8>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <hata2EEPROM+0xac>)
 8000a02:	5cd3      	ldrb	r3, [r2, r3]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d107      	bne.n	8000a18 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <hata2EEPROM+0xa8>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4919      	ldr	r1, [pc, #100]	; (8000a78 <hata2EEPROM+0xac>)
 8000a12:	79fa      	ldrb	r2, [r7, #7]
 8000a14:	54ca      	strb	r2, [r1, r3]
					break;
 8000a16:	e007      	b.n	8000a28 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <hata2EEPROM+0xa4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbe7      	blt.n	80009f8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <hata2EEPROM+0xa8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	b299      	uxth	r1, r3
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <hata2EEPROM+0xa4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	b298      	uxth	r0, r3
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <hata2EEPROM+0xa8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <hata2EEPROM+0xac>)
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <hata2EEPROM+0xa4>)
 8000a3e:	6812      	ldr	r2, [r2, #0]
 8000a40:	b292      	uxth	r2, r2
 8000a42:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000a46:	9402      	str	r4, [sp, #8]
 8000a48:	9201      	str	r2, [sp, #4]
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	460a      	mov	r2, r1
 8000a50:	21a0      	movs	r1, #160	; 0xa0
 8000a52:	480a      	ldr	r0, [pc, #40]	; (8000a7c <hata2EEPROM+0xb0>)
 8000a54:	f008 ff14 	bl	8009880 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5c:	f007 fe86 	bl	800876c <HAL_Delay>
	eepromKontrol(1);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff fbe7 	bl	8000234 <eepromKontrol>
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd90      	pop	{r4, r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000a8 	.word	0x200000a8
 8000a74:	200000ac 	.word	0x200000ac
 8000a78:	20000128 	.word	0x20000128
 8000a7c:	200002b4 	.word	0x200002b4

08000a80 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d11d      	bne.n	8000acc <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000a90:	4b62      	ldr	r3, [pc, #392]	; (8000c1c <hataKoduLcdGoster+0x19c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d105      	bne.n	8000aa4 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000a98:	4a61      	ldr	r2, [pc, #388]	; (8000c20 <hataKoduLcdGoster+0x1a0>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f007 f90f 	bl	8007cc0 <lcd_print>
 8000aa2:	e008      	b.n	8000ab6 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000aa4:	4b5d      	ldr	r3, [pc, #372]	; (8000c1c <hataKoduLcdGoster+0x19c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d104      	bne.n	8000ab6 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000aac:	4a5d      	ldr	r2, [pc, #372]	; (8000c24 <hataKoduLcdGoster+0x1a4>)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f007 f905 	bl	8007cc0 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000ab6:	4a5c      	ldr	r2, [pc, #368]	; (8000c28 <hataKoduLcdGoster+0x1a8>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	2002      	movs	r0, #2
 8000abc:	f007 f900 	bl	8007cc0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ac0:	4a5a      	ldr	r2, [pc, #360]	; (8000c2c <hataKoduLcdGoster+0x1ac>)
 8000ac2:	2107      	movs	r1, #7
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f007 f8fb 	bl	8007cc0 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000aca:	e0a3      	b.n	8000c14 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d11d      	bne.n	8000b0e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000ad2:	4b52      	ldr	r3, [pc, #328]	; (8000c1c <hataKoduLcdGoster+0x19c>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d105      	bne.n	8000ae6 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000ada:	4a51      	ldr	r2, [pc, #324]	; (8000c20 <hataKoduLcdGoster+0x1a0>)
 8000adc:	2101      	movs	r1, #1
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f007 f8ee 	bl	8007cc0 <lcd_print>
 8000ae4:	e008      	b.n	8000af8 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000ae6:	4b4d      	ldr	r3, [pc, #308]	; (8000c1c <hataKoduLcdGoster+0x19c>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d104      	bne.n	8000af8 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000aee:	4a4d      	ldr	r2, [pc, #308]	; (8000c24 <hataKoduLcdGoster+0x1a4>)
 8000af0:	2101      	movs	r1, #1
 8000af2:	2001      	movs	r0, #1
 8000af4:	f007 f8e4 	bl	8007cc0 <lcd_print>
		lcd_print(2, 2, "2");
 8000af8:	4a4d      	ldr	r2, [pc, #308]	; (8000c30 <hataKoduLcdGoster+0x1b0>)
 8000afa:	2102      	movs	r1, #2
 8000afc:	2002      	movs	r0, #2
 8000afe:	f007 f8df 	bl	8007cc0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b02:	4a4a      	ldr	r2, [pc, #296]	; (8000c2c <hataKoduLcdGoster+0x1ac>)
 8000b04:	2107      	movs	r1, #7
 8000b06:	2002      	movs	r0, #2
 8000b08:	f007 f8da 	bl	8007cc0 <lcd_print>
}
 8000b0c:	e082      	b.n	8000c14 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d11d      	bne.n	8000b50 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000b14:	4b41      	ldr	r3, [pc, #260]	; (8000c1c <hataKoduLcdGoster+0x19c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d105      	bne.n	8000b28 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000b1c:	4a40      	ldr	r2, [pc, #256]	; (8000c20 <hataKoduLcdGoster+0x1a0>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	2001      	movs	r0, #1
 8000b22:	f007 f8cd 	bl	8007cc0 <lcd_print>
 8000b26:	e008      	b.n	8000b3a <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000b28:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <hataKoduLcdGoster+0x19c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d104      	bne.n	8000b3a <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000b30:	4a3c      	ldr	r2, [pc, #240]	; (8000c24 <hataKoduLcdGoster+0x1a4>)
 8000b32:	2101      	movs	r1, #1
 8000b34:	2001      	movs	r0, #1
 8000b36:	f007 f8c3 	bl	8007cc0 <lcd_print>
		lcd_print(2, 3, "3");
 8000b3a:	4a3e      	ldr	r2, [pc, #248]	; (8000c34 <hataKoduLcdGoster+0x1b4>)
 8000b3c:	2103      	movs	r1, #3
 8000b3e:	2002      	movs	r0, #2
 8000b40:	f007 f8be 	bl	8007cc0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b44:	4a39      	ldr	r2, [pc, #228]	; (8000c2c <hataKoduLcdGoster+0x1ac>)
 8000b46:	2107      	movs	r1, #7
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f007 f8b9 	bl	8007cc0 <lcd_print>
}
 8000b4e:	e061      	b.n	8000c14 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d11d      	bne.n	8000b92 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000b56:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <hataKoduLcdGoster+0x19c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d105      	bne.n	8000b6a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000b5e:	4a30      	ldr	r2, [pc, #192]	; (8000c20 <hataKoduLcdGoster+0x1a0>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	2001      	movs	r0, #1
 8000b64:	f007 f8ac 	bl	8007cc0 <lcd_print>
 8000b68:	e008      	b.n	8000b7c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <hataKoduLcdGoster+0x19c>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d104      	bne.n	8000b7c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000b72:	4a2c      	ldr	r2, [pc, #176]	; (8000c24 <hataKoduLcdGoster+0x1a4>)
 8000b74:	2101      	movs	r1, #1
 8000b76:	2001      	movs	r0, #1
 8000b78:	f007 f8a2 	bl	8007cc0 <lcd_print>
		lcd_print(2, 4, "4");
 8000b7c:	4a2e      	ldr	r2, [pc, #184]	; (8000c38 <hataKoduLcdGoster+0x1b8>)
 8000b7e:	2104      	movs	r1, #4
 8000b80:	2002      	movs	r0, #2
 8000b82:	f007 f89d 	bl	8007cc0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b86:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <hataKoduLcdGoster+0x1ac>)
 8000b88:	2107      	movs	r1, #7
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f007 f898 	bl	8007cc0 <lcd_print>
}
 8000b90:	e040      	b.n	8000c14 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b05      	cmp	r3, #5
 8000b96:	d11d      	bne.n	8000bd4 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <hataKoduLcdGoster+0x19c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d105      	bne.n	8000bac <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000ba0:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <hataKoduLcdGoster+0x1a0>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f007 f88b 	bl	8007cc0 <lcd_print>
 8000baa:	e008      	b.n	8000bbe <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <hataKoduLcdGoster+0x19c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d104      	bne.n	8000bbe <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <hataKoduLcdGoster+0x1a4>)
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f007 f881 	bl	8007cc0 <lcd_print>
		lcd_print(2, 5, "5");
 8000bbe:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <hataKoduLcdGoster+0x1bc>)
 8000bc0:	2105      	movs	r1, #5
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	f007 f87c 	bl	8007cc0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bc8:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <hataKoduLcdGoster+0x1ac>)
 8000bca:	2107      	movs	r1, #7
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f007 f877 	bl	8007cc0 <lcd_print>
}
 8000bd2:	e01f      	b.n	8000c14 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d11c      	bne.n	8000c14 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <hataKoduLcdGoster+0x19c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d105      	bne.n	8000bee <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <hataKoduLcdGoster+0x1a0>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	2001      	movs	r0, #1
 8000be8:	f007 f86a 	bl	8007cc0 <lcd_print>
 8000bec:	e008      	b.n	8000c00 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <hataKoduLcdGoster+0x19c>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d104      	bne.n	8000c00 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <hataKoduLcdGoster+0x1a4>)
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f007 f860 	bl	8007cc0 <lcd_print>
		lcd_print(2, 6, "6");
 8000c00:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <hataKoduLcdGoster+0x1c0>)
 8000c02:	2106      	movs	r1, #6
 8000c04:	2002      	movs	r0, #2
 8000c06:	f007 f85b 	bl	8007cc0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <hataKoduLcdGoster+0x1ac>)
 8000c0c:	2107      	movs	r1, #7
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f007 f856 	bl	8007cc0 <lcd_print>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000245 	.word	0x20000245
 8000c20:	0800cf8c 	.word	0x0800cf8c
 8000c24:	0800cf9c 	.word	0x0800cf9c
 8000c28:	0800cfac 	.word	0x0800cfac
 8000c2c:	0800cfb0 	.word	0x0800cfb0
 8000c30:	0800cfbc 	.word	0x0800cfbc
 8000c34:	0800cfc0 	.word	0x0800cfc0
 8000c38:	0800cfc4 	.word	0x0800cfc4
 8000c3c:	0800cfc8 	.word	0x0800cfc8
 8000c40:	0800cfcc 	.word	0x0800cfcc

08000c44 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	e009      	b.n	8000c64 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <eepromDataFillWithEmpty+0x38>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <eepromDataFillWithEmpty+0x3c>)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3301      	adds	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <eepromDataFillWithEmpty+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dbf0      	blt.n	8000c50 <eepromDataFillWithEmpty+0xc>
	}
}
 8000c6e:	bf00      	nop
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000080 	.word	0x20000080
 8000c80:	20000128 	.word	0x20000128
 8000c84:	200000a8 	.word	0x200000a8

08000c88 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c9a:	4b50      	ldr	r3, [pc, #320]	; (8000ddc <i2cTest+0x154>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b4e      	ldr	r3, [pc, #312]	; (8000ddc <i2cTest+0x154>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f022 0201 	bic.w	r2, r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000caa:	484c      	ldr	r0, [pc, #304]	; (8000ddc <i2cTest+0x154>)
 8000cac:	f008 fcba 	bl	8009624 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cb0:	23c0      	movs	r3, #192	; 0xc0
 8000cb2:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000cb4:	2311      	movs	r3, #17
 8000cb6:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4846      	ldr	r0, [pc, #280]	; (8000de0 <i2cTest+0x158>)
 8000cc6:	f008 f8c1 	bl	8008e4c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2140      	movs	r1, #64	; 0x40
 8000cce:	4844      	ldr	r0, [pc, #272]	; (8000de0 <i2cTest+0x158>)
 8000cd0:	f008 fb33 	bl	800933a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2180      	movs	r1, #128	; 0x80
 8000cd8:	4841      	ldr	r0, [pc, #260]	; (8000de0 <i2cTest+0x158>)
 8000cda:	f008 fb2e 	bl	800933a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f007 fd44 	bl	800876c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000ce4:	bf00      	nop
 8000ce6:	2140      	movs	r1, #64	; 0x40
 8000ce8:	483d      	ldr	r0, [pc, #244]	; (8000de0 <i2cTest+0x158>)
 8000cea:	f008 fb0f 	bl	800930c <HAL_GPIO_ReadPin>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d006      	beq.n	8000d02 <i2cTest+0x7a>
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	483a      	ldr	r0, [pc, #232]	; (8000de0 <i2cTest+0x158>)
 8000cf8:	f008 fb08 	bl	800930c <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d1f1      	bne.n	8000ce6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	4836      	ldr	r0, [pc, #216]	; (8000de0 <i2cTest+0x158>)
 8000d08:	f008 fb17 	bl	800933a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000d0c:	200a      	movs	r0, #10
 8000d0e:	f007 fd2d 	bl	800876c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000d12:	bf00      	nop
 8000d14:	2180      	movs	r1, #128	; 0x80
 8000d16:	4832      	ldr	r0, [pc, #200]	; (8000de0 <i2cTest+0x158>)
 8000d18:	f008 faf8 	bl	800930c <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d0f8      	beq.n	8000d14 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	482e      	ldr	r0, [pc, #184]	; (8000de0 <i2cTest+0x158>)
 8000d28:	f008 fb07 	bl	800933a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d2c:	200a      	movs	r0, #10
 8000d2e:	f007 fd1d 	bl	800876c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000d32:	bf00      	nop
 8000d34:	2140      	movs	r1, #64	; 0x40
 8000d36:	482a      	ldr	r0, [pc, #168]	; (8000de0 <i2cTest+0x158>)
 8000d38:	f008 fae8 	bl	800930c <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d0f8      	beq.n	8000d34 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2140      	movs	r1, #64	; 0x40
 8000d46:	4826      	ldr	r0, [pc, #152]	; (8000de0 <i2cTest+0x158>)
 8000d48:	f008 faf7 	bl	800933a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d4c:	200a      	movs	r0, #10
 8000d4e:	f007 fd0d 	bl	800876c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000d52:	bf00      	nop
 8000d54:	2140      	movs	r1, #64	; 0x40
 8000d56:	4822      	ldr	r0, [pc, #136]	; (8000de0 <i2cTest+0x158>)
 8000d58:	f008 fad8 	bl	800930c <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d1f8      	bne.n	8000d54 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	481e      	ldr	r0, [pc, #120]	; (8000de0 <i2cTest+0x158>)
 8000d68:	f008 fae7 	bl	800933a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d6c:	200a      	movs	r0, #10
 8000d6e:	f007 fcfd 	bl	800876c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d72:	bf00      	nop
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	481a      	ldr	r0, [pc, #104]	; (8000de0 <i2cTest+0x158>)
 8000d78:	f008 fac8 	bl	800930c <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d1f8      	bne.n	8000d74 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d82:	23c0      	movs	r3, #192	; 0xc0
 8000d84:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d86:	2312      	movs	r3, #18
 8000d88:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d92:	463b      	mov	r3, r7
 8000d94:	4619      	mov	r1, r3
 8000d96:	4812      	ldr	r0, [pc, #72]	; (8000de0 <i2cTest+0x158>)
 8000d98:	f008 f858 	bl	8008e4c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <i2cTest+0x154>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <i2cTest+0x154>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000daa:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <i2cTest+0x154>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <i2cTest+0x154>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dba:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <i2cTest+0x154>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <i2cTest+0x154>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f042 0201 	orr.w	r2, r2, #1
 8000dca:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <i2cTest+0x154>)
 8000dce:	f008 fae5 	bl	800939c <HAL_I2C_Init>
}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200002b4 	.word	0x200002b4
 8000de0:	40010c00 	.word	0x40010c00

08000de4 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000dee:	20c8      	movs	r0, #200	; 0xc8
 8000df0:	f007 fcbc 	bl	800876c <HAL_Delay>
	lcd_clear();
 8000df4:	f006 ff90 	bl	8007d18 <lcd_clear>
	if(type == 1 && page == 0) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d143      	bne.n	8000e86 <printTemplate+0xa2>
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d140      	bne.n	8000e86 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000e04:	4a9d      	ldr	r2, [pc, #628]	; (800107c <printTemplate+0x298>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f006 ff59 	bl	8007cc0 <lcd_print>
		lcd_print(2, 3, "0");
 8000e0e:	4a9c      	ldr	r2, [pc, #624]	; (8001080 <printTemplate+0x29c>)
 8000e10:	2103      	movs	r1, #3
 8000e12:	2002      	movs	r0, #2
 8000e14:	f006 ff54 	bl	8007cc0 <lcd_print>
		lcd_print(2, 4, "1");
 8000e18:	4a9a      	ldr	r2, [pc, #616]	; (8001084 <printTemplate+0x2a0>)
 8000e1a:	2104      	movs	r1, #4
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f006 ff4f 	bl	8007cc0 <lcd_print>
		lcd_print(2, 5, "2");
 8000e22:	4a99      	ldr	r2, [pc, #612]	; (8001088 <printTemplate+0x2a4>)
 8000e24:	2105      	movs	r1, #5
 8000e26:	2002      	movs	r0, #2
 8000e28:	f006 ff4a 	bl	8007cc0 <lcd_print>
		lcd_print(2, 6, "3");
 8000e2c:	4a97      	ldr	r2, [pc, #604]	; (800108c <printTemplate+0x2a8>)
 8000e2e:	2106      	movs	r1, #6
 8000e30:	2002      	movs	r0, #2
 8000e32:	f006 ff45 	bl	8007cc0 <lcd_print>
		lcd_print(2, 7, "4");
 8000e36:	4a96      	ldr	r2, [pc, #600]	; (8001090 <printTemplate+0x2ac>)
 8000e38:	2107      	movs	r1, #7
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f006 ff40 	bl	8007cc0 <lcd_print>
		lcd_print(2, 10, "5");
 8000e40:	4a94      	ldr	r2, [pc, #592]	; (8001094 <printTemplate+0x2b0>)
 8000e42:	210a      	movs	r1, #10
 8000e44:	2002      	movs	r0, #2
 8000e46:	f006 ff3b 	bl	8007cc0 <lcd_print>
		lcd_print(2, 11, "6");
 8000e4a:	4a93      	ldr	r2, [pc, #588]	; (8001098 <printTemplate+0x2b4>)
 8000e4c:	210b      	movs	r1, #11
 8000e4e:	2002      	movs	r0, #2
 8000e50:	f006 ff36 	bl	8007cc0 <lcd_print>
		lcd_print(2, 12, "7");
 8000e54:	4a91      	ldr	r2, [pc, #580]	; (800109c <printTemplate+0x2b8>)
 8000e56:	210c      	movs	r1, #12
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f006 ff31 	bl	8007cc0 <lcd_print>
		lcd_print(2, 13, "8");
 8000e5e:	4a90      	ldr	r2, [pc, #576]	; (80010a0 <printTemplate+0x2bc>)
 8000e60:	210d      	movs	r1, #13
 8000e62:	2002      	movs	r0, #2
 8000e64:	f006 ff2c 	bl	8007cc0 <lcd_print>
		lcd_print(2, 14, "9");
 8000e68:	4a8e      	ldr	r2, [pc, #568]	; (80010a4 <printTemplate+0x2c0>)
 8000e6a:	210e      	movs	r1, #14
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f006 ff27 	bl	8007cc0 <lcd_print>
		lcd_print(1, 5, machineID);
 8000e72:	4a8d      	ldr	r2, [pc, #564]	; (80010a8 <printTemplate+0x2c4>)
 8000e74:	2105      	movs	r1, #5
 8000e76:	2001      	movs	r0, #1
 8000e78:	f006 ff22 	bl	8007cc0 <lcd_print>
		lcd_gotoxy(2, 3);
 8000e7c:	2103      	movs	r1, #3
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f006 feff 	bl	8007c82 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000e84:	e0f5      	b.n	8001072 <printTemplate+0x28e>
	} else if(type == 2) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d178      	bne.n	8000f7e <printTemplate+0x19a>
		if(page == 1) {
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d114      	bne.n	8000ebc <printTemplate+0xd8>
			lcd_clear();
 8000e92:	f006 ff41 	bl	8007d18 <lcd_clear>
			HAL_Delay(100);
 8000e96:	2064      	movs	r0, #100	; 0x64
 8000e98:	f007 fc68 	bl	800876c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e9c:	4a83      	ldr	r2, [pc, #524]	; (80010ac <printTemplate+0x2c8>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f006 ff0d 	bl	8007cc0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ea6:	4a82      	ldr	r2, [pc, #520]	; (80010b0 <printTemplate+0x2cc>)
 8000ea8:	2107      	movs	r1, #7
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f006 ff08 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000eb0:	4a80      	ldr	r2, [pc, #512]	; (80010b4 <printTemplate+0x2d0>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f006 ff03 	bl	8007cc0 <lcd_print>
}
 8000eba:	e0da      	b.n	8001072 <printTemplate+0x28e>
		} else if(page == 2) {
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d114      	bne.n	8000eec <printTemplate+0x108>
			lcd_clear();
 8000ec2:	f006 ff29 	bl	8007d18 <lcd_clear>
			HAL_Delay(100);
 8000ec6:	2064      	movs	r0, #100	; 0x64
 8000ec8:	f007 fc50 	bl	800876c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ecc:	4a77      	ldr	r2, [pc, #476]	; (80010ac <printTemplate+0x2c8>)
 8000ece:	2101      	movs	r1, #1
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f006 fef5 	bl	8007cc0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ed6:	4a76      	ldr	r2, [pc, #472]	; (80010b0 <printTemplate+0x2cc>)
 8000ed8:	2107      	movs	r1, #7
 8000eda:	2001      	movs	r0, #1
 8000edc:	f006 fef0 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ee0:	4a75      	ldr	r2, [pc, #468]	; (80010b8 <printTemplate+0x2d4>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f006 feeb 	bl	8007cc0 <lcd_print>
}
 8000eea:	e0c2      	b.n	8001072 <printTemplate+0x28e>
		} else if(page == 3) {
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d114      	bne.n	8000f1c <printTemplate+0x138>
			lcd_clear();
 8000ef2:	f006 ff11 	bl	8007d18 <lcd_clear>
			HAL_Delay(100);
 8000ef6:	2064      	movs	r0, #100	; 0x64
 8000ef8:	f007 fc38 	bl	800876c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000efc:	4a6b      	ldr	r2, [pc, #428]	; (80010ac <printTemplate+0x2c8>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	2001      	movs	r0, #1
 8000f02:	f006 fedd 	bl	8007cc0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f06:	4a6a      	ldr	r2, [pc, #424]	; (80010b0 <printTemplate+0x2cc>)
 8000f08:	2107      	movs	r1, #7
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f006 fed8 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000f10:	4a6a      	ldr	r2, [pc, #424]	; (80010bc <printTemplate+0x2d8>)
 8000f12:	2101      	movs	r1, #1
 8000f14:	2002      	movs	r0, #2
 8000f16:	f006 fed3 	bl	8007cc0 <lcd_print>
}
 8000f1a:	e0aa      	b.n	8001072 <printTemplate+0x28e>
		} else if(page == 4) {
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d114      	bne.n	8000f4c <printTemplate+0x168>
			lcd_clear();
 8000f22:	f006 fef9 	bl	8007d18 <lcd_clear>
			HAL_Delay(100);
 8000f26:	2064      	movs	r0, #100	; 0x64
 8000f28:	f007 fc20 	bl	800876c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f2c:	4a5f      	ldr	r2, [pc, #380]	; (80010ac <printTemplate+0x2c8>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	2001      	movs	r0, #1
 8000f32:	f006 fec5 	bl	8007cc0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f36:	4a5e      	ldr	r2, [pc, #376]	; (80010b0 <printTemplate+0x2cc>)
 8000f38:	2107      	movs	r1, #7
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f006 fec0 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000f40:	4a5f      	ldr	r2, [pc, #380]	; (80010c0 <printTemplate+0x2dc>)
 8000f42:	2101      	movs	r1, #1
 8000f44:	2002      	movs	r0, #2
 8000f46:	f006 febb 	bl	8007cc0 <lcd_print>
}
 8000f4a:	e092      	b.n	8001072 <printTemplate+0x28e>
		} else if(page == 5) {
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	2b05      	cmp	r3, #5
 8000f50:	f040 808f 	bne.w	8001072 <printTemplate+0x28e>
			lcd_clear();
 8000f54:	f006 fee0 	bl	8007d18 <lcd_clear>
			HAL_Delay(100);
 8000f58:	2064      	movs	r0, #100	; 0x64
 8000f5a:	f007 fc07 	bl	800876c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f5e:	4a53      	ldr	r2, [pc, #332]	; (80010ac <printTemplate+0x2c8>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	2001      	movs	r0, #1
 8000f64:	f006 feac 	bl	8007cc0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f68:	4a51      	ldr	r2, [pc, #324]	; (80010b0 <printTemplate+0x2cc>)
 8000f6a:	2107      	movs	r1, #7
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f006 fea7 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000f72:	4a54      	ldr	r2, [pc, #336]	; (80010c4 <printTemplate+0x2e0>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	2002      	movs	r0, #2
 8000f78:	f006 fea2 	bl	8007cc0 <lcd_print>
}
 8000f7c:	e079      	b.n	8001072 <printTemplate+0x28e>
	} else if(type == 3) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d176      	bne.n	8001072 <printTemplate+0x28e>
		if(page == 1) {
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d114      	bne.n	8000fb4 <printTemplate+0x1d0>
			lcd_clear();
 8000f8a:	f006 fec5 	bl	8007d18 <lcd_clear>
			HAL_Delay(100);
 8000f8e:	2064      	movs	r0, #100	; 0x64
 8000f90:	f007 fbec 	bl	800876c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f94:	4a4c      	ldr	r2, [pc, #304]	; (80010c8 <printTemplate+0x2e4>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f006 fe91 	bl	8007cc0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f9e:	4a4b      	ldr	r2, [pc, #300]	; (80010cc <printTemplate+0x2e8>)
 8000fa0:	2107      	movs	r1, #7
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f006 fe8c 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000fa8:	4a42      	ldr	r2, [pc, #264]	; (80010b4 <printTemplate+0x2d0>)
 8000faa:	2101      	movs	r1, #1
 8000fac:	2002      	movs	r0, #2
 8000fae:	f006 fe87 	bl	8007cc0 <lcd_print>
}
 8000fb2:	e05e      	b.n	8001072 <printTemplate+0x28e>
		} else if(page == 2) {
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d114      	bne.n	8000fe4 <printTemplate+0x200>
			lcd_clear();
 8000fba:	f006 fead 	bl	8007d18 <lcd_clear>
			HAL_Delay(100);
 8000fbe:	2064      	movs	r0, #100	; 0x64
 8000fc0:	f007 fbd4 	bl	800876c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fc4:	4a40      	ldr	r2, [pc, #256]	; (80010c8 <printTemplate+0x2e4>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f006 fe79 	bl	8007cc0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fce:	4a3f      	ldr	r2, [pc, #252]	; (80010cc <printTemplate+0x2e8>)
 8000fd0:	2107      	movs	r1, #7
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f006 fe74 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fd8:	4a37      	ldr	r2, [pc, #220]	; (80010b8 <printTemplate+0x2d4>)
 8000fda:	2101      	movs	r1, #1
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f006 fe6f 	bl	8007cc0 <lcd_print>
}
 8000fe2:	e046      	b.n	8001072 <printTemplate+0x28e>
		} else if(page == 3) {
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d114      	bne.n	8001014 <printTemplate+0x230>
			lcd_clear();
 8000fea:	f006 fe95 	bl	8007d18 <lcd_clear>
			HAL_Delay(100);
 8000fee:	2064      	movs	r0, #100	; 0x64
 8000ff0:	f007 fbbc 	bl	800876c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ff4:	4a34      	ldr	r2, [pc, #208]	; (80010c8 <printTemplate+0x2e4>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f006 fe61 	bl	8007cc0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ffe:	4a33      	ldr	r2, [pc, #204]	; (80010cc <printTemplate+0x2e8>)
 8001000:	2107      	movs	r1, #7
 8001002:	2001      	movs	r0, #1
 8001004:	f006 fe5c 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001008:	4a2c      	ldr	r2, [pc, #176]	; (80010bc <printTemplate+0x2d8>)
 800100a:	2101      	movs	r1, #1
 800100c:	2002      	movs	r0, #2
 800100e:	f006 fe57 	bl	8007cc0 <lcd_print>
}
 8001012:	e02e      	b.n	8001072 <printTemplate+0x28e>
		} else if(page == 4) {
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2b04      	cmp	r3, #4
 8001018:	d114      	bne.n	8001044 <printTemplate+0x260>
			lcd_clear();
 800101a:	f006 fe7d 	bl	8007d18 <lcd_clear>
			HAL_Delay(100);
 800101e:	2064      	movs	r0, #100	; 0x64
 8001020:	f007 fba4 	bl	800876c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <printTemplate+0x2e4>)
 8001026:	2101      	movs	r1, #1
 8001028:	2001      	movs	r0, #1
 800102a:	f006 fe49 	bl	8007cc0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800102e:	4a27      	ldr	r2, [pc, #156]	; (80010cc <printTemplate+0x2e8>)
 8001030:	2107      	movs	r1, #7
 8001032:	2001      	movs	r0, #1
 8001034:	f006 fe44 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <printTemplate+0x2dc>)
 800103a:	2101      	movs	r1, #1
 800103c:	2002      	movs	r0, #2
 800103e:	f006 fe3f 	bl	8007cc0 <lcd_print>
}
 8001042:	e016      	b.n	8001072 <printTemplate+0x28e>
		} else if(page == 5) {
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2b05      	cmp	r3, #5
 8001048:	d113      	bne.n	8001072 <printTemplate+0x28e>
			lcd_clear();
 800104a:	f006 fe65 	bl	8007d18 <lcd_clear>
			HAL_Delay(100);
 800104e:	2064      	movs	r0, #100	; 0x64
 8001050:	f007 fb8c 	bl	800876c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001054:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <printTemplate+0x2e4>)
 8001056:	2101      	movs	r1, #1
 8001058:	2001      	movs	r0, #1
 800105a:	f006 fe31 	bl	8007cc0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800105e:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <printTemplate+0x2e8>)
 8001060:	2107      	movs	r1, #7
 8001062:	2001      	movs	r0, #1
 8001064:	f006 fe2c 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001068:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <printTemplate+0x2e0>)
 800106a:	2101      	movs	r1, #1
 800106c:	2002      	movs	r0, #2
 800106e:	f006 fe27 	bl	8007cc0 <lcd_print>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	0800cfd0 	.word	0x0800cfd0
 8001080:	0800cfd8 	.word	0x0800cfd8
 8001084:	0800cfdc 	.word	0x0800cfdc
 8001088:	0800cfe0 	.word	0x0800cfe0
 800108c:	0800cfe4 	.word	0x0800cfe4
 8001090:	0800cfe8 	.word	0x0800cfe8
 8001094:	0800cfec 	.word	0x0800cfec
 8001098:	0800cff0 	.word	0x0800cff0
 800109c:	0800cff4 	.word	0x0800cff4
 80010a0:	0800cff8 	.word	0x0800cff8
 80010a4:	0800cffc 	.word	0x0800cffc
 80010a8:	200001a0 	.word	0x200001a0
 80010ac:	0800d000 	.word	0x0800d000
 80010b0:	200001ac 	.word	0x200001ac
 80010b4:	0800d008 	.word	0x0800d008
 80010b8:	0800d01c 	.word	0x0800d01c
 80010bc:	0800d030 	.word	0x0800d030
 80010c0:	0800d044 	.word	0x0800d044
 80010c4:	0800d058 	.word	0x0800d058
 80010c8:	0800d06c 	.word	0x0800d06c
 80010cc:	200001c0 	.word	0x200001c0

080010d0 <checkSlideVal>:

int checkSlideVal(int state) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d111      	bne.n	8001102 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80010de:	2101      	movs	r1, #1
 80010e0:	4813      	ldr	r0, [pc, #76]	; (8001130 <checkSlideVal+0x60>)
 80010e2:	f008 f913 	bl	800930c <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d101      	bne.n	80010f0 <checkSlideVal+0x20>
			return 34;
 80010ec:	2322      	movs	r3, #34	; 0x22
 80010ee:	e01b      	b.n	8001128 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80010f0:	2108      	movs	r1, #8
 80010f2:	4810      	ldr	r0, [pc, #64]	; (8001134 <checkSlideVal+0x64>)
 80010f4:	f008 f90a 	bl	800930c <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d113      	bne.n	8001126 <checkSlideVal+0x56>
			return 32;
 80010fe:	2320      	movs	r3, #32
 8001100:	e012      	b.n	8001128 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001102:	2101      	movs	r1, #1
 8001104:	480a      	ldr	r0, [pc, #40]	; (8001130 <checkSlideVal+0x60>)
 8001106:	f008 f901 	bl	800930c <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	2b01      	cmp	r3, #1
 800110e:	d101      	bne.n	8001114 <checkSlideVal+0x44>
			return 35;
 8001110:	2323      	movs	r3, #35	; 0x23
 8001112:	e009      	b.n	8001128 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001114:	2108      	movs	r1, #8
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <checkSlideVal+0x64>)
 8001118:	f008 f8f8 	bl	800930c <HAL_GPIO_ReadPin>
 800111c:	4603      	mov	r3, r0
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <checkSlideVal+0x56>
			return 33;
 8001122:	2321      	movs	r3, #33	; 0x21
 8001124:	e000      	b.n	8001128 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40010800 	.word	0x40010800
 8001134:	40011000 	.word	0x40011000

08001138 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f7ff f86c 	bl	8000224 <strlen>
 800114c:	4603      	mov	r3, r0
 800114e:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001150:	2301      	movs	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001154:	e08a      	b.n	800126c <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	f7ff ffba 	bl	80010d0 <checkSlideVal>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	dd07      	ble.n	8001172 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001162:	6838      	ldr	r0, [r7, #0]
 8001164:	f7ff ffb4 	bl	80010d0 <checkSlideVal>
 8001168:	4603      	mov	r3, r0
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b44      	ldr	r3, [pc, #272]	; (8001280 <slideText+0x148>)
 800116e:	701a      	strb	r2, [r3, #0]
			break;
 8001170:	e081      	b.n	8001276 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
 8001176:	e075      	b.n	8001264 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001178:	6838      	ldr	r0, [r7, #0]
 800117a:	f7ff ffa9 	bl	80010d0 <checkSlideVal>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	dd09      	ble.n	8001198 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001184:	6838      	ldr	r0, [r7, #0]
 8001186:	f7ff ffa3 	bl	80010d0 <checkSlideVal>
 800118a:	4603      	mov	r3, r0
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b3c      	ldr	r3, [pc, #240]	; (8001280 <slideText+0x148>)
 8001190:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001196:	e069      	b.n	800126c <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	4413      	add	r3, r2
 800119e:	61fb      	str	r3, [r7, #28]
 80011a0:	e029      	b.n	80011f6 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80011a2:	6838      	ldr	r0, [r7, #0]
 80011a4:	f7ff ff94 	bl	80010d0 <checkSlideVal>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	dd0b      	ble.n	80011c6 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	f7ff ff8e 	bl	80010d0 <checkSlideVal>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b31      	ldr	r3, [pc, #196]	; (8001280 <slideText+0x148>)
 80011ba:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80011c4:	e01d      	b.n	8001202 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	b2d8      	uxtb	r0, r3
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	b2d9      	uxtb	r1, r3
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4413      	add	r3, r2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	f006 fd80 	bl	8007cea <lcd_print_char>
				HAL_Delay(30);
 80011ea:	201e      	movs	r0, #30
 80011ec:	f007 fabe 	bl	800876c <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	3301      	adds	r3, #1
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	7dfa      	ldrb	r2, [r7, #23]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4413      	add	r3, r2
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	429a      	cmp	r2, r3
 8001200:	dbcf      	blt.n	80011a2 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	3b01      	subs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	e023      	b.n	8001252 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f7ff ff60 	bl	80010d0 <checkSlideVal>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	dd0b      	ble.n	800122e <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f7ff ff5a 	bl	80010d0 <checkSlideVal>
 800121c:	4603      	mov	r3, r0
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <slideText+0x148>)
 8001222:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800122c:	e017      	b.n	800125e <slideText+0x126>
				}
			     if(j >= startPos) {
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	429a      	cmp	r2, r3
 8001234:	db0a      	blt.n	800124c <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	b2d1      	uxtb	r1, r2
 800123e:	2220      	movs	r2, #32
 8001240:	4618      	mov	r0, r3
 8001242:	f006 fd52 	bl	8007cea <lcd_print_char>
			    	 HAL_Delay(30);
 8001246:	201e      	movs	r0, #30
 8001248:	f007 fa90 	bl	800876c <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	3b01      	subs	r3, #1
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	7dfa      	ldrb	r2, [r7, #23]
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	429a      	cmp	r2, r3
 800125c:	dad5      	bge.n	800120a <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	3301      	adds	r3, #1
 8001262:	623b      	str	r3, [r7, #32]
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	6a3a      	ldr	r2, [r7, #32]
 8001268:	429a      	cmp	r2, r3
 800126a:	db85      	blt.n	8001178 <slideText+0x40>
	while(mainLoopVal == 1) {
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	2b01      	cmp	r3, #1
 8001270:	f43f af71 	beq.w	8001156 <slideText+0x1e>
			     }
			}
		}
	}
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000224 	.word	0x20000224

08001284 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001288:	f3bf 8f4f 	dsb	sy
}
 800128c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <__NVIC_SystemReset+0x24>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001296:	4904      	ldr	r1, [pc, #16]	; (80012a8 <__NVIC_SystemReset+0x24>)
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_SystemReset+0x28>)
 800129a:	4313      	orrs	r3, r2
 800129c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800129e:	f3bf 8f4f 	dsb	sy
}
 80012a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <__NVIC_SystemReset+0x20>
 80012a8:	e000ed00 	.word	0xe000ed00
 80012ac:	05fa0004 	.word	0x05fa0004

080012b0 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80012b6:	2101      	movs	r1, #1
 80012b8:	488e      	ldr	r0, [pc, #568]	; (80014f4 <menu+0x244>)
 80012ba:	f008 f827 	bl	800930c <HAL_GPIO_ReadPin>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	f040 808e 	bne.w	80013e2 <menu+0x132>
 80012c6:	4b8c      	ldr	r3, [pc, #560]	; (80014f8 <menu+0x248>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	f083 0301 	eor.w	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 8086 	beq.w	80013e2 <menu+0x132>
		menuSayac = menuSayac+1;
 80012d6:	4b89      	ldr	r3, [pc, #548]	; (80014fc <menu+0x24c>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b87      	ldr	r3, [pc, #540]	; (80014fc <menu+0x24c>)
 80012e0:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80012e2:	4b86      	ldr	r3, [pc, #536]	; (80014fc <menu+0x24c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b24      	cmp	r3, #36	; 0x24
 80012e8:	d102      	bne.n	80012f0 <menu+0x40>
			menuSayac = 1;
 80012ea:	4b84      	ldr	r3, [pc, #528]	; (80014fc <menu+0x24c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80012f0:	4b82      	ldr	r3, [pc, #520]	; (80014fc <menu+0x24c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b12      	cmp	r3, #18
 80012f6:	d106      	bne.n	8001306 <menu+0x56>
 80012f8:	4b81      	ldr	r3, [pc, #516]	; (8001500 <menu+0x250>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <menu+0x56>
			menuSayac = 21;
 8001300:	4b7e      	ldr	r3, [pc, #504]	; (80014fc <menu+0x24c>)
 8001302:	2215      	movs	r2, #21
 8001304:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001306:	4b7d      	ldr	r3, [pc, #500]	; (80014fc <menu+0x24c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b08      	cmp	r3, #8
 800130c:	d106      	bne.n	800131c <menu+0x6c>
 800130e:	4b7d      	ldr	r3, [pc, #500]	; (8001504 <menu+0x254>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <menu+0x6c>
			menuSayac = 16;
 8001316:	4b79      	ldr	r3, [pc, #484]	; (80014fc <menu+0x24c>)
 8001318:	2210      	movs	r2, #16
 800131a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800131c:	4b77      	ldr	r3, [pc, #476]	; (80014fc <menu+0x24c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b0d      	cmp	r3, #13
 8001322:	d106      	bne.n	8001332 <menu+0x82>
 8001324:	4b77      	ldr	r3, [pc, #476]	; (8001504 <menu+0x254>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d102      	bne.n	8001332 <menu+0x82>
			menuSayac = 16;
 800132c:	4b73      	ldr	r3, [pc, #460]	; (80014fc <menu+0x24c>)
 800132e:	2210      	movs	r2, #16
 8001330:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001332:	4b72      	ldr	r3, [pc, #456]	; (80014fc <menu+0x24c>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b09      	cmp	r3, #9
 8001338:	d106      	bne.n	8001348 <menu+0x98>
 800133a:	4b72      	ldr	r3, [pc, #456]	; (8001504 <menu+0x254>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d102      	bne.n	8001348 <menu+0x98>
			menuSayac = 13;
 8001342:	4b6e      	ldr	r3, [pc, #440]	; (80014fc <menu+0x24c>)
 8001344:	220d      	movs	r2, #13
 8001346:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001348:	4b6c      	ldr	r3, [pc, #432]	; (80014fc <menu+0x24c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b0a      	cmp	r3, #10
 800134e:	d10a      	bne.n	8001366 <menu+0xb6>
 8001350:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <menu+0x258>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d003      	beq.n	8001360 <menu+0xb0>
 8001358:	4b6b      	ldr	r3, [pc, #428]	; (8001508 <menu+0x258>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d102      	bne.n	8001366 <menu+0xb6>
			menuSayac = 11;
 8001360:	4b66      	ldr	r3, [pc, #408]	; (80014fc <menu+0x24c>)
 8001362:	220b      	movs	r2, #11
 8001364:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001366:	4b65      	ldr	r3, [pc, #404]	; (80014fc <menu+0x24c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b0c      	cmp	r3, #12
 800136c:	d10e      	bne.n	800138c <menu+0xdc>
 800136e:	4b67      	ldr	r3, [pc, #412]	; (800150c <menu+0x25c>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d003      	beq.n	800137e <menu+0xce>
 8001376:	4b65      	ldr	r3, [pc, #404]	; (800150c <menu+0x25c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d106      	bne.n	800138c <menu+0xdc>
 800137e:	4b61      	ldr	r3, [pc, #388]	; (8001504 <menu+0x254>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d102      	bne.n	800138c <menu+0xdc>
			menuSayac = 16;
 8001386:	4b5d      	ldr	r3, [pc, #372]	; (80014fc <menu+0x24c>)
 8001388:	2210      	movs	r2, #16
 800138a:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800138c:	4b5b      	ldr	r3, [pc, #364]	; (80014fc <menu+0x24c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b0c      	cmp	r3, #12
 8001392:	d10e      	bne.n	80013b2 <menu+0x102>
 8001394:	4b5d      	ldr	r3, [pc, #372]	; (800150c <menu+0x25c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d003      	beq.n	80013a4 <menu+0xf4>
 800139c:	4b5b      	ldr	r3, [pc, #364]	; (800150c <menu+0x25c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d106      	bne.n	80013b2 <menu+0x102>
 80013a4:	4b57      	ldr	r3, [pc, #348]	; (8001504 <menu+0x254>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d102      	bne.n	80013b2 <menu+0x102>
			menuSayac = 13;
 80013ac:	4b53      	ldr	r3, [pc, #332]	; (80014fc <menu+0x24c>)
 80013ae:	220d      	movs	r2, #13
 80013b0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80013b2:	4b52      	ldr	r3, [pc, #328]	; (80014fc <menu+0x24c>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	d106      	bne.n	80013c8 <menu+0x118>
 80013ba:	4b55      	ldr	r3, [pc, #340]	; (8001510 <menu+0x260>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d102      	bne.n	80013c8 <menu+0x118>
			menuSayac = 16;
 80013c2:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <menu+0x24c>)
 80013c4:	2210      	movs	r2, #16
 80013c6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80013c8:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <menu+0x24c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b18      	cmp	r3, #24
 80013ce:	d106      	bne.n	80013de <menu+0x12e>
 80013d0:	4b4b      	ldr	r3, [pc, #300]	; (8001500 <menu+0x250>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <menu+0x12e>
			menuSayac = 26;
 80013d8:	4b48      	ldr	r3, [pc, #288]	; (80014fc <menu+0x24c>)
 80013da:	221a      	movs	r2, #26
 80013dc:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013de:	f003 fb31 	bl	8004a44 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80013e2:	2108      	movs	r1, #8
 80013e4:	484b      	ldr	r0, [pc, #300]	; (8001514 <menu+0x264>)
 80013e6:	f007 ff91 	bl	800930c <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d175      	bne.n	80014dc <menu+0x22c>
 80013f0:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <menu+0x248>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	f083 0301 	eor.w	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d06e      	beq.n	80014dc <menu+0x22c>
		if (menuSayac <= 1) {
 80013fe:	4b3f      	ldr	r3, [pc, #252]	; (80014fc <menu+0x24c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d802      	bhi.n	800140c <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <menu+0x24c>)
 8001408:	2224      	movs	r2, #36	; 0x24
 800140a:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800140c:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <menu+0x24c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	3b01      	subs	r3, #1
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b39      	ldr	r3, [pc, #228]	; (80014fc <menu+0x24c>)
 8001416:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <menu+0x24c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b14      	cmp	r3, #20
 800141e:	d106      	bne.n	800142e <menu+0x17e>
 8001420:	4b37      	ldr	r3, [pc, #220]	; (8001500 <menu+0x250>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <menu+0x17e>
			menuSayac = 17;
 8001428:	4b34      	ldr	r3, [pc, #208]	; (80014fc <menu+0x24c>)
 800142a:	2211      	movs	r2, #17
 800142c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800142e:	4b33      	ldr	r3, [pc, #204]	; (80014fc <menu+0x24c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	d106      	bne.n	8001444 <menu+0x194>
 8001436:	4b33      	ldr	r3, [pc, #204]	; (8001504 <menu+0x254>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <menu+0x194>
			menuSayac = 7;
 800143e:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <menu+0x24c>)
 8001440:	2207      	movs	r2, #7
 8001442:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <menu+0x24c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d106      	bne.n	800145a <menu+0x1aa>
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <menu+0x254>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d102      	bne.n	800145a <menu+0x1aa>
			menuSayac = 12;
 8001454:	4b29      	ldr	r3, [pc, #164]	; (80014fc <menu+0x24c>)
 8001456:	220c      	movs	r2, #12
 8001458:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <menu+0x24c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b0c      	cmp	r3, #12
 8001460:	d106      	bne.n	8001470 <menu+0x1c0>
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <menu+0x254>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d102      	bne.n	8001470 <menu+0x1c0>
			menuSayac = 8;
 800146a:	4b24      	ldr	r3, [pc, #144]	; (80014fc <menu+0x24c>)
 800146c:	2208      	movs	r2, #8
 800146e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <menu+0x24c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b0a      	cmp	r3, #10
 8001476:	d10a      	bne.n	800148e <menu+0x1de>
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <menu+0x258>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d003      	beq.n	8001488 <menu+0x1d8>
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <menu+0x258>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d102      	bne.n	800148e <menu+0x1de>
			menuSayac = 9;
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <menu+0x24c>)
 800148a:	2209      	movs	r2, #9
 800148c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <menu+0x24c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b0c      	cmp	r3, #12
 8001494:	d10a      	bne.n	80014ac <menu+0x1fc>
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <menu+0x25c>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d003      	beq.n	80014a6 <menu+0x1f6>
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <menu+0x25c>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d102      	bne.n	80014ac <menu+0x1fc>
			menuSayac = 11;
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <menu+0x24c>)
 80014a8:	220b      	movs	r2, #11
 80014aa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <menu+0x24c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	d106      	bne.n	80014c2 <menu+0x212>
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <menu+0x260>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d102      	bne.n	80014c2 <menu+0x212>
			menuSayac = 14;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <menu+0x24c>)
 80014be:	220e      	movs	r2, #14
 80014c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <menu+0x24c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b19      	cmp	r3, #25
 80014c8:	d106      	bne.n	80014d8 <menu+0x228>
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <menu+0x250>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <menu+0x228>
			menuSayac = 23;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <menu+0x24c>)
 80014d4:	2217      	movs	r2, #23
 80014d6:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80014d8:	f003 fab4 	bl	8004a44 <bekle>
	}

	if (menuSayac == 0) {
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <menu+0x24c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d133      	bne.n	800154c <menu+0x29c>
		if(dilSecim == 0) {
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <menu+0x268>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d121      	bne.n	8001530 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80014ec:	4a0b      	ldr	r2, [pc, #44]	; (800151c <menu+0x26c>)
 80014ee:	2101      	movs	r1, #1
 80014f0:	2001      	movs	r0, #1
 80014f2:	e015      	b.n	8001520 <menu+0x270>
 80014f4:	40010800 	.word	0x40010800
 80014f8:	20000253 	.word	0x20000253
 80014fc:	20000224 	.word	0x20000224
 8001500:	20000233 	.word	0x20000233
 8001504:	2000022c 	.word	0x2000022c
 8001508:	2000022d 	.word	0x2000022d
 800150c:	2000022e 	.word	0x2000022e
 8001510:	2000022f 	.word	0x2000022f
 8001514:	40011000 	.word	0x40011000
 8001518:	20000245 	.word	0x20000245
 800151c:	0800d074 	.word	0x0800d074
 8001520:	f006 fbce 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001524:	4a94      	ldr	r2, [pc, #592]	; (8001778 <menu+0x4c8>)
 8001526:	2101      	movs	r1, #1
 8001528:	2002      	movs	r0, #2
 800152a:	f006 fbc9 	bl	8007cc0 <lcd_print>
 800152e:	e00d      	b.n	800154c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001530:	4b92      	ldr	r3, [pc, #584]	; (800177c <menu+0x4cc>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d109      	bne.n	800154c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001538:	4a91      	ldr	r2, [pc, #580]	; (8001780 <menu+0x4d0>)
 800153a:	2101      	movs	r1, #1
 800153c:	2001      	movs	r0, #1
 800153e:	f006 fbbf 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001542:	4a90      	ldr	r2, [pc, #576]	; (8001784 <menu+0x4d4>)
 8001544:	2101      	movs	r1, #1
 8001546:	2002      	movs	r0, #2
 8001548:	f006 fbba 	bl	8007cc0 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800154c:	4b8e      	ldr	r3, [pc, #568]	; (8001788 <menu+0x4d8>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	f040 82b5 	bne.w	8001ac0 <menu+0x810>
		if(dilSecim == 0) {
 8001556:	4b89      	ldr	r3, [pc, #548]	; (800177c <menu+0x4cc>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d105      	bne.n	800156a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800155e:	4a8b      	ldr	r2, [pc, #556]	; (800178c <menu+0x4dc>)
 8001560:	2101      	movs	r1, #1
 8001562:	2001      	movs	r0, #1
 8001564:	f006 fbac 	bl	8007cc0 <lcd_print>
 8001568:	e008      	b.n	800157c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800156a:	4b84      	ldr	r3, [pc, #528]	; (800177c <menu+0x4cc>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d104      	bne.n	800157c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001572:	4a87      	ldr	r2, [pc, #540]	; (8001790 <menu+0x4e0>)
 8001574:	2101      	movs	r1, #1
 8001576:	2001      	movs	r0, #1
 8001578:	f006 fba2 	bl	8007cc0 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800157c:	4b85      	ldr	r3, [pc, #532]	; (8001794 <menu+0x4e4>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d123      	bne.n	80015cc <menu+0x31c>
			if(dilSecim == 0) {
 8001584:	4b7d      	ldr	r3, [pc, #500]	; (800177c <menu+0x4cc>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800158c:	4a82      	ldr	r2, [pc, #520]	; (8001798 <menu+0x4e8>)
 800158e:	2101      	movs	r1, #1
 8001590:	2002      	movs	r0, #2
 8001592:	f006 fb95 	bl	8007cc0 <lcd_print>
 8001596:	e008      	b.n	80015aa <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001598:	4b78      	ldr	r3, [pc, #480]	; (800177c <menu+0x4cc>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d104      	bne.n	80015aa <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80015a0:	4a7e      	ldr	r2, [pc, #504]	; (800179c <menu+0x4ec>)
 80015a2:	2101      	movs	r1, #1
 80015a4:	2002      	movs	r0, #2
 80015a6:	f006 fb8b 	bl	8007cc0 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80015aa:	4a7d      	ldr	r2, [pc, #500]	; (80017a0 <menu+0x4f0>)
 80015ac:	210f      	movs	r1, #15
 80015ae:	2002      	movs	r0, #2
 80015b0:	f006 fb86 	bl	8007cc0 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80015b4:	4b7b      	ldr	r3, [pc, #492]	; (80017a4 <menu+0x4f4>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	220a      	movs	r2, #10
 80015ba:	497b      	ldr	r1, [pc, #492]	; (80017a8 <menu+0x4f8>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f00a fed1 	bl	800c364 <itoa>
			lcd_print(2, 14, snum);
 80015c2:	4a79      	ldr	r2, [pc, #484]	; (80017a8 <menu+0x4f8>)
 80015c4:	210e      	movs	r1, #14
 80015c6:	2002      	movs	r0, #2
 80015c8:	f006 fb7a 	bl	8007cc0 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80015cc:	4b71      	ldr	r3, [pc, #452]	; (8001794 <menu+0x4e4>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d123      	bne.n	800161c <menu+0x36c>
			if(dilSecim == 0) {
 80015d4:	4b69      	ldr	r3, [pc, #420]	; (800177c <menu+0x4cc>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d105      	bne.n	80015e8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80015dc:	4a73      	ldr	r2, [pc, #460]	; (80017ac <menu+0x4fc>)
 80015de:	2101      	movs	r1, #1
 80015e0:	2002      	movs	r0, #2
 80015e2:	f006 fb6d 	bl	8007cc0 <lcd_print>
 80015e6:	e008      	b.n	80015fa <menu+0x34a>
			} else if(dilSecim == 1) {
 80015e8:	4b64      	ldr	r3, [pc, #400]	; (800177c <menu+0x4cc>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d104      	bne.n	80015fa <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80015f0:	4a6f      	ldr	r2, [pc, #444]	; (80017b0 <menu+0x500>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	2002      	movs	r0, #2
 80015f6:	f006 fb63 	bl	8007cc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015fa:	4a6e      	ldr	r2, [pc, #440]	; (80017b4 <menu+0x504>)
 80015fc:	210f      	movs	r1, #15
 80015fe:	2002      	movs	r0, #2
 8001600:	f006 fb5e 	bl	8007cc0 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001604:	4b6c      	ldr	r3, [pc, #432]	; (80017b8 <menu+0x508>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	220a      	movs	r2, #10
 800160a:	4967      	ldr	r1, [pc, #412]	; (80017a8 <menu+0x4f8>)
 800160c:	4618      	mov	r0, r3
 800160e:	f00a fea9 	bl	800c364 <itoa>
			lcd_print(2, 14, snum);
 8001612:	4a65      	ldr	r2, [pc, #404]	; (80017a8 <menu+0x4f8>)
 8001614:	210e      	movs	r1, #14
 8001616:	2002      	movs	r0, #2
 8001618:	f006 fb52 	bl	8007cc0 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800161c:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <menu+0x4e4>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d123      	bne.n	800166c <menu+0x3bc>
			if(dilSecim == 0) {
 8001624:	4b55      	ldr	r3, [pc, #340]	; (800177c <menu+0x4cc>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d105      	bne.n	8001638 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800162c:	4a63      	ldr	r2, [pc, #396]	; (80017bc <menu+0x50c>)
 800162e:	2101      	movs	r1, #1
 8001630:	2002      	movs	r0, #2
 8001632:	f006 fb45 	bl	8007cc0 <lcd_print>
 8001636:	e008      	b.n	800164a <menu+0x39a>
			} else if(dilSecim == 1) {
 8001638:	4b50      	ldr	r3, [pc, #320]	; (800177c <menu+0x4cc>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d104      	bne.n	800164a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001640:	4a5f      	ldr	r2, [pc, #380]	; (80017c0 <menu+0x510>)
 8001642:	2101      	movs	r1, #1
 8001644:	2002      	movs	r0, #2
 8001646:	f006 fb3b 	bl	8007cc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800164a:	4a5a      	ldr	r2, [pc, #360]	; (80017b4 <menu+0x504>)
 800164c:	210f      	movs	r1, #15
 800164e:	2002      	movs	r0, #2
 8001650:	f006 fb36 	bl	8007cc0 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001654:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <menu+0x514>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	220a      	movs	r2, #10
 800165a:	4953      	ldr	r1, [pc, #332]	; (80017a8 <menu+0x4f8>)
 800165c:	4618      	mov	r0, r3
 800165e:	f00a fe81 	bl	800c364 <itoa>
			lcd_print(2, 14, snum);
 8001662:	4a51      	ldr	r2, [pc, #324]	; (80017a8 <menu+0x4f8>)
 8001664:	210e      	movs	r1, #14
 8001666:	2002      	movs	r0, #2
 8001668:	f006 fb2a 	bl	8007cc0 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800166c:	4b49      	ldr	r3, [pc, #292]	; (8001794 <menu+0x4e4>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d123      	bne.n	80016bc <menu+0x40c>
			if(dilSecim == 0) {
 8001674:	4b41      	ldr	r3, [pc, #260]	; (800177c <menu+0x4cc>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d105      	bne.n	8001688 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800167c:	4a52      	ldr	r2, [pc, #328]	; (80017c8 <menu+0x518>)
 800167e:	2101      	movs	r1, #1
 8001680:	2002      	movs	r0, #2
 8001682:	f006 fb1d 	bl	8007cc0 <lcd_print>
 8001686:	e008      	b.n	800169a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001688:	4b3c      	ldr	r3, [pc, #240]	; (800177c <menu+0x4cc>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d104      	bne.n	800169a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001690:	4a4e      	ldr	r2, [pc, #312]	; (80017cc <menu+0x51c>)
 8001692:	2101      	movs	r1, #1
 8001694:	2002      	movs	r0, #2
 8001696:	f006 fb13 	bl	8007cc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800169a:	4a46      	ldr	r2, [pc, #280]	; (80017b4 <menu+0x504>)
 800169c:	210f      	movs	r1, #15
 800169e:	2002      	movs	r0, #2
 80016a0:	f006 fb0e 	bl	8007cc0 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80016a4:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <menu+0x520>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	220a      	movs	r2, #10
 80016aa:	493f      	ldr	r1, [pc, #252]	; (80017a8 <menu+0x4f8>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00a fe59 	bl	800c364 <itoa>
			lcd_print(2, 14, snum);
 80016b2:	4a3d      	ldr	r2, [pc, #244]	; (80017a8 <menu+0x4f8>)
 80016b4:	210e      	movs	r1, #14
 80016b6:	2002      	movs	r0, #2
 80016b8:	f006 fb02 	bl	8007cc0 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <menu+0x4e4>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d123      	bne.n	800170c <menu+0x45c>
			if(dilSecim == 0) {
 80016c4:	4b2d      	ldr	r3, [pc, #180]	; (800177c <menu+0x4cc>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80016cc:	4a41      	ldr	r2, [pc, #260]	; (80017d4 <menu+0x524>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	2002      	movs	r0, #2
 80016d2:	f006 faf5 	bl	8007cc0 <lcd_print>
 80016d6:	e008      	b.n	80016ea <menu+0x43a>
			} else if(dilSecim == 1) {
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <menu+0x4cc>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d104      	bne.n	80016ea <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80016e0:	4a3d      	ldr	r2, [pc, #244]	; (80017d8 <menu+0x528>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	2002      	movs	r0, #2
 80016e6:	f006 faeb 	bl	8007cc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016ea:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <menu+0x504>)
 80016ec:	210f      	movs	r1, #15
 80016ee:	2002      	movs	r0, #2
 80016f0:	f006 fae6 	bl	8007cc0 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80016f4:	4b39      	ldr	r3, [pc, #228]	; (80017dc <menu+0x52c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	220a      	movs	r2, #10
 80016fa:	492b      	ldr	r1, [pc, #172]	; (80017a8 <menu+0x4f8>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00a fe31 	bl	800c364 <itoa>
			lcd_print(2, 14, snum);
 8001702:	4a29      	ldr	r2, [pc, #164]	; (80017a8 <menu+0x4f8>)
 8001704:	210e      	movs	r1, #14
 8001706:	2002      	movs	r0, #2
 8001708:	f006 fada 	bl	8007cc0 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <menu+0x4e4>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b05      	cmp	r3, #5
 8001712:	d123      	bne.n	800175c <menu+0x4ac>
			if(dilSecim == 0) {
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <menu+0x4cc>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d105      	bne.n	8001728 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 800171c:	4a30      	ldr	r2, [pc, #192]	; (80017e0 <menu+0x530>)
 800171e:	2101      	movs	r1, #1
 8001720:	2002      	movs	r0, #2
 8001722:	f006 facd 	bl	8007cc0 <lcd_print>
 8001726:	e008      	b.n	800173a <menu+0x48a>
			} else if(dilSecim == 1) {
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <menu+0x4cc>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d104      	bne.n	800173a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001730:	4a2c      	ldr	r2, [pc, #176]	; (80017e4 <menu+0x534>)
 8001732:	2101      	movs	r1, #1
 8001734:	2002      	movs	r0, #2
 8001736:	f006 fac3 	bl	8007cc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800173a:	4a1e      	ldr	r2, [pc, #120]	; (80017b4 <menu+0x504>)
 800173c:	210f      	movs	r1, #15
 800173e:	2002      	movs	r0, #2
 8001740:	f006 fabe 	bl	8007cc0 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <menu+0x538>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	220a      	movs	r2, #10
 800174a:	4917      	ldr	r1, [pc, #92]	; (80017a8 <menu+0x4f8>)
 800174c:	4618      	mov	r0, r3
 800174e:	f00a fe09 	bl	800c364 <itoa>
			lcd_print(2, 14, snum);
 8001752:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <menu+0x4f8>)
 8001754:	210e      	movs	r1, #14
 8001756:	2002      	movs	r0, #2
 8001758:	f006 fab2 	bl	8007cc0 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800175c:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <menu+0x4e4>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b06      	cmp	r3, #6
 8001762:	d15f      	bne.n	8001824 <menu+0x574>
			if(dilSecim == 0) {
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <menu+0x4cc>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d141      	bne.n	80017f0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 800176c:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <menu+0x53c>)
 800176e:	2101      	movs	r1, #1
 8001770:	2002      	movs	r0, #2
 8001772:	f006 faa5 	bl	8007cc0 <lcd_print>
 8001776:	e044      	b.n	8001802 <menu+0x552>
 8001778:	0800d088 	.word	0x0800d088
 800177c:	20000245 	.word	0x20000245
 8001780:	0800d09c 	.word	0x0800d09c
 8001784:	0800d0b0 	.word	0x0800d0b0
 8001788:	20000224 	.word	0x20000224
 800178c:	0800d0c4 	.word	0x0800d0c4
 8001790:	0800d0d8 	.word	0x0800d0d8
 8001794:	20000226 	.word	0x20000226
 8001798:	0800d0ec 	.word	0x0800d0ec
 800179c:	0800d0fc 	.word	0x0800d0fc
 80017a0:	0800d10c 	.word	0x0800d10c
 80017a4:	20000246 	.word	0x20000246
 80017a8:	20000198 	.word	0x20000198
 80017ac:	0800d110 	.word	0x0800d110
 80017b0:	0800d120 	.word	0x0800d120
 80017b4:	0800d130 	.word	0x0800d130
 80017b8:	20000247 	.word	0x20000247
 80017bc:	0800d134 	.word	0x0800d134
 80017c0:	0800d144 	.word	0x0800d144
 80017c4:	20000248 	.word	0x20000248
 80017c8:	0800d154 	.word	0x0800d154
 80017cc:	0800d164 	.word	0x0800d164
 80017d0:	20000249 	.word	0x20000249
 80017d4:	0800d174 	.word	0x0800d174
 80017d8:	0800d184 	.word	0x0800d184
 80017dc:	2000024a 	.word	0x2000024a
 80017e0:	0800d194 	.word	0x0800d194
 80017e4:	0800d1a4 	.word	0x0800d1a4
 80017e8:	2000024b 	.word	0x2000024b
 80017ec:	0800d1b4 	.word	0x0800d1b4
			} else if(dilSecim == 1) {
 80017f0:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <menu+0x680>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d104      	bne.n	8001802 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80017f8:	4a4e      	ldr	r2, [pc, #312]	; (8001934 <menu+0x684>)
 80017fa:	2101      	movs	r1, #1
 80017fc:	2002      	movs	r0, #2
 80017fe:	f006 fa5f 	bl	8007cc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001802:	4a4d      	ldr	r2, [pc, #308]	; (8001938 <menu+0x688>)
 8001804:	210f      	movs	r1, #15
 8001806:	2002      	movs	r0, #2
 8001808:	f006 fa5a 	bl	8007cc0 <lcd_print>
			itoa(hataKayit7, snum, 10);
 800180c:	4b4b      	ldr	r3, [pc, #300]	; (800193c <menu+0x68c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	220a      	movs	r2, #10
 8001812:	494b      	ldr	r1, [pc, #300]	; (8001940 <menu+0x690>)
 8001814:	4618      	mov	r0, r3
 8001816:	f00a fda5 	bl	800c364 <itoa>
			lcd_print(2, 14, snum);
 800181a:	4a49      	ldr	r2, [pc, #292]	; (8001940 <menu+0x690>)
 800181c:	210e      	movs	r1, #14
 800181e:	2002      	movs	r0, #2
 8001820:	f006 fa4e 	bl	8007cc0 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001824:	4b47      	ldr	r3, [pc, #284]	; (8001944 <menu+0x694>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b07      	cmp	r3, #7
 800182a:	d123      	bne.n	8001874 <menu+0x5c4>
			if(dilSecim == 0) {
 800182c:	4b40      	ldr	r3, [pc, #256]	; (8001930 <menu+0x680>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001834:	4a44      	ldr	r2, [pc, #272]	; (8001948 <menu+0x698>)
 8001836:	2101      	movs	r1, #1
 8001838:	2002      	movs	r0, #2
 800183a:	f006 fa41 	bl	8007cc0 <lcd_print>
 800183e:	e008      	b.n	8001852 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001840:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <menu+0x680>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d104      	bne.n	8001852 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001848:	4a40      	ldr	r2, [pc, #256]	; (800194c <menu+0x69c>)
 800184a:	2101      	movs	r1, #1
 800184c:	2002      	movs	r0, #2
 800184e:	f006 fa37 	bl	8007cc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001852:	4a39      	ldr	r2, [pc, #228]	; (8001938 <menu+0x688>)
 8001854:	210f      	movs	r1, #15
 8001856:	2002      	movs	r0, #2
 8001858:	f006 fa32 	bl	8007cc0 <lcd_print>
			itoa(hataKayit8, snum, 10);
 800185c:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <menu+0x6a0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	220a      	movs	r2, #10
 8001862:	4937      	ldr	r1, [pc, #220]	; (8001940 <menu+0x690>)
 8001864:	4618      	mov	r0, r3
 8001866:	f00a fd7d 	bl	800c364 <itoa>
			lcd_print(2, 14, snum);
 800186a:	4a35      	ldr	r2, [pc, #212]	; (8001940 <menu+0x690>)
 800186c:	210e      	movs	r1, #14
 800186e:	2002      	movs	r0, #2
 8001870:	f006 fa26 	bl	8007cc0 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001874:	4b33      	ldr	r3, [pc, #204]	; (8001944 <menu+0x694>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b08      	cmp	r3, #8
 800187a:	d123      	bne.n	80018c4 <menu+0x614>
			if(dilSecim == 0) {
 800187c:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <menu+0x680>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d105      	bne.n	8001890 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001884:	4a33      	ldr	r2, [pc, #204]	; (8001954 <menu+0x6a4>)
 8001886:	2101      	movs	r1, #1
 8001888:	2002      	movs	r0, #2
 800188a:	f006 fa19 	bl	8007cc0 <lcd_print>
 800188e:	e008      	b.n	80018a2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <menu+0x680>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d104      	bne.n	80018a2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001898:	4a2f      	ldr	r2, [pc, #188]	; (8001958 <menu+0x6a8>)
 800189a:	2101      	movs	r1, #1
 800189c:	2002      	movs	r0, #2
 800189e:	f006 fa0f 	bl	8007cc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018a2:	4a25      	ldr	r2, [pc, #148]	; (8001938 <menu+0x688>)
 80018a4:	210f      	movs	r1, #15
 80018a6:	2002      	movs	r0, #2
 80018a8:	f006 fa0a 	bl	8007cc0 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80018ac:	4b2b      	ldr	r3, [pc, #172]	; (800195c <menu+0x6ac>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	220a      	movs	r2, #10
 80018b2:	4923      	ldr	r1, [pc, #140]	; (8001940 <menu+0x690>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f00a fd55 	bl	800c364 <itoa>
			lcd_print(2, 14, snum);
 80018ba:	4a21      	ldr	r2, [pc, #132]	; (8001940 <menu+0x690>)
 80018bc:	210e      	movs	r1, #14
 80018be:	2002      	movs	r0, #2
 80018c0:	f006 f9fe 	bl	8007cc0 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80018c4:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <menu+0x694>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b09      	cmp	r3, #9
 80018ca:	d123      	bne.n	8001914 <menu+0x664>
			if(dilSecim == 0) {
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <menu+0x680>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d105      	bne.n	80018e0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80018d4:	4a22      	ldr	r2, [pc, #136]	; (8001960 <menu+0x6b0>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	2002      	movs	r0, #2
 80018da:	f006 f9f1 	bl	8007cc0 <lcd_print>
 80018de:	e008      	b.n	80018f2 <menu+0x642>
			} else if(dilSecim == 1) {
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <menu+0x680>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d104      	bne.n	80018f2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80018e8:	4a1e      	ldr	r2, [pc, #120]	; (8001964 <menu+0x6b4>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	2002      	movs	r0, #2
 80018ee:	f006 f9e7 	bl	8007cc0 <lcd_print>
			}
			lcd_print(2, 16, " ");
 80018f2:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <menu+0x6b8>)
 80018f4:	2110      	movs	r1, #16
 80018f6:	2002      	movs	r0, #2
 80018f8:	f006 f9e2 	bl	8007cc0 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <menu+0x6bc>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	220a      	movs	r2, #10
 8001902:	490f      	ldr	r1, [pc, #60]	; (8001940 <menu+0x690>)
 8001904:	4618      	mov	r0, r3
 8001906:	f00a fd2d 	bl	800c364 <itoa>
			lcd_print(2, 15, snum);
 800190a:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <menu+0x690>)
 800190c:	210f      	movs	r1, #15
 800190e:	2002      	movs	r0, #2
 8001910:	f006 f9d6 	bl	8007cc0 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <menu+0x694>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b0a      	cmp	r3, #10
 800191a:	d134      	bne.n	8001986 <menu+0x6d6>
			if(dilSecim == 0) {
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <menu+0x680>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d127      	bne.n	8001974 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001924:	4a12      	ldr	r2, [pc, #72]	; (8001970 <menu+0x6c0>)
 8001926:	2101      	movs	r1, #1
 8001928:	2002      	movs	r0, #2
 800192a:	f006 f9c9 	bl	8007cc0 <lcd_print>
 800192e:	e02a      	b.n	8001986 <menu+0x6d6>
 8001930:	20000245 	.word	0x20000245
 8001934:	0800d1c4 	.word	0x0800d1c4
 8001938:	0800d130 	.word	0x0800d130
 800193c:	2000024c 	.word	0x2000024c
 8001940:	20000198 	.word	0x20000198
 8001944:	20000226 	.word	0x20000226
 8001948:	0800d1d4 	.word	0x0800d1d4
 800194c:	0800d1e4 	.word	0x0800d1e4
 8001950:	2000024d 	.word	0x2000024d
 8001954:	0800d1f4 	.word	0x0800d1f4
 8001958:	0800d204 	.word	0x0800d204
 800195c:	2000024e 	.word	0x2000024e
 8001960:	0800d214 	.word	0x0800d214
 8001964:	0800d224 	.word	0x0800d224
 8001968:	0800d234 	.word	0x0800d234
 800196c:	2000024f 	.word	0x2000024f
 8001970:	0800d238 	.word	0x0800d238
			} else if(dilSecim == 1) {
 8001974:	4b82      	ldr	r3, [pc, #520]	; (8001b80 <menu+0x8d0>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d104      	bne.n	8001986 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 800197c:	4a81      	ldr	r2, [pc, #516]	; (8001b84 <menu+0x8d4>)
 800197e:	2101      	movs	r1, #1
 8001980:	2002      	movs	r0, #2
 8001982:	f006 f99d 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001986:	2102      	movs	r1, #2
 8001988:	487f      	ldr	r0, [pc, #508]	; (8001b88 <menu+0x8d8>)
 800198a:	f007 fcbf 	bl	800930c <HAL_GPIO_ReadPin>
 800198e:	4603      	mov	r3, r0
 8001990:	2b01      	cmp	r3, #1
 8001992:	d119      	bne.n	80019c8 <menu+0x718>
 8001994:	4b7d      	ldr	r3, [pc, #500]	; (8001b8c <menu+0x8dc>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	f083 0301 	eor.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d012      	beq.n	80019c8 <menu+0x718>
 80019a2:	4b7b      	ldr	r3, [pc, #492]	; (8001b90 <menu+0x8e0>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10e      	bne.n	80019c8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 80019aa:	4b7a      	ldr	r3, [pc, #488]	; (8001b94 <menu+0x8e4>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b78      	ldr	r3, [pc, #480]	; (8001b94 <menu+0x8e4>)
 80019b4:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80019b6:	4b77      	ldr	r3, [pc, #476]	; (8001b94 <menu+0x8e4>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b0a      	cmp	r3, #10
 80019bc:	d902      	bls.n	80019c4 <menu+0x714>
				hataGostermeSirasi = 0;
 80019be:	4b75      	ldr	r3, [pc, #468]	; (8001b94 <menu+0x8e4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019c4:	f003 f83e 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019c8:	2104      	movs	r1, #4
 80019ca:	486f      	ldr	r0, [pc, #444]	; (8001b88 <menu+0x8d8>)
 80019cc:	f007 fc9e 	bl	800930c <HAL_GPIO_ReadPin>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d119      	bne.n	8001a0a <menu+0x75a>
 80019d6:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <menu+0x8dc>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	f083 0301 	eor.w	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d012      	beq.n	8001a0a <menu+0x75a>
 80019e4:	4b6a      	ldr	r3, [pc, #424]	; (8001b90 <menu+0x8e0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10e      	bne.n	8001a0a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80019ec:	4b69      	ldr	r3, [pc, #420]	; (8001b94 <menu+0x8e4>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <menu+0x8e4>)
 80019f6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80019f8:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <menu+0x8e4>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b0b      	cmp	r3, #11
 80019fe:	d902      	bls.n	8001a06 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001a00:	4b64      	ldr	r3, [pc, #400]	; (8001b94 <menu+0x8e4>)
 8001a02:	220a      	movs	r2, #10
 8001a04:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a06:	f003 f81d 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001a0a:	2108      	movs	r1, #8
 8001a0c:	485e      	ldr	r0, [pc, #376]	; (8001b88 <menu+0x8d8>)
 8001a0e:	f007 fc7d 	bl	800930c <HAL_GPIO_ReadPin>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d153      	bne.n	8001ac0 <menu+0x810>
 8001a18:	4b5c      	ldr	r3, [pc, #368]	; (8001b8c <menu+0x8dc>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	f083 0301 	eor.w	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d04c      	beq.n	8001ac0 <menu+0x810>
 8001a26:	4b5b      	ldr	r3, [pc, #364]	; (8001b94 <menu+0x8e4>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b0a      	cmp	r3, #10
 8001a2c:	d148      	bne.n	8001ac0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001a2e:	4b5a      	ldr	r3, [pc, #360]	; (8001b98 <menu+0x8e8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	4b59      	ldr	r3, [pc, #356]	; (8001b9c <menu+0x8ec>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001a3c:	4b58      	ldr	r3, [pc, #352]	; (8001ba0 <menu+0x8f0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	4b56      	ldr	r3, [pc, #344]	; (8001b9c <menu+0x8ec>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001a4a:	4b56      	ldr	r3, [pc, #344]	; (8001ba4 <menu+0x8f4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	4b52      	ldr	r3, [pc, #328]	; (8001b9c <menu+0x8ec>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001a58:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <menu+0x8f8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
 8001a5e:	4b4f      	ldr	r3, [pc, #316]	; (8001b9c <menu+0x8ec>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001a66:	4b51      	ldr	r3, [pc, #324]	; (8001bac <menu+0x8fc>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <menu+0x8ec>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001a74:	4b4e      	ldr	r3, [pc, #312]	; (8001bb0 <menu+0x900>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	4b48      	ldr	r3, [pc, #288]	; (8001b9c <menu+0x8ec>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001a82:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <menu+0x904>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <menu+0x8ec>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001a90:	4b49      	ldr	r3, [pc, #292]	; (8001bb8 <menu+0x908>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <menu+0x8ec>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001a9e:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <menu+0x90c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <menu+0x8ec>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001aac:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <menu+0x910>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <menu+0x8ec>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001aba:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <menu+0x914>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001ac0:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <menu+0x918>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	f040 80fc 	bne.w	8001cc2 <menu+0xa12>
		if(dilSecim == 0) {
 8001aca:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <menu+0x8d0>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d105      	bne.n	8001ade <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001ad2:	4a3e      	ldr	r2, [pc, #248]	; (8001bcc <menu+0x91c>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f006 f8f2 	bl	8007cc0 <lcd_print>
 8001adc:	e008      	b.n	8001af0 <menu+0x840>
		} else if(dilSecim == 1) {
 8001ade:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <menu+0x8d0>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d104      	bne.n	8001af0 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001ae6:	4a3a      	ldr	r2, [pc, #232]	; (8001bd0 <menu+0x920>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	2001      	movs	r0, #1
 8001aec:	f006 f8e8 	bl	8007cc0 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <menu+0x8e0>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d003      	beq.n	8001b00 <menu+0x850>
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <menu+0x8e0>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d112      	bne.n	8001b26 <menu+0x876>
			if(dilSecim == 0) {
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <menu+0x8d0>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d105      	bne.n	8001b14 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001b08:	4a32      	ldr	r2, [pc, #200]	; (8001bd4 <menu+0x924>)
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f006 f8d7 	bl	8007cc0 <lcd_print>
 8001b12:	e008      	b.n	8001b26 <menu+0x876>
			} else if(dilSecim == 1) {
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <menu+0x8d0>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d104      	bne.n	8001b26 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001b1c:	4a2e      	ldr	r2, [pc, #184]	; (8001bd8 <menu+0x928>)
 8001b1e:	2101      	movs	r1, #1
 8001b20:	2002      	movs	r0, #2
 8001b22:	f006 f8cd 	bl	8007cc0 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <menu+0x92c>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d116      	bne.n	8001b5c <menu+0x8ac>
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <menu+0x8e0>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d112      	bne.n	8001b5c <menu+0x8ac>
			if(dilSecim == 0) {
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <menu+0x8d0>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d105      	bne.n	8001b4a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001b3e:	4a28      	ldr	r2, [pc, #160]	; (8001be0 <menu+0x930>)
 8001b40:	2101      	movs	r1, #1
 8001b42:	2002      	movs	r0, #2
 8001b44:	f006 f8bc 	bl	8007cc0 <lcd_print>
 8001b48:	e008      	b.n	8001b5c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <menu+0x8d0>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d104      	bne.n	8001b5c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001b52:	4a24      	ldr	r2, [pc, #144]	; (8001be4 <menu+0x934>)
 8001b54:	2101      	movs	r1, #1
 8001b56:	2002      	movs	r0, #2
 8001b58:	f006 f8b2 	bl	8007cc0 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <menu+0x92c>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d14c      	bne.n	8001bfe <menu+0x94e>
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <menu+0x8e0>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d148      	bne.n	8001bfe <menu+0x94e>
			if(dilSecim == 0) {
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <menu+0x8d0>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d13b      	bne.n	8001bec <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001b74:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <menu+0x938>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f006 f8a1 	bl	8007cc0 <lcd_print>
 8001b7e:	e03e      	b.n	8001bfe <menu+0x94e>
 8001b80:	20000245 	.word	0x20000245
 8001b84:	0800d24c 	.word	0x0800d24c
 8001b88:	40010800 	.word	0x40010800
 8001b8c:	20000253 	.word	0x20000253
 8001b90:	20000233 	.word	0x20000233
 8001b94:	20000226 	.word	0x20000226
 8001b98:	20000246 	.word	0x20000246
 8001b9c:	20000128 	.word	0x20000128
 8001ba0:	20000247 	.word	0x20000247
 8001ba4:	20000248 	.word	0x20000248
 8001ba8:	20000249 	.word	0x20000249
 8001bac:	2000024a 	.word	0x2000024a
 8001bb0:	2000024b 	.word	0x2000024b
 8001bb4:	2000024c 	.word	0x2000024c
 8001bb8:	2000024d 	.word	0x2000024d
 8001bbc:	2000024e 	.word	0x2000024e
 8001bc0:	2000024f 	.word	0x2000024f
 8001bc4:	20000250 	.word	0x20000250
 8001bc8:	20000224 	.word	0x20000224
 8001bcc:	0800d260 	.word	0x0800d260
 8001bd0:	0800d274 	.word	0x0800d274
 8001bd4:	0800d288 	.word	0x0800d288
 8001bd8:	0800d29c 	.word	0x0800d29c
 8001bdc:	20000225 	.word	0x20000225
 8001be0:	0800d2b0 	.word	0x0800d2b0
 8001be4:	0800d2c0 	.word	0x0800d2c0
 8001be8:	0800d2d0 	.word	0x0800d2d0
			} else if(dilSecim == 1) {
 8001bec:	4b98      	ldr	r3, [pc, #608]	; (8001e50 <menu+0xba0>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d104      	bne.n	8001bfe <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001bf4:	4a97      	ldr	r2, [pc, #604]	; (8001e54 <menu+0xba4>)
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f006 f861 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bfe:	2102      	movs	r1, #2
 8001c00:	4895      	ldr	r0, [pc, #596]	; (8001e58 <menu+0xba8>)
 8001c02:	f007 fb83 	bl	800930c <HAL_GPIO_ReadPin>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d119      	bne.n	8001c40 <menu+0x990>
 8001c0c:	4b93      	ldr	r3, [pc, #588]	; (8001e5c <menu+0xbac>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	f083 0301 	eor.w	r3, r3, #1
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d012      	beq.n	8001c40 <menu+0x990>
 8001c1a:	4b91      	ldr	r3, [pc, #580]	; (8001e60 <menu+0xbb0>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10e      	bne.n	8001c40 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001c22:	4b90      	ldr	r3, [pc, #576]	; (8001e64 <menu+0xbb4>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4b8e      	ldr	r3, [pc, #568]	; (8001e64 <menu+0xbb4>)
 8001c2c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001c2e:	4b8d      	ldr	r3, [pc, #564]	; (8001e64 <menu+0xbb4>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d902      	bls.n	8001c3c <menu+0x98c>
				calismaSekli = 0;
 8001c36:	4b8b      	ldr	r3, [pc, #556]	; (8001e64 <menu+0xbb4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c3c:	f002 ff02 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c40:	2104      	movs	r1, #4
 8001c42:	4885      	ldr	r0, [pc, #532]	; (8001e58 <menu+0xba8>)
 8001c44:	f007 fb62 	bl	800930c <HAL_GPIO_ReadPin>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d119      	bne.n	8001c82 <menu+0x9d2>
 8001c4e:	4b83      	ldr	r3, [pc, #524]	; (8001e5c <menu+0xbac>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	f083 0301 	eor.w	r3, r3, #1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d012      	beq.n	8001c82 <menu+0x9d2>
 8001c5c:	4b80      	ldr	r3, [pc, #512]	; (8001e60 <menu+0xbb0>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10e      	bne.n	8001c82 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001c64:	4b7f      	ldr	r3, [pc, #508]	; (8001e64 <menu+0xbb4>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4b7d      	ldr	r3, [pc, #500]	; (8001e64 <menu+0xbb4>)
 8001c6e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001c70:	4b7c      	ldr	r3, [pc, #496]	; (8001e64 <menu+0xbb4>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <menu+0x9ce>
	    		calismaSekli = 1;
 8001c78:	4b7a      	ldr	r3, [pc, #488]	; (8001e64 <menu+0xbb4>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001c7e:	f002 fee1 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c82:	2108      	movs	r1, #8
 8001c84:	4874      	ldr	r0, [pc, #464]	; (8001e58 <menu+0xba8>)
 8001c86:	f007 fb41 	bl	800930c <HAL_GPIO_ReadPin>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d118      	bne.n	8001cc2 <menu+0xa12>
 8001c90:	4b72      	ldr	r3, [pc, #456]	; (8001e5c <menu+0xbac>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	f083 0301 	eor.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d011      	beq.n	8001cc2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001c9e:	4b71      	ldr	r3, [pc, #452]	; (8001e64 <menu+0xbb4>)
 8001ca0:	781a      	ldrb	r2, [r3, #0]
 8001ca2:	4b71      	ldr	r3, [pc, #452]	; (8001e68 <menu+0xbb8>)
 8001ca4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001ca6:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <menu+0xbb4>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d106      	bne.n	8001cbc <menu+0xa0c>
				altLimit = 1;
 8001cae:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <menu+0xbbc>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001cb4:	4b6d      	ldr	r3, [pc, #436]	; (8001e6c <menu+0xbbc>)
 8001cb6:	781a      	ldrb	r2, [r3, #0]
 8001cb8:	4b6b      	ldr	r3, [pc, #428]	; (8001e68 <menu+0xbb8>)
 8001cba:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001cbc:	4b6c      	ldr	r3, [pc, #432]	; (8001e70 <menu+0xbc0>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001cc2:	4b6c      	ldr	r3, [pc, #432]	; (8001e74 <menu+0xbc4>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	f040 8083 	bne.w	8001dd2 <menu+0xb22>
		if(dilSecim == 0) {
 8001ccc:	4b60      	ldr	r3, [pc, #384]	; (8001e50 <menu+0xba0>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001cd4:	4a68      	ldr	r2, [pc, #416]	; (8001e78 <menu+0xbc8>)
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f005 fff1 	bl	8007cc0 <lcd_print>
 8001cde:	e008      	b.n	8001cf2 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001ce0:	4b5b      	ldr	r3, [pc, #364]	; (8001e50 <menu+0xba0>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d104      	bne.n	8001cf2 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001ce8:	4a64      	ldr	r2, [pc, #400]	; (8001e7c <menu+0xbcc>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	2001      	movs	r0, #1
 8001cee:	f005 ffe7 	bl	8007cc0 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001cf2:	4b63      	ldr	r3, [pc, #396]	; (8001e80 <menu+0xbd0>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d113      	bne.n	8001d22 <menu+0xa72>
			if(dilSecim == 0) {
 8001cfa:	4b55      	ldr	r3, [pc, #340]	; (8001e50 <menu+0xba0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d105      	bne.n	8001d0e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001d02:	4a60      	ldr	r2, [pc, #384]	; (8001e84 <menu+0xbd4>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	2002      	movs	r0, #2
 8001d08:	f005 ffda 	bl	8007cc0 <lcd_print>
 8001d0c:	e012      	b.n	8001d34 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001d0e:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <menu+0xba0>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d10e      	bne.n	8001d34 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001d16:	4a5c      	ldr	r2, [pc, #368]	; (8001e88 <menu+0xbd8>)
 8001d18:	2101      	movs	r1, #1
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f005 ffd0 	bl	8007cc0 <lcd_print>
 8001d20:	e008      	b.n	8001d34 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001d22:	4b57      	ldr	r3, [pc, #348]	; (8001e80 <menu+0xbd0>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d104      	bne.n	8001d34 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001d2a:	4a58      	ldr	r2, [pc, #352]	; (8001e8c <menu+0xbdc>)
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f005 ffc6 	bl	8007cc0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d34:	2102      	movs	r1, #2
 8001d36:	4848      	ldr	r0, [pc, #288]	; (8001e58 <menu+0xba8>)
 8001d38:	f007 fae8 	bl	800930c <HAL_GPIO_ReadPin>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d115      	bne.n	8001d6e <menu+0xabe>
 8001d42:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <menu+0xbac>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	f083 0301 	eor.w	r3, r3, #1
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00e      	beq.n	8001d6e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001d50:	4b4b      	ldr	r3, [pc, #300]	; (8001e80 <menu+0xbd0>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <menu+0xbd0>)
 8001d5a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001d5c:	4b48      	ldr	r3, [pc, #288]	; (8001e80 <menu+0xbd0>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d902      	bls.n	8001d6a <menu+0xaba>
				emniyetCercevesi = 0;
 8001d64:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <menu+0xbd0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d6a:	f002 fe6b 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d6e:	2104      	movs	r1, #4
 8001d70:	4839      	ldr	r0, [pc, #228]	; (8001e58 <menu+0xba8>)
 8001d72:	f007 facb 	bl	800930c <HAL_GPIO_ReadPin>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d115      	bne.n	8001da8 <menu+0xaf8>
 8001d7c:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <menu+0xbac>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	f083 0301 	eor.w	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00e      	beq.n	8001da8 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <menu+0xbd0>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <menu+0xbd0>)
 8001d94:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001d96:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <menu+0xbd0>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001d9e:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <menu+0xbd0>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001da4:	f002 fe4e 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001da8:	2108      	movs	r1, #8
 8001daa:	482b      	ldr	r0, [pc, #172]	; (8001e58 <menu+0xba8>)
 8001dac:	f007 faae 	bl	800930c <HAL_GPIO_ReadPin>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d10d      	bne.n	8001dd2 <menu+0xb22>
 8001db6:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <menu+0xbac>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	f083 0301 	eor.w	r3, r3, #1
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <menu+0xbd0>)
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <menu+0xbb8>)
 8001dca:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001dcc:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <menu+0xbc0>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001dd2:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <menu+0xbc4>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	f040 80ba 	bne.w	8001f50 <menu+0xca0>
		if(dilSecim == 0) {
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <menu+0xba0>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001de4:	4a2a      	ldr	r2, [pc, #168]	; (8001e90 <menu+0xbe0>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	2001      	movs	r0, #1
 8001dea:	f005 ff69 	bl	8007cc0 <lcd_print>
 8001dee:	e008      	b.n	8001e02 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001df0:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <menu+0xba0>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d104      	bne.n	8001e02 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001df8:	4a26      	ldr	r2, [pc, #152]	; (8001e94 <menu+0xbe4>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f005 ff5f 	bl	8007cc0 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001e02:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <menu+0xbe8>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d113      	bne.n	8001e32 <menu+0xb82>
			if(dilSecim == 0) {
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <menu+0xba0>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d105      	bne.n	8001e1e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001e12:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <menu+0xbd4>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	2002      	movs	r0, #2
 8001e18:	f005 ff52 	bl	8007cc0 <lcd_print>
 8001e1c:	e049      	b.n	8001eb2 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <menu+0xba0>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d145      	bne.n	8001eb2 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001e26:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <menu+0xbd8>)
 8001e28:	2101      	movs	r1, #1
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	f005 ff48 	bl	8007cc0 <lcd_print>
 8001e30:	e03f      	b.n	8001eb2 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <menu+0xbe8>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d13b      	bne.n	8001eb2 <menu+0xc02>
			if(dilSecim == 0) {
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <menu+0xba0>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d12e      	bne.n	8001ea0 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001e42:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <menu+0xbec>)
 8001e44:	2101      	movs	r1, #1
 8001e46:	2002      	movs	r0, #2
 8001e48:	f005 ff3a 	bl	8007cc0 <lcd_print>
 8001e4c:	e031      	b.n	8001eb2 <menu+0xc02>
 8001e4e:	bf00      	nop
 8001e50:	20000245 	.word	0x20000245
 8001e54:	0800d2e0 	.word	0x0800d2e0
 8001e58:	40010800 	.word	0x40010800
 8001e5c:	20000253 	.word	0x20000253
 8001e60:	20000233 	.word	0x20000233
 8001e64:	20000225 	.word	0x20000225
 8001e68:	20000128 	.word	0x20000128
 8001e6c:	2000022a 	.word	0x2000022a
 8001e70:	20000250 	.word	0x20000250
 8001e74:	20000224 	.word	0x20000224
 8001e78:	0800d2f0 	.word	0x0800d2f0
 8001e7c:	0800d304 	.word	0x0800d304
 8001e80:	20000228 	.word	0x20000228
 8001e84:	0800d318 	.word	0x0800d318
 8001e88:	0800d32c 	.word	0x0800d32c
 8001e8c:	0800d340 	.word	0x0800d340
 8001e90:	0800d350 	.word	0x0800d350
 8001e94:	0800d364 	.word	0x0800d364
 8001e98:	20000229 	.word	0x20000229
 8001e9c:	0800d378 	.word	0x0800d378
			} else if(dilSecim == 1) {
 8001ea0:	4b92      	ldr	r3, [pc, #584]	; (80020ec <menu+0xe3c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d104      	bne.n	8001eb2 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001ea8:	4a91      	ldr	r2, [pc, #580]	; (80020f0 <menu+0xe40>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2002      	movs	r0, #2
 8001eae:	f005 ff07 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	488f      	ldr	r0, [pc, #572]	; (80020f4 <menu+0xe44>)
 8001eb6:	f007 fa29 	bl	800930c <HAL_GPIO_ReadPin>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d115      	bne.n	8001eec <menu+0xc3c>
 8001ec0:	4b8d      	ldr	r3, [pc, #564]	; (80020f8 <menu+0xe48>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	f083 0301 	eor.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00e      	beq.n	8001eec <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001ece:	4b8b      	ldr	r3, [pc, #556]	; (80020fc <menu+0xe4c>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4b89      	ldr	r3, [pc, #548]	; (80020fc <menu+0xe4c>)
 8001ed8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001eda:	4b88      	ldr	r3, [pc, #544]	; (80020fc <menu+0xe4c>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d902      	bls.n	8001ee8 <menu+0xc38>
				yavaslamaLimit = 0;
 8001ee2:	4b86      	ldr	r3, [pc, #536]	; (80020fc <menu+0xe4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ee8:	f002 fdac 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eec:	2104      	movs	r1, #4
 8001eee:	4881      	ldr	r0, [pc, #516]	; (80020f4 <menu+0xe44>)
 8001ef0:	f007 fa0c 	bl	800930c <HAL_GPIO_ReadPin>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d115      	bne.n	8001f26 <menu+0xc76>
 8001efa:	4b7f      	ldr	r3, [pc, #508]	; (80020f8 <menu+0xe48>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	f083 0301 	eor.w	r3, r3, #1
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00e      	beq.n	8001f26 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001f08:	4b7c      	ldr	r3, [pc, #496]	; (80020fc <menu+0xe4c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b7a      	ldr	r3, [pc, #488]	; (80020fc <menu+0xe4c>)
 8001f12:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001f14:	4b79      	ldr	r3, [pc, #484]	; (80020fc <menu+0xe4c>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001f1c:	4b77      	ldr	r3, [pc, #476]	; (80020fc <menu+0xe4c>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f22:	f002 fd8f 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f26:	2108      	movs	r1, #8
 8001f28:	4872      	ldr	r0, [pc, #456]	; (80020f4 <menu+0xe44>)
 8001f2a:	f007 f9ef 	bl	800930c <HAL_GPIO_ReadPin>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d10d      	bne.n	8001f50 <menu+0xca0>
 8001f34:	4b70      	ldr	r3, [pc, #448]	; (80020f8 <menu+0xe48>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	f083 0301 	eor.w	r3, r3, #1
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001f42:	4b6e      	ldr	r3, [pc, #440]	; (80020fc <menu+0xe4c>)
 8001f44:	781a      	ldrb	r2, [r3, #0]
 8001f46:	4b6e      	ldr	r3, [pc, #440]	; (8002100 <menu+0xe50>)
 8001f48:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001f4a:	4b6e      	ldr	r3, [pc, #440]	; (8002104 <menu+0xe54>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001f50:	4b6d      	ldr	r3, [pc, #436]	; (8002108 <menu+0xe58>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	f040 80b9 	bne.w	80020cc <menu+0xe1c>
		if(dilSecim == 0) {
 8001f5a:	4b64      	ldr	r3, [pc, #400]	; (80020ec <menu+0xe3c>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d105      	bne.n	8001f6e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001f62:	4a6a      	ldr	r2, [pc, #424]	; (800210c <menu+0xe5c>)
 8001f64:	2101      	movs	r1, #1
 8001f66:	2001      	movs	r0, #1
 8001f68:	f005 feaa 	bl	8007cc0 <lcd_print>
 8001f6c:	e008      	b.n	8001f80 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001f6e:	4b5f      	ldr	r3, [pc, #380]	; (80020ec <menu+0xe3c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d104      	bne.n	8001f80 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001f76:	4a66      	ldr	r2, [pc, #408]	; (8002110 <menu+0xe60>)
 8001f78:	2101      	movs	r1, #1
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f005 fea0 	bl	8007cc0 <lcd_print>
		}

		if(altLimit == 0) {
 8001f80:	4b64      	ldr	r3, [pc, #400]	; (8002114 <menu+0xe64>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d113      	bne.n	8001fb0 <menu+0xd00>
			if(dilSecim == 0) {
 8001f88:	4b58      	ldr	r3, [pc, #352]	; (80020ec <menu+0xe3c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001f90:	4a61      	ldr	r2, [pc, #388]	; (8002118 <menu+0xe68>)
 8001f92:	2101      	movs	r1, #1
 8001f94:	2002      	movs	r0, #2
 8001f96:	f005 fe93 	bl	8007cc0 <lcd_print>
 8001f9a:	e020      	b.n	8001fde <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <menu+0xe3c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d11c      	bne.n	8001fde <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001fa4:	4a5d      	ldr	r2, [pc, #372]	; (800211c <menu+0xe6c>)
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	2002      	movs	r0, #2
 8001faa:	f005 fe89 	bl	8007cc0 <lcd_print>
 8001fae:	e016      	b.n	8001fde <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001fb0:	4b58      	ldr	r3, [pc, #352]	; (8002114 <menu+0xe64>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d112      	bne.n	8001fde <menu+0xd2e>
			if(dilSecim == 0){
 8001fb8:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <menu+0xe3c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001fc0:	4a57      	ldr	r2, [pc, #348]	; (8002120 <menu+0xe70>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f005 fe7b 	bl	8007cc0 <lcd_print>
 8001fca:	e008      	b.n	8001fde <menu+0xd2e>
			} else if(dilSecim == 1){
 8001fcc:	4b47      	ldr	r3, [pc, #284]	; (80020ec <menu+0xe3c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d104      	bne.n	8001fde <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001fd4:	4a46      	ldr	r2, [pc, #280]	; (80020f0 <menu+0xe40>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	2002      	movs	r0, #2
 8001fda:	f005 fe71 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001fde:	2102      	movs	r1, #2
 8001fe0:	4844      	ldr	r0, [pc, #272]	; (80020f4 <menu+0xe44>)
 8001fe2:	f007 f993 	bl	800930c <HAL_GPIO_ReadPin>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d119      	bne.n	8002020 <menu+0xd70>
 8001fec:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <menu+0xe48>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	f083 0301 	eor.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d012      	beq.n	8002020 <menu+0xd70>
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <menu+0xe74>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10e      	bne.n	8002020 <menu+0xd70>
			altLimit = altLimit + 1;
 8002002:	4b44      	ldr	r3, [pc, #272]	; (8002114 <menu+0xe64>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	3301      	adds	r3, #1
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b42      	ldr	r3, [pc, #264]	; (8002114 <menu+0xe64>)
 800200c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800200e:	4b41      	ldr	r3, [pc, #260]	; (8002114 <menu+0xe64>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d902      	bls.n	800201c <menu+0xd6c>
				altLimit = 0;
 8002016:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <menu+0xe64>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800201c:	f002 fd12 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002020:	2104      	movs	r1, #4
 8002022:	4834      	ldr	r0, [pc, #208]	; (80020f4 <menu+0xe44>)
 8002024:	f007 f972 	bl	800930c <HAL_GPIO_ReadPin>
 8002028:	4603      	mov	r3, r0
 800202a:	2b01      	cmp	r3, #1
 800202c:	d119      	bne.n	8002062 <menu+0xdb2>
 800202e:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <menu+0xe48>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	f083 0301 	eor.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d012      	beq.n	8002062 <menu+0xdb2>
 800203c:	4b39      	ldr	r3, [pc, #228]	; (8002124 <menu+0xe74>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10e      	bne.n	8002062 <menu+0xdb2>
			altLimit = altLimit - 1;
 8002044:	4b33      	ldr	r3, [pc, #204]	; (8002114 <menu+0xe64>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	3b01      	subs	r3, #1
 800204a:	b2da      	uxtb	r2, r3
 800204c:	4b31      	ldr	r3, [pc, #196]	; (8002114 <menu+0xe64>)
 800204e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002050:	4b30      	ldr	r3, [pc, #192]	; (8002114 <menu+0xe64>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <menu+0xdae>
		   		altLimit = 1;
 8002058:	4b2e      	ldr	r3, [pc, #184]	; (8002114 <menu+0xe64>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800205e:	f002 fcf1 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002062:	2108      	movs	r1, #8
 8002064:	4823      	ldr	r0, [pc, #140]	; (80020f4 <menu+0xe44>)
 8002066:	f007 f951 	bl	800930c <HAL_GPIO_ReadPin>
 800206a:	4603      	mov	r3, r0
 800206c:	2b01      	cmp	r3, #1
 800206e:	d12d      	bne.n	80020cc <menu+0xe1c>
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <menu+0xe48>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	f083 0301 	eor.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d026      	beq.n	80020cc <menu+0xe1c>
			eepromData[5] = altLimit;
 800207e:	4b25      	ldr	r3, [pc, #148]	; (8002114 <menu+0xe64>)
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <menu+0xe50>)
 8002084:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <menu+0xe64>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d110      	bne.n	80020b0 <menu+0xe00>
 800208e:	4b26      	ldr	r3, [pc, #152]	; (8002128 <menu+0xe78>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <menu+0xdee>
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <menu+0xe78>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d108      	bne.n	80020b0 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <menu+0xe78>)
 80020a0:	2203      	movs	r2, #3
 80020a2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80020a4:	4b20      	ldr	r3, [pc, #128]	; (8002128 <menu+0xe78>)
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <menu+0xe50>)
 80020aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80020ae:	e00a      	b.n	80020c6 <menu+0xe16>
			} else if(altLimit == 0) {
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <menu+0xe64>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d106      	bne.n	80020c6 <menu+0xe16>
				platformSilindirTipi = 0;
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <menu+0xe7c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <menu+0xe7c>)
 80020c0:	781a      	ldrb	r2, [r3, #0]
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <menu+0xe50>)
 80020c4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80020c6:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <menu+0xe54>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <menu+0xe58>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	f040 80b6 	bne.w	8002242 <menu+0xf92>
		if(dilSecim == 0) {
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <menu+0xe3c>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d12a      	bne.n	8002134 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80020de:	4a14      	ldr	r2, [pc, #80]	; (8002130 <menu+0xe80>)
 80020e0:	2101      	movs	r1, #1
 80020e2:	2001      	movs	r0, #1
 80020e4:	f005 fdec 	bl	8007cc0 <lcd_print>
 80020e8:	e02d      	b.n	8002146 <menu+0xe96>
 80020ea:	bf00      	nop
 80020ec:	20000245 	.word	0x20000245
 80020f0:	0800d38c 	.word	0x0800d38c
 80020f4:	40010800 	.word	0x40010800
 80020f8:	20000253 	.word	0x20000253
 80020fc:	20000229 	.word	0x20000229
 8002100:	20000128 	.word	0x20000128
 8002104:	20000250 	.word	0x20000250
 8002108:	20000224 	.word	0x20000224
 800210c:	0800d3a0 	.word	0x0800d3a0
 8002110:	0800d3b4 	.word	0x0800d3b4
 8002114:	2000022a 	.word	0x2000022a
 8002118:	0800d318 	.word	0x0800d318
 800211c:	0800d32c 	.word	0x0800d32c
 8002120:	0800d378 	.word	0x0800d378
 8002124:	20000225 	.word	0x20000225
 8002128:	20000231 	.word	0x20000231
 800212c:	20000237 	.word	0x20000237
 8002130:	0800d3c8 	.word	0x0800d3c8
		} else if(dilSecim == 1){
 8002134:	4b7a      	ldr	r3, [pc, #488]	; (8002320 <menu+0x1070>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d104      	bne.n	8002146 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800213c:	4a79      	ldr	r2, [pc, #484]	; (8002324 <menu+0x1074>)
 800213e:	2101      	movs	r1, #1
 8002140:	2001      	movs	r0, #1
 8002142:	f005 fdbd 	bl	8007cc0 <lcd_print>
		}
		if(basincSalteri == 0){
 8002146:	4b78      	ldr	r3, [pc, #480]	; (8002328 <menu+0x1078>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d113      	bne.n	8002176 <menu+0xec6>
			if(dilSecim == 0) {
 800214e:	4b74      	ldr	r3, [pc, #464]	; (8002320 <menu+0x1070>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002156:	4a75      	ldr	r2, [pc, #468]	; (800232c <menu+0x107c>)
 8002158:	2101      	movs	r1, #1
 800215a:	2002      	movs	r0, #2
 800215c:	f005 fdb0 	bl	8007cc0 <lcd_print>
 8002160:	e020      	b.n	80021a4 <menu+0xef4>
			} else if(dilSecim == 1){
 8002162:	4b6f      	ldr	r3, [pc, #444]	; (8002320 <menu+0x1070>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d11c      	bne.n	80021a4 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800216a:	4a71      	ldr	r2, [pc, #452]	; (8002330 <menu+0x1080>)
 800216c:	2101      	movs	r1, #1
 800216e:	2002      	movs	r0, #2
 8002170:	f005 fda6 	bl	8007cc0 <lcd_print>
 8002174:	e016      	b.n	80021a4 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002176:	4b6c      	ldr	r3, [pc, #432]	; (8002328 <menu+0x1078>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d112      	bne.n	80021a4 <menu+0xef4>
			if(dilSecim == 0) {
 800217e:	4b68      	ldr	r3, [pc, #416]	; (8002320 <menu+0x1070>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002186:	4a6b      	ldr	r2, [pc, #428]	; (8002334 <menu+0x1084>)
 8002188:	2101      	movs	r1, #1
 800218a:	2002      	movs	r0, #2
 800218c:	f005 fd98 	bl	8007cc0 <lcd_print>
 8002190:	e008      	b.n	80021a4 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002192:	4b63      	ldr	r3, [pc, #396]	; (8002320 <menu+0x1070>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d104      	bne.n	80021a4 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800219a:	4a67      	ldr	r2, [pc, #412]	; (8002338 <menu+0x1088>)
 800219c:	2101      	movs	r1, #1
 800219e:	2002      	movs	r0, #2
 80021a0:	f005 fd8e 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021a4:	2102      	movs	r1, #2
 80021a6:	4865      	ldr	r0, [pc, #404]	; (800233c <menu+0x108c>)
 80021a8:	f007 f8b0 	bl	800930c <HAL_GPIO_ReadPin>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d115      	bne.n	80021de <menu+0xf2e>
 80021b2:	4b63      	ldr	r3, [pc, #396]	; (8002340 <menu+0x1090>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	f083 0301 	eor.w	r3, r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00e      	beq.n	80021de <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80021c0:	4b59      	ldr	r3, [pc, #356]	; (8002328 <menu+0x1078>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	3301      	adds	r3, #1
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	4b57      	ldr	r3, [pc, #348]	; (8002328 <menu+0x1078>)
 80021ca:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80021cc:	4b56      	ldr	r3, [pc, #344]	; (8002328 <menu+0x1078>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d902      	bls.n	80021da <menu+0xf2a>
				basincSalteri = 0;
 80021d4:	4b54      	ldr	r3, [pc, #336]	; (8002328 <menu+0x1078>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021da:	f002 fc33 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021de:	2104      	movs	r1, #4
 80021e0:	4856      	ldr	r0, [pc, #344]	; (800233c <menu+0x108c>)
 80021e2:	f007 f893 	bl	800930c <HAL_GPIO_ReadPin>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d115      	bne.n	8002218 <menu+0xf68>
 80021ec:	4b54      	ldr	r3, [pc, #336]	; (8002340 <menu+0x1090>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	f083 0301 	eor.w	r3, r3, #1
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00e      	beq.n	8002218 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80021fa:	4b4b      	ldr	r3, [pc, #300]	; (8002328 <menu+0x1078>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	3b01      	subs	r3, #1
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4b49      	ldr	r3, [pc, #292]	; (8002328 <menu+0x1078>)
 8002204:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002206:	4b48      	ldr	r3, [pc, #288]	; (8002328 <menu+0x1078>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <menu+0xf64>
		   		basincSalteri = 1;
 800220e:	4b46      	ldr	r3, [pc, #280]	; (8002328 <menu+0x1078>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002214:	f002 fc16 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002218:	2108      	movs	r1, #8
 800221a:	4848      	ldr	r0, [pc, #288]	; (800233c <menu+0x108c>)
 800221c:	f007 f876 	bl	800930c <HAL_GPIO_ReadPin>
 8002220:	4603      	mov	r3, r0
 8002222:	2b01      	cmp	r3, #1
 8002224:	d10d      	bne.n	8002242 <menu+0xf92>
 8002226:	4b46      	ldr	r3, [pc, #280]	; (8002340 <menu+0x1090>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	f083 0301 	eor.w	r3, r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002234:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <menu+0x1078>)
 8002236:	781a      	ldrb	r2, [r3, #0]
 8002238:	4b42      	ldr	r3, [pc, #264]	; (8002344 <menu+0x1094>)
 800223a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800223c:	4b42      	ldr	r3, [pc, #264]	; (8002348 <menu+0x1098>)
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002242:	4b42      	ldr	r3, [pc, #264]	; (800234c <menu+0x109c>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b07      	cmp	r3, #7
 8002248:	f040 80f5 	bne.w	8002436 <menu+0x1186>
		if(dilSecim == 0) {
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <menu+0x1070>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d105      	bne.n	8002260 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002254:	4a3e      	ldr	r2, [pc, #248]	; (8002350 <menu+0x10a0>)
 8002256:	2101      	movs	r1, #1
 8002258:	2001      	movs	r0, #1
 800225a:	f005 fd31 	bl	8007cc0 <lcd_print>
 800225e:	e008      	b.n	8002272 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002260:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <menu+0x1070>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d104      	bne.n	8002272 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002268:	4a3a      	ldr	r2, [pc, #232]	; (8002354 <menu+0x10a4>)
 800226a:	2101      	movs	r1, #1
 800226c:	2001      	movs	r0, #1
 800226e:	f005 fd27 	bl	8007cc0 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002272:	4b39      	ldr	r3, [pc, #228]	; (8002358 <menu+0x10a8>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d113      	bne.n	80022a2 <menu+0xff2>
			if(dilSecim == 0) {
 800227a:	4b29      	ldr	r3, [pc, #164]	; (8002320 <menu+0x1070>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002282:	4a2a      	ldr	r2, [pc, #168]	; (800232c <menu+0x107c>)
 8002284:	2101      	movs	r1, #1
 8002286:	2002      	movs	r0, #2
 8002288:	f005 fd1a 	bl	8007cc0 <lcd_print>
 800228c:	e079      	b.n	8002382 <menu+0x10d2>
			} else if(dilSecim == 1){
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <menu+0x1070>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d175      	bne.n	8002382 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002296:	4a26      	ldr	r2, [pc, #152]	; (8002330 <menu+0x1080>)
 8002298:	2101      	movs	r1, #1
 800229a:	2002      	movs	r0, #2
 800229c:	f005 fd10 	bl	8007cc0 <lcd_print>
 80022a0:	e06f      	b.n	8002382 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80022a2:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <menu+0x10a8>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d113      	bne.n	80022d2 <menu+0x1022>
			if(dilSecim == 0) {
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <menu+0x1070>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80022b2:	4a2a      	ldr	r2, [pc, #168]	; (800235c <menu+0x10ac>)
 80022b4:	2101      	movs	r1, #1
 80022b6:	2002      	movs	r0, #2
 80022b8:	f005 fd02 	bl	8007cc0 <lcd_print>
 80022bc:	e061      	b.n	8002382 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <menu+0x1070>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d15d      	bne.n	8002382 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80022c6:	4a26      	ldr	r2, [pc, #152]	; (8002360 <menu+0x10b0>)
 80022c8:	2101      	movs	r1, #1
 80022ca:	2002      	movs	r0, #2
 80022cc:	f005 fcf8 	bl	8007cc0 <lcd_print>
 80022d0:	e057      	b.n	8002382 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <menu+0x10a8>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d113      	bne.n	8002302 <menu+0x1052>
			if(dilSecim == 0) {
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <menu+0x1070>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d105      	bne.n	80022ee <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80022e2:	4a20      	ldr	r2, [pc, #128]	; (8002364 <menu+0x10b4>)
 80022e4:	2101      	movs	r1, #1
 80022e6:	2002      	movs	r0, #2
 80022e8:	f005 fcea 	bl	8007cc0 <lcd_print>
 80022ec:	e049      	b.n	8002382 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <menu+0x1070>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d145      	bne.n	8002382 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80022f6:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <menu+0x10b8>)
 80022f8:	2101      	movs	r1, #1
 80022fa:	2002      	movs	r0, #2
 80022fc:	f005 fce0 	bl	8007cc0 <lcd_print>
 8002300:	e03f      	b.n	8002382 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <menu+0x10a8>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d13b      	bne.n	8002382 <menu+0x10d2>
			if(dilSecim == 0) {
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <menu+0x1070>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d12e      	bne.n	8002370 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002312:	4a16      	ldr	r2, [pc, #88]	; (800236c <menu+0x10bc>)
 8002314:	2101      	movs	r1, #1
 8002316:	2002      	movs	r0, #2
 8002318:	f005 fcd2 	bl	8007cc0 <lcd_print>
 800231c:	e031      	b.n	8002382 <menu+0x10d2>
 800231e:	bf00      	nop
 8002320:	20000245 	.word	0x20000245
 8002324:	0800d3d8 	.word	0x0800d3d8
 8002328:	2000022b 	.word	0x2000022b
 800232c:	0800d318 	.word	0x0800d318
 8002330:	0800d32c 	.word	0x0800d32c
 8002334:	0800d378 	.word	0x0800d378
 8002338:	0800d38c 	.word	0x0800d38c
 800233c:	40010800 	.word	0x40010800
 8002340:	20000253 	.word	0x20000253
 8002344:	20000128 	.word	0x20000128
 8002348:	20000250 	.word	0x20000250
 800234c:	20000224 	.word	0x20000224
 8002350:	0800d3e8 	.word	0x0800d3e8
 8002354:	0800d3fc 	.word	0x0800d3fc
 8002358:	2000022c 	.word	0x2000022c
 800235c:	0800d410 	.word	0x0800d410
 8002360:	0800d424 	.word	0x0800d424
 8002364:	0800d438 	.word	0x0800d438
 8002368:	0800d44c 	.word	0x0800d44c
 800236c:	0800d460 	.word	0x0800d460
			} else if(dilSecim == 1){
 8002370:	4b99      	ldr	r3, [pc, #612]	; (80025d8 <menu+0x1328>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d104      	bne.n	8002382 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002378:	4a98      	ldr	r2, [pc, #608]	; (80025dc <menu+0x132c>)
 800237a:	2101      	movs	r1, #1
 800237c:	2002      	movs	r0, #2
 800237e:	f005 fc9f 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002382:	2102      	movs	r1, #2
 8002384:	4896      	ldr	r0, [pc, #600]	; (80025e0 <menu+0x1330>)
 8002386:	f006 ffc1 	bl	800930c <HAL_GPIO_ReadPin>
 800238a:	4603      	mov	r3, r0
 800238c:	2b01      	cmp	r3, #1
 800238e:	d115      	bne.n	80023bc <menu+0x110c>
 8002390:	4b94      	ldr	r3, [pc, #592]	; (80025e4 <menu+0x1334>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f083 0301 	eor.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00e      	beq.n	80023bc <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800239e:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <menu+0x1338>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	3301      	adds	r3, #1
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b90      	ldr	r3, [pc, #576]	; (80025e8 <menu+0x1338>)
 80023a8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80023aa:	4b8f      	ldr	r3, [pc, #572]	; (80025e8 <menu+0x1338>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d902      	bls.n	80023b8 <menu+0x1108>
				kapiSecimleri = 0;
 80023b2:	4b8d      	ldr	r3, [pc, #564]	; (80025e8 <menu+0x1338>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023b8:	f002 fb44 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023bc:	2104      	movs	r1, #4
 80023be:	4888      	ldr	r0, [pc, #544]	; (80025e0 <menu+0x1330>)
 80023c0:	f006 ffa4 	bl	800930c <HAL_GPIO_ReadPin>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d115      	bne.n	80023f6 <menu+0x1146>
 80023ca:	4b86      	ldr	r3, [pc, #536]	; (80025e4 <menu+0x1334>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	f083 0301 	eor.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00e      	beq.n	80023f6 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80023d8:	4b83      	ldr	r3, [pc, #524]	; (80025e8 <menu+0x1338>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	3b01      	subs	r3, #1
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b81      	ldr	r3, [pc, #516]	; (80025e8 <menu+0x1338>)
 80023e2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80023e4:	4b80      	ldr	r3, [pc, #512]	; (80025e8 <menu+0x1338>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d902      	bls.n	80023f2 <menu+0x1142>
		   		kapiSecimleri = 3;
 80023ec:	4b7e      	ldr	r3, [pc, #504]	; (80025e8 <menu+0x1338>)
 80023ee:	2203      	movs	r2, #3
 80023f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023f2:	f002 fb27 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023f6:	2108      	movs	r1, #8
 80023f8:	4879      	ldr	r0, [pc, #484]	; (80025e0 <menu+0x1330>)
 80023fa:	f006 ff87 	bl	800930c <HAL_GPIO_ReadPin>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b01      	cmp	r3, #1
 8002402:	d118      	bne.n	8002436 <menu+0x1186>
 8002404:	4b77      	ldr	r3, [pc, #476]	; (80025e4 <menu+0x1334>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	f083 0301 	eor.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d011      	beq.n	8002436 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002412:	4b75      	ldr	r3, [pc, #468]	; (80025e8 <menu+0x1338>)
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	4b75      	ldr	r3, [pc, #468]	; (80025ec <menu+0x133c>)
 8002418:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800241a:	4b73      	ldr	r3, [pc, #460]	; (80025e8 <menu+0x1338>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <menu+0x1180>
				altLimit = 1;
 8002422:	4b73      	ldr	r3, [pc, #460]	; (80025f0 <menu+0x1340>)
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002428:	4b71      	ldr	r3, [pc, #452]	; (80025f0 <menu+0x1340>)
 800242a:	781a      	ldrb	r2, [r3, #0]
 800242c:	4b6f      	ldr	r3, [pc, #444]	; (80025ec <menu+0x133c>)
 800242e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002430:	4b70      	ldr	r3, [pc, #448]	; (80025f4 <menu+0x1344>)
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002436:	4b70      	ldr	r3, [pc, #448]	; (80025f8 <menu+0x1348>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b08      	cmp	r3, #8
 800243c:	f040 8092 	bne.w	8002564 <menu+0x12b4>
		if(dilSecim == 0) {
 8002440:	4b65      	ldr	r3, [pc, #404]	; (80025d8 <menu+0x1328>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002448:	4a6c      	ldr	r2, [pc, #432]	; (80025fc <menu+0x134c>)
 800244a:	2101      	movs	r1, #1
 800244c:	2001      	movs	r0, #1
 800244e:	f005 fc37 	bl	8007cc0 <lcd_print>
 8002452:	e008      	b.n	8002466 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002454:	4b60      	ldr	r3, [pc, #384]	; (80025d8 <menu+0x1328>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d104      	bne.n	8002466 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800245c:	4a68      	ldr	r2, [pc, #416]	; (8002600 <menu+0x1350>)
 800245e:	2101      	movs	r1, #1
 8002460:	2001      	movs	r0, #1
 8002462:	f005 fc2d 	bl	8007cc0 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002466:	4b67      	ldr	r3, [pc, #412]	; (8002604 <menu+0x1354>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d113      	bne.n	8002496 <menu+0x11e6>
			if(dilSecim == 0) {
 800246e:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <menu+0x1328>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d105      	bne.n	8002482 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002476:	4a64      	ldr	r2, [pc, #400]	; (8002608 <menu+0x1358>)
 8002478:	2101      	movs	r1, #1
 800247a:	2002      	movs	r0, #2
 800247c:	f005 fc20 	bl	8007cc0 <lcd_print>
 8002480:	e020      	b.n	80024c4 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002482:	4b55      	ldr	r3, [pc, #340]	; (80025d8 <menu+0x1328>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d11c      	bne.n	80024c4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800248a:	4a60      	ldr	r2, [pc, #384]	; (800260c <menu+0x135c>)
 800248c:	2101      	movs	r1, #1
 800248e:	2002      	movs	r0, #2
 8002490:	f005 fc16 	bl	8007cc0 <lcd_print>
 8002494:	e016      	b.n	80024c4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002496:	4b5b      	ldr	r3, [pc, #364]	; (8002604 <menu+0x1354>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d112      	bne.n	80024c4 <menu+0x1214>
			if(dilSecim == 0){
 800249e:	4b4e      	ldr	r3, [pc, #312]	; (80025d8 <menu+0x1328>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d105      	bne.n	80024b2 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80024a6:	4a5a      	ldr	r2, [pc, #360]	; (8002610 <menu+0x1360>)
 80024a8:	2101      	movs	r1, #1
 80024aa:	2002      	movs	r0, #2
 80024ac:	f005 fc08 	bl	8007cc0 <lcd_print>
 80024b0:	e008      	b.n	80024c4 <menu+0x1214>
			} else if(dilSecim == 1){
 80024b2:	4b49      	ldr	r3, [pc, #292]	; (80025d8 <menu+0x1328>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d104      	bne.n	80024c4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80024ba:	4a56      	ldr	r2, [pc, #344]	; (8002614 <menu+0x1364>)
 80024bc:	2101      	movs	r1, #1
 80024be:	2002      	movs	r0, #2
 80024c0:	f005 fbfe 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024c4:	2102      	movs	r1, #2
 80024c6:	4846      	ldr	r0, [pc, #280]	; (80025e0 <menu+0x1330>)
 80024c8:	f006 ff20 	bl	800930c <HAL_GPIO_ReadPin>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d115      	bne.n	80024fe <menu+0x124e>
 80024d2:	4b44      	ldr	r3, [pc, #272]	; (80025e4 <menu+0x1334>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	f083 0301 	eor.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00e      	beq.n	80024fe <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80024e0:	4b48      	ldr	r3, [pc, #288]	; (8002604 <menu+0x1354>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	3301      	adds	r3, #1
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	4b46      	ldr	r3, [pc, #280]	; (8002604 <menu+0x1354>)
 80024ea:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80024ec:	4b45      	ldr	r3, [pc, #276]	; (8002604 <menu+0x1354>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d902      	bls.n	80024fa <menu+0x124a>
				kapiAcTipi = 0;
 80024f4:	4b43      	ldr	r3, [pc, #268]	; (8002604 <menu+0x1354>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024fa:	f002 faa3 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024fe:	2104      	movs	r1, #4
 8002500:	4837      	ldr	r0, [pc, #220]	; (80025e0 <menu+0x1330>)
 8002502:	f006 ff03 	bl	800930c <HAL_GPIO_ReadPin>
 8002506:	4603      	mov	r3, r0
 8002508:	2b01      	cmp	r3, #1
 800250a:	d115      	bne.n	8002538 <menu+0x1288>
 800250c:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <menu+0x1334>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	f083 0301 	eor.w	r3, r3, #1
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00e      	beq.n	8002538 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800251a:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <menu+0x1354>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	3b01      	subs	r3, #1
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b38      	ldr	r3, [pc, #224]	; (8002604 <menu+0x1354>)
 8002524:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002526:	4b37      	ldr	r3, [pc, #220]	; (8002604 <menu+0x1354>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <menu+0x1284>
		   		kapiAcTipi = 1;
 800252e:	4b35      	ldr	r3, [pc, #212]	; (8002604 <menu+0x1354>)
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002534:	f002 fa86 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002538:	2108      	movs	r1, #8
 800253a:	4829      	ldr	r0, [pc, #164]	; (80025e0 <menu+0x1330>)
 800253c:	f006 fee6 	bl	800930c <HAL_GPIO_ReadPin>
 8002540:	4603      	mov	r3, r0
 8002542:	2b01      	cmp	r3, #1
 8002544:	d10e      	bne.n	8002564 <menu+0x12b4>
 8002546:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <menu+0x1334>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	f083 0301 	eor.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002554:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <menu+0x1354>)
 8002556:	781a      	ldrb	r2, [r3, #0]
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <menu+0x133c>)
 800255a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800255e:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <menu+0x1344>)
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <menu+0x1348>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b09      	cmp	r3, #9
 800256a:	f040 80b9 	bne.w	80026e0 <menu+0x1430>
		if(dilSecim == 0){
 800256e:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <menu+0x1328>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d105      	bne.n	8002582 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002576:	4a28      	ldr	r2, [pc, #160]	; (8002618 <menu+0x1368>)
 8002578:	2101      	movs	r1, #1
 800257a:	2001      	movs	r0, #1
 800257c:	f005 fba0 	bl	8007cc0 <lcd_print>
 8002580:	e008      	b.n	8002594 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <menu+0x1328>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d104      	bne.n	8002594 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800258a:	4a24      	ldr	r2, [pc, #144]	; (800261c <menu+0x136c>)
 800258c:	2101      	movs	r1, #1
 800258e:	2001      	movs	r0, #1
 8002590:	f005 fb96 	bl	8007cc0 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002594:	4b22      	ldr	r3, [pc, #136]	; (8002620 <menu+0x1370>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800259c:	4a21      	ldr	r2, [pc, #132]	; (8002624 <menu+0x1374>)
 800259e:	2101      	movs	r1, #1
 80025a0:	2002      	movs	r0, #2
 80025a2:	f005 fb8d 	bl	8007cc0 <lcd_print>
 80025a6:	e04c      	b.n	8002642 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <menu+0x1370>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d13f      	bne.n	8002630 <menu+0x1380>
			if(dilSecim == 0){
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <menu+0x1328>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d105      	bne.n	80025c4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80025b8:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <menu+0x1378>)
 80025ba:	2101      	movs	r1, #1
 80025bc:	2002      	movs	r0, #2
 80025be:	f005 fb7f 	bl	8007cc0 <lcd_print>
 80025c2:	e03e      	b.n	8002642 <menu+0x1392>
			} else if(dilSecim == 1) {
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <menu+0x1328>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d13a      	bne.n	8002642 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80025cc:	4a17      	ldr	r2, [pc, #92]	; (800262c <menu+0x137c>)
 80025ce:	2101      	movs	r1, #1
 80025d0:	2002      	movs	r0, #2
 80025d2:	f005 fb75 	bl	8007cc0 <lcd_print>
 80025d6:	e034      	b.n	8002642 <menu+0x1392>
 80025d8:	20000245 	.word	0x20000245
 80025dc:	0800d474 	.word	0x0800d474
 80025e0:	40010800 	.word	0x40010800
 80025e4:	20000253 	.word	0x20000253
 80025e8:	2000022c 	.word	0x2000022c
 80025ec:	20000128 	.word	0x20000128
 80025f0:	2000022a 	.word	0x2000022a
 80025f4:	20000250 	.word	0x20000250
 80025f8:	20000224 	.word	0x20000224
 80025fc:	0800d488 	.word	0x0800d488
 8002600:	0800d49c 	.word	0x0800d49c
 8002604:	20000230 	.word	0x20000230
 8002608:	0800d4b0 	.word	0x0800d4b0
 800260c:	0800d4c0 	.word	0x0800d4c0
 8002610:	0800d4d0 	.word	0x0800d4d0
 8002614:	0800d4e4 	.word	0x0800d4e4
 8002618:	0800d4f8 	.word	0x0800d4f8
 800261c:	0800d50c 	.word	0x0800d50c
 8002620:	2000022d 	.word	0x2000022d
 8002624:	0800d520 	.word	0x0800d520
 8002628:	0800d534 	.word	0x0800d534
 800262c:	0800d544 	.word	0x0800d544
			}
		} else if(kapi1Tip == 2) {
 8002630:	4b8a      	ldr	r3, [pc, #552]	; (800285c <menu+0x15ac>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d104      	bne.n	8002642 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002638:	4a89      	ldr	r2, [pc, #548]	; (8002860 <menu+0x15b0>)
 800263a:	2101      	movs	r1, #1
 800263c:	2002      	movs	r0, #2
 800263e:	f005 fb3f 	bl	8007cc0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002642:	2102      	movs	r1, #2
 8002644:	4887      	ldr	r0, [pc, #540]	; (8002864 <menu+0x15b4>)
 8002646:	f006 fe61 	bl	800930c <HAL_GPIO_ReadPin>
 800264a:	4603      	mov	r3, r0
 800264c:	2b01      	cmp	r3, #1
 800264e:	d115      	bne.n	800267c <menu+0x13cc>
 8002650:	4b85      	ldr	r3, [pc, #532]	; (8002868 <menu+0x15b8>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	f083 0301 	eor.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00e      	beq.n	800267c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800265e:	4b7f      	ldr	r3, [pc, #508]	; (800285c <menu+0x15ac>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	3301      	adds	r3, #1
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4b7d      	ldr	r3, [pc, #500]	; (800285c <menu+0x15ac>)
 8002668:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800266a:	4b7c      	ldr	r3, [pc, #496]	; (800285c <menu+0x15ac>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d902      	bls.n	8002678 <menu+0x13c8>
				kapi1Tip = 0;
 8002672:	4b7a      	ldr	r3, [pc, #488]	; (800285c <menu+0x15ac>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002678:	f002 f9e4 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800267c:	2104      	movs	r1, #4
 800267e:	4879      	ldr	r0, [pc, #484]	; (8002864 <menu+0x15b4>)
 8002680:	f006 fe44 	bl	800930c <HAL_GPIO_ReadPin>
 8002684:	4603      	mov	r3, r0
 8002686:	2b01      	cmp	r3, #1
 8002688:	d115      	bne.n	80026b6 <menu+0x1406>
 800268a:	4b77      	ldr	r3, [pc, #476]	; (8002868 <menu+0x15b8>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	f083 0301 	eor.w	r3, r3, #1
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00e      	beq.n	80026b6 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002698:	4b70      	ldr	r3, [pc, #448]	; (800285c <menu+0x15ac>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	3b01      	subs	r3, #1
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	4b6e      	ldr	r3, [pc, #440]	; (800285c <menu+0x15ac>)
 80026a2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80026a4:	4b6d      	ldr	r3, [pc, #436]	; (800285c <menu+0x15ac>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d902      	bls.n	80026b2 <menu+0x1402>
		   		kapi1Tip = 2;
 80026ac:	4b6b      	ldr	r3, [pc, #428]	; (800285c <menu+0x15ac>)
 80026ae:	2202      	movs	r2, #2
 80026b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026b2:	f002 f9c7 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026b6:	2108      	movs	r1, #8
 80026b8:	486a      	ldr	r0, [pc, #424]	; (8002864 <menu+0x15b4>)
 80026ba:	f006 fe27 	bl	800930c <HAL_GPIO_ReadPin>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d10d      	bne.n	80026e0 <menu+0x1430>
 80026c4:	4b68      	ldr	r3, [pc, #416]	; (8002868 <menu+0x15b8>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	f083 0301 	eor.w	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d006      	beq.n	80026e0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80026d2:	4b62      	ldr	r3, [pc, #392]	; (800285c <menu+0x15ac>)
 80026d4:	781a      	ldrb	r2, [r3, #0]
 80026d6:	4b65      	ldr	r3, [pc, #404]	; (800286c <menu+0x15bc>)
 80026d8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80026da:	4b65      	ldr	r3, [pc, #404]	; (8002870 <menu+0x15c0>)
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80026e0:	4b64      	ldr	r3, [pc, #400]	; (8002874 <menu+0x15c4>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b0a      	cmp	r3, #10
 80026e6:	d17f      	bne.n	80027e8 <menu+0x1538>
		if(dilSecim == 0) {
 80026e8:	4b63      	ldr	r3, [pc, #396]	; (8002878 <menu+0x15c8>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80026f0:	4a62      	ldr	r2, [pc, #392]	; (800287c <menu+0x15cc>)
 80026f2:	2101      	movs	r1, #1
 80026f4:	2001      	movs	r0, #1
 80026f6:	f005 fae3 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80026fa:	4a61      	ldr	r2, [pc, #388]	; (8002880 <menu+0x15d0>)
 80026fc:	2101      	movs	r1, #1
 80026fe:	2002      	movs	r0, #2
 8002700:	f005 fade 	bl	8007cc0 <lcd_print>
 8002704:	e00d      	b.n	8002722 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002706:	4b5c      	ldr	r3, [pc, #368]	; (8002878 <menu+0x15c8>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d109      	bne.n	8002722 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800270e:	4a5d      	ldr	r2, [pc, #372]	; (8002884 <menu+0x15d4>)
 8002710:	2101      	movs	r1, #1
 8002712:	2001      	movs	r0, #1
 8002714:	f005 fad4 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002718:	4a5b      	ldr	r2, [pc, #364]	; (8002888 <menu+0x15d8>)
 800271a:	2101      	movs	r1, #1
 800271c:	2002      	movs	r0, #2
 800271e:	f005 facf 	bl	8007cc0 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002722:	4b5a      	ldr	r3, [pc, #360]	; (800288c <menu+0x15dc>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	220a      	movs	r2, #10
 8002728:	4959      	ldr	r1, [pc, #356]	; (8002890 <menu+0x15e0>)
 800272a:	4618      	mov	r0, r3
 800272c:	f009 fe1a 	bl	800c364 <itoa>
		lcd_print(2,16,snum);
 8002730:	4a57      	ldr	r2, [pc, #348]	; (8002890 <menu+0x15e0>)
 8002732:	2110      	movs	r1, #16
 8002734:	2002      	movs	r0, #2
 8002736:	f005 fac3 	bl	8007cc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800273a:	2102      	movs	r1, #2
 800273c:	4849      	ldr	r0, [pc, #292]	; (8002864 <menu+0x15b4>)
 800273e:	f006 fde5 	bl	800930c <HAL_GPIO_ReadPin>
 8002742:	4603      	mov	r3, r0
 8002744:	2b01      	cmp	r3, #1
 8002746:	d119      	bne.n	800277c <menu+0x14cc>
 8002748:	4b47      	ldr	r3, [pc, #284]	; (8002868 <menu+0x15b8>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	f083 0301 	eor.w	r3, r3, #1
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d012      	beq.n	800277c <menu+0x14cc>
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <menu+0x15ac>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10e      	bne.n	800277c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800275e:	4b4b      	ldr	r3, [pc, #300]	; (800288c <menu+0x15dc>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4b49      	ldr	r3, [pc, #292]	; (800288c <menu+0x15dc>)
 8002768:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800276a:	4b48      	ldr	r3, [pc, #288]	; (800288c <menu+0x15dc>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d902      	bls.n	8002778 <menu+0x14c8>
				kapi1AcSure = 0;
 8002772:	4b46      	ldr	r3, [pc, #280]	; (800288c <menu+0x15dc>)
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002778:	f002 f964 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800277c:	2104      	movs	r1, #4
 800277e:	4839      	ldr	r0, [pc, #228]	; (8002864 <menu+0x15b4>)
 8002780:	f006 fdc4 	bl	800930c <HAL_GPIO_ReadPin>
 8002784:	4603      	mov	r3, r0
 8002786:	2b01      	cmp	r3, #1
 8002788:	d119      	bne.n	80027be <menu+0x150e>
 800278a:	4b37      	ldr	r3, [pc, #220]	; (8002868 <menu+0x15b8>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	f083 0301 	eor.w	r3, r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d012      	beq.n	80027be <menu+0x150e>
 8002798:	4b30      	ldr	r3, [pc, #192]	; (800285c <menu+0x15ac>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10e      	bne.n	80027be <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80027a0:	4b3a      	ldr	r3, [pc, #232]	; (800288c <menu+0x15dc>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	4b38      	ldr	r3, [pc, #224]	; (800288c <menu+0x15dc>)
 80027aa:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80027ac:	4b37      	ldr	r3, [pc, #220]	; (800288c <menu+0x15dc>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b06      	cmp	r3, #6
 80027b2:	d902      	bls.n	80027ba <menu+0x150a>
		   		kapi1AcSure = 5;
 80027b4:	4b35      	ldr	r3, [pc, #212]	; (800288c <menu+0x15dc>)
 80027b6:	2205      	movs	r2, #5
 80027b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027ba:	f002 f943 	bl	8004a44 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027be:	2108      	movs	r1, #8
 80027c0:	4828      	ldr	r0, [pc, #160]	; (8002864 <menu+0x15b4>)
 80027c2:	f006 fda3 	bl	800930c <HAL_GPIO_ReadPin>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d10d      	bne.n	80027e8 <menu+0x1538>
 80027cc:	4b26      	ldr	r3, [pc, #152]	; (8002868 <menu+0x15b8>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d006      	beq.n	80027e8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80027da:	4b2c      	ldr	r3, [pc, #176]	; (800288c <menu+0x15dc>)
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	4b23      	ldr	r3, [pc, #140]	; (800286c <menu+0x15bc>)
 80027e0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80027e2:	4b23      	ldr	r3, [pc, #140]	; (8002870 <menu+0x15c0>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <menu+0x15c4>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b0b      	cmp	r3, #11
 80027ee:	f040 80b5 	bne.w	800295c <menu+0x16ac>
		if(dilSecim == 0) {
 80027f2:	4b21      	ldr	r3, [pc, #132]	; (8002878 <menu+0x15c8>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d105      	bne.n	8002806 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80027fa:	4a26      	ldr	r2, [pc, #152]	; (8002894 <menu+0x15e4>)
 80027fc:	2101      	movs	r1, #1
 80027fe:	2001      	movs	r0, #1
 8002800:	f005 fa5e 	bl	8007cc0 <lcd_print>
 8002804:	e008      	b.n	8002818 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002806:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <menu+0x15c8>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d104      	bne.n	8002818 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800280e:	4a22      	ldr	r2, [pc, #136]	; (8002898 <menu+0x15e8>)
 8002810:	2101      	movs	r1, #1
 8002812:	2001      	movs	r0, #1
 8002814:	f005 fa54 	bl	8007cc0 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002818:	4b20      	ldr	r3, [pc, #128]	; (800289c <menu+0x15ec>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002820:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <menu+0x15f0>)
 8002822:	2101      	movs	r1, #1
 8002824:	2002      	movs	r0, #2
 8002826:	f005 fa4b 	bl	8007cc0 <lcd_print>
 800282a:	e048      	b.n	80028be <menu+0x160e>
		} else if(kapi2Tip == 1) {
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <menu+0x15ec>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d13b      	bne.n	80028ac <menu+0x15fc>
			if(dilSecim == 0) {
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <menu+0x15c8>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 800283c:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <menu+0x15f4>)
 800283e:	2101      	movs	r1, #1
 8002840:	2002      	movs	r0, #2
 8002842:	f005 fa3d 	bl	8007cc0 <lcd_print>
 8002846:	e03a      	b.n	80028be <menu+0x160e>
			} else if(dilSecim == 1) {
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <menu+0x15c8>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d136      	bne.n	80028be <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002850:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <menu+0x15f8>)
 8002852:	2101      	movs	r1, #1
 8002854:	2002      	movs	r0, #2
 8002856:	f005 fa33 	bl	8007cc0 <lcd_print>
 800285a:	e030      	b.n	80028be <menu+0x160e>
 800285c:	2000022d 	.word	0x2000022d
 8002860:	0800d558 	.word	0x0800d558
 8002864:	40010800 	.word	0x40010800
 8002868:	20000253 	.word	0x20000253
 800286c:	20000128 	.word	0x20000128
 8002870:	20000250 	.word	0x20000250
 8002874:	20000224 	.word	0x20000224
 8002878:	20000245 	.word	0x20000245
 800287c:	0800d568 	.word	0x0800d568
 8002880:	0800d57c 	.word	0x0800d57c
 8002884:	0800d58c 	.word	0x0800d58c
 8002888:	0800d5a0 	.word	0x0800d5a0
 800288c:	2000023d 	.word	0x2000023d
 8002890:	20000198 	.word	0x20000198
 8002894:	0800d5b0 	.word	0x0800d5b0
 8002898:	0800d5c4 	.word	0x0800d5c4
 800289c:	2000022e 	.word	0x2000022e
 80028a0:	0800d520 	.word	0x0800d520
 80028a4:	0800d534 	.word	0x0800d534
 80028a8:	0800d544 	.word	0x0800d544
			}
		} else if(kapi2Tip == 2) {
 80028ac:	4b8a      	ldr	r3, [pc, #552]	; (8002ad8 <menu+0x1828>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d104      	bne.n	80028be <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 80028b4:	4a89      	ldr	r2, [pc, #548]	; (8002adc <menu+0x182c>)
 80028b6:	2101      	movs	r1, #1
 80028b8:	2002      	movs	r0, #2
 80028ba:	f005 fa01 	bl	8007cc0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80028be:	2102      	movs	r1, #2
 80028c0:	4887      	ldr	r0, [pc, #540]	; (8002ae0 <menu+0x1830>)
 80028c2:	f006 fd23 	bl	800930c <HAL_GPIO_ReadPin>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d115      	bne.n	80028f8 <menu+0x1648>
 80028cc:	4b85      	ldr	r3, [pc, #532]	; (8002ae4 <menu+0x1834>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	f083 0301 	eor.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00e      	beq.n	80028f8 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80028da:	4b7f      	ldr	r3, [pc, #508]	; (8002ad8 <menu+0x1828>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4b7d      	ldr	r3, [pc, #500]	; (8002ad8 <menu+0x1828>)
 80028e4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80028e6:	4b7c      	ldr	r3, [pc, #496]	; (8002ad8 <menu+0x1828>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d902      	bls.n	80028f4 <menu+0x1644>
				kapi2Tip = 0;
 80028ee:	4b7a      	ldr	r3, [pc, #488]	; (8002ad8 <menu+0x1828>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028f4:	f002 f8a6 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028f8:	2104      	movs	r1, #4
 80028fa:	4879      	ldr	r0, [pc, #484]	; (8002ae0 <menu+0x1830>)
 80028fc:	f006 fd06 	bl	800930c <HAL_GPIO_ReadPin>
 8002900:	4603      	mov	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d115      	bne.n	8002932 <menu+0x1682>
 8002906:	4b77      	ldr	r3, [pc, #476]	; (8002ae4 <menu+0x1834>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	f083 0301 	eor.w	r3, r3, #1
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00e      	beq.n	8002932 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002914:	4b70      	ldr	r3, [pc, #448]	; (8002ad8 <menu+0x1828>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	3b01      	subs	r3, #1
 800291a:	b2da      	uxtb	r2, r3
 800291c:	4b6e      	ldr	r3, [pc, #440]	; (8002ad8 <menu+0x1828>)
 800291e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002920:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <menu+0x1828>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d902      	bls.n	800292e <menu+0x167e>
		   		kapi2Tip = 2;
 8002928:	4b6b      	ldr	r3, [pc, #428]	; (8002ad8 <menu+0x1828>)
 800292a:	2202      	movs	r2, #2
 800292c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800292e:	f002 f889 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002932:	2108      	movs	r1, #8
 8002934:	486a      	ldr	r0, [pc, #424]	; (8002ae0 <menu+0x1830>)
 8002936:	f006 fce9 	bl	800930c <HAL_GPIO_ReadPin>
 800293a:	4603      	mov	r3, r0
 800293c:	2b01      	cmp	r3, #1
 800293e:	d10d      	bne.n	800295c <menu+0x16ac>
 8002940:	4b68      	ldr	r3, [pc, #416]	; (8002ae4 <menu+0x1834>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	f083 0301 	eor.w	r3, r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 800294e:	4b62      	ldr	r3, [pc, #392]	; (8002ad8 <menu+0x1828>)
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	4b65      	ldr	r3, [pc, #404]	; (8002ae8 <menu+0x1838>)
 8002954:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002956:	4b65      	ldr	r3, [pc, #404]	; (8002aec <menu+0x183c>)
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 800295c:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <menu+0x1840>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b0c      	cmp	r3, #12
 8002962:	d17f      	bne.n	8002a64 <menu+0x17b4>
		if(dilSecim == 0) {
 8002964:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <menu+0x1844>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 800296c:	4a62      	ldr	r2, [pc, #392]	; (8002af8 <menu+0x1848>)
 800296e:	2101      	movs	r1, #1
 8002970:	2001      	movs	r0, #1
 8002972:	f005 f9a5 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002976:	4a61      	ldr	r2, [pc, #388]	; (8002afc <menu+0x184c>)
 8002978:	2101      	movs	r1, #1
 800297a:	2002      	movs	r0, #2
 800297c:	f005 f9a0 	bl	8007cc0 <lcd_print>
 8002980:	e00d      	b.n	800299e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002982:	4b5c      	ldr	r3, [pc, #368]	; (8002af4 <menu+0x1844>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d109      	bne.n	800299e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 800298a:	4a5d      	ldr	r2, [pc, #372]	; (8002b00 <menu+0x1850>)
 800298c:	2101      	movs	r1, #1
 800298e:	2001      	movs	r0, #1
 8002990:	f005 f996 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002994:	4a5b      	ldr	r2, [pc, #364]	; (8002b04 <menu+0x1854>)
 8002996:	2101      	movs	r1, #1
 8002998:	2002      	movs	r0, #2
 800299a:	f005 f991 	bl	8007cc0 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 800299e:	4b5a      	ldr	r3, [pc, #360]	; (8002b08 <menu+0x1858>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	220a      	movs	r2, #10
 80029a4:	4959      	ldr	r1, [pc, #356]	; (8002b0c <menu+0x185c>)
 80029a6:	4618      	mov	r0, r3
 80029a8:	f009 fcdc 	bl	800c364 <itoa>
		lcd_print(2,16,snum);
 80029ac:	4a57      	ldr	r2, [pc, #348]	; (8002b0c <menu+0x185c>)
 80029ae:	2110      	movs	r1, #16
 80029b0:	2002      	movs	r0, #2
 80029b2:	f005 f985 	bl	8007cc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80029b6:	2102      	movs	r1, #2
 80029b8:	4849      	ldr	r0, [pc, #292]	; (8002ae0 <menu+0x1830>)
 80029ba:	f006 fca7 	bl	800930c <HAL_GPIO_ReadPin>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d119      	bne.n	80029f8 <menu+0x1748>
 80029c4:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <menu+0x1834>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	f083 0301 	eor.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d012      	beq.n	80029f8 <menu+0x1748>
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <menu+0x1828>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10e      	bne.n	80029f8 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 80029da:	4b4b      	ldr	r3, [pc, #300]	; (8002b08 <menu+0x1858>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4b49      	ldr	r3, [pc, #292]	; (8002b08 <menu+0x1858>)
 80029e4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80029e6:	4b48      	ldr	r3, [pc, #288]	; (8002b08 <menu+0x1858>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b05      	cmp	r3, #5
 80029ec:	d902      	bls.n	80029f4 <menu+0x1744>
				kapi2AcSure = 0;
 80029ee:	4b46      	ldr	r3, [pc, #280]	; (8002b08 <menu+0x1858>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029f4:	f002 f826 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80029f8:	2104      	movs	r1, #4
 80029fa:	4839      	ldr	r0, [pc, #228]	; (8002ae0 <menu+0x1830>)
 80029fc:	f006 fc86 	bl	800930c <HAL_GPIO_ReadPin>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d119      	bne.n	8002a3a <menu+0x178a>
 8002a06:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <menu+0x1834>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	f083 0301 	eor.w	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d012      	beq.n	8002a3a <menu+0x178a>
 8002a14:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <menu+0x1828>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10e      	bne.n	8002a3a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002a1c:	4b3a      	ldr	r3, [pc, #232]	; (8002b08 <menu+0x1858>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <menu+0x1858>)
 8002a26:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002a28:	4b37      	ldr	r3, [pc, #220]	; (8002b08 <menu+0x1858>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b06      	cmp	r3, #6
 8002a2e:	d902      	bls.n	8002a36 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002a30:	4b35      	ldr	r3, [pc, #212]	; (8002b08 <menu+0x1858>)
 8002a32:	2205      	movs	r2, #5
 8002a34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a36:	f002 f805 	bl	8004a44 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a3a:	2108      	movs	r1, #8
 8002a3c:	4828      	ldr	r0, [pc, #160]	; (8002ae0 <menu+0x1830>)
 8002a3e:	f006 fc65 	bl	800930c <HAL_GPIO_ReadPin>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d10d      	bne.n	8002a64 <menu+0x17b4>
 8002a48:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <menu+0x1834>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	f083 0301 	eor.w	r3, r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002a56:	4b2c      	ldr	r3, [pc, #176]	; (8002b08 <menu+0x1858>)
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <menu+0x1838>)
 8002a5c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <menu+0x183c>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002a64:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <menu+0x1840>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b0d      	cmp	r3, #13
 8002a6a:	f040 80b5 	bne.w	8002bd8 <menu+0x1928>
		if(dilSecim == 0) {
 8002a6e:	4b21      	ldr	r3, [pc, #132]	; (8002af4 <menu+0x1844>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002a76:	4a26      	ldr	r2, [pc, #152]	; (8002b10 <menu+0x1860>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f005 f920 	bl	8007cc0 <lcd_print>
 8002a80:	e008      	b.n	8002a94 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002a82:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <menu+0x1844>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d104      	bne.n	8002a94 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002a8a:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <menu+0x1864>)
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f005 f916 	bl	8007cc0 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <menu+0x1868>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002a9c:	4a1f      	ldr	r2, [pc, #124]	; (8002b1c <menu+0x186c>)
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	2002      	movs	r0, #2
 8002aa2:	f005 f90d 	bl	8007cc0 <lcd_print>
 8002aa6:	e048      	b.n	8002b3a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <menu+0x1868>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d13b      	bne.n	8002b28 <menu+0x1878>
			if(dilSecim == 0) {
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <menu+0x1844>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002ab8:	4a19      	ldr	r2, [pc, #100]	; (8002b20 <menu+0x1870>)
 8002aba:	2101      	movs	r1, #1
 8002abc:	2002      	movs	r0, #2
 8002abe:	f005 f8ff 	bl	8007cc0 <lcd_print>
 8002ac2:	e03a      	b.n	8002b3a <menu+0x188a>
			} else if(dilSecim == 1) {
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <menu+0x1844>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d136      	bne.n	8002b3a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002acc:	4a15      	ldr	r2, [pc, #84]	; (8002b24 <menu+0x1874>)
 8002ace:	2101      	movs	r1, #1
 8002ad0:	2002      	movs	r0, #2
 8002ad2:	f005 f8f5 	bl	8007cc0 <lcd_print>
 8002ad6:	e030      	b.n	8002b3a <menu+0x188a>
 8002ad8:	2000022e 	.word	0x2000022e
 8002adc:	0800d558 	.word	0x0800d558
 8002ae0:	40010800 	.word	0x40010800
 8002ae4:	20000253 	.word	0x20000253
 8002ae8:	20000128 	.word	0x20000128
 8002aec:	20000250 	.word	0x20000250
 8002af0:	20000224 	.word	0x20000224
 8002af4:	20000245 	.word	0x20000245
 8002af8:	0800d5d8 	.word	0x0800d5d8
 8002afc:	0800d57c 	.word	0x0800d57c
 8002b00:	0800d5ec 	.word	0x0800d5ec
 8002b04:	0800d5a0 	.word	0x0800d5a0
 8002b08:	2000023e 	.word	0x2000023e
 8002b0c:	20000198 	.word	0x20000198
 8002b10:	0800d600 	.word	0x0800d600
 8002b14:	0800d614 	.word	0x0800d614
 8002b18:	2000022f 	.word	0x2000022f
 8002b1c:	0800d520 	.word	0x0800d520
 8002b20:	0800d534 	.word	0x0800d534
 8002b24:	0800d544 	.word	0x0800d544
			}
		} else if(kapitablaTip == 2) {
 8002b28:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <menu+0x19e8>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d104      	bne.n	8002b3a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002b30:	4a5a      	ldr	r2, [pc, #360]	; (8002c9c <menu+0x19ec>)
 8002b32:	2101      	movs	r1, #1
 8002b34:	2002      	movs	r0, #2
 8002b36:	f005 f8c3 	bl	8007cc0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	4858      	ldr	r0, [pc, #352]	; (8002ca0 <menu+0x19f0>)
 8002b3e:	f006 fbe5 	bl	800930c <HAL_GPIO_ReadPin>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d115      	bne.n	8002b74 <menu+0x18c4>
 8002b48:	4b56      	ldr	r3, [pc, #344]	; (8002ca4 <menu+0x19f4>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f083 0301 	eor.w	r3, r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00e      	beq.n	8002b74 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002b56:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <menu+0x19e8>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4b4e      	ldr	r3, [pc, #312]	; (8002c98 <menu+0x19e8>)
 8002b60:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002b62:	4b4d      	ldr	r3, [pc, #308]	; (8002c98 <menu+0x19e8>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d902      	bls.n	8002b70 <menu+0x18c0>
				kapitablaTip = 0;
 8002b6a:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <menu+0x19e8>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b70:	f001 ff68 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b74:	2104      	movs	r1, #4
 8002b76:	484a      	ldr	r0, [pc, #296]	; (8002ca0 <menu+0x19f0>)
 8002b78:	f006 fbc8 	bl	800930c <HAL_GPIO_ReadPin>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d115      	bne.n	8002bae <menu+0x18fe>
 8002b82:	4b48      	ldr	r3, [pc, #288]	; (8002ca4 <menu+0x19f4>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	f083 0301 	eor.w	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002b90:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <menu+0x19e8>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <menu+0x19e8>)
 8002b9a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002b9c:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <menu+0x19e8>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d902      	bls.n	8002baa <menu+0x18fa>
		   		kapitablaTip = 2;
 8002ba4:	4b3c      	ldr	r3, [pc, #240]	; (8002c98 <menu+0x19e8>)
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002baa:	f001 ff4b 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bae:	2108      	movs	r1, #8
 8002bb0:	483b      	ldr	r0, [pc, #236]	; (8002ca0 <menu+0x19f0>)
 8002bb2:	f006 fbab 	bl	800930c <HAL_GPIO_ReadPin>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d10d      	bne.n	8002bd8 <menu+0x1928>
 8002bbc:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <menu+0x19f4>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	f083 0301 	eor.w	r3, r3, #1
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d006      	beq.n	8002bd8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002bca:	4b33      	ldr	r3, [pc, #204]	; (8002c98 <menu+0x19e8>)
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <menu+0x19f8>)
 8002bd0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002bd2:	4b36      	ldr	r3, [pc, #216]	; (8002cac <menu+0x19fc>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002bd8:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <menu+0x1a00>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b0e      	cmp	r3, #14
 8002bde:	f040 80f2 	bne.w	8002dc6 <menu+0x1b16>
		if(dilSecim == 0) {
 8002be2:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <menu+0x1a04>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002bea:	4a33      	ldr	r2, [pc, #204]	; (8002cb8 <menu+0x1a08>)
 8002bec:	2101      	movs	r1, #1
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f005 f866 	bl	8007cc0 <lcd_print>
 8002bf4:	e008      	b.n	8002c08 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002bf6:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <menu+0x1a04>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d104      	bne.n	8002c08 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002bfe:	4a2f      	ldr	r2, [pc, #188]	; (8002cbc <menu+0x1a0c>)
 8002c00:	2101      	movs	r1, #1
 8002c02:	2001      	movs	r0, #1
 8002c04:	f005 f85c 	bl	8007cc0 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002c08:	4b2d      	ldr	r3, [pc, #180]	; (8002cc0 <menu+0x1a10>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d113      	bne.n	8002c38 <menu+0x1988>
			if(dilSecim == 0){
 8002c10:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <menu+0x1a04>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002c18:	4a2a      	ldr	r2, [pc, #168]	; (8002cc4 <menu+0x1a14>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f005 f84f 	bl	8007cc0 <lcd_print>
 8002c22:	e071      	b.n	8002d08 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002c24:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <menu+0x1a04>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d16d      	bne.n	8002d08 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002c2c:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <menu+0x1a18>)
 8002c2e:	2101      	movs	r1, #1
 8002c30:	2002      	movs	r0, #2
 8002c32:	f005 f845 	bl	8007cc0 <lcd_print>
 8002c36:	e067      	b.n	8002d08 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002c38:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <menu+0x1a10>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d112      	bne.n	8002c66 <menu+0x19b6>
			if(dilSecim == 0){
 8002c40:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <menu+0x1a04>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d104      	bne.n	8002c52 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002c48:	4a20      	ldr	r2, [pc, #128]	; (8002ccc <menu+0x1a1c>)
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	2002      	movs	r0, #2
 8002c4e:	f005 f837 	bl	8007cc0 <lcd_print>
			}
			if(dilSecim == 1){
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <menu+0x1a04>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d156      	bne.n	8002d08 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002c5a:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <menu+0x1a20>)
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	2002      	movs	r0, #2
 8002c60:	f005 f82e 	bl	8007cc0 <lcd_print>
 8002c64:	e050      	b.n	8002d08 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002c66:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <menu+0x1a10>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d136      	bne.n	8002cdc <menu+0x1a2c>
			if(dilSecim == 0){
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <menu+0x1a04>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d105      	bne.n	8002c82 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002c76:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <menu+0x1a24>)
 8002c78:	2101      	movs	r1, #1
 8002c7a:	2002      	movs	r0, #2
 8002c7c:	f005 f820 	bl	8007cc0 <lcd_print>
 8002c80:	e042      	b.n	8002d08 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <menu+0x1a04>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d13e      	bne.n	8002d08 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002c8a:	4a13      	ldr	r2, [pc, #76]	; (8002cd8 <menu+0x1a28>)
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	2002      	movs	r0, #2
 8002c90:	f005 f816 	bl	8007cc0 <lcd_print>
 8002c94:	e038      	b.n	8002d08 <menu+0x1a58>
 8002c96:	bf00      	nop
 8002c98:	2000022f 	.word	0x2000022f
 8002c9c:	0800d558 	.word	0x0800d558
 8002ca0:	40010800 	.word	0x40010800
 8002ca4:	20000253 	.word	0x20000253
 8002ca8:	20000128 	.word	0x20000128
 8002cac:	20000250 	.word	0x20000250
 8002cb0:	20000224 	.word	0x20000224
 8002cb4:	20000245 	.word	0x20000245
 8002cb8:	0800d628 	.word	0x0800d628
 8002cbc:	0800d63c 	.word	0x0800d63c
 8002cc0:	20000231 	.word	0x20000231
 8002cc4:	0800d650 	.word	0x0800d650
 8002cc8:	0800d660 	.word	0x0800d660
 8002ccc:	0800d670 	.word	0x0800d670
 8002cd0:	0800d680 	.word	0x0800d680
 8002cd4:	0800d690 	.word	0x0800d690
 8002cd8:	0800d6a4 	.word	0x0800d6a4
			}
		} else if(kapiTablaAcKonum == 3) {
 8002cdc:	4b9b      	ldr	r3, [pc, #620]	; (8002f4c <menu+0x1c9c>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d111      	bne.n	8002d08 <menu+0x1a58>
			if(dilSecim == 0) {
 8002ce4:	4b9a      	ldr	r3, [pc, #616]	; (8002f50 <menu+0x1ca0>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d104      	bne.n	8002cf6 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002cec:	4a99      	ldr	r2, [pc, #612]	; (8002f54 <menu+0x1ca4>)
 8002cee:	2101      	movs	r1, #1
 8002cf0:	2002      	movs	r0, #2
 8002cf2:	f004 ffe5 	bl	8007cc0 <lcd_print>
			}
			if(dilSecim == 1) {
 8002cf6:	4b96      	ldr	r3, [pc, #600]	; (8002f50 <menu+0x1ca0>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d104      	bne.n	8002d08 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002cfe:	4a96      	ldr	r2, [pc, #600]	; (8002f58 <menu+0x1ca8>)
 8002d00:	2101      	movs	r1, #1
 8002d02:	2002      	movs	r0, #2
 8002d04:	f004 ffdc 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d08:	2102      	movs	r1, #2
 8002d0a:	4894      	ldr	r0, [pc, #592]	; (8002f5c <menu+0x1cac>)
 8002d0c:	f006 fafe 	bl	800930c <HAL_GPIO_ReadPin>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d115      	bne.n	8002d42 <menu+0x1a92>
 8002d16:	4b92      	ldr	r3, [pc, #584]	; (8002f60 <menu+0x1cb0>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	f083 0301 	eor.w	r3, r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00e      	beq.n	8002d42 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002d24:	4b89      	ldr	r3, [pc, #548]	; (8002f4c <menu+0x1c9c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	4b87      	ldr	r3, [pc, #540]	; (8002f4c <menu+0x1c9c>)
 8002d2e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002d30:	4b86      	ldr	r3, [pc, #536]	; (8002f4c <menu+0x1c9c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d902      	bls.n	8002d3e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002d38:	4b84      	ldr	r3, [pc, #528]	; (8002f4c <menu+0x1c9c>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d3e:	f001 fe81 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d42:	2104      	movs	r1, #4
 8002d44:	4885      	ldr	r0, [pc, #532]	; (8002f5c <menu+0x1cac>)
 8002d46:	f006 fae1 	bl	800930c <HAL_GPIO_ReadPin>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d115      	bne.n	8002d7c <menu+0x1acc>
 8002d50:	4b83      	ldr	r3, [pc, #524]	; (8002f60 <menu+0x1cb0>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	f083 0301 	eor.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00e      	beq.n	8002d7c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002d5e:	4b7b      	ldr	r3, [pc, #492]	; (8002f4c <menu+0x1c9c>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4b79      	ldr	r3, [pc, #484]	; (8002f4c <menu+0x1c9c>)
 8002d68:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002d6a:	4b78      	ldr	r3, [pc, #480]	; (8002f4c <menu+0x1c9c>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d902      	bls.n	8002d78 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002d72:	4b76      	ldr	r3, [pc, #472]	; (8002f4c <menu+0x1c9c>)
 8002d74:	2202      	movs	r2, #2
 8002d76:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d78:	f001 fe64 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d7c:	2108      	movs	r1, #8
 8002d7e:	4877      	ldr	r0, [pc, #476]	; (8002f5c <menu+0x1cac>)
 8002d80:	f006 fac4 	bl	800930c <HAL_GPIO_ReadPin>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d11d      	bne.n	8002dc6 <menu+0x1b16>
 8002d8a:	4b75      	ldr	r3, [pc, #468]	; (8002f60 <menu+0x1cb0>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	f083 0301 	eor.w	r3, r3, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d016      	beq.n	8002dc6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002d98:	4b6c      	ldr	r3, [pc, #432]	; (8002f4c <menu+0x1c9c>)
 8002d9a:	781a      	ldrb	r2, [r3, #0]
 8002d9c:	4b71      	ldr	r3, [pc, #452]	; (8002f64 <menu+0x1cb4>)
 8002d9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002da2:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <menu+0x1c9c>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <menu+0x1b02>
 8002daa:	4b68      	ldr	r3, [pc, #416]	; (8002f4c <menu+0x1c9c>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d106      	bne.n	8002dc0 <menu+0x1b10>
				altLimit = 1;
 8002db2:	4b6d      	ldr	r3, [pc, #436]	; (8002f68 <menu+0x1cb8>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002db8:	4b6b      	ldr	r3, [pc, #428]	; (8002f68 <menu+0x1cb8>)
 8002dba:	781a      	ldrb	r2, [r3, #0]
 8002dbc:	4b69      	ldr	r3, [pc, #420]	; (8002f64 <menu+0x1cb4>)
 8002dbe:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002dc0:	4b6a      	ldr	r3, [pc, #424]	; (8002f6c <menu+0x1cbc>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002dc6:	4b6a      	ldr	r3, [pc, #424]	; (8002f70 <menu+0x1cc0>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	d17f      	bne.n	8002ece <menu+0x1c1e>
		if(dilSecim == 0) {
 8002dce:	4b60      	ldr	r3, [pc, #384]	; (8002f50 <menu+0x1ca0>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002dd6:	4a67      	ldr	r2, [pc, #412]	; (8002f74 <menu+0x1cc4>)
 8002dd8:	2101      	movs	r1, #1
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f004 ff70 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002de0:	4a65      	ldr	r2, [pc, #404]	; (8002f78 <menu+0x1cc8>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	2002      	movs	r0, #2
 8002de6:	f004 ff6b 	bl	8007cc0 <lcd_print>
 8002dea:	e00d      	b.n	8002e08 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002dec:	4b58      	ldr	r3, [pc, #352]	; (8002f50 <menu+0x1ca0>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d109      	bne.n	8002e08 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002df4:	4a61      	ldr	r2, [pc, #388]	; (8002f7c <menu+0x1ccc>)
 8002df6:	2101      	movs	r1, #1
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f004 ff61 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002dfe:	4a60      	ldr	r2, [pc, #384]	; (8002f80 <menu+0x1cd0>)
 8002e00:	2101      	movs	r1, #1
 8002e02:	2002      	movs	r0, #2
 8002e04:	f004 ff5c 	bl	8007cc0 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002e08:	4b5e      	ldr	r3, [pc, #376]	; (8002f84 <menu+0x1cd4>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	220a      	movs	r2, #10
 8002e0e:	495e      	ldr	r1, [pc, #376]	; (8002f88 <menu+0x1cd8>)
 8002e10:	4618      	mov	r0, r3
 8002e12:	f009 faa7 	bl	800c364 <itoa>
		lcd_print(2,16,snum);
 8002e16:	4a5c      	ldr	r2, [pc, #368]	; (8002f88 <menu+0x1cd8>)
 8002e18:	2110      	movs	r1, #16
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f004 ff50 	bl	8007cc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002e20:	2102      	movs	r1, #2
 8002e22:	484e      	ldr	r0, [pc, #312]	; (8002f5c <menu+0x1cac>)
 8002e24:	f006 fa72 	bl	800930c <HAL_GPIO_ReadPin>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d119      	bne.n	8002e62 <menu+0x1bb2>
 8002e2e:	4b4c      	ldr	r3, [pc, #304]	; (8002f60 <menu+0x1cb0>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	f083 0301 	eor.w	r3, r3, #1
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d012      	beq.n	8002e62 <menu+0x1bb2>
 8002e3c:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <menu+0x1cdc>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10e      	bne.n	8002e62 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002e44:	4b4f      	ldr	r3, [pc, #316]	; (8002f84 <menu+0x1cd4>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	4b4d      	ldr	r3, [pc, #308]	; (8002f84 <menu+0x1cd4>)
 8002e4e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002e50:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <menu+0x1cd4>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d902      	bls.n	8002e5e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002e58:	4b4a      	ldr	r3, [pc, #296]	; (8002f84 <menu+0x1cd4>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e5e:	f001 fdf1 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002e62:	2104      	movs	r1, #4
 8002e64:	483d      	ldr	r0, [pc, #244]	; (8002f5c <menu+0x1cac>)
 8002e66:	f006 fa51 	bl	800930c <HAL_GPIO_ReadPin>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d119      	bne.n	8002ea4 <menu+0x1bf4>
 8002e70:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <menu+0x1cb0>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	f083 0301 	eor.w	r3, r3, #1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d012      	beq.n	8002ea4 <menu+0x1bf4>
 8002e7e:	4b43      	ldr	r3, [pc, #268]	; (8002f8c <menu+0x1cdc>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10e      	bne.n	8002ea4 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002e86:	4b3f      	ldr	r3, [pc, #252]	; (8002f84 <menu+0x1cd4>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <menu+0x1cd4>)
 8002e90:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002e92:	4b3c      	ldr	r3, [pc, #240]	; (8002f84 <menu+0x1cd4>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b06      	cmp	r3, #6
 8002e98:	d902      	bls.n	8002ea0 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002e9a:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <menu+0x1cd4>)
 8002e9c:	2205      	movs	r2, #5
 8002e9e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002ea0:	f001 fdd0 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ea4:	2108      	movs	r1, #8
 8002ea6:	482d      	ldr	r0, [pc, #180]	; (8002f5c <menu+0x1cac>)
 8002ea8:	f006 fa30 	bl	800930c <HAL_GPIO_ReadPin>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d10d      	bne.n	8002ece <menu+0x1c1e>
 8002eb2:	4b2b      	ldr	r3, [pc, #172]	; (8002f60 <menu+0x1cb0>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	f083 0301 	eor.w	r3, r3, #1
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002ec0:	4b30      	ldr	r3, [pc, #192]	; (8002f84 <menu+0x1cd4>)
 8002ec2:	781a      	ldrb	r2, [r3, #0]
 8002ec4:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <menu+0x1cb4>)
 8002ec6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002ec8:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <menu+0x1cbc>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002ece:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <menu+0x1cc0>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	f040 80bc 	bne.w	8003050 <menu+0x1da0>
		if(dilSecim == 0) {
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <menu+0x1ca0>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d105      	bne.n	8002eec <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002ee0:	4a2b      	ldr	r2, [pc, #172]	; (8002f90 <menu+0x1ce0>)
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	f004 feeb 	bl	8007cc0 <lcd_print>
 8002eea:	e008      	b.n	8002efe <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002eec:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <menu+0x1ca0>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d104      	bne.n	8002efe <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002ef4:	4a27      	ldr	r2, [pc, #156]	; (8002f94 <menu+0x1ce4>)
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f004 fee1 	bl	8007cc0 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002efe:	4b26      	ldr	r3, [pc, #152]	; (8002f98 <menu+0x1ce8>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d113      	bne.n	8002f2e <menu+0x1c7e>
			if(dilSecim == 0) {
 8002f06:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <menu+0x1ca0>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d105      	bne.n	8002f1a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002f0e:	4a11      	ldr	r2, [pc, #68]	; (8002f54 <menu+0x1ca4>)
 8002f10:	2101      	movs	r1, #1
 8002f12:	2002      	movs	r0, #2
 8002f14:	f004 fed4 	bl	8007cc0 <lcd_print>
 8002f18:	e04b      	b.n	8002fb2 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <menu+0x1ca0>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d147      	bne.n	8002fb2 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002f22:	4a0d      	ldr	r2, [pc, #52]	; (8002f58 <menu+0x1ca8>)
 8002f24:	2101      	movs	r1, #1
 8002f26:	2002      	movs	r0, #2
 8002f28:	f004 feca 	bl	8007cc0 <lcd_print>
 8002f2c:	e041      	b.n	8002fb2 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002f2e:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <menu+0x1ce8>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d13d      	bne.n	8002fb2 <menu+0x1d02>
			if(dilSecim == 0) {
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <menu+0x1ca0>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d130      	bne.n	8002fa0 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002f3e:	4a17      	ldr	r2, [pc, #92]	; (8002f9c <menu+0x1cec>)
 8002f40:	2101      	movs	r1, #1
 8002f42:	2002      	movs	r0, #2
 8002f44:	f004 febc 	bl	8007cc0 <lcd_print>
 8002f48:	e033      	b.n	8002fb2 <menu+0x1d02>
 8002f4a:	bf00      	nop
 8002f4c:	20000231 	.word	0x20000231
 8002f50:	20000245 	.word	0x20000245
 8002f54:	0800d318 	.word	0x0800d318
 8002f58:	0800d32c 	.word	0x0800d32c
 8002f5c:	40010800 	.word	0x40010800
 8002f60:	20000253 	.word	0x20000253
 8002f64:	20000128 	.word	0x20000128
 8002f68:	2000022a 	.word	0x2000022a
 8002f6c:	20000250 	.word	0x20000250
 8002f70:	20000224 	.word	0x20000224
 8002f74:	0800d6b8 	.word	0x0800d6b8
 8002f78:	0800d57c 	.word	0x0800d57c
 8002f7c:	0800d6cc 	.word	0x0800d6cc
 8002f80:	0800d5a0 	.word	0x0800d5a0
 8002f84:	2000023f 	.word	0x2000023f
 8002f88:	20000198 	.word	0x20000198
 8002f8c:	2000022f 	.word	0x2000022f
 8002f90:	0800d6e0 	.word	0x0800d6e0
 8002f94:	0800d6f4 	.word	0x0800d6f4
 8002f98:	20000232 	.word	0x20000232
 8002f9c:	0800d378 	.word	0x0800d378
			} else if(dilSecim == 1) {
 8002fa0:	4b99      	ldr	r3, [pc, #612]	; (8003208 <menu+0x1f58>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d104      	bne.n	8002fb2 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002fa8:	4a98      	ldr	r2, [pc, #608]	; (800320c <menu+0x1f5c>)
 8002faa:	2101      	movs	r1, #1
 8002fac:	2002      	movs	r0, #2
 8002fae:	f004 fe87 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	4896      	ldr	r0, [pc, #600]	; (8003210 <menu+0x1f60>)
 8002fb6:	f006 f9a9 	bl	800930c <HAL_GPIO_ReadPin>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d115      	bne.n	8002fec <menu+0x1d3c>
 8002fc0:	4b94      	ldr	r3, [pc, #592]	; (8003214 <menu+0x1f64>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	f083 0301 	eor.w	r3, r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00e      	beq.n	8002fec <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002fce:	4b92      	ldr	r3, [pc, #584]	; (8003218 <menu+0x1f68>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4b90      	ldr	r3, [pc, #576]	; (8003218 <menu+0x1f68>)
 8002fd8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002fda:	4b8f      	ldr	r3, [pc, #572]	; (8003218 <menu+0x1f68>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d902      	bls.n	8002fe8 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002fe2:	4b8d      	ldr	r3, [pc, #564]	; (8003218 <menu+0x1f68>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fe8:	f001 fd2c 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fec:	2104      	movs	r1, #4
 8002fee:	4888      	ldr	r0, [pc, #544]	; (8003210 <menu+0x1f60>)
 8002ff0:	f006 f98c 	bl	800930c <HAL_GPIO_ReadPin>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d115      	bne.n	8003026 <menu+0x1d76>
 8002ffa:	4b86      	ldr	r3, [pc, #536]	; (8003214 <menu+0x1f64>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	f083 0301 	eor.w	r3, r3, #1
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00e      	beq.n	8003026 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003008:	4b83      	ldr	r3, [pc, #524]	; (8003218 <menu+0x1f68>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	3b01      	subs	r3, #1
 800300e:	b2da      	uxtb	r2, r3
 8003010:	4b81      	ldr	r3, [pc, #516]	; (8003218 <menu+0x1f68>)
 8003012:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003014:	4b80      	ldr	r3, [pc, #512]	; (8003218 <menu+0x1f68>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800301c:	4b7e      	ldr	r3, [pc, #504]	; (8003218 <menu+0x1f68>)
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003022:	f001 fd0f 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003026:	2108      	movs	r1, #8
 8003028:	4879      	ldr	r0, [pc, #484]	; (8003210 <menu+0x1f60>)
 800302a:	f006 f96f 	bl	800930c <HAL_GPIO_ReadPin>
 800302e:	4603      	mov	r3, r0
 8003030:	2b01      	cmp	r3, #1
 8003032:	d10d      	bne.n	8003050 <menu+0x1da0>
 8003034:	4b77      	ldr	r3, [pc, #476]	; (8003214 <menu+0x1f64>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	f083 0301 	eor.w	r3, r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d006      	beq.n	8003050 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8003042:	4b75      	ldr	r3, [pc, #468]	; (8003218 <menu+0x1f68>)
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	4b75      	ldr	r3, [pc, #468]	; (800321c <menu+0x1f6c>)
 8003048:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800304a:	4b75      	ldr	r3, [pc, #468]	; (8003220 <menu+0x1f70>)
 800304c:	2201      	movs	r2, #1
 800304e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003050:	4b74      	ldr	r3, [pc, #464]	; (8003224 <menu+0x1f74>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b11      	cmp	r3, #17
 8003056:	f040 80c3 	bne.w	80031e0 <menu+0x1f30>
		if(dilSecim == 0) {
 800305a:	4b6b      	ldr	r3, [pc, #428]	; (8003208 <menu+0x1f58>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d105      	bne.n	800306e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003062:	4a71      	ldr	r2, [pc, #452]	; (8003228 <menu+0x1f78>)
 8003064:	2101      	movs	r1, #1
 8003066:	2001      	movs	r0, #1
 8003068:	f004 fe2a 	bl	8007cc0 <lcd_print>
 800306c:	e008      	b.n	8003080 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800306e:	4b66      	ldr	r3, [pc, #408]	; (8003208 <menu+0x1f58>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d104      	bne.n	8003080 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003076:	4a6d      	ldr	r2, [pc, #436]	; (800322c <menu+0x1f7c>)
 8003078:	2101      	movs	r1, #1
 800307a:	2001      	movs	r0, #1
 800307c:	f004 fe20 	bl	8007cc0 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003080:	4b6b      	ldr	r3, [pc, #428]	; (8003230 <menu+0x1f80>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d113      	bne.n	80030b0 <menu+0x1e00>
			if(dilSecim == 0){
 8003088:	4b5f      	ldr	r3, [pc, #380]	; (8003208 <menu+0x1f58>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d105      	bne.n	800309c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003090:	4a68      	ldr	r2, [pc, #416]	; (8003234 <menu+0x1f84>)
 8003092:	2101      	movs	r1, #1
 8003094:	2002      	movs	r0, #2
 8003096:	f004 fe13 	bl	8007cc0 <lcd_print>
 800309a:	e038      	b.n	800310e <menu+0x1e5e>
			} else if(dilSecim == 1){
 800309c:	4b5a      	ldr	r3, [pc, #360]	; (8003208 <menu+0x1f58>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d134      	bne.n	800310e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80030a4:	4a64      	ldr	r2, [pc, #400]	; (8003238 <menu+0x1f88>)
 80030a6:	2101      	movs	r1, #1
 80030a8:	2002      	movs	r0, #2
 80030aa:	f004 fe09 	bl	8007cc0 <lcd_print>
 80030ae:	e02e      	b.n	800310e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80030b0:	4b5f      	ldr	r3, [pc, #380]	; (8003230 <menu+0x1f80>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d113      	bne.n	80030e0 <menu+0x1e30>
			if(dilSecim == 0){
 80030b8:	4b53      	ldr	r3, [pc, #332]	; (8003208 <menu+0x1f58>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d105      	bne.n	80030cc <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80030c0:	4a5e      	ldr	r2, [pc, #376]	; (800323c <menu+0x1f8c>)
 80030c2:	2101      	movs	r1, #1
 80030c4:	2002      	movs	r0, #2
 80030c6:	f004 fdfb 	bl	8007cc0 <lcd_print>
 80030ca:	e020      	b.n	800310e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80030cc:	4b4e      	ldr	r3, [pc, #312]	; (8003208 <menu+0x1f58>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d11c      	bne.n	800310e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80030d4:	4a5a      	ldr	r2, [pc, #360]	; (8003240 <menu+0x1f90>)
 80030d6:	2101      	movs	r1, #1
 80030d8:	2002      	movs	r0, #2
 80030da:	f004 fdf1 	bl	8007cc0 <lcd_print>
 80030de:	e016      	b.n	800310e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80030e0:	4b53      	ldr	r3, [pc, #332]	; (8003230 <menu+0x1f80>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d112      	bne.n	800310e <menu+0x1e5e>
			if(dilSecim == 0) {
 80030e8:	4b47      	ldr	r3, [pc, #284]	; (8003208 <menu+0x1f58>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80030f0:	4a54      	ldr	r2, [pc, #336]	; (8003244 <menu+0x1f94>)
 80030f2:	2101      	movs	r1, #1
 80030f4:	2002      	movs	r0, #2
 80030f6:	f004 fde3 	bl	8007cc0 <lcd_print>
 80030fa:	e008      	b.n	800310e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80030fc:	4b42      	ldr	r3, [pc, #264]	; (8003208 <menu+0x1f58>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d104      	bne.n	800310e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003104:	4a50      	ldr	r2, [pc, #320]	; (8003248 <menu+0x1f98>)
 8003106:	2101      	movs	r1, #1
 8003108:	2002      	movs	r0, #2
 800310a:	f004 fdd9 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800310e:	2102      	movs	r1, #2
 8003110:	483f      	ldr	r0, [pc, #252]	; (8003210 <menu+0x1f60>)
 8003112:	f006 f8fb 	bl	800930c <HAL_GPIO_ReadPin>
 8003116:	4603      	mov	r3, r0
 8003118:	2b01      	cmp	r3, #1
 800311a:	d115      	bne.n	8003148 <menu+0x1e98>
 800311c:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <menu+0x1f64>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	f083 0301 	eor.w	r3, r3, #1
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00e      	beq.n	8003148 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800312a:	4b41      	ldr	r3, [pc, #260]	; (8003230 <menu+0x1f80>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	3301      	adds	r3, #1
 8003130:	b2da      	uxtb	r2, r3
 8003132:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <menu+0x1f80>)
 8003134:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003136:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <menu+0x1f80>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d902      	bls.n	8003144 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800313e:	4b3c      	ldr	r3, [pc, #240]	; (8003230 <menu+0x1f80>)
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003144:	f001 fc7e 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003148:	2104      	movs	r1, #4
 800314a:	4831      	ldr	r0, [pc, #196]	; (8003210 <menu+0x1f60>)
 800314c:	f006 f8de 	bl	800930c <HAL_GPIO_ReadPin>
 8003150:	4603      	mov	r3, r0
 8003152:	2b01      	cmp	r3, #1
 8003154:	d115      	bne.n	8003182 <menu+0x1ed2>
 8003156:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <menu+0x1f64>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	f083 0301 	eor.w	r3, r3, #1
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00e      	beq.n	8003182 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003164:	4b32      	ldr	r3, [pc, #200]	; (8003230 <menu+0x1f80>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	3b01      	subs	r3, #1
 800316a:	b2da      	uxtb	r2, r3
 800316c:	4b30      	ldr	r3, [pc, #192]	; (8003230 <menu+0x1f80>)
 800316e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003170:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <menu+0x1f80>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b03      	cmp	r3, #3
 8003176:	d902      	bls.n	800317e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003178:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <menu+0x1f80>)
 800317a:	2202      	movs	r2, #2
 800317c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800317e:	f001 fc61 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003182:	2108      	movs	r1, #8
 8003184:	4822      	ldr	r0, [pc, #136]	; (8003210 <menu+0x1f60>)
 8003186:	f006 f8c1 	bl	800930c <HAL_GPIO_ReadPin>
 800318a:	4603      	mov	r3, r0
 800318c:	2b01      	cmp	r3, #1
 800318e:	d127      	bne.n	80031e0 <menu+0x1f30>
 8003190:	4b20      	ldr	r3, [pc, #128]	; (8003214 <menu+0x1f64>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	f083 0301 	eor.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d020      	beq.n	80031e0 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800319e:	4b24      	ldr	r3, [pc, #144]	; (8003230 <menu+0x1f80>)
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	4b1e      	ldr	r3, [pc, #120]	; (800321c <menu+0x1f6c>)
 80031a4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80031a6:	4b22      	ldr	r3, [pc, #136]	; (8003230 <menu+0x1f80>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d003      	beq.n	80031b6 <menu+0x1f06>
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <menu+0x1f80>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d106      	bne.n	80031c4 <menu+0x1f14>
				calismaSekli = 0;
 80031b6:	4b25      	ldr	r3, [pc, #148]	; (800324c <menu+0x1f9c>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80031bc:	4b23      	ldr	r3, [pc, #140]	; (800324c <menu+0x1f9c>)
 80031be:	781a      	ldrb	r2, [r3, #0]
 80031c0:	4b16      	ldr	r3, [pc, #88]	; (800321c <menu+0x1f6c>)
 80031c2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <menu+0x1f80>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d106      	bne.n	80031da <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80031cc:	4b20      	ldr	r3, [pc, #128]	; (8003250 <menu+0x1fa0>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80031d2:	4b1f      	ldr	r3, [pc, #124]	; (8003250 <menu+0x1fa0>)
 80031d4:	781a      	ldrb	r2, [r3, #0]
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <menu+0x1f6c>)
 80031d8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80031da:	4b11      	ldr	r3, [pc, #68]	; (8003220 <menu+0x1f70>)
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <menu+0x1f74>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b12      	cmp	r3, #18
 80031e6:	f040 80d5 	bne.w	8003394 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80031ea:	4b11      	ldr	r3, [pc, #68]	; (8003230 <menu+0x1f80>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d13c      	bne.n	800326c <menu+0x1fbc>
			if(dilSecim == 0) {
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <menu+0x1f58>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d12e      	bne.n	8003258 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80031fa:	4a16      	ldr	r2, [pc, #88]	; (8003254 <menu+0x1fa4>)
 80031fc:	2101      	movs	r1, #1
 80031fe:	2001      	movs	r0, #1
 8003200:	f004 fd5e 	bl	8007cc0 <lcd_print>
 8003204:	e048      	b.n	8003298 <menu+0x1fe8>
 8003206:	bf00      	nop
 8003208:	20000245 	.word	0x20000245
 800320c:	0800d38c 	.word	0x0800d38c
 8003210:	40010800 	.word	0x40010800
 8003214:	20000253 	.word	0x20000253
 8003218:	20000232 	.word	0x20000232
 800321c:	20000128 	.word	0x20000128
 8003220:	20000250 	.word	0x20000250
 8003224:	20000224 	.word	0x20000224
 8003228:	0800d708 	.word	0x0800d708
 800322c:	0800d71c 	.word	0x0800d71c
 8003230:	20000233 	.word	0x20000233
 8003234:	0800d730 	.word	0x0800d730
 8003238:	0800d740 	.word	0x0800d740
 800323c:	0800d750 	.word	0x0800d750
 8003240:	0800d760 	.word	0x0800d760
 8003244:	0800d318 	.word	0x0800d318
 8003248:	0800d32c 	.word	0x0800d32c
 800324c:	20000225 	.word	0x20000225
 8003250:	20000236 	.word	0x20000236
 8003254:	0800d770 	.word	0x0800d770
			} else if(dilSecim == 1) {
 8003258:	4b7b      	ldr	r3, [pc, #492]	; (8003448 <menu+0x2198>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d11b      	bne.n	8003298 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003260:	4a7a      	ldr	r2, [pc, #488]	; (800344c <menu+0x219c>)
 8003262:	2101      	movs	r1, #1
 8003264:	2001      	movs	r0, #1
 8003266:	f004 fd2b 	bl	8007cc0 <lcd_print>
 800326a:	e015      	b.n	8003298 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800326c:	4b78      	ldr	r3, [pc, #480]	; (8003450 <menu+0x21a0>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d111      	bne.n	8003298 <menu+0x1fe8>
			if(dilSecim == 0){
 8003274:	4b74      	ldr	r3, [pc, #464]	; (8003448 <menu+0x2198>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d104      	bne.n	8003286 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800327c:	4a75      	ldr	r2, [pc, #468]	; (8003454 <menu+0x21a4>)
 800327e:	2101      	movs	r1, #1
 8003280:	2001      	movs	r0, #1
 8003282:	f004 fd1d 	bl	8007cc0 <lcd_print>
			}
			if(dilSecim == 1){
 8003286:	4b70      	ldr	r3, [pc, #448]	; (8003448 <menu+0x2198>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d104      	bne.n	8003298 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800328e:	4a72      	ldr	r2, [pc, #456]	; (8003458 <menu+0x21a8>)
 8003290:	2101      	movs	r1, #1
 8003292:	2001      	movs	r0, #1
 8003294:	f004 fd14 	bl	8007cc0 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003298:	4b70      	ldr	r3, [pc, #448]	; (800345c <menu+0x21ac>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d113      	bne.n	80032c8 <menu+0x2018>
			if(dilSecim == 0) {
 80032a0:	4b69      	ldr	r3, [pc, #420]	; (8003448 <menu+0x2198>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80032a8:	4a6d      	ldr	r2, [pc, #436]	; (8003460 <menu+0x21b0>)
 80032aa:	2101      	movs	r1, #1
 80032ac:	2002      	movs	r0, #2
 80032ae:	f004 fd07 	bl	8007cc0 <lcd_print>
 80032b2:	e020      	b.n	80032f6 <menu+0x2046>
			} else if(dilSecim == 1){
 80032b4:	4b64      	ldr	r3, [pc, #400]	; (8003448 <menu+0x2198>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d11c      	bne.n	80032f6 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80032bc:	4a69      	ldr	r2, [pc, #420]	; (8003464 <menu+0x21b4>)
 80032be:	2101      	movs	r1, #1
 80032c0:	2002      	movs	r0, #2
 80032c2:	f004 fcfd 	bl	8007cc0 <lcd_print>
 80032c6:	e016      	b.n	80032f6 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80032c8:	4b64      	ldr	r3, [pc, #400]	; (800345c <menu+0x21ac>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d112      	bne.n	80032f6 <menu+0x2046>
			if(dilSecim == 0){
 80032d0:	4b5d      	ldr	r3, [pc, #372]	; (8003448 <menu+0x2198>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d105      	bne.n	80032e4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80032d8:	4a63      	ldr	r2, [pc, #396]	; (8003468 <menu+0x21b8>)
 80032da:	2101      	movs	r1, #1
 80032dc:	2002      	movs	r0, #2
 80032de:	f004 fcef 	bl	8007cc0 <lcd_print>
 80032e2:	e008      	b.n	80032f6 <menu+0x2046>
			} else if(dilSecim == 1){
 80032e4:	4b58      	ldr	r3, [pc, #352]	; (8003448 <menu+0x2198>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d104      	bne.n	80032f6 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80032ec:	4a5f      	ldr	r2, [pc, #380]	; (800346c <menu+0x21bc>)
 80032ee:	2101      	movs	r1, #1
 80032f0:	2002      	movs	r0, #2
 80032f2:	f004 fce5 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032f6:	2102      	movs	r1, #2
 80032f8:	485d      	ldr	r0, [pc, #372]	; (8003470 <menu+0x21c0>)
 80032fa:	f006 f807 	bl	800930c <HAL_GPIO_ReadPin>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b01      	cmp	r3, #1
 8003302:	d115      	bne.n	8003330 <menu+0x2080>
 8003304:	4b5b      	ldr	r3, [pc, #364]	; (8003474 <menu+0x21c4>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	f083 0301 	eor.w	r3, r3, #1
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00e      	beq.n	8003330 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003312:	4b52      	ldr	r3, [pc, #328]	; (800345c <menu+0x21ac>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	3301      	adds	r3, #1
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4b50      	ldr	r3, [pc, #320]	; (800345c <menu+0x21ac>)
 800331c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800331e:	4b4f      	ldr	r3, [pc, #316]	; (800345c <menu+0x21ac>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d902      	bls.n	800332c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003326:	4b4d      	ldr	r3, [pc, #308]	; (800345c <menu+0x21ac>)
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800332c:	f001 fb8a 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003330:	2104      	movs	r1, #4
 8003332:	484f      	ldr	r0, [pc, #316]	; (8003470 <menu+0x21c0>)
 8003334:	f005 ffea 	bl	800930c <HAL_GPIO_ReadPin>
 8003338:	4603      	mov	r3, r0
 800333a:	2b01      	cmp	r3, #1
 800333c:	d115      	bne.n	800336a <menu+0x20ba>
 800333e:	4b4d      	ldr	r3, [pc, #308]	; (8003474 <menu+0x21c4>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	f083 0301 	eor.w	r3, r3, #1
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00e      	beq.n	800336a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800334c:	4b43      	ldr	r3, [pc, #268]	; (800345c <menu+0x21ac>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	3b01      	subs	r3, #1
 8003352:	b2da      	uxtb	r2, r3
 8003354:	4b41      	ldr	r3, [pc, #260]	; (800345c <menu+0x21ac>)
 8003356:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003358:	4b40      	ldr	r3, [pc, #256]	; (800345c <menu+0x21ac>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003360:	4b3e      	ldr	r3, [pc, #248]	; (800345c <menu+0x21ac>)
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003366:	f001 fb6d 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800336a:	2108      	movs	r1, #8
 800336c:	4840      	ldr	r0, [pc, #256]	; (8003470 <menu+0x21c0>)
 800336e:	f005 ffcd 	bl	800930c <HAL_GPIO_ReadPin>
 8003372:	4603      	mov	r3, r0
 8003374:	2b01      	cmp	r3, #1
 8003376:	d10d      	bne.n	8003394 <menu+0x20e4>
 8003378:	4b3e      	ldr	r3, [pc, #248]	; (8003474 <menu+0x21c4>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	f083 0301 	eor.w	r3, r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003386:	4b35      	ldr	r3, [pc, #212]	; (800345c <menu+0x21ac>)
 8003388:	781a      	ldrb	r2, [r3, #0]
 800338a:	4b3b      	ldr	r3, [pc, #236]	; (8003478 <menu+0x21c8>)
 800338c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800338e:	4b3b      	ldr	r3, [pc, #236]	; (800347c <menu+0x21cc>)
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003394:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <menu+0x21d0>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b13      	cmp	r3, #19
 800339a:	f040 80d5 	bne.w	8003548 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800339e:	4b2c      	ldr	r3, [pc, #176]	; (8003450 <menu+0x21a0>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d113      	bne.n	80033ce <menu+0x211e>
			if(dilSecim == 0) {
 80033a6:	4b28      	ldr	r3, [pc, #160]	; (8003448 <menu+0x2198>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d105      	bne.n	80033ba <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80033ae:	4a35      	ldr	r2, [pc, #212]	; (8003484 <menu+0x21d4>)
 80033b0:	2101      	movs	r1, #1
 80033b2:	2001      	movs	r0, #1
 80033b4:	f004 fc84 	bl	8007cc0 <lcd_print>
 80033b8:	e01f      	b.n	80033fa <menu+0x214a>
			} else if(dilSecim == 1) {
 80033ba:	4b23      	ldr	r3, [pc, #140]	; (8003448 <menu+0x2198>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d11b      	bne.n	80033fa <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80033c2:	4a31      	ldr	r2, [pc, #196]	; (8003488 <menu+0x21d8>)
 80033c4:	2101      	movs	r1, #1
 80033c6:	2001      	movs	r0, #1
 80033c8:	f004 fc7a 	bl	8007cc0 <lcd_print>
 80033cc:	e015      	b.n	80033fa <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80033ce:	4b20      	ldr	r3, [pc, #128]	; (8003450 <menu+0x21a0>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d111      	bne.n	80033fa <menu+0x214a>
			if(dilSecim == 0) {
 80033d6:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <menu+0x2198>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80033de:	4a2b      	ldr	r2, [pc, #172]	; (800348c <menu+0x21dc>)
 80033e0:	2101      	movs	r1, #1
 80033e2:	2001      	movs	r0, #1
 80033e4:	f004 fc6c 	bl	8007cc0 <lcd_print>
			}
			if(dilSecim == 1) {
 80033e8:	4b17      	ldr	r3, [pc, #92]	; (8003448 <menu+0x2198>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d104      	bne.n	80033fa <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80033f0:	4a27      	ldr	r2, [pc, #156]	; (8003490 <menu+0x21e0>)
 80033f2:	2101      	movs	r1, #1
 80033f4:	2001      	movs	r0, #1
 80033f6:	f004 fc63 	bl	8007cc0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80033fa:	4b26      	ldr	r3, [pc, #152]	; (8003494 <menu+0x21e4>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d113      	bne.n	800342a <menu+0x217a>
			if(dilSecim == 0) {
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <menu+0x2198>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d105      	bne.n	8003416 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800340a:	4a15      	ldr	r2, [pc, #84]	; (8003460 <menu+0x21b0>)
 800340c:	2101      	movs	r1, #1
 800340e:	2002      	movs	r0, #2
 8003410:	f004 fc56 	bl	8007cc0 <lcd_print>
 8003414:	e049      	b.n	80034aa <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003416:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <menu+0x2198>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d145      	bne.n	80034aa <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800341e:	4a11      	ldr	r2, [pc, #68]	; (8003464 <menu+0x21b4>)
 8003420:	2101      	movs	r1, #1
 8003422:	2002      	movs	r0, #2
 8003424:	f004 fc4c 	bl	8007cc0 <lcd_print>
 8003428:	e03f      	b.n	80034aa <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800342a:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <menu+0x21e4>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d13b      	bne.n	80034aa <menu+0x21fa>
			if(dilSecim == 0) {
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <menu+0x2198>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d12e      	bne.n	8003498 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800343a:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <menu+0x21b8>)
 800343c:	2101      	movs	r1, #1
 800343e:	2002      	movs	r0, #2
 8003440:	f004 fc3e 	bl	8007cc0 <lcd_print>
 8003444:	e031      	b.n	80034aa <menu+0x21fa>
 8003446:	bf00      	nop
 8003448:	20000245 	.word	0x20000245
 800344c:	0800d784 	.word	0x0800d784
 8003450:	20000233 	.word	0x20000233
 8003454:	0800d794 	.word	0x0800d794
 8003458:	0800d7a8 	.word	0x0800d7a8
 800345c:	20000234 	.word	0x20000234
 8003460:	0800d318 	.word	0x0800d318
 8003464:	0800d32c 	.word	0x0800d32c
 8003468:	0800d378 	.word	0x0800d378
 800346c:	0800d38c 	.word	0x0800d38c
 8003470:	40010800 	.word	0x40010800
 8003474:	20000253 	.word	0x20000253
 8003478:	20000128 	.word	0x20000128
 800347c:	20000250 	.word	0x20000250
 8003480:	20000224 	.word	0x20000224
 8003484:	0800d7bc 	.word	0x0800d7bc
 8003488:	0800d7d0 	.word	0x0800d7d0
 800348c:	0800d7e4 	.word	0x0800d7e4
 8003490:	0800d7f8 	.word	0x0800d7f8
 8003494:	20000235 	.word	0x20000235
			} else if(dilSecim == 1) {
 8003498:	4b90      	ldr	r3, [pc, #576]	; (80036dc <menu+0x242c>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d104      	bne.n	80034aa <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80034a0:	4a8f      	ldr	r2, [pc, #572]	; (80036e0 <menu+0x2430>)
 80034a2:	2101      	movs	r1, #1
 80034a4:	2002      	movs	r0, #2
 80034a6:	f004 fc0b 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034aa:	2102      	movs	r1, #2
 80034ac:	488d      	ldr	r0, [pc, #564]	; (80036e4 <menu+0x2434>)
 80034ae:	f005 ff2d 	bl	800930c <HAL_GPIO_ReadPin>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d115      	bne.n	80034e4 <menu+0x2234>
 80034b8:	4b8b      	ldr	r3, [pc, #556]	; (80036e8 <menu+0x2438>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	f083 0301 	eor.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00e      	beq.n	80034e4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80034c6:	4b89      	ldr	r3, [pc, #548]	; (80036ec <menu+0x243c>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	3301      	adds	r3, #1
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	4b87      	ldr	r3, [pc, #540]	; (80036ec <menu+0x243c>)
 80034d0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80034d2:	4b86      	ldr	r3, [pc, #536]	; (80036ec <menu+0x243c>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d902      	bls.n	80034e0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80034da:	4b84      	ldr	r3, [pc, #528]	; (80036ec <menu+0x243c>)
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034e0:	f001 fab0 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034e4:	2104      	movs	r1, #4
 80034e6:	487f      	ldr	r0, [pc, #508]	; (80036e4 <menu+0x2434>)
 80034e8:	f005 ff10 	bl	800930c <HAL_GPIO_ReadPin>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d115      	bne.n	800351e <menu+0x226e>
 80034f2:	4b7d      	ldr	r3, [pc, #500]	; (80036e8 <menu+0x2438>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	f083 0301 	eor.w	r3, r3, #1
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00e      	beq.n	800351e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003500:	4b7a      	ldr	r3, [pc, #488]	; (80036ec <menu+0x243c>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	3b01      	subs	r3, #1
 8003506:	b2da      	uxtb	r2, r3
 8003508:	4b78      	ldr	r3, [pc, #480]	; (80036ec <menu+0x243c>)
 800350a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800350c:	4b77      	ldr	r3, [pc, #476]	; (80036ec <menu+0x243c>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003514:	4b75      	ldr	r3, [pc, #468]	; (80036ec <menu+0x243c>)
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800351a:	f001 fa93 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800351e:	2108      	movs	r1, #8
 8003520:	4870      	ldr	r0, [pc, #448]	; (80036e4 <menu+0x2434>)
 8003522:	f005 fef3 	bl	800930c <HAL_GPIO_ReadPin>
 8003526:	4603      	mov	r3, r0
 8003528:	2b01      	cmp	r3, #1
 800352a:	d10d      	bne.n	8003548 <menu+0x2298>
 800352c:	4b6e      	ldr	r3, [pc, #440]	; (80036e8 <menu+0x2438>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	f083 0301 	eor.w	r3, r3, #1
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d006      	beq.n	8003548 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800353a:	4b6c      	ldr	r3, [pc, #432]	; (80036ec <menu+0x243c>)
 800353c:	781a      	ldrb	r2, [r3, #0]
 800353e:	4b6c      	ldr	r3, [pc, #432]	; (80036f0 <menu+0x2440>)
 8003540:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003542:	4b6c      	ldr	r3, [pc, #432]	; (80036f4 <menu+0x2444>)
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003548:	4b6b      	ldr	r3, [pc, #428]	; (80036f8 <menu+0x2448>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b14      	cmp	r3, #20
 800354e:	f040 80b5 	bne.w	80036bc <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003552:	4b6a      	ldr	r3, [pc, #424]	; (80036fc <menu+0x244c>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d113      	bne.n	8003582 <menu+0x22d2>
			if(dilSecim == 0) {
 800355a:	4b60      	ldr	r3, [pc, #384]	; (80036dc <menu+0x242c>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d105      	bne.n	800356e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003562:	4a67      	ldr	r2, [pc, #412]	; (8003700 <menu+0x2450>)
 8003564:	2101      	movs	r1, #1
 8003566:	2001      	movs	r0, #1
 8003568:	f004 fbaa 	bl	8007cc0 <lcd_print>
 800356c:	e020      	b.n	80035b0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800356e:	4b5b      	ldr	r3, [pc, #364]	; (80036dc <menu+0x242c>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d11c      	bne.n	80035b0 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003576:	4a63      	ldr	r2, [pc, #396]	; (8003704 <menu+0x2454>)
 8003578:	2101      	movs	r1, #1
 800357a:	2001      	movs	r0, #1
 800357c:	f004 fba0 	bl	8007cc0 <lcd_print>
 8003580:	e016      	b.n	80035b0 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003582:	4b5e      	ldr	r3, [pc, #376]	; (80036fc <menu+0x244c>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d112      	bne.n	80035b0 <menu+0x2300>
			if(dilSecim == 0) {
 800358a:	4b54      	ldr	r3, [pc, #336]	; (80036dc <menu+0x242c>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d105      	bne.n	800359e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003592:	4a5d      	ldr	r2, [pc, #372]	; (8003708 <menu+0x2458>)
 8003594:	2101      	movs	r1, #1
 8003596:	2001      	movs	r0, #1
 8003598:	f004 fb92 	bl	8007cc0 <lcd_print>
 800359c:	e008      	b.n	80035b0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800359e:	4b4f      	ldr	r3, [pc, #316]	; (80036dc <menu+0x242c>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d104      	bne.n	80035b0 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80035a6:	4a59      	ldr	r2, [pc, #356]	; (800370c <menu+0x245c>)
 80035a8:	2101      	movs	r1, #1
 80035aa:	2001      	movs	r0, #1
 80035ac:	f004 fb88 	bl	8007cc0 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80035b0:	4b57      	ldr	r3, [pc, #348]	; (8003710 <menu+0x2460>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d113      	bne.n	80035e0 <menu+0x2330>
			if(dilSecim == 0) {
 80035b8:	4b48      	ldr	r3, [pc, #288]	; (80036dc <menu+0x242c>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80035c0:	4a54      	ldr	r2, [pc, #336]	; (8003714 <menu+0x2464>)
 80035c2:	2101      	movs	r1, #1
 80035c4:	2002      	movs	r0, #2
 80035c6:	f004 fb7b 	bl	8007cc0 <lcd_print>
 80035ca:	e020      	b.n	800360e <menu+0x235e>
			} else if(dilSecim == 1) {
 80035cc:	4b43      	ldr	r3, [pc, #268]	; (80036dc <menu+0x242c>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d11c      	bne.n	800360e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80035d4:	4a50      	ldr	r2, [pc, #320]	; (8003718 <menu+0x2468>)
 80035d6:	2101      	movs	r1, #1
 80035d8:	2002      	movs	r0, #2
 80035da:	f004 fb71 	bl	8007cc0 <lcd_print>
 80035de:	e016      	b.n	800360e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80035e0:	4b4b      	ldr	r3, [pc, #300]	; (8003710 <menu+0x2460>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d112      	bne.n	800360e <menu+0x235e>
			if(dilSecim == 0) {
 80035e8:	4b3c      	ldr	r3, [pc, #240]	; (80036dc <menu+0x242c>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d105      	bne.n	80035fc <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80035f0:	4a4a      	ldr	r2, [pc, #296]	; (800371c <menu+0x246c>)
 80035f2:	2101      	movs	r1, #1
 80035f4:	2002      	movs	r0, #2
 80035f6:	f004 fb63 	bl	8007cc0 <lcd_print>
 80035fa:	e008      	b.n	800360e <menu+0x235e>
			} else if(dilSecim == 1) {
 80035fc:	4b37      	ldr	r3, [pc, #220]	; (80036dc <menu+0x242c>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d104      	bne.n	800360e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003604:	4a46      	ldr	r2, [pc, #280]	; (8003720 <menu+0x2470>)
 8003606:	2101      	movs	r1, #1
 8003608:	2002      	movs	r0, #2
 800360a:	f004 fb59 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800360e:	2102      	movs	r1, #2
 8003610:	4834      	ldr	r0, [pc, #208]	; (80036e4 <menu+0x2434>)
 8003612:	f005 fe7b 	bl	800930c <HAL_GPIO_ReadPin>
 8003616:	4603      	mov	r3, r0
 8003618:	2b01      	cmp	r3, #1
 800361a:	d119      	bne.n	8003650 <menu+0x23a0>
 800361c:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <menu+0x2438>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	f083 0301 	eor.w	r3, r3, #1
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d012      	beq.n	8003650 <menu+0x23a0>
 800362a:	4b34      	ldr	r3, [pc, #208]	; (80036fc <menu+0x244c>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d10e      	bne.n	8003650 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003632:	4b37      	ldr	r3, [pc, #220]	; (8003710 <menu+0x2460>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	b2da      	uxtb	r2, r3
 800363a:	4b35      	ldr	r3, [pc, #212]	; (8003710 <menu+0x2460>)
 800363c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800363e:	4b34      	ldr	r3, [pc, #208]	; (8003710 <menu+0x2460>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d902      	bls.n	800364c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003646:	4b32      	ldr	r3, [pc, #200]	; (8003710 <menu+0x2460>)
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800364c:	f001 f9fa 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003650:	2104      	movs	r1, #4
 8003652:	4824      	ldr	r0, [pc, #144]	; (80036e4 <menu+0x2434>)
 8003654:	f005 fe5a 	bl	800930c <HAL_GPIO_ReadPin>
 8003658:	4603      	mov	r3, r0
 800365a:	2b01      	cmp	r3, #1
 800365c:	d119      	bne.n	8003692 <menu+0x23e2>
 800365e:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <menu+0x2438>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	f083 0301 	eor.w	r3, r3, #1
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d012      	beq.n	8003692 <menu+0x23e2>
 800366c:	4b23      	ldr	r3, [pc, #140]	; (80036fc <menu+0x244c>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d10e      	bne.n	8003692 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003674:	4b26      	ldr	r3, [pc, #152]	; (8003710 <menu+0x2460>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	3b01      	subs	r3, #1
 800367a:	b2da      	uxtb	r2, r3
 800367c:	4b24      	ldr	r3, [pc, #144]	; (8003710 <menu+0x2460>)
 800367e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003680:	4b23      	ldr	r3, [pc, #140]	; (8003710 <menu+0x2460>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003688:	4b21      	ldr	r3, [pc, #132]	; (8003710 <menu+0x2460>)
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800368e:	f001 f9d9 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003692:	2108      	movs	r1, #8
 8003694:	4813      	ldr	r0, [pc, #76]	; (80036e4 <menu+0x2434>)
 8003696:	f005 fe39 	bl	800930c <HAL_GPIO_ReadPin>
 800369a:	4603      	mov	r3, r0
 800369c:	2b01      	cmp	r3, #1
 800369e:	d10d      	bne.n	80036bc <menu+0x240c>
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <menu+0x2438>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	f083 0301 	eor.w	r3, r3, #1
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d006      	beq.n	80036bc <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80036ae:	4b18      	ldr	r3, [pc, #96]	; (8003710 <menu+0x2460>)
 80036b0:	781a      	ldrb	r2, [r3, #0]
 80036b2:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <menu+0x2440>)
 80036b4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80036b6:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <menu+0x2444>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80036bc:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <menu+0x2448>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b15      	cmp	r3, #21
 80036c2:	f040 80c2 	bne.w	800384a <menu+0x259a>
		if(dilSecim == 0) {
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <menu+0x242c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d12c      	bne.n	8003728 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80036ce:	4a15      	ldr	r2, [pc, #84]	; (8003724 <menu+0x2474>)
 80036d0:	2101      	movs	r1, #1
 80036d2:	2001      	movs	r0, #1
 80036d4:	f004 faf4 	bl	8007cc0 <lcd_print>
 80036d8:	e02f      	b.n	800373a <menu+0x248a>
 80036da:	bf00      	nop
 80036dc:	20000245 	.word	0x20000245
 80036e0:	0800d38c 	.word	0x0800d38c
 80036e4:	40010800 	.word	0x40010800
 80036e8:	20000253 	.word	0x20000253
 80036ec:	20000235 	.word	0x20000235
 80036f0:	20000128 	.word	0x20000128
 80036f4:	20000250 	.word	0x20000250
 80036f8:	20000224 	.word	0x20000224
 80036fc:	20000233 	.word	0x20000233
 8003700:	0800d80c 	.word	0x0800d80c
 8003704:	0800d820 	.word	0x0800d820
 8003708:	0800d834 	.word	0x0800d834
 800370c:	0800d848 	.word	0x0800d848
 8003710:	20000236 	.word	0x20000236
 8003714:	0800d85c 	.word	0x0800d85c
 8003718:	0800d870 	.word	0x0800d870
 800371c:	0800d880 	.word	0x0800d880
 8003720:	0800d894 	.word	0x0800d894
 8003724:	0800d8a4 	.word	0x0800d8a4
		} else if(dilSecim == 1) {
 8003728:	4b9c      	ldr	r3, [pc, #624]	; (800399c <menu+0x26ec>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d104      	bne.n	800373a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003730:	4a9b      	ldr	r2, [pc, #620]	; (80039a0 <menu+0x26f0>)
 8003732:	2101      	movs	r1, #1
 8003734:	2001      	movs	r0, #1
 8003736:	f004 fac3 	bl	8007cc0 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800373a:	4b9a      	ldr	r3, [pc, #616]	; (80039a4 <menu+0x26f4>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d112      	bne.n	8003768 <menu+0x24b8>
			if(dilSecim == 0) {
 8003742:	4b96      	ldr	r3, [pc, #600]	; (800399c <menu+0x26ec>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800374a:	4a97      	ldr	r2, [pc, #604]	; (80039a8 <menu+0x26f8>)
 800374c:	2101      	movs	r1, #1
 800374e:	2002      	movs	r0, #2
 8003750:	f004 fab6 	bl	8007cc0 <lcd_print>
			}
			if(dilSecim == 1) {
 8003754:	4b91      	ldr	r3, [pc, #580]	; (800399c <menu+0x26ec>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d11c      	bne.n	8003796 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 800375c:	4a93      	ldr	r2, [pc, #588]	; (80039ac <menu+0x26fc>)
 800375e:	2101      	movs	r1, #1
 8003760:	2002      	movs	r0, #2
 8003762:	f004 faad 	bl	8007cc0 <lcd_print>
 8003766:	e016      	b.n	8003796 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003768:	4b8e      	ldr	r3, [pc, #568]	; (80039a4 <menu+0x26f4>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d112      	bne.n	8003796 <menu+0x24e6>
			if(dilSecim == 0) {
 8003770:	4b8a      	ldr	r3, [pc, #552]	; (800399c <menu+0x26ec>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d105      	bne.n	8003784 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003778:	4a8d      	ldr	r2, [pc, #564]	; (80039b0 <menu+0x2700>)
 800377a:	2101      	movs	r1, #1
 800377c:	2002      	movs	r0, #2
 800377e:	f004 fa9f 	bl	8007cc0 <lcd_print>
 8003782:	e008      	b.n	8003796 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003784:	4b85      	ldr	r3, [pc, #532]	; (800399c <menu+0x26ec>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d104      	bne.n	8003796 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 800378c:	4a89      	ldr	r2, [pc, #548]	; (80039b4 <menu+0x2704>)
 800378e:	2101      	movs	r1, #1
 8003790:	2002      	movs	r0, #2
 8003792:	f004 fa95 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003796:	2102      	movs	r1, #2
 8003798:	4887      	ldr	r0, [pc, #540]	; (80039b8 <menu+0x2708>)
 800379a:	f005 fdb7 	bl	800930c <HAL_GPIO_ReadPin>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d115      	bne.n	80037d0 <menu+0x2520>
 80037a4:	4b85      	ldr	r3, [pc, #532]	; (80039bc <menu+0x270c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	f083 0301 	eor.w	r3, r3, #1
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00e      	beq.n	80037d0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80037b2:	4b7c      	ldr	r3, [pc, #496]	; (80039a4 <menu+0x26f4>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	3301      	adds	r3, #1
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4b7a      	ldr	r3, [pc, #488]	; (80039a4 <menu+0x26f4>)
 80037bc:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80037be:	4b79      	ldr	r3, [pc, #484]	; (80039a4 <menu+0x26f4>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d902      	bls.n	80037cc <menu+0x251c>
				platformSilindirTipi = 0;
 80037c6:	4b77      	ldr	r3, [pc, #476]	; (80039a4 <menu+0x26f4>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037cc:	f001 f93a 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037d0:	2104      	movs	r1, #4
 80037d2:	4879      	ldr	r0, [pc, #484]	; (80039b8 <menu+0x2708>)
 80037d4:	f005 fd9a 	bl	800930c <HAL_GPIO_ReadPin>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d115      	bne.n	800380a <menu+0x255a>
 80037de:	4b77      	ldr	r3, [pc, #476]	; (80039bc <menu+0x270c>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	f083 0301 	eor.w	r3, r3, #1
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00e      	beq.n	800380a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80037ec:	4b6d      	ldr	r3, [pc, #436]	; (80039a4 <menu+0x26f4>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	4b6b      	ldr	r3, [pc, #428]	; (80039a4 <menu+0x26f4>)
 80037f6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80037f8:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <menu+0x26f4>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003800:	4b68      	ldr	r3, [pc, #416]	; (80039a4 <menu+0x26f4>)
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003806:	f001 f91d 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800380a:	2108      	movs	r1, #8
 800380c:	486a      	ldr	r0, [pc, #424]	; (80039b8 <menu+0x2708>)
 800380e:	f005 fd7d 	bl	800930c <HAL_GPIO_ReadPin>
 8003812:	4603      	mov	r3, r0
 8003814:	2b01      	cmp	r3, #1
 8003816:	d118      	bne.n	800384a <menu+0x259a>
 8003818:	4b68      	ldr	r3, [pc, #416]	; (80039bc <menu+0x270c>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	f083 0301 	eor.w	r3, r3, #1
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d011      	beq.n	800384a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003826:	4b5f      	ldr	r3, [pc, #380]	; (80039a4 <menu+0x26f4>)
 8003828:	781a      	ldrb	r2, [r3, #0]
 800382a:	4b65      	ldr	r3, [pc, #404]	; (80039c0 <menu+0x2710>)
 800382c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800382e:	4b5d      	ldr	r3, [pc, #372]	; (80039a4 <menu+0x26f4>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d106      	bne.n	8003844 <menu+0x2594>
				altLimit = 1;
 8003836:	4b63      	ldr	r3, [pc, #396]	; (80039c4 <menu+0x2714>)
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800383c:	4b61      	ldr	r3, [pc, #388]	; (80039c4 <menu+0x2714>)
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	4b5f      	ldr	r3, [pc, #380]	; (80039c0 <menu+0x2710>)
 8003842:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003844:	4b60      	ldr	r3, [pc, #384]	; (80039c8 <menu+0x2718>)
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800384a:	4b60      	ldr	r3, [pc, #384]	; (80039cc <menu+0x271c>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b16      	cmp	r3, #22
 8003850:	f040 8081 	bne.w	8003956 <menu+0x26a6>
		if(dilSecim == 0) {
 8003854:	4b51      	ldr	r3, [pc, #324]	; (800399c <menu+0x26ec>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 800385c:	4a5c      	ldr	r2, [pc, #368]	; (80039d0 <menu+0x2720>)
 800385e:	2101      	movs	r1, #1
 8003860:	2001      	movs	r0, #1
 8003862:	f004 fa2d 	bl	8007cc0 <lcd_print>
 8003866:	e008      	b.n	800387a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003868:	4b4c      	ldr	r3, [pc, #304]	; (800399c <menu+0x26ec>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d104      	bne.n	800387a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003870:	4a58      	ldr	r2, [pc, #352]	; (80039d4 <menu+0x2724>)
 8003872:	2101      	movs	r1, #1
 8003874:	2001      	movs	r0, #1
 8003876:	f004 fa23 	bl	8007cc0 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 800387a:	4b48      	ldr	r3, [pc, #288]	; (800399c <menu+0x26ec>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d105      	bne.n	800388e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003882:	4a55      	ldr	r2, [pc, #340]	; (80039d8 <menu+0x2728>)
 8003884:	2101      	movs	r1, #1
 8003886:	2002      	movs	r0, #2
 8003888:	f004 fa1a 	bl	8007cc0 <lcd_print>
 800388c:	e008      	b.n	80038a0 <menu+0x25f0>
			} else if(dilSecim == 1){
 800388e:	4b43      	ldr	r3, [pc, #268]	; (800399c <menu+0x26ec>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d104      	bne.n	80038a0 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003896:	4a51      	ldr	r2, [pc, #324]	; (80039dc <menu+0x272c>)
 8003898:	2101      	movs	r1, #1
 800389a:	2002      	movs	r0, #2
 800389c:	f004 fa10 	bl	8007cc0 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 80038a0:	4b4f      	ldr	r3, [pc, #316]	; (80039e0 <menu+0x2730>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	220a      	movs	r2, #10
 80038a6:	494f      	ldr	r1, [pc, #316]	; (80039e4 <menu+0x2734>)
 80038a8:	4618      	mov	r0, r3
 80038aa:	f008 fd5b 	bl	800c364 <itoa>
		lcd_print(2,16,snum);
 80038ae:	4a4d      	ldr	r2, [pc, #308]	; (80039e4 <menu+0x2734>)
 80038b0:	2110      	movs	r1, #16
 80038b2:	2002      	movs	r0, #2
 80038b4:	f004 fa04 	bl	8007cc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038b8:	2102      	movs	r1, #2
 80038ba:	483f      	ldr	r0, [pc, #252]	; (80039b8 <menu+0x2708>)
 80038bc:	f005 fd26 	bl	800930c <HAL_GPIO_ReadPin>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d115      	bne.n	80038f2 <menu+0x2642>
 80038c6:	4b3d      	ldr	r3, [pc, #244]	; (80039bc <menu+0x270c>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	f083 0301 	eor.w	r3, r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00e      	beq.n	80038f2 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80038d4:	4b42      	ldr	r3, [pc, #264]	; (80039e0 <menu+0x2730>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	3301      	adds	r3, #1
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	4b40      	ldr	r3, [pc, #256]	; (80039e0 <menu+0x2730>)
 80038de:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80038e0:	4b3f      	ldr	r3, [pc, #252]	; (80039e0 <menu+0x2730>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b05      	cmp	r3, #5
 80038e6:	d902      	bls.n	80038ee <menu+0x263e>
				yukariValfTmr = 0;
 80038e8:	4b3d      	ldr	r3, [pc, #244]	; (80039e0 <menu+0x2730>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038ee:	f001 f8a9 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038f2:	2104      	movs	r1, #4
 80038f4:	4830      	ldr	r0, [pc, #192]	; (80039b8 <menu+0x2708>)
 80038f6:	f005 fd09 	bl	800930c <HAL_GPIO_ReadPin>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d115      	bne.n	800392c <menu+0x267c>
 8003900:	4b2e      	ldr	r3, [pc, #184]	; (80039bc <menu+0x270c>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	f083 0301 	eor.w	r3, r3, #1
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00e      	beq.n	800392c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 800390e:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <menu+0x2730>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	3b01      	subs	r3, #1
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4b32      	ldr	r3, [pc, #200]	; (80039e0 <menu+0x2730>)
 8003918:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800391a:	4b31      	ldr	r3, [pc, #196]	; (80039e0 <menu+0x2730>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b06      	cmp	r3, #6
 8003920:	d902      	bls.n	8003928 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003922:	4b2f      	ldr	r3, [pc, #188]	; (80039e0 <menu+0x2730>)
 8003924:	2205      	movs	r2, #5
 8003926:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003928:	f001 f88c 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800392c:	2108      	movs	r1, #8
 800392e:	4822      	ldr	r0, [pc, #136]	; (80039b8 <menu+0x2708>)
 8003930:	f005 fcec 	bl	800930c <HAL_GPIO_ReadPin>
 8003934:	4603      	mov	r3, r0
 8003936:	2b01      	cmp	r3, #1
 8003938:	d10d      	bne.n	8003956 <menu+0x26a6>
 800393a:	4b20      	ldr	r3, [pc, #128]	; (80039bc <menu+0x270c>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	f083 0301 	eor.w	r3, r3, #1
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d006      	beq.n	8003956 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003948:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <menu+0x2730>)
 800394a:	781a      	ldrb	r2, [r3, #0]
 800394c:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <menu+0x2710>)
 800394e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <menu+0x2718>)
 8003952:	2201      	movs	r2, #1
 8003954:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003956:	4b1d      	ldr	r3, [pc, #116]	; (80039cc <menu+0x271c>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b17      	cmp	r3, #23
 800395c:	f040 80ac 	bne.w	8003ab8 <menu+0x2808>
		if(dilSecim == 0) {
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <menu+0x26ec>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003968:	4a1f      	ldr	r2, [pc, #124]	; (80039e8 <menu+0x2738>)
 800396a:	2101      	movs	r1, #1
 800396c:	2001      	movs	r0, #1
 800396e:	f004 f9a7 	bl	8007cc0 <lcd_print>
 8003972:	e008      	b.n	8003986 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003974:	4b09      	ldr	r3, [pc, #36]	; (800399c <menu+0x26ec>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d104      	bne.n	8003986 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 800397c:	4a1b      	ldr	r2, [pc, #108]	; (80039ec <menu+0x273c>)
 800397e:	2101      	movs	r1, #1
 8003980:	2001      	movs	r0, #1
 8003982:	f004 f99d 	bl	8007cc0 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <menu+0x26ec>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d130      	bne.n	80039f0 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 800398e:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <menu+0x2728>)
 8003990:	2101      	movs	r1, #1
 8003992:	2002      	movs	r0, #2
 8003994:	f004 f994 	bl	8007cc0 <lcd_print>
 8003998:	e033      	b.n	8003a02 <menu+0x2752>
 800399a:	bf00      	nop
 800399c:	20000245 	.word	0x20000245
 80039a0:	0800d8b8 	.word	0x0800d8b8
 80039a4:	20000237 	.word	0x20000237
 80039a8:	0800d85c 	.word	0x0800d85c
 80039ac:	0800d870 	.word	0x0800d870
 80039b0:	0800d880 	.word	0x0800d880
 80039b4:	0800d894 	.word	0x0800d894
 80039b8:	40010800 	.word	0x40010800
 80039bc:	20000253 	.word	0x20000253
 80039c0:	20000128 	.word	0x20000128
 80039c4:	2000022a 	.word	0x2000022a
 80039c8:	20000250 	.word	0x20000250
 80039cc:	20000224 	.word	0x20000224
 80039d0:	0800d8c8 	.word	0x0800d8c8
 80039d4:	0800d8dc 	.word	0x0800d8dc
 80039d8:	0800d57c 	.word	0x0800d57c
 80039dc:	0800d8f0 	.word	0x0800d8f0
 80039e0:	20000238 	.word	0x20000238
 80039e4:	20000198 	.word	0x20000198
 80039e8:	0800d900 	.word	0x0800d900
 80039ec:	0800d914 	.word	0x0800d914
			} else if(dilSecim == 1) {
 80039f0:	4b98      	ldr	r3, [pc, #608]	; (8003c54 <menu+0x29a4>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d104      	bne.n	8003a02 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 80039f8:	4a97      	ldr	r2, [pc, #604]	; (8003c58 <menu+0x29a8>)
 80039fa:	2101      	movs	r1, #1
 80039fc:	2002      	movs	r0, #2
 80039fe:	f004 f95f 	bl	8007cc0 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003a02:	4b96      	ldr	r3, [pc, #600]	; (8003c5c <menu+0x29ac>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	220a      	movs	r2, #10
 8003a08:	4995      	ldr	r1, [pc, #596]	; (8003c60 <menu+0x29b0>)
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f008 fcaa 	bl	800c364 <itoa>
		lcd_print(2,16,snum);
 8003a10:	4a93      	ldr	r2, [pc, #588]	; (8003c60 <menu+0x29b0>)
 8003a12:	2110      	movs	r1, #16
 8003a14:	2002      	movs	r0, #2
 8003a16:	f004 f953 	bl	8007cc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a1a:	2102      	movs	r1, #2
 8003a1c:	4891      	ldr	r0, [pc, #580]	; (8003c64 <menu+0x29b4>)
 8003a1e:	f005 fc75 	bl	800930c <HAL_GPIO_ReadPin>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d115      	bne.n	8003a54 <menu+0x27a4>
 8003a28:	4b8f      	ldr	r3, [pc, #572]	; (8003c68 <menu+0x29b8>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	f083 0301 	eor.w	r3, r3, #1
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00e      	beq.n	8003a54 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003a36:	4b89      	ldr	r3, [pc, #548]	; (8003c5c <menu+0x29ac>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4b87      	ldr	r3, [pc, #540]	; (8003c5c <menu+0x29ac>)
 8003a40:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003a42:	4b86      	ldr	r3, [pc, #536]	; (8003c5c <menu+0x29ac>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d902      	bls.n	8003a50 <menu+0x27a0>
				asagiValfTmr = 0;
 8003a4a:	4b84      	ldr	r3, [pc, #528]	; (8003c5c <menu+0x29ac>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a50:	f000 fff8 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a54:	2104      	movs	r1, #4
 8003a56:	4883      	ldr	r0, [pc, #524]	; (8003c64 <menu+0x29b4>)
 8003a58:	f005 fc58 	bl	800930c <HAL_GPIO_ReadPin>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d115      	bne.n	8003a8e <menu+0x27de>
 8003a62:	4b81      	ldr	r3, [pc, #516]	; (8003c68 <menu+0x29b8>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	f083 0301 	eor.w	r3, r3, #1
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00e      	beq.n	8003a8e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003a70:	4b7a      	ldr	r3, [pc, #488]	; (8003c5c <menu+0x29ac>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	4b78      	ldr	r3, [pc, #480]	; (8003c5c <menu+0x29ac>)
 8003a7a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003a7c:	4b77      	ldr	r3, [pc, #476]	; (8003c5c <menu+0x29ac>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b06      	cmp	r3, #6
 8003a82:	d902      	bls.n	8003a8a <menu+0x27da>
		   		asagiValfTmr = 5;
 8003a84:	4b75      	ldr	r3, [pc, #468]	; (8003c5c <menu+0x29ac>)
 8003a86:	2205      	movs	r2, #5
 8003a88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a8a:	f000 ffdb 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a8e:	2108      	movs	r1, #8
 8003a90:	4874      	ldr	r0, [pc, #464]	; (8003c64 <menu+0x29b4>)
 8003a92:	f005 fc3b 	bl	800930c <HAL_GPIO_ReadPin>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d10d      	bne.n	8003ab8 <menu+0x2808>
 8003a9c:	4b72      	ldr	r3, [pc, #456]	; (8003c68 <menu+0x29b8>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	f083 0301 	eor.w	r3, r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d006      	beq.n	8003ab8 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003aaa:	4b6c      	ldr	r3, [pc, #432]	; (8003c5c <menu+0x29ac>)
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	4b6f      	ldr	r3, [pc, #444]	; (8003c6c <menu+0x29bc>)
 8003ab0:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003ab2:	4b6f      	ldr	r3, [pc, #444]	; (8003c70 <menu+0x29c0>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003ab8:	4b6e      	ldr	r3, [pc, #440]	; (8003c74 <menu+0x29c4>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b18      	cmp	r3, #24
 8003abe:	f040 809d 	bne.w	8003bfc <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003ac2:	4b6d      	ldr	r3, [pc, #436]	; (8003c78 <menu+0x29c8>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d113      	bne.n	8003af2 <menu+0x2842>
			if(dilSecim == 0) {
 8003aca:	4b62      	ldr	r3, [pc, #392]	; (8003c54 <menu+0x29a4>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d105      	bne.n	8003ade <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003ad2:	4a6a      	ldr	r2, [pc, #424]	; (8003c7c <menu+0x29cc>)
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f004 f8f2 	bl	8007cc0 <lcd_print>
 8003adc:	e020      	b.n	8003b20 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003ade:	4b5d      	ldr	r3, [pc, #372]	; (8003c54 <menu+0x29a4>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d11c      	bne.n	8003b20 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003ae6:	4a66      	ldr	r2, [pc, #408]	; (8003c80 <menu+0x29d0>)
 8003ae8:	2101      	movs	r1, #1
 8003aea:	2001      	movs	r0, #1
 8003aec:	f004 f8e8 	bl	8007cc0 <lcd_print>
 8003af0:	e016      	b.n	8003b20 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003af2:	4b61      	ldr	r3, [pc, #388]	; (8003c78 <menu+0x29c8>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d112      	bne.n	8003b20 <menu+0x2870>
			if(dilSecim == 0) {
 8003afa:	4b56      	ldr	r3, [pc, #344]	; (8003c54 <menu+0x29a4>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d105      	bne.n	8003b0e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003b02:	4a60      	ldr	r2, [pc, #384]	; (8003c84 <menu+0x29d4>)
 8003b04:	2101      	movs	r1, #1
 8003b06:	2001      	movs	r0, #1
 8003b08:	f004 f8da 	bl	8007cc0 <lcd_print>
 8003b0c:	e008      	b.n	8003b20 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003b0e:	4b51      	ldr	r3, [pc, #324]	; (8003c54 <menu+0x29a4>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d104      	bne.n	8003b20 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003b16:	4a5c      	ldr	r2, [pc, #368]	; (8003c88 <menu+0x29d8>)
 8003b18:	2101      	movs	r1, #1
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f004 f8d0 	bl	8007cc0 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003b20:	4b4c      	ldr	r3, [pc, #304]	; (8003c54 <menu+0x29a4>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b28:	4a58      	ldr	r2, [pc, #352]	; (8003c8c <menu+0x29dc>)
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	2002      	movs	r0, #2
 8003b2e:	f004 f8c7 	bl	8007cc0 <lcd_print>
 8003b32:	e008      	b.n	8003b46 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003b34:	4b47      	ldr	r3, [pc, #284]	; (8003c54 <menu+0x29a4>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d104      	bne.n	8003b46 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003b3c:	4a46      	ldr	r2, [pc, #280]	; (8003c58 <menu+0x29a8>)
 8003b3e:	2101      	movs	r1, #1
 8003b40:	2002      	movs	r0, #2
 8003b42:	f004 f8bd 	bl	8007cc0 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003b46:	4b52      	ldr	r3, [pc, #328]	; (8003c90 <menu+0x29e0>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	220a      	movs	r2, #10
 8003b4c:	4944      	ldr	r1, [pc, #272]	; (8003c60 <menu+0x29b0>)
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f008 fc08 	bl	800c364 <itoa>
		lcd_print(2, 16, snum);
 8003b54:	4a42      	ldr	r2, [pc, #264]	; (8003c60 <menu+0x29b0>)
 8003b56:	2110      	movs	r1, #16
 8003b58:	2002      	movs	r0, #2
 8003b5a:	f004 f8b1 	bl	8007cc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b5e:	2102      	movs	r1, #2
 8003b60:	4840      	ldr	r0, [pc, #256]	; (8003c64 <menu+0x29b4>)
 8003b62:	f005 fbd3 	bl	800930c <HAL_GPIO_ReadPin>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d115      	bne.n	8003b98 <menu+0x28e8>
 8003b6c:	4b3e      	ldr	r3, [pc, #248]	; (8003c68 <menu+0x29b8>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	f083 0301 	eor.w	r3, r3, #1
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00e      	beq.n	8003b98 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003b7a:	4b45      	ldr	r3, [pc, #276]	; (8003c90 <menu+0x29e0>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	4b43      	ldr	r3, [pc, #268]	; (8003c90 <menu+0x29e0>)
 8003b84:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003b86:	4b42      	ldr	r3, [pc, #264]	; (8003c90 <menu+0x29e0>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b05      	cmp	r3, #5
 8003b8c:	d902      	bls.n	8003b94 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003b8e:	4b40      	ldr	r3, [pc, #256]	; (8003c90 <menu+0x29e0>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b94:	f000 ff56 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b98:	2104      	movs	r1, #4
 8003b9a:	4832      	ldr	r0, [pc, #200]	; (8003c64 <menu+0x29b4>)
 8003b9c:	f005 fbb6 	bl	800930c <HAL_GPIO_ReadPin>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d115      	bne.n	8003bd2 <menu+0x2922>
 8003ba6:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <menu+0x29b8>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	f083 0301 	eor.w	r3, r3, #1
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00e      	beq.n	8003bd2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003bb4:	4b36      	ldr	r3, [pc, #216]	; (8003c90 <menu+0x29e0>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <menu+0x29e0>)
 8003bbe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003bc0:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <menu+0x29e0>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b06      	cmp	r3, #6
 8003bc6:	d902      	bls.n	8003bce <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003bc8:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <menu+0x29e0>)
 8003bca:	2205      	movs	r2, #5
 8003bcc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003bce:	f000 ff39 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bd2:	2108      	movs	r1, #8
 8003bd4:	4823      	ldr	r0, [pc, #140]	; (8003c64 <menu+0x29b4>)
 8003bd6:	f005 fb99 	bl	800930c <HAL_GPIO_ReadPin>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d10d      	bne.n	8003bfc <menu+0x294c>
 8003be0:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <menu+0x29b8>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	f083 0301 	eor.w	r3, r3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003bee:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <menu+0x29e0>)
 8003bf0:	781a      	ldrb	r2, [r3, #0]
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	; (8003c6c <menu+0x29bc>)
 8003bf4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <menu+0x29c0>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <menu+0x29c4>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b19      	cmp	r3, #25
 8003c02:	f040 80c4 	bne.w	8003d8e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003c06:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <menu+0x29c8>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d113      	bne.n	8003c36 <menu+0x2986>
			if(dilSecim == 0) {
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <menu+0x29a4>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d105      	bne.n	8003c22 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003c16:	4a1f      	ldr	r2, [pc, #124]	; (8003c94 <menu+0x29e4>)
 8003c18:	2101      	movs	r1, #1
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f004 f850 	bl	8007cc0 <lcd_print>
 8003c20:	e047      	b.n	8003cb2 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003c22:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <menu+0x29a4>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d143      	bne.n	8003cb2 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003c2a:	4a1b      	ldr	r2, [pc, #108]	; (8003c98 <menu+0x29e8>)
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f004 f846 	bl	8007cc0 <lcd_print>
 8003c34:	e03d      	b.n	8003cb2 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003c36:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <menu+0x29c8>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d139      	bne.n	8003cb2 <menu+0x2a02>
			if(dilSecim == 0) {
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <menu+0x29a4>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d12c      	bne.n	8003ca0 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003c46:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <menu+0x29ec>)
 8003c48:	2101      	movs	r1, #1
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f004 f838 	bl	8007cc0 <lcd_print>
 8003c50:	e02f      	b.n	8003cb2 <menu+0x2a02>
 8003c52:	bf00      	nop
 8003c54:	20000245 	.word	0x20000245
 8003c58:	0800d8f0 	.word	0x0800d8f0
 8003c5c:	20000239 	.word	0x20000239
 8003c60:	20000198 	.word	0x20000198
 8003c64:	40010800 	.word	0x40010800
 8003c68:	20000253 	.word	0x20000253
 8003c6c:	20000128 	.word	0x20000128
 8003c70:	20000250 	.word	0x20000250
 8003c74:	20000224 	.word	0x20000224
 8003c78:	20000233 	.word	0x20000233
 8003c7c:	0800d928 	.word	0x0800d928
 8003c80:	0800d93c 	.word	0x0800d93c
 8003c84:	0800d950 	.word	0x0800d950
 8003c88:	0800d964 	.word	0x0800d964
 8003c8c:	0800d57c 	.word	0x0800d57c
 8003c90:	2000023a 	.word	0x2000023a
 8003c94:	0800d978 	.word	0x0800d978
 8003c98:	0800d98c 	.word	0x0800d98c
 8003c9c:	0800d9a0 	.word	0x0800d9a0
			} else if(dilSecim == 1) {
 8003ca0:	4b73      	ldr	r3, [pc, #460]	; (8003e70 <menu+0x2bc0>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d104      	bne.n	8003cb2 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003ca8:	4a72      	ldr	r2, [pc, #456]	; (8003e74 <menu+0x2bc4>)
 8003caa:	2101      	movs	r1, #1
 8003cac:	2001      	movs	r0, #1
 8003cae:	f004 f807 	bl	8007cc0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003cb2:	4b6f      	ldr	r3, [pc, #444]	; (8003e70 <menu+0x2bc0>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d105      	bne.n	8003cc6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cba:	4a6f      	ldr	r2, [pc, #444]	; (8003e78 <menu+0x2bc8>)
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	2002      	movs	r0, #2
 8003cc0:	f003 fffe 	bl	8007cc0 <lcd_print>
 8003cc4:	e008      	b.n	8003cd8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003cc6:	4b6a      	ldr	r3, [pc, #424]	; (8003e70 <menu+0x2bc0>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d104      	bne.n	8003cd8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003cce:	4a6b      	ldr	r2, [pc, #428]	; (8003e7c <menu+0x2bcc>)
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	2002      	movs	r0, #2
 8003cd4:	f003 fff4 	bl	8007cc0 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003cd8:	4b69      	ldr	r3, [pc, #420]	; (8003e80 <menu+0x2bd0>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	220a      	movs	r2, #10
 8003cde:	4969      	ldr	r1, [pc, #420]	; (8003e84 <menu+0x2bd4>)
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f008 fb3f 	bl	800c364 <itoa>
		lcd_print(2,16,snum);
 8003ce6:	4a67      	ldr	r2, [pc, #412]	; (8003e84 <menu+0x2bd4>)
 8003ce8:	2110      	movs	r1, #16
 8003cea:	2002      	movs	r0, #2
 8003cec:	f003 ffe8 	bl	8007cc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	4865      	ldr	r0, [pc, #404]	; (8003e88 <menu+0x2bd8>)
 8003cf4:	f005 fb0a 	bl	800930c <HAL_GPIO_ReadPin>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d115      	bne.n	8003d2a <menu+0x2a7a>
 8003cfe:	4b63      	ldr	r3, [pc, #396]	; (8003e8c <menu+0x2bdc>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	f083 0301 	eor.w	r3, r3, #1
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00e      	beq.n	8003d2a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003d0c:	4b5c      	ldr	r3, [pc, #368]	; (8003e80 <menu+0x2bd0>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	3301      	adds	r3, #1
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	4b5a      	ldr	r3, [pc, #360]	; (8003e80 <menu+0x2bd0>)
 8003d16:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003d18:	4b59      	ldr	r3, [pc, #356]	; (8003e80 <menu+0x2bd0>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b05      	cmp	r3, #5
 8003d1e:	d902      	bls.n	8003d26 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003d20:	4b57      	ldr	r3, [pc, #348]	; (8003e80 <menu+0x2bd0>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d26:	f000 fe8d 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d2a:	2104      	movs	r1, #4
 8003d2c:	4856      	ldr	r0, [pc, #344]	; (8003e88 <menu+0x2bd8>)
 8003d2e:	f005 faed 	bl	800930c <HAL_GPIO_ReadPin>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d115      	bne.n	8003d64 <menu+0x2ab4>
 8003d38:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <menu+0x2bdc>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	f083 0301 	eor.w	r3, r3, #1
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00e      	beq.n	8003d64 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003d46:	4b4e      	ldr	r3, [pc, #312]	; (8003e80 <menu+0x2bd0>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	4b4c      	ldr	r3, [pc, #304]	; (8003e80 <menu+0x2bd0>)
 8003d50:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003d52:	4b4b      	ldr	r3, [pc, #300]	; (8003e80 <menu+0x2bd0>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b06      	cmp	r3, #6
 8003d58:	d902      	bls.n	8003d60 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003d5a:	4b49      	ldr	r3, [pc, #292]	; (8003e80 <menu+0x2bd0>)
 8003d5c:	2205      	movs	r2, #5
 8003d5e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d60:	f000 fe70 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d64:	2108      	movs	r1, #8
 8003d66:	4848      	ldr	r0, [pc, #288]	; (8003e88 <menu+0x2bd8>)
 8003d68:	f005 fad0 	bl	800930c <HAL_GPIO_ReadPin>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d10d      	bne.n	8003d8e <menu+0x2ade>
 8003d72:	4b46      	ldr	r3, [pc, #280]	; (8003e8c <menu+0x2bdc>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	f083 0301 	eor.w	r3, r3, #1
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d006      	beq.n	8003d8e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003d80:	4b3f      	ldr	r3, [pc, #252]	; (8003e80 <menu+0x2bd0>)
 8003d82:	781a      	ldrb	r2, [r3, #0]
 8003d84:	4b42      	ldr	r3, [pc, #264]	; (8003e90 <menu+0x2be0>)
 8003d86:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003d88:	4b42      	ldr	r3, [pc, #264]	; (8003e94 <menu+0x2be4>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003d8e:	4b42      	ldr	r3, [pc, #264]	; (8003e98 <menu+0x2be8>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b1a      	cmp	r3, #26
 8003d94:	f040 80ec 	bne.w	8003f70 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003d98:	4b35      	ldr	r3, [pc, #212]	; (8003e70 <menu+0x2bc0>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d105      	bne.n	8003dac <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003da0:	4a3e      	ldr	r2, [pc, #248]	; (8003e9c <menu+0x2bec>)
 8003da2:	2101      	movs	r1, #1
 8003da4:	2001      	movs	r0, #1
 8003da6:	f003 ff8b 	bl	8007cc0 <lcd_print>
 8003daa:	e008      	b.n	8003dbe <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003dac:	4b30      	ldr	r3, [pc, #192]	; (8003e70 <menu+0x2bc0>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d104      	bne.n	8003dbe <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003db4:	4a3a      	ldr	r2, [pc, #232]	; (8003ea0 <menu+0x2bf0>)
 8003db6:	2101      	movs	r1, #1
 8003db8:	2001      	movs	r0, #1
 8003dba:	f003 ff81 	bl	8007cc0 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003dbe:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <menu+0x2bf4>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b63      	cmp	r3, #99	; 0x63
 8003dc4:	d91e      	bls.n	8003e04 <menu+0x2b54>
			if(dilSecim == 0) {
 8003dc6:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <menu+0x2bc0>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003dce:	4a2a      	ldr	r2, [pc, #168]	; (8003e78 <menu+0x2bc8>)
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	2002      	movs	r0, #2
 8003dd4:	f003 ff74 	bl	8007cc0 <lcd_print>
			}
			if(dilSecim == 1) {
 8003dd8:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <menu+0x2bc0>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d104      	bne.n	8003dea <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003de0:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <menu+0x2bcc>)
 8003de2:	2101      	movs	r1, #1
 8003de4:	2002      	movs	r0, #2
 8003de6:	f003 ff6b 	bl	8007cc0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003dea:	4b2e      	ldr	r3, [pc, #184]	; (8003ea4 <menu+0x2bf4>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	220a      	movs	r2, #10
 8003df0:	4924      	ldr	r1, [pc, #144]	; (8003e84 <menu+0x2bd4>)
 8003df2:	4618      	mov	r0, r3
 8003df4:	f008 fab6 	bl	800c364 <itoa>
			lcd_print(2,14,snum);
 8003df8:	4a22      	ldr	r2, [pc, #136]	; (8003e84 <menu+0x2bd4>)
 8003dfa:	210e      	movs	r1, #14
 8003dfc:	2002      	movs	r0, #2
 8003dfe:	f003 ff5f 	bl	8007cc0 <lcd_print>
 8003e02:	e066      	b.n	8003ed2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003e04:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <menu+0x2bf4>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b09      	cmp	r3, #9
 8003e0a:	d923      	bls.n	8003e54 <menu+0x2ba4>
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <menu+0x2bf4>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b63      	cmp	r3, #99	; 0x63
 8003e12:	d81f      	bhi.n	8003e54 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003e14:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <menu+0x2bc0>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e1c:	4a16      	ldr	r2, [pc, #88]	; (8003e78 <menu+0x2bc8>)
 8003e1e:	2101      	movs	r1, #1
 8003e20:	2002      	movs	r0, #2
 8003e22:	f003 ff4d 	bl	8007cc0 <lcd_print>
 8003e26:	e008      	b.n	8003e3a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003e28:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <menu+0x2bc0>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d104      	bne.n	8003e3a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003e30:	4a12      	ldr	r2, [pc, #72]	; (8003e7c <menu+0x2bcc>)
 8003e32:	2101      	movs	r1, #1
 8003e34:	2002      	movs	r0, #2
 8003e36:	f003 ff43 	bl	8007cc0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <menu+0x2bf4>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	220a      	movs	r2, #10
 8003e40:	4910      	ldr	r1, [pc, #64]	; (8003e84 <menu+0x2bd4>)
 8003e42:	4618      	mov	r0, r3
 8003e44:	f008 fa8e 	bl	800c364 <itoa>
			lcd_print(2, 15, snum);
 8003e48:	4a0e      	ldr	r2, [pc, #56]	; (8003e84 <menu+0x2bd4>)
 8003e4a:	210f      	movs	r1, #15
 8003e4c:	2002      	movs	r0, #2
 8003e4e:	f003 ff37 	bl	8007cc0 <lcd_print>
 8003e52:	e03e      	b.n	8003ed2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003e54:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <menu+0x2bf4>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b09      	cmp	r3, #9
 8003e5a:	d83a      	bhi.n	8003ed2 <menu+0x2c22>
			if(dilSecim == 0) {
 8003e5c:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <menu+0x2bc0>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d121      	bne.n	8003ea8 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e64:	4a04      	ldr	r2, [pc, #16]	; (8003e78 <menu+0x2bc8>)
 8003e66:	2101      	movs	r1, #1
 8003e68:	2002      	movs	r0, #2
 8003e6a:	f003 ff29 	bl	8007cc0 <lcd_print>
 8003e6e:	e024      	b.n	8003eba <menu+0x2c0a>
 8003e70:	20000245 	.word	0x20000245
 8003e74:	0800d9b4 	.word	0x0800d9b4
 8003e78:	0800d57c 	.word	0x0800d57c
 8003e7c:	0800d8f0 	.word	0x0800d8f0
 8003e80:	2000023b 	.word	0x2000023b
 8003e84:	20000198 	.word	0x20000198
 8003e88:	40010800 	.word	0x40010800
 8003e8c:	20000253 	.word	0x20000253
 8003e90:	20000128 	.word	0x20000128
 8003e94:	20000250 	.word	0x20000250
 8003e98:	20000224 	.word	0x20000224
 8003e9c:	0800d9c8 	.word	0x0800d9c8
 8003ea0:	0800d9dc 	.word	0x0800d9dc
 8003ea4:	2000023c 	.word	0x2000023c
			} else if(dilSecim == 1) {
 8003ea8:	4b8f      	ldr	r3, [pc, #572]	; (80040e8 <menu+0x2e38>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d104      	bne.n	8003eba <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003eb0:	4a8e      	ldr	r2, [pc, #568]	; (80040ec <menu+0x2e3c>)
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	2002      	movs	r0, #2
 8003eb6:	f003 ff03 	bl	8007cc0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003eba:	4b8d      	ldr	r3, [pc, #564]	; (80040f0 <menu+0x2e40>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	220a      	movs	r2, #10
 8003ec0:	498c      	ldr	r1, [pc, #560]	; (80040f4 <menu+0x2e44>)
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f008 fa4e 	bl	800c364 <itoa>
			lcd_print(2, 16, snum);
 8003ec8:	4a8a      	ldr	r2, [pc, #552]	; (80040f4 <menu+0x2e44>)
 8003eca:	2110      	movs	r1, #16
 8003ecc:	2002      	movs	r0, #2
 8003ece:	f003 fef7 	bl	8007cc0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	4888      	ldr	r0, [pc, #544]	; (80040f8 <menu+0x2e48>)
 8003ed6:	f005 fa19 	bl	800930c <HAL_GPIO_ReadPin>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d115      	bne.n	8003f0c <menu+0x2c5c>
 8003ee0:	4b86      	ldr	r3, [pc, #536]	; (80040fc <menu+0x2e4c>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	f083 0301 	eor.w	r3, r3, #1
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00e      	beq.n	8003f0c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003eee:	4b80      	ldr	r3, [pc, #512]	; (80040f0 <menu+0x2e40>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	4b7e      	ldr	r3, [pc, #504]	; (80040f0 <menu+0x2e40>)
 8003ef8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003efa:	4b7d      	ldr	r3, [pc, #500]	; (80040f0 <menu+0x2e40>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2bb4      	cmp	r3, #180	; 0xb4
 8003f00:	d902      	bls.n	8003f08 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003f02:	4b7b      	ldr	r3, [pc, #492]	; (80040f0 <menu+0x2e40>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f08:	f000 fd9c 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f0c:	2104      	movs	r1, #4
 8003f0e:	487a      	ldr	r0, [pc, #488]	; (80040f8 <menu+0x2e48>)
 8003f10:	f005 f9fc 	bl	800930c <HAL_GPIO_ReadPin>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d115      	bne.n	8003f46 <menu+0x2c96>
 8003f1a:	4b78      	ldr	r3, [pc, #480]	; (80040fc <menu+0x2e4c>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	f083 0301 	eor.w	r3, r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00e      	beq.n	8003f46 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003f28:	4b71      	ldr	r3, [pc, #452]	; (80040f0 <menu+0x2e40>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	4b6f      	ldr	r3, [pc, #444]	; (80040f0 <menu+0x2e40>)
 8003f32:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003f34:	4b6e      	ldr	r3, [pc, #440]	; (80040f0 <menu+0x2e40>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2bb5      	cmp	r3, #181	; 0xb5
 8003f3a:	d902      	bls.n	8003f42 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003f3c:	4b6c      	ldr	r3, [pc, #432]	; (80040f0 <menu+0x2e40>)
 8003f3e:	22b4      	movs	r2, #180	; 0xb4
 8003f40:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f42:	f000 fd7f 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f46:	2108      	movs	r1, #8
 8003f48:	486b      	ldr	r0, [pc, #428]	; (80040f8 <menu+0x2e48>)
 8003f4a:	f005 f9df 	bl	800930c <HAL_GPIO_ReadPin>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d10d      	bne.n	8003f70 <menu+0x2cc0>
 8003f54:	4b69      	ldr	r3, [pc, #420]	; (80040fc <menu+0x2e4c>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	f083 0301 	eor.w	r3, r3, #1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d006      	beq.n	8003f70 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003f62:	4b63      	ldr	r3, [pc, #396]	; (80040f0 <menu+0x2e40>)
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	4b66      	ldr	r3, [pc, #408]	; (8004100 <menu+0x2e50>)
 8003f68:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003f6a:	4b66      	ldr	r3, [pc, #408]	; (8004104 <menu+0x2e54>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003f70:	4b65      	ldr	r3, [pc, #404]	; (8004108 <menu+0x2e58>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b1b      	cmp	r3, #27
 8003f76:	f040 8083 	bne.w	8004080 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003f7a:	4a64      	ldr	r2, [pc, #400]	; (800410c <menu+0x2e5c>)
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	2001      	movs	r0, #1
 8003f80:	f003 fe9e 	bl	8007cc0 <lcd_print>

		if(buzzer == 0) {
 8003f84:	4b62      	ldr	r3, [pc, #392]	; (8004110 <menu+0x2e60>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d113      	bne.n	8003fb4 <menu+0x2d04>
			if(dilSecim == 0) {
 8003f8c:	4b56      	ldr	r3, [pc, #344]	; (80040e8 <menu+0x2e38>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d105      	bne.n	8003fa0 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003f94:	4a5f      	ldr	r2, [pc, #380]	; (8004114 <menu+0x2e64>)
 8003f96:	2101      	movs	r1, #1
 8003f98:	2002      	movs	r0, #2
 8003f9a:	f003 fe91 	bl	8007cc0 <lcd_print>
 8003f9e:	e020      	b.n	8003fe2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003fa0:	4b51      	ldr	r3, [pc, #324]	; (80040e8 <menu+0x2e38>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d11c      	bne.n	8003fe2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003fa8:	4a5b      	ldr	r2, [pc, #364]	; (8004118 <menu+0x2e68>)
 8003faa:	2101      	movs	r1, #1
 8003fac:	2002      	movs	r0, #2
 8003fae:	f003 fe87 	bl	8007cc0 <lcd_print>
 8003fb2:	e016      	b.n	8003fe2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003fb4:	4b56      	ldr	r3, [pc, #344]	; (8004110 <menu+0x2e60>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d112      	bne.n	8003fe2 <menu+0x2d32>
			if(dilSecim == 0) {
 8003fbc:	4b4a      	ldr	r3, [pc, #296]	; (80040e8 <menu+0x2e38>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d105      	bne.n	8003fd0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003fc4:	4a55      	ldr	r2, [pc, #340]	; (800411c <menu+0x2e6c>)
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	2002      	movs	r0, #2
 8003fca:	f003 fe79 	bl	8007cc0 <lcd_print>
 8003fce:	e008      	b.n	8003fe2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003fd0:	4b45      	ldr	r3, [pc, #276]	; (80040e8 <menu+0x2e38>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d104      	bne.n	8003fe2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003fd8:	4a51      	ldr	r2, [pc, #324]	; (8004120 <menu+0x2e70>)
 8003fda:	2101      	movs	r1, #1
 8003fdc:	2002      	movs	r0, #2
 8003fde:	f003 fe6f 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	4844      	ldr	r0, [pc, #272]	; (80040f8 <menu+0x2e48>)
 8003fe6:	f005 f991 	bl	800930c <HAL_GPIO_ReadPin>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d115      	bne.n	800401c <menu+0x2d6c>
 8003ff0:	4b42      	ldr	r3, [pc, #264]	; (80040fc <menu+0x2e4c>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	f083 0301 	eor.w	r3, r3, #1
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00e      	beq.n	800401c <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003ffe:	4b44      	ldr	r3, [pc, #272]	; (8004110 <menu+0x2e60>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	3301      	adds	r3, #1
 8004004:	b2da      	uxtb	r2, r3
 8004006:	4b42      	ldr	r3, [pc, #264]	; (8004110 <menu+0x2e60>)
 8004008:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800400a:	4b41      	ldr	r3, [pc, #260]	; (8004110 <menu+0x2e60>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d902      	bls.n	8004018 <menu+0x2d68>
				buzzer = 0;
 8004012:	4b3f      	ldr	r3, [pc, #252]	; (8004110 <menu+0x2e60>)
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004018:	f000 fd14 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800401c:	2104      	movs	r1, #4
 800401e:	4836      	ldr	r0, [pc, #216]	; (80040f8 <menu+0x2e48>)
 8004020:	f005 f974 	bl	800930c <HAL_GPIO_ReadPin>
 8004024:	4603      	mov	r3, r0
 8004026:	2b01      	cmp	r3, #1
 8004028:	d115      	bne.n	8004056 <menu+0x2da6>
 800402a:	4b34      	ldr	r3, [pc, #208]	; (80040fc <menu+0x2e4c>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	f083 0301 	eor.w	r3, r3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00e      	beq.n	8004056 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004038:	4b35      	ldr	r3, [pc, #212]	; (8004110 <menu+0x2e60>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	3b01      	subs	r3, #1
 800403e:	b2da      	uxtb	r2, r3
 8004040:	4b33      	ldr	r3, [pc, #204]	; (8004110 <menu+0x2e60>)
 8004042:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004044:	4b32      	ldr	r3, [pc, #200]	; (8004110 <menu+0x2e60>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <menu+0x2da2>
		   		buzzer = 1;
 800404c:	4b30      	ldr	r3, [pc, #192]	; (8004110 <menu+0x2e60>)
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004052:	f000 fcf7 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004056:	2108      	movs	r1, #8
 8004058:	4827      	ldr	r0, [pc, #156]	; (80040f8 <menu+0x2e48>)
 800405a:	f005 f957 	bl	800930c <HAL_GPIO_ReadPin>
 800405e:	4603      	mov	r3, r0
 8004060:	2b01      	cmp	r3, #1
 8004062:	d10d      	bne.n	8004080 <menu+0x2dd0>
 8004064:	4b25      	ldr	r3, [pc, #148]	; (80040fc <menu+0x2e4c>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	f083 0301 	eor.w	r3, r3, #1
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d006      	beq.n	8004080 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004072:	4b27      	ldr	r3, [pc, #156]	; (8004110 <menu+0x2e60>)
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	4b22      	ldr	r3, [pc, #136]	; (8004100 <menu+0x2e50>)
 8004078:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800407a:	4b22      	ldr	r3, [pc, #136]	; (8004104 <menu+0x2e54>)
 800407c:	2201      	movs	r2, #1
 800407e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004080:	4b21      	ldr	r3, [pc, #132]	; (8004108 <menu+0x2e58>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b1c      	cmp	r3, #28
 8004086:	f040 80ab 	bne.w	80041e0 <menu+0x2f30>
		calismaSayModu = 0;
 800408a:	4b26      	ldr	r3, [pc, #152]	; (8004124 <menu+0x2e74>)
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004090:	4a25      	ldr	r2, [pc, #148]	; (8004128 <menu+0x2e78>)
 8004092:	2101      	movs	r1, #1
 8004094:	2001      	movs	r0, #1
 8004096:	f003 fe13 	bl	8007cc0 <lcd_print>

		if(demoMode == 0) {
 800409a:	4b24      	ldr	r3, [pc, #144]	; (800412c <menu+0x2e7c>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d113      	bne.n	80040ca <menu+0x2e1a>
			if(dilSecim == 0) {
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <menu+0x2e38>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d105      	bne.n	80040b6 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80040aa:	4a1a      	ldr	r2, [pc, #104]	; (8004114 <menu+0x2e64>)
 80040ac:	2101      	movs	r1, #1
 80040ae:	2002      	movs	r0, #2
 80040b0:	f003 fe06 	bl	8007cc0 <lcd_print>
 80040b4:	e045      	b.n	8004142 <menu+0x2e92>
			} else if(dilSecim == 1) {
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <menu+0x2e38>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d141      	bne.n	8004142 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80040be:	4a16      	ldr	r2, [pc, #88]	; (8004118 <menu+0x2e68>)
 80040c0:	2101      	movs	r1, #1
 80040c2:	2002      	movs	r0, #2
 80040c4:	f003 fdfc 	bl	8007cc0 <lcd_print>
 80040c8:	e03b      	b.n	8004142 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80040ca:	4b18      	ldr	r3, [pc, #96]	; (800412c <menu+0x2e7c>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d137      	bne.n	8004142 <menu+0x2e92>
			if(dilSecim == 0){
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <menu+0x2e38>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d12a      	bne.n	8004130 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80040da:	4a10      	ldr	r2, [pc, #64]	; (800411c <menu+0x2e6c>)
 80040dc:	2101      	movs	r1, #1
 80040de:	2002      	movs	r0, #2
 80040e0:	f003 fdee 	bl	8007cc0 <lcd_print>
 80040e4:	e02d      	b.n	8004142 <menu+0x2e92>
 80040e6:	bf00      	nop
 80040e8:	20000245 	.word	0x20000245
 80040ec:	0800d8f0 	.word	0x0800d8f0
 80040f0:	2000023c 	.word	0x2000023c
 80040f4:	20000198 	.word	0x20000198
 80040f8:	40010800 	.word	0x40010800
 80040fc:	20000253 	.word	0x20000253
 8004100:	20000128 	.word	0x20000128
 8004104:	20000250 	.word	0x20000250
 8004108:	20000224 	.word	0x20000224
 800410c:	0800d9f0 	.word	0x0800d9f0
 8004110:	20000240 	.word	0x20000240
 8004114:	0800d318 	.word	0x0800d318
 8004118:	0800d32c 	.word	0x0800d32c
 800411c:	0800d378 	.word	0x0800d378
 8004120:	0800d38c 	.word	0x0800d38c
 8004124:	20000244 	.word	0x20000244
 8004128:	0800da04 	.word	0x0800da04
 800412c:	20000242 	.word	0x20000242
			} else if(dilSecim == 1) {
 8004130:	4b71      	ldr	r3, [pc, #452]	; (80042f8 <menu+0x3048>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d104      	bne.n	8004142 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004138:	4a70      	ldr	r2, [pc, #448]	; (80042fc <menu+0x304c>)
 800413a:	2101      	movs	r1, #1
 800413c:	2002      	movs	r0, #2
 800413e:	f003 fdbf 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004142:	2102      	movs	r1, #2
 8004144:	486e      	ldr	r0, [pc, #440]	; (8004300 <menu+0x3050>)
 8004146:	f005 f8e1 	bl	800930c <HAL_GPIO_ReadPin>
 800414a:	4603      	mov	r3, r0
 800414c:	2b01      	cmp	r3, #1
 800414e:	d115      	bne.n	800417c <menu+0x2ecc>
 8004150:	4b6c      	ldr	r3, [pc, #432]	; (8004304 <menu+0x3054>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	f083 0301 	eor.w	r3, r3, #1
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00e      	beq.n	800417c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800415e:	4b6a      	ldr	r3, [pc, #424]	; (8004308 <menu+0x3058>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	b2da      	uxtb	r2, r3
 8004166:	4b68      	ldr	r3, [pc, #416]	; (8004308 <menu+0x3058>)
 8004168:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800416a:	4b67      	ldr	r3, [pc, #412]	; (8004308 <menu+0x3058>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d902      	bls.n	8004178 <menu+0x2ec8>
				demoMode = 0;
 8004172:	4b65      	ldr	r3, [pc, #404]	; (8004308 <menu+0x3058>)
 8004174:	2200      	movs	r2, #0
 8004176:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004178:	f000 fc64 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800417c:	2104      	movs	r1, #4
 800417e:	4860      	ldr	r0, [pc, #384]	; (8004300 <menu+0x3050>)
 8004180:	f005 f8c4 	bl	800930c <HAL_GPIO_ReadPin>
 8004184:	4603      	mov	r3, r0
 8004186:	2b01      	cmp	r3, #1
 8004188:	d115      	bne.n	80041b6 <menu+0x2f06>
 800418a:	4b5e      	ldr	r3, [pc, #376]	; (8004304 <menu+0x3054>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	f083 0301 	eor.w	r3, r3, #1
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00e      	beq.n	80041b6 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004198:	4b5b      	ldr	r3, [pc, #364]	; (8004308 <menu+0x3058>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	3b01      	subs	r3, #1
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	4b59      	ldr	r3, [pc, #356]	; (8004308 <menu+0x3058>)
 80041a2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80041a4:	4b58      	ldr	r3, [pc, #352]	; (8004308 <menu+0x3058>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <menu+0x2f02>
		   		demoMode = 1;
 80041ac:	4b56      	ldr	r3, [pc, #344]	; (8004308 <menu+0x3058>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80041b2:	f000 fc47 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80041b6:	2108      	movs	r1, #8
 80041b8:	4851      	ldr	r0, [pc, #324]	; (8004300 <menu+0x3050>)
 80041ba:	f005 f8a7 	bl	800930c <HAL_GPIO_ReadPin>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d10d      	bne.n	80041e0 <menu+0x2f30>
 80041c4:	4b4f      	ldr	r3, [pc, #316]	; (8004304 <menu+0x3054>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	f083 0301 	eor.w	r3, r3, #1
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d006      	beq.n	80041e0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80041d2:	4b4d      	ldr	r3, [pc, #308]	; (8004308 <menu+0x3058>)
 80041d4:	781a      	ldrb	r2, [r3, #0]
 80041d6:	4b4d      	ldr	r3, [pc, #308]	; (800430c <menu+0x305c>)
 80041d8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80041da:	4b4d      	ldr	r3, [pc, #308]	; (8004310 <menu+0x3060>)
 80041dc:	2201      	movs	r2, #1
 80041de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80041e0:	4b4c      	ldr	r3, [pc, #304]	; (8004314 <menu+0x3064>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b1d      	cmp	r3, #29
 80041e6:	f040 8132 	bne.w	800444e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80041ea:	4b4b      	ldr	r3, [pc, #300]	; (8004318 <menu+0x3068>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d113      	bne.n	800421a <menu+0x2f6a>
 80041f2:	4b4a      	ldr	r3, [pc, #296]	; (800431c <menu+0x306c>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10f      	bne.n	800421a <menu+0x2f6a>
 80041fa:	4b49      	ldr	r3, [pc, #292]	; (8004320 <menu+0x3070>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10b      	bne.n	800421a <menu+0x2f6a>
 8004202:	4b48      	ldr	r3, [pc, #288]	; (8004324 <menu+0x3074>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d107      	bne.n	800421a <menu+0x2f6a>
 800420a:	4b47      	ldr	r3, [pc, #284]	; (8004328 <menu+0x3078>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d103      	bne.n	800421a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004212:	4b46      	ldr	r3, [pc, #280]	; (800432c <menu+0x307c>)
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	e002      	b.n	8004220 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800421a:	4b44      	ldr	r3, [pc, #272]	; (800432c <menu+0x307c>)
 800421c:	2201      	movs	r2, #1
 800421e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004220:	4b43      	ldr	r3, [pc, #268]	; (8004330 <menu+0x3080>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d154      	bne.n	80042d2 <menu+0x3022>
			if(dilSecim == 0) {
 8004228:	4b33      	ldr	r3, [pc, #204]	; (80042f8 <menu+0x3048>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d105      	bne.n	800423c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004230:	4a40      	ldr	r2, [pc, #256]	; (8004334 <menu+0x3084>)
 8004232:	2101      	movs	r1, #1
 8004234:	2001      	movs	r0, #1
 8004236:	f003 fd43 	bl	8007cc0 <lcd_print>
 800423a:	e008      	b.n	800424e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800423c:	4b2e      	ldr	r3, [pc, #184]	; (80042f8 <menu+0x3048>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d104      	bne.n	800424e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004244:	4a3c      	ldr	r2, [pc, #240]	; (8004338 <menu+0x3088>)
 8004246:	2101      	movs	r1, #1
 8004248:	2001      	movs	r0, #1
 800424a:	f003 fd39 	bl	8007cc0 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800424e:	4b36      	ldr	r3, [pc, #216]	; (8004328 <menu+0x3078>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	220a      	movs	r2, #10
 8004254:	4939      	ldr	r1, [pc, #228]	; (800433c <menu+0x308c>)
 8004256:	4618      	mov	r0, r3
 8004258:	f008 f884 	bl	800c364 <itoa>
			lcd_print(2, 12, snum);
 800425c:	4a37      	ldr	r2, [pc, #220]	; (800433c <menu+0x308c>)
 800425e:	210c      	movs	r1, #12
 8004260:	2002      	movs	r0, #2
 8004262:	f003 fd2d 	bl	8007cc0 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004266:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <menu+0x3074>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	220a      	movs	r2, #10
 800426c:	4933      	ldr	r1, [pc, #204]	; (800433c <menu+0x308c>)
 800426e:	4618      	mov	r0, r3
 8004270:	f008 f878 	bl	800c364 <itoa>
			lcd_print(2, 13, snum);
 8004274:	4a31      	ldr	r2, [pc, #196]	; (800433c <menu+0x308c>)
 8004276:	210d      	movs	r1, #13
 8004278:	2002      	movs	r0, #2
 800427a:	f003 fd21 	bl	8007cc0 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800427e:	4b28      	ldr	r3, [pc, #160]	; (8004320 <menu+0x3070>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	220a      	movs	r2, #10
 8004284:	492d      	ldr	r1, [pc, #180]	; (800433c <menu+0x308c>)
 8004286:	4618      	mov	r0, r3
 8004288:	f008 f86c 	bl	800c364 <itoa>
			lcd_print(2, 14, snum);
 800428c:	4a2b      	ldr	r2, [pc, #172]	; (800433c <menu+0x308c>)
 800428e:	210e      	movs	r1, #14
 8004290:	2002      	movs	r0, #2
 8004292:	f003 fd15 	bl	8007cc0 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004296:	4b21      	ldr	r3, [pc, #132]	; (800431c <menu+0x306c>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	220a      	movs	r2, #10
 800429c:	4927      	ldr	r1, [pc, #156]	; (800433c <menu+0x308c>)
 800429e:	4618      	mov	r0, r3
 80042a0:	f008 f860 	bl	800c364 <itoa>
			lcd_print(2, 15, snum);
 80042a4:	4a25      	ldr	r2, [pc, #148]	; (800433c <menu+0x308c>)
 80042a6:	210f      	movs	r1, #15
 80042a8:	2002      	movs	r0, #2
 80042aa:	f003 fd09 	bl	8007cc0 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80042ae:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <menu+0x3068>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	220a      	movs	r2, #10
 80042b4:	4921      	ldr	r1, [pc, #132]	; (800433c <menu+0x308c>)
 80042b6:	4618      	mov	r0, r3
 80042b8:	f008 f854 	bl	800c364 <itoa>
			lcd_print(2, 16, snum);
 80042bc:	4a1f      	ldr	r2, [pc, #124]	; (800433c <menu+0x308c>)
 80042be:	2110      	movs	r1, #16
 80042c0:	2002      	movs	r0, #2
 80042c2:	f003 fcfd 	bl	8007cc0 <lcd_print>

			lcd_print(2, 1, "           ");
 80042c6:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <menu+0x3090>)
 80042c8:	2101      	movs	r1, #1
 80042ca:	2002      	movs	r0, #2
 80042cc:	f003 fcf8 	bl	8007cc0 <lcd_print>
 80042d0:	e048      	b.n	8004364 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80042d2:	4b17      	ldr	r3, [pc, #92]	; (8004330 <menu+0x3080>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d144      	bne.n	8004364 <menu+0x30b4>
			if(dilSecim == 0) {
 80042da:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <menu+0x3048>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d132      	bne.n	8004348 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80042e2:	4a14      	ldr	r2, [pc, #80]	; (8004334 <menu+0x3084>)
 80042e4:	2101      	movs	r1, #1
 80042e6:	2001      	movs	r0, #1
 80042e8:	f003 fcea 	bl	8007cc0 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80042ec:	4a15      	ldr	r2, [pc, #84]	; (8004344 <menu+0x3094>)
 80042ee:	2101      	movs	r1, #1
 80042f0:	2002      	movs	r0, #2
 80042f2:	f003 fce5 	bl	8007cc0 <lcd_print>
 80042f6:	e035      	b.n	8004364 <menu+0x30b4>
 80042f8:	20000245 	.word	0x20000245
 80042fc:	0800d38c 	.word	0x0800d38c
 8004300:	40010800 	.word	0x40010800
 8004304:	20000253 	.word	0x20000253
 8004308:	20000242 	.word	0x20000242
 800430c:	20000128 	.word	0x20000128
 8004310:	20000250 	.word	0x20000250
 8004314:	20000224 	.word	0x20000224
 8004318:	20000221 	.word	0x20000221
 800431c:	20000222 	.word	0x20000222
 8004320:	20000008 	.word	0x20000008
 8004324:	20000009 	.word	0x20000009
 8004328:	20000223 	.word	0x20000223
 800432c:	20000265 	.word	0x20000265
 8004330:	20000244 	.word	0x20000244
 8004334:	0800da14 	.word	0x0800da14
 8004338:	0800da28 	.word	0x0800da28
 800433c:	20000198 	.word	0x20000198
 8004340:	0800da3c 	.word	0x0800da3c
 8004344:	0800da48 	.word	0x0800da48
			} else if(dilSecim == 1) {
 8004348:	4b94      	ldr	r3, [pc, #592]	; (800459c <menu+0x32ec>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d109      	bne.n	8004364 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004350:	4a93      	ldr	r2, [pc, #588]	; (80045a0 <menu+0x32f0>)
 8004352:	2101      	movs	r1, #1
 8004354:	2001      	movs	r0, #1
 8004356:	f003 fcb3 	bl	8007cc0 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800435a:	4a92      	ldr	r2, [pc, #584]	; (80045a4 <menu+0x32f4>)
 800435c:	2101      	movs	r1, #1
 800435e:	2002      	movs	r0, #2
 8004360:	f003 fcae 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004364:	2102      	movs	r1, #2
 8004366:	4890      	ldr	r0, [pc, #576]	; (80045a8 <menu+0x32f8>)
 8004368:	f004 ffd0 	bl	800930c <HAL_GPIO_ReadPin>
 800436c:	4603      	mov	r3, r0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d119      	bne.n	80043a6 <menu+0x30f6>
 8004372:	4b8e      	ldr	r3, [pc, #568]	; (80045ac <menu+0x32fc>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	f083 0301 	eor.w	r3, r3, #1
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d012      	beq.n	80043a6 <menu+0x30f6>
 8004380:	4b8b      	ldr	r3, [pc, #556]	; (80045b0 <menu+0x3300>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00e      	beq.n	80043a6 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004388:	4b8a      	ldr	r3, [pc, #552]	; (80045b4 <menu+0x3304>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	3301      	adds	r3, #1
 800438e:	b2da      	uxtb	r2, r3
 8004390:	4b88      	ldr	r3, [pc, #544]	; (80045b4 <menu+0x3304>)
 8004392:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004394:	4b87      	ldr	r3, [pc, #540]	; (80045b4 <menu+0x3304>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d902      	bls.n	80043a2 <menu+0x30f2>
				calismaSayModu = 0;
 800439c:	4b85      	ldr	r3, [pc, #532]	; (80045b4 <menu+0x3304>)
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80043a2:	f000 fb4f 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80043a6:	2104      	movs	r1, #4
 80043a8:	487f      	ldr	r0, [pc, #508]	; (80045a8 <menu+0x32f8>)
 80043aa:	f004 ffaf 	bl	800930c <HAL_GPIO_ReadPin>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d119      	bne.n	80043e8 <menu+0x3138>
 80043b4:	4b7d      	ldr	r3, [pc, #500]	; (80045ac <menu+0x32fc>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	f083 0301 	eor.w	r3, r3, #1
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d012      	beq.n	80043e8 <menu+0x3138>
 80043c2:	4b7b      	ldr	r3, [pc, #492]	; (80045b0 <menu+0x3300>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00e      	beq.n	80043e8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80043ca:	4b7a      	ldr	r3, [pc, #488]	; (80045b4 <menu+0x3304>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	4b78      	ldr	r3, [pc, #480]	; (80045b4 <menu+0x3304>)
 80043d4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80043d6:	4b77      	ldr	r3, [pc, #476]	; (80045b4 <menu+0x3304>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <menu+0x3134>
		   		calismaSayModu = 1;
 80043de:	4b75      	ldr	r3, [pc, #468]	; (80045b4 <menu+0x3304>)
 80043e0:	2201      	movs	r2, #1
 80043e2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80043e4:	f000 fb2e 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043e8:	2108      	movs	r1, #8
 80043ea:	486f      	ldr	r0, [pc, #444]	; (80045a8 <menu+0x32f8>)
 80043ec:	f004 ff8e 	bl	800930c <HAL_GPIO_ReadPin>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d12b      	bne.n	800444e <menu+0x319e>
 80043f6:	4b6d      	ldr	r3, [pc, #436]	; (80045ac <menu+0x32fc>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	f083 0301 	eor.w	r3, r3, #1
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d024      	beq.n	800444e <menu+0x319e>
			eepromData[32] = 0;
 8004404:	4b6c      	ldr	r3, [pc, #432]	; (80045b8 <menu+0x3308>)
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800440c:	4b6a      	ldr	r3, [pc, #424]	; (80045b8 <menu+0x3308>)
 800440e:	2200      	movs	r2, #0
 8004410:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004412:	4b69      	ldr	r3, [pc, #420]	; (80045b8 <menu+0x3308>)
 8004414:	2200      	movs	r2, #0
 8004416:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004418:	4b67      	ldr	r3, [pc, #412]	; (80045b8 <menu+0x3308>)
 800441a:	2200      	movs	r2, #0
 800441c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800441e:	4b66      	ldr	r3, [pc, #408]	; (80045b8 <menu+0x3308>)
 8004420:	2200      	movs	r2, #0
 8004422:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004424:	4b65      	ldr	r3, [pc, #404]	; (80045bc <menu+0x330c>)
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800442a:	4b65      	ldr	r3, [pc, #404]	; (80045c0 <menu+0x3310>)
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004430:	4b64      	ldr	r3, [pc, #400]	; (80045c4 <menu+0x3314>)
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004436:	4b64      	ldr	r3, [pc, #400]	; (80045c8 <menu+0x3318>)
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800443c:	4b63      	ldr	r3, [pc, #396]	; (80045cc <menu+0x331c>)
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004442:	4b5c      	ldr	r3, [pc, #368]	; (80045b4 <menu+0x3304>)
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004448:	4b61      	ldr	r3, [pc, #388]	; (80045d0 <menu+0x3320>)
 800444a:	2201      	movs	r2, #1
 800444c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800444e:	4b61      	ldr	r3, [pc, #388]	; (80045d4 <menu+0x3324>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b1e      	cmp	r3, #30
 8004454:	d16f      	bne.n	8004536 <menu+0x3286>
		calismaSayModu = 0;
 8004456:	4b57      	ldr	r3, [pc, #348]	; (80045b4 <menu+0x3304>)
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800445c:	4b4f      	ldr	r3, [pc, #316]	; (800459c <menu+0x32ec>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10a      	bne.n	800447a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004464:	4a5c      	ldr	r2, [pc, #368]	; (80045d8 <menu+0x3328>)
 8004466:	2101      	movs	r1, #1
 8004468:	2001      	movs	r0, #1
 800446a:	f003 fc29 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800446e:	4a5b      	ldr	r2, [pc, #364]	; (80045dc <menu+0x332c>)
 8004470:	2101      	movs	r1, #1
 8004472:	2002      	movs	r0, #2
 8004474:	f003 fc24 	bl	8007cc0 <lcd_print>
 8004478:	e00d      	b.n	8004496 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800447a:	4b48      	ldr	r3, [pc, #288]	; (800459c <menu+0x32ec>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d109      	bne.n	8004496 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004482:	4a57      	ldr	r2, [pc, #348]	; (80045e0 <menu+0x3330>)
 8004484:	2101      	movs	r1, #1
 8004486:	2001      	movs	r0, #1
 8004488:	f003 fc1a 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800448c:	4a55      	ldr	r2, [pc, #340]	; (80045e4 <menu+0x3334>)
 800448e:	2101      	movs	r1, #1
 8004490:	2002      	movs	r0, #2
 8004492:	f003 fc15 	bl	8007cc0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004496:	2102      	movs	r1, #2
 8004498:	4843      	ldr	r0, [pc, #268]	; (80045a8 <menu+0x32f8>)
 800449a:	f004 ff37 	bl	800930c <HAL_GPIO_ReadPin>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d115      	bne.n	80044d0 <menu+0x3220>
 80044a4:	4b41      	ldr	r3, [pc, #260]	; (80045ac <menu+0x32fc>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	f083 0301 	eor.w	r3, r3, #1
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00e      	beq.n	80044d0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80044b2:	4b3a      	ldr	r3, [pc, #232]	; (800459c <menu+0x32ec>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	4b38      	ldr	r3, [pc, #224]	; (800459c <menu+0x32ec>)
 80044bc:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80044be:	4b37      	ldr	r3, [pc, #220]	; (800459c <menu+0x32ec>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d902      	bls.n	80044cc <menu+0x321c>
				dilSecim = 0;
 80044c6:	4b35      	ldr	r3, [pc, #212]	; (800459c <menu+0x32ec>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80044cc:	f000 faba 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044d0:	2104      	movs	r1, #4
 80044d2:	4835      	ldr	r0, [pc, #212]	; (80045a8 <menu+0x32f8>)
 80044d4:	f004 ff1a 	bl	800930c <HAL_GPIO_ReadPin>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d115      	bne.n	800450a <menu+0x325a>
 80044de:	4b33      	ldr	r3, [pc, #204]	; (80045ac <menu+0x32fc>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	f083 0301 	eor.w	r3, r3, #1
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00e      	beq.n	800450a <menu+0x325a>
			dilSecim = dilSecim - 1;
 80044ec:	4b2b      	ldr	r3, [pc, #172]	; (800459c <menu+0x32ec>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	4b29      	ldr	r3, [pc, #164]	; (800459c <menu+0x32ec>)
 80044f6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80044f8:	4b28      	ldr	r3, [pc, #160]	; (800459c <menu+0x32ec>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <menu+0x3256>
		   		dilSecim = 1;
 8004500:	4b26      	ldr	r3, [pc, #152]	; (800459c <menu+0x32ec>)
 8004502:	2201      	movs	r2, #1
 8004504:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004506:	f000 fa9d 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800450a:	2108      	movs	r1, #8
 800450c:	4826      	ldr	r0, [pc, #152]	; (80045a8 <menu+0x32f8>)
 800450e:	f004 fefd 	bl	800930c <HAL_GPIO_ReadPin>
 8004512:	4603      	mov	r3, r0
 8004514:	2b01      	cmp	r3, #1
 8004516:	d10e      	bne.n	8004536 <menu+0x3286>
 8004518:	4b24      	ldr	r3, [pc, #144]	; (80045ac <menu+0x32fc>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	f083 0301 	eor.w	r3, r3, #1
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d007      	beq.n	8004536 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004526:	4b1d      	ldr	r3, [pc, #116]	; (800459c <menu+0x32ec>)
 8004528:	781a      	ldrb	r2, [r3, #0]
 800452a:	4b23      	ldr	r3, [pc, #140]	; (80045b8 <menu+0x3308>)
 800452c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004530:	4b27      	ldr	r3, [pc, #156]	; (80045d0 <menu+0x3320>)
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004536:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <menu+0x3324>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b1f      	cmp	r3, #31
 800453c:	f040 80b7 	bne.w	80046ae <menu+0x33fe>
		calismaSayModu = 0;
 8004540:	4b1c      	ldr	r3, [pc, #112]	; (80045b4 <menu+0x3304>)
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004546:	4a28      	ldr	r2, [pc, #160]	; (80045e8 <menu+0x3338>)
 8004548:	2101      	movs	r1, #1
 800454a:	2001      	movs	r0, #1
 800454c:	f003 fbb8 	bl	8007cc0 <lcd_print>

		if(iotMode == 0) {
 8004550:	4b26      	ldr	r3, [pc, #152]	; (80045ec <menu+0x333c>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d113      	bne.n	8004580 <menu+0x32d0>
			if(dilSecim == 0) {
 8004558:	4b10      	ldr	r3, [pc, #64]	; (800459c <menu+0x32ec>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004560:	4a23      	ldr	r2, [pc, #140]	; (80045f0 <menu+0x3340>)
 8004562:	2101      	movs	r1, #1
 8004564:	2002      	movs	r0, #2
 8004566:	f003 fbab 	bl	8007cc0 <lcd_print>
 800456a:	e050      	b.n	800460e <menu+0x335e>
			} else if(dilSecim == 1) {
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <menu+0x32ec>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d14c      	bne.n	800460e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004574:	4a1f      	ldr	r2, [pc, #124]	; (80045f4 <menu+0x3344>)
 8004576:	2101      	movs	r1, #1
 8004578:	2002      	movs	r0, #2
 800457a:	f003 fba1 	bl	8007cc0 <lcd_print>
 800457e:	e046      	b.n	800460e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004580:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <menu+0x333c>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d142      	bne.n	800460e <menu+0x335e>
			if(dilSecim == 0) {
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <menu+0x32ec>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d135      	bne.n	80045fc <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004590:	4a19      	ldr	r2, [pc, #100]	; (80045f8 <menu+0x3348>)
 8004592:	2101      	movs	r1, #1
 8004594:	2002      	movs	r0, #2
 8004596:	f003 fb93 	bl	8007cc0 <lcd_print>
 800459a:	e038      	b.n	800460e <menu+0x335e>
 800459c:	20000245 	.word	0x20000245
 80045a0:	0800da28 	.word	0x0800da28
 80045a4:	0800da5c 	.word	0x0800da5c
 80045a8:	40010800 	.word	0x40010800
 80045ac:	20000253 	.word	0x20000253
 80045b0:	20000265 	.word	0x20000265
 80045b4:	20000244 	.word	0x20000244
 80045b8:	20000128 	.word	0x20000128
 80045bc:	20000223 	.word	0x20000223
 80045c0:	20000009 	.word	0x20000009
 80045c4:	20000008 	.word	0x20000008
 80045c8:	20000222 	.word	0x20000222
 80045cc:	20000221 	.word	0x20000221
 80045d0:	20000250 	.word	0x20000250
 80045d4:	20000224 	.word	0x20000224
 80045d8:	0800da70 	.word	0x0800da70
 80045dc:	0800da84 	.word	0x0800da84
 80045e0:	0800da98 	.word	0x0800da98
 80045e4:	0800daac 	.word	0x0800daac
 80045e8:	0800dac0 	.word	0x0800dac0
 80045ec:	20000243 	.word	0x20000243
 80045f0:	0800d318 	.word	0x0800d318
 80045f4:	0800d32c 	.word	0x0800d32c
 80045f8:	0800d378 	.word	0x0800d378
			} else if(dilSecim == 1) {
 80045fc:	4baa      	ldr	r3, [pc, #680]	; (80048a8 <menu+0x35f8>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d104      	bne.n	800460e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004604:	4aa9      	ldr	r2, [pc, #676]	; (80048ac <menu+0x35fc>)
 8004606:	2101      	movs	r1, #1
 8004608:	2002      	movs	r0, #2
 800460a:	f003 fb59 	bl	8007cc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800460e:	2102      	movs	r1, #2
 8004610:	48a7      	ldr	r0, [pc, #668]	; (80048b0 <menu+0x3600>)
 8004612:	f004 fe7b 	bl	800930c <HAL_GPIO_ReadPin>
 8004616:	4603      	mov	r3, r0
 8004618:	2b01      	cmp	r3, #1
 800461a:	d115      	bne.n	8004648 <menu+0x3398>
 800461c:	4ba5      	ldr	r3, [pc, #660]	; (80048b4 <menu+0x3604>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	f083 0301 	eor.w	r3, r3, #1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00e      	beq.n	8004648 <menu+0x3398>
			iotMode = iotMode + 1;
 800462a:	4ba3      	ldr	r3, [pc, #652]	; (80048b8 <menu+0x3608>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	3301      	adds	r3, #1
 8004630:	b2da      	uxtb	r2, r3
 8004632:	4ba1      	ldr	r3, [pc, #644]	; (80048b8 <menu+0x3608>)
 8004634:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004636:	4ba0      	ldr	r3, [pc, #640]	; (80048b8 <menu+0x3608>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d902      	bls.n	8004644 <menu+0x3394>
				iotMode = 0;
 800463e:	4b9e      	ldr	r3, [pc, #632]	; (80048b8 <menu+0x3608>)
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004644:	f000 f9fe 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004648:	2104      	movs	r1, #4
 800464a:	4899      	ldr	r0, [pc, #612]	; (80048b0 <menu+0x3600>)
 800464c:	f004 fe5e 	bl	800930c <HAL_GPIO_ReadPin>
 8004650:	4603      	mov	r3, r0
 8004652:	2b01      	cmp	r3, #1
 8004654:	d115      	bne.n	8004682 <menu+0x33d2>
 8004656:	4b97      	ldr	r3, [pc, #604]	; (80048b4 <menu+0x3604>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	f083 0301 	eor.w	r3, r3, #1
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00e      	beq.n	8004682 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004664:	4b94      	ldr	r3, [pc, #592]	; (80048b8 <menu+0x3608>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	3b01      	subs	r3, #1
 800466a:	b2da      	uxtb	r2, r3
 800466c:	4b92      	ldr	r3, [pc, #584]	; (80048b8 <menu+0x3608>)
 800466e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004670:	4b91      	ldr	r3, [pc, #580]	; (80048b8 <menu+0x3608>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <menu+0x33ce>
		   		iotMode = 1;
 8004678:	4b8f      	ldr	r3, [pc, #572]	; (80048b8 <menu+0x3608>)
 800467a:	2201      	movs	r2, #1
 800467c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800467e:	f000 f9e1 	bl	8004a44 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004682:	2108      	movs	r1, #8
 8004684:	488a      	ldr	r0, [pc, #552]	; (80048b0 <menu+0x3600>)
 8004686:	f004 fe41 	bl	800930c <HAL_GPIO_ReadPin>
 800468a:	4603      	mov	r3, r0
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10e      	bne.n	80046ae <menu+0x33fe>
 8004690:	4b88      	ldr	r3, [pc, #544]	; (80048b4 <menu+0x3604>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	f083 0301 	eor.w	r3, r3, #1
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <menu+0x33fe>
			eepromData[48] = iotMode;
 800469e:	4b86      	ldr	r3, [pc, #536]	; (80048b8 <menu+0x3608>)
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	4b86      	ldr	r3, [pc, #536]	; (80048bc <menu+0x360c>)
 80046a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80046a8:	4b85      	ldr	r3, [pc, #532]	; (80048c0 <menu+0x3610>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80046ae:	4b85      	ldr	r3, [pc, #532]	; (80048c4 <menu+0x3614>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d13e      	bne.n	8004734 <menu+0x3484>
		calismaSayModu = 0;
 80046b6:	4b84      	ldr	r3, [pc, #528]	; (80048c8 <menu+0x3618>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80046bc:	4b7a      	ldr	r3, [pc, #488]	; (80048a8 <menu+0x35f8>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 80046c4:	4a81      	ldr	r2, [pc, #516]	; (80048cc <menu+0x361c>)
 80046c6:	2101      	movs	r1, #1
 80046c8:	2001      	movs	r0, #1
 80046ca:	f003 faf9 	bl	8007cc0 <lcd_print>
 80046ce:	e004      	b.n	80046da <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80046d0:	4a7f      	ldr	r2, [pc, #508]	; (80048d0 <menu+0x3620>)
 80046d2:	2101      	movs	r1, #1
 80046d4:	2001      	movs	r0, #1
 80046d6:	f003 faf3 	bl	8007cc0 <lcd_print>
		}

		lcd_print(2, 1, machineID);
 80046da:	4a7e      	ldr	r2, [pc, #504]	; (80048d4 <menu+0x3624>)
 80046dc:	2101      	movs	r1, #1
 80046de:	2002      	movs	r0, #2
 80046e0:	f003 faee 	bl	8007cc0 <lcd_print>
		lcd_print(2, 13, "    ");
 80046e4:	4a7c      	ldr	r2, [pc, #496]	; (80048d8 <menu+0x3628>)
 80046e6:	210d      	movs	r1, #13
 80046e8:	2002      	movs	r0, #2
 80046ea:	f003 fae9 	bl	8007cc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046ee:	2102      	movs	r1, #2
 80046f0:	486f      	ldr	r0, [pc, #444]	; (80048b0 <menu+0x3600>)
 80046f2:	f004 fe0b 	bl	800930c <HAL_GPIO_ReadPin>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d11b      	bne.n	8004734 <menu+0x3484>
 80046fc:	2104      	movs	r1, #4
 80046fe:	486c      	ldr	r0, [pc, #432]	; (80048b0 <menu+0x3600>)
 8004700:	f004 fe04 	bl	800930c <HAL_GPIO_ReadPin>
 8004704:	4603      	mov	r3, r0
 8004706:	2b01      	cmp	r3, #1
 8004708:	d114      	bne.n	8004734 <menu+0x3484>
 800470a:	4b6a      	ldr	r3, [pc, #424]	; (80048b4 <menu+0x3604>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	f083 0301 	eor.w	r3, r3, #1
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00d      	beq.n	8004734 <menu+0x3484>
			takeMachineID();
 8004718:	f002 faa0 	bl	8006c5c <takeMachineID>

			lcd_print(2, 1, machineID);
 800471c:	4a6d      	ldr	r2, [pc, #436]	; (80048d4 <menu+0x3624>)
 800471e:	2101      	movs	r1, #1
 8004720:	2002      	movs	r0, #2
 8004722:	f003 facd 	bl	8007cc0 <lcd_print>
			lcd_print(2, 13, "    ");
 8004726:	4a6c      	ldr	r2, [pc, #432]	; (80048d8 <menu+0x3628>)
 8004728:	210d      	movs	r1, #13
 800472a:	2002      	movs	r0, #2
 800472c:	f003 fac8 	bl	8007cc0 <lcd_print>

			bekle();
 8004730:	f000 f988 	bl	8004a44 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004734:	4b63      	ldr	r3, [pc, #396]	; (80048c4 <menu+0x3614>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b21      	cmp	r3, #33	; 0x21
 800473a:	d14e      	bne.n	80047da <menu+0x352a>
		calismaSayModu = 0;
 800473c:	4b62      	ldr	r3, [pc, #392]	; (80048c8 <menu+0x3618>)
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 8004742:	4866      	ldr	r0, [pc, #408]	; (80048dc <menu+0x362c>)
 8004744:	f7fb fd6e 	bl	8000224 <strlen>
 8004748:	4603      	mov	r3, r0
 800474a:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 800474c:	4a64      	ldr	r2, [pc, #400]	; (80048e0 <menu+0x3630>)
 800474e:	2101      	movs	r1, #1
 8004750:	2001      	movs	r0, #1
 8004752:	f003 fab5 	bl	8007cc0 <lcd_print>

		if(ssidLength <=16) {
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b10      	cmp	r3, #16
 800475a:	dc0e      	bgt.n	800477a <menu+0x34ca>
			lcd_print(2, 1, wifiSSID);
 800475c:	4a5f      	ldr	r2, [pc, #380]	; (80048dc <menu+0x362c>)
 800475e:	2101      	movs	r1, #1
 8004760:	2002      	movs	r0, #2
 8004762:	f003 faad 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	b2db      	uxtb	r3, r3
 800476a:	3301      	adds	r3, #1
 800476c:	b2db      	uxtb	r3, r3
 800476e:	4a5d      	ldr	r2, [pc, #372]	; (80048e4 <menu+0x3634>)
 8004770:	4619      	mov	r1, r3
 8004772:	2002      	movs	r0, #2
 8004774:	f003 faa4 	bl	8007cc0 <lcd_print>
 8004778:	e005      	b.n	8004786 <menu+0x34d6>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 800477a:	2300      	movs	r3, #0
 800477c:	2202      	movs	r2, #2
 800477e:	2101      	movs	r1, #1
 8004780:	4856      	ldr	r0, [pc, #344]	; (80048dc <menu+0x362c>)
 8004782:	f7fc fcd9 	bl	8001138 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004786:	2102      	movs	r1, #2
 8004788:	4849      	ldr	r0, [pc, #292]	; (80048b0 <menu+0x3600>)
 800478a:	f004 fdbf 	bl	800930c <HAL_GPIO_ReadPin>
 800478e:	4603      	mov	r3, r0
 8004790:	2b01      	cmp	r3, #1
 8004792:	d122      	bne.n	80047da <menu+0x352a>
 8004794:	2104      	movs	r1, #4
 8004796:	4846      	ldr	r0, [pc, #280]	; (80048b0 <menu+0x3600>)
 8004798:	f004 fdb8 	bl	800930c <HAL_GPIO_ReadPin>
 800479c:	4603      	mov	r3, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d11b      	bne.n	80047da <menu+0x352a>
 80047a2:	4b44      	ldr	r3, [pc, #272]	; (80048b4 <menu+0x3604>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	f083 0301 	eor.w	r3, r3, #1
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d014      	beq.n	80047da <menu+0x352a>
			takeWifiSSID();
 80047b0:	f002 fbe2 	bl	8006f78 <takeWifiSSID>

			lcd_print(2, 1, wifiSSID);
 80047b4:	4a49      	ldr	r2, [pc, #292]	; (80048dc <menu+0x362c>)
 80047b6:	2101      	movs	r1, #1
 80047b8:	2002      	movs	r0, #2
 80047ba:	f003 fa81 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80047be:	4847      	ldr	r0, [pc, #284]	; (80048dc <menu+0x362c>)
 80047c0:	f7fb fd30 	bl	8000224 <strlen>
 80047c4:	4603      	mov	r3, r0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	3301      	adds	r3, #1
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	4a45      	ldr	r2, [pc, #276]	; (80048e4 <menu+0x3634>)
 80047ce:	4619      	mov	r1, r3
 80047d0:	2002      	movs	r0, #2
 80047d2:	f003 fa75 	bl	8007cc0 <lcd_print>

			bekle();
 80047d6:	f000 f935 	bl	8004a44 <bekle>
		}
	}

	if (menuSayac == 34) {
 80047da:	4b3a      	ldr	r3, [pc, #232]	; (80048c4 <menu+0x3614>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b22      	cmp	r3, #34	; 0x22
 80047e0:	d14e      	bne.n	8004880 <menu+0x35d0>
		calismaSayModu = 0;
 80047e2:	4b39      	ldr	r3, [pc, #228]	; (80048c8 <menu+0x3618>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 80047e8:	483f      	ldr	r0, [pc, #252]	; (80048e8 <menu+0x3638>)
 80047ea:	f7fb fd1b 	bl	8000224 <strlen>
 80047ee:	4603      	mov	r3, r0
 80047f0:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80047f2:	4a3e      	ldr	r2, [pc, #248]	; (80048ec <menu+0x363c>)
 80047f4:	2101      	movs	r1, #1
 80047f6:	2001      	movs	r0, #1
 80047f8:	f003 fa62 	bl	8007cc0 <lcd_print>

		if(passLength <= 16) {
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b10      	cmp	r3, #16
 8004800:	dc0e      	bgt.n	8004820 <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8004802:	4a39      	ldr	r2, [pc, #228]	; (80048e8 <menu+0x3638>)
 8004804:	2101      	movs	r1, #1
 8004806:	2002      	movs	r0, #2
 8004808:	f003 fa5a 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	3301      	adds	r3, #1
 8004812:	b2db      	uxtb	r3, r3
 8004814:	4a33      	ldr	r2, [pc, #204]	; (80048e4 <menu+0x3634>)
 8004816:	4619      	mov	r1, r3
 8004818:	2002      	movs	r0, #2
 800481a:	f003 fa51 	bl	8007cc0 <lcd_print>
 800481e:	e005      	b.n	800482c <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004820:	2301      	movs	r3, #1
 8004822:	2202      	movs	r2, #2
 8004824:	2101      	movs	r1, #1
 8004826:	4830      	ldr	r0, [pc, #192]	; (80048e8 <menu+0x3638>)
 8004828:	f7fc fc86 	bl	8001138 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800482c:	2102      	movs	r1, #2
 800482e:	4820      	ldr	r0, [pc, #128]	; (80048b0 <menu+0x3600>)
 8004830:	f004 fd6c 	bl	800930c <HAL_GPIO_ReadPin>
 8004834:	4603      	mov	r3, r0
 8004836:	2b01      	cmp	r3, #1
 8004838:	d122      	bne.n	8004880 <menu+0x35d0>
 800483a:	2104      	movs	r1, #4
 800483c:	481c      	ldr	r0, [pc, #112]	; (80048b0 <menu+0x3600>)
 800483e:	f004 fd65 	bl	800930c <HAL_GPIO_ReadPin>
 8004842:	4603      	mov	r3, r0
 8004844:	2b01      	cmp	r3, #1
 8004846:	d11b      	bne.n	8004880 <menu+0x35d0>
 8004848:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <menu+0x3604>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	f083 0301 	eor.w	r3, r3, #1
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d014      	beq.n	8004880 <menu+0x35d0>
			takeWifiPass();
 8004856:	f002 fd43 	bl	80072e0 <takeWifiPass>

			lcd_print(2, 1, wifiPass);
 800485a:	4a23      	ldr	r2, [pc, #140]	; (80048e8 <menu+0x3638>)
 800485c:	2101      	movs	r1, #1
 800485e:	2002      	movs	r0, #2
 8004860:	f003 fa2e 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004864:	4820      	ldr	r0, [pc, #128]	; (80048e8 <menu+0x3638>)
 8004866:	f7fb fcdd 	bl	8000224 <strlen>
 800486a:	4603      	mov	r3, r0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	3301      	adds	r3, #1
 8004870:	b2db      	uxtb	r3, r3
 8004872:	4a1c      	ldr	r2, [pc, #112]	; (80048e4 <menu+0x3634>)
 8004874:	4619      	mov	r1, r3
 8004876:	2002      	movs	r0, #2
 8004878:	f003 fa22 	bl	8007cc0 <lcd_print>

			bekle();
 800487c:	f000 f8e2 	bl	8004a44 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004880:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <menu+0x3614>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b23      	cmp	r3, #35	; 0x23
 8004886:	d176      	bne.n	8004976 <menu+0x36c6>
		if(dilSecim == 0) {
 8004888:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <menu+0x35f8>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d133      	bne.n	80048f8 <menu+0x3648>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004890:	4a17      	ldr	r2, [pc, #92]	; (80048f0 <menu+0x3640>)
 8004892:	2101      	movs	r1, #1
 8004894:	2001      	movs	r0, #1
 8004896:	f003 fa13 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 800489a:	4a16      	ldr	r2, [pc, #88]	; (80048f4 <menu+0x3644>)
 800489c:	2101      	movs	r1, #1
 800489e:	2002      	movs	r0, #2
 80048a0:	f003 fa0e 	bl	8007cc0 <lcd_print>
 80048a4:	e036      	b.n	8004914 <menu+0x3664>
 80048a6:	bf00      	nop
 80048a8:	20000245 	.word	0x20000245
 80048ac:	0800d38c 	.word	0x0800d38c
 80048b0:	40010800 	.word	0x40010800
 80048b4:	20000253 	.word	0x20000253
 80048b8:	20000243 	.word	0x20000243
 80048bc:	20000128 	.word	0x20000128
 80048c0:	20000250 	.word	0x20000250
 80048c4:	20000224 	.word	0x20000224
 80048c8:	20000244 	.word	0x20000244
 80048cc:	0800dad4 	.word	0x0800dad4
 80048d0:	0800dae8 	.word	0x0800dae8
 80048d4:	200001a0 	.word	0x200001a0
 80048d8:	0800dafc 	.word	0x0800dafc
 80048dc:	200001ac 	.word	0x200001ac
 80048e0:	0800db04 	.word	0x0800db04
 80048e4:	20000018 	.word	0x20000018
 80048e8:	200001c0 	.word	0x200001c0
 80048ec:	0800db18 	.word	0x0800db18
 80048f0:	0800db2c 	.word	0x0800db2c
 80048f4:	0800db40 	.word	0x0800db40
		} else if(dilSecim == 1) {
 80048f8:	4b21      	ldr	r3, [pc, #132]	; (8004980 <menu+0x36d0>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d109      	bne.n	8004914 <menu+0x3664>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004900:	4a20      	ldr	r2, [pc, #128]	; (8004984 <menu+0x36d4>)
 8004902:	2101      	movs	r1, #1
 8004904:	2001      	movs	r0, #1
 8004906:	f003 f9db 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800490a:	4a1f      	ldr	r2, [pc, #124]	; (8004988 <menu+0x36d8>)
 800490c:	2101      	movs	r1, #1
 800490e:	2002      	movs	r0, #2
 8004910:	f003 f9d6 	bl	8007cc0 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004914:	2108      	movs	r1, #8
 8004916:	481d      	ldr	r0, [pc, #116]	; (800498c <menu+0x36dc>)
 8004918:	f004 fcf8 	bl	800930c <HAL_GPIO_ReadPin>
 800491c:	4603      	mov	r3, r0
 800491e:	2b01      	cmp	r3, #1
 8004920:	d129      	bne.n	8004976 <menu+0x36c6>
			menuGiris = 0;
 8004922:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <menu+0x36e0>)
 8004924:	2200      	movs	r2, #0
 8004926:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004928:	bf00      	nop
 800492a:	481a      	ldr	r0, [pc, #104]	; (8004994 <menu+0x36e4>)
 800492c:	f005 fb17 	bl	8009f5e <HAL_I2C_GetError>
 8004930:	4603      	mov	r3, r0
 8004932:	2b04      	cmp	r3, #4
 8004934:	d0f9      	beq.n	800492a <menu+0x367a>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004936:	bf00      	nop
 8004938:	4816      	ldr	r0, [pc, #88]	; (8004994 <menu+0x36e4>)
 800493a:	f005 fb03 	bl	8009f44 <HAL_I2C_GetState>
 800493e:	4603      	mov	r3, r0
 8004940:	2b20      	cmp	r3, #32
 8004942:	d1f9      	bne.n	8004938 <menu+0x3688>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004944:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004948:	9302      	str	r3, [sp, #8]
 800494a:	236e      	movs	r3, #110	; 0x6e
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	4b12      	ldr	r3, [pc, #72]	; (8004998 <menu+0x36e8>)
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	236e      	movs	r3, #110	; 0x6e
 8004954:	2200      	movs	r2, #0
 8004956:	21a0      	movs	r1, #160	; 0xa0
 8004958:	480e      	ldr	r0, [pc, #56]	; (8004994 <menu+0x36e4>)
 800495a:	f004 ff91 	bl	8009880 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 800495e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004962:	f003 ff03 	bl	800876c <HAL_Delay>

			lcd_clear();
 8004966:	f003 f9d7 	bl	8007d18 <lcd_clear>
			HAL_Delay(500);
 800496a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800496e:	f003 fefd 	bl	800876c <HAL_Delay>
			NVIC_SystemReset();
 8004972:	f7fc fc87 	bl	8001284 <__NVIC_SystemReset>
		}
	}
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000245 	.word	0x20000245
 8004984:	0800db54 	.word	0x0800db54
 8004988:	0800db68 	.word	0x0800db68
 800498c:	40010800 	.word	0x40010800
 8004990:	20000241 	.word	0x20000241
 8004994:	200002b4 	.word	0x200002b4
 8004998:	20000128 	.word	0x20000128

0800499c <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d105      	bne.n	80049b8 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80049ac:	4a22      	ldr	r2, [pc, #136]	; (8004a38 <lcdUpdate+0x9c>)
 80049ae:	2101      	movs	r1, #1
 80049b0:	2002      	movs	r0, #2
 80049b2:	f003 f985 	bl	8007cc0 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 80049b6:	e03b      	b.n	8004a30 <lcdUpdate+0x94>
	} else if(y==2) {
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d105      	bne.n	80049ca <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80049be:	4a1e      	ldr	r2, [pc, #120]	; (8004a38 <lcdUpdate+0x9c>)
 80049c0:	2102      	movs	r1, #2
 80049c2:	2002      	movs	r0, #2
 80049c4:	f003 f97c 	bl	8007cc0 <lcd_print>
}
 80049c8:	e032      	b.n	8004a30 <lcdUpdate+0x94>
	} else if(y==3) {
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d105      	bne.n	80049dc <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80049d0:	4a19      	ldr	r2, [pc, #100]	; (8004a38 <lcdUpdate+0x9c>)
 80049d2:	2103      	movs	r1, #3
 80049d4:	2002      	movs	r0, #2
 80049d6:	f003 f973 	bl	8007cc0 <lcd_print>
}
 80049da:	e029      	b.n	8004a30 <lcdUpdate+0x94>
	} else if(y==4) {
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d105      	bne.n	80049ee <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80049e2:	4a15      	ldr	r2, [pc, #84]	; (8004a38 <lcdUpdate+0x9c>)
 80049e4:	2104      	movs	r1, #4
 80049e6:	2002      	movs	r0, #2
 80049e8:	f003 f96a 	bl	8007cc0 <lcd_print>
}
 80049ec:	e020      	b.n	8004a30 <lcdUpdate+0x94>
	} else if(y==5) {
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	2b05      	cmp	r3, #5
 80049f2:	d105      	bne.n	8004a00 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80049f4:	4a10      	ldr	r2, [pc, #64]	; (8004a38 <lcdUpdate+0x9c>)
 80049f6:	2105      	movs	r1, #5
 80049f8:	2002      	movs	r0, #2
 80049fa:	f003 f961 	bl	8007cc0 <lcd_print>
}
 80049fe:	e017      	b.n	8004a30 <lcdUpdate+0x94>
	} else if(y==6) {
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	2b06      	cmp	r3, #6
 8004a04:	d105      	bne.n	8004a12 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004a06:	4a0c      	ldr	r2, [pc, #48]	; (8004a38 <lcdUpdate+0x9c>)
 8004a08:	2106      	movs	r1, #6
 8004a0a:	2002      	movs	r0, #2
 8004a0c:	f003 f958 	bl	8007cc0 <lcd_print>
}
 8004a10:	e00e      	b.n	8004a30 <lcdUpdate+0x94>
	} else if (y==7) {
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	2b07      	cmp	r3, #7
 8004a16:	d10b      	bne.n	8004a30 <lcdUpdate+0x94>
		lcd_clear();
 8004a18:	f003 f97e 	bl	8007d18 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004a1c:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <lcdUpdate+0xa0>)
 8004a1e:	2104      	movs	r1, #4
 8004a20:	2001      	movs	r0, #1
 8004a22:	f003 f94d 	bl	8007cc0 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004a26:	4a06      	ldr	r2, [pc, #24]	; (8004a40 <lcdUpdate+0xa4>)
 8004a28:	2106      	movs	r1, #6
 8004a2a:	2002      	movs	r0, #2
 8004a2c:	f003 f948 	bl	8007cc0 <lcd_print>
}
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	0800db7c 	.word	0x0800db7c
 8004a3c:	0800db80 	.word	0x0800db80
 8004a40:	0800db88 	.word	0x0800db88

08004a44 <bekle>:

void bekle() {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
	timer1=millis;
 8004a48:	4b47      	ldr	r3, [pc, #284]	; (8004b68 <bekle+0x124>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a47      	ldr	r2, [pc, #284]	; (8004b6c <bekle+0x128>)
 8004a4e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a50:	e002      	b.n	8004a58 <bekle+0x14>
    	butonKontrol = 1;
 8004a52:	4b47      	ldr	r3, [pc, #284]	; (8004b70 <bekle+0x12c>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a58:	2101      	movs	r1, #1
 8004a5a:	4846      	ldr	r0, [pc, #280]	; (8004b74 <bekle+0x130>)
 8004a5c:	f004 fc56 	bl	800930c <HAL_GPIO_ReadPin>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d109      	bne.n	8004a7a <bekle+0x36>
 8004a66:	4b40      	ldr	r3, [pc, #256]	; (8004b68 <bekle+0x124>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4b40      	ldr	r3, [pc, #256]	; (8004b6c <bekle+0x128>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d0ef      	beq.n	8004a52 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a72:	e002      	b.n	8004a7a <bekle+0x36>
    	butonKontrol = 1;
 8004a74:	4b3e      	ldr	r3, [pc, #248]	; (8004b70 <bekle+0x12c>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a7a:	2108      	movs	r1, #8
 8004a7c:	483e      	ldr	r0, [pc, #248]	; (8004b78 <bekle+0x134>)
 8004a7e:	f004 fc45 	bl	800930c <HAL_GPIO_ReadPin>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d109      	bne.n	8004a9c <bekle+0x58>
 8004a88:	4b37      	ldr	r3, [pc, #220]	; (8004b68 <bekle+0x124>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b37      	ldr	r3, [pc, #220]	; (8004b6c <bekle+0x128>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d0ef      	beq.n	8004a74 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a94:	e002      	b.n	8004a9c <bekle+0x58>
    	butonKontrol = 1;
 8004a96:	4b36      	ldr	r3, [pc, #216]	; (8004b70 <bekle+0x12c>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	4835      	ldr	r0, [pc, #212]	; (8004b74 <bekle+0x130>)
 8004aa0:	f004 fc34 	bl	800930c <HAL_GPIO_ReadPin>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d109      	bne.n	8004abe <bekle+0x7a>
 8004aaa:	4b2f      	ldr	r3, [pc, #188]	; (8004b68 <bekle+0x124>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b2f      	ldr	r3, [pc, #188]	; (8004b6c <bekle+0x128>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d0ef      	beq.n	8004a96 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ab6:	e002      	b.n	8004abe <bekle+0x7a>
    	butonKontrol = 1;
 8004ab8:	4b2d      	ldr	r3, [pc, #180]	; (8004b70 <bekle+0x12c>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004abe:	2104      	movs	r1, #4
 8004ac0:	482c      	ldr	r0, [pc, #176]	; (8004b74 <bekle+0x130>)
 8004ac2:	f004 fc23 	bl	800930c <HAL_GPIO_ReadPin>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d109      	bne.n	8004ae0 <bekle+0x9c>
 8004acc:	4b26      	ldr	r3, [pc, #152]	; (8004b68 <bekle+0x124>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4b26      	ldr	r3, [pc, #152]	; (8004b6c <bekle+0x128>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d0ef      	beq.n	8004ab8 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ad8:	e002      	b.n	8004ae0 <bekle+0x9c>
    	butonKontrol = 1;
 8004ada:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <bekle+0x12c>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ae0:	2108      	movs	r1, #8
 8004ae2:	4824      	ldr	r0, [pc, #144]	; (8004b74 <bekle+0x130>)
 8004ae4:	f004 fc12 	bl	800930c <HAL_GPIO_ReadPin>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d109      	bne.n	8004b02 <bekle+0xbe>
 8004aee:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <bekle+0x124>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4b1e      	ldr	r3, [pc, #120]	; (8004b6c <bekle+0x128>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d0ef      	beq.n	8004ada <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004afa:	e002      	b.n	8004b02 <bekle+0xbe>
    	butonKontrol = 1;
 8004afc:	4b1c      	ldr	r3, [pc, #112]	; (8004b70 <bekle+0x12c>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b02:	2180      	movs	r1, #128	; 0x80
 8004b04:	481c      	ldr	r0, [pc, #112]	; (8004b78 <bekle+0x134>)
 8004b06:	f004 fc01 	bl	800930c <HAL_GPIO_ReadPin>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d109      	bne.n	8004b24 <bekle+0xe0>
 8004b10:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <bekle+0x124>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <bekle+0x128>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d0ef      	beq.n	8004afc <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b1c:	e002      	b.n	8004b24 <bekle+0xe0>
    	butonKontrol = 1;
 8004b1e:	4b14      	ldr	r3, [pc, #80]	; (8004b70 <bekle+0x12c>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b28:	4813      	ldr	r0, [pc, #76]	; (8004b78 <bekle+0x134>)
 8004b2a:	f004 fbef 	bl	800930c <HAL_GPIO_ReadPin>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d109      	bne.n	8004b48 <bekle+0x104>
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <bekle+0x124>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <bekle+0x128>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d0ee      	beq.n	8004b1e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b40:	e002      	b.n	8004b48 <bekle+0x104>
    	butonKontrol = 1;
 8004b42:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <bekle+0x12c>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b4c:	480a      	ldr	r0, [pc, #40]	; (8004b78 <bekle+0x134>)
 8004b4e:	f004 fbdd 	bl	800930c <HAL_GPIO_ReadPin>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d105      	bne.n	8004b64 <bekle+0x120>
 8004b58:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <bekle+0x124>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <bekle+0x128>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d0ee      	beq.n	8004b42 <bekle+0xfe>
    }

}
 8004b64:	bf00      	nop
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20000200 	.word	0x20000200
 8004b6c:	20000208 	.word	0x20000208
 8004b70:	20000253 	.word	0x20000253
 8004b74:	40010800 	.word	0x40010800
 8004b78:	40011000 	.word	0x40011000

08004b7c <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <checkLCDBacklight+0x24>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <checkLCDBacklight+0x28>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b3b      	cmp	r3, #59	; 0x3b
 8004b8c:	d903      	bls.n	8004b96 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f003 f8e2 	bl	8007d58 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004b94:	e002      	b.n	8004b9c <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004b96:	2001      	movs	r0, #1
 8004b98:	f003 f8de 	bl	8007d58 <lcd_backlight>
}
 8004b9c:	bf00      	nop
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20000200 	.word	0x20000200
 8004ba4:	2000021c 	.word	0x2000021c

08004ba8 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004bac:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <checkBasincSalteri+0x54>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d102      	bne.n	8004bba <checkBasincSalteri+0x12>
		basincVar=1;
 8004bb4:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <checkBasincSalteri+0x58>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004bba:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <checkBasincSalteri+0x54>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d119      	bne.n	8004bf6 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bc6:	480f      	ldr	r0, [pc, #60]	; (8004c04 <checkBasincSalteri+0x5c>)
 8004bc8:	f004 fba0 	bl	800930c <HAL_GPIO_ReadPin>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <checkBasincSalteri+0x60>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <checkBasincSalteri+0x64>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d90a      	bls.n	8004bf6 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <checkBasincSalteri+0x58>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004be6:	e006      	b.n	8004bf6 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004be8:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <checkBasincSalteri+0x60>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a07      	ldr	r2, [pc, #28]	; (8004c0c <checkBasincSalteri+0x64>)
 8004bee:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004bf0:	4b03      	ldr	r3, [pc, #12]	; (8004c00 <checkBasincSalteri+0x58>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	701a      	strb	r2, [r3, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	2000022b 	.word	0x2000022b
 8004c00:	20000227 	.word	0x20000227
 8004c04:	40011000 	.word	0x40011000
 8004c08:	20000200 	.word	0x20000200
 8004c0c:	20000218 	.word	0x20000218

08004c10 <checkBasGonder>:

void checkBasGonder() {
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004c14:	4b1b      	ldr	r3, [pc, #108]	; (8004c84 <checkBasGonder+0x74>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d10b      	bne.n	8004c34 <checkBasGonder+0x24>
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	; (8004c88 <checkBasGonder+0x78>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d007      	beq.n	8004c34 <checkBasGonder+0x24>
 8004c24:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <checkBasGonder+0x7c>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d103      	bne.n	8004c34 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004c2c:	4b18      	ldr	r3, [pc, #96]	; (8004c90 <checkBasGonder+0x80>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	e009      	b.n	8004c48 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004c34:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <checkBasGonder+0x78>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	f083 0301 	eor.w	r3, r3, #1
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004c42:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <checkBasGonder+0x80>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004c48:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <checkBasGonder+0x74>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d10b      	bne.n	8004c68 <checkBasGonder+0x58>
 8004c50:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <checkBasGonder+0x84>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d007      	beq.n	8004c68 <checkBasGonder+0x58>
 8004c58:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <checkBasGonder+0x7c>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d103      	bne.n	8004c68 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004c60:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <checkBasGonder+0x88>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004c66:	e009      	b.n	8004c7c <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <checkBasGonder+0x84>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	f083 0301 	eor.w	r3, r3, #1
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <checkBasGonder+0x88>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr
 8004c84:	20000225 	.word	0x20000225
 8004c88:	20000259 	.word	0x20000259
 8004c8c:	20000233 	.word	0x20000233
 8004c90:	20000260 	.word	0x20000260
 8004c94:	2000025c 	.word	0x2000025c
 8004c98:	20000261 	.word	0x20000261

08004c9c <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004ca0:	4b24      	ldr	r3, [pc, #144]	; (8004d34 <checkKapiSecimleri+0x98>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004ca8:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <checkKapiSecimleri+0x9c>)
 8004caa:	2201      	movs	r2, #1
 8004cac:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004cae:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <checkKapiSecimleri+0x98>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d10e      	bne.n	8004cd4 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004cb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cba:	4820      	ldr	r0, [pc, #128]	; (8004d3c <checkKapiSecimleri+0xa0>)
 8004cbc:	f004 fb26 	bl	800930c <HAL_GPIO_ReadPin>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d103      	bne.n	8004cce <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <checkKapiSecimleri+0x9c>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	e002      	b.n	8004cd4 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004cce:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <checkKapiSecimleri+0x9c>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004cd4:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <checkKapiSecimleri+0x98>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d10e      	bne.n	8004cfa <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ce0:	4816      	ldr	r0, [pc, #88]	; (8004d3c <checkKapiSecimleri+0xa0>)
 8004ce2:	f004 fb13 	bl	800930c <HAL_GPIO_ReadPin>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d103      	bne.n	8004cf4 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004cec:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <checkKapiSecimleri+0x9c>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	e002      	b.n	8004cfa <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004cf4:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <checkKapiSecimleri+0x9c>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004cfa:	4b0e      	ldr	r3, [pc, #56]	; (8004d34 <checkKapiSecimleri+0x98>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d116      	bne.n	8004d30 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d06:	480d      	ldr	r0, [pc, #52]	; (8004d3c <checkKapiSecimleri+0xa0>)
 8004d08:	f004 fb00 	bl	800930c <HAL_GPIO_ReadPin>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <checkKapiSecimleri+0x8e>
 8004d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d16:	4809      	ldr	r0, [pc, #36]	; (8004d3c <checkKapiSecimleri+0xa0>)
 8004d18:	f004 faf8 	bl	800930c <HAL_GPIO_ReadPin>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d103      	bne.n	8004d2a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004d22:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <checkKapiSecimleri+0x9c>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004d28:	e002      	b.n	8004d30 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004d2a:	4b03      	ldr	r3, [pc, #12]	; (8004d38 <checkKapiSecimleri+0x9c>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	701a      	strb	r2, [r3, #0]
}
 8004d30:	bf00      	nop
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	2000022c 	.word	0x2000022c
 8004d38:	20000277 	.word	0x20000277
 8004d3c:	40010800 	.word	0x40010800

08004d40 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004d44:	4b62      	ldr	r3, [pc, #392]	; (8004ed0 <checkAktifCalisma+0x190>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f041 833e 	bne.w	80063ca <checkAktifCalisma+0x168a>
 8004d4e:	4b61      	ldr	r3, [pc, #388]	; (8004ed4 <checkAktifCalisma+0x194>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f041 8339 	bne.w	80063ca <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004d58:	4b5f      	ldr	r3, [pc, #380]	; (8004ed8 <checkAktifCalisma+0x198>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d11a      	bne.n	8004d96 <checkAktifCalisma+0x56>
 8004d60:	4b5e      	ldr	r3, [pc, #376]	; (8004edc <checkAktifCalisma+0x19c>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d116      	bne.n	8004d96 <checkAktifCalisma+0x56>
 8004d68:	4b5d      	ldr	r3, [pc, #372]	; (8004ee0 <checkAktifCalisma+0x1a0>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <checkAktifCalisma+0x46>
 8004d70:	4b5c      	ldr	r3, [pc, #368]	; (8004ee4 <checkAktifCalisma+0x1a4>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	f083 0301 	eor.w	r3, r3, #1
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <checkAktifCalisma+0x46>
 8004d7e:	4b5a      	ldr	r3, [pc, #360]	; (8004ee8 <checkAktifCalisma+0x1a8>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d007      	beq.n	8004d96 <checkAktifCalisma+0x56>
 8004d86:	4b59      	ldr	r3, [pc, #356]	; (8004eec <checkAktifCalisma+0x1ac>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d018      	beq.n	8004dc0 <checkAktifCalisma+0x80>
 8004d8e:	4b58      	ldr	r3, [pc, #352]	; (8004ef0 <checkAktifCalisma+0x1b0>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d114      	bne.n	8004dc0 <checkAktifCalisma+0x80>
 8004d96:	4b57      	ldr	r3, [pc, #348]	; (8004ef4 <checkAktifCalisma+0x1b4>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d010      	beq.n	8004dc0 <checkAktifCalisma+0x80>
 8004d9e:	4b56      	ldr	r3, [pc, #344]	; (8004ef8 <checkAktifCalisma+0x1b8>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00c      	beq.n	8004dc0 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004da6:	2201      	movs	r2, #1
 8004da8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004dac:	4853      	ldr	r0, [pc, #332]	; (8004efc <checkAktifCalisma+0x1bc>)
 8004dae:	f004 fac4 	bl	800933a <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004db2:	4b53      	ldr	r3, [pc, #332]	; (8004f00 <checkAktifCalisma+0x1c0>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004db8:	4b52      	ldr	r3, [pc, #328]	; (8004f04 <checkAktifCalisma+0x1c4>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	e008      	b.n	8004dd2 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004dc6:	484d      	ldr	r0, [pc, #308]	; (8004efc <checkAktifCalisma+0x1bc>)
 8004dc8:	f004 fab7 	bl	800933a <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004dcc:	4b4c      	ldr	r3, [pc, #304]	; (8004f00 <checkAktifCalisma+0x1c0>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004dd2:	4b40      	ldr	r3, [pc, #256]	; (8004ed4 <checkAktifCalisma+0x194>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d160      	bne.n	8004e9c <checkAktifCalisma+0x15c>
 8004dda:	4b46      	ldr	r3, [pc, #280]	; (8004ef4 <checkAktifCalisma+0x1b4>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d05c      	beq.n	8004e9c <checkAktifCalisma+0x15c>
 8004de2:	4b45      	ldr	r3, [pc, #276]	; (8004ef8 <checkAktifCalisma+0x1b8>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d058      	beq.n	8004e9c <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dee:	4843      	ldr	r0, [pc, #268]	; (8004efc <checkAktifCalisma+0x1bc>)
 8004df0:	f004 fa8c 	bl	800930c <HAL_GPIO_ReadPin>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <checkAktifCalisma+0xc2>
 8004dfa:	4b43      	ldr	r3, [pc, #268]	; (8004f08 <checkAktifCalisma+0x1c8>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d04c      	beq.n	8004e9c <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e02:	2102      	movs	r1, #2
 8004e04:	4841      	ldr	r0, [pc, #260]	; (8004f0c <checkAktifCalisma+0x1cc>)
 8004e06:	f004 fa81 	bl	800930c <HAL_GPIO_ReadPin>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d145      	bne.n	8004e9c <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004e10:	4b3f      	ldr	r3, [pc, #252]	; (8004f10 <checkAktifCalisma+0x1d0>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d041      	beq.n	8004e9c <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004e18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e1c:	4837      	ldr	r0, [pc, #220]	; (8004efc <checkAktifCalisma+0x1bc>)
 8004e1e:	f004 fa75 	bl	800930c <HAL_GPIO_ReadPin>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d10e      	bne.n	8004e46 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004e28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e2c:	4833      	ldr	r0, [pc, #204]	; (8004efc <checkAktifCalisma+0x1bc>)
 8004e2e:	f004 fa6d 	bl	800930c <HAL_GPIO_ReadPin>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d106      	bne.n	8004e46 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004e38:	2140      	movs	r1, #64	; 0x40
 8004e3a:	4834      	ldr	r0, [pc, #208]	; (8004f0c <checkAktifCalisma+0x1cc>)
 8004e3c:	f004 fa66 	bl	800930c <HAL_GPIO_ReadPin>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d003      	beq.n	8004e4e <checkAktifCalisma+0x10e>
 8004e46:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <checkAktifCalisma+0x198>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d026      	beq.n	8004e9c <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004e4e:	4b24      	ldr	r3, [pc, #144]	; (8004ee0 <checkAktifCalisma+0x1a0>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	f083 0301 	eor.w	r3, r3, #1
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01f      	beq.n	8004e9c <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004e5c:	4b1f      	ldr	r3, [pc, #124]	; (8004edc <checkAktifCalisma+0x19c>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	f083 0301 	eor.w	r3, r3, #1
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d018      	beq.n	8004e9c <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004e6a:	4b20      	ldr	r3, [pc, #128]	; (8004eec <checkAktifCalisma+0x1ac>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	f083 0301 	eor.w	r3, r3, #1
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d011      	beq.n	8004e9c <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004e78:	4b26      	ldr	r3, [pc, #152]	; (8004f14 <checkAktifCalisma+0x1d4>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	f083 0301 	eor.w	r3, r3, #1
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004e86:	4b24      	ldr	r3, [pc, #144]	; (8004f18 <checkAktifCalisma+0x1d8>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	f083 0301 	eor.w	r3, r3, #1
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004e94:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <checkAktifCalisma+0x198>)
 8004e96:	2201      	movs	r2, #1
 8004e98:	701a      	strb	r2, [r3, #0]
 8004e9a:	e002      	b.n	8004ea2 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004e9c:	4b0e      	ldr	r3, [pc, #56]	; (8004ed8 <checkAktifCalisma+0x198>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <checkAktifCalisma+0x198>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d03a      	beq.n	8004f20 <checkAktifCalisma+0x1e0>
 8004eaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004eae:	4817      	ldr	r0, [pc, #92]	; (8004f0c <checkAktifCalisma+0x1cc>)
 8004eb0:	f004 fa2c 	bl	800930c <HAL_GPIO_ReadPin>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d132      	bne.n	8004f20 <checkAktifCalisma+0x1e0>
 8004eba:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <checkAktifCalisma+0x1dc>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d02e      	beq.n	8004f20 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ec8:	480c      	ldr	r0, [pc, #48]	; (8004efc <checkAktifCalisma+0x1bc>)
 8004eca:	f004 fa36 	bl	800933a <HAL_GPIO_WritePin>
 8004ece:	e02d      	b.n	8004f2c <checkAktifCalisma+0x1ec>
 8004ed0:	20000242 	.word	0x20000242
 8004ed4:	20000241 	.word	0x20000241
 8004ed8:	20000259 	.word	0x20000259
 8004edc:	2000025a 	.word	0x2000025a
 8004ee0:	2000025c 	.word	0x2000025c
 8004ee4:	20000254 	.word	0x20000254
 8004ee8:	20000237 	.word	0x20000237
 8004eec:	2000025b 	.word	0x2000025b
 8004ef0:	20000236 	.word	0x20000236
 8004ef4:	20000276 	.word	0x20000276
 8004ef8:	20000277 	.word	0x20000277
 8004efc:	40010c00 	.word	0x40010c00
 8004f00:	20000278 	.word	0x20000278
 8004f04:	20000263 	.word	0x20000263
 8004f08:	20000260 	.word	0x20000260
 8004f0c:	40011000 	.word	0x40011000
 8004f10:	20000227 	.word	0x20000227
 8004f14:	2000025e 	.word	0x2000025e
 8004f18:	2000025f 	.word	0x2000025f
 8004f1c:	20000232 	.word	0x20000232
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004f20:	2200      	movs	r2, #0
 8004f22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f26:	4860      	ldr	r0, [pc, #384]	; (80050a8 <checkAktifCalisma+0x368>)
 8004f28:	f004 fa07 	bl	800933a <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004f2c:	4b5f      	ldr	r3, [pc, #380]	; (80050ac <checkAktifCalisma+0x36c>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d013      	beq.n	8004f5c <checkAktifCalisma+0x21c>
 8004f34:	4b5e      	ldr	r3, [pc, #376]	; (80050b0 <checkAktifCalisma+0x370>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d007      	beq.n	8004f4c <checkAktifCalisma+0x20c>
 8004f3c:	4b5c      	ldr	r3, [pc, #368]	; (80050b0 <checkAktifCalisma+0x370>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d003      	beq.n	8004f4c <checkAktifCalisma+0x20c>
 8004f44:	4b5b      	ldr	r3, [pc, #364]	; (80050b4 <checkAktifCalisma+0x374>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d107      	bne.n	8004f5c <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	2104      	movs	r1, #4
 8004f50:	4855      	ldr	r0, [pc, #340]	; (80050a8 <checkAktifCalisma+0x368>)
 8004f52:	f004 f9f2 	bl	800933a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004f56:	4b58      	ldr	r3, [pc, #352]	; (80050b8 <checkAktifCalisma+0x378>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004f5c:	4b56      	ldr	r3, [pc, #344]	; (80050b8 <checkAktifCalisma+0x378>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d02f      	beq.n	8004fc4 <checkAktifCalisma+0x284>
 8004f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f68:	484f      	ldr	r0, [pc, #316]	; (80050a8 <checkAktifCalisma+0x368>)
 8004f6a:	f004 f9cf 	bl	800930c <HAL_GPIO_ReadPin>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d106      	bne.n	8004f82 <checkAktifCalisma+0x242>
 8004f74:	4b51      	ldr	r3, [pc, #324]	; (80050bc <checkAktifCalisma+0x37c>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	f083 0301 	eor.w	r3, r3, #1
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <checkAktifCalisma+0x250>
 8004f82:	2102      	movs	r1, #2
 8004f84:	484e      	ldr	r0, [pc, #312]	; (80050c0 <checkAktifCalisma+0x380>)
 8004f86:	f004 f9c1 	bl	800930c <HAL_GPIO_ReadPin>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d119      	bne.n	8004fc4 <checkAktifCalisma+0x284>
 8004f90:	4b4c      	ldr	r3, [pc, #304]	; (80050c4 <checkAktifCalisma+0x384>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d015      	beq.n	8004fc4 <checkAktifCalisma+0x284>
 8004f98:	4b4b      	ldr	r3, [pc, #300]	; (80050c8 <checkAktifCalisma+0x388>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d011      	beq.n	8004fc4 <checkAktifCalisma+0x284>
 8004fa0:	4b4a      	ldr	r3, [pc, #296]	; (80050cc <checkAktifCalisma+0x38c>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00d      	beq.n	8004fc4 <checkAktifCalisma+0x284>
 8004fa8:	4b49      	ldr	r3, [pc, #292]	; (80050d0 <checkAktifCalisma+0x390>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	f083 0301 	eor.w	r3, r3, #1
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d006      	beq.n	8004fc4 <checkAktifCalisma+0x284>
			timer2=millis;
 8004fb6:	4b47      	ldr	r3, [pc, #284]	; (80050d4 <checkAktifCalisma+0x394>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a47      	ldr	r2, [pc, #284]	; (80050d8 <checkAktifCalisma+0x398>)
 8004fbc:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004fbe:	4b44      	ldr	r3, [pc, #272]	; (80050d0 <checkAktifCalisma+0x390>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004fc4:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <checkAktifCalisma+0x394>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	4b43      	ldr	r3, [pc, #268]	; (80050d8 <checkAktifCalisma+0x398>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	4a43      	ldr	r2, [pc, #268]	; (80050dc <checkAktifCalisma+0x39c>)
 8004fd0:	7812      	ldrb	r2, [r2, #0]
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d303      	bcc.n	8004fde <checkAktifCalisma+0x29e>
 8004fd6:	4b3e      	ldr	r3, [pc, #248]	; (80050d0 <checkAktifCalisma+0x390>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d111      	bne.n	8005002 <checkAktifCalisma+0x2c2>
 8004fde:	4b39      	ldr	r3, [pc, #228]	; (80050c4 <checkAktifCalisma+0x384>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	f083 0301 	eor.w	r3, r3, #1
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <checkAktifCalisma+0x2c2>
 8004fec:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <checkAktifCalisma+0x388>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	f083 0301 	eor.w	r3, r3, #1
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d103      	bne.n	8005002 <checkAktifCalisma+0x2c2>
 8004ffa:	4b34      	ldr	r3, [pc, #208]	; (80050cc <checkAktifCalisma+0x38c>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10a      	bne.n	8005018 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005002:	2200      	movs	r2, #0
 8005004:	2104      	movs	r1, #4
 8005006:	4828      	ldr	r0, [pc, #160]	; (80050a8 <checkAktifCalisma+0x368>)
 8005008:	f004 f997 	bl	800933a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 800500c:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <checkAktifCalisma+0x378>)
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005012:	4b2f      	ldr	r3, [pc, #188]	; (80050d0 <checkAktifCalisma+0x390>)
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005018:	4b31      	ldr	r3, [pc, #196]	; (80050e0 <checkAktifCalisma+0x3a0>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005020:	4b30      	ldr	r3, [pc, #192]	; (80050e4 <checkAktifCalisma+0x3a4>)
 8005022:	2201      	movs	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005026:	4b2e      	ldr	r3, [pc, #184]	; (80050e0 <checkAktifCalisma+0x3a0>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d116      	bne.n	800505c <checkAktifCalisma+0x31c>
 800502e:	4b2e      	ldr	r3, [pc, #184]	; (80050e8 <checkAktifCalisma+0x3a8>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d112      	bne.n	800505c <checkAktifCalisma+0x31c>
 8005036:	2101      	movs	r1, #1
 8005038:	4821      	ldr	r0, [pc, #132]	; (80050c0 <checkAktifCalisma+0x380>)
 800503a:	f004 f967 	bl	800930c <HAL_GPIO_ReadPin>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <checkAktifCalisma+0x31c>
 8005044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005048:	4817      	ldr	r0, [pc, #92]	; (80050a8 <checkAktifCalisma+0x368>)
 800504a:	f004 f95f 	bl	800930c <HAL_GPIO_ReadPin>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d103      	bne.n	800505c <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005054:	4b23      	ldr	r3, [pc, #140]	; (80050e4 <checkAktifCalisma+0x3a4>)
 8005056:	2201      	movs	r2, #1
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	e011      	b.n	8005080 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800505c:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <checkAktifCalisma+0x3a0>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d10d      	bne.n	8005080 <checkAktifCalisma+0x340>
 8005064:	2101      	movs	r1, #1
 8005066:	4816      	ldr	r0, [pc, #88]	; (80050c0 <checkAktifCalisma+0x380>)
 8005068:	f004 f950 	bl	800930c <HAL_GPIO_ReadPin>
 800506c:	4603      	mov	r3, r0
 800506e:	2b01      	cmp	r3, #1
 8005070:	d106      	bne.n	8005080 <checkAktifCalisma+0x340>
 8005072:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <checkAktifCalisma+0x3a8>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d102      	bne.n	8005080 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800507a:	4b1a      	ldr	r3, [pc, #104]	; (80050e4 <checkAktifCalisma+0x3a4>)
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005080:	4b17      	ldr	r3, [pc, #92]	; (80050e0 <checkAktifCalisma+0x3a0>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d134      	bne.n	80050f2 <checkAktifCalisma+0x3b2>
 8005088:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <checkAktifCalisma+0x3a8>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d130      	bne.n	80050f2 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005090:	2101      	movs	r1, #1
 8005092:	480b      	ldr	r0, [pc, #44]	; (80050c0 <checkAktifCalisma+0x380>)
 8005094:	f004 f93a 	bl	800930c <HAL_GPIO_ReadPin>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d126      	bne.n	80050ec <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800509e:	4b11      	ldr	r3, [pc, #68]	; (80050e4 <checkAktifCalisma+0x3a4>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	e025      	b.n	80050f2 <checkAktifCalisma+0x3b2>
 80050a6:	bf00      	nop
 80050a8:	40010c00 	.word	0x40010c00
 80050ac:	20000259 	.word	0x20000259
 80050b0:	20000233 	.word	0x20000233
 80050b4:	20000237 	.word	0x20000237
 80050b8:	2000025d 	.word	0x2000025d
 80050bc:	20000260 	.word	0x20000260
 80050c0:	40011000 	.word	0x40011000
 80050c4:	20000276 	.word	0x20000276
 80050c8:	20000277 	.word	0x20000277
 80050cc:	20000227 	.word	0x20000227
 80050d0:	20000255 	.word	0x20000255
 80050d4:	20000200 	.word	0x20000200
 80050d8:	2000020c 	.word	0x2000020c
 80050dc:	20000238 	.word	0x20000238
 80050e0:	20000228 	.word	0x20000228
 80050e4:	2000027b 	.word	0x2000027b
 80050e8:	20000225 	.word	0x20000225
			} else {
				cerceveVar=0;
 80050ec:	4b7f      	ldr	r3, [pc, #508]	; (80052ec <checkAktifCalisma+0x5ac>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80050f2:	4b7f      	ldr	r3, [pc, #508]	; (80052f0 <checkAktifCalisma+0x5b0>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d17c      	bne.n	80051f4 <checkAktifCalisma+0x4b4>
 80050fa:	4b7e      	ldr	r3, [pc, #504]	; (80052f4 <checkAktifCalisma+0x5b4>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d078      	beq.n	80051f4 <checkAktifCalisma+0x4b4>
 8005102:	4b7d      	ldr	r3, [pc, #500]	; (80052f8 <checkAktifCalisma+0x5b8>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d074      	beq.n	80051f4 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800510a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800510e:	487b      	ldr	r0, [pc, #492]	; (80052fc <checkAktifCalisma+0x5bc>)
 8005110:	f004 f8fc 	bl	800930c <HAL_GPIO_ReadPin>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <checkAktifCalisma+0x3e2>
 800511a:	4b79      	ldr	r3, [pc, #484]	; (8005300 <checkAktifCalisma+0x5c0>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d068      	beq.n	80051f4 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005122:	4b72      	ldr	r3, [pc, #456]	; (80052ec <checkAktifCalisma+0x5ac>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d064      	beq.n	80051f4 <checkAktifCalisma+0x4b4>
 800512a:	4b76      	ldr	r3, [pc, #472]	; (8005304 <checkAktifCalisma+0x5c4>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	f083 0301 	eor.w	r3, r3, #1
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d05d      	beq.n	80051f4 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005138:	2104      	movs	r1, #4
 800513a:	4873      	ldr	r0, [pc, #460]	; (8005308 <checkAktifCalisma+0x5c8>)
 800513c:	f004 f8e6 	bl	800930c <HAL_GPIO_ReadPin>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <checkAktifCalisma+0x40e>
 8005146:	4b71      	ldr	r3, [pc, #452]	; (800530c <checkAktifCalisma+0x5cc>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d152      	bne.n	80051f4 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800514e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005152:	486a      	ldr	r0, [pc, #424]	; (80052fc <checkAktifCalisma+0x5bc>)
 8005154:	f004 f8da 	bl	800930c <HAL_GPIO_ReadPin>
 8005158:	4603      	mov	r3, r0
 800515a:	2b01      	cmp	r3, #1
 800515c:	d10e      	bne.n	800517c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800515e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005162:	4866      	ldr	r0, [pc, #408]	; (80052fc <checkAktifCalisma+0x5bc>)
 8005164:	f004 f8d2 	bl	800930c <HAL_GPIO_ReadPin>
 8005168:	4603      	mov	r3, r0
 800516a:	2b01      	cmp	r3, #1
 800516c:	d106      	bne.n	800517c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800516e:	2140      	movs	r1, #64	; 0x40
 8005170:	4865      	ldr	r0, [pc, #404]	; (8005308 <checkAktifCalisma+0x5c8>)
 8005172:	f004 f8cb 	bl	800930c <HAL_GPIO_ReadPin>
 8005176:	4603      	mov	r3, r0
 8005178:	2b01      	cmp	r3, #1
 800517a:	d003      	beq.n	8005184 <checkAktifCalisma+0x444>
 800517c:	4b64      	ldr	r3, [pc, #400]	; (8005310 <checkAktifCalisma+0x5d0>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d037      	beq.n	80051f4 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005184:	4b63      	ldr	r3, [pc, #396]	; (8005314 <checkAktifCalisma+0x5d4>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	f083 0301 	eor.w	r3, r3, #1
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d030      	beq.n	80051f4 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005192:	4b61      	ldr	r3, [pc, #388]	; (8005318 <checkAktifCalisma+0x5d8>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	f083 0301 	eor.w	r3, r3, #1
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d029      	beq.n	80051f4 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80051a0:	4b5e      	ldr	r3, [pc, #376]	; (800531c <checkAktifCalisma+0x5dc>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	f083 0301 	eor.w	r3, r3, #1
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d022      	beq.n	80051f4 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80051ae:	4b5c      	ldr	r3, [pc, #368]	; (8005320 <checkAktifCalisma+0x5e0>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	f083 0301 	eor.w	r3, r3, #1
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01b      	beq.n	80051f4 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80051bc:	4b59      	ldr	r3, [pc, #356]	; (8005324 <checkAktifCalisma+0x5e4>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	f083 0301 	eor.w	r3, r3, #1
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80051ca:	4b57      	ldr	r3, [pc, #348]	; (8005328 <checkAktifCalisma+0x5e8>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	f083 0301 	eor.w	r3, r3, #1
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00d      	beq.n	80051f4 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80051d8:	2201      	movs	r2, #1
 80051da:	2102      	movs	r1, #2
 80051dc:	4847      	ldr	r0, [pc, #284]	; (80052fc <checkAktifCalisma+0x5bc>)
 80051de:	f004 f8ac 	bl	800933a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80051e2:	4b4b      	ldr	r3, [pc, #300]	; (8005310 <checkAktifCalisma+0x5d0>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80051e8:	4b50      	ldr	r3, [pc, #320]	; (800532c <checkAktifCalisma+0x5ec>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80051ee:	4b50      	ldr	r3, [pc, #320]	; (8005330 <checkAktifCalisma+0x5f0>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80051f4:	4b46      	ldr	r3, [pc, #280]	; (8005310 <checkAktifCalisma+0x5d0>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d033      	beq.n	8005264 <checkAktifCalisma+0x524>
 80051fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005200:	483e      	ldr	r0, [pc, #248]	; (80052fc <checkAktifCalisma+0x5bc>)
 8005202:	f004 f883 	bl	800930c <HAL_GPIO_ReadPin>
 8005206:	4603      	mov	r3, r0
 8005208:	2b01      	cmp	r3, #1
 800520a:	d106      	bne.n	800521a <checkAktifCalisma+0x4da>
 800520c:	4b3c      	ldr	r3, [pc, #240]	; (8005300 <checkAktifCalisma+0x5c0>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	f083 0301 	eor.w	r3, r3, #1
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <checkAktifCalisma+0x4f0>
 800521a:	2104      	movs	r1, #4
 800521c:	483a      	ldr	r0, [pc, #232]	; (8005308 <checkAktifCalisma+0x5c8>)
 800521e:	f004 f875 	bl	800930c <HAL_GPIO_ReadPin>
 8005222:	4603      	mov	r3, r0
 8005224:	2b01      	cmp	r3, #1
 8005226:	d11d      	bne.n	8005264 <checkAktifCalisma+0x524>
 8005228:	4b38      	ldr	r3, [pc, #224]	; (800530c <checkAktifCalisma+0x5cc>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d019      	beq.n	8005264 <checkAktifCalisma+0x524>
 8005230:	4b30      	ldr	r3, [pc, #192]	; (80052f4 <checkAktifCalisma+0x5b4>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d015      	beq.n	8005264 <checkAktifCalisma+0x524>
 8005238:	4b2f      	ldr	r3, [pc, #188]	; (80052f8 <checkAktifCalisma+0x5b8>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d011      	beq.n	8005264 <checkAktifCalisma+0x524>
 8005240:	4b2a      	ldr	r3, [pc, #168]	; (80052ec <checkAktifCalisma+0x5ac>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00d      	beq.n	8005264 <checkAktifCalisma+0x524>
 8005248:	4b3a      	ldr	r3, [pc, #232]	; (8005334 <checkAktifCalisma+0x5f4>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f083 0301 	eor.w	r3, r3, #1
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d006      	beq.n	8005264 <checkAktifCalisma+0x524>
			timer2=millis;
 8005256:	4b38      	ldr	r3, [pc, #224]	; (8005338 <checkAktifCalisma+0x5f8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a38      	ldr	r2, [pc, #224]	; (800533c <checkAktifCalisma+0x5fc>)
 800525c:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800525e:	4b35      	ldr	r3, [pc, #212]	; (8005334 <checkAktifCalisma+0x5f4>)
 8005260:	2201      	movs	r2, #1
 8005262:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005264:	4b34      	ldr	r3, [pc, #208]	; (8005338 <checkAktifCalisma+0x5f8>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	4b34      	ldr	r3, [pc, #208]	; (800533c <checkAktifCalisma+0x5fc>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	4a34      	ldr	r2, [pc, #208]	; (8005340 <checkAktifCalisma+0x600>)
 8005270:	7812      	ldrb	r2, [r2, #0]
 8005272:	4293      	cmp	r3, r2
 8005274:	d303      	bcc.n	800527e <checkAktifCalisma+0x53e>
 8005276:	4b2f      	ldr	r3, [pc, #188]	; (8005334 <checkAktifCalisma+0x5f4>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d114      	bne.n	80052a8 <checkAktifCalisma+0x568>
 800527e:	4b1d      	ldr	r3, [pc, #116]	; (80052f4 <checkAktifCalisma+0x5b4>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	f083 0301 	eor.w	r3, r3, #1
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10d      	bne.n	80052a8 <checkAktifCalisma+0x568>
 800528c:	4b1a      	ldr	r3, [pc, #104]	; (80052f8 <checkAktifCalisma+0x5b8>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	f083 0301 	eor.w	r3, r3, #1
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <checkAktifCalisma+0x568>
 800529a:	4b14      	ldr	r3, [pc, #80]	; (80052ec <checkAktifCalisma+0x5ac>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	f083 0301 	eor.w	r3, r3, #1
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80052a8:	2200      	movs	r2, #0
 80052aa:	2102      	movs	r1, #2
 80052ac:	4813      	ldr	r0, [pc, #76]	; (80052fc <checkAktifCalisma+0x5bc>)
 80052ae:	f004 f844 	bl	800933a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80052b2:	4b17      	ldr	r3, [pc, #92]	; (8005310 <checkAktifCalisma+0x5d0>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80052b8:	4b1e      	ldr	r3, [pc, #120]	; (8005334 <checkAktifCalisma+0x5f4>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80052be:	4b14      	ldr	r3, [pc, #80]	; (8005310 <checkAktifCalisma+0x5d0>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d040      	beq.n	8005348 <checkAktifCalisma+0x608>
 80052c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052ca:	480f      	ldr	r0, [pc, #60]	; (8005308 <checkAktifCalisma+0x5c8>)
 80052cc:	f004 f81e 	bl	800930c <HAL_GPIO_ReadPin>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d138      	bne.n	8005348 <checkAktifCalisma+0x608>
 80052d6:	4b1b      	ldr	r3, [pc, #108]	; (8005344 <checkAktifCalisma+0x604>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d034      	beq.n	8005348 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80052de:	2201      	movs	r2, #1
 80052e0:	2101      	movs	r1, #1
 80052e2:	4806      	ldr	r0, [pc, #24]	; (80052fc <checkAktifCalisma+0x5bc>)
 80052e4:	f004 f829 	bl	800933a <HAL_GPIO_WritePin>
 80052e8:	e033      	b.n	8005352 <checkAktifCalisma+0x612>
 80052ea:	bf00      	nop
 80052ec:	2000027b 	.word	0x2000027b
 80052f0:	20000241 	.word	0x20000241
 80052f4:	20000276 	.word	0x20000276
 80052f8:	20000277 	.word	0x20000277
 80052fc:	40010c00 	.word	0x40010c00
 8005300:	20000261 	.word	0x20000261
 8005304:	20000275 	.word	0x20000275
 8005308:	40011000 	.word	0x40011000
 800530c:	2000022a 	.word	0x2000022a
 8005310:	2000025c 	.word	0x2000025c
 8005314:	20000259 	.word	0x20000259
 8005318:	2000025d 	.word	0x2000025d
 800531c:	2000025a 	.word	0x2000025a
 8005320:	2000025b 	.word	0x2000025b
 8005324:	2000025e 	.word	0x2000025e
 8005328:	2000025f 	.word	0x2000025f
 800532c:	20000264 	.word	0x20000264
 8005330:	20000285 	.word	0x20000285
 8005334:	20000254 	.word	0x20000254
 8005338:	20000200 	.word	0x20000200
 800533c:	2000020c 	.word	0x2000020c
 8005340:	20000239 	.word	0x20000239
 8005344:	20000229 	.word	0x20000229
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005348:	2200      	movs	r2, #0
 800534a:	2101      	movs	r1, #1
 800534c:	4836      	ldr	r0, [pc, #216]	; (8005428 <checkAktifCalisma+0x6e8>)
 800534e:	f003 fff4 	bl	800933a <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005352:	4b36      	ldr	r3, [pc, #216]	; (800542c <checkAktifCalisma+0x6ec>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	f040 8080 	bne.w	800545c <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800535c:	4b34      	ldr	r3, [pc, #208]	; (8005430 <checkAktifCalisma+0x6f0>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d003      	beq.n	800536c <checkAktifCalisma+0x62c>
 8005364:	4b32      	ldr	r3, [pc, #200]	; (8005430 <checkAktifCalisma+0x6f0>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b02      	cmp	r3, #2
 800536a:	d177      	bne.n	800545c <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 800536c:	4b31      	ldr	r3, [pc, #196]	; (8005434 <checkAktifCalisma+0x6f4>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d073      	beq.n	800545c <checkAktifCalisma+0x71c>
 8005374:	4b30      	ldr	r3, [pc, #192]	; (8005438 <checkAktifCalisma+0x6f8>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d06f      	beq.n	800545c <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 800537c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005380:	4829      	ldr	r0, [pc, #164]	; (8005428 <checkAktifCalisma+0x6e8>)
 8005382:	f003 ffc3 	bl	800930c <HAL_GPIO_ReadPin>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d167      	bne.n	800545c <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 800538c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005390:	482a      	ldr	r0, [pc, #168]	; (800543c <checkAktifCalisma+0x6fc>)
 8005392:	f003 ffbb 	bl	800930c <HAL_GPIO_ReadPin>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <checkAktifCalisma+0x664>
 800539c:	4b28      	ldr	r3, [pc, #160]	; (8005440 <checkAktifCalisma+0x700>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d15b      	bne.n	800545c <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80053a4:	2140      	movs	r1, #64	; 0x40
 80053a6:	4825      	ldr	r0, [pc, #148]	; (800543c <checkAktifCalisma+0x6fc>)
 80053a8:	f003 ffb0 	bl	800930c <HAL_GPIO_ReadPin>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d10f      	bne.n	80053d2 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80053b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053b6:	481c      	ldr	r0, [pc, #112]	; (8005428 <checkAktifCalisma+0x6e8>)
 80053b8:	f003 ffa8 	bl	800930c <HAL_GPIO_ReadPin>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d107      	bne.n	80053d2 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80053c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053c6:	4818      	ldr	r0, [pc, #96]	; (8005428 <checkAktifCalisma+0x6e8>)
 80053c8:	f003 ffa0 	bl	800930c <HAL_GPIO_ReadPin>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d003      	beq.n	80053da <checkAktifCalisma+0x69a>
 80053d2:	4b1c      	ldr	r3, [pc, #112]	; (8005444 <checkAktifCalisma+0x704>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d040      	beq.n	800545c <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80053da:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <checkAktifCalisma+0x708>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	f083 0301 	eor.w	r3, r3, #1
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d039      	beq.n	800545c <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80053e8:	4b18      	ldr	r3, [pc, #96]	; (800544c <checkAktifCalisma+0x70c>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	f083 0301 	eor.w	r3, r3, #1
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d032      	beq.n	800545c <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80053f6:	4b16      	ldr	r3, [pc, #88]	; (8005450 <checkAktifCalisma+0x710>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	f083 0301 	eor.w	r3, r3, #1
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d02b      	beq.n	800545c <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005404:	4b13      	ldr	r3, [pc, #76]	; (8005454 <checkAktifCalisma+0x714>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	f083 0301 	eor.w	r3, r3, #1
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d024      	beq.n	800545c <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005412:	4b11      	ldr	r3, [pc, #68]	; (8005458 <checkAktifCalisma+0x718>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	f083 0301 	eor.w	r3, r3, #1
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01d      	beq.n	800545c <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005420:	4b08      	ldr	r3, [pc, #32]	; (8005444 <checkAktifCalisma+0x704>)
 8005422:	2201      	movs	r2, #1
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	e01c      	b.n	8005462 <checkAktifCalisma+0x722>
 8005428:	40010c00 	.word	0x40010c00
 800542c:	20000241 	.word	0x20000241
 8005430:	20000233 	.word	0x20000233
 8005434:	20000276 	.word	0x20000276
 8005438:	20000277 	.word	0x20000277
 800543c:	40011000 	.word	0x40011000
 8005440:	20000234 	.word	0x20000234
 8005444:	2000025a 	.word	0x2000025a
 8005448:	20000259 	.word	0x20000259
 800544c:	2000025d 	.word	0x2000025d
 8005450:	2000025c 	.word	0x2000025c
 8005454:	2000025b 	.word	0x2000025b
 8005458:	2000025f 	.word	0x2000025f
		} else {
			devmotoryukaricalisiyor=0;
 800545c:	4b64      	ldr	r3, [pc, #400]	; (80055f0 <checkAktifCalisma+0x8b0>)
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005462:	4b63      	ldr	r3, [pc, #396]	; (80055f0 <checkAktifCalisma+0x8b0>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800546a:	2201      	movs	r2, #1
 800546c:	2120      	movs	r1, #32
 800546e:	4861      	ldr	r0, [pc, #388]	; (80055f4 <checkAktifCalisma+0x8b4>)
 8005470:	f003 ff63 	bl	800933a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005474:	4b60      	ldr	r3, [pc, #384]	; (80055f8 <checkAktifCalisma+0x8b8>)
 8005476:	2201      	movs	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800547a:	4b5f      	ldr	r3, [pc, #380]	; (80055f8 <checkAktifCalisma+0x8b8>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d025      	beq.n	80054ce <checkAktifCalisma+0x78e>
 8005482:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005486:	485d      	ldr	r0, [pc, #372]	; (80055fc <checkAktifCalisma+0x8bc>)
 8005488:	f003 ff40 	bl	800930c <HAL_GPIO_ReadPin>
 800548c:	4603      	mov	r3, r0
 800548e:	2b01      	cmp	r3, #1
 8005490:	d007      	beq.n	80054a2 <checkAktifCalisma+0x762>
 8005492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005496:	4857      	ldr	r0, [pc, #348]	; (80055f4 <checkAktifCalisma+0x8b4>)
 8005498:	f003 ff38 	bl	800930c <HAL_GPIO_ReadPin>
 800549c:	4603      	mov	r3, r0
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d115      	bne.n	80054ce <checkAktifCalisma+0x78e>
 80054a2:	4b57      	ldr	r3, [pc, #348]	; (8005600 <checkAktifCalisma+0x8c0>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d011      	beq.n	80054ce <checkAktifCalisma+0x78e>
 80054aa:	4b56      	ldr	r3, [pc, #344]	; (8005604 <checkAktifCalisma+0x8c4>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00d      	beq.n	80054ce <checkAktifCalisma+0x78e>
 80054b2:	4b55      	ldr	r3, [pc, #340]	; (8005608 <checkAktifCalisma+0x8c8>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	f083 0301 	eor.w	r3, r3, #1
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d006      	beq.n	80054ce <checkAktifCalisma+0x78e>
			timer2=millis;
 80054c0:	4b52      	ldr	r3, [pc, #328]	; (800560c <checkAktifCalisma+0x8cc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a52      	ldr	r2, [pc, #328]	; (8005610 <checkAktifCalisma+0x8d0>)
 80054c6:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80054c8:	4b4f      	ldr	r3, [pc, #316]	; (8005608 <checkAktifCalisma+0x8c8>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80054ce:	4b4f      	ldr	r3, [pc, #316]	; (800560c <checkAktifCalisma+0x8cc>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4b4f      	ldr	r3, [pc, #316]	; (8005610 <checkAktifCalisma+0x8d0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	4a4e      	ldr	r2, [pc, #312]	; (8005614 <checkAktifCalisma+0x8d4>)
 80054da:	7812      	ldrb	r2, [r2, #0]
 80054dc:	4293      	cmp	r3, r2
 80054de:	d303      	bcc.n	80054e8 <checkAktifCalisma+0x7a8>
 80054e0:	4b49      	ldr	r3, [pc, #292]	; (8005608 <checkAktifCalisma+0x8c8>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10d      	bne.n	8005504 <checkAktifCalisma+0x7c4>
 80054e8:	4b45      	ldr	r3, [pc, #276]	; (8005600 <checkAktifCalisma+0x8c0>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	f083 0301 	eor.w	r3, r3, #1
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <checkAktifCalisma+0x7c4>
 80054f6:	4b43      	ldr	r3, [pc, #268]	; (8005604 <checkAktifCalisma+0x8c4>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	f083 0301 	eor.w	r3, r3, #1
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005504:	2200      	movs	r2, #0
 8005506:	2120      	movs	r1, #32
 8005508:	483a      	ldr	r0, [pc, #232]	; (80055f4 <checkAktifCalisma+0x8b4>)
 800550a:	f003 ff16 	bl	800933a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800550e:	4b3a      	ldr	r3, [pc, #232]	; (80055f8 <checkAktifCalisma+0x8b8>)
 8005510:	2200      	movs	r2, #0
 8005512:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005514:	4b3c      	ldr	r3, [pc, #240]	; (8005608 <checkAktifCalisma+0x8c8>)
 8005516:	2200      	movs	r2, #0
 8005518:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800551a:	4b3f      	ldr	r3, [pc, #252]	; (8005618 <checkAktifCalisma+0x8d8>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	f040 8088 	bne.w	8005634 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005524:	4b3d      	ldr	r3, [pc, #244]	; (800561c <checkAktifCalisma+0x8dc>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d003      	beq.n	8005534 <checkAktifCalisma+0x7f4>
 800552c:	4b3b      	ldr	r3, [pc, #236]	; (800561c <checkAktifCalisma+0x8dc>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d17f      	bne.n	8005634 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005534:	4b32      	ldr	r3, [pc, #200]	; (8005600 <checkAktifCalisma+0x8c0>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d07b      	beq.n	8005634 <checkAktifCalisma+0x8f4>
 800553c:	4b31      	ldr	r3, [pc, #196]	; (8005604 <checkAktifCalisma+0x8c4>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d077      	beq.n	8005634 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005544:	2140      	movs	r1, #64	; 0x40
 8005546:	482b      	ldr	r0, [pc, #172]	; (80055f4 <checkAktifCalisma+0x8b4>)
 8005548:	f003 fee0 	bl	800930c <HAL_GPIO_ReadPin>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d170      	bne.n	8005634 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005552:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005556:	4827      	ldr	r0, [pc, #156]	; (80055f4 <checkAktifCalisma+0x8b4>)
 8005558:	f003 fed8 	bl	800930c <HAL_GPIO_ReadPin>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <checkAktifCalisma+0x82a>
 8005562:	4b2f      	ldr	r3, [pc, #188]	; (8005620 <checkAktifCalisma+0x8e0>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d164      	bne.n	8005634 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800556a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800556e:	4823      	ldr	r0, [pc, #140]	; (80055fc <checkAktifCalisma+0x8bc>)
 8005570:	f003 fecc 	bl	800930c <HAL_GPIO_ReadPin>
 8005574:	4603      	mov	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d10f      	bne.n	800559a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800557a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800557e:	481f      	ldr	r0, [pc, #124]	; (80055fc <checkAktifCalisma+0x8bc>)
 8005580:	f003 fec4 	bl	800930c <HAL_GPIO_ReadPin>
 8005584:	4603      	mov	r3, r0
 8005586:	2b01      	cmp	r3, #1
 8005588:	d107      	bne.n	800559a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800558a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800558e:	481b      	ldr	r0, [pc, #108]	; (80055fc <checkAktifCalisma+0x8bc>)
 8005590:	f003 febc 	bl	800930c <HAL_GPIO_ReadPin>
 8005594:	4603      	mov	r3, r0
 8005596:	2b01      	cmp	r3, #1
 8005598:	d003      	beq.n	80055a2 <checkAktifCalisma+0x862>
 800559a:	4b22      	ldr	r3, [pc, #136]	; (8005624 <checkAktifCalisma+0x8e4>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d048      	beq.n	8005634 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80055a2:	4b21      	ldr	r3, [pc, #132]	; (8005628 <checkAktifCalisma+0x8e8>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	f083 0301 	eor.w	r3, r3, #1
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d041      	beq.n	8005634 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80055b0:	4b1e      	ldr	r3, [pc, #120]	; (800562c <checkAktifCalisma+0x8ec>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	f083 0301 	eor.w	r3, r3, #1
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d03a      	beq.n	8005634 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80055be:	4b1c      	ldr	r3, [pc, #112]	; (8005630 <checkAktifCalisma+0x8f0>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	f083 0301 	eor.w	r3, r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d033      	beq.n	8005634 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80055cc:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <checkAktifCalisma+0x8b8>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	f083 0301 	eor.w	r3, r3, #1
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d02c      	beq.n	8005634 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80055da:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <checkAktifCalisma+0x8b0>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	f083 0301 	eor.w	r3, r3, #1
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d025      	beq.n	8005634 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80055e8:	4b0e      	ldr	r3, [pc, #56]	; (8005624 <checkAktifCalisma+0x8e4>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	e024      	b.n	800563a <checkAktifCalisma+0x8fa>
 80055f0:	2000025a 	.word	0x2000025a
 80055f4:	40011000 	.word	0x40011000
 80055f8:	2000025e 	.word	0x2000025e
 80055fc:	40010c00 	.word	0x40010c00
 8005600:	20000276 	.word	0x20000276
 8005604:	20000277 	.word	0x20000277
 8005608:	20000256 	.word	0x20000256
 800560c:	20000200 	.word	0x20000200
 8005610:	2000020c 	.word	0x2000020c
 8005614:	2000023a 	.word	0x2000023a
 8005618:	20000241 	.word	0x20000241
 800561c:	20000233 	.word	0x20000233
 8005620:	20000235 	.word	0x20000235
 8005624:	2000025b 	.word	0x2000025b
 8005628:	20000259 	.word	0x20000259
 800562c:	2000025d 	.word	0x2000025d
 8005630:	2000025c 	.word	0x2000025c
		} else {
			devmotorasagicalisiyor=0;
 8005634:	4b96      	ldr	r3, [pc, #600]	; (8005890 <checkAktifCalisma+0xb50>)
 8005636:	2200      	movs	r2, #0
 8005638:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800563a:	4b95      	ldr	r3, [pc, #596]	; (8005890 <checkAktifCalisma+0xb50>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d007      	beq.n	8005652 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005642:	2201      	movs	r2, #1
 8005644:	2110      	movs	r1, #16
 8005646:	4893      	ldr	r0, [pc, #588]	; (8005894 <checkAktifCalisma+0xb54>)
 8005648:	f003 fe77 	bl	800933a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 800564c:	4b92      	ldr	r3, [pc, #584]	; (8005898 <checkAktifCalisma+0xb58>)
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005652:	4b91      	ldr	r3, [pc, #580]	; (8005898 <checkAktifCalisma+0xb58>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d024      	beq.n	80056a4 <checkAktifCalisma+0x964>
 800565a:	2140      	movs	r1, #64	; 0x40
 800565c:	488d      	ldr	r0, [pc, #564]	; (8005894 <checkAktifCalisma+0xb54>)
 800565e:	f003 fe55 	bl	800930c <HAL_GPIO_ReadPin>
 8005662:	4603      	mov	r3, r0
 8005664:	2b01      	cmp	r3, #1
 8005666:	d007      	beq.n	8005678 <checkAktifCalisma+0x938>
 8005668:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800566c:	4889      	ldr	r0, [pc, #548]	; (8005894 <checkAktifCalisma+0xb54>)
 800566e:	f003 fe4d 	bl	800930c <HAL_GPIO_ReadPin>
 8005672:	4603      	mov	r3, r0
 8005674:	2b01      	cmp	r3, #1
 8005676:	d115      	bne.n	80056a4 <checkAktifCalisma+0x964>
 8005678:	4b88      	ldr	r3, [pc, #544]	; (800589c <checkAktifCalisma+0xb5c>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d011      	beq.n	80056a4 <checkAktifCalisma+0x964>
 8005680:	4b87      	ldr	r3, [pc, #540]	; (80058a0 <checkAktifCalisma+0xb60>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00d      	beq.n	80056a4 <checkAktifCalisma+0x964>
 8005688:	4b86      	ldr	r3, [pc, #536]	; (80058a4 <checkAktifCalisma+0xb64>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	f083 0301 	eor.w	r3, r3, #1
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d006      	beq.n	80056a4 <checkAktifCalisma+0x964>
			timer2=millis;
 8005696:	4b84      	ldr	r3, [pc, #528]	; (80058a8 <checkAktifCalisma+0xb68>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a84      	ldr	r2, [pc, #528]	; (80058ac <checkAktifCalisma+0xb6c>)
 800569c:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800569e:	4b81      	ldr	r3, [pc, #516]	; (80058a4 <checkAktifCalisma+0xb64>)
 80056a0:	2201      	movs	r2, #1
 80056a2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80056a4:	4b80      	ldr	r3, [pc, #512]	; (80058a8 <checkAktifCalisma+0xb68>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b80      	ldr	r3, [pc, #512]	; (80058ac <checkAktifCalisma+0xb6c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	4a80      	ldr	r2, [pc, #512]	; (80058b0 <checkAktifCalisma+0xb70>)
 80056b0:	7812      	ldrb	r2, [r2, #0]
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d303      	bcc.n	80056be <checkAktifCalisma+0x97e>
 80056b6:	4b7b      	ldr	r3, [pc, #492]	; (80058a4 <checkAktifCalisma+0xb64>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10d      	bne.n	80056da <checkAktifCalisma+0x99a>
 80056be:	4b77      	ldr	r3, [pc, #476]	; (800589c <checkAktifCalisma+0xb5c>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	f083 0301 	eor.w	r3, r3, #1
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <checkAktifCalisma+0x99a>
 80056cc:	4b74      	ldr	r3, [pc, #464]	; (80058a0 <checkAktifCalisma+0xb60>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	f083 0301 	eor.w	r3, r3, #1
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80056da:	2200      	movs	r2, #0
 80056dc:	2110      	movs	r1, #16
 80056de:	486d      	ldr	r0, [pc, #436]	; (8005894 <checkAktifCalisma+0xb54>)
 80056e0:	f003 fe2b 	bl	800933a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80056e4:	4b6c      	ldr	r3, [pc, #432]	; (8005898 <checkAktifCalisma+0xb58>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80056ea:	4b6e      	ldr	r3, [pc, #440]	; (80058a4 <checkAktifCalisma+0xb64>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80056f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056f4:	486f      	ldr	r0, [pc, #444]	; (80058b4 <checkAktifCalisma+0xb74>)
 80056f6:	f003 fe09 	bl	800930c <HAL_GPIO_ReadPin>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d120      	bne.n	8005742 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005704:	486b      	ldr	r0, [pc, #428]	; (80058b4 <checkAktifCalisma+0xb74>)
 8005706:	f003 fe01 	bl	800930c <HAL_GPIO_ReadPin>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d118      	bne.n	8005742 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005710:	2104      	movs	r1, #4
 8005712:	4868      	ldr	r0, [pc, #416]	; (80058b4 <checkAktifCalisma+0xb74>)
 8005714:	f003 fdfa 	bl	800930c <HAL_GPIO_ReadPin>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d111      	bne.n	8005742 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800571e:	2102      	movs	r1, #2
 8005720:	4864      	ldr	r0, [pc, #400]	; (80058b4 <checkAktifCalisma+0xb74>)
 8005722:	f003 fdf3 	bl	800930c <HAL_GPIO_ReadPin>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 800572c:	2101      	movs	r1, #1
 800572e:	4861      	ldr	r0, [pc, #388]	; (80058b4 <checkAktifCalisma+0xb74>)
 8005730:	f003 fdec 	bl	800930c <HAL_GPIO_ReadPin>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d103      	bne.n	8005742 <checkAktifCalisma+0xa02>
			makineStop=1;
 800573a:	4b5f      	ldr	r3, [pc, #380]	; (80058b8 <checkAktifCalisma+0xb78>)
 800573c:	2201      	movs	r2, #1
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	e002      	b.n	8005748 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8005742:	4b5d      	ldr	r3, [pc, #372]	; (80058b8 <checkAktifCalisma+0xb78>)
 8005744:	2200      	movs	r2, #0
 8005746:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005748:	4b5c      	ldr	r3, [pc, #368]	; (80058bc <checkAktifCalisma+0xb7c>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d144      	bne.n	80057da <checkAktifCalisma+0xa9a>
 8005750:	4b5b      	ldr	r3, [pc, #364]	; (80058c0 <checkAktifCalisma+0xb80>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d003      	beq.n	8005760 <checkAktifCalisma+0xa20>
 8005758:	4b59      	ldr	r3, [pc, #356]	; (80058c0 <checkAktifCalisma+0xb80>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b03      	cmp	r3, #3
 800575e:	d13c      	bne.n	80057da <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005760:	2180      	movs	r1, #128	; 0x80
 8005762:	484c      	ldr	r0, [pc, #304]	; (8005894 <checkAktifCalisma+0xb54>)
 8005764:	f003 fdd2 	bl	800930c <HAL_GPIO_ReadPin>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d103      	bne.n	8005776 <checkAktifCalisma+0xa36>
 800576e:	4b55      	ldr	r3, [pc, #340]	; (80058c4 <checkAktifCalisma+0xb84>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00b      	beq.n	800578e <checkAktifCalisma+0xa4e>
 8005776:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800577a:	484e      	ldr	r0, [pc, #312]	; (80058b4 <checkAktifCalisma+0xb74>)
 800577c:	f003 fdc6 	bl	800930c <HAL_GPIO_ReadPin>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d129      	bne.n	80057da <checkAktifCalisma+0xa9a>
 8005786:	4b4f      	ldr	r3, [pc, #316]	; (80058c4 <checkAktifCalisma+0xb84>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d125      	bne.n	80057da <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800578e:	2104      	movs	r1, #4
 8005790:	4840      	ldr	r0, [pc, #256]	; (8005894 <checkAktifCalisma+0xb54>)
 8005792:	f003 fdbb 	bl	800930c <HAL_GPIO_ReadPin>
 8005796:	4603      	mov	r3, r0
 8005798:	2b01      	cmp	r3, #1
 800579a:	d003      	beq.n	80057a4 <checkAktifCalisma+0xa64>
 800579c:	4b4a      	ldr	r3, [pc, #296]	; (80058c8 <checkAktifCalisma+0xb88>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d11a      	bne.n	80057da <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80057a4:	2102      	movs	r1, #2
 80057a6:	483b      	ldr	r0, [pc, #236]	; (8005894 <checkAktifCalisma+0xb54>)
 80057a8:	f003 fdb0 	bl	800930c <HAL_GPIO_ReadPin>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d113      	bne.n	80057da <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80057b2:	4b46      	ldr	r3, [pc, #280]	; (80058cc <checkAktifCalisma+0xb8c>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	f083 0301 	eor.w	r3, r3, #1
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00c      	beq.n	80057da <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80057c0:	4b3d      	ldr	r3, [pc, #244]	; (80058b8 <checkAktifCalisma+0xb78>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80057c8:	4b41      	ldr	r3, [pc, #260]	; (80058d0 <checkAktifCalisma+0xb90>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80057ce:	4b36      	ldr	r3, [pc, #216]	; (80058a8 <checkAktifCalisma+0xb68>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a40      	ldr	r2, [pc, #256]	; (80058d4 <checkAktifCalisma+0xb94>)
 80057d4:	6013      	str	r3, [r2, #0]
			bekle();
 80057d6:	f7ff f935 	bl	8004a44 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80057da:	4b33      	ldr	r3, [pc, #204]	; (80058a8 <checkAktifCalisma+0xb68>)
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	4b3d      	ldr	r3, [pc, #244]	; (80058d4 <checkAktifCalisma+0xb94>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	4a3c      	ldr	r2, [pc, #240]	; (80058d8 <checkAktifCalisma+0xb98>)
 80057e6:	7812      	ldrb	r2, [r2, #0]
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d211      	bcs.n	8005810 <checkAktifCalisma+0xad0>
 80057ec:	2104      	movs	r1, #4
 80057ee:	4829      	ldr	r0, [pc, #164]	; (8005894 <checkAktifCalisma+0xb54>)
 80057f0:	f003 fd8c 	bl	800930c <HAL_GPIO_ReadPin>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <checkAktifCalisma+0xad0>
 80057fa:	4b33      	ldr	r3, [pc, #204]	; (80058c8 <checkAktifCalisma+0xb88>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d006      	beq.n	8005810 <checkAktifCalisma+0xad0>
 8005802:	4b2d      	ldr	r3, [pc, #180]	; (80058b8 <checkAktifCalisma+0xb78>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	f083 0301 	eor.w	r3, r3, #1
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005810:	4b2f      	ldr	r3, [pc, #188]	; (80058d0 <checkAktifCalisma+0xb90>)
 8005812:	2200      	movs	r2, #0
 8005814:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005816:	4b29      	ldr	r3, [pc, #164]	; (80058bc <checkAktifCalisma+0xb7c>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d160      	bne.n	80058e0 <checkAktifCalisma+0xba0>
 800581e:	4b28      	ldr	r3, [pc, #160]	; (80058c0 <checkAktifCalisma+0xb80>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d003      	beq.n	800582e <checkAktifCalisma+0xaee>
 8005826:	4b26      	ldr	r3, [pc, #152]	; (80058c0 <checkAktifCalisma+0xb80>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b03      	cmp	r3, #3
 800582c:	d158      	bne.n	80058e0 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800582e:	2104      	movs	r1, #4
 8005830:	4818      	ldr	r0, [pc, #96]	; (8005894 <checkAktifCalisma+0xb54>)
 8005832:	f003 fd6b 	bl	800930c <HAL_GPIO_ReadPin>
 8005836:	4603      	mov	r3, r0
 8005838:	2b01      	cmp	r3, #1
 800583a:	d003      	beq.n	8005844 <checkAktifCalisma+0xb04>
 800583c:	4b22      	ldr	r3, [pc, #136]	; (80058c8 <checkAktifCalisma+0xb88>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d14d      	bne.n	80058e0 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005844:	2102      	movs	r1, #2
 8005846:	4813      	ldr	r0, [pc, #76]	; (8005894 <checkAktifCalisma+0xb54>)
 8005848:	f003 fd60 	bl	800930c <HAL_GPIO_ReadPin>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d146      	bne.n	80058e0 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005852:	2180      	movs	r1, #128	; 0x80
 8005854:	480f      	ldr	r0, [pc, #60]	; (8005894 <checkAktifCalisma+0xb54>)
 8005856:	f003 fd59 	bl	800930c <HAL_GPIO_ReadPin>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d103      	bne.n	8005868 <checkAktifCalisma+0xb28>
 8005860:	4b18      	ldr	r3, [pc, #96]	; (80058c4 <checkAktifCalisma+0xb84>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00b      	beq.n	8005880 <checkAktifCalisma+0xb40>
 8005868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800586c:	4811      	ldr	r0, [pc, #68]	; (80058b4 <checkAktifCalisma+0xb74>)
 800586e:	f003 fd4d 	bl	800930c <HAL_GPIO_ReadPin>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d133      	bne.n	80058e0 <checkAktifCalisma+0xba0>
 8005878:	4b12      	ldr	r3, [pc, #72]	; (80058c4 <checkAktifCalisma+0xb84>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d12f      	bne.n	80058e0 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005880:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <checkAktifCalisma+0xb78>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d02b      	beq.n	80058e0 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005888:	4b14      	ldr	r3, [pc, #80]	; (80058dc <checkAktifCalisma+0xb9c>)
 800588a:	2201      	movs	r2, #1
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	e02a      	b.n	80058e6 <checkAktifCalisma+0xba6>
 8005890:	2000025b 	.word	0x2000025b
 8005894:	40011000 	.word	0x40011000
 8005898:	2000025f 	.word	0x2000025f
 800589c:	20000276 	.word	0x20000276
 80058a0:	20000277 	.word	0x20000277
 80058a4:	20000257 	.word	0x20000257
 80058a8:	20000200 	.word	0x20000200
 80058ac:	2000020c 	.word	0x2000020c
 80058b0:	2000023a 	.word	0x2000023a
 80058b4:	40010c00 	.word	0x40010c00
 80058b8:	20000266 	.word	0x20000266
 80058bc:	2000022d 	.word	0x2000022d
 80058c0:	2000022c 	.word	0x2000022c
 80058c4:	20000230 	.word	0x20000230
 80058c8:	2000022a 	.word	0x2000022a
 80058cc:	20000253 	.word	0x20000253
 80058d0:	20000267 	.word	0x20000267
 80058d4:	20000204 	.word	0x20000204
 80058d8:	2000023d 	.word	0x2000023d
 80058dc:	20000268 	.word	0x20000268
		} else {
			kapi1butonkontrol=0;
 80058e0:	4b8b      	ldr	r3, [pc, #556]	; (8005b10 <checkAktifCalisma+0xdd0>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058e6:	4b8b      	ldr	r3, [pc, #556]	; (8005b14 <checkAktifCalisma+0xdd4>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d121      	bne.n	8005932 <checkAktifCalisma+0xbf2>
 80058ee:	4b8a      	ldr	r3, [pc, #552]	; (8005b18 <checkAktifCalisma+0xdd8>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d003      	beq.n	80058fe <checkAktifCalisma+0xbbe>
 80058f6:	4b88      	ldr	r3, [pc, #544]	; (8005b18 <checkAktifCalisma+0xdd8>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d119      	bne.n	8005932 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80058fe:	2104      	movs	r1, #4
 8005900:	4886      	ldr	r0, [pc, #536]	; (8005b1c <checkAktifCalisma+0xddc>)
 8005902:	f003 fd03 	bl	800930c <HAL_GPIO_ReadPin>
 8005906:	4603      	mov	r3, r0
 8005908:	2b01      	cmp	r3, #1
 800590a:	d003      	beq.n	8005914 <checkAktifCalisma+0xbd4>
 800590c:	4b84      	ldr	r3, [pc, #528]	; (8005b20 <checkAktifCalisma+0xde0>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10e      	bne.n	8005932 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005914:	2102      	movs	r1, #2
 8005916:	4881      	ldr	r0, [pc, #516]	; (8005b1c <checkAktifCalisma+0xddc>)
 8005918:	f003 fcf8 	bl	800930c <HAL_GPIO_ReadPin>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d107      	bne.n	8005932 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005922:	4b80      	ldr	r3, [pc, #512]	; (8005b24 <checkAktifCalisma+0xde4>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800592a:	4b7f      	ldr	r3, [pc, #508]	; (8005b28 <checkAktifCalisma+0xde8>)
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	e002      	b.n	8005938 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005932:	4b7d      	ldr	r3, [pc, #500]	; (8005b28 <checkAktifCalisma+0xde8>)
 8005934:	2200      	movs	r2, #0
 8005936:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005938:	4b75      	ldr	r3, [pc, #468]	; (8005b10 <checkAktifCalisma+0xdd0>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d107      	bne.n	8005950 <checkAktifCalisma+0xc10>
 8005940:	4b79      	ldr	r3, [pc, #484]	; (8005b28 <checkAktifCalisma+0xde8>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <checkAktifCalisma+0xc10>
 8005948:	4b78      	ldr	r3, [pc, #480]	; (8005b2c <checkAktifCalisma+0xdec>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005950:	2201      	movs	r2, #1
 8005952:	2180      	movs	r1, #128	; 0x80
 8005954:	4876      	ldr	r0, [pc, #472]	; (8005b30 <checkAktifCalisma+0xdf0>)
 8005956:	f003 fcf0 	bl	800933a <HAL_GPIO_WritePin>
 800595a:	e004      	b.n	8005966 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800595c:	2200      	movs	r2, #0
 800595e:	2180      	movs	r1, #128	; 0x80
 8005960:	4873      	ldr	r0, [pc, #460]	; (8005b30 <checkAktifCalisma+0xdf0>)
 8005962:	f003 fcea 	bl	800933a <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005966:	4b73      	ldr	r3, [pc, #460]	; (8005b34 <checkAktifCalisma+0xdf4>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d141      	bne.n	80059f2 <checkAktifCalisma+0xcb2>
 800596e:	4b6a      	ldr	r3, [pc, #424]	; (8005b18 <checkAktifCalisma+0xdd8>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d003      	beq.n	800597e <checkAktifCalisma+0xc3e>
 8005976:	4b68      	ldr	r3, [pc, #416]	; (8005b18 <checkAktifCalisma+0xdd8>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b03      	cmp	r3, #3
 800597c:	d139      	bne.n	80059f2 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800597e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005982:	4866      	ldr	r0, [pc, #408]	; (8005b1c <checkAktifCalisma+0xddc>)
 8005984:	f003 fcc2 	bl	800930c <HAL_GPIO_ReadPin>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d103      	bne.n	8005996 <checkAktifCalisma+0xc56>
 800598e:	4b6a      	ldr	r3, [pc, #424]	; (8005b38 <checkAktifCalisma+0xdf8>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00b      	beq.n	80059ae <checkAktifCalisma+0xc6e>
 8005996:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800599a:	4868      	ldr	r0, [pc, #416]	; (8005b3c <checkAktifCalisma+0xdfc>)
 800599c:	f003 fcb6 	bl	800930c <HAL_GPIO_ReadPin>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d125      	bne.n	80059f2 <checkAktifCalisma+0xcb2>
 80059a6:	4b64      	ldr	r3, [pc, #400]	; (8005b38 <checkAktifCalisma+0xdf8>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d121      	bne.n	80059f2 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80059ae:	2102      	movs	r1, #2
 80059b0:	485a      	ldr	r0, [pc, #360]	; (8005b1c <checkAktifCalisma+0xddc>)
 80059b2:	f003 fcab 	bl	800930c <HAL_GPIO_ReadPin>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d11a      	bne.n	80059f2 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80059bc:	2104      	movs	r1, #4
 80059be:	4857      	ldr	r0, [pc, #348]	; (8005b1c <checkAktifCalisma+0xddc>)
 80059c0:	f003 fca4 	bl	800930c <HAL_GPIO_ReadPin>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d113      	bne.n	80059f2 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80059ca:	4b56      	ldr	r3, [pc, #344]	; (8005b24 <checkAktifCalisma+0xde4>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00f      	beq.n	80059f2 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80059d2:	4b5b      	ldr	r3, [pc, #364]	; (8005b40 <checkAktifCalisma+0xe00>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	f083 0301 	eor.w	r3, r3, #1
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d008      	beq.n	80059f2 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80059e0:	4b58      	ldr	r3, [pc, #352]	; (8005b44 <checkAktifCalisma+0xe04>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80059e6:	4b58      	ldr	r3, [pc, #352]	; (8005b48 <checkAktifCalisma+0xe08>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a58      	ldr	r2, [pc, #352]	; (8005b4c <checkAktifCalisma+0xe0c>)
 80059ec:	6013      	str	r3, [r2, #0]
			bekle();
 80059ee:	f7ff f829 	bl	8004a44 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80059f2:	4b55      	ldr	r3, [pc, #340]	; (8005b48 <checkAktifCalisma+0xe08>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	4b55      	ldr	r3, [pc, #340]	; (8005b4c <checkAktifCalisma+0xe0c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	4a54      	ldr	r2, [pc, #336]	; (8005b50 <checkAktifCalisma+0xe10>)
 80059fe:	7812      	ldrb	r2, [r2, #0]
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d20d      	bcs.n	8005a20 <checkAktifCalisma+0xce0>
 8005a04:	2102      	movs	r1, #2
 8005a06:	4845      	ldr	r0, [pc, #276]	; (8005b1c <checkAktifCalisma+0xddc>)
 8005a08:	f003 fc80 	bl	800930c <HAL_GPIO_ReadPin>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d006      	beq.n	8005a20 <checkAktifCalisma+0xce0>
 8005a12:	4b44      	ldr	r3, [pc, #272]	; (8005b24 <checkAktifCalisma+0xde4>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	f083 0301 	eor.w	r3, r3, #1
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005a20:	4b48      	ldr	r3, [pc, #288]	; (8005b44 <checkAktifCalisma+0xe04>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a26:	4b43      	ldr	r3, [pc, #268]	; (8005b34 <checkAktifCalisma+0xdf4>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d135      	bne.n	8005a9a <checkAktifCalisma+0xd5a>
 8005a2e:	4b3a      	ldr	r3, [pc, #232]	; (8005b18 <checkAktifCalisma+0xdd8>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d003      	beq.n	8005a3e <checkAktifCalisma+0xcfe>
 8005a36:	4b38      	ldr	r3, [pc, #224]	; (8005b18 <checkAktifCalisma+0xdd8>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d12d      	bne.n	8005a9a <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a42:	4836      	ldr	r0, [pc, #216]	; (8005b1c <checkAktifCalisma+0xddc>)
 8005a44:	f003 fc62 	bl	800930c <HAL_GPIO_ReadPin>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <checkAktifCalisma+0xd16>
 8005a4e:	4b3a      	ldr	r3, [pc, #232]	; (8005b38 <checkAktifCalisma+0xdf8>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00b      	beq.n	8005a6e <checkAktifCalisma+0xd2e>
 8005a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a5a:	4838      	ldr	r0, [pc, #224]	; (8005b3c <checkAktifCalisma+0xdfc>)
 8005a5c:	f003 fc56 	bl	800930c <HAL_GPIO_ReadPin>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d119      	bne.n	8005a9a <checkAktifCalisma+0xd5a>
 8005a66:	4b34      	ldr	r3, [pc, #208]	; (8005b38 <checkAktifCalisma+0xdf8>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d115      	bne.n	8005a9a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a6e:	2102      	movs	r1, #2
 8005a70:	482a      	ldr	r0, [pc, #168]	; (8005b1c <checkAktifCalisma+0xddc>)
 8005a72:	f003 fc4b 	bl	800930c <HAL_GPIO_ReadPin>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d10e      	bne.n	8005a9a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a7c:	2104      	movs	r1, #4
 8005a7e:	4827      	ldr	r0, [pc, #156]	; (8005b1c <checkAktifCalisma+0xddc>)
 8005a80:	f003 fc44 	bl	800930c <HAL_GPIO_ReadPin>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d107      	bne.n	8005a9a <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005a8a:	4b26      	ldr	r3, [pc, #152]	; (8005b24 <checkAktifCalisma+0xde4>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005a92:	4b30      	ldr	r3, [pc, #192]	; (8005b54 <checkAktifCalisma+0xe14>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	e002      	b.n	8005aa0 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005a9a:	4b2e      	ldr	r3, [pc, #184]	; (8005b54 <checkAktifCalisma+0xe14>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005aa0:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <checkAktifCalisma+0xdf4>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d11d      	bne.n	8005ae4 <checkAktifCalisma+0xda4>
 8005aa8:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <checkAktifCalisma+0xdd8>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d003      	beq.n	8005ab8 <checkAktifCalisma+0xd78>
 8005ab0:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <checkAktifCalisma+0xdd8>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d115      	bne.n	8005ae4 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ab8:	2102      	movs	r1, #2
 8005aba:	4818      	ldr	r0, [pc, #96]	; (8005b1c <checkAktifCalisma+0xddc>)
 8005abc:	f003 fc26 	bl	800930c <HAL_GPIO_ReadPin>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d10e      	bne.n	8005ae4 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005ac6:	2104      	movs	r1, #4
 8005ac8:	4814      	ldr	r0, [pc, #80]	; (8005b1c <checkAktifCalisma+0xddc>)
 8005aca:	f003 fc1f 	bl	800930c <HAL_GPIO_ReadPin>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d107      	bne.n	8005ae4 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005ad4:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <checkAktifCalisma+0xde4>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005adc:	4b1e      	ldr	r3, [pc, #120]	; (8005b58 <checkAktifCalisma+0xe18>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	e002      	b.n	8005aea <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005ae4:	4b1c      	ldr	r3, [pc, #112]	; (8005b58 <checkAktifCalisma+0xe18>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005aea:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <checkAktifCalisma+0xe14>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d107      	bne.n	8005b02 <checkAktifCalisma+0xdc2>
 8005af2:	4b19      	ldr	r3, [pc, #100]	; (8005b58 <checkAktifCalisma+0xe18>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d103      	bne.n	8005b02 <checkAktifCalisma+0xdc2>
 8005afa:	4b12      	ldr	r3, [pc, #72]	; (8005b44 <checkAktifCalisma+0xe04>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d02c      	beq.n	8005b5c <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005b02:	2201      	movs	r2, #1
 8005b04:	2140      	movs	r1, #64	; 0x40
 8005b06:	480a      	ldr	r0, [pc, #40]	; (8005b30 <checkAktifCalisma+0xdf0>)
 8005b08:	f003 fc17 	bl	800933a <HAL_GPIO_WritePin>
 8005b0c:	e02b      	b.n	8005b66 <checkAktifCalisma+0xe26>
 8005b0e:	bf00      	nop
 8005b10:	20000268 	.word	0x20000268
 8005b14:	2000022d 	.word	0x2000022d
 8005b18:	2000022c 	.word	0x2000022c
 8005b1c:	40011000 	.word	0x40011000
 8005b20:	2000022a 	.word	0x2000022a
 8005b24:	20000266 	.word	0x20000266
 8005b28:	20000269 	.word	0x20000269
 8005b2c:	20000267 	.word	0x20000267
 8005b30:	40010800 	.word	0x40010800
 8005b34:	2000022e 	.word	0x2000022e
 8005b38:	20000230 	.word	0x20000230
 8005b3c:	40010c00 	.word	0x40010c00
 8005b40:	20000253 	.word	0x20000253
 8005b44:	2000026a 	.word	0x2000026a
 8005b48:	20000200 	.word	0x20000200
 8005b4c:	20000204 	.word	0x20000204
 8005b50:	2000023e 	.word	0x2000023e
 8005b54:	2000026b 	.word	0x2000026b
 8005b58:	2000026c 	.word	0x2000026c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2140      	movs	r1, #64	; 0x40
 8005b60:	488d      	ldr	r0, [pc, #564]	; (8005d98 <checkAktifCalisma+0x1058>)
 8005b62:	f003 fbea 	bl	800933a <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005b66:	4b8d      	ldr	r3, [pc, #564]	; (8005d9c <checkAktifCalisma+0x105c>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <checkAktifCalisma+0xe36>
 8005b6e:	4b8b      	ldr	r3, [pc, #556]	; (8005d9c <checkAktifCalisma+0x105c>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d115      	bne.n	8005ba2 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005b76:	2104      	movs	r1, #4
 8005b78:	4889      	ldr	r0, [pc, #548]	; (8005da0 <checkAktifCalisma+0x1060>)
 8005b7a:	f003 fbc7 	bl	800930c <HAL_GPIO_ReadPin>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d003      	beq.n	8005b8c <checkAktifCalisma+0xe4c>
 8005b84:	4b87      	ldr	r3, [pc, #540]	; (8005da4 <checkAktifCalisma+0x1064>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005b8c:	2102      	movs	r1, #2
 8005b8e:	4884      	ldr	r0, [pc, #528]	; (8005da0 <checkAktifCalisma+0x1060>)
 8005b90:	f003 fbbc 	bl	800930c <HAL_GPIO_ReadPin>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005b9a:	4b83      	ldr	r3, [pc, #524]	; (8005da8 <checkAktifCalisma+0x1068>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	e002      	b.n	8005ba8 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005ba2:	4b81      	ldr	r3, [pc, #516]	; (8005da8 <checkAktifCalisma+0x1068>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005ba8:	4b7c      	ldr	r3, [pc, #496]	; (8005d9c <checkAktifCalisma+0x105c>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d003      	beq.n	8005bb8 <checkAktifCalisma+0xe78>
 8005bb0:	4b7a      	ldr	r3, [pc, #488]	; (8005d9c <checkAktifCalisma+0x105c>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d111      	bne.n	8005bdc <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005bb8:	2102      	movs	r1, #2
 8005bba:	4879      	ldr	r0, [pc, #484]	; (8005da0 <checkAktifCalisma+0x1060>)
 8005bbc:	f003 fba6 	bl	800930c <HAL_GPIO_ReadPin>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d10a      	bne.n	8005bdc <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005bc6:	2104      	movs	r1, #4
 8005bc8:	4875      	ldr	r0, [pc, #468]	; (8005da0 <checkAktifCalisma+0x1060>)
 8005bca:	f003 fb9f 	bl	800930c <HAL_GPIO_ReadPin>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d103      	bne.n	8005bdc <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005bd4:	4b75      	ldr	r3, [pc, #468]	; (8005dac <checkAktifCalisma+0x106c>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	701a      	strb	r2, [r3, #0]
 8005bda:	e002      	b.n	8005be2 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005bdc:	4b73      	ldr	r3, [pc, #460]	; (8005dac <checkAktifCalisma+0x106c>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005be2:	4b71      	ldr	r3, [pc, #452]	; (8005da8 <checkAktifCalisma+0x1068>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00f      	beq.n	8005c0a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005bea:	4b71      	ldr	r3, [pc, #452]	; (8005db0 <checkAktifCalisma+0x1070>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d10b      	bne.n	8005c0a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bf6:	486f      	ldr	r0, [pc, #444]	; (8005db4 <checkAktifCalisma+0x1074>)
 8005bf8:	f003 fb88 	bl	800930c <HAL_GPIO_ReadPin>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d103      	bne.n	8005c0a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005c02:	4b6d      	ldr	r3, [pc, #436]	; (8005db8 <checkAktifCalisma+0x1078>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	e002      	b.n	8005c10 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005c0a:	4b6b      	ldr	r3, [pc, #428]	; (8005db8 <checkAktifCalisma+0x1078>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005c10:	4b66      	ldr	r3, [pc, #408]	; (8005dac <checkAktifCalisma+0x106c>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00f      	beq.n	8005c38 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005c18:	4b65      	ldr	r3, [pc, #404]	; (8005db0 <checkAktifCalisma+0x1070>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d10b      	bne.n	8005c38 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c24:	4863      	ldr	r0, [pc, #396]	; (8005db4 <checkAktifCalisma+0x1074>)
 8005c26:	f003 fb71 	bl	800930c <HAL_GPIO_ReadPin>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d103      	bne.n	8005c38 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005c30:	4b62      	ldr	r3, [pc, #392]	; (8005dbc <checkAktifCalisma+0x107c>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	e002      	b.n	8005c3e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005c38:	4b60      	ldr	r3, [pc, #384]	; (8005dbc <checkAktifCalisma+0x107c>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c3e:	4b60      	ldr	r3, [pc, #384]	; (8005dc0 <checkAktifCalisma+0x1080>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d137      	bne.n	8005cb6 <checkAktifCalisma+0xf76>
 8005c46:	4b5f      	ldr	r3, [pc, #380]	; (8005dc4 <checkAktifCalisma+0x1084>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d003      	beq.n	8005c56 <checkAktifCalisma+0xf16>
 8005c4e:	4b5d      	ldr	r3, [pc, #372]	; (8005dc4 <checkAktifCalisma+0x1084>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d12f      	bne.n	8005cb6 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c56:	4b54      	ldr	r3, [pc, #336]	; (8005da8 <checkAktifCalisma+0x1068>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <checkAktifCalisma+0xf26>
 8005c5e:	4b53      	ldr	r3, [pc, #332]	; (8005dac <checkAktifCalisma+0x106c>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d027      	beq.n	8005cb6 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005c66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c6a:	484d      	ldr	r0, [pc, #308]	; (8005da0 <checkAktifCalisma+0x1060>)
 8005c6c:	f003 fb4e 	bl	800930c <HAL_GPIO_ReadPin>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d103      	bne.n	8005c7e <checkAktifCalisma+0xf3e>
 8005c76:	4b4e      	ldr	r3, [pc, #312]	; (8005db0 <checkAktifCalisma+0x1070>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d007      	beq.n	8005c8e <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005c7e:	4b4e      	ldr	r3, [pc, #312]	; (8005db8 <checkAktifCalisma+0x1078>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d103      	bne.n	8005c8e <checkAktifCalisma+0xf4e>
 8005c86:	4b4d      	ldr	r3, [pc, #308]	; (8005dbc <checkAktifCalisma+0x107c>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d013      	beq.n	8005cb6 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005c8e:	4b4e      	ldr	r3, [pc, #312]	; (8005dc8 <checkAktifCalisma+0x1088>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00f      	beq.n	8005cb6 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005c96:	4b4d      	ldr	r3, [pc, #308]	; (8005dcc <checkAktifCalisma+0x108c>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	f083 0301 	eor.w	r3, r3, #1
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005ca4:	4b4a      	ldr	r3, [pc, #296]	; (8005dd0 <checkAktifCalisma+0x1090>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005caa:	4b4a      	ldr	r3, [pc, #296]	; (8005dd4 <checkAktifCalisma+0x1094>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a4a      	ldr	r2, [pc, #296]	; (8005dd8 <checkAktifCalisma+0x1098>)
 8005cb0:	6013      	str	r3, [r2, #0]
			bekle();
 8005cb2:	f7fe fec7 	bl	8004a44 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005cb6:	4b47      	ldr	r3, [pc, #284]	; (8005dd4 <checkAktifCalisma+0x1094>)
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	4b47      	ldr	r3, [pc, #284]	; (8005dd8 <checkAktifCalisma+0x1098>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	4a46      	ldr	r2, [pc, #280]	; (8005ddc <checkAktifCalisma+0x109c>)
 8005cc2:	7812      	ldrb	r2, [r2, #0]
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d214      	bcs.n	8005cf2 <checkAktifCalisma+0xfb2>
 8005cc8:	4b37      	ldr	r3, [pc, #220]	; (8005da8 <checkAktifCalisma+0x1068>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	f083 0301 	eor.w	r3, r3, #1
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d006      	beq.n	8005ce4 <checkAktifCalisma+0xfa4>
 8005cd6:	4b35      	ldr	r3, [pc, #212]	; (8005dac <checkAktifCalisma+0x106c>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	f083 0301 	eor.w	r3, r3, #1
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d106      	bne.n	8005cf2 <checkAktifCalisma+0xfb2>
 8005ce4:	4b38      	ldr	r3, [pc, #224]	; (8005dc8 <checkAktifCalisma+0x1088>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	f083 0301 	eor.w	r3, r3, #1
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005cf2:	4b37      	ldr	r3, [pc, #220]	; (8005dd0 <checkAktifCalisma+0x1090>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005cf8:	4b31      	ldr	r3, [pc, #196]	; (8005dc0 <checkAktifCalisma+0x1080>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d12b      	bne.n	8005d58 <checkAktifCalisma+0x1018>
 8005d00:	4b30      	ldr	r3, [pc, #192]	; (8005dc4 <checkAktifCalisma+0x1084>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d003      	beq.n	8005d10 <checkAktifCalisma+0xfd0>
 8005d08:	4b2e      	ldr	r3, [pc, #184]	; (8005dc4 <checkAktifCalisma+0x1084>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d123      	bne.n	8005d58 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d10:	4b25      	ldr	r3, [pc, #148]	; (8005da8 <checkAktifCalisma+0x1068>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d103      	bne.n	8005d20 <checkAktifCalisma+0xfe0>
 8005d18:	4b24      	ldr	r3, [pc, #144]	; (8005dac <checkAktifCalisma+0x106c>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01b      	beq.n	8005d58 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d24:	481e      	ldr	r0, [pc, #120]	; (8005da0 <checkAktifCalisma+0x1060>)
 8005d26:	f003 faf1 	bl	800930c <HAL_GPIO_ReadPin>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d103      	bne.n	8005d38 <checkAktifCalisma+0xff8>
 8005d30:	4b1f      	ldr	r3, [pc, #124]	; (8005db0 <checkAktifCalisma+0x1070>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d38:	4b1f      	ldr	r3, [pc, #124]	; (8005db8 <checkAktifCalisma+0x1078>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <checkAktifCalisma+0x1008>
 8005d40:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <checkAktifCalisma+0x107c>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d007      	beq.n	8005d58 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005d48:	4b1f      	ldr	r3, [pc, #124]	; (8005dc8 <checkAktifCalisma+0x1088>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005d50:	4b23      	ldr	r3, [pc, #140]	; (8005de0 <checkAktifCalisma+0x10a0>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	e002      	b.n	8005d5e <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005d58:	4b21      	ldr	r3, [pc, #132]	; (8005de0 <checkAktifCalisma+0x10a0>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d5e:	4b18      	ldr	r3, [pc, #96]	; (8005dc0 <checkAktifCalisma+0x1080>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d140      	bne.n	8005de8 <checkAktifCalisma+0x10a8>
 8005d66:	4b17      	ldr	r3, [pc, #92]	; (8005dc4 <checkAktifCalisma+0x1084>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d003      	beq.n	8005d76 <checkAktifCalisma+0x1036>
 8005d6e:	4b15      	ldr	r3, [pc, #84]	; (8005dc4 <checkAktifCalisma+0x1084>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d138      	bne.n	8005de8 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d76:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <checkAktifCalisma+0x1068>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <checkAktifCalisma+0x1046>
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <checkAktifCalisma+0x106c>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d030      	beq.n	8005de8 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005d86:	4b10      	ldr	r3, [pc, #64]	; (8005dc8 <checkAktifCalisma+0x1088>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d02c      	beq.n	8005de8 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005d8e:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <checkAktifCalisma+0x10a4>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	e02b      	b.n	8005dee <checkAktifCalisma+0x10ae>
 8005d96:	bf00      	nop
 8005d98:	40010800 	.word	0x40010800
 8005d9c:	20000231 	.word	0x20000231
 8005da0:	40011000 	.word	0x40011000
 8005da4:	2000022a 	.word	0x2000022a
 8005da8:	20000270 	.word	0x20000270
 8005dac:	20000271 	.word	0x20000271
 8005db0:	20000230 	.word	0x20000230
 8005db4:	40010c00 	.word	0x40010c00
 8005db8:	20000280 	.word	0x20000280
 8005dbc:	20000281 	.word	0x20000281
 8005dc0:	2000022f 	.word	0x2000022f
 8005dc4:	2000022c 	.word	0x2000022c
 8005dc8:	20000266 	.word	0x20000266
 8005dcc:	20000253 	.word	0x20000253
 8005dd0:	2000026d 	.word	0x2000026d
 8005dd4:	20000200 	.word	0x20000200
 8005dd8:	20000204 	.word	0x20000204
 8005ddc:	2000023f 	.word	0x2000023f
 8005de0:	2000026e 	.word	0x2000026e
 8005de4:	2000026f 	.word	0x2000026f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005de8:	4b8b      	ldr	r3, [pc, #556]	; (8006018 <checkAktifCalisma+0x12d8>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005dee:	4b8b      	ldr	r3, [pc, #556]	; (800601c <checkAktifCalisma+0x12dc>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d107      	bne.n	8005e06 <checkAktifCalisma+0x10c6>
 8005df6:	4b8a      	ldr	r3, [pc, #552]	; (8006020 <checkAktifCalisma+0x12e0>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d103      	bne.n	8005e06 <checkAktifCalisma+0x10c6>
 8005dfe:	4b86      	ldr	r3, [pc, #536]	; (8006018 <checkAktifCalisma+0x12d8>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005e06:	2201      	movs	r2, #1
 8005e08:	2120      	movs	r1, #32
 8005e0a:	4886      	ldr	r0, [pc, #536]	; (8006024 <checkAktifCalisma+0x12e4>)
 8005e0c:	f003 fa95 	bl	800933a <HAL_GPIO_WritePin>
 8005e10:	e004      	b.n	8005e1c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005e12:	2200      	movs	r2, #0
 8005e14:	2120      	movs	r1, #32
 8005e16:	4883      	ldr	r0, [pc, #524]	; (8006024 <checkAktifCalisma+0x12e4>)
 8005e18:	f003 fa8f 	bl	800933a <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005e1c:	4b82      	ldr	r3, [pc, #520]	; (8006028 <checkAktifCalisma+0x12e8>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00e      	beq.n	8005e42 <checkAktifCalisma+0x1102>
 8005e24:	2102      	movs	r1, #2
 8005e26:	4881      	ldr	r0, [pc, #516]	; (800602c <checkAktifCalisma+0x12ec>)
 8005e28:	f003 fa70 	bl	800930c <HAL_GPIO_ReadPin>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d107      	bne.n	8005e42 <checkAktifCalisma+0x1102>
 8005e32:	4b7f      	ldr	r3, [pc, #508]	; (8006030 <checkAktifCalisma+0x12f0>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d103      	bne.n	8005e42 <checkAktifCalisma+0x1102>
 8005e3a:	4b7e      	ldr	r3, [pc, #504]	; (8006034 <checkAktifCalisma+0x12f4>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d112      	bne.n	8005e68 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005e42:	4b7d      	ldr	r3, [pc, #500]	; (8006038 <checkAktifCalisma+0x12f8>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d066      	beq.n	8005f18 <checkAktifCalisma+0x11d8>
 8005e4a:	2104      	movs	r1, #4
 8005e4c:	4877      	ldr	r0, [pc, #476]	; (800602c <checkAktifCalisma+0x12ec>)
 8005e4e:	f003 fa5d 	bl	800930c <HAL_GPIO_ReadPin>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d15f      	bne.n	8005f18 <checkAktifCalisma+0x11d8>
 8005e58:	4b75      	ldr	r3, [pc, #468]	; (8006030 <checkAktifCalisma+0x12f0>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d05b      	beq.n	8005f18 <checkAktifCalisma+0x11d8>
 8005e60:	4b74      	ldr	r3, [pc, #464]	; (8006034 <checkAktifCalisma+0x12f4>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d057      	beq.n	8005f18 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005e68:	4b74      	ldr	r3, [pc, #464]	; (800603c <checkAktifCalisma+0x12fc>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	4b72      	ldr	r3, [pc, #456]	; (800603c <checkAktifCalisma+0x12fc>)
 8005e72:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005e74:	4b71      	ldr	r3, [pc, #452]	; (800603c <checkAktifCalisma+0x12fc>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b09      	cmp	r3, #9
 8005e7a:	d908      	bls.n	8005e8e <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005e7c:	4b6f      	ldr	r3, [pc, #444]	; (800603c <checkAktifCalisma+0x12fc>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005e82:	4b6f      	ldr	r3, [pc, #444]	; (8006040 <checkAktifCalisma+0x1300>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	3301      	adds	r3, #1
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	4b6d      	ldr	r3, [pc, #436]	; (8006040 <checkAktifCalisma+0x1300>)
 8005e8c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005e8e:	4b6c      	ldr	r3, [pc, #432]	; (8006040 <checkAktifCalisma+0x1300>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b09      	cmp	r3, #9
 8005e94:	d908      	bls.n	8005ea8 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005e96:	4b6a      	ldr	r3, [pc, #424]	; (8006040 <checkAktifCalisma+0x1300>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005e9c:	4b69      	ldr	r3, [pc, #420]	; (8006044 <checkAktifCalisma+0x1304>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	4b67      	ldr	r3, [pc, #412]	; (8006044 <checkAktifCalisma+0x1304>)
 8005ea6:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005ea8:	4b66      	ldr	r3, [pc, #408]	; (8006044 <checkAktifCalisma+0x1304>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b09      	cmp	r3, #9
 8005eae:	d908      	bls.n	8005ec2 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005eb0:	4b64      	ldr	r3, [pc, #400]	; (8006044 <checkAktifCalisma+0x1304>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005eb6:	4b64      	ldr	r3, [pc, #400]	; (8006048 <checkAktifCalisma+0x1308>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	4b62      	ldr	r3, [pc, #392]	; (8006048 <checkAktifCalisma+0x1308>)
 8005ec0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005ec2:	4b61      	ldr	r3, [pc, #388]	; (8006048 <checkAktifCalisma+0x1308>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b09      	cmp	r3, #9
 8005ec8:	d908      	bls.n	8005edc <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005eca:	4b5f      	ldr	r3, [pc, #380]	; (8006048 <checkAktifCalisma+0x1308>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005ed0:	4b5e      	ldr	r3, [pc, #376]	; (800604c <checkAktifCalisma+0x130c>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	4b5c      	ldr	r3, [pc, #368]	; (800604c <checkAktifCalisma+0x130c>)
 8005eda:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005edc:	4b5b      	ldr	r3, [pc, #364]	; (800604c <checkAktifCalisma+0x130c>)
 8005ede:	781a      	ldrb	r2, [r3, #0]
 8005ee0:	4b5b      	ldr	r3, [pc, #364]	; (8006050 <checkAktifCalisma+0x1310>)
 8005ee2:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005ee6:	4b58      	ldr	r3, [pc, #352]	; (8006048 <checkAktifCalisma+0x1308>)
 8005ee8:	781a      	ldrb	r2, [r3, #0]
 8005eea:	4b59      	ldr	r3, [pc, #356]	; (8006050 <checkAktifCalisma+0x1310>)
 8005eec:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005eee:	4b55      	ldr	r3, [pc, #340]	; (8006044 <checkAktifCalisma+0x1304>)
 8005ef0:	781a      	ldrb	r2, [r3, #0]
 8005ef2:	4b57      	ldr	r3, [pc, #348]	; (8006050 <checkAktifCalisma+0x1310>)
 8005ef4:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005ef6:	4b52      	ldr	r3, [pc, #328]	; (8006040 <checkAktifCalisma+0x1300>)
 8005ef8:	781a      	ldrb	r2, [r3, #0]
 8005efa:	4b55      	ldr	r3, [pc, #340]	; (8006050 <checkAktifCalisma+0x1310>)
 8005efc:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005efe:	4b4f      	ldr	r3, [pc, #316]	; (800603c <checkAktifCalisma+0x12fc>)
 8005f00:	781a      	ldrb	r2, [r3, #0]
 8005f02:	4b53      	ldr	r3, [pc, #332]	; (8006050 <checkAktifCalisma+0x1310>)
 8005f04:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005f06:	4b53      	ldr	r3, [pc, #332]	; (8006054 <checkAktifCalisma+0x1314>)
 8005f08:	2201      	movs	r2, #1
 8005f0a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005f0c:	4b46      	ldr	r3, [pc, #280]	; (8006028 <checkAktifCalisma+0x12e8>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005f12:	4b49      	ldr	r3, [pc, #292]	; (8006038 <checkAktifCalisma+0x12f8>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f1c:	484e      	ldr	r0, [pc, #312]	; (8006058 <checkAktifCalisma+0x1318>)
 8005f1e:	f003 f9f5 	bl	800930c <HAL_GPIO_ReadPin>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d016      	beq.n	8005f56 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005f28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f2c:	484a      	ldr	r0, [pc, #296]	; (8006058 <checkAktifCalisma+0x1318>)
 8005f2e:	f003 f9ed 	bl	800930c <HAL_GPIO_ReadPin>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00e      	beq.n	8005f56 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f3c:	4846      	ldr	r0, [pc, #280]	; (8006058 <checkAktifCalisma+0x1318>)
 8005f3e:	f003 f9e5 	bl	800930c <HAL_GPIO_ReadPin>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d006      	beq.n	8005f56 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005f48:	2140      	movs	r1, #64	; 0x40
 8005f4a:	4838      	ldr	r0, [pc, #224]	; (800602c <checkAktifCalisma+0x12ec>)
 8005f4c:	f003 f9de 	bl	800930c <HAL_GPIO_ReadPin>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d103      	bne.n	8005f5e <checkAktifCalisma+0x121e>
			startBasili=1;
 8005f56:	4b41      	ldr	r3, [pc, #260]	; (800605c <checkAktifCalisma+0x131c>)
 8005f58:	2201      	movs	r2, #1
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	e002      	b.n	8005f64 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005f5e:	4b3f      	ldr	r3, [pc, #252]	; (800605c <checkAktifCalisma+0x131c>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005f64:	4b3d      	ldr	r3, [pc, #244]	; (800605c <checkAktifCalisma+0x131c>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d016      	beq.n	8005f9a <checkAktifCalisma+0x125a>
 8005f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f70:	4839      	ldr	r0, [pc, #228]	; (8006058 <checkAktifCalisma+0x1318>)
 8005f72:	f003 f9cb 	bl	800930c <HAL_GPIO_ReadPin>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d10e      	bne.n	8005f9a <checkAktifCalisma+0x125a>
			hataVar=1;
 8005f7c:	4b38      	ldr	r3, [pc, #224]	; (8006060 <checkAktifCalisma+0x1320>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005f82:	2001      	movs	r0, #1
 8005f84:	f7fa fd7c 	bl	8000a80 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005f88:	2001      	movs	r0, #1
 8005f8a:	f7fa fd1f 	bl	80009cc <hata2EEPROM>
			convertAndSendData();
 8005f8e:	f001 fc7d 	bl	800788c <convertAndSendData>
			acilstophatasi=1;
 8005f92:	4b34      	ldr	r3, [pc, #208]	; (8006064 <checkAktifCalisma+0x1324>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	e018      	b.n	8005fcc <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005f9a:	4b32      	ldr	r3, [pc, #200]	; (8006064 <checkAktifCalisma+0x1324>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d014      	beq.n	8005fcc <checkAktifCalisma+0x128c>
 8005fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fa6:	482c      	ldr	r0, [pc, #176]	; (8006058 <checkAktifCalisma+0x1318>)
 8005fa8:	f003 f9b0 	bl	800930c <HAL_GPIO_ReadPin>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10c      	bne.n	8005fcc <checkAktifCalisma+0x128c>
 8005fb2:	4b2a      	ldr	r3, [pc, #168]	; (800605c <checkAktifCalisma+0x131c>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	f083 0301 	eor.w	r3, r3, #1
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005fc0:	4b28      	ldr	r3, [pc, #160]	; (8006064 <checkAktifCalisma+0x1324>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005fc6:	2001      	movs	r0, #1
 8005fc8:	f7fe fce8 	bl	800499c <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005fcc:	4b26      	ldr	r3, [pc, #152]	; (8006068 <checkAktifCalisma+0x1328>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	f083 0301 	eor.w	r3, r3, #1
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d04e      	beq.n	8006078 <checkAktifCalisma+0x1338>
 8005fda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fde:	481e      	ldr	r0, [pc, #120]	; (8006058 <checkAktifCalisma+0x1318>)
 8005fe0:	f003 f994 	bl	800930c <HAL_GPIO_ReadPin>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <checkAktifCalisma+0x12b2>
 8005fea:	4b20      	ldr	r3, [pc, #128]	; (800606c <checkAktifCalisma+0x132c>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d042      	beq.n	8006078 <checkAktifCalisma+0x1338>
 8005ff2:	4b1f      	ldr	r3, [pc, #124]	; (8006070 <checkAktifCalisma+0x1330>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d13e      	bne.n	8006078 <checkAktifCalisma+0x1338>
			hataVar=1;
 8005ffa:	4b19      	ldr	r3, [pc, #100]	; (8006060 <checkAktifCalisma+0x1320>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006000:	2002      	movs	r0, #2
 8006002:	f7fa fd3d 	bl	8000a80 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006006:	2002      	movs	r0, #2
 8006008:	f7fa fce0 	bl	80009cc <hata2EEPROM>
			convertAndSendData();
 800600c:	f001 fc3e 	bl	800788c <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006010:	4b18      	ldr	r3, [pc, #96]	; (8006074 <checkAktifCalisma+0x1334>)
 8006012:	2201      	movs	r2, #1
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e047      	b.n	80060a8 <checkAktifCalisma+0x1368>
 8006018:	2000026f 	.word	0x2000026f
 800601c:	2000026e 	.word	0x2000026e
 8006020:	2000026d 	.word	0x2000026d
 8006024:	40010800 	.word	0x40010800
 8006028:	20000263 	.word	0x20000263
 800602c:	40011000 	.word	0x40011000
 8006030:	2000022a 	.word	0x2000022a
 8006034:	20000266 	.word	0x20000266
 8006038:	20000264 	.word	0x20000264
 800603c:	20000221 	.word	0x20000221
 8006040:	20000222 	.word	0x20000222
 8006044:	20000008 	.word	0x20000008
 8006048:	20000009 	.word	0x20000009
 800604c:	20000223 	.word	0x20000223
 8006050:	20000128 	.word	0x20000128
 8006054:	20000250 	.word	0x20000250
 8006058:	40010c00 	.word	0x40010c00
 800605c:	20000272 	.word	0x20000272
 8006060:	20000279 	.word	0x20000279
 8006064:	20000274 	.word	0x20000274
 8006068:	2000027b 	.word	0x2000027b
 800606c:	20000285 	.word	0x20000285
 8006070:	20000228 	.word	0x20000228
 8006074:	20000275 	.word	0x20000275
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006078:	4b9b      	ldr	r3, [pc, #620]	; (80062e8 <checkAktifCalisma+0x15a8>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d013      	beq.n	80060a8 <checkAktifCalisma+0x1368>
 8006080:	4b9a      	ldr	r3, [pc, #616]	; (80062ec <checkAktifCalisma+0x15ac>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00f      	beq.n	80060a8 <checkAktifCalisma+0x1368>
 8006088:	4b99      	ldr	r3, [pc, #612]	; (80062f0 <checkAktifCalisma+0x15b0>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	f083 0301 	eor.w	r3, r3, #1
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d008      	beq.n	80060a8 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8006096:	4b94      	ldr	r3, [pc, #592]	; (80062e8 <checkAktifCalisma+0x15a8>)
 8006098:	2200      	movs	r2, #0
 800609a:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 800609c:	4b95      	ldr	r3, [pc, #596]	; (80062f4 <checkAktifCalisma+0x15b4>)
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80060a2:	2002      	movs	r0, #2
 80060a4:	f7fe fc7a 	bl	800499c <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80060a8:	4b93      	ldr	r3, [pc, #588]	; (80062f8 <checkAktifCalisma+0x15b8>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d11e      	bne.n	80060ee <checkAktifCalisma+0x13ae>
 80060b0:	4b92      	ldr	r3, [pc, #584]	; (80062fc <checkAktifCalisma+0x15bc>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d11a      	bne.n	80060ee <checkAktifCalisma+0x13ae>
 80060b8:	4b91      	ldr	r3, [pc, #580]	; (8006300 <checkAktifCalisma+0x15c0>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d016      	beq.n	80060ee <checkAktifCalisma+0x13ae>
 80060c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060c4:	488f      	ldr	r0, [pc, #572]	; (8006304 <checkAktifCalisma+0x15c4>)
 80060c6:	f003 f921 	bl	800930c <HAL_GPIO_ReadPin>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d10e      	bne.n	80060ee <checkAktifCalisma+0x13ae>
			hataVar=1;
 80060d0:	4b8d      	ldr	r3, [pc, #564]	; (8006308 <checkAktifCalisma+0x15c8>)
 80060d2:	2201      	movs	r2, #1
 80060d4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80060d6:	2003      	movs	r0, #3
 80060d8:	f7fa fcd2 	bl	8000a80 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80060dc:	2003      	movs	r0, #3
 80060de:	f7fa fc75 	bl	80009cc <hata2EEPROM>
			convertAndSendData();
 80060e2:	f001 fbd3 	bl	800788c <convertAndSendData>
			basinchatasi=1;
 80060e6:	4b89      	ldr	r3, [pc, #548]	; (800630c <checkAktifCalisma+0x15cc>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	e015      	b.n	800611a <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80060ee:	4b87      	ldr	r3, [pc, #540]	; (800630c <checkAktifCalisma+0x15cc>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d011      	beq.n	800611a <checkAktifCalisma+0x13da>
 80060f6:	4b80      	ldr	r3, [pc, #512]	; (80062f8 <checkAktifCalisma+0x15b8>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d10d      	bne.n	800611a <checkAktifCalisma+0x13da>
 80060fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006102:	4883      	ldr	r0, [pc, #524]	; (8006310 <checkAktifCalisma+0x15d0>)
 8006104:	f003 f902 	bl	800930c <HAL_GPIO_ReadPin>
 8006108:	4603      	mov	r3, r0
 800610a:	2b01      	cmp	r3, #1
 800610c:	d105      	bne.n	800611a <checkAktifCalisma+0x13da>
			basinchatasi=0;
 800610e:	4b7f      	ldr	r3, [pc, #508]	; (800630c <checkAktifCalisma+0x15cc>)
 8006110:	2200      	movs	r2, #0
 8006112:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006114:	2003      	movs	r0, #3
 8006116:	f7fe fc41 	bl	800499c <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800611a:	4b7e      	ldr	r3, [pc, #504]	; (8006314 <checkAktifCalisma+0x15d4>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d103      	bne.n	800612a <checkAktifCalisma+0x13ea>
 8006122:	4b7d      	ldr	r3, [pc, #500]	; (8006318 <checkAktifCalisma+0x15d8>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d01e      	beq.n	8006168 <checkAktifCalisma+0x1428>
 800612a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800612e:	487b      	ldr	r0, [pc, #492]	; (800631c <checkAktifCalisma+0x15dc>)
 8006130:	f003 f8ec 	bl	800930c <HAL_GPIO_ReadPin>
 8006134:	4603      	mov	r3, r0
 8006136:	2b01      	cmp	r3, #1
 8006138:	d116      	bne.n	8006168 <checkAktifCalisma+0x1428>
 800613a:	4b79      	ldr	r3, [pc, #484]	; (8006320 <checkAktifCalisma+0x15e0>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d003      	beq.n	800614a <checkAktifCalisma+0x140a>
 8006142:	4b77      	ldr	r3, [pc, #476]	; (8006320 <checkAktifCalisma+0x15e0>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b03      	cmp	r3, #3
 8006148:	d10e      	bne.n	8006168 <checkAktifCalisma+0x1428>
			hataVar=1;
 800614a:	4b6f      	ldr	r3, [pc, #444]	; (8006308 <checkAktifCalisma+0x15c8>)
 800614c:	2201      	movs	r2, #1
 800614e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006150:	2004      	movs	r0, #4
 8006152:	f7fa fc95 	bl	8000a80 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006156:	2004      	movs	r0, #4
 8006158:	f7fa fc38 	bl	80009cc <hata2EEPROM>
			convertAndSendData();
 800615c:	f001 fb96 	bl	800788c <convertAndSendData>
			katkapisivicihatasi=1;
 8006160:	4b70      	ldr	r3, [pc, #448]	; (8006324 <checkAktifCalisma+0x15e4>)
 8006162:	2201      	movs	r2, #1
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	e01f      	b.n	80061a8 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006168:	4b6e      	ldr	r3, [pc, #440]	; (8006324 <checkAktifCalisma+0x15e4>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01b      	beq.n	80061a8 <checkAktifCalisma+0x1468>
 8006170:	4b6d      	ldr	r3, [pc, #436]	; (8006328 <checkAktifCalisma+0x15e8>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d017      	beq.n	80061a8 <checkAktifCalisma+0x1468>
 8006178:	4b66      	ldr	r3, [pc, #408]	; (8006314 <checkAktifCalisma+0x15d4>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	f083 0301 	eor.w	r3, r3, #1
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d010      	beq.n	80061a8 <checkAktifCalisma+0x1468>
 8006186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800618a:	4864      	ldr	r0, [pc, #400]	; (800631c <checkAktifCalisma+0x15dc>)
 800618c:	f003 f8be 	bl	800930c <HAL_GPIO_ReadPin>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d108      	bne.n	80061a8 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8006196:	4b63      	ldr	r3, [pc, #396]	; (8006324 <checkAktifCalisma+0x15e4>)
 8006198:	2200      	movs	r2, #0
 800619a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 800619c:	4b5e      	ldr	r3, [pc, #376]	; (8006318 <checkAktifCalisma+0x15d8>)
 800619e:	2200      	movs	r2, #0
 80061a0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80061a2:	2004      	movs	r0, #4
 80061a4:	f7fe fbfa 	bl	800499c <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80061a8:	4b5a      	ldr	r3, [pc, #360]	; (8006314 <checkAktifCalisma+0x15d4>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d103      	bne.n	80061b8 <checkAktifCalisma+0x1478>
 80061b0:	4b5e      	ldr	r3, [pc, #376]	; (800632c <checkAktifCalisma+0x15ec>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01e      	beq.n	80061f6 <checkAktifCalisma+0x14b6>
 80061b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061bc:	4857      	ldr	r0, [pc, #348]	; (800631c <checkAktifCalisma+0x15dc>)
 80061be:	f003 f8a5 	bl	800930c <HAL_GPIO_ReadPin>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d116      	bne.n	80061f6 <checkAktifCalisma+0x14b6>
 80061c8:	4b55      	ldr	r3, [pc, #340]	; (8006320 <checkAktifCalisma+0x15e0>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d003      	beq.n	80061d8 <checkAktifCalisma+0x1498>
 80061d0:	4b53      	ldr	r3, [pc, #332]	; (8006320 <checkAktifCalisma+0x15e0>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d10e      	bne.n	80061f6 <checkAktifCalisma+0x14b6>
			hataVar=1;
 80061d8:	4b4b      	ldr	r3, [pc, #300]	; (8006308 <checkAktifCalisma+0x15c8>)
 80061da:	2201      	movs	r2, #1
 80061dc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80061de:	2005      	movs	r0, #5
 80061e0:	f7fa fc4e 	bl	8000a80 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80061e4:	2005      	movs	r0, #5
 80061e6:	f7fa fbf1 	bl	80009cc <hata2EEPROM>
			convertAndSendData();
 80061ea:	f001 fb4f 	bl	800788c <convertAndSendData>
			tablakapisivicihatasi=1;
 80061ee:	4b50      	ldr	r3, [pc, #320]	; (8006330 <checkAktifCalisma+0x15f0>)
 80061f0:	2201      	movs	r2, #1
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	e023      	b.n	800623e <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80061f6:	4b4e      	ldr	r3, [pc, #312]	; (8006330 <checkAktifCalisma+0x15f0>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d01f      	beq.n	800623e <checkAktifCalisma+0x14fe>
 80061fe:	4b4a      	ldr	r3, [pc, #296]	; (8006328 <checkAktifCalisma+0x15e8>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01b      	beq.n	800623e <checkAktifCalisma+0x14fe>
 8006206:	4b43      	ldr	r3, [pc, #268]	; (8006314 <checkAktifCalisma+0x15d4>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	f083 0301 	eor.w	r3, r3, #1
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d014      	beq.n	800623e <checkAktifCalisma+0x14fe>
 8006214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006218:	4840      	ldr	r0, [pc, #256]	; (800631c <checkAktifCalisma+0x15dc>)
 800621a:	f003 f877 	bl	800930c <HAL_GPIO_ReadPin>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10c      	bne.n	800623e <checkAktifCalisma+0x14fe>
 8006224:	4b40      	ldr	r3, [pc, #256]	; (8006328 <checkAktifCalisma+0x15e8>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 800622c:	4b40      	ldr	r3, [pc, #256]	; (8006330 <checkAktifCalisma+0x15f0>)
 800622e:	2200      	movs	r2, #0
 8006230:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006232:	4b3e      	ldr	r3, [pc, #248]	; (800632c <checkAktifCalisma+0x15ec>)
 8006234:	2200      	movs	r2, #0
 8006236:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006238:	2005      	movs	r0, #5
 800623a:	f7fe fbaf 	bl	800499c <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800623e:	4b30      	ldr	r3, [pc, #192]	; (8006300 <checkAktifCalisma+0x15c0>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d107      	bne.n	8006256 <checkAktifCalisma+0x1516>
 8006246:	4b2a      	ldr	r3, [pc, #168]	; (80062f0 <checkAktifCalisma+0x15b0>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d103      	bne.n	8006256 <checkAktifCalisma+0x1516>
 800624e:	4b39      	ldr	r3, [pc, #228]	; (8006334 <checkAktifCalisma+0x15f4>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d016      	beq.n	8006284 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8006256:	4b38      	ldr	r3, [pc, #224]	; (8006338 <checkAktifCalisma+0x15f8>)
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	4b38      	ldr	r3, [pc, #224]	; (800633c <checkAktifCalisma+0x15fc>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	4a37      	ldr	r2, [pc, #220]	; (8006340 <checkAktifCalisma+0x1600>)
 8006262:	7812      	ldrb	r2, [r2, #0]
 8006264:	4293      	cmp	r3, r2
 8006266:	d30d      	bcc.n	8006284 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006268:	4b27      	ldr	r3, [pc, #156]	; (8006308 <checkAktifCalisma+0x15c8>)
 800626a:	2201      	movs	r2, #1
 800626c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800626e:	2006      	movs	r0, #6
 8006270:	f7fa fc06 	bl	8000a80 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006274:	2006      	movs	r0, #6
 8006276:	f7fa fba9 	bl	80009cc <hata2EEPROM>
			  	convertAndSendData();
 800627a:	f001 fb07 	bl	800788c <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800627e:	4b31      	ldr	r3, [pc, #196]	; (8006344 <checkAktifCalisma+0x1604>)
 8006280:	2201      	movs	r2, #1
 8006282:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006284:	4b2f      	ldr	r3, [pc, #188]	; (8006344 <checkAktifCalisma+0x1604>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d013      	beq.n	80062b4 <checkAktifCalisma+0x1574>
 800628c:	2108      	movs	r1, #8
 800628e:	4823      	ldr	r0, [pc, #140]	; (800631c <checkAktifCalisma+0x15dc>)
 8006290:	f003 f83c 	bl	800930c <HAL_GPIO_ReadPin>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00c      	beq.n	80062b4 <checkAktifCalisma+0x1574>
 800629a:	4b1e      	ldr	r3, [pc, #120]	; (8006314 <checkAktifCalisma+0x15d4>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	f083 0301 	eor.w	r3, r3, #1
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80062a8:	4b26      	ldr	r3, [pc, #152]	; (8006344 <checkAktifCalisma+0x1604>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80062ae:	2006      	movs	r0, #6
 80062b0:	f7fe fb74 	bl	800499c <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80062b4:	4b24      	ldr	r3, [pc, #144]	; (8006348 <checkAktifCalisma+0x1608>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10b      	bne.n	80062d4 <checkAktifCalisma+0x1594>
 80062bc:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <checkAktifCalisma+0x15b0>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d107      	bne.n	80062d4 <checkAktifCalisma+0x1594>
 80062c4:	4b21      	ldr	r3, [pc, #132]	; (800634c <checkAktifCalisma+0x160c>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d103      	bne.n	80062d4 <checkAktifCalisma+0x1594>
 80062cc:	4b19      	ldr	r3, [pc, #100]	; (8006334 <checkAktifCalisma+0x15f4>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d03f      	beq.n	8006354 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80062d4:	4b1e      	ldr	r3, [pc, #120]	; (8006350 <checkAktifCalisma+0x1610>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80062da:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <checkAktifCalisma+0x15d8>)
 80062dc:	2201      	movs	r2, #1
 80062de:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80062e0:	4b12      	ldr	r3, [pc, #72]	; (800632c <checkAktifCalisma+0x15ec>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	e03c      	b.n	8006362 <checkAktifCalisma+0x1622>
 80062e8:	20000275 	.word	0x20000275
 80062ec:	2000027b 	.word	0x2000027b
 80062f0:	2000025c 	.word	0x2000025c
 80062f4:	20000285 	.word	0x20000285
 80062f8:	20000227 	.word	0x20000227
 80062fc:	2000022b 	.word	0x2000022b
 8006300:	20000278 	.word	0x20000278
 8006304:	40011000 	.word	0x40011000
 8006308:	20000279 	.word	0x20000279
 800630c:	20000282 	.word	0x20000282
 8006310:	40010c00 	.word	0x40010c00
 8006314:	20000272 	.word	0x20000272
 8006318:	20000286 	.word	0x20000286
 800631c:	40010800 	.word	0x40010800
 8006320:	2000022c 	.word	0x2000022c
 8006324:	20000283 	.word	0x20000283
 8006328:	20000266 	.word	0x20000266
 800632c:	20000287 	.word	0x20000287
 8006330:	20000284 	.word	0x20000284
 8006334:	2000025b 	.word	0x2000025b
 8006338:	20000200 	.word	0x20000200
 800633c:	20000214 	.word	0x20000214
 8006340:	2000023c 	.word	0x2000023c
 8006344:	20000273 	.word	0x20000273
 8006348:	20000259 	.word	0x20000259
 800634c:	2000025a 	.word	0x2000025a
 8006350:	2000027a 	.word	0x2000027a
		} else {
			makineCalisiyor=1;
 8006354:	4b1e      	ldr	r3, [pc, #120]	; (80063d0 <checkAktifCalisma+0x1690>)
 8006356:	2201      	movs	r2, #1
 8006358:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800635a:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <checkAktifCalisma+0x1694>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1e      	ldr	r2, [pc, #120]	; (80063d8 <checkAktifCalisma+0x1698>)
 8006360:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006362:	4b1e      	ldr	r3, [pc, #120]	; (80063dc <checkAktifCalisma+0x169c>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d02f      	beq.n	80063ca <checkAktifCalisma+0x168a>
 800636a:	4b1d      	ldr	r3, [pc, #116]	; (80063e0 <checkAktifCalisma+0x16a0>)
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	f083 0301 	eor.w	r3, r3, #1
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d028      	beq.n	80063ca <checkAktifCalisma+0x168a>
 8006378:	4b1a      	ldr	r3, [pc, #104]	; (80063e4 <checkAktifCalisma+0x16a4>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	f083 0301 	eor.w	r3, r3, #1
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d021      	beq.n	80063ca <checkAktifCalisma+0x168a>
 8006386:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <checkAktifCalisma+0x16a8>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	f083 0301 	eor.w	r3, r3, #1
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01a      	beq.n	80063ca <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006394:	4b15      	ldr	r3, [pc, #84]	; (80063ec <checkAktifCalisma+0x16ac>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	f083 0301 	eor.w	r3, r3, #1
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d013      	beq.n	80063ca <checkAktifCalisma+0x168a>
 80063a2:	4b13      	ldr	r3, [pc, #76]	; (80063f0 <checkAktifCalisma+0x16b0>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	f083 0301 	eor.w	r3, r3, #1
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00c      	beq.n	80063ca <checkAktifCalisma+0x168a>
 80063b0:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <checkAktifCalisma+0x16b4>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	f083 0301 	eor.w	r3, r3, #1
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <checkAktifCalisma+0x168a>
			hataVar=0;
 80063be:	4b07      	ldr	r3, [pc, #28]	; (80063dc <checkAktifCalisma+0x169c>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80063c4:	2007      	movs	r0, #7
 80063c6:	f7fe fae9 	bl	800499c <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80063ca:	bf00      	nop
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	2000027a 	.word	0x2000027a
 80063d4:	20000200 	.word	0x20000200
 80063d8:	20000214 	.word	0x20000214
 80063dc:	20000279 	.word	0x20000279
 80063e0:	20000274 	.word	0x20000274
 80063e4:	20000275 	.word	0x20000275
 80063e8:	20000282 	.word	0x20000282
 80063ec:	20000283 	.word	0x20000283
 80063f0:	20000284 	.word	0x20000284
 80063f4:	20000273 	.word	0x20000273

080063f8 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80063fc:	4b8b      	ldr	r3, [pc, #556]	; (800662c <checkDemoModCalisma+0x234>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b01      	cmp	r3, #1
 8006402:	f040 8229 	bne.w	8006858 <checkDemoModCalisma+0x460>
 8006406:	4b8a      	ldr	r3, [pc, #552]	; (8006630 <checkDemoModCalisma+0x238>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 8224 	beq.w	8006858 <checkDemoModCalisma+0x460>
 8006410:	4b88      	ldr	r3, [pc, #544]	; (8006634 <checkDemoModCalisma+0x23c>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f040 821f 	bne.w	8006858 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800641a:	2102      	movs	r1, #2
 800641c:	4886      	ldr	r0, [pc, #536]	; (8006638 <checkDemoModCalisma+0x240>)
 800641e:	f002 ff75 	bl	800930c <HAL_GPIO_ReadPin>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d11d      	bne.n	8006464 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006428:	4b84      	ldr	r3, [pc, #528]	; (800663c <checkDemoModCalisma+0x244>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	f083 0301 	eor.w	r3, r3, #1
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d016      	beq.n	8006464 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006436:	4b82      	ldr	r3, [pc, #520]	; (8006640 <checkDemoModCalisma+0x248>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	f083 0301 	eor.w	r3, r3, #1
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00f      	beq.n	8006464 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006444:	4b7f      	ldr	r3, [pc, #508]	; (8006644 <checkDemoModCalisma+0x24c>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	f083 0301 	eor.w	r3, r3, #1
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d008      	beq.n	8006464 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006452:	2201      	movs	r2, #1
 8006454:	2104      	movs	r1, #4
 8006456:	487c      	ldr	r0, [pc, #496]	; (8006648 <checkDemoModCalisma+0x250>)
 8006458:	f002 ff6f 	bl	800933a <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 800645c:	4b7b      	ldr	r3, [pc, #492]	; (800664c <checkDemoModCalisma+0x254>)
 800645e:	2201      	movs	r2, #1
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	e00e      	b.n	8006482 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006464:	2102      	movs	r1, #2
 8006466:	4874      	ldr	r0, [pc, #464]	; (8006638 <checkDemoModCalisma+0x240>)
 8006468:	f002 ff50 	bl	800930c <HAL_GPIO_ReadPin>
 800646c:	4603      	mov	r3, r0
 800646e:	2b01      	cmp	r3, #1
 8006470:	d107      	bne.n	8006482 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006472:	2200      	movs	r2, #0
 8006474:	2104      	movs	r1, #4
 8006476:	4874      	ldr	r0, [pc, #464]	; (8006648 <checkDemoModCalisma+0x250>)
 8006478:	f002 ff5f 	bl	800933a <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 800647c:	4b73      	ldr	r3, [pc, #460]	; (800664c <checkDemoModCalisma+0x254>)
 800647e:	2200      	movs	r2, #0
 8006480:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006482:	4b72      	ldr	r3, [pc, #456]	; (800664c <checkDemoModCalisma+0x254>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <checkDemoModCalisma+0xaa>
 800648a:	4b6d      	ldr	r3, [pc, #436]	; (8006640 <checkDemoModCalisma+0x248>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d107      	bne.n	80064a2 <checkDemoModCalisma+0xaa>
 8006492:	4b6c      	ldr	r3, [pc, #432]	; (8006644 <checkDemoModCalisma+0x24c>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d103      	bne.n	80064a2 <checkDemoModCalisma+0xaa>
 800649a:	4b68      	ldr	r3, [pc, #416]	; (800663c <checkDemoModCalisma+0x244>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00c      	beq.n	80064bc <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80064a2:	2201      	movs	r2, #1
 80064a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064a8:	4867      	ldr	r0, [pc, #412]	; (8006648 <checkDemoModCalisma+0x250>)
 80064aa:	f002 ff46 	bl	800933a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80064ae:	2201      	movs	r2, #1
 80064b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064b4:	4864      	ldr	r0, [pc, #400]	; (8006648 <checkDemoModCalisma+0x250>)
 80064b6:	f002 ff40 	bl	800933a <HAL_GPIO_WritePin>
 80064ba:	e00b      	b.n	80064d4 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80064bc:	2200      	movs	r2, #0
 80064be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064c2:	4861      	ldr	r0, [pc, #388]	; (8006648 <checkDemoModCalisma+0x250>)
 80064c4:	f002 ff39 	bl	800933a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80064c8:	2200      	movs	r2, #0
 80064ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064ce:	485e      	ldr	r0, [pc, #376]	; (8006648 <checkDemoModCalisma+0x250>)
 80064d0:	f002 ff33 	bl	800933a <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80064d4:	2102      	movs	r1, #2
 80064d6:	4858      	ldr	r0, [pc, #352]	; (8006638 <checkDemoModCalisma+0x240>)
 80064d8:	f002 ff18 	bl	800930c <HAL_GPIO_ReadPin>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d10d      	bne.n	80064fe <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80064e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064e6:	4854      	ldr	r0, [pc, #336]	; (8006638 <checkDemoModCalisma+0x240>)
 80064e8:	f002 ff10 	bl	800930c <HAL_GPIO_ReadPin>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d105      	bne.n	80064fe <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80064f2:	4b56      	ldr	r3, [pc, #344]	; (800664c <checkDemoModCalisma+0x254>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	f083 0301 	eor.w	r3, r3, #1
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80064fe:	2102      	movs	r1, #2
 8006500:	484d      	ldr	r0, [pc, #308]	; (8006638 <checkDemoModCalisma+0x240>)
 8006502:	f002 ff03 	bl	800930c <HAL_GPIO_ReadPin>
 8006506:	4603      	mov	r3, r0
 8006508:	2b01      	cmp	r3, #1
 800650a:	d125      	bne.n	8006558 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800650c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006510:	4849      	ldr	r0, [pc, #292]	; (8006638 <checkDemoModCalisma+0x240>)
 8006512:	f002 fefb 	bl	800930c <HAL_GPIO_ReadPin>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d11d      	bne.n	8006558 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 800651c:	4b4b      	ldr	r3, [pc, #300]	; (800664c <checkDemoModCalisma+0x254>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	f083 0301 	eor.w	r3, r3, #1
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d016      	beq.n	8006558 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800652a:	4b44      	ldr	r3, [pc, #272]	; (800663c <checkDemoModCalisma+0x244>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	f083 0301 	eor.w	r3, r3, #1
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00f      	beq.n	8006558 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006538:	4b42      	ldr	r3, [pc, #264]	; (8006644 <checkDemoModCalisma+0x24c>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	f083 0301 	eor.w	r3, r3, #1
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d008      	beq.n	8006558 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006546:	2201      	movs	r2, #1
 8006548:	2120      	movs	r1, #32
 800654a:	483b      	ldr	r0, [pc, #236]	; (8006638 <checkDemoModCalisma+0x240>)
 800654c:	f002 fef5 	bl	800933a <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006550:	4b3b      	ldr	r3, [pc, #236]	; (8006640 <checkDemoModCalisma+0x248>)
 8006552:	2201      	movs	r2, #1
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	e007      	b.n	8006568 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006558:	2200      	movs	r2, #0
 800655a:	2120      	movs	r1, #32
 800655c:	4836      	ldr	r0, [pc, #216]	; (8006638 <checkDemoModCalisma+0x240>)
 800655e:	f002 feec 	bl	800933a <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006562:	4b37      	ldr	r3, [pc, #220]	; (8006640 <checkDemoModCalisma+0x248>)
 8006564:	2200      	movs	r2, #0
 8006566:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006568:	2102      	movs	r1, #2
 800656a:	4833      	ldr	r0, [pc, #204]	; (8006638 <checkDemoModCalisma+0x240>)
 800656c:	f002 fece 	bl	800930c <HAL_GPIO_ReadPin>
 8006570:	4603      	mov	r3, r0
 8006572:	2b01      	cmp	r3, #1
 8006574:	d125      	bne.n	80065c2 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800657a:	482f      	ldr	r0, [pc, #188]	; (8006638 <checkDemoModCalisma+0x240>)
 800657c:	f002 fec6 	bl	800930c <HAL_GPIO_ReadPin>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d11d      	bne.n	80065c2 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006586:	4b31      	ldr	r3, [pc, #196]	; (800664c <checkDemoModCalisma+0x254>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	f083 0301 	eor.w	r3, r3, #1
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d016      	beq.n	80065c2 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006594:	4b2a      	ldr	r3, [pc, #168]	; (8006640 <checkDemoModCalisma+0x248>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	f083 0301 	eor.w	r3, r3, #1
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00f      	beq.n	80065c2 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80065a2:	4b26      	ldr	r3, [pc, #152]	; (800663c <checkDemoModCalisma+0x244>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	f083 0301 	eor.w	r3, r3, #1
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d008      	beq.n	80065c2 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80065b0:	2201      	movs	r2, #1
 80065b2:	2110      	movs	r1, #16
 80065b4:	4820      	ldr	r0, [pc, #128]	; (8006638 <checkDemoModCalisma+0x240>)
 80065b6:	f002 fec0 	bl	800933a <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80065ba:	4b22      	ldr	r3, [pc, #136]	; (8006644 <checkDemoModCalisma+0x24c>)
 80065bc:	2201      	movs	r2, #1
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	e007      	b.n	80065d2 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80065c2:	2200      	movs	r2, #0
 80065c4:	2110      	movs	r1, #16
 80065c6:	481c      	ldr	r0, [pc, #112]	; (8006638 <checkDemoModCalisma+0x240>)
 80065c8:	f002 feb7 	bl	800933a <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80065cc:	4b1d      	ldr	r3, [pc, #116]	; (8006644 <checkDemoModCalisma+0x24c>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80065d2:	2104      	movs	r1, #4
 80065d4:	4818      	ldr	r0, [pc, #96]	; (8006638 <checkDemoModCalisma+0x240>)
 80065d6:	f002 fe99 	bl	800930c <HAL_GPIO_ReadPin>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d139      	bne.n	8006654 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80065e0:	4b1a      	ldr	r3, [pc, #104]	; (800664c <checkDemoModCalisma+0x254>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	f083 0301 	eor.w	r3, r3, #1
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d032      	beq.n	8006654 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80065ee:	4b15      	ldr	r3, [pc, #84]	; (8006644 <checkDemoModCalisma+0x24c>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	f083 0301 	eor.w	r3, r3, #1
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d02b      	beq.n	8006654 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80065fc:	4b10      	ldr	r3, [pc, #64]	; (8006640 <checkDemoModCalisma+0x248>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f083 0301 	eor.w	r3, r3, #1
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d024      	beq.n	8006654 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800660a:	2201      	movs	r2, #1
 800660c:	2102      	movs	r1, #2
 800660e:	480e      	ldr	r0, [pc, #56]	; (8006648 <checkDemoModCalisma+0x250>)
 8006610:	f002 fe93 	bl	800933a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006614:	2201      	movs	r2, #1
 8006616:	2101      	movs	r1, #1
 8006618:	480b      	ldr	r0, [pc, #44]	; (8006648 <checkDemoModCalisma+0x250>)
 800661a:	f002 fe8e 	bl	800933a <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800661e:	4b07      	ldr	r3, [pc, #28]	; (800663c <checkDemoModCalisma+0x244>)
 8006620:	2201      	movs	r2, #1
 8006622:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006624:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <checkDemoModCalisma+0x258>)
 8006626:	2201      	movs	r2, #1
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	e027      	b.n	800667c <checkDemoModCalisma+0x284>
 800662c:	20000242 	.word	0x20000242
 8006630:	20000276 	.word	0x20000276
 8006634:	20000241 	.word	0x20000241
 8006638:	40011000 	.word	0x40011000
 800663c:	2000027d 	.word	0x2000027d
 8006640:	2000027e 	.word	0x2000027e
 8006644:	2000027f 	.word	0x2000027f
 8006648:	40010c00 	.word	0x40010c00
 800664c:	2000027c 	.word	0x2000027c
 8006650:	20000262 	.word	0x20000262
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006654:	2104      	movs	r1, #4
 8006656:	48a0      	ldr	r0, [pc, #640]	; (80068d8 <checkDemoModCalisma+0x4e0>)
 8006658:	f002 fe58 	bl	800930c <HAL_GPIO_ReadPin>
 800665c:	4603      	mov	r3, r0
 800665e:	2b01      	cmp	r3, #1
 8006660:	d10c      	bne.n	800667c <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006662:	2200      	movs	r2, #0
 8006664:	2102      	movs	r1, #2
 8006666:	489d      	ldr	r0, [pc, #628]	; (80068dc <checkDemoModCalisma+0x4e4>)
 8006668:	f002 fe67 	bl	800933a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800666c:	2200      	movs	r2, #0
 800666e:	2101      	movs	r1, #1
 8006670:	489a      	ldr	r0, [pc, #616]	; (80068dc <checkDemoModCalisma+0x4e4>)
 8006672:	f002 fe62 	bl	800933a <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006676:	4b9a      	ldr	r3, [pc, #616]	; (80068e0 <checkDemoModCalisma+0x4e8>)
 8006678:	2200      	movs	r2, #0
 800667a:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 800667c:	2104      	movs	r1, #4
 800667e:	4896      	ldr	r0, [pc, #600]	; (80068d8 <checkDemoModCalisma+0x4e0>)
 8006680:	f002 fe44 	bl	800930c <HAL_GPIO_ReadPin>
 8006684:	4603      	mov	r3, r0
 8006686:	2b01      	cmp	r3, #1
 8006688:	d10d      	bne.n	80066a6 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800668a:	2201      	movs	r2, #1
 800668c:	2180      	movs	r1, #128	; 0x80
 800668e:	4895      	ldr	r0, [pc, #596]	; (80068e4 <checkDemoModCalisma+0x4ec>)
 8006690:	f002 fe53 	bl	800933a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006694:	2201      	movs	r2, #1
 8006696:	2120      	movs	r1, #32
 8006698:	4892      	ldr	r0, [pc, #584]	; (80068e4 <checkDemoModCalisma+0x4ec>)
 800669a:	f002 fe4e 	bl	800933a <HAL_GPIO_WritePin>
			timer3 = millis;
 800669e:	4b92      	ldr	r3, [pc, #584]	; (80068e8 <checkDemoModCalisma+0x4f0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a92      	ldr	r2, [pc, #584]	; (80068ec <checkDemoModCalisma+0x4f4>)
 80066a4:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80066a6:	4b90      	ldr	r3, [pc, #576]	; (80068e8 <checkDemoModCalisma+0x4f0>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	4b90      	ldr	r3, [pc, #576]	; (80068ec <checkDemoModCalisma+0x4f4>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d909      	bls.n	80066c8 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80066b4:	2200      	movs	r2, #0
 80066b6:	2180      	movs	r1, #128	; 0x80
 80066b8:	488a      	ldr	r0, [pc, #552]	; (80068e4 <checkDemoModCalisma+0x4ec>)
 80066ba:	f002 fe3e 	bl	800933a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80066be:	2200      	movs	r2, #0
 80066c0:	2120      	movs	r1, #32
 80066c2:	4888      	ldr	r0, [pc, #544]	; (80068e4 <checkDemoModCalisma+0x4ec>)
 80066c4:	f002 fe39 	bl	800933a <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80066c8:	2102      	movs	r1, #2
 80066ca:	4883      	ldr	r0, [pc, #524]	; (80068d8 <checkDemoModCalisma+0x4e0>)
 80066cc:	f002 fe1e 	bl	800930c <HAL_GPIO_ReadPin>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d108      	bne.n	80066e8 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80066d6:	2201      	movs	r2, #1
 80066d8:	2140      	movs	r1, #64	; 0x40
 80066da:	4882      	ldr	r0, [pc, #520]	; (80068e4 <checkDemoModCalisma+0x4ec>)
 80066dc:	f002 fe2d 	bl	800933a <HAL_GPIO_WritePin>
			timer3 = millis;
 80066e0:	4b81      	ldr	r3, [pc, #516]	; (80068e8 <checkDemoModCalisma+0x4f0>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a81      	ldr	r2, [pc, #516]	; (80068ec <checkDemoModCalisma+0x4f4>)
 80066e6:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80066e8:	4b7f      	ldr	r3, [pc, #508]	; (80068e8 <checkDemoModCalisma+0x4f0>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	4b7f      	ldr	r3, [pc, #508]	; (80068ec <checkDemoModCalisma+0x4f4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d904      	bls.n	8006700 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80066f6:	2200      	movs	r2, #0
 80066f8:	2140      	movs	r1, #64	; 0x40
 80066fa:	487a      	ldr	r0, [pc, #488]	; (80068e4 <checkDemoModCalisma+0x4ec>)
 80066fc:	f002 fe1d 	bl	800933a <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006700:	4b7b      	ldr	r3, [pc, #492]	; (80068f0 <checkDemoModCalisma+0x4f8>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d058      	beq.n	80067ba <checkDemoModCalisma+0x3c2>
 8006708:	4b7a      	ldr	r3, [pc, #488]	; (80068f4 <checkDemoModCalisma+0x4fc>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d054      	beq.n	80067ba <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006710:	4b79      	ldr	r3, [pc, #484]	; (80068f8 <checkDemoModCalisma+0x500>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	3301      	adds	r3, #1
 8006716:	b2da      	uxtb	r2, r3
 8006718:	4b77      	ldr	r3, [pc, #476]	; (80068f8 <checkDemoModCalisma+0x500>)
 800671a:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 800671c:	4b76      	ldr	r3, [pc, #472]	; (80068f8 <checkDemoModCalisma+0x500>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b09      	cmp	r3, #9
 8006722:	d908      	bls.n	8006736 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006724:	4b74      	ldr	r3, [pc, #464]	; (80068f8 <checkDemoModCalisma+0x500>)
 8006726:	2200      	movs	r2, #0
 8006728:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800672a:	4b74      	ldr	r3, [pc, #464]	; (80068fc <checkDemoModCalisma+0x504>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	3301      	adds	r3, #1
 8006730:	b2da      	uxtb	r2, r3
 8006732:	4b72      	ldr	r3, [pc, #456]	; (80068fc <checkDemoModCalisma+0x504>)
 8006734:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006736:	4b71      	ldr	r3, [pc, #452]	; (80068fc <checkDemoModCalisma+0x504>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b09      	cmp	r3, #9
 800673c:	d908      	bls.n	8006750 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800673e:	4b6f      	ldr	r3, [pc, #444]	; (80068fc <checkDemoModCalisma+0x504>)
 8006740:	2200      	movs	r2, #0
 8006742:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006744:	4b6e      	ldr	r3, [pc, #440]	; (8006900 <checkDemoModCalisma+0x508>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	3301      	adds	r3, #1
 800674a:	b2da      	uxtb	r2, r3
 800674c:	4b6c      	ldr	r3, [pc, #432]	; (8006900 <checkDemoModCalisma+0x508>)
 800674e:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006750:	4b6b      	ldr	r3, [pc, #428]	; (8006900 <checkDemoModCalisma+0x508>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b09      	cmp	r3, #9
 8006756:	d908      	bls.n	800676a <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006758:	4b69      	ldr	r3, [pc, #420]	; (8006900 <checkDemoModCalisma+0x508>)
 800675a:	2200      	movs	r2, #0
 800675c:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800675e:	4b69      	ldr	r3, [pc, #420]	; (8006904 <checkDemoModCalisma+0x50c>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	3301      	adds	r3, #1
 8006764:	b2da      	uxtb	r2, r3
 8006766:	4b67      	ldr	r3, [pc, #412]	; (8006904 <checkDemoModCalisma+0x50c>)
 8006768:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800676a:	4b66      	ldr	r3, [pc, #408]	; (8006904 <checkDemoModCalisma+0x50c>)
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	2b09      	cmp	r3, #9
 8006770:	d908      	bls.n	8006784 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8006772:	4b64      	ldr	r3, [pc, #400]	; (8006904 <checkDemoModCalisma+0x50c>)
 8006774:	2200      	movs	r2, #0
 8006776:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006778:	4b63      	ldr	r3, [pc, #396]	; (8006908 <checkDemoModCalisma+0x510>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	3301      	adds	r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	4b61      	ldr	r3, [pc, #388]	; (8006908 <checkDemoModCalisma+0x510>)
 8006782:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006784:	4b60      	ldr	r3, [pc, #384]	; (8006908 <checkDemoModCalisma+0x510>)
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	4b60      	ldr	r3, [pc, #384]	; (800690c <checkDemoModCalisma+0x514>)
 800678a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800678e:	4b5d      	ldr	r3, [pc, #372]	; (8006904 <checkDemoModCalisma+0x50c>)
 8006790:	781a      	ldrb	r2, [r3, #0]
 8006792:	4b5e      	ldr	r3, [pc, #376]	; (800690c <checkDemoModCalisma+0x514>)
 8006794:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006796:	4b5a      	ldr	r3, [pc, #360]	; (8006900 <checkDemoModCalisma+0x508>)
 8006798:	781a      	ldrb	r2, [r3, #0]
 800679a:	4b5c      	ldr	r3, [pc, #368]	; (800690c <checkDemoModCalisma+0x514>)
 800679c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800679e:	4b57      	ldr	r3, [pc, #348]	; (80068fc <checkDemoModCalisma+0x504>)
 80067a0:	781a      	ldrb	r2, [r3, #0]
 80067a2:	4b5a      	ldr	r3, [pc, #360]	; (800690c <checkDemoModCalisma+0x514>)
 80067a4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80067a6:	4b54      	ldr	r3, [pc, #336]	; (80068f8 <checkDemoModCalisma+0x500>)
 80067a8:	781a      	ldrb	r2, [r3, #0]
 80067aa:	4b58      	ldr	r3, [pc, #352]	; (800690c <checkDemoModCalisma+0x514>)
 80067ac:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80067ae:	4b58      	ldr	r3, [pc, #352]	; (8006910 <checkDemoModCalisma+0x518>)
 80067b0:	2201      	movs	r2, #1
 80067b2:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80067b4:	4b4f      	ldr	r3, [pc, #316]	; (80068f4 <checkDemoModCalisma+0x4fc>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80067ba:	4b56      	ldr	r3, [pc, #344]	; (8006914 <checkDemoModCalisma+0x51c>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f040 8087 	bne.w	80068d2 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80067c4:	4a54      	ldr	r2, [pc, #336]	; (8006918 <checkDemoModCalisma+0x520>)
 80067c6:	2101      	movs	r1, #1
 80067c8:	2002      	movs	r0, #2
 80067ca:	f001 fa79 	bl	8007cc0 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80067ce:	4a53      	ldr	r2, [pc, #332]	; (800691c <checkDemoModCalisma+0x524>)
 80067d0:	2101      	movs	r1, #1
 80067d2:	2001      	movs	r0, #1
 80067d4:	f001 fa74 	bl	8007cc0 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80067d8:	4b4b      	ldr	r3, [pc, #300]	; (8006908 <checkDemoModCalisma+0x510>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	220a      	movs	r2, #10
 80067de:	4950      	ldr	r1, [pc, #320]	; (8006920 <checkDemoModCalisma+0x528>)
 80067e0:	4618      	mov	r0, r3
 80067e2:	f005 fdbf 	bl	800c364 <itoa>
			lcd_print(2,12,snum);
 80067e6:	4a4e      	ldr	r2, [pc, #312]	; (8006920 <checkDemoModCalisma+0x528>)
 80067e8:	210c      	movs	r1, #12
 80067ea:	2002      	movs	r0, #2
 80067ec:	f001 fa68 	bl	8007cc0 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80067f0:	4b44      	ldr	r3, [pc, #272]	; (8006904 <checkDemoModCalisma+0x50c>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	220a      	movs	r2, #10
 80067f6:	494a      	ldr	r1, [pc, #296]	; (8006920 <checkDemoModCalisma+0x528>)
 80067f8:	4618      	mov	r0, r3
 80067fa:	f005 fdb3 	bl	800c364 <itoa>
			lcd_print(2,13,snum);
 80067fe:	4a48      	ldr	r2, [pc, #288]	; (8006920 <checkDemoModCalisma+0x528>)
 8006800:	210d      	movs	r1, #13
 8006802:	2002      	movs	r0, #2
 8006804:	f001 fa5c 	bl	8007cc0 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006808:	4b3d      	ldr	r3, [pc, #244]	; (8006900 <checkDemoModCalisma+0x508>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	220a      	movs	r2, #10
 800680e:	4944      	ldr	r1, [pc, #272]	; (8006920 <checkDemoModCalisma+0x528>)
 8006810:	4618      	mov	r0, r3
 8006812:	f005 fda7 	bl	800c364 <itoa>
			lcd_print(2,14,snum);
 8006816:	4a42      	ldr	r2, [pc, #264]	; (8006920 <checkDemoModCalisma+0x528>)
 8006818:	210e      	movs	r1, #14
 800681a:	2002      	movs	r0, #2
 800681c:	f001 fa50 	bl	8007cc0 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006820:	4b36      	ldr	r3, [pc, #216]	; (80068fc <checkDemoModCalisma+0x504>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	220a      	movs	r2, #10
 8006826:	493e      	ldr	r1, [pc, #248]	; (8006920 <checkDemoModCalisma+0x528>)
 8006828:	4618      	mov	r0, r3
 800682a:	f005 fd9b 	bl	800c364 <itoa>
			lcd_print(2,15,snum);
 800682e:	4a3c      	ldr	r2, [pc, #240]	; (8006920 <checkDemoModCalisma+0x528>)
 8006830:	210f      	movs	r1, #15
 8006832:	2002      	movs	r0, #2
 8006834:	f001 fa44 	bl	8007cc0 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006838:	4b2f      	ldr	r3, [pc, #188]	; (80068f8 <checkDemoModCalisma+0x500>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	220a      	movs	r2, #10
 800683e:	4938      	ldr	r1, [pc, #224]	; (8006920 <checkDemoModCalisma+0x528>)
 8006840:	4618      	mov	r0, r3
 8006842:	f005 fd8f 	bl	800c364 <itoa>
			lcd_print(2,16,snum);
 8006846:	4a36      	ldr	r2, [pc, #216]	; (8006920 <checkDemoModCalisma+0x528>)
 8006848:	2110      	movs	r1, #16
 800684a:	2002      	movs	r0, #2
 800684c:	f001 fa38 	bl	8007cc0 <lcd_print>
			mesajYazildi=1;
 8006850:	4b34      	ldr	r3, [pc, #208]	; (8006924 <checkDemoModCalisma+0x52c>)
 8006852:	2201      	movs	r2, #1
 8006854:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006856:	e03c      	b.n	80068d2 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006858:	4b33      	ldr	r3, [pc, #204]	; (8006928 <checkDemoModCalisma+0x530>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d003      	beq.n	8006868 <checkDemoModCalisma+0x470>
 8006860:	4b2c      	ldr	r3, [pc, #176]	; (8006914 <checkDemoModCalisma+0x51c>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d134      	bne.n	80068d2 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006868:	2200      	movs	r2, #0
 800686a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800686e:	481b      	ldr	r0, [pc, #108]	; (80068dc <checkDemoModCalisma+0x4e4>)
 8006870:	f002 fd63 	bl	800933a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006874:	2200      	movs	r2, #0
 8006876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800687a:	4818      	ldr	r0, [pc, #96]	; (80068dc <checkDemoModCalisma+0x4e4>)
 800687c:	f002 fd5d 	bl	800933a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006880:	2200      	movs	r2, #0
 8006882:	2104      	movs	r1, #4
 8006884:	4815      	ldr	r0, [pc, #84]	; (80068dc <checkDemoModCalisma+0x4e4>)
 8006886:	f002 fd58 	bl	800933a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800688a:	2200      	movs	r2, #0
 800688c:	2102      	movs	r1, #2
 800688e:	4813      	ldr	r0, [pc, #76]	; (80068dc <checkDemoModCalisma+0x4e4>)
 8006890:	f002 fd53 	bl	800933a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006894:	2200      	movs	r2, #0
 8006896:	2101      	movs	r1, #1
 8006898:	4810      	ldr	r0, [pc, #64]	; (80068dc <checkDemoModCalisma+0x4e4>)
 800689a:	f002 fd4e 	bl	800933a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800689e:	2200      	movs	r2, #0
 80068a0:	2120      	movs	r1, #32
 80068a2:	480d      	ldr	r0, [pc, #52]	; (80068d8 <checkDemoModCalisma+0x4e0>)
 80068a4:	f002 fd49 	bl	800933a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80068a8:	2200      	movs	r2, #0
 80068aa:	2110      	movs	r1, #16
 80068ac:	480a      	ldr	r0, [pc, #40]	; (80068d8 <checkDemoModCalisma+0x4e0>)
 80068ae:	f002 fd44 	bl	800933a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80068b2:	2200      	movs	r2, #0
 80068b4:	2180      	movs	r1, #128	; 0x80
 80068b6:	480b      	ldr	r0, [pc, #44]	; (80068e4 <checkDemoModCalisma+0x4ec>)
 80068b8:	f002 fd3f 	bl	800933a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80068bc:	2200      	movs	r2, #0
 80068be:	2140      	movs	r1, #64	; 0x40
 80068c0:	4808      	ldr	r0, [pc, #32]	; (80068e4 <checkDemoModCalisma+0x4ec>)
 80068c2:	f002 fd3a 	bl	800933a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80068c6:	2200      	movs	r2, #0
 80068c8:	2120      	movs	r1, #32
 80068ca:	4806      	ldr	r0, [pc, #24]	; (80068e4 <checkDemoModCalisma+0x4ec>)
 80068cc:	f002 fd35 	bl	800933a <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80068d0:	e7ff      	b.n	80068d2 <checkDemoModCalisma+0x4da>
 80068d2:	bf00      	nop
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	40011000 	.word	0x40011000
 80068dc:	40010c00 	.word	0x40010c00
 80068e0:	2000027d 	.word	0x2000027d
 80068e4:	40010800 	.word	0x40010800
 80068e8:	20000200 	.word	0x20000200
 80068ec:	20000210 	.word	0x20000210
 80068f0:	2000027c 	.word	0x2000027c
 80068f4:	20000262 	.word	0x20000262
 80068f8:	20000221 	.word	0x20000221
 80068fc:	20000222 	.word	0x20000222
 8006900:	20000008 	.word	0x20000008
 8006904:	20000009 	.word	0x20000009
 8006908:	20000223 	.word	0x20000223
 800690c:	20000128 	.word	0x20000128
 8006910:	20000250 	.word	0x20000250
 8006914:	20000241 	.word	0x20000241
 8006918:	0800db8c 	.word	0x0800db8c
 800691c:	0800db98 	.word	0x0800db98
 8006920:	20000198 	.word	0x20000198
 8006924:	20000258 	.word	0x20000258
 8006928:	20000242 	.word	0x20000242

0800692c <mainLoop>:

void mainLoop() {
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006932:	f7fe f923 	bl	8004b7c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006936:	2101      	movs	r1, #1
 8006938:	48ac      	ldr	r0, [pc, #688]	; (8006bec <mainLoop+0x2c0>)
 800693a:	f002 fce7 	bl	800930c <HAL_GPIO_ReadPin>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d136      	bne.n	80069b2 <mainLoop+0x86>
 8006944:	2108      	movs	r1, #8
 8006946:	48aa      	ldr	r0, [pc, #680]	; (8006bf0 <mainLoop+0x2c4>)
 8006948:	f002 fce0 	bl	800930c <HAL_GPIO_ReadPin>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d12f      	bne.n	80069b2 <mainLoop+0x86>
 8006952:	2102      	movs	r1, #2
 8006954:	48a5      	ldr	r0, [pc, #660]	; (8006bec <mainLoop+0x2c0>)
 8006956:	f002 fcd9 	bl	800930c <HAL_GPIO_ReadPin>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d128      	bne.n	80069b2 <mainLoop+0x86>
 8006960:	2104      	movs	r1, #4
 8006962:	48a2      	ldr	r0, [pc, #648]	; (8006bec <mainLoop+0x2c0>)
 8006964:	f002 fcd2 	bl	800930c <HAL_GPIO_ReadPin>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d121      	bne.n	80069b2 <mainLoop+0x86>
 800696e:	2108      	movs	r1, #8
 8006970:	489e      	ldr	r0, [pc, #632]	; (8006bec <mainLoop+0x2c0>)
 8006972:	f002 fccb 	bl	800930c <HAL_GPIO_ReadPin>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d11a      	bne.n	80069b2 <mainLoop+0x86>
 800697c:	2180      	movs	r1, #128	; 0x80
 800697e:	489c      	ldr	r0, [pc, #624]	; (8006bf0 <mainLoop+0x2c4>)
 8006980:	f002 fcc4 	bl	800930c <HAL_GPIO_ReadPin>
 8006984:	4603      	mov	r3, r0
 8006986:	2b01      	cmp	r3, #1
 8006988:	d113      	bne.n	80069b2 <mainLoop+0x86>
 800698a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800698e:	4898      	ldr	r0, [pc, #608]	; (8006bf0 <mainLoop+0x2c4>)
 8006990:	f002 fcbc 	bl	800930c <HAL_GPIO_ReadPin>
 8006994:	4603      	mov	r3, r0
 8006996:	2b01      	cmp	r3, #1
 8006998:	d10b      	bne.n	80069b2 <mainLoop+0x86>
 800699a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800699e:	4894      	ldr	r0, [pc, #592]	; (8006bf0 <mainLoop+0x2c4>)
 80069a0:	f002 fcb4 	bl	800930c <HAL_GPIO_ReadPin>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d103      	bne.n	80069b2 <mainLoop+0x86>
			butonKontrol=0;
 80069aa:	4b92      	ldr	r3, [pc, #584]	; (8006bf4 <mainLoop+0x2c8>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	e003      	b.n	80069ba <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80069b2:	4b91      	ldr	r3, [pc, #580]	; (8006bf8 <mainLoop+0x2cc>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a91      	ldr	r2, [pc, #580]	; (8006bfc <mainLoop+0x2d0>)
 80069b8:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80069ba:	4b91      	ldr	r3, [pc, #580]	; (8006c00 <mainLoop+0x2d4>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d03a      	beq.n	8006a38 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80069c2:	bf00      	nop
 80069c4:	488f      	ldr	r0, [pc, #572]	; (8006c04 <mainLoop+0x2d8>)
 80069c6:	f003 faca 	bl	8009f5e <HAL_I2C_GetError>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d0f9      	beq.n	80069c4 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80069d0:	bf00      	nop
 80069d2:	488c      	ldr	r0, [pc, #560]	; (8006c04 <mainLoop+0x2d8>)
 80069d4:	f003 fab6 	bl	8009f44 <HAL_I2C_GetState>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d1f9      	bne.n	80069d2 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80069de:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80069e2:	9302      	str	r3, [sp, #8]
 80069e4:	236e      	movs	r3, #110	; 0x6e
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	4b87      	ldr	r3, [pc, #540]	; (8006c08 <mainLoop+0x2dc>)
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	236e      	movs	r3, #110	; 0x6e
 80069ee:	2200      	movs	r2, #0
 80069f0:	21a0      	movs	r1, #160	; 0xa0
 80069f2:	4884      	ldr	r0, [pc, #528]	; (8006c04 <mainLoop+0x2d8>)
 80069f4:	f002 ff44 	bl	8009880 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80069f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069fc:	f001 feb6 	bl	800876c <HAL_Delay>

		  hafizaYaz=0;
 8006a00:	4b7f      	ldr	r3, [pc, #508]	; (8006c00 <mainLoop+0x2d4>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006a06:	4b81      	ldr	r3, [pc, #516]	; (8006c0c <mainLoop+0x2e0>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d105      	bne.n	8006a1a <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006a0e:	4a80      	ldr	r2, [pc, #512]	; (8006c10 <mainLoop+0x2e4>)
 8006a10:	2101      	movs	r1, #1
 8006a12:	2002      	movs	r0, #2
 8006a14:	f001 f954 	bl	8007cc0 <lcd_print>
 8006a18:	e008      	b.n	8006a2c <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006a1a:	4b7c      	ldr	r3, [pc, #496]	; (8006c0c <mainLoop+0x2e0>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d104      	bne.n	8006a2c <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006a22:	4a7c      	ldr	r2, [pc, #496]	; (8006c14 <mainLoop+0x2e8>)
 8006a24:	2101      	movs	r1, #1
 8006a26:	2002      	movs	r0, #2
 8006a28:	f001 f94a 	bl	8007cc0 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006a2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a30:	f001 fe9c 	bl	800876c <HAL_Delay>
		  lcd_clear();
 8006a34:	f001 f970 	bl	8007d18 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006a38:	4b77      	ldr	r3, [pc, #476]	; (8006c18 <mainLoop+0x2ec>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	f083 0301 	eor.w	r3, r3, #1
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d06d      	beq.n	8006b22 <mainLoop+0x1f6>
 8006a46:	486f      	ldr	r0, [pc, #444]	; (8006c04 <mainLoop+0x2d8>)
 8006a48:	f003 fa7c 	bl	8009f44 <HAL_I2C_GetState>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d167      	bne.n	8006b22 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006a52:	4b72      	ldr	r3, [pc, #456]	; (8006c1c <mainLoop+0x2f0>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	f083 0301 	eor.w	r3, r3, #1
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d044      	beq.n	8006aea <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006a60:	4a6f      	ldr	r2, [pc, #444]	; (8006c20 <mainLoop+0x2f4>)
 8006a62:	2101      	movs	r1, #1
 8006a64:	2001      	movs	r0, #1
 8006a66:	f001 f92b 	bl	8007cc0 <lcd_print>
			  if(dilSecim==0) {
 8006a6a:	4b68      	ldr	r3, [pc, #416]	; (8006c0c <mainLoop+0x2e0>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d105      	bne.n	8006a7e <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006a72:	4a6c      	ldr	r2, [pc, #432]	; (8006c24 <mainLoop+0x2f8>)
 8006a74:	2101      	movs	r1, #1
 8006a76:	2002      	movs	r0, #2
 8006a78:	f001 f922 	bl	8007cc0 <lcd_print>
 8006a7c:	e008      	b.n	8006a90 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006a7e:	4b63      	ldr	r3, [pc, #396]	; (8006c0c <mainLoop+0x2e0>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d104      	bne.n	8006a90 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006a86:	4a68      	ldr	r2, [pc, #416]	; (8006c28 <mainLoop+0x2fc>)
 8006a88:	2101      	movs	r1, #1
 8006a8a:	2002      	movs	r0, #2
 8006a8c:	f001 f918 	bl	8007cc0 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006a90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a94:	f001 fe6a 	bl	800876c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a98:	bf00      	nop
 8006a9a:	485a      	ldr	r0, [pc, #360]	; (8006c04 <mainLoop+0x2d8>)
 8006a9c:	f003 fa5f 	bl	8009f5e <HAL_I2C_GetError>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d0f9      	beq.n	8006a9a <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006aa6:	e003      	b.n	8006ab0 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006aa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006aac:	f001 fe5e 	bl	800876c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006ab0:	4854      	ldr	r0, [pc, #336]	; (8006c04 <mainLoop+0x2d8>)
 8006ab2:	f003 fa47 	bl	8009f44 <HAL_I2C_GetState>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d1f5      	bne.n	8006aa8 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006abc:	4b53      	ldr	r3, [pc, #332]	; (8006c0c <mainLoop+0x2e0>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d105      	bne.n	8006ad0 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006ac4:	4a59      	ldr	r2, [pc, #356]	; (8006c2c <mainLoop+0x300>)
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	2002      	movs	r0, #2
 8006aca:	f001 f8f9 	bl	8007cc0 <lcd_print>
 8006ace:	e008      	b.n	8006ae2 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006ad0:	4b4e      	ldr	r3, [pc, #312]	; (8006c0c <mainLoop+0x2e0>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d104      	bne.n	8006ae2 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006ad8:	4a55      	ldr	r2, [pc, #340]	; (8006c30 <mainLoop+0x304>)
 8006ada:	2101      	movs	r1, #1
 8006adc:	2002      	movs	r0, #2
 8006ade:	f001 f8ef 	bl	8007cc0 <lcd_print>
			  }

			  ilkOkuma=1;
 8006ae2:	4b4e      	ldr	r3, [pc, #312]	; (8006c1c <mainLoop+0x2f0>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	e014      	b.n	8006b14 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006aea:	4b48      	ldr	r3, [pc, #288]	; (8006c0c <mainLoop+0x2e0>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d105      	bne.n	8006afe <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006af2:	4a50      	ldr	r2, [pc, #320]	; (8006c34 <mainLoop+0x308>)
 8006af4:	2101      	movs	r1, #1
 8006af6:	2002      	movs	r0, #2
 8006af8:	f001 f8e2 	bl	8007cc0 <lcd_print>
 8006afc:	e008      	b.n	8006b10 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006afe:	4b43      	ldr	r3, [pc, #268]	; (8006c0c <mainLoop+0x2e0>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d104      	bne.n	8006b10 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006b06:	4a4c      	ldr	r2, [pc, #304]	; (8006c38 <mainLoop+0x30c>)
 8006b08:	2101      	movs	r1, #1
 8006b0a:	2002      	movs	r0, #2
 8006b0c:	f001 f8d8 	bl	8007cc0 <lcd_print>
			  }
			  lcd_clear();
 8006b10:	f001 f902 	bl	8007d18 <lcd_clear>
		  }

		  lcd_clear();
 8006b14:	f001 f900 	bl	8007d18 <lcd_clear>

		  eepromKontrol();
 8006b18:	f7f9 fb8c 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006b1c:	4b3e      	ldr	r3, [pc, #248]	; (8006c18 <mainLoop+0x2ec>)
 8006b1e:	2201      	movs	r2, #1
 8006b20:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006b22:	4b46      	ldr	r3, [pc, #280]	; (8006c3c <mainLoop+0x310>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d11c      	bne.n	8006b64 <mainLoop+0x238>
 8006b2a:	4b45      	ldr	r3, [pc, #276]	; (8006c40 <mainLoop+0x314>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	f083 0301 	eor.w	r3, r3, #1
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d015      	beq.n	8006b64 <mainLoop+0x238>
 8006b38:	4b42      	ldr	r3, [pc, #264]	; (8006c44 <mainLoop+0x318>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d111      	bne.n	8006b64 <mainLoop+0x238>
			lcd_clear();
 8006b40:	f001 f8ea 	bl	8007d18 <lcd_clear>
			HAL_Delay(10);
 8006b44:	200a      	movs	r0, #10
 8006b46:	f001 fe11 	bl	800876c <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006b4a:	4a3f      	ldr	r2, [pc, #252]	; (8006c48 <mainLoop+0x31c>)
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	2001      	movs	r0, #1
 8006b50:	f001 f8b6 	bl	8007cc0 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006b54:	4a3d      	ldr	r2, [pc, #244]	; (8006c4c <mainLoop+0x320>)
 8006b56:	2101      	movs	r1, #1
 8006b58:	2002      	movs	r0, #2
 8006b5a:	f001 f8b1 	bl	8007cc0 <lcd_print>
			mesajYazildi=1;
 8006b5e:	4b38      	ldr	r3, [pc, #224]	; (8006c40 <mainLoop+0x314>)
 8006b60:	2201      	movs	r2, #1
 8006b62:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006b64:	4b35      	ldr	r3, [pc, #212]	; (8006c3c <mainLoop+0x310>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d112      	bne.n	8006b92 <mainLoop+0x266>
 8006b6c:	2102      	movs	r1, #2
 8006b6e:	481f      	ldr	r0, [pc, #124]	; (8006bec <mainLoop+0x2c0>)
 8006b70:	f002 fbcc 	bl	800930c <HAL_GPIO_ReadPin>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d10b      	bne.n	8006b92 <mainLoop+0x266>
 8006b7a:	2104      	movs	r1, #4
 8006b7c:	481b      	ldr	r0, [pc, #108]	; (8006bec <mainLoop+0x2c0>)
 8006b7e:	f002 fbc5 	bl	800930c <HAL_GPIO_ReadPin>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d104      	bne.n	8006b92 <mainLoop+0x266>
			menuGiris=1;
 8006b88:	4b2c      	ldr	r3, [pc, #176]	; (8006c3c <mainLoop+0x310>)
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006b8e:	f001 f8c3 	bl	8007d18 <lcd_clear>
		}

		if(menuGiris==1) {
 8006b92:	4b2a      	ldr	r3, [pc, #168]	; (8006c3c <mainLoop+0x310>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d101      	bne.n	8006b9e <mainLoop+0x272>
			menu();
 8006b9a:	f7fa fb89 	bl	80012b0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ba2:	4813      	ldr	r0, [pc, #76]	; (8006bf0 <mainLoop+0x2c4>)
 8006ba4:	f002 fbe1 	bl	800936a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006ba8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bac:	4828      	ldr	r0, [pc, #160]	; (8006c50 <mainLoop+0x324>)
 8006bae:	f002 fbad 	bl	800930c <HAL_GPIO_ReadPin>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <mainLoop+0x2a2>
 8006bb8:	4b26      	ldr	r3, [pc, #152]	; (8006c54 <mainLoop+0x328>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	f083 0301 	eor.w	r3, r3, #1
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <mainLoop+0x2a2>
			stopVar=1;
 8006bc6:	4b24      	ldr	r3, [pc, #144]	; (8006c58 <mainLoop+0x32c>)
 8006bc8:	2201      	movs	r2, #1
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	e002      	b.n	8006bd4 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006bce:	4b22      	ldr	r3, [pc, #136]	; (8006c58 <mainLoop+0x32c>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006bd4:	f7fd ffe8 	bl	8004ba8 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006bd8:	f7fe f81a 	bl	8004c10 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006bdc:	f7fe f85e 	bl	8004c9c <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006be0:	f7fe f8ae 	bl	8004d40 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006be4:	f7ff fc08 	bl	80063f8 <checkDemoModCalisma>
		checkLCDBacklight();
 8006be8:	e6a3      	b.n	8006932 <mainLoop+0x6>
 8006bea:	bf00      	nop
 8006bec:	40010800 	.word	0x40010800
 8006bf0:	40011000 	.word	0x40011000
 8006bf4:	20000253 	.word	0x20000253
 8006bf8:	20000200 	.word	0x20000200
 8006bfc:	2000021c 	.word	0x2000021c
 8006c00:	20000250 	.word	0x20000250
 8006c04:	200002b4 	.word	0x200002b4
 8006c08:	20000128 	.word	0x20000128
 8006c0c:	20000245 	.word	0x20000245
 8006c10:	0800dbac 	.word	0x0800dbac
 8006c14:	0800dbc0 	.word	0x0800dbc0
 8006c18:	20000251 	.word	0x20000251
 8006c1c:	20000252 	.word	0x20000252
 8006c20:	0800dbd4 	.word	0x0800dbd4
 8006c24:	0800dbe8 	.word	0x0800dbe8
 8006c28:	0800dbfc 	.word	0x0800dbfc
 8006c2c:	0800dc10 	.word	0x0800dc10
 8006c30:	0800dc24 	.word	0x0800dc24
 8006c34:	0800dc38 	.word	0x0800dc38
 8006c38:	0800dc4c 	.word	0x0800dc4c
 8006c3c:	20000241 	.word	0x20000241
 8006c40:	20000258 	.word	0x20000258
 8006c44:	20000242 	.word	0x20000242
 8006c48:	0800dc60 	.word	0x0800dc60
 8006c4c:	0800dc74 	.word	0x0800dc74
 8006c50:	40010c00 	.word	0x40010c00
 8006c54:	20000279 	.word	0x20000279
 8006c58:	20000276 	.word	0x20000276

08006c5c <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006c62:	2001      	movs	r0, #1
 8006c64:	f001 f88a 	bl	8007d7c <lcd_cursor>

    int cursorPosition = 3;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	60fb      	str	r3, [r7, #12]
    int machineIDLoc = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60bb      	str	r3, [r7, #8]
    int writeLoc = 5;
 8006c70:	2305      	movs	r3, #5
 8006c72:	607b      	str	r3, [r7, #4]

    int idStart = idStartPos;
 8006c74:	4ba2      	ldr	r3, [pc, #648]	; (8006f00 <takeMachineID+0x2a4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	603b      	str	r3, [r7, #0]

    memset(machineID, 0, sizeof(machineID));
 8006c7a:	220c      	movs	r2, #12
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	48a1      	ldr	r0, [pc, #644]	; (8006f04 <takeMachineID+0x2a8>)
 8006c80:	f005 fccb 	bl	800c61a <memset>
    HAL_Delay(100);
 8006c84:	2064      	movs	r0, #100	; 0x64
 8006c86:	f001 fd71 	bl	800876c <HAL_Delay>

    printTemplate(1, 0);
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	f7fa f8a9 	bl	8000de4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006c92:	2108      	movs	r1, #8
 8006c94:	489c      	ldr	r0, [pc, #624]	; (8006f08 <takeMachineID+0x2ac>)
 8006c96:	f002 fb39 	bl	800930c <HAL_GPIO_ReadPin>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d129      	bne.n	8006cf4 <takeMachineID+0x98>
        	lcd_cursor(0);
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	f001 f86b 	bl	8007d7c <lcd_cursor>

        	if(machineID[11] == '\0') {
 8006ca6:	4b97      	ldr	r3, [pc, #604]	; (8006f04 <takeMachineID+0x2a8>)
 8006ca8:	7adb      	ldrb	r3, [r3, #11]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d110      	bne.n	8006cd0 <takeMachineID+0x74>
        		lcd_clear();
 8006cae:	f001 f833 	bl	8007d18 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006cb2:	4a96      	ldr	r2, [pc, #600]	; (8006f0c <takeMachineID+0x2b0>)
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	f001 f802 	bl	8007cc0 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006cbc:	4a94      	ldr	r2, [pc, #592]	; (8006f10 <takeMachineID+0x2b4>)
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	2002      	movs	r0, #2
 8006cc2:	f000 fffd 	bl	8007cc0 <lcd_print>
        		HAL_Delay(1200);
 8006cc6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006cca:	f001 fd4f 	bl	800876c <HAL_Delay>
        		goto mainSection;
 8006cce:	e7c8      	b.n	8006c62 <takeMachineID+0x6>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006cd0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006cd4:	9302      	str	r3, [sp, #8]
 8006cd6:	236e      	movs	r3, #110	; 0x6e
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	4b8e      	ldr	r3, [pc, #568]	; (8006f14 <takeMachineID+0x2b8>)
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	236e      	movs	r3, #110	; 0x6e
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	21a0      	movs	r1, #160	; 0xa0
 8006ce4:	488c      	ldr	r0, [pc, #560]	; (8006f18 <takeMachineID+0x2bc>)
 8006ce6:	f002 fdcb 	bl	8009880 <HAL_I2C_Mem_Write>
        	HAL_Delay(1000);
 8006cea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cee:	f001 fd3d 	bl	800876c <HAL_Delay>

            break;
 8006cf2:	e139      	b.n	8006f68 <takeMachineID+0x30c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	4884      	ldr	r0, [pc, #528]	; (8006f08 <takeMachineID+0x2ac>)
 8006cf8:	f002 fb08 	bl	800930c <HAL_GPIO_ReadPin>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d114      	bne.n	8006d2c <takeMachineID+0xd0>
        	HAL_Delay(50);
 8006d02:	2032      	movs	r0, #50	; 0x32
 8006d04:	f001 fd32 	bl	800876c <HAL_Delay>
        	if(cursorPosition == 7) {
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2b07      	cmp	r3, #7
 8006d0c:	d102      	bne.n	8006d14 <takeMachineID+0xb8>
        		cursorPosition = 10;
 8006d0e:	230a      	movs	r3, #10
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	e008      	b.n	8006d26 <takeMachineID+0xca>
        	} else if (cursorPosition == 14) {
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b0e      	cmp	r3, #14
 8006d18:	d102      	bne.n	8006d20 <takeMachineID+0xc4>
                cursorPosition = 3;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	e002      	b.n	8006d26 <takeMachineID+0xca>
            } else {
            	cursorPosition++;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3301      	adds	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]
            }

        	HAL_Delay(150);
 8006d26:	2096      	movs	r0, #150	; 0x96
 8006d28:	f001 fd20 	bl	800876c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006d2c:	2108      	movs	r1, #8
 8006d2e:	487b      	ldr	r0, [pc, #492]	; (8006f1c <takeMachineID+0x2c0>)
 8006d30:	f002 faec 	bl	800930c <HAL_GPIO_ReadPin>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d114      	bne.n	8006d64 <takeMachineID+0x108>
        	HAL_Delay(50);
 8006d3a:	2032      	movs	r0, #50	; 0x32
 8006d3c:	f001 fd16 	bl	800876c <HAL_Delay>
            if (cursorPosition == 3) {
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d102      	bne.n	8006d4c <takeMachineID+0xf0>
                cursorPosition = 14;
 8006d46:	230e      	movs	r3, #14
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	e008      	b.n	8006d5e <takeMachineID+0x102>
            } else if(cursorPosition == 10) {
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b0a      	cmp	r3, #10
 8006d50:	d102      	bne.n	8006d58 <takeMachineID+0xfc>
            	cursorPosition = 7;
 8006d52:	2307      	movs	r3, #7
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	e002      	b.n	8006d5e <takeMachineID+0x102>
            } else {
            	cursorPosition--;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006d5e:	2096      	movs	r0, #150	; 0x96
 8006d60:	f001 fd04 	bl	800876c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006d64:	2102      	movs	r1, #2
 8006d66:	4868      	ldr	r0, [pc, #416]	; (8006f08 <takeMachineID+0x2ac>)
 8006d68:	f002 fad0 	bl	800930c <HAL_GPIO_ReadPin>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	f040 80a4 	bne.w	8006ebc <takeMachineID+0x260>
        	HAL_Delay(50);
 8006d74:	2032      	movs	r0, #50	; 0x32
 8006d76:	f001 fcf9 	bl	800876c <HAL_Delay>
        	if(cursorPosition == 3) {
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d10a      	bne.n	8006d96 <takeMachineID+0x13a>
        		eepromData[idStart] = 0;
 8006d80:	4a64      	ldr	r2, [pc, #400]	; (8006f14 <takeMachineID+0x2b8>)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	4413      	add	r3, r2
 8006d86:	2200      	movs	r2, #0
 8006d88:	701a      	strb	r2, [r3, #0]
        		machineID[machineIDLoc] = '0';
 8006d8a:	4a5e      	ldr	r2, [pc, #376]	; (8006f04 <takeMachineID+0x2a8>)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4413      	add	r3, r2
 8006d90:	2230      	movs	r2, #48	; 0x30
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	e07c      	b.n	8006e90 <takeMachineID+0x234>
        	} else if(cursorPosition == 4) {
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d10a      	bne.n	8006db2 <takeMachineID+0x156>
        		eepromData[idStart] = 1;
 8006d9c:	4a5d      	ldr	r2, [pc, #372]	; (8006f14 <takeMachineID+0x2b8>)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	4413      	add	r3, r2
 8006da2:	2201      	movs	r2, #1
 8006da4:	701a      	strb	r2, [r3, #0]
        		machineID[machineIDLoc] = '1';
 8006da6:	4a57      	ldr	r2, [pc, #348]	; (8006f04 <takeMachineID+0x2a8>)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4413      	add	r3, r2
 8006dac:	2231      	movs	r2, #49	; 0x31
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	e06e      	b.n	8006e90 <takeMachineID+0x234>
        	} else if(cursorPosition == 5) {
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b05      	cmp	r3, #5
 8006db6:	d10a      	bne.n	8006dce <takeMachineID+0x172>
        		eepromData[idStart] = 2;
 8006db8:	4a56      	ldr	r2, [pc, #344]	; (8006f14 <takeMachineID+0x2b8>)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	701a      	strb	r2, [r3, #0]
        		machineID[machineIDLoc] = '2';
 8006dc2:	4a50      	ldr	r2, [pc, #320]	; (8006f04 <takeMachineID+0x2a8>)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	2232      	movs	r2, #50	; 0x32
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	e060      	b.n	8006e90 <takeMachineID+0x234>
        	} else if(cursorPosition == 6) {
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b06      	cmp	r3, #6
 8006dd2:	d10a      	bne.n	8006dea <takeMachineID+0x18e>
        		eepromData[idStart] = 3;
 8006dd4:	4a4f      	ldr	r2, [pc, #316]	; (8006f14 <takeMachineID+0x2b8>)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	4413      	add	r3, r2
 8006dda:	2203      	movs	r2, #3
 8006ddc:	701a      	strb	r2, [r3, #0]
        		machineID[machineIDLoc] = '3';
 8006dde:	4a49      	ldr	r2, [pc, #292]	; (8006f04 <takeMachineID+0x2a8>)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4413      	add	r3, r2
 8006de4:	2233      	movs	r2, #51	; 0x33
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	e052      	b.n	8006e90 <takeMachineID+0x234>
        	} else if(cursorPosition == 7) {
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b07      	cmp	r3, #7
 8006dee:	d10a      	bne.n	8006e06 <takeMachineID+0x1aa>
        		eepromData[idStart] = 4;
 8006df0:	4a48      	ldr	r2, [pc, #288]	; (8006f14 <takeMachineID+0x2b8>)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	4413      	add	r3, r2
 8006df6:	2204      	movs	r2, #4
 8006df8:	701a      	strb	r2, [r3, #0]
        		machineID[machineIDLoc] = '4';
 8006dfa:	4a42      	ldr	r2, [pc, #264]	; (8006f04 <takeMachineID+0x2a8>)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4413      	add	r3, r2
 8006e00:	2234      	movs	r2, #52	; 0x34
 8006e02:	701a      	strb	r2, [r3, #0]
 8006e04:	e044      	b.n	8006e90 <takeMachineID+0x234>
        	} else if(cursorPosition == 10) {
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b0a      	cmp	r3, #10
 8006e0a:	d10a      	bne.n	8006e22 <takeMachineID+0x1c6>
        		eepromData[idStart] = 5;
 8006e0c:	4a41      	ldr	r2, [pc, #260]	; (8006f14 <takeMachineID+0x2b8>)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	4413      	add	r3, r2
 8006e12:	2205      	movs	r2, #5
 8006e14:	701a      	strb	r2, [r3, #0]
        		machineID[machineIDLoc] = '5';
 8006e16:	4a3b      	ldr	r2, [pc, #236]	; (8006f04 <takeMachineID+0x2a8>)
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	2235      	movs	r2, #53	; 0x35
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	e036      	b.n	8006e90 <takeMachineID+0x234>
        	} else if(cursorPosition == 11) {
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b0b      	cmp	r3, #11
 8006e26:	d10a      	bne.n	8006e3e <takeMachineID+0x1e2>
        		eepromData[idStart] = 6;
 8006e28:	4a3a      	ldr	r2, [pc, #232]	; (8006f14 <takeMachineID+0x2b8>)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	2206      	movs	r2, #6
 8006e30:	701a      	strb	r2, [r3, #0]
        		machineID[machineIDLoc] = '6';
 8006e32:	4a34      	ldr	r2, [pc, #208]	; (8006f04 <takeMachineID+0x2a8>)
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4413      	add	r3, r2
 8006e38:	2236      	movs	r2, #54	; 0x36
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	e028      	b.n	8006e90 <takeMachineID+0x234>
        	} else if(cursorPosition == 12) {
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b0c      	cmp	r3, #12
 8006e42:	d10a      	bne.n	8006e5a <takeMachineID+0x1fe>
        		eepromData[idStart] = 7;
 8006e44:	4a33      	ldr	r2, [pc, #204]	; (8006f14 <takeMachineID+0x2b8>)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	4413      	add	r3, r2
 8006e4a:	2207      	movs	r2, #7
 8006e4c:	701a      	strb	r2, [r3, #0]
        		machineID[machineIDLoc] = '7';
 8006e4e:	4a2d      	ldr	r2, [pc, #180]	; (8006f04 <takeMachineID+0x2a8>)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	4413      	add	r3, r2
 8006e54:	2237      	movs	r2, #55	; 0x37
 8006e56:	701a      	strb	r2, [r3, #0]
 8006e58:	e01a      	b.n	8006e90 <takeMachineID+0x234>
        	} else if(cursorPosition == 13) {
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b0d      	cmp	r3, #13
 8006e5e:	d10a      	bne.n	8006e76 <takeMachineID+0x21a>
        		eepromData[idStart] = 8;
 8006e60:	4a2c      	ldr	r2, [pc, #176]	; (8006f14 <takeMachineID+0x2b8>)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	4413      	add	r3, r2
 8006e66:	2208      	movs	r2, #8
 8006e68:	701a      	strb	r2, [r3, #0]
        		machineID[machineIDLoc] = '8';
 8006e6a:	4a26      	ldr	r2, [pc, #152]	; (8006f04 <takeMachineID+0x2a8>)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	4413      	add	r3, r2
 8006e70:	2238      	movs	r2, #56	; 0x38
 8006e72:	701a      	strb	r2, [r3, #0]
 8006e74:	e00c      	b.n	8006e90 <takeMachineID+0x234>
        	} else if(cursorPosition == 14) {
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b0e      	cmp	r3, #14
 8006e7a:	d109      	bne.n	8006e90 <takeMachineID+0x234>
        		eepromData[idStart] = 9;
 8006e7c:	4a25      	ldr	r2, [pc, #148]	; (8006f14 <takeMachineID+0x2b8>)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	4413      	add	r3, r2
 8006e82:	2209      	movs	r2, #9
 8006e84:	701a      	strb	r2, [r3, #0]
        		machineID[machineIDLoc] = '9';
 8006e86:	4a1f      	ldr	r2, [pc, #124]	; (8006f04 <takeMachineID+0x2a8>)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	2239      	movs	r2, #57	; 0x39
 8006e8e:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	b2d9      	uxtb	r1, r3
 8006e94:	4a1b      	ldr	r2, [pc, #108]	; (8006f04 <takeMachineID+0x2a8>)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	4413      	add	r3, r2
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	f000 ff23 	bl	8007cea <lcd_print_char>

        	writeLoc++;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	607b      	str	r3, [r7, #4]
        	machineIDLoc++;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	3301      	adds	r3, #1
 8006eae:	60bb      	str	r3, [r7, #8]
        	idStart++;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8006eb6:	2096      	movs	r0, #150	; 0x96
 8006eb8:	f001 fc58 	bl	800876c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006ebc:	2104      	movs	r1, #4
 8006ebe:	4812      	ldr	r0, [pc, #72]	; (8006f08 <takeMachineID+0x2ac>)
 8006ec0:	f002 fa24 	bl	800930c <HAL_GPIO_ReadPin>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d147      	bne.n	8006f5a <takeMachineID+0x2fe>
            if(strlen(machineID) >= 1) {
 8006eca:	4b0e      	ldr	r3, [pc, #56]	; (8006f04 <takeMachineID+0x2a8>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d040      	beq.n	8006f54 <takeMachineID+0x2f8>

            	if(writeLoc > 5) {
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b05      	cmp	r3, #5
 8006ed6:	dd03      	ble.n	8006ee0 <takeMachineID+0x284>
            	    writeLoc--;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	607b      	str	r3, [r7, #4]
 8006ede:	e004      	b.n	8006eea <takeMachineID+0x28e>
            	} else if(writeLoc < 5) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	dc01      	bgt.n	8006eea <takeMachineID+0x28e>
            	    writeLoc = 5;
 8006ee6:	2305      	movs	r3, #5
 8006ee8:	607b      	str	r3, [r7, #4]
            	}

            	if(machineIDLoc > 0) {
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	dd17      	ble.n	8006f20 <takeMachineID+0x2c4>
            	    machineIDLoc--;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	60bb      	str	r3, [r7, #8]
            	    idStart--;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	e015      	b.n	8006f2a <takeMachineID+0x2ce>
 8006efe:	bf00      	nop
 8006f00:	2000000c 	.word	0x2000000c
 8006f04:	200001a0 	.word	0x200001a0
 8006f08:	40010800 	.word	0x40010800
 8006f0c:	0800dc88 	.word	0x0800dc88
 8006f10:	0800dc9c 	.word	0x0800dc9c
 8006f14:	20000128 	.word	0x20000128
 8006f18:	200002b4 	.word	0x200002b4
 8006f1c:	40011000 	.word	0x40011000
            	} else if(machineIDLoc < 0) {
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da01      	bge.n	8006f2a <takeMachineID+0x2ce>
            	    machineIDLoc = 0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60bb      	str	r3, [r7, #8]
            	}

            	eepromData[idStart] = '\0';
 8006f2a:	4a11      	ldr	r2, [pc, #68]	; (8006f70 <takeMachineID+0x314>)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	4413      	add	r3, r2
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
                machineID[machineIDLoc] = '\0';
 8006f34:	4a0f      	ldr	r2, [pc, #60]	; (8006f74 <takeMachineID+0x318>)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	4413      	add	r3, r2
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	3304      	adds	r3, #4
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	4619      	mov	r1, r3
 8006f48:	2001      	movs	r0, #1
 8006f4a:	f000 feef 	bl	8007d2c <lcd_delete_char>
                HAL_Delay(50);
 8006f4e:	2032      	movs	r0, #50	; 0x32
 8006f50:	f001 fc0c 	bl	800876c <HAL_Delay>
            }

            HAL_Delay(150);
 8006f54:	2096      	movs	r0, #150	; 0x96
 8006f56:	f001 fc09 	bl	800876c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	4619      	mov	r1, r3
 8006f60:	2002      	movs	r0, #2
 8006f62:	f000 fe8e 	bl	8007c82 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006f66:	e694      	b.n	8006c92 <takeMachineID+0x36>
    }
}
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20000128 	.word	0x20000128
 8006f74:	200001a0 	.word	0x200001a0

08006f78 <takeWifiSSID>:

void takeWifiSSID() {
 8006f78:	b590      	push	{r4, r7, lr}
 8006f7a:	b089      	sub	sp, #36	; 0x24
 8006f7c:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006f7e:	2001      	movs	r0, #1
 8006f80:	f000 fefc 	bl	8007d7c <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006f84:	2214      	movs	r2, #20
 8006f86:	2100      	movs	r1, #0
 8006f88:	4890      	ldr	r0, [pc, #576]	; (80071cc <takeWifiSSID+0x254>)
 8006f8a:	f005 fb46 	bl	800c61a <memset>
    HAL_Delay(100);
 8006f8e:	2064      	movs	r0, #100	; 0x64
 8006f90:	f001 fbec 	bl	800876c <HAL_Delay>

    int realCharPos = 1;
 8006f94:	2301      	movs	r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]
    cursorPosition = 1;
 8006f98:	4b8d      	ldr	r3, [pc, #564]	; (80071d0 <takeWifiSSID+0x258>)
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]
    page = 1;
 8006f9e:	4b8d      	ldr	r3, [pc, #564]	; (80071d4 <takeWifiSSID+0x25c>)
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006fa8:	2307      	movs	r3, #7
 8006faa:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006fac:	2101      	movs	r1, #1
 8006fae:	2002      	movs	r0, #2
 8006fb0:	f7f9 ff18 	bl	8000de4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006fb4:	2108      	movs	r1, #8
 8006fb6:	4888      	ldr	r0, [pc, #544]	; (80071d8 <takeWifiSSID+0x260>)
 8006fb8:	f002 f9a8 	bl	800930c <HAL_GPIO_ReadPin>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d138      	bne.n	8007034 <takeWifiSSID+0xbc>
            lcd_cursor(0);
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	f000 feda 	bl	8007d7c <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006fc8:	4880      	ldr	r0, [pc, #512]	; (80071cc <takeWifiSSID+0x254>)
 8006fca:	f7f9 f92b 	bl	8000224 <strlen>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b14      	cmp	r3, #20
 8006fd2:	d910      	bls.n	8006ff6 <takeWifiSSID+0x7e>
                lcd_clear();
 8006fd4:	f000 fea0 	bl	8007d18 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006fd8:	4a80      	ldr	r2, [pc, #512]	; (80071dc <takeWifiSSID+0x264>)
 8006fda:	2101      	movs	r1, #1
 8006fdc:	2001      	movs	r0, #1
 8006fde:	f000 fe6f 	bl	8007cc0 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006fe2:	4a7f      	ldr	r2, [pc, #508]	; (80071e0 <takeWifiSSID+0x268>)
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	2002      	movs	r0, #2
 8006fe8:	f000 fe6a 	bl	8007cc0 <lcd_print>
                HAL_Delay(1200);
 8006fec:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006ff0:	f001 fbbc 	bl	800876c <HAL_Delay>
                goto mainSSIDSection;
 8006ff4:	e7c3      	b.n	8006f7e <takeWifiSSID+0x6>
            }

            memcpy(&eepromData[ssidStartPos], (uint8_t *)wifiSSID, strlen(wifiSSID));
 8006ff6:	4b7b      	ldr	r3, [pc, #492]	; (80071e4 <takeWifiSSID+0x26c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a7b      	ldr	r2, [pc, #492]	; (80071e8 <takeWifiSSID+0x270>)
 8006ffc:	189c      	adds	r4, r3, r2
 8006ffe:	4873      	ldr	r0, [pc, #460]	; (80071cc <takeWifiSSID+0x254>)
 8007000:	f7f9 f910 	bl	8000224 <strlen>
 8007004:	4603      	mov	r3, r0
 8007006:	461a      	mov	r2, r3
 8007008:	4970      	ldr	r1, [pc, #448]	; (80071cc <takeWifiSSID+0x254>)
 800700a:	4620      	mov	r0, r4
 800700c:	f005 fb4a 	bl	800c6a4 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007010:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007014:	9302      	str	r3, [sp, #8]
 8007016:	236e      	movs	r3, #110	; 0x6e
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	4b73      	ldr	r3, [pc, #460]	; (80071e8 <takeWifiSSID+0x270>)
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	236e      	movs	r3, #110	; 0x6e
 8007020:	2200      	movs	r2, #0
 8007022:	21a0      	movs	r1, #160	; 0xa0
 8007024:	4871      	ldr	r0, [pc, #452]	; (80071ec <takeWifiSSID+0x274>)
 8007026:	f002 fc2b 	bl	8009880 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 800702a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800702e:	f001 fb9d 	bl	800876c <HAL_Delay>

            break;
 8007032:	e14b      	b.n	80072cc <takeWifiSSID+0x354>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007034:	2101      	movs	r1, #1
 8007036:	4868      	ldr	r0, [pc, #416]	; (80071d8 <takeWifiSSID+0x260>)
 8007038:	f002 f968 	bl	800930c <HAL_GPIO_ReadPin>
 800703c:	4603      	mov	r3, r0
 800703e:	2b01      	cmp	r3, #1
 8007040:	d166      	bne.n	8007110 <takeWifiSSID+0x198>
        	realCharPos++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]
        	if(realCharPos > 80) {
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b50      	cmp	r3, #80	; 0x50
 800704c:	dd01      	ble.n	8007052 <takeWifiSSID+0xda>
        		realCharPos = 1;
 800704e:	2301      	movs	r3, #1
 8007050:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 8007052:	4b5f      	ldr	r3, [pc, #380]	; (80071d0 <takeWifiSSID+0x258>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b10      	cmp	r3, #16
 8007058:	d152      	bne.n	8007100 <takeWifiSSID+0x188>
            	if(page == 1) {
 800705a:	4b5e      	ldr	r3, [pc, #376]	; (80071d4 <takeWifiSSID+0x25c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d10c      	bne.n	800707c <takeWifiSSID+0x104>
            		cursorPosition = 1;
 8007062:	4b5b      	ldr	r3, [pc, #364]	; (80071d0 <takeWifiSSID+0x258>)
 8007064:	2201      	movs	r2, #1
 8007066:	601a      	str	r2, [r3, #0]
            		page++;
 8007068:	4b5a      	ldr	r3, [pc, #360]	; (80071d4 <takeWifiSSID+0x25c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3301      	adds	r3, #1
 800706e:	4a59      	ldr	r2, [pc, #356]	; (80071d4 <takeWifiSSID+0x25c>)
 8007070:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8007072:	2102      	movs	r1, #2
 8007074:	2002      	movs	r0, #2
 8007076:	f7f9 feb5 	bl	8000de4 <printTemplate>
 800707a:	e046      	b.n	800710a <takeWifiSSID+0x192>
            	} else if(page == 2) {
 800707c:	4b55      	ldr	r3, [pc, #340]	; (80071d4 <takeWifiSSID+0x25c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b02      	cmp	r3, #2
 8007082:	d10c      	bne.n	800709e <takeWifiSSID+0x126>
            		cursorPosition = 1;
 8007084:	4b52      	ldr	r3, [pc, #328]	; (80071d0 <takeWifiSSID+0x258>)
 8007086:	2201      	movs	r2, #1
 8007088:	601a      	str	r2, [r3, #0]
            		page++;
 800708a:	4b52      	ldr	r3, [pc, #328]	; (80071d4 <takeWifiSSID+0x25c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3301      	adds	r3, #1
 8007090:	4a50      	ldr	r2, [pc, #320]	; (80071d4 <takeWifiSSID+0x25c>)
 8007092:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8007094:	2103      	movs	r1, #3
 8007096:	2002      	movs	r0, #2
 8007098:	f7f9 fea4 	bl	8000de4 <printTemplate>
 800709c:	e035      	b.n	800710a <takeWifiSSID+0x192>
            	} else if(page == 3) {
 800709e:	4b4d      	ldr	r3, [pc, #308]	; (80071d4 <takeWifiSSID+0x25c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d10c      	bne.n	80070c0 <takeWifiSSID+0x148>
            		cursorPosition = 1;
 80070a6:	4b4a      	ldr	r3, [pc, #296]	; (80071d0 <takeWifiSSID+0x258>)
 80070a8:	2201      	movs	r2, #1
 80070aa:	601a      	str	r2, [r3, #0]
            		page++;
 80070ac:	4b49      	ldr	r3, [pc, #292]	; (80071d4 <takeWifiSSID+0x25c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3301      	adds	r3, #1
 80070b2:	4a48      	ldr	r2, [pc, #288]	; (80071d4 <takeWifiSSID+0x25c>)
 80070b4:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 80070b6:	2104      	movs	r1, #4
 80070b8:	2002      	movs	r0, #2
 80070ba:	f7f9 fe93 	bl	8000de4 <printTemplate>
 80070be:	e024      	b.n	800710a <takeWifiSSID+0x192>
            	} else if(page == 4) {
 80070c0:	4b44      	ldr	r3, [pc, #272]	; (80071d4 <takeWifiSSID+0x25c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d10c      	bne.n	80070e2 <takeWifiSSID+0x16a>
            		cursorPosition = 1;
 80070c8:	4b41      	ldr	r3, [pc, #260]	; (80071d0 <takeWifiSSID+0x258>)
 80070ca:	2201      	movs	r2, #1
 80070cc:	601a      	str	r2, [r3, #0]
            		page++;
 80070ce:	4b41      	ldr	r3, [pc, #260]	; (80071d4 <takeWifiSSID+0x25c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3301      	adds	r3, #1
 80070d4:	4a3f      	ldr	r2, [pc, #252]	; (80071d4 <takeWifiSSID+0x25c>)
 80070d6:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 80070d8:	2105      	movs	r1, #5
 80070da:	2002      	movs	r0, #2
 80070dc:	f7f9 fe82 	bl	8000de4 <printTemplate>
 80070e0:	e013      	b.n	800710a <takeWifiSSID+0x192>
            	} else if(page == 5) {
 80070e2:	4b3c      	ldr	r3, [pc, #240]	; (80071d4 <takeWifiSSID+0x25c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	d10f      	bne.n	800710a <takeWifiSSID+0x192>
            		cursorPosition = 1;
 80070ea:	4b39      	ldr	r3, [pc, #228]	; (80071d0 <takeWifiSSID+0x258>)
 80070ec:	2201      	movs	r2, #1
 80070ee:	601a      	str	r2, [r3, #0]
            		page = 1;
 80070f0:	4b38      	ldr	r3, [pc, #224]	; (80071d4 <takeWifiSSID+0x25c>)
 80070f2:	2201      	movs	r2, #1
 80070f4:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80070f6:	2101      	movs	r1, #1
 80070f8:	2002      	movs	r0, #2
 80070fa:	f7f9 fe73 	bl	8000de4 <printTemplate>
 80070fe:	e004      	b.n	800710a <takeWifiSSID+0x192>
            	}
            } else {
            	cursorPosition++;
 8007100:	4b33      	ldr	r3, [pc, #204]	; (80071d0 <takeWifiSSID+0x258>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3301      	adds	r3, #1
 8007106:	4a32      	ldr	r2, [pc, #200]	; (80071d0 <takeWifiSSID+0x258>)
 8007108:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(150);
 800710a:	2096      	movs	r0, #150	; 0x96
 800710c:	f001 fb2e 	bl	800876c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007110:	2108      	movs	r1, #8
 8007112:	4837      	ldr	r0, [pc, #220]	; (80071f0 <takeWifiSSID+0x278>)
 8007114:	f002 f8fa 	bl	800930c <HAL_GPIO_ReadPin>
 8007118:	4603      	mov	r3, r0
 800711a:	2b01      	cmp	r3, #1
 800711c:	d172      	bne.n	8007204 <takeWifiSSID+0x28c>
        	realCharPos--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3b01      	subs	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]
        	if(realCharPos < 1) {
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	dc01      	bgt.n	800712e <takeWifiSSID+0x1b6>
        		realCharPos = 80;
 800712a:	2350      	movs	r3, #80	; 0x50
 800712c:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 800712e:	4b28      	ldr	r3, [pc, #160]	; (80071d0 <takeWifiSSID+0x258>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d15e      	bne.n	80071f4 <takeWifiSSID+0x27c>
            	if(page == 1) {
 8007136:	4b27      	ldr	r3, [pc, #156]	; (80071d4 <takeWifiSSID+0x25c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d10a      	bne.n	8007154 <takeWifiSSID+0x1dc>
            		cursorPosition = 16;
 800713e:	4b24      	ldr	r3, [pc, #144]	; (80071d0 <takeWifiSSID+0x258>)
 8007140:	2210      	movs	r2, #16
 8007142:	601a      	str	r2, [r3, #0]
            		page = 5;
 8007144:	4b23      	ldr	r3, [pc, #140]	; (80071d4 <takeWifiSSID+0x25c>)
 8007146:	2205      	movs	r2, #5
 8007148:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 800714a:	2105      	movs	r1, #5
 800714c:	2002      	movs	r0, #2
 800714e:	f7f9 fe49 	bl	8000de4 <printTemplate>
 8007152:	e054      	b.n	80071fe <takeWifiSSID+0x286>
            	} else if(page == 2) {
 8007154:	4b1f      	ldr	r3, [pc, #124]	; (80071d4 <takeWifiSSID+0x25c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b02      	cmp	r3, #2
 800715a:	d10a      	bne.n	8007172 <takeWifiSSID+0x1fa>
            		cursorPosition = 16;
 800715c:	4b1c      	ldr	r3, [pc, #112]	; (80071d0 <takeWifiSSID+0x258>)
 800715e:	2210      	movs	r2, #16
 8007160:	601a      	str	r2, [r3, #0]
            		page = 1;
 8007162:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <takeWifiSSID+0x25c>)
 8007164:	2201      	movs	r2, #1
 8007166:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8007168:	2101      	movs	r1, #1
 800716a:	2002      	movs	r0, #2
 800716c:	f7f9 fe3a 	bl	8000de4 <printTemplate>
 8007170:	e045      	b.n	80071fe <takeWifiSSID+0x286>
            	} else if(page == 3) {
 8007172:	4b18      	ldr	r3, [pc, #96]	; (80071d4 <takeWifiSSID+0x25c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b03      	cmp	r3, #3
 8007178:	d10a      	bne.n	8007190 <takeWifiSSID+0x218>
            		cursorPosition = 16;
 800717a:	4b15      	ldr	r3, [pc, #84]	; (80071d0 <takeWifiSSID+0x258>)
 800717c:	2210      	movs	r2, #16
 800717e:	601a      	str	r2, [r3, #0]
            		page = 2;
 8007180:	4b14      	ldr	r3, [pc, #80]	; (80071d4 <takeWifiSSID+0x25c>)
 8007182:	2202      	movs	r2, #2
 8007184:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8007186:	2102      	movs	r1, #2
 8007188:	2002      	movs	r0, #2
 800718a:	f7f9 fe2b 	bl	8000de4 <printTemplate>
 800718e:	e036      	b.n	80071fe <takeWifiSSID+0x286>
            	} else if(page == 4) {
 8007190:	4b10      	ldr	r3, [pc, #64]	; (80071d4 <takeWifiSSID+0x25c>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b04      	cmp	r3, #4
 8007196:	d10a      	bne.n	80071ae <takeWifiSSID+0x236>
            		cursorPosition = 16;
 8007198:	4b0d      	ldr	r3, [pc, #52]	; (80071d0 <takeWifiSSID+0x258>)
 800719a:	2210      	movs	r2, #16
 800719c:	601a      	str	r2, [r3, #0]
            		page = 3;
 800719e:	4b0d      	ldr	r3, [pc, #52]	; (80071d4 <takeWifiSSID+0x25c>)
 80071a0:	2203      	movs	r2, #3
 80071a2:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 80071a4:	2103      	movs	r1, #3
 80071a6:	2002      	movs	r0, #2
 80071a8:	f7f9 fe1c 	bl	8000de4 <printTemplate>
 80071ac:	e027      	b.n	80071fe <takeWifiSSID+0x286>
            	} else if(page == 5) {
 80071ae:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <takeWifiSSID+0x25c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d123      	bne.n	80071fe <takeWifiSSID+0x286>
            		cursorPosition = 16;
 80071b6:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <takeWifiSSID+0x258>)
 80071b8:	2210      	movs	r2, #16
 80071ba:	601a      	str	r2, [r3, #0]
            		page = 4;
 80071bc:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <takeWifiSSID+0x25c>)
 80071be:	2204      	movs	r2, #4
 80071c0:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 80071c2:	2104      	movs	r1, #4
 80071c4:	2002      	movs	r0, #2
 80071c6:	f7f9 fe0d 	bl	8000de4 <printTemplate>
 80071ca:	e018      	b.n	80071fe <takeWifiSSID+0x286>
 80071cc:	200001ac 	.word	0x200001ac
 80071d0:	20000000 	.word	0x20000000
 80071d4:	20000004 	.word	0x20000004
 80071d8:	40010800 	.word	0x40010800
 80071dc:	0800dcb0 	.word	0x0800dcb0
 80071e0:	0800dcc4 	.word	0x0800dcc4
 80071e4:	20000010 	.word	0x20000010
 80071e8:	20000128 	.word	0x20000128
 80071ec:	200002b4 	.word	0x200002b4
 80071f0:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80071f4:	4b37      	ldr	r3, [pc, #220]	; (80072d4 <takeWifiSSID+0x35c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	4a36      	ldr	r2, [pc, #216]	; (80072d4 <takeWifiSSID+0x35c>)
 80071fc:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(150);
 80071fe:	2096      	movs	r0, #150	; 0x96
 8007200:	f001 fab4 	bl	800876c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007204:	2102      	movs	r1, #2
 8007206:	4834      	ldr	r0, [pc, #208]	; (80072d8 <takeWifiSSID+0x360>)
 8007208:	f002 f880 	bl	800930c <HAL_GPIO_ReadPin>
 800720c:	4603      	mov	r3, r0
 800720e:	2b01      	cmp	r3, #1
 8007210:	d11e      	bne.n	8007250 <takeWifiSSID+0x2d8>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3b01      	subs	r3, #1
 8007216:	4618      	mov	r0, r3
 8007218:	f7f9 fac8 	bl	80007ac <getCharFromCursorPosition>
 800721c:	4603      	mov	r3, r0
 800721e:	4619      	mov	r1, r3
 8007220:	4a2e      	ldr	r2, [pc, #184]	; (80072dc <takeWifiSSID+0x364>)
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	4413      	add	r3, r2
 8007226:	460a      	mov	r2, r1
 8007228:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	b2d9      	uxtb	r1, r3
 800722e:	4a2b      	ldr	r2, [pc, #172]	; (80072dc <takeWifiSSID+0x364>)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	4413      	add	r3, r2
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	2001      	movs	r0, #1
 800723a:	f000 fd56 	bl	8007cea <lcd_print_char>

            writeLoc++;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3301      	adds	r3, #1
 8007242:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	3301      	adds	r3, #1
 8007248:	60bb      	str	r3, [r7, #8]

            HAL_Delay(150);
 800724a:	2096      	movs	r0, #150	; 0x96
 800724c:	f001 fa8e 	bl	800876c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007250:	2104      	movs	r1, #4
 8007252:	4821      	ldr	r0, [pc, #132]	; (80072d8 <takeWifiSSID+0x360>)
 8007254:	f002 f85a 	bl	800930c <HAL_GPIO_ReadPin>
 8007258:	4603      	mov	r3, r0
 800725a:	2b01      	cmp	r3, #1
 800725c:	d12e      	bne.n	80072bc <takeWifiSSID+0x344>
        	if(strlen(wifiSSID) >= 1) {
 800725e:	4b1f      	ldr	r3, [pc, #124]	; (80072dc <takeWifiSSID+0x364>)
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d027      	beq.n	80072b6 <takeWifiSSID+0x33e>
        		wifiSSID[wifiNameLoc] = '\0';
 8007266:	4a1d      	ldr	r2, [pc, #116]	; (80072dc <takeWifiSSID+0x364>)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4413      	add	r3, r2
 800726c:	2200      	movs	r2, #0
 800726e:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	3306      	adds	r3, #6
 8007276:	b2db      	uxtb	r3, r3
 8007278:	4619      	mov	r1, r3
 800727a:	2001      	movs	r0, #1
 800727c:	f000 fd56 	bl	8007d2c <lcd_delete_char>
        		HAL_Delay(50);
 8007280:	2032      	movs	r0, #50	; 0x32
 8007282:	f001 fa73 	bl	800876c <HAL_Delay>
        		if(writeLoc > 7) {
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b07      	cmp	r3, #7
 800728a:	dd03      	ble.n	8007294 <takeWifiSSID+0x31c>
        			writeLoc--;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3b01      	subs	r3, #1
 8007290:	607b      	str	r3, [r7, #4]
 8007292:	e004      	b.n	800729e <takeWifiSSID+0x326>
        		} else if(writeLoc < 7) {
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b06      	cmp	r3, #6
 8007298:	dc01      	bgt.n	800729e <takeWifiSSID+0x326>
        			writeLoc = 7;
 800729a:	2307      	movs	r3, #7
 800729c:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	dd03      	ble.n	80072ac <takeWifiSSID+0x334>
        			wifiNameLoc--;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	60bb      	str	r3, [r7, #8]
 80072aa:	e004      	b.n	80072b6 <takeWifiSSID+0x33e>
        		} else if(wifiNameLoc < 0) {
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	da01      	bge.n	80072b6 <takeWifiSSID+0x33e>
        			wifiNameLoc = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60bb      	str	r3, [r7, #8]
        		}
        	}

        	HAL_Delay(150);
 80072b6:	2096      	movs	r0, #150	; 0x96
 80072b8:	f001 fa58 	bl	800876c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <takeWifiSSID+0x35c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	4619      	mov	r1, r3
 80072c4:	2002      	movs	r0, #2
 80072c6:	f000 fcdc 	bl	8007c82 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80072ca:	e673      	b.n	8006fb4 <takeWifiSSID+0x3c>
    }
}
 80072cc:	bf00      	nop
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd90      	pop	{r4, r7, pc}
 80072d4:	20000000 	.word	0x20000000
 80072d8:	40010800 	.word	0x40010800
 80072dc:	200001ac 	.word	0x200001ac

080072e0 <takeWifiPass>:

void takeWifiPass() {
 80072e0:	b590      	push	{r4, r7, lr}
 80072e2:	b089      	sub	sp, #36	; 0x24
 80072e4:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 80072e6:	2001      	movs	r0, #1
 80072e8:	f000 fd48 	bl	8007d7c <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 80072ec:	2214      	movs	r2, #20
 80072ee:	2100      	movs	r1, #0
 80072f0:	4890      	ldr	r0, [pc, #576]	; (8007534 <takeWifiPass+0x254>)
 80072f2:	f005 f992 	bl	800c61a <memset>
    HAL_Delay(100);
 80072f6:	2064      	movs	r0, #100	; 0x64
 80072f8:	f001 fa38 	bl	800876c <HAL_Delay>

    int realCharPos = 1;
 80072fc:	2301      	movs	r3, #1
 80072fe:	60fb      	str	r3, [r7, #12]
    cursorPosition = 1;
 8007300:	4b8d      	ldr	r3, [pc, #564]	; (8007538 <takeWifiPass+0x258>)
 8007302:	2201      	movs	r2, #1
 8007304:	601a      	str	r2, [r3, #0]
    page = 1;
 8007306:	4b8d      	ldr	r3, [pc, #564]	; (800753c <takeWifiPass+0x25c>)
 8007308:	2201      	movs	r2, #1
 800730a:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800730c:	2300      	movs	r3, #0
 800730e:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8007310:	2307      	movs	r3, #7
 8007312:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007314:	2101      	movs	r1, #1
 8007316:	2003      	movs	r0, #3
 8007318:	f7f9 fd64 	bl	8000de4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800731c:	2108      	movs	r1, #8
 800731e:	4888      	ldr	r0, [pc, #544]	; (8007540 <takeWifiPass+0x260>)
 8007320:	f001 fff4 	bl	800930c <HAL_GPIO_ReadPin>
 8007324:	4603      	mov	r3, r0
 8007326:	2b01      	cmp	r3, #1
 8007328:	d138      	bne.n	800739c <takeWifiPass+0xbc>
            lcd_cursor(0);
 800732a:	2000      	movs	r0, #0
 800732c:	f000 fd26 	bl	8007d7c <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8007330:	4880      	ldr	r0, [pc, #512]	; (8007534 <takeWifiPass+0x254>)
 8007332:	f7f8 ff77 	bl	8000224 <strlen>
 8007336:	4603      	mov	r3, r0
 8007338:	2b14      	cmp	r3, #20
 800733a:	d910      	bls.n	800735e <takeWifiPass+0x7e>
                lcd_clear();
 800733c:	f000 fcec 	bl	8007d18 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007340:	4a80      	ldr	r2, [pc, #512]	; (8007544 <takeWifiPass+0x264>)
 8007342:	2101      	movs	r1, #1
 8007344:	2001      	movs	r0, #1
 8007346:	f000 fcbb 	bl	8007cc0 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 800734a:	4a7f      	ldr	r2, [pc, #508]	; (8007548 <takeWifiPass+0x268>)
 800734c:	2101      	movs	r1, #1
 800734e:	2002      	movs	r0, #2
 8007350:	f000 fcb6 	bl	8007cc0 <lcd_print>
                HAL_Delay(1200);
 8007354:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8007358:	f001 fa08 	bl	800876c <HAL_Delay>
                goto mainPASSSection;
 800735c:	e7c3      	b.n	80072e6 <takeWifiPass+0x6>
            }

            memcpy(&eepromData[passStartPos], (uint8_t *)wifiPass, strlen(wifiPass));
 800735e:	4b7b      	ldr	r3, [pc, #492]	; (800754c <takeWifiPass+0x26c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a7b      	ldr	r2, [pc, #492]	; (8007550 <takeWifiPass+0x270>)
 8007364:	189c      	adds	r4, r3, r2
 8007366:	4873      	ldr	r0, [pc, #460]	; (8007534 <takeWifiPass+0x254>)
 8007368:	f7f8 ff5c 	bl	8000224 <strlen>
 800736c:	4603      	mov	r3, r0
 800736e:	461a      	mov	r2, r3
 8007370:	4970      	ldr	r1, [pc, #448]	; (8007534 <takeWifiPass+0x254>)
 8007372:	4620      	mov	r0, r4
 8007374:	f005 f996 	bl	800c6a4 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007378:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800737c:	9302      	str	r3, [sp, #8]
 800737e:	236e      	movs	r3, #110	; 0x6e
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	4b73      	ldr	r3, [pc, #460]	; (8007550 <takeWifiPass+0x270>)
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	236e      	movs	r3, #110	; 0x6e
 8007388:	2200      	movs	r2, #0
 800738a:	21a0      	movs	r1, #160	; 0xa0
 800738c:	4871      	ldr	r0, [pc, #452]	; (8007554 <takeWifiPass+0x274>)
 800738e:	f002 fa77 	bl	8009880 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8007392:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007396:	f001 f9e9 	bl	800876c <HAL_Delay>

            break;
 800739a:	e14b      	b.n	8007634 <takeWifiPass+0x354>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800739c:	2101      	movs	r1, #1
 800739e:	4868      	ldr	r0, [pc, #416]	; (8007540 <takeWifiPass+0x260>)
 80073a0:	f001 ffb4 	bl	800930c <HAL_GPIO_ReadPin>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d166      	bne.n	8007478 <takeWifiPass+0x198>
        	realCharPos++;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3301      	adds	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]
        	if(realCharPos > 80) {
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b50      	cmp	r3, #80	; 0x50
 80073b4:	dd01      	ble.n	80073ba <takeWifiPass+0xda>
        	    realCharPos = 1;
 80073b6:	2301      	movs	r3, #1
 80073b8:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 80073ba:	4b5f      	ldr	r3, [pc, #380]	; (8007538 <takeWifiPass+0x258>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b10      	cmp	r3, #16
 80073c0:	d152      	bne.n	8007468 <takeWifiPass+0x188>
            	if(page == 1) {
 80073c2:	4b5e      	ldr	r3, [pc, #376]	; (800753c <takeWifiPass+0x25c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d10c      	bne.n	80073e4 <takeWifiPass+0x104>
            		cursorPosition = 1;
 80073ca:	4b5b      	ldr	r3, [pc, #364]	; (8007538 <takeWifiPass+0x258>)
 80073cc:	2201      	movs	r2, #1
 80073ce:	601a      	str	r2, [r3, #0]
            		page++;
 80073d0:	4b5a      	ldr	r3, [pc, #360]	; (800753c <takeWifiPass+0x25c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3301      	adds	r3, #1
 80073d6:	4a59      	ldr	r2, [pc, #356]	; (800753c <takeWifiPass+0x25c>)
 80073d8:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 80073da:	2102      	movs	r1, #2
 80073dc:	2003      	movs	r0, #3
 80073de:	f7f9 fd01 	bl	8000de4 <printTemplate>
 80073e2:	e046      	b.n	8007472 <takeWifiPass+0x192>
            	} else if(page == 2) {
 80073e4:	4b55      	ldr	r3, [pc, #340]	; (800753c <takeWifiPass+0x25c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d10c      	bne.n	8007406 <takeWifiPass+0x126>
            		cursorPosition = 1;
 80073ec:	4b52      	ldr	r3, [pc, #328]	; (8007538 <takeWifiPass+0x258>)
 80073ee:	2201      	movs	r2, #1
 80073f0:	601a      	str	r2, [r3, #0]
            		page++;
 80073f2:	4b52      	ldr	r3, [pc, #328]	; (800753c <takeWifiPass+0x25c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3301      	adds	r3, #1
 80073f8:	4a50      	ldr	r2, [pc, #320]	; (800753c <takeWifiPass+0x25c>)
 80073fa:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80073fc:	2103      	movs	r1, #3
 80073fe:	2003      	movs	r0, #3
 8007400:	f7f9 fcf0 	bl	8000de4 <printTemplate>
 8007404:	e035      	b.n	8007472 <takeWifiPass+0x192>
            	} else if(page == 3) {
 8007406:	4b4d      	ldr	r3, [pc, #308]	; (800753c <takeWifiPass+0x25c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b03      	cmp	r3, #3
 800740c:	d10c      	bne.n	8007428 <takeWifiPass+0x148>
            		cursorPosition = 1;
 800740e:	4b4a      	ldr	r3, [pc, #296]	; (8007538 <takeWifiPass+0x258>)
 8007410:	2201      	movs	r2, #1
 8007412:	601a      	str	r2, [r3, #0]
            		page++;
 8007414:	4b49      	ldr	r3, [pc, #292]	; (800753c <takeWifiPass+0x25c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3301      	adds	r3, #1
 800741a:	4a48      	ldr	r2, [pc, #288]	; (800753c <takeWifiPass+0x25c>)
 800741c:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 800741e:	2104      	movs	r1, #4
 8007420:	2003      	movs	r0, #3
 8007422:	f7f9 fcdf 	bl	8000de4 <printTemplate>
 8007426:	e024      	b.n	8007472 <takeWifiPass+0x192>
            	} else if(page == 4) {
 8007428:	4b44      	ldr	r3, [pc, #272]	; (800753c <takeWifiPass+0x25c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b04      	cmp	r3, #4
 800742e:	d10c      	bne.n	800744a <takeWifiPass+0x16a>
            		cursorPosition = 1;
 8007430:	4b41      	ldr	r3, [pc, #260]	; (8007538 <takeWifiPass+0x258>)
 8007432:	2201      	movs	r2, #1
 8007434:	601a      	str	r2, [r3, #0]
            		page++;
 8007436:	4b41      	ldr	r3, [pc, #260]	; (800753c <takeWifiPass+0x25c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3301      	adds	r3, #1
 800743c:	4a3f      	ldr	r2, [pc, #252]	; (800753c <takeWifiPass+0x25c>)
 800743e:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8007440:	2105      	movs	r1, #5
 8007442:	2003      	movs	r0, #3
 8007444:	f7f9 fcce 	bl	8000de4 <printTemplate>
 8007448:	e013      	b.n	8007472 <takeWifiPass+0x192>
            	} else if(page == 5) {
 800744a:	4b3c      	ldr	r3, [pc, #240]	; (800753c <takeWifiPass+0x25c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b05      	cmp	r3, #5
 8007450:	d10f      	bne.n	8007472 <takeWifiPass+0x192>
            		cursorPosition = 1;
 8007452:	4b39      	ldr	r3, [pc, #228]	; (8007538 <takeWifiPass+0x258>)
 8007454:	2201      	movs	r2, #1
 8007456:	601a      	str	r2, [r3, #0]
            		page = 1;
 8007458:	4b38      	ldr	r3, [pc, #224]	; (800753c <takeWifiPass+0x25c>)
 800745a:	2201      	movs	r2, #1
 800745c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800745e:	2101      	movs	r1, #1
 8007460:	2003      	movs	r0, #3
 8007462:	f7f9 fcbf 	bl	8000de4 <printTemplate>
 8007466:	e004      	b.n	8007472 <takeWifiPass+0x192>
            	}
            } else {
            	cursorPosition++;
 8007468:	4b33      	ldr	r3, [pc, #204]	; (8007538 <takeWifiPass+0x258>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3301      	adds	r3, #1
 800746e:	4a32      	ldr	r2, [pc, #200]	; (8007538 <takeWifiPass+0x258>)
 8007470:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(150);
 8007472:	2096      	movs	r0, #150	; 0x96
 8007474:	f001 f97a 	bl	800876c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007478:	2108      	movs	r1, #8
 800747a:	4837      	ldr	r0, [pc, #220]	; (8007558 <takeWifiPass+0x278>)
 800747c:	f001 ff46 	bl	800930c <HAL_GPIO_ReadPin>
 8007480:	4603      	mov	r3, r0
 8007482:	2b01      	cmp	r3, #1
 8007484:	d172      	bne.n	800756c <takeWifiPass+0x28c>
        	realCharPos--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3b01      	subs	r3, #1
 800748a:	60fb      	str	r3, [r7, #12]
        	if(realCharPos < 1) {
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	dc01      	bgt.n	8007496 <takeWifiPass+0x1b6>
        	    realCharPos = 80;
 8007492:	2350      	movs	r3, #80	; 0x50
 8007494:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 8007496:	4b28      	ldr	r3, [pc, #160]	; (8007538 <takeWifiPass+0x258>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d15e      	bne.n	800755c <takeWifiPass+0x27c>
            	if(page == 1) {
 800749e:	4b27      	ldr	r3, [pc, #156]	; (800753c <takeWifiPass+0x25c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d10a      	bne.n	80074bc <takeWifiPass+0x1dc>
            		cursorPosition = 16;
 80074a6:	4b24      	ldr	r3, [pc, #144]	; (8007538 <takeWifiPass+0x258>)
 80074a8:	2210      	movs	r2, #16
 80074aa:	601a      	str	r2, [r3, #0]
            		page = 5;
 80074ac:	4b23      	ldr	r3, [pc, #140]	; (800753c <takeWifiPass+0x25c>)
 80074ae:	2205      	movs	r2, #5
 80074b0:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80074b2:	2105      	movs	r1, #5
 80074b4:	2003      	movs	r0, #3
 80074b6:	f7f9 fc95 	bl	8000de4 <printTemplate>
 80074ba:	e054      	b.n	8007566 <takeWifiPass+0x286>
            	} else if(page == 2) {
 80074bc:	4b1f      	ldr	r3, [pc, #124]	; (800753c <takeWifiPass+0x25c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d10a      	bne.n	80074da <takeWifiPass+0x1fa>
            		cursorPosition = 16;
 80074c4:	4b1c      	ldr	r3, [pc, #112]	; (8007538 <takeWifiPass+0x258>)
 80074c6:	2210      	movs	r2, #16
 80074c8:	601a      	str	r2, [r3, #0]
            		page = 1;
 80074ca:	4b1c      	ldr	r3, [pc, #112]	; (800753c <takeWifiPass+0x25c>)
 80074cc:	2201      	movs	r2, #1
 80074ce:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80074d0:	2101      	movs	r1, #1
 80074d2:	2003      	movs	r0, #3
 80074d4:	f7f9 fc86 	bl	8000de4 <printTemplate>
 80074d8:	e045      	b.n	8007566 <takeWifiPass+0x286>
            	} else if(page == 3) {
 80074da:	4b18      	ldr	r3, [pc, #96]	; (800753c <takeWifiPass+0x25c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d10a      	bne.n	80074f8 <takeWifiPass+0x218>
            		cursorPosition = 16;
 80074e2:	4b15      	ldr	r3, [pc, #84]	; (8007538 <takeWifiPass+0x258>)
 80074e4:	2210      	movs	r2, #16
 80074e6:	601a      	str	r2, [r3, #0]
            		page = 2;
 80074e8:	4b14      	ldr	r3, [pc, #80]	; (800753c <takeWifiPass+0x25c>)
 80074ea:	2202      	movs	r2, #2
 80074ec:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80074ee:	2102      	movs	r1, #2
 80074f0:	2003      	movs	r0, #3
 80074f2:	f7f9 fc77 	bl	8000de4 <printTemplate>
 80074f6:	e036      	b.n	8007566 <takeWifiPass+0x286>
            	} else if(page == 4) {
 80074f8:	4b10      	ldr	r3, [pc, #64]	; (800753c <takeWifiPass+0x25c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d10a      	bne.n	8007516 <takeWifiPass+0x236>
            		cursorPosition = 16;
 8007500:	4b0d      	ldr	r3, [pc, #52]	; (8007538 <takeWifiPass+0x258>)
 8007502:	2210      	movs	r2, #16
 8007504:	601a      	str	r2, [r3, #0]
            		page = 3;
 8007506:	4b0d      	ldr	r3, [pc, #52]	; (800753c <takeWifiPass+0x25c>)
 8007508:	2203      	movs	r2, #3
 800750a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 800750c:	2103      	movs	r1, #3
 800750e:	2003      	movs	r0, #3
 8007510:	f7f9 fc68 	bl	8000de4 <printTemplate>
 8007514:	e027      	b.n	8007566 <takeWifiPass+0x286>
            	} else if(page == 5) {
 8007516:	4b09      	ldr	r3, [pc, #36]	; (800753c <takeWifiPass+0x25c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b05      	cmp	r3, #5
 800751c:	d123      	bne.n	8007566 <takeWifiPass+0x286>
            		cursorPosition = 16;
 800751e:	4b06      	ldr	r3, [pc, #24]	; (8007538 <takeWifiPass+0x258>)
 8007520:	2210      	movs	r2, #16
 8007522:	601a      	str	r2, [r3, #0]
            		page = 4;
 8007524:	4b05      	ldr	r3, [pc, #20]	; (800753c <takeWifiPass+0x25c>)
 8007526:	2204      	movs	r2, #4
 8007528:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 800752a:	2104      	movs	r1, #4
 800752c:	2003      	movs	r0, #3
 800752e:	f7f9 fc59 	bl	8000de4 <printTemplate>
 8007532:	e018      	b.n	8007566 <takeWifiPass+0x286>
 8007534:	200001c0 	.word	0x200001c0
 8007538:	20000000 	.word	0x20000000
 800753c:	20000004 	.word	0x20000004
 8007540:	40010800 	.word	0x40010800
 8007544:	0800dcb0 	.word	0x0800dcb0
 8007548:	0800dcd8 	.word	0x0800dcd8
 800754c:	20000014 	.word	0x20000014
 8007550:	20000128 	.word	0x20000128
 8007554:	200002b4 	.word	0x200002b4
 8007558:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800755c:	4b37      	ldr	r3, [pc, #220]	; (800763c <takeWifiPass+0x35c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3b01      	subs	r3, #1
 8007562:	4a36      	ldr	r2, [pc, #216]	; (800763c <takeWifiPass+0x35c>)
 8007564:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(150);
 8007566:	2096      	movs	r0, #150	; 0x96
 8007568:	f001 f900 	bl	800876c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800756c:	2102      	movs	r1, #2
 800756e:	4834      	ldr	r0, [pc, #208]	; (8007640 <takeWifiPass+0x360>)
 8007570:	f001 fecc 	bl	800930c <HAL_GPIO_ReadPin>
 8007574:	4603      	mov	r3, r0
 8007576:	2b01      	cmp	r3, #1
 8007578:	d11e      	bne.n	80075b8 <takeWifiPass+0x2d8>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	3b01      	subs	r3, #1
 800757e:	4618      	mov	r0, r3
 8007580:	f7f9 f914 	bl	80007ac <getCharFromCursorPosition>
 8007584:	4603      	mov	r3, r0
 8007586:	4619      	mov	r1, r3
 8007588:	4a2e      	ldr	r2, [pc, #184]	; (8007644 <takeWifiPass+0x364>)
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	4413      	add	r3, r2
 800758e:	460a      	mov	r2, r1
 8007590:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	b2d9      	uxtb	r1, r3
 8007596:	4a2b      	ldr	r2, [pc, #172]	; (8007644 <takeWifiPass+0x364>)
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4413      	add	r3, r2
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	2001      	movs	r0, #1
 80075a2:	f000 fba2 	bl	8007cea <lcd_print_char>

            writeLoc++;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3301      	adds	r3, #1
 80075aa:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	3301      	adds	r3, #1
 80075b0:	60bb      	str	r3, [r7, #8]

            HAL_Delay(150);
 80075b2:	2096      	movs	r0, #150	; 0x96
 80075b4:	f001 f8da 	bl	800876c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80075b8:	2104      	movs	r1, #4
 80075ba:	4821      	ldr	r0, [pc, #132]	; (8007640 <takeWifiPass+0x360>)
 80075bc:	f001 fea6 	bl	800930c <HAL_GPIO_ReadPin>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d12e      	bne.n	8007624 <takeWifiPass+0x344>
            if(strlen(wifiPass) >= 1) {
 80075c6:	4b1f      	ldr	r3, [pc, #124]	; (8007644 <takeWifiPass+0x364>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d027      	beq.n	800761e <takeWifiPass+0x33e>
            	wifiPass[wifiPassLoc] = '\0';
 80075ce:	4a1d      	ldr	r2, [pc, #116]	; (8007644 <takeWifiPass+0x364>)
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	4413      	add	r3, r2
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	3306      	adds	r3, #6
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	4619      	mov	r1, r3
 80075e2:	2001      	movs	r0, #1
 80075e4:	f000 fba2 	bl	8007d2c <lcd_delete_char>
            	HAL_Delay(50);
 80075e8:	2032      	movs	r0, #50	; 0x32
 80075ea:	f001 f8bf 	bl	800876c <HAL_Delay>

            	if(writeLoc > 7) {
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b07      	cmp	r3, #7
 80075f2:	dd03      	ble.n	80075fc <takeWifiPass+0x31c>
            		writeLoc--;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	e004      	b.n	8007606 <takeWifiPass+0x326>
            	} else if(writeLoc < 7) {
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b06      	cmp	r3, #6
 8007600:	dc01      	bgt.n	8007606 <takeWifiPass+0x326>
            		writeLoc = 7;
 8007602:	2307      	movs	r3, #7
 8007604:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	dd03      	ble.n	8007614 <takeWifiPass+0x334>
            		wifiPassLoc--;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	3b01      	subs	r3, #1
 8007610:	60bb      	str	r3, [r7, #8]
 8007612:	e004      	b.n	800761e <takeWifiPass+0x33e>
            	} else if(wifiPassLoc < 0) {
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	da01      	bge.n	800761e <takeWifiPass+0x33e>
            		wifiPassLoc = 0;
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]
            	}
            }

            HAL_Delay(150);
 800761e:	2096      	movs	r0, #150	; 0x96
 8007620:	f001 f8a4 	bl	800876c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007624:	4b05      	ldr	r3, [pc, #20]	; (800763c <takeWifiPass+0x35c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	4619      	mov	r1, r3
 800762c:	2002      	movs	r0, #2
 800762e:	f000 fb28 	bl	8007c82 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007632:	e673      	b.n	800731c <takeWifiPass+0x3c>
    }
}
 8007634:	bf00      	nop
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	bd90      	pop	{r4, r7, pc}
 800763c:	20000000 	.word	0x20000000
 8007640:	40010800 	.word	0x40010800
 8007644:	200001c0 	.word	0x200001c0

08007648 <mergeData>:

char* mergeData() {
 8007648:	b580      	push	{r7, lr}
 800764a:	b09c      	sub	sp, #112	; 0x70
 800764c:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 800764e:	2300      	movs	r3, #0
 8007650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007652:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007656:	2228      	movs	r2, #40	; 0x28
 8007658:	2100      	movs	r1, #0
 800765a:	4618      	mov	r0, r3
 800765c:	f004 ffdd 	bl	800c61a <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007660:	4b67      	ldr	r3, [pc, #412]	; (8007800 <mergeData+0x1b8>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	713b      	strb	r3, [r7, #4]
 8007666:	4b67      	ldr	r3, [pc, #412]	; (8007804 <mergeData+0x1bc>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	717b      	strb	r3, [r7, #5]
 800766c:	4b66      	ldr	r3, [pc, #408]	; (8007808 <mergeData+0x1c0>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	71bb      	strb	r3, [r7, #6]
 8007672:	4b66      	ldr	r3, [pc, #408]	; (800780c <mergeData+0x1c4>)
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	71fb      	strb	r3, [r7, #7]
 8007678:	4b65      	ldr	r3, [pc, #404]	; (8007810 <mergeData+0x1c8>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	723b      	strb	r3, [r7, #8]
 800767e:	4b65      	ldr	r3, [pc, #404]	; (8007814 <mergeData+0x1cc>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	727b      	strb	r3, [r7, #9]
 8007684:	4b64      	ldr	r3, [pc, #400]	; (8007818 <mergeData+0x1d0>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	72bb      	strb	r3, [r7, #10]
 800768a:	4b64      	ldr	r3, [pc, #400]	; (800781c <mergeData+0x1d4>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	72fb      	strb	r3, [r7, #11]
 8007690:	4b63      	ldr	r3, [pc, #396]	; (8007820 <mergeData+0x1d8>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	733b      	strb	r3, [r7, #12]
 8007696:	4b63      	ldr	r3, [pc, #396]	; (8007824 <mergeData+0x1dc>)
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	737b      	strb	r3, [r7, #13]
 800769c:	4b62      	ldr	r3, [pc, #392]	; (8007828 <mergeData+0x1e0>)
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	73bb      	strb	r3, [r7, #14]
 80076a2:	4b62      	ldr	r3, [pc, #392]	; (800782c <mergeData+0x1e4>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	73fb      	strb	r3, [r7, #15]
 80076a8:	4b61      	ldr	r3, [pc, #388]	; (8007830 <mergeData+0x1e8>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	743b      	strb	r3, [r7, #16]
 80076ae:	4b61      	ldr	r3, [pc, #388]	; (8007834 <mergeData+0x1ec>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	747b      	strb	r3, [r7, #17]
 80076b4:	4b60      	ldr	r3, [pc, #384]	; (8007838 <mergeData+0x1f0>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	74bb      	strb	r3, [r7, #18]
 80076ba:	4b60      	ldr	r3, [pc, #384]	; (800783c <mergeData+0x1f4>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	74fb      	strb	r3, [r7, #19]
 80076c0:	4b5f      	ldr	r3, [pc, #380]	; (8007840 <mergeData+0x1f8>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	753b      	strb	r3, [r7, #20]
 80076c6:	4b5f      	ldr	r3, [pc, #380]	; (8007844 <mergeData+0x1fc>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	757b      	strb	r3, [r7, #21]
 80076cc:	4b5e      	ldr	r3, [pc, #376]	; (8007848 <mergeData+0x200>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	75bb      	strb	r3, [r7, #22]
 80076d2:	4b5e      	ldr	r3, [pc, #376]	; (800784c <mergeData+0x204>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	75fb      	strb	r3, [r7, #23]
 80076d8:	4b5d      	ldr	r3, [pc, #372]	; (8007850 <mergeData+0x208>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	763b      	strb	r3, [r7, #24]
 80076de:	4b5d      	ldr	r3, [pc, #372]	; (8007854 <mergeData+0x20c>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	767b      	strb	r3, [r7, #25]
 80076e4:	4b5c      	ldr	r3, [pc, #368]	; (8007858 <mergeData+0x210>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	76bb      	strb	r3, [r7, #26]
 80076ea:	4b5c      	ldr	r3, [pc, #368]	; (800785c <mergeData+0x214>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	76fb      	strb	r3, [r7, #27]
 80076f0:	4b5b      	ldr	r3, [pc, #364]	; (8007860 <mergeData+0x218>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	773b      	strb	r3, [r7, #28]
 80076f6:	4b5b      	ldr	r3, [pc, #364]	; (8007864 <mergeData+0x21c>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	777b      	strb	r3, [r7, #29]
 80076fc:	4b5a      	ldr	r3, [pc, #360]	; (8007868 <mergeData+0x220>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	77bb      	strb	r3, [r7, #30]
 8007702:	4b5a      	ldr	r3, [pc, #360]	; (800786c <mergeData+0x224>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	77fb      	strb	r3, [r7, #31]
 8007708:	4b59      	ldr	r3, [pc, #356]	; (8007870 <mergeData+0x228>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	f887 3020 	strb.w	r3, [r7, #32]
 8007710:	4b58      	ldr	r3, [pc, #352]	; (8007874 <mergeData+0x22c>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007718:	4b57      	ldr	r3, [pc, #348]	; (8007878 <mergeData+0x230>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007720:	4b56      	ldr	r3, [pc, #344]	; (800787c <mergeData+0x234>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007728:	4b55      	ldr	r3, [pc, #340]	; (8007880 <mergeData+0x238>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007730:	4b54      	ldr	r3, [pc, #336]	; (8007884 <mergeData+0x23c>)
 8007732:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007736:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 800773a:	4b52      	ldr	r3, [pc, #328]	; (8007884 <mergeData+0x23c>)
 800773c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007740:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007744:	4b4f      	ldr	r3, [pc, #316]	; (8007884 <mergeData+0x23c>)
 8007746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800774a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 800774e:	4b4d      	ldr	r3, [pc, #308]	; (8007884 <mergeData+0x23c>)
 8007750:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007754:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007758:	4b4a      	ldr	r3, [pc, #296]	; (8007884 <mergeData+0x23c>)
 800775a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800775e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8007762:	4b48      	ldr	r3, [pc, #288]	; (8007884 <mergeData+0x23c>)
 8007764:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007768:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 800776c:	4b45      	ldr	r3, [pc, #276]	; (8007884 <mergeData+0x23c>)
 800776e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 8007776:	4b43      	ldr	r3, [pc, #268]	; (8007884 <mergeData+0x23c>)
 8007778:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 800777c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007780:	4b40      	ldr	r3, [pc, #256]	; (8007884 <mergeData+0x23c>)
 8007782:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007786:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 800778a:	4b3e      	ldr	r3, [pc, #248]	; (8007884 <mergeData+0x23c>)
 800778c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007790:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007794:	2306      	movs	r3, #6
 8007796:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800779a:	2300      	movs	r3, #0
 800779c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800779e:	e015      	b.n	80077cc <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 80077a0:	1d3a      	adds	r2, r7, #4
 80077a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a4:	4413      	add	r3, r2
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077ae:	4936      	ldr	r1, [pc, #216]	; (8007888 <mergeData+0x240>)
 80077b0:	4618      	mov	r0, r3
 80077b2:	f004 fec1 	bl	800c538 <siprintf>
	    strcat(combinedString, temp);
 80077b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80077ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80077be:	4611      	mov	r1, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f004 ff1b 	bl	800c5fc <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80077c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c8:	3301      	adds	r3, #1
 80077ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ce:	2b2b      	cmp	r3, #43	; 0x2b
 80077d0:	d9e6      	bls.n	80077a0 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80077d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7f8 fd24 	bl	8000224 <strlen>
 80077dc:	4603      	mov	r3, r0
 80077de:	3301      	adds	r3, #1
 80077e0:	4618      	mov	r0, r3
 80077e2:	f004 fdc1 	bl	800c368 <malloc>
 80077e6:	4603      	mov	r3, r0
 80077e8:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80077ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80077ee:	4619      	mov	r1, r3
 80077f0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80077f2:	f004 ff65 	bl	800c6c0 <strcpy>
	return result;
 80077f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3770      	adds	r7, #112	; 0x70
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	20000233 	.word	0x20000233
 8007804:	20000225 	.word	0x20000225
 8007808:	20000228 	.word	0x20000228
 800780c:	20000229 	.word	0x20000229
 8007810:	2000022a 	.word	0x2000022a
 8007814:	20000231 	.word	0x20000231
 8007818:	2000022b 	.word	0x2000022b
 800781c:	2000022c 	.word	0x2000022c
 8007820:	20000230 	.word	0x20000230
 8007824:	2000022d 	.word	0x2000022d
 8007828:	2000023d 	.word	0x2000023d
 800782c:	2000022e 	.word	0x2000022e
 8007830:	2000023e 	.word	0x2000023e
 8007834:	2000022f 	.word	0x2000022f
 8007838:	2000023f 	.word	0x2000023f
 800783c:	20000232 	.word	0x20000232
 8007840:	20000234 	.word	0x20000234
 8007844:	20000235 	.word	0x20000235
 8007848:	20000236 	.word	0x20000236
 800784c:	20000237 	.word	0x20000237
 8007850:	20000238 	.word	0x20000238
 8007854:	20000239 	.word	0x20000239
 8007858:	2000023a 	.word	0x2000023a
 800785c:	2000023b 	.word	0x2000023b
 8007860:	2000023c 	.word	0x2000023c
 8007864:	20000240 	.word	0x20000240
 8007868:	20000242 	.word	0x20000242
 800786c:	20000221 	.word	0x20000221
 8007870:	20000222 	.word	0x20000222
 8007874:	20000008 	.word	0x20000008
 8007878:	20000009 	.word	0x20000009
 800787c:	20000223 	.word	0x20000223
 8007880:	20000245 	.word	0x20000245
 8007884:	20000128 	.word	0x20000128
 8007888:	0800dcec 	.word	0x0800dcec

0800788c <convertAndSendData>:

void convertAndSendData() {
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 8007892:	4b1a      	ldr	r3, [pc, #104]	; (80078fc <convertAndSendData+0x70>)
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10a      	bne.n	80078b0 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 800789a:	4a19      	ldr	r2, [pc, #100]	; (8007900 <convertAndSendData+0x74>)
 800789c:	2101      	movs	r1, #1
 800789e:	2001      	movs	r0, #1
 80078a0:	f000 fa0e 	bl	8007cc0 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 80078a4:	4a17      	ldr	r2, [pc, #92]	; (8007904 <convertAndSendData+0x78>)
 80078a6:	2101      	movs	r1, #1
 80078a8:	2002      	movs	r0, #2
 80078aa:	f000 fa09 	bl	8007cc0 <lcd_print>
 80078ae:	e009      	b.n	80078c4 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80078b0:	4a15      	ldr	r2, [pc, #84]	; (8007908 <convertAndSendData+0x7c>)
 80078b2:	2101      	movs	r1, #1
 80078b4:	2001      	movs	r0, #1
 80078b6:	f000 fa03 	bl	8007cc0 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80078ba:	4a14      	ldr	r2, [pc, #80]	; (800790c <convertAndSendData+0x80>)
 80078bc:	2101      	movs	r1, #1
 80078be:	2002      	movs	r0, #2
 80078c0:	f000 f9fe 	bl	8007cc0 <lcd_print>
	}
	for(int i=0; i<2; i++) {
 80078c4:	2300      	movs	r3, #0
 80078c6:	607b      	str	r3, [r7, #4]
 80078c8:	e00a      	b.n	80078e0 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 80078ca:	f7ff febd 	bl	8007648 <mergeData>
 80078ce:	4603      	mov	r3, r0
 80078d0:	461a      	mov	r2, r3
 80078d2:	490f      	ldr	r1, [pc, #60]	; (8007910 <convertAndSendData+0x84>)
 80078d4:	480f      	ldr	r0, [pc, #60]	; (8007914 <convertAndSendData+0x88>)
 80078d6:	f7f9 f813 	bl	8000900 <sendMachineData>
	for(int i=0; i<2; i++) {
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3301      	adds	r3, #1
 80078de:	607b      	str	r3, [r7, #4]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	ddf1      	ble.n	80078ca <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 80078e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80078ea:	f000 ff3f 	bl	800876c <HAL_Delay>
	lcd_clear();
 80078ee:	f000 fa13 	bl	8007d18 <lcd_clear>
}
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20000245 	.word	0x20000245
 8007900:	0800dcf0 	.word	0x0800dcf0
 8007904:	0800dd04 	.word	0x0800dd04
 8007908:	0800dd18 	.word	0x0800dd18
 800790c:	0800dd2c 	.word	0x0800dd2c
 8007910:	200001a0 	.word	0x200001a0
 8007914:	20000350 	.word	0x20000350

08007918 <iotSetup>:

void iotSetup() {
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 800791c:	4b17      	ldr	r3, [pc, #92]	; (800797c <iotSetup+0x64>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d01d      	beq.n	8007960 <iotSetup+0x48>
		if(machineID[machineIDCharacterLimit-1] == '\0') {
 8007924:	4b16      	ldr	r3, [pc, #88]	; (8007980 <iotSetup+0x68>)
 8007926:	7adb      	ldrb	r3, [r3, #11]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <iotSetup+0x18>
			takeMachineID();
 800792c:	f7ff f996 	bl	8006c5c <takeMachineID>
		}
		HAL_Delay(500);
 8007930:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007934:	f000 ff1a 	bl	800876c <HAL_Delay>

		if(wifiSSID[0] == '\0') {
 8007938:	4b12      	ldr	r3, [pc, #72]	; (8007984 <iotSetup+0x6c>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <iotSetup+0x2c>
			takeWifiSSID();
 8007940:	f7ff fb1a 	bl	8006f78 <takeWifiSSID>
		}
		HAL_Delay(500);
 8007944:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007948:	f000 ff10 	bl	800876c <HAL_Delay>

		if(wifiPass[0] == '\0') {
 800794c:	4b0e      	ldr	r3, [pc, #56]	; (8007988 <iotSetup+0x70>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <iotSetup+0x40>
			takeWifiPass();
 8007954:	f7ff fcc4 	bl	80072e0 <takeWifiPass>
		}
		HAL_Delay(500);
 8007958:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800795c:	f000 ff06 	bl	800876c <HAL_Delay>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007960:	4a09      	ldr	r2, [pc, #36]	; (8007988 <iotSetup+0x70>)
 8007962:	4908      	ldr	r1, [pc, #32]	; (8007984 <iotSetup+0x6c>)
 8007964:	4809      	ldr	r0, [pc, #36]	; (800798c <iotSetup+0x74>)
 8007966:	f7f8 ff8d 	bl	8000884 <ESP8266_Init>
	HAL_Delay(500);
 800796a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800796e:	f000 fefd 	bl	800876c <HAL_Delay>
	convertAndSendData();
 8007972:	f7ff ff8b 	bl	800788c <convertAndSendData>
}
 8007976:	bf00      	nop
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20000243 	.word	0x20000243
 8007980:	200001a0 	.word	0x200001a0
 8007984:	200001ac 	.word	0x200001ac
 8007988:	200001c0 	.word	0x200001c0
 800798c:	20000350 	.word	0x20000350

08007990 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af02      	add	r7, sp, #8
 8007996:	4603      	mov	r3, r0
 8007998:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	f023 030f 	bic.w	r3, r3, #15
 80079a0:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80079a2:	79fb      	ldrb	r3, [r7, #7]
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80079a8:	7b7b      	ldrb	r3, [r7, #13]
 80079aa:	f043 030c 	orr.w	r3, r3, #12
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80079b2:	7b7b      	ldrb	r3, [r7, #13]
 80079b4:	f043 0308 	orr.w	r3, r3, #8
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80079bc:	7b3b      	ldrb	r3, [r7, #12]
 80079be:	f043 030c 	orr.w	r3, r3, #12
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80079c6:	7b3b      	ldrb	r3, [r7, #12]
 80079c8:	f043 0308 	orr.w	r3, r3, #8
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80079d0:	bf00      	nop
 80079d2:	4825      	ldr	r0, [pc, #148]	; (8007a68 <lcd_send_cmd+0xd8>)
 80079d4:	f002 fac3 	bl	8009f5e <HAL_I2C_GetError>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b04      	cmp	r3, #4
 80079dc:	d0f9      	beq.n	80079d2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80079de:	bf00      	nop
 80079e0:	4821      	ldr	r0, [pc, #132]	; (8007a68 <lcd_send_cmd+0xd8>)
 80079e2:	f002 faaf 	bl	8009f44 <HAL_I2C_GetState>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	d1f9      	bne.n	80079e0 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80079ec:	4b1f      	ldr	r3, [pc, #124]	; (8007a6c <lcd_send_cmd+0xdc>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d116      	bne.n	8007a22 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80079f4:	2300      	movs	r3, #0
 80079f6:	73fb      	strb	r3, [r7, #15]
 80079f8:	e00f      	b.n	8007a1a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	3310      	adds	r3, #16
 80079fe:	443b      	add	r3, r7
 8007a00:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	f022 0208 	bic.w	r2, r2, #8
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	3310      	adds	r3, #16
 8007a0e:	443b      	add	r3, r7
 8007a10:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
 8007a16:	3301      	adds	r3, #1
 8007a18:	73fb      	strb	r3, [r7, #15]
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d9ec      	bls.n	80079fa <lcd_send_cmd+0x6a>
 8007a20:	e015      	b.n	8007a4e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007a22:	2300      	movs	r3, #0
 8007a24:	73bb      	strb	r3, [r7, #14]
 8007a26:	e00f      	b.n	8007a48 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	3310      	adds	r3, #16
 8007a2c:	443b      	add	r3, r7
 8007a2e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	f042 0208 	orr.w	r2, r2, #8
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	3310      	adds	r3, #16
 8007a3c:	443b      	add	r3, r7
 8007a3e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	3301      	adds	r3, #1
 8007a46:	73bb      	strb	r3, [r7, #14]
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d9ec      	bls.n	8007a28 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007a4e:	f107 0208 	add.w	r2, r7, #8
 8007a52:	2364      	movs	r3, #100	; 0x64
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	2304      	movs	r3, #4
 8007a58:	214e      	movs	r1, #78	; 0x4e
 8007a5a:	4803      	ldr	r0, [pc, #12]	; (8007a68 <lcd_send_cmd+0xd8>)
 8007a5c:	f001 fe12 	bl	8009684 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007a60:	bf00      	nop
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	200002b4 	.word	0x200002b4
 8007a6c:	20000288 	.word	0x20000288

08007a70 <lcd_send_data>:

void lcd_send_data (char data) {
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	4603      	mov	r3, r0
 8007a78:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	f023 030f 	bic.w	r3, r3, #15
 8007a80:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007a88:	7b7b      	ldrb	r3, [r7, #13]
 8007a8a:	f043 030d 	orr.w	r3, r3, #13
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007a92:	7b7b      	ldrb	r3, [r7, #13]
 8007a94:	f043 0309 	orr.w	r3, r3, #9
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007a9c:	7b3b      	ldrb	r3, [r7, #12]
 8007a9e:	f043 030d 	orr.w	r3, r3, #13
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007aa6:	7b3b      	ldrb	r3, [r7, #12]
 8007aa8:	f043 0309 	orr.w	r3, r3, #9
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ab0:	bf00      	nop
 8007ab2:	4825      	ldr	r0, [pc, #148]	; (8007b48 <lcd_send_data+0xd8>)
 8007ab4:	f002 fa53 	bl	8009f5e <HAL_I2C_GetError>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	d0f9      	beq.n	8007ab2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007abe:	bf00      	nop
 8007ac0:	4821      	ldr	r0, [pc, #132]	; (8007b48 <lcd_send_data+0xd8>)
 8007ac2:	f002 fa3f 	bl	8009f44 <HAL_I2C_GetState>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d1f9      	bne.n	8007ac0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007acc:	4b1f      	ldr	r3, [pc, #124]	; (8007b4c <lcd_send_data+0xdc>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d116      	bne.n	8007b02 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]
 8007ad8:	e00f      	b.n	8007afa <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	3310      	adds	r3, #16
 8007ade:	443b      	add	r3, r7
 8007ae0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
 8007ae6:	f022 0208 	bic.w	r2, r2, #8
 8007aea:	b2d2      	uxtb	r2, r2
 8007aec:	3310      	adds	r3, #16
 8007aee:	443b      	add	r3, r7
 8007af0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	3301      	adds	r3, #1
 8007af8:	73fb      	strb	r3, [r7, #15]
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d9ec      	bls.n	8007ada <lcd_send_data+0x6a>
 8007b00:	e015      	b.n	8007b2e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007b02:	2300      	movs	r3, #0
 8007b04:	73bb      	strb	r3, [r7, #14]
 8007b06:	e00f      	b.n	8007b28 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	3310      	adds	r3, #16
 8007b0c:	443b      	add	r3, r7
 8007b0e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	f042 0208 	orr.w	r2, r2, #8
 8007b18:	b2d2      	uxtb	r2, r2
 8007b1a:	3310      	adds	r3, #16
 8007b1c:	443b      	add	r3, r7
 8007b1e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	3301      	adds	r3, #1
 8007b26:	73bb      	strb	r3, [r7, #14]
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d9ec      	bls.n	8007b08 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007b2e:	f107 0208 	add.w	r2, r7, #8
 8007b32:	2364      	movs	r3, #100	; 0x64
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	2304      	movs	r3, #4
 8007b38:	214e      	movs	r1, #78	; 0x4e
 8007b3a:	4803      	ldr	r0, [pc, #12]	; (8007b48 <lcd_send_data+0xd8>)
 8007b3c:	f001 fda2 	bl	8009684 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007b40:	bf00      	nop
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	200002b4 	.word	0x200002b4
 8007b4c:	20000288 	.word	0x20000288

08007b50 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007b58:	e006      	b.n	8007b68 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7ff ff84 	bl	8007a70 <lcd_send_data>
	while (*str) {
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1f4      	bne.n	8007b5a <lcd_send_string+0xa>
	}
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <lcd_send_char>:

void lcd_send_char(char ch) {
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	4603      	mov	r3, r0
 8007b84:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007b86:	79fb      	ldrb	r3, [r7, #7]
 8007b88:	f023 030f 	bic.w	r3, r3, #15
 8007b8c:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007b94:	7b7b      	ldrb	r3, [r7, #13]
 8007b96:	f043 030d 	orr.w	r3, r3, #13
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007b9e:	7b7b      	ldrb	r3, [r7, #13]
 8007ba0:	f043 0309 	orr.w	r3, r3, #9
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007ba8:	7b3b      	ldrb	r3, [r7, #12]
 8007baa:	f043 030d 	orr.w	r3, r3, #13
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007bb2:	7b3b      	ldrb	r3, [r7, #12]
 8007bb4:	f043 0309 	orr.w	r3, r3, #9
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007bbc:	bf00      	nop
 8007bbe:	4825      	ldr	r0, [pc, #148]	; (8007c54 <lcd_send_char+0xd8>)
 8007bc0:	f002 f9cd 	bl	8009f5e <HAL_I2C_GetError>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	d0f9      	beq.n	8007bbe <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007bca:	bf00      	nop
 8007bcc:	4821      	ldr	r0, [pc, #132]	; (8007c54 <lcd_send_char+0xd8>)
 8007bce:	f002 f9b9 	bl	8009f44 <HAL_I2C_GetState>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b20      	cmp	r3, #32
 8007bd6:	d1f9      	bne.n	8007bcc <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007bd8:	4b1f      	ldr	r3, [pc, #124]	; (8007c58 <lcd_send_char+0xdc>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d116      	bne.n	8007c0e <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007be0:	2300      	movs	r3, #0
 8007be2:	73fb      	strb	r3, [r7, #15]
 8007be4:	e00f      	b.n	8007c06 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	3310      	adds	r3, #16
 8007bea:	443b      	add	r3, r7
 8007bec:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	f022 0208 	bic.w	r2, r2, #8
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	3310      	adds	r3, #16
 8007bfa:	443b      	add	r3, r7
 8007bfc:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
 8007c02:	3301      	adds	r3, #1
 8007c04:	73fb      	strb	r3, [r7, #15]
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d9ec      	bls.n	8007be6 <lcd_send_char+0x6a>
 8007c0c:	e015      	b.n	8007c3a <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73bb      	strb	r3, [r7, #14]
 8007c12:	e00f      	b.n	8007c34 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	3310      	adds	r3, #16
 8007c18:	443b      	add	r3, r7
 8007c1a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c1e:	7bbb      	ldrb	r3, [r7, #14]
 8007c20:	f042 0208 	orr.w	r2, r2, #8
 8007c24:	b2d2      	uxtb	r2, r2
 8007c26:	3310      	adds	r3, #16
 8007c28:	443b      	add	r3, r7
 8007c2a:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	3301      	adds	r3, #1
 8007c32:	73bb      	strb	r3, [r7, #14]
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d9ec      	bls.n	8007c14 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007c3a:	f107 0208 	add.w	r2, r7, #8
 8007c3e:	2364      	movs	r3, #100	; 0x64
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	2304      	movs	r3, #4
 8007c44:	214e      	movs	r1, #78	; 0x4e
 8007c46:	4803      	ldr	r0, [pc, #12]	; (8007c54 <lcd_send_char+0xd8>)
 8007c48:	f001 fd1c 	bl	8009684 <HAL_I2C_Master_Transmit>
}
 8007c4c:	bf00      	nop
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	200002b4 	.word	0x200002b4
 8007c58:	20000288 	.word	0x20000288

08007c5c <lcd_init>:

void lcd_init (void) {
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007c60:	2002      	movs	r0, #2
 8007c62:	f7ff fe95 	bl	8007990 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007c66:	2028      	movs	r0, #40	; 0x28
 8007c68:	f7ff fe92 	bl	8007990 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007c6c:	200c      	movs	r0, #12
 8007c6e:	f7ff fe8f 	bl	8007990 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007c72:	2080      	movs	r0, #128	; 0x80
 8007c74:	f7ff fe8c 	bl	8007990 <lcd_send_cmd>
	lcd_backlight(1);
 8007c78:	2001      	movs	r0, #1
 8007c7a:	f000 f86d 	bl	8007d58 <lcd_backlight>
}
 8007c7e:	bf00      	nop
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	4603      	mov	r3, r0
 8007c8a:	460a      	mov	r2, r1
 8007c8c:	71fb      	strb	r3, [r7, #7]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d106      	bne.n	8007ca6 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007c98:	79bb      	ldrb	r3, [r7, #6]
 8007c9a:	337f      	adds	r3, #127	; 0x7f
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff fe76 	bl	8007990 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007ca4:	e008      	b.n	8007cb8 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007ca6:	79fb      	ldrb	r3, [r7, #7]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d105      	bne.n	8007cb8 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007cac:	79bb      	ldrb	r3, [r7, #6]
 8007cae:	3b41      	subs	r3, #65	; 0x41
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff fe6c 	bl	8007990 <lcd_send_cmd>
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	603a      	str	r2, [r7, #0]
 8007cca:	71fb      	strb	r3, [r7, #7]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007cd0:	79ba      	ldrb	r2, [r7, #6]
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7ff ffd3 	bl	8007c82 <lcd_gotoxy>
	lcd_send_string(str);
 8007cdc:	6838      	ldr	r0, [r7, #0]
 8007cde:	f7ff ff37 	bl	8007b50 <lcd_send_string>
}
 8007ce2:	bf00      	nop
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b082      	sub	sp, #8
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	71fb      	strb	r3, [r7, #7]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	71bb      	strb	r3, [r7, #6]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007cfc:	79ba      	ldrb	r2, [r7, #6]
 8007cfe:	79fb      	ldrb	r3, [r7, #7]
 8007d00:	4611      	mov	r1, r2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff ffbd 	bl	8007c82 <lcd_gotoxy>
    lcd_send_char(ch);
 8007d08:	797b      	ldrb	r3, [r7, #5]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff ff36 	bl	8007b7c <lcd_send_char>
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <lcd_clear>:

void lcd_clear(void) {
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	f7ff fe37 	bl	8007990 <lcd_send_cmd>
    HAL_Delay(2);
 8007d22:	2002      	movs	r0, #2
 8007d24:	f000 fd22 	bl	800876c <HAL_Delay>
}
 8007d28:	bf00      	nop
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	460a      	mov	r2, r1
 8007d36:	71fb      	strb	r3, [r7, #7]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007d3c:	79ba      	ldrb	r2, [r7, #6]
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	4611      	mov	r1, r2
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff ff9d 	bl	8007c82 <lcd_gotoxy>

    lcd_send_char(' ');
 8007d48:	2020      	movs	r0, #32
 8007d4a:	f7ff ff17 	bl	8007b7c <lcd_send_char>
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
	...

08007d58 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007d62:	4a05      	ldr	r2, [pc, #20]	; (8007d78 <lcd_backlight+0x20>)
 8007d64:	79fb      	ldrb	r3, [r7, #7]
 8007d66:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007d68:	2000      	movs	r0, #0
 8007d6a:	f7ff fe11 	bl	8007990 <lcd_send_cmd>
}
 8007d6e:	bf00      	nop
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20000288 	.word	0x20000288

08007d7c <lcd_cursor>:

void lcd_cursor(int state) {
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d106      	bne.n	8007d98 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007d8a:	200e      	movs	r0, #14
 8007d8c:	f7ff fe00 	bl	8007990 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007d90:	200f      	movs	r0, #15
 8007d92:	f7ff fdfd 	bl	8007990 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007d96:	e002      	b.n	8007d9e <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007d98:	200c      	movs	r0, #12
 8007d9a:	f7ff fdf9 	bl	8007990 <lcd_send_cmd>
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3301      	adds	r3, #1
 8007db6:	4a03      	ldr	r2, [pc, #12]	; (8007dc4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007db8:	6013      	str	r3, [r2, #0]
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bc80      	pop	{r7}
 8007dc2:	4770      	bx	lr
 8007dc4:	20000200 	.word	0x20000200

08007dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007dcc:	f000 fc6c 	bl	80086a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007dd4:	f000 fcca 	bl	800876c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007dd8:	f000 f89c 	bl	8007f14 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ddc:	f000 f9be 	bl	800815c <MX_GPIO_Init>
  MX_CAN_Init();
 8007de0:	f000 f8de 	bl	8007fa0 <MX_CAN_Init>
  MX_I2C1_Init();
 8007de4:	f000 f910 	bl	8008008 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007de8:	f000 f93c 	bl	8008064 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007dec:	f000 f98c 	bl	8008108 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007df0:	2201      	movs	r2, #1
 8007df2:	2140      	movs	r1, #64	; 0x40
 8007df4:	483e      	ldr	r0, [pc, #248]	; (8007ef0 <main+0x128>)
 8007df6:	f001 faa0 	bl	800933a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	2180      	movs	r1, #128	; 0x80
 8007dfe:	483c      	ldr	r0, [pc, #240]	; (8007ef0 <main+0x128>)
 8007e00:	f001 fa9b 	bl	800933a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007e04:	200a      	movs	r0, #10
 8007e06:	f000 fcb1 	bl	800876c <HAL_Delay>
  lcd_init();
 8007e0a:	f7ff ff27 	bl	8007c5c <lcd_init>
  HAL_Delay(10);
 8007e0e:	200a      	movs	r0, #10
 8007e10:	f000 fcac 	bl	800876c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007e14:	4837      	ldr	r0, [pc, #220]	; (8007ef4 <main+0x12c>)
 8007e16:	f003 f943 	bl	800b0a0 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007e1a:	bf00      	nop
 8007e1c:	4836      	ldr	r0, [pc, #216]	; (8007ef8 <main+0x130>)
 8007e1e:	f002 f89e 	bl	8009f5e <HAL_I2C_GetError>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d0f9      	beq.n	8007e1c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007e28:	bf00      	nop
 8007e2a:	4833      	ldr	r0, [pc, #204]	; (8007ef8 <main+0x130>)
 8007e2c:	f002 f88a 	bl	8009f44 <HAL_I2C_GetState>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b20      	cmp	r3, #32
 8007e34:	d1f9      	bne.n	8007e2a <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007e36:	2200      	movs	r2, #0
 8007e38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e3c:	482c      	ldr	r0, [pc, #176]	; (8007ef0 <main+0x128>)
 8007e3e:	f001 fa7c 	bl	800933a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007e42:	2200      	movs	r2, #0
 8007e44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e48:	4829      	ldr	r0, [pc, #164]	; (8007ef0 <main+0x128>)
 8007e4a:	f001 fa76 	bl	800933a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2104      	movs	r1, #4
 8007e52:	4827      	ldr	r0, [pc, #156]	; (8007ef0 <main+0x128>)
 8007e54:	f001 fa71 	bl	800933a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2102      	movs	r1, #2
 8007e5c:	4824      	ldr	r0, [pc, #144]	; (8007ef0 <main+0x128>)
 8007e5e:	f001 fa6c 	bl	800933a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007e62:	2200      	movs	r2, #0
 8007e64:	2101      	movs	r1, #1
 8007e66:	4822      	ldr	r0, [pc, #136]	; (8007ef0 <main+0x128>)
 8007e68:	f001 fa67 	bl	800933a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2120      	movs	r1, #32
 8007e70:	4822      	ldr	r0, [pc, #136]	; (8007efc <main+0x134>)
 8007e72:	f001 fa62 	bl	800933a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007e76:	2200      	movs	r2, #0
 8007e78:	2110      	movs	r1, #16
 8007e7a:	4820      	ldr	r0, [pc, #128]	; (8007efc <main+0x134>)
 8007e7c:	f001 fa5d 	bl	800933a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007e80:	2200      	movs	r2, #0
 8007e82:	2180      	movs	r1, #128	; 0x80
 8007e84:	481e      	ldr	r0, [pc, #120]	; (8007f00 <main+0x138>)
 8007e86:	f001 fa58 	bl	800933a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2140      	movs	r1, #64	; 0x40
 8007e8e:	481c      	ldr	r0, [pc, #112]	; (8007f00 <main+0x138>)
 8007e90:	f001 fa53 	bl	800933a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007e94:	2200      	movs	r2, #0
 8007e96:	2120      	movs	r1, #32
 8007e98:	4819      	ldr	r0, [pc, #100]	; (8007f00 <main+0x138>)
 8007e9a:	f001 fa4e 	bl	800933a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	2110      	movs	r1, #16
 8007ea2:	4817      	ldr	r0, [pc, #92]	; (8007f00 <main+0x138>)
 8007ea4:	f001 fa49 	bl	800933a <HAL_GPIO_WritePin>

  i2cTest();
 8007ea8:	f7f8 feee 	bl	8000c88 <i2cTest>
  HAL_Delay(100);
 8007eac:	2064      	movs	r0, #100	; 0x64
 8007eae:	f000 fc5d 	bl	800876c <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007eb2:	4a14      	ldr	r2, [pc, #80]	; (8007f04 <main+0x13c>)
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	2001      	movs	r0, #1
 8007eb8:	f7ff ff02 	bl	8007cc0 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007ebc:	4a12      	ldr	r2, [pc, #72]	; (8007f08 <main+0x140>)
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	2002      	movs	r0, #2
 8007ec2:	f7ff fefd 	bl	8007cc0 <lcd_print>
  HAL_Delay(1000);
 8007ec6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007eca:	f000 fc4f 	bl	800876c <HAL_Delay>
  lcd_clear();
 8007ece:	f7ff ff23 	bl	8007d18 <lcd_clear>

  eepromKontrol();
 8007ed2:	f7f8 f9af 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007ed6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007eda:	f000 fc47 	bl	800876c <HAL_Delay>

  backLightTimer = millis;
 8007ede:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <main+0x144>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a0b      	ldr	r2, [pc, #44]	; (8007f10 <main+0x148>)
 8007ee4:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007ee6:	f7ff fd17 	bl	8007918 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007eea:	f7fe fd1f 	bl	800692c <mainLoop>
 8007eee:	e7fc      	b.n	8007eea <main+0x122>
 8007ef0:	40010c00 	.word	0x40010c00
 8007ef4:	20000308 	.word	0x20000308
 8007ef8:	200002b4 	.word	0x200002b4
 8007efc:	40011000 	.word	0x40011000
 8007f00:	40010800 	.word	0x40010800
 8007f04:	0800dd40 	.word	0x0800dd40
 8007f08:	0800dd54 	.word	0x0800dd54
 8007f0c:	20000200 	.word	0x20000200
 8007f10:	2000021c 	.word	0x2000021c

08007f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b090      	sub	sp, #64	; 0x40
 8007f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f1a:	f107 0318 	add.w	r3, r7, #24
 8007f1e:	2228      	movs	r2, #40	; 0x28
 8007f20:	2100      	movs	r1, #0
 8007f22:	4618      	mov	r0, r3
 8007f24:	f004 fb79 	bl	800c61a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f28:	1d3b      	adds	r3, r7, #4
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	605a      	str	r2, [r3, #4]
 8007f30:	609a      	str	r2, [r3, #8]
 8007f32:	60da      	str	r2, [r3, #12]
 8007f34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007f36:	2301      	movs	r3, #1
 8007f38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007f40:	2300      	movs	r3, #0
 8007f42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f44:	2301      	movs	r3, #1
 8007f46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f48:	2302      	movs	r3, #2
 8007f4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007f52:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f58:	f107 0318 	add.w	r3, r7, #24
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f002 fc3f 	bl	800a7e0 <HAL_RCC_OscConfig>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007f68:	f000 f9a2 	bl	80082b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f6c:	230f      	movs	r3, #15
 8007f6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f70:	2302      	movs	r3, #2
 8007f72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f74:	2300      	movs	r3, #0
 8007f76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007f82:	1d3b      	adds	r3, r7, #4
 8007f84:	2102      	movs	r1, #2
 8007f86:	4618      	mov	r0, r3
 8007f88:	f002 feac 	bl	800ace4 <HAL_RCC_ClockConfig>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007f92:	f000 f98d 	bl	80082b0 <Error_Handler>
  }
}
 8007f96:	bf00      	nop
 8007f98:	3740      	adds	r7, #64	; 0x40
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
	...

08007fa0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007fa4:	4b16      	ldr	r3, [pc, #88]	; (8008000 <MX_CAN_Init+0x60>)
 8007fa6:	4a17      	ldr	r2, [pc, #92]	; (8008004 <MX_CAN_Init+0x64>)
 8007fa8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007faa:	4b15      	ldr	r3, [pc, #84]	; (8008000 <MX_CAN_Init+0x60>)
 8007fac:	2210      	movs	r2, #16
 8007fae:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007fb0:	4b13      	ldr	r3, [pc, #76]	; (8008000 <MX_CAN_Init+0x60>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007fb6:	4b12      	ldr	r3, [pc, #72]	; (8008000 <MX_CAN_Init+0x60>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007fbc:	4b10      	ldr	r3, [pc, #64]	; (8008000 <MX_CAN_Init+0x60>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007fc2:	4b0f      	ldr	r3, [pc, #60]	; (8008000 <MX_CAN_Init+0x60>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007fc8:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <MX_CAN_Init+0x60>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007fce:	4b0c      	ldr	r3, [pc, #48]	; (8008000 <MX_CAN_Init+0x60>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007fd4:	4b0a      	ldr	r3, [pc, #40]	; (8008000 <MX_CAN_Init+0x60>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007fda:	4b09      	ldr	r3, [pc, #36]	; (8008000 <MX_CAN_Init+0x60>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007fe0:	4b07      	ldr	r3, [pc, #28]	; (8008000 <MX_CAN_Init+0x60>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007fe6:	4b06      	ldr	r3, [pc, #24]	; (8008000 <MX_CAN_Init+0x60>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007fec:	4804      	ldr	r0, [pc, #16]	; (8008000 <MX_CAN_Init+0x60>)
 8007fee:	f000 fbe1 	bl	80087b4 <HAL_CAN_Init>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007ff8:	f000 f95a 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007ffc:	bf00      	nop
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	2000028c 	.word	0x2000028c
 8008004:	40006400 	.word	0x40006400

08008008 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800800c:	4b12      	ldr	r3, [pc, #72]	; (8008058 <MX_I2C1_Init+0x50>)
 800800e:	4a13      	ldr	r2, [pc, #76]	; (800805c <MX_I2C1_Init+0x54>)
 8008010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008012:	4b11      	ldr	r3, [pc, #68]	; (8008058 <MX_I2C1_Init+0x50>)
 8008014:	4a12      	ldr	r2, [pc, #72]	; (8008060 <MX_I2C1_Init+0x58>)
 8008016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008018:	4b0f      	ldr	r3, [pc, #60]	; (8008058 <MX_I2C1_Init+0x50>)
 800801a:	2200      	movs	r2, #0
 800801c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800801e:	4b0e      	ldr	r3, [pc, #56]	; (8008058 <MX_I2C1_Init+0x50>)
 8008020:	2200      	movs	r2, #0
 8008022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008024:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <MX_I2C1_Init+0x50>)
 8008026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800802a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800802c:	4b0a      	ldr	r3, [pc, #40]	; (8008058 <MX_I2C1_Init+0x50>)
 800802e:	2200      	movs	r2, #0
 8008030:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008032:	4b09      	ldr	r3, [pc, #36]	; (8008058 <MX_I2C1_Init+0x50>)
 8008034:	2200      	movs	r2, #0
 8008036:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008038:	4b07      	ldr	r3, [pc, #28]	; (8008058 <MX_I2C1_Init+0x50>)
 800803a:	2200      	movs	r2, #0
 800803c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800803e:	4b06      	ldr	r3, [pc, #24]	; (8008058 <MX_I2C1_Init+0x50>)
 8008040:	2200      	movs	r2, #0
 8008042:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008044:	4804      	ldr	r0, [pc, #16]	; (8008058 <MX_I2C1_Init+0x50>)
 8008046:	f001 f9a9 	bl	800939c <HAL_I2C_Init>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008050:	f000 f92e 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008054:	bf00      	nop
 8008056:	bd80      	pop	{r7, pc}
 8008058:	200002b4 	.word	0x200002b4
 800805c:	40005400 	.word	0x40005400
 8008060:	00061a80 	.word	0x00061a80

08008064 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800806a:	f107 0308 	add.w	r3, r7, #8
 800806e:	2200      	movs	r2, #0
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	605a      	str	r2, [r3, #4]
 8008074:	609a      	str	r2, [r3, #8]
 8008076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008078:	463b      	mov	r3, r7
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008080:	4b1f      	ldr	r3, [pc, #124]	; (8008100 <MX_TIM1_Init+0x9c>)
 8008082:	4a20      	ldr	r2, [pc, #128]	; (8008104 <MX_TIM1_Init+0xa0>)
 8008084:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008086:	4b1e      	ldr	r3, [pc, #120]	; (8008100 <MX_TIM1_Init+0x9c>)
 8008088:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800808c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800808e:	4b1c      	ldr	r3, [pc, #112]	; (8008100 <MX_TIM1_Init+0x9c>)
 8008090:	2200      	movs	r2, #0
 8008092:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008094:	4b1a      	ldr	r3, [pc, #104]	; (8008100 <MX_TIM1_Init+0x9c>)
 8008096:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800809a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800809c:	4b18      	ldr	r3, [pc, #96]	; (8008100 <MX_TIM1_Init+0x9c>)
 800809e:	2200      	movs	r2, #0
 80080a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80080a2:	4b17      	ldr	r3, [pc, #92]	; (8008100 <MX_TIM1_Init+0x9c>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080a8:	4b15      	ldr	r3, [pc, #84]	; (8008100 <MX_TIM1_Init+0x9c>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80080ae:	4814      	ldr	r0, [pc, #80]	; (8008100 <MX_TIM1_Init+0x9c>)
 80080b0:	f002 ffa6 	bl	800b000 <HAL_TIM_Base_Init>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80080ba:	f000 f8f9 	bl	80082b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80080c4:	f107 0308 	add.w	r3, r7, #8
 80080c8:	4619      	mov	r1, r3
 80080ca:	480d      	ldr	r0, [pc, #52]	; (8008100 <MX_TIM1_Init+0x9c>)
 80080cc:	f003 f950 	bl	800b370 <HAL_TIM_ConfigClockSource>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80080d6:	f000 f8eb 	bl	80082b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080da:	2300      	movs	r3, #0
 80080dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080de:	2300      	movs	r3, #0
 80080e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80080e2:	463b      	mov	r3, r7
 80080e4:	4619      	mov	r1, r3
 80080e6:	4806      	ldr	r0, [pc, #24]	; (8008100 <MX_TIM1_Init+0x9c>)
 80080e8:	f003 fb3e 	bl	800b768 <HAL_TIMEx_MasterConfigSynchronization>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80080f2:	f000 f8dd 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80080f6:	bf00      	nop
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20000308 	.word	0x20000308
 8008104:	40012c00 	.word	0x40012c00

08008108 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800810c:	4b11      	ldr	r3, [pc, #68]	; (8008154 <MX_USART1_UART_Init+0x4c>)
 800810e:	4a12      	ldr	r2, [pc, #72]	; (8008158 <MX_USART1_UART_Init+0x50>)
 8008110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008112:	4b10      	ldr	r3, [pc, #64]	; (8008154 <MX_USART1_UART_Init+0x4c>)
 8008114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800811a:	4b0e      	ldr	r3, [pc, #56]	; (8008154 <MX_USART1_UART_Init+0x4c>)
 800811c:	2200      	movs	r2, #0
 800811e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008120:	4b0c      	ldr	r3, [pc, #48]	; (8008154 <MX_USART1_UART_Init+0x4c>)
 8008122:	2200      	movs	r2, #0
 8008124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008126:	4b0b      	ldr	r3, [pc, #44]	; (8008154 <MX_USART1_UART_Init+0x4c>)
 8008128:	2200      	movs	r2, #0
 800812a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800812c:	4b09      	ldr	r3, [pc, #36]	; (8008154 <MX_USART1_UART_Init+0x4c>)
 800812e:	220c      	movs	r2, #12
 8008130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008132:	4b08      	ldr	r3, [pc, #32]	; (8008154 <MX_USART1_UART_Init+0x4c>)
 8008134:	2200      	movs	r2, #0
 8008136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008138:	4b06      	ldr	r3, [pc, #24]	; (8008154 <MX_USART1_UART_Init+0x4c>)
 800813a:	2200      	movs	r2, #0
 800813c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800813e:	4805      	ldr	r0, [pc, #20]	; (8008154 <MX_USART1_UART_Init+0x4c>)
 8008140:	f003 fb90 	bl	800b864 <HAL_UART_Init>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800814a:	f000 f8b1 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800814e:	bf00      	nop
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000350 	.word	0x20000350
 8008158:	40013800 	.word	0x40013800

0800815c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b088      	sub	sp, #32
 8008160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008162:	f107 0310 	add.w	r3, r7, #16
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	605a      	str	r2, [r3, #4]
 800816c:	609a      	str	r2, [r3, #8]
 800816e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008170:	4b4b      	ldr	r3, [pc, #300]	; (80082a0 <MX_GPIO_Init+0x144>)
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	4a4a      	ldr	r2, [pc, #296]	; (80082a0 <MX_GPIO_Init+0x144>)
 8008176:	f043 0310 	orr.w	r3, r3, #16
 800817a:	6193      	str	r3, [r2, #24]
 800817c:	4b48      	ldr	r3, [pc, #288]	; (80082a0 <MX_GPIO_Init+0x144>)
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	f003 0310 	and.w	r3, r3, #16
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008188:	4b45      	ldr	r3, [pc, #276]	; (80082a0 <MX_GPIO_Init+0x144>)
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	4a44      	ldr	r2, [pc, #272]	; (80082a0 <MX_GPIO_Init+0x144>)
 800818e:	f043 0320 	orr.w	r3, r3, #32
 8008192:	6193      	str	r3, [r2, #24]
 8008194:	4b42      	ldr	r3, [pc, #264]	; (80082a0 <MX_GPIO_Init+0x144>)
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	60bb      	str	r3, [r7, #8]
 800819e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80081a0:	4b3f      	ldr	r3, [pc, #252]	; (80082a0 <MX_GPIO_Init+0x144>)
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	4a3e      	ldr	r2, [pc, #248]	; (80082a0 <MX_GPIO_Init+0x144>)
 80081a6:	f043 0304 	orr.w	r3, r3, #4
 80081aa:	6193      	str	r3, [r2, #24]
 80081ac:	4b3c      	ldr	r3, [pc, #240]	; (80082a0 <MX_GPIO_Init+0x144>)
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	f003 0304 	and.w	r3, r3, #4
 80081b4:	607b      	str	r3, [r7, #4]
 80081b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80081b8:	4b39      	ldr	r3, [pc, #228]	; (80082a0 <MX_GPIO_Init+0x144>)
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	4a38      	ldr	r2, [pc, #224]	; (80082a0 <MX_GPIO_Init+0x144>)
 80081be:	f043 0308 	orr.w	r3, r3, #8
 80081c2:	6193      	str	r3, [r2, #24]
 80081c4:	4b36      	ldr	r3, [pc, #216]	; (80082a0 <MX_GPIO_Init+0x144>)
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	f003 0308 	and.w	r3, r3, #8
 80081cc:	603b      	str	r3, [r7, #0]
 80081ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80081d0:	2200      	movs	r2, #0
 80081d2:	21f0      	movs	r1, #240	; 0xf0
 80081d4:	4833      	ldr	r0, [pc, #204]	; (80082a4 <MX_GPIO_Init+0x148>)
 80081d6:	f001 f8b0 	bl	800933a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80081da:	2200      	movs	r2, #0
 80081dc:	f241 0130 	movw	r1, #4144	; 0x1030
 80081e0:	4831      	ldr	r0, [pc, #196]	; (80082a8 <MX_GPIO_Init+0x14c>)
 80081e2:	f001 f8aa 	bl	800933a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80081e6:	2200      	movs	r2, #0
 80081e8:	f640 4107 	movw	r1, #3079	; 0xc07
 80081ec:	482f      	ldr	r0, [pc, #188]	; (80082ac <MX_GPIO_Init+0x150>)
 80081ee:	f001 f8a4 	bl	800933a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80081f2:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80081f6:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081f8:	2300      	movs	r3, #0
 80081fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081fc:	2300      	movs	r3, #0
 80081fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008200:	f107 0310 	add.w	r3, r7, #16
 8008204:	4619      	mov	r1, r3
 8008206:	4828      	ldr	r0, [pc, #160]	; (80082a8 <MX_GPIO_Init+0x14c>)
 8008208:	f000 fe20 	bl	8008e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 800820c:	f248 130f 	movw	r3, #33039	; 0x810f
 8008210:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008212:	2300      	movs	r3, #0
 8008214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008216:	2300      	movs	r3, #0
 8008218:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800821a:	f107 0310 	add.w	r3, r7, #16
 800821e:	4619      	mov	r1, r3
 8008220:	4820      	ldr	r0, [pc, #128]	; (80082a4 <MX_GPIO_Init+0x148>)
 8008222:	f000 fe13 	bl	8008e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008226:	23f0      	movs	r3, #240	; 0xf0
 8008228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800822a:	2301      	movs	r3, #1
 800822c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800822e:	2300      	movs	r3, #0
 8008230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008232:	2302      	movs	r3, #2
 8008234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008236:	f107 0310 	add.w	r3, r7, #16
 800823a:	4619      	mov	r1, r3
 800823c:	4819      	ldr	r0, [pc, #100]	; (80082a4 <MX_GPIO_Init+0x148>)
 800823e:	f000 fe05 	bl	8008e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008242:	f241 0330 	movw	r3, #4144	; 0x1030
 8008246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008248:	2301      	movs	r3, #1
 800824a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800824c:	2300      	movs	r3, #0
 800824e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008250:	2302      	movs	r3, #2
 8008252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008254:	f107 0310 	add.w	r3, r7, #16
 8008258:	4619      	mov	r1, r3
 800825a:	4813      	ldr	r0, [pc, #76]	; (80082a8 <MX_GPIO_Init+0x14c>)
 800825c:	f000 fdf6 	bl	8008e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008260:	f640 4307 	movw	r3, #3079	; 0xc07
 8008264:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008266:	2301      	movs	r3, #1
 8008268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800826a:	2300      	movs	r3, #0
 800826c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800826e:	2302      	movs	r3, #2
 8008270:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008272:	f107 0310 	add.w	r3, r7, #16
 8008276:	4619      	mov	r1, r3
 8008278:	480c      	ldr	r0, [pc, #48]	; (80082ac <MX_GPIO_Init+0x150>)
 800827a:	f000 fde7 	bl	8008e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800827e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008284:	2300      	movs	r3, #0
 8008286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008288:	2300      	movs	r3, #0
 800828a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800828c:	f107 0310 	add.w	r3, r7, #16
 8008290:	4619      	mov	r1, r3
 8008292:	4806      	ldr	r0, [pc, #24]	; (80082ac <MX_GPIO_Init+0x150>)
 8008294:	f000 fdda 	bl	8008e4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008298:	bf00      	nop
 800829a:	3720      	adds	r7, #32
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	40021000 	.word	0x40021000
 80082a4:	40010800 	.word	0x40010800
 80082a8:	40011000 	.word	0x40011000
 80082ac:	40010c00 	.word	0x40010c00

080082b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80082b4:	bf00      	nop
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bc80      	pop	{r7}
 80082ba:	4770      	bx	lr

080082bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80082c2:	4b15      	ldr	r3, [pc, #84]	; (8008318 <HAL_MspInit+0x5c>)
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	4a14      	ldr	r2, [pc, #80]	; (8008318 <HAL_MspInit+0x5c>)
 80082c8:	f043 0301 	orr.w	r3, r3, #1
 80082cc:	6193      	str	r3, [r2, #24]
 80082ce:	4b12      	ldr	r3, [pc, #72]	; (8008318 <HAL_MspInit+0x5c>)
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	60bb      	str	r3, [r7, #8]
 80082d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082da:	4b0f      	ldr	r3, [pc, #60]	; (8008318 <HAL_MspInit+0x5c>)
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	4a0e      	ldr	r2, [pc, #56]	; (8008318 <HAL_MspInit+0x5c>)
 80082e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082e4:	61d3      	str	r3, [r2, #28]
 80082e6:	4b0c      	ldr	r3, [pc, #48]	; (8008318 <HAL_MspInit+0x5c>)
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ee:	607b      	str	r3, [r7, #4]
 80082f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80082f2:	4b0a      	ldr	r3, [pc, #40]	; (800831c <HAL_MspInit+0x60>)
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	4a04      	ldr	r2, [pc, #16]	; (800831c <HAL_MspInit+0x60>)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800830e:	bf00      	nop
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	bc80      	pop	{r7}
 8008316:	4770      	bx	lr
 8008318:	40021000 	.word	0x40021000
 800831c:	40010000 	.word	0x40010000

08008320 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008328:	f107 0310 	add.w	r3, r7, #16
 800832c:	2200      	movs	r2, #0
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	605a      	str	r2, [r3, #4]
 8008332:	609a      	str	r2, [r3, #8]
 8008334:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a1c      	ldr	r2, [pc, #112]	; (80083ac <HAL_CAN_MspInit+0x8c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d131      	bne.n	80083a4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008340:	4b1b      	ldr	r3, [pc, #108]	; (80083b0 <HAL_CAN_MspInit+0x90>)
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	4a1a      	ldr	r2, [pc, #104]	; (80083b0 <HAL_CAN_MspInit+0x90>)
 8008346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800834a:	61d3      	str	r3, [r2, #28]
 800834c:	4b18      	ldr	r3, [pc, #96]	; (80083b0 <HAL_CAN_MspInit+0x90>)
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008354:	60fb      	str	r3, [r7, #12]
 8008356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008358:	4b15      	ldr	r3, [pc, #84]	; (80083b0 <HAL_CAN_MspInit+0x90>)
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	4a14      	ldr	r2, [pc, #80]	; (80083b0 <HAL_CAN_MspInit+0x90>)
 800835e:	f043 0304 	orr.w	r3, r3, #4
 8008362:	6193      	str	r3, [r2, #24]
 8008364:	4b12      	ldr	r3, [pc, #72]	; (80083b0 <HAL_CAN_MspInit+0x90>)
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	60bb      	str	r3, [r7, #8]
 800836e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008370:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008374:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800837a:	2300      	movs	r3, #0
 800837c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800837e:	f107 0310 	add.w	r3, r7, #16
 8008382:	4619      	mov	r1, r3
 8008384:	480b      	ldr	r0, [pc, #44]	; (80083b4 <HAL_CAN_MspInit+0x94>)
 8008386:	f000 fd61 	bl	8008e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800838a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800838e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008390:	2302      	movs	r3, #2
 8008392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008394:	2303      	movs	r3, #3
 8008396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008398:	f107 0310 	add.w	r3, r7, #16
 800839c:	4619      	mov	r1, r3
 800839e:	4805      	ldr	r0, [pc, #20]	; (80083b4 <HAL_CAN_MspInit+0x94>)
 80083a0:	f000 fd54 	bl	8008e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80083a4:	bf00      	nop
 80083a6:	3720      	adds	r7, #32
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	40006400 	.word	0x40006400
 80083b0:	40021000 	.word	0x40021000
 80083b4:	40010800 	.word	0x40010800

080083b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083c0:	f107 0310 	add.w	r3, r7, #16
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	605a      	str	r2, [r3, #4]
 80083ca:	609a      	str	r2, [r3, #8]
 80083cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a15      	ldr	r2, [pc, #84]	; (8008428 <HAL_I2C_MspInit+0x70>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d123      	bne.n	8008420 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083d8:	4b14      	ldr	r3, [pc, #80]	; (800842c <HAL_I2C_MspInit+0x74>)
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	4a13      	ldr	r2, [pc, #76]	; (800842c <HAL_I2C_MspInit+0x74>)
 80083de:	f043 0308 	orr.w	r3, r3, #8
 80083e2:	6193      	str	r3, [r2, #24]
 80083e4:	4b11      	ldr	r3, [pc, #68]	; (800842c <HAL_I2C_MspInit+0x74>)
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	f003 0308 	and.w	r3, r3, #8
 80083ec:	60fb      	str	r3, [r7, #12]
 80083ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80083f0:	23c0      	movs	r3, #192	; 0xc0
 80083f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083f4:	2312      	movs	r3, #18
 80083f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083f8:	2303      	movs	r3, #3
 80083fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083fc:	f107 0310 	add.w	r3, r7, #16
 8008400:	4619      	mov	r1, r3
 8008402:	480b      	ldr	r0, [pc, #44]	; (8008430 <HAL_I2C_MspInit+0x78>)
 8008404:	f000 fd22 	bl	8008e4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008408:	4b08      	ldr	r3, [pc, #32]	; (800842c <HAL_I2C_MspInit+0x74>)
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	4a07      	ldr	r2, [pc, #28]	; (800842c <HAL_I2C_MspInit+0x74>)
 800840e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008412:	61d3      	str	r3, [r2, #28]
 8008414:	4b05      	ldr	r3, [pc, #20]	; (800842c <HAL_I2C_MspInit+0x74>)
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800841c:	60bb      	str	r3, [r7, #8]
 800841e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008420:	bf00      	nop
 8008422:	3720      	adds	r7, #32
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	40005400 	.word	0x40005400
 800842c:	40021000 	.word	0x40021000
 8008430:	40010c00 	.word	0x40010c00

08008434 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a0a      	ldr	r2, [pc, #40]	; (800846c <HAL_I2C_MspDeInit+0x38>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d10d      	bne.n	8008462 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008446:	4b0a      	ldr	r3, [pc, #40]	; (8008470 <HAL_I2C_MspDeInit+0x3c>)
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	4a09      	ldr	r2, [pc, #36]	; (8008470 <HAL_I2C_MspDeInit+0x3c>)
 800844c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008450:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008452:	2140      	movs	r1, #64	; 0x40
 8008454:	4807      	ldr	r0, [pc, #28]	; (8008474 <HAL_I2C_MspDeInit+0x40>)
 8008456:	f000 fe8d 	bl	8009174 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800845a:	2180      	movs	r1, #128	; 0x80
 800845c:	4805      	ldr	r0, [pc, #20]	; (8008474 <HAL_I2C_MspDeInit+0x40>)
 800845e:	f000 fe89 	bl	8009174 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008462:	bf00      	nop
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	40005400 	.word	0x40005400
 8008470:	40021000 	.word	0x40021000
 8008474:	40010c00 	.word	0x40010c00

08008478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a0d      	ldr	r2, [pc, #52]	; (80084bc <HAL_TIM_Base_MspInit+0x44>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d113      	bne.n	80084b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800848a:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <HAL_TIM_Base_MspInit+0x48>)
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	4a0c      	ldr	r2, [pc, #48]	; (80084c0 <HAL_TIM_Base_MspInit+0x48>)
 8008490:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008494:	6193      	str	r3, [r2, #24]
 8008496:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <HAL_TIM_Base_MspInit+0x48>)
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80084a2:	2200      	movs	r2, #0
 80084a4:	2100      	movs	r1, #0
 80084a6:	2019      	movs	r0, #25
 80084a8:	f000 fb57 	bl	8008b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80084ac:	2019      	movs	r0, #25
 80084ae:	f000 fb70 	bl	8008b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80084b2:	bf00      	nop
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	40012c00 	.word	0x40012c00
 80084c0:	40021000 	.word	0x40021000

080084c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b088      	sub	sp, #32
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084cc:	f107 0310 	add.w	r3, r7, #16
 80084d0:	2200      	movs	r2, #0
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	605a      	str	r2, [r3, #4]
 80084d6:	609a      	str	r2, [r3, #8]
 80084d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a20      	ldr	r2, [pc, #128]	; (8008560 <HAL_UART_MspInit+0x9c>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d139      	bne.n	8008558 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80084e4:	4b1f      	ldr	r3, [pc, #124]	; (8008564 <HAL_UART_MspInit+0xa0>)
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	4a1e      	ldr	r2, [pc, #120]	; (8008564 <HAL_UART_MspInit+0xa0>)
 80084ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084ee:	6193      	str	r3, [r2, #24]
 80084f0:	4b1c      	ldr	r3, [pc, #112]	; (8008564 <HAL_UART_MspInit+0xa0>)
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084fc:	4b19      	ldr	r3, [pc, #100]	; (8008564 <HAL_UART_MspInit+0xa0>)
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	4a18      	ldr	r2, [pc, #96]	; (8008564 <HAL_UART_MspInit+0xa0>)
 8008502:	f043 0304 	orr.w	r3, r3, #4
 8008506:	6193      	str	r3, [r2, #24]
 8008508:	4b16      	ldr	r3, [pc, #88]	; (8008564 <HAL_UART_MspInit+0xa0>)
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	60bb      	str	r3, [r7, #8]
 8008512:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800851a:	2302      	movs	r3, #2
 800851c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800851e:	2303      	movs	r3, #3
 8008520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008522:	f107 0310 	add.w	r3, r7, #16
 8008526:	4619      	mov	r1, r3
 8008528:	480f      	ldr	r0, [pc, #60]	; (8008568 <HAL_UART_MspInit+0xa4>)
 800852a:	f000 fc8f 	bl	8008e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800852e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008534:	2300      	movs	r3, #0
 8008536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008538:	2300      	movs	r3, #0
 800853a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800853c:	f107 0310 	add.w	r3, r7, #16
 8008540:	4619      	mov	r1, r3
 8008542:	4809      	ldr	r0, [pc, #36]	; (8008568 <HAL_UART_MspInit+0xa4>)
 8008544:	f000 fc82 	bl	8008e4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008548:	2200      	movs	r2, #0
 800854a:	2100      	movs	r1, #0
 800854c:	2025      	movs	r0, #37	; 0x25
 800854e:	f000 fb04 	bl	8008b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008552:	2025      	movs	r0, #37	; 0x25
 8008554:	f000 fb1d 	bl	8008b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008558:	bf00      	nop
 800855a:	3720      	adds	r7, #32
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	40013800 	.word	0x40013800
 8008564:	40021000 	.word	0x40021000
 8008568:	40010800 	.word	0x40010800

0800856c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008570:	e7fe      	b.n	8008570 <NMI_Handler+0x4>

08008572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008572:	b480      	push	{r7}
 8008574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008576:	e7fe      	b.n	8008576 <HardFault_Handler+0x4>

08008578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008578:	b480      	push	{r7}
 800857a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800857c:	e7fe      	b.n	800857c <MemManage_Handler+0x4>

0800857e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800857e:	b480      	push	{r7}
 8008580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008582:	e7fe      	b.n	8008582 <BusFault_Handler+0x4>

08008584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008584:	b480      	push	{r7}
 8008586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008588:	e7fe      	b.n	8008588 <UsageFault_Handler+0x4>

0800858a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800858a:	b480      	push	{r7}
 800858c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800858e:	bf00      	nop
 8008590:	46bd      	mov	sp, r7
 8008592:	bc80      	pop	{r7}
 8008594:	4770      	bx	lr

08008596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008596:	b480      	push	{r7}
 8008598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800859a:	bf00      	nop
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr

080085a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80085a2:	b480      	push	{r7}
 80085a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80085a6:	bf00      	nop
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bc80      	pop	{r7}
 80085ac:	4770      	bx	lr

080085ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80085b2:	f000 f8bf 	bl	8008734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80085b6:	bf00      	nop
 80085b8:	bd80      	pop	{r7, pc}
	...

080085bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80085c0:	4802      	ldr	r0, [pc, #8]	; (80085cc <TIM1_UP_IRQHandler+0x10>)
 80085c2:	f002 fdcd 	bl	800b160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80085c6:	bf00      	nop
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20000308 	.word	0x20000308

080085d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80085d4:	4802      	ldr	r0, [pc, #8]	; (80085e0 <USART1_IRQHandler+0x10>)
 80085d6:	f003 f9cb 	bl	800b970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80085da:	bf00      	nop
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	20000350 	.word	0x20000350

080085e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80085ec:	4a14      	ldr	r2, [pc, #80]	; (8008640 <_sbrk+0x5c>)
 80085ee:	4b15      	ldr	r3, [pc, #84]	; (8008644 <_sbrk+0x60>)
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80085f8:	4b13      	ldr	r3, [pc, #76]	; (8008648 <_sbrk+0x64>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d102      	bne.n	8008606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008600:	4b11      	ldr	r3, [pc, #68]	; (8008648 <_sbrk+0x64>)
 8008602:	4a12      	ldr	r2, [pc, #72]	; (800864c <_sbrk+0x68>)
 8008604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008606:	4b10      	ldr	r3, [pc, #64]	; (8008648 <_sbrk+0x64>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4413      	add	r3, r2
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	429a      	cmp	r2, r3
 8008612:	d207      	bcs.n	8008624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008614:	f004 f81a 	bl	800c64c <__errno>
 8008618:	4603      	mov	r3, r0
 800861a:	220c      	movs	r2, #12
 800861c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800861e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008622:	e009      	b.n	8008638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008624:	4b08      	ldr	r3, [pc, #32]	; (8008648 <_sbrk+0x64>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800862a:	4b07      	ldr	r3, [pc, #28]	; (8008648 <_sbrk+0x64>)
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4413      	add	r3, r2
 8008632:	4a05      	ldr	r2, [pc, #20]	; (8008648 <_sbrk+0x64>)
 8008634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008636:	68fb      	ldr	r3, [r7, #12]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	2000c000 	.word	0x2000c000
 8008644:	00000400 	.word	0x00000400
 8008648:	20000398 	.word	0x20000398
 800864c:	200004e8 	.word	0x200004e8

08008650 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008650:	b480      	push	{r7}
 8008652:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008654:	bf00      	nop
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800865c:	480c      	ldr	r0, [pc, #48]	; (8008690 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800865e:	490d      	ldr	r1, [pc, #52]	; (8008694 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008660:	4a0d      	ldr	r2, [pc, #52]	; (8008698 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008664:	e002      	b.n	800866c <LoopCopyDataInit>

08008666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800866a:	3304      	adds	r3, #4

0800866c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800866c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800866e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008670:	d3f9      	bcc.n	8008666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008672:	4a0a      	ldr	r2, [pc, #40]	; (800869c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008674:	4c0a      	ldr	r4, [pc, #40]	; (80086a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008678:	e001      	b.n	800867e <LoopFillZerobss>

0800867a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800867a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800867c:	3204      	adds	r2, #4

0800867e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800867e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008680:	d3fb      	bcc.n	800867a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008682:	f7ff ffe5 	bl	8008650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008686:	f003 ffe7 	bl	800c658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800868a:	f7ff fb9d 	bl	8007dc8 <main>
  bx lr
 800868e:	4770      	bx	lr
  ldr r0, =_sdata
 8008690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008694:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8008698:	0800ddf4 	.word	0x0800ddf4
  ldr r2, =_sbss
 800869c:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80086a0:	200004e8 	.word	0x200004e8

080086a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80086a4:	e7fe      	b.n	80086a4 <ADC1_2_IRQHandler>
	...

080086a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80086ac:	4b08      	ldr	r3, [pc, #32]	; (80086d0 <HAL_Init+0x28>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a07      	ldr	r2, [pc, #28]	; (80086d0 <HAL_Init+0x28>)
 80086b2:	f043 0310 	orr.w	r3, r3, #16
 80086b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80086b8:	2003      	movs	r0, #3
 80086ba:	f000 fa43 	bl	8008b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80086be:	200f      	movs	r0, #15
 80086c0:	f000 f808 	bl	80086d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80086c4:	f7ff fdfa 	bl	80082bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	40022000 	.word	0x40022000

080086d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80086dc:	4b12      	ldr	r3, [pc, #72]	; (8008728 <HAL_InitTick+0x54>)
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	4b12      	ldr	r3, [pc, #72]	; (800872c <HAL_InitTick+0x58>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	4619      	mov	r1, r3
 80086e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80086ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 fa5b 	bl	8008bae <HAL_SYSTICK_Config>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e00e      	b.n	8008720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b0f      	cmp	r3, #15
 8008706:	d80a      	bhi.n	800871e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008708:	2200      	movs	r2, #0
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008710:	f000 fa23 	bl	8008b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008714:	4a06      	ldr	r2, [pc, #24]	; (8008730 <HAL_InitTick+0x5c>)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	e000      	b.n	8008720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
}
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	200000b0 	.word	0x200000b0
 800872c:	200000b8 	.word	0x200000b8
 8008730:	200000b4 	.word	0x200000b4

08008734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008738:	4b05      	ldr	r3, [pc, #20]	; (8008750 <HAL_IncTick+0x1c>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	461a      	mov	r2, r3
 800873e:	4b05      	ldr	r3, [pc, #20]	; (8008754 <HAL_IncTick+0x20>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4413      	add	r3, r2
 8008744:	4a03      	ldr	r2, [pc, #12]	; (8008754 <HAL_IncTick+0x20>)
 8008746:	6013      	str	r3, [r2, #0]
}
 8008748:	bf00      	nop
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr
 8008750:	200000b8 	.word	0x200000b8
 8008754:	2000039c 	.word	0x2000039c

08008758 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008758:	b480      	push	{r7}
 800875a:	af00      	add	r7, sp, #0
  return uwTick;
 800875c:	4b02      	ldr	r3, [pc, #8]	; (8008768 <HAL_GetTick+0x10>)
 800875e:	681b      	ldr	r3, [r3, #0]
}
 8008760:	4618      	mov	r0, r3
 8008762:	46bd      	mov	sp, r7
 8008764:	bc80      	pop	{r7}
 8008766:	4770      	bx	lr
 8008768:	2000039c 	.word	0x2000039c

0800876c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008774:	f7ff fff0 	bl	8008758 <HAL_GetTick>
 8008778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008784:	d005      	beq.n	8008792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008786:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <HAL_Delay+0x44>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4413      	add	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008792:	bf00      	nop
 8008794:	f7ff ffe0 	bl	8008758 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d8f7      	bhi.n	8008794 <HAL_Delay+0x28>
  {
  }
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	200000b8 	.word	0x200000b8

080087b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e0ed      	b.n	80089a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d102      	bne.n	80087d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff fda4 	bl	8008320 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f042 0201 	orr.w	r2, r2, #1
 80087e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087e8:	f7ff ffb6 	bl	8008758 <HAL_GetTick>
 80087ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80087ee:	e012      	b.n	8008816 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80087f0:	f7ff ffb2 	bl	8008758 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b0a      	cmp	r3, #10
 80087fc:	d90b      	bls.n	8008816 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008802:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2205      	movs	r2, #5
 800880e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e0c5      	b.n	80089a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d0e5      	beq.n	80087f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0202 	bic.w	r2, r2, #2
 8008832:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008834:	f7ff ff90 	bl	8008758 <HAL_GetTick>
 8008838:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800883a:	e012      	b.n	8008862 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800883c:	f7ff ff8c 	bl	8008758 <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	2b0a      	cmp	r3, #10
 8008848:	d90b      	bls.n	8008862 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2205      	movs	r2, #5
 800885a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e09f      	b.n	80089a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f003 0302 	and.w	r3, r3, #2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1e5      	bne.n	800883c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	7e1b      	ldrb	r3, [r3, #24]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d108      	bne.n	800888a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	e007      	b.n	800889a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008898:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	7e5b      	ldrb	r3, [r3, #25]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d108      	bne.n	80088b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	e007      	b.n	80088c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	7e9b      	ldrb	r3, [r3, #26]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d108      	bne.n	80088de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f042 0220 	orr.w	r2, r2, #32
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	e007      	b.n	80088ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0220 	bic.w	r2, r2, #32
 80088ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	7edb      	ldrb	r3, [r3, #27]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d108      	bne.n	8008908 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 0210 	bic.w	r2, r2, #16
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	e007      	b.n	8008918 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0210 	orr.w	r2, r2, #16
 8008916:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	7f1b      	ldrb	r3, [r3, #28]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d108      	bne.n	8008932 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0208 	orr.w	r2, r2, #8
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	e007      	b.n	8008942 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f022 0208 	bic.w	r2, r2, #8
 8008940:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	7f5b      	ldrb	r3, [r3, #29]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d108      	bne.n	800895c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f042 0204 	orr.w	r2, r2, #4
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	e007      	b.n	800896c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0204 	bic.w	r2, r2, #4
 800896a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689a      	ldr	r2, [r3, #8]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	431a      	orrs	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	431a      	orrs	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	ea42 0103 	orr.w	r1, r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	1e5a      	subs	r2, r3, #1
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
	...

080089ac <__NVIC_SetPriorityGrouping>:
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80089bc:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <__NVIC_SetPriorityGrouping+0x44>)
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80089c8:	4013      	ands	r3, r2
 80089ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80089d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80089d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80089de:	4a04      	ldr	r2, [pc, #16]	; (80089f0 <__NVIC_SetPriorityGrouping+0x44>)
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	60d3      	str	r3, [r2, #12]
}
 80089e4:	bf00      	nop
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bc80      	pop	{r7}
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	e000ed00 	.word	0xe000ed00

080089f4 <__NVIC_GetPriorityGrouping>:
{
 80089f4:	b480      	push	{r7}
 80089f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089f8:	4b04      	ldr	r3, [pc, #16]	; (8008a0c <__NVIC_GetPriorityGrouping+0x18>)
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	0a1b      	lsrs	r3, r3, #8
 80089fe:	f003 0307 	and.w	r3, r3, #7
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bc80      	pop	{r7}
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	e000ed00 	.word	0xe000ed00

08008a10 <__NVIC_EnableIRQ>:
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4603      	mov	r3, r0
 8008a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	db0b      	blt.n	8008a3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a22:	79fb      	ldrb	r3, [r7, #7]
 8008a24:	f003 021f 	and.w	r2, r3, #31
 8008a28:	4906      	ldr	r1, [pc, #24]	; (8008a44 <__NVIC_EnableIRQ+0x34>)
 8008a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a2e:	095b      	lsrs	r3, r3, #5
 8008a30:	2001      	movs	r0, #1
 8008a32:	fa00 f202 	lsl.w	r2, r0, r2
 8008a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008a3a:	bf00      	nop
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bc80      	pop	{r7}
 8008a42:	4770      	bx	lr
 8008a44:	e000e100 	.word	0xe000e100

08008a48 <__NVIC_SetPriority>:
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	6039      	str	r1, [r7, #0]
 8008a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	db0a      	blt.n	8008a72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	490c      	ldr	r1, [pc, #48]	; (8008a94 <__NVIC_SetPriority+0x4c>)
 8008a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a66:	0112      	lsls	r2, r2, #4
 8008a68:	b2d2      	uxtb	r2, r2
 8008a6a:	440b      	add	r3, r1
 8008a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008a70:	e00a      	b.n	8008a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	4908      	ldr	r1, [pc, #32]	; (8008a98 <__NVIC_SetPriority+0x50>)
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	f003 030f 	and.w	r3, r3, #15
 8008a7e:	3b04      	subs	r3, #4
 8008a80:	0112      	lsls	r2, r2, #4
 8008a82:	b2d2      	uxtb	r2, r2
 8008a84:	440b      	add	r3, r1
 8008a86:	761a      	strb	r2, [r3, #24]
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bc80      	pop	{r7}
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	e000e100 	.word	0xe000e100
 8008a98:	e000ed00 	.word	0xe000ed00

08008a9c <NVIC_EncodePriority>:
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b089      	sub	sp, #36	; 0x24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f003 0307 	and.w	r3, r3, #7
 8008aae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	f1c3 0307 	rsb	r3, r3, #7
 8008ab6:	2b04      	cmp	r3, #4
 8008ab8:	bf28      	it	cs
 8008aba:	2304      	movcs	r3, #4
 8008abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	2b06      	cmp	r3, #6
 8008ac4:	d902      	bls.n	8008acc <NVIC_EncodePriority+0x30>
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	3b03      	subs	r3, #3
 8008aca:	e000      	b.n	8008ace <NVIC_EncodePriority+0x32>
 8008acc:	2300      	movs	r3, #0
 8008ace:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	43da      	mvns	r2, r3
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	401a      	ands	r2, r3
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ae4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	fa01 f303 	lsl.w	r3, r1, r3
 8008aee:	43d9      	mvns	r1, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008af4:	4313      	orrs	r3, r2
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3724      	adds	r7, #36	; 0x24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc80      	pop	{r7}
 8008afe:	4770      	bx	lr

08008b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b10:	d301      	bcc.n	8008b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b12:	2301      	movs	r3, #1
 8008b14:	e00f      	b.n	8008b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b16:	4a0a      	ldr	r2, [pc, #40]	; (8008b40 <SysTick_Config+0x40>)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b1e:	210f      	movs	r1, #15
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b24:	f7ff ff90 	bl	8008a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b28:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <SysTick_Config+0x40>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b2e:	4b04      	ldr	r3, [pc, #16]	; (8008b40 <SysTick_Config+0x40>)
 8008b30:	2207      	movs	r2, #7
 8008b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	e000e010 	.word	0xe000e010

08008b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7ff ff2d 	bl	80089ac <__NVIC_SetPriorityGrouping>
}
 8008b52:	bf00      	nop
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b086      	sub	sp, #24
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	4603      	mov	r3, r0
 8008b62:	60b9      	str	r1, [r7, #8]
 8008b64:	607a      	str	r2, [r7, #4]
 8008b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b6c:	f7ff ff42 	bl	80089f4 <__NVIC_GetPriorityGrouping>
 8008b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	68b9      	ldr	r1, [r7, #8]
 8008b76:	6978      	ldr	r0, [r7, #20]
 8008b78:	f7ff ff90 	bl	8008a9c <NVIC_EncodePriority>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b82:	4611      	mov	r1, r2
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7ff ff5f 	bl	8008a48 <__NVIC_SetPriority>
}
 8008b8a:	bf00      	nop
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b082      	sub	sp, #8
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	4603      	mov	r3, r0
 8008b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7ff ff35 	bl	8008a10 <__NVIC_EnableIRQ>
}
 8008ba6:	bf00      	nop
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b082      	sub	sp, #8
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7ff ffa2 	bl	8008b00 <SysTick_Config>
 8008bbc:	4603      	mov	r3, r0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b085      	sub	sp, #20
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d008      	beq.n	8008bf0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2204      	movs	r2, #4
 8008be2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e020      	b.n	8008c32 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f022 020e 	bic.w	r2, r2, #14
 8008bfe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 0201 	bic.w	r2, r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c18:	2101      	movs	r1, #1
 8008c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8008c1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bc80      	pop	{r7}
 8008c3a:	4770      	bx	lr

08008c3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d005      	beq.n	8008c60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2204      	movs	r2, #4
 8008c58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	73fb      	strb	r3, [r7, #15]
 8008c5e:	e0d6      	b.n	8008e0e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 020e 	bic.w	r2, r2, #14
 8008c6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f022 0201 	bic.w	r2, r2, #1
 8008c7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	461a      	mov	r2, r3
 8008c86:	4b64      	ldr	r3, [pc, #400]	; (8008e18 <HAL_DMA_Abort_IT+0x1dc>)
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d958      	bls.n	8008d3e <HAL_DMA_Abort_IT+0x102>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a62      	ldr	r2, [pc, #392]	; (8008e1c <HAL_DMA_Abort_IT+0x1e0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d04f      	beq.n	8008d36 <HAL_DMA_Abort_IT+0xfa>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a61      	ldr	r2, [pc, #388]	; (8008e20 <HAL_DMA_Abort_IT+0x1e4>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d048      	beq.n	8008d32 <HAL_DMA_Abort_IT+0xf6>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a5f      	ldr	r2, [pc, #380]	; (8008e24 <HAL_DMA_Abort_IT+0x1e8>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d040      	beq.n	8008d2c <HAL_DMA_Abort_IT+0xf0>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a5e      	ldr	r2, [pc, #376]	; (8008e28 <HAL_DMA_Abort_IT+0x1ec>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d038      	beq.n	8008d26 <HAL_DMA_Abort_IT+0xea>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a5c      	ldr	r2, [pc, #368]	; (8008e2c <HAL_DMA_Abort_IT+0x1f0>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d030      	beq.n	8008d20 <HAL_DMA_Abort_IT+0xe4>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a5b      	ldr	r2, [pc, #364]	; (8008e30 <HAL_DMA_Abort_IT+0x1f4>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d028      	beq.n	8008d1a <HAL_DMA_Abort_IT+0xde>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a52      	ldr	r2, [pc, #328]	; (8008e18 <HAL_DMA_Abort_IT+0x1dc>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d020      	beq.n	8008d14 <HAL_DMA_Abort_IT+0xd8>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a57      	ldr	r2, [pc, #348]	; (8008e34 <HAL_DMA_Abort_IT+0x1f8>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d019      	beq.n	8008d10 <HAL_DMA_Abort_IT+0xd4>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a55      	ldr	r2, [pc, #340]	; (8008e38 <HAL_DMA_Abort_IT+0x1fc>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d012      	beq.n	8008d0c <HAL_DMA_Abort_IT+0xd0>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a54      	ldr	r2, [pc, #336]	; (8008e3c <HAL_DMA_Abort_IT+0x200>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d00a      	beq.n	8008d06 <HAL_DMA_Abort_IT+0xca>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a52      	ldr	r2, [pc, #328]	; (8008e40 <HAL_DMA_Abort_IT+0x204>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d102      	bne.n	8008d00 <HAL_DMA_Abort_IT+0xc4>
 8008cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cfe:	e01b      	b.n	8008d38 <HAL_DMA_Abort_IT+0xfc>
 8008d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d04:	e018      	b.n	8008d38 <HAL_DMA_Abort_IT+0xfc>
 8008d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d0a:	e015      	b.n	8008d38 <HAL_DMA_Abort_IT+0xfc>
 8008d0c:	2310      	movs	r3, #16
 8008d0e:	e013      	b.n	8008d38 <HAL_DMA_Abort_IT+0xfc>
 8008d10:	2301      	movs	r3, #1
 8008d12:	e011      	b.n	8008d38 <HAL_DMA_Abort_IT+0xfc>
 8008d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d18:	e00e      	b.n	8008d38 <HAL_DMA_Abort_IT+0xfc>
 8008d1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d1e:	e00b      	b.n	8008d38 <HAL_DMA_Abort_IT+0xfc>
 8008d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d24:	e008      	b.n	8008d38 <HAL_DMA_Abort_IT+0xfc>
 8008d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d2a:	e005      	b.n	8008d38 <HAL_DMA_Abort_IT+0xfc>
 8008d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d30:	e002      	b.n	8008d38 <HAL_DMA_Abort_IT+0xfc>
 8008d32:	2310      	movs	r3, #16
 8008d34:	e000      	b.n	8008d38 <HAL_DMA_Abort_IT+0xfc>
 8008d36:	2301      	movs	r3, #1
 8008d38:	4a42      	ldr	r2, [pc, #264]	; (8008e44 <HAL_DMA_Abort_IT+0x208>)
 8008d3a:	6053      	str	r3, [r2, #4]
 8008d3c:	e057      	b.n	8008dee <HAL_DMA_Abort_IT+0x1b2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a36      	ldr	r2, [pc, #216]	; (8008e1c <HAL_DMA_Abort_IT+0x1e0>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d04f      	beq.n	8008de8 <HAL_DMA_Abort_IT+0x1ac>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a34      	ldr	r2, [pc, #208]	; (8008e20 <HAL_DMA_Abort_IT+0x1e4>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d048      	beq.n	8008de4 <HAL_DMA_Abort_IT+0x1a8>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a33      	ldr	r2, [pc, #204]	; (8008e24 <HAL_DMA_Abort_IT+0x1e8>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d040      	beq.n	8008dde <HAL_DMA_Abort_IT+0x1a2>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a31      	ldr	r2, [pc, #196]	; (8008e28 <HAL_DMA_Abort_IT+0x1ec>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d038      	beq.n	8008dd8 <HAL_DMA_Abort_IT+0x19c>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a30      	ldr	r2, [pc, #192]	; (8008e2c <HAL_DMA_Abort_IT+0x1f0>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d030      	beq.n	8008dd2 <HAL_DMA_Abort_IT+0x196>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a2e      	ldr	r2, [pc, #184]	; (8008e30 <HAL_DMA_Abort_IT+0x1f4>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d028      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x190>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a26      	ldr	r2, [pc, #152]	; (8008e18 <HAL_DMA_Abort_IT+0x1dc>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d020      	beq.n	8008dc6 <HAL_DMA_Abort_IT+0x18a>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a2a      	ldr	r2, [pc, #168]	; (8008e34 <HAL_DMA_Abort_IT+0x1f8>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d019      	beq.n	8008dc2 <HAL_DMA_Abort_IT+0x186>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a29      	ldr	r2, [pc, #164]	; (8008e38 <HAL_DMA_Abort_IT+0x1fc>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d012      	beq.n	8008dbe <HAL_DMA_Abort_IT+0x182>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a27      	ldr	r2, [pc, #156]	; (8008e3c <HAL_DMA_Abort_IT+0x200>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d00a      	beq.n	8008db8 <HAL_DMA_Abort_IT+0x17c>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a26      	ldr	r2, [pc, #152]	; (8008e40 <HAL_DMA_Abort_IT+0x204>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d102      	bne.n	8008db2 <HAL_DMA_Abort_IT+0x176>
 8008dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db0:	e01b      	b.n	8008dea <HAL_DMA_Abort_IT+0x1ae>
 8008db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008db6:	e018      	b.n	8008dea <HAL_DMA_Abort_IT+0x1ae>
 8008db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dbc:	e015      	b.n	8008dea <HAL_DMA_Abort_IT+0x1ae>
 8008dbe:	2310      	movs	r3, #16
 8008dc0:	e013      	b.n	8008dea <HAL_DMA_Abort_IT+0x1ae>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e011      	b.n	8008dea <HAL_DMA_Abort_IT+0x1ae>
 8008dc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008dca:	e00e      	b.n	8008dea <HAL_DMA_Abort_IT+0x1ae>
 8008dcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008dd0:	e00b      	b.n	8008dea <HAL_DMA_Abort_IT+0x1ae>
 8008dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dd6:	e008      	b.n	8008dea <HAL_DMA_Abort_IT+0x1ae>
 8008dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ddc:	e005      	b.n	8008dea <HAL_DMA_Abort_IT+0x1ae>
 8008dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008de2:	e002      	b.n	8008dea <HAL_DMA_Abort_IT+0x1ae>
 8008de4:	2310      	movs	r3, #16
 8008de6:	e000      	b.n	8008dea <HAL_DMA_Abort_IT+0x1ae>
 8008de8:	2301      	movs	r3, #1
 8008dea:	4a17      	ldr	r2, [pc, #92]	; (8008e48 <HAL_DMA_Abort_IT+0x20c>)
 8008dec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4798      	blx	r3
    } 
  }
  return status;
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	40020080 	.word	0x40020080
 8008e1c:	40020008 	.word	0x40020008
 8008e20:	4002001c 	.word	0x4002001c
 8008e24:	40020030 	.word	0x40020030
 8008e28:	40020044 	.word	0x40020044
 8008e2c:	40020058 	.word	0x40020058
 8008e30:	4002006c 	.word	0x4002006c
 8008e34:	40020408 	.word	0x40020408
 8008e38:	4002041c 	.word	0x4002041c
 8008e3c:	40020430 	.word	0x40020430
 8008e40:	40020444 	.word	0x40020444
 8008e44:	40020400 	.word	0x40020400
 8008e48:	40020000 	.word	0x40020000

08008e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b08b      	sub	sp, #44	; 0x2c
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e56:	2300      	movs	r3, #0
 8008e58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e5e:	e179      	b.n	8009154 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008e60:	2201      	movs	r2, #1
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	fa02 f303 	lsl.w	r3, r2, r3
 8008e68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69fa      	ldr	r2, [r7, #28]
 8008e70:	4013      	ands	r3, r2
 8008e72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	f040 8168 	bne.w	800914e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	4a96      	ldr	r2, [pc, #600]	; (80090dc <HAL_GPIO_Init+0x290>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d05e      	beq.n	8008f46 <HAL_GPIO_Init+0xfa>
 8008e88:	4a94      	ldr	r2, [pc, #592]	; (80090dc <HAL_GPIO_Init+0x290>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d875      	bhi.n	8008f7a <HAL_GPIO_Init+0x12e>
 8008e8e:	4a94      	ldr	r2, [pc, #592]	; (80090e0 <HAL_GPIO_Init+0x294>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d058      	beq.n	8008f46 <HAL_GPIO_Init+0xfa>
 8008e94:	4a92      	ldr	r2, [pc, #584]	; (80090e0 <HAL_GPIO_Init+0x294>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d86f      	bhi.n	8008f7a <HAL_GPIO_Init+0x12e>
 8008e9a:	4a92      	ldr	r2, [pc, #584]	; (80090e4 <HAL_GPIO_Init+0x298>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d052      	beq.n	8008f46 <HAL_GPIO_Init+0xfa>
 8008ea0:	4a90      	ldr	r2, [pc, #576]	; (80090e4 <HAL_GPIO_Init+0x298>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d869      	bhi.n	8008f7a <HAL_GPIO_Init+0x12e>
 8008ea6:	4a90      	ldr	r2, [pc, #576]	; (80090e8 <HAL_GPIO_Init+0x29c>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d04c      	beq.n	8008f46 <HAL_GPIO_Init+0xfa>
 8008eac:	4a8e      	ldr	r2, [pc, #568]	; (80090e8 <HAL_GPIO_Init+0x29c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d863      	bhi.n	8008f7a <HAL_GPIO_Init+0x12e>
 8008eb2:	4a8e      	ldr	r2, [pc, #568]	; (80090ec <HAL_GPIO_Init+0x2a0>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d046      	beq.n	8008f46 <HAL_GPIO_Init+0xfa>
 8008eb8:	4a8c      	ldr	r2, [pc, #560]	; (80090ec <HAL_GPIO_Init+0x2a0>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d85d      	bhi.n	8008f7a <HAL_GPIO_Init+0x12e>
 8008ebe:	2b12      	cmp	r3, #18
 8008ec0:	d82a      	bhi.n	8008f18 <HAL_GPIO_Init+0xcc>
 8008ec2:	2b12      	cmp	r3, #18
 8008ec4:	d859      	bhi.n	8008f7a <HAL_GPIO_Init+0x12e>
 8008ec6:	a201      	add	r2, pc, #4	; (adr r2, 8008ecc <HAL_GPIO_Init+0x80>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008f47 	.word	0x08008f47
 8008ed0:	08008f21 	.word	0x08008f21
 8008ed4:	08008f33 	.word	0x08008f33
 8008ed8:	08008f75 	.word	0x08008f75
 8008edc:	08008f7b 	.word	0x08008f7b
 8008ee0:	08008f7b 	.word	0x08008f7b
 8008ee4:	08008f7b 	.word	0x08008f7b
 8008ee8:	08008f7b 	.word	0x08008f7b
 8008eec:	08008f7b 	.word	0x08008f7b
 8008ef0:	08008f7b 	.word	0x08008f7b
 8008ef4:	08008f7b 	.word	0x08008f7b
 8008ef8:	08008f7b 	.word	0x08008f7b
 8008efc:	08008f7b 	.word	0x08008f7b
 8008f00:	08008f7b 	.word	0x08008f7b
 8008f04:	08008f7b 	.word	0x08008f7b
 8008f08:	08008f7b 	.word	0x08008f7b
 8008f0c:	08008f7b 	.word	0x08008f7b
 8008f10:	08008f29 	.word	0x08008f29
 8008f14:	08008f3d 	.word	0x08008f3d
 8008f18:	4a75      	ldr	r2, [pc, #468]	; (80090f0 <HAL_GPIO_Init+0x2a4>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d013      	beq.n	8008f46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008f1e:	e02c      	b.n	8008f7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	623b      	str	r3, [r7, #32]
          break;
 8008f26:	e029      	b.n	8008f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	623b      	str	r3, [r7, #32]
          break;
 8008f30:	e024      	b.n	8008f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	3308      	adds	r3, #8
 8008f38:	623b      	str	r3, [r7, #32]
          break;
 8008f3a:	e01f      	b.n	8008f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	330c      	adds	r3, #12
 8008f42:	623b      	str	r3, [r7, #32]
          break;
 8008f44:	e01a      	b.n	8008f7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d102      	bne.n	8008f54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008f4e:	2304      	movs	r3, #4
 8008f50:	623b      	str	r3, [r7, #32]
          break;
 8008f52:	e013      	b.n	8008f7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d105      	bne.n	8008f68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f5c:	2308      	movs	r3, #8
 8008f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	69fa      	ldr	r2, [r7, #28]
 8008f64:	611a      	str	r2, [r3, #16]
          break;
 8008f66:	e009      	b.n	8008f7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f68:	2308      	movs	r3, #8
 8008f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	69fa      	ldr	r2, [r7, #28]
 8008f70:	615a      	str	r2, [r3, #20]
          break;
 8008f72:	e003      	b.n	8008f7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008f74:	2300      	movs	r3, #0
 8008f76:	623b      	str	r3, [r7, #32]
          break;
 8008f78:	e000      	b.n	8008f7c <HAL_GPIO_Init+0x130>
          break;
 8008f7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	2bff      	cmp	r3, #255	; 0xff
 8008f80:	d801      	bhi.n	8008f86 <HAL_GPIO_Init+0x13a>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	e001      	b.n	8008f8a <HAL_GPIO_Init+0x13e>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	3304      	adds	r3, #4
 8008f8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	2bff      	cmp	r3, #255	; 0xff
 8008f90:	d802      	bhi.n	8008f98 <HAL_GPIO_Init+0x14c>
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	e002      	b.n	8008f9e <HAL_GPIO_Init+0x152>
 8008f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9a:	3b08      	subs	r3, #8
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	210f      	movs	r1, #15
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fac:	43db      	mvns	r3, r3
 8008fae:	401a      	ands	r2, r3
 8008fb0:	6a39      	ldr	r1, [r7, #32]
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 80c1 	beq.w	800914e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008fcc:	4b49      	ldr	r3, [pc, #292]	; (80090f4 <HAL_GPIO_Init+0x2a8>)
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	4a48      	ldr	r2, [pc, #288]	; (80090f4 <HAL_GPIO_Init+0x2a8>)
 8008fd2:	f043 0301 	orr.w	r3, r3, #1
 8008fd6:	6193      	str	r3, [r2, #24]
 8008fd8:	4b46      	ldr	r3, [pc, #280]	; (80090f4 <HAL_GPIO_Init+0x2a8>)
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	f003 0301 	and.w	r3, r3, #1
 8008fe0:	60bb      	str	r3, [r7, #8]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008fe4:	4a44      	ldr	r2, [pc, #272]	; (80090f8 <HAL_GPIO_Init+0x2ac>)
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	089b      	lsrs	r3, r3, #2
 8008fea:	3302      	adds	r3, #2
 8008fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ff0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	f003 0303 	and.w	r3, r3, #3
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	220f      	movs	r2, #15
 8008ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8009000:	43db      	mvns	r3, r3
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	4013      	ands	r3, r2
 8009006:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a3c      	ldr	r2, [pc, #240]	; (80090fc <HAL_GPIO_Init+0x2b0>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d01f      	beq.n	8009050 <HAL_GPIO_Init+0x204>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a3b      	ldr	r2, [pc, #236]	; (8009100 <HAL_GPIO_Init+0x2b4>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d019      	beq.n	800904c <HAL_GPIO_Init+0x200>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a3a      	ldr	r2, [pc, #232]	; (8009104 <HAL_GPIO_Init+0x2b8>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d013      	beq.n	8009048 <HAL_GPIO_Init+0x1fc>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a39      	ldr	r2, [pc, #228]	; (8009108 <HAL_GPIO_Init+0x2bc>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d00d      	beq.n	8009044 <HAL_GPIO_Init+0x1f8>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a38      	ldr	r2, [pc, #224]	; (800910c <HAL_GPIO_Init+0x2c0>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d007      	beq.n	8009040 <HAL_GPIO_Init+0x1f4>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a37      	ldr	r2, [pc, #220]	; (8009110 <HAL_GPIO_Init+0x2c4>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d101      	bne.n	800903c <HAL_GPIO_Init+0x1f0>
 8009038:	2305      	movs	r3, #5
 800903a:	e00a      	b.n	8009052 <HAL_GPIO_Init+0x206>
 800903c:	2306      	movs	r3, #6
 800903e:	e008      	b.n	8009052 <HAL_GPIO_Init+0x206>
 8009040:	2304      	movs	r3, #4
 8009042:	e006      	b.n	8009052 <HAL_GPIO_Init+0x206>
 8009044:	2303      	movs	r3, #3
 8009046:	e004      	b.n	8009052 <HAL_GPIO_Init+0x206>
 8009048:	2302      	movs	r3, #2
 800904a:	e002      	b.n	8009052 <HAL_GPIO_Init+0x206>
 800904c:	2301      	movs	r3, #1
 800904e:	e000      	b.n	8009052 <HAL_GPIO_Init+0x206>
 8009050:	2300      	movs	r3, #0
 8009052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009054:	f002 0203 	and.w	r2, r2, #3
 8009058:	0092      	lsls	r2, r2, #2
 800905a:	4093      	lsls	r3, r2
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	4313      	orrs	r3, r2
 8009060:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009062:	4925      	ldr	r1, [pc, #148]	; (80090f8 <HAL_GPIO_Init+0x2ac>)
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	089b      	lsrs	r3, r3, #2
 8009068:	3302      	adds	r3, #2
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d006      	beq.n	800908a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800907c:	4b25      	ldr	r3, [pc, #148]	; (8009114 <HAL_GPIO_Init+0x2c8>)
 800907e:	689a      	ldr	r2, [r3, #8]
 8009080:	4924      	ldr	r1, [pc, #144]	; (8009114 <HAL_GPIO_Init+0x2c8>)
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	4313      	orrs	r3, r2
 8009086:	608b      	str	r3, [r1, #8]
 8009088:	e006      	b.n	8009098 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800908a:	4b22      	ldr	r3, [pc, #136]	; (8009114 <HAL_GPIO_Init+0x2c8>)
 800908c:	689a      	ldr	r2, [r3, #8]
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	43db      	mvns	r3, r3
 8009092:	4920      	ldr	r1, [pc, #128]	; (8009114 <HAL_GPIO_Init+0x2c8>)
 8009094:	4013      	ands	r3, r2
 8009096:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d006      	beq.n	80090b2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80090a4:	4b1b      	ldr	r3, [pc, #108]	; (8009114 <HAL_GPIO_Init+0x2c8>)
 80090a6:	68da      	ldr	r2, [r3, #12]
 80090a8:	491a      	ldr	r1, [pc, #104]	; (8009114 <HAL_GPIO_Init+0x2c8>)
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	60cb      	str	r3, [r1, #12]
 80090b0:	e006      	b.n	80090c0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80090b2:	4b18      	ldr	r3, [pc, #96]	; (8009114 <HAL_GPIO_Init+0x2c8>)
 80090b4:	68da      	ldr	r2, [r3, #12]
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	43db      	mvns	r3, r3
 80090ba:	4916      	ldr	r1, [pc, #88]	; (8009114 <HAL_GPIO_Init+0x2c8>)
 80090bc:	4013      	ands	r3, r2
 80090be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d025      	beq.n	8009118 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80090cc:	4b11      	ldr	r3, [pc, #68]	; (8009114 <HAL_GPIO_Init+0x2c8>)
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	4910      	ldr	r1, [pc, #64]	; (8009114 <HAL_GPIO_Init+0x2c8>)
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	604b      	str	r3, [r1, #4]
 80090d8:	e025      	b.n	8009126 <HAL_GPIO_Init+0x2da>
 80090da:	bf00      	nop
 80090dc:	10320000 	.word	0x10320000
 80090e0:	10310000 	.word	0x10310000
 80090e4:	10220000 	.word	0x10220000
 80090e8:	10210000 	.word	0x10210000
 80090ec:	10120000 	.word	0x10120000
 80090f0:	10110000 	.word	0x10110000
 80090f4:	40021000 	.word	0x40021000
 80090f8:	40010000 	.word	0x40010000
 80090fc:	40010800 	.word	0x40010800
 8009100:	40010c00 	.word	0x40010c00
 8009104:	40011000 	.word	0x40011000
 8009108:	40011400 	.word	0x40011400
 800910c:	40011800 	.word	0x40011800
 8009110:	40011c00 	.word	0x40011c00
 8009114:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009118:	4b15      	ldr	r3, [pc, #84]	; (8009170 <HAL_GPIO_Init+0x324>)
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	43db      	mvns	r3, r3
 8009120:	4913      	ldr	r1, [pc, #76]	; (8009170 <HAL_GPIO_Init+0x324>)
 8009122:	4013      	ands	r3, r2
 8009124:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d006      	beq.n	8009140 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009132:	4b0f      	ldr	r3, [pc, #60]	; (8009170 <HAL_GPIO_Init+0x324>)
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	490e      	ldr	r1, [pc, #56]	; (8009170 <HAL_GPIO_Init+0x324>)
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	4313      	orrs	r3, r2
 800913c:	600b      	str	r3, [r1, #0]
 800913e:	e006      	b.n	800914e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009140:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <HAL_GPIO_Init+0x324>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	43db      	mvns	r3, r3
 8009148:	4909      	ldr	r1, [pc, #36]	; (8009170 <HAL_GPIO_Init+0x324>)
 800914a:	4013      	ands	r3, r2
 800914c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	3301      	adds	r3, #1
 8009152:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	fa22 f303 	lsr.w	r3, r2, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	f47f ae7e 	bne.w	8008e60 <HAL_GPIO_Init+0x14>
  }
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop
 8009168:	372c      	adds	r7, #44	; 0x2c
 800916a:	46bd      	mov	sp, r7
 800916c:	bc80      	pop	{r7}
 800916e:	4770      	bx	lr
 8009170:	40010400 	.word	0x40010400

08009174 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009174:	b480      	push	{r7}
 8009176:	b089      	sub	sp, #36	; 0x24
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800917e:	2300      	movs	r3, #0
 8009180:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009182:	e0a6      	b.n	80092d2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009184:	2201      	movs	r2, #1
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	fa02 f303 	lsl.w	r3, r2, r3
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	4013      	ands	r3, r2
 8009190:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 8099 	beq.w	80092cc <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800919a:	4a54      	ldr	r2, [pc, #336]	; (80092ec <HAL_GPIO_DeInit+0x178>)
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	089b      	lsrs	r3, r3, #2
 80091a0:	3302      	adds	r3, #2
 80091a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091a6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	f003 0303 	and.w	r3, r3, #3
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	220f      	movs	r2, #15
 80091b2:	fa02 f303 	lsl.w	r3, r2, r3
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	4013      	ands	r3, r2
 80091ba:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a4c      	ldr	r2, [pc, #304]	; (80092f0 <HAL_GPIO_DeInit+0x17c>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d01f      	beq.n	8009204 <HAL_GPIO_DeInit+0x90>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a4b      	ldr	r2, [pc, #300]	; (80092f4 <HAL_GPIO_DeInit+0x180>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d019      	beq.n	8009200 <HAL_GPIO_DeInit+0x8c>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a4a      	ldr	r2, [pc, #296]	; (80092f8 <HAL_GPIO_DeInit+0x184>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d013      	beq.n	80091fc <HAL_GPIO_DeInit+0x88>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a49      	ldr	r2, [pc, #292]	; (80092fc <HAL_GPIO_DeInit+0x188>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d00d      	beq.n	80091f8 <HAL_GPIO_DeInit+0x84>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a48      	ldr	r2, [pc, #288]	; (8009300 <HAL_GPIO_DeInit+0x18c>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d007      	beq.n	80091f4 <HAL_GPIO_DeInit+0x80>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a47      	ldr	r2, [pc, #284]	; (8009304 <HAL_GPIO_DeInit+0x190>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d101      	bne.n	80091f0 <HAL_GPIO_DeInit+0x7c>
 80091ec:	2305      	movs	r3, #5
 80091ee:	e00a      	b.n	8009206 <HAL_GPIO_DeInit+0x92>
 80091f0:	2306      	movs	r3, #6
 80091f2:	e008      	b.n	8009206 <HAL_GPIO_DeInit+0x92>
 80091f4:	2304      	movs	r3, #4
 80091f6:	e006      	b.n	8009206 <HAL_GPIO_DeInit+0x92>
 80091f8:	2303      	movs	r3, #3
 80091fa:	e004      	b.n	8009206 <HAL_GPIO_DeInit+0x92>
 80091fc:	2302      	movs	r3, #2
 80091fe:	e002      	b.n	8009206 <HAL_GPIO_DeInit+0x92>
 8009200:	2301      	movs	r3, #1
 8009202:	e000      	b.n	8009206 <HAL_GPIO_DeInit+0x92>
 8009204:	2300      	movs	r3, #0
 8009206:	69fa      	ldr	r2, [r7, #28]
 8009208:	f002 0203 	and.w	r2, r2, #3
 800920c:	0092      	lsls	r2, r2, #2
 800920e:	4093      	lsls	r3, r2
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	429a      	cmp	r2, r3
 8009214:	d132      	bne.n	800927c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009216:	4b3c      	ldr	r3, [pc, #240]	; (8009308 <HAL_GPIO_DeInit+0x194>)
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	43db      	mvns	r3, r3
 800921e:	493a      	ldr	r1, [pc, #232]	; (8009308 <HAL_GPIO_DeInit+0x194>)
 8009220:	4013      	ands	r3, r2
 8009222:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009224:	4b38      	ldr	r3, [pc, #224]	; (8009308 <HAL_GPIO_DeInit+0x194>)
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	43db      	mvns	r3, r3
 800922c:	4936      	ldr	r1, [pc, #216]	; (8009308 <HAL_GPIO_DeInit+0x194>)
 800922e:	4013      	ands	r3, r2
 8009230:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009232:	4b35      	ldr	r3, [pc, #212]	; (8009308 <HAL_GPIO_DeInit+0x194>)
 8009234:	68da      	ldr	r2, [r3, #12]
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	43db      	mvns	r3, r3
 800923a:	4933      	ldr	r1, [pc, #204]	; (8009308 <HAL_GPIO_DeInit+0x194>)
 800923c:	4013      	ands	r3, r2
 800923e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009240:	4b31      	ldr	r3, [pc, #196]	; (8009308 <HAL_GPIO_DeInit+0x194>)
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	43db      	mvns	r3, r3
 8009248:	492f      	ldr	r1, [pc, #188]	; (8009308 <HAL_GPIO_DeInit+0x194>)
 800924a:	4013      	ands	r3, r2
 800924c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	f003 0303 	and.w	r3, r3, #3
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	220f      	movs	r2, #15
 8009258:	fa02 f303 	lsl.w	r3, r2, r3
 800925c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800925e:	4a23      	ldr	r2, [pc, #140]	; (80092ec <HAL_GPIO_DeInit+0x178>)
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	089b      	lsrs	r3, r3, #2
 8009264:	3302      	adds	r3, #2
 8009266:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	43da      	mvns	r2, r3
 800926e:	481f      	ldr	r0, [pc, #124]	; (80092ec <HAL_GPIO_DeInit+0x178>)
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	089b      	lsrs	r3, r3, #2
 8009274:	400a      	ands	r2, r1
 8009276:	3302      	adds	r3, #2
 8009278:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	2bff      	cmp	r3, #255	; 0xff
 8009280:	d801      	bhi.n	8009286 <HAL_GPIO_DeInit+0x112>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	e001      	b.n	800928a <HAL_GPIO_DeInit+0x116>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	3304      	adds	r3, #4
 800928a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	2bff      	cmp	r3, #255	; 0xff
 8009290:	d802      	bhi.n	8009298 <HAL_GPIO_DeInit+0x124>
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	e002      	b.n	800929e <HAL_GPIO_DeInit+0x12a>
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	3b08      	subs	r3, #8
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	210f      	movs	r1, #15
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	fa01 f303 	lsl.w	r3, r1, r3
 80092ac:	43db      	mvns	r3, r3
 80092ae:	401a      	ands	r2, r3
 80092b0:	2104      	movs	r1, #4
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	fa01 f303 	lsl.w	r3, r1, r3
 80092b8:	431a      	orrs	r2, r3
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	43db      	mvns	r3, r3
 80092c6:	401a      	ands	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	60da      	str	r2, [r3, #12]
    }

    position++;
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	3301      	adds	r3, #1
 80092d0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	fa22 f303 	lsr.w	r3, r2, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f47f af52 	bne.w	8009184 <HAL_GPIO_DeInit+0x10>
  }
}
 80092e0:	bf00      	nop
 80092e2:	bf00      	nop
 80092e4:	3724      	adds	r7, #36	; 0x24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bc80      	pop	{r7}
 80092ea:	4770      	bx	lr
 80092ec:	40010000 	.word	0x40010000
 80092f0:	40010800 	.word	0x40010800
 80092f4:	40010c00 	.word	0x40010c00
 80092f8:	40011000 	.word	0x40011000
 80092fc:	40011400 	.word	0x40011400
 8009300:	40011800 	.word	0x40011800
 8009304:	40011c00 	.word	0x40011c00
 8009308:	40010400 	.word	0x40010400

0800930c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	460b      	mov	r3, r1
 8009316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	887b      	ldrh	r3, [r7, #2]
 800931e:	4013      	ands	r3, r2
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009324:	2301      	movs	r3, #1
 8009326:	73fb      	strb	r3, [r7, #15]
 8009328:	e001      	b.n	800932e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800932a:	2300      	movs	r3, #0
 800932c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800932e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	bc80      	pop	{r7}
 8009338:	4770      	bx	lr

0800933a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800933a:	b480      	push	{r7}
 800933c:	b083      	sub	sp, #12
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	460b      	mov	r3, r1
 8009344:	807b      	strh	r3, [r7, #2]
 8009346:	4613      	mov	r3, r2
 8009348:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800934a:	787b      	ldrb	r3, [r7, #1]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d003      	beq.n	8009358 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009350:	887a      	ldrh	r2, [r7, #2]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009356:	e003      	b.n	8009360 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009358:	887b      	ldrh	r3, [r7, #2]
 800935a:	041a      	lsls	r2, r3, #16
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	611a      	str	r2, [r3, #16]
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	bc80      	pop	{r7}
 8009368:	4770      	bx	lr

0800936a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800936a:	b480      	push	{r7}
 800936c:	b085      	sub	sp, #20
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	460b      	mov	r3, r1
 8009374:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800937c:	887a      	ldrh	r2, [r7, #2]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	4013      	ands	r3, r2
 8009382:	041a      	lsls	r2, r3, #16
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	43d9      	mvns	r1, r3
 8009388:	887b      	ldrh	r3, [r7, #2]
 800938a:	400b      	ands	r3, r1
 800938c:	431a      	orrs	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	611a      	str	r2, [r3, #16]
}
 8009392:	bf00      	nop
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	bc80      	pop	{r7}
 800939a:	4770      	bx	lr

0800939c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e12b      	b.n	8009606 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d106      	bne.n	80093c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7fe fff8 	bl	80083b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2224      	movs	r2, #36	; 0x24
 80093cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f022 0201 	bic.w	r2, r2, #1
 80093de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009400:	f001 fdb8 	bl	800af74 <HAL_RCC_GetPCLK1Freq>
 8009404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	4a81      	ldr	r2, [pc, #516]	; (8009610 <HAL_I2C_Init+0x274>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d807      	bhi.n	8009420 <HAL_I2C_Init+0x84>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4a80      	ldr	r2, [pc, #512]	; (8009614 <HAL_I2C_Init+0x278>)
 8009414:	4293      	cmp	r3, r2
 8009416:	bf94      	ite	ls
 8009418:	2301      	movls	r3, #1
 800941a:	2300      	movhi	r3, #0
 800941c:	b2db      	uxtb	r3, r3
 800941e:	e006      	b.n	800942e <HAL_I2C_Init+0x92>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	4a7d      	ldr	r2, [pc, #500]	; (8009618 <HAL_I2C_Init+0x27c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	bf94      	ite	ls
 8009428:	2301      	movls	r3, #1
 800942a:	2300      	movhi	r3, #0
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e0e7      	b.n	8009606 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	4a78      	ldr	r2, [pc, #480]	; (800961c <HAL_I2C_Init+0x280>)
 800943a:	fba2 2303 	umull	r2, r3, r2, r3
 800943e:	0c9b      	lsrs	r3, r3, #18
 8009440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	430a      	orrs	r2, r1
 8009454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6a1b      	ldr	r3, [r3, #32]
 800945c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	4a6a      	ldr	r2, [pc, #424]	; (8009610 <HAL_I2C_Init+0x274>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d802      	bhi.n	8009470 <HAL_I2C_Init+0xd4>
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	3301      	adds	r3, #1
 800946e:	e009      	b.n	8009484 <HAL_I2C_Init+0xe8>
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009476:	fb02 f303 	mul.w	r3, r2, r3
 800947a:	4a69      	ldr	r2, [pc, #420]	; (8009620 <HAL_I2C_Init+0x284>)
 800947c:	fba2 2303 	umull	r2, r3, r2, r3
 8009480:	099b      	lsrs	r3, r3, #6
 8009482:	3301      	adds	r3, #1
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	6812      	ldr	r2, [r2, #0]
 8009488:	430b      	orrs	r3, r1
 800948a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009496:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	495c      	ldr	r1, [pc, #368]	; (8009610 <HAL_I2C_Init+0x274>)
 80094a0:	428b      	cmp	r3, r1
 80094a2:	d819      	bhi.n	80094d8 <HAL_I2C_Init+0x13c>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	1e59      	subs	r1, r3, #1
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80094b2:	1c59      	adds	r1, r3, #1
 80094b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80094b8:	400b      	ands	r3, r1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <HAL_I2C_Init+0x138>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	1e59      	subs	r1, r3, #1
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80094cc:	3301      	adds	r3, #1
 80094ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094d2:	e051      	b.n	8009578 <HAL_I2C_Init+0x1dc>
 80094d4:	2304      	movs	r3, #4
 80094d6:	e04f      	b.n	8009578 <HAL_I2C_Init+0x1dc>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d111      	bne.n	8009504 <HAL_I2C_Init+0x168>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	1e58      	subs	r0, r3, #1
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6859      	ldr	r1, [r3, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	005b      	lsls	r3, r3, #1
 80094ec:	440b      	add	r3, r1
 80094ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80094f2:	3301      	adds	r3, #1
 80094f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	bf0c      	ite	eq
 80094fc:	2301      	moveq	r3, #1
 80094fe:	2300      	movne	r3, #0
 8009500:	b2db      	uxtb	r3, r3
 8009502:	e012      	b.n	800952a <HAL_I2C_Init+0x18e>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	1e58      	subs	r0, r3, #1
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6859      	ldr	r1, [r3, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	440b      	add	r3, r1
 8009512:	0099      	lsls	r1, r3, #2
 8009514:	440b      	add	r3, r1
 8009516:	fbb0 f3f3 	udiv	r3, r0, r3
 800951a:	3301      	adds	r3, #1
 800951c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009520:	2b00      	cmp	r3, #0
 8009522:	bf0c      	ite	eq
 8009524:	2301      	moveq	r3, #1
 8009526:	2300      	movne	r3, #0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <HAL_I2C_Init+0x196>
 800952e:	2301      	movs	r3, #1
 8009530:	e022      	b.n	8009578 <HAL_I2C_Init+0x1dc>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10e      	bne.n	8009558 <HAL_I2C_Init+0x1bc>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	1e58      	subs	r0, r3, #1
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6859      	ldr	r1, [r3, #4]
 8009542:	460b      	mov	r3, r1
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	440b      	add	r3, r1
 8009548:	fbb0 f3f3 	udiv	r3, r0, r3
 800954c:	3301      	adds	r3, #1
 800954e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009556:	e00f      	b.n	8009578 <HAL_I2C_Init+0x1dc>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	1e58      	subs	r0, r3, #1
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6859      	ldr	r1, [r3, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	440b      	add	r3, r1
 8009566:	0099      	lsls	r1, r3, #2
 8009568:	440b      	add	r3, r1
 800956a:	fbb0 f3f3 	udiv	r3, r0, r3
 800956e:	3301      	adds	r3, #1
 8009570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009578:	6879      	ldr	r1, [r7, #4]
 800957a:	6809      	ldr	r1, [r1, #0]
 800957c:	4313      	orrs	r3, r2
 800957e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	69da      	ldr	r2, [r3, #28]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	431a      	orrs	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	430a      	orrs	r2, r1
 800959a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80095a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	6911      	ldr	r1, [r2, #16]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	68d2      	ldr	r2, [r2, #12]
 80095b2:	4311      	orrs	r1, r2
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6812      	ldr	r2, [r2, #0]
 80095b8:	430b      	orrs	r3, r1
 80095ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	695a      	ldr	r2, [r3, #20]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	431a      	orrs	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	430a      	orrs	r2, r1
 80095d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f042 0201 	orr.w	r2, r2, #1
 80095e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2220      	movs	r2, #32
 80095f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	000186a0 	.word	0x000186a0
 8009614:	001e847f 	.word	0x001e847f
 8009618:	003d08ff 	.word	0x003d08ff
 800961c:	431bde83 	.word	0x431bde83
 8009620:	10624dd3 	.word	0x10624dd3

08009624 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e021      	b.n	800967a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2224      	movs	r2, #36	; 0x24
 800963a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 0201 	bic.w	r2, r2, #1
 800964c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7fe fef0 	bl	8008434 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b088      	sub	sp, #32
 8009688:	af02      	add	r7, sp, #8
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	607a      	str	r2, [r7, #4]
 800968e:	461a      	mov	r2, r3
 8009690:	460b      	mov	r3, r1
 8009692:	817b      	strh	r3, [r7, #10]
 8009694:	4613      	mov	r3, r2
 8009696:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009698:	f7ff f85e 	bl	8008758 <HAL_GetTick>
 800969c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b20      	cmp	r3, #32
 80096a8:	f040 80e0 	bne.w	800986c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	2319      	movs	r3, #25
 80096b2:	2201      	movs	r2, #1
 80096b4:	4970      	ldr	r1, [pc, #448]	; (8009878 <HAL_I2C_Master_Transmit+0x1f4>)
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 fe5c 	bl	800a374 <I2C_WaitOnFlagUntilTimeout>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80096c2:	2302      	movs	r3, #2
 80096c4:	e0d3      	b.n	800986e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d101      	bne.n	80096d4 <HAL_I2C_Master_Transmit+0x50>
 80096d0:	2302      	movs	r3, #2
 80096d2:	e0cc      	b.n	800986e <HAL_I2C_Master_Transmit+0x1ea>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d007      	beq.n	80096fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f042 0201 	orr.w	r2, r2, #1
 80096f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009708:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2221      	movs	r2, #33	; 0x21
 800970e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2210      	movs	r2, #16
 8009716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	893a      	ldrh	r2, [r7, #8]
 800972a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009730:	b29a      	uxth	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	4a50      	ldr	r2, [pc, #320]	; (800987c <HAL_I2C_Master_Transmit+0x1f8>)
 800973a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800973c:	8979      	ldrh	r1, [r7, #10]
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	6a3a      	ldr	r2, [r7, #32]
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 fc16 	bl	8009f74 <I2C_MasterRequestWrite>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e08d      	b.n	800986e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009752:	2300      	movs	r3, #0
 8009754:	613b      	str	r3, [r7, #16]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	613b      	str	r3, [r7, #16]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	613b      	str	r3, [r7, #16]
 8009766:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009768:	e066      	b.n	8009838 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	6a39      	ldr	r1, [r7, #32]
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 ff1a 	bl	800a5a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00d      	beq.n	8009796 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977e:	2b04      	cmp	r3, #4
 8009780:	d107      	bne.n	8009792 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009790:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e06b      	b.n	800986e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	781a      	ldrb	r2, [r3, #0]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	3b01      	subs	r3, #1
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097be:	3b01      	subs	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	d11b      	bne.n	800980c <HAL_I2C_Master_Transmit+0x188>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d017      	beq.n	800980c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e0:	781a      	ldrb	r2, [r3, #0]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	3b01      	subs	r3, #1
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009804:	3b01      	subs	r3, #1
 8009806:	b29a      	uxth	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800980c:	697a      	ldr	r2, [r7, #20]
 800980e:	6a39      	ldr	r1, [r7, #32]
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f000 ff11 	bl	800a638 <I2C_WaitOnBTFFlagUntilTimeout>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00d      	beq.n	8009838 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009820:	2b04      	cmp	r3, #4
 8009822:	d107      	bne.n	8009834 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009832:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e01a      	b.n	800986e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800983c:	2b00      	cmp	r3, #0
 800983e:	d194      	bne.n	800976a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800984e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2220      	movs	r2, #32
 8009854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	e000      	b.n	800986e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800986c:	2302      	movs	r3, #2
  }
}
 800986e:	4618      	mov	r0, r3
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	00100002 	.word	0x00100002
 800987c:	ffff0000 	.word	0xffff0000

08009880 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b088      	sub	sp, #32
 8009884:	af02      	add	r7, sp, #8
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	4608      	mov	r0, r1
 800988a:	4611      	mov	r1, r2
 800988c:	461a      	mov	r2, r3
 800988e:	4603      	mov	r3, r0
 8009890:	817b      	strh	r3, [r7, #10]
 8009892:	460b      	mov	r3, r1
 8009894:	813b      	strh	r3, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800989a:	f7fe ff5d 	bl	8008758 <HAL_GetTick>
 800989e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b20      	cmp	r3, #32
 80098aa:	f040 80d9 	bne.w	8009a60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	2319      	movs	r3, #25
 80098b4:	2201      	movs	r2, #1
 80098b6:	496d      	ldr	r1, [pc, #436]	; (8009a6c <HAL_I2C_Mem_Write+0x1ec>)
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f000 fd5b 	bl	800a374 <I2C_WaitOnFlagUntilTimeout>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80098c4:	2302      	movs	r3, #2
 80098c6:	e0cc      	b.n	8009a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d101      	bne.n	80098d6 <HAL_I2C_Mem_Write+0x56>
 80098d2:	2302      	movs	r3, #2
 80098d4:	e0c5      	b.n	8009a62 <HAL_I2C_Mem_Write+0x1e2>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 0301 	and.w	r3, r3, #1
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d007      	beq.n	80098fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f042 0201 	orr.w	r2, r2, #1
 80098fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800990a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2221      	movs	r2, #33	; 0x21
 8009910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2240      	movs	r2, #64	; 0x40
 8009918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6a3a      	ldr	r2, [r7, #32]
 8009926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800992c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009932:	b29a      	uxth	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	4a4d      	ldr	r2, [pc, #308]	; (8009a70 <HAL_I2C_Mem_Write+0x1f0>)
 800993c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800993e:	88f8      	ldrh	r0, [r7, #6]
 8009940:	893a      	ldrh	r2, [r7, #8]
 8009942:	8979      	ldrh	r1, [r7, #10]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	9301      	str	r3, [sp, #4]
 8009948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	4603      	mov	r3, r0
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f000 fb92 	bl	800a078 <I2C_RequestMemoryWrite>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d052      	beq.n	8009a00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e081      	b.n	8009a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f000 fe20 	bl	800a5a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00d      	beq.n	800998a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009972:	2b04      	cmp	r3, #4
 8009974:	d107      	bne.n	8009986 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009984:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e06b      	b.n	8009a62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998e:	781a      	ldrb	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999a:	1c5a      	adds	r2, r3, #1
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a4:	3b01      	subs	r3, #1
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	3b01      	subs	r3, #1
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	695b      	ldr	r3, [r3, #20]
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	d11b      	bne.n	8009a00 <HAL_I2C_Mem_Write+0x180>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d017      	beq.n	8009a00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	781a      	ldrb	r2, [r3, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099ea:	3b01      	subs	r3, #1
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	3b01      	subs	r3, #1
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1aa      	bne.n	800995e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f000 fe13 	bl	800a638 <I2C_WaitOnBTFFlagUntilTimeout>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00d      	beq.n	8009a34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1c:	2b04      	cmp	r3, #4
 8009a1e:	d107      	bne.n	8009a30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e016      	b.n	8009a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2220      	movs	r2, #32
 8009a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	e000      	b.n	8009a62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009a60:	2302      	movs	r3, #2
  }
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	00100002 	.word	0x00100002
 8009a70:	ffff0000 	.word	0xffff0000

08009a74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08c      	sub	sp, #48	; 0x30
 8009a78:	af02      	add	r7, sp, #8
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	4611      	mov	r1, r2
 8009a80:	461a      	mov	r2, r3
 8009a82:	4603      	mov	r3, r0
 8009a84:	817b      	strh	r3, [r7, #10]
 8009a86:	460b      	mov	r3, r1
 8009a88:	813b      	strh	r3, [r7, #8]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009a92:	f7fe fe61 	bl	8008758 <HAL_GetTick>
 8009a96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b20      	cmp	r3, #32
 8009aa2:	f040 8244 	bne.w	8009f2e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	2319      	movs	r3, #25
 8009aac:	2201      	movs	r2, #1
 8009aae:	4982      	ldr	r1, [pc, #520]	; (8009cb8 <HAL_I2C_Mem_Read+0x244>)
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f000 fc5f 	bl	800a374 <I2C_WaitOnFlagUntilTimeout>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009abc:	2302      	movs	r3, #2
 8009abe:	e237      	b.n	8009f30 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d101      	bne.n	8009ace <HAL_I2C_Mem_Read+0x5a>
 8009aca:	2302      	movs	r3, #2
 8009acc:	e230      	b.n	8009f30 <HAL_I2C_Mem_Read+0x4bc>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d007      	beq.n	8009af4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f042 0201 	orr.w	r2, r2, #1
 8009af2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2222      	movs	r2, #34	; 0x22
 8009b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2240      	movs	r2, #64	; 0x40
 8009b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	4a62      	ldr	r2, [pc, #392]	; (8009cbc <HAL_I2C_Mem_Read+0x248>)
 8009b34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b36:	88f8      	ldrh	r0, [r7, #6]
 8009b38:	893a      	ldrh	r2, [r7, #8]
 8009b3a:	8979      	ldrh	r1, [r7, #10]
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3e:	9301      	str	r3, [sp, #4]
 8009b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	4603      	mov	r3, r0
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f000 fb2c 	bl	800a1a4 <I2C_RequestMemoryRead>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d001      	beq.n	8009b56 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e1ec      	b.n	8009f30 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d113      	bne.n	8009b86 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b5e:	2300      	movs	r3, #0
 8009b60:	61fb      	str	r3, [r7, #28]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	695b      	ldr	r3, [r3, #20]
 8009b68:	61fb      	str	r3, [r7, #28]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	61fb      	str	r3, [r7, #28]
 8009b72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	e1c0      	b.n	8009f08 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d11e      	bne.n	8009bcc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b9e:	b672      	cpsid	i
}
 8009ba0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	61bb      	str	r3, [r7, #24]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	61bb      	str	r3, [r7, #24]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	61bb      	str	r3, [r7, #24]
 8009bb6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009bc8:	b662      	cpsie	i
}
 8009bca:	e035      	b.n	8009c38 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d11e      	bne.n	8009c12 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009be2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009be4:	b672      	cpsid	i
}
 8009be6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009be8:	2300      	movs	r3, #0
 8009bea:	617b      	str	r3, [r7, #20]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	695b      	ldr	r3, [r3, #20]
 8009bf2:	617b      	str	r3, [r7, #20]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	617b      	str	r3, [r7, #20]
 8009bfc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c0e:	b662      	cpsie	i
}
 8009c10:	e012      	b.n	8009c38 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c20:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c22:	2300      	movs	r3, #0
 8009c24:	613b      	str	r3, [r7, #16]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	613b      	str	r3, [r7, #16]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	613b      	str	r3, [r7, #16]
 8009c36:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009c38:	e166      	b.n	8009f08 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c3e:	2b03      	cmp	r3, #3
 8009c40:	f200 811f 	bhi.w	8009e82 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d123      	bne.n	8009c94 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f000 fd39 	bl	800a6c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d001      	beq.n	8009c60 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e167      	b.n	8009f30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	691a      	ldr	r2, [r3, #16]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	b2d2      	uxtb	r2, r2
 8009c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c92:	e139      	b.n	8009f08 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d152      	bne.n	8009d42 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	4906      	ldr	r1, [pc, #24]	; (8009cc0 <HAL_I2C_Mem_Read+0x24c>)
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f000 fb64 	bl	800a374 <I2C_WaitOnFlagUntilTimeout>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d008      	beq.n	8009cc4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e13c      	b.n	8009f30 <HAL_I2C_Mem_Read+0x4bc>
 8009cb6:	bf00      	nop
 8009cb8:	00100002 	.word	0x00100002
 8009cbc:	ffff0000 	.word	0xffff0000
 8009cc0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009cc4:	b672      	cpsid	i
}
 8009cc6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	691a      	ldr	r2, [r3, #16]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce2:	b2d2      	uxtb	r2, r2
 8009ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	3b01      	subs	r3, #1
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d0a:	b662      	cpsie	i
}
 8009d0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	691a      	ldr	r2, [r3, #16]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d18:	b2d2      	uxtb	r2, r2
 8009d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d40:	e0e2      	b.n	8009f08 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d48:	2200      	movs	r2, #0
 8009d4a:	497b      	ldr	r1, [pc, #492]	; (8009f38 <HAL_I2C_Mem_Read+0x4c4>)
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 fb11 	bl	800a374 <I2C_WaitOnFlagUntilTimeout>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d001      	beq.n	8009d5c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e0e9      	b.n	8009f30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d6c:	b672      	cpsid	i
}
 8009d6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	691a      	ldr	r2, [r3, #16]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7a:	b2d2      	uxtb	r2, r2
 8009d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d82:	1c5a      	adds	r2, r3, #1
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009da2:	4b66      	ldr	r3, [pc, #408]	; (8009f3c <HAL_I2C_Mem_Read+0x4c8>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	08db      	lsrs	r3, r3, #3
 8009da8:	4a65      	ldr	r2, [pc, #404]	; (8009f40 <HAL_I2C_Mem_Read+0x4cc>)
 8009daa:	fba2 2303 	umull	r2, r3, r2, r3
 8009dae:	0a1a      	lsrs	r2, r3, #8
 8009db0:	4613      	mov	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4413      	add	r3, r2
 8009db6:	00da      	lsls	r2, r3, #3
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d118      	bne.n	8009dfa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2220      	movs	r2, #32
 8009dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de2:	f043 0220 	orr.w	r2, r3, #32
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009dea:	b662      	cpsie	i
}
 8009dec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e09a      	b.n	8009f30 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	695b      	ldr	r3, [r3, #20]
 8009e00:	f003 0304 	and.w	r3, r3, #4
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	d1d9      	bne.n	8009dbc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	691a      	ldr	r2, [r3, #16]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e22:	b2d2      	uxtb	r2, r2
 8009e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2a:	1c5a      	adds	r2, r3, #1
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e34:	3b01      	subs	r3, #1
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	3b01      	subs	r3, #1
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009e4a:	b662      	cpsie	i
}
 8009e4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	691a      	ldr	r2, [r3, #16]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e58:	b2d2      	uxtb	r2, r2
 8009e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	1c5a      	adds	r2, r3, #1
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e80:	e042      	b.n	8009f08 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 fc1e 	bl	800a6c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d001      	beq.n	8009e96 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e04c      	b.n	8009f30 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	691a      	ldr	r2, [r3, #16]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea0:	b2d2      	uxtb	r2, r2
 8009ea2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	1c5a      	adds	r2, r3, #1
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	f003 0304 	and.w	r3, r3, #4
 8009ed2:	2b04      	cmp	r3, #4
 8009ed4:	d118      	bne.n	8009f08 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	691a      	ldr	r2, [r3, #16]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee0:	b2d2      	uxtb	r2, r2
 8009ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	3b01      	subs	r3, #1
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f47f ae94 	bne.w	8009c3a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2220      	movs	r2, #32
 8009f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	e000      	b.n	8009f30 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009f2e:	2302      	movs	r3, #2
  }
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3728      	adds	r7, #40	; 0x28
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	00010004 	.word	0x00010004
 8009f3c:	200000b0 	.word	0x200000b0
 8009f40:	14f8b589 	.word	0x14f8b589

08009f44 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f52:	b2db      	uxtb	r3, r3
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bc80      	pop	{r7}
 8009f5c:	4770      	bx	lr

08009f5e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bc80      	pop	{r7}
 8009f72:	4770      	bx	lr

08009f74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b088      	sub	sp, #32
 8009f78:	af02      	add	r7, sp, #8
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	607a      	str	r2, [r7, #4]
 8009f7e:	603b      	str	r3, [r7, #0]
 8009f80:	460b      	mov	r3, r1
 8009f82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2b08      	cmp	r3, #8
 8009f8e:	d006      	beq.n	8009f9e <I2C_MasterRequestWrite+0x2a>
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d003      	beq.n	8009f9e <I2C_MasterRequestWrite+0x2a>
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f9c:	d108      	bne.n	8009fb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fac:	601a      	str	r2, [r3, #0]
 8009fae:	e00b      	b.n	8009fc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb4:	2b12      	cmp	r3, #18
 8009fb6:	d107      	bne.n	8009fc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 f9cd 	bl	800a374 <I2C_WaitOnFlagUntilTimeout>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00d      	beq.n	8009ffc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fee:	d103      	bne.n	8009ff8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ff6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e035      	b.n	800a068 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a004:	d108      	bne.n	800a018 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a006:	897b      	ldrh	r3, [r7, #10]
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	461a      	mov	r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a014:	611a      	str	r2, [r3, #16]
 800a016:	e01b      	b.n	800a050 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a018:	897b      	ldrh	r3, [r7, #10]
 800a01a:	11db      	asrs	r3, r3, #7
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	f003 0306 	and.w	r3, r3, #6
 800a022:	b2db      	uxtb	r3, r3
 800a024:	f063 030f 	orn	r3, r3, #15
 800a028:	b2da      	uxtb	r2, r3
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	490e      	ldr	r1, [pc, #56]	; (800a070 <I2C_MasterRequestWrite+0xfc>)
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f000 fa16 	bl	800a468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e010      	b.n	800a068 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a046:	897b      	ldrh	r3, [r7, #10]
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	4907      	ldr	r1, [pc, #28]	; (800a074 <I2C_MasterRequestWrite+0x100>)
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f000 fa06 	bl	800a468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e000      	b.n	800a068 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	00010008 	.word	0x00010008
 800a074:	00010002 	.word	0x00010002

0800a078 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b088      	sub	sp, #32
 800a07c:	af02      	add	r7, sp, #8
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	4608      	mov	r0, r1
 800a082:	4611      	mov	r1, r2
 800a084:	461a      	mov	r2, r3
 800a086:	4603      	mov	r3, r0
 800a088:	817b      	strh	r3, [r7, #10]
 800a08a:	460b      	mov	r3, r1
 800a08c:	813b      	strh	r3, [r7, #8]
 800a08e:	4613      	mov	r3, r2
 800a090:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f000 f960 	bl	800a374 <I2C_WaitOnFlagUntilTimeout>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00d      	beq.n	800a0d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0c8:	d103      	bne.n	800a0d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e05f      	b.n	800a196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0d6:	897b      	ldrh	r3, [r7, #10]
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	461a      	mov	r2, r3
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e8:	6a3a      	ldr	r2, [r7, #32]
 800a0ea:	492d      	ldr	r1, [pc, #180]	; (800a1a0 <I2C_RequestMemoryWrite+0x128>)
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 f9bb 	bl	800a468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e04c      	b.n	800a196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	617b      	str	r3, [r7, #20]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	617b      	str	r3, [r7, #20]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	617b      	str	r3, [r7, #20]
 800a110:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a114:	6a39      	ldr	r1, [r7, #32]
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 fa46 	bl	800a5a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00d      	beq.n	800a13e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a126:	2b04      	cmp	r3, #4
 800a128:	d107      	bne.n	800a13a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a138:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e02b      	b.n	800a196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a13e:	88fb      	ldrh	r3, [r7, #6]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d105      	bne.n	800a150 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a144:	893b      	ldrh	r3, [r7, #8]
 800a146:	b2da      	uxtb	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	611a      	str	r2, [r3, #16]
 800a14e:	e021      	b.n	800a194 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a150:	893b      	ldrh	r3, [r7, #8]
 800a152:	0a1b      	lsrs	r3, r3, #8
 800a154:	b29b      	uxth	r3, r3
 800a156:	b2da      	uxtb	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a160:	6a39      	ldr	r1, [r7, #32]
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 fa20 	bl	800a5a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00d      	beq.n	800a18a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a172:	2b04      	cmp	r3, #4
 800a174:	d107      	bne.n	800a186 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a184:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	e005      	b.n	800a196 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a18a:	893b      	ldrh	r3, [r7, #8]
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	00010002 	.word	0x00010002

0800a1a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b088      	sub	sp, #32
 800a1a8:	af02      	add	r7, sp, #8
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	4611      	mov	r1, r2
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	817b      	strh	r3, [r7, #10]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	813b      	strh	r3, [r7, #8]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a1cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	6a3b      	ldr	r3, [r7, #32]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f000 f8c2 	bl	800a374 <I2C_WaitOnFlagUntilTimeout>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00d      	beq.n	800a212 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a204:	d103      	bne.n	800a20e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a20c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a20e:	2303      	movs	r3, #3
 800a210:	e0aa      	b.n	800a368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a212:	897b      	ldrh	r3, [r7, #10]
 800a214:	b2db      	uxtb	r3, r3
 800a216:	461a      	mov	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a220:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a224:	6a3a      	ldr	r2, [r7, #32]
 800a226:	4952      	ldr	r1, [pc, #328]	; (800a370 <I2C_RequestMemoryRead+0x1cc>)
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f000 f91d 	bl	800a468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e097      	b.n	800a368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a238:	2300      	movs	r3, #0
 800a23a:	617b      	str	r3, [r7, #20]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	617b      	str	r3, [r7, #20]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	617b      	str	r3, [r7, #20]
 800a24c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a250:	6a39      	ldr	r1, [r7, #32]
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 f9a8 	bl	800a5a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00d      	beq.n	800a27a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a262:	2b04      	cmp	r3, #4
 800a264:	d107      	bne.n	800a276 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a274:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e076      	b.n	800a368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a27a:	88fb      	ldrh	r3, [r7, #6]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d105      	bne.n	800a28c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a280:	893b      	ldrh	r3, [r7, #8]
 800a282:	b2da      	uxtb	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	611a      	str	r2, [r3, #16]
 800a28a:	e021      	b.n	800a2d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a28c:	893b      	ldrh	r3, [r7, #8]
 800a28e:	0a1b      	lsrs	r3, r3, #8
 800a290:	b29b      	uxth	r3, r3
 800a292:	b2da      	uxtb	r2, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a29a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a29c:	6a39      	ldr	r1, [r7, #32]
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f000 f982 	bl	800a5a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00d      	beq.n	800a2c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ae:	2b04      	cmp	r3, #4
 800a2b0:	d107      	bne.n	800a2c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e050      	b.n	800a368 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2c6:	893b      	ldrh	r3, [r7, #8]
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2d2:	6a39      	ldr	r1, [r7, #32]
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f000 f967 	bl	800a5a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00d      	beq.n	800a2fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e4:	2b04      	cmp	r3, #4
 800a2e6:	d107      	bne.n	800a2f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e035      	b.n	800a368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a30a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	6a3b      	ldr	r3, [r7, #32]
 800a312:	2200      	movs	r2, #0
 800a314:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 f82b 	bl	800a374 <I2C_WaitOnFlagUntilTimeout>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00d      	beq.n	800a340 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a32e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a332:	d103      	bne.n	800a33c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a33a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a33c:	2303      	movs	r3, #3
 800a33e:	e013      	b.n	800a368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a340:	897b      	ldrh	r3, [r7, #10]
 800a342:	b2db      	uxtb	r3, r3
 800a344:	f043 0301 	orr.w	r3, r3, #1
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	6a3a      	ldr	r2, [r7, #32]
 800a354:	4906      	ldr	r1, [pc, #24]	; (800a370 <I2C_RequestMemoryRead+0x1cc>)
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 f886 	bl	800a468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d001      	beq.n	800a366 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e000      	b.n	800a368 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	00010002 	.word	0x00010002

0800a374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	603b      	str	r3, [r7, #0]
 800a380:	4613      	mov	r3, r2
 800a382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a384:	e048      	b.n	800a418 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a38c:	d044      	beq.n	800a418 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a38e:	f7fe f9e3 	bl	8008758 <HAL_GetTick>
 800a392:	4602      	mov	r2, r0
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d302      	bcc.n	800a3a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d139      	bne.n	800a418 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	0c1b      	lsrs	r3, r3, #16
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d10d      	bne.n	800a3ca <I2C_WaitOnFlagUntilTimeout+0x56>
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	43da      	mvns	r2, r3
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	bf0c      	ite	eq
 800a3c0:	2301      	moveq	r3, #1
 800a3c2:	2300      	movne	r3, #0
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	e00c      	b.n	800a3e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	43da      	mvns	r2, r3
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	bf0c      	ite	eq
 800a3dc:	2301      	moveq	r3, #1
 800a3de:	2300      	movne	r3, #0
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	79fb      	ldrb	r3, [r7, #7]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d116      	bne.n	800a418 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2220      	movs	r2, #32
 800a3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a404:	f043 0220 	orr.w	r2, r3, #32
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	e023      	b.n	800a460 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	0c1b      	lsrs	r3, r3, #16
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d10d      	bne.n	800a43e <I2C_WaitOnFlagUntilTimeout+0xca>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	43da      	mvns	r2, r3
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	4013      	ands	r3, r2
 800a42e:	b29b      	uxth	r3, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	bf0c      	ite	eq
 800a434:	2301      	moveq	r3, #1
 800a436:	2300      	movne	r3, #0
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	461a      	mov	r2, r3
 800a43c:	e00c      	b.n	800a458 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	43da      	mvns	r2, r3
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	4013      	ands	r3, r2
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	bf0c      	ite	eq
 800a450:	2301      	moveq	r3, #1
 800a452:	2300      	movne	r3, #0
 800a454:	b2db      	uxtb	r3, r3
 800a456:	461a      	mov	r2, r3
 800a458:	79fb      	ldrb	r3, [r7, #7]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d093      	beq.n	800a386 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
 800a474:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a476:	e071      	b.n	800a55c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	695b      	ldr	r3, [r3, #20]
 800a47e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a486:	d123      	bne.n	800a4d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a496:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2220      	movs	r2, #32
 800a4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4bc:	f043 0204 	orr.w	r2, r3, #4
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e067      	b.n	800a5a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4d6:	d041      	beq.n	800a55c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4d8:	f7fe f93e 	bl	8008758 <HAL_GetTick>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d302      	bcc.n	800a4ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d136      	bne.n	800a55c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	0c1b      	lsrs	r3, r3, #16
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d10c      	bne.n	800a512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	43da      	mvns	r2, r3
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	4013      	ands	r3, r2
 800a504:	b29b      	uxth	r3, r3
 800a506:	2b00      	cmp	r3, #0
 800a508:	bf14      	ite	ne
 800a50a:	2301      	movne	r3, #1
 800a50c:	2300      	moveq	r3, #0
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	e00b      	b.n	800a52a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	43da      	mvns	r2, r3
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	4013      	ands	r3, r2
 800a51e:	b29b      	uxth	r3, r3
 800a520:	2b00      	cmp	r3, #0
 800a522:	bf14      	ite	ne
 800a524:	2301      	movne	r3, #1
 800a526:	2300      	moveq	r3, #0
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d016      	beq.n	800a55c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2220      	movs	r2, #32
 800a538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a548:	f043 0220 	orr.w	r2, r3, #32
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	e021      	b.n	800a5a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	0c1b      	lsrs	r3, r3, #16
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b01      	cmp	r3, #1
 800a564:	d10c      	bne.n	800a580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	43da      	mvns	r2, r3
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	4013      	ands	r3, r2
 800a572:	b29b      	uxth	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	bf14      	ite	ne
 800a578:	2301      	movne	r3, #1
 800a57a:	2300      	moveq	r3, #0
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	e00b      	b.n	800a598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	43da      	mvns	r2, r3
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	4013      	ands	r3, r2
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	bf14      	ite	ne
 800a592:	2301      	movne	r3, #1
 800a594:	2300      	moveq	r3, #0
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f47f af6d 	bne.w	800a478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5b4:	e034      	b.n	800a620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 f8e3 	bl	800a782 <I2C_IsAcknowledgeFailed>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e034      	b.n	800a630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5cc:	d028      	beq.n	800a620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5ce:	f7fe f8c3 	bl	8008758 <HAL_GetTick>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d302      	bcc.n	800a5e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d11d      	bne.n	800a620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ee:	2b80      	cmp	r3, #128	; 0x80
 800a5f0:	d016      	beq.n	800a620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60c:	f043 0220 	orr.w	r2, r3, #32
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e007      	b.n	800a630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a62a:	2b80      	cmp	r3, #128	; 0x80
 800a62c:	d1c3      	bne.n	800a5b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a644:	e034      	b.n	800a6b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f000 f89b 	bl	800a782 <I2C_IsAcknowledgeFailed>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d001      	beq.n	800a656 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	e034      	b.n	800a6c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a65c:	d028      	beq.n	800a6b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a65e:	f7fe f87b 	bl	8008758 <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d302      	bcc.n	800a674 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d11d      	bne.n	800a6b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	f003 0304 	and.w	r3, r3, #4
 800a67e:	2b04      	cmp	r3, #4
 800a680:	d016      	beq.n	800a6b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2220      	movs	r2, #32
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69c:	f043 0220 	orr.w	r2, r3, #32
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e007      	b.n	800a6c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	695b      	ldr	r3, [r3, #20]
 800a6b6:	f003 0304 	and.w	r3, r3, #4
 800a6ba:	2b04      	cmp	r3, #4
 800a6bc:	d1c3      	bne.n	800a646 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6d4:	e049      	b.n	800a76a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	f003 0310 	and.w	r3, r3, #16
 800a6e0:	2b10      	cmp	r3, #16
 800a6e2:	d119      	bne.n	800a718 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f06f 0210 	mvn.w	r2, #16
 800a6ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2220      	movs	r2, #32
 800a6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e030      	b.n	800a77a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a718:	f7fe f81e 	bl	8008758 <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	429a      	cmp	r2, r3
 800a726:	d302      	bcc.n	800a72e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d11d      	bne.n	800a76a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	695b      	ldr	r3, [r3, #20]
 800a734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a738:	2b40      	cmp	r3, #64	; 0x40
 800a73a:	d016      	beq.n	800a76a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2220      	movs	r2, #32
 800a746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a756:	f043 0220 	orr.w	r2, r3, #32
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e007      	b.n	800a77a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	695b      	ldr	r3, [r3, #20]
 800a770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a774:	2b40      	cmp	r3, #64	; 0x40
 800a776:	d1ae      	bne.n	800a6d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a782:	b480      	push	{r7}
 800a784:	b083      	sub	sp, #12
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a798:	d11b      	bne.n	800a7d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a7a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2220      	movs	r2, #32
 800a7ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7be:	f043 0204 	orr.w	r2, r3, #4
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e000      	b.n	800a7d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bc80      	pop	{r7}
 800a7dc:	4770      	bx	lr
	...

0800a7e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e272      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f003 0301 	and.w	r3, r3, #1
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f000 8087 	beq.w	800a90e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a800:	4b92      	ldr	r3, [pc, #584]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	f003 030c 	and.w	r3, r3, #12
 800a808:	2b04      	cmp	r3, #4
 800a80a:	d00c      	beq.n	800a826 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a80c:	4b8f      	ldr	r3, [pc, #572]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	f003 030c 	and.w	r3, r3, #12
 800a814:	2b08      	cmp	r3, #8
 800a816:	d112      	bne.n	800a83e <HAL_RCC_OscConfig+0x5e>
 800a818:	4b8c      	ldr	r3, [pc, #560]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a824:	d10b      	bne.n	800a83e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a826:	4b89      	ldr	r3, [pc, #548]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d06c      	beq.n	800a90c <HAL_RCC_OscConfig+0x12c>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d168      	bne.n	800a90c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e24c      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a846:	d106      	bne.n	800a856 <HAL_RCC_OscConfig+0x76>
 800a848:	4b80      	ldr	r3, [pc, #512]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a7f      	ldr	r2, [pc, #508]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a84e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a852:	6013      	str	r3, [r2, #0]
 800a854:	e02e      	b.n	800a8b4 <HAL_RCC_OscConfig+0xd4>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10c      	bne.n	800a878 <HAL_RCC_OscConfig+0x98>
 800a85e:	4b7b      	ldr	r3, [pc, #492]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a7a      	ldr	r2, [pc, #488]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a868:	6013      	str	r3, [r2, #0]
 800a86a:	4b78      	ldr	r3, [pc, #480]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a77      	ldr	r2, [pc, #476]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a874:	6013      	str	r3, [r2, #0]
 800a876:	e01d      	b.n	800a8b4 <HAL_RCC_OscConfig+0xd4>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a880:	d10c      	bne.n	800a89c <HAL_RCC_OscConfig+0xbc>
 800a882:	4b72      	ldr	r3, [pc, #456]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a71      	ldr	r2, [pc, #452]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a88c:	6013      	str	r3, [r2, #0]
 800a88e:	4b6f      	ldr	r3, [pc, #444]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a6e      	ldr	r2, [pc, #440]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	e00b      	b.n	800a8b4 <HAL_RCC_OscConfig+0xd4>
 800a89c:	4b6b      	ldr	r3, [pc, #428]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a6a      	ldr	r2, [pc, #424]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a8a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8a6:	6013      	str	r3, [r2, #0]
 800a8a8:	4b68      	ldr	r3, [pc, #416]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a67      	ldr	r2, [pc, #412]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a8ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d013      	beq.n	800a8e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8bc:	f7fd ff4c 	bl	8008758 <HAL_GetTick>
 800a8c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8c2:	e008      	b.n	800a8d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8c4:	f7fd ff48 	bl	8008758 <HAL_GetTick>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	2b64      	cmp	r3, #100	; 0x64
 800a8d0:	d901      	bls.n	800a8d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	e200      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8d6:	4b5d      	ldr	r3, [pc, #372]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d0f0      	beq.n	800a8c4 <HAL_RCC_OscConfig+0xe4>
 800a8e2:	e014      	b.n	800a90e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8e4:	f7fd ff38 	bl	8008758 <HAL_GetTick>
 800a8e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8ea:	e008      	b.n	800a8fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8ec:	f7fd ff34 	bl	8008758 <HAL_GetTick>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	1ad3      	subs	r3, r2, r3
 800a8f6:	2b64      	cmp	r3, #100	; 0x64
 800a8f8:	d901      	bls.n	800a8fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	e1ec      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8fe:	4b53      	ldr	r3, [pc, #332]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1f0      	bne.n	800a8ec <HAL_RCC_OscConfig+0x10c>
 800a90a:	e000      	b.n	800a90e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a90c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0302 	and.w	r3, r3, #2
 800a916:	2b00      	cmp	r3, #0
 800a918:	d063      	beq.n	800a9e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a91a:	4b4c      	ldr	r3, [pc, #304]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	f003 030c 	and.w	r3, r3, #12
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00b      	beq.n	800a93e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a926:	4b49      	ldr	r3, [pc, #292]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	f003 030c 	and.w	r3, r3, #12
 800a92e:	2b08      	cmp	r3, #8
 800a930:	d11c      	bne.n	800a96c <HAL_RCC_OscConfig+0x18c>
 800a932:	4b46      	ldr	r3, [pc, #280]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d116      	bne.n	800a96c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a93e:	4b43      	ldr	r3, [pc, #268]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f003 0302 	and.w	r3, r3, #2
 800a946:	2b00      	cmp	r3, #0
 800a948:	d005      	beq.n	800a956 <HAL_RCC_OscConfig+0x176>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d001      	beq.n	800a956 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e1c0      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a956:	4b3d      	ldr	r3, [pc, #244]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	00db      	lsls	r3, r3, #3
 800a964:	4939      	ldr	r1, [pc, #228]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a966:	4313      	orrs	r3, r2
 800a968:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a96a:	e03a      	b.n	800a9e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	691b      	ldr	r3, [r3, #16]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d020      	beq.n	800a9b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a974:	4b36      	ldr	r3, [pc, #216]	; (800aa50 <HAL_RCC_OscConfig+0x270>)
 800a976:	2201      	movs	r2, #1
 800a978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a97a:	f7fd feed 	bl	8008758 <HAL_GetTick>
 800a97e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a980:	e008      	b.n	800a994 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a982:	f7fd fee9 	bl	8008758 <HAL_GetTick>
 800a986:	4602      	mov	r2, r0
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	1ad3      	subs	r3, r2, r3
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d901      	bls.n	800a994 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a990:	2303      	movs	r3, #3
 800a992:	e1a1      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a994:	4b2d      	ldr	r3, [pc, #180]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 0302 	and.w	r3, r3, #2
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d0f0      	beq.n	800a982 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9a0:	4b2a      	ldr	r3, [pc, #168]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	695b      	ldr	r3, [r3, #20]
 800a9ac:	00db      	lsls	r3, r3, #3
 800a9ae:	4927      	ldr	r1, [pc, #156]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	600b      	str	r3, [r1, #0]
 800a9b4:	e015      	b.n	800a9e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9b6:	4b26      	ldr	r3, [pc, #152]	; (800aa50 <HAL_RCC_OscConfig+0x270>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9bc:	f7fd fecc 	bl	8008758 <HAL_GetTick>
 800a9c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9c2:	e008      	b.n	800a9d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9c4:	f7fd fec8 	bl	8008758 <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d901      	bls.n	800a9d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e180      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9d6:	4b1d      	ldr	r3, [pc, #116]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 0302 	and.w	r3, r3, #2
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1f0      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f003 0308 	and.w	r3, r3, #8
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d03a      	beq.n	800aa64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d019      	beq.n	800aa2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9f6:	4b17      	ldr	r3, [pc, #92]	; (800aa54 <HAL_RCC_OscConfig+0x274>)
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9fc:	f7fd feac 	bl	8008758 <HAL_GetTick>
 800aa00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa02:	e008      	b.n	800aa16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa04:	f7fd fea8 	bl	8008758 <HAL_GetTick>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d901      	bls.n	800aa16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aa12:	2303      	movs	r3, #3
 800aa14:	e160      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa16:	4b0d      	ldr	r3, [pc, #52]	; (800aa4c <HAL_RCC_OscConfig+0x26c>)
 800aa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1a:	f003 0302 	and.w	r3, r3, #2
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d0f0      	beq.n	800aa04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aa22:	2001      	movs	r0, #1
 800aa24:	f000 face 	bl	800afc4 <RCC_Delay>
 800aa28:	e01c      	b.n	800aa64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa2a:	4b0a      	ldr	r3, [pc, #40]	; (800aa54 <HAL_RCC_OscConfig+0x274>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa30:	f7fd fe92 	bl	8008758 <HAL_GetTick>
 800aa34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa36:	e00f      	b.n	800aa58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa38:	f7fd fe8e 	bl	8008758 <HAL_GetTick>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d908      	bls.n	800aa58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aa46:	2303      	movs	r3, #3
 800aa48:	e146      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
 800aa4a:	bf00      	nop
 800aa4c:	40021000 	.word	0x40021000
 800aa50:	42420000 	.word	0x42420000
 800aa54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa58:	4b92      	ldr	r3, [pc, #584]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5c:	f003 0302 	and.w	r3, r3, #2
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1e9      	bne.n	800aa38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0304 	and.w	r3, r3, #4
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f000 80a6 	beq.w	800abbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa72:	2300      	movs	r3, #0
 800aa74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa76:	4b8b      	ldr	r3, [pc, #556]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800aa78:	69db      	ldr	r3, [r3, #28]
 800aa7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10d      	bne.n	800aa9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa82:	4b88      	ldr	r3, [pc, #544]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800aa84:	69db      	ldr	r3, [r3, #28]
 800aa86:	4a87      	ldr	r2, [pc, #540]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800aa88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa8c:	61d3      	str	r3, [r2, #28]
 800aa8e:	4b85      	ldr	r3, [pc, #532]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800aa90:	69db      	ldr	r3, [r3, #28]
 800aa92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa96:	60bb      	str	r3, [r7, #8]
 800aa98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa9e:	4b82      	ldr	r3, [pc, #520]	; (800aca8 <HAL_RCC_OscConfig+0x4c8>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d118      	bne.n	800aadc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aaaa:	4b7f      	ldr	r3, [pc, #508]	; (800aca8 <HAL_RCC_OscConfig+0x4c8>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a7e      	ldr	r2, [pc, #504]	; (800aca8 <HAL_RCC_OscConfig+0x4c8>)
 800aab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aab6:	f7fd fe4f 	bl	8008758 <HAL_GetTick>
 800aaba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aabc:	e008      	b.n	800aad0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aabe:	f7fd fe4b 	bl	8008758 <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	2b64      	cmp	r3, #100	; 0x64
 800aaca:	d901      	bls.n	800aad0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aacc:	2303      	movs	r3, #3
 800aace:	e103      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aad0:	4b75      	ldr	r3, [pc, #468]	; (800aca8 <HAL_RCC_OscConfig+0x4c8>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0f0      	beq.n	800aabe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d106      	bne.n	800aaf2 <HAL_RCC_OscConfig+0x312>
 800aae4:	4b6f      	ldr	r3, [pc, #444]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800aae6:	6a1b      	ldr	r3, [r3, #32]
 800aae8:	4a6e      	ldr	r2, [pc, #440]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800aaea:	f043 0301 	orr.w	r3, r3, #1
 800aaee:	6213      	str	r3, [r2, #32]
 800aaf0:	e02d      	b.n	800ab4e <HAL_RCC_OscConfig+0x36e>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d10c      	bne.n	800ab14 <HAL_RCC_OscConfig+0x334>
 800aafa:	4b6a      	ldr	r3, [pc, #424]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	4a69      	ldr	r2, [pc, #420]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ab00:	f023 0301 	bic.w	r3, r3, #1
 800ab04:	6213      	str	r3, [r2, #32]
 800ab06:	4b67      	ldr	r3, [pc, #412]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	4a66      	ldr	r2, [pc, #408]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ab0c:	f023 0304 	bic.w	r3, r3, #4
 800ab10:	6213      	str	r3, [r2, #32]
 800ab12:	e01c      	b.n	800ab4e <HAL_RCC_OscConfig+0x36e>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	2b05      	cmp	r3, #5
 800ab1a:	d10c      	bne.n	800ab36 <HAL_RCC_OscConfig+0x356>
 800ab1c:	4b61      	ldr	r3, [pc, #388]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ab1e:	6a1b      	ldr	r3, [r3, #32]
 800ab20:	4a60      	ldr	r2, [pc, #384]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ab22:	f043 0304 	orr.w	r3, r3, #4
 800ab26:	6213      	str	r3, [r2, #32]
 800ab28:	4b5e      	ldr	r3, [pc, #376]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ab2a:	6a1b      	ldr	r3, [r3, #32]
 800ab2c:	4a5d      	ldr	r2, [pc, #372]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ab2e:	f043 0301 	orr.w	r3, r3, #1
 800ab32:	6213      	str	r3, [r2, #32]
 800ab34:	e00b      	b.n	800ab4e <HAL_RCC_OscConfig+0x36e>
 800ab36:	4b5b      	ldr	r3, [pc, #364]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	4a5a      	ldr	r2, [pc, #360]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ab3c:	f023 0301 	bic.w	r3, r3, #1
 800ab40:	6213      	str	r3, [r2, #32]
 800ab42:	4b58      	ldr	r3, [pc, #352]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ab44:	6a1b      	ldr	r3, [r3, #32]
 800ab46:	4a57      	ldr	r2, [pc, #348]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ab48:	f023 0304 	bic.w	r3, r3, #4
 800ab4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d015      	beq.n	800ab82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab56:	f7fd fdff 	bl	8008758 <HAL_GetTick>
 800ab5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab5c:	e00a      	b.n	800ab74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab5e:	f7fd fdfb 	bl	8008758 <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d901      	bls.n	800ab74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e0b1      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab74:	4b4b      	ldr	r3, [pc, #300]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	f003 0302 	and.w	r3, r3, #2
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d0ee      	beq.n	800ab5e <HAL_RCC_OscConfig+0x37e>
 800ab80:	e014      	b.n	800abac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab82:	f7fd fde9 	bl	8008758 <HAL_GetTick>
 800ab86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab88:	e00a      	b.n	800aba0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab8a:	f7fd fde5 	bl	8008758 <HAL_GetTick>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d901      	bls.n	800aba0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	e09b      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aba0:	4b40      	ldr	r3, [pc, #256]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800aba2:	6a1b      	ldr	r3, [r3, #32]
 800aba4:	f003 0302 	and.w	r3, r3, #2
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1ee      	bne.n	800ab8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800abac:	7dfb      	ldrb	r3, [r7, #23]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d105      	bne.n	800abbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abb2:	4b3c      	ldr	r3, [pc, #240]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800abb4:	69db      	ldr	r3, [r3, #28]
 800abb6:	4a3b      	ldr	r2, [pc, #236]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800abb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	69db      	ldr	r3, [r3, #28]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f000 8087 	beq.w	800acd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800abc8:	4b36      	ldr	r3, [pc, #216]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f003 030c 	and.w	r3, r3, #12
 800abd0:	2b08      	cmp	r3, #8
 800abd2:	d061      	beq.n	800ac98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	69db      	ldr	r3, [r3, #28]
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d146      	bne.n	800ac6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abdc:	4b33      	ldr	r3, [pc, #204]	; (800acac <HAL_RCC_OscConfig+0x4cc>)
 800abde:	2200      	movs	r2, #0
 800abe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abe2:	f7fd fdb9 	bl	8008758 <HAL_GetTick>
 800abe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abe8:	e008      	b.n	800abfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abea:	f7fd fdb5 	bl	8008758 <HAL_GetTick>
 800abee:	4602      	mov	r2, r0
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	d901      	bls.n	800abfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e06d      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abfc:	4b29      	ldr	r3, [pc, #164]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1f0      	bne.n	800abea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
 800ac0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac10:	d108      	bne.n	800ac24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ac12:	4b24      	ldr	r3, [pc, #144]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	4921      	ldr	r1, [pc, #132]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ac20:	4313      	orrs	r3, r2
 800ac22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac24:	4b1f      	ldr	r3, [pc, #124]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a19      	ldr	r1, [r3, #32]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac34:	430b      	orrs	r3, r1
 800ac36:	491b      	ldr	r1, [pc, #108]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac3c:	4b1b      	ldr	r3, [pc, #108]	; (800acac <HAL_RCC_OscConfig+0x4cc>)
 800ac3e:	2201      	movs	r2, #1
 800ac40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac42:	f7fd fd89 	bl	8008758 <HAL_GetTick>
 800ac46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac48:	e008      	b.n	800ac5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac4a:	f7fd fd85 	bl	8008758 <HAL_GetTick>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d901      	bls.n	800ac5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e03d      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac5c:	4b11      	ldr	r3, [pc, #68]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d0f0      	beq.n	800ac4a <HAL_RCC_OscConfig+0x46a>
 800ac68:	e035      	b.n	800acd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac6a:	4b10      	ldr	r3, [pc, #64]	; (800acac <HAL_RCC_OscConfig+0x4cc>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac70:	f7fd fd72 	bl	8008758 <HAL_GetTick>
 800ac74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac76:	e008      	b.n	800ac8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac78:	f7fd fd6e 	bl	8008758 <HAL_GetTick>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d901      	bls.n	800ac8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ac86:	2303      	movs	r3, #3
 800ac88:	e026      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac8a:	4b06      	ldr	r3, [pc, #24]	; (800aca4 <HAL_RCC_OscConfig+0x4c4>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d1f0      	bne.n	800ac78 <HAL_RCC_OscConfig+0x498>
 800ac96:	e01e      	b.n	800acd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	69db      	ldr	r3, [r3, #28]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d107      	bne.n	800acb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e019      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
 800aca4:	40021000 	.word	0x40021000
 800aca8:	40007000 	.word	0x40007000
 800acac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800acb0:	4b0b      	ldr	r3, [pc, #44]	; (800ace0 <HAL_RCC_OscConfig+0x500>)
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a1b      	ldr	r3, [r3, #32]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d106      	bne.n	800acd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acce:	429a      	cmp	r2, r3
 800acd0:	d001      	beq.n	800acd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e000      	b.n	800acd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3718      	adds	r7, #24
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	40021000 	.word	0x40021000

0800ace4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d101      	bne.n	800acf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e0d0      	b.n	800ae9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800acf8:	4b6a      	ldr	r3, [pc, #424]	; (800aea4 <HAL_RCC_ClockConfig+0x1c0>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0307 	and.w	r3, r3, #7
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d910      	bls.n	800ad28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad06:	4b67      	ldr	r3, [pc, #412]	; (800aea4 <HAL_RCC_ClockConfig+0x1c0>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f023 0207 	bic.w	r2, r3, #7
 800ad0e:	4965      	ldr	r1, [pc, #404]	; (800aea4 <HAL_RCC_ClockConfig+0x1c0>)
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad16:	4b63      	ldr	r3, [pc, #396]	; (800aea4 <HAL_RCC_ClockConfig+0x1c0>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 0307 	and.w	r3, r3, #7
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d001      	beq.n	800ad28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	e0b8      	b.n	800ae9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 0302 	and.w	r3, r3, #2
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d020      	beq.n	800ad76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0304 	and.w	r3, r3, #4
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d005      	beq.n	800ad4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad40:	4b59      	ldr	r3, [pc, #356]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	4a58      	ldr	r2, [pc, #352]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 0308 	and.w	r3, r3, #8
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d005      	beq.n	800ad64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad58:	4b53      	ldr	r3, [pc, #332]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	4a52      	ldr	r2, [pc, #328]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ad62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad64:	4b50      	ldr	r3, [pc, #320]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	494d      	ldr	r1, [pc, #308]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad72:	4313      	orrs	r3, r2
 800ad74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d040      	beq.n	800ae04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d107      	bne.n	800ad9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad8a:	4b47      	ldr	r3, [pc, #284]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d115      	bne.n	800adc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	e07f      	b.n	800ae9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d107      	bne.n	800adb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ada2:	4b41      	ldr	r3, [pc, #260]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d109      	bne.n	800adc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e073      	b.n	800ae9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adb2:	4b3d      	ldr	r3, [pc, #244]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 0302 	and.w	r3, r3, #2
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d101      	bne.n	800adc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adbe:	2301      	movs	r3, #1
 800adc0:	e06b      	b.n	800ae9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800adc2:	4b39      	ldr	r3, [pc, #228]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	f023 0203 	bic.w	r2, r3, #3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	4936      	ldr	r1, [pc, #216]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800add0:	4313      	orrs	r3, r2
 800add2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800add4:	f7fd fcc0 	bl	8008758 <HAL_GetTick>
 800add8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adda:	e00a      	b.n	800adf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800addc:	f7fd fcbc 	bl	8008758 <HAL_GetTick>
 800ade0:	4602      	mov	r2, r0
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	f241 3288 	movw	r2, #5000	; 0x1388
 800adea:	4293      	cmp	r3, r2
 800adec:	d901      	bls.n	800adf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800adee:	2303      	movs	r3, #3
 800adf0:	e053      	b.n	800ae9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adf2:	4b2d      	ldr	r3, [pc, #180]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	f003 020c 	and.w	r2, r3, #12
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d1eb      	bne.n	800addc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae04:	4b27      	ldr	r3, [pc, #156]	; (800aea4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 0307 	and.w	r3, r3, #7
 800ae0c:	683a      	ldr	r2, [r7, #0]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d210      	bcs.n	800ae34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae12:	4b24      	ldr	r3, [pc, #144]	; (800aea4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f023 0207 	bic.w	r2, r3, #7
 800ae1a:	4922      	ldr	r1, [pc, #136]	; (800aea4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae22:	4b20      	ldr	r3, [pc, #128]	; (800aea4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 0307 	and.w	r3, r3, #7
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d001      	beq.n	800ae34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e032      	b.n	800ae9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f003 0304 	and.w	r3, r3, #4
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d008      	beq.n	800ae52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae40:	4b19      	ldr	r3, [pc, #100]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	4916      	ldr	r1, [pc, #88]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 0308 	and.w	r3, r3, #8
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d009      	beq.n	800ae72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ae5e:	4b12      	ldr	r3, [pc, #72]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	00db      	lsls	r3, r3, #3
 800ae6c:	490e      	ldr	r1, [pc, #56]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ae72:	f000 f821 	bl	800aeb8 <HAL_RCC_GetSysClockFreq>
 800ae76:	4602      	mov	r2, r0
 800ae78:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	091b      	lsrs	r3, r3, #4
 800ae7e:	f003 030f 	and.w	r3, r3, #15
 800ae82:	490a      	ldr	r1, [pc, #40]	; (800aeac <HAL_RCC_ClockConfig+0x1c8>)
 800ae84:	5ccb      	ldrb	r3, [r1, r3]
 800ae86:	fa22 f303 	lsr.w	r3, r2, r3
 800ae8a:	4a09      	ldr	r2, [pc, #36]	; (800aeb0 <HAL_RCC_ClockConfig+0x1cc>)
 800ae8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ae8e:	4b09      	ldr	r3, [pc, #36]	; (800aeb4 <HAL_RCC_ClockConfig+0x1d0>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fd fc1e 	bl	80086d4 <HAL_InitTick>

  return HAL_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	40022000 	.word	0x40022000
 800aea8:	40021000 	.word	0x40021000
 800aeac:	0800dd68 	.word	0x0800dd68
 800aeb0:	200000b0 	.word	0x200000b0
 800aeb4:	200000b4 	.word	0x200000b4

0800aeb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b087      	sub	sp, #28
 800aebc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60fb      	str	r3, [r7, #12]
 800aec2:	2300      	movs	r3, #0
 800aec4:	60bb      	str	r3, [r7, #8]
 800aec6:	2300      	movs	r3, #0
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	2300      	movs	r3, #0
 800aecc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800aece:	2300      	movs	r3, #0
 800aed0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aed2:	4b1e      	ldr	r3, [pc, #120]	; (800af4c <HAL_RCC_GetSysClockFreq+0x94>)
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f003 030c 	and.w	r3, r3, #12
 800aede:	2b04      	cmp	r3, #4
 800aee0:	d002      	beq.n	800aee8 <HAL_RCC_GetSysClockFreq+0x30>
 800aee2:	2b08      	cmp	r3, #8
 800aee4:	d003      	beq.n	800aeee <HAL_RCC_GetSysClockFreq+0x36>
 800aee6:	e027      	b.n	800af38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aee8:	4b19      	ldr	r3, [pc, #100]	; (800af50 <HAL_RCC_GetSysClockFreq+0x98>)
 800aeea:	613b      	str	r3, [r7, #16]
      break;
 800aeec:	e027      	b.n	800af3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	0c9b      	lsrs	r3, r3, #18
 800aef2:	f003 030f 	and.w	r3, r3, #15
 800aef6:	4a17      	ldr	r2, [pc, #92]	; (800af54 <HAL_RCC_GetSysClockFreq+0x9c>)
 800aef8:	5cd3      	ldrb	r3, [r2, r3]
 800aefa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af02:	2b00      	cmp	r3, #0
 800af04:	d010      	beq.n	800af28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af06:	4b11      	ldr	r3, [pc, #68]	; (800af4c <HAL_RCC_GetSysClockFreq+0x94>)
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	0c5b      	lsrs	r3, r3, #17
 800af0c:	f003 0301 	and.w	r3, r3, #1
 800af10:	4a11      	ldr	r2, [pc, #68]	; (800af58 <HAL_RCC_GetSysClockFreq+0xa0>)
 800af12:	5cd3      	ldrb	r3, [r2, r3]
 800af14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a0d      	ldr	r2, [pc, #52]	; (800af50 <HAL_RCC_GetSysClockFreq+0x98>)
 800af1a:	fb03 f202 	mul.w	r2, r3, r2
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	fbb2 f3f3 	udiv	r3, r2, r3
 800af24:	617b      	str	r3, [r7, #20]
 800af26:	e004      	b.n	800af32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a0c      	ldr	r2, [pc, #48]	; (800af5c <HAL_RCC_GetSysClockFreq+0xa4>)
 800af2c:	fb02 f303 	mul.w	r3, r2, r3
 800af30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	613b      	str	r3, [r7, #16]
      break;
 800af36:	e002      	b.n	800af3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800af38:	4b05      	ldr	r3, [pc, #20]	; (800af50 <HAL_RCC_GetSysClockFreq+0x98>)
 800af3a:	613b      	str	r3, [r7, #16]
      break;
 800af3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af3e:	693b      	ldr	r3, [r7, #16]
}
 800af40:	4618      	mov	r0, r3
 800af42:	371c      	adds	r7, #28
 800af44:	46bd      	mov	sp, r7
 800af46:	bc80      	pop	{r7}
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	40021000 	.word	0x40021000
 800af50:	007a1200 	.word	0x007a1200
 800af54:	0800dd80 	.word	0x0800dd80
 800af58:	0800dd90 	.word	0x0800dd90
 800af5c:	003d0900 	.word	0x003d0900

0800af60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af60:	b480      	push	{r7}
 800af62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af64:	4b02      	ldr	r3, [pc, #8]	; (800af70 <HAL_RCC_GetHCLKFreq+0x10>)
 800af66:	681b      	ldr	r3, [r3, #0]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bc80      	pop	{r7}
 800af6e:	4770      	bx	lr
 800af70:	200000b0 	.word	0x200000b0

0800af74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af78:	f7ff fff2 	bl	800af60 <HAL_RCC_GetHCLKFreq>
 800af7c:	4602      	mov	r2, r0
 800af7e:	4b05      	ldr	r3, [pc, #20]	; (800af94 <HAL_RCC_GetPCLK1Freq+0x20>)
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	0a1b      	lsrs	r3, r3, #8
 800af84:	f003 0307 	and.w	r3, r3, #7
 800af88:	4903      	ldr	r1, [pc, #12]	; (800af98 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af8a:	5ccb      	ldrb	r3, [r1, r3]
 800af8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af90:	4618      	mov	r0, r3
 800af92:	bd80      	pop	{r7, pc}
 800af94:	40021000 	.word	0x40021000
 800af98:	0800dd78 	.word	0x0800dd78

0800af9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800afa0:	f7ff ffde 	bl	800af60 <HAL_RCC_GetHCLKFreq>
 800afa4:	4602      	mov	r2, r0
 800afa6:	4b05      	ldr	r3, [pc, #20]	; (800afbc <HAL_RCC_GetPCLK2Freq+0x20>)
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	0adb      	lsrs	r3, r3, #11
 800afac:	f003 0307 	and.w	r3, r3, #7
 800afb0:	4903      	ldr	r1, [pc, #12]	; (800afc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800afb2:	5ccb      	ldrb	r3, [r1, r3]
 800afb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afb8:	4618      	mov	r0, r3
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	40021000 	.word	0x40021000
 800afc0:	0800dd78 	.word	0x0800dd78

0800afc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800afcc:	4b0a      	ldr	r3, [pc, #40]	; (800aff8 <RCC_Delay+0x34>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a0a      	ldr	r2, [pc, #40]	; (800affc <RCC_Delay+0x38>)
 800afd2:	fba2 2303 	umull	r2, r3, r2, r3
 800afd6:	0a5b      	lsrs	r3, r3, #9
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	fb02 f303 	mul.w	r3, r2, r3
 800afde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800afe0:	bf00      	nop
  }
  while (Delay --);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	1e5a      	subs	r2, r3, #1
 800afe6:	60fa      	str	r2, [r7, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1f9      	bne.n	800afe0 <RCC_Delay+0x1c>
}
 800afec:	bf00      	nop
 800afee:	bf00      	nop
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bc80      	pop	{r7}
 800aff6:	4770      	bx	lr
 800aff8:	200000b0 	.word	0x200000b0
 800affc:	10624dd3 	.word	0x10624dd3

0800b000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d101      	bne.n	800b012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	e041      	b.n	800b096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d106      	bne.n	800b02c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7fd fa26 	bl	8008478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2202      	movs	r2, #2
 800b030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	3304      	adds	r3, #4
 800b03c:	4619      	mov	r1, r3
 800b03e:	4610      	mov	r0, r2
 800b040:	f000 fa82 	bl	800b548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3708      	adds	r7, #8
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
	...

0800b0a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d001      	beq.n	800b0b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e044      	b.n	800b142 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68da      	ldr	r2, [r3, #12]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f042 0201 	orr.w	r2, r2, #1
 800b0ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a1d      	ldr	r2, [pc, #116]	; (800b14c <HAL_TIM_Base_Start_IT+0xac>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d018      	beq.n	800b10c <HAL_TIM_Base_Start_IT+0x6c>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a1c      	ldr	r2, [pc, #112]	; (800b150 <HAL_TIM_Base_Start_IT+0xb0>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d013      	beq.n	800b10c <HAL_TIM_Base_Start_IT+0x6c>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0ec:	d00e      	beq.n	800b10c <HAL_TIM_Base_Start_IT+0x6c>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a18      	ldr	r2, [pc, #96]	; (800b154 <HAL_TIM_Base_Start_IT+0xb4>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d009      	beq.n	800b10c <HAL_TIM_Base_Start_IT+0x6c>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a16      	ldr	r2, [pc, #88]	; (800b158 <HAL_TIM_Base_Start_IT+0xb8>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d004      	beq.n	800b10c <HAL_TIM_Base_Start_IT+0x6c>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a15      	ldr	r2, [pc, #84]	; (800b15c <HAL_TIM_Base_Start_IT+0xbc>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d111      	bne.n	800b130 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	f003 0307 	and.w	r3, r3, #7
 800b116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2b06      	cmp	r3, #6
 800b11c:	d010      	beq.n	800b140 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f042 0201 	orr.w	r2, r2, #1
 800b12c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b12e:	e007      	b.n	800b140 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f042 0201 	orr.w	r2, r2, #1
 800b13e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3714      	adds	r7, #20
 800b146:	46bd      	mov	sp, r7
 800b148:	bc80      	pop	{r7}
 800b14a:	4770      	bx	lr
 800b14c:	40012c00 	.word	0x40012c00
 800b150:	40013400 	.word	0x40013400
 800b154:	40000400 	.word	0x40000400
 800b158:	40000800 	.word	0x40000800
 800b15c:	40000c00 	.word	0x40000c00

0800b160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	f003 0302 	and.w	r3, r3, #2
 800b172:	2b02      	cmp	r3, #2
 800b174:	d122      	bne.n	800b1bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	f003 0302 	and.w	r3, r3, #2
 800b180:	2b02      	cmp	r3, #2
 800b182:	d11b      	bne.n	800b1bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f06f 0202 	mvn.w	r2, #2
 800b18c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2201      	movs	r2, #1
 800b192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	f003 0303 	and.w	r3, r3, #3
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d003      	beq.n	800b1aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f9b4 	bl	800b510 <HAL_TIM_IC_CaptureCallback>
 800b1a8:	e005      	b.n	800b1b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f9a7 	bl	800b4fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f9b6 	bl	800b522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	f003 0304 	and.w	r3, r3, #4
 800b1c6:	2b04      	cmp	r3, #4
 800b1c8:	d122      	bne.n	800b210 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	f003 0304 	and.w	r3, r3, #4
 800b1d4:	2b04      	cmp	r3, #4
 800b1d6:	d11b      	bne.n	800b210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f06f 0204 	mvn.w	r2, #4
 800b1e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2202      	movs	r2, #2
 800b1e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d003      	beq.n	800b1fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f98a 	bl	800b510 <HAL_TIM_IC_CaptureCallback>
 800b1fc:	e005      	b.n	800b20a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f97d 	bl	800b4fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f98c 	bl	800b522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	f003 0308 	and.w	r3, r3, #8
 800b21a:	2b08      	cmp	r3, #8
 800b21c:	d122      	bne.n	800b264 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f003 0308 	and.w	r3, r3, #8
 800b228:	2b08      	cmp	r3, #8
 800b22a:	d11b      	bne.n	800b264 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f06f 0208 	mvn.w	r2, #8
 800b234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2204      	movs	r2, #4
 800b23a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	69db      	ldr	r3, [r3, #28]
 800b242:	f003 0303 	and.w	r3, r3, #3
 800b246:	2b00      	cmp	r3, #0
 800b248:	d003      	beq.n	800b252 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f960 	bl	800b510 <HAL_TIM_IC_CaptureCallback>
 800b250:	e005      	b.n	800b25e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f953 	bl	800b4fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f962 	bl	800b522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	f003 0310 	and.w	r3, r3, #16
 800b26e:	2b10      	cmp	r3, #16
 800b270:	d122      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f003 0310 	and.w	r3, r3, #16
 800b27c:	2b10      	cmp	r3, #16
 800b27e:	d11b      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f06f 0210 	mvn.w	r2, #16
 800b288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2208      	movs	r2, #8
 800b28e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	69db      	ldr	r3, [r3, #28]
 800b296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f936 	bl	800b510 <HAL_TIM_IC_CaptureCallback>
 800b2a4:	e005      	b.n	800b2b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f929 	bl	800b4fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f938 	bl	800b522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d10e      	bne.n	800b2e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	f003 0301 	and.w	r3, r3, #1
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d107      	bne.n	800b2e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f06f 0201 	mvn.w	r2, #1
 800b2dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f7fc fd62 	bl	8007da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2ee:	2b80      	cmp	r3, #128	; 0x80
 800b2f0:	d10e      	bne.n	800b310 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2fc:	2b80      	cmp	r3, #128	; 0x80
 800b2fe:	d107      	bne.n	800b310 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 faa1 	bl	800b852 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b31a:	2b40      	cmp	r3, #64	; 0x40
 800b31c:	d10e      	bne.n	800b33c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b328:	2b40      	cmp	r3, #64	; 0x40
 800b32a:	d107      	bne.n	800b33c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f8fc 	bl	800b534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	f003 0320 	and.w	r3, r3, #32
 800b346:	2b20      	cmp	r3, #32
 800b348:	d10e      	bne.n	800b368 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	f003 0320 	and.w	r3, r3, #32
 800b354:	2b20      	cmp	r3, #32
 800b356:	d107      	bne.n	800b368 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f06f 0220 	mvn.w	r2, #32
 800b360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 fa6c 	bl	800b840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b368:	bf00      	nop
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b384:	2b01      	cmp	r3, #1
 800b386:	d101      	bne.n	800b38c <HAL_TIM_ConfigClockSource+0x1c>
 800b388:	2302      	movs	r3, #2
 800b38a:	e0b4      	b.n	800b4f6 <HAL_TIM_ConfigClockSource+0x186>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2202      	movs	r2, #2
 800b398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b3aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3c4:	d03e      	beq.n	800b444 <HAL_TIM_ConfigClockSource+0xd4>
 800b3c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3ca:	f200 8087 	bhi.w	800b4dc <HAL_TIM_ConfigClockSource+0x16c>
 800b3ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3d2:	f000 8086 	beq.w	800b4e2 <HAL_TIM_ConfigClockSource+0x172>
 800b3d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3da:	d87f      	bhi.n	800b4dc <HAL_TIM_ConfigClockSource+0x16c>
 800b3dc:	2b70      	cmp	r3, #112	; 0x70
 800b3de:	d01a      	beq.n	800b416 <HAL_TIM_ConfigClockSource+0xa6>
 800b3e0:	2b70      	cmp	r3, #112	; 0x70
 800b3e2:	d87b      	bhi.n	800b4dc <HAL_TIM_ConfigClockSource+0x16c>
 800b3e4:	2b60      	cmp	r3, #96	; 0x60
 800b3e6:	d050      	beq.n	800b48a <HAL_TIM_ConfigClockSource+0x11a>
 800b3e8:	2b60      	cmp	r3, #96	; 0x60
 800b3ea:	d877      	bhi.n	800b4dc <HAL_TIM_ConfigClockSource+0x16c>
 800b3ec:	2b50      	cmp	r3, #80	; 0x50
 800b3ee:	d03c      	beq.n	800b46a <HAL_TIM_ConfigClockSource+0xfa>
 800b3f0:	2b50      	cmp	r3, #80	; 0x50
 800b3f2:	d873      	bhi.n	800b4dc <HAL_TIM_ConfigClockSource+0x16c>
 800b3f4:	2b40      	cmp	r3, #64	; 0x40
 800b3f6:	d058      	beq.n	800b4aa <HAL_TIM_ConfigClockSource+0x13a>
 800b3f8:	2b40      	cmp	r3, #64	; 0x40
 800b3fa:	d86f      	bhi.n	800b4dc <HAL_TIM_ConfigClockSource+0x16c>
 800b3fc:	2b30      	cmp	r3, #48	; 0x30
 800b3fe:	d064      	beq.n	800b4ca <HAL_TIM_ConfigClockSource+0x15a>
 800b400:	2b30      	cmp	r3, #48	; 0x30
 800b402:	d86b      	bhi.n	800b4dc <HAL_TIM_ConfigClockSource+0x16c>
 800b404:	2b20      	cmp	r3, #32
 800b406:	d060      	beq.n	800b4ca <HAL_TIM_ConfigClockSource+0x15a>
 800b408:	2b20      	cmp	r3, #32
 800b40a:	d867      	bhi.n	800b4dc <HAL_TIM_ConfigClockSource+0x16c>
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d05c      	beq.n	800b4ca <HAL_TIM_ConfigClockSource+0x15a>
 800b410:	2b10      	cmp	r3, #16
 800b412:	d05a      	beq.n	800b4ca <HAL_TIM_ConfigClockSource+0x15a>
 800b414:	e062      	b.n	800b4dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b426:	f000 f980 	bl	800b72a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b438:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	68ba      	ldr	r2, [r7, #8]
 800b440:	609a      	str	r2, [r3, #8]
      break;
 800b442:	e04f      	b.n	800b4e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b454:	f000 f969 	bl	800b72a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	689a      	ldr	r2, [r3, #8]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b466:	609a      	str	r2, [r3, #8]
      break;
 800b468:	e03c      	b.n	800b4e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b476:	461a      	mov	r2, r3
 800b478:	f000 f8e0 	bl	800b63c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2150      	movs	r1, #80	; 0x50
 800b482:	4618      	mov	r0, r3
 800b484:	f000 f937 	bl	800b6f6 <TIM_ITRx_SetConfig>
      break;
 800b488:	e02c      	b.n	800b4e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b496:	461a      	mov	r2, r3
 800b498:	f000 f8fe 	bl	800b698 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2160      	movs	r1, #96	; 0x60
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f000 f927 	bl	800b6f6 <TIM_ITRx_SetConfig>
      break;
 800b4a8:	e01c      	b.n	800b4e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	f000 f8c0 	bl	800b63c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2140      	movs	r1, #64	; 0x40
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 f917 	bl	800b6f6 <TIM_ITRx_SetConfig>
      break;
 800b4c8:	e00c      	b.n	800b4e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	f000 f90e 	bl	800b6f6 <TIM_ITRx_SetConfig>
      break;
 800b4da:	e003      	b.n	800b4e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	73fb      	strb	r3, [r7, #15]
      break;
 800b4e0:	e000      	b.n	800b4e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b4e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4fe:	b480      	push	{r7}
 800b500:	b083      	sub	sp, #12
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b506:	bf00      	nop
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bc80      	pop	{r7}
 800b50e:	4770      	bx	lr

0800b510 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bc80      	pop	{r7}
 800b520:	4770      	bx	lr

0800b522 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b522:	b480      	push	{r7}
 800b524:	b083      	sub	sp, #12
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b52a:	bf00      	nop
 800b52c:	370c      	adds	r7, #12
 800b52e:	46bd      	mov	sp, r7
 800b530:	bc80      	pop	{r7}
 800b532:	4770      	bx	lr

0800b534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b53c:	bf00      	nop
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	bc80      	pop	{r7}
 800b544:	4770      	bx	lr
	...

0800b548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a33      	ldr	r2, [pc, #204]	; (800b628 <TIM_Base_SetConfig+0xe0>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d013      	beq.n	800b588 <TIM_Base_SetConfig+0x40>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a32      	ldr	r2, [pc, #200]	; (800b62c <TIM_Base_SetConfig+0xe4>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d00f      	beq.n	800b588 <TIM_Base_SetConfig+0x40>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b56e:	d00b      	beq.n	800b588 <TIM_Base_SetConfig+0x40>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a2f      	ldr	r2, [pc, #188]	; (800b630 <TIM_Base_SetConfig+0xe8>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d007      	beq.n	800b588 <TIM_Base_SetConfig+0x40>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a2e      	ldr	r2, [pc, #184]	; (800b634 <TIM_Base_SetConfig+0xec>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d003      	beq.n	800b588 <TIM_Base_SetConfig+0x40>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a2d      	ldr	r2, [pc, #180]	; (800b638 <TIM_Base_SetConfig+0xf0>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d108      	bne.n	800b59a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b58e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	4313      	orrs	r3, r2
 800b598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a22      	ldr	r2, [pc, #136]	; (800b628 <TIM_Base_SetConfig+0xe0>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d013      	beq.n	800b5ca <TIM_Base_SetConfig+0x82>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a21      	ldr	r2, [pc, #132]	; (800b62c <TIM_Base_SetConfig+0xe4>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d00f      	beq.n	800b5ca <TIM_Base_SetConfig+0x82>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5b0:	d00b      	beq.n	800b5ca <TIM_Base_SetConfig+0x82>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a1e      	ldr	r2, [pc, #120]	; (800b630 <TIM_Base_SetConfig+0xe8>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d007      	beq.n	800b5ca <TIM_Base_SetConfig+0x82>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a1d      	ldr	r2, [pc, #116]	; (800b634 <TIM_Base_SetConfig+0xec>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d003      	beq.n	800b5ca <TIM_Base_SetConfig+0x82>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a1c      	ldr	r2, [pc, #112]	; (800b638 <TIM_Base_SetConfig+0xf0>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d108      	bne.n	800b5dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	695b      	ldr	r3, [r3, #20]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	689a      	ldr	r2, [r3, #8]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a09      	ldr	r2, [pc, #36]	; (800b628 <TIM_Base_SetConfig+0xe0>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d003      	beq.n	800b610 <TIM_Base_SetConfig+0xc8>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a08      	ldr	r2, [pc, #32]	; (800b62c <TIM_Base_SetConfig+0xe4>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d103      	bne.n	800b618 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	691a      	ldr	r2, [r3, #16]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	615a      	str	r2, [r3, #20]
}
 800b61e:	bf00      	nop
 800b620:	3714      	adds	r7, #20
 800b622:	46bd      	mov	sp, r7
 800b624:	bc80      	pop	{r7}
 800b626:	4770      	bx	lr
 800b628:	40012c00 	.word	0x40012c00
 800b62c:	40013400 	.word	0x40013400
 800b630:	40000400 	.word	0x40000400
 800b634:	40000800 	.word	0x40000800
 800b638:	40000c00 	.word	0x40000c00

0800b63c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b087      	sub	sp, #28
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	f023 0201 	bic.w	r2, r3, #1
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	699b      	ldr	r3, [r3, #24]
 800b65e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	011b      	lsls	r3, r3, #4
 800b66c:	693a      	ldr	r2, [r7, #16]
 800b66e:	4313      	orrs	r3, r2
 800b670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	f023 030a 	bic.w	r3, r3, #10
 800b678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	4313      	orrs	r3, r2
 800b680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	697a      	ldr	r2, [r7, #20]
 800b68c:	621a      	str	r2, [r3, #32]
}
 800b68e:	bf00      	nop
 800b690:	371c      	adds	r7, #28
 800b692:	46bd      	mov	sp, r7
 800b694:	bc80      	pop	{r7}
 800b696:	4770      	bx	lr

0800b698 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b698:	b480      	push	{r7}
 800b69a:	b087      	sub	sp, #28
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6a1b      	ldr	r3, [r3, #32]
 800b6a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6a1b      	ldr	r3, [r3, #32]
 800b6ae:	f023 0210 	bic.w	r2, r3, #16
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	699b      	ldr	r3, [r3, #24]
 800b6ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b6c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	031b      	lsls	r3, r3, #12
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b6d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	011b      	lsls	r3, r3, #4
 800b6da:	697a      	ldr	r2, [r7, #20]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	693a      	ldr	r2, [r7, #16]
 800b6e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	697a      	ldr	r2, [r7, #20]
 800b6ea:	621a      	str	r2, [r3, #32]
}
 800b6ec:	bf00      	nop
 800b6ee:	371c      	adds	r7, #28
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bc80      	pop	{r7}
 800b6f4:	4770      	bx	lr

0800b6f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b085      	sub	sp, #20
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b70c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	4313      	orrs	r3, r2
 800b714:	f043 0307 	orr.w	r3, r3, #7
 800b718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	609a      	str	r2, [r3, #8]
}
 800b720:	bf00      	nop
 800b722:	3714      	adds	r7, #20
 800b724:	46bd      	mov	sp, r7
 800b726:	bc80      	pop	{r7}
 800b728:	4770      	bx	lr

0800b72a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b72a:	b480      	push	{r7}
 800b72c:	b087      	sub	sp, #28
 800b72e:	af00      	add	r7, sp, #0
 800b730:	60f8      	str	r0, [r7, #12]
 800b732:	60b9      	str	r1, [r7, #8]
 800b734:	607a      	str	r2, [r7, #4]
 800b736:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b744:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	021a      	lsls	r2, r3, #8
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	431a      	orrs	r2, r3
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	4313      	orrs	r3, r2
 800b752:	697a      	ldr	r2, [r7, #20]
 800b754:	4313      	orrs	r3, r2
 800b756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	609a      	str	r2, [r3, #8]
}
 800b75e:	bf00      	nop
 800b760:	371c      	adds	r7, #28
 800b762:	46bd      	mov	sp, r7
 800b764:	bc80      	pop	{r7}
 800b766:	4770      	bx	lr

0800b768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d101      	bne.n	800b780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b77c:	2302      	movs	r3, #2
 800b77e:	e050      	b.n	800b822 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2201      	movs	r2, #1
 800b784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2202      	movs	r2, #2
 800b78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a1b      	ldr	r2, [pc, #108]	; (800b82c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d018      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a19      	ldr	r2, [pc, #100]	; (800b830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d013      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7d6:	d00e      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a15      	ldr	r2, [pc, #84]	; (800b834 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d009      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a14      	ldr	r2, [pc, #80]	; (800b838 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d004      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a12      	ldr	r2, [pc, #72]	; (800b83c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d10c      	bne.n	800b810 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	4313      	orrs	r3, r2
 800b806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68ba      	ldr	r2, [r7, #8]
 800b80e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	bc80      	pop	{r7}
 800b82a:	4770      	bx	lr
 800b82c:	40012c00 	.word	0x40012c00
 800b830:	40013400 	.word	0x40013400
 800b834:	40000400 	.word	0x40000400
 800b838:	40000800 	.word	0x40000800
 800b83c:	40000c00 	.word	0x40000c00

0800b840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b848:	bf00      	nop
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bc80      	pop	{r7}
 800b850:	4770      	bx	lr

0800b852 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b852:	b480      	push	{r7}
 800b854:	b083      	sub	sp, #12
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b85a:	bf00      	nop
 800b85c:	370c      	adds	r7, #12
 800b85e:	46bd      	mov	sp, r7
 800b860:	bc80      	pop	{r7}
 800b862:	4770      	bx	lr

0800b864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d101      	bne.n	800b876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b872:	2301      	movs	r3, #1
 800b874:	e042      	b.n	800b8fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d106      	bne.n	800b890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7fc fe1a 	bl	80084c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2224      	movs	r2, #36	; 0x24
 800b894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68da      	ldr	r2, [r3, #12]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fcb5 	bl	800c218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	691a      	ldr	r2, [r3, #16]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b8bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	695a      	ldr	r2, [r3, #20]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68da      	ldr	r2, [r3, #12]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b8dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2220      	movs	r2, #32
 800b8e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2220      	movs	r2, #32
 800b8f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	4613      	mov	r3, r2
 800b910:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b20      	cmp	r3, #32
 800b91c:	d121      	bne.n	800b962 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d002      	beq.n	800b92a <HAL_UART_Transmit_IT+0x26>
 800b924:	88fb      	ldrh	r3, [r7, #6]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e01a      	b.n	800b964 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	88fa      	ldrh	r2, [r7, #6]
 800b938:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	88fa      	ldrh	r2, [r7, #6]
 800b93e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2221      	movs	r2, #33	; 0x21
 800b94a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68da      	ldr	r2, [r3, #12]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b95c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b95e:	2300      	movs	r3, #0
 800b960:	e000      	b.n	800b964 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b962:	2302      	movs	r3, #2
  }
}
 800b964:	4618      	mov	r0, r3
 800b966:	3714      	adds	r7, #20
 800b968:	46bd      	mov	sp, r7
 800b96a:	bc80      	pop	{r7}
 800b96c:	4770      	bx	lr
	...

0800b970 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b0ba      	sub	sp, #232	; 0xe8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	695b      	ldr	r3, [r3, #20]
 800b992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b996:	2300      	movs	r3, #0
 800b998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b99c:	2300      	movs	r3, #0
 800b99e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b9a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9a6:	f003 030f 	and.w	r3, r3, #15
 800b9aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b9ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d10f      	bne.n	800b9d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b9b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9ba:	f003 0320 	and.w	r3, r3, #32
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d009      	beq.n	800b9d6 <HAL_UART_IRQHandler+0x66>
 800b9c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9c6:	f003 0320 	and.w	r3, r3, #32
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fb63 	bl	800c09a <UART_Receive_IT>
      return;
 800b9d4:	e25b      	b.n	800be8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b9d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f000 80de 	beq.w	800bb9c <HAL_UART_IRQHandler+0x22c>
 800b9e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d106      	bne.n	800b9fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b9ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f000 80d1 	beq.w	800bb9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9fe:	f003 0301 	and.w	r3, r3, #1
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00b      	beq.n	800ba1e <HAL_UART_IRQHandler+0xae>
 800ba06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d005      	beq.n	800ba1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba16:	f043 0201 	orr.w	r2, r3, #1
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba22:	f003 0304 	and.w	r3, r3, #4
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00b      	beq.n	800ba42 <HAL_UART_IRQHandler+0xd2>
 800ba2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba2e:	f003 0301 	and.w	r3, r3, #1
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d005      	beq.n	800ba42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba3a:	f043 0202 	orr.w	r2, r3, #2
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba46:	f003 0302 	and.w	r3, r3, #2
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00b      	beq.n	800ba66 <HAL_UART_IRQHandler+0xf6>
 800ba4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba52:	f003 0301 	and.w	r3, r3, #1
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d005      	beq.n	800ba66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba5e:	f043 0204 	orr.w	r2, r3, #4
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ba66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba6a:	f003 0308 	and.w	r3, r3, #8
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d011      	beq.n	800ba96 <HAL_UART_IRQHandler+0x126>
 800ba72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba76:	f003 0320 	and.w	r3, r3, #32
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d105      	bne.n	800ba8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ba7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba82:	f003 0301 	and.w	r3, r3, #1
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d005      	beq.n	800ba96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba8e:	f043 0208 	orr.w	r2, r3, #8
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f000 81f2 	beq.w	800be84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800baa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baa4:	f003 0320 	and.w	r3, r3, #32
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d008      	beq.n	800babe <HAL_UART_IRQHandler+0x14e>
 800baac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bab0:	f003 0320 	and.w	r3, r3, #32
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 faee 	bl	800c09a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bf14      	ite	ne
 800bacc:	2301      	movne	r3, #1
 800bace:	2300      	moveq	r3, #0
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bada:	f003 0308 	and.w	r3, r3, #8
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d103      	bne.n	800baea <HAL_UART_IRQHandler+0x17a>
 800bae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d04f      	beq.n	800bb8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 f9f8 	bl	800bee0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	695b      	ldr	r3, [r3, #20]
 800baf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d041      	beq.n	800bb82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	3314      	adds	r3, #20
 800bb04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb0c:	e853 3f00 	ldrex	r3, [r3]
 800bb10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	3314      	adds	r3, #20
 800bb26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb3a:	e841 2300 	strex	r3, r2, [r1]
 800bb3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1d9      	bne.n	800bafe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d013      	beq.n	800bb7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb56:	4a7e      	ldr	r2, [pc, #504]	; (800bd50 <HAL_UART_IRQHandler+0x3e0>)
 800bb58:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7fd f86c 	bl	8008c3c <HAL_DMA_Abort_IT>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d016      	beq.n	800bb98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bb74:	4610      	mov	r0, r2
 800bb76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb78:	e00e      	b.n	800bb98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 f99c 	bl	800beb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb80:	e00a      	b.n	800bb98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 f998 	bl	800beb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb88:	e006      	b.n	800bb98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f994 	bl	800beb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bb96:	e175      	b.n	800be84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb98:	bf00      	nop
    return;
 800bb9a:	e173      	b.n	800be84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	f040 814f 	bne.w	800be44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbaa:	f003 0310 	and.w	r3, r3, #16
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f000 8148 	beq.w	800be44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bbb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbb8:	f003 0310 	and.w	r3, r3, #16
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 8141 	beq.w	800be44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	60bb      	str	r3, [r7, #8]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	60bb      	str	r3, [r7, #8]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	60bb      	str	r3, [r7, #8]
 800bbd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	695b      	ldr	r3, [r3, #20]
 800bbde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	f000 80b6 	beq.w	800bd54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bbf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f000 8145 	beq.w	800be88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc06:	429a      	cmp	r2, r3
 800bc08:	f080 813e 	bcs.w	800be88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc18:	699b      	ldr	r3, [r3, #24]
 800bc1a:	2b20      	cmp	r3, #32
 800bc1c:	f000 8088 	beq.w	800bd30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	330c      	adds	r3, #12
 800bc26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc2e:	e853 3f00 	ldrex	r3, [r3]
 800bc32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	330c      	adds	r3, #12
 800bc48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bc4c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc54:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc5c:	e841 2300 	strex	r3, r2, [r1]
 800bc60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d1d9      	bne.n	800bc20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	3314      	adds	r3, #20
 800bc72:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc76:	e853 3f00 	ldrex	r3, [r3]
 800bc7a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc7e:	f023 0301 	bic.w	r3, r3, #1
 800bc82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	3314      	adds	r3, #20
 800bc8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bc90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bc94:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc96:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc9c:	e841 2300 	strex	r3, r2, [r1]
 800bca0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1e1      	bne.n	800bc6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	3314      	adds	r3, #20
 800bcae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcb2:	e853 3f00 	ldrex	r3, [r3]
 800bcb6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bcb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	3314      	adds	r3, #20
 800bcc8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bccc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bcce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bcd2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bcd4:	e841 2300 	strex	r3, r2, [r1]
 800bcd8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bcda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1e3      	bne.n	800bca8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2220      	movs	r2, #32
 800bce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	330c      	adds	r3, #12
 800bcf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf8:	e853 3f00 	ldrex	r3, [r3]
 800bcfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bcfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd00:	f023 0310 	bic.w	r3, r3, #16
 800bd04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	330c      	adds	r3, #12
 800bd0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd12:	65ba      	str	r2, [r7, #88]	; 0x58
 800bd14:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd1a:	e841 2300 	strex	r3, r2, [r1]
 800bd1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d1e3      	bne.n	800bcee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fc ff4b 	bl	8008bc6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2202      	movs	r2, #2
 800bd34:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	1ad3      	subs	r3, r2, r3
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	4619      	mov	r1, r3
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 f8bf 	bl	800beca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd4c:	e09c      	b.n	800be88 <HAL_UART_IRQHandler+0x518>
 800bd4e:	bf00      	nop
 800bd50:	0800bfa5 	.word	0x0800bfa5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	1ad3      	subs	r3, r2, r3
 800bd60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f000 808e 	beq.w	800be8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bd70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f000 8089 	beq.w	800be8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	330c      	adds	r3, #12
 800bd80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd84:	e853 3f00 	ldrex	r3, [r3]
 800bd88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	330c      	adds	r3, #12
 800bd9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bd9e:	647a      	str	r2, [r7, #68]	; 0x44
 800bda0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bda4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bda6:	e841 2300 	strex	r3, r2, [r1]
 800bdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bdac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1e3      	bne.n	800bd7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	3314      	adds	r3, #20
 800bdb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	e853 3f00 	ldrex	r3, [r3]
 800bdc0:	623b      	str	r3, [r7, #32]
   return(result);
 800bdc2:	6a3b      	ldr	r3, [r7, #32]
 800bdc4:	f023 0301 	bic.w	r3, r3, #1
 800bdc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	3314      	adds	r3, #20
 800bdd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bdd6:	633a      	str	r2, [r7, #48]	; 0x30
 800bdd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdde:	e841 2300 	strex	r3, r2, [r1]
 800bde2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d1e3      	bne.n	800bdb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2220      	movs	r2, #32
 800bdee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	330c      	adds	r3, #12
 800bdfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	e853 3f00 	ldrex	r3, [r3]
 800be06:	60fb      	str	r3, [r7, #12]
   return(result);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f023 0310 	bic.w	r3, r3, #16
 800be0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	330c      	adds	r3, #12
 800be18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800be1c:	61fa      	str	r2, [r7, #28]
 800be1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be20:	69b9      	ldr	r1, [r7, #24]
 800be22:	69fa      	ldr	r2, [r7, #28]
 800be24:	e841 2300 	strex	r3, r2, [r1]
 800be28:	617b      	str	r3, [r7, #20]
   return(result);
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1e3      	bne.n	800bdf8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2202      	movs	r2, #2
 800be34:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be3a:	4619      	mov	r1, r3
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 f844 	bl	800beca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be42:	e023      	b.n	800be8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d009      	beq.n	800be64 <HAL_UART_IRQHandler+0x4f4>
 800be50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d003      	beq.n	800be64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f8b5 	bl	800bfcc <UART_Transmit_IT>
    return;
 800be62:	e014      	b.n	800be8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00e      	beq.n	800be8e <HAL_UART_IRQHandler+0x51e>
 800be70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d008      	beq.n	800be8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 f8f4 	bl	800c06a <UART_EndTransmit_IT>
    return;
 800be82:	e004      	b.n	800be8e <HAL_UART_IRQHandler+0x51e>
    return;
 800be84:	bf00      	nop
 800be86:	e002      	b.n	800be8e <HAL_UART_IRQHandler+0x51e>
      return;
 800be88:	bf00      	nop
 800be8a:	e000      	b.n	800be8e <HAL_UART_IRQHandler+0x51e>
      return;
 800be8c:	bf00      	nop
  }
}
 800be8e:	37e8      	adds	r7, #232	; 0xe8
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800be9c:	bf00      	nop
 800be9e:	370c      	adds	r7, #12
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bc80      	pop	{r7}
 800bea4:	4770      	bx	lr

0800bea6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b083      	sub	sp, #12
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800beae:	bf00      	nop
 800beb0:	370c      	adds	r7, #12
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bc80      	pop	{r7}
 800beb6:	4770      	bx	lr

0800beb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bec0:	bf00      	nop
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bc80      	pop	{r7}
 800bec8:	4770      	bx	lr

0800beca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800beca:	b480      	push	{r7}
 800becc:	b083      	sub	sp, #12
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
 800bed2:	460b      	mov	r3, r1
 800bed4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bed6:	bf00      	nop
 800bed8:	370c      	adds	r7, #12
 800beda:	46bd      	mov	sp, r7
 800bedc:	bc80      	pop	{r7}
 800bede:	4770      	bx	lr

0800bee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b095      	sub	sp, #84	; 0x54
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	330c      	adds	r3, #12
 800beee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef2:	e853 3f00 	ldrex	r3, [r3]
 800bef6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800befe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	330c      	adds	r3, #12
 800bf06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf08:	643a      	str	r2, [r7, #64]	; 0x40
 800bf0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf10:	e841 2300 	strex	r3, r2, [r1]
 800bf14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1e5      	bne.n	800bee8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	3314      	adds	r3, #20
 800bf22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	e853 3f00 	ldrex	r3, [r3]
 800bf2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	f023 0301 	bic.w	r3, r3, #1
 800bf32:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	3314      	adds	r3, #20
 800bf3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf44:	e841 2300 	strex	r3, r2, [r1]
 800bf48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1e5      	bne.n	800bf1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d119      	bne.n	800bf8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	330c      	adds	r3, #12
 800bf5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	e853 3f00 	ldrex	r3, [r3]
 800bf66:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	f023 0310 	bic.w	r3, r3, #16
 800bf6e:	647b      	str	r3, [r7, #68]	; 0x44
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	330c      	adds	r3, #12
 800bf76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf78:	61ba      	str	r2, [r7, #24]
 800bf7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7c:	6979      	ldr	r1, [r7, #20]
 800bf7e:	69ba      	ldr	r2, [r7, #24]
 800bf80:	e841 2300 	strex	r3, r2, [r1]
 800bf84:	613b      	str	r3, [r7, #16]
   return(result);
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1e5      	bne.n	800bf58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2220      	movs	r2, #32
 800bf90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bf9a:	bf00      	nop
 800bf9c:	3754      	adds	r7, #84	; 0x54
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bc80      	pop	{r7}
 800bfa2:	4770      	bx	lr

0800bfa4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f7ff ff7a 	bl	800beb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfc4:	bf00      	nop
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b085      	sub	sp, #20
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	2b21      	cmp	r3, #33	; 0x21
 800bfde:	d13e      	bne.n	800c05e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfe8:	d114      	bne.n	800c014 <UART_Transmit_IT+0x48>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d110      	bne.n	800c014 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a1b      	ldr	r3, [r3, #32]
 800bff6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	881b      	ldrh	r3, [r3, #0]
 800bffc:	461a      	mov	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c006:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6a1b      	ldr	r3, [r3, #32]
 800c00c:	1c9a      	adds	r2, r3, #2
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	621a      	str	r2, [r3, #32]
 800c012:	e008      	b.n	800c026 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6a1b      	ldr	r3, [r3, #32]
 800c018:	1c59      	adds	r1, r3, #1
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	6211      	str	r1, [r2, #32]
 800c01e:	781a      	ldrb	r2, [r3, #0]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	3b01      	subs	r3, #1
 800c02e:	b29b      	uxth	r3, r3
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	4619      	mov	r1, r3
 800c034:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c036:	2b00      	cmp	r3, #0
 800c038:	d10f      	bne.n	800c05a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68da      	ldr	r2, [r3, #12]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c048:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68da      	ldr	r2, [r3, #12]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c058:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c05a:	2300      	movs	r3, #0
 800c05c:	e000      	b.n	800c060 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c05e:	2302      	movs	r3, #2
  }
}
 800c060:	4618      	mov	r0, r3
 800c062:	3714      	adds	r7, #20
 800c064:	46bd      	mov	sp, r7
 800c066:	bc80      	pop	{r7}
 800c068:	4770      	bx	lr

0800c06a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b082      	sub	sp, #8
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68da      	ldr	r2, [r3, #12]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c080:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2220      	movs	r2, #32
 800c086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff ff02 	bl	800be94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c090:	2300      	movs	r3, #0
}
 800c092:	4618      	mov	r0, r3
 800c094:	3708      	adds	r7, #8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b08c      	sub	sp, #48	; 0x30
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b22      	cmp	r3, #34	; 0x22
 800c0ac:	f040 80ae 	bne.w	800c20c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0b8:	d117      	bne.n	800c0ea <UART_Receive_IT+0x50>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d113      	bne.n	800c0ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d8:	b29a      	uxth	r2, r3
 800c0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e2:	1c9a      	adds	r2, r3, #2
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	629a      	str	r2, [r3, #40]	; 0x28
 800c0e8:	e026      	b.n	800c138 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0fc:	d007      	beq.n	800c10e <UART_Receive_IT+0x74>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d10a      	bne.n	800c11c <UART_Receive_IT+0x82>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	691b      	ldr	r3, [r3, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d106      	bne.n	800c11c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	b2da      	uxtb	r2, r3
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	701a      	strb	r2, [r3, #0]
 800c11a:	e008      	b.n	800c12e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	b2db      	uxtb	r3, r3
 800c124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c132:	1c5a      	adds	r2, r3, #1
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	3b01      	subs	r3, #1
 800c140:	b29b      	uxth	r3, r3
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	4619      	mov	r1, r3
 800c146:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d15d      	bne.n	800c208 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	68da      	ldr	r2, [r3, #12]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f022 0220 	bic.w	r2, r2, #32
 800c15a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	68da      	ldr	r2, [r3, #12]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c16a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	695a      	ldr	r2, [r3, #20]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f022 0201 	bic.w	r2, r2, #1
 800c17a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2220      	movs	r2, #32
 800c180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d135      	bne.n	800c1fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	330c      	adds	r3, #12
 800c19e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	e853 3f00 	ldrex	r3, [r3]
 800c1a6:	613b      	str	r3, [r7, #16]
   return(result);
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	f023 0310 	bic.w	r3, r3, #16
 800c1ae:	627b      	str	r3, [r7, #36]	; 0x24
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	330c      	adds	r3, #12
 800c1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1b8:	623a      	str	r2, [r7, #32]
 800c1ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1bc:	69f9      	ldr	r1, [r7, #28]
 800c1be:	6a3a      	ldr	r2, [r7, #32]
 800c1c0:	e841 2300 	strex	r3, r2, [r1]
 800c1c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1e5      	bne.n	800c198 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f003 0310 	and.w	r3, r3, #16
 800c1d6:	2b10      	cmp	r3, #16
 800c1d8:	d10a      	bne.n	800c1f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1da:	2300      	movs	r3, #0
 800c1dc:	60fb      	str	r3, [r7, #12]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	60fb      	str	r3, [r7, #12]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	60fb      	str	r3, [r7, #12]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f7ff fe67 	bl	800beca <HAL_UARTEx_RxEventCallback>
 800c1fc:	e002      	b.n	800c204 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7ff fe51 	bl	800bea6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c204:	2300      	movs	r3, #0
 800c206:	e002      	b.n	800c20e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c208:	2300      	movs	r3, #0
 800c20a:	e000      	b.n	800c20e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c20c:	2302      	movs	r3, #2
  }
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3730      	adds	r7, #48	; 0x30
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
	...

0800c218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	691b      	ldr	r3, [r3, #16]
 800c226:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	68da      	ldr	r2, [r3, #12]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	430a      	orrs	r2, r1
 800c234:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	689a      	ldr	r2, [r3, #8]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	431a      	orrs	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	695b      	ldr	r3, [r3, #20]
 800c244:	4313      	orrs	r3, r2
 800c246:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c252:	f023 030c 	bic.w	r3, r3, #12
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	6812      	ldr	r2, [r2, #0]
 800c25a:	68b9      	ldr	r1, [r7, #8]
 800c25c:	430b      	orrs	r3, r1
 800c25e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	695b      	ldr	r3, [r3, #20]
 800c266:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	699a      	ldr	r2, [r3, #24]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	430a      	orrs	r2, r1
 800c274:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a2c      	ldr	r2, [pc, #176]	; (800c32c <UART_SetConfig+0x114>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d103      	bne.n	800c288 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c280:	f7fe fe8c 	bl	800af9c <HAL_RCC_GetPCLK2Freq>
 800c284:	60f8      	str	r0, [r7, #12]
 800c286:	e002      	b.n	800c28e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c288:	f7fe fe74 	bl	800af74 <HAL_RCC_GetPCLK1Freq>
 800c28c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	4613      	mov	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4413      	add	r3, r2
 800c296:	009a      	lsls	r2, r3, #2
 800c298:	441a      	add	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2a4:	4a22      	ldr	r2, [pc, #136]	; (800c330 <UART_SetConfig+0x118>)
 800c2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2aa:	095b      	lsrs	r3, r3, #5
 800c2ac:	0119      	lsls	r1, r3, #4
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4413      	add	r3, r2
 800c2b6:	009a      	lsls	r2, r3, #2
 800c2b8:	441a      	add	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2c4:	4b1a      	ldr	r3, [pc, #104]	; (800c330 <UART_SetConfig+0x118>)
 800c2c6:	fba3 0302 	umull	r0, r3, r3, r2
 800c2ca:	095b      	lsrs	r3, r3, #5
 800c2cc:	2064      	movs	r0, #100	; 0x64
 800c2ce:	fb00 f303 	mul.w	r3, r0, r3
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	011b      	lsls	r3, r3, #4
 800c2d6:	3332      	adds	r3, #50	; 0x32
 800c2d8:	4a15      	ldr	r2, [pc, #84]	; (800c330 <UART_SetConfig+0x118>)
 800c2da:	fba2 2303 	umull	r2, r3, r2, r3
 800c2de:	095b      	lsrs	r3, r3, #5
 800c2e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2e4:	4419      	add	r1, r3
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	4613      	mov	r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	4413      	add	r3, r2
 800c2ee:	009a      	lsls	r2, r3, #2
 800c2f0:	441a      	add	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2fc:	4b0c      	ldr	r3, [pc, #48]	; (800c330 <UART_SetConfig+0x118>)
 800c2fe:	fba3 0302 	umull	r0, r3, r3, r2
 800c302:	095b      	lsrs	r3, r3, #5
 800c304:	2064      	movs	r0, #100	; 0x64
 800c306:	fb00 f303 	mul.w	r3, r0, r3
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	011b      	lsls	r3, r3, #4
 800c30e:	3332      	adds	r3, #50	; 0x32
 800c310:	4a07      	ldr	r2, [pc, #28]	; (800c330 <UART_SetConfig+0x118>)
 800c312:	fba2 2303 	umull	r2, r3, r2, r3
 800c316:	095b      	lsrs	r3, r3, #5
 800c318:	f003 020f 	and.w	r2, r3, #15
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	440a      	add	r2, r1
 800c322:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c324:	bf00      	nop
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	40013800 	.word	0x40013800
 800c330:	51eb851f 	.word	0x51eb851f

0800c334 <__itoa>:
 800c334:	1e93      	subs	r3, r2, #2
 800c336:	2b22      	cmp	r3, #34	; 0x22
 800c338:	b510      	push	{r4, lr}
 800c33a:	460c      	mov	r4, r1
 800c33c:	d904      	bls.n	800c348 <__itoa+0x14>
 800c33e:	2300      	movs	r3, #0
 800c340:	461c      	mov	r4, r3
 800c342:	700b      	strb	r3, [r1, #0]
 800c344:	4620      	mov	r0, r4
 800c346:	bd10      	pop	{r4, pc}
 800c348:	2a0a      	cmp	r2, #10
 800c34a:	d109      	bne.n	800c360 <__itoa+0x2c>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	da07      	bge.n	800c360 <__itoa+0x2c>
 800c350:	232d      	movs	r3, #45	; 0x2d
 800c352:	700b      	strb	r3, [r1, #0]
 800c354:	2101      	movs	r1, #1
 800c356:	4240      	negs	r0, r0
 800c358:	4421      	add	r1, r4
 800c35a:	f000 f90d 	bl	800c578 <__utoa>
 800c35e:	e7f1      	b.n	800c344 <__itoa+0x10>
 800c360:	2100      	movs	r1, #0
 800c362:	e7f9      	b.n	800c358 <__itoa+0x24>

0800c364 <itoa>:
 800c364:	f7ff bfe6 	b.w	800c334 <__itoa>

0800c368 <malloc>:
 800c368:	4b02      	ldr	r3, [pc, #8]	; (800c374 <malloc+0xc>)
 800c36a:	4601      	mov	r1, r0
 800c36c:	6818      	ldr	r0, [r3, #0]
 800c36e:	f000 b823 	b.w	800c3b8 <_malloc_r>
 800c372:	bf00      	nop
 800c374:	20000108 	.word	0x20000108

0800c378 <sbrk_aligned>:
 800c378:	b570      	push	{r4, r5, r6, lr}
 800c37a:	4e0e      	ldr	r6, [pc, #56]	; (800c3b4 <sbrk_aligned+0x3c>)
 800c37c:	460c      	mov	r4, r1
 800c37e:	6831      	ldr	r1, [r6, #0]
 800c380:	4605      	mov	r5, r0
 800c382:	b911      	cbnz	r1, 800c38a <sbrk_aligned+0x12>
 800c384:	f000 f952 	bl	800c62c <_sbrk_r>
 800c388:	6030      	str	r0, [r6, #0]
 800c38a:	4621      	mov	r1, r4
 800c38c:	4628      	mov	r0, r5
 800c38e:	f000 f94d 	bl	800c62c <_sbrk_r>
 800c392:	1c43      	adds	r3, r0, #1
 800c394:	d00a      	beq.n	800c3ac <sbrk_aligned+0x34>
 800c396:	1cc4      	adds	r4, r0, #3
 800c398:	f024 0403 	bic.w	r4, r4, #3
 800c39c:	42a0      	cmp	r0, r4
 800c39e:	d007      	beq.n	800c3b0 <sbrk_aligned+0x38>
 800c3a0:	1a21      	subs	r1, r4, r0
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f000 f942 	bl	800c62c <_sbrk_r>
 800c3a8:	3001      	adds	r0, #1
 800c3aa:	d101      	bne.n	800c3b0 <sbrk_aligned+0x38>
 800c3ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	bd70      	pop	{r4, r5, r6, pc}
 800c3b4:	200003a4 	.word	0x200003a4

0800c3b8 <_malloc_r>:
 800c3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3bc:	1ccd      	adds	r5, r1, #3
 800c3be:	f025 0503 	bic.w	r5, r5, #3
 800c3c2:	3508      	adds	r5, #8
 800c3c4:	2d0c      	cmp	r5, #12
 800c3c6:	bf38      	it	cc
 800c3c8:	250c      	movcc	r5, #12
 800c3ca:	2d00      	cmp	r5, #0
 800c3cc:	4607      	mov	r7, r0
 800c3ce:	db01      	blt.n	800c3d4 <_malloc_r+0x1c>
 800c3d0:	42a9      	cmp	r1, r5
 800c3d2:	d905      	bls.n	800c3e0 <_malloc_r+0x28>
 800c3d4:	230c      	movs	r3, #12
 800c3d6:	2600      	movs	r6, #0
 800c3d8:	603b      	str	r3, [r7, #0]
 800c3da:	4630      	mov	r0, r6
 800c3dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c4b4 <_malloc_r+0xfc>
 800c3e4:	f000 f89c 	bl	800c520 <__malloc_lock>
 800c3e8:	f8d8 3000 	ldr.w	r3, [r8]
 800c3ec:	461c      	mov	r4, r3
 800c3ee:	bb5c      	cbnz	r4, 800c448 <_malloc_r+0x90>
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	4638      	mov	r0, r7
 800c3f4:	f7ff ffc0 	bl	800c378 <sbrk_aligned>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	d155      	bne.n	800c4aa <_malloc_r+0xf2>
 800c3fe:	f8d8 4000 	ldr.w	r4, [r8]
 800c402:	4626      	mov	r6, r4
 800c404:	2e00      	cmp	r6, #0
 800c406:	d145      	bne.n	800c494 <_malloc_r+0xdc>
 800c408:	2c00      	cmp	r4, #0
 800c40a:	d048      	beq.n	800c49e <_malloc_r+0xe6>
 800c40c:	6823      	ldr	r3, [r4, #0]
 800c40e:	4631      	mov	r1, r6
 800c410:	4638      	mov	r0, r7
 800c412:	eb04 0903 	add.w	r9, r4, r3
 800c416:	f000 f909 	bl	800c62c <_sbrk_r>
 800c41a:	4581      	cmp	r9, r0
 800c41c:	d13f      	bne.n	800c49e <_malloc_r+0xe6>
 800c41e:	6821      	ldr	r1, [r4, #0]
 800c420:	4638      	mov	r0, r7
 800c422:	1a6d      	subs	r5, r5, r1
 800c424:	4629      	mov	r1, r5
 800c426:	f7ff ffa7 	bl	800c378 <sbrk_aligned>
 800c42a:	3001      	adds	r0, #1
 800c42c:	d037      	beq.n	800c49e <_malloc_r+0xe6>
 800c42e:	6823      	ldr	r3, [r4, #0]
 800c430:	442b      	add	r3, r5
 800c432:	6023      	str	r3, [r4, #0]
 800c434:	f8d8 3000 	ldr.w	r3, [r8]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d038      	beq.n	800c4ae <_malloc_r+0xf6>
 800c43c:	685a      	ldr	r2, [r3, #4]
 800c43e:	42a2      	cmp	r2, r4
 800c440:	d12b      	bne.n	800c49a <_malloc_r+0xe2>
 800c442:	2200      	movs	r2, #0
 800c444:	605a      	str	r2, [r3, #4]
 800c446:	e00f      	b.n	800c468 <_malloc_r+0xb0>
 800c448:	6822      	ldr	r2, [r4, #0]
 800c44a:	1b52      	subs	r2, r2, r5
 800c44c:	d41f      	bmi.n	800c48e <_malloc_r+0xd6>
 800c44e:	2a0b      	cmp	r2, #11
 800c450:	d917      	bls.n	800c482 <_malloc_r+0xca>
 800c452:	1961      	adds	r1, r4, r5
 800c454:	42a3      	cmp	r3, r4
 800c456:	6025      	str	r5, [r4, #0]
 800c458:	bf18      	it	ne
 800c45a:	6059      	strne	r1, [r3, #4]
 800c45c:	6863      	ldr	r3, [r4, #4]
 800c45e:	bf08      	it	eq
 800c460:	f8c8 1000 	streq.w	r1, [r8]
 800c464:	5162      	str	r2, [r4, r5]
 800c466:	604b      	str	r3, [r1, #4]
 800c468:	4638      	mov	r0, r7
 800c46a:	f104 060b 	add.w	r6, r4, #11
 800c46e:	f000 f85d 	bl	800c52c <__malloc_unlock>
 800c472:	f026 0607 	bic.w	r6, r6, #7
 800c476:	1d23      	adds	r3, r4, #4
 800c478:	1af2      	subs	r2, r6, r3
 800c47a:	d0ae      	beq.n	800c3da <_malloc_r+0x22>
 800c47c:	1b9b      	subs	r3, r3, r6
 800c47e:	50a3      	str	r3, [r4, r2]
 800c480:	e7ab      	b.n	800c3da <_malloc_r+0x22>
 800c482:	42a3      	cmp	r3, r4
 800c484:	6862      	ldr	r2, [r4, #4]
 800c486:	d1dd      	bne.n	800c444 <_malloc_r+0x8c>
 800c488:	f8c8 2000 	str.w	r2, [r8]
 800c48c:	e7ec      	b.n	800c468 <_malloc_r+0xb0>
 800c48e:	4623      	mov	r3, r4
 800c490:	6864      	ldr	r4, [r4, #4]
 800c492:	e7ac      	b.n	800c3ee <_malloc_r+0x36>
 800c494:	4634      	mov	r4, r6
 800c496:	6876      	ldr	r6, [r6, #4]
 800c498:	e7b4      	b.n	800c404 <_malloc_r+0x4c>
 800c49a:	4613      	mov	r3, r2
 800c49c:	e7cc      	b.n	800c438 <_malloc_r+0x80>
 800c49e:	230c      	movs	r3, #12
 800c4a0:	4638      	mov	r0, r7
 800c4a2:	603b      	str	r3, [r7, #0]
 800c4a4:	f000 f842 	bl	800c52c <__malloc_unlock>
 800c4a8:	e797      	b.n	800c3da <_malloc_r+0x22>
 800c4aa:	6025      	str	r5, [r4, #0]
 800c4ac:	e7dc      	b.n	800c468 <_malloc_r+0xb0>
 800c4ae:	605b      	str	r3, [r3, #4]
 800c4b0:	deff      	udf	#255	; 0xff
 800c4b2:	bf00      	nop
 800c4b4:	200003a0 	.word	0x200003a0

0800c4b8 <sniprintf>:
 800c4b8:	b40c      	push	{r2, r3}
 800c4ba:	b530      	push	{r4, r5, lr}
 800c4bc:	4b17      	ldr	r3, [pc, #92]	; (800c51c <sniprintf+0x64>)
 800c4be:	1e0c      	subs	r4, r1, #0
 800c4c0:	681d      	ldr	r5, [r3, #0]
 800c4c2:	b09d      	sub	sp, #116	; 0x74
 800c4c4:	da08      	bge.n	800c4d8 <sniprintf+0x20>
 800c4c6:	238b      	movs	r3, #139	; 0x8b
 800c4c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4cc:	602b      	str	r3, [r5, #0]
 800c4ce:	b01d      	add	sp, #116	; 0x74
 800c4d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4d4:	b002      	add	sp, #8
 800c4d6:	4770      	bx	lr
 800c4d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c4dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c4e0:	bf0c      	ite	eq
 800c4e2:	4623      	moveq	r3, r4
 800c4e4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c4e8:	9304      	str	r3, [sp, #16]
 800c4ea:	9307      	str	r3, [sp, #28]
 800c4ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4f0:	9002      	str	r0, [sp, #8]
 800c4f2:	9006      	str	r0, [sp, #24]
 800c4f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	ab21      	add	r3, sp, #132	; 0x84
 800c4fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c4fe:	a902      	add	r1, sp, #8
 800c500:	9301      	str	r3, [sp, #4]
 800c502:	f000 f987 	bl	800c814 <_svfiprintf_r>
 800c506:	1c43      	adds	r3, r0, #1
 800c508:	bfbc      	itt	lt
 800c50a:	238b      	movlt	r3, #139	; 0x8b
 800c50c:	602b      	strlt	r3, [r5, #0]
 800c50e:	2c00      	cmp	r4, #0
 800c510:	d0dd      	beq.n	800c4ce <sniprintf+0x16>
 800c512:	2200      	movs	r2, #0
 800c514:	9b02      	ldr	r3, [sp, #8]
 800c516:	701a      	strb	r2, [r3, #0]
 800c518:	e7d9      	b.n	800c4ce <sniprintf+0x16>
 800c51a:	bf00      	nop
 800c51c:	20000108 	.word	0x20000108

0800c520 <__malloc_lock>:
 800c520:	4801      	ldr	r0, [pc, #4]	; (800c528 <__malloc_lock+0x8>)
 800c522:	f000 b8bd 	b.w	800c6a0 <__retarget_lock_acquire_recursive>
 800c526:	bf00      	nop
 800c528:	200004e0 	.word	0x200004e0

0800c52c <__malloc_unlock>:
 800c52c:	4801      	ldr	r0, [pc, #4]	; (800c534 <__malloc_unlock+0x8>)
 800c52e:	f000 b8b8 	b.w	800c6a2 <__retarget_lock_release_recursive>
 800c532:	bf00      	nop
 800c534:	200004e0 	.word	0x200004e0

0800c538 <siprintf>:
 800c538:	b40e      	push	{r1, r2, r3}
 800c53a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c53e:	b500      	push	{lr}
 800c540:	b09c      	sub	sp, #112	; 0x70
 800c542:	ab1d      	add	r3, sp, #116	; 0x74
 800c544:	9002      	str	r0, [sp, #8]
 800c546:	9006      	str	r0, [sp, #24]
 800c548:	9107      	str	r1, [sp, #28]
 800c54a:	9104      	str	r1, [sp, #16]
 800c54c:	4808      	ldr	r0, [pc, #32]	; (800c570 <siprintf+0x38>)
 800c54e:	4909      	ldr	r1, [pc, #36]	; (800c574 <siprintf+0x3c>)
 800c550:	f853 2b04 	ldr.w	r2, [r3], #4
 800c554:	9105      	str	r1, [sp, #20]
 800c556:	6800      	ldr	r0, [r0, #0]
 800c558:	a902      	add	r1, sp, #8
 800c55a:	9301      	str	r3, [sp, #4]
 800c55c:	f000 f95a 	bl	800c814 <_svfiprintf_r>
 800c560:	2200      	movs	r2, #0
 800c562:	9b02      	ldr	r3, [sp, #8]
 800c564:	701a      	strb	r2, [r3, #0]
 800c566:	b01c      	add	sp, #112	; 0x70
 800c568:	f85d eb04 	ldr.w	lr, [sp], #4
 800c56c:	b003      	add	sp, #12
 800c56e:	4770      	bx	lr
 800c570:	20000108 	.word	0x20000108
 800c574:	ffff0208 	.word	0xffff0208

0800c578 <__utoa>:
 800c578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c57a:	b08b      	sub	sp, #44	; 0x2c
 800c57c:	4605      	mov	r5, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	466e      	mov	r6, sp
 800c582:	4c1d      	ldr	r4, [pc, #116]	; (800c5f8 <__utoa+0x80>)
 800c584:	f104 0c20 	add.w	ip, r4, #32
 800c588:	4637      	mov	r7, r6
 800c58a:	6820      	ldr	r0, [r4, #0]
 800c58c:	6861      	ldr	r1, [r4, #4]
 800c58e:	3408      	adds	r4, #8
 800c590:	c703      	stmia	r7!, {r0, r1}
 800c592:	4564      	cmp	r4, ip
 800c594:	463e      	mov	r6, r7
 800c596:	d1f7      	bne.n	800c588 <__utoa+0x10>
 800c598:	7921      	ldrb	r1, [r4, #4]
 800c59a:	6820      	ldr	r0, [r4, #0]
 800c59c:	7139      	strb	r1, [r7, #4]
 800c59e:	1e91      	subs	r1, r2, #2
 800c5a0:	2922      	cmp	r1, #34	; 0x22
 800c5a2:	6038      	str	r0, [r7, #0]
 800c5a4:	f04f 0100 	mov.w	r1, #0
 800c5a8:	d904      	bls.n	800c5b4 <__utoa+0x3c>
 800c5aa:	7019      	strb	r1, [r3, #0]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	b00b      	add	sp, #44	; 0x2c
 800c5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5b4:	1e58      	subs	r0, r3, #1
 800c5b6:	4684      	mov	ip, r0
 800c5b8:	fbb5 f7f2 	udiv	r7, r5, r2
 800c5bc:	fb02 5617 	mls	r6, r2, r7, r5
 800c5c0:	3628      	adds	r6, #40	; 0x28
 800c5c2:	446e      	add	r6, sp
 800c5c4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c5c8:	460c      	mov	r4, r1
 800c5ca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c5ce:	462e      	mov	r6, r5
 800c5d0:	42b2      	cmp	r2, r6
 800c5d2:	463d      	mov	r5, r7
 800c5d4:	f101 0101 	add.w	r1, r1, #1
 800c5d8:	d9ee      	bls.n	800c5b8 <__utoa+0x40>
 800c5da:	2200      	movs	r2, #0
 800c5dc:	545a      	strb	r2, [r3, r1]
 800c5de:	1919      	adds	r1, r3, r4
 800c5e0:	1aa5      	subs	r5, r4, r2
 800c5e2:	42aa      	cmp	r2, r5
 800c5e4:	dae3      	bge.n	800c5ae <__utoa+0x36>
 800c5e6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c5ea:	780e      	ldrb	r6, [r1, #0]
 800c5ec:	3201      	adds	r2, #1
 800c5ee:	7006      	strb	r6, [r0, #0]
 800c5f0:	f801 5901 	strb.w	r5, [r1], #-1
 800c5f4:	e7f4      	b.n	800c5e0 <__utoa+0x68>
 800c5f6:	bf00      	nop
 800c5f8:	0800dd92 	.word	0x0800dd92

0800c5fc <strcat>:
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	b510      	push	{r4, lr}
 800c600:	7814      	ldrb	r4, [r2, #0]
 800c602:	4613      	mov	r3, r2
 800c604:	3201      	adds	r2, #1
 800c606:	2c00      	cmp	r4, #0
 800c608:	d1fa      	bne.n	800c600 <strcat+0x4>
 800c60a:	3b01      	subs	r3, #1
 800c60c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c610:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c614:	2a00      	cmp	r2, #0
 800c616:	d1f9      	bne.n	800c60c <strcat+0x10>
 800c618:	bd10      	pop	{r4, pc}

0800c61a <memset>:
 800c61a:	4603      	mov	r3, r0
 800c61c:	4402      	add	r2, r0
 800c61e:	4293      	cmp	r3, r2
 800c620:	d100      	bne.n	800c624 <memset+0xa>
 800c622:	4770      	bx	lr
 800c624:	f803 1b01 	strb.w	r1, [r3], #1
 800c628:	e7f9      	b.n	800c61e <memset+0x4>
	...

0800c62c <_sbrk_r>:
 800c62c:	b538      	push	{r3, r4, r5, lr}
 800c62e:	2300      	movs	r3, #0
 800c630:	4d05      	ldr	r5, [pc, #20]	; (800c648 <_sbrk_r+0x1c>)
 800c632:	4604      	mov	r4, r0
 800c634:	4608      	mov	r0, r1
 800c636:	602b      	str	r3, [r5, #0]
 800c638:	f7fb ffd4 	bl	80085e4 <_sbrk>
 800c63c:	1c43      	adds	r3, r0, #1
 800c63e:	d102      	bne.n	800c646 <_sbrk_r+0x1a>
 800c640:	682b      	ldr	r3, [r5, #0]
 800c642:	b103      	cbz	r3, 800c646 <_sbrk_r+0x1a>
 800c644:	6023      	str	r3, [r4, #0]
 800c646:	bd38      	pop	{r3, r4, r5, pc}
 800c648:	200004e4 	.word	0x200004e4

0800c64c <__errno>:
 800c64c:	4b01      	ldr	r3, [pc, #4]	; (800c654 <__errno+0x8>)
 800c64e:	6818      	ldr	r0, [r3, #0]
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	20000108 	.word	0x20000108

0800c658 <__libc_init_array>:
 800c658:	b570      	push	{r4, r5, r6, lr}
 800c65a:	2600      	movs	r6, #0
 800c65c:	4d0c      	ldr	r5, [pc, #48]	; (800c690 <__libc_init_array+0x38>)
 800c65e:	4c0d      	ldr	r4, [pc, #52]	; (800c694 <__libc_init_array+0x3c>)
 800c660:	1b64      	subs	r4, r4, r5
 800c662:	10a4      	asrs	r4, r4, #2
 800c664:	42a6      	cmp	r6, r4
 800c666:	d109      	bne.n	800c67c <__libc_init_array+0x24>
 800c668:	f000 fbc6 	bl	800cdf8 <_init>
 800c66c:	2600      	movs	r6, #0
 800c66e:	4d0a      	ldr	r5, [pc, #40]	; (800c698 <__libc_init_array+0x40>)
 800c670:	4c0a      	ldr	r4, [pc, #40]	; (800c69c <__libc_init_array+0x44>)
 800c672:	1b64      	subs	r4, r4, r5
 800c674:	10a4      	asrs	r4, r4, #2
 800c676:	42a6      	cmp	r6, r4
 800c678:	d105      	bne.n	800c686 <__libc_init_array+0x2e>
 800c67a:	bd70      	pop	{r4, r5, r6, pc}
 800c67c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c680:	4798      	blx	r3
 800c682:	3601      	adds	r6, #1
 800c684:	e7ee      	b.n	800c664 <__libc_init_array+0xc>
 800c686:	f855 3b04 	ldr.w	r3, [r5], #4
 800c68a:	4798      	blx	r3
 800c68c:	3601      	adds	r6, #1
 800c68e:	e7f2      	b.n	800c676 <__libc_init_array+0x1e>
 800c690:	0800ddec 	.word	0x0800ddec
 800c694:	0800ddec 	.word	0x0800ddec
 800c698:	0800ddec 	.word	0x0800ddec
 800c69c:	0800ddf0 	.word	0x0800ddf0

0800c6a0 <__retarget_lock_acquire_recursive>:
 800c6a0:	4770      	bx	lr

0800c6a2 <__retarget_lock_release_recursive>:
 800c6a2:	4770      	bx	lr

0800c6a4 <memcpy>:
 800c6a4:	440a      	add	r2, r1
 800c6a6:	4291      	cmp	r1, r2
 800c6a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c6ac:	d100      	bne.n	800c6b0 <memcpy+0xc>
 800c6ae:	4770      	bx	lr
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6b6:	4291      	cmp	r1, r2
 800c6b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6bc:	d1f9      	bne.n	800c6b2 <memcpy+0xe>
 800c6be:	bd10      	pop	{r4, pc}

0800c6c0 <strcpy>:
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6c6:	f803 2b01 	strb.w	r2, [r3], #1
 800c6ca:	2a00      	cmp	r2, #0
 800c6cc:	d1f9      	bne.n	800c6c2 <strcpy+0x2>
 800c6ce:	4770      	bx	lr

0800c6d0 <_free_r>:
 800c6d0:	b538      	push	{r3, r4, r5, lr}
 800c6d2:	4605      	mov	r5, r0
 800c6d4:	2900      	cmp	r1, #0
 800c6d6:	d040      	beq.n	800c75a <_free_r+0x8a>
 800c6d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6dc:	1f0c      	subs	r4, r1, #4
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	bfb8      	it	lt
 800c6e2:	18e4      	addlt	r4, r4, r3
 800c6e4:	f7ff ff1c 	bl	800c520 <__malloc_lock>
 800c6e8:	4a1c      	ldr	r2, [pc, #112]	; (800c75c <_free_r+0x8c>)
 800c6ea:	6813      	ldr	r3, [r2, #0]
 800c6ec:	b933      	cbnz	r3, 800c6fc <_free_r+0x2c>
 800c6ee:	6063      	str	r3, [r4, #4]
 800c6f0:	6014      	str	r4, [r2, #0]
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6f8:	f7ff bf18 	b.w	800c52c <__malloc_unlock>
 800c6fc:	42a3      	cmp	r3, r4
 800c6fe:	d908      	bls.n	800c712 <_free_r+0x42>
 800c700:	6820      	ldr	r0, [r4, #0]
 800c702:	1821      	adds	r1, r4, r0
 800c704:	428b      	cmp	r3, r1
 800c706:	bf01      	itttt	eq
 800c708:	6819      	ldreq	r1, [r3, #0]
 800c70a:	685b      	ldreq	r3, [r3, #4]
 800c70c:	1809      	addeq	r1, r1, r0
 800c70e:	6021      	streq	r1, [r4, #0]
 800c710:	e7ed      	b.n	800c6ee <_free_r+0x1e>
 800c712:	461a      	mov	r2, r3
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	b10b      	cbz	r3, 800c71c <_free_r+0x4c>
 800c718:	42a3      	cmp	r3, r4
 800c71a:	d9fa      	bls.n	800c712 <_free_r+0x42>
 800c71c:	6811      	ldr	r1, [r2, #0]
 800c71e:	1850      	adds	r0, r2, r1
 800c720:	42a0      	cmp	r0, r4
 800c722:	d10b      	bne.n	800c73c <_free_r+0x6c>
 800c724:	6820      	ldr	r0, [r4, #0]
 800c726:	4401      	add	r1, r0
 800c728:	1850      	adds	r0, r2, r1
 800c72a:	4283      	cmp	r3, r0
 800c72c:	6011      	str	r1, [r2, #0]
 800c72e:	d1e0      	bne.n	800c6f2 <_free_r+0x22>
 800c730:	6818      	ldr	r0, [r3, #0]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	4408      	add	r0, r1
 800c736:	6010      	str	r0, [r2, #0]
 800c738:	6053      	str	r3, [r2, #4]
 800c73a:	e7da      	b.n	800c6f2 <_free_r+0x22>
 800c73c:	d902      	bls.n	800c744 <_free_r+0x74>
 800c73e:	230c      	movs	r3, #12
 800c740:	602b      	str	r3, [r5, #0]
 800c742:	e7d6      	b.n	800c6f2 <_free_r+0x22>
 800c744:	6820      	ldr	r0, [r4, #0]
 800c746:	1821      	adds	r1, r4, r0
 800c748:	428b      	cmp	r3, r1
 800c74a:	bf01      	itttt	eq
 800c74c:	6819      	ldreq	r1, [r3, #0]
 800c74e:	685b      	ldreq	r3, [r3, #4]
 800c750:	1809      	addeq	r1, r1, r0
 800c752:	6021      	streq	r1, [r4, #0]
 800c754:	6063      	str	r3, [r4, #4]
 800c756:	6054      	str	r4, [r2, #4]
 800c758:	e7cb      	b.n	800c6f2 <_free_r+0x22>
 800c75a:	bd38      	pop	{r3, r4, r5, pc}
 800c75c:	200003a0 	.word	0x200003a0

0800c760 <__ssputs_r>:
 800c760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c764:	461f      	mov	r7, r3
 800c766:	688e      	ldr	r6, [r1, #8]
 800c768:	4682      	mov	sl, r0
 800c76a:	42be      	cmp	r6, r7
 800c76c:	460c      	mov	r4, r1
 800c76e:	4690      	mov	r8, r2
 800c770:	680b      	ldr	r3, [r1, #0]
 800c772:	d82c      	bhi.n	800c7ce <__ssputs_r+0x6e>
 800c774:	898a      	ldrh	r2, [r1, #12]
 800c776:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c77a:	d026      	beq.n	800c7ca <__ssputs_r+0x6a>
 800c77c:	6965      	ldr	r5, [r4, #20]
 800c77e:	6909      	ldr	r1, [r1, #16]
 800c780:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c784:	eba3 0901 	sub.w	r9, r3, r1
 800c788:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c78c:	1c7b      	adds	r3, r7, #1
 800c78e:	444b      	add	r3, r9
 800c790:	106d      	asrs	r5, r5, #1
 800c792:	429d      	cmp	r5, r3
 800c794:	bf38      	it	cc
 800c796:	461d      	movcc	r5, r3
 800c798:	0553      	lsls	r3, r2, #21
 800c79a:	d527      	bpl.n	800c7ec <__ssputs_r+0x8c>
 800c79c:	4629      	mov	r1, r5
 800c79e:	f7ff fe0b 	bl	800c3b8 <_malloc_r>
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	b360      	cbz	r0, 800c800 <__ssputs_r+0xa0>
 800c7a6:	464a      	mov	r2, r9
 800c7a8:	6921      	ldr	r1, [r4, #16]
 800c7aa:	f7ff ff7b 	bl	800c6a4 <memcpy>
 800c7ae:	89a3      	ldrh	r3, [r4, #12]
 800c7b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7b8:	81a3      	strh	r3, [r4, #12]
 800c7ba:	6126      	str	r6, [r4, #16]
 800c7bc:	444e      	add	r6, r9
 800c7be:	6026      	str	r6, [r4, #0]
 800c7c0:	463e      	mov	r6, r7
 800c7c2:	6165      	str	r5, [r4, #20]
 800c7c4:	eba5 0509 	sub.w	r5, r5, r9
 800c7c8:	60a5      	str	r5, [r4, #8]
 800c7ca:	42be      	cmp	r6, r7
 800c7cc:	d900      	bls.n	800c7d0 <__ssputs_r+0x70>
 800c7ce:	463e      	mov	r6, r7
 800c7d0:	4632      	mov	r2, r6
 800c7d2:	4641      	mov	r1, r8
 800c7d4:	6820      	ldr	r0, [r4, #0]
 800c7d6:	f000 fade 	bl	800cd96 <memmove>
 800c7da:	2000      	movs	r0, #0
 800c7dc:	68a3      	ldr	r3, [r4, #8]
 800c7de:	1b9b      	subs	r3, r3, r6
 800c7e0:	60a3      	str	r3, [r4, #8]
 800c7e2:	6823      	ldr	r3, [r4, #0]
 800c7e4:	4433      	add	r3, r6
 800c7e6:	6023      	str	r3, [r4, #0]
 800c7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ec:	462a      	mov	r2, r5
 800c7ee:	f000 faa3 	bl	800cd38 <_realloc_r>
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d1e0      	bne.n	800c7ba <__ssputs_r+0x5a>
 800c7f8:	4650      	mov	r0, sl
 800c7fa:	6921      	ldr	r1, [r4, #16]
 800c7fc:	f7ff ff68 	bl	800c6d0 <_free_r>
 800c800:	230c      	movs	r3, #12
 800c802:	f8ca 3000 	str.w	r3, [sl]
 800c806:	89a3      	ldrh	r3, [r4, #12]
 800c808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c80c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c810:	81a3      	strh	r3, [r4, #12]
 800c812:	e7e9      	b.n	800c7e8 <__ssputs_r+0x88>

0800c814 <_svfiprintf_r>:
 800c814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c818:	4698      	mov	r8, r3
 800c81a:	898b      	ldrh	r3, [r1, #12]
 800c81c:	4607      	mov	r7, r0
 800c81e:	061b      	lsls	r3, r3, #24
 800c820:	460d      	mov	r5, r1
 800c822:	4614      	mov	r4, r2
 800c824:	b09d      	sub	sp, #116	; 0x74
 800c826:	d50e      	bpl.n	800c846 <_svfiprintf_r+0x32>
 800c828:	690b      	ldr	r3, [r1, #16]
 800c82a:	b963      	cbnz	r3, 800c846 <_svfiprintf_r+0x32>
 800c82c:	2140      	movs	r1, #64	; 0x40
 800c82e:	f7ff fdc3 	bl	800c3b8 <_malloc_r>
 800c832:	6028      	str	r0, [r5, #0]
 800c834:	6128      	str	r0, [r5, #16]
 800c836:	b920      	cbnz	r0, 800c842 <_svfiprintf_r+0x2e>
 800c838:	230c      	movs	r3, #12
 800c83a:	603b      	str	r3, [r7, #0]
 800c83c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c840:	e0d0      	b.n	800c9e4 <_svfiprintf_r+0x1d0>
 800c842:	2340      	movs	r3, #64	; 0x40
 800c844:	616b      	str	r3, [r5, #20]
 800c846:	2300      	movs	r3, #0
 800c848:	9309      	str	r3, [sp, #36]	; 0x24
 800c84a:	2320      	movs	r3, #32
 800c84c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c850:	2330      	movs	r3, #48	; 0x30
 800c852:	f04f 0901 	mov.w	r9, #1
 800c856:	f8cd 800c 	str.w	r8, [sp, #12]
 800c85a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c9fc <_svfiprintf_r+0x1e8>
 800c85e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c862:	4623      	mov	r3, r4
 800c864:	469a      	mov	sl, r3
 800c866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c86a:	b10a      	cbz	r2, 800c870 <_svfiprintf_r+0x5c>
 800c86c:	2a25      	cmp	r2, #37	; 0x25
 800c86e:	d1f9      	bne.n	800c864 <_svfiprintf_r+0x50>
 800c870:	ebba 0b04 	subs.w	fp, sl, r4
 800c874:	d00b      	beq.n	800c88e <_svfiprintf_r+0x7a>
 800c876:	465b      	mov	r3, fp
 800c878:	4622      	mov	r2, r4
 800c87a:	4629      	mov	r1, r5
 800c87c:	4638      	mov	r0, r7
 800c87e:	f7ff ff6f 	bl	800c760 <__ssputs_r>
 800c882:	3001      	adds	r0, #1
 800c884:	f000 80a9 	beq.w	800c9da <_svfiprintf_r+0x1c6>
 800c888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c88a:	445a      	add	r2, fp
 800c88c:	9209      	str	r2, [sp, #36]	; 0x24
 800c88e:	f89a 3000 	ldrb.w	r3, [sl]
 800c892:	2b00      	cmp	r3, #0
 800c894:	f000 80a1 	beq.w	800c9da <_svfiprintf_r+0x1c6>
 800c898:	2300      	movs	r3, #0
 800c89a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c89e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8a2:	f10a 0a01 	add.w	sl, sl, #1
 800c8a6:	9304      	str	r3, [sp, #16]
 800c8a8:	9307      	str	r3, [sp, #28]
 800c8aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8ae:	931a      	str	r3, [sp, #104]	; 0x68
 800c8b0:	4654      	mov	r4, sl
 800c8b2:	2205      	movs	r2, #5
 800c8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8b8:	4850      	ldr	r0, [pc, #320]	; (800c9fc <_svfiprintf_r+0x1e8>)
 800c8ba:	f000 fa86 	bl	800cdca <memchr>
 800c8be:	9a04      	ldr	r2, [sp, #16]
 800c8c0:	b9d8      	cbnz	r0, 800c8fa <_svfiprintf_r+0xe6>
 800c8c2:	06d0      	lsls	r0, r2, #27
 800c8c4:	bf44      	itt	mi
 800c8c6:	2320      	movmi	r3, #32
 800c8c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8cc:	0711      	lsls	r1, r2, #28
 800c8ce:	bf44      	itt	mi
 800c8d0:	232b      	movmi	r3, #43	; 0x2b
 800c8d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8d6:	f89a 3000 	ldrb.w	r3, [sl]
 800c8da:	2b2a      	cmp	r3, #42	; 0x2a
 800c8dc:	d015      	beq.n	800c90a <_svfiprintf_r+0xf6>
 800c8de:	4654      	mov	r4, sl
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	f04f 0c0a 	mov.w	ip, #10
 800c8e6:	9a07      	ldr	r2, [sp, #28]
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8ee:	3b30      	subs	r3, #48	; 0x30
 800c8f0:	2b09      	cmp	r3, #9
 800c8f2:	d94d      	bls.n	800c990 <_svfiprintf_r+0x17c>
 800c8f4:	b1b0      	cbz	r0, 800c924 <_svfiprintf_r+0x110>
 800c8f6:	9207      	str	r2, [sp, #28]
 800c8f8:	e014      	b.n	800c924 <_svfiprintf_r+0x110>
 800c8fa:	eba0 0308 	sub.w	r3, r0, r8
 800c8fe:	fa09 f303 	lsl.w	r3, r9, r3
 800c902:	4313      	orrs	r3, r2
 800c904:	46a2      	mov	sl, r4
 800c906:	9304      	str	r3, [sp, #16]
 800c908:	e7d2      	b.n	800c8b0 <_svfiprintf_r+0x9c>
 800c90a:	9b03      	ldr	r3, [sp, #12]
 800c90c:	1d19      	adds	r1, r3, #4
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	9103      	str	r1, [sp, #12]
 800c912:	2b00      	cmp	r3, #0
 800c914:	bfbb      	ittet	lt
 800c916:	425b      	neglt	r3, r3
 800c918:	f042 0202 	orrlt.w	r2, r2, #2
 800c91c:	9307      	strge	r3, [sp, #28]
 800c91e:	9307      	strlt	r3, [sp, #28]
 800c920:	bfb8      	it	lt
 800c922:	9204      	strlt	r2, [sp, #16]
 800c924:	7823      	ldrb	r3, [r4, #0]
 800c926:	2b2e      	cmp	r3, #46	; 0x2e
 800c928:	d10c      	bne.n	800c944 <_svfiprintf_r+0x130>
 800c92a:	7863      	ldrb	r3, [r4, #1]
 800c92c:	2b2a      	cmp	r3, #42	; 0x2a
 800c92e:	d134      	bne.n	800c99a <_svfiprintf_r+0x186>
 800c930:	9b03      	ldr	r3, [sp, #12]
 800c932:	3402      	adds	r4, #2
 800c934:	1d1a      	adds	r2, r3, #4
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	9203      	str	r2, [sp, #12]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	bfb8      	it	lt
 800c93e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c942:	9305      	str	r3, [sp, #20]
 800c944:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ca00 <_svfiprintf_r+0x1ec>
 800c948:	2203      	movs	r2, #3
 800c94a:	4650      	mov	r0, sl
 800c94c:	7821      	ldrb	r1, [r4, #0]
 800c94e:	f000 fa3c 	bl	800cdca <memchr>
 800c952:	b138      	cbz	r0, 800c964 <_svfiprintf_r+0x150>
 800c954:	2240      	movs	r2, #64	; 0x40
 800c956:	9b04      	ldr	r3, [sp, #16]
 800c958:	eba0 000a 	sub.w	r0, r0, sl
 800c95c:	4082      	lsls	r2, r0
 800c95e:	4313      	orrs	r3, r2
 800c960:	3401      	adds	r4, #1
 800c962:	9304      	str	r3, [sp, #16]
 800c964:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c968:	2206      	movs	r2, #6
 800c96a:	4826      	ldr	r0, [pc, #152]	; (800ca04 <_svfiprintf_r+0x1f0>)
 800c96c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c970:	f000 fa2b 	bl	800cdca <memchr>
 800c974:	2800      	cmp	r0, #0
 800c976:	d038      	beq.n	800c9ea <_svfiprintf_r+0x1d6>
 800c978:	4b23      	ldr	r3, [pc, #140]	; (800ca08 <_svfiprintf_r+0x1f4>)
 800c97a:	bb1b      	cbnz	r3, 800c9c4 <_svfiprintf_r+0x1b0>
 800c97c:	9b03      	ldr	r3, [sp, #12]
 800c97e:	3307      	adds	r3, #7
 800c980:	f023 0307 	bic.w	r3, r3, #7
 800c984:	3308      	adds	r3, #8
 800c986:	9303      	str	r3, [sp, #12]
 800c988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c98a:	4433      	add	r3, r6
 800c98c:	9309      	str	r3, [sp, #36]	; 0x24
 800c98e:	e768      	b.n	800c862 <_svfiprintf_r+0x4e>
 800c990:	460c      	mov	r4, r1
 800c992:	2001      	movs	r0, #1
 800c994:	fb0c 3202 	mla	r2, ip, r2, r3
 800c998:	e7a6      	b.n	800c8e8 <_svfiprintf_r+0xd4>
 800c99a:	2300      	movs	r3, #0
 800c99c:	f04f 0c0a 	mov.w	ip, #10
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	3401      	adds	r4, #1
 800c9a4:	9305      	str	r3, [sp, #20]
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9ac:	3a30      	subs	r2, #48	; 0x30
 800c9ae:	2a09      	cmp	r2, #9
 800c9b0:	d903      	bls.n	800c9ba <_svfiprintf_r+0x1a6>
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d0c6      	beq.n	800c944 <_svfiprintf_r+0x130>
 800c9b6:	9105      	str	r1, [sp, #20]
 800c9b8:	e7c4      	b.n	800c944 <_svfiprintf_r+0x130>
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	2301      	movs	r3, #1
 800c9be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9c2:	e7f0      	b.n	800c9a6 <_svfiprintf_r+0x192>
 800c9c4:	ab03      	add	r3, sp, #12
 800c9c6:	9300      	str	r3, [sp, #0]
 800c9c8:	462a      	mov	r2, r5
 800c9ca:	4638      	mov	r0, r7
 800c9cc:	4b0f      	ldr	r3, [pc, #60]	; (800ca0c <_svfiprintf_r+0x1f8>)
 800c9ce:	a904      	add	r1, sp, #16
 800c9d0:	f3af 8000 	nop.w
 800c9d4:	1c42      	adds	r2, r0, #1
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	d1d6      	bne.n	800c988 <_svfiprintf_r+0x174>
 800c9da:	89ab      	ldrh	r3, [r5, #12]
 800c9dc:	065b      	lsls	r3, r3, #25
 800c9de:	f53f af2d 	bmi.w	800c83c <_svfiprintf_r+0x28>
 800c9e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9e4:	b01d      	add	sp, #116	; 0x74
 800c9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ea:	ab03      	add	r3, sp, #12
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	462a      	mov	r2, r5
 800c9f0:	4638      	mov	r0, r7
 800c9f2:	4b06      	ldr	r3, [pc, #24]	; (800ca0c <_svfiprintf_r+0x1f8>)
 800c9f4:	a904      	add	r1, sp, #16
 800c9f6:	f000 f87d 	bl	800caf4 <_printf_i>
 800c9fa:	e7eb      	b.n	800c9d4 <_svfiprintf_r+0x1c0>
 800c9fc:	0800ddb7 	.word	0x0800ddb7
 800ca00:	0800ddbd 	.word	0x0800ddbd
 800ca04:	0800ddc1 	.word	0x0800ddc1
 800ca08:	00000000 	.word	0x00000000
 800ca0c:	0800c761 	.word	0x0800c761

0800ca10 <_printf_common>:
 800ca10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca14:	4616      	mov	r6, r2
 800ca16:	4699      	mov	r9, r3
 800ca18:	688a      	ldr	r2, [r1, #8]
 800ca1a:	690b      	ldr	r3, [r1, #16]
 800ca1c:	4607      	mov	r7, r0
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	bfb8      	it	lt
 800ca22:	4613      	movlt	r3, r2
 800ca24:	6033      	str	r3, [r6, #0]
 800ca26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca2a:	460c      	mov	r4, r1
 800ca2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca30:	b10a      	cbz	r2, 800ca36 <_printf_common+0x26>
 800ca32:	3301      	adds	r3, #1
 800ca34:	6033      	str	r3, [r6, #0]
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	0699      	lsls	r1, r3, #26
 800ca3a:	bf42      	ittt	mi
 800ca3c:	6833      	ldrmi	r3, [r6, #0]
 800ca3e:	3302      	addmi	r3, #2
 800ca40:	6033      	strmi	r3, [r6, #0]
 800ca42:	6825      	ldr	r5, [r4, #0]
 800ca44:	f015 0506 	ands.w	r5, r5, #6
 800ca48:	d106      	bne.n	800ca58 <_printf_common+0x48>
 800ca4a:	f104 0a19 	add.w	sl, r4, #25
 800ca4e:	68e3      	ldr	r3, [r4, #12]
 800ca50:	6832      	ldr	r2, [r6, #0]
 800ca52:	1a9b      	subs	r3, r3, r2
 800ca54:	42ab      	cmp	r3, r5
 800ca56:	dc2b      	bgt.n	800cab0 <_printf_common+0xa0>
 800ca58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca5c:	1e13      	subs	r3, r2, #0
 800ca5e:	6822      	ldr	r2, [r4, #0]
 800ca60:	bf18      	it	ne
 800ca62:	2301      	movne	r3, #1
 800ca64:	0692      	lsls	r2, r2, #26
 800ca66:	d430      	bmi.n	800caca <_printf_common+0xba>
 800ca68:	4649      	mov	r1, r9
 800ca6a:	4638      	mov	r0, r7
 800ca6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca70:	47c0      	blx	r8
 800ca72:	3001      	adds	r0, #1
 800ca74:	d023      	beq.n	800cabe <_printf_common+0xae>
 800ca76:	6823      	ldr	r3, [r4, #0]
 800ca78:	6922      	ldr	r2, [r4, #16]
 800ca7a:	f003 0306 	and.w	r3, r3, #6
 800ca7e:	2b04      	cmp	r3, #4
 800ca80:	bf14      	ite	ne
 800ca82:	2500      	movne	r5, #0
 800ca84:	6833      	ldreq	r3, [r6, #0]
 800ca86:	f04f 0600 	mov.w	r6, #0
 800ca8a:	bf08      	it	eq
 800ca8c:	68e5      	ldreq	r5, [r4, #12]
 800ca8e:	f104 041a 	add.w	r4, r4, #26
 800ca92:	bf08      	it	eq
 800ca94:	1aed      	subeq	r5, r5, r3
 800ca96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ca9a:	bf08      	it	eq
 800ca9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800caa0:	4293      	cmp	r3, r2
 800caa2:	bfc4      	itt	gt
 800caa4:	1a9b      	subgt	r3, r3, r2
 800caa6:	18ed      	addgt	r5, r5, r3
 800caa8:	42b5      	cmp	r5, r6
 800caaa:	d11a      	bne.n	800cae2 <_printf_common+0xd2>
 800caac:	2000      	movs	r0, #0
 800caae:	e008      	b.n	800cac2 <_printf_common+0xb2>
 800cab0:	2301      	movs	r3, #1
 800cab2:	4652      	mov	r2, sl
 800cab4:	4649      	mov	r1, r9
 800cab6:	4638      	mov	r0, r7
 800cab8:	47c0      	blx	r8
 800caba:	3001      	adds	r0, #1
 800cabc:	d103      	bne.n	800cac6 <_printf_common+0xb6>
 800cabe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac6:	3501      	adds	r5, #1
 800cac8:	e7c1      	b.n	800ca4e <_printf_common+0x3e>
 800caca:	2030      	movs	r0, #48	; 0x30
 800cacc:	18e1      	adds	r1, r4, r3
 800cace:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cad2:	1c5a      	adds	r2, r3, #1
 800cad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cad8:	4422      	add	r2, r4
 800cada:	3302      	adds	r3, #2
 800cadc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cae0:	e7c2      	b.n	800ca68 <_printf_common+0x58>
 800cae2:	2301      	movs	r3, #1
 800cae4:	4622      	mov	r2, r4
 800cae6:	4649      	mov	r1, r9
 800cae8:	4638      	mov	r0, r7
 800caea:	47c0      	blx	r8
 800caec:	3001      	adds	r0, #1
 800caee:	d0e6      	beq.n	800cabe <_printf_common+0xae>
 800caf0:	3601      	adds	r6, #1
 800caf2:	e7d9      	b.n	800caa8 <_printf_common+0x98>

0800caf4 <_printf_i>:
 800caf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caf8:	7e0f      	ldrb	r7, [r1, #24]
 800cafa:	4691      	mov	r9, r2
 800cafc:	2f78      	cmp	r7, #120	; 0x78
 800cafe:	4680      	mov	r8, r0
 800cb00:	460c      	mov	r4, r1
 800cb02:	469a      	mov	sl, r3
 800cb04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb0a:	d807      	bhi.n	800cb1c <_printf_i+0x28>
 800cb0c:	2f62      	cmp	r7, #98	; 0x62
 800cb0e:	d80a      	bhi.n	800cb26 <_printf_i+0x32>
 800cb10:	2f00      	cmp	r7, #0
 800cb12:	f000 80d5 	beq.w	800ccc0 <_printf_i+0x1cc>
 800cb16:	2f58      	cmp	r7, #88	; 0x58
 800cb18:	f000 80c1 	beq.w	800cc9e <_printf_i+0x1aa>
 800cb1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb24:	e03a      	b.n	800cb9c <_printf_i+0xa8>
 800cb26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb2a:	2b15      	cmp	r3, #21
 800cb2c:	d8f6      	bhi.n	800cb1c <_printf_i+0x28>
 800cb2e:	a101      	add	r1, pc, #4	; (adr r1, 800cb34 <_printf_i+0x40>)
 800cb30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb34:	0800cb8d 	.word	0x0800cb8d
 800cb38:	0800cba1 	.word	0x0800cba1
 800cb3c:	0800cb1d 	.word	0x0800cb1d
 800cb40:	0800cb1d 	.word	0x0800cb1d
 800cb44:	0800cb1d 	.word	0x0800cb1d
 800cb48:	0800cb1d 	.word	0x0800cb1d
 800cb4c:	0800cba1 	.word	0x0800cba1
 800cb50:	0800cb1d 	.word	0x0800cb1d
 800cb54:	0800cb1d 	.word	0x0800cb1d
 800cb58:	0800cb1d 	.word	0x0800cb1d
 800cb5c:	0800cb1d 	.word	0x0800cb1d
 800cb60:	0800cca7 	.word	0x0800cca7
 800cb64:	0800cbcd 	.word	0x0800cbcd
 800cb68:	0800cc61 	.word	0x0800cc61
 800cb6c:	0800cb1d 	.word	0x0800cb1d
 800cb70:	0800cb1d 	.word	0x0800cb1d
 800cb74:	0800ccc9 	.word	0x0800ccc9
 800cb78:	0800cb1d 	.word	0x0800cb1d
 800cb7c:	0800cbcd 	.word	0x0800cbcd
 800cb80:	0800cb1d 	.word	0x0800cb1d
 800cb84:	0800cb1d 	.word	0x0800cb1d
 800cb88:	0800cc69 	.word	0x0800cc69
 800cb8c:	682b      	ldr	r3, [r5, #0]
 800cb8e:	1d1a      	adds	r2, r3, #4
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	602a      	str	r2, [r5, #0]
 800cb94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e0a0      	b.n	800cce2 <_printf_i+0x1ee>
 800cba0:	6820      	ldr	r0, [r4, #0]
 800cba2:	682b      	ldr	r3, [r5, #0]
 800cba4:	0607      	lsls	r7, r0, #24
 800cba6:	f103 0104 	add.w	r1, r3, #4
 800cbaa:	6029      	str	r1, [r5, #0]
 800cbac:	d501      	bpl.n	800cbb2 <_printf_i+0xbe>
 800cbae:	681e      	ldr	r6, [r3, #0]
 800cbb0:	e003      	b.n	800cbba <_printf_i+0xc6>
 800cbb2:	0646      	lsls	r6, r0, #25
 800cbb4:	d5fb      	bpl.n	800cbae <_printf_i+0xba>
 800cbb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cbba:	2e00      	cmp	r6, #0
 800cbbc:	da03      	bge.n	800cbc6 <_printf_i+0xd2>
 800cbbe:	232d      	movs	r3, #45	; 0x2d
 800cbc0:	4276      	negs	r6, r6
 800cbc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbc6:	230a      	movs	r3, #10
 800cbc8:	4859      	ldr	r0, [pc, #356]	; (800cd30 <_printf_i+0x23c>)
 800cbca:	e012      	b.n	800cbf2 <_printf_i+0xfe>
 800cbcc:	682b      	ldr	r3, [r5, #0]
 800cbce:	6820      	ldr	r0, [r4, #0]
 800cbd0:	1d19      	adds	r1, r3, #4
 800cbd2:	6029      	str	r1, [r5, #0]
 800cbd4:	0605      	lsls	r5, r0, #24
 800cbd6:	d501      	bpl.n	800cbdc <_printf_i+0xe8>
 800cbd8:	681e      	ldr	r6, [r3, #0]
 800cbda:	e002      	b.n	800cbe2 <_printf_i+0xee>
 800cbdc:	0641      	lsls	r1, r0, #25
 800cbde:	d5fb      	bpl.n	800cbd8 <_printf_i+0xe4>
 800cbe0:	881e      	ldrh	r6, [r3, #0]
 800cbe2:	2f6f      	cmp	r7, #111	; 0x6f
 800cbe4:	bf0c      	ite	eq
 800cbe6:	2308      	moveq	r3, #8
 800cbe8:	230a      	movne	r3, #10
 800cbea:	4851      	ldr	r0, [pc, #324]	; (800cd30 <_printf_i+0x23c>)
 800cbec:	2100      	movs	r1, #0
 800cbee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbf2:	6865      	ldr	r5, [r4, #4]
 800cbf4:	2d00      	cmp	r5, #0
 800cbf6:	bfa8      	it	ge
 800cbf8:	6821      	ldrge	r1, [r4, #0]
 800cbfa:	60a5      	str	r5, [r4, #8]
 800cbfc:	bfa4      	itt	ge
 800cbfe:	f021 0104 	bicge.w	r1, r1, #4
 800cc02:	6021      	strge	r1, [r4, #0]
 800cc04:	b90e      	cbnz	r6, 800cc0a <_printf_i+0x116>
 800cc06:	2d00      	cmp	r5, #0
 800cc08:	d04b      	beq.n	800cca2 <_printf_i+0x1ae>
 800cc0a:	4615      	mov	r5, r2
 800cc0c:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc10:	fb03 6711 	mls	r7, r3, r1, r6
 800cc14:	5dc7      	ldrb	r7, [r0, r7]
 800cc16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc1a:	4637      	mov	r7, r6
 800cc1c:	42bb      	cmp	r3, r7
 800cc1e:	460e      	mov	r6, r1
 800cc20:	d9f4      	bls.n	800cc0c <_printf_i+0x118>
 800cc22:	2b08      	cmp	r3, #8
 800cc24:	d10b      	bne.n	800cc3e <_printf_i+0x14a>
 800cc26:	6823      	ldr	r3, [r4, #0]
 800cc28:	07de      	lsls	r6, r3, #31
 800cc2a:	d508      	bpl.n	800cc3e <_printf_i+0x14a>
 800cc2c:	6923      	ldr	r3, [r4, #16]
 800cc2e:	6861      	ldr	r1, [r4, #4]
 800cc30:	4299      	cmp	r1, r3
 800cc32:	bfde      	ittt	le
 800cc34:	2330      	movle	r3, #48	; 0x30
 800cc36:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc3a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cc3e:	1b52      	subs	r2, r2, r5
 800cc40:	6122      	str	r2, [r4, #16]
 800cc42:	464b      	mov	r3, r9
 800cc44:	4621      	mov	r1, r4
 800cc46:	4640      	mov	r0, r8
 800cc48:	f8cd a000 	str.w	sl, [sp]
 800cc4c:	aa03      	add	r2, sp, #12
 800cc4e:	f7ff fedf 	bl	800ca10 <_printf_common>
 800cc52:	3001      	adds	r0, #1
 800cc54:	d14a      	bne.n	800ccec <_printf_i+0x1f8>
 800cc56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc5a:	b004      	add	sp, #16
 800cc5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc60:	6823      	ldr	r3, [r4, #0]
 800cc62:	f043 0320 	orr.w	r3, r3, #32
 800cc66:	6023      	str	r3, [r4, #0]
 800cc68:	2778      	movs	r7, #120	; 0x78
 800cc6a:	4832      	ldr	r0, [pc, #200]	; (800cd34 <_printf_i+0x240>)
 800cc6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	6829      	ldr	r1, [r5, #0]
 800cc74:	061f      	lsls	r7, r3, #24
 800cc76:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc7a:	d402      	bmi.n	800cc82 <_printf_i+0x18e>
 800cc7c:	065f      	lsls	r7, r3, #25
 800cc7e:	bf48      	it	mi
 800cc80:	b2b6      	uxthmi	r6, r6
 800cc82:	07df      	lsls	r7, r3, #31
 800cc84:	bf48      	it	mi
 800cc86:	f043 0320 	orrmi.w	r3, r3, #32
 800cc8a:	6029      	str	r1, [r5, #0]
 800cc8c:	bf48      	it	mi
 800cc8e:	6023      	strmi	r3, [r4, #0]
 800cc90:	b91e      	cbnz	r6, 800cc9a <_printf_i+0x1a6>
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	f023 0320 	bic.w	r3, r3, #32
 800cc98:	6023      	str	r3, [r4, #0]
 800cc9a:	2310      	movs	r3, #16
 800cc9c:	e7a6      	b.n	800cbec <_printf_i+0xf8>
 800cc9e:	4824      	ldr	r0, [pc, #144]	; (800cd30 <_printf_i+0x23c>)
 800cca0:	e7e4      	b.n	800cc6c <_printf_i+0x178>
 800cca2:	4615      	mov	r5, r2
 800cca4:	e7bd      	b.n	800cc22 <_printf_i+0x12e>
 800cca6:	682b      	ldr	r3, [r5, #0]
 800cca8:	6826      	ldr	r6, [r4, #0]
 800ccaa:	1d18      	adds	r0, r3, #4
 800ccac:	6961      	ldr	r1, [r4, #20]
 800ccae:	6028      	str	r0, [r5, #0]
 800ccb0:	0635      	lsls	r5, r6, #24
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	d501      	bpl.n	800ccba <_printf_i+0x1c6>
 800ccb6:	6019      	str	r1, [r3, #0]
 800ccb8:	e002      	b.n	800ccc0 <_printf_i+0x1cc>
 800ccba:	0670      	lsls	r0, r6, #25
 800ccbc:	d5fb      	bpl.n	800ccb6 <_printf_i+0x1c2>
 800ccbe:	8019      	strh	r1, [r3, #0]
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	4615      	mov	r5, r2
 800ccc4:	6123      	str	r3, [r4, #16]
 800ccc6:	e7bc      	b.n	800cc42 <_printf_i+0x14e>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	2100      	movs	r1, #0
 800cccc:	1d1a      	adds	r2, r3, #4
 800ccce:	602a      	str	r2, [r5, #0]
 800ccd0:	681d      	ldr	r5, [r3, #0]
 800ccd2:	6862      	ldr	r2, [r4, #4]
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f000 f878 	bl	800cdca <memchr>
 800ccda:	b108      	cbz	r0, 800cce0 <_printf_i+0x1ec>
 800ccdc:	1b40      	subs	r0, r0, r5
 800ccde:	6060      	str	r0, [r4, #4]
 800cce0:	6863      	ldr	r3, [r4, #4]
 800cce2:	6123      	str	r3, [r4, #16]
 800cce4:	2300      	movs	r3, #0
 800cce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccea:	e7aa      	b.n	800cc42 <_printf_i+0x14e>
 800ccec:	462a      	mov	r2, r5
 800ccee:	4649      	mov	r1, r9
 800ccf0:	4640      	mov	r0, r8
 800ccf2:	6923      	ldr	r3, [r4, #16]
 800ccf4:	47d0      	blx	sl
 800ccf6:	3001      	adds	r0, #1
 800ccf8:	d0ad      	beq.n	800cc56 <_printf_i+0x162>
 800ccfa:	6823      	ldr	r3, [r4, #0]
 800ccfc:	079b      	lsls	r3, r3, #30
 800ccfe:	d413      	bmi.n	800cd28 <_printf_i+0x234>
 800cd00:	68e0      	ldr	r0, [r4, #12]
 800cd02:	9b03      	ldr	r3, [sp, #12]
 800cd04:	4298      	cmp	r0, r3
 800cd06:	bfb8      	it	lt
 800cd08:	4618      	movlt	r0, r3
 800cd0a:	e7a6      	b.n	800cc5a <_printf_i+0x166>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	4632      	mov	r2, r6
 800cd10:	4649      	mov	r1, r9
 800cd12:	4640      	mov	r0, r8
 800cd14:	47d0      	blx	sl
 800cd16:	3001      	adds	r0, #1
 800cd18:	d09d      	beq.n	800cc56 <_printf_i+0x162>
 800cd1a:	3501      	adds	r5, #1
 800cd1c:	68e3      	ldr	r3, [r4, #12]
 800cd1e:	9903      	ldr	r1, [sp, #12]
 800cd20:	1a5b      	subs	r3, r3, r1
 800cd22:	42ab      	cmp	r3, r5
 800cd24:	dcf2      	bgt.n	800cd0c <_printf_i+0x218>
 800cd26:	e7eb      	b.n	800cd00 <_printf_i+0x20c>
 800cd28:	2500      	movs	r5, #0
 800cd2a:	f104 0619 	add.w	r6, r4, #25
 800cd2e:	e7f5      	b.n	800cd1c <_printf_i+0x228>
 800cd30:	0800ddc8 	.word	0x0800ddc8
 800cd34:	0800ddd9 	.word	0x0800ddd9

0800cd38 <_realloc_r>:
 800cd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd3c:	4680      	mov	r8, r0
 800cd3e:	4614      	mov	r4, r2
 800cd40:	460e      	mov	r6, r1
 800cd42:	b921      	cbnz	r1, 800cd4e <_realloc_r+0x16>
 800cd44:	4611      	mov	r1, r2
 800cd46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd4a:	f7ff bb35 	b.w	800c3b8 <_malloc_r>
 800cd4e:	b92a      	cbnz	r2, 800cd5c <_realloc_r+0x24>
 800cd50:	f7ff fcbe 	bl	800c6d0 <_free_r>
 800cd54:	4625      	mov	r5, r4
 800cd56:	4628      	mov	r0, r5
 800cd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd5c:	f000 f843 	bl	800cde6 <_malloc_usable_size_r>
 800cd60:	4284      	cmp	r4, r0
 800cd62:	4607      	mov	r7, r0
 800cd64:	d802      	bhi.n	800cd6c <_realloc_r+0x34>
 800cd66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd6a:	d812      	bhi.n	800cd92 <_realloc_r+0x5a>
 800cd6c:	4621      	mov	r1, r4
 800cd6e:	4640      	mov	r0, r8
 800cd70:	f7ff fb22 	bl	800c3b8 <_malloc_r>
 800cd74:	4605      	mov	r5, r0
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d0ed      	beq.n	800cd56 <_realloc_r+0x1e>
 800cd7a:	42bc      	cmp	r4, r7
 800cd7c:	4622      	mov	r2, r4
 800cd7e:	4631      	mov	r1, r6
 800cd80:	bf28      	it	cs
 800cd82:	463a      	movcs	r2, r7
 800cd84:	f7ff fc8e 	bl	800c6a4 <memcpy>
 800cd88:	4631      	mov	r1, r6
 800cd8a:	4640      	mov	r0, r8
 800cd8c:	f7ff fca0 	bl	800c6d0 <_free_r>
 800cd90:	e7e1      	b.n	800cd56 <_realloc_r+0x1e>
 800cd92:	4635      	mov	r5, r6
 800cd94:	e7df      	b.n	800cd56 <_realloc_r+0x1e>

0800cd96 <memmove>:
 800cd96:	4288      	cmp	r0, r1
 800cd98:	b510      	push	{r4, lr}
 800cd9a:	eb01 0402 	add.w	r4, r1, r2
 800cd9e:	d902      	bls.n	800cda6 <memmove+0x10>
 800cda0:	4284      	cmp	r4, r0
 800cda2:	4623      	mov	r3, r4
 800cda4:	d807      	bhi.n	800cdb6 <memmove+0x20>
 800cda6:	1e43      	subs	r3, r0, #1
 800cda8:	42a1      	cmp	r1, r4
 800cdaa:	d008      	beq.n	800cdbe <memmove+0x28>
 800cdac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdb4:	e7f8      	b.n	800cda8 <memmove+0x12>
 800cdb6:	4601      	mov	r1, r0
 800cdb8:	4402      	add	r2, r0
 800cdba:	428a      	cmp	r2, r1
 800cdbc:	d100      	bne.n	800cdc0 <memmove+0x2a>
 800cdbe:	bd10      	pop	{r4, pc}
 800cdc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cdc4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cdc8:	e7f7      	b.n	800cdba <memmove+0x24>

0800cdca <memchr>:
 800cdca:	4603      	mov	r3, r0
 800cdcc:	b510      	push	{r4, lr}
 800cdce:	b2c9      	uxtb	r1, r1
 800cdd0:	4402      	add	r2, r0
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	d101      	bne.n	800cddc <memchr+0x12>
 800cdd8:	2000      	movs	r0, #0
 800cdda:	e003      	b.n	800cde4 <memchr+0x1a>
 800cddc:	7804      	ldrb	r4, [r0, #0]
 800cdde:	3301      	adds	r3, #1
 800cde0:	428c      	cmp	r4, r1
 800cde2:	d1f6      	bne.n	800cdd2 <memchr+0x8>
 800cde4:	bd10      	pop	{r4, pc}

0800cde6 <_malloc_usable_size_r>:
 800cde6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdea:	1f18      	subs	r0, r3, #4
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	bfbc      	itt	lt
 800cdf0:	580b      	ldrlt	r3, [r1, r0]
 800cdf2:	18c0      	addlt	r0, r0, r3
 800cdf4:	4770      	bx	lr
	...

0800cdf8 <_init>:
 800cdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdfa:	bf00      	nop
 800cdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdfe:	bc08      	pop	{r3}
 800ce00:	469e      	mov	lr, r3
 800ce02:	4770      	bx	lr

0800ce04 <_fini>:
 800ce04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce06:	bf00      	nop
 800ce08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce0a:	bc08      	pop	{r3}
 800ce0c:	469e      	mov	lr, r3
 800ce0e:	4770      	bx	lr
